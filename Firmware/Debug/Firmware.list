
Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006688  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08006748  08006748  00016748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006784  08006784  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08006784  08006784  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006784  08006784  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006784  08006784  00016784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006788  08006788  00016788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800678c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  2000008c  08006818  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003e4  08006818  000203e4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000162fc  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d36  00000000  00000000  000363b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001418  00000000  00000000  000390e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012f8  00000000  00000000  0003a500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014529  00000000  00000000  0003b7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018bde  00000000  00000000  0004fd21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079038  00000000  00000000  000688ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e1937  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004afc  00000000  00000000  000e1988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000008c 	.word	0x2000008c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006730 	.word	0x08006730

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000090 	.word	0x20000090
 8000104:	08006730 	.word	0x08006730

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000224:	f3bf 8f4f 	dsb	sy
}
 8000228:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800022a:	4b04      	ldr	r3, [pc, #16]	; (800023c <__NVIC_SystemReset+0x1c>)
 800022c:	4a04      	ldr	r2, [pc, #16]	; (8000240 <__NVIC_SystemReset+0x20>)
 800022e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000230:	f3bf 8f4f 	dsb	sy
}
 8000234:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000236:	46c0      	nop			; (mov r8, r8)
 8000238:	e7fd      	b.n	8000236 <__NVIC_SystemReset+0x16>
 800023a:	46c0      	nop			; (mov r8, r8)
 800023c:	e000ed00 	.word	0xe000ed00
 8000240:	05fa0004 	.word	0x05fa0004

08000244 <fillErpaBuffer>:
int hk_counter = 0;

int startupTimer = 0;


uint8_t *fillErpaBuffer(erpaData data) {
 8000244:	b084      	sub	sp, #16
 8000246:	b5b0      	push	{r4, r5, r7, lr}
 8000248:	b082      	sub	sp, #8
 800024a:	af00      	add	r7, sp, #0
 800024c:	2518      	movs	r5, #24
 800024e:	197c      	adds	r4, r7, r5
 8000250:	6020      	str	r0, [r4, #0]
 8000252:	6061      	str	r1, [r4, #4]
 8000254:	60a2      	str	r2, [r4, #8]
 8000256:	60e3      	str	r3, [r4, #12]

	uint8_t *erpa_ret = malloc(16 * sizeof(uint8_t));
 8000258:	2010      	movs	r0, #16
 800025a:	f006 f99b 	bl	8006594 <malloc>
 800025e:	0003      	movs	r3, r0
 8000260:	607b      	str	r3, [r7, #4]

	erpa_ret[0] = data.sync; // ERPA SYNC 0xAA MSB
 8000262:	0029      	movs	r1, r5
 8000264:	187b      	adds	r3, r7, r1
 8000266:	781a      	ldrb	r2, [r3, #0]
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	701a      	strb	r2, [r3, #0]
	erpa_ret[1] = data.sync; // ERPA SYNC 0xAA LSB
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	1c5a      	adds	r2, r3, #1
 8000270:	187b      	adds	r3, r7, r1
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	7013      	strb	r3, [r2, #0]
	erpa_ret[2] = ((erpa_seq & 0xFF00) >> 8); // ERPA SEQ # MSB
 8000276:	4b36      	ldr	r3, [pc, #216]	; (8000350 <fillErpaBuffer+0x10c>)
 8000278:	881b      	ldrh	r3, [r3, #0]
 800027a:	0a1b      	lsrs	r3, r3, #8
 800027c:	b29a      	uxth	r2, r3
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	3302      	adds	r3, #2
 8000282:	b2d2      	uxtb	r2, r2
 8000284:	701a      	strb	r2, [r3, #0]
	erpa_ret[3] = (erpa_seq & 0xFF); // ERPA SEQ # MSB
 8000286:	4b32      	ldr	r3, [pc, #200]	; (8000350 <fillErpaBuffer+0x10c>)
 8000288:	881a      	ldrh	r2, [r3, #0]
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	3303      	adds	r3, #3
 800028e:	b2d2      	uxtb	r2, r2
 8000290:	701a      	strb	r2, [r3, #0]
	erpa_ret[4] = ((data.spiData & 0xFF00) >> 8); // ERPA eADC MSB
 8000292:	187b      	adds	r3, r7, r1
 8000294:	685b      	ldr	r3, [r3, #4]
 8000296:	121a      	asrs	r2, r3, #8
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	3304      	adds	r3, #4
 800029c:	b2d2      	uxtb	r2, r2
 800029e:	701a      	strb	r2, [r3, #0]
	erpa_ret[5] = (data.spiData & 0xFF); // ERPA eADC LSB
 80002a0:	187b      	adds	r3, r7, r1
 80002a2:	685a      	ldr	r2, [r3, #4]
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	3305      	adds	r3, #5
 80002a8:	b2d2      	uxtb	r2, r2
 80002aa:	701a      	strb	r2, [r3, #0]
	erpa_ret[6] = ((data.swpComm & 0xFF00) >> 8); //SWP Commanded MSB
 80002ac:	187b      	adds	r3, r7, r1
 80002ae:	689b      	ldr	r3, [r3, #8]
 80002b0:	0a1a      	lsrs	r2, r3, #8
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	3306      	adds	r3, #6
 80002b6:	b2d2      	uxtb	r2, r2
 80002b8:	701a      	strb	r2, [r3, #0]
	erpa_ret[7] = (data.swpComm & 0xFF); //SWP Commanded LSB
 80002ba:	187b      	adds	r3, r7, r1
 80002bc:	689a      	ldr	r2, [r3, #8]
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	3307      	adds	r3, #7
 80002c2:	b2d2      	uxtb	r2, r2
 80002c4:	701a      	strb	r2, [r3, #0]
	erpa_ret[8] = ((data.swpMon & 0xFF00) >> 8); // SWP Monitored MSB
 80002c6:	187b      	adds	r3, r7, r1
 80002c8:	68db      	ldr	r3, [r3, #12]
 80002ca:	0a1a      	lsrs	r2, r3, #8
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	3308      	adds	r3, #8
 80002d0:	b2d2      	uxtb	r2, r2
 80002d2:	701a      	strb	r2, [r3, #0]
	erpa_ret[9] = (data.swpMon & 0xFF); // SWP Monitored LSB
 80002d4:	187b      	adds	r3, r7, r1
 80002d6:	68da      	ldr	r2, [r3, #12]
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	3309      	adds	r3, #9
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	701a      	strb	r2, [r3, #0]
	erpa_ret[10] = ((data.tmp1 & 0xFF00) >> 8); // TEMPURATURE 1 MSB
 80002e0:	187b      	adds	r3, r7, r1
 80002e2:	8a5b      	ldrh	r3, [r3, #18]
 80002e4:	0a1b      	lsrs	r3, r3, #8
 80002e6:	b29a      	uxth	r2, r3
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	330a      	adds	r3, #10
 80002ec:	b2d2      	uxtb	r2, r2
 80002ee:	701a      	strb	r2, [r3, #0]
	erpa_ret[11] = (data.tmp1 & 0xFF); // TEMPURATURE 1 LSB
 80002f0:	187b      	adds	r3, r7, r1
 80002f2:	8a5a      	ldrh	r2, [r3, #18]
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	330b      	adds	r3, #11
 80002f8:	b2d2      	uxtb	r2, r2
 80002fa:	701a      	strb	r2, [r3, #0]
	erpa_ret[12] = ((data.tmp2 & 0xFF00) >> 8); // TEMPURATURE 2 MSB
 80002fc:	187b      	adds	r3, r7, r1
 80002fe:	8a9b      	ldrh	r3, [r3, #20]
 8000300:	0a1b      	lsrs	r3, r3, #8
 8000302:	b29a      	uxth	r2, r3
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	330c      	adds	r3, #12
 8000308:	b2d2      	uxtb	r2, r2
 800030a:	701a      	strb	r2, [r3, #0]
	erpa_ret[13] = (data.tmp2 & 0xFF); // TEMPURATURE 2 LSB
 800030c:	187b      	adds	r3, r7, r1
 800030e:	8a9a      	ldrh	r2, [r3, #20]
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	330d      	adds	r3, #13
 8000314:	b2d2      	uxtb	r2, r2
 8000316:	701a      	strb	r2, [r3, #0]
	erpa_ret[14] = ((data.endMon & 0xFF00) >> 8); // ENDmon MSB
 8000318:	187b      	adds	r3, r7, r1
 800031a:	8a1b      	ldrh	r3, [r3, #16]
 800031c:	0a1b      	lsrs	r3, r3, #8
 800031e:	b29a      	uxth	r2, r3
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	330e      	adds	r3, #14
 8000324:	b2d2      	uxtb	r2, r2
 8000326:	701a      	strb	r2, [r3, #0]
	erpa_ret[15] = (data.endMon & 0xFF); // ENDmon LSB
 8000328:	187b      	adds	r3, r7, r1
 800032a:	8a1a      	ldrh	r2, [r3, #16]
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	330f      	adds	r3, #15
 8000330:	b2d2      	uxtb	r2, r2
 8000332:	701a      	strb	r2, [r3, #0]

	erpa_seq++;
 8000334:	4b06      	ldr	r3, [pc, #24]	; (8000350 <fillErpaBuffer+0x10c>)
 8000336:	881b      	ldrh	r3, [r3, #0]
 8000338:	3301      	adds	r3, #1
 800033a:	b29a      	uxth	r2, r3
 800033c:	4b04      	ldr	r3, [pc, #16]	; (8000350 <fillErpaBuffer+0x10c>)
 800033e:	801a      	strh	r2, [r3, #0]

	return erpa_ret;
 8000340:	687b      	ldr	r3, [r7, #4]
}
 8000342:	0018      	movs	r0, r3
 8000344:	46bd      	mov	sp, r7
 8000346:	b002      	add	sp, #8
 8000348:	bcb0      	pop	{r4, r5, r7}
 800034a:	bc08      	pop	{r3}
 800034c:	b004      	add	sp, #16
 800034e:	4718      	bx	r3
 8000350:	200003a0 	.word	0x200003a0

08000354 <HAL_TIM_OC_DelayElapsedCallback>:


void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8000354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000356:	b093      	sub	sp, #76	; 0x4c
 8000358:	af02      	add	r7, sp, #8
 800035a:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 800035c:	687a      	ldr	r2, [r7, #4]
 800035e:	4bbe      	ldr	r3, [pc, #760]	; (8000658 <HAL_TIM_OC_DelayElapsedCallback+0x304>)
 8000360:	429a      	cmp	r2, r3
 8000362:	d000      	beq.n	8000366 <HAL_TIM_OC_DelayElapsedCallback+0x12>
 8000364:	e196      	b.n	8000694 <HAL_TIM_OC_DelayElapsedCallback+0x340>
        if (!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8))) { //check pin state
 8000366:	2380      	movs	r3, #128	; 0x80
 8000368:	005a      	lsls	r2, r3, #1
 800036a:	2390      	movs	r3, #144	; 0x90
 800036c:	05db      	lsls	r3, r3, #23
 800036e:	0011      	movs	r1, r2
 8000370:	0018      	movs	r0, r3
 8000372:	f002 fc37 	bl	8002be4 <HAL_GPIO_ReadPin>
 8000376:	1e03      	subs	r3, r0, #0
 8000378:	d000      	beq.n	800037c <HAL_TIM_OC_DelayElapsedCallback+0x28>
 800037a:	e1cb      	b.n	8000714 <HAL_TIM_OC_DelayElapsedCallback+0x3c0>
             * Steps DAC
             * +/- 0.5v Every 100ms
             */

            /* Write to SPI (begin transfer?) */
            HAL_SPI_Transmit(&hspi1, (uint8_t * ) & WRITE, 1, 1);
 800037c:	49b7      	ldr	r1, [pc, #732]	; (800065c <HAL_TIM_OC_DelayElapsedCallback+0x308>)
 800037e:	48b8      	ldr	r0, [pc, #736]	; (8000660 <HAL_TIM_OC_DelayElapsedCallback+0x30c>)
 8000380:	2301      	movs	r3, #1
 8000382:	2201      	movs	r2, #1
 8000384:	f003 fbe8 	bl	8003b58 <HAL_SPI_Transmit>

            while (!(SPI1->SR));
 8000388:	46c0      	nop			; (mov r8, r8)
 800038a:	4bb6      	ldr	r3, [pc, #728]	; (8000664 <HAL_TIM_OC_DelayElapsedCallback+0x310>)
 800038c:	689b      	ldr	r3, [r3, #8]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d0fb      	beq.n	800038a <HAL_TIM_OC_DelayElapsedCallback+0x36>

            raw = SPI1->DR;
 8000392:	4bb4      	ldr	r3, [pc, #720]	; (8000664 <HAL_TIM_OC_DelayElapsedCallback+0x310>)
 8000394:	68db      	ldr	r3, [r3, #12]
 8000396:	001a      	movs	r2, r3
 8000398:	4bb3      	ldr	r3, [pc, #716]	; (8000668 <HAL_TIM_OC_DelayElapsedCallback+0x314>)
 800039a:	601a      	str	r2, [r3, #0]

            DAC->DHR12R1 = DAC_OUT[step];
 800039c:	4bb3      	ldr	r3, [pc, #716]	; (800066c <HAL_TIM_OC_DelayElapsedCallback+0x318>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	0019      	movs	r1, r3
 80003a2:	4bb3      	ldr	r3, [pc, #716]	; (8000670 <HAL_TIM_OC_DelayElapsedCallback+0x31c>)
 80003a4:	4ab3      	ldr	r2, [pc, #716]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x320>)
 80003a6:	0089      	lsls	r1, r1, #2
 80003a8:	588a      	ldr	r2, [r1, r2]
 80003aa:	609a      	str	r2, [r3, #8]

            HAL_ADC_Start_DMA(&hadc, (uint32_t *) adcResultsDMA, adcChannelCount);
 80003ac:	2310      	movs	r3, #16
 80003ae:	001a      	movs	r2, r3
 80003b0:	49b1      	ldr	r1, [pc, #708]	; (8000678 <HAL_TIM_OC_DelayElapsedCallback+0x324>)
 80003b2:	4bb2      	ldr	r3, [pc, #712]	; (800067c <HAL_TIM_OC_DelayElapsedCallback+0x328>)
 80003b4:	0018      	movs	r0, r3
 80003b6:	f001 fc67 	bl	8001c88 <HAL_ADC_Start_DMA>
            uint16_t PA0 = adcResultsDMA[0]; //ADC_IN0, END_mon: entrance/collimator monitor
 80003ba:	203e      	movs	r0, #62	; 0x3e
 80003bc:	183b      	adds	r3, r7, r0
 80003be:	4aae      	ldr	r2, [pc, #696]	; (8000678 <HAL_TIM_OC_DelayElapsedCallback+0x324>)
 80003c0:	8812      	ldrh	r2, [r2, #0]
 80003c2:	801a      	strh	r2, [r3, #0]
            uint16_t PA7 = adcResultsDMA[4]; //ADC_IN7, SWP_mon: Sweep voltage monitor
 80003c4:	243c      	movs	r4, #60	; 0x3c
 80003c6:	193b      	adds	r3, r7, r4
 80003c8:	4aab      	ldr	r2, [pc, #684]	; (8000678 <HAL_TIM_OC_DelayElapsedCallback+0x324>)
 80003ca:	8912      	ldrh	r2, [r2, #8]
 80003cc:	801a      	strh	r2, [r3, #0]
            uint16_t PB0 = adcResultsDMA[5]; //ADC_IN8, TMP 1: Sweep temperature
 80003ce:	253a      	movs	r5, #58	; 0x3a
 80003d0:	197b      	adds	r3, r7, r5
 80003d2:	4aa9      	ldr	r2, [pc, #676]	; (8000678 <HAL_TIM_OC_DelayElapsedCallback+0x324>)
 80003d4:	8952      	ldrh	r2, [r2, #10]
 80003d6:	801a      	strh	r2, [r3, #0]
            uint16_t PB1 = adcResultsDMA[6]; //ADC_IN9, TMP 2: feedbacks
 80003d8:	2638      	movs	r6, #56	; 0x38
 80003da:	19bb      	adds	r3, r7, r6
 80003dc:	4aa6      	ldr	r2, [pc, #664]	; (8000678 <HAL_TIM_OC_DelayElapsedCallback+0x324>)
 80003de:	8992      	ldrh	r2, [r2, #12]
 80003e0:	801a      	strh	r2, [r3, #0]

            erpaData data;
            data.sync = 0xAA;
 80003e2:	2108      	movs	r1, #8
 80003e4:	187b      	adds	r3, r7, r1
 80003e6:	22aa      	movs	r2, #170	; 0xaa
 80003e8:	701a      	strb	r2, [r3, #0]
            data.spiData = raw;
 80003ea:	4b9f      	ldr	r3, [pc, #636]	; (8000668 <HAL_TIM_OC_DelayElapsedCallback+0x314>)
 80003ec:	681a      	ldr	r2, [r3, #0]
 80003ee:	187b      	adds	r3, r7, r1
 80003f0:	605a      	str	r2, [r3, #4]
            data.swpComm = DAC->DHR12R1;
 80003f2:	4b9f      	ldr	r3, [pc, #636]	; (8000670 <HAL_TIM_OC_DelayElapsedCallback+0x31c>)
 80003f4:	689a      	ldr	r2, [r3, #8]
 80003f6:	187b      	adds	r3, r7, r1
 80003f8:	609a      	str	r2, [r3, #8]
            data.swpMon = PA7;
 80003fa:	193b      	adds	r3, r7, r4
 80003fc:	881a      	ldrh	r2, [r3, #0]
 80003fe:	187b      	adds	r3, r7, r1
 8000400:	60da      	str	r2, [r3, #12]
            data.endMon = PA0;
 8000402:	187b      	adds	r3, r7, r1
 8000404:	183a      	adds	r2, r7, r0
 8000406:	8812      	ldrh	r2, [r2, #0]
 8000408:	821a      	strh	r2, [r3, #16]
            data.tmp1 = PB0;
 800040a:	187b      	adds	r3, r7, r1
 800040c:	197a      	adds	r2, r7, r5
 800040e:	8812      	ldrh	r2, [r2, #0]
 8000410:	825a      	strh	r2, [r3, #18]
            data.tmp2 = PB1;
 8000412:	187b      	adds	r3, r7, r1
 8000414:	19ba      	adds	r2, r7, r6
 8000416:	8812      	ldrh	r2, [r2, #0]
 8000418:	829a      	strh	r2, [r3, #20]

            erpa_buf = fillErpaBuffer(data);
 800041a:	187b      	adds	r3, r7, r1
 800041c:	466a      	mov	r2, sp
 800041e:	0011      	movs	r1, r2
 8000420:	001a      	movs	r2, r3
 8000422:	3210      	adds	r2, #16
 8000424:	ca11      	ldmia	r2!, {r0, r4}
 8000426:	c111      	stmia	r1!, {r0, r4}
 8000428:	6818      	ldr	r0, [r3, #0]
 800042a:	6859      	ldr	r1, [r3, #4]
 800042c:	689a      	ldr	r2, [r3, #8]
 800042e:	68db      	ldr	r3, [r3, #12]
 8000430:	f7ff ff08 	bl	8000244 <fillErpaBuffer>
 8000434:	0002      	movs	r2, r0
 8000436:	4b92      	ldr	r3, [pc, #584]	; (8000680 <HAL_TIM_OC_DelayElapsedCallback+0x32c>)
 8000438:	601a      	str	r2, [r3, #0]

            //HAL_UART_Transmit(&huart1, erpa_buf, sizeof(erpa_buf), 100);

            if (step == 5) {
 800043a:	4b8c      	ldr	r3, [pc, #560]	; (800066c <HAL_TIM_OC_DelayElapsedCallback+0x318>)
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	2b05      	cmp	r3, #5
 8000440:	d103      	bne.n	800044a <HAL_TIM_OC_DelayElapsedCallback+0xf6>
                up = 0;
 8000442:	4b90      	ldr	r3, [pc, #576]	; (8000684 <HAL_TIM_OC_DelayElapsedCallback+0x330>)
 8000444:	2200      	movs	r2, #0
 8000446:	601a      	str	r2, [r3, #0]
 8000448:	e006      	b.n	8000458 <HAL_TIM_OC_DelayElapsedCallback+0x104>
            } else if (step == 0) {
 800044a:	4b88      	ldr	r3, [pc, #544]	; (800066c <HAL_TIM_OC_DelayElapsedCallback+0x318>)
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	2b00      	cmp	r3, #0
 8000450:	d102      	bne.n	8000458 <HAL_TIM_OC_DelayElapsedCallback+0x104>
                up = 1;
 8000452:	4b8c      	ldr	r3, [pc, #560]	; (8000684 <HAL_TIM_OC_DelayElapsedCallback+0x330>)
 8000454:	2201      	movs	r2, #1
 8000456:	601a      	str	r2, [r3, #0]
            }

            up == 1 ? step++ : step--;
 8000458:	4b8a      	ldr	r3, [pc, #552]	; (8000684 <HAL_TIM_OC_DelayElapsedCallback+0x330>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	2b01      	cmp	r3, #1
 800045e:	d106      	bne.n	800046e <HAL_TIM_OC_DelayElapsedCallback+0x11a>
 8000460:	4b82      	ldr	r3, [pc, #520]	; (800066c <HAL_TIM_OC_DelayElapsedCallback+0x318>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	3301      	adds	r3, #1
 8000466:	b2da      	uxtb	r2, r3
 8000468:	4b80      	ldr	r3, [pc, #512]	; (800066c <HAL_TIM_OC_DelayElapsedCallback+0x318>)
 800046a:	701a      	strb	r2, [r3, #0]
 800046c:	e005      	b.n	800047a <HAL_TIM_OC_DelayElapsedCallback+0x126>
 800046e:	4b7f      	ldr	r3, [pc, #508]	; (800066c <HAL_TIM_OC_DelayElapsedCallback+0x318>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	3b01      	subs	r3, #1
 8000474:	b2da      	uxtb	r2, r3
 8000476:	4b7d      	ldr	r3, [pc, #500]	; (800066c <HAL_TIM_OC_DelayElapsedCallback+0x318>)
 8000478:	701a      	strb	r2, [r3, #0]

            if (hk_counter == 50) {
 800047a:	4b83      	ldr	r3, [pc, #524]	; (8000688 <HAL_TIM_OC_DelayElapsedCallback+0x334>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	2b32      	cmp	r3, #50	; 0x32
 8000480:	d000      	beq.n	8000484 <HAL_TIM_OC_DelayElapsedCallback+0x130>
 8000482:	e0e3      	b.n	800064c <HAL_TIM_OC_DelayElapsedCallback+0x2f8>
                HAL_ADC_Start_DMA(&hadc, (uint32_t *) adcResultsDMA, adcChannelCount);
 8000484:	2310      	movs	r3, #16
 8000486:	001a      	movs	r2, r3
 8000488:	497b      	ldr	r1, [pc, #492]	; (8000678 <HAL_TIM_OC_DelayElapsedCallback+0x324>)
 800048a:	4b7c      	ldr	r3, [pc, #496]	; (800067c <HAL_TIM_OC_DelayElapsedCallback+0x328>)
 800048c:	0018      	movs	r0, r3
 800048e:	f001 fbfb 	bl	8001c88 <HAL_ADC_Start_DMA>

                uint16_t PA1 = adcResultsDMA[1]; //ADC_IN1, BUS_Vmon: instrument bus voltage monitor
 8000492:	2136      	movs	r1, #54	; 0x36
 8000494:	187b      	adds	r3, r7, r1
 8000496:	4a78      	ldr	r2, [pc, #480]	; (8000678 <HAL_TIM_OC_DelayElapsedCallback+0x324>)
 8000498:	8852      	ldrh	r2, [r2, #2]
 800049a:	801a      	strh	r2, [r3, #0]
                uint16_t PA2 = adcResultsDMA[2]; //ADC_IN2, BUS_Imon: instrument bus current monitor
 800049c:	2034      	movs	r0, #52	; 0x34
 800049e:	183b      	adds	r3, r7, r0
 80004a0:	4a75      	ldr	r2, [pc, #468]	; (8000678 <HAL_TIM_OC_DelayElapsedCallback+0x324>)
 80004a2:	8892      	ldrh	r2, [r2, #4]
 80004a4:	801a      	strh	r2, [r3, #0]
                uint16_t PA3 = adcResultsDMA[3]; //ADC_IN3, 5vref_mon: Accurate 5V for ADC monitor
 80004a6:	2432      	movs	r4, #50	; 0x32
 80004a8:	193b      	adds	r3, r7, r4
 80004aa:	4a73      	ldr	r2, [pc, #460]	; (8000678 <HAL_TIM_OC_DelayElapsedCallback+0x324>)
 80004ac:	88d2      	ldrh	r2, [r2, #6]
 80004ae:	801a      	strh	r2, [r3, #0]
                uint16_t PC0 = adcResultsDMA[7]; //ADC_IN10, 2v5_mon: power monitor
 80004b0:	2530      	movs	r5, #48	; 0x30
 80004b2:	197b      	adds	r3, r7, r5
 80004b4:	4a70      	ldr	r2, [pc, #448]	; (8000678 <HAL_TIM_OC_DelayElapsedCallback+0x324>)
 80004b6:	89d2      	ldrh	r2, [r2, #14]
 80004b8:	801a      	strh	r2, [r3, #0]
                uint16_t PC1 = adcResultsDMA[8]; //ADC_IN11, 3v3_mon: power monitor
 80004ba:	262e      	movs	r6, #46	; 0x2e
 80004bc:	19bb      	adds	r3, r7, r6
 80004be:	4a6e      	ldr	r2, [pc, #440]	; (8000678 <HAL_TIM_OC_DelayElapsedCallback+0x324>)
 80004c0:	8a12      	ldrh	r2, [r2, #16]
 80004c2:	801a      	strh	r2, [r3, #0]
                uint16_t PC2 = adcResultsDMA[9]; //ADC_IN12, 5v_mon: power monitor
 80004c4:	232c      	movs	r3, #44	; 0x2c
 80004c6:	18fb      	adds	r3, r7, r3
 80004c8:	4a6b      	ldr	r2, [pc, #428]	; (8000678 <HAL_TIM_OC_DelayElapsedCallback+0x324>)
 80004ca:	8a52      	ldrh	r2, [r2, #18]
 80004cc:	801a      	strh	r2, [r3, #0]
                uint16_t PC3 = adcResultsDMA[10]; //ADC_IN13, n3v3_mon: power monitor
 80004ce:	222a      	movs	r2, #42	; 0x2a
 80004d0:	18bb      	adds	r3, r7, r2
 80004d2:	4a69      	ldr	r2, [pc, #420]	; (8000678 <HAL_TIM_OC_DelayElapsedCallback+0x324>)
 80004d4:	8a92      	ldrh	r2, [r2, #20]
 80004d6:	801a      	strh	r2, [r3, #0]
                uint16_t PC4 = adcResultsDMA[11]; //ADC_IN14, n5v_mon: power monitor
 80004d8:	2328      	movs	r3, #40	; 0x28
 80004da:	18fb      	adds	r3, r7, r3
 80004dc:	4a66      	ldr	r2, [pc, #408]	; (8000678 <HAL_TIM_OC_DelayElapsedCallback+0x324>)
 80004de:	8ad2      	ldrh	r2, [r2, #22]
 80004e0:	801a      	strh	r2, [r3, #0]
                uint16_t PC5 = adcResultsDMA[12]; //ADC_IN15, 15v_mon: power monitor
 80004e2:	2226      	movs	r2, #38	; 0x26
 80004e4:	18bb      	adds	r3, r7, r2
 80004e6:	4a64      	ldr	r2, [pc, #400]	; (8000678 <HAL_TIM_OC_DelayElapsedCallback+0x324>)
 80004e8:	8b12      	ldrh	r2, [r2, #24]
 80004ea:	801a      	strh	r2, [r3, #0]
                uint16_t MCU_TEMP = adcResultsDMA[13]; //(internally connected) ADC_IN16, VSENSE
 80004ec:	2324      	movs	r3, #36	; 0x24
 80004ee:	18fb      	adds	r3, r7, r3
 80004f0:	4a61      	ldr	r2, [pc, #388]	; (8000678 <HAL_TIM_OC_DelayElapsedCallback+0x324>)
 80004f2:	8b52      	ldrh	r2, [r2, #26]
 80004f4:	801a      	strh	r2, [r3, #0]
                uint16_t MCU_VREF = adcResultsDMA[14]; //(internally connected) ADC_IN17, VREFINT
 80004f6:	2222      	movs	r2, #34	; 0x22
 80004f8:	18bb      	adds	r3, r7, r2
 80004fa:	4a5f      	ldr	r2, [pc, #380]	; (8000678 <HAL_TIM_OC_DelayElapsedCallback+0x324>)
 80004fc:	8b92      	ldrh	r2, [r2, #28]
 80004fe:	801a      	strh	r2, [r3, #0]

                hk_buf[0] = hk_sync; // HK SYNC 0xCC MSB
 8000500:	22cc      	movs	r2, #204	; 0xcc
 8000502:	4b62      	ldr	r3, [pc, #392]	; (800068c <HAL_TIM_OC_DelayElapsedCallback+0x338>)
 8000504:	701a      	strb	r2, [r3, #0]
                hk_buf[1] = hk_sync; // HK SYNC 0xCC LSB
 8000506:	22cc      	movs	r2, #204	; 0xcc
 8000508:	4b60      	ldr	r3, [pc, #384]	; (800068c <HAL_TIM_OC_DelayElapsedCallback+0x338>)
 800050a:	705a      	strb	r2, [r3, #1]
                hk_buf[2] = ((hk_seq & 0xFF00) >> 8); // HK SEQ # MSB
 800050c:	4b60      	ldr	r3, [pc, #384]	; (8000690 <HAL_TIM_OC_DelayElapsedCallback+0x33c>)
 800050e:	881b      	ldrh	r3, [r3, #0]
 8000510:	0a1b      	lsrs	r3, r3, #8
 8000512:	b29b      	uxth	r3, r3
 8000514:	b2da      	uxtb	r2, r3
 8000516:	4b5d      	ldr	r3, [pc, #372]	; (800068c <HAL_TIM_OC_DelayElapsedCallback+0x338>)
 8000518:	709a      	strb	r2, [r3, #2]
                hk_buf[3] = (hk_seq & 0xFF); // HK SEQ # LSB
 800051a:	4b5d      	ldr	r3, [pc, #372]	; (8000690 <HAL_TIM_OC_DelayElapsedCallback+0x33c>)
 800051c:	881b      	ldrh	r3, [r3, #0]
 800051e:	b2da      	uxtb	r2, r3
 8000520:	4b5a      	ldr	r3, [pc, #360]	; (800068c <HAL_TIM_OC_DelayElapsedCallback+0x338>)
 8000522:	70da      	strb	r2, [r3, #3]
                hk_buf[4] = ((PA1 & 0xFF00) >> 8); // BUS_Vmon MSB
 8000524:	187b      	adds	r3, r7, r1
 8000526:	881b      	ldrh	r3, [r3, #0]
 8000528:	0a1b      	lsrs	r3, r3, #8
 800052a:	b29b      	uxth	r3, r3
 800052c:	b2da      	uxtb	r2, r3
 800052e:	4b57      	ldr	r3, [pc, #348]	; (800068c <HAL_TIM_OC_DelayElapsedCallback+0x338>)
 8000530:	711a      	strb	r2, [r3, #4]
                hk_buf[5] = (PA1 & 0xFF); // BUS_Vmon LSB
 8000532:	187b      	adds	r3, r7, r1
 8000534:	881b      	ldrh	r3, [r3, #0]
 8000536:	b2da      	uxtb	r2, r3
 8000538:	4b54      	ldr	r3, [pc, #336]	; (800068c <HAL_TIM_OC_DelayElapsedCallback+0x338>)
 800053a:	715a      	strb	r2, [r3, #5]
                hk_buf[6] = ((PA2 & 0xFF00) >> 8); // BUS_Imon MSB
 800053c:	183b      	adds	r3, r7, r0
 800053e:	881b      	ldrh	r3, [r3, #0]
 8000540:	0a1b      	lsrs	r3, r3, #8
 8000542:	b29b      	uxth	r3, r3
 8000544:	b2da      	uxtb	r2, r3
 8000546:	4b51      	ldr	r3, [pc, #324]	; (800068c <HAL_TIM_OC_DelayElapsedCallback+0x338>)
 8000548:	719a      	strb	r2, [r3, #6]
                hk_buf[7] = (PA2 & 0xFF); // BUS_Imon LSB
 800054a:	183b      	adds	r3, r7, r0
 800054c:	881b      	ldrh	r3, [r3, #0]
 800054e:	b2da      	uxtb	r2, r3
 8000550:	4b4e      	ldr	r3, [pc, #312]	; (800068c <HAL_TIM_OC_DelayElapsedCallback+0x338>)
 8000552:	71da      	strb	r2, [r3, #7]
                hk_buf[8] = ((PC0 & 0xFF00) >> 8); // 2.5v_mon MSB
 8000554:	197b      	adds	r3, r7, r5
 8000556:	881b      	ldrh	r3, [r3, #0]
 8000558:	0a1b      	lsrs	r3, r3, #8
 800055a:	b29b      	uxth	r3, r3
 800055c:	b2da      	uxtb	r2, r3
 800055e:	4b4b      	ldr	r3, [pc, #300]	; (800068c <HAL_TIM_OC_DelayElapsedCallback+0x338>)
 8000560:	721a      	strb	r2, [r3, #8]
                hk_buf[9] = (PC0 & 0xFF); // 2.5v_mon LSB
 8000562:	197b      	adds	r3, r7, r5
 8000564:	881b      	ldrh	r3, [r3, #0]
 8000566:	b2da      	uxtb	r2, r3
 8000568:	4b48      	ldr	r3, [pc, #288]	; (800068c <HAL_TIM_OC_DelayElapsedCallback+0x338>)
 800056a:	725a      	strb	r2, [r3, #9]
                hk_buf[10] = ((PC1 & 0xFF00) >> 8); // 3v3_mon MSB
 800056c:	19bb      	adds	r3, r7, r6
 800056e:	881b      	ldrh	r3, [r3, #0]
 8000570:	0a1b      	lsrs	r3, r3, #8
 8000572:	b29b      	uxth	r3, r3
 8000574:	b2da      	uxtb	r2, r3
 8000576:	4b45      	ldr	r3, [pc, #276]	; (800068c <HAL_TIM_OC_DelayElapsedCallback+0x338>)
 8000578:	729a      	strb	r2, [r3, #10]
                hk_buf[11] = (PC1 & 0xFF); // 3v3_mon LSB
 800057a:	19bb      	adds	r3, r7, r6
 800057c:	881b      	ldrh	r3, [r3, #0]
 800057e:	b2da      	uxtb	r2, r3
 8000580:	4b42      	ldr	r3, [pc, #264]	; (800068c <HAL_TIM_OC_DelayElapsedCallback+0x338>)
 8000582:	72da      	strb	r2, [r3, #11]
                hk_buf[12] = ((PC2 & 0xFF00) >> 8); // 5v_mon MSB
 8000584:	212c      	movs	r1, #44	; 0x2c
 8000586:	187b      	adds	r3, r7, r1
 8000588:	881b      	ldrh	r3, [r3, #0]
 800058a:	0a1b      	lsrs	r3, r3, #8
 800058c:	b29b      	uxth	r3, r3
 800058e:	b2da      	uxtb	r2, r3
 8000590:	4b3e      	ldr	r3, [pc, #248]	; (800068c <HAL_TIM_OC_DelayElapsedCallback+0x338>)
 8000592:	731a      	strb	r2, [r3, #12]
                hk_buf[13] = (PC2 & 0xFF); // 5v_mon LSB
 8000594:	187b      	adds	r3, r7, r1
 8000596:	881b      	ldrh	r3, [r3, #0]
 8000598:	b2da      	uxtb	r2, r3
 800059a:	4b3c      	ldr	r3, [pc, #240]	; (800068c <HAL_TIM_OC_DelayElapsedCallback+0x338>)
 800059c:	735a      	strb	r2, [r3, #13]
                hk_buf[14] = ((PA3 & 0xFF00) >> 8); // 5vref_mon MSB
 800059e:	193b      	adds	r3, r7, r4
 80005a0:	881b      	ldrh	r3, [r3, #0]
 80005a2:	0a1b      	lsrs	r3, r3, #8
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	b2da      	uxtb	r2, r3
 80005a8:	4b38      	ldr	r3, [pc, #224]	; (800068c <HAL_TIM_OC_DelayElapsedCallback+0x338>)
 80005aa:	739a      	strb	r2, [r3, #14]
                hk_buf[15] = (PA3 & 0xFF); // 5vref_mon LSB
 80005ac:	193b      	adds	r3, r7, r4
 80005ae:	881b      	ldrh	r3, [r3, #0]
 80005b0:	b2da      	uxtb	r2, r3
 80005b2:	4b36      	ldr	r3, [pc, #216]	; (800068c <HAL_TIM_OC_DelayElapsedCallback+0x338>)
 80005b4:	73da      	strb	r2, [r3, #15]
                hk_buf[16] = ((PC5 & 0xFF00) >> 8); // 15v_mon MSB
 80005b6:	2026      	movs	r0, #38	; 0x26
 80005b8:	183b      	adds	r3, r7, r0
 80005ba:	881b      	ldrh	r3, [r3, #0]
 80005bc:	0a1b      	lsrs	r3, r3, #8
 80005be:	b29b      	uxth	r3, r3
 80005c0:	b2da      	uxtb	r2, r3
 80005c2:	4b32      	ldr	r3, [pc, #200]	; (800068c <HAL_TIM_OC_DelayElapsedCallback+0x338>)
 80005c4:	741a      	strb	r2, [r3, #16]
                hk_buf[17] = (PC5 & 0xFF); // 15v_mon LSB
 80005c6:	183b      	adds	r3, r7, r0
 80005c8:	881b      	ldrh	r3, [r3, #0]
 80005ca:	b2da      	uxtb	r2, r3
 80005cc:	4b2f      	ldr	r3, [pc, #188]	; (800068c <HAL_TIM_OC_DelayElapsedCallback+0x338>)
 80005ce:	745a      	strb	r2, [r3, #17]
                hk_buf[18] = ((PC3 & 0xFF00) >> 8); // n3v3_mon MSB
 80005d0:	212a      	movs	r1, #42	; 0x2a
 80005d2:	187b      	adds	r3, r7, r1
 80005d4:	881b      	ldrh	r3, [r3, #0]
 80005d6:	0a1b      	lsrs	r3, r3, #8
 80005d8:	b29b      	uxth	r3, r3
 80005da:	b2da      	uxtb	r2, r3
 80005dc:	4b2b      	ldr	r3, [pc, #172]	; (800068c <HAL_TIM_OC_DelayElapsedCallback+0x338>)
 80005de:	749a      	strb	r2, [r3, #18]
                hk_buf[19] = (PC3 & 0xFF); // n3v3_mon LSB
 80005e0:	187b      	adds	r3, r7, r1
 80005e2:	881b      	ldrh	r3, [r3, #0]
 80005e4:	b2da      	uxtb	r2, r3
 80005e6:	4b29      	ldr	r3, [pc, #164]	; (800068c <HAL_TIM_OC_DelayElapsedCallback+0x338>)
 80005e8:	74da      	strb	r2, [r3, #19]
                hk_buf[20] = ((PC4 & 0xFF00) >> 8); // n5v_mon MSB
 80005ea:	2128      	movs	r1, #40	; 0x28
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	881b      	ldrh	r3, [r3, #0]
 80005f0:	0a1b      	lsrs	r3, r3, #8
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	b2da      	uxtb	r2, r3
 80005f6:	4b25      	ldr	r3, [pc, #148]	; (800068c <HAL_TIM_OC_DelayElapsedCallback+0x338>)
 80005f8:	751a      	strb	r2, [r3, #20]
                hk_buf[21] = (PC4 & 0xFF); // n5v_mon LSB
 80005fa:	187b      	adds	r3, r7, r1
 80005fc:	881b      	ldrh	r3, [r3, #0]
 80005fe:	b2da      	uxtb	r2, r3
 8000600:	4b22      	ldr	r3, [pc, #136]	; (800068c <HAL_TIM_OC_DelayElapsedCallback+0x338>)
 8000602:	755a      	strb	r2, [r3, #21]
                hk_buf[22] = ((MCU_TEMP & 0xFF00) >> 8); // VSENSE MSB
 8000604:	2124      	movs	r1, #36	; 0x24
 8000606:	187b      	adds	r3, r7, r1
 8000608:	881b      	ldrh	r3, [r3, #0]
 800060a:	0a1b      	lsrs	r3, r3, #8
 800060c:	b29b      	uxth	r3, r3
 800060e:	b2da      	uxtb	r2, r3
 8000610:	4b1e      	ldr	r3, [pc, #120]	; (800068c <HAL_TIM_OC_DelayElapsedCallback+0x338>)
 8000612:	759a      	strb	r2, [r3, #22]
                hk_buf[23] = (MCU_TEMP & 0xFF); // VSENSE LSB
 8000614:	187b      	adds	r3, r7, r1
 8000616:	881b      	ldrh	r3, [r3, #0]
 8000618:	b2da      	uxtb	r2, r3
 800061a:	4b1c      	ldr	r3, [pc, #112]	; (800068c <HAL_TIM_OC_DelayElapsedCallback+0x338>)
 800061c:	75da      	strb	r2, [r3, #23]
                hk_buf[24] = ((MCU_VREF & 0xFF00) >> 8); // VREFINT MSB
 800061e:	2122      	movs	r1, #34	; 0x22
 8000620:	187b      	adds	r3, r7, r1
 8000622:	881b      	ldrh	r3, [r3, #0]
 8000624:	0a1b      	lsrs	r3, r3, #8
 8000626:	b29b      	uxth	r3, r3
 8000628:	b2da      	uxtb	r2, r3
 800062a:	4b18      	ldr	r3, [pc, #96]	; (800068c <HAL_TIM_OC_DelayElapsedCallback+0x338>)
 800062c:	761a      	strb	r2, [r3, #24]
                hk_buf[25] = (MCU_VREF & 0xFF); // VREFINT LSB
 800062e:	187b      	adds	r3, r7, r1
 8000630:	881b      	ldrh	r3, [r3, #0]
 8000632:	b2da      	uxtb	r2, r3
 8000634:	4b15      	ldr	r3, [pc, #84]	; (800068c <HAL_TIM_OC_DelayElapsedCallback+0x338>)
 8000636:	765a      	strb	r2, [r3, #25]

                //HAL_UART_Transmit(&huart1, hk_buf, sizeof(hk_buf), 100);

                hk_counter = 1;
 8000638:	4b13      	ldr	r3, [pc, #76]	; (8000688 <HAL_TIM_OC_DelayElapsedCallback+0x334>)
 800063a:	2201      	movs	r2, #1
 800063c:	601a      	str	r2, [r3, #0]

                hk_seq++;
 800063e:	4b14      	ldr	r3, [pc, #80]	; (8000690 <HAL_TIM_OC_DelayElapsedCallback+0x33c>)
 8000640:	881b      	ldrh	r3, [r3, #0]
 8000642:	3301      	adds	r3, #1
 8000644:	b29a      	uxth	r2, r3
 8000646:	4b12      	ldr	r3, [pc, #72]	; (8000690 <HAL_TIM_OC_DelayElapsedCallback+0x33c>)
 8000648:	801a      	strh	r2, [r3, #0]
        }
    }


    /* Timer 3 also called but doesn't need to do anything on IT */
}
 800064a:	e063      	b.n	8000714 <HAL_TIM_OC_DelayElapsedCallback+0x3c0>
                hk_counter++;
 800064c:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <HAL_TIM_OC_DelayElapsedCallback+0x334>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	1c5a      	adds	r2, r3, #1
 8000652:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <HAL_TIM_OC_DelayElapsedCallback+0x334>)
 8000654:	601a      	str	r2, [r3, #0]
}
 8000656:	e05d      	b.n	8000714 <HAL_TIM_OC_DelayElapsedCallback+0x3c0>
 8000658:	20000254 	.word	0x20000254
 800065c:	08006768 	.word	0x08006768
 8000660:	2000018c 	.word	0x2000018c
 8000664:	40013000 	.word	0x40013000
 8000668:	20000398 	.word	0x20000398
 800066c:	20000394 	.word	0x20000394
 8000670:	40007400 	.word	0x40007400
 8000674:	20000000 	.word	0x20000000
 8000678:	20000374 	.word	0x20000374
 800067c:	200000a8 	.word	0x200000a8
 8000680:	2000039c 	.word	0x2000039c
 8000684:	20000018 	.word	0x20000018
 8000688:	200003c8 	.word	0x200003c8
 800068c:	200003ac 	.word	0x200003ac
 8000690:	200003c6 	.word	0x200003c6
    } else if (htim == &htim2) {
 8000694:	687a      	ldr	r2, [r7, #4]
 8000696:	4b21      	ldr	r3, [pc, #132]	; (800071c <HAL_TIM_OC_DelayElapsedCallback+0x3c8>)
 8000698:	429a      	cmp	r2, r3
 800069a:	d13b      	bne.n	8000714 <HAL_TIM_OC_DelayElapsedCallback+0x3c0>
        if (!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11))) { //check pin state
 800069c:	2380      	movs	r3, #128	; 0x80
 800069e:	011b      	lsls	r3, r3, #4
 80006a0:	4a1f      	ldr	r2, [pc, #124]	; (8000720 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 80006a2:	0019      	movs	r1, r3
 80006a4:	0010      	movs	r0, r2
 80006a6:	f002 fa9d 	bl	8002be4 <HAL_GPIO_ReadPin>
 80006aa:	1e03      	subs	r3, r0, #0
 80006ac:	d132      	bne.n	8000714 <HAL_TIM_OC_DelayElapsedCallback+0x3c0>
            HAL_SPI_Transmit(&hspi2, (uint8_t * ) & WRITE, 1, 1);
 80006ae:	491d      	ldr	r1, [pc, #116]	; (8000724 <HAL_TIM_OC_DelayElapsedCallback+0x3d0>)
 80006b0:	481d      	ldr	r0, [pc, #116]	; (8000728 <HAL_TIM_OC_DelayElapsedCallback+0x3d4>)
 80006b2:	2301      	movs	r3, #1
 80006b4:	2201      	movs	r2, #1
 80006b6:	f003 fa4f 	bl	8003b58 <HAL_SPI_Transmit>
            while (!(SPI2->SR));
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	4b1b      	ldr	r3, [pc, #108]	; (800072c <HAL_TIM_OC_DelayElapsedCallback+0x3d8>)
 80006be:	689b      	ldr	r3, [r3, #8]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d0fb      	beq.n	80006bc <HAL_TIM_OC_DelayElapsedCallback+0x368>
            raw = SPI2->DR;
 80006c4:	4b19      	ldr	r3, [pc, #100]	; (800072c <HAL_TIM_OC_DelayElapsedCallback+0x3d8>)
 80006c6:	68db      	ldr	r3, [r3, #12]
 80006c8:	001a      	movs	r2, r3
 80006ca:	4b19      	ldr	r3, [pc, #100]	; (8000730 <HAL_TIM_OC_DelayElapsedCallback+0x3dc>)
 80006cc:	601a      	str	r2, [r3, #0]
            pmt_buf[0] = pmt_sync;
 80006ce:	22bb      	movs	r2, #187	; 0xbb
 80006d0:	4b18      	ldr	r3, [pc, #96]	; (8000734 <HAL_TIM_OC_DelayElapsedCallback+0x3e0>)
 80006d2:	701a      	strb	r2, [r3, #0]
            pmt_buf[1] = pmt_sync;
 80006d4:	22bb      	movs	r2, #187	; 0xbb
 80006d6:	4b17      	ldr	r3, [pc, #92]	; (8000734 <HAL_TIM_OC_DelayElapsedCallback+0x3e0>)
 80006d8:	705a      	strb	r2, [r3, #1]
            pmt_buf[2] = ((pmt_seq & 0xFF00) >> 8);
 80006da:	4b17      	ldr	r3, [pc, #92]	; (8000738 <HAL_TIM_OC_DelayElapsedCallback+0x3e4>)
 80006dc:	881b      	ldrh	r3, [r3, #0]
 80006de:	0a1b      	lsrs	r3, r3, #8
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	b2da      	uxtb	r2, r3
 80006e4:	4b13      	ldr	r3, [pc, #76]	; (8000734 <HAL_TIM_OC_DelayElapsedCallback+0x3e0>)
 80006e6:	709a      	strb	r2, [r3, #2]
            pmt_buf[3] = (pmt_seq & 0xFF);;
 80006e8:	4b13      	ldr	r3, [pc, #76]	; (8000738 <HAL_TIM_OC_DelayElapsedCallback+0x3e4>)
 80006ea:	881b      	ldrh	r3, [r3, #0]
 80006ec:	b2da      	uxtb	r2, r3
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <HAL_TIM_OC_DelayElapsedCallback+0x3e0>)
 80006f0:	70da      	strb	r2, [r3, #3]
            pmt_buf[4] = ((raw & 0xFF00) >> 8);
 80006f2:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <HAL_TIM_OC_DelayElapsedCallback+0x3dc>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	121b      	asrs	r3, r3, #8
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <HAL_TIM_OC_DelayElapsedCallback+0x3e0>)
 80006fc:	711a      	strb	r2, [r3, #4]
            pmt_buf[5] = (raw & 0xFF);
 80006fe:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <HAL_TIM_OC_DelayElapsedCallback+0x3dc>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	b2da      	uxtb	r2, r3
 8000704:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <HAL_TIM_OC_DelayElapsedCallback+0x3e0>)
 8000706:	715a      	strb	r2, [r3, #5]
            pmt_seq++;
 8000708:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <HAL_TIM_OC_DelayElapsedCallback+0x3e4>)
 800070a:	881b      	ldrh	r3, [r3, #0]
 800070c:	3301      	adds	r3, #1
 800070e:	b29a      	uxth	r2, r3
 8000710:	4b09      	ldr	r3, [pc, #36]	; (8000738 <HAL_TIM_OC_DelayElapsedCallback+0x3e4>)
 8000712:	801a      	strh	r2, [r3, #0]
}
 8000714:	46c0      	nop			; (mov r8, r8)
 8000716:	46bd      	mov	sp, r7
 8000718:	b011      	add	sp, #68	; 0x44
 800071a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800071c:	2000029c 	.word	0x2000029c
 8000720:	48000400 	.word	0x48000400
 8000724:	08006768 	.word	0x08006768
 8000728:	200001f0 	.word	0x200001f0
 800072c:	40003800 	.word	0x40003800
 8000730:	20000398 	.word	0x20000398
 8000734:	200003a4 	.word	0x200003a4
 8000738:	200003aa 	.word	0x200003aa

0800073c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
	char sleepChar = Rx_data;
 8000744:	4a0c      	ldr	r2, [pc, #48]	; (8000778 <HAL_UART_RxCpltCallback+0x3c>)
 8000746:	230f      	movs	r3, #15
 8000748:	18fb      	adds	r3, r7, r3
 800074a:	701a      	strb	r2, [r3, #0]
	if (Rx_data[0] == 's') { // should be "¶" in the future
 800074c:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <HAL_UART_RxCpltCallback+0x3c>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2b73      	cmp	r3, #115	; 0x73
 8000752:	d107      	bne.n	8000764 <HAL_UART_RxCpltCallback+0x28>
		HAL_SuspendTick();
 8000754:	f001 f94a 	bl	80019ec <HAL_SuspendTick>
		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000758:	2101      	movs	r1, #1
 800075a:	2001      	movs	r0, #1
 800075c:	f002 fbc6 	bl	8002eec <HAL_PWR_EnterSTOPMode>
		NVIC_SystemReset();
 8000760:	f7ff fd5e 	bl	8000220 <__NVIC_SystemReset>
	}
	HAL_UART_Receive_IT(&huart1, Rx_data, 1);
 8000764:	4904      	ldr	r1, [pc, #16]	; (8000778 <HAL_UART_RxCpltCallback+0x3c>)
 8000766:	4b05      	ldr	r3, [pc, #20]	; (800077c <HAL_UART_RxCpltCallback+0x40>)
 8000768:	2201      	movs	r2, #1
 800076a:	0018      	movs	r0, r3
 800076c:	f004 fd26 	bl	80051bc <HAL_UART_Receive_IT>
}
 8000770:	46c0      	nop			; (mov r8, r8)
 8000772:	46bd      	mov	sp, r7
 8000774:	b004      	add	sp, #16
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000370 	.word	0x20000370
 800077c:	200002e4 	.word	0x200002e4

08000780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000786:	f001 f8a9 	bl	80018dc <HAL_Init>
  float temp_c;

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800078a:	f000 f87b 	bl	8000884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078e:	f000 fc65 	bl	800105c <MX_GPIO_Init>
  MX_DMA_Init();
 8000792:	f000 fc45 	bl	8001020 <MX_DMA_Init>
  MX_SPI2_Init();
 8000796:	f000 fa89 	bl	8000cac <MX_SPI2_Init>
  MX_TIM1_Init();
 800079a:	f000 fac7 	bl	8000d2c <MX_TIM1_Init>
  MX_TIM2_Init();
 800079e:	f000 fb7d 	bl	8000e9c <MX_TIM2_Init>
  MX_SPI1_Init();
 80007a2:	f000 fa43 	bl	8000c2c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80007a6:	f000 fbfb 	bl	8000fa0 <MX_USART1_UART_Init>
  MX_DAC1_Init();
 80007aa:	f000 f9cd 	bl	8000b48 <MX_DAC1_Init>
  MX_ADC_Init();
 80007ae:	f000 f8d3 	bl	8000958 <MX_ADC_Init>
  MX_I2C1_Init();
 80007b2:	f000 f9fb 	bl	8000bac <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

    HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80007b6:	4b2c      	ldr	r3, [pc, #176]	; (8000868 <main+0xe8>)
 80007b8:	2100      	movs	r1, #0
 80007ba:	0018      	movs	r0, r3
 80007bc:	f001 fe53 	bl	8002466 <HAL_DAC_Start>


    /* Start Timers with OC & Interrupt */
    HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 80007c0:	4b2a      	ldr	r3, [pc, #168]	; (800086c <main+0xec>)
 80007c2:	2100      	movs	r1, #0
 80007c4:	0018      	movs	r0, r3
 80007c6:	f003 fd3d 	bl	8004244 <HAL_TIM_OC_Start_IT>
    HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 80007ca:	4b29      	ldr	r3, [pc, #164]	; (8000870 <main+0xf0>)
 80007cc:	210c      	movs	r1, #12
 80007ce:	0018      	movs	r0, r3
 80007d0:	f003 fd38 	bl	8004244 <HAL_TIM_OC_Start_IT>


    while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 80007d4:	46c0      	nop			; (mov r8, r8)
 80007d6:	4b27      	ldr	r3, [pc, #156]	; (8000874 <main+0xf4>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	69da      	ldr	r2, [r3, #28]
 80007dc:	2380      	movs	r3, #128	; 0x80
 80007de:	025b      	lsls	r3, r3, #9
 80007e0:	401a      	ands	r2, r3
 80007e2:	2380      	movs	r3, #128	; 0x80
 80007e4:	025b      	lsls	r3, r3, #9
 80007e6:	429a      	cmp	r2, r3
 80007e8:	d0f5      	beq.n	80007d6 <main+0x56>
    while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	4b21      	ldr	r3, [pc, #132]	; (8000874 <main+0xf4>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	69da      	ldr	r2, [r3, #28]
 80007f2:	2380      	movs	r3, #128	; 0x80
 80007f4:	03db      	lsls	r3, r3, #15
 80007f6:	401a      	ands	r2, r3
 80007f8:	2380      	movs	r3, #128	; 0x80
 80007fa:	03db      	lsls	r3, r3, #15
 80007fc:	429a      	cmp	r2, r3
 80007fe:	d1f5      	bne.n	80007ec <main+0x6c>

    WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_ADDRESS;
 8000800:	4b1d      	ldr	r3, [pc, #116]	; (8000878 <main+0xf8>)
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
    WakeUpSelection.AddressLength = UART_ADDRESS_DETECT_7B;
 8000806:	4b1c      	ldr	r3, [pc, #112]	; (8000878 <main+0xf8>)
 8000808:	2210      	movs	r2, #16
 800080a:	809a      	strh	r2, [r3, #4]
    WakeUpSelection.Address = 0x23; // send "£"
 800080c:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <main+0xf8>)
 800080e:	2223      	movs	r2, #35	; 0x23
 8000810:	719a      	strb	r2, [r3, #6]

    if (HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection) != HAL_OK) {
 8000812:	4b19      	ldr	r3, [pc, #100]	; (8000878 <main+0xf8>)
 8000814:	4817      	ldr	r0, [pc, #92]	; (8000874 <main+0xf4>)
 8000816:	6819      	ldr	r1, [r3, #0]
 8000818:	685a      	ldr	r2, [r3, #4]
 800081a:	f005 fdd5 	bl	80063c8 <HAL_UARTEx_StopModeWakeUpSourceConfig>
 800081e:	1e03      	subs	r3, r0, #0
 8000820:	d001      	beq.n	8000826 <main+0xa6>
        Error_Handler();
 8000822:	f000 fc9b 	bl	800115c <Error_Handler>
    }
    /* Enable the LPUART Wake UP from stop mode Interrupt */
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8000826:	4b13      	ldr	r3, [pc, #76]	; (8000874 <main+0xf4>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	689a      	ldr	r2, [r3, #8]
 800082c:	4b11      	ldr	r3, [pc, #68]	; (8000874 <main+0xf4>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2180      	movs	r1, #128	; 0x80
 8000832:	03c9      	lsls	r1, r1, #15
 8000834:	430a      	orrs	r2, r1
 8000836:	609a      	str	r2, [r3, #8]
    /* enable MCU wake-up by LPUART */
    HAL_UARTEx_EnableStopMode(&huart1);
 8000838:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <main+0xf4>)
 800083a:	0018      	movs	r0, r3
 800083c:	f005 fe2a 	bl	8006494 <HAL_UARTEx_EnableStopMode>
    HAL_UART_Receive_IT(&huart1, Rx_data, 1);
 8000840:	490e      	ldr	r1, [pc, #56]	; (800087c <main+0xfc>)
 8000842:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <main+0xf4>)
 8000844:	2201      	movs	r2, #1
 8000846:	0018      	movs	r0, r3
 8000848:	f004 fcb8 	bl	80051bc <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1) {

    	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
 800084c:	2380      	movs	r3, #128	; 0x80
 800084e:	00db      	lsls	r3, r3, #3
 8000850:	4a0b      	ldr	r2, [pc, #44]	; (8000880 <main+0x100>)
 8000852:	0019      	movs	r1, r3
 8000854:	0010      	movs	r0, r2
 8000856:	f002 f9ff 	bl	8002c58 <HAL_GPIO_TogglePin>
    	HAL_Delay(500);
 800085a:	23fa      	movs	r3, #250	; 0xfa
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	0018      	movs	r0, r3
 8000860:	f001 f8a0 	bl	80019a4 <HAL_Delay>
    	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
 8000864:	e7f2      	b.n	800084c <main+0xcc>
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	2000012c 	.word	0x2000012c
 800086c:	20000254 	.word	0x20000254
 8000870:	2000029c 	.word	0x2000029c
 8000874:	200002e4 	.word	0x200002e4
 8000878:	20000368 	.word	0x20000368
 800087c:	20000370 	.word	0x20000370
 8000880:	48000800 	.word	0x48000800

08000884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000884:	b590      	push	{r4, r7, lr}
 8000886:	b097      	sub	sp, #92	; 0x5c
 8000888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088a:	2428      	movs	r4, #40	; 0x28
 800088c:	193b      	adds	r3, r7, r4
 800088e:	0018      	movs	r0, r3
 8000890:	2330      	movs	r3, #48	; 0x30
 8000892:	001a      	movs	r2, r3
 8000894:	2100      	movs	r1, #0
 8000896:	f005 fe87 	bl	80065a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800089a:	2318      	movs	r3, #24
 800089c:	18fb      	adds	r3, r7, r3
 800089e:	0018      	movs	r0, r3
 80008a0:	2310      	movs	r3, #16
 80008a2:	001a      	movs	r2, r3
 80008a4:	2100      	movs	r1, #0
 80008a6:	f005 fe7f 	bl	80065a8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	0018      	movs	r0, r3
 80008ae:	2314      	movs	r3, #20
 80008b0:	001a      	movs	r2, r3
 80008b2:	2100      	movs	r1, #0
 80008b4:	f005 fe78 	bl	80065a8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80008b8:	0021      	movs	r1, r4
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	2212      	movs	r2, #18
 80008be:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c0:	187b      	adds	r3, r7, r1
 80008c2:	2201      	movs	r2, #1
 80008c4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80008c6:	187b      	adds	r3, r7, r1
 80008c8:	2201      	movs	r2, #1
 80008ca:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008cc:	187b      	adds	r3, r7, r1
 80008ce:	2210      	movs	r2, #16
 80008d0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80008d2:	187b      	adds	r3, r7, r1
 80008d4:	2210      	movs	r2, #16
 80008d6:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d8:	187b      	adds	r3, r7, r1
 80008da:	2202      	movs	r2, #2
 80008dc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	2200      	movs	r2, #0
 80008e2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	22a0      	movs	r2, #160	; 0xa0
 80008e8:	0392      	lsls	r2, r2, #14
 80008ea:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80008ec:	187b      	adds	r3, r7, r1
 80008ee:	2200      	movs	r2, #0
 80008f0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f2:	187b      	adds	r3, r7, r1
 80008f4:	0018      	movs	r0, r3
 80008f6:	f002 fb2d 	bl	8002f54 <HAL_RCC_OscConfig>
 80008fa:	1e03      	subs	r3, r0, #0
 80008fc:	d001      	beq.n	8000902 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80008fe:	f000 fc2d 	bl	800115c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000902:	2118      	movs	r1, #24
 8000904:	187b      	adds	r3, r7, r1
 8000906:	2207      	movs	r2, #7
 8000908:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800090a:	187b      	adds	r3, r7, r1
 800090c:	2202      	movs	r2, #2
 800090e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000910:	187b      	adds	r3, r7, r1
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000916:	187b      	adds	r3, r7, r1
 8000918:	2200      	movs	r2, #0
 800091a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800091c:	187b      	adds	r3, r7, r1
 800091e:	2101      	movs	r1, #1
 8000920:	0018      	movs	r0, r3
 8000922:	f002 fe31 	bl	8003588 <HAL_RCC_ClockConfig>
 8000926:	1e03      	subs	r3, r0, #0
 8000928:	d001      	beq.n	800092e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800092a:	f000 fc17 	bl	800115c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	2221      	movs	r2, #33	; 0x21
 8000932:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	2203      	movs	r2, #3
 8000938:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	2200      	movs	r2, #0
 800093e:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	0018      	movs	r0, r3
 8000944:	f002 ff72 	bl	800382c <HAL_RCCEx_PeriphCLKConfig>
 8000948:	1e03      	subs	r3, r0, #0
 800094a:	d001      	beq.n	8000950 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800094c:	f000 fc06 	bl	800115c <Error_Handler>
  }
}
 8000950:	46c0      	nop			; (mov r8, r8)
 8000952:	46bd      	mov	sp, r7
 8000954:	b017      	add	sp, #92	; 0x5c
 8000956:	bd90      	pop	{r4, r7, pc}

08000958 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	0018      	movs	r0, r3
 8000962:	230c      	movs	r3, #12
 8000964:	001a      	movs	r2, r3
 8000966:	2100      	movs	r1, #0
 8000968:	f005 fe1e 	bl	80065a8 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800096c:	4b74      	ldr	r3, [pc, #464]	; (8000b40 <MX_ADC_Init+0x1e8>)
 800096e:	4a75      	ldr	r2, [pc, #468]	; (8000b44 <MX_ADC_Init+0x1ec>)
 8000970:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000972:	4b73      	ldr	r3, [pc, #460]	; (8000b40 <MX_ADC_Init+0x1e8>)
 8000974:	2200      	movs	r2, #0
 8000976:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000978:	4b71      	ldr	r3, [pc, #452]	; (8000b40 <MX_ADC_Init+0x1e8>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800097e:	4b70      	ldr	r3, [pc, #448]	; (8000b40 <MX_ADC_Init+0x1e8>)
 8000980:	2200      	movs	r2, #0
 8000982:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000984:	4b6e      	ldr	r3, [pc, #440]	; (8000b40 <MX_ADC_Init+0x1e8>)
 8000986:	2201      	movs	r2, #1
 8000988:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800098a:	4b6d      	ldr	r3, [pc, #436]	; (8000b40 <MX_ADC_Init+0x1e8>)
 800098c:	2204      	movs	r2, #4
 800098e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000990:	4b6b      	ldr	r3, [pc, #428]	; (8000b40 <MX_ADC_Init+0x1e8>)
 8000992:	2200      	movs	r2, #0
 8000994:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000996:	4b6a      	ldr	r3, [pc, #424]	; (8000b40 <MX_ADC_Init+0x1e8>)
 8000998:	2200      	movs	r2, #0
 800099a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800099c:	4b68      	ldr	r3, [pc, #416]	; (8000b40 <MX_ADC_Init+0x1e8>)
 800099e:	2200      	movs	r2, #0
 80009a0:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80009a2:	4b67      	ldr	r3, [pc, #412]	; (8000b40 <MX_ADC_Init+0x1e8>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009a8:	4b65      	ldr	r3, [pc, #404]	; (8000b40 <MX_ADC_Init+0x1e8>)
 80009aa:	22c2      	movs	r2, #194	; 0xc2
 80009ac:	32ff      	adds	r2, #255	; 0xff
 80009ae:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009b0:	4b63      	ldr	r3, [pc, #396]	; (8000b40 <MX_ADC_Init+0x1e8>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80009b6:	4b62      	ldr	r3, [pc, #392]	; (8000b40 <MX_ADC_Init+0x1e8>)
 80009b8:	2224      	movs	r2, #36	; 0x24
 80009ba:	2100      	movs	r1, #0
 80009bc:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009be:	4b60      	ldr	r3, [pc, #384]	; (8000b40 <MX_ADC_Init+0x1e8>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80009c4:	4b5e      	ldr	r3, [pc, #376]	; (8000b40 <MX_ADC_Init+0x1e8>)
 80009c6:	0018      	movs	r0, r3
 80009c8:	f001 f81e 	bl	8001a08 <HAL_ADC_Init>
 80009cc:	1e03      	subs	r3, r0, #0
 80009ce:	d001      	beq.n	80009d4 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80009d0:	f000 fbc4 	bl	800115c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80009d4:	1d3b      	adds	r3, r7, #4
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	2280      	movs	r2, #128	; 0x80
 80009de:	0152      	lsls	r2, r2, #5
 80009e0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009e2:	1d3b      	adds	r3, r7, #4
 80009e4:	2280      	movs	r2, #128	; 0x80
 80009e6:	0552      	lsls	r2, r2, #21
 80009e8:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80009ea:	1d3a      	adds	r2, r7, #4
 80009ec:	4b54      	ldr	r3, [pc, #336]	; (8000b40 <MX_ADC_Init+0x1e8>)
 80009ee:	0011      	movs	r1, r2
 80009f0:	0018      	movs	r0, r3
 80009f2:	f001 f9e3 	bl	8001dbc <HAL_ADC_ConfigChannel>
 80009f6:	1e03      	subs	r3, r0, #0
 80009f8:	d001      	beq.n	80009fe <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80009fa:	f000 fbaf 	bl	800115c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	2201      	movs	r2, #1
 8000a02:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a04:	1d3a      	adds	r2, r7, #4
 8000a06:	4b4e      	ldr	r3, [pc, #312]	; (8000b40 <MX_ADC_Init+0x1e8>)
 8000a08:	0011      	movs	r1, r2
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f001 f9d6 	bl	8001dbc <HAL_ADC_ConfigChannel>
 8000a10:	1e03      	subs	r3, r0, #0
 8000a12:	d001      	beq.n	8000a18 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8000a14:	f000 fba2 	bl	800115c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	2202      	movs	r2, #2
 8000a1c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a1e:	1d3a      	adds	r2, r7, #4
 8000a20:	4b47      	ldr	r3, [pc, #284]	; (8000b40 <MX_ADC_Init+0x1e8>)
 8000a22:	0011      	movs	r1, r2
 8000a24:	0018      	movs	r0, r3
 8000a26:	f001 f9c9 	bl	8001dbc <HAL_ADC_ConfigChannel>
 8000a2a:	1e03      	subs	r3, r0, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8000a2e:	f000 fb95 	bl	800115c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	2203      	movs	r2, #3
 8000a36:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a38:	1d3a      	adds	r2, r7, #4
 8000a3a:	4b41      	ldr	r3, [pc, #260]	; (8000b40 <MX_ADC_Init+0x1e8>)
 8000a3c:	0011      	movs	r1, r2
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f001 f9bc 	bl	8001dbc <HAL_ADC_ConfigChannel>
 8000a44:	1e03      	subs	r3, r0, #0
 8000a46:	d001      	beq.n	8000a4c <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 8000a48:	f000 fb88 	bl	800115c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000a4c:	1d3b      	adds	r3, r7, #4
 8000a4e:	2207      	movs	r2, #7
 8000a50:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a52:	1d3a      	adds	r2, r7, #4
 8000a54:	4b3a      	ldr	r3, [pc, #232]	; (8000b40 <MX_ADC_Init+0x1e8>)
 8000a56:	0011      	movs	r1, r2
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f001 f9af 	bl	8001dbc <HAL_ADC_ConfigChannel>
 8000a5e:	1e03      	subs	r3, r0, #0
 8000a60:	d001      	beq.n	8000a66 <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 8000a62:	f000 fb7b 	bl	800115c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	2208      	movs	r2, #8
 8000a6a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a6c:	1d3a      	adds	r2, r7, #4
 8000a6e:	4b34      	ldr	r3, [pc, #208]	; (8000b40 <MX_ADC_Init+0x1e8>)
 8000a70:	0011      	movs	r1, r2
 8000a72:	0018      	movs	r0, r3
 8000a74:	f001 f9a2 	bl	8001dbc <HAL_ADC_ConfigChannel>
 8000a78:	1e03      	subs	r3, r0, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_ADC_Init+0x128>
  {
    Error_Handler();
 8000a7c:	f000 fb6e 	bl	800115c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000a80:	1d3b      	adds	r3, r7, #4
 8000a82:	2209      	movs	r2, #9
 8000a84:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a86:	1d3a      	adds	r2, r7, #4
 8000a88:	4b2d      	ldr	r3, [pc, #180]	; (8000b40 <MX_ADC_Init+0x1e8>)
 8000a8a:	0011      	movs	r1, r2
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f001 f995 	bl	8001dbc <HAL_ADC_ConfigChannel>
 8000a92:	1e03      	subs	r3, r0, #0
 8000a94:	d001      	beq.n	8000a9a <MX_ADC_Init+0x142>
  {
    Error_Handler();
 8000a96:	f000 fb61 	bl	800115c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	220a      	movs	r2, #10
 8000a9e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000aa0:	1d3a      	adds	r2, r7, #4
 8000aa2:	4b27      	ldr	r3, [pc, #156]	; (8000b40 <MX_ADC_Init+0x1e8>)
 8000aa4:	0011      	movs	r1, r2
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f001 f988 	bl	8001dbc <HAL_ADC_ConfigChannel>
 8000aac:	1e03      	subs	r3, r0, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_ADC_Init+0x15c>
  {
    Error_Handler();
 8000ab0:	f000 fb54 	bl	800115c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	220b      	movs	r2, #11
 8000ab8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000aba:	1d3a      	adds	r2, r7, #4
 8000abc:	4b20      	ldr	r3, [pc, #128]	; (8000b40 <MX_ADC_Init+0x1e8>)
 8000abe:	0011      	movs	r1, r2
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	f001 f97b 	bl	8001dbc <HAL_ADC_ConfigChannel>
 8000ac6:	1e03      	subs	r3, r0, #0
 8000ac8:	d001      	beq.n	8000ace <MX_ADC_Init+0x176>
  {
    Error_Handler();
 8000aca:	f000 fb47 	bl	800115c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	220c      	movs	r2, #12
 8000ad2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ad4:	1d3a      	adds	r2, r7, #4
 8000ad6:	4b1a      	ldr	r3, [pc, #104]	; (8000b40 <MX_ADC_Init+0x1e8>)
 8000ad8:	0011      	movs	r1, r2
 8000ada:	0018      	movs	r0, r3
 8000adc:	f001 f96e 	bl	8001dbc <HAL_ADC_ConfigChannel>
 8000ae0:	1e03      	subs	r3, r0, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_ADC_Init+0x190>
  {
    Error_Handler();
 8000ae4:	f000 fb3a 	bl	800115c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	220d      	movs	r2, #13
 8000aec:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000aee:	1d3a      	adds	r2, r7, #4
 8000af0:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <MX_ADC_Init+0x1e8>)
 8000af2:	0011      	movs	r1, r2
 8000af4:	0018      	movs	r0, r3
 8000af6:	f001 f961 	bl	8001dbc <HAL_ADC_ConfigChannel>
 8000afa:	1e03      	subs	r3, r0, #0
 8000afc:	d001      	beq.n	8000b02 <MX_ADC_Init+0x1aa>
  {
    Error_Handler();
 8000afe:	f000 fb2d 	bl	800115c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	220e      	movs	r2, #14
 8000b06:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b08:	1d3a      	adds	r2, r7, #4
 8000b0a:	4b0d      	ldr	r3, [pc, #52]	; (8000b40 <MX_ADC_Init+0x1e8>)
 8000b0c:	0011      	movs	r1, r2
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f001 f954 	bl	8001dbc <HAL_ADC_ConfigChannel>
 8000b14:	1e03      	subs	r3, r0, #0
 8000b16:	d001      	beq.n	8000b1c <MX_ADC_Init+0x1c4>
  {
    Error_Handler();
 8000b18:	f000 fb20 	bl	800115c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	220f      	movs	r2, #15
 8000b20:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b22:	1d3a      	adds	r2, r7, #4
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <MX_ADC_Init+0x1e8>)
 8000b26:	0011      	movs	r1, r2
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f001 f947 	bl	8001dbc <HAL_ADC_ConfigChannel>
 8000b2e:	1e03      	subs	r3, r0, #0
 8000b30:	d001      	beq.n	8000b36 <MX_ADC_Init+0x1de>
  {
    Error_Handler();
 8000b32:	f000 fb13 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	b004      	add	sp, #16
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	200000a8 	.word	0x200000a8
 8000b44:	40012400 	.word	0x40012400

08000b48 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */
    step = 0;
 8000b4e:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <MX_DAC1_Init+0x58>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b54:	003b      	movs	r3, r7
 8000b56:	0018      	movs	r0, r3
 8000b58:	2308      	movs	r3, #8
 8000b5a:	001a      	movs	r2, r3
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	f005 fd23 	bl	80065a8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC;
 8000b62:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <MX_DAC1_Init+0x5c>)
 8000b64:	4a10      	ldr	r2, [pc, #64]	; (8000ba8 <MX_DAC1_Init+0x60>)
 8000b66:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b68:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <MX_DAC1_Init+0x5c>)
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f001 fc1a 	bl	80023a4 <HAL_DAC_Init>
 8000b70:	1e03      	subs	r3, r0, #0
 8000b72:	d001      	beq.n	8000b78 <MX_DAC1_Init+0x30>
  {
    Error_Handler();
 8000b74:	f000 faf2 	bl	800115c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000b78:	003b      	movs	r3, r7
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000b7e:	003b      	movs	r3, r7
 8000b80:	2200      	movs	r2, #0
 8000b82:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b84:	0039      	movs	r1, r7
 8000b86:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <MX_DAC1_Init+0x5c>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f001 fc2d 	bl	80023ea <HAL_DAC_ConfigChannel>
 8000b90:	1e03      	subs	r3, r0, #0
 8000b92:	d001      	beq.n	8000b98 <MX_DAC1_Init+0x50>
  {
    Error_Handler();
 8000b94:	f000 fae2 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000b98:	46c0      	nop			; (mov r8, r8)
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	b002      	add	sp, #8
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000394 	.word	0x20000394
 8000ba4:	2000012c 	.word	0x2000012c
 8000ba8:	40007400 	.word	0x40007400

08000bac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bb0:	4b1b      	ldr	r3, [pc, #108]	; (8000c20 <MX_I2C1_Init+0x74>)
 8000bb2:	4a1c      	ldr	r2, [pc, #112]	; (8000c24 <MX_I2C1_Init+0x78>)
 8000bb4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000bb6:	4b1a      	ldr	r3, [pc, #104]	; (8000c20 <MX_I2C1_Init+0x74>)
 8000bb8:	4a1b      	ldr	r2, [pc, #108]	; (8000c28 <MX_I2C1_Init+0x7c>)
 8000bba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000bbc:	4b18      	ldr	r3, [pc, #96]	; (8000c20 <MX_I2C1_Init+0x74>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bc2:	4b17      	ldr	r3, [pc, #92]	; (8000c20 <MX_I2C1_Init+0x74>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bc8:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <MX_I2C1_Init+0x74>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000bce:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <MX_I2C1_Init+0x74>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bd4:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <MX_I2C1_Init+0x74>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bda:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <MX_I2C1_Init+0x74>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000be0:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <MX_I2C1_Init+0x74>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000be6:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <MX_I2C1_Init+0x74>)
 8000be8:	0018      	movs	r0, r3
 8000bea:	f002 f851 	bl	8002c90 <HAL_I2C_Init>
 8000bee:	1e03      	subs	r3, r0, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000bf2:	f000 fab3 	bl	800115c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <MX_I2C1_Init+0x74>)
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f002 f8de 	bl	8002dbc <HAL_I2CEx_ConfigAnalogFilter>
 8000c00:	1e03      	subs	r3, r0, #0
 8000c02:	d001      	beq.n	8000c08 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c04:	f000 faaa 	bl	800115c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c08:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <MX_I2C1_Init+0x74>)
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f002 f921 	bl	8002e54 <HAL_I2CEx_ConfigDigitalFilter>
 8000c12:	1e03      	subs	r3, r0, #0
 8000c14:	d001      	beq.n	8000c1a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c16:	f000 faa1 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000140 	.word	0x20000140
 8000c24:	40005400 	.word	0x40005400
 8000c28:	2000090e 	.word	0x2000090e

08000c2c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c30:	4b1c      	ldr	r3, [pc, #112]	; (8000ca4 <MX_SPI1_Init+0x78>)
 8000c32:	4a1d      	ldr	r2, [pc, #116]	; (8000ca8 <MX_SPI1_Init+0x7c>)
 8000c34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c36:	4b1b      	ldr	r3, [pc, #108]	; (8000ca4 <MX_SPI1_Init+0x78>)
 8000c38:	2282      	movs	r2, #130	; 0x82
 8000c3a:	0052      	lsls	r2, r2, #1
 8000c3c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000c3e:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <MX_SPI1_Init+0x78>)
 8000c40:	2280      	movs	r2, #128	; 0x80
 8000c42:	00d2      	lsls	r2, r2, #3
 8000c44:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000c46:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <MX_SPI1_Init+0x78>)
 8000c48:	22f0      	movs	r2, #240	; 0xf0
 8000c4a:	0112      	lsls	r2, r2, #4
 8000c4c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c4e:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <MX_SPI1_Init+0x78>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c54:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <MX_SPI1_Init+0x78>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c5a:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <MX_SPI1_Init+0x78>)
 8000c5c:	2280      	movs	r2, #128	; 0x80
 8000c5e:	0092      	lsls	r2, r2, #2
 8000c60:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000c62:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <MX_SPI1_Init+0x78>)
 8000c64:	2218      	movs	r2, #24
 8000c66:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c68:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <MX_SPI1_Init+0x78>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ca4 <MX_SPI1_Init+0x78>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c74:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <MX_SPI1_Init+0x78>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <MX_SPI1_Init+0x78>)
 8000c7c:	2207      	movs	r2, #7
 8000c7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <MX_SPI1_Init+0x78>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c86:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <MX_SPI1_Init+0x78>)
 8000c88:	2208      	movs	r2, #8
 8000c8a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c8c:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <MX_SPI1_Init+0x78>)
 8000c8e:	0018      	movs	r0, r3
 8000c90:	f002 feaa 	bl	80039e8 <HAL_SPI_Init>
 8000c94:	1e03      	subs	r3, r0, #0
 8000c96:	d001      	beq.n	8000c9c <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8000c98:	f000 fa60 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c9c:	46c0      	nop			; (mov r8, r8)
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	2000018c 	.word	0x2000018c
 8000ca8:	40013000 	.word	0x40013000

08000cac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000cb0:	4b1c      	ldr	r3, [pc, #112]	; (8000d24 <MX_SPI2_Init+0x78>)
 8000cb2:	4a1d      	ldr	r2, [pc, #116]	; (8000d28 <MX_SPI2_Init+0x7c>)
 8000cb4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000cb6:	4b1b      	ldr	r3, [pc, #108]	; (8000d24 <MX_SPI2_Init+0x78>)
 8000cb8:	2282      	movs	r2, #130	; 0x82
 8000cba:	0052      	lsls	r2, r2, #1
 8000cbc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000cbe:	4b19      	ldr	r3, [pc, #100]	; (8000d24 <MX_SPI2_Init+0x78>)
 8000cc0:	2280      	movs	r2, #128	; 0x80
 8000cc2:	00d2      	lsls	r2, r2, #3
 8000cc4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000cc6:	4b17      	ldr	r3, [pc, #92]	; (8000d24 <MX_SPI2_Init+0x78>)
 8000cc8:	22f0      	movs	r2, #240	; 0xf0
 8000cca:	0112      	lsls	r2, r2, #4
 8000ccc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cce:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <MX_SPI2_Init+0x78>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cd4:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <MX_SPI2_Init+0x78>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000cda:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <MX_SPI2_Init+0x78>)
 8000cdc:	2280      	movs	r2, #128	; 0x80
 8000cde:	0092      	lsls	r2, r2, #2
 8000ce0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000ce2:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <MX_SPI2_Init+0x78>)
 8000ce4:	2218      	movs	r2, #24
 8000ce6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ce8:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <MX_SPI2_Init+0x78>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cee:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <MX_SPI2_Init+0x78>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <MX_SPI2_Init+0x78>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <MX_SPI2_Init+0x78>)
 8000cfc:	2207      	movs	r2, #7
 8000cfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d00:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <MX_SPI2_Init+0x78>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d06:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <MX_SPI2_Init+0x78>)
 8000d08:	2208      	movs	r2, #8
 8000d0a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d0c:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <MX_SPI2_Init+0x78>)
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f002 fe6a 	bl	80039e8 <HAL_SPI_Init>
 8000d14:	1e03      	subs	r3, r0, #0
 8000d16:	d001      	beq.n	8000d1c <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8000d18:	f000 fa20 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d1c:	46c0      	nop			; (mov r8, r8)
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	200001f0 	.word	0x200001f0
 8000d28:	40003800 	.word	0x40003800

08000d2c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b096      	sub	sp, #88	; 0x58
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d32:	2348      	movs	r3, #72	; 0x48
 8000d34:	18fb      	adds	r3, r7, r3
 8000d36:	0018      	movs	r0, r3
 8000d38:	2310      	movs	r3, #16
 8000d3a:	001a      	movs	r2, r3
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	f005 fc33 	bl	80065a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d42:	2340      	movs	r3, #64	; 0x40
 8000d44:	18fb      	adds	r3, r7, r3
 8000d46:	0018      	movs	r0, r3
 8000d48:	2308      	movs	r3, #8
 8000d4a:	001a      	movs	r2, r3
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	f005 fc2b 	bl	80065a8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d52:	2324      	movs	r3, #36	; 0x24
 8000d54:	18fb      	adds	r3, r7, r3
 8000d56:	0018      	movs	r0, r3
 8000d58:	231c      	movs	r3, #28
 8000d5a:	001a      	movs	r2, r3
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	f005 fc23 	bl	80065a8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	0018      	movs	r0, r3
 8000d66:	2320      	movs	r3, #32
 8000d68:	001a      	movs	r2, r3
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	f005 fc1c 	bl	80065a8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d70:	4b46      	ldr	r3, [pc, #280]	; (8000e8c <MX_TIM1_Init+0x160>)
 8000d72:	4a47      	ldr	r2, [pc, #284]	; (8000e90 <MX_TIM1_Init+0x164>)
 8000d74:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100 - 1;
 8000d76:	4b45      	ldr	r3, [pc, #276]	; (8000e8c <MX_TIM1_Init+0x160>)
 8000d78:	2263      	movs	r2, #99	; 0x63
 8000d7a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d7c:	4b43      	ldr	r3, [pc, #268]	; (8000e8c <MX_TIM1_Init+0x160>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24000;
 8000d82:	4b42      	ldr	r3, [pc, #264]	; (8000e8c <MX_TIM1_Init+0x160>)
 8000d84:	4a43      	ldr	r2, [pc, #268]	; (8000e94 <MX_TIM1_Init+0x168>)
 8000d86:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d88:	4b40      	ldr	r3, [pc, #256]	; (8000e8c <MX_TIM1_Init+0x160>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d8e:	4b3f      	ldr	r3, [pc, #252]	; (8000e8c <MX_TIM1_Init+0x160>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d94:	4b3d      	ldr	r3, [pc, #244]	; (8000e8c <MX_TIM1_Init+0x160>)
 8000d96:	2280      	movs	r2, #128	; 0x80
 8000d98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d9a:	4b3c      	ldr	r3, [pc, #240]	; (8000e8c <MX_TIM1_Init+0x160>)
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	f003 f9a9 	bl	80040f4 <HAL_TIM_Base_Init>
 8000da2:	1e03      	subs	r3, r0, #0
 8000da4:	d001      	beq.n	8000daa <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000da6:	f000 f9d9 	bl	800115c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000daa:	2148      	movs	r1, #72	; 0x48
 8000dac:	187b      	adds	r3, r7, r1
 8000dae:	2280      	movs	r2, #128	; 0x80
 8000db0:	0152      	lsls	r2, r2, #5
 8000db2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000db4:	187a      	adds	r2, r7, r1
 8000db6:	4b35      	ldr	r3, [pc, #212]	; (8000e8c <MX_TIM1_Init+0x160>)
 8000db8:	0011      	movs	r1, r2
 8000dba:	0018      	movs	r0, r3
 8000dbc:	f003 fcb0 	bl	8004720 <HAL_TIM_ConfigClockSource>
 8000dc0:	1e03      	subs	r3, r0, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000dc4:	f000 f9ca 	bl	800115c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000dc8:	4b30      	ldr	r3, [pc, #192]	; (8000e8c <MX_TIM1_Init+0x160>)
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f003 f9e2 	bl	8004194 <HAL_TIM_OC_Init>
 8000dd0:	1e03      	subs	r3, r0, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000dd4:	f000 f9c2 	bl	800115c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd8:	2140      	movs	r1, #64	; 0x40
 8000dda:	187b      	adds	r3, r7, r1
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000de0:	187b      	adds	r3, r7, r1
 8000de2:	2200      	movs	r2, #0
 8000de4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000de6:	187a      	adds	r2, r7, r1
 8000de8:	4b28      	ldr	r3, [pc, #160]	; (8000e8c <MX_TIM1_Init+0x160>)
 8000dea:	0011      	movs	r1, r2
 8000dec:	0018      	movs	r0, r3
 8000dee:	f004 f8c5 	bl	8004f7c <HAL_TIMEx_MasterConfigSynchronization>
 8000df2:	1e03      	subs	r3, r0, #0
 8000df4:	d001      	beq.n	8000dfa <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8000df6:	f000 f9b1 	bl	800115c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000dfa:	2124      	movs	r1, #36	; 0x24
 8000dfc:	187b      	adds	r3, r7, r1
 8000dfe:	2230      	movs	r2, #48	; 0x30
 8000e00:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 12000 - 1;
 8000e02:	187b      	adds	r3, r7, r1
 8000e04:	4a24      	ldr	r2, [pc, #144]	; (8000e98 <MX_TIM1_Init+0x16c>)
 8000e06:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e08:	187b      	adds	r3, r7, r1
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e0e:	187b      	adds	r3, r7, r1
 8000e10:	2200      	movs	r2, #0
 8000e12:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e14:	187b      	adds	r3, r7, r1
 8000e16:	2200      	movs	r2, #0
 8000e18:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e1a:	187b      	adds	r3, r7, r1
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e20:	187b      	adds	r3, r7, r1
 8000e22:	2200      	movs	r2, #0
 8000e24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e26:	1879      	adds	r1, r7, r1
 8000e28:	4b18      	ldr	r3, [pc, #96]	; (8000e8c <MX_TIM1_Init+0x160>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f003 fc1f 	bl	8004670 <HAL_TIM_OC_ConfigChannel>
 8000e32:	1e03      	subs	r3, r0, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000e36:	f000 f991 	bl	800115c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	2200      	movs	r2, #0
 8000e44:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e4c:	1d3b      	adds	r3, r7, #4
 8000e4e:	2200      	movs	r2, #0
 8000e50:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	2200      	movs	r2, #0
 8000e56:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	2280      	movs	r2, #128	; 0x80
 8000e5c:	0192      	lsls	r2, r2, #6
 8000e5e:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	2200      	movs	r2, #0
 8000e64:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e66:	1d3a      	adds	r2, r7, #4
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <MX_TIM1_Init+0x160>)
 8000e6a:	0011      	movs	r1, r2
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f004 f8e3 	bl	8005038 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e72:	1e03      	subs	r3, r0, #0
 8000e74:	d001      	beq.n	8000e7a <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8000e76:	f000 f971 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e7a:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <MX_TIM1_Init+0x160>)
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	f000 fbaf 	bl	80015e0 <HAL_TIM_MspPostInit>

}
 8000e82:	46c0      	nop			; (mov r8, r8)
 8000e84:	46bd      	mov	sp, r7
 8000e86:	b016      	add	sp, #88	; 0x58
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	20000254 	.word	0x20000254
 8000e90:	40012c00 	.word	0x40012c00
 8000e94:	00005dc0 	.word	0x00005dc0
 8000e98:	00002edf 	.word	0x00002edf

08000e9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08e      	sub	sp, #56	; 0x38
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ea2:	2328      	movs	r3, #40	; 0x28
 8000ea4:	18fb      	adds	r3, r7, r3
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	2310      	movs	r3, #16
 8000eaa:	001a      	movs	r2, r3
 8000eac:	2100      	movs	r1, #0
 8000eae:	f005 fb7b 	bl	80065a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb2:	2320      	movs	r3, #32
 8000eb4:	18fb      	adds	r3, r7, r3
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	2308      	movs	r3, #8
 8000eba:	001a      	movs	r2, r3
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	f005 fb73 	bl	80065a8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	231c      	movs	r3, #28
 8000ec8:	001a      	movs	r2, r3
 8000eca:	2100      	movs	r1, #0
 8000ecc:	f005 fb6c 	bl	80065a8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ed0:	4b30      	ldr	r3, [pc, #192]	; (8000f94 <MX_TIM2_Init+0xf8>)
 8000ed2:	2280      	movs	r2, #128	; 0x80
 8000ed4:	05d2      	lsls	r2, r2, #23
 8000ed6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100 - 1;
 8000ed8:	4b2e      	ldr	r3, [pc, #184]	; (8000f94 <MX_TIM2_Init+0xf8>)
 8000eda:	2263      	movs	r2, #99	; 0x63
 8000edc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ede:	4b2d      	ldr	r3, [pc, #180]	; (8000f94 <MX_TIM2_Init+0xf8>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 30000 - 1;
 8000ee4:	4b2b      	ldr	r3, [pc, #172]	; (8000f94 <MX_TIM2_Init+0xf8>)
 8000ee6:	4a2c      	ldr	r2, [pc, #176]	; (8000f98 <MX_TIM2_Init+0xfc>)
 8000ee8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eea:	4b2a      	ldr	r3, [pc, #168]	; (8000f94 <MX_TIM2_Init+0xf8>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ef0:	4b28      	ldr	r3, [pc, #160]	; (8000f94 <MX_TIM2_Init+0xf8>)
 8000ef2:	2280      	movs	r2, #128	; 0x80
 8000ef4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ef6:	4b27      	ldr	r3, [pc, #156]	; (8000f94 <MX_TIM2_Init+0xf8>)
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f003 f8fb 	bl	80040f4 <HAL_TIM_Base_Init>
 8000efe:	1e03      	subs	r3, r0, #0
 8000f00:	d001      	beq.n	8000f06 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000f02:	f000 f92b 	bl	800115c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f06:	2128      	movs	r1, #40	; 0x28
 8000f08:	187b      	adds	r3, r7, r1
 8000f0a:	2280      	movs	r2, #128	; 0x80
 8000f0c:	0152      	lsls	r2, r2, #5
 8000f0e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f10:	187a      	adds	r2, r7, r1
 8000f12:	4b20      	ldr	r3, [pc, #128]	; (8000f94 <MX_TIM2_Init+0xf8>)
 8000f14:	0011      	movs	r1, r2
 8000f16:	0018      	movs	r0, r3
 8000f18:	f003 fc02 	bl	8004720 <HAL_TIM_ConfigClockSource>
 8000f1c:	1e03      	subs	r3, r0, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000f20:	f000 f91c 	bl	800115c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000f24:	4b1b      	ldr	r3, [pc, #108]	; (8000f94 <MX_TIM2_Init+0xf8>)
 8000f26:	0018      	movs	r0, r3
 8000f28:	f003 f934 	bl	8004194 <HAL_TIM_OC_Init>
 8000f2c:	1e03      	subs	r3, r0, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000f30:	f000 f914 	bl	800115c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f34:	2120      	movs	r1, #32
 8000f36:	187b      	adds	r3, r7, r1
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f3c:	187b      	adds	r3, r7, r1
 8000f3e:	2200      	movs	r2, #0
 8000f40:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f42:	187a      	adds	r2, r7, r1
 8000f44:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <MX_TIM2_Init+0xf8>)
 8000f46:	0011      	movs	r1, r2
 8000f48:	0018      	movs	r0, r3
 8000f4a:	f004 f817 	bl	8004f7c <HAL_TIMEx_MasterConfigSynchronization>
 8000f4e:	1e03      	subs	r3, r0, #0
 8000f50:	d001      	beq.n	8000f56 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000f52:	f000 f903 	bl	800115c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	2230      	movs	r2, #48	; 0x30
 8000f5a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 6000 - 1;
 8000f5c:	1d3b      	adds	r3, r7, #4
 8000f5e:	4a0f      	ldr	r2, [pc, #60]	; (8000f9c <MX_TIM2_Init+0x100>)
 8000f60:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f62:	1d3b      	adds	r3, r7, #4
 8000f64:	2200      	movs	r2, #0
 8000f66:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f6e:	1d39      	adds	r1, r7, #4
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <MX_TIM2_Init+0xf8>)
 8000f72:	220c      	movs	r2, #12
 8000f74:	0018      	movs	r0, r3
 8000f76:	f003 fb7b 	bl	8004670 <HAL_TIM_OC_ConfigChannel>
 8000f7a:	1e03      	subs	r3, r0, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000f7e:	f000 f8ed 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f82:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <MX_TIM2_Init+0xf8>)
 8000f84:	0018      	movs	r0, r3
 8000f86:	f000 fb2b 	bl	80015e0 <HAL_TIM_MspPostInit>

}
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	b00e      	add	sp, #56	; 0x38
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	46c0      	nop			; (mov r8, r8)
 8000f94:	2000029c 	.word	0x2000029c
 8000f98:	0000752f 	.word	0x0000752f
 8000f9c:	0000176f 	.word	0x0000176f

08000fa0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */
    erpa_seq = 0;
 8000fa4:	4b19      	ldr	r3, [pc, #100]	; (800100c <MX_USART1_UART_Init+0x6c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	801a      	strh	r2, [r3, #0]
    pmt_seq = 0;
 8000faa:	4b19      	ldr	r3, [pc, #100]	; (8001010 <MX_USART1_UART_Init+0x70>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	801a      	strh	r2, [r3, #0]
    hk_seq = 0;
 8000fb0:	4b18      	ldr	r3, [pc, #96]	; (8001014 <MX_USART1_UART_Init+0x74>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	801a      	strh	r2, [r3, #0]
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fb6:	4b18      	ldr	r3, [pc, #96]	; (8001018 <MX_USART1_UART_Init+0x78>)
 8000fb8:	4a18      	ldr	r2, [pc, #96]	; (800101c <MX_USART1_UART_Init+0x7c>)
 8000fba:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fbc:	4b16      	ldr	r3, [pc, #88]	; (8001018 <MX_USART1_UART_Init+0x78>)
 8000fbe:	22e1      	movs	r2, #225	; 0xe1
 8000fc0:	0252      	lsls	r2, r2, #9
 8000fc2:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fc4:	4b14      	ldr	r3, [pc, #80]	; (8001018 <MX_USART1_UART_Init+0x78>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fca:	4b13      	ldr	r3, [pc, #76]	; (8001018 <MX_USART1_UART_Init+0x78>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <MX_USART1_UART_Init+0x78>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <MX_USART1_UART_Init+0x78>)
 8000fd8:	220c      	movs	r2, #12
 8000fda:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fdc:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <MX_USART1_UART_Init+0x78>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fe2:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <MX_USART1_UART_Init+0x78>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fe8:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <MX_USART1_UART_Init+0x78>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fee:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <MX_USART1_UART_Init+0x78>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ff4:	4b08      	ldr	r3, [pc, #32]	; (8001018 <MX_USART1_UART_Init+0x78>)
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f004 f88c 	bl	8005114 <HAL_UART_Init>
 8000ffc:	1e03      	subs	r3, r0, #0
 8000ffe:	d001      	beq.n	8001004 <MX_USART1_UART_Init+0x64>
  {
    Error_Handler();
 8001000:	f000 f8ac 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001004:	46c0      	nop			; (mov r8, r8)
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	200003a0 	.word	0x200003a0
 8001010:	200003aa 	.word	0x200003aa
 8001014:	200003c6 	.word	0x200003c6
 8001018:	200002e4 	.word	0x200002e4
 800101c:	40013800 	.word	0x40013800

08001020 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001026:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <MX_DMA_Init+0x38>)
 8001028:	695a      	ldr	r2, [r3, #20]
 800102a:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <MX_DMA_Init+0x38>)
 800102c:	2101      	movs	r1, #1
 800102e:	430a      	orrs	r2, r1
 8001030:	615a      	str	r2, [r3, #20]
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <MX_DMA_Init+0x38>)
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	2201      	movs	r2, #1
 8001038:	4013      	ands	r3, r2
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800103e:	2200      	movs	r2, #0
 8001040:	2100      	movs	r1, #0
 8001042:	2009      	movs	r0, #9
 8001044:	f001 f97c 	bl	8002340 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001048:	2009      	movs	r0, #9
 800104a:	f001 f98e 	bl	800236a <HAL_NVIC_EnableIRQ>

}
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	46bd      	mov	sp, r7
 8001052:	b002      	add	sp, #8
 8001054:	bd80      	pop	{r7, pc}
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	40021000 	.word	0x40021000

0800105c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800105c:	b590      	push	{r4, r7, lr}
 800105e:	b08b      	sub	sp, #44	; 0x2c
 8001060:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001062:	2414      	movs	r4, #20
 8001064:	193b      	adds	r3, r7, r4
 8001066:	0018      	movs	r0, r3
 8001068:	2314      	movs	r3, #20
 800106a:	001a      	movs	r2, r3
 800106c:	2100      	movs	r1, #0
 800106e:	f005 fa9b 	bl	80065a8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001072:	4b37      	ldr	r3, [pc, #220]	; (8001150 <MX_GPIO_Init+0xf4>)
 8001074:	695a      	ldr	r2, [r3, #20]
 8001076:	4b36      	ldr	r3, [pc, #216]	; (8001150 <MX_GPIO_Init+0xf4>)
 8001078:	2180      	movs	r1, #128	; 0x80
 800107a:	0309      	lsls	r1, r1, #12
 800107c:	430a      	orrs	r2, r1
 800107e:	615a      	str	r2, [r3, #20]
 8001080:	4b33      	ldr	r3, [pc, #204]	; (8001150 <MX_GPIO_Init+0xf4>)
 8001082:	695a      	ldr	r2, [r3, #20]
 8001084:	2380      	movs	r3, #128	; 0x80
 8001086:	031b      	lsls	r3, r3, #12
 8001088:	4013      	ands	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800108e:	4b30      	ldr	r3, [pc, #192]	; (8001150 <MX_GPIO_Init+0xf4>)
 8001090:	695a      	ldr	r2, [r3, #20]
 8001092:	4b2f      	ldr	r3, [pc, #188]	; (8001150 <MX_GPIO_Init+0xf4>)
 8001094:	2180      	movs	r1, #128	; 0x80
 8001096:	03c9      	lsls	r1, r1, #15
 8001098:	430a      	orrs	r2, r1
 800109a:	615a      	str	r2, [r3, #20]
 800109c:	4b2c      	ldr	r3, [pc, #176]	; (8001150 <MX_GPIO_Init+0xf4>)
 800109e:	695a      	ldr	r2, [r3, #20]
 80010a0:	2380      	movs	r3, #128	; 0x80
 80010a2:	03db      	lsls	r3, r3, #15
 80010a4:	4013      	ands	r3, r2
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010aa:	4b29      	ldr	r3, [pc, #164]	; (8001150 <MX_GPIO_Init+0xf4>)
 80010ac:	695a      	ldr	r2, [r3, #20]
 80010ae:	4b28      	ldr	r3, [pc, #160]	; (8001150 <MX_GPIO_Init+0xf4>)
 80010b0:	2180      	movs	r1, #128	; 0x80
 80010b2:	0289      	lsls	r1, r1, #10
 80010b4:	430a      	orrs	r2, r1
 80010b6:	615a      	str	r2, [r3, #20]
 80010b8:	4b25      	ldr	r3, [pc, #148]	; (8001150 <MX_GPIO_Init+0xf4>)
 80010ba:	695a      	ldr	r2, [r3, #20]
 80010bc:	2380      	movs	r3, #128	; 0x80
 80010be:	029b      	lsls	r3, r3, #10
 80010c0:	4013      	ands	r3, r2
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c6:	4b22      	ldr	r3, [pc, #136]	; (8001150 <MX_GPIO_Init+0xf4>)
 80010c8:	695a      	ldr	r2, [r3, #20]
 80010ca:	4b21      	ldr	r3, [pc, #132]	; (8001150 <MX_GPIO_Init+0xf4>)
 80010cc:	2180      	movs	r1, #128	; 0x80
 80010ce:	02c9      	lsls	r1, r1, #11
 80010d0:	430a      	orrs	r2, r1
 80010d2:	615a      	str	r2, [r3, #20]
 80010d4:	4b1e      	ldr	r3, [pc, #120]	; (8001150 <MX_GPIO_Init+0xf4>)
 80010d6:	695a      	ldr	r2, [r3, #20]
 80010d8:	2380      	movs	r3, #128	; 0x80
 80010da:	02db      	lsls	r3, r3, #11
 80010dc:	4013      	ands	r3, r2
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|BLUE_LED_Pin
 80010e2:	239f      	movs	r3, #159	; 0x9f
 80010e4:	019b      	lsls	r3, r3, #6
 80010e6:	481b      	ldr	r0, [pc, #108]	; (8001154 <MX_GPIO_Init+0xf8>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	0019      	movs	r1, r3
 80010ec:	f001 fd97 	bl	8002c1e <HAL_GPIO_WritePin>
                          |GREEN_LED_Pin|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80010f0:	4b19      	ldr	r3, [pc, #100]	; (8001158 <MX_GPIO_Init+0xfc>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	21c0      	movs	r1, #192	; 0xc0
 80010f6:	0018      	movs	r0, r3
 80010f8:	f001 fd91 	bl	8002c1e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 BLUE_LED_Pin
                           GREEN_LED_Pin PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|BLUE_LED_Pin
 80010fc:	193b      	adds	r3, r7, r4
 80010fe:	229f      	movs	r2, #159	; 0x9f
 8001100:	0192      	lsls	r2, r2, #6
 8001102:	601a      	str	r2, [r3, #0]
                          |GREEN_LED_Pin|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001104:	193b      	adds	r3, r7, r4
 8001106:	2201      	movs	r2, #1
 8001108:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	193b      	adds	r3, r7, r4
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001110:	193b      	adds	r3, r7, r4
 8001112:	2200      	movs	r2, #0
 8001114:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001116:	193b      	adds	r3, r7, r4
 8001118:	4a0e      	ldr	r2, [pc, #56]	; (8001154 <MX_GPIO_Init+0xf8>)
 800111a:	0019      	movs	r1, r3
 800111c:	0010      	movs	r0, r2
 800111e:	f001 fbf1 	bl	8002904 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001122:	0021      	movs	r1, r4
 8001124:	187b      	adds	r3, r7, r1
 8001126:	22c0      	movs	r2, #192	; 0xc0
 8001128:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112a:	187b      	adds	r3, r7, r1
 800112c:	2201      	movs	r2, #1
 800112e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	187b      	adds	r3, r7, r1
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	187b      	adds	r3, r7, r1
 8001138:	2200      	movs	r2, #0
 800113a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800113c:	187b      	adds	r3, r7, r1
 800113e:	4a06      	ldr	r2, [pc, #24]	; (8001158 <MX_GPIO_Init+0xfc>)
 8001140:	0019      	movs	r1, r3
 8001142:	0010      	movs	r0, r2
 8001144:	f001 fbde 	bl	8002904 <HAL_GPIO_Init>

}
 8001148:	46c0      	nop			; (mov r8, r8)
 800114a:	46bd      	mov	sp, r7
 800114c:	b00b      	add	sp, #44	; 0x2c
 800114e:	bd90      	pop	{r4, r7, pc}
 8001150:	40021000 	.word	0x40021000
 8001154:	48000800 	.word	0x48000800
 8001158:	48001400 	.word	0x48001400

0800115c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001160:	b672      	cpsid	i
}
 8001162:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8001164:	e7fe      	b.n	8001164 <Error_Handler+0x8>
	...

08001168 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116e:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <HAL_MspInit+0x44>)
 8001170:	699a      	ldr	r2, [r3, #24]
 8001172:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <HAL_MspInit+0x44>)
 8001174:	2101      	movs	r1, #1
 8001176:	430a      	orrs	r2, r1
 8001178:	619a      	str	r2, [r3, #24]
 800117a:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <HAL_MspInit+0x44>)
 800117c:	699b      	ldr	r3, [r3, #24]
 800117e:	2201      	movs	r2, #1
 8001180:	4013      	ands	r3, r2
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001186:	4b09      	ldr	r3, [pc, #36]	; (80011ac <HAL_MspInit+0x44>)
 8001188:	69da      	ldr	r2, [r3, #28]
 800118a:	4b08      	ldr	r3, [pc, #32]	; (80011ac <HAL_MspInit+0x44>)
 800118c:	2180      	movs	r1, #128	; 0x80
 800118e:	0549      	lsls	r1, r1, #21
 8001190:	430a      	orrs	r2, r1
 8001192:	61da      	str	r2, [r3, #28]
 8001194:	4b05      	ldr	r3, [pc, #20]	; (80011ac <HAL_MspInit+0x44>)
 8001196:	69da      	ldr	r2, [r3, #28]
 8001198:	2380      	movs	r3, #128	; 0x80
 800119a:	055b      	lsls	r3, r3, #21
 800119c:	4013      	ands	r3, r2
 800119e:	603b      	str	r3, [r7, #0]
 80011a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011a2:	46c0      	nop			; (mov r8, r8)
 80011a4:	46bd      	mov	sp, r7
 80011a6:	b002      	add	sp, #8
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	46c0      	nop			; (mov r8, r8)
 80011ac:	40021000 	.word	0x40021000

080011b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011b0:	b590      	push	{r4, r7, lr}
 80011b2:	b08d      	sub	sp, #52	; 0x34
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	241c      	movs	r4, #28
 80011ba:	193b      	adds	r3, r7, r4
 80011bc:	0018      	movs	r0, r3
 80011be:	2314      	movs	r3, #20
 80011c0:	001a      	movs	r2, r3
 80011c2:	2100      	movs	r1, #0
 80011c4:	f005 f9f0 	bl	80065a8 <memset>
  if(hadc->Instance==ADC1)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a4a      	ldr	r2, [pc, #296]	; (80012f8 <HAL_ADC_MspInit+0x148>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d000      	beq.n	80011d4 <HAL_ADC_MspInit+0x24>
 80011d2:	e08d      	b.n	80012f0 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011d4:	4b49      	ldr	r3, [pc, #292]	; (80012fc <HAL_ADC_MspInit+0x14c>)
 80011d6:	699a      	ldr	r2, [r3, #24]
 80011d8:	4b48      	ldr	r3, [pc, #288]	; (80012fc <HAL_ADC_MspInit+0x14c>)
 80011da:	2180      	movs	r1, #128	; 0x80
 80011dc:	0089      	lsls	r1, r1, #2
 80011de:	430a      	orrs	r2, r1
 80011e0:	619a      	str	r2, [r3, #24]
 80011e2:	4b46      	ldr	r3, [pc, #280]	; (80012fc <HAL_ADC_MspInit+0x14c>)
 80011e4:	699a      	ldr	r2, [r3, #24]
 80011e6:	2380      	movs	r3, #128	; 0x80
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	4013      	ands	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
 80011ee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f0:	4b42      	ldr	r3, [pc, #264]	; (80012fc <HAL_ADC_MspInit+0x14c>)
 80011f2:	695a      	ldr	r2, [r3, #20]
 80011f4:	4b41      	ldr	r3, [pc, #260]	; (80012fc <HAL_ADC_MspInit+0x14c>)
 80011f6:	2180      	movs	r1, #128	; 0x80
 80011f8:	0309      	lsls	r1, r1, #12
 80011fa:	430a      	orrs	r2, r1
 80011fc:	615a      	str	r2, [r3, #20]
 80011fe:	4b3f      	ldr	r3, [pc, #252]	; (80012fc <HAL_ADC_MspInit+0x14c>)
 8001200:	695a      	ldr	r2, [r3, #20]
 8001202:	2380      	movs	r3, #128	; 0x80
 8001204:	031b      	lsls	r3, r3, #12
 8001206:	4013      	ands	r3, r2
 8001208:	617b      	str	r3, [r7, #20]
 800120a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800120c:	4b3b      	ldr	r3, [pc, #236]	; (80012fc <HAL_ADC_MspInit+0x14c>)
 800120e:	695a      	ldr	r2, [r3, #20]
 8001210:	4b3a      	ldr	r3, [pc, #232]	; (80012fc <HAL_ADC_MspInit+0x14c>)
 8001212:	2180      	movs	r1, #128	; 0x80
 8001214:	0289      	lsls	r1, r1, #10
 8001216:	430a      	orrs	r2, r1
 8001218:	615a      	str	r2, [r3, #20]
 800121a:	4b38      	ldr	r3, [pc, #224]	; (80012fc <HAL_ADC_MspInit+0x14c>)
 800121c:	695a      	ldr	r2, [r3, #20]
 800121e:	2380      	movs	r3, #128	; 0x80
 8001220:	029b      	lsls	r3, r3, #10
 8001222:	4013      	ands	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
 8001226:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001228:	4b34      	ldr	r3, [pc, #208]	; (80012fc <HAL_ADC_MspInit+0x14c>)
 800122a:	695a      	ldr	r2, [r3, #20]
 800122c:	4b33      	ldr	r3, [pc, #204]	; (80012fc <HAL_ADC_MspInit+0x14c>)
 800122e:	2180      	movs	r1, #128	; 0x80
 8001230:	02c9      	lsls	r1, r1, #11
 8001232:	430a      	orrs	r2, r1
 8001234:	615a      	str	r2, [r3, #20]
 8001236:	4b31      	ldr	r3, [pc, #196]	; (80012fc <HAL_ADC_MspInit+0x14c>)
 8001238:	695a      	ldr	r2, [r3, #20]
 800123a:	2380      	movs	r3, #128	; 0x80
 800123c:	02db      	lsls	r3, r3, #11
 800123e:	4013      	ands	r3, r2
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001244:	193b      	adds	r3, r7, r4
 8001246:	223f      	movs	r2, #63	; 0x3f
 8001248:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800124a:	193b      	adds	r3, r7, r4
 800124c:	2203      	movs	r2, #3
 800124e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	193b      	adds	r3, r7, r4
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001256:	193b      	adds	r3, r7, r4
 8001258:	4a29      	ldr	r2, [pc, #164]	; (8001300 <HAL_ADC_MspInit+0x150>)
 800125a:	0019      	movs	r1, r3
 800125c:	0010      	movs	r0, r2
 800125e:	f001 fb51 	bl	8002904 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001262:	193b      	adds	r3, r7, r4
 8001264:	228f      	movs	r2, #143	; 0x8f
 8001266:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001268:	193b      	adds	r3, r7, r4
 800126a:	2203      	movs	r2, #3
 800126c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	193b      	adds	r3, r7, r4
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001274:	193a      	adds	r2, r7, r4
 8001276:	2390      	movs	r3, #144	; 0x90
 8001278:	05db      	lsls	r3, r3, #23
 800127a:	0011      	movs	r1, r2
 800127c:	0018      	movs	r0, r3
 800127e:	f001 fb41 	bl	8002904 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001282:	193b      	adds	r3, r7, r4
 8001284:	2203      	movs	r2, #3
 8001286:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001288:	193b      	adds	r3, r7, r4
 800128a:	2203      	movs	r2, #3
 800128c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	193b      	adds	r3, r7, r4
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001294:	193b      	adds	r3, r7, r4
 8001296:	4a1b      	ldr	r2, [pc, #108]	; (8001304 <HAL_ADC_MspInit+0x154>)
 8001298:	0019      	movs	r1, r3
 800129a:	0010      	movs	r0, r2
 800129c:	f001 fb32 	bl	8002904 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80012a0:	4b19      	ldr	r3, [pc, #100]	; (8001308 <HAL_ADC_MspInit+0x158>)
 80012a2:	4a1a      	ldr	r2, [pc, #104]	; (800130c <HAL_ADC_MspInit+0x15c>)
 80012a4:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012a6:	4b18      	ldr	r3, [pc, #96]	; (8001308 <HAL_ADC_MspInit+0x158>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80012ac:	4b16      	ldr	r3, [pc, #88]	; (8001308 <HAL_ADC_MspInit+0x158>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80012b2:	4b15      	ldr	r3, [pc, #84]	; (8001308 <HAL_ADC_MspInit+0x158>)
 80012b4:	2280      	movs	r2, #128	; 0x80
 80012b6:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012b8:	4b13      	ldr	r3, [pc, #76]	; (8001308 <HAL_ADC_MspInit+0x158>)
 80012ba:	2280      	movs	r2, #128	; 0x80
 80012bc:	0052      	lsls	r2, r2, #1
 80012be:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012c0:	4b11      	ldr	r3, [pc, #68]	; (8001308 <HAL_ADC_MspInit+0x158>)
 80012c2:	2280      	movs	r2, #128	; 0x80
 80012c4:	00d2      	lsls	r2, r2, #3
 80012c6:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 80012c8:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <HAL_ADC_MspInit+0x158>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80012ce:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <HAL_ADC_MspInit+0x158>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <HAL_ADC_MspInit+0x158>)
 80012d6:	0018      	movs	r0, r3
 80012d8:	f001 f8fe 	bl	80024d8 <HAL_DMA_Init>
 80012dc:	1e03      	subs	r3, r0, #0
 80012de:	d001      	beq.n	80012e4 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 80012e0:	f7ff ff3c 	bl	800115c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4a08      	ldr	r2, [pc, #32]	; (8001308 <HAL_ADC_MspInit+0x158>)
 80012e8:	631a      	str	r2, [r3, #48]	; 0x30
 80012ea:	4b07      	ldr	r3, [pc, #28]	; (8001308 <HAL_ADC_MspInit+0x158>)
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012f0:	46c0      	nop			; (mov r8, r8)
 80012f2:	46bd      	mov	sp, r7
 80012f4:	b00d      	add	sp, #52	; 0x34
 80012f6:	bd90      	pop	{r4, r7, pc}
 80012f8:	40012400 	.word	0x40012400
 80012fc:	40021000 	.word	0x40021000
 8001300:	48000800 	.word	0x48000800
 8001304:	48000400 	.word	0x48000400
 8001308:	200000e8 	.word	0x200000e8
 800130c:	40020008 	.word	0x40020008

08001310 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001310:	b590      	push	{r4, r7, lr}
 8001312:	b08b      	sub	sp, #44	; 0x2c
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001318:	2414      	movs	r4, #20
 800131a:	193b      	adds	r3, r7, r4
 800131c:	0018      	movs	r0, r3
 800131e:	2314      	movs	r3, #20
 8001320:	001a      	movs	r2, r3
 8001322:	2100      	movs	r1, #0
 8001324:	f005 f940 	bl	80065a8 <memset>
  if(hdac->Instance==DAC)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a19      	ldr	r2, [pc, #100]	; (8001394 <HAL_DAC_MspInit+0x84>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d12b      	bne.n	800138a <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001332:	4b19      	ldr	r3, [pc, #100]	; (8001398 <HAL_DAC_MspInit+0x88>)
 8001334:	69da      	ldr	r2, [r3, #28]
 8001336:	4b18      	ldr	r3, [pc, #96]	; (8001398 <HAL_DAC_MspInit+0x88>)
 8001338:	2180      	movs	r1, #128	; 0x80
 800133a:	0589      	lsls	r1, r1, #22
 800133c:	430a      	orrs	r2, r1
 800133e:	61da      	str	r2, [r3, #28]
 8001340:	4b15      	ldr	r3, [pc, #84]	; (8001398 <HAL_DAC_MspInit+0x88>)
 8001342:	69da      	ldr	r2, [r3, #28]
 8001344:	2380      	movs	r3, #128	; 0x80
 8001346:	059b      	lsls	r3, r3, #22
 8001348:	4013      	ands	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134e:	4b12      	ldr	r3, [pc, #72]	; (8001398 <HAL_DAC_MspInit+0x88>)
 8001350:	695a      	ldr	r2, [r3, #20]
 8001352:	4b11      	ldr	r3, [pc, #68]	; (8001398 <HAL_DAC_MspInit+0x88>)
 8001354:	2180      	movs	r1, #128	; 0x80
 8001356:	0289      	lsls	r1, r1, #10
 8001358:	430a      	orrs	r2, r1
 800135a:	615a      	str	r2, [r3, #20]
 800135c:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <HAL_DAC_MspInit+0x88>)
 800135e:	695a      	ldr	r2, [r3, #20]
 8001360:	2380      	movs	r3, #128	; 0x80
 8001362:	029b      	lsls	r3, r3, #10
 8001364:	4013      	ands	r3, r2
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800136a:	193b      	adds	r3, r7, r4
 800136c:	2210      	movs	r2, #16
 800136e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001370:	193b      	adds	r3, r7, r4
 8001372:	2203      	movs	r2, #3
 8001374:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	193b      	adds	r3, r7, r4
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137c:	193a      	adds	r2, r7, r4
 800137e:	2390      	movs	r3, #144	; 0x90
 8001380:	05db      	lsls	r3, r3, #23
 8001382:	0011      	movs	r1, r2
 8001384:	0018      	movs	r0, r3
 8001386:	f001 fabd 	bl	8002904 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	46bd      	mov	sp, r7
 800138e:	b00b      	add	sp, #44	; 0x2c
 8001390:	bd90      	pop	{r4, r7, pc}
 8001392:	46c0      	nop			; (mov r8, r8)
 8001394:	40007400 	.word	0x40007400
 8001398:	40021000 	.word	0x40021000

0800139c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800139c:	b590      	push	{r4, r7, lr}
 800139e:	b08b      	sub	sp, #44	; 0x2c
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	2414      	movs	r4, #20
 80013a6:	193b      	adds	r3, r7, r4
 80013a8:	0018      	movs	r0, r3
 80013aa:	2314      	movs	r3, #20
 80013ac:	001a      	movs	r2, r3
 80013ae:	2100      	movs	r1, #0
 80013b0:	f005 f8fa 	bl	80065a8 <memset>
  if(hi2c->Instance==I2C1)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a1c      	ldr	r2, [pc, #112]	; (800142c <HAL_I2C_MspInit+0x90>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d132      	bne.n	8001424 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013be:	4b1c      	ldr	r3, [pc, #112]	; (8001430 <HAL_I2C_MspInit+0x94>)
 80013c0:	695a      	ldr	r2, [r3, #20]
 80013c2:	4b1b      	ldr	r3, [pc, #108]	; (8001430 <HAL_I2C_MspInit+0x94>)
 80013c4:	2180      	movs	r1, #128	; 0x80
 80013c6:	02c9      	lsls	r1, r1, #11
 80013c8:	430a      	orrs	r2, r1
 80013ca:	615a      	str	r2, [r3, #20]
 80013cc:	4b18      	ldr	r3, [pc, #96]	; (8001430 <HAL_I2C_MspInit+0x94>)
 80013ce:	695a      	ldr	r2, [r3, #20]
 80013d0:	2380      	movs	r3, #128	; 0x80
 80013d2:	02db      	lsls	r3, r3, #11
 80013d4:	4013      	ands	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
 80013d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013da:	193b      	adds	r3, r7, r4
 80013dc:	22c0      	movs	r2, #192	; 0xc0
 80013de:	0092      	lsls	r2, r2, #2
 80013e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013e2:	0021      	movs	r1, r4
 80013e4:	187b      	adds	r3, r7, r1
 80013e6:	2212      	movs	r2, #18
 80013e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	187b      	adds	r3, r7, r1
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013f0:	187b      	adds	r3, r7, r1
 80013f2:	2203      	movs	r2, #3
 80013f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80013f6:	187b      	adds	r3, r7, r1
 80013f8:	2201      	movs	r2, #1
 80013fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013fc:	187b      	adds	r3, r7, r1
 80013fe:	4a0d      	ldr	r2, [pc, #52]	; (8001434 <HAL_I2C_MspInit+0x98>)
 8001400:	0019      	movs	r1, r3
 8001402:	0010      	movs	r0, r2
 8001404:	f001 fa7e 	bl	8002904 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001408:	4b09      	ldr	r3, [pc, #36]	; (8001430 <HAL_I2C_MspInit+0x94>)
 800140a:	69da      	ldr	r2, [r3, #28]
 800140c:	4b08      	ldr	r3, [pc, #32]	; (8001430 <HAL_I2C_MspInit+0x94>)
 800140e:	2180      	movs	r1, #128	; 0x80
 8001410:	0389      	lsls	r1, r1, #14
 8001412:	430a      	orrs	r2, r1
 8001414:	61da      	str	r2, [r3, #28]
 8001416:	4b06      	ldr	r3, [pc, #24]	; (8001430 <HAL_I2C_MspInit+0x94>)
 8001418:	69da      	ldr	r2, [r3, #28]
 800141a:	2380      	movs	r3, #128	; 0x80
 800141c:	039b      	lsls	r3, r3, #14
 800141e:	4013      	ands	r3, r2
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001424:	46c0      	nop			; (mov r8, r8)
 8001426:	46bd      	mov	sp, r7
 8001428:	b00b      	add	sp, #44	; 0x2c
 800142a:	bd90      	pop	{r4, r7, pc}
 800142c:	40005400 	.word	0x40005400
 8001430:	40021000 	.word	0x40021000
 8001434:	48000400 	.word	0x48000400

08001438 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001438:	b590      	push	{r4, r7, lr}
 800143a:	b08d      	sub	sp, #52	; 0x34
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	241c      	movs	r4, #28
 8001442:	193b      	adds	r3, r7, r4
 8001444:	0018      	movs	r0, r3
 8001446:	2314      	movs	r3, #20
 8001448:	001a      	movs	r2, r3
 800144a:	2100      	movs	r1, #0
 800144c:	f005 f8ac 	bl	80065a8 <memset>
  if(hspi->Instance==SPI1)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a39      	ldr	r2, [pc, #228]	; (800153c <HAL_SPI_MspInit+0x104>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d133      	bne.n	80014c2 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800145a:	4b39      	ldr	r3, [pc, #228]	; (8001540 <HAL_SPI_MspInit+0x108>)
 800145c:	699a      	ldr	r2, [r3, #24]
 800145e:	4b38      	ldr	r3, [pc, #224]	; (8001540 <HAL_SPI_MspInit+0x108>)
 8001460:	2180      	movs	r1, #128	; 0x80
 8001462:	0149      	lsls	r1, r1, #5
 8001464:	430a      	orrs	r2, r1
 8001466:	619a      	str	r2, [r3, #24]
 8001468:	4b35      	ldr	r3, [pc, #212]	; (8001540 <HAL_SPI_MspInit+0x108>)
 800146a:	699a      	ldr	r2, [r3, #24]
 800146c:	2380      	movs	r3, #128	; 0x80
 800146e:	015b      	lsls	r3, r3, #5
 8001470:	4013      	ands	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
 8001474:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001476:	4b32      	ldr	r3, [pc, #200]	; (8001540 <HAL_SPI_MspInit+0x108>)
 8001478:	695a      	ldr	r2, [r3, #20]
 800147a:	4b31      	ldr	r3, [pc, #196]	; (8001540 <HAL_SPI_MspInit+0x108>)
 800147c:	2180      	movs	r1, #128	; 0x80
 800147e:	0289      	lsls	r1, r1, #10
 8001480:	430a      	orrs	r2, r1
 8001482:	615a      	str	r2, [r3, #20]
 8001484:	4b2e      	ldr	r3, [pc, #184]	; (8001540 <HAL_SPI_MspInit+0x108>)
 8001486:	695a      	ldr	r2, [r3, #20]
 8001488:	2380      	movs	r3, #128	; 0x80
 800148a:	029b      	lsls	r3, r3, #10
 800148c:	4013      	ands	r3, r2
 800148e:	617b      	str	r3, [r7, #20]
 8001490:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001492:	0021      	movs	r1, r4
 8001494:	187b      	adds	r3, r7, r1
 8001496:	2260      	movs	r2, #96	; 0x60
 8001498:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149a:	187b      	adds	r3, r7, r1
 800149c:	2202      	movs	r2, #2
 800149e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	187b      	adds	r3, r7, r1
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014a6:	187b      	adds	r3, r7, r1
 80014a8:	2203      	movs	r2, #3
 80014aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80014ac:	187b      	adds	r3, r7, r1
 80014ae:	2200      	movs	r2, #0
 80014b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b2:	187a      	adds	r2, r7, r1
 80014b4:	2390      	movs	r3, #144	; 0x90
 80014b6:	05db      	lsls	r3, r3, #23
 80014b8:	0011      	movs	r1, r2
 80014ba:	0018      	movs	r0, r3
 80014bc:	f001 fa22 	bl	8002904 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80014c0:	e037      	b.n	8001532 <HAL_SPI_MspInit+0xfa>
  else if(hspi->Instance==SPI2)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a1f      	ldr	r2, [pc, #124]	; (8001544 <HAL_SPI_MspInit+0x10c>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d132      	bne.n	8001532 <HAL_SPI_MspInit+0xfa>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80014cc:	4b1c      	ldr	r3, [pc, #112]	; (8001540 <HAL_SPI_MspInit+0x108>)
 80014ce:	69da      	ldr	r2, [r3, #28]
 80014d0:	4b1b      	ldr	r3, [pc, #108]	; (8001540 <HAL_SPI_MspInit+0x108>)
 80014d2:	2180      	movs	r1, #128	; 0x80
 80014d4:	01c9      	lsls	r1, r1, #7
 80014d6:	430a      	orrs	r2, r1
 80014d8:	61da      	str	r2, [r3, #28]
 80014da:	4b19      	ldr	r3, [pc, #100]	; (8001540 <HAL_SPI_MspInit+0x108>)
 80014dc:	69da      	ldr	r2, [r3, #28]
 80014de:	2380      	movs	r3, #128	; 0x80
 80014e0:	01db      	lsls	r3, r3, #7
 80014e2:	4013      	ands	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e8:	4b15      	ldr	r3, [pc, #84]	; (8001540 <HAL_SPI_MspInit+0x108>)
 80014ea:	695a      	ldr	r2, [r3, #20]
 80014ec:	4b14      	ldr	r3, [pc, #80]	; (8001540 <HAL_SPI_MspInit+0x108>)
 80014ee:	2180      	movs	r1, #128	; 0x80
 80014f0:	02c9      	lsls	r1, r1, #11
 80014f2:	430a      	orrs	r2, r1
 80014f4:	615a      	str	r2, [r3, #20]
 80014f6:	4b12      	ldr	r3, [pc, #72]	; (8001540 <HAL_SPI_MspInit+0x108>)
 80014f8:	695a      	ldr	r2, [r3, #20]
 80014fa:	2380      	movs	r3, #128	; 0x80
 80014fc:	02db      	lsls	r3, r3, #11
 80014fe:	4013      	ands	r3, r2
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001504:	211c      	movs	r1, #28
 8001506:	187b      	adds	r3, r7, r1
 8001508:	22c0      	movs	r2, #192	; 0xc0
 800150a:	01d2      	lsls	r2, r2, #7
 800150c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150e:	187b      	adds	r3, r7, r1
 8001510:	2202      	movs	r2, #2
 8001512:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	187b      	adds	r3, r7, r1
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800151a:	187b      	adds	r3, r7, r1
 800151c:	2203      	movs	r2, #3
 800151e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8001520:	187b      	adds	r3, r7, r1
 8001522:	2200      	movs	r2, #0
 8001524:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001526:	187b      	adds	r3, r7, r1
 8001528:	4a07      	ldr	r2, [pc, #28]	; (8001548 <HAL_SPI_MspInit+0x110>)
 800152a:	0019      	movs	r1, r3
 800152c:	0010      	movs	r0, r2
 800152e:	f001 f9e9 	bl	8002904 <HAL_GPIO_Init>
}
 8001532:	46c0      	nop			; (mov r8, r8)
 8001534:	46bd      	mov	sp, r7
 8001536:	b00d      	add	sp, #52	; 0x34
 8001538:	bd90      	pop	{r4, r7, pc}
 800153a:	46c0      	nop			; (mov r8, r8)
 800153c:	40013000 	.word	0x40013000
 8001540:	40021000 	.word	0x40021000
 8001544:	40003800 	.word	0x40003800
 8001548:	48000400 	.word	0x48000400

0800154c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a1f      	ldr	r2, [pc, #124]	; (80015d8 <HAL_TIM_Base_MspInit+0x8c>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d11e      	bne.n	800159c <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800155e:	4b1f      	ldr	r3, [pc, #124]	; (80015dc <HAL_TIM_Base_MspInit+0x90>)
 8001560:	699a      	ldr	r2, [r3, #24]
 8001562:	4b1e      	ldr	r3, [pc, #120]	; (80015dc <HAL_TIM_Base_MspInit+0x90>)
 8001564:	2180      	movs	r1, #128	; 0x80
 8001566:	0109      	lsls	r1, r1, #4
 8001568:	430a      	orrs	r2, r1
 800156a:	619a      	str	r2, [r3, #24]
 800156c:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <HAL_TIM_Base_MspInit+0x90>)
 800156e:	699a      	ldr	r2, [r3, #24]
 8001570:	2380      	movs	r3, #128	; 0x80
 8001572:	011b      	lsls	r3, r3, #4
 8001574:	4013      	ands	r3, r2
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 1, 0);
 800157a:	2200      	movs	r2, #0
 800157c:	2101      	movs	r1, #1
 800157e:	200d      	movs	r0, #13
 8001580:	f000 fede 	bl	8002340 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001584:	200d      	movs	r0, #13
 8001586:	f000 fef0 	bl	800236a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 800158a:	2200      	movs	r2, #0
 800158c:	2101      	movs	r1, #1
 800158e:	200e      	movs	r0, #14
 8001590:	f000 fed6 	bl	8002340 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001594:	200e      	movs	r0, #14
 8001596:	f000 fee8 	bl	800236a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800159a:	e019      	b.n	80015d0 <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM2)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	2380      	movs	r3, #128	; 0x80
 80015a2:	05db      	lsls	r3, r3, #23
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d113      	bne.n	80015d0 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015a8:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <HAL_TIM_Base_MspInit+0x90>)
 80015aa:	69da      	ldr	r2, [r3, #28]
 80015ac:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <HAL_TIM_Base_MspInit+0x90>)
 80015ae:	2101      	movs	r1, #1
 80015b0:	430a      	orrs	r2, r1
 80015b2:	61da      	str	r2, [r3, #28]
 80015b4:	4b09      	ldr	r3, [pc, #36]	; (80015dc <HAL_TIM_Base_MspInit+0x90>)
 80015b6:	69db      	ldr	r3, [r3, #28]
 80015b8:	2201      	movs	r2, #1
 80015ba:	4013      	ands	r3, r2
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80015c0:	2200      	movs	r2, #0
 80015c2:	2101      	movs	r1, #1
 80015c4:	200f      	movs	r0, #15
 80015c6:	f000 febb 	bl	8002340 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015ca:	200f      	movs	r0, #15
 80015cc:	f000 fecd 	bl	800236a <HAL_NVIC_EnableIRQ>
}
 80015d0:	46c0      	nop			; (mov r8, r8)
 80015d2:	46bd      	mov	sp, r7
 80015d4:	b004      	add	sp, #16
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40012c00 	.word	0x40012c00
 80015dc:	40021000 	.word	0x40021000

080015e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015e0:	b590      	push	{r4, r7, lr}
 80015e2:	b08b      	sub	sp, #44	; 0x2c
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	2414      	movs	r4, #20
 80015ea:	193b      	adds	r3, r7, r4
 80015ec:	0018      	movs	r0, r3
 80015ee:	2314      	movs	r3, #20
 80015f0:	001a      	movs	r2, r3
 80015f2:	2100      	movs	r1, #0
 80015f4:	f004 ffd8 	bl	80065a8 <memset>
  if(htim->Instance==TIM1)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a2c      	ldr	r2, [pc, #176]	; (80016b0 <HAL_TIM_MspPostInit+0xd0>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d126      	bne.n	8001650 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001602:	4b2c      	ldr	r3, [pc, #176]	; (80016b4 <HAL_TIM_MspPostInit+0xd4>)
 8001604:	695a      	ldr	r2, [r3, #20]
 8001606:	4b2b      	ldr	r3, [pc, #172]	; (80016b4 <HAL_TIM_MspPostInit+0xd4>)
 8001608:	2180      	movs	r1, #128	; 0x80
 800160a:	0289      	lsls	r1, r1, #10
 800160c:	430a      	orrs	r2, r1
 800160e:	615a      	str	r2, [r3, #20]
 8001610:	4b28      	ldr	r3, [pc, #160]	; (80016b4 <HAL_TIM_MspPostInit+0xd4>)
 8001612:	695a      	ldr	r2, [r3, #20]
 8001614:	2380      	movs	r3, #128	; 0x80
 8001616:	029b      	lsls	r3, r3, #10
 8001618:	4013      	ands	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
 800161c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800161e:	193b      	adds	r3, r7, r4
 8001620:	2280      	movs	r2, #128	; 0x80
 8001622:	0052      	lsls	r2, r2, #1
 8001624:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001626:	0021      	movs	r1, r4
 8001628:	187b      	adds	r3, r7, r1
 800162a:	2202      	movs	r2, #2
 800162c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	187b      	adds	r3, r7, r1
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001634:	187b      	adds	r3, r7, r1
 8001636:	2200      	movs	r2, #0
 8001638:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800163a:	187b      	adds	r3, r7, r1
 800163c:	2202      	movs	r2, #2
 800163e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001640:	187a      	adds	r2, r7, r1
 8001642:	2390      	movs	r3, #144	; 0x90
 8001644:	05db      	lsls	r3, r3, #23
 8001646:	0011      	movs	r1, r2
 8001648:	0018      	movs	r0, r3
 800164a:	f001 f95b 	bl	8002904 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800164e:	e02a      	b.n	80016a6 <HAL_TIM_MspPostInit+0xc6>
  else if(htim->Instance==TIM2)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	2380      	movs	r3, #128	; 0x80
 8001656:	05db      	lsls	r3, r3, #23
 8001658:	429a      	cmp	r2, r3
 800165a:	d124      	bne.n	80016a6 <HAL_TIM_MspPostInit+0xc6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800165c:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <HAL_TIM_MspPostInit+0xd4>)
 800165e:	695a      	ldr	r2, [r3, #20]
 8001660:	4b14      	ldr	r3, [pc, #80]	; (80016b4 <HAL_TIM_MspPostInit+0xd4>)
 8001662:	2180      	movs	r1, #128	; 0x80
 8001664:	02c9      	lsls	r1, r1, #11
 8001666:	430a      	orrs	r2, r1
 8001668:	615a      	str	r2, [r3, #20]
 800166a:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <HAL_TIM_MspPostInit+0xd4>)
 800166c:	695a      	ldr	r2, [r3, #20]
 800166e:	2380      	movs	r3, #128	; 0x80
 8001670:	02db      	lsls	r3, r3, #11
 8001672:	4013      	ands	r3, r2
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001678:	2114      	movs	r1, #20
 800167a:	187b      	adds	r3, r7, r1
 800167c:	2280      	movs	r2, #128	; 0x80
 800167e:	0112      	lsls	r2, r2, #4
 8001680:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001682:	187b      	adds	r3, r7, r1
 8001684:	2202      	movs	r2, #2
 8001686:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	187b      	adds	r3, r7, r1
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168e:	187b      	adds	r3, r7, r1
 8001690:	2200      	movs	r2, #0
 8001692:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001694:	187b      	adds	r3, r7, r1
 8001696:	2202      	movs	r2, #2
 8001698:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800169a:	187b      	adds	r3, r7, r1
 800169c:	4a06      	ldr	r2, [pc, #24]	; (80016b8 <HAL_TIM_MspPostInit+0xd8>)
 800169e:	0019      	movs	r1, r3
 80016a0:	0010      	movs	r0, r2
 80016a2:	f001 f92f 	bl	8002904 <HAL_GPIO_Init>
}
 80016a6:	46c0      	nop			; (mov r8, r8)
 80016a8:	46bd      	mov	sp, r7
 80016aa:	b00b      	add	sp, #44	; 0x2c
 80016ac:	bd90      	pop	{r4, r7, pc}
 80016ae:	46c0      	nop			; (mov r8, r8)
 80016b0:	40012c00 	.word	0x40012c00
 80016b4:	40021000 	.word	0x40021000
 80016b8:	48000400 	.word	0x48000400

080016bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016bc:	b590      	push	{r4, r7, lr}
 80016be:	b08b      	sub	sp, #44	; 0x2c
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c4:	2414      	movs	r4, #20
 80016c6:	193b      	adds	r3, r7, r4
 80016c8:	0018      	movs	r0, r3
 80016ca:	2314      	movs	r3, #20
 80016cc:	001a      	movs	r2, r3
 80016ce:	2100      	movs	r1, #0
 80016d0:	f004 ff6a 	bl	80065a8 <memset>
  if(huart->Instance==USART1)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a21      	ldr	r2, [pc, #132]	; (8001760 <HAL_UART_MspInit+0xa4>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d13b      	bne.n	8001756 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016de:	4b21      	ldr	r3, [pc, #132]	; (8001764 <HAL_UART_MspInit+0xa8>)
 80016e0:	699a      	ldr	r2, [r3, #24]
 80016e2:	4b20      	ldr	r3, [pc, #128]	; (8001764 <HAL_UART_MspInit+0xa8>)
 80016e4:	2180      	movs	r1, #128	; 0x80
 80016e6:	01c9      	lsls	r1, r1, #7
 80016e8:	430a      	orrs	r2, r1
 80016ea:	619a      	str	r2, [r3, #24]
 80016ec:	4b1d      	ldr	r3, [pc, #116]	; (8001764 <HAL_UART_MspInit+0xa8>)
 80016ee:	699a      	ldr	r2, [r3, #24]
 80016f0:	2380      	movs	r3, #128	; 0x80
 80016f2:	01db      	lsls	r3, r3, #7
 80016f4:	4013      	ands	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
 80016f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fa:	4b1a      	ldr	r3, [pc, #104]	; (8001764 <HAL_UART_MspInit+0xa8>)
 80016fc:	695a      	ldr	r2, [r3, #20]
 80016fe:	4b19      	ldr	r3, [pc, #100]	; (8001764 <HAL_UART_MspInit+0xa8>)
 8001700:	2180      	movs	r1, #128	; 0x80
 8001702:	0289      	lsls	r1, r1, #10
 8001704:	430a      	orrs	r2, r1
 8001706:	615a      	str	r2, [r3, #20]
 8001708:	4b16      	ldr	r3, [pc, #88]	; (8001764 <HAL_UART_MspInit+0xa8>)
 800170a:	695a      	ldr	r2, [r3, #20]
 800170c:	2380      	movs	r3, #128	; 0x80
 800170e:	029b      	lsls	r3, r3, #10
 8001710:	4013      	ands	r3, r2
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001716:	193b      	adds	r3, r7, r4
 8001718:	22c0      	movs	r2, #192	; 0xc0
 800171a:	00d2      	lsls	r2, r2, #3
 800171c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171e:	0021      	movs	r1, r4
 8001720:	187b      	adds	r3, r7, r1
 8001722:	2202      	movs	r2, #2
 8001724:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	187b      	adds	r3, r7, r1
 8001728:	2200      	movs	r2, #0
 800172a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800172c:	187b      	adds	r3, r7, r1
 800172e:	2203      	movs	r2, #3
 8001730:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001732:	187b      	adds	r3, r7, r1
 8001734:	2201      	movs	r2, #1
 8001736:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001738:	187a      	adds	r2, r7, r1
 800173a:	2390      	movs	r3, #144	; 0x90
 800173c:	05db      	lsls	r3, r3, #23
 800173e:	0011      	movs	r1, r2
 8001740:	0018      	movs	r0, r3
 8001742:	f001 f8df 	bl	8002904 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001746:	2200      	movs	r2, #0
 8001748:	2100      	movs	r1, #0
 800174a:	201b      	movs	r0, #27
 800174c:	f000 fdf8 	bl	8002340 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001750:	201b      	movs	r0, #27
 8001752:	f000 fe0a 	bl	800236a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001756:	46c0      	nop			; (mov r8, r8)
 8001758:	46bd      	mov	sp, r7
 800175a:	b00b      	add	sp, #44	; 0x2c
 800175c:	bd90      	pop	{r4, r7, pc}
 800175e:	46c0      	nop			; (mov r8, r8)
 8001760:	40013800 	.word	0x40013800
 8001764:	40021000 	.word	0x40021000

08001768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800176c:	e7fe      	b.n	800176c <NMI_Handler+0x4>

0800176e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001772:	e7fe      	b.n	8001772 <HardFault_Handler+0x4>

08001774 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001778:	46c0      	nop			; (mov r8, r8)
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001782:	46c0      	nop			; (mov r8, r8)
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800178c:	f000 f8ee 	bl	800196c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001790:	46c0      	nop			; (mov r8, r8)
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 800179c:	4b03      	ldr	r3, [pc, #12]	; (80017ac <DMA1_Channel1_IRQHandler+0x14>)
 800179e:	0018      	movs	r0, r3
 80017a0:	f000 ffc5 	bl	800272e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80017a4:	46c0      	nop			; (mov r8, r8)
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	46c0      	nop			; (mov r8, r8)
 80017ac:	200000e8 	.word	0x200000e8

080017b0 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017b4:	4b03      	ldr	r3, [pc, #12]	; (80017c4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80017b6:	0018      	movs	r0, r3
 80017b8:	f002 fe44 	bl	8004444 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80017bc:	46c0      	nop			; (mov r8, r8)
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	46c0      	nop			; (mov r8, r8)
 80017c4:	20000254 	.word	0x20000254

080017c8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017cc:	4b03      	ldr	r3, [pc, #12]	; (80017dc <TIM1_CC_IRQHandler+0x14>)
 80017ce:	0018      	movs	r0, r3
 80017d0:	f002 fe38 	bl	8004444 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80017d4:	46c0      	nop			; (mov r8, r8)
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	46c0      	nop			; (mov r8, r8)
 80017dc:	20000254 	.word	0x20000254

080017e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017e4:	4b03      	ldr	r3, [pc, #12]	; (80017f4 <TIM2_IRQHandler+0x14>)
 80017e6:	0018      	movs	r0, r3
 80017e8:	f002 fe2c 	bl	8004444 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017ec:	46c0      	nop			; (mov r8, r8)
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	46c0      	nop			; (mov r8, r8)
 80017f4:	2000029c 	.word	0x2000029c

080017f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017fc:	4b03      	ldr	r3, [pc, #12]	; (800180c <USART1_IRQHandler+0x14>)
 80017fe:	0018      	movs	r0, r3
 8001800:	f003 fd3e 	bl	8005280 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001804:	46c0      	nop			; (mov r8, r8)
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	46c0      	nop			; (mov r8, r8)
 800180c:	200002e4 	.word	0x200002e4

08001810 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001818:	4a14      	ldr	r2, [pc, #80]	; (800186c <_sbrk+0x5c>)
 800181a:	4b15      	ldr	r3, [pc, #84]	; (8001870 <_sbrk+0x60>)
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001824:	4b13      	ldr	r3, [pc, #76]	; (8001874 <_sbrk+0x64>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d102      	bne.n	8001832 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800182c:	4b11      	ldr	r3, [pc, #68]	; (8001874 <_sbrk+0x64>)
 800182e:	4a12      	ldr	r2, [pc, #72]	; (8001878 <_sbrk+0x68>)
 8001830:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001832:	4b10      	ldr	r3, [pc, #64]	; (8001874 <_sbrk+0x64>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	18d3      	adds	r3, r2, r3
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	429a      	cmp	r2, r3
 800183e:	d207      	bcs.n	8001850 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001840:	f004 fe7e 	bl	8006540 <__errno>
 8001844:	0003      	movs	r3, r0
 8001846:	220c      	movs	r2, #12
 8001848:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800184a:	2301      	movs	r3, #1
 800184c:	425b      	negs	r3, r3
 800184e:	e009      	b.n	8001864 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001850:	4b08      	ldr	r3, [pc, #32]	; (8001874 <_sbrk+0x64>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001856:	4b07      	ldr	r3, [pc, #28]	; (8001874 <_sbrk+0x64>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	18d2      	adds	r2, r2, r3
 800185e:	4b05      	ldr	r3, [pc, #20]	; (8001874 <_sbrk+0x64>)
 8001860:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001862:	68fb      	ldr	r3, [r7, #12]
}
 8001864:	0018      	movs	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	b006      	add	sp, #24
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20002000 	.word	0x20002000
 8001870:	00000400 	.word	0x00000400
 8001874:	200003cc 	.word	0x200003cc
 8001878:	200003e8 	.word	0x200003e8

0800187c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001880:	46c0      	nop			; (mov r8, r8)
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001888:	480d      	ldr	r0, [pc, #52]	; (80018c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800188a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800188c:	480d      	ldr	r0, [pc, #52]	; (80018c4 <LoopForever+0x6>)
  ldr r1, =_edata
 800188e:	490e      	ldr	r1, [pc, #56]	; (80018c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001890:	4a0e      	ldr	r2, [pc, #56]	; (80018cc <LoopForever+0xe>)
  movs r3, #0
 8001892:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001894:	e002      	b.n	800189c <LoopCopyDataInit>

08001896 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001896:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001898:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800189a:	3304      	adds	r3, #4

0800189c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800189c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800189e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018a0:	d3f9      	bcc.n	8001896 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018a2:	4a0b      	ldr	r2, [pc, #44]	; (80018d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018a4:	4c0b      	ldr	r4, [pc, #44]	; (80018d4 <LoopForever+0x16>)
  movs r3, #0
 80018a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a8:	e001      	b.n	80018ae <LoopFillZerobss>

080018aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018ac:	3204      	adds	r2, #4

080018ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018b0:	d3fb      	bcc.n	80018aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80018b2:	f7ff ffe3 	bl	800187c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80018b6:	f004 fe49 	bl	800654c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018ba:	f7fe ff61 	bl	8000780 <main>

080018be <LoopForever>:

LoopForever:
    b LoopForever
 80018be:	e7fe      	b.n	80018be <LoopForever>
  ldr   r0, =_estack
 80018c0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80018c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018c8:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80018cc:	0800678c 	.word	0x0800678c
  ldr r2, =_sbss
 80018d0:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80018d4:	200003e4 	.word	0x200003e4

080018d8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018d8:	e7fe      	b.n	80018d8 <ADC1_COMP_IRQHandler>
	...

080018dc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018e0:	4b07      	ldr	r3, [pc, #28]	; (8001900 <HAL_Init+0x24>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	4b06      	ldr	r3, [pc, #24]	; (8001900 <HAL_Init+0x24>)
 80018e6:	2110      	movs	r1, #16
 80018e8:	430a      	orrs	r2, r1
 80018ea:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80018ec:	2003      	movs	r0, #3
 80018ee:	f000 f809 	bl	8001904 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018f2:	f7ff fc39 	bl	8001168 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	0018      	movs	r0, r3
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	46c0      	nop			; (mov r8, r8)
 8001900:	40022000 	.word	0x40022000

08001904 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001904:	b590      	push	{r4, r7, lr}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800190c:	4b14      	ldr	r3, [pc, #80]	; (8001960 <HAL_InitTick+0x5c>)
 800190e:	681c      	ldr	r4, [r3, #0]
 8001910:	4b14      	ldr	r3, [pc, #80]	; (8001964 <HAL_InitTick+0x60>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	0019      	movs	r1, r3
 8001916:	23fa      	movs	r3, #250	; 0xfa
 8001918:	0098      	lsls	r0, r3, #2
 800191a:	f7fe fbf5 	bl	8000108 <__udivsi3>
 800191e:	0003      	movs	r3, r0
 8001920:	0019      	movs	r1, r3
 8001922:	0020      	movs	r0, r4
 8001924:	f7fe fbf0 	bl	8000108 <__udivsi3>
 8001928:	0003      	movs	r3, r0
 800192a:	0018      	movs	r0, r3
 800192c:	f000 fd2d 	bl	800238a <HAL_SYSTICK_Config>
 8001930:	1e03      	subs	r3, r0, #0
 8001932:	d001      	beq.n	8001938 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e00f      	b.n	8001958 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b03      	cmp	r3, #3
 800193c:	d80b      	bhi.n	8001956 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	2301      	movs	r3, #1
 8001942:	425b      	negs	r3, r3
 8001944:	2200      	movs	r2, #0
 8001946:	0018      	movs	r0, r3
 8001948:	f000 fcfa 	bl	8002340 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800194c:	4b06      	ldr	r3, [pc, #24]	; (8001968 <HAL_InitTick+0x64>)
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001952:	2300      	movs	r3, #0
 8001954:	e000      	b.n	8001958 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
}
 8001958:	0018      	movs	r0, r3
 800195a:	46bd      	mov	sp, r7
 800195c:	b003      	add	sp, #12
 800195e:	bd90      	pop	{r4, r7, pc}
 8001960:	2000001c 	.word	0x2000001c
 8001964:	20000024 	.word	0x20000024
 8001968:	20000020 	.word	0x20000020

0800196c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001970:	4b05      	ldr	r3, [pc, #20]	; (8001988 <HAL_IncTick+0x1c>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	001a      	movs	r2, r3
 8001976:	4b05      	ldr	r3, [pc, #20]	; (800198c <HAL_IncTick+0x20>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	18d2      	adds	r2, r2, r3
 800197c:	4b03      	ldr	r3, [pc, #12]	; (800198c <HAL_IncTick+0x20>)
 800197e:	601a      	str	r2, [r3, #0]
}
 8001980:	46c0      	nop			; (mov r8, r8)
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	46c0      	nop			; (mov r8, r8)
 8001988:	20000024 	.word	0x20000024
 800198c:	200003d0 	.word	0x200003d0

08001990 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  return uwTick;
 8001994:	4b02      	ldr	r3, [pc, #8]	; (80019a0 <HAL_GetTick+0x10>)
 8001996:	681b      	ldr	r3, [r3, #0]
}
 8001998:	0018      	movs	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	46c0      	nop			; (mov r8, r8)
 80019a0:	200003d0 	.word	0x200003d0

080019a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019ac:	f7ff fff0 	bl	8001990 <HAL_GetTick>
 80019b0:	0003      	movs	r3, r0
 80019b2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	3301      	adds	r3, #1
 80019bc:	d005      	beq.n	80019ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019be:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <HAL_Delay+0x44>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	001a      	movs	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	189b      	adds	r3, r3, r2
 80019c8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80019ca:	46c0      	nop			; (mov r8, r8)
 80019cc:	f7ff ffe0 	bl	8001990 <HAL_GetTick>
 80019d0:	0002      	movs	r2, r0
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d8f7      	bhi.n	80019cc <HAL_Delay+0x28>
  {
  }
}
 80019dc:	46c0      	nop			; (mov r8, r8)
 80019de:	46c0      	nop			; (mov r8, r8)
 80019e0:	46bd      	mov	sp, r7
 80019e2:	b004      	add	sp, #16
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	46c0      	nop			; (mov r8, r8)
 80019e8:	20000024 	.word	0x20000024

080019ec <HAL_SuspendTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)

{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 80019f0:	4b04      	ldr	r3, [pc, #16]	; (8001a04 <HAL_SuspendTick+0x18>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	4b03      	ldr	r3, [pc, #12]	; (8001a04 <HAL_SuspendTick+0x18>)
 80019f6:	2102      	movs	r1, #2
 80019f8:	438a      	bics	r2, r1
 80019fa:	601a      	str	r2, [r3, #0]
}
 80019fc:	46c0      	nop			; (mov r8, r8)
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	46c0      	nop			; (mov r8, r8)
 8001a04:	e000e010 	.word	0xe000e010

08001a08 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a10:	230f      	movs	r3, #15
 8001a12:	18fb      	adds	r3, r7, r3
 8001a14:	2200      	movs	r2, #0
 8001a16:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e125      	b.n	8001c72 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10a      	bne.n	8001a44 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2234      	movs	r2, #52	; 0x34
 8001a38:	2100      	movs	r1, #0
 8001a3a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	0018      	movs	r0, r3
 8001a40:	f7ff fbb6 	bl	80011b0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a48:	2210      	movs	r2, #16
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d000      	beq.n	8001a50 <HAL_ADC_Init+0x48>
 8001a4e:	e103      	b.n	8001c58 <HAL_ADC_Init+0x250>
 8001a50:	230f      	movs	r3, #15
 8001a52:	18fb      	adds	r3, r7, r3
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d000      	beq.n	8001a5c <HAL_ADC_Init+0x54>
 8001a5a:	e0fd      	b.n	8001c58 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	2204      	movs	r2, #4
 8001a64:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001a66:	d000      	beq.n	8001a6a <HAL_ADC_Init+0x62>
 8001a68:	e0f6      	b.n	8001c58 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a6e:	4a83      	ldr	r2, [pc, #524]	; (8001c7c <HAL_ADC_Init+0x274>)
 8001a70:	4013      	ands	r3, r2
 8001a72:	2202      	movs	r2, #2
 8001a74:	431a      	orrs	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	2203      	movs	r2, #3
 8001a82:	4013      	ands	r3, r2
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d112      	bne.n	8001aae <HAL_ADC_Init+0xa6>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	4013      	ands	r3, r2
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d009      	beq.n	8001aaa <HAL_ADC_Init+0xa2>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68da      	ldr	r2, [r3, #12]
 8001a9c:	2380      	movs	r3, #128	; 0x80
 8001a9e:	021b      	lsls	r3, r3, #8
 8001aa0:	401a      	ands	r2, r3
 8001aa2:	2380      	movs	r3, #128	; 0x80
 8001aa4:	021b      	lsls	r3, r3, #8
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d101      	bne.n	8001aae <HAL_ADC_Init+0xa6>
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e000      	b.n	8001ab0 <HAL_ADC_Init+0xa8>
 8001aae:	2300      	movs	r3, #0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d116      	bne.n	8001ae2 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	2218      	movs	r2, #24
 8001abc:	4393      	bics	r3, r2
 8001abe:	0019      	movs	r1, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	0899      	lsrs	r1, r3, #2
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685a      	ldr	r2, [r3, #4]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	68da      	ldr	r2, [r3, #12]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4964      	ldr	r1, [pc, #400]	; (8001c80 <HAL_ADC_Init+0x278>)
 8001aee:	400a      	ands	r2, r1
 8001af0:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	7e1b      	ldrb	r3, [r3, #24]
 8001af6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	7e5b      	ldrb	r3, [r3, #25]
 8001afc:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001afe:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	7e9b      	ldrb	r3, [r3, #26]
 8001b04:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001b06:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d002      	beq.n	8001b16 <HAL_ADC_Init+0x10e>
 8001b10:	2380      	movs	r3, #128	; 0x80
 8001b12:	015b      	lsls	r3, r3, #5
 8001b14:	e000      	b.n	8001b18 <HAL_ADC_Init+0x110>
 8001b16:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001b18:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001b1e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d101      	bne.n	8001b2c <HAL_ADC_Init+0x124>
 8001b28:	2304      	movs	r3, #4
 8001b2a:	e000      	b.n	8001b2e <HAL_ADC_Init+0x126>
 8001b2c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001b2e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2124      	movs	r1, #36	; 0x24
 8001b34:	5c5b      	ldrb	r3, [r3, r1]
 8001b36:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001b38:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b3a:	68ba      	ldr	r2, [r7, #8]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	7edb      	ldrb	r3, [r3, #27]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d115      	bne.n	8001b74 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	7e9b      	ldrb	r3, [r3, #26]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d105      	bne.n	8001b5c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	2280      	movs	r2, #128	; 0x80
 8001b54:	0252      	lsls	r2, r2, #9
 8001b56:	4313      	orrs	r3, r2
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	e00b      	b.n	8001b74 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b60:	2220      	movs	r2, #32
 8001b62:	431a      	orrs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	69da      	ldr	r2, [r3, #28]
 8001b78:	23c2      	movs	r3, #194	; 0xc2
 8001b7a:	33ff      	adds	r3, #255	; 0xff
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d007      	beq.n	8001b90 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	68ba      	ldr	r2, [r7, #8]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	68d9      	ldr	r1, [r3, #12]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ba4:	2380      	movs	r3, #128	; 0x80
 8001ba6:	055b      	lsls	r3, r3, #21
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d01b      	beq.n	8001be4 <HAL_ADC_Init+0x1dc>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d017      	beq.n	8001be4 <HAL_ADC_Init+0x1dc>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d013      	beq.n	8001be4 <HAL_ADC_Init+0x1dc>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc0:	2b03      	cmp	r3, #3
 8001bc2:	d00f      	beq.n	8001be4 <HAL_ADC_Init+0x1dc>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc8:	2b04      	cmp	r3, #4
 8001bca:	d00b      	beq.n	8001be4 <HAL_ADC_Init+0x1dc>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd0:	2b05      	cmp	r3, #5
 8001bd2:	d007      	beq.n	8001be4 <HAL_ADC_Init+0x1dc>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd8:	2b06      	cmp	r3, #6
 8001bda:	d003      	beq.n	8001be4 <HAL_ADC_Init+0x1dc>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be0:	2b07      	cmp	r3, #7
 8001be2:	d112      	bne.n	8001c0a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	695a      	ldr	r2, [r3, #20]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2107      	movs	r1, #7
 8001bf0:	438a      	bics	r2, r1
 8001bf2:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6959      	ldr	r1, [r3, #20]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfe:	2207      	movs	r2, #7
 8001c00:	401a      	ands	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	430a      	orrs	r2, r1
 8001c08:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	4a1c      	ldr	r2, [pc, #112]	; (8001c84 <HAL_ADC_Init+0x27c>)
 8001c12:	4013      	ands	r3, r2
 8001c14:	68ba      	ldr	r2, [r7, #8]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d10b      	bne.n	8001c32 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c24:	2203      	movs	r2, #3
 8001c26:	4393      	bics	r3, r2
 8001c28:	2201      	movs	r2, #1
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001c30:	e01c      	b.n	8001c6c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c36:	2212      	movs	r2, #18
 8001c38:	4393      	bics	r3, r2
 8001c3a:	2210      	movs	r2, #16
 8001c3c:	431a      	orrs	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c46:	2201      	movs	r2, #1
 8001c48:	431a      	orrs	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001c4e:	230f      	movs	r3, #15
 8001c50:	18fb      	adds	r3, r7, r3
 8001c52:	2201      	movs	r2, #1
 8001c54:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001c56:	e009      	b.n	8001c6c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c5c:	2210      	movs	r2, #16
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001c64:	230f      	movs	r3, #15
 8001c66:	18fb      	adds	r3, r7, r3
 8001c68:	2201      	movs	r2, #1
 8001c6a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c6c:	230f      	movs	r3, #15
 8001c6e:	18fb      	adds	r3, r7, r3
 8001c70:	781b      	ldrb	r3, [r3, #0]
}
 8001c72:	0018      	movs	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	b004      	add	sp, #16
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	46c0      	nop			; (mov r8, r8)
 8001c7c:	fffffefd 	.word	0xfffffefd
 8001c80:	fffe0219 	.word	0xfffe0219
 8001c84:	833fffe7 	.word	0x833fffe7

08001c88 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001c88:	b590      	push	{r4, r7, lr}
 8001c8a:	b087      	sub	sp, #28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c94:	2317      	movs	r3, #23
 8001c96:	18fb      	adds	r3, r7, r3
 8001c98:	2200      	movs	r2, #0
 8001c9a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	2204      	movs	r2, #4
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	d15e      	bne.n	8001d66 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2234      	movs	r2, #52	; 0x34
 8001cac:	5c9b      	ldrb	r3, [r3, r2]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d101      	bne.n	8001cb6 <HAL_ADC_Start_DMA+0x2e>
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	e05e      	b.n	8001d74 <HAL_ADC_Start_DMA+0xec>
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2234      	movs	r2, #52	; 0x34
 8001cba:	2101      	movs	r1, #1
 8001cbc:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	7e5b      	ldrb	r3, [r3, #25]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d007      	beq.n	8001cd6 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001cc6:	2317      	movs	r3, #23
 8001cc8:	18fc      	adds	r4, r7, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	0018      	movs	r0, r3
 8001cce:	f000 f983 	bl	8001fd8 <ADC_Enable>
 8001cd2:	0003      	movs	r3, r0
 8001cd4:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001cd6:	2317      	movs	r3, #23
 8001cd8:	18fb      	adds	r3, r7, r3
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d146      	bne.n	8001d6e <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce4:	4a25      	ldr	r2, [pc, #148]	; (8001d7c <HAL_ADC_Start_DMA+0xf4>)
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	2280      	movs	r2, #128	; 0x80
 8001cea:	0052      	lsls	r2, r2, #1
 8001cec:	431a      	orrs	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2234      	movs	r2, #52	; 0x34
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d04:	4a1e      	ldr	r2, [pc, #120]	; (8001d80 <HAL_ADC_Start_DMA+0xf8>)
 8001d06:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0c:	4a1d      	ldr	r2, [pc, #116]	; (8001d84 <HAL_ADC_Start_DMA+0xfc>)
 8001d0e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d14:	4a1c      	ldr	r2, [pc, #112]	; (8001d88 <HAL_ADC_Start_DMA+0x100>)
 8001d16:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	221c      	movs	r2, #28
 8001d1e:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	685a      	ldr	r2, [r3, #4]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2110      	movs	r1, #16
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68da      	ldr	r2, [r3, #12]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	3340      	adds	r3, #64	; 0x40
 8001d4a:	0019      	movs	r1, r3
 8001d4c:	68ba      	ldr	r2, [r7, #8]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f000 fc0a 	bl	8002568 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	689a      	ldr	r2, [r3, #8]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2104      	movs	r1, #4
 8001d60:	430a      	orrs	r2, r1
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	e003      	b.n	8001d6e <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d66:	2317      	movs	r3, #23
 8001d68:	18fb      	adds	r3, r7, r3
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001d6e:	2317      	movs	r3, #23
 8001d70:	18fb      	adds	r3, r7, r3
 8001d72:	781b      	ldrb	r3, [r3, #0]
}
 8001d74:	0018      	movs	r0, r3
 8001d76:	46bd      	mov	sp, r7
 8001d78:	b007      	add	sp, #28
 8001d7a:	bd90      	pop	{r4, r7, pc}
 8001d7c:	fffff0fe 	.word	0xfffff0fe
 8001d80:	080020e1 	.word	0x080020e1
 8001d84:	08002195 	.word	0x08002195
 8001d88:	080021b3 	.word	0x080021b3

08001d8c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001d94:	46c0      	nop			; (mov r8, r8)
 8001d96:	46bd      	mov	sp, r7
 8001d98:	b002      	add	sp, #8
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001da4:	46c0      	nop			; (mov r8, r8)
 8001da6:	46bd      	mov	sp, r7
 8001da8:	b002      	add	sp, #8
 8001daa:	bd80      	pop	{r7, pc}

08001dac <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001db4:	46c0      	nop			; (mov r8, r8)
 8001db6:	46bd      	mov	sp, r7
 8001db8:	b002      	add	sp, #8
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dc6:	230f      	movs	r3, #15
 8001dc8:	18fb      	adds	r3, r7, r3
 8001dca:	2200      	movs	r2, #0
 8001dcc:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dd6:	2380      	movs	r3, #128	; 0x80
 8001dd8:	055b      	lsls	r3, r3, #21
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d011      	beq.n	8001e02 <HAL_ADC_ConfigChannel+0x46>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d00d      	beq.n	8001e02 <HAL_ADC_ConfigChannel+0x46>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d009      	beq.n	8001e02 <HAL_ADC_ConfigChannel+0x46>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df2:	2b03      	cmp	r3, #3
 8001df4:	d005      	beq.n	8001e02 <HAL_ADC_ConfigChannel+0x46>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	d001      	beq.n	8001e02 <HAL_ADC_ConfigChannel+0x46>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2234      	movs	r2, #52	; 0x34
 8001e06:	5c9b      	ldrb	r3, [r3, r2]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d101      	bne.n	8001e10 <HAL_ADC_ConfigChannel+0x54>
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	e0d0      	b.n	8001fb2 <HAL_ADC_ConfigChannel+0x1f6>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2234      	movs	r2, #52	; 0x34
 8001e14:	2101      	movs	r1, #1
 8001e16:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	2204      	movs	r2, #4
 8001e20:	4013      	ands	r3, r2
 8001e22:	d000      	beq.n	8001e26 <HAL_ADC_ConfigChannel+0x6a>
 8001e24:	e0b4      	b.n	8001f90 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	4a64      	ldr	r2, [pc, #400]	; (8001fbc <HAL_ADC_ConfigChannel+0x200>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d100      	bne.n	8001e32 <HAL_ADC_ConfigChannel+0x76>
 8001e30:	e082      	b.n	8001f38 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	409a      	lsls	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	430a      	orrs	r2, r1
 8001e46:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e4c:	2380      	movs	r3, #128	; 0x80
 8001e4e:	055b      	lsls	r3, r3, #21
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d037      	beq.n	8001ec4 <HAL_ADC_ConfigChannel+0x108>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d033      	beq.n	8001ec4 <HAL_ADC_ConfigChannel+0x108>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d02f      	beq.n	8001ec4 <HAL_ADC_ConfigChannel+0x108>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e68:	2b03      	cmp	r3, #3
 8001e6a:	d02b      	beq.n	8001ec4 <HAL_ADC_ConfigChannel+0x108>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e70:	2b04      	cmp	r3, #4
 8001e72:	d027      	beq.n	8001ec4 <HAL_ADC_ConfigChannel+0x108>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e78:	2b05      	cmp	r3, #5
 8001e7a:	d023      	beq.n	8001ec4 <HAL_ADC_ConfigChannel+0x108>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e80:	2b06      	cmp	r3, #6
 8001e82:	d01f      	beq.n	8001ec4 <HAL_ADC_ConfigChannel+0x108>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e88:	2b07      	cmp	r3, #7
 8001e8a:	d01b      	beq.n	8001ec4 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	2107      	movs	r1, #7
 8001e98:	400b      	ands	r3, r1
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d012      	beq.n	8001ec4 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	695a      	ldr	r2, [r3, #20]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2107      	movs	r1, #7
 8001eaa:	438a      	bics	r2, r1
 8001eac:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6959      	ldr	r1, [r3, #20]
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	2207      	movs	r2, #7
 8001eba:	401a      	ands	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2b10      	cmp	r3, #16
 8001eca:	d007      	beq.n	8001edc <HAL_ADC_ConfigChannel+0x120>
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2b11      	cmp	r3, #17
 8001ed2:	d003      	beq.n	8001edc <HAL_ADC_ConfigChannel+0x120>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2b12      	cmp	r3, #18
 8001eda:	d163      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001edc:	4b38      	ldr	r3, [pc, #224]	; (8001fc0 <HAL_ADC_ConfigChannel+0x204>)
 8001ede:	6819      	ldr	r1, [r3, #0]
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b10      	cmp	r3, #16
 8001ee6:	d009      	beq.n	8001efc <HAL_ADC_ConfigChannel+0x140>
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2b11      	cmp	r3, #17
 8001eee:	d102      	bne.n	8001ef6 <HAL_ADC_ConfigChannel+0x13a>
 8001ef0:	2380      	movs	r3, #128	; 0x80
 8001ef2:	03db      	lsls	r3, r3, #15
 8001ef4:	e004      	b.n	8001f00 <HAL_ADC_ConfigChannel+0x144>
 8001ef6:	2380      	movs	r3, #128	; 0x80
 8001ef8:	045b      	lsls	r3, r3, #17
 8001efa:	e001      	b.n	8001f00 <HAL_ADC_ConfigChannel+0x144>
 8001efc:	2380      	movs	r3, #128	; 0x80
 8001efe:	041b      	lsls	r3, r3, #16
 8001f00:	4a2f      	ldr	r2, [pc, #188]	; (8001fc0 <HAL_ADC_ConfigChannel+0x204>)
 8001f02:	430b      	orrs	r3, r1
 8001f04:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2b10      	cmp	r3, #16
 8001f0c:	d14a      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f0e:	4b2d      	ldr	r3, [pc, #180]	; (8001fc4 <HAL_ADC_ConfigChannel+0x208>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	492d      	ldr	r1, [pc, #180]	; (8001fc8 <HAL_ADC_ConfigChannel+0x20c>)
 8001f14:	0018      	movs	r0, r3
 8001f16:	f7fe f8f7 	bl	8000108 <__udivsi3>
 8001f1a:	0003      	movs	r3, r0
 8001f1c:	001a      	movs	r2, r3
 8001f1e:	0013      	movs	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	189b      	adds	r3, r3, r2
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f28:	e002      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f9      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x16e>
 8001f36:	e035      	b.n	8001fa4 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2101      	movs	r1, #1
 8001f44:	4099      	lsls	r1, r3
 8001f46:	000b      	movs	r3, r1
 8001f48:	43d9      	mvns	r1, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	400a      	ands	r2, r1
 8001f50:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2b10      	cmp	r3, #16
 8001f58:	d007      	beq.n	8001f6a <HAL_ADC_ConfigChannel+0x1ae>
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2b11      	cmp	r3, #17
 8001f60:	d003      	beq.n	8001f6a <HAL_ADC_ConfigChannel+0x1ae>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2b12      	cmp	r3, #18
 8001f68:	d11c      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001f6a:	4b15      	ldr	r3, [pc, #84]	; (8001fc0 <HAL_ADC_ConfigChannel+0x204>)
 8001f6c:	6819      	ldr	r1, [r3, #0]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2b10      	cmp	r3, #16
 8001f74:	d007      	beq.n	8001f86 <HAL_ADC_ConfigChannel+0x1ca>
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2b11      	cmp	r3, #17
 8001f7c:	d101      	bne.n	8001f82 <HAL_ADC_ConfigChannel+0x1c6>
 8001f7e:	4b13      	ldr	r3, [pc, #76]	; (8001fcc <HAL_ADC_ConfigChannel+0x210>)
 8001f80:	e002      	b.n	8001f88 <HAL_ADC_ConfigChannel+0x1cc>
 8001f82:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <HAL_ADC_ConfigChannel+0x214>)
 8001f84:	e000      	b.n	8001f88 <HAL_ADC_ConfigChannel+0x1cc>
 8001f86:	4b13      	ldr	r3, [pc, #76]	; (8001fd4 <HAL_ADC_ConfigChannel+0x218>)
 8001f88:	4a0d      	ldr	r2, [pc, #52]	; (8001fc0 <HAL_ADC_ConfigChannel+0x204>)
 8001f8a:	400b      	ands	r3, r1
 8001f8c:	6013      	str	r3, [r2, #0]
 8001f8e:	e009      	b.n	8001fa4 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f94:	2220      	movs	r2, #32
 8001f96:	431a      	orrs	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001f9c:	230f      	movs	r3, #15
 8001f9e:	18fb      	adds	r3, r7, r3
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2234      	movs	r2, #52	; 0x34
 8001fa8:	2100      	movs	r1, #0
 8001faa:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001fac:	230f      	movs	r3, #15
 8001fae:	18fb      	adds	r3, r7, r3
 8001fb0:	781b      	ldrb	r3, [r3, #0]
}
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	b004      	add	sp, #16
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	46c0      	nop			; (mov r8, r8)
 8001fbc:	00001001 	.word	0x00001001
 8001fc0:	40012708 	.word	0x40012708
 8001fc4:	2000001c 	.word	0x2000001c
 8001fc8:	000f4240 	.word	0x000f4240
 8001fcc:	ffbfffff 	.word	0xffbfffff
 8001fd0:	feffffff 	.word	0xfeffffff
 8001fd4:	ff7fffff 	.word	0xff7fffff

08001fd8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	2203      	movs	r2, #3
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d112      	bne.n	800201c <ADC_Enable+0x44>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	4013      	ands	r3, r2
 8002000:	2b01      	cmp	r3, #1
 8002002:	d009      	beq.n	8002018 <ADC_Enable+0x40>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68da      	ldr	r2, [r3, #12]
 800200a:	2380      	movs	r3, #128	; 0x80
 800200c:	021b      	lsls	r3, r3, #8
 800200e:	401a      	ands	r2, r3
 8002010:	2380      	movs	r3, #128	; 0x80
 8002012:	021b      	lsls	r3, r3, #8
 8002014:	429a      	cmp	r2, r3
 8002016:	d101      	bne.n	800201c <ADC_Enable+0x44>
 8002018:	2301      	movs	r3, #1
 800201a:	e000      	b.n	800201e <ADC_Enable+0x46>
 800201c:	2300      	movs	r3, #0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d152      	bne.n	80020c8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	4a2a      	ldr	r2, [pc, #168]	; (80020d4 <ADC_Enable+0xfc>)
 800202a:	4013      	ands	r3, r2
 800202c:	d00d      	beq.n	800204a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002032:	2210      	movs	r2, #16
 8002034:	431a      	orrs	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800203e:	2201      	movs	r2, #1
 8002040:	431a      	orrs	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e03f      	b.n	80020ca <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2101      	movs	r1, #1
 8002056:	430a      	orrs	r2, r1
 8002058:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800205a:	4b1f      	ldr	r3, [pc, #124]	; (80020d8 <ADC_Enable+0x100>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	491f      	ldr	r1, [pc, #124]	; (80020dc <ADC_Enable+0x104>)
 8002060:	0018      	movs	r0, r3
 8002062:	f7fe f851 	bl	8000108 <__udivsi3>
 8002066:	0003      	movs	r3, r0
 8002068:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800206a:	e002      	b.n	8002072 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	3b01      	subs	r3, #1
 8002070:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1f9      	bne.n	800206c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002078:	f7ff fc8a 	bl	8001990 <HAL_GetTick>
 800207c:	0003      	movs	r3, r0
 800207e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002080:	e01b      	b.n	80020ba <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002082:	f7ff fc85 	bl	8001990 <HAL_GetTick>
 8002086:	0002      	movs	r2, r0
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d914      	bls.n	80020ba <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2201      	movs	r2, #1
 8002098:	4013      	ands	r3, r2
 800209a:	2b01      	cmp	r3, #1
 800209c:	d00d      	beq.n	80020ba <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a2:	2210      	movs	r2, #16
 80020a4:	431a      	orrs	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ae:	2201      	movs	r2, #1
 80020b0:	431a      	orrs	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e007      	b.n	80020ca <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2201      	movs	r2, #1
 80020c2:	4013      	ands	r3, r2
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d1dc      	bne.n	8002082 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	0018      	movs	r0, r3
 80020cc:	46bd      	mov	sp, r7
 80020ce:	b004      	add	sp, #16
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	46c0      	nop			; (mov r8, r8)
 80020d4:	80000017 	.word	0x80000017
 80020d8:	2000001c 	.word	0x2000001c
 80020dc:	000f4240 	.word	0x000f4240

080020e0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ec:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f2:	2250      	movs	r2, #80	; 0x50
 80020f4:	4013      	ands	r3, r2
 80020f6:	d140      	bne.n	800217a <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fc:	2280      	movs	r2, #128	; 0x80
 80020fe:	0092      	lsls	r2, r2, #2
 8002100:	431a      	orrs	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68da      	ldr	r2, [r3, #12]
 800210c:	23c0      	movs	r3, #192	; 0xc0
 800210e:	011b      	lsls	r3, r3, #4
 8002110:	4013      	ands	r3, r2
 8002112:	d12d      	bne.n	8002170 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002118:	2b00      	cmp	r3, #0
 800211a:	d129      	bne.n	8002170 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2208      	movs	r2, #8
 8002124:	4013      	ands	r3, r2
 8002126:	2b08      	cmp	r3, #8
 8002128:	d122      	bne.n	8002170 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	2204      	movs	r2, #4
 8002132:	4013      	ands	r3, r2
 8002134:	d110      	bne.n	8002158 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	210c      	movs	r1, #12
 8002142:	438a      	bics	r2, r1
 8002144:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800214a:	4a11      	ldr	r2, [pc, #68]	; (8002190 <ADC_DMAConvCplt+0xb0>)
 800214c:	4013      	ands	r3, r2
 800214e:	2201      	movs	r2, #1
 8002150:	431a      	orrs	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	639a      	str	r2, [r3, #56]	; 0x38
 8002156:	e00b      	b.n	8002170 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800215c:	2220      	movs	r2, #32
 800215e:	431a      	orrs	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002168:	2201      	movs	r2, #1
 800216a:	431a      	orrs	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	0018      	movs	r0, r3
 8002174:	f7ff fe0a 	bl	8001d8c <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8002178:	e005      	b.n	8002186 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	0010      	movs	r0, r2
 8002184:	4798      	blx	r3
}
 8002186:	46c0      	nop			; (mov r8, r8)
 8002188:	46bd      	mov	sp, r7
 800218a:	b004      	add	sp, #16
 800218c:	bd80      	pop	{r7, pc}
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	fffffefe 	.word	0xfffffefe

08002194 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a0:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	0018      	movs	r0, r3
 80021a6:	f7ff fdf9 	bl	8001d9c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021aa:	46c0      	nop			; (mov r8, r8)
 80021ac:	46bd      	mov	sp, r7
 80021ae:	b004      	add	sp, #16
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b084      	sub	sp, #16
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021be:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c4:	2240      	movs	r2, #64	; 0x40
 80021c6:	431a      	orrs	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d0:	2204      	movs	r2, #4
 80021d2:	431a      	orrs	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	0018      	movs	r0, r3
 80021dc:	f7ff fde6 	bl	8001dac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021e0:	46c0      	nop			; (mov r8, r8)
 80021e2:	46bd      	mov	sp, r7
 80021e4:	b004      	add	sp, #16
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <__NVIC_EnableIRQ>:
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	0002      	movs	r2, r0
 80021f0:	1dfb      	adds	r3, r7, #7
 80021f2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80021f4:	1dfb      	adds	r3, r7, #7
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b7f      	cmp	r3, #127	; 0x7f
 80021fa:	d809      	bhi.n	8002210 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021fc:	1dfb      	adds	r3, r7, #7
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	001a      	movs	r2, r3
 8002202:	231f      	movs	r3, #31
 8002204:	401a      	ands	r2, r3
 8002206:	4b04      	ldr	r3, [pc, #16]	; (8002218 <__NVIC_EnableIRQ+0x30>)
 8002208:	2101      	movs	r1, #1
 800220a:	4091      	lsls	r1, r2
 800220c:	000a      	movs	r2, r1
 800220e:	601a      	str	r2, [r3, #0]
}
 8002210:	46c0      	nop			; (mov r8, r8)
 8002212:	46bd      	mov	sp, r7
 8002214:	b002      	add	sp, #8
 8002216:	bd80      	pop	{r7, pc}
 8002218:	e000e100 	.word	0xe000e100

0800221c <__NVIC_SetPriority>:
{
 800221c:	b590      	push	{r4, r7, lr}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	0002      	movs	r2, r0
 8002224:	6039      	str	r1, [r7, #0]
 8002226:	1dfb      	adds	r3, r7, #7
 8002228:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800222a:	1dfb      	adds	r3, r7, #7
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b7f      	cmp	r3, #127	; 0x7f
 8002230:	d828      	bhi.n	8002284 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002232:	4a2f      	ldr	r2, [pc, #188]	; (80022f0 <__NVIC_SetPriority+0xd4>)
 8002234:	1dfb      	adds	r3, r7, #7
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	b25b      	sxtb	r3, r3
 800223a:	089b      	lsrs	r3, r3, #2
 800223c:	33c0      	adds	r3, #192	; 0xc0
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	589b      	ldr	r3, [r3, r2]
 8002242:	1dfa      	adds	r2, r7, #7
 8002244:	7812      	ldrb	r2, [r2, #0]
 8002246:	0011      	movs	r1, r2
 8002248:	2203      	movs	r2, #3
 800224a:	400a      	ands	r2, r1
 800224c:	00d2      	lsls	r2, r2, #3
 800224e:	21ff      	movs	r1, #255	; 0xff
 8002250:	4091      	lsls	r1, r2
 8002252:	000a      	movs	r2, r1
 8002254:	43d2      	mvns	r2, r2
 8002256:	401a      	ands	r2, r3
 8002258:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	019b      	lsls	r3, r3, #6
 800225e:	22ff      	movs	r2, #255	; 0xff
 8002260:	401a      	ands	r2, r3
 8002262:	1dfb      	adds	r3, r7, #7
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	0018      	movs	r0, r3
 8002268:	2303      	movs	r3, #3
 800226a:	4003      	ands	r3, r0
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002270:	481f      	ldr	r0, [pc, #124]	; (80022f0 <__NVIC_SetPriority+0xd4>)
 8002272:	1dfb      	adds	r3, r7, #7
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	b25b      	sxtb	r3, r3
 8002278:	089b      	lsrs	r3, r3, #2
 800227a:	430a      	orrs	r2, r1
 800227c:	33c0      	adds	r3, #192	; 0xc0
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	501a      	str	r2, [r3, r0]
}
 8002282:	e031      	b.n	80022e8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002284:	4a1b      	ldr	r2, [pc, #108]	; (80022f4 <__NVIC_SetPriority+0xd8>)
 8002286:	1dfb      	adds	r3, r7, #7
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	0019      	movs	r1, r3
 800228c:	230f      	movs	r3, #15
 800228e:	400b      	ands	r3, r1
 8002290:	3b08      	subs	r3, #8
 8002292:	089b      	lsrs	r3, r3, #2
 8002294:	3306      	adds	r3, #6
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	18d3      	adds	r3, r2, r3
 800229a:	3304      	adds	r3, #4
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	1dfa      	adds	r2, r7, #7
 80022a0:	7812      	ldrb	r2, [r2, #0]
 80022a2:	0011      	movs	r1, r2
 80022a4:	2203      	movs	r2, #3
 80022a6:	400a      	ands	r2, r1
 80022a8:	00d2      	lsls	r2, r2, #3
 80022aa:	21ff      	movs	r1, #255	; 0xff
 80022ac:	4091      	lsls	r1, r2
 80022ae:	000a      	movs	r2, r1
 80022b0:	43d2      	mvns	r2, r2
 80022b2:	401a      	ands	r2, r3
 80022b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	019b      	lsls	r3, r3, #6
 80022ba:	22ff      	movs	r2, #255	; 0xff
 80022bc:	401a      	ands	r2, r3
 80022be:	1dfb      	adds	r3, r7, #7
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	0018      	movs	r0, r3
 80022c4:	2303      	movs	r3, #3
 80022c6:	4003      	ands	r3, r0
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022cc:	4809      	ldr	r0, [pc, #36]	; (80022f4 <__NVIC_SetPriority+0xd8>)
 80022ce:	1dfb      	adds	r3, r7, #7
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	001c      	movs	r4, r3
 80022d4:	230f      	movs	r3, #15
 80022d6:	4023      	ands	r3, r4
 80022d8:	3b08      	subs	r3, #8
 80022da:	089b      	lsrs	r3, r3, #2
 80022dc:	430a      	orrs	r2, r1
 80022de:	3306      	adds	r3, #6
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	18c3      	adds	r3, r0, r3
 80022e4:	3304      	adds	r3, #4
 80022e6:	601a      	str	r2, [r3, #0]
}
 80022e8:	46c0      	nop			; (mov r8, r8)
 80022ea:	46bd      	mov	sp, r7
 80022ec:	b003      	add	sp, #12
 80022ee:	bd90      	pop	{r4, r7, pc}
 80022f0:	e000e100 	.word	0xe000e100
 80022f4:	e000ed00 	.word	0xe000ed00

080022f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	1e5a      	subs	r2, r3, #1
 8002304:	2380      	movs	r3, #128	; 0x80
 8002306:	045b      	lsls	r3, r3, #17
 8002308:	429a      	cmp	r2, r3
 800230a:	d301      	bcc.n	8002310 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800230c:	2301      	movs	r3, #1
 800230e:	e010      	b.n	8002332 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002310:	4b0a      	ldr	r3, [pc, #40]	; (800233c <SysTick_Config+0x44>)
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	3a01      	subs	r2, #1
 8002316:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002318:	2301      	movs	r3, #1
 800231a:	425b      	negs	r3, r3
 800231c:	2103      	movs	r1, #3
 800231e:	0018      	movs	r0, r3
 8002320:	f7ff ff7c 	bl	800221c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002324:	4b05      	ldr	r3, [pc, #20]	; (800233c <SysTick_Config+0x44>)
 8002326:	2200      	movs	r2, #0
 8002328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800232a:	4b04      	ldr	r3, [pc, #16]	; (800233c <SysTick_Config+0x44>)
 800232c:	2207      	movs	r2, #7
 800232e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002330:	2300      	movs	r3, #0
}
 8002332:	0018      	movs	r0, r3
 8002334:	46bd      	mov	sp, r7
 8002336:	b002      	add	sp, #8
 8002338:	bd80      	pop	{r7, pc}
 800233a:	46c0      	nop			; (mov r8, r8)
 800233c:	e000e010 	.word	0xe000e010

08002340 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	60b9      	str	r1, [r7, #8]
 8002348:	607a      	str	r2, [r7, #4]
 800234a:	210f      	movs	r1, #15
 800234c:	187b      	adds	r3, r7, r1
 800234e:	1c02      	adds	r2, r0, #0
 8002350:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002352:	68ba      	ldr	r2, [r7, #8]
 8002354:	187b      	adds	r3, r7, r1
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	b25b      	sxtb	r3, r3
 800235a:	0011      	movs	r1, r2
 800235c:	0018      	movs	r0, r3
 800235e:	f7ff ff5d 	bl	800221c <__NVIC_SetPriority>
}
 8002362:	46c0      	nop			; (mov r8, r8)
 8002364:	46bd      	mov	sp, r7
 8002366:	b004      	add	sp, #16
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b082      	sub	sp, #8
 800236e:	af00      	add	r7, sp, #0
 8002370:	0002      	movs	r2, r0
 8002372:	1dfb      	adds	r3, r7, #7
 8002374:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002376:	1dfb      	adds	r3, r7, #7
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	b25b      	sxtb	r3, r3
 800237c:	0018      	movs	r0, r3
 800237e:	f7ff ff33 	bl	80021e8 <__NVIC_EnableIRQ>
}
 8002382:	46c0      	nop			; (mov r8, r8)
 8002384:	46bd      	mov	sp, r7
 8002386:	b002      	add	sp, #8
 8002388:	bd80      	pop	{r7, pc}

0800238a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b082      	sub	sp, #8
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	0018      	movs	r0, r3
 8002396:	f7ff ffaf 	bl	80022f8 <SysTick_Config>
 800239a:	0003      	movs	r3, r0
}
 800239c:	0018      	movs	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	b002      	add	sp, #8
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e015      	b.n	80023e2 <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if (hdac->State == HAL_DAC_STATE_RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	791b      	ldrb	r3, [r3, #4]
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d106      	bne.n	80023ce <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	0018      	movs	r0, r3
 80023ca:	f7fe ffa1 	bl	8001310 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2202      	movs	r2, #2
 80023d2:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2201      	movs	r2, #1
 80023de:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	0018      	movs	r0, r3
 80023e4:	46bd      	mov	sp, r7
 80023e6:	b002      	add	sp, #8
 80023e8:	bd80      	pop	{r7, pc}

080023ea <HAL_DAC_ConfigChannel>:
  *          This parameter can be one of the following values:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b086      	sub	sp, #24
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	60f8      	str	r0, [r7, #12]
 80023f2:	60b9      	str	r1, [r7, #8]
 80023f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	617b      	str	r3, [r7, #20]
 80023fa:	2300      	movs	r3, #0
 80023fc:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	795b      	ldrb	r3, [r3, #5]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d101      	bne.n	800240a <HAL_DAC_ConfigChannel+0x20>
 8002406:	2302      	movs	r3, #2
 8002408:	e029      	b.n	800245e <HAL_DAC_ConfigChannel+0x74>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2201      	movs	r2, #1
 800240e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2202      	movs	r2, #2
 8002414:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel); 
 800241e:	223e      	movs	r2, #62	; 0x3e
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	409a      	lsls	r2, r3
 8002424:	0013      	movs	r3, r2
 8002426:	43da      	mvns	r2, r3
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	4013      	ands	r3, r2
 800242c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	4313      	orrs	r3, r2
 8002438:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	409a      	lsls	r2, r3
 8002440:	0013      	movs	r3, r2
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	4313      	orrs	r3, r2
 8002446:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	697a      	ldr	r2, [r7, #20]
 800244e:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2201      	movs	r2, #1
 8002454:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	0018      	movs	r0, r3
 8002460:	46bd      	mov	sp, r7
 8002462:	b006      	add	sp, #24
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_DAC_Start>:
       /* STM32F091xC  STM32F098xx */

#if defined (STM32F051x8) || defined (STM32F058xx)

HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
 800246e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	795b      	ldrb	r3, [r3, #5]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d101      	bne.n	800247c <HAL_DAC_Start+0x16>
 8002478:	2302      	movs	r3, #2
 800247a:	e028      	b.n	80024ce <HAL_DAC_Start+0x68>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2202      	movs	r2, #2
 8002486:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6819      	ldr	r1, [r3, #0]
 800248e:	2201      	movs	r2, #1
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	409a      	lsls	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	430a      	orrs	r2, r1
 800249a:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10e      	bne.n	80024c0 <HAL_DAC_Start+0x5a>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	223c      	movs	r2, #60	; 0x3c
 80024aa:	4013      	ands	r3, r2
 80024ac:	2b3c      	cmp	r3, #60	; 0x3c
 80024ae:	d107      	bne.n	80024c0 <HAL_DAC_Start+0x5a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2101      	movs	r1, #1
 80024bc:	430a      	orrs	r2, r1
 80024be:	605a      	str	r2, [r3, #4]
    }
  }
 
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	0018      	movs	r0, r3
 80024d0:	46bd      	mov	sp, r7
 80024d2:	b002      	add	sp, #8
 80024d4:	bd80      	pop	{r7, pc}
	...

080024d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024e0:	2300      	movs	r3, #0
 80024e2:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e036      	b.n	800255c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2221      	movs	r2, #33	; 0x21
 80024f2:	2102      	movs	r1, #2
 80024f4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	4a18      	ldr	r2, [pc, #96]	; (8002564 <HAL_DMA_Init+0x8c>)
 8002502:	4013      	ands	r3, r2
 8002504:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800250e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800251a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002526:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	69db      	ldr	r3, [r3, #28]
 800252c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	4313      	orrs	r3, r2
 8002532:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	0018      	movs	r0, r3
 8002540:	f000 f9c4 	bl	80028cc <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2221      	movs	r2, #33	; 0x21
 800254e:	2101      	movs	r1, #1
 8002550:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2220      	movs	r2, #32
 8002556:	2100      	movs	r1, #0
 8002558:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}  
 800255c:	0018      	movs	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	b004      	add	sp, #16
 8002562:	bd80      	pop	{r7, pc}
 8002564:	ffffc00f 	.word	0xffffc00f

08002568 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
 8002574:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002576:	2317      	movs	r3, #23
 8002578:	18fb      	adds	r3, r7, r3
 800257a:	2200      	movs	r2, #0
 800257c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2220      	movs	r2, #32
 8002582:	5c9b      	ldrb	r3, [r3, r2]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d101      	bne.n	800258c <HAL_DMA_Start_IT+0x24>
 8002588:	2302      	movs	r3, #2
 800258a:	e04f      	b.n	800262c <HAL_DMA_Start_IT+0xc4>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2220      	movs	r2, #32
 8002590:	2101      	movs	r1, #1
 8002592:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2221      	movs	r2, #33	; 0x21
 8002598:	5c9b      	ldrb	r3, [r3, r2]
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b01      	cmp	r3, #1
 800259e:	d13a      	bne.n	8002616 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2221      	movs	r2, #33	; 0x21
 80025a4:	2102      	movs	r1, #2
 80025a6:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2200      	movs	r2, #0
 80025ac:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2101      	movs	r1, #1
 80025ba:	438a      	bics	r2, r1
 80025bc:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	68b9      	ldr	r1, [r7, #8]
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	f000 f954 	bl	8002872 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d008      	beq.n	80025e4 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	210e      	movs	r1, #14
 80025de:	430a      	orrs	r2, r1
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	e00f      	b.n	8002604 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	210a      	movs	r1, #10
 80025f0:	430a      	orrs	r2, r1
 80025f2:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2104      	movs	r1, #4
 8002600:	438a      	bics	r2, r1
 8002602:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2101      	movs	r1, #1
 8002610:	430a      	orrs	r2, r1
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	e007      	b.n	8002626 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2220      	movs	r2, #32
 800261a:	2100      	movs	r1, #0
 800261c:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800261e:	2317      	movs	r3, #23
 8002620:	18fb      	adds	r3, r7, r3
 8002622:	2202      	movs	r2, #2
 8002624:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8002626:	2317      	movs	r3, #23
 8002628:	18fb      	adds	r3, r7, r3
 800262a:	781b      	ldrb	r3, [r3, #0]
} 
 800262c:	0018      	movs	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	b006      	add	sp, #24
 8002632:	bd80      	pop	{r7, pc}

08002634 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2221      	movs	r2, #33	; 0x21
 8002640:	5c9b      	ldrb	r3, [r3, r2]
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d008      	beq.n	800265a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2204      	movs	r2, #4
 800264c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2220      	movs	r2, #32
 8002652:	2100      	movs	r1, #0
 8002654:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e020      	b.n	800269c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	210e      	movs	r1, #14
 8002666:	438a      	bics	r2, r1
 8002668:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2101      	movs	r1, #1
 8002676:	438a      	bics	r2, r1
 8002678:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002682:	2101      	movs	r1, #1
 8002684:	4091      	lsls	r1, r2
 8002686:	000a      	movs	r2, r1
 8002688:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2221      	movs	r2, #33	; 0x21
 800268e:	2101      	movs	r1, #1
 8002690:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2220      	movs	r2, #32
 8002696:	2100      	movs	r1, #0
 8002698:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	0018      	movs	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	b002      	add	sp, #8
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026ac:	210f      	movs	r1, #15
 80026ae:	187b      	adds	r3, r7, r1
 80026b0:	2200      	movs	r2, #0
 80026b2:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2221      	movs	r2, #33	; 0x21
 80026b8:	5c9b      	ldrb	r3, [r3, r2]
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d006      	beq.n	80026ce <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2204      	movs	r2, #4
 80026c4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80026c6:	187b      	adds	r3, r7, r1
 80026c8:	2201      	movs	r2, #1
 80026ca:	701a      	strb	r2, [r3, #0]
 80026cc:	e028      	b.n	8002720 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	210e      	movs	r1, #14
 80026da:	438a      	bics	r2, r1
 80026dc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2101      	movs	r1, #1
 80026ea:	438a      	bics	r2, r1
 80026ec:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f6:	2101      	movs	r1, #1
 80026f8:	4091      	lsls	r1, r2
 80026fa:	000a      	movs	r2, r1
 80026fc:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2221      	movs	r2, #33	; 0x21
 8002702:	2101      	movs	r1, #1
 8002704:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2220      	movs	r2, #32
 800270a:	2100      	movs	r1, #0
 800270c:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002712:	2b00      	cmp	r3, #0
 8002714:	d004      	beq.n	8002720 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	0010      	movs	r0, r2
 800271e:	4798      	blx	r3
    } 
  }
  return status;
 8002720:	230f      	movs	r3, #15
 8002722:	18fb      	adds	r3, r7, r3
 8002724:	781b      	ldrb	r3, [r3, #0]
}
 8002726:	0018      	movs	r0, r3
 8002728:	46bd      	mov	sp, r7
 800272a:	b004      	add	sp, #16
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b084      	sub	sp, #16
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	2204      	movs	r2, #4
 800274c:	409a      	lsls	r2, r3
 800274e:	0013      	movs	r3, r2
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	4013      	ands	r3, r2
 8002754:	d024      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x72>
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	2204      	movs	r2, #4
 800275a:	4013      	ands	r3, r2
 800275c:	d020      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2220      	movs	r2, #32
 8002766:	4013      	ands	r3, r2
 8002768:	d107      	bne.n	800277a <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2104      	movs	r1, #4
 8002776:	438a      	bics	r2, r1
 8002778:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002782:	2104      	movs	r1, #4
 8002784:	4091      	lsls	r1, r2
 8002786:	000a      	movs	r2, r1
 8002788:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278e:	2b00      	cmp	r3, #0
 8002790:	d100      	bne.n	8002794 <HAL_DMA_IRQHandler+0x66>
 8002792:	e06a      	b.n	800286a <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	0010      	movs	r0, r2
 800279c:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800279e:	e064      	b.n	800286a <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a4:	2202      	movs	r2, #2
 80027a6:	409a      	lsls	r2, r3
 80027a8:	0013      	movs	r3, r2
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	4013      	ands	r3, r2
 80027ae:	d02b      	beq.n	8002808 <HAL_DMA_IRQHandler+0xda>
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	2202      	movs	r2, #2
 80027b4:	4013      	ands	r3, r2
 80027b6:	d027      	beq.n	8002808 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2220      	movs	r2, #32
 80027c0:	4013      	ands	r3, r2
 80027c2:	d10b      	bne.n	80027dc <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	210a      	movs	r1, #10
 80027d0:	438a      	bics	r2, r1
 80027d2:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2221      	movs	r2, #33	; 0x21
 80027d8:	2101      	movs	r1, #1
 80027da:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e4:	2102      	movs	r1, #2
 80027e6:	4091      	lsls	r1, r2
 80027e8:	000a      	movs	r2, r1
 80027ea:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2220      	movs	r2, #32
 80027f0:	2100      	movs	r1, #0
 80027f2:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d036      	beq.n	800286a <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	0010      	movs	r0, r2
 8002804:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002806:	e030      	b.n	800286a <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280c:	2208      	movs	r2, #8
 800280e:	409a      	lsls	r2, r3
 8002810:	0013      	movs	r3, r2
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	4013      	ands	r3, r2
 8002816:	d028      	beq.n	800286a <HAL_DMA_IRQHandler+0x13c>
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	2208      	movs	r2, #8
 800281c:	4013      	ands	r3, r2
 800281e:	d024      	beq.n	800286a <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	210e      	movs	r1, #14
 800282c:	438a      	bics	r2, r1
 800282e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002838:	2101      	movs	r1, #1
 800283a:	4091      	lsls	r1, r2
 800283c:	000a      	movs	r2, r1
 800283e:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2221      	movs	r2, #33	; 0x21
 800284a:	2101      	movs	r1, #1
 800284c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2220      	movs	r2, #32
 8002852:	2100      	movs	r1, #0
 8002854:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	2b00      	cmp	r3, #0
 800285c:	d005      	beq.n	800286a <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	0010      	movs	r0, r2
 8002866:	4798      	blx	r3
    }
   }
}  
 8002868:	e7ff      	b.n	800286a <HAL_DMA_IRQHandler+0x13c>
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	46bd      	mov	sp, r7
 800286e:	b004      	add	sp, #16
 8002870:	bd80      	pop	{r7, pc}

08002872 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b084      	sub	sp, #16
 8002876:	af00      	add	r7, sp, #0
 8002878:	60f8      	str	r0, [r7, #12]
 800287a:	60b9      	str	r1, [r7, #8]
 800287c:	607a      	str	r2, [r7, #4]
 800287e:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002888:	2101      	movs	r1, #1
 800288a:	4091      	lsls	r1, r2
 800288c:	000a      	movs	r2, r1
 800288e:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b10      	cmp	r3, #16
 800289e:	d108      	bne.n	80028b2 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68ba      	ldr	r2, [r7, #8]
 80028ae:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80028b0:	e007      	b.n	80028c2 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68ba      	ldr	r2, [r7, #8]
 80028b8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	60da      	str	r2, [r3, #12]
}
 80028c2:	46c0      	nop			; (mov r8, r8)
 80028c4:	46bd      	mov	sp, r7
 80028c6:	b004      	add	sp, #16
 80028c8:	bd80      	pop	{r7, pc}
	...

080028cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a08      	ldr	r2, [pc, #32]	; (80028fc <DMA_CalcBaseAndBitshift+0x30>)
 80028da:	4694      	mov	ip, r2
 80028dc:	4463      	add	r3, ip
 80028de:	2114      	movs	r1, #20
 80028e0:	0018      	movs	r0, r3
 80028e2:	f7fd fc11 	bl	8000108 <__udivsi3>
 80028e6:	0003      	movs	r3, r0
 80028e8:	009a      	lsls	r2, r3, #2
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a03      	ldr	r2, [pc, #12]	; (8002900 <DMA_CalcBaseAndBitshift+0x34>)
 80028f2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80028f4:	46c0      	nop			; (mov r8, r8)
 80028f6:	46bd      	mov	sp, r7
 80028f8:	b002      	add	sp, #8
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	bffdfff8 	.word	0xbffdfff8
 8002900:	40020000 	.word	0x40020000

08002904 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800290e:	2300      	movs	r3, #0
 8002910:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002912:	e14f      	b.n	8002bb4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2101      	movs	r1, #1
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	4091      	lsls	r1, r2
 800291e:	000a      	movs	r2, r1
 8002920:	4013      	ands	r3, r2
 8002922:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d100      	bne.n	800292c <HAL_GPIO_Init+0x28>
 800292a:	e140      	b.n	8002bae <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	2203      	movs	r2, #3
 8002932:	4013      	ands	r3, r2
 8002934:	2b01      	cmp	r3, #1
 8002936:	d005      	beq.n	8002944 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	2203      	movs	r2, #3
 800293e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002940:	2b02      	cmp	r3, #2
 8002942:	d130      	bne.n	80029a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	2203      	movs	r2, #3
 8002950:	409a      	lsls	r2, r3
 8002952:	0013      	movs	r3, r2
 8002954:	43da      	mvns	r2, r3
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	4013      	ands	r3, r2
 800295a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	68da      	ldr	r2, [r3, #12]
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	409a      	lsls	r2, r3
 8002966:	0013      	movs	r3, r2
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	4313      	orrs	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800297a:	2201      	movs	r2, #1
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	409a      	lsls	r2, r3
 8002980:	0013      	movs	r3, r2
 8002982:	43da      	mvns	r2, r3
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	4013      	ands	r3, r2
 8002988:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	091b      	lsrs	r3, r3, #4
 8002990:	2201      	movs	r2, #1
 8002992:	401a      	ands	r2, r3
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	409a      	lsls	r2, r3
 8002998:	0013      	movs	r3, r2
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	4313      	orrs	r3, r2
 800299e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	2203      	movs	r2, #3
 80029ac:	4013      	ands	r3, r2
 80029ae:	2b03      	cmp	r3, #3
 80029b0:	d017      	beq.n	80029e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	2203      	movs	r2, #3
 80029be:	409a      	lsls	r2, r3
 80029c0:	0013      	movs	r3, r2
 80029c2:	43da      	mvns	r2, r3
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	4013      	ands	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	689a      	ldr	r2, [r3, #8]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	409a      	lsls	r2, r3
 80029d4:	0013      	movs	r3, r2
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	4313      	orrs	r3, r2
 80029da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	2203      	movs	r2, #3
 80029e8:	4013      	ands	r3, r2
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d123      	bne.n	8002a36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	08da      	lsrs	r2, r3, #3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	3208      	adds	r2, #8
 80029f6:	0092      	lsls	r2, r2, #2
 80029f8:	58d3      	ldr	r3, [r2, r3]
 80029fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	2207      	movs	r2, #7
 8002a00:	4013      	ands	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	220f      	movs	r2, #15
 8002a06:	409a      	lsls	r2, r3
 8002a08:	0013      	movs	r3, r2
 8002a0a:	43da      	mvns	r2, r3
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	691a      	ldr	r2, [r3, #16]
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	2107      	movs	r1, #7
 8002a1a:	400b      	ands	r3, r1
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	409a      	lsls	r2, r3
 8002a20:	0013      	movs	r3, r2
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	08da      	lsrs	r2, r3, #3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3208      	adds	r2, #8
 8002a30:	0092      	lsls	r2, r2, #2
 8002a32:	6939      	ldr	r1, [r7, #16]
 8002a34:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	2203      	movs	r2, #3
 8002a42:	409a      	lsls	r2, r3
 8002a44:	0013      	movs	r3, r2
 8002a46:	43da      	mvns	r2, r3
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	2203      	movs	r2, #3
 8002a54:	401a      	ands	r2, r3
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	409a      	lsls	r2, r3
 8002a5c:	0013      	movs	r3, r2
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	23c0      	movs	r3, #192	; 0xc0
 8002a70:	029b      	lsls	r3, r3, #10
 8002a72:	4013      	ands	r3, r2
 8002a74:	d100      	bne.n	8002a78 <HAL_GPIO_Init+0x174>
 8002a76:	e09a      	b.n	8002bae <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a78:	4b54      	ldr	r3, [pc, #336]	; (8002bcc <HAL_GPIO_Init+0x2c8>)
 8002a7a:	699a      	ldr	r2, [r3, #24]
 8002a7c:	4b53      	ldr	r3, [pc, #332]	; (8002bcc <HAL_GPIO_Init+0x2c8>)
 8002a7e:	2101      	movs	r1, #1
 8002a80:	430a      	orrs	r2, r1
 8002a82:	619a      	str	r2, [r3, #24]
 8002a84:	4b51      	ldr	r3, [pc, #324]	; (8002bcc <HAL_GPIO_Init+0x2c8>)
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	60bb      	str	r3, [r7, #8]
 8002a8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a90:	4a4f      	ldr	r2, [pc, #316]	; (8002bd0 <HAL_GPIO_Init+0x2cc>)
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	089b      	lsrs	r3, r3, #2
 8002a96:	3302      	adds	r3, #2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	589b      	ldr	r3, [r3, r2]
 8002a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	2203      	movs	r2, #3
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	220f      	movs	r2, #15
 8002aa8:	409a      	lsls	r2, r3
 8002aaa:	0013      	movs	r3, r2
 8002aac:	43da      	mvns	r2, r3
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	2390      	movs	r3, #144	; 0x90
 8002ab8:	05db      	lsls	r3, r3, #23
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d013      	beq.n	8002ae6 <HAL_GPIO_Init+0x1e2>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a44      	ldr	r2, [pc, #272]	; (8002bd4 <HAL_GPIO_Init+0x2d0>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d00d      	beq.n	8002ae2 <HAL_GPIO_Init+0x1de>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a43      	ldr	r2, [pc, #268]	; (8002bd8 <HAL_GPIO_Init+0x2d4>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d007      	beq.n	8002ade <HAL_GPIO_Init+0x1da>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a42      	ldr	r2, [pc, #264]	; (8002bdc <HAL_GPIO_Init+0x2d8>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d101      	bne.n	8002ada <HAL_GPIO_Init+0x1d6>
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e006      	b.n	8002ae8 <HAL_GPIO_Init+0x1e4>
 8002ada:	2305      	movs	r3, #5
 8002adc:	e004      	b.n	8002ae8 <HAL_GPIO_Init+0x1e4>
 8002ade:	2302      	movs	r3, #2
 8002ae0:	e002      	b.n	8002ae8 <HAL_GPIO_Init+0x1e4>
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e000      	b.n	8002ae8 <HAL_GPIO_Init+0x1e4>
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	2103      	movs	r1, #3
 8002aec:	400a      	ands	r2, r1
 8002aee:	0092      	lsls	r2, r2, #2
 8002af0:	4093      	lsls	r3, r2
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002af8:	4935      	ldr	r1, [pc, #212]	; (8002bd0 <HAL_GPIO_Init+0x2cc>)
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	089b      	lsrs	r3, r3, #2
 8002afe:	3302      	adds	r3, #2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b06:	4b36      	ldr	r3, [pc, #216]	; (8002be0 <HAL_GPIO_Init+0x2dc>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	43da      	mvns	r2, r3
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	4013      	ands	r3, r2
 8002b14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	2380      	movs	r3, #128	; 0x80
 8002b1c:	025b      	lsls	r3, r3, #9
 8002b1e:	4013      	ands	r3, r2
 8002b20:	d003      	beq.n	8002b2a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002b2a:	4b2d      	ldr	r3, [pc, #180]	; (8002be0 <HAL_GPIO_Init+0x2dc>)
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002b30:	4b2b      	ldr	r3, [pc, #172]	; (8002be0 <HAL_GPIO_Init+0x2dc>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	43da      	mvns	r2, r3
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	2380      	movs	r3, #128	; 0x80
 8002b46:	029b      	lsls	r3, r3, #10
 8002b48:	4013      	ands	r3, r2
 8002b4a:	d003      	beq.n	8002b54 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002b54:	4b22      	ldr	r3, [pc, #136]	; (8002be0 <HAL_GPIO_Init+0x2dc>)
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b5a:	4b21      	ldr	r3, [pc, #132]	; (8002be0 <HAL_GPIO_Init+0x2dc>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	43da      	mvns	r2, r3
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	4013      	ands	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685a      	ldr	r2, [r3, #4]
 8002b6e:	2380      	movs	r3, #128	; 0x80
 8002b70:	035b      	lsls	r3, r3, #13
 8002b72:	4013      	ands	r3, r2
 8002b74:	d003      	beq.n	8002b7e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002b7e:	4b18      	ldr	r3, [pc, #96]	; (8002be0 <HAL_GPIO_Init+0x2dc>)
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002b84:	4b16      	ldr	r3, [pc, #88]	; (8002be0 <HAL_GPIO_Init+0x2dc>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	43da      	mvns	r2, r3
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	4013      	ands	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	2380      	movs	r3, #128	; 0x80
 8002b9a:	039b      	lsls	r3, r3, #14
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	d003      	beq.n	8002ba8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002ba8:	4b0d      	ldr	r3, [pc, #52]	; (8002be0 <HAL_GPIO_Init+0x2dc>)
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	40da      	lsrs	r2, r3
 8002bbc:	1e13      	subs	r3, r2, #0
 8002bbe:	d000      	beq.n	8002bc2 <HAL_GPIO_Init+0x2be>
 8002bc0:	e6a8      	b.n	8002914 <HAL_GPIO_Init+0x10>
  } 
}
 8002bc2:	46c0      	nop			; (mov r8, r8)
 8002bc4:	46c0      	nop			; (mov r8, r8)
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	b006      	add	sp, #24
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	40010000 	.word	0x40010000
 8002bd4:	48000400 	.word	0x48000400
 8002bd8:	48000800 	.word	0x48000800
 8002bdc:	48000c00 	.word	0x48000c00
 8002be0:	40010400 	.word	0x40010400

08002be4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	000a      	movs	r2, r1
 8002bee:	1cbb      	adds	r3, r7, #2
 8002bf0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	1cba      	adds	r2, r7, #2
 8002bf8:	8812      	ldrh	r2, [r2, #0]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	d004      	beq.n	8002c08 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002bfe:	230f      	movs	r3, #15
 8002c00:	18fb      	adds	r3, r7, r3
 8002c02:	2201      	movs	r2, #1
 8002c04:	701a      	strb	r2, [r3, #0]
 8002c06:	e003      	b.n	8002c10 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c08:	230f      	movs	r3, #15
 8002c0a:	18fb      	adds	r3, r7, r3
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002c10:	230f      	movs	r3, #15
 8002c12:	18fb      	adds	r3, r7, r3
 8002c14:	781b      	ldrb	r3, [r3, #0]
  }
 8002c16:	0018      	movs	r0, r3
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	b004      	add	sp, #16
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b082      	sub	sp, #8
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
 8002c26:	0008      	movs	r0, r1
 8002c28:	0011      	movs	r1, r2
 8002c2a:	1cbb      	adds	r3, r7, #2
 8002c2c:	1c02      	adds	r2, r0, #0
 8002c2e:	801a      	strh	r2, [r3, #0]
 8002c30:	1c7b      	adds	r3, r7, #1
 8002c32:	1c0a      	adds	r2, r1, #0
 8002c34:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c36:	1c7b      	adds	r3, r7, #1
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d004      	beq.n	8002c48 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c3e:	1cbb      	adds	r3, r7, #2
 8002c40:	881a      	ldrh	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c46:	e003      	b.n	8002c50 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c48:	1cbb      	adds	r3, r7, #2
 8002c4a:	881a      	ldrh	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c50:	46c0      	nop			; (mov r8, r8)
 8002c52:	46bd      	mov	sp, r7
 8002c54:	b002      	add	sp, #8
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	000a      	movs	r2, r1
 8002c62:	1cbb      	adds	r3, r7, #2
 8002c64:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c6c:	1cbb      	adds	r3, r7, #2
 8002c6e:	881b      	ldrh	r3, [r3, #0]
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	4013      	ands	r3, r2
 8002c74:	041a      	lsls	r2, r3, #16
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	1cb9      	adds	r1, r7, #2
 8002c7c:	8809      	ldrh	r1, [r1, #0]
 8002c7e:	400b      	ands	r3, r1
 8002c80:	431a      	orrs	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	619a      	str	r2, [r3, #24]
}
 8002c86:	46c0      	nop			; (mov r8, r8)
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	b004      	add	sp, #16
 8002c8c:	bd80      	pop	{r7, pc}
	...

08002c90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e082      	b.n	8002da8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2241      	movs	r2, #65	; 0x41
 8002ca6:	5c9b      	ldrb	r3, [r3, r2]
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d107      	bne.n	8002cbe <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2240      	movs	r2, #64	; 0x40
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	0018      	movs	r0, r3
 8002cba:	f7fe fb6f 	bl	800139c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2241      	movs	r2, #65	; 0x41
 8002cc2:	2124      	movs	r1, #36	; 0x24
 8002cc4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	438a      	bics	r2, r1
 8002cd4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4934      	ldr	r1, [pc, #208]	; (8002db0 <HAL_I2C_Init+0x120>)
 8002ce0:	400a      	ands	r2, r1
 8002ce2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689a      	ldr	r2, [r3, #8]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4931      	ldr	r1, [pc, #196]	; (8002db4 <HAL_I2C_Init+0x124>)
 8002cf0:	400a      	ands	r2, r1
 8002cf2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d108      	bne.n	8002d0e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2180      	movs	r1, #128	; 0x80
 8002d06:	0209      	lsls	r1, r1, #8
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	609a      	str	r2, [r3, #8]
 8002d0c:	e007      	b.n	8002d1e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2184      	movs	r1, #132	; 0x84
 8002d18:	0209      	lsls	r1, r1, #8
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d104      	bne.n	8002d30 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2280      	movs	r2, #128	; 0x80
 8002d2c:	0112      	lsls	r2, r2, #4
 8002d2e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685a      	ldr	r2, [r3, #4]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	491f      	ldr	r1, [pc, #124]	; (8002db8 <HAL_I2C_Init+0x128>)
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68da      	ldr	r2, [r3, #12]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	491a      	ldr	r1, [pc, #104]	; (8002db4 <HAL_I2C_Init+0x124>)
 8002d4c:	400a      	ands	r2, r1
 8002d4e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691a      	ldr	r2, [r3, #16]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	69d9      	ldr	r1, [r3, #28]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a1a      	ldr	r2, [r3, #32]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2101      	movs	r1, #1
 8002d86:	430a      	orrs	r2, r1
 8002d88:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2241      	movs	r2, #65	; 0x41
 8002d94:	2120      	movs	r1, #32
 8002d96:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2242      	movs	r2, #66	; 0x42
 8002da2:	2100      	movs	r1, #0
 8002da4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	0018      	movs	r0, r3
 8002daa:	46bd      	mov	sp, r7
 8002dac:	b002      	add	sp, #8
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	f0ffffff 	.word	0xf0ffffff
 8002db4:	ffff7fff 	.word	0xffff7fff
 8002db8:	02008000 	.word	0x02008000

08002dbc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2241      	movs	r2, #65	; 0x41
 8002dca:	5c9b      	ldrb	r3, [r3, r2]
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b20      	cmp	r3, #32
 8002dd0:	d138      	bne.n	8002e44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2240      	movs	r2, #64	; 0x40
 8002dd6:	5c9b      	ldrb	r3, [r3, r2]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d101      	bne.n	8002de0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ddc:	2302      	movs	r3, #2
 8002dde:	e032      	b.n	8002e46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2240      	movs	r2, #64	; 0x40
 8002de4:	2101      	movs	r1, #1
 8002de6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2241      	movs	r2, #65	; 0x41
 8002dec:	2124      	movs	r1, #36	; 0x24
 8002dee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	438a      	bics	r2, r1
 8002dfe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4911      	ldr	r1, [pc, #68]	; (8002e50 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002e0c:	400a      	ands	r2, r1
 8002e0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6819      	ldr	r1, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2241      	movs	r2, #65	; 0x41
 8002e34:	2120      	movs	r1, #32
 8002e36:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2240      	movs	r2, #64	; 0x40
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002e40:	2300      	movs	r3, #0
 8002e42:	e000      	b.n	8002e46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e44:	2302      	movs	r3, #2
  }
}
 8002e46:	0018      	movs	r0, r3
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	b002      	add	sp, #8
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	46c0      	nop			; (mov r8, r8)
 8002e50:	ffffefff 	.word	0xffffefff

08002e54 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2241      	movs	r2, #65	; 0x41
 8002e62:	5c9b      	ldrb	r3, [r3, r2]
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b20      	cmp	r3, #32
 8002e68:	d139      	bne.n	8002ede <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2240      	movs	r2, #64	; 0x40
 8002e6e:	5c9b      	ldrb	r3, [r3, r2]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d101      	bne.n	8002e78 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e74:	2302      	movs	r3, #2
 8002e76:	e033      	b.n	8002ee0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2240      	movs	r2, #64	; 0x40
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2241      	movs	r2, #65	; 0x41
 8002e84:	2124      	movs	r1, #36	; 0x24
 8002e86:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2101      	movs	r1, #1
 8002e94:	438a      	bics	r2, r1
 8002e96:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	4a11      	ldr	r2, [pc, #68]	; (8002ee8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	021b      	lsls	r3, r3, #8
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2241      	movs	r2, #65	; 0x41
 8002ece:	2120      	movs	r1, #32
 8002ed0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2240      	movs	r2, #64	; 0x40
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002eda:	2300      	movs	r3, #0
 8002edc:	e000      	b.n	8002ee0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ede:	2302      	movs	r3, #2
  }
}
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	b004      	add	sp, #16
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	fffff0ff 	.word	0xfffff0ff

08002eec <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI:Enter STOP mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter STOP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	000a      	movs	r2, r1
 8002ef6:	1cfb      	adds	r3, r7, #3
 8002ef8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
 8002efa:	2300      	movs	r3, #0
 8002efc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8002efe:	4b13      	ldr	r3, [pc, #76]	; (8002f4c <HAL_PWR_EnterSTOPMode+0x60>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	60fb      	str	r3, [r7, #12]
  
  /* Clear PDDS and LPDS bits */
  tmpreg &= (uint32_t)~(PWR_CR_PDDS | PWR_CR_LPDS);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2203      	movs	r2, #3
 8002f08:	4393      	bics	r3, r2
 8002f0a:	60fb      	str	r3, [r7, #12]

  /* Set LPDS bit according to Regulator value */
  tmpreg |= Regulator;
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 8002f14:	4b0d      	ldr	r3, [pc, #52]	; (8002f4c <HAL_PWR_EnterSTOPMode+0x60>)
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8002f1a:	4b0d      	ldr	r3, [pc, #52]	; (8002f50 <HAL_PWR_EnterSTOPMode+0x64>)
 8002f1c:	691a      	ldr	r2, [r3, #16]
 8002f1e:	4b0c      	ldr	r3, [pc, #48]	; (8002f50 <HAL_PWR_EnterSTOPMode+0x64>)
 8002f20:	2104      	movs	r1, #4
 8002f22:	430a      	orrs	r2, r1
 8002f24:	611a      	str	r2, [r3, #16]

  /* Select STOP mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8002f26:	1cfb      	adds	r3, r7, #3
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d101      	bne.n	8002f32 <HAL_PWR_EnterSTOPMode+0x46>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002f2e:	bf30      	wfi
 8002f30:	e002      	b.n	8002f38 <HAL_PWR_EnterSTOPMode+0x4c>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002f32:	bf40      	sev
    __WFE();
 8002f34:	bf20      	wfe
    __WFE();
 8002f36:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 8002f38:	4b05      	ldr	r3, [pc, #20]	; (8002f50 <HAL_PWR_EnterSTOPMode+0x64>)
 8002f3a:	691a      	ldr	r2, [r3, #16]
 8002f3c:	4b04      	ldr	r3, [pc, #16]	; (8002f50 <HAL_PWR_EnterSTOPMode+0x64>)
 8002f3e:	2104      	movs	r1, #4
 8002f40:	438a      	bics	r2, r1
 8002f42:	611a      	str	r2, [r3, #16]
}
 8002f44:	46c0      	nop			; (mov r8, r8)
 8002f46:	46bd      	mov	sp, r7
 8002f48:	b004      	add	sp, #16
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40007000 	.word	0x40007000
 8002f50:	e000ed00 	.word	0xe000ed00

08002f54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b088      	sub	sp, #32
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e301      	b.n	800356a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	d100      	bne.n	8002f72 <HAL_RCC_OscConfig+0x1e>
 8002f70:	e08d      	b.n	800308e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002f72:	4bc3      	ldr	r3, [pc, #780]	; (8003280 <HAL_RCC_OscConfig+0x32c>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	220c      	movs	r2, #12
 8002f78:	4013      	ands	r3, r2
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	d00e      	beq.n	8002f9c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f7e:	4bc0      	ldr	r3, [pc, #768]	; (8003280 <HAL_RCC_OscConfig+0x32c>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	220c      	movs	r2, #12
 8002f84:	4013      	ands	r3, r2
 8002f86:	2b08      	cmp	r3, #8
 8002f88:	d116      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x64>
 8002f8a:	4bbd      	ldr	r3, [pc, #756]	; (8003280 <HAL_RCC_OscConfig+0x32c>)
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	2380      	movs	r3, #128	; 0x80
 8002f90:	025b      	lsls	r3, r3, #9
 8002f92:	401a      	ands	r2, r3
 8002f94:	2380      	movs	r3, #128	; 0x80
 8002f96:	025b      	lsls	r3, r3, #9
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d10d      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f9c:	4bb8      	ldr	r3, [pc, #736]	; (8003280 <HAL_RCC_OscConfig+0x32c>)
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	2380      	movs	r3, #128	; 0x80
 8002fa2:	029b      	lsls	r3, r3, #10
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	d100      	bne.n	8002faa <HAL_RCC_OscConfig+0x56>
 8002fa8:	e070      	b.n	800308c <HAL_RCC_OscConfig+0x138>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d000      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x60>
 8002fb2:	e06b      	b.n	800308c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e2d8      	b.n	800356a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d107      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x7c>
 8002fc0:	4baf      	ldr	r3, [pc, #700]	; (8003280 <HAL_RCC_OscConfig+0x32c>)
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	4bae      	ldr	r3, [pc, #696]	; (8003280 <HAL_RCC_OscConfig+0x32c>)
 8002fc6:	2180      	movs	r1, #128	; 0x80
 8002fc8:	0249      	lsls	r1, r1, #9
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	e02f      	b.n	8003030 <HAL_RCC_OscConfig+0xdc>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10c      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x9e>
 8002fd8:	4ba9      	ldr	r3, [pc, #676]	; (8003280 <HAL_RCC_OscConfig+0x32c>)
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	4ba8      	ldr	r3, [pc, #672]	; (8003280 <HAL_RCC_OscConfig+0x32c>)
 8002fde:	49a9      	ldr	r1, [pc, #676]	; (8003284 <HAL_RCC_OscConfig+0x330>)
 8002fe0:	400a      	ands	r2, r1
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	4ba6      	ldr	r3, [pc, #664]	; (8003280 <HAL_RCC_OscConfig+0x32c>)
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	4ba5      	ldr	r3, [pc, #660]	; (8003280 <HAL_RCC_OscConfig+0x32c>)
 8002fea:	49a7      	ldr	r1, [pc, #668]	; (8003288 <HAL_RCC_OscConfig+0x334>)
 8002fec:	400a      	ands	r2, r1
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	e01e      	b.n	8003030 <HAL_RCC_OscConfig+0xdc>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	2b05      	cmp	r3, #5
 8002ff8:	d10e      	bne.n	8003018 <HAL_RCC_OscConfig+0xc4>
 8002ffa:	4ba1      	ldr	r3, [pc, #644]	; (8003280 <HAL_RCC_OscConfig+0x32c>)
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	4ba0      	ldr	r3, [pc, #640]	; (8003280 <HAL_RCC_OscConfig+0x32c>)
 8003000:	2180      	movs	r1, #128	; 0x80
 8003002:	02c9      	lsls	r1, r1, #11
 8003004:	430a      	orrs	r2, r1
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	4b9d      	ldr	r3, [pc, #628]	; (8003280 <HAL_RCC_OscConfig+0x32c>)
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	4b9c      	ldr	r3, [pc, #624]	; (8003280 <HAL_RCC_OscConfig+0x32c>)
 800300e:	2180      	movs	r1, #128	; 0x80
 8003010:	0249      	lsls	r1, r1, #9
 8003012:	430a      	orrs	r2, r1
 8003014:	601a      	str	r2, [r3, #0]
 8003016:	e00b      	b.n	8003030 <HAL_RCC_OscConfig+0xdc>
 8003018:	4b99      	ldr	r3, [pc, #612]	; (8003280 <HAL_RCC_OscConfig+0x32c>)
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	4b98      	ldr	r3, [pc, #608]	; (8003280 <HAL_RCC_OscConfig+0x32c>)
 800301e:	4999      	ldr	r1, [pc, #612]	; (8003284 <HAL_RCC_OscConfig+0x330>)
 8003020:	400a      	ands	r2, r1
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	4b96      	ldr	r3, [pc, #600]	; (8003280 <HAL_RCC_OscConfig+0x32c>)
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	4b95      	ldr	r3, [pc, #596]	; (8003280 <HAL_RCC_OscConfig+0x32c>)
 800302a:	4997      	ldr	r1, [pc, #604]	; (8003288 <HAL_RCC_OscConfig+0x334>)
 800302c:	400a      	ands	r2, r1
 800302e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d014      	beq.n	8003062 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003038:	f7fe fcaa 	bl	8001990 <HAL_GetTick>
 800303c:	0003      	movs	r3, r0
 800303e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003040:	e008      	b.n	8003054 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003042:	f7fe fca5 	bl	8001990 <HAL_GetTick>
 8003046:	0002      	movs	r2, r0
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b64      	cmp	r3, #100	; 0x64
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e28a      	b.n	800356a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003054:	4b8a      	ldr	r3, [pc, #552]	; (8003280 <HAL_RCC_OscConfig+0x32c>)
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	2380      	movs	r3, #128	; 0x80
 800305a:	029b      	lsls	r3, r3, #10
 800305c:	4013      	ands	r3, r2
 800305e:	d0f0      	beq.n	8003042 <HAL_RCC_OscConfig+0xee>
 8003060:	e015      	b.n	800308e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003062:	f7fe fc95 	bl	8001990 <HAL_GetTick>
 8003066:	0003      	movs	r3, r0
 8003068:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800306c:	f7fe fc90 	bl	8001990 <HAL_GetTick>
 8003070:	0002      	movs	r2, r0
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b64      	cmp	r3, #100	; 0x64
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e275      	b.n	800356a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800307e:	4b80      	ldr	r3, [pc, #512]	; (8003280 <HAL_RCC_OscConfig+0x32c>)
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	2380      	movs	r3, #128	; 0x80
 8003084:	029b      	lsls	r3, r3, #10
 8003086:	4013      	ands	r3, r2
 8003088:	d1f0      	bne.n	800306c <HAL_RCC_OscConfig+0x118>
 800308a:	e000      	b.n	800308e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800308c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2202      	movs	r2, #2
 8003094:	4013      	ands	r3, r2
 8003096:	d100      	bne.n	800309a <HAL_RCC_OscConfig+0x146>
 8003098:	e069      	b.n	800316e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800309a:	4b79      	ldr	r3, [pc, #484]	; (8003280 <HAL_RCC_OscConfig+0x32c>)
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	220c      	movs	r2, #12
 80030a0:	4013      	ands	r3, r2
 80030a2:	d00b      	beq.n	80030bc <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80030a4:	4b76      	ldr	r3, [pc, #472]	; (8003280 <HAL_RCC_OscConfig+0x32c>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	220c      	movs	r2, #12
 80030aa:	4013      	ands	r3, r2
 80030ac:	2b08      	cmp	r3, #8
 80030ae:	d11c      	bne.n	80030ea <HAL_RCC_OscConfig+0x196>
 80030b0:	4b73      	ldr	r3, [pc, #460]	; (8003280 <HAL_RCC_OscConfig+0x32c>)
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	2380      	movs	r3, #128	; 0x80
 80030b6:	025b      	lsls	r3, r3, #9
 80030b8:	4013      	ands	r3, r2
 80030ba:	d116      	bne.n	80030ea <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030bc:	4b70      	ldr	r3, [pc, #448]	; (8003280 <HAL_RCC_OscConfig+0x32c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2202      	movs	r2, #2
 80030c2:	4013      	ands	r3, r2
 80030c4:	d005      	beq.n	80030d2 <HAL_RCC_OscConfig+0x17e>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d001      	beq.n	80030d2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e24b      	b.n	800356a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d2:	4b6b      	ldr	r3, [pc, #428]	; (8003280 <HAL_RCC_OscConfig+0x32c>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	22f8      	movs	r2, #248	; 0xf8
 80030d8:	4393      	bics	r3, r2
 80030da:	0019      	movs	r1, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	00da      	lsls	r2, r3, #3
 80030e2:	4b67      	ldr	r3, [pc, #412]	; (8003280 <HAL_RCC_OscConfig+0x32c>)
 80030e4:	430a      	orrs	r2, r1
 80030e6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030e8:	e041      	b.n	800316e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d024      	beq.n	800313c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030f2:	4b63      	ldr	r3, [pc, #396]	; (8003280 <HAL_RCC_OscConfig+0x32c>)
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	4b62      	ldr	r3, [pc, #392]	; (8003280 <HAL_RCC_OscConfig+0x32c>)
 80030f8:	2101      	movs	r1, #1
 80030fa:	430a      	orrs	r2, r1
 80030fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fe:	f7fe fc47 	bl	8001990 <HAL_GetTick>
 8003102:	0003      	movs	r3, r0
 8003104:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003108:	f7fe fc42 	bl	8001990 <HAL_GetTick>
 800310c:	0002      	movs	r2, r0
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e227      	b.n	800356a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800311a:	4b59      	ldr	r3, [pc, #356]	; (8003280 <HAL_RCC_OscConfig+0x32c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2202      	movs	r2, #2
 8003120:	4013      	ands	r3, r2
 8003122:	d0f1      	beq.n	8003108 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003124:	4b56      	ldr	r3, [pc, #344]	; (8003280 <HAL_RCC_OscConfig+0x32c>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	22f8      	movs	r2, #248	; 0xf8
 800312a:	4393      	bics	r3, r2
 800312c:	0019      	movs	r1, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	00da      	lsls	r2, r3, #3
 8003134:	4b52      	ldr	r3, [pc, #328]	; (8003280 <HAL_RCC_OscConfig+0x32c>)
 8003136:	430a      	orrs	r2, r1
 8003138:	601a      	str	r2, [r3, #0]
 800313a:	e018      	b.n	800316e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800313c:	4b50      	ldr	r3, [pc, #320]	; (8003280 <HAL_RCC_OscConfig+0x32c>)
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	4b4f      	ldr	r3, [pc, #316]	; (8003280 <HAL_RCC_OscConfig+0x32c>)
 8003142:	2101      	movs	r1, #1
 8003144:	438a      	bics	r2, r1
 8003146:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003148:	f7fe fc22 	bl	8001990 <HAL_GetTick>
 800314c:	0003      	movs	r3, r0
 800314e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003150:	e008      	b.n	8003164 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003152:	f7fe fc1d 	bl	8001990 <HAL_GetTick>
 8003156:	0002      	movs	r2, r0
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d901      	bls.n	8003164 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e202      	b.n	800356a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003164:	4b46      	ldr	r3, [pc, #280]	; (8003280 <HAL_RCC_OscConfig+0x32c>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2202      	movs	r2, #2
 800316a:	4013      	ands	r3, r2
 800316c:	d1f1      	bne.n	8003152 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2208      	movs	r2, #8
 8003174:	4013      	ands	r3, r2
 8003176:	d036      	beq.n	80031e6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d019      	beq.n	80031b4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003180:	4b3f      	ldr	r3, [pc, #252]	; (8003280 <HAL_RCC_OscConfig+0x32c>)
 8003182:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003184:	4b3e      	ldr	r3, [pc, #248]	; (8003280 <HAL_RCC_OscConfig+0x32c>)
 8003186:	2101      	movs	r1, #1
 8003188:	430a      	orrs	r2, r1
 800318a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800318c:	f7fe fc00 	bl	8001990 <HAL_GetTick>
 8003190:	0003      	movs	r3, r0
 8003192:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003194:	e008      	b.n	80031a8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003196:	f7fe fbfb 	bl	8001990 <HAL_GetTick>
 800319a:	0002      	movs	r2, r0
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e1e0      	b.n	800356a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031a8:	4b35      	ldr	r3, [pc, #212]	; (8003280 <HAL_RCC_OscConfig+0x32c>)
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	2202      	movs	r2, #2
 80031ae:	4013      	ands	r3, r2
 80031b0:	d0f1      	beq.n	8003196 <HAL_RCC_OscConfig+0x242>
 80031b2:	e018      	b.n	80031e6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031b4:	4b32      	ldr	r3, [pc, #200]	; (8003280 <HAL_RCC_OscConfig+0x32c>)
 80031b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031b8:	4b31      	ldr	r3, [pc, #196]	; (8003280 <HAL_RCC_OscConfig+0x32c>)
 80031ba:	2101      	movs	r1, #1
 80031bc:	438a      	bics	r2, r1
 80031be:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031c0:	f7fe fbe6 	bl	8001990 <HAL_GetTick>
 80031c4:	0003      	movs	r3, r0
 80031c6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031c8:	e008      	b.n	80031dc <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031ca:	f7fe fbe1 	bl	8001990 <HAL_GetTick>
 80031ce:	0002      	movs	r2, r0
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e1c6      	b.n	800356a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031dc:	4b28      	ldr	r3, [pc, #160]	; (8003280 <HAL_RCC_OscConfig+0x32c>)
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	2202      	movs	r2, #2
 80031e2:	4013      	ands	r3, r2
 80031e4:	d1f1      	bne.n	80031ca <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2204      	movs	r2, #4
 80031ec:	4013      	ands	r3, r2
 80031ee:	d100      	bne.n	80031f2 <HAL_RCC_OscConfig+0x29e>
 80031f0:	e0b4      	b.n	800335c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031f2:	201f      	movs	r0, #31
 80031f4:	183b      	adds	r3, r7, r0
 80031f6:	2200      	movs	r2, #0
 80031f8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031fa:	4b21      	ldr	r3, [pc, #132]	; (8003280 <HAL_RCC_OscConfig+0x32c>)
 80031fc:	69da      	ldr	r2, [r3, #28]
 80031fe:	2380      	movs	r3, #128	; 0x80
 8003200:	055b      	lsls	r3, r3, #21
 8003202:	4013      	ands	r3, r2
 8003204:	d110      	bne.n	8003228 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003206:	4b1e      	ldr	r3, [pc, #120]	; (8003280 <HAL_RCC_OscConfig+0x32c>)
 8003208:	69da      	ldr	r2, [r3, #28]
 800320a:	4b1d      	ldr	r3, [pc, #116]	; (8003280 <HAL_RCC_OscConfig+0x32c>)
 800320c:	2180      	movs	r1, #128	; 0x80
 800320e:	0549      	lsls	r1, r1, #21
 8003210:	430a      	orrs	r2, r1
 8003212:	61da      	str	r2, [r3, #28]
 8003214:	4b1a      	ldr	r3, [pc, #104]	; (8003280 <HAL_RCC_OscConfig+0x32c>)
 8003216:	69da      	ldr	r2, [r3, #28]
 8003218:	2380      	movs	r3, #128	; 0x80
 800321a:	055b      	lsls	r3, r3, #21
 800321c:	4013      	ands	r3, r2
 800321e:	60fb      	str	r3, [r7, #12]
 8003220:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003222:	183b      	adds	r3, r7, r0
 8003224:	2201      	movs	r2, #1
 8003226:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003228:	4b18      	ldr	r3, [pc, #96]	; (800328c <HAL_RCC_OscConfig+0x338>)
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	2380      	movs	r3, #128	; 0x80
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	4013      	ands	r3, r2
 8003232:	d11a      	bne.n	800326a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003234:	4b15      	ldr	r3, [pc, #84]	; (800328c <HAL_RCC_OscConfig+0x338>)
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	4b14      	ldr	r3, [pc, #80]	; (800328c <HAL_RCC_OscConfig+0x338>)
 800323a:	2180      	movs	r1, #128	; 0x80
 800323c:	0049      	lsls	r1, r1, #1
 800323e:	430a      	orrs	r2, r1
 8003240:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003242:	f7fe fba5 	bl	8001990 <HAL_GetTick>
 8003246:	0003      	movs	r3, r0
 8003248:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800324a:	e008      	b.n	800325e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800324c:	f7fe fba0 	bl	8001990 <HAL_GetTick>
 8003250:	0002      	movs	r2, r0
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b64      	cmp	r3, #100	; 0x64
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e185      	b.n	800356a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800325e:	4b0b      	ldr	r3, [pc, #44]	; (800328c <HAL_RCC_OscConfig+0x338>)
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	2380      	movs	r3, #128	; 0x80
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	4013      	ands	r3, r2
 8003268:	d0f0      	beq.n	800324c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d10e      	bne.n	8003290 <HAL_RCC_OscConfig+0x33c>
 8003272:	4b03      	ldr	r3, [pc, #12]	; (8003280 <HAL_RCC_OscConfig+0x32c>)
 8003274:	6a1a      	ldr	r2, [r3, #32]
 8003276:	4b02      	ldr	r3, [pc, #8]	; (8003280 <HAL_RCC_OscConfig+0x32c>)
 8003278:	2101      	movs	r1, #1
 800327a:	430a      	orrs	r2, r1
 800327c:	621a      	str	r2, [r3, #32]
 800327e:	e035      	b.n	80032ec <HAL_RCC_OscConfig+0x398>
 8003280:	40021000 	.word	0x40021000
 8003284:	fffeffff 	.word	0xfffeffff
 8003288:	fffbffff 	.word	0xfffbffff
 800328c:	40007000 	.word	0x40007000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10c      	bne.n	80032b2 <HAL_RCC_OscConfig+0x35e>
 8003298:	4bb6      	ldr	r3, [pc, #728]	; (8003574 <HAL_RCC_OscConfig+0x620>)
 800329a:	6a1a      	ldr	r2, [r3, #32]
 800329c:	4bb5      	ldr	r3, [pc, #724]	; (8003574 <HAL_RCC_OscConfig+0x620>)
 800329e:	2101      	movs	r1, #1
 80032a0:	438a      	bics	r2, r1
 80032a2:	621a      	str	r2, [r3, #32]
 80032a4:	4bb3      	ldr	r3, [pc, #716]	; (8003574 <HAL_RCC_OscConfig+0x620>)
 80032a6:	6a1a      	ldr	r2, [r3, #32]
 80032a8:	4bb2      	ldr	r3, [pc, #712]	; (8003574 <HAL_RCC_OscConfig+0x620>)
 80032aa:	2104      	movs	r1, #4
 80032ac:	438a      	bics	r2, r1
 80032ae:	621a      	str	r2, [r3, #32]
 80032b0:	e01c      	b.n	80032ec <HAL_RCC_OscConfig+0x398>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	2b05      	cmp	r3, #5
 80032b8:	d10c      	bne.n	80032d4 <HAL_RCC_OscConfig+0x380>
 80032ba:	4bae      	ldr	r3, [pc, #696]	; (8003574 <HAL_RCC_OscConfig+0x620>)
 80032bc:	6a1a      	ldr	r2, [r3, #32]
 80032be:	4bad      	ldr	r3, [pc, #692]	; (8003574 <HAL_RCC_OscConfig+0x620>)
 80032c0:	2104      	movs	r1, #4
 80032c2:	430a      	orrs	r2, r1
 80032c4:	621a      	str	r2, [r3, #32]
 80032c6:	4bab      	ldr	r3, [pc, #684]	; (8003574 <HAL_RCC_OscConfig+0x620>)
 80032c8:	6a1a      	ldr	r2, [r3, #32]
 80032ca:	4baa      	ldr	r3, [pc, #680]	; (8003574 <HAL_RCC_OscConfig+0x620>)
 80032cc:	2101      	movs	r1, #1
 80032ce:	430a      	orrs	r2, r1
 80032d0:	621a      	str	r2, [r3, #32]
 80032d2:	e00b      	b.n	80032ec <HAL_RCC_OscConfig+0x398>
 80032d4:	4ba7      	ldr	r3, [pc, #668]	; (8003574 <HAL_RCC_OscConfig+0x620>)
 80032d6:	6a1a      	ldr	r2, [r3, #32]
 80032d8:	4ba6      	ldr	r3, [pc, #664]	; (8003574 <HAL_RCC_OscConfig+0x620>)
 80032da:	2101      	movs	r1, #1
 80032dc:	438a      	bics	r2, r1
 80032de:	621a      	str	r2, [r3, #32]
 80032e0:	4ba4      	ldr	r3, [pc, #656]	; (8003574 <HAL_RCC_OscConfig+0x620>)
 80032e2:	6a1a      	ldr	r2, [r3, #32]
 80032e4:	4ba3      	ldr	r3, [pc, #652]	; (8003574 <HAL_RCC_OscConfig+0x620>)
 80032e6:	2104      	movs	r1, #4
 80032e8:	438a      	bics	r2, r1
 80032ea:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d014      	beq.n	800331e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032f4:	f7fe fb4c 	bl	8001990 <HAL_GetTick>
 80032f8:	0003      	movs	r3, r0
 80032fa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032fc:	e009      	b.n	8003312 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032fe:	f7fe fb47 	bl	8001990 <HAL_GetTick>
 8003302:	0002      	movs	r2, r0
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	4a9b      	ldr	r2, [pc, #620]	; (8003578 <HAL_RCC_OscConfig+0x624>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e12b      	b.n	800356a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003312:	4b98      	ldr	r3, [pc, #608]	; (8003574 <HAL_RCC_OscConfig+0x620>)
 8003314:	6a1b      	ldr	r3, [r3, #32]
 8003316:	2202      	movs	r2, #2
 8003318:	4013      	ands	r3, r2
 800331a:	d0f0      	beq.n	80032fe <HAL_RCC_OscConfig+0x3aa>
 800331c:	e013      	b.n	8003346 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800331e:	f7fe fb37 	bl	8001990 <HAL_GetTick>
 8003322:	0003      	movs	r3, r0
 8003324:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003326:	e009      	b.n	800333c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003328:	f7fe fb32 	bl	8001990 <HAL_GetTick>
 800332c:	0002      	movs	r2, r0
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	4a91      	ldr	r2, [pc, #580]	; (8003578 <HAL_RCC_OscConfig+0x624>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d901      	bls.n	800333c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e116      	b.n	800356a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800333c:	4b8d      	ldr	r3, [pc, #564]	; (8003574 <HAL_RCC_OscConfig+0x620>)
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	2202      	movs	r2, #2
 8003342:	4013      	ands	r3, r2
 8003344:	d1f0      	bne.n	8003328 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003346:	231f      	movs	r3, #31
 8003348:	18fb      	adds	r3, r7, r3
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d105      	bne.n	800335c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003350:	4b88      	ldr	r3, [pc, #544]	; (8003574 <HAL_RCC_OscConfig+0x620>)
 8003352:	69da      	ldr	r2, [r3, #28]
 8003354:	4b87      	ldr	r3, [pc, #540]	; (8003574 <HAL_RCC_OscConfig+0x620>)
 8003356:	4989      	ldr	r1, [pc, #548]	; (800357c <HAL_RCC_OscConfig+0x628>)
 8003358:	400a      	ands	r2, r1
 800335a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2210      	movs	r2, #16
 8003362:	4013      	ands	r3, r2
 8003364:	d063      	beq.n	800342e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d12a      	bne.n	80033c4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800336e:	4b81      	ldr	r3, [pc, #516]	; (8003574 <HAL_RCC_OscConfig+0x620>)
 8003370:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003372:	4b80      	ldr	r3, [pc, #512]	; (8003574 <HAL_RCC_OscConfig+0x620>)
 8003374:	2104      	movs	r1, #4
 8003376:	430a      	orrs	r2, r1
 8003378:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800337a:	4b7e      	ldr	r3, [pc, #504]	; (8003574 <HAL_RCC_OscConfig+0x620>)
 800337c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800337e:	4b7d      	ldr	r3, [pc, #500]	; (8003574 <HAL_RCC_OscConfig+0x620>)
 8003380:	2101      	movs	r1, #1
 8003382:	430a      	orrs	r2, r1
 8003384:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003386:	f7fe fb03 	bl	8001990 <HAL_GetTick>
 800338a:	0003      	movs	r3, r0
 800338c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003390:	f7fe fafe 	bl	8001990 <HAL_GetTick>
 8003394:	0002      	movs	r2, r0
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e0e3      	b.n	800356a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80033a2:	4b74      	ldr	r3, [pc, #464]	; (8003574 <HAL_RCC_OscConfig+0x620>)
 80033a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a6:	2202      	movs	r2, #2
 80033a8:	4013      	ands	r3, r2
 80033aa:	d0f1      	beq.n	8003390 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80033ac:	4b71      	ldr	r3, [pc, #452]	; (8003574 <HAL_RCC_OscConfig+0x620>)
 80033ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b0:	22f8      	movs	r2, #248	; 0xf8
 80033b2:	4393      	bics	r3, r2
 80033b4:	0019      	movs	r1, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	00da      	lsls	r2, r3, #3
 80033bc:	4b6d      	ldr	r3, [pc, #436]	; (8003574 <HAL_RCC_OscConfig+0x620>)
 80033be:	430a      	orrs	r2, r1
 80033c0:	635a      	str	r2, [r3, #52]	; 0x34
 80033c2:	e034      	b.n	800342e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	3305      	adds	r3, #5
 80033ca:	d111      	bne.n	80033f0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80033cc:	4b69      	ldr	r3, [pc, #420]	; (8003574 <HAL_RCC_OscConfig+0x620>)
 80033ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033d0:	4b68      	ldr	r3, [pc, #416]	; (8003574 <HAL_RCC_OscConfig+0x620>)
 80033d2:	2104      	movs	r1, #4
 80033d4:	438a      	bics	r2, r1
 80033d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80033d8:	4b66      	ldr	r3, [pc, #408]	; (8003574 <HAL_RCC_OscConfig+0x620>)
 80033da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033dc:	22f8      	movs	r2, #248	; 0xf8
 80033de:	4393      	bics	r3, r2
 80033e0:	0019      	movs	r1, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	00da      	lsls	r2, r3, #3
 80033e8:	4b62      	ldr	r3, [pc, #392]	; (8003574 <HAL_RCC_OscConfig+0x620>)
 80033ea:	430a      	orrs	r2, r1
 80033ec:	635a      	str	r2, [r3, #52]	; 0x34
 80033ee:	e01e      	b.n	800342e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80033f0:	4b60      	ldr	r3, [pc, #384]	; (8003574 <HAL_RCC_OscConfig+0x620>)
 80033f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033f4:	4b5f      	ldr	r3, [pc, #380]	; (8003574 <HAL_RCC_OscConfig+0x620>)
 80033f6:	2104      	movs	r1, #4
 80033f8:	430a      	orrs	r2, r1
 80033fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80033fc:	4b5d      	ldr	r3, [pc, #372]	; (8003574 <HAL_RCC_OscConfig+0x620>)
 80033fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003400:	4b5c      	ldr	r3, [pc, #368]	; (8003574 <HAL_RCC_OscConfig+0x620>)
 8003402:	2101      	movs	r1, #1
 8003404:	438a      	bics	r2, r1
 8003406:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003408:	f7fe fac2 	bl	8001990 <HAL_GetTick>
 800340c:	0003      	movs	r3, r0
 800340e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003412:	f7fe fabd 	bl	8001990 <HAL_GetTick>
 8003416:	0002      	movs	r2, r0
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e0a2      	b.n	800356a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003424:	4b53      	ldr	r3, [pc, #332]	; (8003574 <HAL_RCC_OscConfig+0x620>)
 8003426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003428:	2202      	movs	r2, #2
 800342a:	4013      	ands	r3, r2
 800342c:	d1f1      	bne.n	8003412 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d100      	bne.n	8003438 <HAL_RCC_OscConfig+0x4e4>
 8003436:	e097      	b.n	8003568 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003438:	4b4e      	ldr	r3, [pc, #312]	; (8003574 <HAL_RCC_OscConfig+0x620>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	220c      	movs	r2, #12
 800343e:	4013      	ands	r3, r2
 8003440:	2b08      	cmp	r3, #8
 8003442:	d100      	bne.n	8003446 <HAL_RCC_OscConfig+0x4f2>
 8003444:	e06b      	b.n	800351e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	2b02      	cmp	r3, #2
 800344c:	d14c      	bne.n	80034e8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800344e:	4b49      	ldr	r3, [pc, #292]	; (8003574 <HAL_RCC_OscConfig+0x620>)
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	4b48      	ldr	r3, [pc, #288]	; (8003574 <HAL_RCC_OscConfig+0x620>)
 8003454:	494a      	ldr	r1, [pc, #296]	; (8003580 <HAL_RCC_OscConfig+0x62c>)
 8003456:	400a      	ands	r2, r1
 8003458:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345a:	f7fe fa99 	bl	8001990 <HAL_GetTick>
 800345e:	0003      	movs	r3, r0
 8003460:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003464:	f7fe fa94 	bl	8001990 <HAL_GetTick>
 8003468:	0002      	movs	r2, r0
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e079      	b.n	800356a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003476:	4b3f      	ldr	r3, [pc, #252]	; (8003574 <HAL_RCC_OscConfig+0x620>)
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	2380      	movs	r3, #128	; 0x80
 800347c:	049b      	lsls	r3, r3, #18
 800347e:	4013      	ands	r3, r2
 8003480:	d1f0      	bne.n	8003464 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003482:	4b3c      	ldr	r3, [pc, #240]	; (8003574 <HAL_RCC_OscConfig+0x620>)
 8003484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003486:	220f      	movs	r2, #15
 8003488:	4393      	bics	r3, r2
 800348a:	0019      	movs	r1, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003490:	4b38      	ldr	r3, [pc, #224]	; (8003574 <HAL_RCC_OscConfig+0x620>)
 8003492:	430a      	orrs	r2, r1
 8003494:	62da      	str	r2, [r3, #44]	; 0x2c
 8003496:	4b37      	ldr	r3, [pc, #220]	; (8003574 <HAL_RCC_OscConfig+0x620>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	4a3a      	ldr	r2, [pc, #232]	; (8003584 <HAL_RCC_OscConfig+0x630>)
 800349c:	4013      	ands	r3, r2
 800349e:	0019      	movs	r1, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a8:	431a      	orrs	r2, r3
 80034aa:	4b32      	ldr	r3, [pc, #200]	; (8003574 <HAL_RCC_OscConfig+0x620>)
 80034ac:	430a      	orrs	r2, r1
 80034ae:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034b0:	4b30      	ldr	r3, [pc, #192]	; (8003574 <HAL_RCC_OscConfig+0x620>)
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	4b2f      	ldr	r3, [pc, #188]	; (8003574 <HAL_RCC_OscConfig+0x620>)
 80034b6:	2180      	movs	r1, #128	; 0x80
 80034b8:	0449      	lsls	r1, r1, #17
 80034ba:	430a      	orrs	r2, r1
 80034bc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034be:	f7fe fa67 	bl	8001990 <HAL_GetTick>
 80034c2:	0003      	movs	r3, r0
 80034c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034c8:	f7fe fa62 	bl	8001990 <HAL_GetTick>
 80034cc:	0002      	movs	r2, r0
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e047      	b.n	800356a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034da:	4b26      	ldr	r3, [pc, #152]	; (8003574 <HAL_RCC_OscConfig+0x620>)
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	2380      	movs	r3, #128	; 0x80
 80034e0:	049b      	lsls	r3, r3, #18
 80034e2:	4013      	ands	r3, r2
 80034e4:	d0f0      	beq.n	80034c8 <HAL_RCC_OscConfig+0x574>
 80034e6:	e03f      	b.n	8003568 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e8:	4b22      	ldr	r3, [pc, #136]	; (8003574 <HAL_RCC_OscConfig+0x620>)
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	4b21      	ldr	r3, [pc, #132]	; (8003574 <HAL_RCC_OscConfig+0x620>)
 80034ee:	4924      	ldr	r1, [pc, #144]	; (8003580 <HAL_RCC_OscConfig+0x62c>)
 80034f0:	400a      	ands	r2, r1
 80034f2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f4:	f7fe fa4c 	bl	8001990 <HAL_GetTick>
 80034f8:	0003      	movs	r3, r0
 80034fa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034fc:	e008      	b.n	8003510 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034fe:	f7fe fa47 	bl	8001990 <HAL_GetTick>
 8003502:	0002      	movs	r2, r0
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d901      	bls.n	8003510 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e02c      	b.n	800356a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003510:	4b18      	ldr	r3, [pc, #96]	; (8003574 <HAL_RCC_OscConfig+0x620>)
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	2380      	movs	r3, #128	; 0x80
 8003516:	049b      	lsls	r3, r3, #18
 8003518:	4013      	ands	r3, r2
 800351a:	d1f0      	bne.n	80034fe <HAL_RCC_OscConfig+0x5aa>
 800351c:	e024      	b.n	8003568 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d101      	bne.n	800352a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e01f      	b.n	800356a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800352a:	4b12      	ldr	r3, [pc, #72]	; (8003574 <HAL_RCC_OscConfig+0x620>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003530:	4b10      	ldr	r3, [pc, #64]	; (8003574 <HAL_RCC_OscConfig+0x620>)
 8003532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003534:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	2380      	movs	r3, #128	; 0x80
 800353a:	025b      	lsls	r3, r3, #9
 800353c:	401a      	ands	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	429a      	cmp	r2, r3
 8003544:	d10e      	bne.n	8003564 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	220f      	movs	r2, #15
 800354a:	401a      	ands	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003550:	429a      	cmp	r2, r3
 8003552:	d107      	bne.n	8003564 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003554:	697a      	ldr	r2, [r7, #20]
 8003556:	23f0      	movs	r3, #240	; 0xf0
 8003558:	039b      	lsls	r3, r3, #14
 800355a:	401a      	ands	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003560:	429a      	cmp	r2, r3
 8003562:	d001      	beq.n	8003568 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e000      	b.n	800356a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	0018      	movs	r0, r3
 800356c:	46bd      	mov	sp, r7
 800356e:	b008      	add	sp, #32
 8003570:	bd80      	pop	{r7, pc}
 8003572:	46c0      	nop			; (mov r8, r8)
 8003574:	40021000 	.word	0x40021000
 8003578:	00001388 	.word	0x00001388
 800357c:	efffffff 	.word	0xefffffff
 8003580:	feffffff 	.word	0xfeffffff
 8003584:	ffc2ffff 	.word	0xffc2ffff

08003588 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e0b3      	b.n	8003704 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800359c:	4b5b      	ldr	r3, [pc, #364]	; (800370c <HAL_RCC_ClockConfig+0x184>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2201      	movs	r2, #1
 80035a2:	4013      	ands	r3, r2
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d911      	bls.n	80035ce <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035aa:	4b58      	ldr	r3, [pc, #352]	; (800370c <HAL_RCC_ClockConfig+0x184>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2201      	movs	r2, #1
 80035b0:	4393      	bics	r3, r2
 80035b2:	0019      	movs	r1, r3
 80035b4:	4b55      	ldr	r3, [pc, #340]	; (800370c <HAL_RCC_ClockConfig+0x184>)
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035bc:	4b53      	ldr	r3, [pc, #332]	; (800370c <HAL_RCC_ClockConfig+0x184>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2201      	movs	r2, #1
 80035c2:	4013      	ands	r3, r2
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d001      	beq.n	80035ce <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e09a      	b.n	8003704 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2202      	movs	r2, #2
 80035d4:	4013      	ands	r3, r2
 80035d6:	d015      	beq.n	8003604 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2204      	movs	r2, #4
 80035de:	4013      	ands	r3, r2
 80035e0:	d006      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80035e2:	4b4b      	ldr	r3, [pc, #300]	; (8003710 <HAL_RCC_ClockConfig+0x188>)
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	4b4a      	ldr	r3, [pc, #296]	; (8003710 <HAL_RCC_ClockConfig+0x188>)
 80035e8:	21e0      	movs	r1, #224	; 0xe0
 80035ea:	00c9      	lsls	r1, r1, #3
 80035ec:	430a      	orrs	r2, r1
 80035ee:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035f0:	4b47      	ldr	r3, [pc, #284]	; (8003710 <HAL_RCC_ClockConfig+0x188>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	22f0      	movs	r2, #240	; 0xf0
 80035f6:	4393      	bics	r3, r2
 80035f8:	0019      	movs	r1, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	689a      	ldr	r2, [r3, #8]
 80035fe:	4b44      	ldr	r3, [pc, #272]	; (8003710 <HAL_RCC_ClockConfig+0x188>)
 8003600:	430a      	orrs	r2, r1
 8003602:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2201      	movs	r2, #1
 800360a:	4013      	ands	r3, r2
 800360c:	d040      	beq.n	8003690 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d107      	bne.n	8003626 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003616:	4b3e      	ldr	r3, [pc, #248]	; (8003710 <HAL_RCC_ClockConfig+0x188>)
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	2380      	movs	r3, #128	; 0x80
 800361c:	029b      	lsls	r3, r3, #10
 800361e:	4013      	ands	r3, r2
 8003620:	d114      	bne.n	800364c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e06e      	b.n	8003704 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	2b02      	cmp	r3, #2
 800362c:	d107      	bne.n	800363e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800362e:	4b38      	ldr	r3, [pc, #224]	; (8003710 <HAL_RCC_ClockConfig+0x188>)
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	2380      	movs	r3, #128	; 0x80
 8003634:	049b      	lsls	r3, r3, #18
 8003636:	4013      	ands	r3, r2
 8003638:	d108      	bne.n	800364c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e062      	b.n	8003704 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800363e:	4b34      	ldr	r3, [pc, #208]	; (8003710 <HAL_RCC_ClockConfig+0x188>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2202      	movs	r2, #2
 8003644:	4013      	ands	r3, r2
 8003646:	d101      	bne.n	800364c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e05b      	b.n	8003704 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800364c:	4b30      	ldr	r3, [pc, #192]	; (8003710 <HAL_RCC_ClockConfig+0x188>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	2203      	movs	r2, #3
 8003652:	4393      	bics	r3, r2
 8003654:	0019      	movs	r1, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685a      	ldr	r2, [r3, #4]
 800365a:	4b2d      	ldr	r3, [pc, #180]	; (8003710 <HAL_RCC_ClockConfig+0x188>)
 800365c:	430a      	orrs	r2, r1
 800365e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003660:	f7fe f996 	bl	8001990 <HAL_GetTick>
 8003664:	0003      	movs	r3, r0
 8003666:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003668:	e009      	b.n	800367e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800366a:	f7fe f991 	bl	8001990 <HAL_GetTick>
 800366e:	0002      	movs	r2, r0
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	4a27      	ldr	r2, [pc, #156]	; (8003714 <HAL_RCC_ClockConfig+0x18c>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d901      	bls.n	800367e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e042      	b.n	8003704 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800367e:	4b24      	ldr	r3, [pc, #144]	; (8003710 <HAL_RCC_ClockConfig+0x188>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	220c      	movs	r2, #12
 8003684:	401a      	ands	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	429a      	cmp	r2, r3
 800368e:	d1ec      	bne.n	800366a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003690:	4b1e      	ldr	r3, [pc, #120]	; (800370c <HAL_RCC_ClockConfig+0x184>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2201      	movs	r2, #1
 8003696:	4013      	ands	r3, r2
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	429a      	cmp	r2, r3
 800369c:	d211      	bcs.n	80036c2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800369e:	4b1b      	ldr	r3, [pc, #108]	; (800370c <HAL_RCC_ClockConfig+0x184>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2201      	movs	r2, #1
 80036a4:	4393      	bics	r3, r2
 80036a6:	0019      	movs	r1, r3
 80036a8:	4b18      	ldr	r3, [pc, #96]	; (800370c <HAL_RCC_ClockConfig+0x184>)
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	430a      	orrs	r2, r1
 80036ae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036b0:	4b16      	ldr	r3, [pc, #88]	; (800370c <HAL_RCC_ClockConfig+0x184>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2201      	movs	r2, #1
 80036b6:	4013      	ands	r3, r2
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d001      	beq.n	80036c2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e020      	b.n	8003704 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2204      	movs	r2, #4
 80036c8:	4013      	ands	r3, r2
 80036ca:	d009      	beq.n	80036e0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80036cc:	4b10      	ldr	r3, [pc, #64]	; (8003710 <HAL_RCC_ClockConfig+0x188>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	4a11      	ldr	r2, [pc, #68]	; (8003718 <HAL_RCC_ClockConfig+0x190>)
 80036d2:	4013      	ands	r3, r2
 80036d4:	0019      	movs	r1, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68da      	ldr	r2, [r3, #12]
 80036da:	4b0d      	ldr	r3, [pc, #52]	; (8003710 <HAL_RCC_ClockConfig+0x188>)
 80036dc:	430a      	orrs	r2, r1
 80036de:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80036e0:	f000 f820 	bl	8003724 <HAL_RCC_GetSysClockFreq>
 80036e4:	0001      	movs	r1, r0
 80036e6:	4b0a      	ldr	r3, [pc, #40]	; (8003710 <HAL_RCC_ClockConfig+0x188>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	091b      	lsrs	r3, r3, #4
 80036ec:	220f      	movs	r2, #15
 80036ee:	4013      	ands	r3, r2
 80036f0:	4a0a      	ldr	r2, [pc, #40]	; (800371c <HAL_RCC_ClockConfig+0x194>)
 80036f2:	5cd3      	ldrb	r3, [r2, r3]
 80036f4:	000a      	movs	r2, r1
 80036f6:	40da      	lsrs	r2, r3
 80036f8:	4b09      	ldr	r3, [pc, #36]	; (8003720 <HAL_RCC_ClockConfig+0x198>)
 80036fa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80036fc:	2003      	movs	r0, #3
 80036fe:	f7fe f901 	bl	8001904 <HAL_InitTick>
  
  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	0018      	movs	r0, r3
 8003706:	46bd      	mov	sp, r7
 8003708:	b004      	add	sp, #16
 800370a:	bd80      	pop	{r7, pc}
 800370c:	40022000 	.word	0x40022000
 8003710:	40021000 	.word	0x40021000
 8003714:	00001388 	.word	0x00001388
 8003718:	fffff8ff 	.word	0xfffff8ff
 800371c:	0800676c 	.word	0x0800676c
 8003720:	2000001c 	.word	0x2000001c

08003724 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003724:	b590      	push	{r4, r7, lr}
 8003726:	b08f      	sub	sp, #60	; 0x3c
 8003728:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800372a:	2314      	movs	r3, #20
 800372c:	18fb      	adds	r3, r7, r3
 800372e:	4a2b      	ldr	r2, [pc, #172]	; (80037dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003730:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003732:	c313      	stmia	r3!, {r0, r1, r4}
 8003734:	6812      	ldr	r2, [r2, #0]
 8003736:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003738:	1d3b      	adds	r3, r7, #4
 800373a:	4a29      	ldr	r2, [pc, #164]	; (80037e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800373c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800373e:	c313      	stmia	r3!, {r0, r1, r4}
 8003740:	6812      	ldr	r2, [r2, #0]
 8003742:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003744:	2300      	movs	r3, #0
 8003746:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003748:	2300      	movs	r3, #0
 800374a:	62bb      	str	r3, [r7, #40]	; 0x28
 800374c:	2300      	movs	r3, #0
 800374e:	637b      	str	r3, [r7, #52]	; 0x34
 8003750:	2300      	movs	r3, #0
 8003752:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003754:	2300      	movs	r3, #0
 8003756:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003758:	4b22      	ldr	r3, [pc, #136]	; (80037e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800375e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003760:	220c      	movs	r2, #12
 8003762:	4013      	ands	r3, r2
 8003764:	2b04      	cmp	r3, #4
 8003766:	d002      	beq.n	800376e <HAL_RCC_GetSysClockFreq+0x4a>
 8003768:	2b08      	cmp	r3, #8
 800376a:	d003      	beq.n	8003774 <HAL_RCC_GetSysClockFreq+0x50>
 800376c:	e02d      	b.n	80037ca <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800376e:	4b1e      	ldr	r3, [pc, #120]	; (80037e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003770:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003772:	e02d      	b.n	80037d0 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003776:	0c9b      	lsrs	r3, r3, #18
 8003778:	220f      	movs	r2, #15
 800377a:	4013      	ands	r3, r2
 800377c:	2214      	movs	r2, #20
 800377e:	18ba      	adds	r2, r7, r2
 8003780:	5cd3      	ldrb	r3, [r2, r3]
 8003782:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003784:	4b17      	ldr	r3, [pc, #92]	; (80037e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003788:	220f      	movs	r2, #15
 800378a:	4013      	ands	r3, r2
 800378c:	1d3a      	adds	r2, r7, #4
 800378e:	5cd3      	ldrb	r3, [r2, r3]
 8003790:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003792:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003794:	2380      	movs	r3, #128	; 0x80
 8003796:	025b      	lsls	r3, r3, #9
 8003798:	4013      	ands	r3, r2
 800379a:	d009      	beq.n	80037b0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800379c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800379e:	4812      	ldr	r0, [pc, #72]	; (80037e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80037a0:	f7fc fcb2 	bl	8000108 <__udivsi3>
 80037a4:	0003      	movs	r3, r0
 80037a6:	001a      	movs	r2, r3
 80037a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037aa:	4353      	muls	r3, r2
 80037ac:	637b      	str	r3, [r7, #52]	; 0x34
 80037ae:	e009      	b.n	80037c4 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80037b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037b2:	000a      	movs	r2, r1
 80037b4:	0152      	lsls	r2, r2, #5
 80037b6:	1a52      	subs	r2, r2, r1
 80037b8:	0193      	lsls	r3, r2, #6
 80037ba:	1a9b      	subs	r3, r3, r2
 80037bc:	00db      	lsls	r3, r3, #3
 80037be:	185b      	adds	r3, r3, r1
 80037c0:	021b      	lsls	r3, r3, #8
 80037c2:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80037c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037c6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80037c8:	e002      	b.n	80037d0 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037ca:	4b07      	ldr	r3, [pc, #28]	; (80037e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80037cc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80037ce:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80037d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80037d2:	0018      	movs	r0, r3
 80037d4:	46bd      	mov	sp, r7
 80037d6:	b00f      	add	sp, #60	; 0x3c
 80037d8:	bd90      	pop	{r4, r7, pc}
 80037da:	46c0      	nop			; (mov r8, r8)
 80037dc:	08006748 	.word	0x08006748
 80037e0:	08006758 	.word	0x08006758
 80037e4:	40021000 	.word	0x40021000
 80037e8:	007a1200 	.word	0x007a1200

080037ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037f0:	4b02      	ldr	r3, [pc, #8]	; (80037fc <HAL_RCC_GetHCLKFreq+0x10>)
 80037f2:	681b      	ldr	r3, [r3, #0]
}
 80037f4:	0018      	movs	r0, r3
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	46c0      	nop			; (mov r8, r8)
 80037fc:	2000001c 	.word	0x2000001c

08003800 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003804:	f7ff fff2 	bl	80037ec <HAL_RCC_GetHCLKFreq>
 8003808:	0001      	movs	r1, r0
 800380a:	4b06      	ldr	r3, [pc, #24]	; (8003824 <HAL_RCC_GetPCLK1Freq+0x24>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	0a1b      	lsrs	r3, r3, #8
 8003810:	2207      	movs	r2, #7
 8003812:	4013      	ands	r3, r2
 8003814:	4a04      	ldr	r2, [pc, #16]	; (8003828 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003816:	5cd3      	ldrb	r3, [r2, r3]
 8003818:	40d9      	lsrs	r1, r3
 800381a:	000b      	movs	r3, r1
}    
 800381c:	0018      	movs	r0, r3
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	46c0      	nop			; (mov r8, r8)
 8003824:	40021000 	.word	0x40021000
 8003828:	0800677c 	.word	0x0800677c

0800382c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b086      	sub	sp, #24
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003834:	2300      	movs	r3, #0
 8003836:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003838:	2300      	movs	r3, #0
 800383a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	2380      	movs	r3, #128	; 0x80
 8003842:	025b      	lsls	r3, r3, #9
 8003844:	4013      	ands	r3, r2
 8003846:	d100      	bne.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003848:	e08e      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800384a:	2017      	movs	r0, #23
 800384c:	183b      	adds	r3, r7, r0
 800384e:	2200      	movs	r2, #0
 8003850:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003852:	4b5f      	ldr	r3, [pc, #380]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003854:	69da      	ldr	r2, [r3, #28]
 8003856:	2380      	movs	r3, #128	; 0x80
 8003858:	055b      	lsls	r3, r3, #21
 800385a:	4013      	ands	r3, r2
 800385c:	d110      	bne.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800385e:	4b5c      	ldr	r3, [pc, #368]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003860:	69da      	ldr	r2, [r3, #28]
 8003862:	4b5b      	ldr	r3, [pc, #364]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003864:	2180      	movs	r1, #128	; 0x80
 8003866:	0549      	lsls	r1, r1, #21
 8003868:	430a      	orrs	r2, r1
 800386a:	61da      	str	r2, [r3, #28]
 800386c:	4b58      	ldr	r3, [pc, #352]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800386e:	69da      	ldr	r2, [r3, #28]
 8003870:	2380      	movs	r3, #128	; 0x80
 8003872:	055b      	lsls	r3, r3, #21
 8003874:	4013      	ands	r3, r2
 8003876:	60bb      	str	r3, [r7, #8]
 8003878:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800387a:	183b      	adds	r3, r7, r0
 800387c:	2201      	movs	r2, #1
 800387e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003880:	4b54      	ldr	r3, [pc, #336]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	2380      	movs	r3, #128	; 0x80
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	4013      	ands	r3, r2
 800388a:	d11a      	bne.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800388c:	4b51      	ldr	r3, [pc, #324]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	4b50      	ldr	r3, [pc, #320]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003892:	2180      	movs	r1, #128	; 0x80
 8003894:	0049      	lsls	r1, r1, #1
 8003896:	430a      	orrs	r2, r1
 8003898:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800389a:	f7fe f879 	bl	8001990 <HAL_GetTick>
 800389e:	0003      	movs	r3, r0
 80038a0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038a2:	e008      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038a4:	f7fe f874 	bl	8001990 <HAL_GetTick>
 80038a8:	0002      	movs	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b64      	cmp	r3, #100	; 0x64
 80038b0:	d901      	bls.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e087      	b.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b6:	4b47      	ldr	r3, [pc, #284]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	2380      	movs	r3, #128	; 0x80
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	4013      	ands	r3, r2
 80038c0:	d0f0      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038c2:	4b43      	ldr	r3, [pc, #268]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80038c4:	6a1a      	ldr	r2, [r3, #32]
 80038c6:	23c0      	movs	r3, #192	; 0xc0
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	4013      	ands	r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d034      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685a      	ldr	r2, [r3, #4]
 80038d8:	23c0      	movs	r3, #192	; 0xc0
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4013      	ands	r3, r2
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d02c      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038e4:	4b3a      	ldr	r3, [pc, #232]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	4a3b      	ldr	r2, [pc, #236]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038ea:	4013      	ands	r3, r2
 80038ec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038ee:	4b38      	ldr	r3, [pc, #224]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80038f0:	6a1a      	ldr	r2, [r3, #32]
 80038f2:	4b37      	ldr	r3, [pc, #220]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80038f4:	2180      	movs	r1, #128	; 0x80
 80038f6:	0249      	lsls	r1, r1, #9
 80038f8:	430a      	orrs	r2, r1
 80038fa:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038fc:	4b34      	ldr	r3, [pc, #208]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80038fe:	6a1a      	ldr	r2, [r3, #32]
 8003900:	4b33      	ldr	r3, [pc, #204]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003902:	4936      	ldr	r1, [pc, #216]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003904:	400a      	ands	r2, r1
 8003906:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003908:	4b31      	ldr	r3, [pc, #196]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2201      	movs	r2, #1
 8003912:	4013      	ands	r3, r2
 8003914:	d013      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003916:	f7fe f83b 	bl	8001990 <HAL_GetTick>
 800391a:	0003      	movs	r3, r0
 800391c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800391e:	e009      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003920:	f7fe f836 	bl	8001990 <HAL_GetTick>
 8003924:	0002      	movs	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	4a2d      	ldr	r2, [pc, #180]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d901      	bls.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e048      	b.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003934:	4b26      	ldr	r3, [pc, #152]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003936:	6a1b      	ldr	r3, [r3, #32]
 8003938:	2202      	movs	r2, #2
 800393a:	4013      	ands	r3, r2
 800393c:	d0f0      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800393e:	4b24      	ldr	r3, [pc, #144]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	4a25      	ldr	r2, [pc, #148]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003944:	4013      	ands	r3, r2
 8003946:	0019      	movs	r1, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	4b20      	ldr	r3, [pc, #128]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800394e:	430a      	orrs	r2, r1
 8003950:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003952:	2317      	movs	r3, #23
 8003954:	18fb      	adds	r3, r7, r3
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d105      	bne.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800395c:	4b1c      	ldr	r3, [pc, #112]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800395e:	69da      	ldr	r2, [r3, #28]
 8003960:	4b1b      	ldr	r3, [pc, #108]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003962:	4920      	ldr	r1, [pc, #128]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003964:	400a      	ands	r2, r1
 8003966:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2201      	movs	r2, #1
 800396e:	4013      	ands	r3, r2
 8003970:	d009      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003972:	4b17      	ldr	r3, [pc, #92]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003976:	2203      	movs	r2, #3
 8003978:	4393      	bics	r3, r2
 800397a:	0019      	movs	r1, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	4b13      	ldr	r3, [pc, #76]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003982:	430a      	orrs	r2, r1
 8003984:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2220      	movs	r2, #32
 800398c:	4013      	ands	r3, r2
 800398e:	d009      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003990:	4b0f      	ldr	r3, [pc, #60]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003994:	2210      	movs	r2, #16
 8003996:	4393      	bics	r3, r2
 8003998:	0019      	movs	r1, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68da      	ldr	r2, [r3, #12]
 800399e:	4b0c      	ldr	r3, [pc, #48]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80039a0:	430a      	orrs	r2, r1
 80039a2:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	2380      	movs	r3, #128	; 0x80
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	4013      	ands	r3, r2
 80039ae:	d009      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80039b0:	4b07      	ldr	r3, [pc, #28]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80039b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b4:	2240      	movs	r2, #64	; 0x40
 80039b6:	4393      	bics	r3, r2
 80039b8:	0019      	movs	r1, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	691a      	ldr	r2, [r3, #16]
 80039be:	4b04      	ldr	r3, [pc, #16]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80039c0:	430a      	orrs	r2, r1
 80039c2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	0018      	movs	r0, r3
 80039c8:	46bd      	mov	sp, r7
 80039ca:	b006      	add	sp, #24
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	46c0      	nop			; (mov r8, r8)
 80039d0:	40021000 	.word	0x40021000
 80039d4:	40007000 	.word	0x40007000
 80039d8:	fffffcff 	.word	0xfffffcff
 80039dc:	fffeffff 	.word	0xfffeffff
 80039e0:	00001388 	.word	0x00001388
 80039e4:	efffffff 	.word	0xefffffff

080039e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e0a8      	b.n	8003b4c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d109      	bne.n	8003a16 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	2382      	movs	r3, #130	; 0x82
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d009      	beq.n	8003a22 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	61da      	str	r2, [r3, #28]
 8003a14:	e005      	b.n	8003a22 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	225d      	movs	r2, #93	; 0x5d
 8003a2c:	5c9b      	ldrb	r3, [r3, r2]
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d107      	bne.n	8003a44 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	225c      	movs	r2, #92	; 0x5c
 8003a38:	2100      	movs	r1, #0
 8003a3a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	0018      	movs	r0, r3
 8003a40:	f7fd fcfa 	bl	8001438 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	225d      	movs	r2, #93	; 0x5d
 8003a48:	2102      	movs	r1, #2
 8003a4a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2140      	movs	r1, #64	; 0x40
 8003a58:	438a      	bics	r2, r1
 8003a5a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	68da      	ldr	r2, [r3, #12]
 8003a60:	23e0      	movs	r3, #224	; 0xe0
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d902      	bls.n	8003a6e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	e002      	b.n	8003a74 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a6e:	2380      	movs	r3, #128	; 0x80
 8003a70:	015b      	lsls	r3, r3, #5
 8003a72:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	68da      	ldr	r2, [r3, #12]
 8003a78:	23f0      	movs	r3, #240	; 0xf0
 8003a7a:	011b      	lsls	r3, r3, #4
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d008      	beq.n	8003a92 <HAL_SPI_Init+0xaa>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68da      	ldr	r2, [r3, #12]
 8003a84:	23e0      	movs	r3, #224	; 0xe0
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d002      	beq.n	8003a92 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685a      	ldr	r2, [r3, #4]
 8003a96:	2382      	movs	r3, #130	; 0x82
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	401a      	ands	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6899      	ldr	r1, [r3, #8]
 8003aa0:	2384      	movs	r3, #132	; 0x84
 8003aa2:	021b      	lsls	r3, r3, #8
 8003aa4:	400b      	ands	r3, r1
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	2102      	movs	r1, #2
 8003aae:	400b      	ands	r3, r1
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	400b      	ands	r3, r1
 8003aba:	431a      	orrs	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6999      	ldr	r1, [r3, #24]
 8003ac0:	2380      	movs	r3, #128	; 0x80
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	400b      	ands	r3, r1
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	69db      	ldr	r3, [r3, #28]
 8003acc:	2138      	movs	r1, #56	; 0x38
 8003ace:	400b      	ands	r3, r1
 8003ad0:	431a      	orrs	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	2180      	movs	r1, #128	; 0x80
 8003ad8:	400b      	ands	r3, r1
 8003ada:	431a      	orrs	r2, r3
 8003adc:	0011      	movs	r1, r2
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ae2:	2380      	movs	r3, #128	; 0x80
 8003ae4:	019b      	lsls	r3, r3, #6
 8003ae6:	401a      	ands	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	0c1b      	lsrs	r3, r3, #16
 8003af6:	2204      	movs	r2, #4
 8003af8:	401a      	ands	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afe:	2110      	movs	r1, #16
 8003b00:	400b      	ands	r3, r1
 8003b02:	431a      	orrs	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b08:	2108      	movs	r1, #8
 8003b0a:	400b      	ands	r3, r1
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	68d9      	ldr	r1, [r3, #12]
 8003b12:	23f0      	movs	r3, #240	; 0xf0
 8003b14:	011b      	lsls	r3, r3, #4
 8003b16:	400b      	ands	r3, r1
 8003b18:	431a      	orrs	r2, r3
 8003b1a:	0011      	movs	r1, r2
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	2380      	movs	r3, #128	; 0x80
 8003b20:	015b      	lsls	r3, r3, #5
 8003b22:	401a      	ands	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	69da      	ldr	r2, [r3, #28]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4907      	ldr	r1, [pc, #28]	; (8003b54 <HAL_SPI_Init+0x16c>)
 8003b38:	400a      	ands	r2, r1
 8003b3a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	225d      	movs	r2, #93	; 0x5d
 8003b46:	2101      	movs	r1, #1
 8003b48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	0018      	movs	r0, r3
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	b004      	add	sp, #16
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	fffff7ff 	.word	0xfffff7ff

08003b58 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b088      	sub	sp, #32
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	603b      	str	r3, [r7, #0]
 8003b64:	1dbb      	adds	r3, r7, #6
 8003b66:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b68:	231f      	movs	r3, #31
 8003b6a:	18fb      	adds	r3, r7, r3
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	225c      	movs	r2, #92	; 0x5c
 8003b74:	5c9b      	ldrb	r3, [r3, r2]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d101      	bne.n	8003b7e <HAL_SPI_Transmit+0x26>
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	e140      	b.n	8003e00 <HAL_SPI_Transmit+0x2a8>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	225c      	movs	r2, #92	; 0x5c
 8003b82:	2101      	movs	r1, #1
 8003b84:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b86:	f7fd ff03 	bl	8001990 <HAL_GetTick>
 8003b8a:	0003      	movs	r3, r0
 8003b8c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003b8e:	2316      	movs	r3, #22
 8003b90:	18fb      	adds	r3, r7, r3
 8003b92:	1dba      	adds	r2, r7, #6
 8003b94:	8812      	ldrh	r2, [r2, #0]
 8003b96:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	225d      	movs	r2, #93	; 0x5d
 8003b9c:	5c9b      	ldrb	r3, [r3, r2]
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d004      	beq.n	8003bae <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003ba4:	231f      	movs	r3, #31
 8003ba6:	18fb      	adds	r3, r7, r3
 8003ba8:	2202      	movs	r2, #2
 8003baa:	701a      	strb	r2, [r3, #0]
    goto error;
 8003bac:	e11d      	b.n	8003dea <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d003      	beq.n	8003bbc <HAL_SPI_Transmit+0x64>
 8003bb4:	1dbb      	adds	r3, r7, #6
 8003bb6:	881b      	ldrh	r3, [r3, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d104      	bne.n	8003bc6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003bbc:	231f      	movs	r3, #31
 8003bbe:	18fb      	adds	r3, r7, r3
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	701a      	strb	r2, [r3, #0]
    goto error;
 8003bc4:	e111      	b.n	8003dea <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	225d      	movs	r2, #93	; 0x5d
 8003bca:	2103      	movs	r1, #3
 8003bcc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	1dba      	adds	r2, r7, #6
 8003bde:	8812      	ldrh	r2, [r2, #0]
 8003be0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	1dba      	adds	r2, r7, #6
 8003be6:	8812      	ldrh	r2, [r2, #0]
 8003be8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2244      	movs	r2, #68	; 0x44
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2246      	movs	r2, #70	; 0x46
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	689a      	ldr	r2, [r3, #8]
 8003c10:	2380      	movs	r3, #128	; 0x80
 8003c12:	021b      	lsls	r3, r3, #8
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d110      	bne.n	8003c3a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2140      	movs	r1, #64	; 0x40
 8003c24:	438a      	bics	r2, r1
 8003c26:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2180      	movs	r1, #128	; 0x80
 8003c34:	01c9      	lsls	r1, r1, #7
 8003c36:	430a      	orrs	r2, r1
 8003c38:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2240      	movs	r2, #64	; 0x40
 8003c42:	4013      	ands	r3, r2
 8003c44:	2b40      	cmp	r3, #64	; 0x40
 8003c46:	d007      	beq.n	8003c58 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2140      	movs	r1, #64	; 0x40
 8003c54:	430a      	orrs	r2, r1
 8003c56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	68da      	ldr	r2, [r3, #12]
 8003c5c:	23e0      	movs	r3, #224	; 0xe0
 8003c5e:	00db      	lsls	r3, r3, #3
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d94e      	bls.n	8003d02 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d004      	beq.n	8003c76 <HAL_SPI_Transmit+0x11e>
 8003c6c:	2316      	movs	r3, #22
 8003c6e:	18fb      	adds	r3, r7, r3
 8003c70:	881b      	ldrh	r3, [r3, #0]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d13f      	bne.n	8003cf6 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7a:	881a      	ldrh	r2, [r3, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c86:	1c9a      	adds	r2, r3, #2
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	3b01      	subs	r3, #1
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003c9a:	e02c      	b.n	8003cf6 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d112      	bne.n	8003cd0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cae:	881a      	ldrh	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cba:	1c9a      	adds	r2, r3, #2
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cce:	e012      	b.n	8003cf6 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cd0:	f7fd fe5e 	bl	8001990 <HAL_GetTick>
 8003cd4:	0002      	movs	r2, r0
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d802      	bhi.n	8003ce6 <HAL_SPI_Transmit+0x18e>
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	d102      	bne.n	8003cec <HAL_SPI_Transmit+0x194>
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d104      	bne.n	8003cf6 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8003cec:	231f      	movs	r3, #31
 8003cee:	18fb      	adds	r3, r7, r3
 8003cf0:	2203      	movs	r2, #3
 8003cf2:	701a      	strb	r2, [r3, #0]
          goto error;
 8003cf4:	e079      	b.n	8003dea <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1cd      	bne.n	8003c9c <HAL_SPI_Transmit+0x144>
 8003d00:	e04f      	b.n	8003da2 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d004      	beq.n	8003d14 <HAL_SPI_Transmit+0x1bc>
 8003d0a:	2316      	movs	r3, #22
 8003d0c:	18fb      	adds	r3, r7, r3
 8003d0e:	881b      	ldrh	r3, [r3, #0]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d141      	bne.n	8003d98 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	330c      	adds	r3, #12
 8003d1e:	7812      	ldrb	r2, [r2, #0]
 8003d20:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d26:	1c5a      	adds	r2, r3, #1
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	3b01      	subs	r3, #1
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8003d3a:	e02d      	b.n	8003d98 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	2202      	movs	r2, #2
 8003d44:	4013      	ands	r3, r2
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d113      	bne.n	8003d72 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	330c      	adds	r3, #12
 8003d54:	7812      	ldrb	r2, [r2, #0]
 8003d56:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5c:	1c5a      	adds	r2, r3, #1
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d70:	e012      	b.n	8003d98 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d72:	f7fd fe0d 	bl	8001990 <HAL_GetTick>
 8003d76:	0002      	movs	r2, r0
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d802      	bhi.n	8003d88 <HAL_SPI_Transmit+0x230>
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	3301      	adds	r3, #1
 8003d86:	d102      	bne.n	8003d8e <HAL_SPI_Transmit+0x236>
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d104      	bne.n	8003d98 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8003d8e:	231f      	movs	r3, #31
 8003d90:	18fb      	adds	r3, r7, r3
 8003d92:	2203      	movs	r2, #3
 8003d94:	701a      	strb	r2, [r3, #0]
          goto error;
 8003d96:	e028      	b.n	8003dea <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1cc      	bne.n	8003d3c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	6839      	ldr	r1, [r7, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	0018      	movs	r0, r3
 8003daa:	f000 f95d 	bl	8004068 <SPI_EndRxTxTransaction>
 8003dae:	1e03      	subs	r3, r0, #0
 8003db0:	d002      	beq.n	8003db8 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2220      	movs	r2, #32
 8003db6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10a      	bne.n	8003dd6 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	613b      	str	r3, [r7, #16]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	613b      	str	r3, [r7, #16]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	613b      	str	r3, [r7, #16]
 8003dd4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d004      	beq.n	8003de8 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8003dde:	231f      	movs	r3, #31
 8003de0:	18fb      	adds	r3, r7, r3
 8003de2:	2201      	movs	r2, #1
 8003de4:	701a      	strb	r2, [r3, #0]
 8003de6:	e000      	b.n	8003dea <HAL_SPI_Transmit+0x292>
  }

error:
 8003de8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	225d      	movs	r2, #93	; 0x5d
 8003dee:	2101      	movs	r1, #1
 8003df0:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	225c      	movs	r2, #92	; 0x5c
 8003df6:	2100      	movs	r1, #0
 8003df8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003dfa:	231f      	movs	r3, #31
 8003dfc:	18fb      	adds	r3, r7, r3
 8003dfe:	781b      	ldrb	r3, [r3, #0]
}
 8003e00:	0018      	movs	r0, r3
 8003e02:	46bd      	mov	sp, r7
 8003e04:	b008      	add	sp, #32
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b088      	sub	sp, #32
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	603b      	str	r3, [r7, #0]
 8003e14:	1dfb      	adds	r3, r7, #7
 8003e16:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e18:	f7fd fdba 	bl	8001990 <HAL_GetTick>
 8003e1c:	0002      	movs	r2, r0
 8003e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e20:	1a9b      	subs	r3, r3, r2
 8003e22:	683a      	ldr	r2, [r7, #0]
 8003e24:	18d3      	adds	r3, r2, r3
 8003e26:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e28:	f7fd fdb2 	bl	8001990 <HAL_GetTick>
 8003e2c:	0003      	movs	r3, r0
 8003e2e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e30:	4b3a      	ldr	r3, [pc, #232]	; (8003f1c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	015b      	lsls	r3, r3, #5
 8003e36:	0d1b      	lsrs	r3, r3, #20
 8003e38:	69fa      	ldr	r2, [r7, #28]
 8003e3a:	4353      	muls	r3, r2
 8003e3c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e3e:	e058      	b.n	8003ef2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	3301      	adds	r3, #1
 8003e44:	d055      	beq.n	8003ef2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e46:	f7fd fda3 	bl	8001990 <HAL_GetTick>
 8003e4a:	0002      	movs	r2, r0
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	69fa      	ldr	r2, [r7, #28]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d902      	bls.n	8003e5c <SPI_WaitFlagStateUntilTimeout+0x54>
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d142      	bne.n	8003ee2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	21e0      	movs	r1, #224	; 0xe0
 8003e68:	438a      	bics	r2, r1
 8003e6a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	2382      	movs	r3, #130	; 0x82
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d113      	bne.n	8003ea0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	689a      	ldr	r2, [r3, #8]
 8003e7c:	2380      	movs	r3, #128	; 0x80
 8003e7e:	021b      	lsls	r3, r3, #8
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d005      	beq.n	8003e90 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	2380      	movs	r3, #128	; 0x80
 8003e8a:	00db      	lsls	r3, r3, #3
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d107      	bne.n	8003ea0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2140      	movs	r1, #64	; 0x40
 8003e9c:	438a      	bics	r2, r1
 8003e9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ea4:	2380      	movs	r3, #128	; 0x80
 8003ea6:	019b      	lsls	r3, r3, #6
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d110      	bne.n	8003ece <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	491a      	ldr	r1, [pc, #104]	; (8003f20 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003eb8:	400a      	ands	r2, r1
 8003eba:	601a      	str	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2180      	movs	r1, #128	; 0x80
 8003ec8:	0189      	lsls	r1, r1, #6
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	225d      	movs	r2, #93	; 0x5d
 8003ed2:	2101      	movs	r1, #1
 8003ed4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	225c      	movs	r2, #92	; 0x5c
 8003eda:	2100      	movs	r1, #0
 8003edc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e017      	b.n	8003f12 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d101      	bne.n	8003eec <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	68ba      	ldr	r2, [r7, #8]
 8003efa:	4013      	ands	r3, r2
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	425a      	negs	r2, r3
 8003f02:	4153      	adcs	r3, r2
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	001a      	movs	r2, r3
 8003f08:	1dfb      	adds	r3, r7, #7
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d197      	bne.n	8003e40 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	0018      	movs	r0, r3
 8003f14:	46bd      	mov	sp, r7
 8003f16:	b008      	add	sp, #32
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	46c0      	nop			; (mov r8, r8)
 8003f1c:	2000001c 	.word	0x2000001c
 8003f20:	ffffdfff 	.word	0xffffdfff

08003f24 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b08a      	sub	sp, #40	; 0x28
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
 8003f30:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003f32:	2317      	movs	r3, #23
 8003f34:	18fb      	adds	r3, r7, r3
 8003f36:	2200      	movs	r2, #0
 8003f38:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003f3a:	f7fd fd29 	bl	8001990 <HAL_GetTick>
 8003f3e:	0002      	movs	r2, r0
 8003f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f42:	1a9b      	subs	r3, r3, r2
 8003f44:	683a      	ldr	r2, [r7, #0]
 8003f46:	18d3      	adds	r3, r2, r3
 8003f48:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003f4a:	f7fd fd21 	bl	8001990 <HAL_GetTick>
 8003f4e:	0003      	movs	r3, r0
 8003f50:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	330c      	adds	r3, #12
 8003f58:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003f5a:	4b41      	ldr	r3, [pc, #260]	; (8004060 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	0013      	movs	r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	189b      	adds	r3, r3, r2
 8003f64:	00da      	lsls	r2, r3, #3
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	0d1b      	lsrs	r3, r3, #20
 8003f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f6c:	4353      	muls	r3, r2
 8003f6e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003f70:	e068      	b.n	8004044 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003f72:	68ba      	ldr	r2, [r7, #8]
 8003f74:	23c0      	movs	r3, #192	; 0xc0
 8003f76:	00db      	lsls	r3, r3, #3
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d10a      	bne.n	8003f92 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d107      	bne.n	8003f92 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	b2da      	uxtb	r2, r3
 8003f88:	2117      	movs	r1, #23
 8003f8a:	187b      	adds	r3, r7, r1
 8003f8c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003f8e:	187b      	adds	r3, r7, r1
 8003f90:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	3301      	adds	r3, #1
 8003f96:	d055      	beq.n	8004044 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f98:	f7fd fcfa 	bl	8001990 <HAL_GetTick>
 8003f9c:	0002      	movs	r2, r0
 8003f9e:	6a3b      	ldr	r3, [r7, #32]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d902      	bls.n	8003fae <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d142      	bne.n	8004034 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	685a      	ldr	r2, [r3, #4]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	21e0      	movs	r1, #224	; 0xe0
 8003fba:	438a      	bics	r2, r1
 8003fbc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	685a      	ldr	r2, [r3, #4]
 8003fc2:	2382      	movs	r3, #130	; 0x82
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d113      	bne.n	8003ff2 <SPI_WaitFifoStateUntilTimeout+0xce>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	689a      	ldr	r2, [r3, #8]
 8003fce:	2380      	movs	r3, #128	; 0x80
 8003fd0:	021b      	lsls	r3, r3, #8
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d005      	beq.n	8003fe2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	689a      	ldr	r2, [r3, #8]
 8003fda:	2380      	movs	r3, #128	; 0x80
 8003fdc:	00db      	lsls	r3, r3, #3
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d107      	bne.n	8003ff2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2140      	movs	r1, #64	; 0x40
 8003fee:	438a      	bics	r2, r1
 8003ff0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ff6:	2380      	movs	r3, #128	; 0x80
 8003ff8:	019b      	lsls	r3, r3, #6
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d110      	bne.n	8004020 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4916      	ldr	r1, [pc, #88]	; (8004064 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800400a:	400a      	ands	r2, r1
 800400c:	601a      	str	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2180      	movs	r1, #128	; 0x80
 800401a:	0189      	lsls	r1, r1, #6
 800401c:	430a      	orrs	r2, r1
 800401e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	225d      	movs	r2, #93	; 0x5d
 8004024:	2101      	movs	r1, #1
 8004026:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	225c      	movs	r2, #92	; 0x5c
 800402c:	2100      	movs	r1, #0
 800402e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e010      	b.n	8004056 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800403a:	2300      	movs	r3, #0
 800403c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	3b01      	subs	r3, #1
 8004042:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	4013      	ands	r3, r2
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	429a      	cmp	r2, r3
 8004052:	d18e      	bne.n	8003f72 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	0018      	movs	r0, r3
 8004058:	46bd      	mov	sp, r7
 800405a:	b00a      	add	sp, #40	; 0x28
 800405c:	bd80      	pop	{r7, pc}
 800405e:	46c0      	nop			; (mov r8, r8)
 8004060:	2000001c 	.word	0x2000001c
 8004064:	ffffdfff 	.word	0xffffdfff

08004068 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af02      	add	r7, sp, #8
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004074:	68ba      	ldr	r2, [r7, #8]
 8004076:	23c0      	movs	r3, #192	; 0xc0
 8004078:	0159      	lsls	r1, r3, #5
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	0013      	movs	r3, r2
 8004082:	2200      	movs	r2, #0
 8004084:	f7ff ff4e 	bl	8003f24 <SPI_WaitFifoStateUntilTimeout>
 8004088:	1e03      	subs	r3, r0, #0
 800408a:	d007      	beq.n	800409c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004090:	2220      	movs	r2, #32
 8004092:	431a      	orrs	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e027      	b.n	80040ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800409c:	68ba      	ldr	r2, [r7, #8]
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	9300      	str	r3, [sp, #0]
 80040a4:	0013      	movs	r3, r2
 80040a6:	2200      	movs	r2, #0
 80040a8:	2180      	movs	r1, #128	; 0x80
 80040aa:	f7ff fead 	bl	8003e08 <SPI_WaitFlagStateUntilTimeout>
 80040ae:	1e03      	subs	r3, r0, #0
 80040b0:	d007      	beq.n	80040c2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040b6:	2220      	movs	r2, #32
 80040b8:	431a      	orrs	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e014      	b.n	80040ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	23c0      	movs	r3, #192	; 0xc0
 80040c6:	00d9      	lsls	r1, r3, #3
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	9300      	str	r3, [sp, #0]
 80040ce:	0013      	movs	r3, r2
 80040d0:	2200      	movs	r2, #0
 80040d2:	f7ff ff27 	bl	8003f24 <SPI_WaitFifoStateUntilTimeout>
 80040d6:	1e03      	subs	r3, r0, #0
 80040d8:	d007      	beq.n	80040ea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040de:	2220      	movs	r2, #32
 80040e0:	431a      	orrs	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e000      	b.n	80040ec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	0018      	movs	r0, r3
 80040ee:	46bd      	mov	sp, r7
 80040f0:	b004      	add	sp, #16
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e042      	b.n	800418c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	223d      	movs	r2, #61	; 0x3d
 800410a:	5c9b      	ldrb	r3, [r3, r2]
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d107      	bne.n	8004122 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	223c      	movs	r2, #60	; 0x3c
 8004116:	2100      	movs	r1, #0
 8004118:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	0018      	movs	r0, r3
 800411e:	f7fd fa15 	bl	800154c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	223d      	movs	r2, #61	; 0x3d
 8004126:	2102      	movs	r1, #2
 8004128:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	3304      	adds	r3, #4
 8004132:	0019      	movs	r1, r3
 8004134:	0010      	movs	r0, r2
 8004136:	f000 fbe7 	bl	8004908 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2246      	movs	r2, #70	; 0x46
 800413e:	2101      	movs	r1, #1
 8004140:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	223e      	movs	r2, #62	; 0x3e
 8004146:	2101      	movs	r1, #1
 8004148:	5499      	strb	r1, [r3, r2]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	223f      	movs	r2, #63	; 0x3f
 800414e:	2101      	movs	r1, #1
 8004150:	5499      	strb	r1, [r3, r2]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2240      	movs	r2, #64	; 0x40
 8004156:	2101      	movs	r1, #1
 8004158:	5499      	strb	r1, [r3, r2]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2241      	movs	r2, #65	; 0x41
 800415e:	2101      	movs	r1, #1
 8004160:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2242      	movs	r2, #66	; 0x42
 8004166:	2101      	movs	r1, #1
 8004168:	5499      	strb	r1, [r3, r2]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2243      	movs	r2, #67	; 0x43
 800416e:	2101      	movs	r1, #1
 8004170:	5499      	strb	r1, [r3, r2]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2244      	movs	r2, #68	; 0x44
 8004176:	2101      	movs	r1, #1
 8004178:	5499      	strb	r1, [r3, r2]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2245      	movs	r2, #69	; 0x45
 800417e:	2101      	movs	r1, #1
 8004180:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	223d      	movs	r2, #61	; 0x3d
 8004186:	2101      	movs	r1, #1
 8004188:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	0018      	movs	r0, r3
 800418e:	46bd      	mov	sp, r7
 8004190:	b002      	add	sp, #8
 8004192:	bd80      	pop	{r7, pc}

08004194 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e042      	b.n	800422c <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	223d      	movs	r2, #61	; 0x3d
 80041aa:	5c9b      	ldrb	r3, [r3, r2]
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d107      	bne.n	80041c2 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	223c      	movs	r2, #60	; 0x3c
 80041b6:	2100      	movs	r1, #0
 80041b8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	0018      	movs	r0, r3
 80041be:	f000 f839 	bl	8004234 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	223d      	movs	r2, #61	; 0x3d
 80041c6:	2102      	movs	r1, #2
 80041c8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	3304      	adds	r3, #4
 80041d2:	0019      	movs	r1, r3
 80041d4:	0010      	movs	r0, r2
 80041d6:	f000 fb97 	bl	8004908 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2246      	movs	r2, #70	; 0x46
 80041de:	2101      	movs	r1, #1
 80041e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	223e      	movs	r2, #62	; 0x3e
 80041e6:	2101      	movs	r1, #1
 80041e8:	5499      	strb	r1, [r3, r2]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	223f      	movs	r2, #63	; 0x3f
 80041ee:	2101      	movs	r1, #1
 80041f0:	5499      	strb	r1, [r3, r2]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2240      	movs	r2, #64	; 0x40
 80041f6:	2101      	movs	r1, #1
 80041f8:	5499      	strb	r1, [r3, r2]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2241      	movs	r2, #65	; 0x41
 80041fe:	2101      	movs	r1, #1
 8004200:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2242      	movs	r2, #66	; 0x42
 8004206:	2101      	movs	r1, #1
 8004208:	5499      	strb	r1, [r3, r2]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2243      	movs	r2, #67	; 0x43
 800420e:	2101      	movs	r1, #1
 8004210:	5499      	strb	r1, [r3, r2]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2244      	movs	r2, #68	; 0x44
 8004216:	2101      	movs	r1, #1
 8004218:	5499      	strb	r1, [r3, r2]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2245      	movs	r2, #69	; 0x45
 800421e:	2101      	movs	r1, #1
 8004220:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	223d      	movs	r2, #61	; 0x3d
 8004226:	2101      	movs	r1, #1
 8004228:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	0018      	movs	r0, r3
 800422e:	46bd      	mov	sp, r7
 8004230:	b002      	add	sp, #8
 8004232:	bd80      	pop	{r7, pc}

08004234 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800423c:	46c0      	nop			; (mov r8, r8)
 800423e:	46bd      	mov	sp, r7
 8004240:	b002      	add	sp, #8
 8004242:	bd80      	pop	{r7, pc}

08004244 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800424e:	230f      	movs	r3, #15
 8004250:	18fb      	adds	r3, r7, r3
 8004252:	2200      	movs	r2, #0
 8004254:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d108      	bne.n	800426e <HAL_TIM_OC_Start_IT+0x2a>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	223e      	movs	r2, #62	; 0x3e
 8004260:	5c9b      	ldrb	r3, [r3, r2]
 8004262:	b2db      	uxtb	r3, r3
 8004264:	3b01      	subs	r3, #1
 8004266:	1e5a      	subs	r2, r3, #1
 8004268:	4193      	sbcs	r3, r2
 800426a:	b2db      	uxtb	r3, r3
 800426c:	e01f      	b.n	80042ae <HAL_TIM_OC_Start_IT+0x6a>
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	2b04      	cmp	r3, #4
 8004272:	d108      	bne.n	8004286 <HAL_TIM_OC_Start_IT+0x42>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	223f      	movs	r2, #63	; 0x3f
 8004278:	5c9b      	ldrb	r3, [r3, r2]
 800427a:	b2db      	uxtb	r3, r3
 800427c:	3b01      	subs	r3, #1
 800427e:	1e5a      	subs	r2, r3, #1
 8004280:	4193      	sbcs	r3, r2
 8004282:	b2db      	uxtb	r3, r3
 8004284:	e013      	b.n	80042ae <HAL_TIM_OC_Start_IT+0x6a>
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	2b08      	cmp	r3, #8
 800428a:	d108      	bne.n	800429e <HAL_TIM_OC_Start_IT+0x5a>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2240      	movs	r2, #64	; 0x40
 8004290:	5c9b      	ldrb	r3, [r3, r2]
 8004292:	b2db      	uxtb	r3, r3
 8004294:	3b01      	subs	r3, #1
 8004296:	1e5a      	subs	r2, r3, #1
 8004298:	4193      	sbcs	r3, r2
 800429a:	b2db      	uxtb	r3, r3
 800429c:	e007      	b.n	80042ae <HAL_TIM_OC_Start_IT+0x6a>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2241      	movs	r2, #65	; 0x41
 80042a2:	5c9b      	ldrb	r3, [r3, r2]
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	3b01      	subs	r3, #1
 80042a8:	1e5a      	subs	r2, r3, #1
 80042aa:	4193      	sbcs	r3, r2
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d001      	beq.n	80042b6 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e0b7      	b.n	8004426 <HAL_TIM_OC_Start_IT+0x1e2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d104      	bne.n	80042c6 <HAL_TIM_OC_Start_IT+0x82>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	223e      	movs	r2, #62	; 0x3e
 80042c0:	2102      	movs	r1, #2
 80042c2:	5499      	strb	r1, [r3, r2]
 80042c4:	e013      	b.n	80042ee <HAL_TIM_OC_Start_IT+0xaa>
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	2b04      	cmp	r3, #4
 80042ca:	d104      	bne.n	80042d6 <HAL_TIM_OC_Start_IT+0x92>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	223f      	movs	r2, #63	; 0x3f
 80042d0:	2102      	movs	r1, #2
 80042d2:	5499      	strb	r1, [r3, r2]
 80042d4:	e00b      	b.n	80042ee <HAL_TIM_OC_Start_IT+0xaa>
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	2b08      	cmp	r3, #8
 80042da:	d104      	bne.n	80042e6 <HAL_TIM_OC_Start_IT+0xa2>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2240      	movs	r2, #64	; 0x40
 80042e0:	2102      	movs	r1, #2
 80042e2:	5499      	strb	r1, [r3, r2]
 80042e4:	e003      	b.n	80042ee <HAL_TIM_OC_Start_IT+0xaa>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2241      	movs	r2, #65	; 0x41
 80042ea:	2102      	movs	r1, #2
 80042ec:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	2b0c      	cmp	r3, #12
 80042f2:	d02a      	beq.n	800434a <HAL_TIM_OC_Start_IT+0x106>
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	2b0c      	cmp	r3, #12
 80042f8:	d830      	bhi.n	800435c <HAL_TIM_OC_Start_IT+0x118>
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	2b08      	cmp	r3, #8
 80042fe:	d01b      	beq.n	8004338 <HAL_TIM_OC_Start_IT+0xf4>
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	2b08      	cmp	r3, #8
 8004304:	d82a      	bhi.n	800435c <HAL_TIM_OC_Start_IT+0x118>
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d003      	beq.n	8004314 <HAL_TIM_OC_Start_IT+0xd0>
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	2b04      	cmp	r3, #4
 8004310:	d009      	beq.n	8004326 <HAL_TIM_OC_Start_IT+0xe2>
 8004312:	e023      	b.n	800435c <HAL_TIM_OC_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68da      	ldr	r2, [r3, #12]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2102      	movs	r1, #2
 8004320:	430a      	orrs	r2, r1
 8004322:	60da      	str	r2, [r3, #12]
      break;
 8004324:	e01f      	b.n	8004366 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68da      	ldr	r2, [r3, #12]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2104      	movs	r1, #4
 8004332:	430a      	orrs	r2, r1
 8004334:	60da      	str	r2, [r3, #12]
      break;
 8004336:	e016      	b.n	8004366 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68da      	ldr	r2, [r3, #12]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2108      	movs	r1, #8
 8004344:	430a      	orrs	r2, r1
 8004346:	60da      	str	r2, [r3, #12]
      break;
 8004348:	e00d      	b.n	8004366 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68da      	ldr	r2, [r3, #12]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2110      	movs	r1, #16
 8004356:	430a      	orrs	r2, r1
 8004358:	60da      	str	r2, [r3, #12]
      break;
 800435a:	e004      	b.n	8004366 <HAL_TIM_OC_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 800435c:	230f      	movs	r3, #15
 800435e:	18fb      	adds	r3, r7, r3
 8004360:	2201      	movs	r2, #1
 8004362:	701a      	strb	r2, [r3, #0]
      break;
 8004364:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8004366:	230f      	movs	r3, #15
 8004368:	18fb      	adds	r3, r7, r3
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d157      	bne.n	8004420 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6839      	ldr	r1, [r7, #0]
 8004376:	2201      	movs	r2, #1
 8004378:	0018      	movs	r0, r3
 800437a:	f000 fddb 	bl	8004f34 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a2b      	ldr	r2, [pc, #172]	; (8004430 <HAL_TIM_OC_Start_IT+0x1ec>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d00e      	beq.n	80043a6 <HAL_TIM_OC_Start_IT+0x162>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a29      	ldr	r2, [pc, #164]	; (8004434 <HAL_TIM_OC_Start_IT+0x1f0>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d009      	beq.n	80043a6 <HAL_TIM_OC_Start_IT+0x162>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a28      	ldr	r2, [pc, #160]	; (8004438 <HAL_TIM_OC_Start_IT+0x1f4>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d004      	beq.n	80043a6 <HAL_TIM_OC_Start_IT+0x162>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a26      	ldr	r2, [pc, #152]	; (800443c <HAL_TIM_OC_Start_IT+0x1f8>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d101      	bne.n	80043aa <HAL_TIM_OC_Start_IT+0x166>
 80043a6:	2301      	movs	r3, #1
 80043a8:	e000      	b.n	80043ac <HAL_TIM_OC_Start_IT+0x168>
 80043aa:	2300      	movs	r3, #0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d008      	beq.n	80043c2 <HAL_TIM_OC_Start_IT+0x17e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2180      	movs	r1, #128	; 0x80
 80043bc:	0209      	lsls	r1, r1, #8
 80043be:	430a      	orrs	r2, r1
 80043c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a1a      	ldr	r2, [pc, #104]	; (8004430 <HAL_TIM_OC_Start_IT+0x1ec>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d00f      	beq.n	80043ec <HAL_TIM_OC_Start_IT+0x1a8>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	2380      	movs	r3, #128	; 0x80
 80043d2:	05db      	lsls	r3, r3, #23
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d009      	beq.n	80043ec <HAL_TIM_OC_Start_IT+0x1a8>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a18      	ldr	r2, [pc, #96]	; (8004440 <HAL_TIM_OC_Start_IT+0x1fc>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d004      	beq.n	80043ec <HAL_TIM_OC_Start_IT+0x1a8>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a13      	ldr	r2, [pc, #76]	; (8004434 <HAL_TIM_OC_Start_IT+0x1f0>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d111      	bne.n	8004410 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	2207      	movs	r2, #7
 80043f4:	4013      	ands	r3, r2
 80043f6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	2b06      	cmp	r3, #6
 80043fc:	d010      	beq.n	8004420 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2101      	movs	r1, #1
 800440a:	430a      	orrs	r2, r1
 800440c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800440e:	e007      	b.n	8004420 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2101      	movs	r1, #1
 800441c:	430a      	orrs	r2, r1
 800441e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004420:	230f      	movs	r3, #15
 8004422:	18fb      	adds	r3, r7, r3
 8004424:	781b      	ldrb	r3, [r3, #0]
}
 8004426:	0018      	movs	r0, r3
 8004428:	46bd      	mov	sp, r7
 800442a:	b004      	add	sp, #16
 800442c:	bd80      	pop	{r7, pc}
 800442e:	46c0      	nop			; (mov r8, r8)
 8004430:	40012c00 	.word	0x40012c00
 8004434:	40014000 	.word	0x40014000
 8004438:	40014400 	.word	0x40014400
 800443c:	40014800 	.word	0x40014800
 8004440:	40000400 	.word	0x40000400

08004444 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	2202      	movs	r2, #2
 8004454:	4013      	ands	r3, r2
 8004456:	2b02      	cmp	r3, #2
 8004458:	d124      	bne.n	80044a4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	2202      	movs	r2, #2
 8004462:	4013      	ands	r3, r2
 8004464:	2b02      	cmp	r3, #2
 8004466:	d11d      	bne.n	80044a4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2203      	movs	r2, #3
 800446e:	4252      	negs	r2, r2
 8004470:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2201      	movs	r2, #1
 8004476:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	2203      	movs	r2, #3
 8004480:	4013      	ands	r3, r2
 8004482:	d004      	beq.n	800448e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	0018      	movs	r0, r3
 8004488:	f000 fa26 	bl	80048d8 <HAL_TIM_IC_CaptureCallback>
 800448c:	e007      	b.n	800449e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	0018      	movs	r0, r3
 8004492:	f7fb ff5f 	bl	8000354 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	0018      	movs	r0, r3
 800449a:	f000 fa25 	bl	80048e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	2204      	movs	r2, #4
 80044ac:	4013      	ands	r3, r2
 80044ae:	2b04      	cmp	r3, #4
 80044b0:	d125      	bne.n	80044fe <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	2204      	movs	r2, #4
 80044ba:	4013      	ands	r3, r2
 80044bc:	2b04      	cmp	r3, #4
 80044be:	d11e      	bne.n	80044fe <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2205      	movs	r2, #5
 80044c6:	4252      	negs	r2, r2
 80044c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2202      	movs	r2, #2
 80044ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	699a      	ldr	r2, [r3, #24]
 80044d6:	23c0      	movs	r3, #192	; 0xc0
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	4013      	ands	r3, r2
 80044dc:	d004      	beq.n	80044e8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	0018      	movs	r0, r3
 80044e2:	f000 f9f9 	bl	80048d8 <HAL_TIM_IC_CaptureCallback>
 80044e6:	e007      	b.n	80044f8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	0018      	movs	r0, r3
 80044ec:	f7fb ff32 	bl	8000354 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	0018      	movs	r0, r3
 80044f4:	f000 f9f8 	bl	80048e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	2208      	movs	r2, #8
 8004506:	4013      	ands	r3, r2
 8004508:	2b08      	cmp	r3, #8
 800450a:	d124      	bne.n	8004556 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	2208      	movs	r2, #8
 8004514:	4013      	ands	r3, r2
 8004516:	2b08      	cmp	r3, #8
 8004518:	d11d      	bne.n	8004556 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2209      	movs	r2, #9
 8004520:	4252      	negs	r2, r2
 8004522:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2204      	movs	r2, #4
 8004528:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	69db      	ldr	r3, [r3, #28]
 8004530:	2203      	movs	r2, #3
 8004532:	4013      	ands	r3, r2
 8004534:	d004      	beq.n	8004540 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	0018      	movs	r0, r3
 800453a:	f000 f9cd 	bl	80048d8 <HAL_TIM_IC_CaptureCallback>
 800453e:	e007      	b.n	8004550 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	0018      	movs	r0, r3
 8004544:	f7fb ff06 	bl	8000354 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	0018      	movs	r0, r3
 800454c:	f000 f9cc 	bl	80048e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	2210      	movs	r2, #16
 800455e:	4013      	ands	r3, r2
 8004560:	2b10      	cmp	r3, #16
 8004562:	d125      	bne.n	80045b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	2210      	movs	r2, #16
 800456c:	4013      	ands	r3, r2
 800456e:	2b10      	cmp	r3, #16
 8004570:	d11e      	bne.n	80045b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2211      	movs	r2, #17
 8004578:	4252      	negs	r2, r2
 800457a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2208      	movs	r2, #8
 8004580:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	69da      	ldr	r2, [r3, #28]
 8004588:	23c0      	movs	r3, #192	; 0xc0
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4013      	ands	r3, r2
 800458e:	d004      	beq.n	800459a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	0018      	movs	r0, r3
 8004594:	f000 f9a0 	bl	80048d8 <HAL_TIM_IC_CaptureCallback>
 8004598:	e007      	b.n	80045aa <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	0018      	movs	r0, r3
 800459e:	f7fb fed9 	bl	8000354 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	0018      	movs	r0, r3
 80045a6:	f000 f99f 	bl	80048e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	2201      	movs	r2, #1
 80045b8:	4013      	ands	r3, r2
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d10f      	bne.n	80045de <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	2201      	movs	r2, #1
 80045c6:	4013      	ands	r3, r2
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d108      	bne.n	80045de <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2202      	movs	r2, #2
 80045d2:	4252      	negs	r2, r2
 80045d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	0018      	movs	r0, r3
 80045da:	f000 f975 	bl	80048c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	2280      	movs	r2, #128	; 0x80
 80045e6:	4013      	ands	r3, r2
 80045e8:	2b80      	cmp	r3, #128	; 0x80
 80045ea:	d10f      	bne.n	800460c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	2280      	movs	r2, #128	; 0x80
 80045f4:	4013      	ands	r3, r2
 80045f6:	2b80      	cmp	r3, #128	; 0x80
 80045f8:	d108      	bne.n	800460c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2281      	movs	r2, #129	; 0x81
 8004600:	4252      	negs	r2, r2
 8004602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	0018      	movs	r0, r3
 8004608:	f000 fd7c 	bl	8005104 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	2240      	movs	r2, #64	; 0x40
 8004614:	4013      	ands	r3, r2
 8004616:	2b40      	cmp	r3, #64	; 0x40
 8004618:	d10f      	bne.n	800463a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	2240      	movs	r2, #64	; 0x40
 8004622:	4013      	ands	r3, r2
 8004624:	2b40      	cmp	r3, #64	; 0x40
 8004626:	d108      	bne.n	800463a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2241      	movs	r2, #65	; 0x41
 800462e:	4252      	negs	r2, r2
 8004630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	0018      	movs	r0, r3
 8004636:	f000 f95f 	bl	80048f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	2220      	movs	r2, #32
 8004642:	4013      	ands	r3, r2
 8004644:	2b20      	cmp	r3, #32
 8004646:	d10f      	bne.n	8004668 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	2220      	movs	r2, #32
 8004650:	4013      	ands	r3, r2
 8004652:	2b20      	cmp	r3, #32
 8004654:	d108      	bne.n	8004668 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2221      	movs	r2, #33	; 0x21
 800465c:	4252      	negs	r2, r2
 800465e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	0018      	movs	r0, r3
 8004664:	f000 fd46 	bl	80050f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004668:	46c0      	nop			; (mov r8, r8)
 800466a:	46bd      	mov	sp, r7
 800466c:	b002      	add	sp, #8
 800466e:	bd80      	pop	{r7, pc}

08004670 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b086      	sub	sp, #24
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800467c:	2317      	movs	r3, #23
 800467e:	18fb      	adds	r3, r7, r3
 8004680:	2200      	movs	r2, #0
 8004682:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	223c      	movs	r2, #60	; 0x3c
 8004688:	5c9b      	ldrb	r3, [r3, r2]
 800468a:	2b01      	cmp	r3, #1
 800468c:	d101      	bne.n	8004692 <HAL_TIM_OC_ConfigChannel+0x22>
 800468e:	2302      	movs	r3, #2
 8004690:	e042      	b.n	8004718 <HAL_TIM_OC_ConfigChannel+0xa8>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	223c      	movs	r2, #60	; 0x3c
 8004696:	2101      	movs	r1, #1
 8004698:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b0c      	cmp	r3, #12
 800469e:	d027      	beq.n	80046f0 <HAL_TIM_OC_ConfigChannel+0x80>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b0c      	cmp	r3, #12
 80046a4:	d82c      	bhi.n	8004700 <HAL_TIM_OC_ConfigChannel+0x90>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2b08      	cmp	r3, #8
 80046aa:	d019      	beq.n	80046e0 <HAL_TIM_OC_ConfigChannel+0x70>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2b08      	cmp	r3, #8
 80046b0:	d826      	bhi.n	8004700 <HAL_TIM_OC_ConfigChannel+0x90>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d003      	beq.n	80046c0 <HAL_TIM_OC_ConfigChannel+0x50>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b04      	cmp	r3, #4
 80046bc:	d008      	beq.n	80046d0 <HAL_TIM_OC_ConfigChannel+0x60>
 80046be:	e01f      	b.n	8004700 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68ba      	ldr	r2, [r7, #8]
 80046c6:	0011      	movs	r1, r2
 80046c8:	0018      	movs	r0, r3
 80046ca:	f000 f99d 	bl	8004a08 <TIM_OC1_SetConfig>
      break;
 80046ce:	e01c      	b.n	800470a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68ba      	ldr	r2, [r7, #8]
 80046d6:	0011      	movs	r1, r2
 80046d8:	0018      	movs	r0, r3
 80046da:	f000 fa1d 	bl	8004b18 <TIM_OC2_SetConfig>
      break;
 80046de:	e014      	b.n	800470a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	0011      	movs	r1, r2
 80046e8:	0018      	movs	r0, r3
 80046ea:	f000 fa99 	bl	8004c20 <TIM_OC3_SetConfig>
      break;
 80046ee:	e00c      	b.n	800470a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68ba      	ldr	r2, [r7, #8]
 80046f6:	0011      	movs	r1, r2
 80046f8:	0018      	movs	r0, r3
 80046fa:	f000 fb17 	bl	8004d2c <TIM_OC4_SetConfig>
      break;
 80046fe:	e004      	b.n	800470a <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8004700:	2317      	movs	r3, #23
 8004702:	18fb      	adds	r3, r7, r3
 8004704:	2201      	movs	r2, #1
 8004706:	701a      	strb	r2, [r3, #0]
      break;
 8004708:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	223c      	movs	r2, #60	; 0x3c
 800470e:	2100      	movs	r1, #0
 8004710:	5499      	strb	r1, [r3, r2]

  return status;
 8004712:	2317      	movs	r3, #23
 8004714:	18fb      	adds	r3, r7, r3
 8004716:	781b      	ldrb	r3, [r3, #0]
}
 8004718:	0018      	movs	r0, r3
 800471a:	46bd      	mov	sp, r7
 800471c:	b006      	add	sp, #24
 800471e:	bd80      	pop	{r7, pc}

08004720 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800472a:	230f      	movs	r3, #15
 800472c:	18fb      	adds	r3, r7, r3
 800472e:	2200      	movs	r2, #0
 8004730:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	223c      	movs	r2, #60	; 0x3c
 8004736:	5c9b      	ldrb	r3, [r3, r2]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d101      	bne.n	8004740 <HAL_TIM_ConfigClockSource+0x20>
 800473c:	2302      	movs	r3, #2
 800473e:	e0bc      	b.n	80048ba <HAL_TIM_ConfigClockSource+0x19a>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	223c      	movs	r2, #60	; 0x3c
 8004744:	2101      	movs	r1, #1
 8004746:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	223d      	movs	r2, #61	; 0x3d
 800474c:	2102      	movs	r1, #2
 800474e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	2277      	movs	r2, #119	; 0x77
 800475c:	4393      	bics	r3, r2
 800475e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	4a58      	ldr	r2, [pc, #352]	; (80048c4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004764:	4013      	ands	r3, r2
 8004766:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2280      	movs	r2, #128	; 0x80
 8004776:	0192      	lsls	r2, r2, #6
 8004778:	4293      	cmp	r3, r2
 800477a:	d040      	beq.n	80047fe <HAL_TIM_ConfigClockSource+0xde>
 800477c:	2280      	movs	r2, #128	; 0x80
 800477e:	0192      	lsls	r2, r2, #6
 8004780:	4293      	cmp	r3, r2
 8004782:	d900      	bls.n	8004786 <HAL_TIM_ConfigClockSource+0x66>
 8004784:	e088      	b.n	8004898 <HAL_TIM_ConfigClockSource+0x178>
 8004786:	2280      	movs	r2, #128	; 0x80
 8004788:	0152      	lsls	r2, r2, #5
 800478a:	4293      	cmp	r3, r2
 800478c:	d100      	bne.n	8004790 <HAL_TIM_ConfigClockSource+0x70>
 800478e:	e088      	b.n	80048a2 <HAL_TIM_ConfigClockSource+0x182>
 8004790:	2280      	movs	r2, #128	; 0x80
 8004792:	0152      	lsls	r2, r2, #5
 8004794:	4293      	cmp	r3, r2
 8004796:	d900      	bls.n	800479a <HAL_TIM_ConfigClockSource+0x7a>
 8004798:	e07e      	b.n	8004898 <HAL_TIM_ConfigClockSource+0x178>
 800479a:	2b70      	cmp	r3, #112	; 0x70
 800479c:	d018      	beq.n	80047d0 <HAL_TIM_ConfigClockSource+0xb0>
 800479e:	d900      	bls.n	80047a2 <HAL_TIM_ConfigClockSource+0x82>
 80047a0:	e07a      	b.n	8004898 <HAL_TIM_ConfigClockSource+0x178>
 80047a2:	2b60      	cmp	r3, #96	; 0x60
 80047a4:	d04f      	beq.n	8004846 <HAL_TIM_ConfigClockSource+0x126>
 80047a6:	d900      	bls.n	80047aa <HAL_TIM_ConfigClockSource+0x8a>
 80047a8:	e076      	b.n	8004898 <HAL_TIM_ConfigClockSource+0x178>
 80047aa:	2b50      	cmp	r3, #80	; 0x50
 80047ac:	d03b      	beq.n	8004826 <HAL_TIM_ConfigClockSource+0x106>
 80047ae:	d900      	bls.n	80047b2 <HAL_TIM_ConfigClockSource+0x92>
 80047b0:	e072      	b.n	8004898 <HAL_TIM_ConfigClockSource+0x178>
 80047b2:	2b40      	cmp	r3, #64	; 0x40
 80047b4:	d057      	beq.n	8004866 <HAL_TIM_ConfigClockSource+0x146>
 80047b6:	d900      	bls.n	80047ba <HAL_TIM_ConfigClockSource+0x9a>
 80047b8:	e06e      	b.n	8004898 <HAL_TIM_ConfigClockSource+0x178>
 80047ba:	2b30      	cmp	r3, #48	; 0x30
 80047bc:	d063      	beq.n	8004886 <HAL_TIM_ConfigClockSource+0x166>
 80047be:	d86b      	bhi.n	8004898 <HAL_TIM_ConfigClockSource+0x178>
 80047c0:	2b20      	cmp	r3, #32
 80047c2:	d060      	beq.n	8004886 <HAL_TIM_ConfigClockSource+0x166>
 80047c4:	d868      	bhi.n	8004898 <HAL_TIM_ConfigClockSource+0x178>
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d05d      	beq.n	8004886 <HAL_TIM_ConfigClockSource+0x166>
 80047ca:	2b10      	cmp	r3, #16
 80047cc:	d05b      	beq.n	8004886 <HAL_TIM_ConfigClockSource+0x166>
 80047ce:	e063      	b.n	8004898 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6818      	ldr	r0, [r3, #0]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	6899      	ldr	r1, [r3, #8]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	685a      	ldr	r2, [r3, #4]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f000 fb88 	bl	8004ef4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	2277      	movs	r2, #119	; 0x77
 80047f0:	4313      	orrs	r3, r2
 80047f2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68ba      	ldr	r2, [r7, #8]
 80047fa:	609a      	str	r2, [r3, #8]
      break;
 80047fc:	e052      	b.n	80048a4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6818      	ldr	r0, [r3, #0]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	6899      	ldr	r1, [r3, #8]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	685a      	ldr	r2, [r3, #4]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	f000 fb71 	bl	8004ef4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	689a      	ldr	r2, [r3, #8]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2180      	movs	r1, #128	; 0x80
 800481e:	01c9      	lsls	r1, r1, #7
 8004820:	430a      	orrs	r2, r1
 8004822:	609a      	str	r2, [r3, #8]
      break;
 8004824:	e03e      	b.n	80048a4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6818      	ldr	r0, [r3, #0]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	6859      	ldr	r1, [r3, #4]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	001a      	movs	r2, r3
 8004834:	f000 fae4 	bl	8004e00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2150      	movs	r1, #80	; 0x50
 800483e:	0018      	movs	r0, r3
 8004840:	f000 fb3e 	bl	8004ec0 <TIM_ITRx_SetConfig>
      break;
 8004844:	e02e      	b.n	80048a4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6818      	ldr	r0, [r3, #0]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	6859      	ldr	r1, [r3, #4]
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	001a      	movs	r2, r3
 8004854:	f000 fb02 	bl	8004e5c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2160      	movs	r1, #96	; 0x60
 800485e:	0018      	movs	r0, r3
 8004860:	f000 fb2e 	bl	8004ec0 <TIM_ITRx_SetConfig>
      break;
 8004864:	e01e      	b.n	80048a4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6818      	ldr	r0, [r3, #0]
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	6859      	ldr	r1, [r3, #4]
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	001a      	movs	r2, r3
 8004874:	f000 fac4 	bl	8004e00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2140      	movs	r1, #64	; 0x40
 800487e:	0018      	movs	r0, r3
 8004880:	f000 fb1e 	bl	8004ec0 <TIM_ITRx_SetConfig>
      break;
 8004884:	e00e      	b.n	80048a4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	0019      	movs	r1, r3
 8004890:	0010      	movs	r0, r2
 8004892:	f000 fb15 	bl	8004ec0 <TIM_ITRx_SetConfig>
      break;
 8004896:	e005      	b.n	80048a4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004898:	230f      	movs	r3, #15
 800489a:	18fb      	adds	r3, r7, r3
 800489c:	2201      	movs	r2, #1
 800489e:	701a      	strb	r2, [r3, #0]
      break;
 80048a0:	e000      	b.n	80048a4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80048a2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	223d      	movs	r2, #61	; 0x3d
 80048a8:	2101      	movs	r1, #1
 80048aa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	223c      	movs	r2, #60	; 0x3c
 80048b0:	2100      	movs	r1, #0
 80048b2:	5499      	strb	r1, [r3, r2]

  return status;
 80048b4:	230f      	movs	r3, #15
 80048b6:	18fb      	adds	r3, r7, r3
 80048b8:	781b      	ldrb	r3, [r3, #0]
}
 80048ba:	0018      	movs	r0, r3
 80048bc:	46bd      	mov	sp, r7
 80048be:	b004      	add	sp, #16
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	46c0      	nop			; (mov r8, r8)
 80048c4:	ffff00ff 	.word	0xffff00ff

080048c8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80048d0:	46c0      	nop			; (mov r8, r8)
 80048d2:	46bd      	mov	sp, r7
 80048d4:	b002      	add	sp, #8
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048e0:	46c0      	nop			; (mov r8, r8)
 80048e2:	46bd      	mov	sp, r7
 80048e4:	b002      	add	sp, #8
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048f0:	46c0      	nop			; (mov r8, r8)
 80048f2:	46bd      	mov	sp, r7
 80048f4:	b002      	add	sp, #8
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004900:	46c0      	nop			; (mov r8, r8)
 8004902:	46bd      	mov	sp, r7
 8004904:	b002      	add	sp, #8
 8004906:	bd80      	pop	{r7, pc}

08004908 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a34      	ldr	r2, [pc, #208]	; (80049ec <TIM_Base_SetConfig+0xe4>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d008      	beq.n	8004932 <TIM_Base_SetConfig+0x2a>
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	2380      	movs	r3, #128	; 0x80
 8004924:	05db      	lsls	r3, r3, #23
 8004926:	429a      	cmp	r2, r3
 8004928:	d003      	beq.n	8004932 <TIM_Base_SetConfig+0x2a>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a30      	ldr	r2, [pc, #192]	; (80049f0 <TIM_Base_SetConfig+0xe8>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d108      	bne.n	8004944 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2270      	movs	r2, #112	; 0x70
 8004936:	4393      	bics	r3, r2
 8004938:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	4313      	orrs	r3, r2
 8004942:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a29      	ldr	r2, [pc, #164]	; (80049ec <TIM_Base_SetConfig+0xe4>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d018      	beq.n	800497e <TIM_Base_SetConfig+0x76>
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	2380      	movs	r3, #128	; 0x80
 8004950:	05db      	lsls	r3, r3, #23
 8004952:	429a      	cmp	r2, r3
 8004954:	d013      	beq.n	800497e <TIM_Base_SetConfig+0x76>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a25      	ldr	r2, [pc, #148]	; (80049f0 <TIM_Base_SetConfig+0xe8>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d00f      	beq.n	800497e <TIM_Base_SetConfig+0x76>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a24      	ldr	r2, [pc, #144]	; (80049f4 <TIM_Base_SetConfig+0xec>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d00b      	beq.n	800497e <TIM_Base_SetConfig+0x76>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a23      	ldr	r2, [pc, #140]	; (80049f8 <TIM_Base_SetConfig+0xf0>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d007      	beq.n	800497e <TIM_Base_SetConfig+0x76>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a22      	ldr	r2, [pc, #136]	; (80049fc <TIM_Base_SetConfig+0xf4>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d003      	beq.n	800497e <TIM_Base_SetConfig+0x76>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a21      	ldr	r2, [pc, #132]	; (8004a00 <TIM_Base_SetConfig+0xf8>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d108      	bne.n	8004990 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	4a20      	ldr	r2, [pc, #128]	; (8004a04 <TIM_Base_SetConfig+0xfc>)
 8004982:	4013      	ands	r3, r2
 8004984:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	4313      	orrs	r3, r2
 800498e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2280      	movs	r2, #128	; 0x80
 8004994:	4393      	bics	r3, r2
 8004996:	001a      	movs	r2, r3
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	695b      	ldr	r3, [r3, #20]
 800499c:	4313      	orrs	r3, r2
 800499e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	689a      	ldr	r2, [r3, #8]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a0c      	ldr	r2, [pc, #48]	; (80049ec <TIM_Base_SetConfig+0xe4>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d00b      	beq.n	80049d6 <TIM_Base_SetConfig+0xce>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a0d      	ldr	r2, [pc, #52]	; (80049f8 <TIM_Base_SetConfig+0xf0>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d007      	beq.n	80049d6 <TIM_Base_SetConfig+0xce>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a0c      	ldr	r2, [pc, #48]	; (80049fc <TIM_Base_SetConfig+0xf4>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d003      	beq.n	80049d6 <TIM_Base_SetConfig+0xce>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a0b      	ldr	r2, [pc, #44]	; (8004a00 <TIM_Base_SetConfig+0xf8>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d103      	bne.n	80049de <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	691a      	ldr	r2, [r3, #16]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2201      	movs	r2, #1
 80049e2:	615a      	str	r2, [r3, #20]
}
 80049e4:	46c0      	nop			; (mov r8, r8)
 80049e6:	46bd      	mov	sp, r7
 80049e8:	b004      	add	sp, #16
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	40012c00 	.word	0x40012c00
 80049f0:	40000400 	.word	0x40000400
 80049f4:	40002000 	.word	0x40002000
 80049f8:	40014000 	.word	0x40014000
 80049fc:	40014400 	.word	0x40014400
 8004a00:	40014800 	.word	0x40014800
 8004a04:	fffffcff 	.word	0xfffffcff

08004a08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b086      	sub	sp, #24
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a1b      	ldr	r3, [r3, #32]
 8004a16:	2201      	movs	r2, #1
 8004a18:	4393      	bics	r3, r2
 8004a1a:	001a      	movs	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a1b      	ldr	r3, [r3, #32]
 8004a24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2270      	movs	r2, #112	; 0x70
 8004a36:	4393      	bics	r3, r2
 8004a38:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2203      	movs	r2, #3
 8004a3e:	4393      	bics	r3, r2
 8004a40:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	4393      	bics	r3, r2
 8004a52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a27      	ldr	r2, [pc, #156]	; (8004b00 <TIM_OC1_SetConfig+0xf8>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d00b      	beq.n	8004a7e <TIM_OC1_SetConfig+0x76>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a26      	ldr	r2, [pc, #152]	; (8004b04 <TIM_OC1_SetConfig+0xfc>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d007      	beq.n	8004a7e <TIM_OC1_SetConfig+0x76>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a25      	ldr	r2, [pc, #148]	; (8004b08 <TIM_OC1_SetConfig+0x100>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d003      	beq.n	8004a7e <TIM_OC1_SetConfig+0x76>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a24      	ldr	r2, [pc, #144]	; (8004b0c <TIM_OC1_SetConfig+0x104>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d10c      	bne.n	8004a98 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	2208      	movs	r2, #8
 8004a82:	4393      	bics	r3, r2
 8004a84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	2204      	movs	r2, #4
 8004a94:	4393      	bics	r3, r2
 8004a96:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a19      	ldr	r2, [pc, #100]	; (8004b00 <TIM_OC1_SetConfig+0xf8>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d00b      	beq.n	8004ab8 <TIM_OC1_SetConfig+0xb0>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a18      	ldr	r2, [pc, #96]	; (8004b04 <TIM_OC1_SetConfig+0xfc>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d007      	beq.n	8004ab8 <TIM_OC1_SetConfig+0xb0>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a17      	ldr	r2, [pc, #92]	; (8004b08 <TIM_OC1_SetConfig+0x100>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d003      	beq.n	8004ab8 <TIM_OC1_SetConfig+0xb0>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a16      	ldr	r2, [pc, #88]	; (8004b0c <TIM_OC1_SetConfig+0x104>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d111      	bne.n	8004adc <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	4a15      	ldr	r2, [pc, #84]	; (8004b10 <TIM_OC1_SetConfig+0x108>)
 8004abc:	4013      	ands	r3, r2
 8004abe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	4a14      	ldr	r2, [pc, #80]	; (8004b14 <TIM_OC1_SetConfig+0x10c>)
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	695b      	ldr	r3, [r3, #20]
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	621a      	str	r2, [r3, #32]
}
 8004af6:	46c0      	nop			; (mov r8, r8)
 8004af8:	46bd      	mov	sp, r7
 8004afa:	b006      	add	sp, #24
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	46c0      	nop			; (mov r8, r8)
 8004b00:	40012c00 	.word	0x40012c00
 8004b04:	40014000 	.word	0x40014000
 8004b08:	40014400 	.word	0x40014400
 8004b0c:	40014800 	.word	0x40014800
 8004b10:	fffffeff 	.word	0xfffffeff
 8004b14:	fffffdff 	.word	0xfffffdff

08004b18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b086      	sub	sp, #24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	2210      	movs	r2, #16
 8004b28:	4393      	bics	r3, r2
 8004b2a:	001a      	movs	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a1b      	ldr	r3, [r3, #32]
 8004b34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	4a2e      	ldr	r2, [pc, #184]	; (8004c00 <TIM_OC2_SetConfig+0xe8>)
 8004b46:	4013      	ands	r3, r2
 8004b48:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	4a2d      	ldr	r2, [pc, #180]	; (8004c04 <TIM_OC2_SetConfig+0xec>)
 8004b4e:	4013      	ands	r3, r2
 8004b50:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	021b      	lsls	r3, r3, #8
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	2220      	movs	r2, #32
 8004b62:	4393      	bics	r3, r2
 8004b64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	011b      	lsls	r3, r3, #4
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a24      	ldr	r2, [pc, #144]	; (8004c08 <TIM_OC2_SetConfig+0xf0>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d10d      	bne.n	8004b96 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	2280      	movs	r2, #128	; 0x80
 8004b7e:	4393      	bics	r3, r2
 8004b80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	011b      	lsls	r3, r3, #4
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	2240      	movs	r2, #64	; 0x40
 8004b92:	4393      	bics	r3, r2
 8004b94:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a1b      	ldr	r2, [pc, #108]	; (8004c08 <TIM_OC2_SetConfig+0xf0>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d00b      	beq.n	8004bb6 <TIM_OC2_SetConfig+0x9e>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a1a      	ldr	r2, [pc, #104]	; (8004c0c <TIM_OC2_SetConfig+0xf4>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d007      	beq.n	8004bb6 <TIM_OC2_SetConfig+0x9e>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a19      	ldr	r2, [pc, #100]	; (8004c10 <TIM_OC2_SetConfig+0xf8>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d003      	beq.n	8004bb6 <TIM_OC2_SetConfig+0x9e>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a18      	ldr	r2, [pc, #96]	; (8004c14 <TIM_OC2_SetConfig+0xfc>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d113      	bne.n	8004bde <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	4a17      	ldr	r2, [pc, #92]	; (8004c18 <TIM_OC2_SetConfig+0x100>)
 8004bba:	4013      	ands	r3, r2
 8004bbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	4a16      	ldr	r2, [pc, #88]	; (8004c1c <TIM_OC2_SetConfig+0x104>)
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	693a      	ldr	r2, [r7, #16]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685a      	ldr	r2, [r3, #4]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	697a      	ldr	r2, [r7, #20]
 8004bf6:	621a      	str	r2, [r3, #32]
}
 8004bf8:	46c0      	nop			; (mov r8, r8)
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	b006      	add	sp, #24
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	ffff8fff 	.word	0xffff8fff
 8004c04:	fffffcff 	.word	0xfffffcff
 8004c08:	40012c00 	.word	0x40012c00
 8004c0c:	40014000 	.word	0x40014000
 8004c10:	40014400 	.word	0x40014400
 8004c14:	40014800 	.word	0x40014800
 8004c18:	fffffbff 	.word	0xfffffbff
 8004c1c:	fffff7ff 	.word	0xfffff7ff

08004c20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b086      	sub	sp, #24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	4a35      	ldr	r2, [pc, #212]	; (8004d04 <TIM_OC3_SetConfig+0xe4>)
 8004c30:	401a      	ands	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a1b      	ldr	r3, [r3, #32]
 8004c3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	69db      	ldr	r3, [r3, #28]
 8004c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2270      	movs	r2, #112	; 0x70
 8004c4c:	4393      	bics	r3, r2
 8004c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2203      	movs	r2, #3
 8004c54:	4393      	bics	r3, r2
 8004c56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	4a28      	ldr	r2, [pc, #160]	; (8004d08 <TIM_OC3_SetConfig+0xe8>)
 8004c66:	4013      	ands	r3, r2
 8004c68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	021b      	lsls	r3, r3, #8
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a24      	ldr	r2, [pc, #144]	; (8004d0c <TIM_OC3_SetConfig+0xec>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d10d      	bne.n	8004c9a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	4a23      	ldr	r2, [pc, #140]	; (8004d10 <TIM_OC3_SetConfig+0xf0>)
 8004c82:	4013      	ands	r3, r2
 8004c84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	021b      	lsls	r3, r3, #8
 8004c8c:	697a      	ldr	r2, [r7, #20]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	4a1f      	ldr	r2, [pc, #124]	; (8004d14 <TIM_OC3_SetConfig+0xf4>)
 8004c96:	4013      	ands	r3, r2
 8004c98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a1b      	ldr	r2, [pc, #108]	; (8004d0c <TIM_OC3_SetConfig+0xec>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d00b      	beq.n	8004cba <TIM_OC3_SetConfig+0x9a>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a1c      	ldr	r2, [pc, #112]	; (8004d18 <TIM_OC3_SetConfig+0xf8>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d007      	beq.n	8004cba <TIM_OC3_SetConfig+0x9a>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a1b      	ldr	r2, [pc, #108]	; (8004d1c <TIM_OC3_SetConfig+0xfc>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d003      	beq.n	8004cba <TIM_OC3_SetConfig+0x9a>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a1a      	ldr	r2, [pc, #104]	; (8004d20 <TIM_OC3_SetConfig+0x100>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d113      	bne.n	8004ce2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	4a19      	ldr	r2, [pc, #100]	; (8004d24 <TIM_OC3_SetConfig+0x104>)
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	4a18      	ldr	r2, [pc, #96]	; (8004d28 <TIM_OC3_SetConfig+0x108>)
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	011b      	lsls	r3, r3, #4
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	011b      	lsls	r3, r3, #4
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	621a      	str	r2, [r3, #32]
}
 8004cfc:	46c0      	nop			; (mov r8, r8)
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	b006      	add	sp, #24
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	fffffeff 	.word	0xfffffeff
 8004d08:	fffffdff 	.word	0xfffffdff
 8004d0c:	40012c00 	.word	0x40012c00
 8004d10:	fffff7ff 	.word	0xfffff7ff
 8004d14:	fffffbff 	.word	0xfffffbff
 8004d18:	40014000 	.word	0x40014000
 8004d1c:	40014400 	.word	0x40014400
 8004d20:	40014800 	.word	0x40014800
 8004d24:	ffffefff 	.word	0xffffefff
 8004d28:	ffffdfff 	.word	0xffffdfff

08004d2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b086      	sub	sp, #24
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	4a28      	ldr	r2, [pc, #160]	; (8004ddc <TIM_OC4_SetConfig+0xb0>)
 8004d3c:	401a      	ands	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	69db      	ldr	r3, [r3, #28]
 8004d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	4a22      	ldr	r2, [pc, #136]	; (8004de0 <TIM_OC4_SetConfig+0xb4>)
 8004d58:	4013      	ands	r3, r2
 8004d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	4a21      	ldr	r2, [pc, #132]	; (8004de4 <TIM_OC4_SetConfig+0xb8>)
 8004d60:	4013      	ands	r3, r2
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	021b      	lsls	r3, r3, #8
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	4a1d      	ldr	r2, [pc, #116]	; (8004de8 <TIM_OC4_SetConfig+0xbc>)
 8004d74:	4013      	ands	r3, r2
 8004d76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	031b      	lsls	r3, r3, #12
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a19      	ldr	r2, [pc, #100]	; (8004dec <TIM_OC4_SetConfig+0xc0>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d00b      	beq.n	8004da4 <TIM_OC4_SetConfig+0x78>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a18      	ldr	r2, [pc, #96]	; (8004df0 <TIM_OC4_SetConfig+0xc4>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d007      	beq.n	8004da4 <TIM_OC4_SetConfig+0x78>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a17      	ldr	r2, [pc, #92]	; (8004df4 <TIM_OC4_SetConfig+0xc8>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d003      	beq.n	8004da4 <TIM_OC4_SetConfig+0x78>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a16      	ldr	r2, [pc, #88]	; (8004df8 <TIM_OC4_SetConfig+0xcc>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d109      	bne.n	8004db8 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	4a15      	ldr	r2, [pc, #84]	; (8004dfc <TIM_OC4_SetConfig+0xd0>)
 8004da8:	4013      	ands	r3, r2
 8004daa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	695b      	ldr	r3, [r3, #20]
 8004db0:	019b      	lsls	r3, r3, #6
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	621a      	str	r2, [r3, #32]
}
 8004dd2:	46c0      	nop			; (mov r8, r8)
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	b006      	add	sp, #24
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	46c0      	nop			; (mov r8, r8)
 8004ddc:	ffffefff 	.word	0xffffefff
 8004de0:	ffff8fff 	.word	0xffff8fff
 8004de4:	fffffcff 	.word	0xfffffcff
 8004de8:	ffffdfff 	.word	0xffffdfff
 8004dec:	40012c00 	.word	0x40012c00
 8004df0:	40014000 	.word	0x40014000
 8004df4:	40014400 	.word	0x40014400
 8004df8:	40014800 	.word	0x40014800
 8004dfc:	ffffbfff 	.word	0xffffbfff

08004e00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6a1b      	ldr	r3, [r3, #32]
 8004e10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	2201      	movs	r2, #1
 8004e18:	4393      	bics	r3, r2
 8004e1a:	001a      	movs	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	22f0      	movs	r2, #240	; 0xf0
 8004e2a:	4393      	bics	r3, r2
 8004e2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	011b      	lsls	r3, r3, #4
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	220a      	movs	r2, #10
 8004e3c:	4393      	bics	r3, r2
 8004e3e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e40:	697a      	ldr	r2, [r7, #20]
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	621a      	str	r2, [r3, #32]
}
 8004e54:	46c0      	nop			; (mov r8, r8)
 8004e56:	46bd      	mov	sp, r7
 8004e58:	b006      	add	sp, #24
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6a1b      	ldr	r3, [r3, #32]
 8004e6c:	2210      	movs	r2, #16
 8004e6e:	4393      	bics	r3, r2
 8004e70:	001a      	movs	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
 8004e80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	4a0d      	ldr	r2, [pc, #52]	; (8004ebc <TIM_TI2_ConfigInputStage+0x60>)
 8004e86:	4013      	ands	r3, r2
 8004e88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	031b      	lsls	r3, r3, #12
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	22a0      	movs	r2, #160	; 0xa0
 8004e98:	4393      	bics	r3, r2
 8004e9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	011b      	lsls	r3, r3, #4
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	621a      	str	r2, [r3, #32]
}
 8004eb2:	46c0      	nop			; (mov r8, r8)
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	b006      	add	sp, #24
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	46c0      	nop			; (mov r8, r8)
 8004ebc:	ffff0fff 	.word	0xffff0fff

08004ec0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2270      	movs	r2, #112	; 0x70
 8004ed4:	4393      	bics	r3, r2
 8004ed6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ed8:	683a      	ldr	r2, [r7, #0]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	2207      	movs	r2, #7
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	609a      	str	r2, [r3, #8]
}
 8004eea:	46c0      	nop			; (mov r8, r8)
 8004eec:	46bd      	mov	sp, r7
 8004eee:	b004      	add	sp, #16
 8004ef0:	bd80      	pop	{r7, pc}
	...

08004ef4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
 8004f00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	4a09      	ldr	r2, [pc, #36]	; (8004f30 <TIM_ETR_SetConfig+0x3c>)
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	021a      	lsls	r2, r3, #8
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	431a      	orrs	r2, r3
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	697a      	ldr	r2, [r7, #20]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	609a      	str	r2, [r3, #8]
}
 8004f28:	46c0      	nop			; (mov r8, r8)
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	b006      	add	sp, #24
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	ffff00ff 	.word	0xffff00ff

08004f34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	221f      	movs	r2, #31
 8004f44:	4013      	ands	r3, r2
 8004f46:	2201      	movs	r2, #1
 8004f48:	409a      	lsls	r2, r3
 8004f4a:	0013      	movs	r3, r2
 8004f4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	43d2      	mvns	r2, r2
 8004f56:	401a      	ands	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6a1a      	ldr	r2, [r3, #32]
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	211f      	movs	r1, #31
 8004f64:	400b      	ands	r3, r1
 8004f66:	6879      	ldr	r1, [r7, #4]
 8004f68:	4099      	lsls	r1, r3
 8004f6a:	000b      	movs	r3, r1
 8004f6c:	431a      	orrs	r2, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	621a      	str	r2, [r3, #32]
}
 8004f72:	46c0      	nop			; (mov r8, r8)
 8004f74:	46bd      	mov	sp, r7
 8004f76:	b006      	add	sp, #24
 8004f78:	bd80      	pop	{r7, pc}
	...

08004f7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	223c      	movs	r2, #60	; 0x3c
 8004f8a:	5c9b      	ldrb	r3, [r3, r2]
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d101      	bne.n	8004f94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f90:	2302      	movs	r3, #2
 8004f92:	e047      	b.n	8005024 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	223c      	movs	r2, #60	; 0x3c
 8004f98:	2101      	movs	r1, #1
 8004f9a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	223d      	movs	r2, #61	; 0x3d
 8004fa0:	2102      	movs	r1, #2
 8004fa2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2270      	movs	r2, #112	; 0x70
 8004fb8:	4393      	bics	r3, r2
 8004fba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a16      	ldr	r2, [pc, #88]	; (800502c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d00f      	beq.n	8004ff8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	2380      	movs	r3, #128	; 0x80
 8004fde:	05db      	lsls	r3, r3, #23
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d009      	beq.n	8004ff8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a11      	ldr	r2, [pc, #68]	; (8005030 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d004      	beq.n	8004ff8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a10      	ldr	r2, [pc, #64]	; (8005034 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d10c      	bne.n	8005012 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	2280      	movs	r2, #128	; 0x80
 8004ffc:	4393      	bics	r3, r2
 8004ffe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	4313      	orrs	r3, r2
 8005008:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	223d      	movs	r2, #61	; 0x3d
 8005016:	2101      	movs	r1, #1
 8005018:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	223c      	movs	r2, #60	; 0x3c
 800501e:	2100      	movs	r1, #0
 8005020:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	0018      	movs	r0, r3
 8005026:	46bd      	mov	sp, r7
 8005028:	b004      	add	sp, #16
 800502a:	bd80      	pop	{r7, pc}
 800502c:	40012c00 	.word	0x40012c00
 8005030:	40000400 	.word	0x40000400
 8005034:	40014000 	.word	0x40014000

08005038 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005042:	2300      	movs	r3, #0
 8005044:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	223c      	movs	r2, #60	; 0x3c
 800504a:	5c9b      	ldrb	r3, [r3, r2]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d101      	bne.n	8005054 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005050:	2302      	movs	r3, #2
 8005052:	e03e      	b.n	80050d2 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	223c      	movs	r2, #60	; 0x3c
 8005058:	2101      	movs	r1, #1
 800505a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	22ff      	movs	r2, #255	; 0xff
 8005060:	4393      	bics	r3, r2
 8005062:	001a      	movs	r2, r3
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	4313      	orrs	r3, r2
 800506a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	4a1b      	ldr	r2, [pc, #108]	; (80050dc <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8005070:	401a      	ands	r2, r3
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	4313      	orrs	r3, r2
 8005078:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	4a18      	ldr	r2, [pc, #96]	; (80050e0 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800507e:	401a      	ands	r2, r3
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	4313      	orrs	r3, r2
 8005086:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	4a16      	ldr	r2, [pc, #88]	; (80050e4 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 800508c:	401a      	ands	r2, r3
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4313      	orrs	r3, r2
 8005094:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	4a13      	ldr	r2, [pc, #76]	; (80050e8 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800509a:	401a      	ands	r2, r3
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	4a11      	ldr	r2, [pc, #68]	; (80050ec <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80050a8:	401a      	ands	r2, r3
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	4a0e      	ldr	r2, [pc, #56]	; (80050f0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80050b6:	401a      	ands	r2, r3
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	69db      	ldr	r3, [r3, #28]
 80050bc:	4313      	orrs	r3, r2
 80050be:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	223c      	movs	r2, #60	; 0x3c
 80050cc:	2100      	movs	r1, #0
 80050ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	0018      	movs	r0, r3
 80050d4:	46bd      	mov	sp, r7
 80050d6:	b004      	add	sp, #16
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	46c0      	nop			; (mov r8, r8)
 80050dc:	fffffcff 	.word	0xfffffcff
 80050e0:	fffffbff 	.word	0xfffffbff
 80050e4:	fffff7ff 	.word	0xfffff7ff
 80050e8:	ffffefff 	.word	0xffffefff
 80050ec:	ffffdfff 	.word	0xffffdfff
 80050f0:	ffffbfff 	.word	0xffffbfff

080050f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050fc:	46c0      	nop			; (mov r8, r8)
 80050fe:	46bd      	mov	sp, r7
 8005100:	b002      	add	sp, #8
 8005102:	bd80      	pop	{r7, pc}

08005104 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800510c:	46c0      	nop			; (mov r8, r8)
 800510e:	46bd      	mov	sp, r7
 8005110:	b002      	add	sp, #8
 8005112:	bd80      	pop	{r7, pc}

08005114 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d101      	bne.n	8005126 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e044      	b.n	80051b0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800512a:	2b00      	cmp	r3, #0
 800512c:	d107      	bne.n	800513e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2274      	movs	r2, #116	; 0x74
 8005132:	2100      	movs	r1, #0
 8005134:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	0018      	movs	r0, r3
 800513a:	f7fc fabf 	bl	80016bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2224      	movs	r2, #36	; 0x24
 8005142:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2101      	movs	r1, #1
 8005150:	438a      	bics	r2, r1
 8005152:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	0018      	movs	r0, r3
 8005158:	f000 fb86 	bl	8005868 <UART_SetConfig>
 800515c:	0003      	movs	r3, r0
 800515e:	2b01      	cmp	r3, #1
 8005160:	d101      	bne.n	8005166 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e024      	b.n	80051b0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516a:	2b00      	cmp	r3, #0
 800516c:	d003      	beq.n	8005176 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	0018      	movs	r0, r3
 8005172:	f000 fcb9 	bl	8005ae8 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	490d      	ldr	r1, [pc, #52]	; (80051b8 <HAL_UART_Init+0xa4>)
 8005182:	400a      	ands	r2, r1
 8005184:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	689a      	ldr	r2, [r3, #8]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	212a      	movs	r1, #42	; 0x2a
 8005192:	438a      	bics	r2, r1
 8005194:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2101      	movs	r1, #1
 80051a2:	430a      	orrs	r2, r1
 80051a4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	0018      	movs	r0, r3
 80051aa:	f000 fd51 	bl	8005c50 <UART_CheckIdleState>
 80051ae:	0003      	movs	r3, r0
}
 80051b0:	0018      	movs	r0, r3
 80051b2:	46bd      	mov	sp, r7
 80051b4:	b002      	add	sp, #8
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	ffffb7ff 	.word	0xffffb7ff

080051bc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b088      	sub	sp, #32
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	1dbb      	adds	r3, r7, #6
 80051c8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051ce:	2b20      	cmp	r3, #32
 80051d0:	d150      	bne.n	8005274 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d003      	beq.n	80051e0 <HAL_UART_Receive_IT+0x24>
 80051d8:	1dbb      	adds	r3, r7, #6
 80051da:	881b      	ldrh	r3, [r3, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d101      	bne.n	80051e4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e048      	b.n	8005276 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	689a      	ldr	r2, [r3, #8]
 80051e8:	2380      	movs	r3, #128	; 0x80
 80051ea:	015b      	lsls	r3, r3, #5
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d109      	bne.n	8005204 <HAL_UART_Receive_IT+0x48>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d105      	bne.n	8005204 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	2201      	movs	r2, #1
 80051fc:	4013      	ands	r3, r2
 80051fe:	d001      	beq.n	8005204 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e038      	b.n	8005276 <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2274      	movs	r2, #116	; 0x74
 8005208:	5c9b      	ldrb	r3, [r3, r2]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d101      	bne.n	8005212 <HAL_UART_Receive_IT+0x56>
 800520e:	2302      	movs	r3, #2
 8005210:	e031      	b.n	8005276 <HAL_UART_Receive_IT+0xba>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2274      	movs	r2, #116	; 0x74
 8005216:	2101      	movs	r1, #1
 8005218:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	685a      	ldr	r2, [r3, #4]
 8005226:	2380      	movs	r3, #128	; 0x80
 8005228:	041b      	lsls	r3, r3, #16
 800522a:	4013      	ands	r3, r2
 800522c:	d019      	beq.n	8005262 <HAL_UART_Receive_IT+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800522e:	f3ef 8310 	mrs	r3, PRIMASK
 8005232:	613b      	str	r3, [r7, #16]
  return(result);
 8005234:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005236:	61fb      	str	r3, [r7, #28]
 8005238:	2301      	movs	r3, #1
 800523a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	f383 8810 	msr	PRIMASK, r3
}
 8005242:	46c0      	nop			; (mov r8, r8)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2180      	movs	r1, #128	; 0x80
 8005250:	04c9      	lsls	r1, r1, #19
 8005252:	430a      	orrs	r2, r1
 8005254:	601a      	str	r2, [r3, #0]
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	f383 8810 	msr	PRIMASK, r3
}
 8005260:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005262:	1dbb      	adds	r3, r7, #6
 8005264:	881a      	ldrh	r2, [r3, #0]
 8005266:	68b9      	ldr	r1, [r7, #8]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	0018      	movs	r0, r3
 800526c:	f000 fdfc 	bl	8005e68 <UART_Start_Receive_IT>
 8005270:	0003      	movs	r3, r0
 8005272:	e000      	b.n	8005276 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8005274:	2302      	movs	r3, #2
  }
}
 8005276:	0018      	movs	r0, r3
 8005278:	46bd      	mov	sp, r7
 800527a:	b008      	add	sp, #32
 800527c:	bd80      	pop	{r7, pc}
	...

08005280 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005280:	b590      	push	{r4, r7, lr}
 8005282:	b0ab      	sub	sp, #172	; 0xac
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	69db      	ldr	r3, [r3, #28]
 800528e:	22a4      	movs	r2, #164	; 0xa4
 8005290:	18b9      	adds	r1, r7, r2
 8005292:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	20a0      	movs	r0, #160	; 0xa0
 800529c:	1839      	adds	r1, r7, r0
 800529e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	219c      	movs	r1, #156	; 0x9c
 80052a8:	1879      	adds	r1, r7, r1
 80052aa:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80052ac:	0011      	movs	r1, r2
 80052ae:	18bb      	adds	r3, r7, r2
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a99      	ldr	r2, [pc, #612]	; (8005518 <HAL_UART_IRQHandler+0x298>)
 80052b4:	4013      	ands	r3, r2
 80052b6:	2298      	movs	r2, #152	; 0x98
 80052b8:	18bc      	adds	r4, r7, r2
 80052ba:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80052bc:	18bb      	adds	r3, r7, r2
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d114      	bne.n	80052ee <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80052c4:	187b      	adds	r3, r7, r1
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2220      	movs	r2, #32
 80052ca:	4013      	ands	r3, r2
 80052cc:	d00f      	beq.n	80052ee <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80052ce:	183b      	adds	r3, r7, r0
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2220      	movs	r2, #32
 80052d4:	4013      	ands	r3, r2
 80052d6:	d00a      	beq.n	80052ee <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d100      	bne.n	80052e2 <HAL_UART_IRQHandler+0x62>
 80052e0:	e296      	b.n	8005810 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	0010      	movs	r0, r2
 80052ea:	4798      	blx	r3
      }
      return;
 80052ec:	e290      	b.n	8005810 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80052ee:	2398      	movs	r3, #152	; 0x98
 80052f0:	18fb      	adds	r3, r7, r3
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d100      	bne.n	80052fa <HAL_UART_IRQHandler+0x7a>
 80052f8:	e114      	b.n	8005524 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80052fa:	239c      	movs	r3, #156	; 0x9c
 80052fc:	18fb      	adds	r3, r7, r3
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2201      	movs	r2, #1
 8005302:	4013      	ands	r3, r2
 8005304:	d106      	bne.n	8005314 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005306:	23a0      	movs	r3, #160	; 0xa0
 8005308:	18fb      	adds	r3, r7, r3
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a83      	ldr	r2, [pc, #524]	; (800551c <HAL_UART_IRQHandler+0x29c>)
 800530e:	4013      	ands	r3, r2
 8005310:	d100      	bne.n	8005314 <HAL_UART_IRQHandler+0x94>
 8005312:	e107      	b.n	8005524 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005314:	23a4      	movs	r3, #164	; 0xa4
 8005316:	18fb      	adds	r3, r7, r3
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2201      	movs	r2, #1
 800531c:	4013      	ands	r3, r2
 800531e:	d012      	beq.n	8005346 <HAL_UART_IRQHandler+0xc6>
 8005320:	23a0      	movs	r3, #160	; 0xa0
 8005322:	18fb      	adds	r3, r7, r3
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	2380      	movs	r3, #128	; 0x80
 8005328:	005b      	lsls	r3, r3, #1
 800532a:	4013      	ands	r3, r2
 800532c:	d00b      	beq.n	8005346 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2201      	movs	r2, #1
 8005334:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2280      	movs	r2, #128	; 0x80
 800533a:	589b      	ldr	r3, [r3, r2]
 800533c:	2201      	movs	r2, #1
 800533e:	431a      	orrs	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2180      	movs	r1, #128	; 0x80
 8005344:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005346:	23a4      	movs	r3, #164	; 0xa4
 8005348:	18fb      	adds	r3, r7, r3
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2202      	movs	r2, #2
 800534e:	4013      	ands	r3, r2
 8005350:	d011      	beq.n	8005376 <HAL_UART_IRQHandler+0xf6>
 8005352:	239c      	movs	r3, #156	; 0x9c
 8005354:	18fb      	adds	r3, r7, r3
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2201      	movs	r2, #1
 800535a:	4013      	ands	r3, r2
 800535c:	d00b      	beq.n	8005376 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2202      	movs	r2, #2
 8005364:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2280      	movs	r2, #128	; 0x80
 800536a:	589b      	ldr	r3, [r3, r2]
 800536c:	2204      	movs	r2, #4
 800536e:	431a      	orrs	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2180      	movs	r1, #128	; 0x80
 8005374:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005376:	23a4      	movs	r3, #164	; 0xa4
 8005378:	18fb      	adds	r3, r7, r3
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2204      	movs	r2, #4
 800537e:	4013      	ands	r3, r2
 8005380:	d011      	beq.n	80053a6 <HAL_UART_IRQHandler+0x126>
 8005382:	239c      	movs	r3, #156	; 0x9c
 8005384:	18fb      	adds	r3, r7, r3
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2201      	movs	r2, #1
 800538a:	4013      	ands	r3, r2
 800538c:	d00b      	beq.n	80053a6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2204      	movs	r2, #4
 8005394:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2280      	movs	r2, #128	; 0x80
 800539a:	589b      	ldr	r3, [r3, r2]
 800539c:	2202      	movs	r2, #2
 800539e:	431a      	orrs	r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2180      	movs	r1, #128	; 0x80
 80053a4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80053a6:	23a4      	movs	r3, #164	; 0xa4
 80053a8:	18fb      	adds	r3, r7, r3
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2208      	movs	r2, #8
 80053ae:	4013      	ands	r3, r2
 80053b0:	d017      	beq.n	80053e2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80053b2:	23a0      	movs	r3, #160	; 0xa0
 80053b4:	18fb      	adds	r3, r7, r3
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2220      	movs	r2, #32
 80053ba:	4013      	ands	r3, r2
 80053bc:	d105      	bne.n	80053ca <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80053be:	239c      	movs	r3, #156	; 0x9c
 80053c0:	18fb      	adds	r3, r7, r3
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2201      	movs	r2, #1
 80053c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80053c8:	d00b      	beq.n	80053e2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2208      	movs	r2, #8
 80053d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2280      	movs	r2, #128	; 0x80
 80053d6:	589b      	ldr	r3, [r3, r2]
 80053d8:	2208      	movs	r2, #8
 80053da:	431a      	orrs	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2180      	movs	r1, #128	; 0x80
 80053e0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80053e2:	23a4      	movs	r3, #164	; 0xa4
 80053e4:	18fb      	adds	r3, r7, r3
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	2380      	movs	r3, #128	; 0x80
 80053ea:	011b      	lsls	r3, r3, #4
 80053ec:	4013      	ands	r3, r2
 80053ee:	d013      	beq.n	8005418 <HAL_UART_IRQHandler+0x198>
 80053f0:	23a0      	movs	r3, #160	; 0xa0
 80053f2:	18fb      	adds	r3, r7, r3
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	2380      	movs	r3, #128	; 0x80
 80053f8:	04db      	lsls	r3, r3, #19
 80053fa:	4013      	ands	r3, r2
 80053fc:	d00c      	beq.n	8005418 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2280      	movs	r2, #128	; 0x80
 8005404:	0112      	lsls	r2, r2, #4
 8005406:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2280      	movs	r2, #128	; 0x80
 800540c:	589b      	ldr	r3, [r3, r2]
 800540e:	2220      	movs	r2, #32
 8005410:	431a      	orrs	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2180      	movs	r1, #128	; 0x80
 8005416:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2280      	movs	r2, #128	; 0x80
 800541c:	589b      	ldr	r3, [r3, r2]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d100      	bne.n	8005424 <HAL_UART_IRQHandler+0x1a4>
 8005422:	e1f7      	b.n	8005814 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005424:	23a4      	movs	r3, #164	; 0xa4
 8005426:	18fb      	adds	r3, r7, r3
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2220      	movs	r2, #32
 800542c:	4013      	ands	r3, r2
 800542e:	d00e      	beq.n	800544e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005430:	23a0      	movs	r3, #160	; 0xa0
 8005432:	18fb      	adds	r3, r7, r3
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2220      	movs	r2, #32
 8005438:	4013      	ands	r3, r2
 800543a:	d008      	beq.n	800544e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005440:	2b00      	cmp	r3, #0
 8005442:	d004      	beq.n	800544e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	0010      	movs	r0, r2
 800544c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2280      	movs	r2, #128	; 0x80
 8005452:	589b      	ldr	r3, [r3, r2]
 8005454:	2194      	movs	r1, #148	; 0x94
 8005456:	187a      	adds	r2, r7, r1
 8005458:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	2240      	movs	r2, #64	; 0x40
 8005462:	4013      	ands	r3, r2
 8005464:	2b40      	cmp	r3, #64	; 0x40
 8005466:	d004      	beq.n	8005472 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005468:	187b      	adds	r3, r7, r1
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2228      	movs	r2, #40	; 0x28
 800546e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005470:	d047      	beq.n	8005502 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	0018      	movs	r0, r3
 8005476:	f000 fd93 	bl	8005fa0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	2240      	movs	r2, #64	; 0x40
 8005482:	4013      	ands	r3, r2
 8005484:	2b40      	cmp	r3, #64	; 0x40
 8005486:	d137      	bne.n	80054f8 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005488:	f3ef 8310 	mrs	r3, PRIMASK
 800548c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800548e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005490:	2090      	movs	r0, #144	; 0x90
 8005492:	183a      	adds	r2, r7, r0
 8005494:	6013      	str	r3, [r2, #0]
 8005496:	2301      	movs	r3, #1
 8005498:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800549a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800549c:	f383 8810 	msr	PRIMASK, r3
}
 80054a0:	46c0      	nop			; (mov r8, r8)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	689a      	ldr	r2, [r3, #8]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2140      	movs	r1, #64	; 0x40
 80054ae:	438a      	bics	r2, r1
 80054b0:	609a      	str	r2, [r3, #8]
 80054b2:	183b      	adds	r3, r7, r0
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054ba:	f383 8810 	msr	PRIMASK, r3
}
 80054be:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d012      	beq.n	80054ee <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054cc:	4a14      	ldr	r2, [pc, #80]	; (8005520 <HAL_UART_IRQHandler+0x2a0>)
 80054ce:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d4:	0018      	movs	r0, r3
 80054d6:	f7fd f8e5 	bl	80026a4 <HAL_DMA_Abort_IT>
 80054da:	1e03      	subs	r3, r0, #0
 80054dc:	d01a      	beq.n	8005514 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e8:	0018      	movs	r0, r3
 80054ea:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054ec:	e012      	b.n	8005514 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	0018      	movs	r0, r3
 80054f2:	f000 f9a5 	bl	8005840 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054f6:	e00d      	b.n	8005514 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	0018      	movs	r0, r3
 80054fc:	f000 f9a0 	bl	8005840 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005500:	e008      	b.n	8005514 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	0018      	movs	r0, r3
 8005506:	f000 f99b 	bl	8005840 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2280      	movs	r2, #128	; 0x80
 800550e:	2100      	movs	r1, #0
 8005510:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005512:	e17f      	b.n	8005814 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005514:	46c0      	nop			; (mov r8, r8)
    return;
 8005516:	e17d      	b.n	8005814 <HAL_UART_IRQHandler+0x594>
 8005518:	0000080f 	.word	0x0000080f
 800551c:	04000120 	.word	0x04000120
 8005520:	08006065 	.word	0x08006065

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005528:	2b01      	cmp	r3, #1
 800552a:	d000      	beq.n	800552e <HAL_UART_IRQHandler+0x2ae>
 800552c:	e131      	b.n	8005792 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800552e:	23a4      	movs	r3, #164	; 0xa4
 8005530:	18fb      	adds	r3, r7, r3
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2210      	movs	r2, #16
 8005536:	4013      	ands	r3, r2
 8005538:	d100      	bne.n	800553c <HAL_UART_IRQHandler+0x2bc>
 800553a:	e12a      	b.n	8005792 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800553c:	23a0      	movs	r3, #160	; 0xa0
 800553e:	18fb      	adds	r3, r7, r3
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2210      	movs	r2, #16
 8005544:	4013      	ands	r3, r2
 8005546:	d100      	bne.n	800554a <HAL_UART_IRQHandler+0x2ca>
 8005548:	e123      	b.n	8005792 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2210      	movs	r2, #16
 8005550:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	2240      	movs	r2, #64	; 0x40
 800555a:	4013      	ands	r3, r2
 800555c:	2b40      	cmp	r3, #64	; 0x40
 800555e:	d000      	beq.n	8005562 <HAL_UART_IRQHandler+0x2e2>
 8005560:	e09b      	b.n	800569a <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	685a      	ldr	r2, [r3, #4]
 800556a:	217e      	movs	r1, #126	; 0x7e
 800556c:	187b      	adds	r3, r7, r1
 800556e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005570:	187b      	adds	r3, r7, r1
 8005572:	881b      	ldrh	r3, [r3, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d100      	bne.n	800557a <HAL_UART_IRQHandler+0x2fa>
 8005578:	e14e      	b.n	8005818 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2258      	movs	r2, #88	; 0x58
 800557e:	5a9b      	ldrh	r3, [r3, r2]
 8005580:	187a      	adds	r2, r7, r1
 8005582:	8812      	ldrh	r2, [r2, #0]
 8005584:	429a      	cmp	r2, r3
 8005586:	d300      	bcc.n	800558a <HAL_UART_IRQHandler+0x30a>
 8005588:	e146      	b.n	8005818 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	187a      	adds	r2, r7, r1
 800558e:	215a      	movs	r1, #90	; 0x5a
 8005590:	8812      	ldrh	r2, [r2, #0]
 8005592:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	2b20      	cmp	r3, #32
 800559c:	d06e      	beq.n	800567c <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800559e:	f3ef 8310 	mrs	r3, PRIMASK
 80055a2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80055a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055a6:	67bb      	str	r3, [r7, #120]	; 0x78
 80055a8:	2301      	movs	r3, #1
 80055aa:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ae:	f383 8810 	msr	PRIMASK, r3
}
 80055b2:	46c0      	nop			; (mov r8, r8)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	499a      	ldr	r1, [pc, #616]	; (8005828 <HAL_UART_IRQHandler+0x5a8>)
 80055c0:	400a      	ands	r2, r1
 80055c2:	601a      	str	r2, [r3, #0]
 80055c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055c6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ca:	f383 8810 	msr	PRIMASK, r3
}
 80055ce:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055d0:	f3ef 8310 	mrs	r3, PRIMASK
 80055d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80055d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055d8:	677b      	str	r3, [r7, #116]	; 0x74
 80055da:	2301      	movs	r3, #1
 80055dc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055e0:	f383 8810 	msr	PRIMASK, r3
}
 80055e4:	46c0      	nop			; (mov r8, r8)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	689a      	ldr	r2, [r3, #8]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2101      	movs	r1, #1
 80055f2:	438a      	bics	r2, r1
 80055f4:	609a      	str	r2, [r3, #8]
 80055f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055f8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055fc:	f383 8810 	msr	PRIMASK, r3
}
 8005600:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005602:	f3ef 8310 	mrs	r3, PRIMASK
 8005606:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005608:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800560a:	673b      	str	r3, [r7, #112]	; 0x70
 800560c:	2301      	movs	r3, #1
 800560e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005612:	f383 8810 	msr	PRIMASK, r3
}
 8005616:	46c0      	nop			; (mov r8, r8)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	689a      	ldr	r2, [r3, #8]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2140      	movs	r1, #64	; 0x40
 8005624:	438a      	bics	r2, r1
 8005626:	609a      	str	r2, [r3, #8]
 8005628:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800562a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800562c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800562e:	f383 8810 	msr	PRIMASK, r3
}
 8005632:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2220      	movs	r2, #32
 8005638:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005640:	f3ef 8310 	mrs	r3, PRIMASK
 8005644:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005646:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005648:	66fb      	str	r3, [r7, #108]	; 0x6c
 800564a:	2301      	movs	r3, #1
 800564c:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800564e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005650:	f383 8810 	msr	PRIMASK, r3
}
 8005654:	46c0      	nop			; (mov r8, r8)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2110      	movs	r1, #16
 8005662:	438a      	bics	r2, r1
 8005664:	601a      	str	r2, [r3, #0]
 8005666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005668:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800566a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800566c:	f383 8810 	msr	PRIMASK, r3
}
 8005670:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005676:	0018      	movs	r0, r3
 8005678:	f7fc ffdc 	bl	8002634 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2258      	movs	r2, #88	; 0x58
 8005680:	5a9a      	ldrh	r2, [r3, r2]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	215a      	movs	r1, #90	; 0x5a
 8005686:	5a5b      	ldrh	r3, [r3, r1]
 8005688:	b29b      	uxth	r3, r3
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	b29a      	uxth	r2, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	0011      	movs	r1, r2
 8005692:	0018      	movs	r0, r3
 8005694:	f000 f8dc 	bl	8005850 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005698:	e0be      	b.n	8005818 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2258      	movs	r2, #88	; 0x58
 800569e:	5a99      	ldrh	r1, [r3, r2]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	225a      	movs	r2, #90	; 0x5a
 80056a4:	5a9b      	ldrh	r3, [r3, r2]
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	208e      	movs	r0, #142	; 0x8e
 80056aa:	183b      	adds	r3, r7, r0
 80056ac:	1a8a      	subs	r2, r1, r2
 80056ae:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	225a      	movs	r2, #90	; 0x5a
 80056b4:	5a9b      	ldrh	r3, [r3, r2]
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d100      	bne.n	80056be <HAL_UART_IRQHandler+0x43e>
 80056bc:	e0ae      	b.n	800581c <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 80056be:	183b      	adds	r3, r7, r0
 80056c0:	881b      	ldrh	r3, [r3, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d100      	bne.n	80056c8 <HAL_UART_IRQHandler+0x448>
 80056c6:	e0a9      	b.n	800581c <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056c8:	f3ef 8310 	mrs	r3, PRIMASK
 80056cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80056ce:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056d0:	2488      	movs	r4, #136	; 0x88
 80056d2:	193a      	adds	r2, r7, r4
 80056d4:	6013      	str	r3, [r2, #0]
 80056d6:	2301      	movs	r3, #1
 80056d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	f383 8810 	msr	PRIMASK, r3
}
 80056e0:	46c0      	nop			; (mov r8, r8)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	494f      	ldr	r1, [pc, #316]	; (800582c <HAL_UART_IRQHandler+0x5ac>)
 80056ee:	400a      	ands	r2, r1
 80056f0:	601a      	str	r2, [r3, #0]
 80056f2:	193b      	adds	r3, r7, r4
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	f383 8810 	msr	PRIMASK, r3
}
 80056fe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005700:	f3ef 8310 	mrs	r3, PRIMASK
 8005704:	61bb      	str	r3, [r7, #24]
  return(result);
 8005706:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005708:	2484      	movs	r4, #132	; 0x84
 800570a:	193a      	adds	r2, r7, r4
 800570c:	6013      	str	r3, [r2, #0]
 800570e:	2301      	movs	r3, #1
 8005710:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	f383 8810 	msr	PRIMASK, r3
}
 8005718:	46c0      	nop			; (mov r8, r8)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	689a      	ldr	r2, [r3, #8]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2101      	movs	r1, #1
 8005726:	438a      	bics	r2, r1
 8005728:	609a      	str	r2, [r3, #8]
 800572a:	193b      	adds	r3, r7, r4
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005730:	6a3b      	ldr	r3, [r7, #32]
 8005732:	f383 8810 	msr	PRIMASK, r3
}
 8005736:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2220      	movs	r2, #32
 800573c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800574a:	f3ef 8310 	mrs	r3, PRIMASK
 800574e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005750:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005752:	2480      	movs	r4, #128	; 0x80
 8005754:	193a      	adds	r2, r7, r4
 8005756:	6013      	str	r3, [r2, #0]
 8005758:	2301      	movs	r3, #1
 800575a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800575c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575e:	f383 8810 	msr	PRIMASK, r3
}
 8005762:	46c0      	nop			; (mov r8, r8)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2110      	movs	r1, #16
 8005770:	438a      	bics	r2, r1
 8005772:	601a      	str	r2, [r3, #0]
 8005774:	193b      	adds	r3, r7, r4
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800577a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800577c:	f383 8810 	msr	PRIMASK, r3
}
 8005780:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005782:	183b      	adds	r3, r7, r0
 8005784:	881a      	ldrh	r2, [r3, #0]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	0011      	movs	r1, r2
 800578a:	0018      	movs	r0, r3
 800578c:	f000 f860 	bl	8005850 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005790:	e044      	b.n	800581c <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005792:	23a4      	movs	r3, #164	; 0xa4
 8005794:	18fb      	adds	r3, r7, r3
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	2380      	movs	r3, #128	; 0x80
 800579a:	035b      	lsls	r3, r3, #13
 800579c:	4013      	ands	r3, r2
 800579e:	d010      	beq.n	80057c2 <HAL_UART_IRQHandler+0x542>
 80057a0:	239c      	movs	r3, #156	; 0x9c
 80057a2:	18fb      	adds	r3, r7, r3
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	2380      	movs	r3, #128	; 0x80
 80057a8:	03db      	lsls	r3, r3, #15
 80057aa:	4013      	ands	r3, r2
 80057ac:	d009      	beq.n	80057c2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2280      	movs	r2, #128	; 0x80
 80057b4:	0352      	lsls	r2, r2, #13
 80057b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	0018      	movs	r0, r3
 80057bc:	f000 fdfc 	bl	80063b8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80057c0:	e02f      	b.n	8005822 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80057c2:	23a4      	movs	r3, #164	; 0xa4
 80057c4:	18fb      	adds	r3, r7, r3
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2280      	movs	r2, #128	; 0x80
 80057ca:	4013      	ands	r3, r2
 80057cc:	d00f      	beq.n	80057ee <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80057ce:	23a0      	movs	r3, #160	; 0xa0
 80057d0:	18fb      	adds	r3, r7, r3
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2280      	movs	r2, #128	; 0x80
 80057d6:	4013      	ands	r3, r2
 80057d8:	d009      	beq.n	80057ee <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d01e      	beq.n	8005820 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	0010      	movs	r0, r2
 80057ea:	4798      	blx	r3
    }
    return;
 80057ec:	e018      	b.n	8005820 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80057ee:	23a4      	movs	r3, #164	; 0xa4
 80057f0:	18fb      	adds	r3, r7, r3
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2240      	movs	r2, #64	; 0x40
 80057f6:	4013      	ands	r3, r2
 80057f8:	d013      	beq.n	8005822 <HAL_UART_IRQHandler+0x5a2>
 80057fa:	23a0      	movs	r3, #160	; 0xa0
 80057fc:	18fb      	adds	r3, r7, r3
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2240      	movs	r2, #64	; 0x40
 8005802:	4013      	ands	r3, r2
 8005804:	d00d      	beq.n	8005822 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	0018      	movs	r0, r3
 800580a:	f000 fc42 	bl	8006092 <UART_EndTransmit_IT>
    return;
 800580e:	e008      	b.n	8005822 <HAL_UART_IRQHandler+0x5a2>
      return;
 8005810:	46c0      	nop			; (mov r8, r8)
 8005812:	e006      	b.n	8005822 <HAL_UART_IRQHandler+0x5a2>
    return;
 8005814:	46c0      	nop			; (mov r8, r8)
 8005816:	e004      	b.n	8005822 <HAL_UART_IRQHandler+0x5a2>
      return;
 8005818:	46c0      	nop			; (mov r8, r8)
 800581a:	e002      	b.n	8005822 <HAL_UART_IRQHandler+0x5a2>
      return;
 800581c:	46c0      	nop			; (mov r8, r8)
 800581e:	e000      	b.n	8005822 <HAL_UART_IRQHandler+0x5a2>
    return;
 8005820:	46c0      	nop			; (mov r8, r8)
  }

}
 8005822:	46bd      	mov	sp, r7
 8005824:	b02b      	add	sp, #172	; 0xac
 8005826:	bd90      	pop	{r4, r7, pc}
 8005828:	fffffeff 	.word	0xfffffeff
 800582c:	fffffedf 	.word	0xfffffedf

08005830 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005838:	46c0      	nop			; (mov r8, r8)
 800583a:	46bd      	mov	sp, r7
 800583c:	b002      	add	sp, #8
 800583e:	bd80      	pop	{r7, pc}

08005840 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005848:	46c0      	nop			; (mov r8, r8)
 800584a:	46bd      	mov	sp, r7
 800584c:	b002      	add	sp, #8
 800584e:	bd80      	pop	{r7, pc}

08005850 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	000a      	movs	r2, r1
 800585a:	1cbb      	adds	r3, r7, #2
 800585c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800585e:	46c0      	nop			; (mov r8, r8)
 8005860:	46bd      	mov	sp, r7
 8005862:	b002      	add	sp, #8
 8005864:	bd80      	pop	{r7, pc}
	...

08005868 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b088      	sub	sp, #32
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005870:	231e      	movs	r3, #30
 8005872:	18fb      	adds	r3, r7, r3
 8005874:	2200      	movs	r2, #0
 8005876:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	689a      	ldr	r2, [r3, #8]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	431a      	orrs	r2, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	695b      	ldr	r3, [r3, #20]
 8005886:	431a      	orrs	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	69db      	ldr	r3, [r3, #28]
 800588c:	4313      	orrs	r3, r2
 800588e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a8d      	ldr	r2, [pc, #564]	; (8005acc <UART_SetConfig+0x264>)
 8005898:	4013      	ands	r3, r2
 800589a:	0019      	movs	r1, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	697a      	ldr	r2, [r7, #20]
 80058a2:	430a      	orrs	r2, r1
 80058a4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	4a88      	ldr	r2, [pc, #544]	; (8005ad0 <UART_SetConfig+0x268>)
 80058ae:	4013      	ands	r3, r2
 80058b0:	0019      	movs	r1, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	68da      	ldr	r2, [r3, #12]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	430a      	orrs	r2, r1
 80058bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a1b      	ldr	r3, [r3, #32]
 80058c8:	697a      	ldr	r2, [r7, #20]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	4a7f      	ldr	r2, [pc, #508]	; (8005ad4 <UART_SetConfig+0x26c>)
 80058d6:	4013      	ands	r3, r2
 80058d8:	0019      	movs	r1, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	697a      	ldr	r2, [r7, #20]
 80058e0:	430a      	orrs	r2, r1
 80058e2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a7b      	ldr	r2, [pc, #492]	; (8005ad8 <UART_SetConfig+0x270>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d127      	bne.n	800593e <UART_SetConfig+0xd6>
 80058ee:	4b7b      	ldr	r3, [pc, #492]	; (8005adc <UART_SetConfig+0x274>)
 80058f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f2:	2203      	movs	r2, #3
 80058f4:	4013      	ands	r3, r2
 80058f6:	2b03      	cmp	r3, #3
 80058f8:	d00d      	beq.n	8005916 <UART_SetConfig+0xae>
 80058fa:	d81b      	bhi.n	8005934 <UART_SetConfig+0xcc>
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d014      	beq.n	800592a <UART_SetConfig+0xc2>
 8005900:	d818      	bhi.n	8005934 <UART_SetConfig+0xcc>
 8005902:	2b00      	cmp	r3, #0
 8005904:	d002      	beq.n	800590c <UART_SetConfig+0xa4>
 8005906:	2b01      	cmp	r3, #1
 8005908:	d00a      	beq.n	8005920 <UART_SetConfig+0xb8>
 800590a:	e013      	b.n	8005934 <UART_SetConfig+0xcc>
 800590c:	231f      	movs	r3, #31
 800590e:	18fb      	adds	r3, r7, r3
 8005910:	2200      	movs	r2, #0
 8005912:	701a      	strb	r2, [r3, #0]
 8005914:	e021      	b.n	800595a <UART_SetConfig+0xf2>
 8005916:	231f      	movs	r3, #31
 8005918:	18fb      	adds	r3, r7, r3
 800591a:	2202      	movs	r2, #2
 800591c:	701a      	strb	r2, [r3, #0]
 800591e:	e01c      	b.n	800595a <UART_SetConfig+0xf2>
 8005920:	231f      	movs	r3, #31
 8005922:	18fb      	adds	r3, r7, r3
 8005924:	2204      	movs	r2, #4
 8005926:	701a      	strb	r2, [r3, #0]
 8005928:	e017      	b.n	800595a <UART_SetConfig+0xf2>
 800592a:	231f      	movs	r3, #31
 800592c:	18fb      	adds	r3, r7, r3
 800592e:	2208      	movs	r2, #8
 8005930:	701a      	strb	r2, [r3, #0]
 8005932:	e012      	b.n	800595a <UART_SetConfig+0xf2>
 8005934:	231f      	movs	r3, #31
 8005936:	18fb      	adds	r3, r7, r3
 8005938:	2210      	movs	r2, #16
 800593a:	701a      	strb	r2, [r3, #0]
 800593c:	e00d      	b.n	800595a <UART_SetConfig+0xf2>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a67      	ldr	r2, [pc, #412]	; (8005ae0 <UART_SetConfig+0x278>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d104      	bne.n	8005952 <UART_SetConfig+0xea>
 8005948:	231f      	movs	r3, #31
 800594a:	18fb      	adds	r3, r7, r3
 800594c:	2200      	movs	r2, #0
 800594e:	701a      	strb	r2, [r3, #0]
 8005950:	e003      	b.n	800595a <UART_SetConfig+0xf2>
 8005952:	231f      	movs	r3, #31
 8005954:	18fb      	adds	r3, r7, r3
 8005956:	2210      	movs	r2, #16
 8005958:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	69da      	ldr	r2, [r3, #28]
 800595e:	2380      	movs	r3, #128	; 0x80
 8005960:	021b      	lsls	r3, r3, #8
 8005962:	429a      	cmp	r2, r3
 8005964:	d15d      	bne.n	8005a22 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8005966:	231f      	movs	r3, #31
 8005968:	18fb      	adds	r3, r7, r3
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	2b08      	cmp	r3, #8
 800596e:	d015      	beq.n	800599c <UART_SetConfig+0x134>
 8005970:	dc18      	bgt.n	80059a4 <UART_SetConfig+0x13c>
 8005972:	2b04      	cmp	r3, #4
 8005974:	d00d      	beq.n	8005992 <UART_SetConfig+0x12a>
 8005976:	dc15      	bgt.n	80059a4 <UART_SetConfig+0x13c>
 8005978:	2b00      	cmp	r3, #0
 800597a:	d002      	beq.n	8005982 <UART_SetConfig+0x11a>
 800597c:	2b02      	cmp	r3, #2
 800597e:	d005      	beq.n	800598c <UART_SetConfig+0x124>
 8005980:	e010      	b.n	80059a4 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005982:	f7fd ff3d 	bl	8003800 <HAL_RCC_GetPCLK1Freq>
 8005986:	0003      	movs	r3, r0
 8005988:	61bb      	str	r3, [r7, #24]
        break;
 800598a:	e012      	b.n	80059b2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800598c:	4b55      	ldr	r3, [pc, #340]	; (8005ae4 <UART_SetConfig+0x27c>)
 800598e:	61bb      	str	r3, [r7, #24]
        break;
 8005990:	e00f      	b.n	80059b2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005992:	f7fd fec7 	bl	8003724 <HAL_RCC_GetSysClockFreq>
 8005996:	0003      	movs	r3, r0
 8005998:	61bb      	str	r3, [r7, #24]
        break;
 800599a:	e00a      	b.n	80059b2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800599c:	2380      	movs	r3, #128	; 0x80
 800599e:	021b      	lsls	r3, r3, #8
 80059a0:	61bb      	str	r3, [r7, #24]
        break;
 80059a2:	e006      	b.n	80059b2 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80059a4:	2300      	movs	r3, #0
 80059a6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80059a8:	231e      	movs	r3, #30
 80059aa:	18fb      	adds	r3, r7, r3
 80059ac:	2201      	movs	r2, #1
 80059ae:	701a      	strb	r2, [r3, #0]
        break;
 80059b0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d100      	bne.n	80059ba <UART_SetConfig+0x152>
 80059b8:	e07b      	b.n	8005ab2 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	005a      	lsls	r2, r3, #1
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	085b      	lsrs	r3, r3, #1
 80059c4:	18d2      	adds	r2, r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	0019      	movs	r1, r3
 80059cc:	0010      	movs	r0, r2
 80059ce:	f7fa fb9b 	bl	8000108 <__udivsi3>
 80059d2:	0003      	movs	r3, r0
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	2b0f      	cmp	r3, #15
 80059dc:	d91c      	bls.n	8005a18 <UART_SetConfig+0x1b0>
 80059de:	693a      	ldr	r2, [r7, #16]
 80059e0:	2380      	movs	r3, #128	; 0x80
 80059e2:	025b      	lsls	r3, r3, #9
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d217      	bcs.n	8005a18 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	200e      	movs	r0, #14
 80059ee:	183b      	adds	r3, r7, r0
 80059f0:	210f      	movs	r1, #15
 80059f2:	438a      	bics	r2, r1
 80059f4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	085b      	lsrs	r3, r3, #1
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	2207      	movs	r2, #7
 80059fe:	4013      	ands	r3, r2
 8005a00:	b299      	uxth	r1, r3
 8005a02:	183b      	adds	r3, r7, r0
 8005a04:	183a      	adds	r2, r7, r0
 8005a06:	8812      	ldrh	r2, [r2, #0]
 8005a08:	430a      	orrs	r2, r1
 8005a0a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	183a      	adds	r2, r7, r0
 8005a12:	8812      	ldrh	r2, [r2, #0]
 8005a14:	60da      	str	r2, [r3, #12]
 8005a16:	e04c      	b.n	8005ab2 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8005a18:	231e      	movs	r3, #30
 8005a1a:	18fb      	adds	r3, r7, r3
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	701a      	strb	r2, [r3, #0]
 8005a20:	e047      	b.n	8005ab2 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a22:	231f      	movs	r3, #31
 8005a24:	18fb      	adds	r3, r7, r3
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	2b08      	cmp	r3, #8
 8005a2a:	d015      	beq.n	8005a58 <UART_SetConfig+0x1f0>
 8005a2c:	dc18      	bgt.n	8005a60 <UART_SetConfig+0x1f8>
 8005a2e:	2b04      	cmp	r3, #4
 8005a30:	d00d      	beq.n	8005a4e <UART_SetConfig+0x1e6>
 8005a32:	dc15      	bgt.n	8005a60 <UART_SetConfig+0x1f8>
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d002      	beq.n	8005a3e <UART_SetConfig+0x1d6>
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d005      	beq.n	8005a48 <UART_SetConfig+0x1e0>
 8005a3c:	e010      	b.n	8005a60 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a3e:	f7fd fedf 	bl	8003800 <HAL_RCC_GetPCLK1Freq>
 8005a42:	0003      	movs	r3, r0
 8005a44:	61bb      	str	r3, [r7, #24]
        break;
 8005a46:	e012      	b.n	8005a6e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a48:	4b26      	ldr	r3, [pc, #152]	; (8005ae4 <UART_SetConfig+0x27c>)
 8005a4a:	61bb      	str	r3, [r7, #24]
        break;
 8005a4c:	e00f      	b.n	8005a6e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a4e:	f7fd fe69 	bl	8003724 <HAL_RCC_GetSysClockFreq>
 8005a52:	0003      	movs	r3, r0
 8005a54:	61bb      	str	r3, [r7, #24]
        break;
 8005a56:	e00a      	b.n	8005a6e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a58:	2380      	movs	r3, #128	; 0x80
 8005a5a:	021b      	lsls	r3, r3, #8
 8005a5c:	61bb      	str	r3, [r7, #24]
        break;
 8005a5e:	e006      	b.n	8005a6e <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8005a60:	2300      	movs	r3, #0
 8005a62:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005a64:	231e      	movs	r3, #30
 8005a66:	18fb      	adds	r3, r7, r3
 8005a68:	2201      	movs	r2, #1
 8005a6a:	701a      	strb	r2, [r3, #0]
        break;
 8005a6c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d01e      	beq.n	8005ab2 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	085a      	lsrs	r2, r3, #1
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	18d2      	adds	r2, r2, r3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	0019      	movs	r1, r3
 8005a84:	0010      	movs	r0, r2
 8005a86:	f7fa fb3f 	bl	8000108 <__udivsi3>
 8005a8a:	0003      	movs	r3, r0
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	2b0f      	cmp	r3, #15
 8005a94:	d909      	bls.n	8005aaa <UART_SetConfig+0x242>
 8005a96:	693a      	ldr	r2, [r7, #16]
 8005a98:	2380      	movs	r3, #128	; 0x80
 8005a9a:	025b      	lsls	r3, r3, #9
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d204      	bcs.n	8005aaa <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	693a      	ldr	r2, [r7, #16]
 8005aa6:	60da      	str	r2, [r3, #12]
 8005aa8:	e003      	b.n	8005ab2 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8005aaa:	231e      	movs	r3, #30
 8005aac:	18fb      	adds	r3, r7, r3
 8005aae:	2201      	movs	r2, #1
 8005ab0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005abe:	231e      	movs	r3, #30
 8005ac0:	18fb      	adds	r3, r7, r3
 8005ac2:	781b      	ldrb	r3, [r3, #0]
}
 8005ac4:	0018      	movs	r0, r3
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	b008      	add	sp, #32
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	ffff69f3 	.word	0xffff69f3
 8005ad0:	ffffcfff 	.word	0xffffcfff
 8005ad4:	fffff4ff 	.word	0xfffff4ff
 8005ad8:	40013800 	.word	0x40013800
 8005adc:	40021000 	.word	0x40021000
 8005ae0:	40004400 	.word	0x40004400
 8005ae4:	007a1200 	.word	0x007a1200

08005ae8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af4:	2201      	movs	r2, #1
 8005af6:	4013      	ands	r3, r2
 8005af8:	d00b      	beq.n	8005b12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	4a4a      	ldr	r2, [pc, #296]	; (8005c2c <UART_AdvFeatureConfig+0x144>)
 8005b02:	4013      	ands	r3, r2
 8005b04:	0019      	movs	r1, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b16:	2202      	movs	r2, #2
 8005b18:	4013      	ands	r3, r2
 8005b1a:	d00b      	beq.n	8005b34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	4a43      	ldr	r2, [pc, #268]	; (8005c30 <UART_AdvFeatureConfig+0x148>)
 8005b24:	4013      	ands	r3, r2
 8005b26:	0019      	movs	r1, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	430a      	orrs	r2, r1
 8005b32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b38:	2204      	movs	r2, #4
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	d00b      	beq.n	8005b56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	4a3b      	ldr	r2, [pc, #236]	; (8005c34 <UART_AdvFeatureConfig+0x14c>)
 8005b46:	4013      	ands	r3, r2
 8005b48:	0019      	movs	r1, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	430a      	orrs	r2, r1
 8005b54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5a:	2208      	movs	r2, #8
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	d00b      	beq.n	8005b78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	4a34      	ldr	r2, [pc, #208]	; (8005c38 <UART_AdvFeatureConfig+0x150>)
 8005b68:	4013      	ands	r3, r2
 8005b6a:	0019      	movs	r1, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	430a      	orrs	r2, r1
 8005b76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7c:	2210      	movs	r2, #16
 8005b7e:	4013      	ands	r3, r2
 8005b80:	d00b      	beq.n	8005b9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	4a2c      	ldr	r2, [pc, #176]	; (8005c3c <UART_AdvFeatureConfig+0x154>)
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	0019      	movs	r1, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	430a      	orrs	r2, r1
 8005b98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9e:	2220      	movs	r2, #32
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	d00b      	beq.n	8005bbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	4a25      	ldr	r2, [pc, #148]	; (8005c40 <UART_AdvFeatureConfig+0x158>)
 8005bac:	4013      	ands	r3, r2
 8005bae:	0019      	movs	r1, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc0:	2240      	movs	r2, #64	; 0x40
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	d01d      	beq.n	8005c02 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	4a1d      	ldr	r2, [pc, #116]	; (8005c44 <UART_AdvFeatureConfig+0x15c>)
 8005bce:	4013      	ands	r3, r2
 8005bd0:	0019      	movs	r1, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005be2:	2380      	movs	r3, #128	; 0x80
 8005be4:	035b      	lsls	r3, r3, #13
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d10b      	bne.n	8005c02 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	4a15      	ldr	r2, [pc, #84]	; (8005c48 <UART_AdvFeatureConfig+0x160>)
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	0019      	movs	r1, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c06:	2280      	movs	r2, #128	; 0x80
 8005c08:	4013      	ands	r3, r2
 8005c0a:	d00b      	beq.n	8005c24 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	4a0e      	ldr	r2, [pc, #56]	; (8005c4c <UART_AdvFeatureConfig+0x164>)
 8005c14:	4013      	ands	r3, r2
 8005c16:	0019      	movs	r1, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	430a      	orrs	r2, r1
 8005c22:	605a      	str	r2, [r3, #4]
  }
}
 8005c24:	46c0      	nop			; (mov r8, r8)
 8005c26:	46bd      	mov	sp, r7
 8005c28:	b002      	add	sp, #8
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	fffdffff 	.word	0xfffdffff
 8005c30:	fffeffff 	.word	0xfffeffff
 8005c34:	fffbffff 	.word	0xfffbffff
 8005c38:	ffff7fff 	.word	0xffff7fff
 8005c3c:	ffffefff 	.word	0xffffefff
 8005c40:	ffffdfff 	.word	0xffffdfff
 8005c44:	ffefffff 	.word	0xffefffff
 8005c48:	ff9fffff 	.word	0xff9fffff
 8005c4c:	fff7ffff 	.word	0xfff7ffff

08005c50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b086      	sub	sp, #24
 8005c54:	af02      	add	r7, sp, #8
 8005c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2280      	movs	r2, #128	; 0x80
 8005c5c:	2100      	movs	r1, #0
 8005c5e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c60:	f7fb fe96 	bl	8001990 <HAL_GetTick>
 8005c64:	0003      	movs	r3, r0
 8005c66:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2208      	movs	r2, #8
 8005c70:	4013      	ands	r3, r2
 8005c72:	2b08      	cmp	r3, #8
 8005c74:	d10c      	bne.n	8005c90 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2280      	movs	r2, #128	; 0x80
 8005c7a:	0391      	lsls	r1, r2, #14
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	4a17      	ldr	r2, [pc, #92]	; (8005cdc <UART_CheckIdleState+0x8c>)
 8005c80:	9200      	str	r2, [sp, #0]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f000 f82c 	bl	8005ce0 <UART_WaitOnFlagUntilTimeout>
 8005c88:	1e03      	subs	r3, r0, #0
 8005c8a:	d001      	beq.n	8005c90 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	e021      	b.n	8005cd4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2204      	movs	r2, #4
 8005c98:	4013      	ands	r3, r2
 8005c9a:	2b04      	cmp	r3, #4
 8005c9c:	d10c      	bne.n	8005cb8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2280      	movs	r2, #128	; 0x80
 8005ca2:	03d1      	lsls	r1, r2, #15
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	4a0d      	ldr	r2, [pc, #52]	; (8005cdc <UART_CheckIdleState+0x8c>)
 8005ca8:	9200      	str	r2, [sp, #0]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f000 f818 	bl	8005ce0 <UART_WaitOnFlagUntilTimeout>
 8005cb0:	1e03      	subs	r3, r0, #0
 8005cb2:	d001      	beq.n	8005cb8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e00d      	b.n	8005cd4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2220      	movs	r2, #32
 8005cbc:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2220      	movs	r2, #32
 8005cc2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2274      	movs	r2, #116	; 0x74
 8005cce:	2100      	movs	r1, #0
 8005cd0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	0018      	movs	r0, r3
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	b004      	add	sp, #16
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	01ffffff 	.word	0x01ffffff

08005ce0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b094      	sub	sp, #80	; 0x50
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	603b      	str	r3, [r7, #0]
 8005cec:	1dfb      	adds	r3, r7, #7
 8005cee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cf0:	e0a3      	b.n	8005e3a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	d100      	bne.n	8005cfa <UART_WaitOnFlagUntilTimeout+0x1a>
 8005cf8:	e09f      	b.n	8005e3a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cfa:	f7fb fe49 	bl	8001990 <HAL_GetTick>
 8005cfe:	0002      	movs	r2, r0
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	1ad3      	subs	r3, r2, r3
 8005d04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d302      	bcc.n	8005d10 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d13d      	bne.n	8005d8c <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d10:	f3ef 8310 	mrs	r3, PRIMASK
 8005d14:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d18:	647b      	str	r3, [r7, #68]	; 0x44
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d20:	f383 8810 	msr	PRIMASK, r3
}
 8005d24:	46c0      	nop			; (mov r8, r8)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	494c      	ldr	r1, [pc, #304]	; (8005e64 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005d32:	400a      	ands	r2, r1
 8005d34:	601a      	str	r2, [r3, #0]
 8005d36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d38:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3c:	f383 8810 	msr	PRIMASK, r3
}
 8005d40:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d42:	f3ef 8310 	mrs	r3, PRIMASK
 8005d46:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d4a:	643b      	str	r3, [r7, #64]	; 0x40
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d52:	f383 8810 	msr	PRIMASK, r3
}
 8005d56:	46c0      	nop			; (mov r8, r8)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	689a      	ldr	r2, [r3, #8]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2101      	movs	r1, #1
 8005d64:	438a      	bics	r2, r1
 8005d66:	609a      	str	r2, [r3, #8]
 8005d68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d6e:	f383 8810 	msr	PRIMASK, r3
}
 8005d72:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2220      	movs	r2, #32
 8005d78:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2220      	movs	r2, #32
 8005d7e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2274      	movs	r2, #116	; 0x74
 8005d84:	2100      	movs	r1, #0
 8005d86:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	e067      	b.n	8005e5c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2204      	movs	r2, #4
 8005d94:	4013      	ands	r3, r2
 8005d96:	d050      	beq.n	8005e3a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	69da      	ldr	r2, [r3, #28]
 8005d9e:	2380      	movs	r3, #128	; 0x80
 8005da0:	011b      	lsls	r3, r3, #4
 8005da2:	401a      	ands	r2, r3
 8005da4:	2380      	movs	r3, #128	; 0x80
 8005da6:	011b      	lsls	r3, r3, #4
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d146      	bne.n	8005e3a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2280      	movs	r2, #128	; 0x80
 8005db2:	0112      	lsls	r2, r2, #4
 8005db4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005db6:	f3ef 8310 	mrs	r3, PRIMASK
 8005dba:	613b      	str	r3, [r7, #16]
  return(result);
 8005dbc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	f383 8810 	msr	PRIMASK, r3
}
 8005dca:	46c0      	nop			; (mov r8, r8)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4923      	ldr	r1, [pc, #140]	; (8005e64 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005dd8:	400a      	ands	r2, r1
 8005dda:	601a      	str	r2, [r3, #0]
 8005ddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dde:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	f383 8810 	msr	PRIMASK, r3
}
 8005de6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005de8:	f3ef 8310 	mrs	r3, PRIMASK
 8005dec:	61fb      	str	r3, [r7, #28]
  return(result);
 8005dee:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005df0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005df2:	2301      	movs	r3, #1
 8005df4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005df6:	6a3b      	ldr	r3, [r7, #32]
 8005df8:	f383 8810 	msr	PRIMASK, r3
}
 8005dfc:	46c0      	nop			; (mov r8, r8)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	689a      	ldr	r2, [r3, #8]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2101      	movs	r1, #1
 8005e0a:	438a      	bics	r2, r1
 8005e0c:	609a      	str	r2, [r3, #8]
 8005e0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e10:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e14:	f383 8810 	msr	PRIMASK, r3
}
 8005e18:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2220      	movs	r2, #32
 8005e1e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2220      	movs	r2, #32
 8005e24:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2280      	movs	r2, #128	; 0x80
 8005e2a:	2120      	movs	r1, #32
 8005e2c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2274      	movs	r2, #116	; 0x74
 8005e32:	2100      	movs	r1, #0
 8005e34:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e010      	b.n	8005e5c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	69db      	ldr	r3, [r3, #28]
 8005e40:	68ba      	ldr	r2, [r7, #8]
 8005e42:	4013      	ands	r3, r2
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	425a      	negs	r2, r3
 8005e4a:	4153      	adcs	r3, r2
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	001a      	movs	r2, r3
 8005e50:	1dfb      	adds	r3, r7, #7
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d100      	bne.n	8005e5a <UART_WaitOnFlagUntilTimeout+0x17a>
 8005e58:	e74b      	b.n	8005cf2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	0018      	movs	r0, r3
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	b014      	add	sp, #80	; 0x50
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	fffffe5f 	.word	0xfffffe5f

08005e68 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b08c      	sub	sp, #48	; 0x30
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	1dbb      	adds	r3, r7, #6
 8005e74:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	68ba      	ldr	r2, [r7, #8]
 8005e7a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	1dba      	adds	r2, r7, #6
 8005e80:	2158      	movs	r1, #88	; 0x58
 8005e82:	8812      	ldrh	r2, [r2, #0]
 8005e84:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	1dba      	adds	r2, r7, #6
 8005e8a:	215a      	movs	r1, #90	; 0x5a
 8005e8c:	8812      	ldrh	r2, [r2, #0]
 8005e8e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2200      	movs	r2, #0
 8005e94:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	689a      	ldr	r2, [r3, #8]
 8005e9a:	2380      	movs	r3, #128	; 0x80
 8005e9c:	015b      	lsls	r3, r3, #5
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d10d      	bne.n	8005ebe <UART_Start_Receive_IT+0x56>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d104      	bne.n	8005eb4 <UART_Start_Receive_IT+0x4c>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	225c      	movs	r2, #92	; 0x5c
 8005eae:	4939      	ldr	r1, [pc, #228]	; (8005f94 <UART_Start_Receive_IT+0x12c>)
 8005eb0:	5299      	strh	r1, [r3, r2]
 8005eb2:	e01a      	b.n	8005eea <UART_Start_Receive_IT+0x82>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	225c      	movs	r2, #92	; 0x5c
 8005eb8:	21ff      	movs	r1, #255	; 0xff
 8005eba:	5299      	strh	r1, [r3, r2]
 8005ebc:	e015      	b.n	8005eea <UART_Start_Receive_IT+0x82>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d10d      	bne.n	8005ee2 <UART_Start_Receive_IT+0x7a>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d104      	bne.n	8005ed8 <UART_Start_Receive_IT+0x70>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	225c      	movs	r2, #92	; 0x5c
 8005ed2:	21ff      	movs	r1, #255	; 0xff
 8005ed4:	5299      	strh	r1, [r3, r2]
 8005ed6:	e008      	b.n	8005eea <UART_Start_Receive_IT+0x82>
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	225c      	movs	r2, #92	; 0x5c
 8005edc:	217f      	movs	r1, #127	; 0x7f
 8005ede:	5299      	strh	r1, [r3, r2]
 8005ee0:	e003      	b.n	8005eea <UART_Start_Receive_IT+0x82>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	225c      	movs	r2, #92	; 0x5c
 8005ee6:	2100      	movs	r1, #0
 8005ee8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2280      	movs	r2, #128	; 0x80
 8005eee:	2100      	movs	r1, #0
 8005ef0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2222      	movs	r2, #34	; 0x22
 8005ef6:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ef8:	f3ef 8310 	mrs	r3, PRIMASK
 8005efc:	61fb      	str	r3, [r7, #28]
  return(result);
 8005efe:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f02:	2301      	movs	r3, #1
 8005f04:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f06:	6a3b      	ldr	r3, [r7, #32]
 8005f08:	f383 8810 	msr	PRIMASK, r3
}
 8005f0c:	46c0      	nop			; (mov r8, r8)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	689a      	ldr	r2, [r3, #8]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2101      	movs	r1, #1
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	609a      	str	r2, [r3, #8]
 8005f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f20:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f24:	f383 8810 	msr	PRIMASK, r3
}
 8005f28:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	689a      	ldr	r2, [r3, #8]
 8005f2e:	2380      	movs	r3, #128	; 0x80
 8005f30:	015b      	lsls	r3, r3, #5
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d107      	bne.n	8005f46 <UART_Start_Receive_IT+0xde>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d103      	bne.n	8005f46 <UART_Start_Receive_IT+0xde>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	4a15      	ldr	r2, [pc, #84]	; (8005f98 <UART_Start_Receive_IT+0x130>)
 8005f42:	665a      	str	r2, [r3, #100]	; 0x64
 8005f44:	e002      	b.n	8005f4c <UART_Start_Receive_IT+0xe4>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	4a14      	ldr	r2, [pc, #80]	; (8005f9c <UART_Start_Receive_IT+0x134>)
 8005f4a:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2274      	movs	r2, #116	; 0x74
 8005f50:	2100      	movs	r1, #0
 8005f52:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f54:	f3ef 8310 	mrs	r3, PRIMASK
 8005f58:	613b      	str	r3, [r7, #16]
  return(result);
 8005f5a:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005f5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f5e:	2301      	movs	r3, #1
 8005f60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	f383 8810 	msr	PRIMASK, r3
}
 8005f68:	46c0      	nop			; (mov r8, r8)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2190      	movs	r1, #144	; 0x90
 8005f76:	0049      	lsls	r1, r1, #1
 8005f78:	430a      	orrs	r2, r1
 8005f7a:	601a      	str	r2, [r3, #0]
 8005f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f7e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	f383 8810 	msr	PRIMASK, r3
}
 8005f86:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	0018      	movs	r0, r3
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	b00c      	add	sp, #48	; 0x30
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	46c0      	nop			; (mov r8, r8)
 8005f94:	000001ff 	.word	0x000001ff
 8005f98:	08006251 	.word	0x08006251
 8005f9c:	080060e9 	.word	0x080060e9

08005fa0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b08e      	sub	sp, #56	; 0x38
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fa8:	f3ef 8310 	mrs	r3, PRIMASK
 8005fac:	617b      	str	r3, [r7, #20]
  return(result);
 8005fae:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fb0:	637b      	str	r3, [r7, #52]	; 0x34
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	f383 8810 	msr	PRIMASK, r3
}
 8005fbc:	46c0      	nop			; (mov r8, r8)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4925      	ldr	r1, [pc, #148]	; (8006060 <UART_EndRxTransfer+0xc0>)
 8005fca:	400a      	ands	r2, r1
 8005fcc:	601a      	str	r2, [r3, #0]
 8005fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fd0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	f383 8810 	msr	PRIMASK, r3
}
 8005fd8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fda:	f3ef 8310 	mrs	r3, PRIMASK
 8005fde:	623b      	str	r3, [r7, #32]
  return(result);
 8005fe0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fe2:	633b      	str	r3, [r7, #48]	; 0x30
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fea:	f383 8810 	msr	PRIMASK, r3
}
 8005fee:	46c0      	nop			; (mov r8, r8)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	689a      	ldr	r2, [r3, #8]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2101      	movs	r1, #1
 8005ffc:	438a      	bics	r2, r1
 8005ffe:	609a      	str	r2, [r3, #8]
 8006000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006002:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006006:	f383 8810 	msr	PRIMASK, r3
}
 800600a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006010:	2b01      	cmp	r3, #1
 8006012:	d118      	bne.n	8006046 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006014:	f3ef 8310 	mrs	r3, PRIMASK
 8006018:	60bb      	str	r3, [r7, #8]
  return(result);
 800601a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800601c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800601e:	2301      	movs	r3, #1
 8006020:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f383 8810 	msr	PRIMASK, r3
}
 8006028:	46c0      	nop			; (mov r8, r8)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2110      	movs	r1, #16
 8006036:	438a      	bics	r2, r1
 8006038:	601a      	str	r2, [r3, #0]
 800603a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800603c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	f383 8810 	msr	PRIMASK, r3
}
 8006044:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2220      	movs	r2, #32
 800604a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006058:	46c0      	nop			; (mov r8, r8)
 800605a:	46bd      	mov	sp, r7
 800605c:	b00e      	add	sp, #56	; 0x38
 800605e:	bd80      	pop	{r7, pc}
 8006060:	fffffedf 	.word	0xfffffedf

08006064 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006070:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	225a      	movs	r2, #90	; 0x5a
 8006076:	2100      	movs	r1, #0
 8006078:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2252      	movs	r2, #82	; 0x52
 800607e:	2100      	movs	r1, #0
 8006080:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	0018      	movs	r0, r3
 8006086:	f7ff fbdb 	bl	8005840 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800608a:	46c0      	nop			; (mov r8, r8)
 800608c:	46bd      	mov	sp, r7
 800608e:	b004      	add	sp, #16
 8006090:	bd80      	pop	{r7, pc}

08006092 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006092:	b580      	push	{r7, lr}
 8006094:	b086      	sub	sp, #24
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800609a:	f3ef 8310 	mrs	r3, PRIMASK
 800609e:	60bb      	str	r3, [r7, #8]
  return(result);
 80060a0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80060a2:	617b      	str	r3, [r7, #20]
 80060a4:	2301      	movs	r3, #1
 80060a6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f383 8810 	msr	PRIMASK, r3
}
 80060ae:	46c0      	nop			; (mov r8, r8)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	2140      	movs	r1, #64	; 0x40
 80060bc:	438a      	bics	r2, r1
 80060be:	601a      	str	r2, [r3, #0]
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	f383 8810 	msr	PRIMASK, r3
}
 80060ca:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2220      	movs	r2, #32
 80060d0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	0018      	movs	r0, r3
 80060dc:	f7ff fba8 	bl	8005830 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060e0:	46c0      	nop			; (mov r8, r8)
 80060e2:	46bd      	mov	sp, r7
 80060e4:	b006      	add	sp, #24
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b090      	sub	sp, #64	; 0x40
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80060f0:	203e      	movs	r0, #62	; 0x3e
 80060f2:	183b      	adds	r3, r7, r0
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	215c      	movs	r1, #92	; 0x5c
 80060f8:	5a52      	ldrh	r2, [r2, r1]
 80060fa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006100:	2b22      	cmp	r3, #34	; 0x22
 8006102:	d000      	beq.n	8006106 <UART_RxISR_8BIT+0x1e>
 8006104:	e095      	b.n	8006232 <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	213c      	movs	r1, #60	; 0x3c
 800610c:	187b      	adds	r3, r7, r1
 800610e:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8006110:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006112:	187b      	adds	r3, r7, r1
 8006114:	881b      	ldrh	r3, [r3, #0]
 8006116:	b2da      	uxtb	r2, r3
 8006118:	183b      	adds	r3, r7, r0
 800611a:	881b      	ldrh	r3, [r3, #0]
 800611c:	b2d9      	uxtb	r1, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006122:	400a      	ands	r2, r1
 8006124:	b2d2      	uxtb	r2, r2
 8006126:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800612c:	1c5a      	adds	r2, r3, #1
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	225a      	movs	r2, #90	; 0x5a
 8006136:	5a9b      	ldrh	r3, [r3, r2]
 8006138:	b29b      	uxth	r3, r3
 800613a:	3b01      	subs	r3, #1
 800613c:	b299      	uxth	r1, r3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	225a      	movs	r2, #90	; 0x5a
 8006142:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	225a      	movs	r2, #90	; 0x5a
 8006148:	5a9b      	ldrh	r3, [r3, r2]
 800614a:	b29b      	uxth	r3, r3
 800614c:	2b00      	cmp	r3, #0
 800614e:	d178      	bne.n	8006242 <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006150:	f3ef 8310 	mrs	r3, PRIMASK
 8006154:	61bb      	str	r3, [r7, #24]
  return(result);
 8006156:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006158:	63bb      	str	r3, [r7, #56]	; 0x38
 800615a:	2301      	movs	r3, #1
 800615c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	f383 8810 	msr	PRIMASK, r3
}
 8006164:	46c0      	nop			; (mov r8, r8)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4936      	ldr	r1, [pc, #216]	; (800624c <UART_RxISR_8BIT+0x164>)
 8006172:	400a      	ands	r2, r1
 8006174:	601a      	str	r2, [r3, #0]
 8006176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006178:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800617a:	6a3b      	ldr	r3, [r7, #32]
 800617c:	f383 8810 	msr	PRIMASK, r3
}
 8006180:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006182:	f3ef 8310 	mrs	r3, PRIMASK
 8006186:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006188:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800618a:	637b      	str	r3, [r7, #52]	; 0x34
 800618c:	2301      	movs	r3, #1
 800618e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006192:	f383 8810 	msr	PRIMASK, r3
}
 8006196:	46c0      	nop			; (mov r8, r8)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	689a      	ldr	r2, [r3, #8]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2101      	movs	r1, #1
 80061a4:	438a      	bics	r2, r1
 80061a6:	609a      	str	r2, [r3, #8]
 80061a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ae:	f383 8810 	msr	PRIMASK, r3
}
 80061b2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2220      	movs	r2, #32
 80061b8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d12f      	bne.n	8006228 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061ce:	f3ef 8310 	mrs	r3, PRIMASK
 80061d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80061d4:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061d6:	633b      	str	r3, [r7, #48]	; 0x30
 80061d8:	2301      	movs	r3, #1
 80061da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	f383 8810 	msr	PRIMASK, r3
}
 80061e2:	46c0      	nop			; (mov r8, r8)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2110      	movs	r1, #16
 80061f0:	438a      	bics	r2, r1
 80061f2:	601a      	str	r2, [r3, #0]
 80061f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	f383 8810 	msr	PRIMASK, r3
}
 80061fe:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	69db      	ldr	r3, [r3, #28]
 8006206:	2210      	movs	r2, #16
 8006208:	4013      	ands	r3, r2
 800620a:	2b10      	cmp	r3, #16
 800620c:	d103      	bne.n	8006216 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2210      	movs	r2, #16
 8006214:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2258      	movs	r2, #88	; 0x58
 800621a:	5a9a      	ldrh	r2, [r3, r2]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	0011      	movs	r1, r2
 8006220:	0018      	movs	r0, r3
 8006222:	f7ff fb15 	bl	8005850 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006226:	e00c      	b.n	8006242 <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	0018      	movs	r0, r3
 800622c:	f7fa fa86 	bl	800073c <HAL_UART_RxCpltCallback>
}
 8006230:	e007      	b.n	8006242 <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	699a      	ldr	r2, [r3, #24]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2108      	movs	r1, #8
 800623e:	430a      	orrs	r2, r1
 8006240:	619a      	str	r2, [r3, #24]
}
 8006242:	46c0      	nop			; (mov r8, r8)
 8006244:	46bd      	mov	sp, r7
 8006246:	b010      	add	sp, #64	; 0x40
 8006248:	bd80      	pop	{r7, pc}
 800624a:	46c0      	nop			; (mov r8, r8)
 800624c:	fffffedf 	.word	0xfffffedf

08006250 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b090      	sub	sp, #64	; 0x40
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006258:	203e      	movs	r0, #62	; 0x3e
 800625a:	183b      	adds	r3, r7, r0
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	215c      	movs	r1, #92	; 0x5c
 8006260:	5a52      	ldrh	r2, [r2, r1]
 8006262:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006268:	2b22      	cmp	r3, #34	; 0x22
 800626a:	d000      	beq.n	800626e <UART_RxISR_16BIT+0x1e>
 800626c:	e095      	b.n	800639a <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	213c      	movs	r1, #60	; 0x3c
 8006274:	187b      	adds	r3, r7, r1
 8006276:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8006278:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800627e:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8006280:	187b      	adds	r3, r7, r1
 8006282:	183a      	adds	r2, r7, r0
 8006284:	881b      	ldrh	r3, [r3, #0]
 8006286:	8812      	ldrh	r2, [r2, #0]
 8006288:	4013      	ands	r3, r2
 800628a:	b29a      	uxth	r2, r3
 800628c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800628e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006294:	1c9a      	adds	r2, r3, #2
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	225a      	movs	r2, #90	; 0x5a
 800629e:	5a9b      	ldrh	r3, [r3, r2]
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	3b01      	subs	r3, #1
 80062a4:	b299      	uxth	r1, r3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	225a      	movs	r2, #90	; 0x5a
 80062aa:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	225a      	movs	r2, #90	; 0x5a
 80062b0:	5a9b      	ldrh	r3, [r3, r2]
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d178      	bne.n	80063aa <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062b8:	f3ef 8310 	mrs	r3, PRIMASK
 80062bc:	617b      	str	r3, [r7, #20]
  return(result);
 80062be:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062c0:	637b      	str	r3, [r7, #52]	; 0x34
 80062c2:	2301      	movs	r3, #1
 80062c4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	f383 8810 	msr	PRIMASK, r3
}
 80062cc:	46c0      	nop			; (mov r8, r8)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4936      	ldr	r1, [pc, #216]	; (80063b4 <UART_RxISR_16BIT+0x164>)
 80062da:	400a      	ands	r2, r1
 80062dc:	601a      	str	r2, [r3, #0]
 80062de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	f383 8810 	msr	PRIMASK, r3
}
 80062e8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062ea:	f3ef 8310 	mrs	r3, PRIMASK
 80062ee:	623b      	str	r3, [r7, #32]
  return(result);
 80062f0:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062f2:	633b      	str	r3, [r7, #48]	; 0x30
 80062f4:	2301      	movs	r3, #1
 80062f6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fa:	f383 8810 	msr	PRIMASK, r3
}
 80062fe:	46c0      	nop			; (mov r8, r8)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	689a      	ldr	r2, [r3, #8]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2101      	movs	r1, #1
 800630c:	438a      	bics	r2, r1
 800630e:	609a      	str	r2, [r3, #8]
 8006310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006312:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006316:	f383 8810 	msr	PRIMASK, r3
}
 800631a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2220      	movs	r2, #32
 8006320:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800632c:	2b01      	cmp	r3, #1
 800632e:	d12f      	bne.n	8006390 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006336:	f3ef 8310 	mrs	r3, PRIMASK
 800633a:	60bb      	str	r3, [r7, #8]
  return(result);
 800633c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800633e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006340:	2301      	movs	r3, #1
 8006342:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f383 8810 	msr	PRIMASK, r3
}
 800634a:	46c0      	nop			; (mov r8, r8)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2110      	movs	r1, #16
 8006358:	438a      	bics	r2, r1
 800635a:	601a      	str	r2, [r3, #0]
 800635c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800635e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	f383 8810 	msr	PRIMASK, r3
}
 8006366:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	69db      	ldr	r3, [r3, #28]
 800636e:	2210      	movs	r2, #16
 8006370:	4013      	ands	r3, r2
 8006372:	2b10      	cmp	r3, #16
 8006374:	d103      	bne.n	800637e <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2210      	movs	r2, #16
 800637c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2258      	movs	r2, #88	; 0x58
 8006382:	5a9a      	ldrh	r2, [r3, r2]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	0011      	movs	r1, r2
 8006388:	0018      	movs	r0, r3
 800638a:	f7ff fa61 	bl	8005850 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800638e:	e00c      	b.n	80063aa <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	0018      	movs	r0, r3
 8006394:	f7fa f9d2 	bl	800073c <HAL_UART_RxCpltCallback>
}
 8006398:	e007      	b.n	80063aa <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	699a      	ldr	r2, [r3, #24]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2108      	movs	r1, #8
 80063a6:	430a      	orrs	r2, r1
 80063a8:	619a      	str	r2, [r3, #24]
}
 80063aa:	46c0      	nop			; (mov r8, r8)
 80063ac:	46bd      	mov	sp, r7
 80063ae:	b010      	add	sp, #64	; 0x40
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	46c0      	nop			; (mov r8, r8)
 80063b4:	fffffedf 	.word	0xfffffedf

080063b8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80063c0:	46c0      	nop			; (mov r8, r8)
 80063c2:	46bd      	mov	sp, r7
 80063c4:	b002      	add	sp, #8
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b088      	sub	sp, #32
 80063cc:	af02      	add	r7, sp, #8
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	1d3b      	adds	r3, r7, #4
 80063d2:	6019      	str	r1, [r3, #0]
 80063d4:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063d6:	2317      	movs	r3, #23
 80063d8:	18fb      	adds	r3, r7, r3
 80063da:	2200      	movs	r2, #0
 80063dc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2274      	movs	r2, #116	; 0x74
 80063e2:	5c9b      	ldrb	r3, [r3, r2]
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d101      	bne.n	80063ec <HAL_UARTEx_StopModeWakeUpSourceConfig+0x24>
 80063e8:	2302      	movs	r3, #2
 80063ea:	e04a      	b.n	8006482 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xba>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2274      	movs	r2, #116	; 0x74
 80063f0:	2101      	movs	r1, #1
 80063f2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2224      	movs	r2, #36	; 0x24
 80063f8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2101      	movs	r1, #1
 8006406:	438a      	bics	r2, r1
 8006408:	601a      	str	r2, [r3, #0]

#if defined(USART_CR3_WUS)
  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	4a1e      	ldr	r2, [pc, #120]	; (800648c <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc4>)
 8006412:	4013      	ands	r3, r2
 8006414:	0019      	movs	r1, r3
 8006416:	1d3b      	adds	r3, r7, #4
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	430a      	orrs	r2, r1
 8006420:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_WUS */

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8006422:	1d3b      	adds	r3, r7, #4
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d105      	bne.n	8006436 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x6e>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800642a:	1d3b      	adds	r3, r7, #4
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	6819      	ldr	r1, [r3, #0]
 8006430:	685a      	ldr	r2, [r3, #4]
 8006432:	f000 f860 	bl	80064f6 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2101      	movs	r1, #1
 8006442:	430a      	orrs	r2, r1
 8006444:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006446:	f7fb faa3 	bl	8001990 <HAL_GetTick>
 800644a:	0003      	movs	r3, r0
 800644c:	613b      	str	r3, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	2280      	movs	r2, #128	; 0x80
 8006452:	03d1      	lsls	r1, r2, #15
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	4a0e      	ldr	r2, [pc, #56]	; (8006490 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc8>)
 8006458:	9200      	str	r2, [sp, #0]
 800645a:	2200      	movs	r2, #0
 800645c:	f7ff fc40 	bl	8005ce0 <UART_WaitOnFlagUntilTimeout>
 8006460:	1e03      	subs	r3, r0, #0
 8006462:	d004      	beq.n	800646e <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa6>
  {
    status = HAL_TIMEOUT;
 8006464:	2317      	movs	r3, #23
 8006466:	18fb      	adds	r3, r7, r3
 8006468:	2203      	movs	r2, #3
 800646a:	701a      	strb	r2, [r3, #0]
 800646c:	e002      	b.n	8006474 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xac>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2220      	movs	r2, #32
 8006472:	679a      	str	r2, [r3, #120]	; 0x78
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2274      	movs	r2, #116	; 0x74
 8006478:	2100      	movs	r1, #0
 800647a:	5499      	strb	r1, [r3, r2]

  return status;
 800647c:	2317      	movs	r3, #23
 800647e:	18fb      	adds	r3, r7, r3
 8006480:	781b      	ldrb	r3, [r3, #0]
}
 8006482:	0018      	movs	r0, r3
 8006484:	46bd      	mov	sp, r7
 8006486:	b006      	add	sp, #24
 8006488:	bd80      	pop	{r7, pc}
 800648a:	46c0      	nop			; (mov r8, r8)
 800648c:	ffcfffff 	.word	0xffcfffff
 8006490:	01ffffff 	.word	0x01ffffff

08006494 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b086      	sub	sp, #24
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2274      	movs	r2, #116	; 0x74
 80064a0:	5c9b      	ldrb	r3, [r3, r2]
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d101      	bne.n	80064aa <HAL_UARTEx_EnableStopMode+0x16>
 80064a6:	2302      	movs	r3, #2
 80064a8:	e021      	b.n	80064ee <HAL_UARTEx_EnableStopMode+0x5a>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2274      	movs	r2, #116	; 0x74
 80064ae:	2101      	movs	r1, #1
 80064b0:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064b2:	f3ef 8310 	mrs	r3, PRIMASK
 80064b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80064b8:	68bb      	ldr	r3, [r7, #8]

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 80064ba:	617b      	str	r3, [r7, #20]
 80064bc:	2301      	movs	r3, #1
 80064be:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f383 8810 	msr	PRIMASK, r3
}
 80064c6:	46c0      	nop			; (mov r8, r8)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2102      	movs	r1, #2
 80064d4:	430a      	orrs	r2, r1
 80064d6:	601a      	str	r2, [r3, #0]
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	f383 8810 	msr	PRIMASK, r3
}
 80064e2:	46c0      	nop			; (mov r8, r8)

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2274      	movs	r2, #116	; 0x74
 80064e8:	2100      	movs	r1, #0
 80064ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	0018      	movs	r0, r3
 80064f0:	46bd      	mov	sp, r7
 80064f2:	b006      	add	sp, #24
 80064f4:	bd80      	pop	{r7, pc}

080064f6 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b084      	sub	sp, #16
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	60f8      	str	r0, [r7, #12]
 80064fe:	1d3b      	adds	r3, r7, #4
 8006500:	6019      	str	r1, [r3, #0]
 8006502:	605a      	str	r2, [r3, #4]
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	2210      	movs	r2, #16
 800650c:	4393      	bics	r3, r2
 800650e:	001a      	movs	r2, r3
 8006510:	1d3b      	adds	r3, r7, #4
 8006512:	889b      	ldrh	r3, [r3, #4]
 8006514:	0019      	movs	r1, r3
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	430a      	orrs	r2, r1
 800651c:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	021b      	lsls	r3, r3, #8
 8006526:	0a19      	lsrs	r1, r3, #8
 8006528:	1d3b      	adds	r3, r7, #4
 800652a:	799b      	ldrb	r3, [r3, #6]
 800652c:	061a      	lsls	r2, r3, #24
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	430a      	orrs	r2, r1
 8006534:	605a      	str	r2, [r3, #4]
}
 8006536:	46c0      	nop			; (mov r8, r8)
 8006538:	46bd      	mov	sp, r7
 800653a:	b004      	add	sp, #16
 800653c:	bd80      	pop	{r7, pc}
	...

08006540 <__errno>:
 8006540:	4b01      	ldr	r3, [pc, #4]	; (8006548 <__errno+0x8>)
 8006542:	6818      	ldr	r0, [r3, #0]
 8006544:	4770      	bx	lr
 8006546:	46c0      	nop			; (mov r8, r8)
 8006548:	20000028 	.word	0x20000028

0800654c <__libc_init_array>:
 800654c:	b570      	push	{r4, r5, r6, lr}
 800654e:	2600      	movs	r6, #0
 8006550:	4d0c      	ldr	r5, [pc, #48]	; (8006584 <__libc_init_array+0x38>)
 8006552:	4c0d      	ldr	r4, [pc, #52]	; (8006588 <__libc_init_array+0x3c>)
 8006554:	1b64      	subs	r4, r4, r5
 8006556:	10a4      	asrs	r4, r4, #2
 8006558:	42a6      	cmp	r6, r4
 800655a:	d109      	bne.n	8006570 <__libc_init_array+0x24>
 800655c:	2600      	movs	r6, #0
 800655e:	f000 f8e7 	bl	8006730 <_init>
 8006562:	4d0a      	ldr	r5, [pc, #40]	; (800658c <__libc_init_array+0x40>)
 8006564:	4c0a      	ldr	r4, [pc, #40]	; (8006590 <__libc_init_array+0x44>)
 8006566:	1b64      	subs	r4, r4, r5
 8006568:	10a4      	asrs	r4, r4, #2
 800656a:	42a6      	cmp	r6, r4
 800656c:	d105      	bne.n	800657a <__libc_init_array+0x2e>
 800656e:	bd70      	pop	{r4, r5, r6, pc}
 8006570:	00b3      	lsls	r3, r6, #2
 8006572:	58eb      	ldr	r3, [r5, r3]
 8006574:	4798      	blx	r3
 8006576:	3601      	adds	r6, #1
 8006578:	e7ee      	b.n	8006558 <__libc_init_array+0xc>
 800657a:	00b3      	lsls	r3, r6, #2
 800657c:	58eb      	ldr	r3, [r5, r3]
 800657e:	4798      	blx	r3
 8006580:	3601      	adds	r6, #1
 8006582:	e7f2      	b.n	800656a <__libc_init_array+0x1e>
 8006584:	08006784 	.word	0x08006784
 8006588:	08006784 	.word	0x08006784
 800658c:	08006784 	.word	0x08006784
 8006590:	08006788 	.word	0x08006788

08006594 <malloc>:
 8006594:	b510      	push	{r4, lr}
 8006596:	4b03      	ldr	r3, [pc, #12]	; (80065a4 <malloc+0x10>)
 8006598:	0001      	movs	r1, r0
 800659a:	6818      	ldr	r0, [r3, #0]
 800659c:	f000 f82e 	bl	80065fc <_malloc_r>
 80065a0:	bd10      	pop	{r4, pc}
 80065a2:	46c0      	nop			; (mov r8, r8)
 80065a4:	20000028 	.word	0x20000028

080065a8 <memset>:
 80065a8:	0003      	movs	r3, r0
 80065aa:	1882      	adds	r2, r0, r2
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d100      	bne.n	80065b2 <memset+0xa>
 80065b0:	4770      	bx	lr
 80065b2:	7019      	strb	r1, [r3, #0]
 80065b4:	3301      	adds	r3, #1
 80065b6:	e7f9      	b.n	80065ac <memset+0x4>

080065b8 <sbrk_aligned>:
 80065b8:	b570      	push	{r4, r5, r6, lr}
 80065ba:	4e0f      	ldr	r6, [pc, #60]	; (80065f8 <sbrk_aligned+0x40>)
 80065bc:	000d      	movs	r5, r1
 80065be:	6831      	ldr	r1, [r6, #0]
 80065c0:	0004      	movs	r4, r0
 80065c2:	2900      	cmp	r1, #0
 80065c4:	d102      	bne.n	80065cc <sbrk_aligned+0x14>
 80065c6:	f000 f88f 	bl	80066e8 <_sbrk_r>
 80065ca:	6030      	str	r0, [r6, #0]
 80065cc:	0029      	movs	r1, r5
 80065ce:	0020      	movs	r0, r4
 80065d0:	f000 f88a 	bl	80066e8 <_sbrk_r>
 80065d4:	1c43      	adds	r3, r0, #1
 80065d6:	d00a      	beq.n	80065ee <sbrk_aligned+0x36>
 80065d8:	2303      	movs	r3, #3
 80065da:	1cc5      	adds	r5, r0, #3
 80065dc:	439d      	bics	r5, r3
 80065de:	42a8      	cmp	r0, r5
 80065e0:	d007      	beq.n	80065f2 <sbrk_aligned+0x3a>
 80065e2:	1a29      	subs	r1, r5, r0
 80065e4:	0020      	movs	r0, r4
 80065e6:	f000 f87f 	bl	80066e8 <_sbrk_r>
 80065ea:	1c43      	adds	r3, r0, #1
 80065ec:	d101      	bne.n	80065f2 <sbrk_aligned+0x3a>
 80065ee:	2501      	movs	r5, #1
 80065f0:	426d      	negs	r5, r5
 80065f2:	0028      	movs	r0, r5
 80065f4:	bd70      	pop	{r4, r5, r6, pc}
 80065f6:	46c0      	nop			; (mov r8, r8)
 80065f8:	200003d8 	.word	0x200003d8

080065fc <_malloc_r>:
 80065fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065fe:	2203      	movs	r2, #3
 8006600:	1ccb      	adds	r3, r1, #3
 8006602:	4393      	bics	r3, r2
 8006604:	3308      	adds	r3, #8
 8006606:	0006      	movs	r6, r0
 8006608:	001f      	movs	r7, r3
 800660a:	2b0c      	cmp	r3, #12
 800660c:	d232      	bcs.n	8006674 <_malloc_r+0x78>
 800660e:	270c      	movs	r7, #12
 8006610:	42b9      	cmp	r1, r7
 8006612:	d831      	bhi.n	8006678 <_malloc_r+0x7c>
 8006614:	0030      	movs	r0, r6
 8006616:	f000 f879 	bl	800670c <__malloc_lock>
 800661a:	4d32      	ldr	r5, [pc, #200]	; (80066e4 <_malloc_r+0xe8>)
 800661c:	682b      	ldr	r3, [r5, #0]
 800661e:	001c      	movs	r4, r3
 8006620:	2c00      	cmp	r4, #0
 8006622:	d12e      	bne.n	8006682 <_malloc_r+0x86>
 8006624:	0039      	movs	r1, r7
 8006626:	0030      	movs	r0, r6
 8006628:	f7ff ffc6 	bl	80065b8 <sbrk_aligned>
 800662c:	0004      	movs	r4, r0
 800662e:	1c43      	adds	r3, r0, #1
 8006630:	d11e      	bne.n	8006670 <_malloc_r+0x74>
 8006632:	682c      	ldr	r4, [r5, #0]
 8006634:	0025      	movs	r5, r4
 8006636:	2d00      	cmp	r5, #0
 8006638:	d14a      	bne.n	80066d0 <_malloc_r+0xd4>
 800663a:	6823      	ldr	r3, [r4, #0]
 800663c:	0029      	movs	r1, r5
 800663e:	18e3      	adds	r3, r4, r3
 8006640:	0030      	movs	r0, r6
 8006642:	9301      	str	r3, [sp, #4]
 8006644:	f000 f850 	bl	80066e8 <_sbrk_r>
 8006648:	9b01      	ldr	r3, [sp, #4]
 800664a:	4283      	cmp	r3, r0
 800664c:	d143      	bne.n	80066d6 <_malloc_r+0xda>
 800664e:	6823      	ldr	r3, [r4, #0]
 8006650:	3703      	adds	r7, #3
 8006652:	1aff      	subs	r7, r7, r3
 8006654:	2303      	movs	r3, #3
 8006656:	439f      	bics	r7, r3
 8006658:	3708      	adds	r7, #8
 800665a:	2f0c      	cmp	r7, #12
 800665c:	d200      	bcs.n	8006660 <_malloc_r+0x64>
 800665e:	270c      	movs	r7, #12
 8006660:	0039      	movs	r1, r7
 8006662:	0030      	movs	r0, r6
 8006664:	f7ff ffa8 	bl	80065b8 <sbrk_aligned>
 8006668:	1c43      	adds	r3, r0, #1
 800666a:	d034      	beq.n	80066d6 <_malloc_r+0xda>
 800666c:	6823      	ldr	r3, [r4, #0]
 800666e:	19df      	adds	r7, r3, r7
 8006670:	6027      	str	r7, [r4, #0]
 8006672:	e013      	b.n	800669c <_malloc_r+0xa0>
 8006674:	2b00      	cmp	r3, #0
 8006676:	dacb      	bge.n	8006610 <_malloc_r+0x14>
 8006678:	230c      	movs	r3, #12
 800667a:	2500      	movs	r5, #0
 800667c:	6033      	str	r3, [r6, #0]
 800667e:	0028      	movs	r0, r5
 8006680:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006682:	6822      	ldr	r2, [r4, #0]
 8006684:	1bd1      	subs	r1, r2, r7
 8006686:	d420      	bmi.n	80066ca <_malloc_r+0xce>
 8006688:	290b      	cmp	r1, #11
 800668a:	d917      	bls.n	80066bc <_malloc_r+0xc0>
 800668c:	19e2      	adds	r2, r4, r7
 800668e:	6027      	str	r7, [r4, #0]
 8006690:	42a3      	cmp	r3, r4
 8006692:	d111      	bne.n	80066b8 <_malloc_r+0xbc>
 8006694:	602a      	str	r2, [r5, #0]
 8006696:	6863      	ldr	r3, [r4, #4]
 8006698:	6011      	str	r1, [r2, #0]
 800669a:	6053      	str	r3, [r2, #4]
 800669c:	0030      	movs	r0, r6
 800669e:	0025      	movs	r5, r4
 80066a0:	f000 f83c 	bl	800671c <__malloc_unlock>
 80066a4:	2207      	movs	r2, #7
 80066a6:	350b      	adds	r5, #11
 80066a8:	1d23      	adds	r3, r4, #4
 80066aa:	4395      	bics	r5, r2
 80066ac:	1aea      	subs	r2, r5, r3
 80066ae:	429d      	cmp	r5, r3
 80066b0:	d0e5      	beq.n	800667e <_malloc_r+0x82>
 80066b2:	1b5b      	subs	r3, r3, r5
 80066b4:	50a3      	str	r3, [r4, r2]
 80066b6:	e7e2      	b.n	800667e <_malloc_r+0x82>
 80066b8:	605a      	str	r2, [r3, #4]
 80066ba:	e7ec      	b.n	8006696 <_malloc_r+0x9a>
 80066bc:	6862      	ldr	r2, [r4, #4]
 80066be:	42a3      	cmp	r3, r4
 80066c0:	d101      	bne.n	80066c6 <_malloc_r+0xca>
 80066c2:	602a      	str	r2, [r5, #0]
 80066c4:	e7ea      	b.n	800669c <_malloc_r+0xa0>
 80066c6:	605a      	str	r2, [r3, #4]
 80066c8:	e7e8      	b.n	800669c <_malloc_r+0xa0>
 80066ca:	0023      	movs	r3, r4
 80066cc:	6864      	ldr	r4, [r4, #4]
 80066ce:	e7a7      	b.n	8006620 <_malloc_r+0x24>
 80066d0:	002c      	movs	r4, r5
 80066d2:	686d      	ldr	r5, [r5, #4]
 80066d4:	e7af      	b.n	8006636 <_malloc_r+0x3a>
 80066d6:	230c      	movs	r3, #12
 80066d8:	0030      	movs	r0, r6
 80066da:	6033      	str	r3, [r6, #0]
 80066dc:	f000 f81e 	bl	800671c <__malloc_unlock>
 80066e0:	e7cd      	b.n	800667e <_malloc_r+0x82>
 80066e2:	46c0      	nop			; (mov r8, r8)
 80066e4:	200003d4 	.word	0x200003d4

080066e8 <_sbrk_r>:
 80066e8:	2300      	movs	r3, #0
 80066ea:	b570      	push	{r4, r5, r6, lr}
 80066ec:	4d06      	ldr	r5, [pc, #24]	; (8006708 <_sbrk_r+0x20>)
 80066ee:	0004      	movs	r4, r0
 80066f0:	0008      	movs	r0, r1
 80066f2:	602b      	str	r3, [r5, #0]
 80066f4:	f7fb f88c 	bl	8001810 <_sbrk>
 80066f8:	1c43      	adds	r3, r0, #1
 80066fa:	d103      	bne.n	8006704 <_sbrk_r+0x1c>
 80066fc:	682b      	ldr	r3, [r5, #0]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d000      	beq.n	8006704 <_sbrk_r+0x1c>
 8006702:	6023      	str	r3, [r4, #0]
 8006704:	bd70      	pop	{r4, r5, r6, pc}
 8006706:	46c0      	nop			; (mov r8, r8)
 8006708:	200003dc 	.word	0x200003dc

0800670c <__malloc_lock>:
 800670c:	b510      	push	{r4, lr}
 800670e:	4802      	ldr	r0, [pc, #8]	; (8006718 <__malloc_lock+0xc>)
 8006710:	f000 f80c 	bl	800672c <__retarget_lock_acquire_recursive>
 8006714:	bd10      	pop	{r4, pc}
 8006716:	46c0      	nop			; (mov r8, r8)
 8006718:	200003e0 	.word	0x200003e0

0800671c <__malloc_unlock>:
 800671c:	b510      	push	{r4, lr}
 800671e:	4802      	ldr	r0, [pc, #8]	; (8006728 <__malloc_unlock+0xc>)
 8006720:	f000 f805 	bl	800672e <__retarget_lock_release_recursive>
 8006724:	bd10      	pop	{r4, pc}
 8006726:	46c0      	nop			; (mov r8, r8)
 8006728:	200003e0 	.word	0x200003e0

0800672c <__retarget_lock_acquire_recursive>:
 800672c:	4770      	bx	lr

0800672e <__retarget_lock_release_recursive>:
 800672e:	4770      	bx	lr

08006730 <_init>:
 8006730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006732:	46c0      	nop			; (mov r8, r8)
 8006734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006736:	bc08      	pop	{r3}
 8006738:	469e      	mov	lr, r3
 800673a:	4770      	bx	lr

0800673c <_fini>:
 800673c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800673e:	46c0      	nop			; (mov r8, r8)
 8006740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006742:	bc08      	pop	{r3}
 8006744:	469e      	mov	lr, r3
 8006746:	4770      	bx	lr
