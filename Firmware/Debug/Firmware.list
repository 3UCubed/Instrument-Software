
Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ef8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  08006fb8  08006fb8  00016fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800719c  0800719c  00020050  2**0
                  CONTENTS
  4 .ARM          00000000  0800719c  0800719c  00020050  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800719c  0800719c  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800719c  0800719c  0001719c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071a0  080071a0  000171a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  080071a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000420  20000050  080071f4  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000470  080071f4  00020470  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015f6d  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b15  00000000  00000000  00035fe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001378  00000000  00000000  00038b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001260  00000000  00000000  00039e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000133bf  00000000  00000000  0003b0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017cd7  00000000  00000000  0004e497  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00074cdd  00000000  00000000  0006616e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dae4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004754  00000000  00000000  000dae9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000050 	.word	0x20000050
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006fa0 	.word	0x08006fa0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000054 	.word	0x20000054
 8000104:	08006fa0 	.word	0x08006fa0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <add_to_gpiobuf>:

uint8_t PMT_ON = 1;
uint8_t ERPA_ON = 1;
uint8_t HK_ON = 1;

void add_to_gpiobuf(const char *str) {
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
	int len = strlen(str);
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	0018      	movs	r0, r3
 800023c:	f7ff ff64 	bl	8000108 <strlen>
 8000240:	0003      	movs	r3, r0
 8000242:	60fb      	str	r3, [r7, #12]

	if (writeIndex + len < BUFFER_SIZE) {
 8000244:	4b0e      	ldr	r3, [pc, #56]	; (8000280 <add_to_gpiobuf+0x50>)
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	001a      	movs	r2, r3
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	18d3      	adds	r3, r2, r3
 800024e:	2b63      	cmp	r3, #99	; 0x63
 8000250:	dc11      	bgt.n	8000276 <add_to_gpiobuf+0x46>
		strncpy(&gpio_buf[writeIndex], str, len);
 8000252:	4b0b      	ldr	r3, [pc, #44]	; (8000280 <add_to_gpiobuf+0x50>)
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	001a      	movs	r2, r3
 8000258:	4b0a      	ldr	r3, [pc, #40]	; (8000284 <add_to_gpiobuf+0x54>)
 800025a:	18d3      	adds	r3, r2, r3
 800025c:	68fa      	ldr	r2, [r7, #12]
 800025e:	6879      	ldr	r1, [r7, #4]
 8000260:	0018      	movs	r0, r3
 8000262:	f006 fe89 	bl	8006f78 <strncpy>
		writeIndex += len;
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	b2da      	uxtb	r2, r3
 800026a:	4b05      	ldr	r3, [pc, #20]	; (8000280 <add_to_gpiobuf+0x50>)
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	18d3      	adds	r3, r2, r3
 8000270:	b2da      	uxtb	r2, r3
 8000272:	4b03      	ldr	r3, [pc, #12]	; (8000280 <add_to_gpiobuf+0x50>)
 8000274:	701a      	strb	r2, [r3, #0]
	}

}
 8000276:	46c0      	nop			; (mov r8, r8)
 8000278:	46bd      	mov	sp, r7
 800027a:	b004      	add	sp, #16
 800027c:	bd80      	pop	{r7, pc}
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	20000390 	.word	0x20000390
 8000284:	2000032c 	.word	0x2000032c

08000288 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8000288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800028a:	b091      	sub	sp, #68	; 0x44
 800028c:	af02      	add	r7, sp, #8
 800028e:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8000290:	687a      	ldr	r2, [r7, #4]
 8000292:	4bb3      	ldr	r3, [pc, #716]	; (8000560 <HAL_TIM_OC_DelayElapsedCallback+0x2d8>)
 8000294:	429a      	cmp	r2, r3
 8000296:	d000      	beq.n	800029a <HAL_TIM_OC_DelayElapsedCallback+0x12>
 8000298:	e2dc      	b.n	8000854 <HAL_TIM_OC_DelayElapsedCallback+0x5cc>
		if (!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8))) { //check pin state
 800029a:	2380      	movs	r3, #128	; 0x80
 800029c:	005a      	lsls	r2, r3, #1
 800029e:	2390      	movs	r3, #144	; 0x90
 80002a0:	05db      	lsls	r3, r3, #23
 80002a2:	0011      	movs	r1, r2
 80002a4:	0018      	movs	r0, r3
 80002a6:	f002 fdcd 	bl	8002e44 <HAL_GPIO_ReadPin>
 80002aa:	1e03      	subs	r3, r0, #0
 80002ac:	d000      	beq.n	80002b0 <HAL_TIM_OC_DelayElapsedCallback+0x28>
 80002ae:	e31b      	b.n	80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x660>
			if (ERPA_ON) {
 80002b0:	4bac      	ldr	r3, [pc, #688]	; (8000564 <HAL_TIM_OC_DelayElapsedCallback+0x2dc>)
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d100      	bne.n	80002ba <HAL_TIM_OC_DelayElapsedCallback+0x32>
 80002b8:	e0c2      	b.n	8000440 <HAL_TIM_OC_DelayElapsedCallback+0x1b8>
				 * Steps DAC
				 * +/- 0.5v Every 100ms
				 */

				/* Write to SPI (begin transfer?) */
				HAL_SPI_Transmit(&hspi1, (uint8_t*) &WRITE, 1, 1);
 80002ba:	49ab      	ldr	r1, [pc, #684]	; (8000568 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 80002bc:	48ab      	ldr	r0, [pc, #684]	; (800056c <HAL_TIM_OC_DelayElapsedCallback+0x2e4>)
 80002be:	2301      	movs	r3, #1
 80002c0:	2201      	movs	r2, #1
 80002c2:	f004 f94d 	bl	8004560 <HAL_SPI_Transmit>

				while (!(SPI1->SR))
 80002c6:	46c0      	nop			; (mov r8, r8)
 80002c8:	4ba9      	ldr	r3, [pc, #676]	; (8000570 <HAL_TIM_OC_DelayElapsedCallback+0x2e8>)
 80002ca:	689b      	ldr	r3, [r3, #8]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d0fb      	beq.n	80002c8 <HAL_TIM_OC_DelayElapsedCallback+0x40>
					;

				raw = SPI1->DR;
 80002d0:	4ba7      	ldr	r3, [pc, #668]	; (8000570 <HAL_TIM_OC_DelayElapsedCallback+0x2e8>)
 80002d2:	68db      	ldr	r3, [r3, #12]
 80002d4:	001a      	movs	r2, r3
 80002d6:	4ba7      	ldr	r3, [pc, #668]	; (8000574 <HAL_TIM_OC_DelayElapsedCallback+0x2ec>)
 80002d8:	601a      	str	r2, [r3, #0]

				DAC->DHR12R1 = DAC_OUT[step];
 80002da:	4ba7      	ldr	r3, [pc, #668]	; (8000578 <HAL_TIM_OC_DelayElapsedCallback+0x2f0>)
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	0019      	movs	r1, r3
 80002e0:	4ba6      	ldr	r3, [pc, #664]	; (800057c <HAL_TIM_OC_DelayElapsedCallback+0x2f4>)
 80002e2:	4aa7      	ldr	r2, [pc, #668]	; (8000580 <HAL_TIM_OC_DelayElapsedCallback+0x2f8>)
 80002e4:	0089      	lsls	r1, r1, #2
 80002e6:	588a      	ldr	r2, [r1, r2]
 80002e8:	609a      	str	r2, [r3, #8]

				HAL_ADC_Start_DMA(&hadc, (uint32_t*) adcResultsDMA,
 80002ea:	2311      	movs	r3, #17
 80002ec:	001a      	movs	r2, r3
 80002ee:	49a5      	ldr	r1, [pc, #660]	; (8000584 <HAL_TIM_OC_DelayElapsedCallback+0x2fc>)
 80002f0:	4ba5      	ldr	r3, [pc, #660]	; (8000588 <HAL_TIM_OC_DelayElapsedCallback+0x300>)
 80002f2:	0018      	movs	r0, r3
 80002f4:	f001 fdf8 	bl	8001ee8 <HAL_ADC_Start_DMA>
						adcChannelCount);
				uint16_t PA0 = adcResultsDMA[0]; //ADC_IN0, END_mon: entrance/collimator monitor
 80002f8:	2132      	movs	r1, #50	; 0x32
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	4aa1      	ldr	r2, [pc, #644]	; (8000584 <HAL_TIM_OC_DelayElapsedCallback+0x2fc>)
 80002fe:	8812      	ldrh	r2, [r2, #0]
 8000300:	801a      	strh	r2, [r3, #0]
				uint16_t PA7 = adcResultsDMA[6]; //ADC_IN7, SWP_mon: Sweep voltage monitor
 8000302:	2030      	movs	r0, #48	; 0x30
 8000304:	183b      	adds	r3, r7, r0
 8000306:	4a9f      	ldr	r2, [pc, #636]	; (8000584 <HAL_TIM_OC_DelayElapsedCallback+0x2fc>)
 8000308:	8992      	ldrh	r2, [r2, #12]
 800030a:	801a      	strh	r2, [r3, #0]
				uint16_t PB0 = adcResultsDMA[7]; //ADC_IN8, TMP 1: Sweep temperature
 800030c:	242e      	movs	r4, #46	; 0x2e
 800030e:	193b      	adds	r3, r7, r4
 8000310:	4a9c      	ldr	r2, [pc, #624]	; (8000584 <HAL_TIM_OC_DelayElapsedCallback+0x2fc>)
 8000312:	89d2      	ldrh	r2, [r2, #14]
 8000314:	801a      	strh	r2, [r3, #0]
				uint16_t PB1 = adcResultsDMA[8]; //ADC_IN9, TMP 2: feedbacks
 8000316:	252c      	movs	r5, #44	; 0x2c
 8000318:	197b      	adds	r3, r7, r5
 800031a:	4a9a      	ldr	r2, [pc, #616]	; (8000584 <HAL_TIM_OC_DelayElapsedCallback+0x2fc>)
 800031c:	8a12      	ldrh	r2, [r2, #16]
 800031e:	801a      	strh	r2, [r3, #0]

				erpa_buf[0] = erpa_sync; // ERPA SYNC 0xAA MSB
 8000320:	22aa      	movs	r2, #170	; 0xaa
 8000322:	4b9a      	ldr	r3, [pc, #616]	; (800058c <HAL_TIM_OC_DelayElapsedCallback+0x304>)
 8000324:	701a      	strb	r2, [r3, #0]
				erpa_buf[1] = erpa_sync; // ERPA SYNC 0xAA LSB
 8000326:	22aa      	movs	r2, #170	; 0xaa
 8000328:	4b98      	ldr	r3, [pc, #608]	; (800058c <HAL_TIM_OC_DelayElapsedCallback+0x304>)
 800032a:	705a      	strb	r2, [r3, #1]
				erpa_buf[2] = ((erpa_seq & 0xFF00) >> 8); // ERPA SEQ # MSB
 800032c:	4b98      	ldr	r3, [pc, #608]	; (8000590 <HAL_TIM_OC_DelayElapsedCallback+0x308>)
 800032e:	881b      	ldrh	r3, [r3, #0]
 8000330:	0a1b      	lsrs	r3, r3, #8
 8000332:	b29b      	uxth	r3, r3
 8000334:	b2da      	uxtb	r2, r3
 8000336:	4b95      	ldr	r3, [pc, #596]	; (800058c <HAL_TIM_OC_DelayElapsedCallback+0x304>)
 8000338:	709a      	strb	r2, [r3, #2]
				erpa_buf[3] = (erpa_seq & 0xFF); // ERPA SEQ # MSB
 800033a:	4b95      	ldr	r3, [pc, #596]	; (8000590 <HAL_TIM_OC_DelayElapsedCallback+0x308>)
 800033c:	881b      	ldrh	r3, [r3, #0]
 800033e:	b2da      	uxtb	r2, r3
 8000340:	4b92      	ldr	r3, [pc, #584]	; (800058c <HAL_TIM_OC_DelayElapsedCallback+0x304>)
 8000342:	70da      	strb	r2, [r3, #3]
				erpa_buf[4] = ((raw & 0xFF00) >> 8); // ERPA eADC MSB
 8000344:	4b8b      	ldr	r3, [pc, #556]	; (8000574 <HAL_TIM_OC_DelayElapsedCallback+0x2ec>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	121b      	asrs	r3, r3, #8
 800034a:	b2da      	uxtb	r2, r3
 800034c:	4b8f      	ldr	r3, [pc, #572]	; (800058c <HAL_TIM_OC_DelayElapsedCallback+0x304>)
 800034e:	711a      	strb	r2, [r3, #4]
				erpa_buf[5] = (raw & 0xFF); // ERPA eADC LSB
 8000350:	4b88      	ldr	r3, [pc, #544]	; (8000574 <HAL_TIM_OC_DelayElapsedCallback+0x2ec>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	b2da      	uxtb	r2, r3
 8000356:	4b8d      	ldr	r3, [pc, #564]	; (800058c <HAL_TIM_OC_DelayElapsedCallback+0x304>)
 8000358:	715a      	strb	r2, [r3, #5]
				erpa_buf[6] = ((DAC_OUT[step] & 0xFF00) >> 8); //SWP Commanded MSB
 800035a:	4b87      	ldr	r3, [pc, #540]	; (8000578 <HAL_TIM_OC_DelayElapsedCallback+0x2f0>)
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	001a      	movs	r2, r3
 8000360:	4b87      	ldr	r3, [pc, #540]	; (8000580 <HAL_TIM_OC_DelayElapsedCallback+0x2f8>)
 8000362:	0092      	lsls	r2, r2, #2
 8000364:	58d3      	ldr	r3, [r2, r3]
 8000366:	0a1b      	lsrs	r3, r3, #8
 8000368:	b2da      	uxtb	r2, r3
 800036a:	4b88      	ldr	r3, [pc, #544]	; (800058c <HAL_TIM_OC_DelayElapsedCallback+0x304>)
 800036c:	719a      	strb	r2, [r3, #6]
				erpa_buf[7] = (DAC_OUT[step] & 0xFF); //SWP Commanded LSB
 800036e:	4b82      	ldr	r3, [pc, #520]	; (8000578 <HAL_TIM_OC_DelayElapsedCallback+0x2f0>)
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	001a      	movs	r2, r3
 8000374:	4b82      	ldr	r3, [pc, #520]	; (8000580 <HAL_TIM_OC_DelayElapsedCallback+0x2f8>)
 8000376:	0092      	lsls	r2, r2, #2
 8000378:	58d3      	ldr	r3, [r2, r3]
 800037a:	b2da      	uxtb	r2, r3
 800037c:	4b83      	ldr	r3, [pc, #524]	; (800058c <HAL_TIM_OC_DelayElapsedCallback+0x304>)
 800037e:	71da      	strb	r2, [r3, #7]
				erpa_buf[8] = ((PA7 & 0xFF00) >> 8); // SWP Monitored MSB
 8000380:	183b      	adds	r3, r7, r0
 8000382:	881b      	ldrh	r3, [r3, #0]
 8000384:	0a1b      	lsrs	r3, r3, #8
 8000386:	b29b      	uxth	r3, r3
 8000388:	b2da      	uxtb	r2, r3
 800038a:	4b80      	ldr	r3, [pc, #512]	; (800058c <HAL_TIM_OC_DelayElapsedCallback+0x304>)
 800038c:	721a      	strb	r2, [r3, #8]
				erpa_buf[9] = (PA7 & 0xFF); // SWP Monitored LSB
 800038e:	183b      	adds	r3, r7, r0
 8000390:	881b      	ldrh	r3, [r3, #0]
 8000392:	b2da      	uxtb	r2, r3
 8000394:	4b7d      	ldr	r3, [pc, #500]	; (800058c <HAL_TIM_OC_DelayElapsedCallback+0x304>)
 8000396:	725a      	strb	r2, [r3, #9]
				erpa_buf[10] = ((PB0 & 0xFF00) >> 8); // TEMPURATURE 1 MSB
 8000398:	193b      	adds	r3, r7, r4
 800039a:	881b      	ldrh	r3, [r3, #0]
 800039c:	0a1b      	lsrs	r3, r3, #8
 800039e:	b29b      	uxth	r3, r3
 80003a0:	b2da      	uxtb	r2, r3
 80003a2:	4b7a      	ldr	r3, [pc, #488]	; (800058c <HAL_TIM_OC_DelayElapsedCallback+0x304>)
 80003a4:	729a      	strb	r2, [r3, #10]
				erpa_buf[11] = (PB0 & 0xFF); // TEMPURATURE 1 LSB
 80003a6:	193b      	adds	r3, r7, r4
 80003a8:	881b      	ldrh	r3, [r3, #0]
 80003aa:	b2da      	uxtb	r2, r3
 80003ac:	4b77      	ldr	r3, [pc, #476]	; (800058c <HAL_TIM_OC_DelayElapsedCallback+0x304>)
 80003ae:	72da      	strb	r2, [r3, #11]
				erpa_buf[12] = ((PB1 & 0xFF00) >> 8); // TEMPURATURE 2 MSB
 80003b0:	197b      	adds	r3, r7, r5
 80003b2:	881b      	ldrh	r3, [r3, #0]
 80003b4:	0a1b      	lsrs	r3, r3, #8
 80003b6:	b29b      	uxth	r3, r3
 80003b8:	b2da      	uxtb	r2, r3
 80003ba:	4b74      	ldr	r3, [pc, #464]	; (800058c <HAL_TIM_OC_DelayElapsedCallback+0x304>)
 80003bc:	731a      	strb	r2, [r3, #12]
				erpa_buf[13] = (PB1 & 0xFF); // TEMPURATURE 2 LSB
 80003be:	197b      	adds	r3, r7, r5
 80003c0:	881b      	ldrh	r3, [r3, #0]
 80003c2:	b2da      	uxtb	r2, r3
 80003c4:	4b71      	ldr	r3, [pc, #452]	; (800058c <HAL_TIM_OC_DelayElapsedCallback+0x304>)
 80003c6:	735a      	strb	r2, [r3, #13]
				erpa_buf[14] = ((PA0 & 0xFF00) >> 8); // ENDmon MSB
 80003c8:	187b      	adds	r3, r7, r1
 80003ca:	881b      	ldrh	r3, [r3, #0]
 80003cc:	0a1b      	lsrs	r3, r3, #8
 80003ce:	b29b      	uxth	r3, r3
 80003d0:	b2da      	uxtb	r2, r3
 80003d2:	4b6e      	ldr	r3, [pc, #440]	; (800058c <HAL_TIM_OC_DelayElapsedCallback+0x304>)
 80003d4:	739a      	strb	r2, [r3, #14]
				erpa_buf[15] = (PA0 & 0xFF); // ENDmon LSB
 80003d6:	187b      	adds	r3, r7, r1
 80003d8:	881b      	ldrh	r3, [r3, #0]
 80003da:	b2da      	uxtb	r2, r3
 80003dc:	4b6b      	ldr	r3, [pc, #428]	; (800058c <HAL_TIM_OC_DelayElapsedCallback+0x304>)
 80003de:	73da      	strb	r2, [r3, #15]

				erpa_seq++;
 80003e0:	4b6b      	ldr	r3, [pc, #428]	; (8000590 <HAL_TIM_OC_DelayElapsedCallback+0x308>)
 80003e2:	881b      	ldrh	r3, [r3, #0]
 80003e4:	3301      	adds	r3, #1
 80003e6:	b29a      	uxth	r2, r3
 80003e8:	4b69      	ldr	r3, [pc, #420]	; (8000590 <HAL_TIM_OC_DelayElapsedCallback+0x308>)
 80003ea:	801a      	strh	r2, [r3, #0]
				if (ERPA_ON) {
 80003ec:	4b5d      	ldr	r3, [pc, #372]	; (8000564 <HAL_TIM_OC_DelayElapsedCallback+0x2dc>)
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d005      	beq.n	8000400 <HAL_TIM_OC_DelayElapsedCallback+0x178>
					HAL_UART_Transmit(&huart1, erpa_buf, sizeof(erpa_buf), 100);
 80003f4:	4965      	ldr	r1, [pc, #404]	; (800058c <HAL_TIM_OC_DelayElapsedCallback+0x304>)
 80003f6:	4867      	ldr	r0, [pc, #412]	; (8000594 <HAL_TIM_OC_DelayElapsedCallback+0x30c>)
 80003f8:	2364      	movs	r3, #100	; 0x64
 80003fa:	2210      	movs	r2, #16
 80003fc:	f005 fbe2 	bl	8005bc4 <HAL_UART_Transmit>
				}

				if (step == 5) {
 8000400:	4b5d      	ldr	r3, [pc, #372]	; (8000578 <HAL_TIM_OC_DelayElapsedCallback+0x2f0>)
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	2b05      	cmp	r3, #5
 8000406:	d103      	bne.n	8000410 <HAL_TIM_OC_DelayElapsedCallback+0x188>
					up = 0;
 8000408:	4b63      	ldr	r3, [pc, #396]	; (8000598 <HAL_TIM_OC_DelayElapsedCallback+0x310>)
 800040a:	2200      	movs	r2, #0
 800040c:	601a      	str	r2, [r3, #0]
 800040e:	e006      	b.n	800041e <HAL_TIM_OC_DelayElapsedCallback+0x196>
				} else if (step == 0) {
 8000410:	4b59      	ldr	r3, [pc, #356]	; (8000578 <HAL_TIM_OC_DelayElapsedCallback+0x2f0>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d102      	bne.n	800041e <HAL_TIM_OC_DelayElapsedCallback+0x196>
					up = 1;
 8000418:	4b5f      	ldr	r3, [pc, #380]	; (8000598 <HAL_TIM_OC_DelayElapsedCallback+0x310>)
 800041a:	2201      	movs	r2, #1
 800041c:	601a      	str	r2, [r3, #0]
				}

				up == 1 ? step++ : step--;
 800041e:	4b5e      	ldr	r3, [pc, #376]	; (8000598 <HAL_TIM_OC_DelayElapsedCallback+0x310>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	2b01      	cmp	r3, #1
 8000424:	d106      	bne.n	8000434 <HAL_TIM_OC_DelayElapsedCallback+0x1ac>
 8000426:	4b54      	ldr	r3, [pc, #336]	; (8000578 <HAL_TIM_OC_DelayElapsedCallback+0x2f0>)
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	3301      	adds	r3, #1
 800042c:	b2da      	uxtb	r2, r3
 800042e:	4b52      	ldr	r3, [pc, #328]	; (8000578 <HAL_TIM_OC_DelayElapsedCallback+0x2f0>)
 8000430:	701a      	strb	r2, [r3, #0]
 8000432:	e005      	b.n	8000440 <HAL_TIM_OC_DelayElapsedCallback+0x1b8>
 8000434:	4b50      	ldr	r3, [pc, #320]	; (8000578 <HAL_TIM_OC_DelayElapsedCallback+0x2f0>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	3b01      	subs	r3, #1
 800043a:	b2da      	uxtb	r2, r3
 800043c:	4b4e      	ldr	r3, [pc, #312]	; (8000578 <HAL_TIM_OC_DelayElapsedCallback+0x2f0>)
 800043e:	701a      	strb	r2, [r3, #0]
			}
			if (HK_ON) {
 8000440:	4b56      	ldr	r3, [pc, #344]	; (800059c <HAL_TIM_OC_DelayElapsedCallback+0x314>)
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	2b00      	cmp	r3, #0
 8000446:	d100      	bne.n	800044a <HAL_TIM_OC_DelayElapsedCallback+0x1c2>
 8000448:	e24e      	b.n	80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x660>
				if (hk_counter == 1) {
 800044a:	4b55      	ldr	r3, [pc, #340]	; (80005a0 <HAL_TIM_OC_DelayElapsedCallback+0x318>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	2b01      	cmp	r3, #1
 8000450:	d000      	beq.n	8000454 <HAL_TIM_OC_DelayElapsedCallback+0x1cc>
 8000452:	e1f9      	b.n	8000848 <HAL_TIM_OC_DelayElapsedCallback+0x5c0>
					float temp_c;
					int16_t output1;
					int16_t output2;


					buf[0] = REG_TEMP;
 8000454:	2200      	movs	r2, #0
 8000456:	250c      	movs	r5, #12
 8000458:	197b      	adds	r3, r7, r5
 800045a:	701a      	strb	r2, [r3, #0]
					ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_1, buf, 1,
 800045c:	2390      	movs	r3, #144	; 0x90
 800045e:	b299      	uxth	r1, r3
 8000460:	262b      	movs	r6, #43	; 0x2b
 8000462:	19bc      	adds	r4, r7, r6
 8000464:	197a      	adds	r2, r7, r5
 8000466:	484f      	ldr	r0, [pc, #316]	; (80005a4 <HAL_TIM_OC_DelayElapsedCallback+0x31c>)
 8000468:	23fa      	movs	r3, #250	; 0xfa
 800046a:	009b      	lsls	r3, r3, #2
 800046c:	9300      	str	r3, [sp, #0]
 800046e:	2301      	movs	r3, #1
 8000470:	f002 fdd4 	bl	800301c <HAL_I2C_Master_Transmit>
 8000474:	0003      	movs	r3, r0
 8000476:	7023      	strb	r3, [r4, #0]
							1000);
					//			I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
					if (ret != HAL_OK) {
 8000478:	19bb      	adds	r3, r7, r6
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	2b00      	cmp	r3, #0
 800047e:	d008      	beq.n	8000492 <HAL_TIM_OC_DelayElapsedCallback+0x20a>
						strcpy((char*) buf, "Error Tx\r\n");
 8000480:	197b      	adds	r3, r7, r5
 8000482:	4a49      	ldr	r2, [pc, #292]	; (80005a8 <HAL_TIM_OC_DelayElapsedCallback+0x320>)
 8000484:	ca03      	ldmia	r2!, {r0, r1}
 8000486:	c303      	stmia	r3!, {r0, r1}
 8000488:	8811      	ldrh	r1, [r2, #0]
 800048a:	8019      	strh	r1, [r3, #0]
 800048c:	7892      	ldrb	r2, [r2, #2]
 800048e:	709a      	strb	r2, [r3, #2]
 8000490:	e02b      	b.n	80004ea <HAL_TIM_OC_DelayElapsedCallback+0x262>
					} else {

						//				 Read 2 bytes from the temperature register
						ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_1, buf, 2,
 8000492:	2390      	movs	r3, #144	; 0x90
 8000494:	b299      	uxth	r1, r3
 8000496:	252b      	movs	r5, #43	; 0x2b
 8000498:	197c      	adds	r4, r7, r5
 800049a:	260c      	movs	r6, #12
 800049c:	19ba      	adds	r2, r7, r6
 800049e:	4841      	ldr	r0, [pc, #260]	; (80005a4 <HAL_TIM_OC_DelayElapsedCallback+0x31c>)
 80004a0:	23fa      	movs	r3, #250	; 0xfa
 80004a2:	009b      	lsls	r3, r3, #2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	2302      	movs	r3, #2
 80004a8:	f002 fec0 	bl	800322c <HAL_I2C_Master_Receive>
 80004ac:	0003      	movs	r3, r0
 80004ae:	7023      	strb	r3, [r4, #0]
								1000);
						if (ret != HAL_OK) {
 80004b0:	197b      	adds	r3, r7, r5
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d008      	beq.n	80004ca <HAL_TIM_OC_DelayElapsedCallback+0x242>
							strcpy((char*) buf, "Error Rx\r\n");
 80004b8:	19bb      	adds	r3, r7, r6
 80004ba:	4a3c      	ldr	r2, [pc, #240]	; (80005ac <HAL_TIM_OC_DelayElapsedCallback+0x324>)
 80004bc:	ca03      	ldmia	r2!, {r0, r1}
 80004be:	c303      	stmia	r3!, {r0, r1}
 80004c0:	8811      	ldrh	r1, [r2, #0]
 80004c2:	8019      	strh	r1, [r3, #0]
 80004c4:	7892      	ldrb	r2, [r2, #2]
 80004c6:	709a      	strb	r2, [r3, #2]
 80004c8:	e00f      	b.n	80004ea <HAL_TIM_OC_DelayElapsedCallback+0x262>
						} else {

							output1 = (int16_t) (buf[0] << 8);
 80004ca:	200c      	movs	r0, #12
 80004cc:	183b      	adds	r3, r7, r0
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	021a      	lsls	r2, r3, #8
 80004d2:	2136      	movs	r1, #54	; 0x36
 80004d4:	187b      	adds	r3, r7, r1
 80004d6:	801a      	strh	r2, [r3, #0]
							output1 = (output1 | buf[1]) >> 3;
 80004d8:	187b      	adds	r3, r7, r1
 80004da:	2200      	movs	r2, #0
 80004dc:	5e9b      	ldrsh	r3, [r3, r2]
 80004de:	183a      	adds	r2, r7, r0
 80004e0:	7852      	ldrb	r2, [r2, #1]
 80004e2:	4313      	orrs	r3, r2
 80004e4:	10da      	asrs	r2, r3, #3
 80004e6:	187b      	adds	r3, r7, r1
 80004e8:	801a      	strh	r2, [r3, #0]
									*/
						}
					}

					// Tell ADT7410_2 that we want to read from the temperature register
					buf[0] = REG_TEMP;
 80004ea:	2200      	movs	r2, #0
 80004ec:	250c      	movs	r5, #12
 80004ee:	197b      	adds	r3, r7, r5
 80004f0:	701a      	strb	r2, [r3, #0]
					ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_2, buf, 1,
 80004f2:	2394      	movs	r3, #148	; 0x94
 80004f4:	b299      	uxth	r1, r3
 80004f6:	262b      	movs	r6, #43	; 0x2b
 80004f8:	19bc      	adds	r4, r7, r6
 80004fa:	197a      	adds	r2, r7, r5
 80004fc:	4829      	ldr	r0, [pc, #164]	; (80005a4 <HAL_TIM_OC_DelayElapsedCallback+0x31c>)
 80004fe:	23fa      	movs	r3, #250	; 0xfa
 8000500:	009b      	lsls	r3, r3, #2
 8000502:	9300      	str	r3, [sp, #0]
 8000504:	2301      	movs	r3, #1
 8000506:	f002 fd89 	bl	800301c <HAL_I2C_Master_Transmit>
 800050a:	0003      	movs	r3, r0
 800050c:	7023      	strb	r3, [r4, #0]
							1000);
					//			I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
					if (ret != HAL_OK) {
 800050e:	19bb      	adds	r3, r7, r6
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d008      	beq.n	8000528 <HAL_TIM_OC_DelayElapsedCallback+0x2a0>
						strcpy((char*) buf, "Error Tx\r\n");
 8000516:	197b      	adds	r3, r7, r5
 8000518:	4a23      	ldr	r2, [pc, #140]	; (80005a8 <HAL_TIM_OC_DelayElapsedCallback+0x320>)
 800051a:	ca03      	ldmia	r2!, {r0, r1}
 800051c:	c303      	stmia	r3!, {r0, r1}
 800051e:	8811      	ldrh	r1, [r2, #0]
 8000520:	8019      	strh	r1, [r3, #0]
 8000522:	7892      	ldrb	r2, [r2, #2]
 8000524:	709a      	strb	r2, [r3, #2]
 8000526:	e053      	b.n	80005d0 <HAL_TIM_OC_DelayElapsedCallback+0x348>
					} else {

						//				 Read 2 bytes from the temperature register
						ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_2, buf, 2,
 8000528:	2394      	movs	r3, #148	; 0x94
 800052a:	b299      	uxth	r1, r3
 800052c:	252b      	movs	r5, #43	; 0x2b
 800052e:	197c      	adds	r4, r7, r5
 8000530:	260c      	movs	r6, #12
 8000532:	19ba      	adds	r2, r7, r6
 8000534:	481b      	ldr	r0, [pc, #108]	; (80005a4 <HAL_TIM_OC_DelayElapsedCallback+0x31c>)
 8000536:	23fa      	movs	r3, #250	; 0xfa
 8000538:	009b      	lsls	r3, r3, #2
 800053a:	9300      	str	r3, [sp, #0]
 800053c:	2302      	movs	r3, #2
 800053e:	f002 fe75 	bl	800322c <HAL_I2C_Master_Receive>
 8000542:	0003      	movs	r3, r0
 8000544:	7023      	strb	r3, [r4, #0]
								1000);
						if (ret != HAL_OK) {
 8000546:	197b      	adds	r3, r7, r5
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d030      	beq.n	80005b0 <HAL_TIM_OC_DelayElapsedCallback+0x328>
							strcpy((char*) buf, "Error Rx\r\n");
 800054e:	19bb      	adds	r3, r7, r6
 8000550:	4a16      	ldr	r2, [pc, #88]	; (80005ac <HAL_TIM_OC_DelayElapsedCallback+0x324>)
 8000552:	ca03      	ldmia	r2!, {r0, r1}
 8000554:	c303      	stmia	r3!, {r0, r1}
 8000556:	8811      	ldrh	r1, [r2, #0]
 8000558:	8019      	strh	r1, [r3, #0]
 800055a:	7892      	ldrb	r2, [r2, #2]
 800055c:	709a      	strb	r2, [r3, #2]
 800055e:	e037      	b.n	80005d0 <HAL_TIM_OC_DelayElapsedCallback+0x348>
 8000560:	20000260 	.word	0x20000260
 8000564:	20000041 	.word	0x20000041
 8000568:	080070a0 	.word	0x080070a0
 800056c:	20000150 	.word	0x20000150
 8000570:	40013000 	.word	0x40013000
 8000574:	2000041c 	.word	0x2000041c
 8000578:	2000041a 	.word	0x2000041a
 800057c:	40007400 	.word	0x40007400
 8000580:	20000024 	.word	0x20000024
 8000584:	200003f8 	.word	0x200003f8
 8000588:	2000006c 	.word	0x2000006c
 800058c:	20000420 	.word	0x20000420
 8000590:	20000430 	.word	0x20000430
 8000594:	200002a8 	.word	0x200002a8
 8000598:	2000003c 	.word	0x2000003c
 800059c:	20000042 	.word	0x20000042
 80005a0:	20000460 	.word	0x20000460
 80005a4:	20000104 	.word	0x20000104
 80005a8:	0800701c 	.word	0x0800701c
 80005ac:	08007028 	.word	0x08007028
						} else {

							output2 = (int16_t) (buf[0] << 8);
 80005b0:	200c      	movs	r0, #12
 80005b2:	183b      	adds	r3, r7, r0
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	021a      	lsls	r2, r3, #8
 80005b8:	2134      	movs	r1, #52	; 0x34
 80005ba:	187b      	adds	r3, r7, r1
 80005bc:	801a      	strh	r2, [r3, #0]
							output2 = (output2 | buf[1]) >> 3;
 80005be:	187b      	adds	r3, r7, r1
 80005c0:	2200      	movs	r2, #0
 80005c2:	5e9b      	ldrsh	r3, [r3, r2]
 80005c4:	183a      	adds	r2, r7, r0
 80005c6:	7852      	ldrb	r2, [r2, #1]
 80005c8:	4313      	orrs	r3, r2
 80005ca:	10da      	asrs	r2, r3, #3
 80005cc:	187b      	adds	r3, r7, r1
 80005ce:	801a      	strh	r2, [r3, #0]
					}




					HAL_ADC_Start_DMA(&hadc, (uint32_t*) adcResultsDMA,
 80005d0:	2311      	movs	r3, #17
 80005d2:	001a      	movs	r2, r3
 80005d4:	49c6      	ldr	r1, [pc, #792]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x668>)
 80005d6:	4bc7      	ldr	r3, [pc, #796]	; (80008f4 <HAL_TIM_OC_DelayElapsedCallback+0x66c>)
 80005d8:	0018      	movs	r0, r3
 80005da:	f001 fc85 	bl	8001ee8 <HAL_ADC_Start_DMA>
							adcChannelCount);

					uint16_t PA1 = adcResultsDMA[1]; //ADC_IN1, BUS_Imon: instrument bus current monitor
 80005de:	2128      	movs	r1, #40	; 0x28
 80005e0:	187b      	adds	r3, r7, r1
 80005e2:	4ac3      	ldr	r2, [pc, #780]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x668>)
 80005e4:	8852      	ldrh	r2, [r2, #2]
 80005e6:	801a      	strh	r2, [r3, #0]
					uint16_t PA2 = adcResultsDMA[2]; //ADC_IN2, BUS_Vmon: instrument bus voltage monitor
 80005e8:	2026      	movs	r0, #38	; 0x26
 80005ea:	183b      	adds	r3, r7, r0
 80005ec:	4ac0      	ldr	r2, [pc, #768]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x668>)
 80005ee:	8892      	ldrh	r2, [r2, #4]
 80005f0:	801a      	strh	r2, [r3, #0]
					uint16_t PA3 = adcResultsDMA[3]; //ADC_IN3, 3v3_mon: Accurate 5V for ADC monitor
 80005f2:	2424      	movs	r4, #36	; 0x24
 80005f4:	193b      	adds	r3, r7, r4
 80005f6:	4abe      	ldr	r2, [pc, #760]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x668>)
 80005f8:	88d2      	ldrh	r2, [r2, #6]
 80005fa:	801a      	strh	r2, [r3, #0]
					uint16_t PA5 = adcResultsDMA[4]; //ADC_IN5, n150v_mon: n150 voltage monitor
 80005fc:	2522      	movs	r5, #34	; 0x22
 80005fe:	197b      	adds	r3, r7, r5
 8000600:	4abb      	ldr	r2, [pc, #748]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x668>)
 8000602:	8912      	ldrh	r2, [r2, #8]
 8000604:	801a      	strh	r2, [r3, #0]
					uint16_t PA6 = adcResultsDMA[5]; //ADC_IN6, n800v_mon: n800 voltage monitor
 8000606:	2620      	movs	r6, #32
 8000608:	19bb      	adds	r3, r7, r6
 800060a:	4ab9      	ldr	r2, [pc, #740]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x668>)
 800060c:	8952      	ldrh	r2, [r2, #10]
 800060e:	801a      	strh	r2, [r3, #0]

					uint16_t PC0 = adcResultsDMA[9]; //ADC_IN10, 2v5_mon: 2.5v voltage monitor
 8000610:	231e      	movs	r3, #30
 8000612:	18fb      	adds	r3, r7, r3
 8000614:	4ab6      	ldr	r2, [pc, #728]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x668>)
 8000616:	8a52      	ldrh	r2, [r2, #18]
 8000618:	801a      	strh	r2, [r3, #0]
					uint16_t PC1 = adcResultsDMA[10]; //ADC_IN11, n5v_mon: n5v voltage monitor
 800061a:	221c      	movs	r2, #28
 800061c:	18bb      	adds	r3, r7, r2
 800061e:	4ab4      	ldr	r2, [pc, #720]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x668>)
 8000620:	8a92      	ldrh	r2, [r2, #20]
 8000622:	801a      	strh	r2, [r3, #0]
					uint16_t PC2 = adcResultsDMA[11]; //ADC_IN12, 5v_mon: 5v voltage monitor
 8000624:	231a      	movs	r3, #26
 8000626:	18fb      	adds	r3, r7, r3
 8000628:	4ab1      	ldr	r2, [pc, #708]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x668>)
 800062a:	8ad2      	ldrh	r2, [r2, #22]
 800062c:	801a      	strh	r2, [r3, #0]
					uint16_t PC3 = adcResultsDMA[12]; //ADC_IN13, n3v3_mon: n3v3 voltage monitor
 800062e:	2218      	movs	r2, #24
 8000630:	18bb      	adds	r3, r7, r2
 8000632:	4aaf      	ldr	r2, [pc, #700]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x668>)
 8000634:	8b12      	ldrh	r2, [r2, #24]
 8000636:	801a      	strh	r2, [r3, #0]
					uint16_t PC4 = adcResultsDMA[13]; //ADC_IN14, 5vref_mon: 5v reference voltage monitor
 8000638:	2316      	movs	r3, #22
 800063a:	18fb      	adds	r3, r7, r3
 800063c:	4aac      	ldr	r2, [pc, #688]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x668>)
 800063e:	8b52      	ldrh	r2, [r2, #26]
 8000640:	801a      	strh	r2, [r3, #0]
					uint16_t PC5 = adcResultsDMA[14]; //ADC_IN15, 15v_mon: 15v voltage monitor
 8000642:	2214      	movs	r2, #20
 8000644:	18bb      	adds	r3, r7, r2
 8000646:	4aaa      	ldr	r2, [pc, #680]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x668>)
 8000648:	8b92      	ldrh	r2, [r2, #28]
 800064a:	801a      	strh	r2, [r3, #0]
					uint16_t MCU_TEMP = adcResultsDMA[15]; //(internally connected) ADC_IN16, VSENSE
 800064c:	2312      	movs	r3, #18
 800064e:	18fb      	adds	r3, r7, r3
 8000650:	4aa7      	ldr	r2, [pc, #668]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x668>)
 8000652:	8bd2      	ldrh	r2, [r2, #30]
 8000654:	801a      	strh	r2, [r3, #0]
					uint16_t MCU_VREF = adcResultsDMA[16]; //(internally connected) ADC_IN17, VREFINT
 8000656:	2210      	movs	r2, #16
 8000658:	18bb      	adds	r3, r7, r2
 800065a:	4aa5      	ldr	r2, [pc, #660]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x668>)
 800065c:	8c12      	ldrh	r2, [r2, #32]
 800065e:	801a      	strh	r2, [r3, #0]

					temps_buf[0] = temps_sync;
 8000660:	22dd      	movs	r2, #221	; 0xdd
 8000662:	4ba5      	ldr	r3, [pc, #660]	; (80008f8 <HAL_TIM_OC_DelayElapsedCallback+0x670>)
 8000664:	701a      	strb	r2, [r3, #0]
					temps_buf[1] = temps_sync;
 8000666:	22dd      	movs	r2, #221	; 0xdd
 8000668:	4ba3      	ldr	r3, [pc, #652]	; (80008f8 <HAL_TIM_OC_DelayElapsedCallback+0x670>)
 800066a:	705a      	strb	r2, [r3, #1]
					temps_buf[2] = ((MCU_VREF & 0xFF00) >> 8);
 800066c:	2210      	movs	r2, #16
 800066e:	18bb      	adds	r3, r7, r2
 8000670:	881b      	ldrh	r3, [r3, #0]
 8000672:	0a1b      	lsrs	r3, r3, #8
 8000674:	b29b      	uxth	r3, r3
 8000676:	b2da      	uxtb	r2, r3
 8000678:	4b9f      	ldr	r3, [pc, #636]	; (80008f8 <HAL_TIM_OC_DelayElapsedCallback+0x670>)
 800067a:	709a      	strb	r2, [r3, #2]
					temps_buf[3] = (MCU_VREF & 0xFF);
 800067c:	2210      	movs	r2, #16
 800067e:	18bb      	adds	r3, r7, r2
 8000680:	881b      	ldrh	r3, [r3, #0]
 8000682:	b2da      	uxtb	r2, r3
 8000684:	4b9c      	ldr	r3, [pc, #624]	; (80008f8 <HAL_TIM_OC_DelayElapsedCallback+0x670>)
 8000686:	70da      	strb	r2, [r3, #3]
					temps_buf[4] = ((output1 & 0xFF00) >> 8);
 8000688:	2236      	movs	r2, #54	; 0x36
 800068a:	18bb      	adds	r3, r7, r2
 800068c:	2200      	movs	r2, #0
 800068e:	5e9b      	ldrsh	r3, [r3, r2]
 8000690:	121b      	asrs	r3, r3, #8
 8000692:	b2da      	uxtb	r2, r3
 8000694:	4b98      	ldr	r3, [pc, #608]	; (80008f8 <HAL_TIM_OC_DelayElapsedCallback+0x670>)
 8000696:	711a      	strb	r2, [r3, #4]
					temps_buf[5] = (output1 & 0xFF);
 8000698:	2236      	movs	r2, #54	; 0x36
 800069a:	18bb      	adds	r3, r7, r2
 800069c:	881b      	ldrh	r3, [r3, #0]
 800069e:	b2da      	uxtb	r2, r3
 80006a0:	4b95      	ldr	r3, [pc, #596]	; (80008f8 <HAL_TIM_OC_DelayElapsedCallback+0x670>)
 80006a2:	715a      	strb	r2, [r3, #5]
					temps_buf[6] = ((output2 & 0xFF00) >> 8);
 80006a4:	2234      	movs	r2, #52	; 0x34
 80006a6:	18bb      	adds	r3, r7, r2
 80006a8:	2200      	movs	r2, #0
 80006aa:	5e9b      	ldrsh	r3, [r3, r2]
 80006ac:	121b      	asrs	r3, r3, #8
 80006ae:	b2da      	uxtb	r2, r3
 80006b0:	4b91      	ldr	r3, [pc, #580]	; (80008f8 <HAL_TIM_OC_DelayElapsedCallback+0x670>)
 80006b2:	719a      	strb	r2, [r3, #6]
					temps_buf[7] = (output2 & 0xFF);
 80006b4:	2234      	movs	r2, #52	; 0x34
 80006b6:	18bb      	adds	r3, r7, r2
 80006b8:	881b      	ldrh	r3, [r3, #0]
 80006ba:	b2da      	uxtb	r2, r3
 80006bc:	4b8e      	ldr	r3, [pc, #568]	; (80008f8 <HAL_TIM_OC_DelayElapsedCallback+0x670>)
 80006be:	71da      	strb	r2, [r3, #7]


					hk_buf[0] = hk_sync; // HK SYNC 0xCC MSB					0 SYNC
 80006c0:	22cc      	movs	r2, #204	; 0xcc
 80006c2:	4b8e      	ldr	r3, [pc, #568]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0x674>)
 80006c4:	701a      	strb	r2, [r3, #0]
					hk_buf[1] = hk_sync; // HK SYNC 0xCC LSB
 80006c6:	22cc      	movs	r2, #204	; 0xcc
 80006c8:	4b8c      	ldr	r3, [pc, #560]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0x674>)
 80006ca:	705a      	strb	r2, [r3, #1]
					hk_buf[2] = ((hk_seq & 0xFF00) >> 8); // HK SEQ # MSB		1 SEQUENCE
 80006cc:	4b8c      	ldr	r3, [pc, #560]	; (8000900 <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 80006ce:	881b      	ldrh	r3, [r3, #0]
 80006d0:	0a1b      	lsrs	r3, r3, #8
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	4b89      	ldr	r3, [pc, #548]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0x674>)
 80006d8:	709a      	strb	r2, [r3, #2]
					hk_buf[3] = (hk_seq & 0xFF); // HK SEQ # LSB
 80006da:	4b89      	ldr	r3, [pc, #548]	; (8000900 <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 80006dc:	881b      	ldrh	r3, [r3, #0]
 80006de:	b2da      	uxtb	r2, r3
 80006e0:	4b86      	ldr	r3, [pc, #536]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0x674>)
 80006e2:	70da      	strb	r2, [r3, #3]
					hk_buf[4] = ((PA1 & 0xFF00) >> 8); // BUS_Imon MSB			2 BUS_IMON PA1
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	881b      	ldrh	r3, [r3, #0]
 80006e8:	0a1b      	lsrs	r3, r3, #8
 80006ea:	b29b      	uxth	r3, r3
 80006ec:	b2da      	uxtb	r2, r3
 80006ee:	4b83      	ldr	r3, [pc, #524]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0x674>)
 80006f0:	711a      	strb	r2, [r3, #4]
					hk_buf[5] = (PA1 & 0xFF); // BUS_Imon LSB
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	881b      	ldrh	r3, [r3, #0]
 80006f6:	b2da      	uxtb	r2, r3
 80006f8:	4b80      	ldr	r3, [pc, #512]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0x674>)
 80006fa:	715a      	strb	r2, [r3, #5]
					hk_buf[6] = ((PA2 & 0xFF00) >> 8); // BUS_Vmon MSB			3 BUS_VMON PA2
 80006fc:	183b      	adds	r3, r7, r0
 80006fe:	881b      	ldrh	r3, [r3, #0]
 8000700:	0a1b      	lsrs	r3, r3, #8
 8000702:	b29b      	uxth	r3, r3
 8000704:	b2da      	uxtb	r2, r3
 8000706:	4b7d      	ldr	r3, [pc, #500]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0x674>)
 8000708:	719a      	strb	r2, [r3, #6]
					hk_buf[7] = (PA2 & 0xFF); // BUS_Vmon LSB
 800070a:	183b      	adds	r3, r7, r0
 800070c:	881b      	ldrh	r3, [r3, #0]
 800070e:	b2da      	uxtb	r2, r3
 8000710:	4b7a      	ldr	r3, [pc, #488]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0x674>)
 8000712:	71da      	strb	r2, [r3, #7]
					hk_buf[8] = ((PA3 & 0xFF00) >> 8); // 3v3_mon MSB			4 3v3_MON PA3
 8000714:	193b      	adds	r3, r7, r4
 8000716:	881b      	ldrh	r3, [r3, #0]
 8000718:	0a1b      	lsrs	r3, r3, #8
 800071a:	b29b      	uxth	r3, r3
 800071c:	b2da      	uxtb	r2, r3
 800071e:	4b77      	ldr	r3, [pc, #476]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0x674>)
 8000720:	721a      	strb	r2, [r3, #8]
					hk_buf[9] = (PA3 & 0xFF); // 3v3_mon LSB
 8000722:	193b      	adds	r3, r7, r4
 8000724:	881b      	ldrh	r3, [r3, #0]
 8000726:	b2da      	uxtb	r2, r3
 8000728:	4b74      	ldr	r3, [pc, #464]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0x674>)
 800072a:	725a      	strb	r2, [r3, #9]
					hk_buf[10] = ((PA5 & 0xFF00) >> 8); // n150v_mon MSB		5 N150V_MON PA5
 800072c:	197b      	adds	r3, r7, r5
 800072e:	881b      	ldrh	r3, [r3, #0]
 8000730:	0a1b      	lsrs	r3, r3, #8
 8000732:	b29b      	uxth	r3, r3
 8000734:	b2da      	uxtb	r2, r3
 8000736:	4b71      	ldr	r3, [pc, #452]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0x674>)
 8000738:	729a      	strb	r2, [r3, #10]
					hk_buf[11] = (PA5 & 0xFF); // n150v_mon LSB
 800073a:	197b      	adds	r3, r7, r5
 800073c:	881b      	ldrh	r3, [r3, #0]
 800073e:	b2da      	uxtb	r2, r3
 8000740:	4b6e      	ldr	r3, [pc, #440]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0x674>)
 8000742:	72da      	strb	r2, [r3, #11]
					hk_buf[12] = ((PA6 & 0xFF00) >> 8); // n800v_mon MSB		6 N800V_MON PA6
 8000744:	19bb      	adds	r3, r7, r6
 8000746:	881b      	ldrh	r3, [r3, #0]
 8000748:	0a1b      	lsrs	r3, r3, #8
 800074a:	b29b      	uxth	r3, r3
 800074c:	b2da      	uxtb	r2, r3
 800074e:	4b6b      	ldr	r3, [pc, #428]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0x674>)
 8000750:	731a      	strb	r2, [r3, #12]
					hk_buf[13] = (PA6 & 0xFF); // n800v_mon LSB
 8000752:	19bb      	adds	r3, r7, r6
 8000754:	881b      	ldrh	r3, [r3, #0]
 8000756:	b2da      	uxtb	r2, r3
 8000758:	4b68      	ldr	r3, [pc, #416]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0x674>)
 800075a:	735a      	strb	r2, [r3, #13]
					hk_buf[14] = ((PC0 & 0xFF00) >> 8); // 2v5_mon MSB			7 2V5_MON PC0
 800075c:	211e      	movs	r1, #30
 800075e:	187b      	adds	r3, r7, r1
 8000760:	881b      	ldrh	r3, [r3, #0]
 8000762:	0a1b      	lsrs	r3, r3, #8
 8000764:	b29b      	uxth	r3, r3
 8000766:	b2da      	uxtb	r2, r3
 8000768:	4b64      	ldr	r3, [pc, #400]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0x674>)
 800076a:	739a      	strb	r2, [r3, #14]
					hk_buf[15] = (PC0 & 0xFF); // 2v5_mon LSB
 800076c:	187b      	adds	r3, r7, r1
 800076e:	881b      	ldrh	r3, [r3, #0]
 8000770:	b2da      	uxtb	r2, r3
 8000772:	4b62      	ldr	r3, [pc, #392]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0x674>)
 8000774:	73da      	strb	r2, [r3, #15]
					hk_buf[16] = ((PC1 & 0xFF00) >> 8); // n5v_mon MSB			8 N5V_MON PC1
 8000776:	211c      	movs	r1, #28
 8000778:	187b      	adds	r3, r7, r1
 800077a:	881b      	ldrh	r3, [r3, #0]
 800077c:	0a1b      	lsrs	r3, r3, #8
 800077e:	b29b      	uxth	r3, r3
 8000780:	b2da      	uxtb	r2, r3
 8000782:	4b5e      	ldr	r3, [pc, #376]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0x674>)
 8000784:	741a      	strb	r2, [r3, #16]
					hk_buf[17] = (PC1 & 0xFF); // n5v_mon LSB
 8000786:	187b      	adds	r3, r7, r1
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	b2da      	uxtb	r2, r3
 800078c:	4b5b      	ldr	r3, [pc, #364]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0x674>)
 800078e:	745a      	strb	r2, [r3, #17]
					hk_buf[18] = ((PC2 & 0xFF00) >> 8); // 5v_mon MSB			9 5V_MON PC2
 8000790:	211a      	movs	r1, #26
 8000792:	187b      	adds	r3, r7, r1
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	0a1b      	lsrs	r3, r3, #8
 8000798:	b29b      	uxth	r3, r3
 800079a:	b2da      	uxtb	r2, r3
 800079c:	4b57      	ldr	r3, [pc, #348]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0x674>)
 800079e:	749a      	strb	r2, [r3, #18]
					hk_buf[19] = (PC2 & 0xFF); // 5v_mon LSB
 80007a0:	187b      	adds	r3, r7, r1
 80007a2:	881b      	ldrh	r3, [r3, #0]
 80007a4:	b2da      	uxtb	r2, r3
 80007a6:	4b55      	ldr	r3, [pc, #340]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0x674>)
 80007a8:	74da      	strb	r2, [r3, #19]
					hk_buf[20] = ((PC3 & 0xFF00) >> 8); // n3v3_mon MSB			10 N3V3_MON PC3
 80007aa:	2118      	movs	r1, #24
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	881b      	ldrh	r3, [r3, #0]
 80007b0:	0a1b      	lsrs	r3, r3, #8
 80007b2:	b29b      	uxth	r3, r3
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	4b51      	ldr	r3, [pc, #324]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0x674>)
 80007b8:	751a      	strb	r2, [r3, #20]
					hk_buf[21] = (PC3 & 0xFF); // n3v3_mon LSB
 80007ba:	187b      	adds	r3, r7, r1
 80007bc:	881b      	ldrh	r3, [r3, #0]
 80007be:	b2da      	uxtb	r2, r3
 80007c0:	4b4e      	ldr	r3, [pc, #312]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0x674>)
 80007c2:	755a      	strb	r2, [r3, #21]
					hk_buf[22] = ((PC4 & 0xFF00) >> 8); // 5vref_mon MSB		11 5VREF_MON PC4
 80007c4:	2116      	movs	r1, #22
 80007c6:	187b      	adds	r3, r7, r1
 80007c8:	881b      	ldrh	r3, [r3, #0]
 80007ca:	0a1b      	lsrs	r3, r3, #8
 80007cc:	b29b      	uxth	r3, r3
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	4b4a      	ldr	r3, [pc, #296]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0x674>)
 80007d2:	759a      	strb	r2, [r3, #22]
					hk_buf[23] = (PC4 & 0xFF); // 5vref_mon LSB
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	881b      	ldrh	r3, [r3, #0]
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	4b48      	ldr	r3, [pc, #288]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0x674>)
 80007dc:	75da      	strb	r2, [r3, #23]
					hk_buf[24] = ((PC5 & 0xFF00) >> 8); // 15v_mon MSB			12 15V_MON PC5
 80007de:	2114      	movs	r1, #20
 80007e0:	187b      	adds	r3, r7, r1
 80007e2:	881b      	ldrh	r3, [r3, #0]
 80007e4:	0a1b      	lsrs	r3, r3, #8
 80007e6:	b29b      	uxth	r3, r3
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	4b44      	ldr	r3, [pc, #272]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0x674>)
 80007ec:	761a      	strb	r2, [r3, #24]
					hk_buf[25] = (PC5 & 0xFF); // 15v_mon LSB
 80007ee:	187b      	adds	r3, r7, r1
 80007f0:	881b      	ldrh	r3, [r3, #0]
 80007f2:	b2da      	uxtb	r2, r3
 80007f4:	4b41      	ldr	r3, [pc, #260]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0x674>)
 80007f6:	765a      	strb	r2, [r3, #25]
					hk_buf[26] = ((MCU_TEMP & 0xFF00) >> 8); // VSENSE MSB		13 VSENSE
 80007f8:	2112      	movs	r1, #18
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	881b      	ldrh	r3, [r3, #0]
 80007fe:	0a1b      	lsrs	r3, r3, #8
 8000800:	b29b      	uxth	r3, r3
 8000802:	b2da      	uxtb	r2, r3
 8000804:	4b3d      	ldr	r3, [pc, #244]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0x674>)
 8000806:	769a      	strb	r2, [r3, #26]
					hk_buf[27] = (MCU_TEMP & 0xFF); // VSENSE LSB
 8000808:	187b      	adds	r3, r7, r1
 800080a:	881b      	ldrh	r3, [r3, #0]
 800080c:	b2da      	uxtb	r2, r3
 800080e:	4b3b      	ldr	r3, [pc, #236]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0x674>)
 8000810:	76da      	strb	r2, [r3, #27]


					if (HK_ON) {
 8000812:	4b3c      	ldr	r3, [pc, #240]	; (8000904 <HAL_TIM_OC_DelayElapsedCallback+0x67c>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d00c      	beq.n	8000834 <HAL_TIM_OC_DelayElapsedCallback+0x5ac>
						HAL_UART_Transmit(&huart1, temps_buf, sizeof(temps_buf), 100);
 800081a:	4937      	ldr	r1, [pc, #220]	; (80008f8 <HAL_TIM_OC_DelayElapsedCallback+0x670>)
 800081c:	483a      	ldr	r0, [pc, #232]	; (8000908 <HAL_TIM_OC_DelayElapsedCallback+0x680>)
 800081e:	2364      	movs	r3, #100	; 0x64
 8000820:	2208      	movs	r2, #8
 8000822:	f005 f9cf 	bl	8005bc4 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart1, hk_buf, sizeof(hk_buf), HAL_MAX_DELAY);
 8000826:	2301      	movs	r3, #1
 8000828:	425b      	negs	r3, r3
 800082a:	4934      	ldr	r1, [pc, #208]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0x674>)
 800082c:	4836      	ldr	r0, [pc, #216]	; (8000908 <HAL_TIM_OC_DelayElapsedCallback+0x680>)
 800082e:	2220      	movs	r2, #32
 8000830:	f005 f9c8 	bl	8005bc4 <HAL_UART_Transmit>

					}
					hk_counter = 1;
 8000834:	4b35      	ldr	r3, [pc, #212]	; (800090c <HAL_TIM_OC_DelayElapsedCallback+0x684>)
 8000836:	2201      	movs	r2, #1
 8000838:	601a      	str	r2, [r3, #0]

					hk_seq++;
 800083a:	4b31      	ldr	r3, [pc, #196]	; (8000900 <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 800083c:	881b      	ldrh	r3, [r3, #0]
 800083e:	3301      	adds	r3, #1
 8000840:	b29a      	uxth	r2, r3
 8000842:	4b2f      	ldr	r3, [pc, #188]	; (8000900 <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 8000844:	801a      	strh	r2, [r3, #0]
			}
		}
	}

	/* Timer 3 also called but doesn't need to do anything on IT */
}
 8000846:	e04f      	b.n	80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x660>
					hk_counter++;
 8000848:	4b30      	ldr	r3, [pc, #192]	; (800090c <HAL_TIM_OC_DelayElapsedCallback+0x684>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	1c5a      	adds	r2, r3, #1
 800084e:	4b2f      	ldr	r3, [pc, #188]	; (800090c <HAL_TIM_OC_DelayElapsedCallback+0x684>)
 8000850:	601a      	str	r2, [r3, #0]
}
 8000852:	e049      	b.n	80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x660>
	} else if (htim == &htim1) {
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	4b2e      	ldr	r3, [pc, #184]	; (8000910 <HAL_TIM_OC_DelayElapsedCallback+0x688>)
 8000858:	429a      	cmp	r2, r3
 800085a:	d145      	bne.n	80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x660>
		if (PMT_ON) {
 800085c:	4b2d      	ldr	r3, [pc, #180]	; (8000914 <HAL_TIM_OC_DelayElapsedCallback+0x68c>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d041      	beq.n	80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x660>
			if (!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11))) { //check pin state
 8000864:	2380      	movs	r3, #128	; 0x80
 8000866:	011b      	lsls	r3, r3, #4
 8000868:	4a2b      	ldr	r2, [pc, #172]	; (8000918 <HAL_TIM_OC_DelayElapsedCallback+0x690>)
 800086a:	0019      	movs	r1, r3
 800086c:	0010      	movs	r0, r2
 800086e:	f002 fae9 	bl	8002e44 <HAL_GPIO_ReadPin>
 8000872:	1e03      	subs	r3, r0, #0
 8000874:	d138      	bne.n	80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x660>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) &WRITE, 1, 1);
 8000876:	4929      	ldr	r1, [pc, #164]	; (800091c <HAL_TIM_OC_DelayElapsedCallback+0x694>)
 8000878:	4829      	ldr	r0, [pc, #164]	; (8000920 <HAL_TIM_OC_DelayElapsedCallback+0x698>)
 800087a:	2301      	movs	r3, #1
 800087c:	2201      	movs	r2, #1
 800087e:	f003 fe6f 	bl	8004560 <HAL_SPI_Transmit>
				while (!(SPI2->SR))
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	4b27      	ldr	r3, [pc, #156]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x69c>)
 8000886:	689b      	ldr	r3, [r3, #8]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d0fb      	beq.n	8000884 <HAL_TIM_OC_DelayElapsedCallback+0x5fc>
				raw = SPI2->DR;
 800088c:	4b25      	ldr	r3, [pc, #148]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x69c>)
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	001a      	movs	r2, r3
 8000892:	4b25      	ldr	r3, [pc, #148]	; (8000928 <HAL_TIM_OC_DelayElapsedCallback+0x6a0>)
 8000894:	601a      	str	r2, [r3, #0]
				pmt_buf[0] = pmt_sync;
 8000896:	22bb      	movs	r2, #187	; 0xbb
 8000898:	4b24      	ldr	r3, [pc, #144]	; (800092c <HAL_TIM_OC_DelayElapsedCallback+0x6a4>)
 800089a:	701a      	strb	r2, [r3, #0]
				pmt_buf[1] = pmt_sync;
 800089c:	22bb      	movs	r2, #187	; 0xbb
 800089e:	4b23      	ldr	r3, [pc, #140]	; (800092c <HAL_TIM_OC_DelayElapsedCallback+0x6a4>)
 80008a0:	705a      	strb	r2, [r3, #1]
				pmt_buf[2] = ((pmt_seq & 0xFF00) >> 8);
 80008a2:	4b23      	ldr	r3, [pc, #140]	; (8000930 <HAL_TIM_OC_DelayElapsedCallback+0x6a8>)
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	0a1b      	lsrs	r3, r3, #8
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	b2da      	uxtb	r2, r3
 80008ac:	4b1f      	ldr	r3, [pc, #124]	; (800092c <HAL_TIM_OC_DelayElapsedCallback+0x6a4>)
 80008ae:	709a      	strb	r2, [r3, #2]
				pmt_buf[3] = (pmt_seq & 0xFF);
 80008b0:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <HAL_TIM_OC_DelayElapsedCallback+0x6a8>)
 80008b2:	881b      	ldrh	r3, [r3, #0]
 80008b4:	b2da      	uxtb	r2, r3
 80008b6:	4b1d      	ldr	r3, [pc, #116]	; (800092c <HAL_TIM_OC_DelayElapsedCallback+0x6a4>)
 80008b8:	70da      	strb	r2, [r3, #3]
				pmt_buf[4] = ((raw & 0xFF00) >> 8);
 80008ba:	4b1b      	ldr	r3, [pc, #108]	; (8000928 <HAL_TIM_OC_DelayElapsedCallback+0x6a0>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	121b      	asrs	r3, r3, #8
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	4b1a      	ldr	r3, [pc, #104]	; (800092c <HAL_TIM_OC_DelayElapsedCallback+0x6a4>)
 80008c4:	711a      	strb	r2, [r3, #4]
				pmt_buf[5] = (raw & 0xFF);
 80008c6:	4b18      	ldr	r3, [pc, #96]	; (8000928 <HAL_TIM_OC_DelayElapsedCallback+0x6a0>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	b2da      	uxtb	r2, r3
 80008cc:	4b17      	ldr	r3, [pc, #92]	; (800092c <HAL_TIM_OC_DelayElapsedCallback+0x6a4>)
 80008ce:	715a      	strb	r2, [r3, #5]
				pmt_seq++;
 80008d0:	4b17      	ldr	r3, [pc, #92]	; (8000930 <HAL_TIM_OC_DelayElapsedCallback+0x6a8>)
 80008d2:	881b      	ldrh	r3, [r3, #0]
 80008d4:	3301      	adds	r3, #1
 80008d6:	b29a      	uxth	r2, r3
 80008d8:	4b15      	ldr	r3, [pc, #84]	; (8000930 <HAL_TIM_OC_DelayElapsedCallback+0x6a8>)
 80008da:	801a      	strh	r2, [r3, #0]
				HAL_UART_Transmit(&huart1, pmt_buf, sizeof(pmt_buf), 100);
 80008dc:	4913      	ldr	r1, [pc, #76]	; (800092c <HAL_TIM_OC_DelayElapsedCallback+0x6a4>)
 80008de:	480a      	ldr	r0, [pc, #40]	; (8000908 <HAL_TIM_OC_DelayElapsedCallback+0x680>)
 80008e0:	2364      	movs	r3, #100	; 0x64
 80008e2:	2206      	movs	r2, #6
 80008e4:	f005 f96e 	bl	8005bc4 <HAL_UART_Transmit>
}
 80008e8:	46c0      	nop			; (mov r8, r8)
 80008ea:	46bd      	mov	sp, r7
 80008ec:	b00f      	add	sp, #60	; 0x3c
 80008ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008f0:	200003f8 	.word	0x200003f8
 80008f4:	2000006c 	.word	0x2000006c
 80008f8:	20000464 	.word	0x20000464
 80008fc:	2000043c 	.word	0x2000043c
 8000900:	2000045c 	.word	0x2000045c
 8000904:	20000042 	.word	0x20000042
 8000908:	200002a8 	.word	0x200002a8
 800090c:	20000460 	.word	0x20000460
 8000910:	20000218 	.word	0x20000218
 8000914:	20000040 	.word	0x20000040
 8000918:	48000400 	.word	0x48000400
 800091c:	080070a0 	.word	0x080070a0
 8000920:	200001b4 	.word	0x200001b4
 8000924:	40003800 	.word	0x40003800
 8000928:	2000041c 	.word	0x2000041c
 800092c:	20000434 	.word	0x20000434
 8000930:	2000043a 	.word	0x2000043a

08000934 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]

	HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 800093c:	4956      	ldr	r1, [pc, #344]	; (8000a98 <HAL_UART_RxCpltCallback+0x164>)
 800093e:	4b57      	ldr	r3, [pc, #348]	; (8000a9c <HAL_UART_RxCpltCallback+0x168>)
 8000940:	2201      	movs	r2, #1
 8000942:	0018      	movs	r0, r3
 8000944:	f005 f9e7 	bl	8005d16 <HAL_UART_Receive_IT>
	writeIndex = 0;
 8000948:	4b55      	ldr	r3, [pc, #340]	; (8000aa0 <HAL_UART_RxCpltCallback+0x16c>)
 800094a:	2200      	movs	r2, #0
 800094c:	701a      	strb	r2, [r3, #0]
	char key = rx_buf[0];
 800094e:	2113      	movs	r1, #19
 8000950:	187b      	adds	r3, r7, r1
 8000952:	4a51      	ldr	r2, [pc, #324]	; (8000a98 <HAL_UART_RxCpltCallback+0x164>)
 8000954:	7812      	ldrb	r2, [r2, #0]
 8000956:	701a      	strb	r2, [r3, #0]

	switch (key) {
 8000958:	187b      	adds	r3, r7, r1
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	3b31      	subs	r3, #49	; 0x31
 800095e:	2b37      	cmp	r3, #55	; 0x37
 8000960:	d85e      	bhi.n	8000a20 <HAL_UART_RxCpltCallback+0xec>
 8000962:	009a      	lsls	r2, r3, #2
 8000964:	4b4f      	ldr	r3, [pc, #316]	; (8000aa4 <HAL_UART_RxCpltCallback+0x170>)
 8000966:	18d3      	adds	r3, r2, r3
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	469f      	mov	pc, r3
	case 'a': {
		HAL_GPIO_TogglePin(gpios[0].gpio, gpios[0].pin);
 800096c:	4b4e      	ldr	r3, [pc, #312]	; (8000aa8 <HAL_UART_RxCpltCallback+0x174>)
 800096e:	2220      	movs	r2, #32
 8000970:	0011      	movs	r1, r2
 8000972:	0018      	movs	r0, r3
 8000974:	f002 faa0 	bl	8002eb8 <HAL_GPIO_TogglePin>
		break;
 8000978:	e052      	b.n	8000a20 <HAL_UART_RxCpltCallback+0xec>
	}
	case 'b': {
		HAL_GPIO_TogglePin(gpios[1].gpio, gpios[1].pin);
 800097a:	4b4b      	ldr	r3, [pc, #300]	; (8000aa8 <HAL_UART_RxCpltCallback+0x174>)
 800097c:	2240      	movs	r2, #64	; 0x40
 800097e:	0011      	movs	r1, r2
 8000980:	0018      	movs	r0, r3
 8000982:	f002 fa99 	bl	8002eb8 <HAL_GPIO_TogglePin>
		break;
 8000986:	e04b      	b.n	8000a20 <HAL_UART_RxCpltCallback+0xec>

	}
	case 'c': {
		HAL_GPIO_TogglePin(gpios[2].gpio, gpios[2].pin);
 8000988:	4a48      	ldr	r2, [pc, #288]	; (8000aac <HAL_UART_RxCpltCallback+0x178>)
 800098a:	2380      	movs	r3, #128	; 0x80
 800098c:	00db      	lsls	r3, r3, #3
 800098e:	0019      	movs	r1, r3
 8000990:	0010      	movs	r0, r2
 8000992:	f002 fa91 	bl	8002eb8 <HAL_GPIO_TogglePin>
		break;
 8000996:	e043      	b.n	8000a20 <HAL_UART_RxCpltCallback+0xec>

	}
	case 'd': {
		HAL_GPIO_TogglePin(gpios[3].gpio, gpios[3].pin);
 8000998:	4a44      	ldr	r2, [pc, #272]	; (8000aac <HAL_UART_RxCpltCallback+0x178>)
 800099a:	2380      	movs	r3, #128	; 0x80
 800099c:	019b      	lsls	r3, r3, #6
 800099e:	0019      	movs	r1, r3
 80009a0:	0010      	movs	r0, r2
 80009a2:	f002 fa89 	bl	8002eb8 <HAL_GPIO_TogglePin>
		break;
 80009a6:	e03b      	b.n	8000a20 <HAL_UART_RxCpltCallback+0xec>

	}
	case 'e': {
		HAL_GPIO_TogglePin(gpios[4].gpio, gpios[4].pin);
 80009a8:	4b40      	ldr	r3, [pc, #256]	; (8000aac <HAL_UART_RxCpltCallback+0x178>)
 80009aa:	2280      	movs	r2, #128	; 0x80
 80009ac:	0011      	movs	r1, r2
 80009ae:	0018      	movs	r0, r3
 80009b0:	f002 fa82 	bl	8002eb8 <HAL_GPIO_TogglePin>
		break;
 80009b4:	e034      	b.n	8000a20 <HAL_UART_RxCpltCallback+0xec>

	}
	case 'f': {
		HAL_GPIO_TogglePin(gpios[5].gpio, gpios[5].pin);
 80009b6:	4a3d      	ldr	r2, [pc, #244]	; (8000aac <HAL_UART_RxCpltCallback+0x178>)
 80009b8:	2380      	movs	r3, #128	; 0x80
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	0019      	movs	r1, r3
 80009be:	0010      	movs	r0, r2
 80009c0:	f002 fa7a 	bl	8002eb8 <HAL_GPIO_TogglePin>
		break;
 80009c4:	e02c      	b.n	8000a20 <HAL_UART_RxCpltCallback+0xec>

	}
	case 'g': {
		HAL_GPIO_TogglePin(gpios[6].gpio, gpios[6].pin);
 80009c6:	4a39      	ldr	r2, [pc, #228]	; (8000aac <HAL_UART_RxCpltCallback+0x178>)
 80009c8:	2380      	movs	r3, #128	; 0x80
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	0019      	movs	r1, r3
 80009ce:	0010      	movs	r0, r2
 80009d0:	f002 fa72 	bl	8002eb8 <HAL_GPIO_TogglePin>
		break;
 80009d4:	e024      	b.n	8000a20 <HAL_UART_RxCpltCallback+0xec>

	}
	case 'h': {
		HAL_GPIO_TogglePin(gpios[7].gpio, gpios[7].pin);
 80009d6:	4b35      	ldr	r3, [pc, #212]	; (8000aac <HAL_UART_RxCpltCallback+0x178>)
 80009d8:	2240      	movs	r2, #64	; 0x40
 80009da:	0011      	movs	r1, r2
 80009dc:	0018      	movs	r0, r3
 80009de:	f002 fa6b 	bl	8002eb8 <HAL_GPIO_TogglePin>
		break;
 80009e2:	e01d      	b.n	8000a20 <HAL_UART_RxCpltCallback+0xec>

	}
	case '1': {
		PMT_ON = (PMT_ON == 1) ? 0 : 1;
 80009e4:	4b32      	ldr	r3, [pc, #200]	; (8000ab0 <HAL_UART_RxCpltCallback+0x17c>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	3b01      	subs	r3, #1
 80009ea:	1e5a      	subs	r2, r3, #1
 80009ec:	4193      	sbcs	r3, r2
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	001a      	movs	r2, r3
 80009f2:	4b2f      	ldr	r3, [pc, #188]	; (8000ab0 <HAL_UART_RxCpltCallback+0x17c>)
 80009f4:	701a      	strb	r2, [r3, #0]
		break;
 80009f6:	e013      	b.n	8000a20 <HAL_UART_RxCpltCallback+0xec>
	}
	case '2': {
		ERPA_ON = (ERPA_ON == 1) ? 0 : 1;
 80009f8:	4b2e      	ldr	r3, [pc, #184]	; (8000ab4 <HAL_UART_RxCpltCallback+0x180>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	3b01      	subs	r3, #1
 80009fe:	1e5a      	subs	r2, r3, #1
 8000a00:	4193      	sbcs	r3, r2
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	001a      	movs	r2, r3
 8000a06:	4b2b      	ldr	r3, [pc, #172]	; (8000ab4 <HAL_UART_RxCpltCallback+0x180>)
 8000a08:	701a      	strb	r2, [r3, #0]
		break;
 8000a0a:	e009      	b.n	8000a20 <HAL_UART_RxCpltCallback+0xec>
	}
	case '3': {
		HK_ON = (HK_ON == 1) ? 0 : 1;
 8000a0c:	4b2a      	ldr	r3, [pc, #168]	; (8000ab8 <HAL_UART_RxCpltCallback+0x184>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	3b01      	subs	r3, #1
 8000a12:	1e5a      	subs	r2, r3, #1
 8000a14:	4193      	sbcs	r3, r2
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	001a      	movs	r2, r3
 8000a1a:	4b27      	ldr	r3, [pc, #156]	; (8000ab8 <HAL_UART_RxCpltCallback+0x184>)
 8000a1c:	701a      	strb	r2, [r3, #0]
		break;
 8000a1e:	46c0      	nop			; (mov r8, r8)
	}
	}

	for (int i = 0; i < num_gpios; i++) {
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]
 8000a24:	e025      	b.n	8000a72 <HAL_UART_RxCpltCallback+0x13e>
		const char *gpioStatus =
				(HAL_GPIO_ReadPin(gpios[i].gpio, gpios[i].pin) == GPIO_PIN_SET) ?
 8000a26:	4b25      	ldr	r3, [pc, #148]	; (8000abc <HAL_UART_RxCpltCallback+0x188>)
 8000a28:	697a      	ldr	r2, [r7, #20]
 8000a2a:	00d2      	lsls	r2, r2, #3
 8000a2c:	58d0      	ldr	r0, [r2, r3]
 8000a2e:	4a23      	ldr	r2, [pc, #140]	; (8000abc <HAL_UART_RxCpltCallback+0x188>)
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	00db      	lsls	r3, r3, #3
 8000a34:	18d3      	adds	r3, r2, r3
 8000a36:	3304      	adds	r3, #4
 8000a38:	881b      	ldrh	r3, [r3, #0]
 8000a3a:	0019      	movs	r1, r3
 8000a3c:	f002 fa02 	bl	8002e44 <HAL_GPIO_ReadPin>
 8000a40:	0003      	movs	r3, r0
		const char *gpioStatus =
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d101      	bne.n	8000a4a <HAL_UART_RxCpltCallback+0x116>
 8000a46:	4b1e      	ldr	r3, [pc, #120]	; (8000ac0 <HAL_UART_RxCpltCallback+0x18c>)
 8000a48:	e000      	b.n	8000a4c <HAL_UART_RxCpltCallback+0x118>
 8000a4a:	4b1e      	ldr	r3, [pc, #120]	; (8000ac4 <HAL_UART_RxCpltCallback+0x190>)
 8000a4c:	60fb      	str	r3, [r7, #12]
						": H" : ": L";

		// Add GPIO name and status to the output buffer
		add_to_gpiobuf(gpio_names[i]);
 8000a4e:	4b1e      	ldr	r3, [pc, #120]	; (8000ac8 <HAL_UART_RxCpltCallback+0x194>)
 8000a50:	697a      	ldr	r2, [r7, #20]
 8000a52:	0092      	lsls	r2, r2, #2
 8000a54:	58d3      	ldr	r3, [r2, r3]
 8000a56:	0018      	movs	r0, r3
 8000a58:	f7ff fbea 	bl	8000230 <add_to_gpiobuf>
		add_to_gpiobuf(gpioStatus);
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f7ff fbe6 	bl	8000230 <add_to_gpiobuf>
		add_to_gpiobuf("\r\n");
 8000a64:	4b19      	ldr	r3, [pc, #100]	; (8000acc <HAL_UART_RxCpltCallback+0x198>)
 8000a66:	0018      	movs	r0, r3
 8000a68:	f7ff fbe2 	bl	8000230 <add_to_gpiobuf>
	for (int i = 0; i < num_gpios; i++) {
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	617b      	str	r3, [r7, #20]
 8000a72:	4b17      	ldr	r3, [pc, #92]	; (8000ad0 <HAL_UART_RxCpltCallback+0x19c>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	697a      	ldr	r2, [r7, #20]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	dbd4      	blt.n	8000a26 <HAL_UART_RxCpltCallback+0xf2>
	}
	add_to_gpiobuf("\r\n");
 8000a7c:	4b13      	ldr	r3, [pc, #76]	; (8000acc <HAL_UART_RxCpltCallback+0x198>)
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f7ff fbd6 	bl	8000230 <add_to_gpiobuf>
	// Proceed with sending data using RTS/CTS flow control

	// ...

	// Transmit the data
	HAL_UART_Transmit(&huart1, gpio_buf, sizeof(gpio_buf), 100);
 8000a84:	4913      	ldr	r1, [pc, #76]	; (8000ad4 <HAL_UART_RxCpltCallback+0x1a0>)
 8000a86:	4805      	ldr	r0, [pc, #20]	; (8000a9c <HAL_UART_RxCpltCallback+0x168>)
 8000a88:	2364      	movs	r3, #100	; 0x64
 8000a8a:	2264      	movs	r2, #100	; 0x64
 8000a8c:	f005 f89a 	bl	8005bc4 <HAL_UART_Transmit>
}
 8000a90:	46c0      	nop			; (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	b006      	add	sp, #24
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000394 	.word	0x20000394
 8000a9c:	200002a8 	.word	0x200002a8
 8000aa0:	20000390 	.word	0x20000390
 8000aa4:	080070a4 	.word	0x080070a4
 8000aa8:	48000400 	.word	0x48000400
 8000aac:	48000800 	.word	0x48000800
 8000ab0:	20000040 	.word	0x20000040
 8000ab4:	20000041 	.word	0x20000041
 8000ab8:	20000042 	.word	0x20000042
 8000abc:	08007060 	.word	0x08007060
 8000ac0:	08007034 	.word	0x08007034
 8000ac4:	08007038 	.word	0x08007038
 8000ac8:	20000004 	.word	0x20000004
 8000acc:	0800703c 	.word	0x0800703c
 8000ad0:	20000000 	.word	0x20000000
 8000ad4:	2000032c 	.word	0x2000032c

08000ad8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ade:	f001 f85f 	bl	8001ba0 <HAL_Init>
	int16_t val;
	float temp_c;
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ae2:	f000 f835 	bl	8000b50 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ae6:	f000 fc39 	bl	800135c <MX_GPIO_Init>
	MX_DMA_Init();
 8000aea:	f000 fc19 	bl	8001320 <MX_DMA_Init>
	MX_SPI2_Init();
 8000aee:	f000 fa5d 	bl	8000fac <MX_SPI2_Init>
	MX_TIM1_Init();
 8000af2:	f000 fa9b 	bl	800102c <MX_TIM1_Init>
	MX_TIM2_Init();
 8000af6:	f000 fb51 	bl	800119c <MX_TIM2_Init>
	MX_SPI1_Init();
 8000afa:	f000 fa17 	bl	8000f2c <MX_SPI1_Init>
	MX_USART1_UART_Init();
 8000afe:	f000 fbcf 	bl	80012a0 <MX_USART1_UART_Init>
	MX_DAC1_Init();
 8000b02:	f000 f9a1 	bl	8000e48 <MX_DAC1_Init>
	MX_ADC_Init();
 8000b06:	f000 f88d 	bl	8000c24 <MX_ADC_Init>
	MX_I2C1_Init();
 8000b0a:	f000 f9cf 	bl	8000eac <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */

	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000b0e:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <main+0x64>)
 8000b10:	2100      	movs	r1, #0
 8000b12:	0018      	movs	r0, r3
 8000b14:	f001 fdd7 	bl	80026c6 <HAL_DAC_Start>

	/* Start Timers with OC & Interrupt */
	HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000b18:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <main+0x68>)
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f004 f895 	bl	8004c4c <HAL_TIM_OC_Start_IT>
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <main+0x6c>)
 8000b24:	210c      	movs	r1, #12
 8000b26:	0018      	movs	r0, r3
 8000b28:	f004 f890 	bl	8004c4c <HAL_TIM_OC_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000b2c:	4906      	ldr	r1, [pc, #24]	; (8000b48 <main+0x70>)
 8000b2e:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <main+0x74>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	0018      	movs	r0, r3
 8000b34:	f005 f8ef 	bl	8005d16 <HAL_UART_Receive_IT>
 8000b38:	e7f8      	b.n	8000b2c <main+0x54>
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	200000f0 	.word	0x200000f0
 8000b40:	20000218 	.word	0x20000218
 8000b44:	20000260 	.word	0x20000260
 8000b48:	20000394 	.word	0x20000394
 8000b4c:	200002a8 	.word	0x200002a8

08000b50 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000b50:	b590      	push	{r4, r7, lr}
 8000b52:	b097      	sub	sp, #92	; 0x5c
 8000b54:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000b56:	2428      	movs	r4, #40	; 0x28
 8000b58:	193b      	adds	r3, r7, r4
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	2330      	movs	r3, #48	; 0x30
 8000b5e:	001a      	movs	r2, r3
 8000b60:	2100      	movs	r1, #0
 8000b62:	f006 fa01 	bl	8006f68 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000b66:	2318      	movs	r3, #24
 8000b68:	18fb      	adds	r3, r7, r3
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	2310      	movs	r3, #16
 8000b6e:	001a      	movs	r2, r3
 8000b70:	2100      	movs	r1, #0
 8000b72:	f006 f9f9 	bl	8006f68 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	0018      	movs	r0, r3
 8000b7a:	2314      	movs	r3, #20
 8000b7c:	001a      	movs	r2, r3
 8000b7e:	2100      	movs	r1, #0
 8000b80:	f006 f9f2 	bl	8006f68 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000b84:	0021      	movs	r1, r4
 8000b86:	187b      	adds	r3, r7, r1
 8000b88:	2212      	movs	r2, #18
 8000b8a:	601a      	str	r2, [r3, #0]
			| RCC_OSCILLATORTYPE_HSI14;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b8c:	187b      	adds	r3, r7, r1
 8000b8e:	2201      	movs	r2, #1
 8000b90:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000b92:	187b      	adds	r3, r7, r1
 8000b94:	2201      	movs	r2, #1
 8000b96:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b98:	187b      	adds	r3, r7, r1
 8000b9a:	2210      	movs	r2, #16
 8000b9c:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000b9e:	187b      	adds	r3, r7, r1
 8000ba0:	2210      	movs	r2, #16
 8000ba2:	619a      	str	r2, [r3, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ba4:	187b      	adds	r3, r7, r1
 8000ba6:	2202      	movs	r2, #2
 8000ba8:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000baa:	187b      	adds	r3, r7, r1
 8000bac:	2200      	movs	r2, #0
 8000bae:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000bb0:	187b      	adds	r3, r7, r1
 8000bb2:	22a0      	movs	r2, #160	; 0xa0
 8000bb4:	0392      	lsls	r2, r2, #14
 8000bb6:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	2200      	movs	r2, #0
 8000bbc:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000bbe:	187b      	adds	r3, r7, r1
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	f002 fecb 	bl	800395c <HAL_RCC_OscConfig>
 8000bc6:	1e03      	subs	r3, r0, #0
 8000bc8:	d001      	beq.n	8000bce <SystemClock_Config+0x7e>
		Error_Handler();
 8000bca:	f000 fc61 	bl	8001490 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000bce:	2118      	movs	r1, #24
 8000bd0:	187b      	adds	r3, r7, r1
 8000bd2:	2207      	movs	r2, #7
 8000bd4:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bd6:	187b      	adds	r3, r7, r1
 8000bd8:	2202      	movs	r2, #2
 8000bda:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bdc:	187b      	adds	r3, r7, r1
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000be2:	187b      	adds	r3, r7, r1
 8000be4:	2200      	movs	r2, #0
 8000be6:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000be8:	187b      	adds	r3, r7, r1
 8000bea:	2101      	movs	r1, #1
 8000bec:	0018      	movs	r0, r3
 8000bee:	f003 f9cf 	bl	8003f90 <HAL_RCC_ClockConfig>
 8000bf2:	1e03      	subs	r3, r0, #0
 8000bf4:	d001      	beq.n	8000bfa <SystemClock_Config+0xaa>
		Error_Handler();
 8000bf6:	f000 fc4b 	bl	8001490 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	2221      	movs	r2, #33	; 0x21
 8000bfe:	601a      	str	r2, [r3, #0]
			| RCC_PERIPHCLK_I2C1;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8000c00:	1d3b      	adds	r3, r7, #4
 8000c02:	2203      	movs	r2, #3
 8000c04:	609a      	str	r2, [r3, #8]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	2200      	movs	r2, #0
 8000c0a:	60da      	str	r2, [r3, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f003 fb10 	bl	8004234 <HAL_RCCEx_PeriphCLKConfig>
 8000c14:	1e03      	subs	r3, r0, #0
 8000c16:	d001      	beq.n	8000c1c <SystemClock_Config+0xcc>
		Error_Handler();
 8000c18:	f000 fc3a 	bl	8001490 <Error_Handler>
	}
}
 8000c1c:	46c0      	nop			; (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	b017      	add	sp, #92	; 0x5c
 8000c22:	bd90      	pop	{r4, r7, pc}

08000c24 <MX_ADC_Init>:
/**
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC_Init 0 */

	/* USER CODE END ADC_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	230c      	movs	r3, #12
 8000c30:	001a      	movs	r2, r3
 8000c32:	2100      	movs	r1, #0
 8000c34:	f006 f998 	bl	8006f68 <memset>

	/* USER CODE END ADC_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC1;
 8000c38:	4b81      	ldr	r3, [pc, #516]	; (8000e40 <MX_ADC_Init+0x21c>)
 8000c3a:	4a82      	ldr	r2, [pc, #520]	; (8000e44 <MX_ADC_Init+0x220>)
 8000c3c:	601a      	str	r2, [r3, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c3e:	4b80      	ldr	r3, [pc, #512]	; (8000e40 <MX_ADC_Init+0x21c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000c44:	4b7e      	ldr	r3, [pc, #504]	; (8000e40 <MX_ADC_Init+0x21c>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c4a:	4b7d      	ldr	r3, [pc, #500]	; (8000e40 <MX_ADC_Init+0x21c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	60da      	str	r2, [r3, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000c50:	4b7b      	ldr	r3, [pc, #492]	; (8000e40 <MX_ADC_Init+0x21c>)
 8000c52:	2201      	movs	r2, #1
 8000c54:	611a      	str	r2, [r3, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c56:	4b7a      	ldr	r3, [pc, #488]	; (8000e40 <MX_ADC_Init+0x21c>)
 8000c58:	2204      	movs	r2, #4
 8000c5a:	615a      	str	r2, [r3, #20]
	hadc.Init.LowPowerAutoWait = DISABLE;
 8000c5c:	4b78      	ldr	r3, [pc, #480]	; (8000e40 <MX_ADC_Init+0x21c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	761a      	strb	r2, [r3, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000c62:	4b77      	ldr	r3, [pc, #476]	; (8000e40 <MX_ADC_Init+0x21c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	765a      	strb	r2, [r3, #25]
	hadc.Init.ContinuousConvMode = DISABLE;
 8000c68:	4b75      	ldr	r3, [pc, #468]	; (8000e40 <MX_ADC_Init+0x21c>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	769a      	strb	r2, [r3, #26]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 8000c6e:	4b74      	ldr	r3, [pc, #464]	; (8000e40 <MX_ADC_Init+0x21c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	76da      	strb	r2, [r3, #27]
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c74:	4b72      	ldr	r3, [pc, #456]	; (8000e40 <MX_ADC_Init+0x21c>)
 8000c76:	22c2      	movs	r2, #194	; 0xc2
 8000c78:	32ff      	adds	r2, #255	; 0xff
 8000c7a:	61da      	str	r2, [r3, #28]
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c7c:	4b70      	ldr	r3, [pc, #448]	; (8000e40 <MX_ADC_Init+0x21c>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	621a      	str	r2, [r3, #32]
	hadc.Init.DMAContinuousRequests = DISABLE;
 8000c82:	4b6f      	ldr	r3, [pc, #444]	; (8000e40 <MX_ADC_Init+0x21c>)
 8000c84:	2224      	movs	r2, #36	; 0x24
 8000c86:	2100      	movs	r1, #0
 8000c88:	5499      	strb	r1, [r3, r2]
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c8a:	4b6d      	ldr	r3, [pc, #436]	; (8000e40 <MX_ADC_Init+0x21c>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8000c90:	4b6b      	ldr	r3, [pc, #428]	; (8000e40 <MX_ADC_Init+0x21c>)
 8000c92:	0018      	movs	r0, r3
 8000c94:	f000 ffe8 	bl	8001c68 <HAL_ADC_Init>
 8000c98:	1e03      	subs	r3, r0, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_ADC_Init+0x7c>
		Error_Handler();
 8000c9c:	f000 fbf8 	bl	8001490 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000ca0:	1d3b      	adds	r3, r7, #4
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000ca6:	1d3b      	adds	r3, r7, #4
 8000ca8:	2280      	movs	r2, #128	; 0x80
 8000caa:	0152      	lsls	r2, r2, #5
 8000cac:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	2280      	movs	r2, #128	; 0x80
 8000cb2:	0552      	lsls	r2, r2, #21
 8000cb4:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000cb6:	1d3a      	adds	r2, r7, #4
 8000cb8:	4b61      	ldr	r3, [pc, #388]	; (8000e40 <MX_ADC_Init+0x21c>)
 8000cba:	0011      	movs	r1, r2
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	f001 f9ad 	bl	800201c <HAL_ADC_ConfigChannel>
 8000cc2:	1e03      	subs	r3, r0, #0
 8000cc4:	d001      	beq.n	8000cca <MX_ADC_Init+0xa6>
		Error_Handler();
 8000cc6:	f000 fbe3 	bl	8001490 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000cca:	1d3b      	adds	r3, r7, #4
 8000ccc:	2201      	movs	r2, #1
 8000cce:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000cd0:	1d3a      	adds	r2, r7, #4
 8000cd2:	4b5b      	ldr	r3, [pc, #364]	; (8000e40 <MX_ADC_Init+0x21c>)
 8000cd4:	0011      	movs	r1, r2
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f001 f9a0 	bl	800201c <HAL_ADC_ConfigChannel>
 8000cdc:	1e03      	subs	r3, r0, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_ADC_Init+0xc0>
		Error_Handler();
 8000ce0:	f000 fbd6 	bl	8001490 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 8000ce4:	1d3b      	adds	r3, r7, #4
 8000ce6:	2202      	movs	r2, #2
 8000ce8:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000cea:	1d3a      	adds	r2, r7, #4
 8000cec:	4b54      	ldr	r3, [pc, #336]	; (8000e40 <MX_ADC_Init+0x21c>)
 8000cee:	0011      	movs	r1, r2
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f001 f993 	bl	800201c <HAL_ADC_ConfigChannel>
 8000cf6:	1e03      	subs	r3, r0, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_ADC_Init+0xda>
		Error_Handler();
 8000cfa:	f000 fbc9 	bl	8001490 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	2203      	movs	r2, #3
 8000d02:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000d04:	1d3a      	adds	r2, r7, #4
 8000d06:	4b4e      	ldr	r3, [pc, #312]	; (8000e40 <MX_ADC_Init+0x21c>)
 8000d08:	0011      	movs	r1, r2
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f001 f986 	bl	800201c <HAL_ADC_ConfigChannel>
 8000d10:	1e03      	subs	r3, r0, #0
 8000d12:	d001      	beq.n	8000d18 <MX_ADC_Init+0xf4>
		Error_Handler();
 8000d14:	f000 fbbc 	bl	8001490 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8000d18:	1d3b      	adds	r3, r7, #4
 8000d1a:	2205      	movs	r2, #5
 8000d1c:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000d1e:	1d3a      	adds	r2, r7, #4
 8000d20:	4b47      	ldr	r3, [pc, #284]	; (8000e40 <MX_ADC_Init+0x21c>)
 8000d22:	0011      	movs	r1, r2
 8000d24:	0018      	movs	r0, r3
 8000d26:	f001 f979 	bl	800201c <HAL_ADC_ConfigChannel>
 8000d2a:	1e03      	subs	r3, r0, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_ADC_Init+0x10e>
		Error_Handler();
 8000d2e:	f000 fbaf 	bl	8001490 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_6;
 8000d32:	1d3b      	adds	r3, r7, #4
 8000d34:	2206      	movs	r2, #6
 8000d36:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000d38:	1d3a      	adds	r2, r7, #4
 8000d3a:	4b41      	ldr	r3, [pc, #260]	; (8000e40 <MX_ADC_Init+0x21c>)
 8000d3c:	0011      	movs	r1, r2
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f001 f96c 	bl	800201c <HAL_ADC_ConfigChannel>
 8000d44:	1e03      	subs	r3, r0, #0
 8000d46:	d001      	beq.n	8000d4c <MX_ADC_Init+0x128>
		Error_Handler();
 8000d48:	f000 fba2 	bl	8001490 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_7;
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	2207      	movs	r2, #7
 8000d50:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000d52:	1d3a      	adds	r2, r7, #4
 8000d54:	4b3a      	ldr	r3, [pc, #232]	; (8000e40 <MX_ADC_Init+0x21c>)
 8000d56:	0011      	movs	r1, r2
 8000d58:	0018      	movs	r0, r3
 8000d5a:	f001 f95f 	bl	800201c <HAL_ADC_ConfigChannel>
 8000d5e:	1e03      	subs	r3, r0, #0
 8000d60:	d001      	beq.n	8000d66 <MX_ADC_Init+0x142>
		Error_Handler();
 8000d62:	f000 fb95 	bl	8001490 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	2208      	movs	r2, #8
 8000d6a:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000d6c:	1d3a      	adds	r2, r7, #4
 8000d6e:	4b34      	ldr	r3, [pc, #208]	; (8000e40 <MX_ADC_Init+0x21c>)
 8000d70:	0011      	movs	r1, r2
 8000d72:	0018      	movs	r0, r3
 8000d74:	f001 f952 	bl	800201c <HAL_ADC_ConfigChannel>
 8000d78:	1e03      	subs	r3, r0, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_ADC_Init+0x15c>
		Error_Handler();
 8000d7c:	f000 fb88 	bl	8001490 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 8000d80:	1d3b      	adds	r3, r7, #4
 8000d82:	2209      	movs	r2, #9
 8000d84:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000d86:	1d3a      	adds	r2, r7, #4
 8000d88:	4b2d      	ldr	r3, [pc, #180]	; (8000e40 <MX_ADC_Init+0x21c>)
 8000d8a:	0011      	movs	r1, r2
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f001 f945 	bl	800201c <HAL_ADC_ConfigChannel>
 8000d92:	1e03      	subs	r3, r0, #0
 8000d94:	d001      	beq.n	8000d9a <MX_ADC_Init+0x176>
		Error_Handler();
 8000d96:	f000 fb7b 	bl	8001490 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_10;
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	220a      	movs	r2, #10
 8000d9e:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000da0:	1d3a      	adds	r2, r7, #4
 8000da2:	4b27      	ldr	r3, [pc, #156]	; (8000e40 <MX_ADC_Init+0x21c>)
 8000da4:	0011      	movs	r1, r2
 8000da6:	0018      	movs	r0, r3
 8000da8:	f001 f938 	bl	800201c <HAL_ADC_ConfigChannel>
 8000dac:	1e03      	subs	r3, r0, #0
 8000dae:	d001      	beq.n	8000db4 <MX_ADC_Init+0x190>
		Error_Handler();
 8000db0:	f000 fb6e 	bl	8001490 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_11;
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	220b      	movs	r2, #11
 8000db8:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000dba:	1d3a      	adds	r2, r7, #4
 8000dbc:	4b20      	ldr	r3, [pc, #128]	; (8000e40 <MX_ADC_Init+0x21c>)
 8000dbe:	0011      	movs	r1, r2
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	f001 f92b 	bl	800201c <HAL_ADC_ConfigChannel>
 8000dc6:	1e03      	subs	r3, r0, #0
 8000dc8:	d001      	beq.n	8000dce <MX_ADC_Init+0x1aa>
		Error_Handler();
 8000dca:	f000 fb61 	bl	8001490 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_12;
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	220c      	movs	r2, #12
 8000dd2:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000dd4:	1d3a      	adds	r2, r7, #4
 8000dd6:	4b1a      	ldr	r3, [pc, #104]	; (8000e40 <MX_ADC_Init+0x21c>)
 8000dd8:	0011      	movs	r1, r2
 8000dda:	0018      	movs	r0, r3
 8000ddc:	f001 f91e 	bl	800201c <HAL_ADC_ConfigChannel>
 8000de0:	1e03      	subs	r3, r0, #0
 8000de2:	d001      	beq.n	8000de8 <MX_ADC_Init+0x1c4>
		Error_Handler();
 8000de4:	f000 fb54 	bl	8001490 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_13;
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	220d      	movs	r2, #13
 8000dec:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000dee:	1d3a      	adds	r2, r7, #4
 8000df0:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <MX_ADC_Init+0x21c>)
 8000df2:	0011      	movs	r1, r2
 8000df4:	0018      	movs	r0, r3
 8000df6:	f001 f911 	bl	800201c <HAL_ADC_ConfigChannel>
 8000dfa:	1e03      	subs	r3, r0, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_ADC_Init+0x1de>
		Error_Handler();
 8000dfe:	f000 fb47 	bl	8001490 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_14;
 8000e02:	1d3b      	adds	r3, r7, #4
 8000e04:	220e      	movs	r2, #14
 8000e06:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000e08:	1d3a      	adds	r2, r7, #4
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <MX_ADC_Init+0x21c>)
 8000e0c:	0011      	movs	r1, r2
 8000e0e:	0018      	movs	r0, r3
 8000e10:	f001 f904 	bl	800201c <HAL_ADC_ConfigChannel>
 8000e14:	1e03      	subs	r3, r0, #0
 8000e16:	d001      	beq.n	8000e1c <MX_ADC_Init+0x1f8>
		Error_Handler();
 8000e18:	f000 fb3a 	bl	8001490 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_15;
 8000e1c:	1d3b      	adds	r3, r7, #4
 8000e1e:	220f      	movs	r2, #15
 8000e20:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000e22:	1d3a      	adds	r2, r7, #4
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <MX_ADC_Init+0x21c>)
 8000e26:	0011      	movs	r1, r2
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f001 f8f7 	bl	800201c <HAL_ADC_ConfigChannel>
 8000e2e:	1e03      	subs	r3, r0, #0
 8000e30:	d001      	beq.n	8000e36 <MX_ADC_Init+0x212>
		Error_Handler();
 8000e32:	f000 fb2d 	bl	8001490 <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	b004      	add	sp, #16
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	2000006c 	.word	0x2000006c
 8000e44:	40012400 	.word	0x40012400

08000e48 <MX_DAC1_Init>:
/**
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC1_Init(void) {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC1_Init 0 */
	step = 0;
 8000e4e:	4b14      	ldr	r3, [pc, #80]	; (8000ea0 <MX_DAC1_Init+0x58>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	701a      	strb	r2, [r3, #0]
	/* USER CODE END DAC1_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 8000e54:	003b      	movs	r3, r7
 8000e56:	0018      	movs	r0, r3
 8000e58:	2308      	movs	r3, #8
 8000e5a:	001a      	movs	r2, r3
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	f006 f883 	bl	8006f68 <memset>

	/* USER CODE END DAC1_Init 1 */

	/** DAC Initialization
	 */
	hdac1.Instance = DAC;
 8000e62:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <MX_DAC1_Init+0x5c>)
 8000e64:	4a10      	ldr	r2, [pc, #64]	; (8000ea8 <MX_DAC1_Init+0x60>)
 8000e66:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK) {
 8000e68:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <MX_DAC1_Init+0x5c>)
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	f001 fbca 	bl	8002604 <HAL_DAC_Init>
 8000e70:	1e03      	subs	r3, r0, #0
 8000e72:	d001      	beq.n	8000e78 <MX_DAC1_Init+0x30>
		Error_Handler();
 8000e74:	f000 fb0c 	bl	8001490 <Error_Handler>
	}

	/** DAC channel OUT1 config
	 */
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000e78:	003b      	movs	r3, r7
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e7e:	003b      	movs	r3, r7
 8000e80:	2200      	movs	r2, #0
 8000e82:	605a      	str	r2, [r3, #4]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8000e84:	0039      	movs	r1, r7
 8000e86:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <MX_DAC1_Init+0x5c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f001 fbdd 	bl	800264a <HAL_DAC_ConfigChannel>
 8000e90:	1e03      	subs	r3, r0, #0
 8000e92:	d001      	beq.n	8000e98 <MX_DAC1_Init+0x50>
		Error_Handler();
 8000e94:	f000 fafc 	bl	8001490 <Error_Handler>
	}
	/* USER CODE BEGIN DAC1_Init 2 */

	/* USER CODE END DAC1_Init 2 */

}
 8000e98:	46c0      	nop			; (mov r8, r8)
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	b002      	add	sp, #8
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	2000041a 	.word	0x2000041a
 8000ea4:	200000f0 	.word	0x200000f0
 8000ea8:	40007400 	.word	0x40007400

08000eac <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000eb0:	4b1b      	ldr	r3, [pc, #108]	; (8000f20 <MX_I2C1_Init+0x74>)
 8000eb2:	4a1c      	ldr	r2, [pc, #112]	; (8000f24 <MX_I2C1_Init+0x78>)
 8000eb4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x2000090E;
 8000eb6:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <MX_I2C1_Init+0x74>)
 8000eb8:	4a1b      	ldr	r2, [pc, #108]	; (8000f28 <MX_I2C1_Init+0x7c>)
 8000eba:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000ebc:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <MX_I2C1_Init+0x74>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ec2:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <MX_I2C1_Init+0x74>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ec8:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <MX_I2C1_Init+0x74>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000ece:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <MX_I2C1_Init+0x74>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <MX_I2C1_Init+0x74>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eda:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <MX_I2C1_Init+0x74>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ee0:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <MX_I2C1_Init+0x74>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <MX_I2C1_Init+0x74>)
 8000ee8:	0018      	movs	r0, r3
 8000eea:	f002 f801 	bl	8002ef0 <HAL_I2C_Init>
 8000eee:	1e03      	subs	r3, r0, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_I2C1_Init+0x4a>
		Error_Handler();
 8000ef2:	f000 facd 	bl	8001490 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <MX_I2C1_Init+0x74>)
 8000ef8:	2100      	movs	r1, #0
 8000efa:	0018      	movs	r0, r3
 8000efc:	f002 fc96 	bl	800382c <HAL_I2CEx_ConfigAnalogFilter>
 8000f00:	1e03      	subs	r3, r0, #0
 8000f02:	d001      	beq.n	8000f08 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8000f04:	f000 fac4 	bl	8001490 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000f08:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <MX_I2C1_Init+0x74>)
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	f002 fcd9 	bl	80038c4 <HAL_I2CEx_ConfigDigitalFilter>
 8000f12:	1e03      	subs	r3, r0, #0
 8000f14:	d001      	beq.n	8000f1a <MX_I2C1_Init+0x6e>
		Error_Handler();
 8000f16:	f000 fabb 	bl	8001490 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000104 	.word	0x20000104
 8000f24:	40005400 	.word	0x40005400
 8000f28:	2000090e 	.word	0x2000090e

08000f2c <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000f30:	4b1c      	ldr	r3, [pc, #112]	; (8000fa4 <MX_SPI1_Init+0x78>)
 8000f32:	4a1d      	ldr	r2, [pc, #116]	; (8000fa8 <MX_SPI1_Init+0x7c>)
 8000f34:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f36:	4b1b      	ldr	r3, [pc, #108]	; (8000fa4 <MX_SPI1_Init+0x78>)
 8000f38:	2282      	movs	r2, #130	; 0x82
 8000f3a:	0052      	lsls	r2, r2, #1
 8000f3c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000f3e:	4b19      	ldr	r3, [pc, #100]	; (8000fa4 <MX_SPI1_Init+0x78>)
 8000f40:	2280      	movs	r2, #128	; 0x80
 8000f42:	00d2      	lsls	r2, r2, #3
 8000f44:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000f46:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <MX_SPI1_Init+0x78>)
 8000f48:	22f0      	movs	r2, #240	; 0xf0
 8000f4a:	0112      	lsls	r2, r2, #4
 8000f4c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f4e:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <MX_SPI1_Init+0x78>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f54:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <MX_SPI1_Init+0x78>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f5a:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <MX_SPI1_Init+0x78>)
 8000f5c:	2280      	movs	r2, #128	; 0x80
 8000f5e:	0092      	lsls	r2, r2, #2
 8000f60:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000f62:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <MX_SPI1_Init+0x78>)
 8000f64:	2218      	movs	r2, #24
 8000f66:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f68:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <MX_SPI1_Init+0x78>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f6e:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <MX_SPI1_Init+0x78>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f74:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <MX_SPI1_Init+0x78>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8000f7a:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <MX_SPI1_Init+0x78>)
 8000f7c:	2207      	movs	r2, #7
 8000f7e:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f80:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <MX_SPI1_Init+0x78>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f86:	4b07      	ldr	r3, [pc, #28]	; (8000fa4 <MX_SPI1_Init+0x78>)
 8000f88:	2208      	movs	r2, #8
 8000f8a:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000f8c:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <MX_SPI1_Init+0x78>)
 8000f8e:	0018      	movs	r0, r3
 8000f90:	f003 fa2e 	bl	80043f0 <HAL_SPI_Init>
 8000f94:	1e03      	subs	r3, r0, #0
 8000f96:	d001      	beq.n	8000f9c <MX_SPI1_Init+0x70>
		Error_Handler();
 8000f98:	f000 fa7a 	bl	8001490 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000f9c:	46c0      	nop			; (mov r8, r8)
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	20000150 	.word	0x20000150
 8000fa8:	40013000 	.word	0x40013000

08000fac <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8000fb0:	4b1c      	ldr	r3, [pc, #112]	; (8001024 <MX_SPI2_Init+0x78>)
 8000fb2:	4a1d      	ldr	r2, [pc, #116]	; (8001028 <MX_SPI2_Init+0x7c>)
 8000fb4:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8000fb6:	4b1b      	ldr	r3, [pc, #108]	; (8001024 <MX_SPI2_Init+0x78>)
 8000fb8:	2282      	movs	r2, #130	; 0x82
 8000fba:	0052      	lsls	r2, r2, #1
 8000fbc:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000fbe:	4b19      	ldr	r3, [pc, #100]	; (8001024 <MX_SPI2_Init+0x78>)
 8000fc0:	2280      	movs	r2, #128	; 0x80
 8000fc2:	00d2      	lsls	r2, r2, #3
 8000fc4:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000fc6:	4b17      	ldr	r3, [pc, #92]	; (8001024 <MX_SPI2_Init+0x78>)
 8000fc8:	22f0      	movs	r2, #240	; 0xf0
 8000fca:	0112      	lsls	r2, r2, #4
 8000fcc:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <MX_SPI2_Init+0x78>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fd4:	4b13      	ldr	r3, [pc, #76]	; (8001024 <MX_SPI2_Init+0x78>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8000fda:	4b12      	ldr	r3, [pc, #72]	; (8001024 <MX_SPI2_Init+0x78>)
 8000fdc:	2280      	movs	r2, #128	; 0x80
 8000fde:	0092      	lsls	r2, r2, #2
 8000fe0:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000fe2:	4b10      	ldr	r3, [pc, #64]	; (8001024 <MX_SPI2_Init+0x78>)
 8000fe4:	2218      	movs	r2, #24
 8000fe6:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fe8:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <MX_SPI2_Init+0x78>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fee:	4b0d      	ldr	r3, [pc, #52]	; (8001024 <MX_SPI2_Init+0x78>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ff4:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <MX_SPI2_Init+0x78>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <MX_SPI2_Init+0x78>)
 8000ffc:	2207      	movs	r2, #7
 8000ffe:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001000:	4b08      	ldr	r3, [pc, #32]	; (8001024 <MX_SPI2_Init+0x78>)
 8001002:	2200      	movs	r2, #0
 8001004:	631a      	str	r2, [r3, #48]	; 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001006:	4b07      	ldr	r3, [pc, #28]	; (8001024 <MX_SPI2_Init+0x78>)
 8001008:	2208      	movs	r2, #8
 800100a:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <MX_SPI2_Init+0x78>)
 800100e:	0018      	movs	r0, r3
 8001010:	f003 f9ee 	bl	80043f0 <HAL_SPI_Init>
 8001014:	1e03      	subs	r3, r0, #0
 8001016:	d001      	beq.n	800101c <MX_SPI2_Init+0x70>
		Error_Handler();
 8001018:	f000 fa3a 	bl	8001490 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 800101c:	46c0      	nop			; (mov r8, r8)
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	200001b4 	.word	0x200001b4
 8001028:	40003800 	.word	0x40003800

0800102c <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b096      	sub	sp, #88	; 0x58
 8001030:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001032:	2348      	movs	r3, #72	; 0x48
 8001034:	18fb      	adds	r3, r7, r3
 8001036:	0018      	movs	r0, r3
 8001038:	2310      	movs	r3, #16
 800103a:	001a      	movs	r2, r3
 800103c:	2100      	movs	r1, #0
 800103e:	f005 ff93 	bl	8006f68 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001042:	2340      	movs	r3, #64	; 0x40
 8001044:	18fb      	adds	r3, r7, r3
 8001046:	0018      	movs	r0, r3
 8001048:	2308      	movs	r3, #8
 800104a:	001a      	movs	r2, r3
 800104c:	2100      	movs	r1, #0
 800104e:	f005 ff8b 	bl	8006f68 <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001052:	2324      	movs	r3, #36	; 0x24
 8001054:	18fb      	adds	r3, r7, r3
 8001056:	0018      	movs	r0, r3
 8001058:	231c      	movs	r3, #28
 800105a:	001a      	movs	r2, r3
 800105c:	2100      	movs	r1, #0
 800105e:	f005 ff83 	bl	8006f68 <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	0018      	movs	r0, r3
 8001066:	2320      	movs	r3, #32
 8001068:	001a      	movs	r2, r3
 800106a:	2100      	movs	r1, #0
 800106c:	f005 ff7c 	bl	8006f68 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001070:	4b46      	ldr	r3, [pc, #280]	; (800118c <MX_TIM1_Init+0x160>)
 8001072:	4a47      	ldr	r2, [pc, #284]	; (8001190 <MX_TIM1_Init+0x164>)
 8001074:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 100 - 1;
 8001076:	4b45      	ldr	r3, [pc, #276]	; (800118c <MX_TIM1_Init+0x160>)
 8001078:	2263      	movs	r2, #99	; 0x63
 800107a:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800107c:	4b43      	ldr	r3, [pc, #268]	; (800118c <MX_TIM1_Init+0x160>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 30000 - 1;
 8001082:	4b42      	ldr	r3, [pc, #264]	; (800118c <MX_TIM1_Init+0x160>)
 8001084:	4a43      	ldr	r2, [pc, #268]	; (8001194 <MX_TIM1_Init+0x168>)
 8001086:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001088:	4b40      	ldr	r3, [pc, #256]	; (800118c <MX_TIM1_Init+0x160>)
 800108a:	2200      	movs	r2, #0
 800108c:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800108e:	4b3f      	ldr	r3, [pc, #252]	; (800118c <MX_TIM1_Init+0x160>)
 8001090:	2200      	movs	r2, #0
 8001092:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001094:	4b3d      	ldr	r3, [pc, #244]	; (800118c <MX_TIM1_Init+0x160>)
 8001096:	2280      	movs	r2, #128	; 0x80
 8001098:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 800109a:	4b3c      	ldr	r3, [pc, #240]	; (800118c <MX_TIM1_Init+0x160>)
 800109c:	0018      	movs	r0, r3
 800109e:	f003 fd2d 	bl	8004afc <HAL_TIM_Base_Init>
 80010a2:	1e03      	subs	r3, r0, #0
 80010a4:	d001      	beq.n	80010aa <MX_TIM1_Init+0x7e>
		Error_Handler();
 80010a6:	f000 f9f3 	bl	8001490 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010aa:	2148      	movs	r1, #72	; 0x48
 80010ac:	187b      	adds	r3, r7, r1
 80010ae:	2280      	movs	r2, #128	; 0x80
 80010b0:	0152      	lsls	r2, r2, #5
 80010b2:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80010b4:	187a      	adds	r2, r7, r1
 80010b6:	4b35      	ldr	r3, [pc, #212]	; (800118c <MX_TIM1_Init+0x160>)
 80010b8:	0011      	movs	r1, r2
 80010ba:	0018      	movs	r0, r3
 80010bc:	f004 f834 	bl	8005128 <HAL_TIM_ConfigClockSource>
 80010c0:	1e03      	subs	r3, r0, #0
 80010c2:	d001      	beq.n	80010c8 <MX_TIM1_Init+0x9c>
		Error_Handler();
 80010c4:	f000 f9e4 	bl	8001490 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim1) != HAL_OK) {
 80010c8:	4b30      	ldr	r3, [pc, #192]	; (800118c <MX_TIM1_Init+0x160>)
 80010ca:	0018      	movs	r0, r3
 80010cc:	f003 fd66 	bl	8004b9c <HAL_TIM_OC_Init>
 80010d0:	1e03      	subs	r3, r0, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM1_Init+0xac>
		Error_Handler();
 80010d4:	f000 f9dc 	bl	8001490 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d8:	2140      	movs	r1, #64	; 0x40
 80010da:	187b      	adds	r3, r7, r1
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010e0:	187b      	adds	r3, r7, r1
 80010e2:	2200      	movs	r2, #0
 80010e4:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80010e6:	187a      	adds	r2, r7, r1
 80010e8:	4b28      	ldr	r3, [pc, #160]	; (800118c <MX_TIM1_Init+0x160>)
 80010ea:	0011      	movs	r1, r2
 80010ec:	0018      	movs	r0, r3
 80010ee:	f004 fc49 	bl	8005984 <HAL_TIMEx_MasterConfigSynchronization>
 80010f2:	1e03      	subs	r3, r0, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM1_Init+0xce>
			!= HAL_OK) {
		Error_Handler();
 80010f6:	f000 f9cb 	bl	8001490 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80010fa:	2124      	movs	r1, #36	; 0x24
 80010fc:	187b      	adds	r3, r7, r1
 80010fe:	2230      	movs	r2, #48	; 0x30
 8001100:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 6000 - 1;
 8001102:	187b      	adds	r3, r7, r1
 8001104:	4a24      	ldr	r2, [pc, #144]	; (8001198 <MX_TIM1_Init+0x16c>)
 8001106:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001108:	187b      	adds	r3, r7, r1
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800110e:	187b      	adds	r3, r7, r1
 8001110:	2200      	movs	r2, #0
 8001112:	60da      	str	r2, [r3, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001114:	187b      	adds	r3, r7, r1
 8001116:	2200      	movs	r2, #0
 8001118:	611a      	str	r2, [r3, #16]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800111a:	187b      	adds	r3, r7, r1
 800111c:	2200      	movs	r2, #0
 800111e:	615a      	str	r2, [r3, #20]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001120:	187b      	adds	r3, r7, r1
 8001122:	2200      	movs	r2, #0
 8001124:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8001126:	1879      	adds	r1, r7, r1
 8001128:	4b18      	ldr	r3, [pc, #96]	; (800118c <MX_TIM1_Init+0x160>)
 800112a:	2200      	movs	r2, #0
 800112c:	0018      	movs	r0, r3
 800112e:	f003 ffa3 	bl	8005078 <HAL_TIM_OC_ConfigChannel>
 8001132:	1e03      	subs	r3, r0, #0
 8001134:	d001      	beq.n	800113a <MX_TIM1_Init+0x10e>
		Error_Handler();
 8001136:	f000 f9ab 	bl	8001490 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001140:	1d3b      	adds	r3, r7, #4
 8001142:	2200      	movs	r2, #0
 8001144:	605a      	str	r2, [r3, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	2200      	movs	r2, #0
 8001150:	60da      	str	r2, [r3, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	2200      	movs	r2, #0
 8001156:	611a      	str	r2, [r3, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	2280      	movs	r2, #128	; 0x80
 800115c:	0192      	lsls	r2, r2, #6
 800115e:	615a      	str	r2, [r3, #20]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	2200      	movs	r2, #0
 8001164:	61da      	str	r2, [r3, #28]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8001166:	1d3a      	adds	r2, r7, #4
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <MX_TIM1_Init+0x160>)
 800116a:	0011      	movs	r1, r2
 800116c:	0018      	movs	r0, r3
 800116e:	f004 fc67 	bl	8005a40 <HAL_TIMEx_ConfigBreakDeadTime>
 8001172:	1e03      	subs	r3, r0, #0
 8001174:	d001      	beq.n	800117a <MX_TIM1_Init+0x14e>
			!= HAL_OK) {
		Error_Handler();
 8001176:	f000 f98b 	bl	8001490 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 800117a:	4b04      	ldr	r3, [pc, #16]	; (800118c <MX_TIM1_Init+0x160>)
 800117c:	0018      	movs	r0, r3
 800117e:	f000 fbc7 	bl	8001910 <HAL_TIM_MspPostInit>

}
 8001182:	46c0      	nop			; (mov r8, r8)
 8001184:	46bd      	mov	sp, r7
 8001186:	b016      	add	sp, #88	; 0x58
 8001188:	bd80      	pop	{r7, pc}
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	20000218 	.word	0x20000218
 8001190:	40012c00 	.word	0x40012c00
 8001194:	0000752f 	.word	0x0000752f
 8001198:	0000176f 	.word	0x0000176f

0800119c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b08e      	sub	sp, #56	; 0x38
 80011a0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80011a2:	2328      	movs	r3, #40	; 0x28
 80011a4:	18fb      	adds	r3, r7, r3
 80011a6:	0018      	movs	r0, r3
 80011a8:	2310      	movs	r3, #16
 80011aa:	001a      	movs	r2, r3
 80011ac:	2100      	movs	r1, #0
 80011ae:	f005 fedb 	bl	8006f68 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80011b2:	2320      	movs	r3, #32
 80011b4:	18fb      	adds	r3, r7, r3
 80011b6:	0018      	movs	r0, r3
 80011b8:	2308      	movs	r3, #8
 80011ba:	001a      	movs	r2, r3
 80011bc:	2100      	movs	r1, #0
 80011be:	f005 fed3 	bl	8006f68 <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	0018      	movs	r0, r3
 80011c6:	231c      	movs	r3, #28
 80011c8:	001a      	movs	r2, r3
 80011ca:	2100      	movs	r1, #0
 80011cc:	f005 fecc 	bl	8006f68 <memset>

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80011d0:	4b30      	ldr	r3, [pc, #192]	; (8001294 <MX_TIM2_Init+0xf8>)
 80011d2:	2280      	movs	r2, #128	; 0x80
 80011d4:	05d2      	lsls	r2, r2, #23
 80011d6:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 100 - 1;
 80011d8:	4b2e      	ldr	r3, [pc, #184]	; (8001294 <MX_TIM2_Init+0xf8>)
 80011da:	2263      	movs	r2, #99	; 0x63
 80011dc:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011de:	4b2d      	ldr	r3, [pc, #180]	; (8001294 <MX_TIM2_Init+0xf8>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 24000 - 1;
 80011e4:	4b2b      	ldr	r3, [pc, #172]	; (8001294 <MX_TIM2_Init+0xf8>)
 80011e6:	4a2c      	ldr	r2, [pc, #176]	; (8001298 <MX_TIM2_Init+0xfc>)
 80011e8:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ea:	4b2a      	ldr	r3, [pc, #168]	; (8001294 <MX_TIM2_Init+0xf8>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011f0:	4b28      	ldr	r3, [pc, #160]	; (8001294 <MX_TIM2_Init+0xf8>)
 80011f2:	2280      	movs	r2, #128	; 0x80
 80011f4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80011f6:	4b27      	ldr	r3, [pc, #156]	; (8001294 <MX_TIM2_Init+0xf8>)
 80011f8:	0018      	movs	r0, r3
 80011fa:	f003 fc7f 	bl	8004afc <HAL_TIM_Base_Init>
 80011fe:	1e03      	subs	r3, r0, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM2_Init+0x6a>
		Error_Handler();
 8001202:	f000 f945 	bl	8001490 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001206:	2128      	movs	r1, #40	; 0x28
 8001208:	187b      	adds	r3, r7, r1
 800120a:	2280      	movs	r2, #128	; 0x80
 800120c:	0152      	lsls	r2, r2, #5
 800120e:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001210:	187a      	adds	r2, r7, r1
 8001212:	4b20      	ldr	r3, [pc, #128]	; (8001294 <MX_TIM2_Init+0xf8>)
 8001214:	0011      	movs	r1, r2
 8001216:	0018      	movs	r0, r3
 8001218:	f003 ff86 	bl	8005128 <HAL_TIM_ConfigClockSource>
 800121c:	1e03      	subs	r3, r0, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM2_Init+0x88>
		Error_Handler();
 8001220:	f000 f936 	bl	8001490 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim2) != HAL_OK) {
 8001224:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <MX_TIM2_Init+0xf8>)
 8001226:	0018      	movs	r0, r3
 8001228:	f003 fcb8 	bl	8004b9c <HAL_TIM_OC_Init>
 800122c:	1e03      	subs	r3, r0, #0
 800122e:	d001      	beq.n	8001234 <MX_TIM2_Init+0x98>
		Error_Handler();
 8001230:	f000 f92e 	bl	8001490 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001234:	2120      	movs	r1, #32
 8001236:	187b      	adds	r3, r7, r1
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800123c:	187b      	adds	r3, r7, r1
 800123e:	2200      	movs	r2, #0
 8001240:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001242:	187a      	adds	r2, r7, r1
 8001244:	4b13      	ldr	r3, [pc, #76]	; (8001294 <MX_TIM2_Init+0xf8>)
 8001246:	0011      	movs	r1, r2
 8001248:	0018      	movs	r0, r3
 800124a:	f004 fb9b 	bl	8005984 <HAL_TIMEx_MasterConfigSynchronization>
 800124e:	1e03      	subs	r3, r0, #0
 8001250:	d001      	beq.n	8001256 <MX_TIM2_Init+0xba>
			!= HAL_OK) {
		Error_Handler();
 8001252:	f000 f91d 	bl	8001490 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	2230      	movs	r2, #48	; 0x30
 800125a:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 12000 - 1;
 800125c:	1d3b      	adds	r3, r7, #4
 800125e:	4a0f      	ldr	r2, [pc, #60]	; (800129c <MX_TIM2_Init+0x100>)
 8001260:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	2200      	movs	r2, #0
 8001266:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001268:	1d3b      	adds	r3, r7, #4
 800126a:	2200      	movs	r2, #0
 800126c:	611a      	str	r2, [r3, #16]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) {
 800126e:	1d39      	adds	r1, r7, #4
 8001270:	4b08      	ldr	r3, [pc, #32]	; (8001294 <MX_TIM2_Init+0xf8>)
 8001272:	220c      	movs	r2, #12
 8001274:	0018      	movs	r0, r3
 8001276:	f003 feff 	bl	8005078 <HAL_TIM_OC_ConfigChannel>
 800127a:	1e03      	subs	r3, r0, #0
 800127c:	d001      	beq.n	8001282 <MX_TIM2_Init+0xe6>
		Error_Handler();
 800127e:	f000 f907 	bl	8001490 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */
	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8001282:	4b04      	ldr	r3, [pc, #16]	; (8001294 <MX_TIM2_Init+0xf8>)
 8001284:	0018      	movs	r0, r3
 8001286:	f000 fb43 	bl	8001910 <HAL_TIM_MspPostInit>

}
 800128a:	46c0      	nop			; (mov r8, r8)
 800128c:	46bd      	mov	sp, r7
 800128e:	b00e      	add	sp, #56	; 0x38
 8001290:	bd80      	pop	{r7, pc}
 8001292:	46c0      	nop			; (mov r8, r8)
 8001294:	20000260 	.word	0x20000260
 8001298:	00005dbf 	.word	0x00005dbf
 800129c:	00002edf 	.word	0x00002edf

080012a0 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN USART1_Init 0 */
	erpa_seq = 0;
 80012a4:	4b19      	ldr	r3, [pc, #100]	; (800130c <MX_USART1_UART_Init+0x6c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	801a      	strh	r2, [r3, #0]
	pmt_seq = 0;
 80012aa:	4b19      	ldr	r3, [pc, #100]	; (8001310 <MX_USART1_UART_Init+0x70>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	801a      	strh	r2, [r3, #0]
	hk_seq = 0;
 80012b0:	4b18      	ldr	r3, [pc, #96]	; (8001314 <MX_USART1_UART_Init+0x74>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	801a      	strh	r2, [r3, #0]
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80012b6:	4b18      	ldr	r3, [pc, #96]	; (8001318 <MX_USART1_UART_Init+0x78>)
 80012b8:	4a18      	ldr	r2, [pc, #96]	; (800131c <MX_USART1_UART_Init+0x7c>)
 80012ba:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80012bc:	4b16      	ldr	r3, [pc, #88]	; (8001318 <MX_USART1_UART_Init+0x78>)
 80012be:	22e1      	movs	r2, #225	; 0xe1
 80012c0:	0252      	lsls	r2, r2, #9
 80012c2:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012c4:	4b14      	ldr	r3, [pc, #80]	; (8001318 <MX_USART1_UART_Init+0x78>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80012ca:	4b13      	ldr	r3, [pc, #76]	; (8001318 <MX_USART1_UART_Init+0x78>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80012d0:	4b11      	ldr	r3, [pc, #68]	; (8001318 <MX_USART1_UART_Init+0x78>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80012d6:	4b10      	ldr	r3, [pc, #64]	; (8001318 <MX_USART1_UART_Init+0x78>)
 80012d8:	220c      	movs	r2, #12
 80012da:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012dc:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <MX_USART1_UART_Init+0x78>)
 80012de:	2200      	movs	r2, #0
 80012e0:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e2:	4b0d      	ldr	r3, [pc, #52]	; (8001318 <MX_USART1_UART_Init+0x78>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012e8:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <MX_USART1_UART_Init+0x78>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012ee:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <MX_USART1_UART_Init+0x78>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80012f4:	4b08      	ldr	r3, [pc, #32]	; (8001318 <MX_USART1_UART_Init+0x78>)
 80012f6:	0018      	movs	r0, r3
 80012f8:	f004 fc10 	bl	8005b1c <HAL_UART_Init>
 80012fc:	1e03      	subs	r3, r0, #0
 80012fe:	d001      	beq.n	8001304 <MX_USART1_UART_Init+0x64>
		Error_Handler();
 8001300:	f000 f8c6 	bl	8001490 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001304:	46c0      	nop			; (mov r8, r8)
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	46c0      	nop			; (mov r8, r8)
 800130c:	20000430 	.word	0x20000430
 8001310:	2000043a 	.word	0x2000043a
 8001314:	2000045c 	.word	0x2000045c
 8001318:	200002a8 	.word	0x200002a8
 800131c:	40013800 	.word	0x40013800

08001320 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001326:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <MX_DMA_Init+0x38>)
 8001328:	695a      	ldr	r2, [r3, #20]
 800132a:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <MX_DMA_Init+0x38>)
 800132c:	2101      	movs	r1, #1
 800132e:	430a      	orrs	r2, r1
 8001330:	615a      	str	r2, [r3, #20]
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <MX_DMA_Init+0x38>)
 8001334:	695b      	ldr	r3, [r3, #20]
 8001336:	2201      	movs	r2, #1
 8001338:	4013      	ands	r3, r2
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800133e:	2200      	movs	r2, #0
 8001340:	2100      	movs	r1, #0
 8001342:	2009      	movs	r0, #9
 8001344:	f001 f92c 	bl	80025a0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001348:	2009      	movs	r0, #9
 800134a:	f001 f93e 	bl	80025ca <HAL_NVIC_EnableIRQ>

}
 800134e:	46c0      	nop			; (mov r8, r8)
 8001350:	46bd      	mov	sp, r7
 8001352:	b002      	add	sp, #8
 8001354:	bd80      	pop	{r7, pc}
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	40021000 	.word	0x40021000

0800135c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800135c:	b590      	push	{r4, r7, lr}
 800135e:	b08b      	sub	sp, #44	; 0x2c
 8001360:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001362:	2414      	movs	r4, #20
 8001364:	193b      	adds	r3, r7, r4
 8001366:	0018      	movs	r0, r3
 8001368:	2314      	movs	r3, #20
 800136a:	001a      	movs	r2, r3
 800136c:	2100      	movs	r1, #0
 800136e:	f005 fdfb 	bl	8006f68 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001372:	4b43      	ldr	r3, [pc, #268]	; (8001480 <MX_GPIO_Init+0x124>)
 8001374:	695a      	ldr	r2, [r3, #20]
 8001376:	4b42      	ldr	r3, [pc, #264]	; (8001480 <MX_GPIO_Init+0x124>)
 8001378:	2180      	movs	r1, #128	; 0x80
 800137a:	0309      	lsls	r1, r1, #12
 800137c:	430a      	orrs	r2, r1
 800137e:	615a      	str	r2, [r3, #20]
 8001380:	4b3f      	ldr	r3, [pc, #252]	; (8001480 <MX_GPIO_Init+0x124>)
 8001382:	695a      	ldr	r2, [r3, #20]
 8001384:	2380      	movs	r3, #128	; 0x80
 8001386:	031b      	lsls	r3, r3, #12
 8001388:	4013      	ands	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
 800138c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800138e:	4b3c      	ldr	r3, [pc, #240]	; (8001480 <MX_GPIO_Init+0x124>)
 8001390:	695a      	ldr	r2, [r3, #20]
 8001392:	4b3b      	ldr	r3, [pc, #236]	; (8001480 <MX_GPIO_Init+0x124>)
 8001394:	2180      	movs	r1, #128	; 0x80
 8001396:	03c9      	lsls	r1, r1, #15
 8001398:	430a      	orrs	r2, r1
 800139a:	615a      	str	r2, [r3, #20]
 800139c:	4b38      	ldr	r3, [pc, #224]	; (8001480 <MX_GPIO_Init+0x124>)
 800139e:	695a      	ldr	r2, [r3, #20]
 80013a0:	2380      	movs	r3, #128	; 0x80
 80013a2:	03db      	lsls	r3, r3, #15
 80013a4:	4013      	ands	r3, r2
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80013aa:	4b35      	ldr	r3, [pc, #212]	; (8001480 <MX_GPIO_Init+0x124>)
 80013ac:	695a      	ldr	r2, [r3, #20]
 80013ae:	4b34      	ldr	r3, [pc, #208]	; (8001480 <MX_GPIO_Init+0x124>)
 80013b0:	2180      	movs	r1, #128	; 0x80
 80013b2:	0289      	lsls	r1, r1, #10
 80013b4:	430a      	orrs	r2, r1
 80013b6:	615a      	str	r2, [r3, #20]
 80013b8:	4b31      	ldr	r3, [pc, #196]	; (8001480 <MX_GPIO_Init+0x124>)
 80013ba:	695a      	ldr	r2, [r3, #20]
 80013bc:	2380      	movs	r3, #128	; 0x80
 80013be:	029b      	lsls	r3, r3, #10
 80013c0:	4013      	ands	r3, r2
 80013c2:	60bb      	str	r3, [r7, #8]
 80013c4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80013c6:	4b2e      	ldr	r3, [pc, #184]	; (8001480 <MX_GPIO_Init+0x124>)
 80013c8:	695a      	ldr	r2, [r3, #20]
 80013ca:	4b2d      	ldr	r3, [pc, #180]	; (8001480 <MX_GPIO_Init+0x124>)
 80013cc:	2180      	movs	r1, #128	; 0x80
 80013ce:	02c9      	lsls	r1, r1, #11
 80013d0:	430a      	orrs	r2, r1
 80013d2:	615a      	str	r2, [r3, #20]
 80013d4:	4b2a      	ldr	r3, [pc, #168]	; (8001480 <MX_GPIO_Init+0x124>)
 80013d6:	695a      	ldr	r2, [r3, #20]
 80013d8:	2380      	movs	r3, #128	; 0x80
 80013da:	02db      	lsls	r3, r3, #11
 80013dc:	4013      	ands	r3, r2
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC,
 80013e2:	239f      	movs	r3, #159	; 0x9f
 80013e4:	019b      	lsls	r3, r3, #6
 80013e6:	4827      	ldr	r0, [pc, #156]	; (8001484 <MX_GPIO_Init+0x128>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	0019      	movs	r1, r3
 80013ec:	f001 fd47 	bl	8002e7e <HAL_GPIO_WritePin>
			GPIO_PIN_13 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9
					| GPIO_PIN_10, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6 | GPIO_PIN_7, GPIO_PIN_RESET);
 80013f0:	4b25      	ldr	r3, [pc, #148]	; (8001488 <MX_GPIO_Init+0x12c>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	21c0      	movs	r1, #192	; 0xc0
 80013f6:	0018      	movs	r0, r3
 80013f8:	f001 fd41 	bl	8002e7e <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5 | GPIO_PIN_6, GPIO_PIN_RESET);
 80013fc:	4b23      	ldr	r3, [pc, #140]	; (800148c <MX_GPIO_Init+0x130>)
 80013fe:	2200      	movs	r2, #0
 8001400:	2160      	movs	r1, #96	; 0x60
 8001402:	0018      	movs	r0, r3
 8001404:	f001 fd3b 	bl	8002e7e <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PC13 PC6 PC7 PC8
	 PC9 PC10 */
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8
 8001408:	193b      	adds	r3, r7, r4
 800140a:	229f      	movs	r2, #159	; 0x9f
 800140c:	0192      	lsls	r2, r2, #6
 800140e:	601a      	str	r2, [r3, #0]
			| GPIO_PIN_9 | GPIO_PIN_10;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001410:	193b      	adds	r3, r7, r4
 8001412:	2201      	movs	r2, #1
 8001414:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	193b      	adds	r3, r7, r4
 8001418:	2200      	movs	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	193b      	adds	r3, r7, r4
 800141e:	2200      	movs	r2, #0
 8001420:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001422:	193b      	adds	r3, r7, r4
 8001424:	4a17      	ldr	r2, [pc, #92]	; (8001484 <MX_GPIO_Init+0x128>)
 8001426:	0019      	movs	r1, r3
 8001428:	0010      	movs	r0, r2
 800142a:	f001 fb9b 	bl	8002b64 <HAL_GPIO_Init>

	/*Configure GPIO pins : PF6 PF7 */
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 800142e:	193b      	adds	r3, r7, r4
 8001430:	22c0      	movs	r2, #192	; 0xc0
 8001432:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001434:	193b      	adds	r3, r7, r4
 8001436:	2201      	movs	r2, #1
 8001438:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	193b      	adds	r3, r7, r4
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001440:	193b      	adds	r3, r7, r4
 8001442:	2200      	movs	r2, #0
 8001444:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001446:	193b      	adds	r3, r7, r4
 8001448:	4a0f      	ldr	r2, [pc, #60]	; (8001488 <MX_GPIO_Init+0x12c>)
 800144a:	0019      	movs	r1, r3
 800144c:	0010      	movs	r0, r2
 800144e:	f001 fb89 	bl	8002b64 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB5 PB6 */
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8001452:	0021      	movs	r1, r4
 8001454:	187b      	adds	r3, r7, r1
 8001456:	2260      	movs	r2, #96	; 0x60
 8001458:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145a:	187b      	adds	r3, r7, r1
 800145c:	2201      	movs	r2, #1
 800145e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	187b      	adds	r3, r7, r1
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001466:	187b      	adds	r3, r7, r1
 8001468:	2200      	movs	r2, #0
 800146a:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146c:	187b      	adds	r3, r7, r1
 800146e:	4a07      	ldr	r2, [pc, #28]	; (800148c <MX_GPIO_Init+0x130>)
 8001470:	0019      	movs	r1, r3
 8001472:	0010      	movs	r0, r2
 8001474:	f001 fb76 	bl	8002b64 <HAL_GPIO_Init>

}
 8001478:	46c0      	nop			; (mov r8, r8)
 800147a:	46bd      	mov	sp, r7
 800147c:	b00b      	add	sp, #44	; 0x2c
 800147e:	bd90      	pop	{r4, r7, pc}
 8001480:	40021000 	.word	0x40021000
 8001484:	48000800 	.word	0x48000800
 8001488:	48001400 	.word	0x48001400
 800148c:	48000400 	.word	0x48000400

08001490 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001494:	b672      	cpsid	i
}
 8001496:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001498:	e7fe      	b.n	8001498 <Error_Handler+0x8>
	...

0800149c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a2:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <HAL_MspInit+0x44>)
 80014a4:	699a      	ldr	r2, [r3, #24]
 80014a6:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <HAL_MspInit+0x44>)
 80014a8:	2101      	movs	r1, #1
 80014aa:	430a      	orrs	r2, r1
 80014ac:	619a      	str	r2, [r3, #24]
 80014ae:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <HAL_MspInit+0x44>)
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	2201      	movs	r2, #1
 80014b4:	4013      	ands	r3, r2
 80014b6:	607b      	str	r3, [r7, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ba:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <HAL_MspInit+0x44>)
 80014bc:	69da      	ldr	r2, [r3, #28]
 80014be:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <HAL_MspInit+0x44>)
 80014c0:	2180      	movs	r1, #128	; 0x80
 80014c2:	0549      	lsls	r1, r1, #21
 80014c4:	430a      	orrs	r2, r1
 80014c6:	61da      	str	r2, [r3, #28]
 80014c8:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <HAL_MspInit+0x44>)
 80014ca:	69da      	ldr	r2, [r3, #28]
 80014cc:	2380      	movs	r3, #128	; 0x80
 80014ce:	055b      	lsls	r3, r3, #21
 80014d0:	4013      	ands	r3, r2
 80014d2:	603b      	str	r3, [r7, #0]
 80014d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	46bd      	mov	sp, r7
 80014da:	b002      	add	sp, #8
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	46c0      	nop			; (mov r8, r8)
 80014e0:	40021000 	.word	0x40021000

080014e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014e4:	b590      	push	{r4, r7, lr}
 80014e6:	b08d      	sub	sp, #52	; 0x34
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ec:	241c      	movs	r4, #28
 80014ee:	193b      	adds	r3, r7, r4
 80014f0:	0018      	movs	r0, r3
 80014f2:	2314      	movs	r3, #20
 80014f4:	001a      	movs	r2, r3
 80014f6:	2100      	movs	r1, #0
 80014f8:	f005 fd36 	bl	8006f68 <memset>
  if(hadc->Instance==ADC1)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a4a      	ldr	r2, [pc, #296]	; (800162c <HAL_ADC_MspInit+0x148>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d000      	beq.n	8001508 <HAL_ADC_MspInit+0x24>
 8001506:	e08d      	b.n	8001624 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001508:	4b49      	ldr	r3, [pc, #292]	; (8001630 <HAL_ADC_MspInit+0x14c>)
 800150a:	699a      	ldr	r2, [r3, #24]
 800150c:	4b48      	ldr	r3, [pc, #288]	; (8001630 <HAL_ADC_MspInit+0x14c>)
 800150e:	2180      	movs	r1, #128	; 0x80
 8001510:	0089      	lsls	r1, r1, #2
 8001512:	430a      	orrs	r2, r1
 8001514:	619a      	str	r2, [r3, #24]
 8001516:	4b46      	ldr	r3, [pc, #280]	; (8001630 <HAL_ADC_MspInit+0x14c>)
 8001518:	699a      	ldr	r2, [r3, #24]
 800151a:	2380      	movs	r3, #128	; 0x80
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4013      	ands	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
 8001522:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001524:	4b42      	ldr	r3, [pc, #264]	; (8001630 <HAL_ADC_MspInit+0x14c>)
 8001526:	695a      	ldr	r2, [r3, #20]
 8001528:	4b41      	ldr	r3, [pc, #260]	; (8001630 <HAL_ADC_MspInit+0x14c>)
 800152a:	2180      	movs	r1, #128	; 0x80
 800152c:	0309      	lsls	r1, r1, #12
 800152e:	430a      	orrs	r2, r1
 8001530:	615a      	str	r2, [r3, #20]
 8001532:	4b3f      	ldr	r3, [pc, #252]	; (8001630 <HAL_ADC_MspInit+0x14c>)
 8001534:	695a      	ldr	r2, [r3, #20]
 8001536:	2380      	movs	r3, #128	; 0x80
 8001538:	031b      	lsls	r3, r3, #12
 800153a:	4013      	ands	r3, r2
 800153c:	617b      	str	r3, [r7, #20]
 800153e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001540:	4b3b      	ldr	r3, [pc, #236]	; (8001630 <HAL_ADC_MspInit+0x14c>)
 8001542:	695a      	ldr	r2, [r3, #20]
 8001544:	4b3a      	ldr	r3, [pc, #232]	; (8001630 <HAL_ADC_MspInit+0x14c>)
 8001546:	2180      	movs	r1, #128	; 0x80
 8001548:	0289      	lsls	r1, r1, #10
 800154a:	430a      	orrs	r2, r1
 800154c:	615a      	str	r2, [r3, #20]
 800154e:	4b38      	ldr	r3, [pc, #224]	; (8001630 <HAL_ADC_MspInit+0x14c>)
 8001550:	695a      	ldr	r2, [r3, #20]
 8001552:	2380      	movs	r3, #128	; 0x80
 8001554:	029b      	lsls	r3, r3, #10
 8001556:	4013      	ands	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
 800155a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800155c:	4b34      	ldr	r3, [pc, #208]	; (8001630 <HAL_ADC_MspInit+0x14c>)
 800155e:	695a      	ldr	r2, [r3, #20]
 8001560:	4b33      	ldr	r3, [pc, #204]	; (8001630 <HAL_ADC_MspInit+0x14c>)
 8001562:	2180      	movs	r1, #128	; 0x80
 8001564:	02c9      	lsls	r1, r1, #11
 8001566:	430a      	orrs	r2, r1
 8001568:	615a      	str	r2, [r3, #20]
 800156a:	4b31      	ldr	r3, [pc, #196]	; (8001630 <HAL_ADC_MspInit+0x14c>)
 800156c:	695a      	ldr	r2, [r3, #20]
 800156e:	2380      	movs	r3, #128	; 0x80
 8001570:	02db      	lsls	r3, r3, #11
 8001572:	4013      	ands	r3, r2
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001578:	193b      	adds	r3, r7, r4
 800157a:	223f      	movs	r2, #63	; 0x3f
 800157c:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800157e:	193b      	adds	r3, r7, r4
 8001580:	2203      	movs	r2, #3
 8001582:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	193b      	adds	r3, r7, r4
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800158a:	193b      	adds	r3, r7, r4
 800158c:	4a29      	ldr	r2, [pc, #164]	; (8001634 <HAL_ADC_MspInit+0x150>)
 800158e:	0019      	movs	r1, r3
 8001590:	0010      	movs	r0, r2
 8001592:	f001 fae7 	bl	8002b64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001596:	193b      	adds	r3, r7, r4
 8001598:	22ef      	movs	r2, #239	; 0xef
 800159a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800159c:	193b      	adds	r3, r7, r4
 800159e:	2203      	movs	r2, #3
 80015a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	193b      	adds	r3, r7, r4
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a8:	193a      	adds	r2, r7, r4
 80015aa:	2390      	movs	r3, #144	; 0x90
 80015ac:	05db      	lsls	r3, r3, #23
 80015ae:	0011      	movs	r1, r2
 80015b0:	0018      	movs	r0, r3
 80015b2:	f001 fad7 	bl	8002b64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015b6:	193b      	adds	r3, r7, r4
 80015b8:	2203      	movs	r2, #3
 80015ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015bc:	193b      	adds	r3, r7, r4
 80015be:	2203      	movs	r2, #3
 80015c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	193b      	adds	r3, r7, r4
 80015c4:	2200      	movs	r2, #0
 80015c6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c8:	193b      	adds	r3, r7, r4
 80015ca:	4a1b      	ldr	r2, [pc, #108]	; (8001638 <HAL_ADC_MspInit+0x154>)
 80015cc:	0019      	movs	r1, r3
 80015ce:	0010      	movs	r0, r2
 80015d0:	f001 fac8 	bl	8002b64 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80015d4:	4b19      	ldr	r3, [pc, #100]	; (800163c <HAL_ADC_MspInit+0x158>)
 80015d6:	4a1a      	ldr	r2, [pc, #104]	; (8001640 <HAL_ADC_MspInit+0x15c>)
 80015d8:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015da:	4b18      	ldr	r3, [pc, #96]	; (800163c <HAL_ADC_MspInit+0x158>)
 80015dc:	2200      	movs	r2, #0
 80015de:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80015e0:	4b16      	ldr	r3, [pc, #88]	; (800163c <HAL_ADC_MspInit+0x158>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80015e6:	4b15      	ldr	r3, [pc, #84]	; (800163c <HAL_ADC_MspInit+0x158>)
 80015e8:	2280      	movs	r2, #128	; 0x80
 80015ea:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015ec:	4b13      	ldr	r3, [pc, #76]	; (800163c <HAL_ADC_MspInit+0x158>)
 80015ee:	2280      	movs	r2, #128	; 0x80
 80015f0:	0052      	lsls	r2, r2, #1
 80015f2:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015f4:	4b11      	ldr	r3, [pc, #68]	; (800163c <HAL_ADC_MspInit+0x158>)
 80015f6:	2280      	movs	r2, #128	; 0x80
 80015f8:	00d2      	lsls	r2, r2, #3
 80015fa:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 80015fc:	4b0f      	ldr	r3, [pc, #60]	; (800163c <HAL_ADC_MspInit+0x158>)
 80015fe:	2200      	movs	r2, #0
 8001600:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8001602:	4b0e      	ldr	r3, [pc, #56]	; (800163c <HAL_ADC_MspInit+0x158>)
 8001604:	2200      	movs	r2, #0
 8001606:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001608:	4b0c      	ldr	r3, [pc, #48]	; (800163c <HAL_ADC_MspInit+0x158>)
 800160a:	0018      	movs	r0, r3
 800160c:	f001 f894 	bl	8002738 <HAL_DMA_Init>
 8001610:	1e03      	subs	r3, r0, #0
 8001612:	d001      	beq.n	8001618 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8001614:	f7ff ff3c 	bl	8001490 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a08      	ldr	r2, [pc, #32]	; (800163c <HAL_ADC_MspInit+0x158>)
 800161c:	631a      	str	r2, [r3, #48]	; 0x30
 800161e:	4b07      	ldr	r3, [pc, #28]	; (800163c <HAL_ADC_MspInit+0x158>)
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001624:	46c0      	nop			; (mov r8, r8)
 8001626:	46bd      	mov	sp, r7
 8001628:	b00d      	add	sp, #52	; 0x34
 800162a:	bd90      	pop	{r4, r7, pc}
 800162c:	40012400 	.word	0x40012400
 8001630:	40021000 	.word	0x40021000
 8001634:	48000800 	.word	0x48000800
 8001638:	48000400 	.word	0x48000400
 800163c:	200000ac 	.word	0x200000ac
 8001640:	40020008 	.word	0x40020008

08001644 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001644:	b590      	push	{r4, r7, lr}
 8001646:	b08b      	sub	sp, #44	; 0x2c
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164c:	2414      	movs	r4, #20
 800164e:	193b      	adds	r3, r7, r4
 8001650:	0018      	movs	r0, r3
 8001652:	2314      	movs	r3, #20
 8001654:	001a      	movs	r2, r3
 8001656:	2100      	movs	r1, #0
 8001658:	f005 fc86 	bl	8006f68 <memset>
  if(hdac->Instance==DAC)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a19      	ldr	r2, [pc, #100]	; (80016c8 <HAL_DAC_MspInit+0x84>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d12b      	bne.n	80016be <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001666:	4b19      	ldr	r3, [pc, #100]	; (80016cc <HAL_DAC_MspInit+0x88>)
 8001668:	69da      	ldr	r2, [r3, #28]
 800166a:	4b18      	ldr	r3, [pc, #96]	; (80016cc <HAL_DAC_MspInit+0x88>)
 800166c:	2180      	movs	r1, #128	; 0x80
 800166e:	0589      	lsls	r1, r1, #22
 8001670:	430a      	orrs	r2, r1
 8001672:	61da      	str	r2, [r3, #28]
 8001674:	4b15      	ldr	r3, [pc, #84]	; (80016cc <HAL_DAC_MspInit+0x88>)
 8001676:	69da      	ldr	r2, [r3, #28]
 8001678:	2380      	movs	r3, #128	; 0x80
 800167a:	059b      	lsls	r3, r3, #22
 800167c:	4013      	ands	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
 8001680:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001682:	4b12      	ldr	r3, [pc, #72]	; (80016cc <HAL_DAC_MspInit+0x88>)
 8001684:	695a      	ldr	r2, [r3, #20]
 8001686:	4b11      	ldr	r3, [pc, #68]	; (80016cc <HAL_DAC_MspInit+0x88>)
 8001688:	2180      	movs	r1, #128	; 0x80
 800168a:	0289      	lsls	r1, r1, #10
 800168c:	430a      	orrs	r2, r1
 800168e:	615a      	str	r2, [r3, #20]
 8001690:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <HAL_DAC_MspInit+0x88>)
 8001692:	695a      	ldr	r2, [r3, #20]
 8001694:	2380      	movs	r3, #128	; 0x80
 8001696:	029b      	lsls	r3, r3, #10
 8001698:	4013      	ands	r3, r2
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800169e:	193b      	adds	r3, r7, r4
 80016a0:	2210      	movs	r2, #16
 80016a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016a4:	193b      	adds	r3, r7, r4
 80016a6:	2203      	movs	r2, #3
 80016a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	193b      	adds	r3, r7, r4
 80016ac:	2200      	movs	r2, #0
 80016ae:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b0:	193a      	adds	r2, r7, r4
 80016b2:	2390      	movs	r3, #144	; 0x90
 80016b4:	05db      	lsls	r3, r3, #23
 80016b6:	0011      	movs	r1, r2
 80016b8:	0018      	movs	r0, r3
 80016ba:	f001 fa53 	bl	8002b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80016be:	46c0      	nop			; (mov r8, r8)
 80016c0:	46bd      	mov	sp, r7
 80016c2:	b00b      	add	sp, #44	; 0x2c
 80016c4:	bd90      	pop	{r4, r7, pc}
 80016c6:	46c0      	nop			; (mov r8, r8)
 80016c8:	40007400 	.word	0x40007400
 80016cc:	40021000 	.word	0x40021000

080016d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016d0:	b590      	push	{r4, r7, lr}
 80016d2:	b08b      	sub	sp, #44	; 0x2c
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	2414      	movs	r4, #20
 80016da:	193b      	adds	r3, r7, r4
 80016dc:	0018      	movs	r0, r3
 80016de:	2314      	movs	r3, #20
 80016e0:	001a      	movs	r2, r3
 80016e2:	2100      	movs	r1, #0
 80016e4:	f005 fc40 	bl	8006f68 <memset>
  if(hi2c->Instance==I2C1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a1c      	ldr	r2, [pc, #112]	; (8001760 <HAL_I2C_MspInit+0x90>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d132      	bne.n	8001758 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f2:	4b1c      	ldr	r3, [pc, #112]	; (8001764 <HAL_I2C_MspInit+0x94>)
 80016f4:	695a      	ldr	r2, [r3, #20]
 80016f6:	4b1b      	ldr	r3, [pc, #108]	; (8001764 <HAL_I2C_MspInit+0x94>)
 80016f8:	2180      	movs	r1, #128	; 0x80
 80016fa:	02c9      	lsls	r1, r1, #11
 80016fc:	430a      	orrs	r2, r1
 80016fe:	615a      	str	r2, [r3, #20]
 8001700:	4b18      	ldr	r3, [pc, #96]	; (8001764 <HAL_I2C_MspInit+0x94>)
 8001702:	695a      	ldr	r2, [r3, #20]
 8001704:	2380      	movs	r3, #128	; 0x80
 8001706:	02db      	lsls	r3, r3, #11
 8001708:	4013      	ands	r3, r2
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800170e:	193b      	adds	r3, r7, r4
 8001710:	22c0      	movs	r2, #192	; 0xc0
 8001712:	0092      	lsls	r2, r2, #2
 8001714:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001716:	0021      	movs	r1, r4
 8001718:	187b      	adds	r3, r7, r1
 800171a:	2212      	movs	r2, #18
 800171c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	187b      	adds	r3, r7, r1
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001724:	187b      	adds	r3, r7, r1
 8001726:	2203      	movs	r2, #3
 8001728:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800172a:	187b      	adds	r3, r7, r1
 800172c:	2201      	movs	r2, #1
 800172e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001730:	187b      	adds	r3, r7, r1
 8001732:	4a0d      	ldr	r2, [pc, #52]	; (8001768 <HAL_I2C_MspInit+0x98>)
 8001734:	0019      	movs	r1, r3
 8001736:	0010      	movs	r0, r2
 8001738:	f001 fa14 	bl	8002b64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800173c:	4b09      	ldr	r3, [pc, #36]	; (8001764 <HAL_I2C_MspInit+0x94>)
 800173e:	69da      	ldr	r2, [r3, #28]
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <HAL_I2C_MspInit+0x94>)
 8001742:	2180      	movs	r1, #128	; 0x80
 8001744:	0389      	lsls	r1, r1, #14
 8001746:	430a      	orrs	r2, r1
 8001748:	61da      	str	r2, [r3, #28]
 800174a:	4b06      	ldr	r3, [pc, #24]	; (8001764 <HAL_I2C_MspInit+0x94>)
 800174c:	69da      	ldr	r2, [r3, #28]
 800174e:	2380      	movs	r3, #128	; 0x80
 8001750:	039b      	lsls	r3, r3, #14
 8001752:	4013      	ands	r3, r2
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001758:	46c0      	nop			; (mov r8, r8)
 800175a:	46bd      	mov	sp, r7
 800175c:	b00b      	add	sp, #44	; 0x2c
 800175e:	bd90      	pop	{r4, r7, pc}
 8001760:	40005400 	.word	0x40005400
 8001764:	40021000 	.word	0x40021000
 8001768:	48000400 	.word	0x48000400

0800176c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800176c:	b590      	push	{r4, r7, lr}
 800176e:	b08d      	sub	sp, #52	; 0x34
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	241c      	movs	r4, #28
 8001776:	193b      	adds	r3, r7, r4
 8001778:	0018      	movs	r0, r3
 800177a:	2314      	movs	r3, #20
 800177c:	001a      	movs	r2, r3
 800177e:	2100      	movs	r1, #0
 8001780:	f005 fbf2 	bl	8006f68 <memset>
  if(hspi->Instance==SPI1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a38      	ldr	r2, [pc, #224]	; (800186c <HAL_SPI_MspInit+0x100>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d132      	bne.n	80017f4 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800178e:	4b38      	ldr	r3, [pc, #224]	; (8001870 <HAL_SPI_MspInit+0x104>)
 8001790:	699a      	ldr	r2, [r3, #24]
 8001792:	4b37      	ldr	r3, [pc, #220]	; (8001870 <HAL_SPI_MspInit+0x104>)
 8001794:	2180      	movs	r1, #128	; 0x80
 8001796:	0149      	lsls	r1, r1, #5
 8001798:	430a      	orrs	r2, r1
 800179a:	619a      	str	r2, [r3, #24]
 800179c:	4b34      	ldr	r3, [pc, #208]	; (8001870 <HAL_SPI_MspInit+0x104>)
 800179e:	699a      	ldr	r2, [r3, #24]
 80017a0:	2380      	movs	r3, #128	; 0x80
 80017a2:	015b      	lsls	r3, r3, #5
 80017a4:	4013      	ands	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
 80017a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017aa:	4b31      	ldr	r3, [pc, #196]	; (8001870 <HAL_SPI_MspInit+0x104>)
 80017ac:	695a      	ldr	r2, [r3, #20]
 80017ae:	4b30      	ldr	r3, [pc, #192]	; (8001870 <HAL_SPI_MspInit+0x104>)
 80017b0:	2180      	movs	r1, #128	; 0x80
 80017b2:	02c9      	lsls	r1, r1, #11
 80017b4:	430a      	orrs	r2, r1
 80017b6:	615a      	str	r2, [r3, #20]
 80017b8:	4b2d      	ldr	r3, [pc, #180]	; (8001870 <HAL_SPI_MspInit+0x104>)
 80017ba:	695a      	ldr	r2, [r3, #20]
 80017bc:	2380      	movs	r3, #128	; 0x80
 80017be:	02db      	lsls	r3, r3, #11
 80017c0:	4013      	ands	r3, r2
 80017c2:	617b      	str	r3, [r7, #20]
 80017c4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80017c6:	0021      	movs	r1, r4
 80017c8:	187b      	adds	r3, r7, r1
 80017ca:	2218      	movs	r2, #24
 80017cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ce:	187b      	adds	r3, r7, r1
 80017d0:	2202      	movs	r2, #2
 80017d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	187b      	adds	r3, r7, r1
 80017d6:	2200      	movs	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017da:	187b      	adds	r3, r7, r1
 80017dc:	2203      	movs	r2, #3
 80017de:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80017e0:	187b      	adds	r3, r7, r1
 80017e2:	2200      	movs	r2, #0
 80017e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e6:	187b      	adds	r3, r7, r1
 80017e8:	4a22      	ldr	r2, [pc, #136]	; (8001874 <HAL_SPI_MspInit+0x108>)
 80017ea:	0019      	movs	r1, r3
 80017ec:	0010      	movs	r0, r2
 80017ee:	f001 f9b9 	bl	8002b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80017f2:	e037      	b.n	8001864 <HAL_SPI_MspInit+0xf8>
  else if(hspi->Instance==SPI2)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a1f      	ldr	r2, [pc, #124]	; (8001878 <HAL_SPI_MspInit+0x10c>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d132      	bne.n	8001864 <HAL_SPI_MspInit+0xf8>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017fe:	4b1c      	ldr	r3, [pc, #112]	; (8001870 <HAL_SPI_MspInit+0x104>)
 8001800:	69da      	ldr	r2, [r3, #28]
 8001802:	4b1b      	ldr	r3, [pc, #108]	; (8001870 <HAL_SPI_MspInit+0x104>)
 8001804:	2180      	movs	r1, #128	; 0x80
 8001806:	01c9      	lsls	r1, r1, #7
 8001808:	430a      	orrs	r2, r1
 800180a:	61da      	str	r2, [r3, #28]
 800180c:	4b18      	ldr	r3, [pc, #96]	; (8001870 <HAL_SPI_MspInit+0x104>)
 800180e:	69da      	ldr	r2, [r3, #28]
 8001810:	2380      	movs	r3, #128	; 0x80
 8001812:	01db      	lsls	r3, r3, #7
 8001814:	4013      	ands	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800181a:	4b15      	ldr	r3, [pc, #84]	; (8001870 <HAL_SPI_MspInit+0x104>)
 800181c:	695a      	ldr	r2, [r3, #20]
 800181e:	4b14      	ldr	r3, [pc, #80]	; (8001870 <HAL_SPI_MspInit+0x104>)
 8001820:	2180      	movs	r1, #128	; 0x80
 8001822:	02c9      	lsls	r1, r1, #11
 8001824:	430a      	orrs	r2, r1
 8001826:	615a      	str	r2, [r3, #20]
 8001828:	4b11      	ldr	r3, [pc, #68]	; (8001870 <HAL_SPI_MspInit+0x104>)
 800182a:	695a      	ldr	r2, [r3, #20]
 800182c:	2380      	movs	r3, #128	; 0x80
 800182e:	02db      	lsls	r3, r3, #11
 8001830:	4013      	ands	r3, r2
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001836:	211c      	movs	r1, #28
 8001838:	187b      	adds	r3, r7, r1
 800183a:	22c0      	movs	r2, #192	; 0xc0
 800183c:	01d2      	lsls	r2, r2, #7
 800183e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001840:	187b      	adds	r3, r7, r1
 8001842:	2202      	movs	r2, #2
 8001844:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	187b      	adds	r3, r7, r1
 8001848:	2200      	movs	r2, #0
 800184a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800184c:	187b      	adds	r3, r7, r1
 800184e:	2203      	movs	r2, #3
 8001850:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8001852:	187b      	adds	r3, r7, r1
 8001854:	2200      	movs	r2, #0
 8001856:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001858:	187b      	adds	r3, r7, r1
 800185a:	4a06      	ldr	r2, [pc, #24]	; (8001874 <HAL_SPI_MspInit+0x108>)
 800185c:	0019      	movs	r1, r3
 800185e:	0010      	movs	r0, r2
 8001860:	f001 f980 	bl	8002b64 <HAL_GPIO_Init>
}
 8001864:	46c0      	nop			; (mov r8, r8)
 8001866:	46bd      	mov	sp, r7
 8001868:	b00d      	add	sp, #52	; 0x34
 800186a:	bd90      	pop	{r4, r7, pc}
 800186c:	40013000 	.word	0x40013000
 8001870:	40021000 	.word	0x40021000
 8001874:	48000400 	.word	0x48000400
 8001878:	40003800 	.word	0x40003800

0800187c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a1f      	ldr	r2, [pc, #124]	; (8001908 <HAL_TIM_Base_MspInit+0x8c>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d11e      	bne.n	80018cc <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800188e:	4b1f      	ldr	r3, [pc, #124]	; (800190c <HAL_TIM_Base_MspInit+0x90>)
 8001890:	699a      	ldr	r2, [r3, #24]
 8001892:	4b1e      	ldr	r3, [pc, #120]	; (800190c <HAL_TIM_Base_MspInit+0x90>)
 8001894:	2180      	movs	r1, #128	; 0x80
 8001896:	0109      	lsls	r1, r1, #4
 8001898:	430a      	orrs	r2, r1
 800189a:	619a      	str	r2, [r3, #24]
 800189c:	4b1b      	ldr	r3, [pc, #108]	; (800190c <HAL_TIM_Base_MspInit+0x90>)
 800189e:	699a      	ldr	r2, [r3, #24]
 80018a0:	2380      	movs	r3, #128	; 0x80
 80018a2:	011b      	lsls	r3, r3, #4
 80018a4:	4013      	ands	r3, r2
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 1, 0);
 80018aa:	2200      	movs	r2, #0
 80018ac:	2101      	movs	r1, #1
 80018ae:	200d      	movs	r0, #13
 80018b0:	f000 fe76 	bl	80025a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80018b4:	200d      	movs	r0, #13
 80018b6:	f000 fe88 	bl	80025ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2101      	movs	r1, #1
 80018be:	200e      	movs	r0, #14
 80018c0:	f000 fe6e 	bl	80025a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80018c4:	200e      	movs	r0, #14
 80018c6:	f000 fe80 	bl	80025ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80018ca:	e019      	b.n	8001900 <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM2)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	2380      	movs	r3, #128	; 0x80
 80018d2:	05db      	lsls	r3, r3, #23
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d113      	bne.n	8001900 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018d8:	4b0c      	ldr	r3, [pc, #48]	; (800190c <HAL_TIM_Base_MspInit+0x90>)
 80018da:	69da      	ldr	r2, [r3, #28]
 80018dc:	4b0b      	ldr	r3, [pc, #44]	; (800190c <HAL_TIM_Base_MspInit+0x90>)
 80018de:	2101      	movs	r1, #1
 80018e0:	430a      	orrs	r2, r1
 80018e2:	61da      	str	r2, [r3, #28]
 80018e4:	4b09      	ldr	r3, [pc, #36]	; (800190c <HAL_TIM_Base_MspInit+0x90>)
 80018e6:	69db      	ldr	r3, [r3, #28]
 80018e8:	2201      	movs	r2, #1
 80018ea:	4013      	ands	r3, r2
 80018ec:	60bb      	str	r3, [r7, #8]
 80018ee:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80018f0:	2200      	movs	r2, #0
 80018f2:	2101      	movs	r1, #1
 80018f4:	200f      	movs	r0, #15
 80018f6:	f000 fe53 	bl	80025a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018fa:	200f      	movs	r0, #15
 80018fc:	f000 fe65 	bl	80025ca <HAL_NVIC_EnableIRQ>
}
 8001900:	46c0      	nop			; (mov r8, r8)
 8001902:	46bd      	mov	sp, r7
 8001904:	b004      	add	sp, #16
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40012c00 	.word	0x40012c00
 800190c:	40021000 	.word	0x40021000

08001910 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001910:	b590      	push	{r4, r7, lr}
 8001912:	b08b      	sub	sp, #44	; 0x2c
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	2414      	movs	r4, #20
 800191a:	193b      	adds	r3, r7, r4
 800191c:	0018      	movs	r0, r3
 800191e:	2314      	movs	r3, #20
 8001920:	001a      	movs	r2, r3
 8001922:	2100      	movs	r1, #0
 8001924:	f005 fb20 	bl	8006f68 <memset>
  if(htim->Instance==TIM1)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a2c      	ldr	r2, [pc, #176]	; (80019e0 <HAL_TIM_MspPostInit+0xd0>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d126      	bne.n	8001980 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001932:	4b2c      	ldr	r3, [pc, #176]	; (80019e4 <HAL_TIM_MspPostInit+0xd4>)
 8001934:	695a      	ldr	r2, [r3, #20]
 8001936:	4b2b      	ldr	r3, [pc, #172]	; (80019e4 <HAL_TIM_MspPostInit+0xd4>)
 8001938:	2180      	movs	r1, #128	; 0x80
 800193a:	0289      	lsls	r1, r1, #10
 800193c:	430a      	orrs	r2, r1
 800193e:	615a      	str	r2, [r3, #20]
 8001940:	4b28      	ldr	r3, [pc, #160]	; (80019e4 <HAL_TIM_MspPostInit+0xd4>)
 8001942:	695a      	ldr	r2, [r3, #20]
 8001944:	2380      	movs	r3, #128	; 0x80
 8001946:	029b      	lsls	r3, r3, #10
 8001948:	4013      	ands	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800194e:	193b      	adds	r3, r7, r4
 8001950:	2280      	movs	r2, #128	; 0x80
 8001952:	0052      	lsls	r2, r2, #1
 8001954:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001956:	0021      	movs	r1, r4
 8001958:	187b      	adds	r3, r7, r1
 800195a:	2202      	movs	r2, #2
 800195c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	187b      	adds	r3, r7, r1
 8001960:	2200      	movs	r2, #0
 8001962:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001964:	187b      	adds	r3, r7, r1
 8001966:	2200      	movs	r2, #0
 8001968:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800196a:	187b      	adds	r3, r7, r1
 800196c:	2202      	movs	r2, #2
 800196e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001970:	187a      	adds	r2, r7, r1
 8001972:	2390      	movs	r3, #144	; 0x90
 8001974:	05db      	lsls	r3, r3, #23
 8001976:	0011      	movs	r1, r2
 8001978:	0018      	movs	r0, r3
 800197a:	f001 f8f3 	bl	8002b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800197e:	e02a      	b.n	80019d6 <HAL_TIM_MspPostInit+0xc6>
  else if(htim->Instance==TIM2)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	2380      	movs	r3, #128	; 0x80
 8001986:	05db      	lsls	r3, r3, #23
 8001988:	429a      	cmp	r2, r3
 800198a:	d124      	bne.n	80019d6 <HAL_TIM_MspPostInit+0xc6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800198c:	4b15      	ldr	r3, [pc, #84]	; (80019e4 <HAL_TIM_MspPostInit+0xd4>)
 800198e:	695a      	ldr	r2, [r3, #20]
 8001990:	4b14      	ldr	r3, [pc, #80]	; (80019e4 <HAL_TIM_MspPostInit+0xd4>)
 8001992:	2180      	movs	r1, #128	; 0x80
 8001994:	02c9      	lsls	r1, r1, #11
 8001996:	430a      	orrs	r2, r1
 8001998:	615a      	str	r2, [r3, #20]
 800199a:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <HAL_TIM_MspPostInit+0xd4>)
 800199c:	695a      	ldr	r2, [r3, #20]
 800199e:	2380      	movs	r3, #128	; 0x80
 80019a0:	02db      	lsls	r3, r3, #11
 80019a2:	4013      	ands	r3, r2
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80019a8:	2114      	movs	r1, #20
 80019aa:	187b      	adds	r3, r7, r1
 80019ac:	2280      	movs	r2, #128	; 0x80
 80019ae:	0112      	lsls	r2, r2, #4
 80019b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b2:	187b      	adds	r3, r7, r1
 80019b4:	2202      	movs	r2, #2
 80019b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	187b      	adds	r3, r7, r1
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019be:	187b      	adds	r3, r7, r1
 80019c0:	2200      	movs	r2, #0
 80019c2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80019c4:	187b      	adds	r3, r7, r1
 80019c6:	2202      	movs	r2, #2
 80019c8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ca:	187b      	adds	r3, r7, r1
 80019cc:	4a06      	ldr	r2, [pc, #24]	; (80019e8 <HAL_TIM_MspPostInit+0xd8>)
 80019ce:	0019      	movs	r1, r3
 80019d0:	0010      	movs	r0, r2
 80019d2:	f001 f8c7 	bl	8002b64 <HAL_GPIO_Init>
}
 80019d6:	46c0      	nop			; (mov r8, r8)
 80019d8:	46bd      	mov	sp, r7
 80019da:	b00b      	add	sp, #44	; 0x2c
 80019dc:	bd90      	pop	{r4, r7, pc}
 80019de:	46c0      	nop			; (mov r8, r8)
 80019e0:	40012c00 	.word	0x40012c00
 80019e4:	40021000 	.word	0x40021000
 80019e8:	48000400 	.word	0x48000400

080019ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019ec:	b590      	push	{r4, r7, lr}
 80019ee:	b08b      	sub	sp, #44	; 0x2c
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f4:	2414      	movs	r4, #20
 80019f6:	193b      	adds	r3, r7, r4
 80019f8:	0018      	movs	r0, r3
 80019fa:	2314      	movs	r3, #20
 80019fc:	001a      	movs	r2, r3
 80019fe:	2100      	movs	r1, #0
 8001a00:	f005 fab2 	bl	8006f68 <memset>
  if(huart->Instance==USART1)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a21      	ldr	r2, [pc, #132]	; (8001a90 <HAL_UART_MspInit+0xa4>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d13b      	bne.n	8001a86 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a0e:	4b21      	ldr	r3, [pc, #132]	; (8001a94 <HAL_UART_MspInit+0xa8>)
 8001a10:	699a      	ldr	r2, [r3, #24]
 8001a12:	4b20      	ldr	r3, [pc, #128]	; (8001a94 <HAL_UART_MspInit+0xa8>)
 8001a14:	2180      	movs	r1, #128	; 0x80
 8001a16:	01c9      	lsls	r1, r1, #7
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	619a      	str	r2, [r3, #24]
 8001a1c:	4b1d      	ldr	r3, [pc, #116]	; (8001a94 <HAL_UART_MspInit+0xa8>)
 8001a1e:	699a      	ldr	r2, [r3, #24]
 8001a20:	2380      	movs	r3, #128	; 0x80
 8001a22:	01db      	lsls	r3, r3, #7
 8001a24:	4013      	ands	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]
 8001a28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2a:	4b1a      	ldr	r3, [pc, #104]	; (8001a94 <HAL_UART_MspInit+0xa8>)
 8001a2c:	695a      	ldr	r2, [r3, #20]
 8001a2e:	4b19      	ldr	r3, [pc, #100]	; (8001a94 <HAL_UART_MspInit+0xa8>)
 8001a30:	2180      	movs	r1, #128	; 0x80
 8001a32:	0289      	lsls	r1, r1, #10
 8001a34:	430a      	orrs	r2, r1
 8001a36:	615a      	str	r2, [r3, #20]
 8001a38:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <HAL_UART_MspInit+0xa8>)
 8001a3a:	695a      	ldr	r2, [r3, #20]
 8001a3c:	2380      	movs	r3, #128	; 0x80
 8001a3e:	029b      	lsls	r3, r3, #10
 8001a40:	4013      	ands	r3, r2
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a46:	193b      	adds	r3, r7, r4
 8001a48:	22c0      	movs	r2, #192	; 0xc0
 8001a4a:	00d2      	lsls	r2, r2, #3
 8001a4c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4e:	0021      	movs	r1, r4
 8001a50:	187b      	adds	r3, r7, r1
 8001a52:	2202      	movs	r2, #2
 8001a54:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	187b      	adds	r3, r7, r1
 8001a58:	2200      	movs	r2, #0
 8001a5a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a5c:	187b      	adds	r3, r7, r1
 8001a5e:	2203      	movs	r2, #3
 8001a60:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001a62:	187b      	adds	r3, r7, r1
 8001a64:	2201      	movs	r2, #1
 8001a66:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a68:	187a      	adds	r2, r7, r1
 8001a6a:	2390      	movs	r3, #144	; 0x90
 8001a6c:	05db      	lsls	r3, r3, #23
 8001a6e:	0011      	movs	r1, r2
 8001a70:	0018      	movs	r0, r3
 8001a72:	f001 f877 	bl	8002b64 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a76:	2200      	movs	r2, #0
 8001a78:	2100      	movs	r1, #0
 8001a7a:	201b      	movs	r0, #27
 8001a7c:	f000 fd90 	bl	80025a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a80:	201b      	movs	r0, #27
 8001a82:	f000 fda2 	bl	80025ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a86:	46c0      	nop			; (mov r8, r8)
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	b00b      	add	sp, #44	; 0x2c
 8001a8c:	bd90      	pop	{r4, r7, pc}
 8001a8e:	46c0      	nop			; (mov r8, r8)
 8001a90:	40013800 	.word	0x40013800
 8001a94:	40021000 	.word	0x40021000

08001a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a9c:	e7fe      	b.n	8001a9c <NMI_Handler+0x4>

08001a9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aa2:	e7fe      	b.n	8001aa2 <HardFault_Handler+0x4>

08001aa4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001aa8:	46c0      	nop			; (mov r8, r8)
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ab2:	46c0      	nop			; (mov r8, r8)
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001abc:	f000 f8b8 	bl	8001c30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ac0:	46c0      	nop			; (mov r8, r8)
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
	...

08001ac8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001acc:	4b03      	ldr	r3, [pc, #12]	; (8001adc <DMA1_Channel1_IRQHandler+0x14>)
 8001ace:	0018      	movs	r0, r3
 8001ad0:	f000 ff5d 	bl	800298e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001ad4:	46c0      	nop			; (mov r8, r8)
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	46c0      	nop			; (mov r8, r8)
 8001adc:	200000ac 	.word	0x200000ac

08001ae0 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ae4:	4b03      	ldr	r3, [pc, #12]	; (8001af4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8001ae6:	0018      	movs	r0, r3
 8001ae8:	f003 f9b0 	bl	8004e4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001aec:	46c0      	nop			; (mov r8, r8)
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	46c0      	nop			; (mov r8, r8)
 8001af4:	20000218 	.word	0x20000218

08001af8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001afc:	4b03      	ldr	r3, [pc, #12]	; (8001b0c <TIM1_CC_IRQHandler+0x14>)
 8001afe:	0018      	movs	r0, r3
 8001b00:	f003 f9a4 	bl	8004e4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001b04:	46c0      	nop			; (mov r8, r8)
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	46c0      	nop			; (mov r8, r8)
 8001b0c:	20000218 	.word	0x20000218

08001b10 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b14:	4b03      	ldr	r3, [pc, #12]	; (8001b24 <TIM2_IRQHandler+0x14>)
 8001b16:	0018      	movs	r0, r3
 8001b18:	f003 f998 	bl	8004e4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b1c:	46c0      	nop			; (mov r8, r8)
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	46c0      	nop			; (mov r8, r8)
 8001b24:	20000260 	.word	0x20000260

08001b28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b2c:	4b03      	ldr	r3, [pc, #12]	; (8001b3c <USART1_IRQHandler+0x14>)
 8001b2e:	0018      	movs	r0, r3
 8001b30:	f004 f952 	bl	8005dd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b34:	46c0      	nop			; (mov r8, r8)
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	46c0      	nop			; (mov r8, r8)
 8001b3c:	200002a8 	.word	0x200002a8

08001b40 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001b44:	46c0      	nop			; (mov r8, r8)
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b4c:	480d      	ldr	r0, [pc, #52]	; (8001b84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b4e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b50:	480d      	ldr	r0, [pc, #52]	; (8001b88 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b52:	490e      	ldr	r1, [pc, #56]	; (8001b8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b54:	4a0e      	ldr	r2, [pc, #56]	; (8001b90 <LoopForever+0xe>)
  movs r3, #0
 8001b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b58:	e002      	b.n	8001b60 <LoopCopyDataInit>

08001b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b5e:	3304      	adds	r3, #4

08001b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b64:	d3f9      	bcc.n	8001b5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b66:	4a0b      	ldr	r2, [pc, #44]	; (8001b94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b68:	4c0b      	ldr	r4, [pc, #44]	; (8001b98 <LoopForever+0x16>)
  movs r3, #0
 8001b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b6c:	e001      	b.n	8001b72 <LoopFillZerobss>

08001b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b70:	3204      	adds	r2, #4

08001b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b74:	d3fb      	bcc.n	8001b6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001b76:	f7ff ffe3 	bl	8001b40 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001b7a:	f005 f9d1 	bl	8006f20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b7e:	f7fe ffab 	bl	8000ad8 <main>

08001b82 <LoopForever>:

LoopForever:
    b LoopForever
 8001b82:	e7fe      	b.n	8001b82 <LoopForever>
  ldr   r0, =_estack
 8001b84:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001b88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b8c:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8001b90:	080071a4 	.word	0x080071a4
  ldr r2, =_sbss
 8001b94:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8001b98:	20000470 	.word	0x20000470

08001b9c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b9c:	e7fe      	b.n	8001b9c <ADC1_COMP_IRQHandler>
	...

08001ba0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ba4:	4b07      	ldr	r3, [pc, #28]	; (8001bc4 <HAL_Init+0x24>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <HAL_Init+0x24>)
 8001baa:	2110      	movs	r1, #16
 8001bac:	430a      	orrs	r2, r1
 8001bae:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001bb0:	2003      	movs	r0, #3
 8001bb2:	f000 f809 	bl	8001bc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bb6:	f7ff fc71 	bl	800149c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	46c0      	nop			; (mov r8, r8)
 8001bc4:	40022000 	.word	0x40022000

08001bc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc8:	b590      	push	{r4, r7, lr}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bd0:	4b14      	ldr	r3, [pc, #80]	; (8001c24 <HAL_InitTick+0x5c>)
 8001bd2:	681c      	ldr	r4, [r3, #0]
 8001bd4:	4b14      	ldr	r3, [pc, #80]	; (8001c28 <HAL_InitTick+0x60>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	0019      	movs	r1, r3
 8001bda:	23fa      	movs	r3, #250	; 0xfa
 8001bdc:	0098      	lsls	r0, r3, #2
 8001bde:	f7fe fa9b 	bl	8000118 <__udivsi3>
 8001be2:	0003      	movs	r3, r0
 8001be4:	0019      	movs	r1, r3
 8001be6:	0020      	movs	r0, r4
 8001be8:	f7fe fa96 	bl	8000118 <__udivsi3>
 8001bec:	0003      	movs	r3, r0
 8001bee:	0018      	movs	r0, r3
 8001bf0:	f000 fcfb 	bl	80025ea <HAL_SYSTICK_Config>
 8001bf4:	1e03      	subs	r3, r0, #0
 8001bf6:	d001      	beq.n	8001bfc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e00f      	b.n	8001c1c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b03      	cmp	r3, #3
 8001c00:	d80b      	bhi.n	8001c1a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	2301      	movs	r3, #1
 8001c06:	425b      	negs	r3, r3
 8001c08:	2200      	movs	r2, #0
 8001c0a:	0018      	movs	r0, r3
 8001c0c:	f000 fcc8 	bl	80025a0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c10:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <HAL_InitTick+0x64>)
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
 8001c18:	e000      	b.n	8001c1c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
}
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	b003      	add	sp, #12
 8001c22:	bd90      	pop	{r4, r7, pc}
 8001c24:	20000044 	.word	0x20000044
 8001c28:	2000004c 	.word	0x2000004c
 8001c2c:	20000048 	.word	0x20000048

08001c30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c34:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <HAL_IncTick+0x1c>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	001a      	movs	r2, r3
 8001c3a:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <HAL_IncTick+0x20>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	18d2      	adds	r2, r2, r3
 8001c40:	4b03      	ldr	r3, [pc, #12]	; (8001c50 <HAL_IncTick+0x20>)
 8001c42:	601a      	str	r2, [r3, #0]
}
 8001c44:	46c0      	nop			; (mov r8, r8)
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	46c0      	nop			; (mov r8, r8)
 8001c4c:	2000004c 	.word	0x2000004c
 8001c50:	2000046c 	.word	0x2000046c

08001c54 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  return uwTick;
 8001c58:	4b02      	ldr	r3, [pc, #8]	; (8001c64 <HAL_GetTick+0x10>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
}
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	46c0      	nop			; (mov r8, r8)
 8001c64:	2000046c 	.word	0x2000046c

08001c68 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c70:	230f      	movs	r3, #15
 8001c72:	18fb      	adds	r3, r7, r3
 8001c74:	2200      	movs	r2, #0
 8001c76:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e125      	b.n	8001ed2 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d10a      	bne.n	8001ca4 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2234      	movs	r2, #52	; 0x34
 8001c98:	2100      	movs	r1, #0
 8001c9a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	0018      	movs	r0, r3
 8001ca0:	f7ff fc20 	bl	80014e4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca8:	2210      	movs	r2, #16
 8001caa:	4013      	ands	r3, r2
 8001cac:	d000      	beq.n	8001cb0 <HAL_ADC_Init+0x48>
 8001cae:	e103      	b.n	8001eb8 <HAL_ADC_Init+0x250>
 8001cb0:	230f      	movs	r3, #15
 8001cb2:	18fb      	adds	r3, r7, r3
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d000      	beq.n	8001cbc <HAL_ADC_Init+0x54>
 8001cba:	e0fd      	b.n	8001eb8 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	2204      	movs	r2, #4
 8001cc4:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001cc6:	d000      	beq.n	8001cca <HAL_ADC_Init+0x62>
 8001cc8:	e0f6      	b.n	8001eb8 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cce:	4a83      	ldr	r2, [pc, #524]	; (8001edc <HAL_ADC_Init+0x274>)
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	2203      	movs	r2, #3
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d112      	bne.n	8001d0e <HAL_ADC_Init+0xa6>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d009      	beq.n	8001d0a <HAL_ADC_Init+0xa2>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68da      	ldr	r2, [r3, #12]
 8001cfc:	2380      	movs	r3, #128	; 0x80
 8001cfe:	021b      	lsls	r3, r3, #8
 8001d00:	401a      	ands	r2, r3
 8001d02:	2380      	movs	r3, #128	; 0x80
 8001d04:	021b      	lsls	r3, r3, #8
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d101      	bne.n	8001d0e <HAL_ADC_Init+0xa6>
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e000      	b.n	8001d10 <HAL_ADC_Init+0xa8>
 8001d0e:	2300      	movs	r3, #0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d116      	bne.n	8001d42 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	2218      	movs	r2, #24
 8001d1c:	4393      	bics	r3, r2
 8001d1e:	0019      	movs	r1, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	0899      	lsrs	r1, r3, #2
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685a      	ldr	r2, [r3, #4]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68da      	ldr	r2, [r3, #12]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4964      	ldr	r1, [pc, #400]	; (8001ee0 <HAL_ADC_Init+0x278>)
 8001d4e:	400a      	ands	r2, r1
 8001d50:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	7e1b      	ldrb	r3, [r3, #24]
 8001d56:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	7e5b      	ldrb	r3, [r3, #25]
 8001d5c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d5e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	7e9b      	ldrb	r3, [r3, #26]
 8001d64:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001d66:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d002      	beq.n	8001d76 <HAL_ADC_Init+0x10e>
 8001d70:	2380      	movs	r3, #128	; 0x80
 8001d72:	015b      	lsls	r3, r3, #5
 8001d74:	e000      	b.n	8001d78 <HAL_ADC_Init+0x110>
 8001d76:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001d78:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001d7e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d101      	bne.n	8001d8c <HAL_ADC_Init+0x124>
 8001d88:	2304      	movs	r3, #4
 8001d8a:	e000      	b.n	8001d8e <HAL_ADC_Init+0x126>
 8001d8c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001d8e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2124      	movs	r1, #36	; 0x24
 8001d94:	5c5b      	ldrb	r3, [r3, r1]
 8001d96:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001d98:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d9a:	68ba      	ldr	r2, [r7, #8]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	7edb      	ldrb	r3, [r3, #27]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d115      	bne.n	8001dd4 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	7e9b      	ldrb	r3, [r3, #26]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d105      	bne.n	8001dbc <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	2280      	movs	r2, #128	; 0x80
 8001db4:	0252      	lsls	r2, r2, #9
 8001db6:	4313      	orrs	r3, r2
 8001db8:	60bb      	str	r3, [r7, #8]
 8001dba:	e00b      	b.n	8001dd4 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc0:	2220      	movs	r2, #32
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dcc:	2201      	movs	r2, #1
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	69da      	ldr	r2, [r3, #28]
 8001dd8:	23c2      	movs	r3, #194	; 0xc2
 8001dda:	33ff      	adds	r3, #255	; 0xff
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d007      	beq.n	8001df0 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001de8:	4313      	orrs	r3, r2
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68d9      	ldr	r1, [r3, #12]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68ba      	ldr	r2, [r7, #8]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e04:	2380      	movs	r3, #128	; 0x80
 8001e06:	055b      	lsls	r3, r3, #21
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d01b      	beq.n	8001e44 <HAL_ADC_Init+0x1dc>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d017      	beq.n	8001e44 <HAL_ADC_Init+0x1dc>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d013      	beq.n	8001e44 <HAL_ADC_Init+0x1dc>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e20:	2b03      	cmp	r3, #3
 8001e22:	d00f      	beq.n	8001e44 <HAL_ADC_Init+0x1dc>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e28:	2b04      	cmp	r3, #4
 8001e2a:	d00b      	beq.n	8001e44 <HAL_ADC_Init+0x1dc>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e30:	2b05      	cmp	r3, #5
 8001e32:	d007      	beq.n	8001e44 <HAL_ADC_Init+0x1dc>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e38:	2b06      	cmp	r3, #6
 8001e3a:	d003      	beq.n	8001e44 <HAL_ADC_Init+0x1dc>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e40:	2b07      	cmp	r3, #7
 8001e42:	d112      	bne.n	8001e6a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	695a      	ldr	r2, [r3, #20]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2107      	movs	r1, #7
 8001e50:	438a      	bics	r2, r1
 8001e52:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6959      	ldr	r1, [r3, #20]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5e:	2207      	movs	r2, #7
 8001e60:	401a      	ands	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	430a      	orrs	r2, r1
 8001e68:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	4a1c      	ldr	r2, [pc, #112]	; (8001ee4 <HAL_ADC_Init+0x27c>)
 8001e72:	4013      	ands	r3, r2
 8001e74:	68ba      	ldr	r2, [r7, #8]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d10b      	bne.n	8001e92 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e84:	2203      	movs	r2, #3
 8001e86:	4393      	bics	r3, r2
 8001e88:	2201      	movs	r2, #1
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001e90:	e01c      	b.n	8001ecc <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e96:	2212      	movs	r2, #18
 8001e98:	4393      	bics	r3, r2
 8001e9a:	2210      	movs	r2, #16
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	431a      	orrs	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001eae:	230f      	movs	r3, #15
 8001eb0:	18fb      	adds	r3, r7, r3
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001eb6:	e009      	b.n	8001ecc <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ebc:	2210      	movs	r2, #16
 8001ebe:	431a      	orrs	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001ec4:	230f      	movs	r3, #15
 8001ec6:	18fb      	adds	r3, r7, r3
 8001ec8:	2201      	movs	r2, #1
 8001eca:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ecc:	230f      	movs	r3, #15
 8001ece:	18fb      	adds	r3, r7, r3
 8001ed0:	781b      	ldrb	r3, [r3, #0]
}
 8001ed2:	0018      	movs	r0, r3
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	b004      	add	sp, #16
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	46c0      	nop			; (mov r8, r8)
 8001edc:	fffffefd 	.word	0xfffffefd
 8001ee0:	fffe0219 	.word	0xfffe0219
 8001ee4:	833fffe7 	.word	0x833fffe7

08001ee8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001ee8:	b590      	push	{r4, r7, lr}
 8001eea:	b087      	sub	sp, #28
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ef4:	2317      	movs	r3, #23
 8001ef6:	18fb      	adds	r3, r7, r3
 8001ef8:	2200      	movs	r2, #0
 8001efa:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	2204      	movs	r2, #4
 8001f04:	4013      	ands	r3, r2
 8001f06:	d15e      	bne.n	8001fc6 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2234      	movs	r2, #52	; 0x34
 8001f0c:	5c9b      	ldrb	r3, [r3, r2]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d101      	bne.n	8001f16 <HAL_ADC_Start_DMA+0x2e>
 8001f12:	2302      	movs	r3, #2
 8001f14:	e05e      	b.n	8001fd4 <HAL_ADC_Start_DMA+0xec>
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2234      	movs	r2, #52	; 0x34
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	7e5b      	ldrb	r3, [r3, #25]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d007      	beq.n	8001f36 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001f26:	2317      	movs	r3, #23
 8001f28:	18fc      	adds	r4, r7, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	f000 f983 	bl	8002238 <ADC_Enable>
 8001f32:	0003      	movs	r3, r0
 8001f34:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001f36:	2317      	movs	r3, #23
 8001f38:	18fb      	adds	r3, r7, r3
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d146      	bne.n	8001fce <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f44:	4a25      	ldr	r2, [pc, #148]	; (8001fdc <HAL_ADC_Start_DMA+0xf4>)
 8001f46:	4013      	ands	r3, r2
 8001f48:	2280      	movs	r2, #128	; 0x80
 8001f4a:	0052      	lsls	r2, r2, #1
 8001f4c:	431a      	orrs	r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2200      	movs	r2, #0
 8001f56:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2234      	movs	r2, #52	; 0x34
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f64:	4a1e      	ldr	r2, [pc, #120]	; (8001fe0 <HAL_ADC_Start_DMA+0xf8>)
 8001f66:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6c:	4a1d      	ldr	r2, [pc, #116]	; (8001fe4 <HAL_ADC_Start_DMA+0xfc>)
 8001f6e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f74:	4a1c      	ldr	r2, [pc, #112]	; (8001fe8 <HAL_ADC_Start_DMA+0x100>)
 8001f76:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	221c      	movs	r2, #28
 8001f7e:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2110      	movs	r1, #16
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68da      	ldr	r2, [r3, #12]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	3340      	adds	r3, #64	; 0x40
 8001faa:	0019      	movs	r1, r3
 8001fac:	68ba      	ldr	r2, [r7, #8]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f000 fc0a 	bl	80027c8 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689a      	ldr	r2, [r3, #8]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2104      	movs	r1, #4
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	e003      	b.n	8001fce <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001fc6:	2317      	movs	r3, #23
 8001fc8:	18fb      	adds	r3, r7, r3
 8001fca:	2202      	movs	r2, #2
 8001fcc:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001fce:	2317      	movs	r3, #23
 8001fd0:	18fb      	adds	r3, r7, r3
 8001fd2:	781b      	ldrb	r3, [r3, #0]
}
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	b007      	add	sp, #28
 8001fda:	bd90      	pop	{r4, r7, pc}
 8001fdc:	fffff0fe 	.word	0xfffff0fe
 8001fe0:	08002341 	.word	0x08002341
 8001fe4:	080023f5 	.word	0x080023f5
 8001fe8:	08002413 	.word	0x08002413

08001fec <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001ff4:	46c0      	nop			; (mov r8, r8)
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	b002      	add	sp, #8
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002004:	46c0      	nop			; (mov r8, r8)
 8002006:	46bd      	mov	sp, r7
 8002008:	b002      	add	sp, #8
 800200a:	bd80      	pop	{r7, pc}

0800200c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002014:	46c0      	nop			; (mov r8, r8)
 8002016:	46bd      	mov	sp, r7
 8002018:	b002      	add	sp, #8
 800201a:	bd80      	pop	{r7, pc}

0800201c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002026:	230f      	movs	r3, #15
 8002028:	18fb      	adds	r3, r7, r3
 800202a:	2200      	movs	r2, #0
 800202c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800202e:	2300      	movs	r3, #0
 8002030:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002036:	2380      	movs	r3, #128	; 0x80
 8002038:	055b      	lsls	r3, r3, #21
 800203a:	429a      	cmp	r2, r3
 800203c:	d011      	beq.n	8002062 <HAL_ADC_ConfigChannel+0x46>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002042:	2b01      	cmp	r3, #1
 8002044:	d00d      	beq.n	8002062 <HAL_ADC_ConfigChannel+0x46>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204a:	2b02      	cmp	r3, #2
 800204c:	d009      	beq.n	8002062 <HAL_ADC_ConfigChannel+0x46>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002052:	2b03      	cmp	r3, #3
 8002054:	d005      	beq.n	8002062 <HAL_ADC_ConfigChannel+0x46>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205a:	2b04      	cmp	r3, #4
 800205c:	d001      	beq.n	8002062 <HAL_ADC_ConfigChannel+0x46>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2234      	movs	r2, #52	; 0x34
 8002066:	5c9b      	ldrb	r3, [r3, r2]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d101      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x54>
 800206c:	2302      	movs	r3, #2
 800206e:	e0d0      	b.n	8002212 <HAL_ADC_ConfigChannel+0x1f6>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2234      	movs	r2, #52	; 0x34
 8002074:	2101      	movs	r1, #1
 8002076:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	2204      	movs	r2, #4
 8002080:	4013      	ands	r3, r2
 8002082:	d000      	beq.n	8002086 <HAL_ADC_ConfigChannel+0x6a>
 8002084:	e0b4      	b.n	80021f0 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	4a64      	ldr	r2, [pc, #400]	; (800221c <HAL_ADC_ConfigChannel+0x200>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d100      	bne.n	8002092 <HAL_ADC_ConfigChannel+0x76>
 8002090:	e082      	b.n	8002198 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2201      	movs	r2, #1
 800209e:	409a      	lsls	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	430a      	orrs	r2, r1
 80020a6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020ac:	2380      	movs	r3, #128	; 0x80
 80020ae:	055b      	lsls	r3, r3, #21
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d037      	beq.n	8002124 <HAL_ADC_ConfigChannel+0x108>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d033      	beq.n	8002124 <HAL_ADC_ConfigChannel+0x108>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d02f      	beq.n	8002124 <HAL_ADC_ConfigChannel+0x108>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c8:	2b03      	cmp	r3, #3
 80020ca:	d02b      	beq.n	8002124 <HAL_ADC_ConfigChannel+0x108>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d0:	2b04      	cmp	r3, #4
 80020d2:	d027      	beq.n	8002124 <HAL_ADC_ConfigChannel+0x108>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d8:	2b05      	cmp	r3, #5
 80020da:	d023      	beq.n	8002124 <HAL_ADC_ConfigChannel+0x108>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e0:	2b06      	cmp	r3, #6
 80020e2:	d01f      	beq.n	8002124 <HAL_ADC_ConfigChannel+0x108>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e8:	2b07      	cmp	r3, #7
 80020ea:	d01b      	beq.n	8002124 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	2107      	movs	r1, #7
 80020f8:	400b      	ands	r3, r1
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d012      	beq.n	8002124 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	695a      	ldr	r2, [r3, #20]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2107      	movs	r1, #7
 800210a:	438a      	bics	r2, r1
 800210c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6959      	ldr	r1, [r3, #20]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	2207      	movs	r2, #7
 800211a:	401a      	ands	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	430a      	orrs	r2, r1
 8002122:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2b10      	cmp	r3, #16
 800212a:	d007      	beq.n	800213c <HAL_ADC_ConfigChannel+0x120>
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b11      	cmp	r3, #17
 8002132:	d003      	beq.n	800213c <HAL_ADC_ConfigChannel+0x120>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b12      	cmp	r3, #18
 800213a:	d163      	bne.n	8002204 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800213c:	4b38      	ldr	r3, [pc, #224]	; (8002220 <HAL_ADC_ConfigChannel+0x204>)
 800213e:	6819      	ldr	r1, [r3, #0]
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2b10      	cmp	r3, #16
 8002146:	d009      	beq.n	800215c <HAL_ADC_ConfigChannel+0x140>
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b11      	cmp	r3, #17
 800214e:	d102      	bne.n	8002156 <HAL_ADC_ConfigChannel+0x13a>
 8002150:	2380      	movs	r3, #128	; 0x80
 8002152:	03db      	lsls	r3, r3, #15
 8002154:	e004      	b.n	8002160 <HAL_ADC_ConfigChannel+0x144>
 8002156:	2380      	movs	r3, #128	; 0x80
 8002158:	045b      	lsls	r3, r3, #17
 800215a:	e001      	b.n	8002160 <HAL_ADC_ConfigChannel+0x144>
 800215c:	2380      	movs	r3, #128	; 0x80
 800215e:	041b      	lsls	r3, r3, #16
 8002160:	4a2f      	ldr	r2, [pc, #188]	; (8002220 <HAL_ADC_ConfigChannel+0x204>)
 8002162:	430b      	orrs	r3, r1
 8002164:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2b10      	cmp	r3, #16
 800216c:	d14a      	bne.n	8002204 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800216e:	4b2d      	ldr	r3, [pc, #180]	; (8002224 <HAL_ADC_ConfigChannel+0x208>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	492d      	ldr	r1, [pc, #180]	; (8002228 <HAL_ADC_ConfigChannel+0x20c>)
 8002174:	0018      	movs	r0, r3
 8002176:	f7fd ffcf 	bl	8000118 <__udivsi3>
 800217a:	0003      	movs	r3, r0
 800217c:	001a      	movs	r2, r3
 800217e:	0013      	movs	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	189b      	adds	r3, r3, r2
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002188:	e002      	b.n	8002190 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	3b01      	subs	r3, #1
 800218e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f9      	bne.n	800218a <HAL_ADC_ConfigChannel+0x16e>
 8002196:	e035      	b.n	8002204 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2101      	movs	r1, #1
 80021a4:	4099      	lsls	r1, r3
 80021a6:	000b      	movs	r3, r1
 80021a8:	43d9      	mvns	r1, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	400a      	ands	r2, r1
 80021b0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2b10      	cmp	r3, #16
 80021b8:	d007      	beq.n	80021ca <HAL_ADC_ConfigChannel+0x1ae>
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2b11      	cmp	r3, #17
 80021c0:	d003      	beq.n	80021ca <HAL_ADC_ConfigChannel+0x1ae>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2b12      	cmp	r3, #18
 80021c8:	d11c      	bne.n	8002204 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80021ca:	4b15      	ldr	r3, [pc, #84]	; (8002220 <HAL_ADC_ConfigChannel+0x204>)
 80021cc:	6819      	ldr	r1, [r3, #0]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2b10      	cmp	r3, #16
 80021d4:	d007      	beq.n	80021e6 <HAL_ADC_ConfigChannel+0x1ca>
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2b11      	cmp	r3, #17
 80021dc:	d101      	bne.n	80021e2 <HAL_ADC_ConfigChannel+0x1c6>
 80021de:	4b13      	ldr	r3, [pc, #76]	; (800222c <HAL_ADC_ConfigChannel+0x210>)
 80021e0:	e002      	b.n	80021e8 <HAL_ADC_ConfigChannel+0x1cc>
 80021e2:	4b13      	ldr	r3, [pc, #76]	; (8002230 <HAL_ADC_ConfigChannel+0x214>)
 80021e4:	e000      	b.n	80021e8 <HAL_ADC_ConfigChannel+0x1cc>
 80021e6:	4b13      	ldr	r3, [pc, #76]	; (8002234 <HAL_ADC_ConfigChannel+0x218>)
 80021e8:	4a0d      	ldr	r2, [pc, #52]	; (8002220 <HAL_ADC_ConfigChannel+0x204>)
 80021ea:	400b      	ands	r3, r1
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	e009      	b.n	8002204 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f4:	2220      	movs	r2, #32
 80021f6:	431a      	orrs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80021fc:	230f      	movs	r3, #15
 80021fe:	18fb      	adds	r3, r7, r3
 8002200:	2201      	movs	r2, #1
 8002202:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2234      	movs	r2, #52	; 0x34
 8002208:	2100      	movs	r1, #0
 800220a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800220c:	230f      	movs	r3, #15
 800220e:	18fb      	adds	r3, r7, r3
 8002210:	781b      	ldrb	r3, [r3, #0]
}
 8002212:	0018      	movs	r0, r3
 8002214:	46bd      	mov	sp, r7
 8002216:	b004      	add	sp, #16
 8002218:	bd80      	pop	{r7, pc}
 800221a:	46c0      	nop			; (mov r8, r8)
 800221c:	00001001 	.word	0x00001001
 8002220:	40012708 	.word	0x40012708
 8002224:	20000044 	.word	0x20000044
 8002228:	000f4240 	.word	0x000f4240
 800222c:	ffbfffff 	.word	0xffbfffff
 8002230:	feffffff 	.word	0xfeffffff
 8002234:	ff7fffff 	.word	0xff7fffff

08002238 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002240:	2300      	movs	r3, #0
 8002242:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002244:	2300      	movs	r3, #0
 8002246:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	2203      	movs	r2, #3
 8002250:	4013      	ands	r3, r2
 8002252:	2b01      	cmp	r3, #1
 8002254:	d112      	bne.n	800227c <ADC_Enable+0x44>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2201      	movs	r2, #1
 800225e:	4013      	ands	r3, r2
 8002260:	2b01      	cmp	r3, #1
 8002262:	d009      	beq.n	8002278 <ADC_Enable+0x40>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68da      	ldr	r2, [r3, #12]
 800226a:	2380      	movs	r3, #128	; 0x80
 800226c:	021b      	lsls	r3, r3, #8
 800226e:	401a      	ands	r2, r3
 8002270:	2380      	movs	r3, #128	; 0x80
 8002272:	021b      	lsls	r3, r3, #8
 8002274:	429a      	cmp	r2, r3
 8002276:	d101      	bne.n	800227c <ADC_Enable+0x44>
 8002278:	2301      	movs	r3, #1
 800227a:	e000      	b.n	800227e <ADC_Enable+0x46>
 800227c:	2300      	movs	r3, #0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d152      	bne.n	8002328 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	4a2a      	ldr	r2, [pc, #168]	; (8002334 <ADC_Enable+0xfc>)
 800228a:	4013      	ands	r3, r2
 800228c:	d00d      	beq.n	80022aa <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002292:	2210      	movs	r2, #16
 8002294:	431a      	orrs	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800229e:	2201      	movs	r2, #1
 80022a0:	431a      	orrs	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e03f      	b.n	800232a <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2101      	movs	r1, #1
 80022b6:	430a      	orrs	r2, r1
 80022b8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80022ba:	4b1f      	ldr	r3, [pc, #124]	; (8002338 <ADC_Enable+0x100>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	491f      	ldr	r1, [pc, #124]	; (800233c <ADC_Enable+0x104>)
 80022c0:	0018      	movs	r0, r3
 80022c2:	f7fd ff29 	bl	8000118 <__udivsi3>
 80022c6:	0003      	movs	r3, r0
 80022c8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80022ca:	e002      	b.n	80022d2 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1f9      	bne.n	80022cc <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80022d8:	f7ff fcbc 	bl	8001c54 <HAL_GetTick>
 80022dc:	0003      	movs	r3, r0
 80022de:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80022e0:	e01b      	b.n	800231a <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80022e2:	f7ff fcb7 	bl	8001c54 <HAL_GetTick>
 80022e6:	0002      	movs	r2, r0
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d914      	bls.n	800231a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2201      	movs	r2, #1
 80022f8:	4013      	ands	r3, r2
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d00d      	beq.n	800231a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002302:	2210      	movs	r2, #16
 8002304:	431a      	orrs	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800230e:	2201      	movs	r2, #1
 8002310:	431a      	orrs	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e007      	b.n	800232a <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2201      	movs	r2, #1
 8002322:	4013      	ands	r3, r2
 8002324:	2b01      	cmp	r3, #1
 8002326:	d1dc      	bne.n	80022e2 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	0018      	movs	r0, r3
 800232c:	46bd      	mov	sp, r7
 800232e:	b004      	add	sp, #16
 8002330:	bd80      	pop	{r7, pc}
 8002332:	46c0      	nop			; (mov r8, r8)
 8002334:	80000017 	.word	0x80000017
 8002338:	20000044 	.word	0x20000044
 800233c:	000f4240 	.word	0x000f4240

08002340 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002352:	2250      	movs	r2, #80	; 0x50
 8002354:	4013      	ands	r3, r2
 8002356:	d140      	bne.n	80023da <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800235c:	2280      	movs	r2, #128	; 0x80
 800235e:	0092      	lsls	r2, r2, #2
 8002360:	431a      	orrs	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68da      	ldr	r2, [r3, #12]
 800236c:	23c0      	movs	r3, #192	; 0xc0
 800236e:	011b      	lsls	r3, r3, #4
 8002370:	4013      	ands	r3, r2
 8002372:	d12d      	bne.n	80023d0 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002378:	2b00      	cmp	r3, #0
 800237a:	d129      	bne.n	80023d0 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2208      	movs	r2, #8
 8002384:	4013      	ands	r3, r2
 8002386:	2b08      	cmp	r3, #8
 8002388:	d122      	bne.n	80023d0 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	2204      	movs	r2, #4
 8002392:	4013      	ands	r3, r2
 8002394:	d110      	bne.n	80023b8 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	210c      	movs	r1, #12
 80023a2:	438a      	bics	r2, r1
 80023a4:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023aa:	4a11      	ldr	r2, [pc, #68]	; (80023f0 <ADC_DMAConvCplt+0xb0>)
 80023ac:	4013      	ands	r3, r2
 80023ae:	2201      	movs	r2, #1
 80023b0:	431a      	orrs	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	639a      	str	r2, [r3, #56]	; 0x38
 80023b6:	e00b      	b.n	80023d0 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023bc:	2220      	movs	r2, #32
 80023be:	431a      	orrs	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c8:	2201      	movs	r2, #1
 80023ca:	431a      	orrs	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	0018      	movs	r0, r3
 80023d4:	f7ff fe0a 	bl	8001fec <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 80023d8:	e005      	b.n	80023e6 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	0010      	movs	r0, r2
 80023e4:	4798      	blx	r3
}
 80023e6:	46c0      	nop			; (mov r8, r8)
 80023e8:	46bd      	mov	sp, r7
 80023ea:	b004      	add	sp, #16
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	46c0      	nop			; (mov r8, r8)
 80023f0:	fffffefe 	.word	0xfffffefe

080023f4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002400:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	0018      	movs	r0, r3
 8002406:	f7ff fdf9 	bl	8001ffc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800240a:	46c0      	nop			; (mov r8, r8)
 800240c:	46bd      	mov	sp, r7
 800240e:	b004      	add	sp, #16
 8002410:	bd80      	pop	{r7, pc}

08002412 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b084      	sub	sp, #16
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002424:	2240      	movs	r2, #64	; 0x40
 8002426:	431a      	orrs	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002430:	2204      	movs	r2, #4
 8002432:	431a      	orrs	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	0018      	movs	r0, r3
 800243c:	f7ff fde6 	bl	800200c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002440:	46c0      	nop			; (mov r8, r8)
 8002442:	46bd      	mov	sp, r7
 8002444:	b004      	add	sp, #16
 8002446:	bd80      	pop	{r7, pc}

08002448 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	0002      	movs	r2, r0
 8002450:	1dfb      	adds	r3, r7, #7
 8002452:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002454:	1dfb      	adds	r3, r7, #7
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b7f      	cmp	r3, #127	; 0x7f
 800245a:	d809      	bhi.n	8002470 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800245c:	1dfb      	adds	r3, r7, #7
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	001a      	movs	r2, r3
 8002462:	231f      	movs	r3, #31
 8002464:	401a      	ands	r2, r3
 8002466:	4b04      	ldr	r3, [pc, #16]	; (8002478 <__NVIC_EnableIRQ+0x30>)
 8002468:	2101      	movs	r1, #1
 800246a:	4091      	lsls	r1, r2
 800246c:	000a      	movs	r2, r1
 800246e:	601a      	str	r2, [r3, #0]
  }
}
 8002470:	46c0      	nop			; (mov r8, r8)
 8002472:	46bd      	mov	sp, r7
 8002474:	b002      	add	sp, #8
 8002476:	bd80      	pop	{r7, pc}
 8002478:	e000e100 	.word	0xe000e100

0800247c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800247c:	b590      	push	{r4, r7, lr}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	0002      	movs	r2, r0
 8002484:	6039      	str	r1, [r7, #0]
 8002486:	1dfb      	adds	r3, r7, #7
 8002488:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800248a:	1dfb      	adds	r3, r7, #7
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	2b7f      	cmp	r3, #127	; 0x7f
 8002490:	d828      	bhi.n	80024e4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002492:	4a2f      	ldr	r2, [pc, #188]	; (8002550 <__NVIC_SetPriority+0xd4>)
 8002494:	1dfb      	adds	r3, r7, #7
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	b25b      	sxtb	r3, r3
 800249a:	089b      	lsrs	r3, r3, #2
 800249c:	33c0      	adds	r3, #192	; 0xc0
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	589b      	ldr	r3, [r3, r2]
 80024a2:	1dfa      	adds	r2, r7, #7
 80024a4:	7812      	ldrb	r2, [r2, #0]
 80024a6:	0011      	movs	r1, r2
 80024a8:	2203      	movs	r2, #3
 80024aa:	400a      	ands	r2, r1
 80024ac:	00d2      	lsls	r2, r2, #3
 80024ae:	21ff      	movs	r1, #255	; 0xff
 80024b0:	4091      	lsls	r1, r2
 80024b2:	000a      	movs	r2, r1
 80024b4:	43d2      	mvns	r2, r2
 80024b6:	401a      	ands	r2, r3
 80024b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	019b      	lsls	r3, r3, #6
 80024be:	22ff      	movs	r2, #255	; 0xff
 80024c0:	401a      	ands	r2, r3
 80024c2:	1dfb      	adds	r3, r7, #7
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	0018      	movs	r0, r3
 80024c8:	2303      	movs	r3, #3
 80024ca:	4003      	ands	r3, r0
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024d0:	481f      	ldr	r0, [pc, #124]	; (8002550 <__NVIC_SetPriority+0xd4>)
 80024d2:	1dfb      	adds	r3, r7, #7
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	b25b      	sxtb	r3, r3
 80024d8:	089b      	lsrs	r3, r3, #2
 80024da:	430a      	orrs	r2, r1
 80024dc:	33c0      	adds	r3, #192	; 0xc0
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80024e2:	e031      	b.n	8002548 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024e4:	4a1b      	ldr	r2, [pc, #108]	; (8002554 <__NVIC_SetPriority+0xd8>)
 80024e6:	1dfb      	adds	r3, r7, #7
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	0019      	movs	r1, r3
 80024ec:	230f      	movs	r3, #15
 80024ee:	400b      	ands	r3, r1
 80024f0:	3b08      	subs	r3, #8
 80024f2:	089b      	lsrs	r3, r3, #2
 80024f4:	3306      	adds	r3, #6
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	18d3      	adds	r3, r2, r3
 80024fa:	3304      	adds	r3, #4
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	1dfa      	adds	r2, r7, #7
 8002500:	7812      	ldrb	r2, [r2, #0]
 8002502:	0011      	movs	r1, r2
 8002504:	2203      	movs	r2, #3
 8002506:	400a      	ands	r2, r1
 8002508:	00d2      	lsls	r2, r2, #3
 800250a:	21ff      	movs	r1, #255	; 0xff
 800250c:	4091      	lsls	r1, r2
 800250e:	000a      	movs	r2, r1
 8002510:	43d2      	mvns	r2, r2
 8002512:	401a      	ands	r2, r3
 8002514:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	019b      	lsls	r3, r3, #6
 800251a:	22ff      	movs	r2, #255	; 0xff
 800251c:	401a      	ands	r2, r3
 800251e:	1dfb      	adds	r3, r7, #7
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	0018      	movs	r0, r3
 8002524:	2303      	movs	r3, #3
 8002526:	4003      	ands	r3, r0
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800252c:	4809      	ldr	r0, [pc, #36]	; (8002554 <__NVIC_SetPriority+0xd8>)
 800252e:	1dfb      	adds	r3, r7, #7
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	001c      	movs	r4, r3
 8002534:	230f      	movs	r3, #15
 8002536:	4023      	ands	r3, r4
 8002538:	3b08      	subs	r3, #8
 800253a:	089b      	lsrs	r3, r3, #2
 800253c:	430a      	orrs	r2, r1
 800253e:	3306      	adds	r3, #6
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	18c3      	adds	r3, r0, r3
 8002544:	3304      	adds	r3, #4
 8002546:	601a      	str	r2, [r3, #0]
}
 8002548:	46c0      	nop			; (mov r8, r8)
 800254a:	46bd      	mov	sp, r7
 800254c:	b003      	add	sp, #12
 800254e:	bd90      	pop	{r4, r7, pc}
 8002550:	e000e100 	.word	0xe000e100
 8002554:	e000ed00 	.word	0xe000ed00

08002558 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	1e5a      	subs	r2, r3, #1
 8002564:	2380      	movs	r3, #128	; 0x80
 8002566:	045b      	lsls	r3, r3, #17
 8002568:	429a      	cmp	r2, r3
 800256a:	d301      	bcc.n	8002570 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800256c:	2301      	movs	r3, #1
 800256e:	e010      	b.n	8002592 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002570:	4b0a      	ldr	r3, [pc, #40]	; (800259c <SysTick_Config+0x44>)
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	3a01      	subs	r2, #1
 8002576:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002578:	2301      	movs	r3, #1
 800257a:	425b      	negs	r3, r3
 800257c:	2103      	movs	r1, #3
 800257e:	0018      	movs	r0, r3
 8002580:	f7ff ff7c 	bl	800247c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002584:	4b05      	ldr	r3, [pc, #20]	; (800259c <SysTick_Config+0x44>)
 8002586:	2200      	movs	r2, #0
 8002588:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800258a:	4b04      	ldr	r3, [pc, #16]	; (800259c <SysTick_Config+0x44>)
 800258c:	2207      	movs	r2, #7
 800258e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002590:	2300      	movs	r3, #0
}
 8002592:	0018      	movs	r0, r3
 8002594:	46bd      	mov	sp, r7
 8002596:	b002      	add	sp, #8
 8002598:	bd80      	pop	{r7, pc}
 800259a:	46c0      	nop			; (mov r8, r8)
 800259c:	e000e010 	.word	0xe000e010

080025a0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60b9      	str	r1, [r7, #8]
 80025a8:	607a      	str	r2, [r7, #4]
 80025aa:	210f      	movs	r1, #15
 80025ac:	187b      	adds	r3, r7, r1
 80025ae:	1c02      	adds	r2, r0, #0
 80025b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	187b      	adds	r3, r7, r1
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	b25b      	sxtb	r3, r3
 80025ba:	0011      	movs	r1, r2
 80025bc:	0018      	movs	r0, r3
 80025be:	f7ff ff5d 	bl	800247c <__NVIC_SetPriority>
}
 80025c2:	46c0      	nop			; (mov r8, r8)
 80025c4:	46bd      	mov	sp, r7
 80025c6:	b004      	add	sp, #16
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b082      	sub	sp, #8
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	0002      	movs	r2, r0
 80025d2:	1dfb      	adds	r3, r7, #7
 80025d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025d6:	1dfb      	adds	r3, r7, #7
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	b25b      	sxtb	r3, r3
 80025dc:	0018      	movs	r0, r3
 80025de:	f7ff ff33 	bl	8002448 <__NVIC_EnableIRQ>
}
 80025e2:	46c0      	nop			; (mov r8, r8)
 80025e4:	46bd      	mov	sp, r7
 80025e6:	b002      	add	sp, #8
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b082      	sub	sp, #8
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	0018      	movs	r0, r3
 80025f6:	f7ff ffaf 	bl	8002558 <SysTick_Config>
 80025fa:	0003      	movs	r3, r0
}
 80025fc:	0018      	movs	r0, r3
 80025fe:	46bd      	mov	sp, r7
 8002600:	b002      	add	sp, #8
 8002602:	bd80      	pop	{r7, pc}

08002604 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e015      	b.n	8002642 <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if (hdac->State == HAL_DAC_STATE_RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	791b      	ldrb	r3, [r3, #4]
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b00      	cmp	r3, #0
 800261e:	d106      	bne.n	800262e <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	0018      	movs	r0, r3
 800262a:	f7ff f80b 	bl	8001644 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2202      	movs	r2, #2
 8002632:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	0018      	movs	r0, r3
 8002644:	46bd      	mov	sp, r7
 8002646:	b002      	add	sp, #8
 8002648:	bd80      	pop	{r7, pc}

0800264a <HAL_DAC_ConfigChannel>:
  *          This parameter can be one of the following values:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b086      	sub	sp, #24
 800264e:	af00      	add	r7, sp, #0
 8002650:	60f8      	str	r0, [r7, #12]
 8002652:	60b9      	str	r1, [r7, #8]
 8002654:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002656:	2300      	movs	r3, #0
 8002658:	617b      	str	r3, [r7, #20]
 800265a:	2300      	movs	r3, #0
 800265c:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	795b      	ldrb	r3, [r3, #5]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d101      	bne.n	800266a <HAL_DAC_ConfigChannel+0x20>
 8002666:	2302      	movs	r3, #2
 8002668:	e029      	b.n	80026be <HAL_DAC_ConfigChannel+0x74>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2201      	movs	r2, #1
 800266e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2202      	movs	r2, #2
 8002674:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel); 
 800267e:	223e      	movs	r2, #62	; 0x3e
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	409a      	lsls	r2, r3
 8002684:	0013      	movs	r3, r2
 8002686:	43da      	mvns	r2, r3
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	4013      	ands	r3, r2
 800268c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	4313      	orrs	r3, r2
 8002698:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	409a      	lsls	r2, r3
 80026a0:	0013      	movs	r3, r2
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2201      	movs	r2, #1
 80026b4:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	0018      	movs	r0, r3
 80026c0:	46bd      	mov	sp, r7
 80026c2:	b006      	add	sp, #24
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_DAC_Start>:
       /* STM32F091xC  STM32F098xx */

#if defined (STM32F051x8) || defined (STM32F058xx)

HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b082      	sub	sp, #8
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
 80026ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	795b      	ldrb	r3, [r3, #5]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d101      	bne.n	80026dc <HAL_DAC_Start+0x16>
 80026d8:	2302      	movs	r3, #2
 80026da:	e028      	b.n	800272e <HAL_DAC_Start+0x68>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2202      	movs	r2, #2
 80026e6:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6819      	ldr	r1, [r3, #0]
 80026ee:	2201      	movs	r2, #1
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	409a      	lsls	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	430a      	orrs	r2, r1
 80026fa:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10e      	bne.n	8002720 <HAL_DAC_Start+0x5a>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	223c      	movs	r2, #60	; 0x3c
 800270a:	4013      	ands	r3, r2
 800270c:	2b3c      	cmp	r3, #60	; 0x3c
 800270e:	d107      	bne.n	8002720 <HAL_DAC_Start+0x5a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2101      	movs	r1, #1
 800271c:	430a      	orrs	r2, r1
 800271e:	605a      	str	r2, [r3, #4]
    }
  }
 
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	0018      	movs	r0, r3
 8002730:	46bd      	mov	sp, r7
 8002732:	b002      	add	sp, #8
 8002734:	bd80      	pop	{r7, pc}
	...

08002738 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002740:	2300      	movs	r3, #0
 8002742:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e036      	b.n	80027bc <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2221      	movs	r2, #33	; 0x21
 8002752:	2102      	movs	r1, #2
 8002754:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	4a18      	ldr	r2, [pc, #96]	; (80027c4 <HAL_DMA_Init+0x8c>)
 8002762:	4013      	ands	r3, r2
 8002764:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800276e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800277a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002786:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	69db      	ldr	r3, [r3, #28]
 800278c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	4313      	orrs	r3, r2
 8002792:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	0018      	movs	r0, r3
 80027a0:	f000 f9c4 	bl	8002b2c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2221      	movs	r2, #33	; 0x21
 80027ae:	2101      	movs	r1, #1
 80027b0:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2220      	movs	r2, #32
 80027b6:	2100      	movs	r1, #0
 80027b8:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}  
 80027bc:	0018      	movs	r0, r3
 80027be:	46bd      	mov	sp, r7
 80027c0:	b004      	add	sp, #16
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	ffffc00f 	.word	0xffffc00f

080027c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
 80027d4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80027d6:	2317      	movs	r3, #23
 80027d8:	18fb      	adds	r3, r7, r3
 80027da:	2200      	movs	r2, #0
 80027dc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2220      	movs	r2, #32
 80027e2:	5c9b      	ldrb	r3, [r3, r2]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d101      	bne.n	80027ec <HAL_DMA_Start_IT+0x24>
 80027e8:	2302      	movs	r3, #2
 80027ea:	e04f      	b.n	800288c <HAL_DMA_Start_IT+0xc4>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2220      	movs	r2, #32
 80027f0:	2101      	movs	r1, #1
 80027f2:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2221      	movs	r2, #33	; 0x21
 80027f8:	5c9b      	ldrb	r3, [r3, r2]
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d13a      	bne.n	8002876 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2221      	movs	r2, #33	; 0x21
 8002804:	2102      	movs	r1, #2
 8002806:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2101      	movs	r1, #1
 800281a:	438a      	bics	r2, r1
 800281c:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	68b9      	ldr	r1, [r7, #8]
 8002824:	68f8      	ldr	r0, [r7, #12]
 8002826:	f000 f954 	bl	8002ad2 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282e:	2b00      	cmp	r3, #0
 8002830:	d008      	beq.n	8002844 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	210e      	movs	r1, #14
 800283e:	430a      	orrs	r2, r1
 8002840:	601a      	str	r2, [r3, #0]
 8002842:	e00f      	b.n	8002864 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	210a      	movs	r1, #10
 8002850:	430a      	orrs	r2, r1
 8002852:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2104      	movs	r1, #4
 8002860:	438a      	bics	r2, r1
 8002862:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2101      	movs	r1, #1
 8002870:	430a      	orrs	r2, r1
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	e007      	b.n	8002886 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2220      	movs	r2, #32
 800287a:	2100      	movs	r1, #0
 800287c:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800287e:	2317      	movs	r3, #23
 8002880:	18fb      	adds	r3, r7, r3
 8002882:	2202      	movs	r2, #2
 8002884:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8002886:	2317      	movs	r3, #23
 8002888:	18fb      	adds	r3, r7, r3
 800288a:	781b      	ldrb	r3, [r3, #0]
} 
 800288c:	0018      	movs	r0, r3
 800288e:	46bd      	mov	sp, r7
 8002890:	b006      	add	sp, #24
 8002892:	bd80      	pop	{r7, pc}

08002894 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2221      	movs	r2, #33	; 0x21
 80028a0:	5c9b      	ldrb	r3, [r3, r2]
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d008      	beq.n	80028ba <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2204      	movs	r2, #4
 80028ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2220      	movs	r2, #32
 80028b2:	2100      	movs	r1, #0
 80028b4:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e020      	b.n	80028fc <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	210e      	movs	r1, #14
 80028c6:	438a      	bics	r2, r1
 80028c8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2101      	movs	r1, #1
 80028d6:	438a      	bics	r2, r1
 80028d8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e2:	2101      	movs	r1, #1
 80028e4:	4091      	lsls	r1, r2
 80028e6:	000a      	movs	r2, r1
 80028e8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2221      	movs	r2, #33	; 0x21
 80028ee:	2101      	movs	r1, #1
 80028f0:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2220      	movs	r2, #32
 80028f6:	2100      	movs	r1, #0
 80028f8:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	0018      	movs	r0, r3
 80028fe:	46bd      	mov	sp, r7
 8002900:	b002      	add	sp, #8
 8002902:	bd80      	pop	{r7, pc}

08002904 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800290c:	210f      	movs	r1, #15
 800290e:	187b      	adds	r3, r7, r1
 8002910:	2200      	movs	r2, #0
 8002912:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2221      	movs	r2, #33	; 0x21
 8002918:	5c9b      	ldrb	r3, [r3, r2]
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d006      	beq.n	800292e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2204      	movs	r2, #4
 8002924:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002926:	187b      	adds	r3, r7, r1
 8002928:	2201      	movs	r2, #1
 800292a:	701a      	strb	r2, [r3, #0]
 800292c:	e028      	b.n	8002980 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	210e      	movs	r1, #14
 800293a:	438a      	bics	r2, r1
 800293c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2101      	movs	r1, #1
 800294a:	438a      	bics	r2, r1
 800294c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002956:	2101      	movs	r1, #1
 8002958:	4091      	lsls	r1, r2
 800295a:	000a      	movs	r2, r1
 800295c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2221      	movs	r2, #33	; 0x21
 8002962:	2101      	movs	r1, #1
 8002964:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2220      	movs	r2, #32
 800296a:	2100      	movs	r1, #0
 800296c:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002972:	2b00      	cmp	r3, #0
 8002974:	d004      	beq.n	8002980 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	0010      	movs	r0, r2
 800297e:	4798      	blx	r3
    } 
  }
  return status;
 8002980:	230f      	movs	r3, #15
 8002982:	18fb      	adds	r3, r7, r3
 8002984:	781b      	ldrb	r3, [r3, #0]
}
 8002986:	0018      	movs	r0, r3
 8002988:	46bd      	mov	sp, r7
 800298a:	b004      	add	sp, #16
 800298c:	bd80      	pop	{r7, pc}

0800298e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b084      	sub	sp, #16
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	2204      	movs	r2, #4
 80029ac:	409a      	lsls	r2, r3
 80029ae:	0013      	movs	r3, r2
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	4013      	ands	r3, r2
 80029b4:	d024      	beq.n	8002a00 <HAL_DMA_IRQHandler+0x72>
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	2204      	movs	r2, #4
 80029ba:	4013      	ands	r3, r2
 80029bc:	d020      	beq.n	8002a00 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2220      	movs	r2, #32
 80029c6:	4013      	ands	r3, r2
 80029c8:	d107      	bne.n	80029da <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2104      	movs	r1, #4
 80029d6:	438a      	bics	r2, r1
 80029d8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e2:	2104      	movs	r1, #4
 80029e4:	4091      	lsls	r1, r2
 80029e6:	000a      	movs	r2, r1
 80029e8:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d100      	bne.n	80029f4 <HAL_DMA_IRQHandler+0x66>
 80029f2:	e06a      	b.n	8002aca <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	0010      	movs	r0, r2
 80029fc:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80029fe:	e064      	b.n	8002aca <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a04:	2202      	movs	r2, #2
 8002a06:	409a      	lsls	r2, r3
 8002a08:	0013      	movs	r3, r2
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	d02b      	beq.n	8002a68 <HAL_DMA_IRQHandler+0xda>
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	2202      	movs	r2, #2
 8002a14:	4013      	ands	r3, r2
 8002a16:	d027      	beq.n	8002a68 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2220      	movs	r2, #32
 8002a20:	4013      	ands	r3, r2
 8002a22:	d10b      	bne.n	8002a3c <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	210a      	movs	r1, #10
 8002a30:	438a      	bics	r2, r1
 8002a32:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2221      	movs	r2, #33	; 0x21
 8002a38:	2101      	movs	r1, #1
 8002a3a:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a44:	2102      	movs	r1, #2
 8002a46:	4091      	lsls	r1, r2
 8002a48:	000a      	movs	r2, r1
 8002a4a:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2220      	movs	r2, #32
 8002a50:	2100      	movs	r1, #0
 8002a52:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d036      	beq.n	8002aca <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	0010      	movs	r0, r2
 8002a64:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002a66:	e030      	b.n	8002aca <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6c:	2208      	movs	r2, #8
 8002a6e:	409a      	lsls	r2, r3
 8002a70:	0013      	movs	r3, r2
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	4013      	ands	r3, r2
 8002a76:	d028      	beq.n	8002aca <HAL_DMA_IRQHandler+0x13c>
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	2208      	movs	r2, #8
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	d024      	beq.n	8002aca <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	210e      	movs	r1, #14
 8002a8c:	438a      	bics	r2, r1
 8002a8e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a98:	2101      	movs	r1, #1
 8002a9a:	4091      	lsls	r1, r2
 8002a9c:	000a      	movs	r2, r1
 8002a9e:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2221      	movs	r2, #33	; 0x21
 8002aaa:	2101      	movs	r1, #1
 8002aac:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d005      	beq.n	8002aca <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	0010      	movs	r0, r2
 8002ac6:	4798      	blx	r3
    }
   }
}  
 8002ac8:	e7ff      	b.n	8002aca <HAL_DMA_IRQHandler+0x13c>
 8002aca:	46c0      	nop			; (mov r8, r8)
 8002acc:	46bd      	mov	sp, r7
 8002ace:	b004      	add	sp, #16
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b084      	sub	sp, #16
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	60f8      	str	r0, [r7, #12]
 8002ada:	60b9      	str	r1, [r7, #8]
 8002adc:	607a      	str	r2, [r7, #4]
 8002ade:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae8:	2101      	movs	r1, #1
 8002aea:	4091      	lsls	r1, r2
 8002aec:	000a      	movs	r2, r1
 8002aee:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	2b10      	cmp	r3, #16
 8002afe:	d108      	bne.n	8002b12 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68ba      	ldr	r2, [r7, #8]
 8002b0e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b10:	e007      	b.n	8002b22 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	60da      	str	r2, [r3, #12]
}
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	46bd      	mov	sp, r7
 8002b26:	b004      	add	sp, #16
 8002b28:	bd80      	pop	{r7, pc}
	...

08002b2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a08      	ldr	r2, [pc, #32]	; (8002b5c <DMA_CalcBaseAndBitshift+0x30>)
 8002b3a:	4694      	mov	ip, r2
 8002b3c:	4463      	add	r3, ip
 8002b3e:	2114      	movs	r1, #20
 8002b40:	0018      	movs	r0, r3
 8002b42:	f7fd fae9 	bl	8000118 <__udivsi3>
 8002b46:	0003      	movs	r3, r0
 8002b48:	009a      	lsls	r2, r3, #2
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a03      	ldr	r2, [pc, #12]	; (8002b60 <DMA_CalcBaseAndBitshift+0x34>)
 8002b52:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002b54:	46c0      	nop			; (mov r8, r8)
 8002b56:	46bd      	mov	sp, r7
 8002b58:	b002      	add	sp, #8
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	bffdfff8 	.word	0xbffdfff8
 8002b60:	40020000 	.word	0x40020000

08002b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b72:	e14f      	b.n	8002e14 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2101      	movs	r1, #1
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	4091      	lsls	r1, r2
 8002b7e:	000a      	movs	r2, r1
 8002b80:	4013      	ands	r3, r2
 8002b82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d100      	bne.n	8002b8c <HAL_GPIO_Init+0x28>
 8002b8a:	e140      	b.n	8002e0e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	2203      	movs	r2, #3
 8002b92:	4013      	ands	r3, r2
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d005      	beq.n	8002ba4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	2203      	movs	r2, #3
 8002b9e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d130      	bne.n	8002c06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	2203      	movs	r2, #3
 8002bb0:	409a      	lsls	r2, r3
 8002bb2:	0013      	movs	r3, r2
 8002bb4:	43da      	mvns	r2, r3
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	68da      	ldr	r2, [r3, #12]
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	409a      	lsls	r2, r3
 8002bc6:	0013      	movs	r3, r2
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bda:	2201      	movs	r2, #1
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	409a      	lsls	r2, r3
 8002be0:	0013      	movs	r3, r2
 8002be2:	43da      	mvns	r2, r3
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	4013      	ands	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	091b      	lsrs	r3, r3, #4
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	401a      	ands	r2, r3
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	409a      	lsls	r2, r3
 8002bf8:	0013      	movs	r3, r2
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2203      	movs	r2, #3
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	2b03      	cmp	r3, #3
 8002c10:	d017      	beq.n	8002c42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	2203      	movs	r2, #3
 8002c1e:	409a      	lsls	r2, r3
 8002c20:	0013      	movs	r3, r2
 8002c22:	43da      	mvns	r2, r3
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	4013      	ands	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	409a      	lsls	r2, r3
 8002c34:	0013      	movs	r3, r2
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2203      	movs	r2, #3
 8002c48:	4013      	ands	r3, r2
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d123      	bne.n	8002c96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	08da      	lsrs	r2, r3, #3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	3208      	adds	r2, #8
 8002c56:	0092      	lsls	r2, r2, #2
 8002c58:	58d3      	ldr	r3, [r2, r3]
 8002c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	2207      	movs	r2, #7
 8002c60:	4013      	ands	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	220f      	movs	r2, #15
 8002c66:	409a      	lsls	r2, r3
 8002c68:	0013      	movs	r3, r2
 8002c6a:	43da      	mvns	r2, r3
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	691a      	ldr	r2, [r3, #16]
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	2107      	movs	r1, #7
 8002c7a:	400b      	ands	r3, r1
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	409a      	lsls	r2, r3
 8002c80:	0013      	movs	r3, r2
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	08da      	lsrs	r2, r3, #3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	3208      	adds	r2, #8
 8002c90:	0092      	lsls	r2, r2, #2
 8002c92:	6939      	ldr	r1, [r7, #16]
 8002c94:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	2203      	movs	r2, #3
 8002ca2:	409a      	lsls	r2, r3
 8002ca4:	0013      	movs	r3, r2
 8002ca6:	43da      	mvns	r2, r3
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	4013      	ands	r3, r2
 8002cac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2203      	movs	r2, #3
 8002cb4:	401a      	ands	r2, r3
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	409a      	lsls	r2, r3
 8002cbc:	0013      	movs	r3, r2
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	23c0      	movs	r3, #192	; 0xc0
 8002cd0:	029b      	lsls	r3, r3, #10
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	d100      	bne.n	8002cd8 <HAL_GPIO_Init+0x174>
 8002cd6:	e09a      	b.n	8002e0e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cd8:	4b54      	ldr	r3, [pc, #336]	; (8002e2c <HAL_GPIO_Init+0x2c8>)
 8002cda:	699a      	ldr	r2, [r3, #24]
 8002cdc:	4b53      	ldr	r3, [pc, #332]	; (8002e2c <HAL_GPIO_Init+0x2c8>)
 8002cde:	2101      	movs	r1, #1
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	619a      	str	r2, [r3, #24]
 8002ce4:	4b51      	ldr	r3, [pc, #324]	; (8002e2c <HAL_GPIO_Init+0x2c8>)
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	4013      	ands	r3, r2
 8002cec:	60bb      	str	r3, [r7, #8]
 8002cee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002cf0:	4a4f      	ldr	r2, [pc, #316]	; (8002e30 <HAL_GPIO_Init+0x2cc>)
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	089b      	lsrs	r3, r3, #2
 8002cf6:	3302      	adds	r3, #2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	589b      	ldr	r3, [r3, r2]
 8002cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	2203      	movs	r2, #3
 8002d02:	4013      	ands	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	220f      	movs	r2, #15
 8002d08:	409a      	lsls	r2, r3
 8002d0a:	0013      	movs	r3, r2
 8002d0c:	43da      	mvns	r2, r3
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	4013      	ands	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	2390      	movs	r3, #144	; 0x90
 8002d18:	05db      	lsls	r3, r3, #23
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d013      	beq.n	8002d46 <HAL_GPIO_Init+0x1e2>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a44      	ldr	r2, [pc, #272]	; (8002e34 <HAL_GPIO_Init+0x2d0>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d00d      	beq.n	8002d42 <HAL_GPIO_Init+0x1de>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a43      	ldr	r2, [pc, #268]	; (8002e38 <HAL_GPIO_Init+0x2d4>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d007      	beq.n	8002d3e <HAL_GPIO_Init+0x1da>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a42      	ldr	r2, [pc, #264]	; (8002e3c <HAL_GPIO_Init+0x2d8>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d101      	bne.n	8002d3a <HAL_GPIO_Init+0x1d6>
 8002d36:	2303      	movs	r3, #3
 8002d38:	e006      	b.n	8002d48 <HAL_GPIO_Init+0x1e4>
 8002d3a:	2305      	movs	r3, #5
 8002d3c:	e004      	b.n	8002d48 <HAL_GPIO_Init+0x1e4>
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e002      	b.n	8002d48 <HAL_GPIO_Init+0x1e4>
 8002d42:	2301      	movs	r3, #1
 8002d44:	e000      	b.n	8002d48 <HAL_GPIO_Init+0x1e4>
 8002d46:	2300      	movs	r3, #0
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	2103      	movs	r1, #3
 8002d4c:	400a      	ands	r2, r1
 8002d4e:	0092      	lsls	r2, r2, #2
 8002d50:	4093      	lsls	r3, r2
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d58:	4935      	ldr	r1, [pc, #212]	; (8002e30 <HAL_GPIO_Init+0x2cc>)
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	089b      	lsrs	r3, r3, #2
 8002d5e:	3302      	adds	r3, #2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d66:	4b36      	ldr	r3, [pc, #216]	; (8002e40 <HAL_GPIO_Init+0x2dc>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	43da      	mvns	r2, r3
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	4013      	ands	r3, r2
 8002d74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685a      	ldr	r2, [r3, #4]
 8002d7a:	2380      	movs	r3, #128	; 0x80
 8002d7c:	025b      	lsls	r3, r3, #9
 8002d7e:	4013      	ands	r3, r2
 8002d80:	d003      	beq.n	8002d8a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002d8a:	4b2d      	ldr	r3, [pc, #180]	; (8002e40 <HAL_GPIO_Init+0x2dc>)
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002d90:	4b2b      	ldr	r3, [pc, #172]	; (8002e40 <HAL_GPIO_Init+0x2dc>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	43da      	mvns	r2, r3
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685a      	ldr	r2, [r3, #4]
 8002da4:	2380      	movs	r3, #128	; 0x80
 8002da6:	029b      	lsls	r3, r3, #10
 8002da8:	4013      	ands	r3, r2
 8002daa:	d003      	beq.n	8002db4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002db4:	4b22      	ldr	r3, [pc, #136]	; (8002e40 <HAL_GPIO_Init+0x2dc>)
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dba:	4b21      	ldr	r3, [pc, #132]	; (8002e40 <HAL_GPIO_Init+0x2dc>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	43da      	mvns	r2, r3
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685a      	ldr	r2, [r3, #4]
 8002dce:	2380      	movs	r3, #128	; 0x80
 8002dd0:	035b      	lsls	r3, r3, #13
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	d003      	beq.n	8002dde <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002dde:	4b18      	ldr	r3, [pc, #96]	; (8002e40 <HAL_GPIO_Init+0x2dc>)
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002de4:	4b16      	ldr	r3, [pc, #88]	; (8002e40 <HAL_GPIO_Init+0x2dc>)
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	43da      	mvns	r2, r3
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	4013      	ands	r3, r2
 8002df2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	2380      	movs	r3, #128	; 0x80
 8002dfa:	039b      	lsls	r3, r3, #14
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	d003      	beq.n	8002e08 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002e08:	4b0d      	ldr	r3, [pc, #52]	; (8002e40 <HAL_GPIO_Init+0x2dc>)
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	3301      	adds	r3, #1
 8002e12:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	40da      	lsrs	r2, r3
 8002e1c:	1e13      	subs	r3, r2, #0
 8002e1e:	d000      	beq.n	8002e22 <HAL_GPIO_Init+0x2be>
 8002e20:	e6a8      	b.n	8002b74 <HAL_GPIO_Init+0x10>
  } 
}
 8002e22:	46c0      	nop			; (mov r8, r8)
 8002e24:	46c0      	nop			; (mov r8, r8)
 8002e26:	46bd      	mov	sp, r7
 8002e28:	b006      	add	sp, #24
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	40010000 	.word	0x40010000
 8002e34:	48000400 	.word	0x48000400
 8002e38:	48000800 	.word	0x48000800
 8002e3c:	48000c00 	.word	0x48000c00
 8002e40:	40010400 	.word	0x40010400

08002e44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	000a      	movs	r2, r1
 8002e4e:	1cbb      	adds	r3, r7, #2
 8002e50:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	1cba      	adds	r2, r7, #2
 8002e58:	8812      	ldrh	r2, [r2, #0]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	d004      	beq.n	8002e68 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002e5e:	230f      	movs	r3, #15
 8002e60:	18fb      	adds	r3, r7, r3
 8002e62:	2201      	movs	r2, #1
 8002e64:	701a      	strb	r2, [r3, #0]
 8002e66:	e003      	b.n	8002e70 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e68:	230f      	movs	r3, #15
 8002e6a:	18fb      	adds	r3, r7, r3
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002e70:	230f      	movs	r3, #15
 8002e72:	18fb      	adds	r3, r7, r3
 8002e74:	781b      	ldrb	r3, [r3, #0]
  }
 8002e76:	0018      	movs	r0, r3
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	b004      	add	sp, #16
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b082      	sub	sp, #8
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
 8002e86:	0008      	movs	r0, r1
 8002e88:	0011      	movs	r1, r2
 8002e8a:	1cbb      	adds	r3, r7, #2
 8002e8c:	1c02      	adds	r2, r0, #0
 8002e8e:	801a      	strh	r2, [r3, #0]
 8002e90:	1c7b      	adds	r3, r7, #1
 8002e92:	1c0a      	adds	r2, r1, #0
 8002e94:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e96:	1c7b      	adds	r3, r7, #1
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d004      	beq.n	8002ea8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e9e:	1cbb      	adds	r3, r7, #2
 8002ea0:	881a      	ldrh	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ea6:	e003      	b.n	8002eb0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ea8:	1cbb      	adds	r3, r7, #2
 8002eaa:	881a      	ldrh	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002eb0:	46c0      	nop			; (mov r8, r8)
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	b002      	add	sp, #8
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	000a      	movs	r2, r1
 8002ec2:	1cbb      	adds	r3, r7, #2
 8002ec4:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ecc:	1cbb      	adds	r3, r7, #2
 8002ece:	881b      	ldrh	r3, [r3, #0]
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	041a      	lsls	r2, r3, #16
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	43db      	mvns	r3, r3
 8002eda:	1cb9      	adds	r1, r7, #2
 8002edc:	8809      	ldrh	r1, [r1, #0]
 8002ede:	400b      	ands	r3, r1
 8002ee0:	431a      	orrs	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	619a      	str	r2, [r3, #24]
}
 8002ee6:	46c0      	nop			; (mov r8, r8)
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	b004      	add	sp, #16
 8002eec:	bd80      	pop	{r7, pc}
	...

08002ef0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e082      	b.n	8003008 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2241      	movs	r2, #65	; 0x41
 8002f06:	5c9b      	ldrb	r3, [r3, r2]
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d107      	bne.n	8002f1e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2240      	movs	r2, #64	; 0x40
 8002f12:	2100      	movs	r1, #0
 8002f14:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	0018      	movs	r0, r3
 8002f1a:	f7fe fbd9 	bl	80016d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2241      	movs	r2, #65	; 0x41
 8002f22:	2124      	movs	r1, #36	; 0x24
 8002f24:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2101      	movs	r1, #1
 8002f32:	438a      	bics	r2, r1
 8002f34:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4934      	ldr	r1, [pc, #208]	; (8003010 <HAL_I2C_Init+0x120>)
 8002f40:	400a      	ands	r2, r1
 8002f42:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689a      	ldr	r2, [r3, #8]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4931      	ldr	r1, [pc, #196]	; (8003014 <HAL_I2C_Init+0x124>)
 8002f50:	400a      	ands	r2, r1
 8002f52:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d108      	bne.n	8002f6e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2180      	movs	r1, #128	; 0x80
 8002f66:	0209      	lsls	r1, r1, #8
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	609a      	str	r2, [r3, #8]
 8002f6c:	e007      	b.n	8002f7e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2184      	movs	r1, #132	; 0x84
 8002f78:	0209      	lsls	r1, r1, #8
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d104      	bne.n	8002f90 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2280      	movs	r2, #128	; 0x80
 8002f8c:	0112      	lsls	r2, r2, #4
 8002f8e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	491f      	ldr	r1, [pc, #124]	; (8003018 <HAL_I2C_Init+0x128>)
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68da      	ldr	r2, [r3, #12]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	491a      	ldr	r1, [pc, #104]	; (8003014 <HAL_I2C_Init+0x124>)
 8002fac:	400a      	ands	r2, r1
 8002fae:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	691a      	ldr	r2, [r3, #16]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	431a      	orrs	r2, r3
 8002fba:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69d9      	ldr	r1, [r3, #28]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a1a      	ldr	r2, [r3, #32]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2241      	movs	r2, #65	; 0x41
 8002ff4:	2120      	movs	r1, #32
 8002ff6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2242      	movs	r2, #66	; 0x42
 8003002:	2100      	movs	r1, #0
 8003004:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	0018      	movs	r0, r3
 800300a:	46bd      	mov	sp, r7
 800300c:	b002      	add	sp, #8
 800300e:	bd80      	pop	{r7, pc}
 8003010:	f0ffffff 	.word	0xf0ffffff
 8003014:	ffff7fff 	.word	0xffff7fff
 8003018:	02008000 	.word	0x02008000

0800301c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800301c:	b590      	push	{r4, r7, lr}
 800301e:	b089      	sub	sp, #36	; 0x24
 8003020:	af02      	add	r7, sp, #8
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	0008      	movs	r0, r1
 8003026:	607a      	str	r2, [r7, #4]
 8003028:	0019      	movs	r1, r3
 800302a:	230a      	movs	r3, #10
 800302c:	18fb      	adds	r3, r7, r3
 800302e:	1c02      	adds	r2, r0, #0
 8003030:	801a      	strh	r2, [r3, #0]
 8003032:	2308      	movs	r3, #8
 8003034:	18fb      	adds	r3, r7, r3
 8003036:	1c0a      	adds	r2, r1, #0
 8003038:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2241      	movs	r2, #65	; 0x41
 800303e:	5c9b      	ldrb	r3, [r3, r2]
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b20      	cmp	r3, #32
 8003044:	d000      	beq.n	8003048 <HAL_I2C_Master_Transmit+0x2c>
 8003046:	e0e7      	b.n	8003218 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2240      	movs	r2, #64	; 0x40
 800304c:	5c9b      	ldrb	r3, [r3, r2]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d101      	bne.n	8003056 <HAL_I2C_Master_Transmit+0x3a>
 8003052:	2302      	movs	r3, #2
 8003054:	e0e1      	b.n	800321a <HAL_I2C_Master_Transmit+0x1fe>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2240      	movs	r2, #64	; 0x40
 800305a:	2101      	movs	r1, #1
 800305c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800305e:	f7fe fdf9 	bl	8001c54 <HAL_GetTick>
 8003062:	0003      	movs	r3, r0
 8003064:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003066:	2380      	movs	r3, #128	; 0x80
 8003068:	0219      	lsls	r1, r3, #8
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	2319      	movs	r3, #25
 8003072:	2201      	movs	r2, #1
 8003074:	f000 fa04 	bl	8003480 <I2C_WaitOnFlagUntilTimeout>
 8003078:	1e03      	subs	r3, r0, #0
 800307a:	d001      	beq.n	8003080 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e0cc      	b.n	800321a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2241      	movs	r2, #65	; 0x41
 8003084:	2121      	movs	r1, #33	; 0x21
 8003086:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2242      	movs	r2, #66	; 0x42
 800308c:	2110      	movs	r1, #16
 800308e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2208      	movs	r2, #8
 80030a0:	18ba      	adds	r2, r7, r2
 80030a2:	8812      	ldrh	r2, [r2, #0]
 80030a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	2bff      	cmp	r3, #255	; 0xff
 80030b4:	d911      	bls.n	80030da <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	22ff      	movs	r2, #255	; 0xff
 80030ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c0:	b2da      	uxtb	r2, r3
 80030c2:	2380      	movs	r3, #128	; 0x80
 80030c4:	045c      	lsls	r4, r3, #17
 80030c6:	230a      	movs	r3, #10
 80030c8:	18fb      	adds	r3, r7, r3
 80030ca:	8819      	ldrh	r1, [r3, #0]
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	4b55      	ldr	r3, [pc, #340]	; (8003224 <HAL_I2C_Master_Transmit+0x208>)
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	0023      	movs	r3, r4
 80030d4:	f000 fb74 	bl	80037c0 <I2C_TransferConfig>
 80030d8:	e075      	b.n	80031c6 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030de:	b29a      	uxth	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	2380      	movs	r3, #128	; 0x80
 80030ec:	049c      	lsls	r4, r3, #18
 80030ee:	230a      	movs	r3, #10
 80030f0:	18fb      	adds	r3, r7, r3
 80030f2:	8819      	ldrh	r1, [r3, #0]
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	4b4b      	ldr	r3, [pc, #300]	; (8003224 <HAL_I2C_Master_Transmit+0x208>)
 80030f8:	9300      	str	r3, [sp, #0]
 80030fa:	0023      	movs	r3, r4
 80030fc:	f000 fb60 	bl	80037c0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003100:	e061      	b.n	80031c6 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	0018      	movs	r0, r3
 800310a:	f000 f9f8 	bl	80034fe <I2C_WaitOnTXISFlagUntilTimeout>
 800310e:	1e03      	subs	r3, r0, #0
 8003110:	d001      	beq.n	8003116 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e081      	b.n	800321a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311a:	781a      	ldrb	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003126:	1c5a      	adds	r2, r3, #1
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003130:	b29b      	uxth	r3, r3
 8003132:	3b01      	subs	r3, #1
 8003134:	b29a      	uxth	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800313e:	3b01      	subs	r3, #1
 8003140:	b29a      	uxth	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800314a:	b29b      	uxth	r3, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	d03a      	beq.n	80031c6 <HAL_I2C_Master_Transmit+0x1aa>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003154:	2b00      	cmp	r3, #0
 8003156:	d136      	bne.n	80031c6 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003158:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	0013      	movs	r3, r2
 8003162:	2200      	movs	r2, #0
 8003164:	2180      	movs	r1, #128	; 0x80
 8003166:	f000 f98b 	bl	8003480 <I2C_WaitOnFlagUntilTimeout>
 800316a:	1e03      	subs	r3, r0, #0
 800316c:	d001      	beq.n	8003172 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e053      	b.n	800321a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003176:	b29b      	uxth	r3, r3
 8003178:	2bff      	cmp	r3, #255	; 0xff
 800317a:	d911      	bls.n	80031a0 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	22ff      	movs	r2, #255	; 0xff
 8003180:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003186:	b2da      	uxtb	r2, r3
 8003188:	2380      	movs	r3, #128	; 0x80
 800318a:	045c      	lsls	r4, r3, #17
 800318c:	230a      	movs	r3, #10
 800318e:	18fb      	adds	r3, r7, r3
 8003190:	8819      	ldrh	r1, [r3, #0]
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	2300      	movs	r3, #0
 8003196:	9300      	str	r3, [sp, #0]
 8003198:	0023      	movs	r3, r4
 800319a:	f000 fb11 	bl	80037c0 <I2C_TransferConfig>
 800319e:	e012      	b.n	80031c6 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ae:	b2da      	uxtb	r2, r3
 80031b0:	2380      	movs	r3, #128	; 0x80
 80031b2:	049c      	lsls	r4, r3, #18
 80031b4:	230a      	movs	r3, #10
 80031b6:	18fb      	adds	r3, r7, r3
 80031b8:	8819      	ldrh	r1, [r3, #0]
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	2300      	movs	r3, #0
 80031be:	9300      	str	r3, [sp, #0]
 80031c0:	0023      	movs	r3, r4
 80031c2:	f000 fafd 	bl	80037c0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d198      	bne.n	8003102 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	0018      	movs	r0, r3
 80031d8:	f000 f9d0 	bl	800357c <I2C_WaitOnSTOPFlagUntilTimeout>
 80031dc:	1e03      	subs	r3, r0, #0
 80031de:	d001      	beq.n	80031e4 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e01a      	b.n	800321a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2220      	movs	r2, #32
 80031ea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	490c      	ldr	r1, [pc, #48]	; (8003228 <HAL_I2C_Master_Transmit+0x20c>)
 80031f8:	400a      	ands	r2, r1
 80031fa:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2241      	movs	r2, #65	; 0x41
 8003200:	2120      	movs	r1, #32
 8003202:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2242      	movs	r2, #66	; 0x42
 8003208:	2100      	movs	r1, #0
 800320a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2240      	movs	r2, #64	; 0x40
 8003210:	2100      	movs	r1, #0
 8003212:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003214:	2300      	movs	r3, #0
 8003216:	e000      	b.n	800321a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003218:	2302      	movs	r3, #2
  }
}
 800321a:	0018      	movs	r0, r3
 800321c:	46bd      	mov	sp, r7
 800321e:	b007      	add	sp, #28
 8003220:	bd90      	pop	{r4, r7, pc}
 8003222:	46c0      	nop			; (mov r8, r8)
 8003224:	80002000 	.word	0x80002000
 8003228:	fe00e800 	.word	0xfe00e800

0800322c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800322c:	b590      	push	{r4, r7, lr}
 800322e:	b089      	sub	sp, #36	; 0x24
 8003230:	af02      	add	r7, sp, #8
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	0008      	movs	r0, r1
 8003236:	607a      	str	r2, [r7, #4]
 8003238:	0019      	movs	r1, r3
 800323a:	230a      	movs	r3, #10
 800323c:	18fb      	adds	r3, r7, r3
 800323e:	1c02      	adds	r2, r0, #0
 8003240:	801a      	strh	r2, [r3, #0]
 8003242:	2308      	movs	r3, #8
 8003244:	18fb      	adds	r3, r7, r3
 8003246:	1c0a      	adds	r2, r1, #0
 8003248:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2241      	movs	r2, #65	; 0x41
 800324e:	5c9b      	ldrb	r3, [r3, r2]
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b20      	cmp	r3, #32
 8003254:	d000      	beq.n	8003258 <HAL_I2C_Master_Receive+0x2c>
 8003256:	e0e8      	b.n	800342a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2240      	movs	r2, #64	; 0x40
 800325c:	5c9b      	ldrb	r3, [r3, r2]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d101      	bne.n	8003266 <HAL_I2C_Master_Receive+0x3a>
 8003262:	2302      	movs	r3, #2
 8003264:	e0e2      	b.n	800342c <HAL_I2C_Master_Receive+0x200>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2240      	movs	r2, #64	; 0x40
 800326a:	2101      	movs	r1, #1
 800326c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800326e:	f7fe fcf1 	bl	8001c54 <HAL_GetTick>
 8003272:	0003      	movs	r3, r0
 8003274:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003276:	2380      	movs	r3, #128	; 0x80
 8003278:	0219      	lsls	r1, r3, #8
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	2319      	movs	r3, #25
 8003282:	2201      	movs	r2, #1
 8003284:	f000 f8fc 	bl	8003480 <I2C_WaitOnFlagUntilTimeout>
 8003288:	1e03      	subs	r3, r0, #0
 800328a:	d001      	beq.n	8003290 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e0cd      	b.n	800342c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2241      	movs	r2, #65	; 0x41
 8003294:	2122      	movs	r1, #34	; 0x22
 8003296:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2242      	movs	r2, #66	; 0x42
 800329c:	2110      	movs	r1, #16
 800329e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2208      	movs	r2, #8
 80032b0:	18ba      	adds	r2, r7, r2
 80032b2:	8812      	ldrh	r2, [r2, #0]
 80032b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	2bff      	cmp	r3, #255	; 0xff
 80032c4:	d911      	bls.n	80032ea <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	22ff      	movs	r2, #255	; 0xff
 80032ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d0:	b2da      	uxtb	r2, r3
 80032d2:	2380      	movs	r3, #128	; 0x80
 80032d4:	045c      	lsls	r4, r3, #17
 80032d6:	230a      	movs	r3, #10
 80032d8:	18fb      	adds	r3, r7, r3
 80032da:	8819      	ldrh	r1, [r3, #0]
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	4b55      	ldr	r3, [pc, #340]	; (8003434 <HAL_I2C_Master_Receive+0x208>)
 80032e0:	9300      	str	r3, [sp, #0]
 80032e2:	0023      	movs	r3, r4
 80032e4:	f000 fa6c 	bl	80037c0 <I2C_TransferConfig>
 80032e8:	e076      	b.n	80033d8 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	2380      	movs	r3, #128	; 0x80
 80032fc:	049c      	lsls	r4, r3, #18
 80032fe:	230a      	movs	r3, #10
 8003300:	18fb      	adds	r3, r7, r3
 8003302:	8819      	ldrh	r1, [r3, #0]
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	4b4b      	ldr	r3, [pc, #300]	; (8003434 <HAL_I2C_Master_Receive+0x208>)
 8003308:	9300      	str	r3, [sp, #0]
 800330a:	0023      	movs	r3, r4
 800330c:	f000 fa58 	bl	80037c0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003310:	e062      	b.n	80033d8 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	0018      	movs	r0, r3
 800331a:	f000 f96b 	bl	80035f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800331e:	1e03      	subs	r3, r0, #0
 8003320:	d001      	beq.n	8003326 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e082      	b.n	800342c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003330:	b2d2      	uxtb	r2, r2
 8003332:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003338:	1c5a      	adds	r2, r3, #1
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003342:	3b01      	subs	r3, #1
 8003344:	b29a      	uxth	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800334e:	b29b      	uxth	r3, r3
 8003350:	3b01      	subs	r3, #1
 8003352:	b29a      	uxth	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800335c:	b29b      	uxth	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d03a      	beq.n	80033d8 <HAL_I2C_Master_Receive+0x1ac>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003366:	2b00      	cmp	r3, #0
 8003368:	d136      	bne.n	80033d8 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800336a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	9300      	str	r3, [sp, #0]
 8003372:	0013      	movs	r3, r2
 8003374:	2200      	movs	r2, #0
 8003376:	2180      	movs	r1, #128	; 0x80
 8003378:	f000 f882 	bl	8003480 <I2C_WaitOnFlagUntilTimeout>
 800337c:	1e03      	subs	r3, r0, #0
 800337e:	d001      	beq.n	8003384 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e053      	b.n	800342c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003388:	b29b      	uxth	r3, r3
 800338a:	2bff      	cmp	r3, #255	; 0xff
 800338c:	d911      	bls.n	80033b2 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	22ff      	movs	r2, #255	; 0xff
 8003392:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003398:	b2da      	uxtb	r2, r3
 800339a:	2380      	movs	r3, #128	; 0x80
 800339c:	045c      	lsls	r4, r3, #17
 800339e:	230a      	movs	r3, #10
 80033a0:	18fb      	adds	r3, r7, r3
 80033a2:	8819      	ldrh	r1, [r3, #0]
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	2300      	movs	r3, #0
 80033a8:	9300      	str	r3, [sp, #0]
 80033aa:	0023      	movs	r3, r4
 80033ac:	f000 fa08 	bl	80037c0 <I2C_TransferConfig>
 80033b0:	e012      	b.n	80033d8 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c0:	b2da      	uxtb	r2, r3
 80033c2:	2380      	movs	r3, #128	; 0x80
 80033c4:	049c      	lsls	r4, r3, #18
 80033c6:	230a      	movs	r3, #10
 80033c8:	18fb      	adds	r3, r7, r3
 80033ca:	8819      	ldrh	r1, [r3, #0]
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	2300      	movs	r3, #0
 80033d0:	9300      	str	r3, [sp, #0]
 80033d2:	0023      	movs	r3, r4
 80033d4:	f000 f9f4 	bl	80037c0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033dc:	b29b      	uxth	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d197      	bne.n	8003312 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	0018      	movs	r0, r3
 80033ea:	f000 f8c7 	bl	800357c <I2C_WaitOnSTOPFlagUntilTimeout>
 80033ee:	1e03      	subs	r3, r0, #0
 80033f0:	d001      	beq.n	80033f6 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e01a      	b.n	800342c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2220      	movs	r2, #32
 80033fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	685a      	ldr	r2, [r3, #4]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	490b      	ldr	r1, [pc, #44]	; (8003438 <HAL_I2C_Master_Receive+0x20c>)
 800340a:	400a      	ands	r2, r1
 800340c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2241      	movs	r2, #65	; 0x41
 8003412:	2120      	movs	r1, #32
 8003414:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2242      	movs	r2, #66	; 0x42
 800341a:	2100      	movs	r1, #0
 800341c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2240      	movs	r2, #64	; 0x40
 8003422:	2100      	movs	r1, #0
 8003424:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003426:	2300      	movs	r3, #0
 8003428:	e000      	b.n	800342c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800342a:	2302      	movs	r3, #2
  }
}
 800342c:	0018      	movs	r0, r3
 800342e:	46bd      	mov	sp, r7
 8003430:	b007      	add	sp, #28
 8003432:	bd90      	pop	{r4, r7, pc}
 8003434:	80002400 	.word	0x80002400
 8003438:	fe00e800 	.word	0xfe00e800

0800343c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	2202      	movs	r2, #2
 800344c:	4013      	ands	r3, r2
 800344e:	2b02      	cmp	r3, #2
 8003450:	d103      	bne.n	800345a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2200      	movs	r2, #0
 8003458:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	2201      	movs	r2, #1
 8003462:	4013      	ands	r3, r2
 8003464:	2b01      	cmp	r3, #1
 8003466:	d007      	beq.n	8003478 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	699a      	ldr	r2, [r3, #24]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2101      	movs	r1, #1
 8003474:	430a      	orrs	r2, r1
 8003476:	619a      	str	r2, [r3, #24]
  }
}
 8003478:	46c0      	nop			; (mov r8, r8)
 800347a:	46bd      	mov	sp, r7
 800347c:	b002      	add	sp, #8
 800347e:	bd80      	pop	{r7, pc}

08003480 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	603b      	str	r3, [r7, #0]
 800348c:	1dfb      	adds	r3, r7, #7
 800348e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003490:	e021      	b.n	80034d6 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	3301      	adds	r3, #1
 8003496:	d01e      	beq.n	80034d6 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003498:	f7fe fbdc 	bl	8001c54 <HAL_GetTick>
 800349c:	0002      	movs	r2, r0
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	683a      	ldr	r2, [r7, #0]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d302      	bcc.n	80034ae <I2C_WaitOnFlagUntilTimeout+0x2e>
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d113      	bne.n	80034d6 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b2:	2220      	movs	r2, #32
 80034b4:	431a      	orrs	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2241      	movs	r2, #65	; 0x41
 80034be:	2120      	movs	r1, #32
 80034c0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2242      	movs	r2, #66	; 0x42
 80034c6:	2100      	movs	r1, #0
 80034c8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2240      	movs	r2, #64	; 0x40
 80034ce:	2100      	movs	r1, #0
 80034d0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e00f      	b.n	80034f6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	68ba      	ldr	r2, [r7, #8]
 80034de:	4013      	ands	r3, r2
 80034e0:	68ba      	ldr	r2, [r7, #8]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	425a      	negs	r2, r3
 80034e6:	4153      	adcs	r3, r2
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	001a      	movs	r2, r3
 80034ec:	1dfb      	adds	r3, r7, #7
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d0ce      	beq.n	8003492 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	0018      	movs	r0, r3
 80034f8:	46bd      	mov	sp, r7
 80034fa:	b004      	add	sp, #16
 80034fc:	bd80      	pop	{r7, pc}

080034fe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b084      	sub	sp, #16
 8003502:	af00      	add	r7, sp, #0
 8003504:	60f8      	str	r0, [r7, #12]
 8003506:	60b9      	str	r1, [r7, #8]
 8003508:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800350a:	e02b      	b.n	8003564 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	68b9      	ldr	r1, [r7, #8]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	0018      	movs	r0, r3
 8003514:	f000 f8da 	bl	80036cc <I2C_IsAcknowledgeFailed>
 8003518:	1e03      	subs	r3, r0, #0
 800351a:	d001      	beq.n	8003520 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e029      	b.n	8003574 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	3301      	adds	r3, #1
 8003524:	d01e      	beq.n	8003564 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003526:	f7fe fb95 	bl	8001c54 <HAL_GetTick>
 800352a:	0002      	movs	r2, r0
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	68ba      	ldr	r2, [r7, #8]
 8003532:	429a      	cmp	r2, r3
 8003534:	d302      	bcc.n	800353c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d113      	bne.n	8003564 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003540:	2220      	movs	r2, #32
 8003542:	431a      	orrs	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2241      	movs	r2, #65	; 0x41
 800354c:	2120      	movs	r1, #32
 800354e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2242      	movs	r2, #66	; 0x42
 8003554:	2100      	movs	r1, #0
 8003556:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2240      	movs	r2, #64	; 0x40
 800355c:	2100      	movs	r1, #0
 800355e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e007      	b.n	8003574 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	2202      	movs	r2, #2
 800356c:	4013      	ands	r3, r2
 800356e:	2b02      	cmp	r3, #2
 8003570:	d1cc      	bne.n	800350c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	0018      	movs	r0, r3
 8003576:	46bd      	mov	sp, r7
 8003578:	b004      	add	sp, #16
 800357a:	bd80      	pop	{r7, pc}

0800357c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003588:	e028      	b.n	80035dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	68b9      	ldr	r1, [r7, #8]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	0018      	movs	r0, r3
 8003592:	f000 f89b 	bl	80036cc <I2C_IsAcknowledgeFailed>
 8003596:	1e03      	subs	r3, r0, #0
 8003598:	d001      	beq.n	800359e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e026      	b.n	80035ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800359e:	f7fe fb59 	bl	8001c54 <HAL_GetTick>
 80035a2:	0002      	movs	r2, r0
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	68ba      	ldr	r2, [r7, #8]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d302      	bcc.n	80035b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d113      	bne.n	80035dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b8:	2220      	movs	r2, #32
 80035ba:	431a      	orrs	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2241      	movs	r2, #65	; 0x41
 80035c4:	2120      	movs	r1, #32
 80035c6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2242      	movs	r2, #66	; 0x42
 80035cc:	2100      	movs	r1, #0
 80035ce:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2240      	movs	r2, #64	; 0x40
 80035d4:	2100      	movs	r1, #0
 80035d6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e007      	b.n	80035ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	2220      	movs	r2, #32
 80035e4:	4013      	ands	r3, r2
 80035e6:	2b20      	cmp	r3, #32
 80035e8:	d1cf      	bne.n	800358a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	0018      	movs	r0, r3
 80035ee:	46bd      	mov	sp, r7
 80035f0:	b004      	add	sp, #16
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003600:	e055      	b.n	80036ae <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	68b9      	ldr	r1, [r7, #8]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	0018      	movs	r0, r3
 800360a:	f000 f85f 	bl	80036cc <I2C_IsAcknowledgeFailed>
 800360e:	1e03      	subs	r3, r0, #0
 8003610:	d001      	beq.n	8003616 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e053      	b.n	80036be <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	2220      	movs	r2, #32
 800361e:	4013      	ands	r3, r2
 8003620:	2b20      	cmp	r3, #32
 8003622:	d129      	bne.n	8003678 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	2204      	movs	r2, #4
 800362c:	4013      	ands	r3, r2
 800362e:	2b04      	cmp	r3, #4
 8003630:	d105      	bne.n	800363e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800363a:	2300      	movs	r3, #0
 800363c:	e03f      	b.n	80036be <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2220      	movs	r2, #32
 8003644:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	491d      	ldr	r1, [pc, #116]	; (80036c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003652:	400a      	ands	r2, r1
 8003654:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2241      	movs	r2, #65	; 0x41
 8003660:	2120      	movs	r1, #32
 8003662:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2242      	movs	r2, #66	; 0x42
 8003668:	2100      	movs	r1, #0
 800366a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2240      	movs	r2, #64	; 0x40
 8003670:	2100      	movs	r1, #0
 8003672:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e022      	b.n	80036be <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003678:	f7fe faec 	bl	8001c54 <HAL_GetTick>
 800367c:	0002      	movs	r2, r0
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	68ba      	ldr	r2, [r7, #8]
 8003684:	429a      	cmp	r2, r3
 8003686:	d302      	bcc.n	800368e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10f      	bne.n	80036ae <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003692:	2220      	movs	r2, #32
 8003694:	431a      	orrs	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2241      	movs	r2, #65	; 0x41
 800369e:	2120      	movs	r1, #32
 80036a0:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2240      	movs	r2, #64	; 0x40
 80036a6:	2100      	movs	r1, #0
 80036a8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e007      	b.n	80036be <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	2204      	movs	r2, #4
 80036b6:	4013      	ands	r3, r2
 80036b8:	2b04      	cmp	r3, #4
 80036ba:	d1a2      	bne.n	8003602 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	0018      	movs	r0, r3
 80036c0:	46bd      	mov	sp, r7
 80036c2:	b004      	add	sp, #16
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	46c0      	nop			; (mov r8, r8)
 80036c8:	fe00e800 	.word	0xfe00e800

080036cc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	2210      	movs	r2, #16
 80036e0:	4013      	ands	r3, r2
 80036e2:	2b10      	cmp	r3, #16
 80036e4:	d164      	bne.n	80037b0 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	685a      	ldr	r2, [r3, #4]
 80036ec:	2380      	movs	r3, #128	; 0x80
 80036ee:	049b      	lsls	r3, r3, #18
 80036f0:	401a      	ands	r2, r3
 80036f2:	2380      	movs	r3, #128	; 0x80
 80036f4:	049b      	lsls	r3, r3, #18
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d02b      	beq.n	8003752 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2180      	movs	r1, #128	; 0x80
 8003706:	01c9      	lsls	r1, r1, #7
 8003708:	430a      	orrs	r2, r1
 800370a:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800370c:	e021      	b.n	8003752 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	3301      	adds	r3, #1
 8003712:	d01e      	beq.n	8003752 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003714:	f7fe fa9e 	bl	8001c54 <HAL_GetTick>
 8003718:	0002      	movs	r2, r0
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	429a      	cmp	r2, r3
 8003722:	d302      	bcc.n	800372a <I2C_IsAcknowledgeFailed+0x5e>
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d113      	bne.n	8003752 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372e:	2220      	movs	r2, #32
 8003730:	431a      	orrs	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2241      	movs	r2, #65	; 0x41
 800373a:	2120      	movs	r1, #32
 800373c:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2242      	movs	r2, #66	; 0x42
 8003742:	2100      	movs	r1, #0
 8003744:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2240      	movs	r2, #64	; 0x40
 800374a:	2100      	movs	r1, #0
 800374c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e02f      	b.n	80037b2 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	2220      	movs	r2, #32
 800375a:	4013      	ands	r3, r2
 800375c:	2b20      	cmp	r3, #32
 800375e:	d1d6      	bne.n	800370e <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2210      	movs	r2, #16
 8003766:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2220      	movs	r2, #32
 800376e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	0018      	movs	r0, r3
 8003774:	f7ff fe62 	bl	800343c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	490e      	ldr	r1, [pc, #56]	; (80037bc <I2C_IsAcknowledgeFailed+0xf0>)
 8003784:	400a      	ands	r2, r1
 8003786:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378c:	2204      	movs	r2, #4
 800378e:	431a      	orrs	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2241      	movs	r2, #65	; 0x41
 8003798:	2120      	movs	r1, #32
 800379a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2242      	movs	r2, #66	; 0x42
 80037a0:	2100      	movs	r1, #0
 80037a2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2240      	movs	r2, #64	; 0x40
 80037a8:	2100      	movs	r1, #0
 80037aa:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e000      	b.n	80037b2 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	0018      	movs	r0, r3
 80037b4:	46bd      	mov	sp, r7
 80037b6:	b004      	add	sp, #16
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	46c0      	nop			; (mov r8, r8)
 80037bc:	fe00e800 	.word	0xfe00e800

080037c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80037c0:	b590      	push	{r4, r7, lr}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	0008      	movs	r0, r1
 80037ca:	0011      	movs	r1, r2
 80037cc:	607b      	str	r3, [r7, #4]
 80037ce:	240a      	movs	r4, #10
 80037d0:	193b      	adds	r3, r7, r4
 80037d2:	1c02      	adds	r2, r0, #0
 80037d4:	801a      	strh	r2, [r3, #0]
 80037d6:	2009      	movs	r0, #9
 80037d8:	183b      	adds	r3, r7, r0
 80037da:	1c0a      	adds	r2, r1, #0
 80037dc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	6a3a      	ldr	r2, [r7, #32]
 80037e6:	0d51      	lsrs	r1, r2, #21
 80037e8:	2280      	movs	r2, #128	; 0x80
 80037ea:	00d2      	lsls	r2, r2, #3
 80037ec:	400a      	ands	r2, r1
 80037ee:	490e      	ldr	r1, [pc, #56]	; (8003828 <I2C_TransferConfig+0x68>)
 80037f0:	430a      	orrs	r2, r1
 80037f2:	43d2      	mvns	r2, r2
 80037f4:	401a      	ands	r2, r3
 80037f6:	0011      	movs	r1, r2
 80037f8:	193b      	adds	r3, r7, r4
 80037fa:	881b      	ldrh	r3, [r3, #0]
 80037fc:	059b      	lsls	r3, r3, #22
 80037fe:	0d9a      	lsrs	r2, r3, #22
 8003800:	183b      	adds	r3, r7, r0
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	0418      	lsls	r0, r3, #16
 8003806:	23ff      	movs	r3, #255	; 0xff
 8003808:	041b      	lsls	r3, r3, #16
 800380a:	4003      	ands	r3, r0
 800380c:	431a      	orrs	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	431a      	orrs	r2, r3
 8003812:	6a3b      	ldr	r3, [r7, #32]
 8003814:	431a      	orrs	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800381e:	46c0      	nop			; (mov r8, r8)
 8003820:	46bd      	mov	sp, r7
 8003822:	b005      	add	sp, #20
 8003824:	bd90      	pop	{r4, r7, pc}
 8003826:	46c0      	nop			; (mov r8, r8)
 8003828:	03ff63ff 	.word	0x03ff63ff

0800382c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2241      	movs	r2, #65	; 0x41
 800383a:	5c9b      	ldrb	r3, [r3, r2]
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b20      	cmp	r3, #32
 8003840:	d138      	bne.n	80038b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2240      	movs	r2, #64	; 0x40
 8003846:	5c9b      	ldrb	r3, [r3, r2]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d101      	bne.n	8003850 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800384c:	2302      	movs	r3, #2
 800384e:	e032      	b.n	80038b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2240      	movs	r2, #64	; 0x40
 8003854:	2101      	movs	r1, #1
 8003856:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2241      	movs	r2, #65	; 0x41
 800385c:	2124      	movs	r1, #36	; 0x24
 800385e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2101      	movs	r1, #1
 800386c:	438a      	bics	r2, r1
 800386e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4911      	ldr	r1, [pc, #68]	; (80038c0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800387c:	400a      	ands	r2, r1
 800387e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6819      	ldr	r1, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	430a      	orrs	r2, r1
 800388e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2101      	movs	r1, #1
 800389c:	430a      	orrs	r2, r1
 800389e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2241      	movs	r2, #65	; 0x41
 80038a4:	2120      	movs	r1, #32
 80038a6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2240      	movs	r2, #64	; 0x40
 80038ac:	2100      	movs	r1, #0
 80038ae:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80038b0:	2300      	movs	r3, #0
 80038b2:	e000      	b.n	80038b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038b4:	2302      	movs	r3, #2
  }
}
 80038b6:	0018      	movs	r0, r3
 80038b8:	46bd      	mov	sp, r7
 80038ba:	b002      	add	sp, #8
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	46c0      	nop			; (mov r8, r8)
 80038c0:	ffffefff 	.word	0xffffefff

080038c4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2241      	movs	r2, #65	; 0x41
 80038d2:	5c9b      	ldrb	r3, [r3, r2]
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b20      	cmp	r3, #32
 80038d8:	d139      	bne.n	800394e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2240      	movs	r2, #64	; 0x40
 80038de:	5c9b      	ldrb	r3, [r3, r2]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d101      	bne.n	80038e8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038e4:	2302      	movs	r3, #2
 80038e6:	e033      	b.n	8003950 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2240      	movs	r2, #64	; 0x40
 80038ec:	2101      	movs	r1, #1
 80038ee:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2241      	movs	r2, #65	; 0x41
 80038f4:	2124      	movs	r1, #36	; 0x24
 80038f6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2101      	movs	r1, #1
 8003904:	438a      	bics	r2, r1
 8003906:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	4a11      	ldr	r2, [pc, #68]	; (8003958 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003914:	4013      	ands	r3, r2
 8003916:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	021b      	lsls	r3, r3, #8
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	4313      	orrs	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2101      	movs	r1, #1
 8003936:	430a      	orrs	r2, r1
 8003938:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2241      	movs	r2, #65	; 0x41
 800393e:	2120      	movs	r1, #32
 8003940:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2240      	movs	r2, #64	; 0x40
 8003946:	2100      	movs	r1, #0
 8003948:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800394a:	2300      	movs	r3, #0
 800394c:	e000      	b.n	8003950 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800394e:	2302      	movs	r3, #2
  }
}
 8003950:	0018      	movs	r0, r3
 8003952:	46bd      	mov	sp, r7
 8003954:	b004      	add	sp, #16
 8003956:	bd80      	pop	{r7, pc}
 8003958:	fffff0ff 	.word	0xfffff0ff

0800395c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b088      	sub	sp, #32
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e301      	b.n	8003f72 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2201      	movs	r2, #1
 8003974:	4013      	ands	r3, r2
 8003976:	d100      	bne.n	800397a <HAL_RCC_OscConfig+0x1e>
 8003978:	e08d      	b.n	8003a96 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800397a:	4bc3      	ldr	r3, [pc, #780]	; (8003c88 <HAL_RCC_OscConfig+0x32c>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	220c      	movs	r2, #12
 8003980:	4013      	ands	r3, r2
 8003982:	2b04      	cmp	r3, #4
 8003984:	d00e      	beq.n	80039a4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003986:	4bc0      	ldr	r3, [pc, #768]	; (8003c88 <HAL_RCC_OscConfig+0x32c>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	220c      	movs	r2, #12
 800398c:	4013      	ands	r3, r2
 800398e:	2b08      	cmp	r3, #8
 8003990:	d116      	bne.n	80039c0 <HAL_RCC_OscConfig+0x64>
 8003992:	4bbd      	ldr	r3, [pc, #756]	; (8003c88 <HAL_RCC_OscConfig+0x32c>)
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	2380      	movs	r3, #128	; 0x80
 8003998:	025b      	lsls	r3, r3, #9
 800399a:	401a      	ands	r2, r3
 800399c:	2380      	movs	r3, #128	; 0x80
 800399e:	025b      	lsls	r3, r3, #9
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d10d      	bne.n	80039c0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039a4:	4bb8      	ldr	r3, [pc, #736]	; (8003c88 <HAL_RCC_OscConfig+0x32c>)
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	2380      	movs	r3, #128	; 0x80
 80039aa:	029b      	lsls	r3, r3, #10
 80039ac:	4013      	ands	r3, r2
 80039ae:	d100      	bne.n	80039b2 <HAL_RCC_OscConfig+0x56>
 80039b0:	e070      	b.n	8003a94 <HAL_RCC_OscConfig+0x138>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d000      	beq.n	80039bc <HAL_RCC_OscConfig+0x60>
 80039ba:	e06b      	b.n	8003a94 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e2d8      	b.n	8003f72 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d107      	bne.n	80039d8 <HAL_RCC_OscConfig+0x7c>
 80039c8:	4baf      	ldr	r3, [pc, #700]	; (8003c88 <HAL_RCC_OscConfig+0x32c>)
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	4bae      	ldr	r3, [pc, #696]	; (8003c88 <HAL_RCC_OscConfig+0x32c>)
 80039ce:	2180      	movs	r1, #128	; 0x80
 80039d0:	0249      	lsls	r1, r1, #9
 80039d2:	430a      	orrs	r2, r1
 80039d4:	601a      	str	r2, [r3, #0]
 80039d6:	e02f      	b.n	8003a38 <HAL_RCC_OscConfig+0xdc>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10c      	bne.n	80039fa <HAL_RCC_OscConfig+0x9e>
 80039e0:	4ba9      	ldr	r3, [pc, #676]	; (8003c88 <HAL_RCC_OscConfig+0x32c>)
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	4ba8      	ldr	r3, [pc, #672]	; (8003c88 <HAL_RCC_OscConfig+0x32c>)
 80039e6:	49a9      	ldr	r1, [pc, #676]	; (8003c8c <HAL_RCC_OscConfig+0x330>)
 80039e8:	400a      	ands	r2, r1
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	4ba6      	ldr	r3, [pc, #664]	; (8003c88 <HAL_RCC_OscConfig+0x32c>)
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	4ba5      	ldr	r3, [pc, #660]	; (8003c88 <HAL_RCC_OscConfig+0x32c>)
 80039f2:	49a7      	ldr	r1, [pc, #668]	; (8003c90 <HAL_RCC_OscConfig+0x334>)
 80039f4:	400a      	ands	r2, r1
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	e01e      	b.n	8003a38 <HAL_RCC_OscConfig+0xdc>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	2b05      	cmp	r3, #5
 8003a00:	d10e      	bne.n	8003a20 <HAL_RCC_OscConfig+0xc4>
 8003a02:	4ba1      	ldr	r3, [pc, #644]	; (8003c88 <HAL_RCC_OscConfig+0x32c>)
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	4ba0      	ldr	r3, [pc, #640]	; (8003c88 <HAL_RCC_OscConfig+0x32c>)
 8003a08:	2180      	movs	r1, #128	; 0x80
 8003a0a:	02c9      	lsls	r1, r1, #11
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	601a      	str	r2, [r3, #0]
 8003a10:	4b9d      	ldr	r3, [pc, #628]	; (8003c88 <HAL_RCC_OscConfig+0x32c>)
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	4b9c      	ldr	r3, [pc, #624]	; (8003c88 <HAL_RCC_OscConfig+0x32c>)
 8003a16:	2180      	movs	r1, #128	; 0x80
 8003a18:	0249      	lsls	r1, r1, #9
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	601a      	str	r2, [r3, #0]
 8003a1e:	e00b      	b.n	8003a38 <HAL_RCC_OscConfig+0xdc>
 8003a20:	4b99      	ldr	r3, [pc, #612]	; (8003c88 <HAL_RCC_OscConfig+0x32c>)
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	4b98      	ldr	r3, [pc, #608]	; (8003c88 <HAL_RCC_OscConfig+0x32c>)
 8003a26:	4999      	ldr	r1, [pc, #612]	; (8003c8c <HAL_RCC_OscConfig+0x330>)
 8003a28:	400a      	ands	r2, r1
 8003a2a:	601a      	str	r2, [r3, #0]
 8003a2c:	4b96      	ldr	r3, [pc, #600]	; (8003c88 <HAL_RCC_OscConfig+0x32c>)
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	4b95      	ldr	r3, [pc, #596]	; (8003c88 <HAL_RCC_OscConfig+0x32c>)
 8003a32:	4997      	ldr	r1, [pc, #604]	; (8003c90 <HAL_RCC_OscConfig+0x334>)
 8003a34:	400a      	ands	r2, r1
 8003a36:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d014      	beq.n	8003a6a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a40:	f7fe f908 	bl	8001c54 <HAL_GetTick>
 8003a44:	0003      	movs	r3, r0
 8003a46:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a48:	e008      	b.n	8003a5c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a4a:	f7fe f903 	bl	8001c54 <HAL_GetTick>
 8003a4e:	0002      	movs	r2, r0
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b64      	cmp	r3, #100	; 0x64
 8003a56:	d901      	bls.n	8003a5c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e28a      	b.n	8003f72 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a5c:	4b8a      	ldr	r3, [pc, #552]	; (8003c88 <HAL_RCC_OscConfig+0x32c>)
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	2380      	movs	r3, #128	; 0x80
 8003a62:	029b      	lsls	r3, r3, #10
 8003a64:	4013      	ands	r3, r2
 8003a66:	d0f0      	beq.n	8003a4a <HAL_RCC_OscConfig+0xee>
 8003a68:	e015      	b.n	8003a96 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a6a:	f7fe f8f3 	bl	8001c54 <HAL_GetTick>
 8003a6e:	0003      	movs	r3, r0
 8003a70:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a74:	f7fe f8ee 	bl	8001c54 <HAL_GetTick>
 8003a78:	0002      	movs	r2, r0
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b64      	cmp	r3, #100	; 0x64
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e275      	b.n	8003f72 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a86:	4b80      	ldr	r3, [pc, #512]	; (8003c88 <HAL_RCC_OscConfig+0x32c>)
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	2380      	movs	r3, #128	; 0x80
 8003a8c:	029b      	lsls	r3, r3, #10
 8003a8e:	4013      	ands	r3, r2
 8003a90:	d1f0      	bne.n	8003a74 <HAL_RCC_OscConfig+0x118>
 8003a92:	e000      	b.n	8003a96 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a94:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	d100      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x146>
 8003aa0:	e069      	b.n	8003b76 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003aa2:	4b79      	ldr	r3, [pc, #484]	; (8003c88 <HAL_RCC_OscConfig+0x32c>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	220c      	movs	r2, #12
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	d00b      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003aac:	4b76      	ldr	r3, [pc, #472]	; (8003c88 <HAL_RCC_OscConfig+0x32c>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	220c      	movs	r2, #12
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	2b08      	cmp	r3, #8
 8003ab6:	d11c      	bne.n	8003af2 <HAL_RCC_OscConfig+0x196>
 8003ab8:	4b73      	ldr	r3, [pc, #460]	; (8003c88 <HAL_RCC_OscConfig+0x32c>)
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	2380      	movs	r3, #128	; 0x80
 8003abe:	025b      	lsls	r3, r3, #9
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	d116      	bne.n	8003af2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ac4:	4b70      	ldr	r3, [pc, #448]	; (8003c88 <HAL_RCC_OscConfig+0x32c>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2202      	movs	r2, #2
 8003aca:	4013      	ands	r3, r2
 8003acc:	d005      	beq.n	8003ada <HAL_RCC_OscConfig+0x17e>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d001      	beq.n	8003ada <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e24b      	b.n	8003f72 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ada:	4b6b      	ldr	r3, [pc, #428]	; (8003c88 <HAL_RCC_OscConfig+0x32c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	22f8      	movs	r2, #248	; 0xf8
 8003ae0:	4393      	bics	r3, r2
 8003ae2:	0019      	movs	r1, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	00da      	lsls	r2, r3, #3
 8003aea:	4b67      	ldr	r3, [pc, #412]	; (8003c88 <HAL_RCC_OscConfig+0x32c>)
 8003aec:	430a      	orrs	r2, r1
 8003aee:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003af0:	e041      	b.n	8003b76 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d024      	beq.n	8003b44 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003afa:	4b63      	ldr	r3, [pc, #396]	; (8003c88 <HAL_RCC_OscConfig+0x32c>)
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	4b62      	ldr	r3, [pc, #392]	; (8003c88 <HAL_RCC_OscConfig+0x32c>)
 8003b00:	2101      	movs	r1, #1
 8003b02:	430a      	orrs	r2, r1
 8003b04:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b06:	f7fe f8a5 	bl	8001c54 <HAL_GetTick>
 8003b0a:	0003      	movs	r3, r0
 8003b0c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b10:	f7fe f8a0 	bl	8001c54 <HAL_GetTick>
 8003b14:	0002      	movs	r2, r0
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e227      	b.n	8003f72 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b22:	4b59      	ldr	r3, [pc, #356]	; (8003c88 <HAL_RCC_OscConfig+0x32c>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2202      	movs	r2, #2
 8003b28:	4013      	ands	r3, r2
 8003b2a:	d0f1      	beq.n	8003b10 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b2c:	4b56      	ldr	r3, [pc, #344]	; (8003c88 <HAL_RCC_OscConfig+0x32c>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	22f8      	movs	r2, #248	; 0xf8
 8003b32:	4393      	bics	r3, r2
 8003b34:	0019      	movs	r1, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	00da      	lsls	r2, r3, #3
 8003b3c:	4b52      	ldr	r3, [pc, #328]	; (8003c88 <HAL_RCC_OscConfig+0x32c>)
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	601a      	str	r2, [r3, #0]
 8003b42:	e018      	b.n	8003b76 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b44:	4b50      	ldr	r3, [pc, #320]	; (8003c88 <HAL_RCC_OscConfig+0x32c>)
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	4b4f      	ldr	r3, [pc, #316]	; (8003c88 <HAL_RCC_OscConfig+0x32c>)
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	438a      	bics	r2, r1
 8003b4e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b50:	f7fe f880 	bl	8001c54 <HAL_GetTick>
 8003b54:	0003      	movs	r3, r0
 8003b56:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b58:	e008      	b.n	8003b6c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b5a:	f7fe f87b 	bl	8001c54 <HAL_GetTick>
 8003b5e:	0002      	movs	r2, r0
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d901      	bls.n	8003b6c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e202      	b.n	8003f72 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b6c:	4b46      	ldr	r3, [pc, #280]	; (8003c88 <HAL_RCC_OscConfig+0x32c>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2202      	movs	r2, #2
 8003b72:	4013      	ands	r3, r2
 8003b74:	d1f1      	bne.n	8003b5a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2208      	movs	r2, #8
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	d036      	beq.n	8003bee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	69db      	ldr	r3, [r3, #28]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d019      	beq.n	8003bbc <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b88:	4b3f      	ldr	r3, [pc, #252]	; (8003c88 <HAL_RCC_OscConfig+0x32c>)
 8003b8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b8c:	4b3e      	ldr	r3, [pc, #248]	; (8003c88 <HAL_RCC_OscConfig+0x32c>)
 8003b8e:	2101      	movs	r1, #1
 8003b90:	430a      	orrs	r2, r1
 8003b92:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b94:	f7fe f85e 	bl	8001c54 <HAL_GetTick>
 8003b98:	0003      	movs	r3, r0
 8003b9a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b9c:	e008      	b.n	8003bb0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b9e:	f7fe f859 	bl	8001c54 <HAL_GetTick>
 8003ba2:	0002      	movs	r2, r0
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d901      	bls.n	8003bb0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e1e0      	b.n	8003f72 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bb0:	4b35      	ldr	r3, [pc, #212]	; (8003c88 <HAL_RCC_OscConfig+0x32c>)
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb4:	2202      	movs	r2, #2
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	d0f1      	beq.n	8003b9e <HAL_RCC_OscConfig+0x242>
 8003bba:	e018      	b.n	8003bee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bbc:	4b32      	ldr	r3, [pc, #200]	; (8003c88 <HAL_RCC_OscConfig+0x32c>)
 8003bbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bc0:	4b31      	ldr	r3, [pc, #196]	; (8003c88 <HAL_RCC_OscConfig+0x32c>)
 8003bc2:	2101      	movs	r1, #1
 8003bc4:	438a      	bics	r2, r1
 8003bc6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bc8:	f7fe f844 	bl	8001c54 <HAL_GetTick>
 8003bcc:	0003      	movs	r3, r0
 8003bce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bd0:	e008      	b.n	8003be4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bd2:	f7fe f83f 	bl	8001c54 <HAL_GetTick>
 8003bd6:	0002      	movs	r2, r0
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d901      	bls.n	8003be4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e1c6      	b.n	8003f72 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003be4:	4b28      	ldr	r3, [pc, #160]	; (8003c88 <HAL_RCC_OscConfig+0x32c>)
 8003be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be8:	2202      	movs	r2, #2
 8003bea:	4013      	ands	r3, r2
 8003bec:	d1f1      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2204      	movs	r2, #4
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	d100      	bne.n	8003bfa <HAL_RCC_OscConfig+0x29e>
 8003bf8:	e0b4      	b.n	8003d64 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bfa:	201f      	movs	r0, #31
 8003bfc:	183b      	adds	r3, r7, r0
 8003bfe:	2200      	movs	r2, #0
 8003c00:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c02:	4b21      	ldr	r3, [pc, #132]	; (8003c88 <HAL_RCC_OscConfig+0x32c>)
 8003c04:	69da      	ldr	r2, [r3, #28]
 8003c06:	2380      	movs	r3, #128	; 0x80
 8003c08:	055b      	lsls	r3, r3, #21
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	d110      	bne.n	8003c30 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c0e:	4b1e      	ldr	r3, [pc, #120]	; (8003c88 <HAL_RCC_OscConfig+0x32c>)
 8003c10:	69da      	ldr	r2, [r3, #28]
 8003c12:	4b1d      	ldr	r3, [pc, #116]	; (8003c88 <HAL_RCC_OscConfig+0x32c>)
 8003c14:	2180      	movs	r1, #128	; 0x80
 8003c16:	0549      	lsls	r1, r1, #21
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	61da      	str	r2, [r3, #28]
 8003c1c:	4b1a      	ldr	r3, [pc, #104]	; (8003c88 <HAL_RCC_OscConfig+0x32c>)
 8003c1e:	69da      	ldr	r2, [r3, #28]
 8003c20:	2380      	movs	r3, #128	; 0x80
 8003c22:	055b      	lsls	r3, r3, #21
 8003c24:	4013      	ands	r3, r2
 8003c26:	60fb      	str	r3, [r7, #12]
 8003c28:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003c2a:	183b      	adds	r3, r7, r0
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c30:	4b18      	ldr	r3, [pc, #96]	; (8003c94 <HAL_RCC_OscConfig+0x338>)
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	2380      	movs	r3, #128	; 0x80
 8003c36:	005b      	lsls	r3, r3, #1
 8003c38:	4013      	ands	r3, r2
 8003c3a:	d11a      	bne.n	8003c72 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c3c:	4b15      	ldr	r3, [pc, #84]	; (8003c94 <HAL_RCC_OscConfig+0x338>)
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	4b14      	ldr	r3, [pc, #80]	; (8003c94 <HAL_RCC_OscConfig+0x338>)
 8003c42:	2180      	movs	r1, #128	; 0x80
 8003c44:	0049      	lsls	r1, r1, #1
 8003c46:	430a      	orrs	r2, r1
 8003c48:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c4a:	f7fe f803 	bl	8001c54 <HAL_GetTick>
 8003c4e:	0003      	movs	r3, r0
 8003c50:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c54:	f7fd fffe 	bl	8001c54 <HAL_GetTick>
 8003c58:	0002      	movs	r2, r0
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b64      	cmp	r3, #100	; 0x64
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e185      	b.n	8003f72 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c66:	4b0b      	ldr	r3, [pc, #44]	; (8003c94 <HAL_RCC_OscConfig+0x338>)
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	2380      	movs	r3, #128	; 0x80
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	4013      	ands	r3, r2
 8003c70:	d0f0      	beq.n	8003c54 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d10e      	bne.n	8003c98 <HAL_RCC_OscConfig+0x33c>
 8003c7a:	4b03      	ldr	r3, [pc, #12]	; (8003c88 <HAL_RCC_OscConfig+0x32c>)
 8003c7c:	6a1a      	ldr	r2, [r3, #32]
 8003c7e:	4b02      	ldr	r3, [pc, #8]	; (8003c88 <HAL_RCC_OscConfig+0x32c>)
 8003c80:	2101      	movs	r1, #1
 8003c82:	430a      	orrs	r2, r1
 8003c84:	621a      	str	r2, [r3, #32]
 8003c86:	e035      	b.n	8003cf4 <HAL_RCC_OscConfig+0x398>
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	fffeffff 	.word	0xfffeffff
 8003c90:	fffbffff 	.word	0xfffbffff
 8003c94:	40007000 	.word	0x40007000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d10c      	bne.n	8003cba <HAL_RCC_OscConfig+0x35e>
 8003ca0:	4bb6      	ldr	r3, [pc, #728]	; (8003f7c <HAL_RCC_OscConfig+0x620>)
 8003ca2:	6a1a      	ldr	r2, [r3, #32]
 8003ca4:	4bb5      	ldr	r3, [pc, #724]	; (8003f7c <HAL_RCC_OscConfig+0x620>)
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	438a      	bics	r2, r1
 8003caa:	621a      	str	r2, [r3, #32]
 8003cac:	4bb3      	ldr	r3, [pc, #716]	; (8003f7c <HAL_RCC_OscConfig+0x620>)
 8003cae:	6a1a      	ldr	r2, [r3, #32]
 8003cb0:	4bb2      	ldr	r3, [pc, #712]	; (8003f7c <HAL_RCC_OscConfig+0x620>)
 8003cb2:	2104      	movs	r1, #4
 8003cb4:	438a      	bics	r2, r1
 8003cb6:	621a      	str	r2, [r3, #32]
 8003cb8:	e01c      	b.n	8003cf4 <HAL_RCC_OscConfig+0x398>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	2b05      	cmp	r3, #5
 8003cc0:	d10c      	bne.n	8003cdc <HAL_RCC_OscConfig+0x380>
 8003cc2:	4bae      	ldr	r3, [pc, #696]	; (8003f7c <HAL_RCC_OscConfig+0x620>)
 8003cc4:	6a1a      	ldr	r2, [r3, #32]
 8003cc6:	4bad      	ldr	r3, [pc, #692]	; (8003f7c <HAL_RCC_OscConfig+0x620>)
 8003cc8:	2104      	movs	r1, #4
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	621a      	str	r2, [r3, #32]
 8003cce:	4bab      	ldr	r3, [pc, #684]	; (8003f7c <HAL_RCC_OscConfig+0x620>)
 8003cd0:	6a1a      	ldr	r2, [r3, #32]
 8003cd2:	4baa      	ldr	r3, [pc, #680]	; (8003f7c <HAL_RCC_OscConfig+0x620>)
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	621a      	str	r2, [r3, #32]
 8003cda:	e00b      	b.n	8003cf4 <HAL_RCC_OscConfig+0x398>
 8003cdc:	4ba7      	ldr	r3, [pc, #668]	; (8003f7c <HAL_RCC_OscConfig+0x620>)
 8003cde:	6a1a      	ldr	r2, [r3, #32]
 8003ce0:	4ba6      	ldr	r3, [pc, #664]	; (8003f7c <HAL_RCC_OscConfig+0x620>)
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	438a      	bics	r2, r1
 8003ce6:	621a      	str	r2, [r3, #32]
 8003ce8:	4ba4      	ldr	r3, [pc, #656]	; (8003f7c <HAL_RCC_OscConfig+0x620>)
 8003cea:	6a1a      	ldr	r2, [r3, #32]
 8003cec:	4ba3      	ldr	r3, [pc, #652]	; (8003f7c <HAL_RCC_OscConfig+0x620>)
 8003cee:	2104      	movs	r1, #4
 8003cf0:	438a      	bics	r2, r1
 8003cf2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d014      	beq.n	8003d26 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cfc:	f7fd ffaa 	bl	8001c54 <HAL_GetTick>
 8003d00:	0003      	movs	r3, r0
 8003d02:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d04:	e009      	b.n	8003d1a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d06:	f7fd ffa5 	bl	8001c54 <HAL_GetTick>
 8003d0a:	0002      	movs	r2, r0
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	4a9b      	ldr	r2, [pc, #620]	; (8003f80 <HAL_RCC_OscConfig+0x624>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e12b      	b.n	8003f72 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d1a:	4b98      	ldr	r3, [pc, #608]	; (8003f7c <HAL_RCC_OscConfig+0x620>)
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	2202      	movs	r2, #2
 8003d20:	4013      	ands	r3, r2
 8003d22:	d0f0      	beq.n	8003d06 <HAL_RCC_OscConfig+0x3aa>
 8003d24:	e013      	b.n	8003d4e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d26:	f7fd ff95 	bl	8001c54 <HAL_GetTick>
 8003d2a:	0003      	movs	r3, r0
 8003d2c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d2e:	e009      	b.n	8003d44 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d30:	f7fd ff90 	bl	8001c54 <HAL_GetTick>
 8003d34:	0002      	movs	r2, r0
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	4a91      	ldr	r2, [pc, #580]	; (8003f80 <HAL_RCC_OscConfig+0x624>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e116      	b.n	8003f72 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d44:	4b8d      	ldr	r3, [pc, #564]	; (8003f7c <HAL_RCC_OscConfig+0x620>)
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	2202      	movs	r2, #2
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	d1f0      	bne.n	8003d30 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d4e:	231f      	movs	r3, #31
 8003d50:	18fb      	adds	r3, r7, r3
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d105      	bne.n	8003d64 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d58:	4b88      	ldr	r3, [pc, #544]	; (8003f7c <HAL_RCC_OscConfig+0x620>)
 8003d5a:	69da      	ldr	r2, [r3, #28]
 8003d5c:	4b87      	ldr	r3, [pc, #540]	; (8003f7c <HAL_RCC_OscConfig+0x620>)
 8003d5e:	4989      	ldr	r1, [pc, #548]	; (8003f84 <HAL_RCC_OscConfig+0x628>)
 8003d60:	400a      	ands	r2, r1
 8003d62:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2210      	movs	r2, #16
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	d063      	beq.n	8003e36 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d12a      	bne.n	8003dcc <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003d76:	4b81      	ldr	r3, [pc, #516]	; (8003f7c <HAL_RCC_OscConfig+0x620>)
 8003d78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d7a:	4b80      	ldr	r3, [pc, #512]	; (8003f7c <HAL_RCC_OscConfig+0x620>)
 8003d7c:	2104      	movs	r1, #4
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003d82:	4b7e      	ldr	r3, [pc, #504]	; (8003f7c <HAL_RCC_OscConfig+0x620>)
 8003d84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d86:	4b7d      	ldr	r3, [pc, #500]	; (8003f7c <HAL_RCC_OscConfig+0x620>)
 8003d88:	2101      	movs	r1, #1
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d8e:	f7fd ff61 	bl	8001c54 <HAL_GetTick>
 8003d92:	0003      	movs	r3, r0
 8003d94:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003d98:	f7fd ff5c 	bl	8001c54 <HAL_GetTick>
 8003d9c:	0002      	movs	r2, r0
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e0e3      	b.n	8003f72 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003daa:	4b74      	ldr	r3, [pc, #464]	; (8003f7c <HAL_RCC_OscConfig+0x620>)
 8003dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dae:	2202      	movs	r2, #2
 8003db0:	4013      	ands	r3, r2
 8003db2:	d0f1      	beq.n	8003d98 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003db4:	4b71      	ldr	r3, [pc, #452]	; (8003f7c <HAL_RCC_OscConfig+0x620>)
 8003db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db8:	22f8      	movs	r2, #248	; 0xf8
 8003dba:	4393      	bics	r3, r2
 8003dbc:	0019      	movs	r1, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	00da      	lsls	r2, r3, #3
 8003dc4:	4b6d      	ldr	r3, [pc, #436]	; (8003f7c <HAL_RCC_OscConfig+0x620>)
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	635a      	str	r2, [r3, #52]	; 0x34
 8003dca:	e034      	b.n	8003e36 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	3305      	adds	r3, #5
 8003dd2:	d111      	bne.n	8003df8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003dd4:	4b69      	ldr	r3, [pc, #420]	; (8003f7c <HAL_RCC_OscConfig+0x620>)
 8003dd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dd8:	4b68      	ldr	r3, [pc, #416]	; (8003f7c <HAL_RCC_OscConfig+0x620>)
 8003dda:	2104      	movs	r1, #4
 8003ddc:	438a      	bics	r2, r1
 8003dde:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003de0:	4b66      	ldr	r3, [pc, #408]	; (8003f7c <HAL_RCC_OscConfig+0x620>)
 8003de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003de4:	22f8      	movs	r2, #248	; 0xf8
 8003de6:	4393      	bics	r3, r2
 8003de8:	0019      	movs	r1, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	00da      	lsls	r2, r3, #3
 8003df0:	4b62      	ldr	r3, [pc, #392]	; (8003f7c <HAL_RCC_OscConfig+0x620>)
 8003df2:	430a      	orrs	r2, r1
 8003df4:	635a      	str	r2, [r3, #52]	; 0x34
 8003df6:	e01e      	b.n	8003e36 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003df8:	4b60      	ldr	r3, [pc, #384]	; (8003f7c <HAL_RCC_OscConfig+0x620>)
 8003dfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dfc:	4b5f      	ldr	r3, [pc, #380]	; (8003f7c <HAL_RCC_OscConfig+0x620>)
 8003dfe:	2104      	movs	r1, #4
 8003e00:	430a      	orrs	r2, r1
 8003e02:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003e04:	4b5d      	ldr	r3, [pc, #372]	; (8003f7c <HAL_RCC_OscConfig+0x620>)
 8003e06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e08:	4b5c      	ldr	r3, [pc, #368]	; (8003f7c <HAL_RCC_OscConfig+0x620>)
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	438a      	bics	r2, r1
 8003e0e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e10:	f7fd ff20 	bl	8001c54 <HAL_GetTick>
 8003e14:	0003      	movs	r3, r0
 8003e16:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003e18:	e008      	b.n	8003e2c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003e1a:	f7fd ff1b 	bl	8001c54 <HAL_GetTick>
 8003e1e:	0002      	movs	r2, r0
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d901      	bls.n	8003e2c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e0a2      	b.n	8003f72 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003e2c:	4b53      	ldr	r3, [pc, #332]	; (8003f7c <HAL_RCC_OscConfig+0x620>)
 8003e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e30:	2202      	movs	r2, #2
 8003e32:	4013      	ands	r3, r2
 8003e34:	d1f1      	bne.n	8003e1a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d100      	bne.n	8003e40 <HAL_RCC_OscConfig+0x4e4>
 8003e3e:	e097      	b.n	8003f70 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e40:	4b4e      	ldr	r3, [pc, #312]	; (8003f7c <HAL_RCC_OscConfig+0x620>)
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	220c      	movs	r2, #12
 8003e46:	4013      	ands	r3, r2
 8003e48:	2b08      	cmp	r3, #8
 8003e4a:	d100      	bne.n	8003e4e <HAL_RCC_OscConfig+0x4f2>
 8003e4c:	e06b      	b.n	8003f26 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d14c      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e56:	4b49      	ldr	r3, [pc, #292]	; (8003f7c <HAL_RCC_OscConfig+0x620>)
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	4b48      	ldr	r3, [pc, #288]	; (8003f7c <HAL_RCC_OscConfig+0x620>)
 8003e5c:	494a      	ldr	r1, [pc, #296]	; (8003f88 <HAL_RCC_OscConfig+0x62c>)
 8003e5e:	400a      	ands	r2, r1
 8003e60:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e62:	f7fd fef7 	bl	8001c54 <HAL_GetTick>
 8003e66:	0003      	movs	r3, r0
 8003e68:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e6a:	e008      	b.n	8003e7e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e6c:	f7fd fef2 	bl	8001c54 <HAL_GetTick>
 8003e70:	0002      	movs	r2, r0
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e079      	b.n	8003f72 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e7e:	4b3f      	ldr	r3, [pc, #252]	; (8003f7c <HAL_RCC_OscConfig+0x620>)
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	2380      	movs	r3, #128	; 0x80
 8003e84:	049b      	lsls	r3, r3, #18
 8003e86:	4013      	ands	r3, r2
 8003e88:	d1f0      	bne.n	8003e6c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e8a:	4b3c      	ldr	r3, [pc, #240]	; (8003f7c <HAL_RCC_OscConfig+0x620>)
 8003e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8e:	220f      	movs	r2, #15
 8003e90:	4393      	bics	r3, r2
 8003e92:	0019      	movs	r1, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e98:	4b38      	ldr	r3, [pc, #224]	; (8003f7c <HAL_RCC_OscConfig+0x620>)
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e9e:	4b37      	ldr	r3, [pc, #220]	; (8003f7c <HAL_RCC_OscConfig+0x620>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	4a3a      	ldr	r2, [pc, #232]	; (8003f8c <HAL_RCC_OscConfig+0x630>)
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	0019      	movs	r1, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	431a      	orrs	r2, r3
 8003eb2:	4b32      	ldr	r3, [pc, #200]	; (8003f7c <HAL_RCC_OscConfig+0x620>)
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003eb8:	4b30      	ldr	r3, [pc, #192]	; (8003f7c <HAL_RCC_OscConfig+0x620>)
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	4b2f      	ldr	r3, [pc, #188]	; (8003f7c <HAL_RCC_OscConfig+0x620>)
 8003ebe:	2180      	movs	r1, #128	; 0x80
 8003ec0:	0449      	lsls	r1, r1, #17
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec6:	f7fd fec5 	bl	8001c54 <HAL_GetTick>
 8003eca:	0003      	movs	r3, r0
 8003ecc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ed0:	f7fd fec0 	bl	8001c54 <HAL_GetTick>
 8003ed4:	0002      	movs	r2, r0
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e047      	b.n	8003f72 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ee2:	4b26      	ldr	r3, [pc, #152]	; (8003f7c <HAL_RCC_OscConfig+0x620>)
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	2380      	movs	r3, #128	; 0x80
 8003ee8:	049b      	lsls	r3, r3, #18
 8003eea:	4013      	ands	r3, r2
 8003eec:	d0f0      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x574>
 8003eee:	e03f      	b.n	8003f70 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ef0:	4b22      	ldr	r3, [pc, #136]	; (8003f7c <HAL_RCC_OscConfig+0x620>)
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	4b21      	ldr	r3, [pc, #132]	; (8003f7c <HAL_RCC_OscConfig+0x620>)
 8003ef6:	4924      	ldr	r1, [pc, #144]	; (8003f88 <HAL_RCC_OscConfig+0x62c>)
 8003ef8:	400a      	ands	r2, r1
 8003efa:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003efc:	f7fd feaa 	bl	8001c54 <HAL_GetTick>
 8003f00:	0003      	movs	r3, r0
 8003f02:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f04:	e008      	b.n	8003f18 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f06:	f7fd fea5 	bl	8001c54 <HAL_GetTick>
 8003f0a:	0002      	movs	r2, r0
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d901      	bls.n	8003f18 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e02c      	b.n	8003f72 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f18:	4b18      	ldr	r3, [pc, #96]	; (8003f7c <HAL_RCC_OscConfig+0x620>)
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	2380      	movs	r3, #128	; 0x80
 8003f1e:	049b      	lsls	r3, r3, #18
 8003f20:	4013      	ands	r3, r2
 8003f22:	d1f0      	bne.n	8003f06 <HAL_RCC_OscConfig+0x5aa>
 8003f24:	e024      	b.n	8003f70 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d101      	bne.n	8003f32 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e01f      	b.n	8003f72 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003f32:	4b12      	ldr	r3, [pc, #72]	; (8003f7c <HAL_RCC_OscConfig+0x620>)
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003f38:	4b10      	ldr	r3, [pc, #64]	; (8003f7c <HAL_RCC_OscConfig+0x620>)
 8003f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	2380      	movs	r3, #128	; 0x80
 8003f42:	025b      	lsls	r3, r3, #9
 8003f44:	401a      	ands	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d10e      	bne.n	8003f6c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	220f      	movs	r2, #15
 8003f52:	401a      	ands	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d107      	bne.n	8003f6c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003f5c:	697a      	ldr	r2, [r7, #20]
 8003f5e:	23f0      	movs	r3, #240	; 0xf0
 8003f60:	039b      	lsls	r3, r3, #14
 8003f62:	401a      	ands	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d001      	beq.n	8003f70 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e000      	b.n	8003f72 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	0018      	movs	r0, r3
 8003f74:	46bd      	mov	sp, r7
 8003f76:	b008      	add	sp, #32
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	46c0      	nop			; (mov r8, r8)
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	00001388 	.word	0x00001388
 8003f84:	efffffff 	.word	0xefffffff
 8003f88:	feffffff 	.word	0xfeffffff
 8003f8c:	ffc2ffff 	.word	0xffc2ffff

08003f90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e0b3      	b.n	800410c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fa4:	4b5b      	ldr	r3, [pc, #364]	; (8004114 <HAL_RCC_ClockConfig+0x184>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	4013      	ands	r3, r2
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d911      	bls.n	8003fd6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fb2:	4b58      	ldr	r3, [pc, #352]	; (8004114 <HAL_RCC_ClockConfig+0x184>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	4393      	bics	r3, r2
 8003fba:	0019      	movs	r1, r3
 8003fbc:	4b55      	ldr	r3, [pc, #340]	; (8004114 <HAL_RCC_ClockConfig+0x184>)
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fc4:	4b53      	ldr	r3, [pc, #332]	; (8004114 <HAL_RCC_ClockConfig+0x184>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	4013      	ands	r3, r2
 8003fcc:	683a      	ldr	r2, [r7, #0]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d001      	beq.n	8003fd6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e09a      	b.n	800410c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2202      	movs	r2, #2
 8003fdc:	4013      	ands	r3, r2
 8003fde:	d015      	beq.n	800400c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2204      	movs	r2, #4
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	d006      	beq.n	8003ff8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003fea:	4b4b      	ldr	r3, [pc, #300]	; (8004118 <HAL_RCC_ClockConfig+0x188>)
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	4b4a      	ldr	r3, [pc, #296]	; (8004118 <HAL_RCC_ClockConfig+0x188>)
 8003ff0:	21e0      	movs	r1, #224	; 0xe0
 8003ff2:	00c9      	lsls	r1, r1, #3
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ff8:	4b47      	ldr	r3, [pc, #284]	; (8004118 <HAL_RCC_ClockConfig+0x188>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	22f0      	movs	r2, #240	; 0xf0
 8003ffe:	4393      	bics	r3, r2
 8004000:	0019      	movs	r1, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	689a      	ldr	r2, [r3, #8]
 8004006:	4b44      	ldr	r3, [pc, #272]	; (8004118 <HAL_RCC_ClockConfig+0x188>)
 8004008:	430a      	orrs	r2, r1
 800400a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2201      	movs	r2, #1
 8004012:	4013      	ands	r3, r2
 8004014:	d040      	beq.n	8004098 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d107      	bne.n	800402e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800401e:	4b3e      	ldr	r3, [pc, #248]	; (8004118 <HAL_RCC_ClockConfig+0x188>)
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	2380      	movs	r3, #128	; 0x80
 8004024:	029b      	lsls	r3, r3, #10
 8004026:	4013      	ands	r3, r2
 8004028:	d114      	bne.n	8004054 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e06e      	b.n	800410c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	2b02      	cmp	r3, #2
 8004034:	d107      	bne.n	8004046 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004036:	4b38      	ldr	r3, [pc, #224]	; (8004118 <HAL_RCC_ClockConfig+0x188>)
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	2380      	movs	r3, #128	; 0x80
 800403c:	049b      	lsls	r3, r3, #18
 800403e:	4013      	ands	r3, r2
 8004040:	d108      	bne.n	8004054 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e062      	b.n	800410c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004046:	4b34      	ldr	r3, [pc, #208]	; (8004118 <HAL_RCC_ClockConfig+0x188>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2202      	movs	r2, #2
 800404c:	4013      	ands	r3, r2
 800404e:	d101      	bne.n	8004054 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e05b      	b.n	800410c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004054:	4b30      	ldr	r3, [pc, #192]	; (8004118 <HAL_RCC_ClockConfig+0x188>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	2203      	movs	r2, #3
 800405a:	4393      	bics	r3, r2
 800405c:	0019      	movs	r1, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	4b2d      	ldr	r3, [pc, #180]	; (8004118 <HAL_RCC_ClockConfig+0x188>)
 8004064:	430a      	orrs	r2, r1
 8004066:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004068:	f7fd fdf4 	bl	8001c54 <HAL_GetTick>
 800406c:	0003      	movs	r3, r0
 800406e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004070:	e009      	b.n	8004086 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004072:	f7fd fdef 	bl	8001c54 <HAL_GetTick>
 8004076:	0002      	movs	r2, r0
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	4a27      	ldr	r2, [pc, #156]	; (800411c <HAL_RCC_ClockConfig+0x18c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e042      	b.n	800410c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004086:	4b24      	ldr	r3, [pc, #144]	; (8004118 <HAL_RCC_ClockConfig+0x188>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	220c      	movs	r2, #12
 800408c:	401a      	ands	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	429a      	cmp	r2, r3
 8004096:	d1ec      	bne.n	8004072 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004098:	4b1e      	ldr	r3, [pc, #120]	; (8004114 <HAL_RCC_ClockConfig+0x184>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2201      	movs	r2, #1
 800409e:	4013      	ands	r3, r2
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d211      	bcs.n	80040ca <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a6:	4b1b      	ldr	r3, [pc, #108]	; (8004114 <HAL_RCC_ClockConfig+0x184>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2201      	movs	r2, #1
 80040ac:	4393      	bics	r3, r2
 80040ae:	0019      	movs	r1, r3
 80040b0:	4b18      	ldr	r3, [pc, #96]	; (8004114 <HAL_RCC_ClockConfig+0x184>)
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	430a      	orrs	r2, r1
 80040b6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040b8:	4b16      	ldr	r3, [pc, #88]	; (8004114 <HAL_RCC_ClockConfig+0x184>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2201      	movs	r2, #1
 80040be:	4013      	ands	r3, r2
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d001      	beq.n	80040ca <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e020      	b.n	800410c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2204      	movs	r2, #4
 80040d0:	4013      	ands	r3, r2
 80040d2:	d009      	beq.n	80040e8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80040d4:	4b10      	ldr	r3, [pc, #64]	; (8004118 <HAL_RCC_ClockConfig+0x188>)
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	4a11      	ldr	r2, [pc, #68]	; (8004120 <HAL_RCC_ClockConfig+0x190>)
 80040da:	4013      	ands	r3, r2
 80040dc:	0019      	movs	r1, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68da      	ldr	r2, [r3, #12]
 80040e2:	4b0d      	ldr	r3, [pc, #52]	; (8004118 <HAL_RCC_ClockConfig+0x188>)
 80040e4:	430a      	orrs	r2, r1
 80040e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80040e8:	f000 f820 	bl	800412c <HAL_RCC_GetSysClockFreq>
 80040ec:	0001      	movs	r1, r0
 80040ee:	4b0a      	ldr	r3, [pc, #40]	; (8004118 <HAL_RCC_ClockConfig+0x188>)
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	091b      	lsrs	r3, r3, #4
 80040f4:	220f      	movs	r2, #15
 80040f6:	4013      	ands	r3, r2
 80040f8:	4a0a      	ldr	r2, [pc, #40]	; (8004124 <HAL_RCC_ClockConfig+0x194>)
 80040fa:	5cd3      	ldrb	r3, [r2, r3]
 80040fc:	000a      	movs	r2, r1
 80040fe:	40da      	lsrs	r2, r3
 8004100:	4b09      	ldr	r3, [pc, #36]	; (8004128 <HAL_RCC_ClockConfig+0x198>)
 8004102:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004104:	2003      	movs	r0, #3
 8004106:	f7fd fd5f 	bl	8001bc8 <HAL_InitTick>
  
  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	0018      	movs	r0, r3
 800410e:	46bd      	mov	sp, r7
 8004110:	b004      	add	sp, #16
 8004112:	bd80      	pop	{r7, pc}
 8004114:	40022000 	.word	0x40022000
 8004118:	40021000 	.word	0x40021000
 800411c:	00001388 	.word	0x00001388
 8004120:	fffff8ff 	.word	0xfffff8ff
 8004124:	08007184 	.word	0x08007184
 8004128:	20000044 	.word	0x20000044

0800412c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800412c:	b590      	push	{r4, r7, lr}
 800412e:	b08f      	sub	sp, #60	; 0x3c
 8004130:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004132:	2314      	movs	r3, #20
 8004134:	18fb      	adds	r3, r7, r3
 8004136:	4a2b      	ldr	r2, [pc, #172]	; (80041e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004138:	ca13      	ldmia	r2!, {r0, r1, r4}
 800413a:	c313      	stmia	r3!, {r0, r1, r4}
 800413c:	6812      	ldr	r2, [r2, #0]
 800413e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004140:	1d3b      	adds	r3, r7, #4
 8004142:	4a29      	ldr	r2, [pc, #164]	; (80041e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004144:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004146:	c313      	stmia	r3!, {r0, r1, r4}
 8004148:	6812      	ldr	r2, [r2, #0]
 800414a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800414c:	2300      	movs	r3, #0
 800414e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004150:	2300      	movs	r3, #0
 8004152:	62bb      	str	r3, [r7, #40]	; 0x28
 8004154:	2300      	movs	r3, #0
 8004156:	637b      	str	r3, [r7, #52]	; 0x34
 8004158:	2300      	movs	r3, #0
 800415a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800415c:	2300      	movs	r3, #0
 800415e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004160:	4b22      	ldr	r3, [pc, #136]	; (80041ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004168:	220c      	movs	r2, #12
 800416a:	4013      	ands	r3, r2
 800416c:	2b04      	cmp	r3, #4
 800416e:	d002      	beq.n	8004176 <HAL_RCC_GetSysClockFreq+0x4a>
 8004170:	2b08      	cmp	r3, #8
 8004172:	d003      	beq.n	800417c <HAL_RCC_GetSysClockFreq+0x50>
 8004174:	e02d      	b.n	80041d2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004176:	4b1e      	ldr	r3, [pc, #120]	; (80041f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004178:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800417a:	e02d      	b.n	80041d8 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800417c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800417e:	0c9b      	lsrs	r3, r3, #18
 8004180:	220f      	movs	r2, #15
 8004182:	4013      	ands	r3, r2
 8004184:	2214      	movs	r2, #20
 8004186:	18ba      	adds	r2, r7, r2
 8004188:	5cd3      	ldrb	r3, [r2, r3]
 800418a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800418c:	4b17      	ldr	r3, [pc, #92]	; (80041ec <HAL_RCC_GetSysClockFreq+0xc0>)
 800418e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004190:	220f      	movs	r2, #15
 8004192:	4013      	ands	r3, r2
 8004194:	1d3a      	adds	r2, r7, #4
 8004196:	5cd3      	ldrb	r3, [r2, r3]
 8004198:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800419a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800419c:	2380      	movs	r3, #128	; 0x80
 800419e:	025b      	lsls	r3, r3, #9
 80041a0:	4013      	ands	r3, r2
 80041a2:	d009      	beq.n	80041b8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80041a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041a6:	4812      	ldr	r0, [pc, #72]	; (80041f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80041a8:	f7fb ffb6 	bl	8000118 <__udivsi3>
 80041ac:	0003      	movs	r3, r0
 80041ae:	001a      	movs	r2, r3
 80041b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b2:	4353      	muls	r3, r2
 80041b4:	637b      	str	r3, [r7, #52]	; 0x34
 80041b6:	e009      	b.n	80041cc <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80041b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041ba:	000a      	movs	r2, r1
 80041bc:	0152      	lsls	r2, r2, #5
 80041be:	1a52      	subs	r2, r2, r1
 80041c0:	0193      	lsls	r3, r2, #6
 80041c2:	1a9b      	subs	r3, r3, r2
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	185b      	adds	r3, r3, r1
 80041c8:	021b      	lsls	r3, r3, #8
 80041ca:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80041cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ce:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80041d0:	e002      	b.n	80041d8 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80041d2:	4b07      	ldr	r3, [pc, #28]	; (80041f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80041d4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80041d6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80041d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80041da:	0018      	movs	r0, r3
 80041dc:	46bd      	mov	sp, r7
 80041de:	b00f      	add	sp, #60	; 0x3c
 80041e0:	bd90      	pop	{r4, r7, pc}
 80041e2:	46c0      	nop			; (mov r8, r8)
 80041e4:	08007040 	.word	0x08007040
 80041e8:	08007050 	.word	0x08007050
 80041ec:	40021000 	.word	0x40021000
 80041f0:	007a1200 	.word	0x007a1200

080041f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041f8:	4b02      	ldr	r3, [pc, #8]	; (8004204 <HAL_RCC_GetHCLKFreq+0x10>)
 80041fa:	681b      	ldr	r3, [r3, #0]
}
 80041fc:	0018      	movs	r0, r3
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	46c0      	nop			; (mov r8, r8)
 8004204:	20000044 	.word	0x20000044

08004208 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800420c:	f7ff fff2 	bl	80041f4 <HAL_RCC_GetHCLKFreq>
 8004210:	0001      	movs	r1, r0
 8004212:	4b06      	ldr	r3, [pc, #24]	; (800422c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	0a1b      	lsrs	r3, r3, #8
 8004218:	2207      	movs	r2, #7
 800421a:	4013      	ands	r3, r2
 800421c:	4a04      	ldr	r2, [pc, #16]	; (8004230 <HAL_RCC_GetPCLK1Freq+0x28>)
 800421e:	5cd3      	ldrb	r3, [r2, r3]
 8004220:	40d9      	lsrs	r1, r3
 8004222:	000b      	movs	r3, r1
}    
 8004224:	0018      	movs	r0, r3
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	46c0      	nop			; (mov r8, r8)
 800422c:	40021000 	.word	0x40021000
 8004230:	08007194 	.word	0x08007194

08004234 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800423c:	2300      	movs	r3, #0
 800423e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004240:	2300      	movs	r3, #0
 8004242:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	2380      	movs	r3, #128	; 0x80
 800424a:	025b      	lsls	r3, r3, #9
 800424c:	4013      	ands	r3, r2
 800424e:	d100      	bne.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004250:	e08e      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004252:	2017      	movs	r0, #23
 8004254:	183b      	adds	r3, r7, r0
 8004256:	2200      	movs	r2, #0
 8004258:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800425a:	4b5f      	ldr	r3, [pc, #380]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800425c:	69da      	ldr	r2, [r3, #28]
 800425e:	2380      	movs	r3, #128	; 0x80
 8004260:	055b      	lsls	r3, r3, #21
 8004262:	4013      	ands	r3, r2
 8004264:	d110      	bne.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004266:	4b5c      	ldr	r3, [pc, #368]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004268:	69da      	ldr	r2, [r3, #28]
 800426a:	4b5b      	ldr	r3, [pc, #364]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800426c:	2180      	movs	r1, #128	; 0x80
 800426e:	0549      	lsls	r1, r1, #21
 8004270:	430a      	orrs	r2, r1
 8004272:	61da      	str	r2, [r3, #28]
 8004274:	4b58      	ldr	r3, [pc, #352]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004276:	69da      	ldr	r2, [r3, #28]
 8004278:	2380      	movs	r3, #128	; 0x80
 800427a:	055b      	lsls	r3, r3, #21
 800427c:	4013      	ands	r3, r2
 800427e:	60bb      	str	r3, [r7, #8]
 8004280:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004282:	183b      	adds	r3, r7, r0
 8004284:	2201      	movs	r2, #1
 8004286:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004288:	4b54      	ldr	r3, [pc, #336]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	2380      	movs	r3, #128	; 0x80
 800428e:	005b      	lsls	r3, r3, #1
 8004290:	4013      	ands	r3, r2
 8004292:	d11a      	bne.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004294:	4b51      	ldr	r3, [pc, #324]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	4b50      	ldr	r3, [pc, #320]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800429a:	2180      	movs	r1, #128	; 0x80
 800429c:	0049      	lsls	r1, r1, #1
 800429e:	430a      	orrs	r2, r1
 80042a0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042a2:	f7fd fcd7 	bl	8001c54 <HAL_GetTick>
 80042a6:	0003      	movs	r3, r0
 80042a8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042aa:	e008      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ac:	f7fd fcd2 	bl	8001c54 <HAL_GetTick>
 80042b0:	0002      	movs	r2, r0
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b64      	cmp	r3, #100	; 0x64
 80042b8:	d901      	bls.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e087      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042be:	4b47      	ldr	r3, [pc, #284]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	2380      	movs	r3, #128	; 0x80
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	4013      	ands	r3, r2
 80042c8:	d0f0      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042ca:	4b43      	ldr	r3, [pc, #268]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042cc:	6a1a      	ldr	r2, [r3, #32]
 80042ce:	23c0      	movs	r3, #192	; 0xc0
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	4013      	ands	r3, r2
 80042d4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d034      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	23c0      	movs	r3, #192	; 0xc0
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	4013      	ands	r3, r2
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d02c      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042ec:	4b3a      	ldr	r3, [pc, #232]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042ee:	6a1b      	ldr	r3, [r3, #32]
 80042f0:	4a3b      	ldr	r2, [pc, #236]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042f2:	4013      	ands	r3, r2
 80042f4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042f6:	4b38      	ldr	r3, [pc, #224]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042f8:	6a1a      	ldr	r2, [r3, #32]
 80042fa:	4b37      	ldr	r3, [pc, #220]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042fc:	2180      	movs	r1, #128	; 0x80
 80042fe:	0249      	lsls	r1, r1, #9
 8004300:	430a      	orrs	r2, r1
 8004302:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004304:	4b34      	ldr	r3, [pc, #208]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004306:	6a1a      	ldr	r2, [r3, #32]
 8004308:	4b33      	ldr	r3, [pc, #204]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800430a:	4936      	ldr	r1, [pc, #216]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800430c:	400a      	ands	r2, r1
 800430e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004310:	4b31      	ldr	r3, [pc, #196]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2201      	movs	r2, #1
 800431a:	4013      	ands	r3, r2
 800431c:	d013      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800431e:	f7fd fc99 	bl	8001c54 <HAL_GetTick>
 8004322:	0003      	movs	r3, r0
 8004324:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004326:	e009      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004328:	f7fd fc94 	bl	8001c54 <HAL_GetTick>
 800432c:	0002      	movs	r2, r0
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	4a2d      	ldr	r2, [pc, #180]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d901      	bls.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e048      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800433c:	4b26      	ldr	r3, [pc, #152]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	2202      	movs	r2, #2
 8004342:	4013      	ands	r3, r2
 8004344:	d0f0      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004346:	4b24      	ldr	r3, [pc, #144]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	4a25      	ldr	r2, [pc, #148]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800434c:	4013      	ands	r3, r2
 800434e:	0019      	movs	r1, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	4b20      	ldr	r3, [pc, #128]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004356:	430a      	orrs	r2, r1
 8004358:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800435a:	2317      	movs	r3, #23
 800435c:	18fb      	adds	r3, r7, r3
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d105      	bne.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004364:	4b1c      	ldr	r3, [pc, #112]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004366:	69da      	ldr	r2, [r3, #28]
 8004368:	4b1b      	ldr	r3, [pc, #108]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800436a:	4920      	ldr	r1, [pc, #128]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800436c:	400a      	ands	r2, r1
 800436e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2201      	movs	r2, #1
 8004376:	4013      	ands	r3, r2
 8004378:	d009      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800437a:	4b17      	ldr	r3, [pc, #92]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800437c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437e:	2203      	movs	r2, #3
 8004380:	4393      	bics	r3, r2
 8004382:	0019      	movs	r1, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689a      	ldr	r2, [r3, #8]
 8004388:	4b13      	ldr	r3, [pc, #76]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800438a:	430a      	orrs	r2, r1
 800438c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2220      	movs	r2, #32
 8004394:	4013      	ands	r3, r2
 8004396:	d009      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004398:	4b0f      	ldr	r3, [pc, #60]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800439a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439c:	2210      	movs	r2, #16
 800439e:	4393      	bics	r3, r2
 80043a0:	0019      	movs	r1, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	68da      	ldr	r2, [r3, #12]
 80043a6:	4b0c      	ldr	r3, [pc, #48]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043a8:	430a      	orrs	r2, r1
 80043aa:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	2380      	movs	r3, #128	; 0x80
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	4013      	ands	r3, r2
 80043b6:	d009      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80043b8:	4b07      	ldr	r3, [pc, #28]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043bc:	2240      	movs	r2, #64	; 0x40
 80043be:	4393      	bics	r3, r2
 80043c0:	0019      	movs	r1, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	691a      	ldr	r2, [r3, #16]
 80043c6:	4b04      	ldr	r3, [pc, #16]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043c8:	430a      	orrs	r2, r1
 80043ca:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	0018      	movs	r0, r3
 80043d0:	46bd      	mov	sp, r7
 80043d2:	b006      	add	sp, #24
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	46c0      	nop			; (mov r8, r8)
 80043d8:	40021000 	.word	0x40021000
 80043dc:	40007000 	.word	0x40007000
 80043e0:	fffffcff 	.word	0xfffffcff
 80043e4:	fffeffff 	.word	0xfffeffff
 80043e8:	00001388 	.word	0x00001388
 80043ec:	efffffff 	.word	0xefffffff

080043f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d101      	bne.n	8004402 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e0a8      	b.n	8004554 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004406:	2b00      	cmp	r3, #0
 8004408:	d109      	bne.n	800441e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685a      	ldr	r2, [r3, #4]
 800440e:	2382      	movs	r3, #130	; 0x82
 8004410:	005b      	lsls	r3, r3, #1
 8004412:	429a      	cmp	r2, r3
 8004414:	d009      	beq.n	800442a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	61da      	str	r2, [r3, #28]
 800441c:	e005      	b.n	800442a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	225d      	movs	r2, #93	; 0x5d
 8004434:	5c9b      	ldrb	r3, [r3, r2]
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2b00      	cmp	r3, #0
 800443a:	d107      	bne.n	800444c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	225c      	movs	r2, #92	; 0x5c
 8004440:	2100      	movs	r1, #0
 8004442:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	0018      	movs	r0, r3
 8004448:	f7fd f990 	bl	800176c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	225d      	movs	r2, #93	; 0x5d
 8004450:	2102      	movs	r1, #2
 8004452:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2140      	movs	r1, #64	; 0x40
 8004460:	438a      	bics	r2, r1
 8004462:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	68da      	ldr	r2, [r3, #12]
 8004468:	23e0      	movs	r3, #224	; 0xe0
 800446a:	00db      	lsls	r3, r3, #3
 800446c:	429a      	cmp	r2, r3
 800446e:	d902      	bls.n	8004476 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004470:	2300      	movs	r3, #0
 8004472:	60fb      	str	r3, [r7, #12]
 8004474:	e002      	b.n	800447c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004476:	2380      	movs	r3, #128	; 0x80
 8004478:	015b      	lsls	r3, r3, #5
 800447a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68da      	ldr	r2, [r3, #12]
 8004480:	23f0      	movs	r3, #240	; 0xf0
 8004482:	011b      	lsls	r3, r3, #4
 8004484:	429a      	cmp	r2, r3
 8004486:	d008      	beq.n	800449a <HAL_SPI_Init+0xaa>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	68da      	ldr	r2, [r3, #12]
 800448c:	23e0      	movs	r3, #224	; 0xe0
 800448e:	00db      	lsls	r3, r3, #3
 8004490:	429a      	cmp	r2, r3
 8004492:	d002      	beq.n	800449a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	2382      	movs	r3, #130	; 0x82
 80044a0:	005b      	lsls	r3, r3, #1
 80044a2:	401a      	ands	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6899      	ldr	r1, [r3, #8]
 80044a8:	2384      	movs	r3, #132	; 0x84
 80044aa:	021b      	lsls	r3, r3, #8
 80044ac:	400b      	ands	r3, r1
 80044ae:	431a      	orrs	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	2102      	movs	r1, #2
 80044b6:	400b      	ands	r3, r1
 80044b8:	431a      	orrs	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	2101      	movs	r1, #1
 80044c0:	400b      	ands	r3, r1
 80044c2:	431a      	orrs	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6999      	ldr	r1, [r3, #24]
 80044c8:	2380      	movs	r3, #128	; 0x80
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	400b      	ands	r3, r1
 80044ce:	431a      	orrs	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	69db      	ldr	r3, [r3, #28]
 80044d4:	2138      	movs	r1, #56	; 0x38
 80044d6:	400b      	ands	r3, r1
 80044d8:	431a      	orrs	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	2180      	movs	r1, #128	; 0x80
 80044e0:	400b      	ands	r3, r1
 80044e2:	431a      	orrs	r2, r3
 80044e4:	0011      	movs	r1, r2
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044ea:	2380      	movs	r3, #128	; 0x80
 80044ec:	019b      	lsls	r3, r3, #6
 80044ee:	401a      	ands	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	430a      	orrs	r2, r1
 80044f6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	0c1b      	lsrs	r3, r3, #16
 80044fe:	2204      	movs	r2, #4
 8004500:	401a      	ands	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004506:	2110      	movs	r1, #16
 8004508:	400b      	ands	r3, r1
 800450a:	431a      	orrs	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004510:	2108      	movs	r1, #8
 8004512:	400b      	ands	r3, r1
 8004514:	431a      	orrs	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	68d9      	ldr	r1, [r3, #12]
 800451a:	23f0      	movs	r3, #240	; 0xf0
 800451c:	011b      	lsls	r3, r3, #4
 800451e:	400b      	ands	r3, r1
 8004520:	431a      	orrs	r2, r3
 8004522:	0011      	movs	r1, r2
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	2380      	movs	r3, #128	; 0x80
 8004528:	015b      	lsls	r3, r3, #5
 800452a:	401a      	ands	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	430a      	orrs	r2, r1
 8004532:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	69da      	ldr	r2, [r3, #28]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4907      	ldr	r1, [pc, #28]	; (800455c <HAL_SPI_Init+0x16c>)
 8004540:	400a      	ands	r2, r1
 8004542:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	225d      	movs	r2, #93	; 0x5d
 800454e:	2101      	movs	r1, #1
 8004550:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	0018      	movs	r0, r3
 8004556:	46bd      	mov	sp, r7
 8004558:	b004      	add	sp, #16
 800455a:	bd80      	pop	{r7, pc}
 800455c:	fffff7ff 	.word	0xfffff7ff

08004560 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b088      	sub	sp, #32
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	603b      	str	r3, [r7, #0]
 800456c:	1dbb      	adds	r3, r7, #6
 800456e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004570:	231f      	movs	r3, #31
 8004572:	18fb      	adds	r3, r7, r3
 8004574:	2200      	movs	r2, #0
 8004576:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	225c      	movs	r2, #92	; 0x5c
 800457c:	5c9b      	ldrb	r3, [r3, r2]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d101      	bne.n	8004586 <HAL_SPI_Transmit+0x26>
 8004582:	2302      	movs	r3, #2
 8004584:	e140      	b.n	8004808 <HAL_SPI_Transmit+0x2a8>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	225c      	movs	r2, #92	; 0x5c
 800458a:	2101      	movs	r1, #1
 800458c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800458e:	f7fd fb61 	bl	8001c54 <HAL_GetTick>
 8004592:	0003      	movs	r3, r0
 8004594:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004596:	2316      	movs	r3, #22
 8004598:	18fb      	adds	r3, r7, r3
 800459a:	1dba      	adds	r2, r7, #6
 800459c:	8812      	ldrh	r2, [r2, #0]
 800459e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	225d      	movs	r2, #93	; 0x5d
 80045a4:	5c9b      	ldrb	r3, [r3, r2]
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d004      	beq.n	80045b6 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80045ac:	231f      	movs	r3, #31
 80045ae:	18fb      	adds	r3, r7, r3
 80045b0:	2202      	movs	r2, #2
 80045b2:	701a      	strb	r2, [r3, #0]
    goto error;
 80045b4:	e11d      	b.n	80047f2 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d003      	beq.n	80045c4 <HAL_SPI_Transmit+0x64>
 80045bc:	1dbb      	adds	r3, r7, #6
 80045be:	881b      	ldrh	r3, [r3, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d104      	bne.n	80045ce <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80045c4:	231f      	movs	r3, #31
 80045c6:	18fb      	adds	r3, r7, r3
 80045c8:	2201      	movs	r2, #1
 80045ca:	701a      	strb	r2, [r3, #0]
    goto error;
 80045cc:	e111      	b.n	80047f2 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	225d      	movs	r2, #93	; 0x5d
 80045d2:	2103      	movs	r1, #3
 80045d4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	68ba      	ldr	r2, [r7, #8]
 80045e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	1dba      	adds	r2, r7, #6
 80045e6:	8812      	ldrh	r2, [r2, #0]
 80045e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	1dba      	adds	r2, r7, #6
 80045ee:	8812      	ldrh	r2, [r2, #0]
 80045f0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2244      	movs	r2, #68	; 0x44
 80045fc:	2100      	movs	r1, #0
 80045fe:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2246      	movs	r2, #70	; 0x46
 8004604:	2100      	movs	r1, #0
 8004606:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	2380      	movs	r3, #128	; 0x80
 800461a:	021b      	lsls	r3, r3, #8
 800461c:	429a      	cmp	r2, r3
 800461e:	d110      	bne.n	8004642 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2140      	movs	r1, #64	; 0x40
 800462c:	438a      	bics	r2, r1
 800462e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2180      	movs	r1, #128	; 0x80
 800463c:	01c9      	lsls	r1, r1, #7
 800463e:	430a      	orrs	r2, r1
 8004640:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2240      	movs	r2, #64	; 0x40
 800464a:	4013      	ands	r3, r2
 800464c:	2b40      	cmp	r3, #64	; 0x40
 800464e:	d007      	beq.n	8004660 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2140      	movs	r1, #64	; 0x40
 800465c:	430a      	orrs	r2, r1
 800465e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	68da      	ldr	r2, [r3, #12]
 8004664:	23e0      	movs	r3, #224	; 0xe0
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	429a      	cmp	r2, r3
 800466a:	d94e      	bls.n	800470a <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d004      	beq.n	800467e <HAL_SPI_Transmit+0x11e>
 8004674:	2316      	movs	r3, #22
 8004676:	18fb      	adds	r3, r7, r3
 8004678:	881b      	ldrh	r3, [r3, #0]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d13f      	bne.n	80046fe <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004682:	881a      	ldrh	r2, [r3, #0]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468e:	1c9a      	adds	r2, r3, #2
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004698:	b29b      	uxth	r3, r3
 800469a:	3b01      	subs	r3, #1
 800469c:	b29a      	uxth	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80046a2:	e02c      	b.n	80046fe <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	2202      	movs	r2, #2
 80046ac:	4013      	ands	r3, r2
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d112      	bne.n	80046d8 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b6:	881a      	ldrh	r2, [r3, #0]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c2:	1c9a      	adds	r2, r3, #2
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	3b01      	subs	r3, #1
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046d6:	e012      	b.n	80046fe <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046d8:	f7fd fabc 	bl	8001c54 <HAL_GetTick>
 80046dc:	0002      	movs	r2, r0
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d802      	bhi.n	80046ee <HAL_SPI_Transmit+0x18e>
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	3301      	adds	r3, #1
 80046ec:	d102      	bne.n	80046f4 <HAL_SPI_Transmit+0x194>
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d104      	bne.n	80046fe <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80046f4:	231f      	movs	r3, #31
 80046f6:	18fb      	adds	r3, r7, r3
 80046f8:	2203      	movs	r2, #3
 80046fa:	701a      	strb	r2, [r3, #0]
          goto error;
 80046fc:	e079      	b.n	80047f2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004702:	b29b      	uxth	r3, r3
 8004704:	2b00      	cmp	r3, #0
 8004706:	d1cd      	bne.n	80046a4 <HAL_SPI_Transmit+0x144>
 8004708:	e04f      	b.n	80047aa <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d004      	beq.n	800471c <HAL_SPI_Transmit+0x1bc>
 8004712:	2316      	movs	r3, #22
 8004714:	18fb      	adds	r3, r7, r3
 8004716:	881b      	ldrh	r3, [r3, #0]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d141      	bne.n	80047a0 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	330c      	adds	r3, #12
 8004726:	7812      	ldrb	r2, [r2, #0]
 8004728:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472e:	1c5a      	adds	r2, r3, #1
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004738:	b29b      	uxth	r3, r3
 800473a:	3b01      	subs	r3, #1
 800473c:	b29a      	uxth	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8004742:	e02d      	b.n	80047a0 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	2202      	movs	r2, #2
 800474c:	4013      	ands	r3, r2
 800474e:	2b02      	cmp	r3, #2
 8004750:	d113      	bne.n	800477a <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	330c      	adds	r3, #12
 800475c:	7812      	ldrb	r2, [r2, #0]
 800475e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004764:	1c5a      	adds	r2, r3, #1
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800476e:	b29b      	uxth	r3, r3
 8004770:	3b01      	subs	r3, #1
 8004772:	b29a      	uxth	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004778:	e012      	b.n	80047a0 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800477a:	f7fd fa6b 	bl	8001c54 <HAL_GetTick>
 800477e:	0002      	movs	r2, r0
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	683a      	ldr	r2, [r7, #0]
 8004786:	429a      	cmp	r2, r3
 8004788:	d802      	bhi.n	8004790 <HAL_SPI_Transmit+0x230>
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	3301      	adds	r3, #1
 800478e:	d102      	bne.n	8004796 <HAL_SPI_Transmit+0x236>
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d104      	bne.n	80047a0 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8004796:	231f      	movs	r3, #31
 8004798:	18fb      	adds	r3, r7, r3
 800479a:	2203      	movs	r2, #3
 800479c:	701a      	strb	r2, [r3, #0]
          goto error;
 800479e:	e028      	b.n	80047f2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1cc      	bne.n	8004744 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047aa:	69ba      	ldr	r2, [r7, #24]
 80047ac:	6839      	ldr	r1, [r7, #0]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	0018      	movs	r0, r3
 80047b2:	f000 f95d 	bl	8004a70 <SPI_EndRxTxTransaction>
 80047b6:	1e03      	subs	r3, r0, #0
 80047b8:	d002      	beq.n	80047c0 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2220      	movs	r2, #32
 80047be:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10a      	bne.n	80047de <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047c8:	2300      	movs	r3, #0
 80047ca:	613b      	str	r3, [r7, #16]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	613b      	str	r3, [r7, #16]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	613b      	str	r3, [r7, #16]
 80047dc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d004      	beq.n	80047f0 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80047e6:	231f      	movs	r3, #31
 80047e8:	18fb      	adds	r3, r7, r3
 80047ea:	2201      	movs	r2, #1
 80047ec:	701a      	strb	r2, [r3, #0]
 80047ee:	e000      	b.n	80047f2 <HAL_SPI_Transmit+0x292>
  }

error:
 80047f0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	225d      	movs	r2, #93	; 0x5d
 80047f6:	2101      	movs	r1, #1
 80047f8:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	225c      	movs	r2, #92	; 0x5c
 80047fe:	2100      	movs	r1, #0
 8004800:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004802:	231f      	movs	r3, #31
 8004804:	18fb      	adds	r3, r7, r3
 8004806:	781b      	ldrb	r3, [r3, #0]
}
 8004808:	0018      	movs	r0, r3
 800480a:	46bd      	mov	sp, r7
 800480c:	b008      	add	sp, #32
 800480e:	bd80      	pop	{r7, pc}

08004810 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b088      	sub	sp, #32
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	603b      	str	r3, [r7, #0]
 800481c:	1dfb      	adds	r3, r7, #7
 800481e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004820:	f7fd fa18 	bl	8001c54 <HAL_GetTick>
 8004824:	0002      	movs	r2, r0
 8004826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004828:	1a9b      	subs	r3, r3, r2
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	18d3      	adds	r3, r2, r3
 800482e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004830:	f7fd fa10 	bl	8001c54 <HAL_GetTick>
 8004834:	0003      	movs	r3, r0
 8004836:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004838:	4b3a      	ldr	r3, [pc, #232]	; (8004924 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	015b      	lsls	r3, r3, #5
 800483e:	0d1b      	lsrs	r3, r3, #20
 8004840:	69fa      	ldr	r2, [r7, #28]
 8004842:	4353      	muls	r3, r2
 8004844:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004846:	e058      	b.n	80048fa <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	3301      	adds	r3, #1
 800484c:	d055      	beq.n	80048fa <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800484e:	f7fd fa01 	bl	8001c54 <HAL_GetTick>
 8004852:	0002      	movs	r2, r0
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	69fa      	ldr	r2, [r7, #28]
 800485a:	429a      	cmp	r2, r3
 800485c:	d902      	bls.n	8004864 <SPI_WaitFlagStateUntilTimeout+0x54>
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d142      	bne.n	80048ea <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	21e0      	movs	r1, #224	; 0xe0
 8004870:	438a      	bics	r2, r1
 8004872:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	685a      	ldr	r2, [r3, #4]
 8004878:	2382      	movs	r3, #130	; 0x82
 800487a:	005b      	lsls	r3, r3, #1
 800487c:	429a      	cmp	r2, r3
 800487e:	d113      	bne.n	80048a8 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	689a      	ldr	r2, [r3, #8]
 8004884:	2380      	movs	r3, #128	; 0x80
 8004886:	021b      	lsls	r3, r3, #8
 8004888:	429a      	cmp	r2, r3
 800488a:	d005      	beq.n	8004898 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	689a      	ldr	r2, [r3, #8]
 8004890:	2380      	movs	r3, #128	; 0x80
 8004892:	00db      	lsls	r3, r3, #3
 8004894:	429a      	cmp	r2, r3
 8004896:	d107      	bne.n	80048a8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2140      	movs	r1, #64	; 0x40
 80048a4:	438a      	bics	r2, r1
 80048a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048ac:	2380      	movs	r3, #128	; 0x80
 80048ae:	019b      	lsls	r3, r3, #6
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d110      	bne.n	80048d6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	491a      	ldr	r1, [pc, #104]	; (8004928 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80048c0:	400a      	ands	r2, r1
 80048c2:	601a      	str	r2, [r3, #0]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2180      	movs	r1, #128	; 0x80
 80048d0:	0189      	lsls	r1, r1, #6
 80048d2:	430a      	orrs	r2, r1
 80048d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	225d      	movs	r2, #93	; 0x5d
 80048da:	2101      	movs	r1, #1
 80048dc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	225c      	movs	r2, #92	; 0x5c
 80048e2:	2100      	movs	r1, #0
 80048e4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e017      	b.n	800491a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d101      	bne.n	80048f4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80048f0:	2300      	movs	r3, #0
 80048f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	3b01      	subs	r3, #1
 80048f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	68ba      	ldr	r2, [r7, #8]
 8004902:	4013      	ands	r3, r2
 8004904:	68ba      	ldr	r2, [r7, #8]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	425a      	negs	r2, r3
 800490a:	4153      	adcs	r3, r2
 800490c:	b2db      	uxtb	r3, r3
 800490e:	001a      	movs	r2, r3
 8004910:	1dfb      	adds	r3, r7, #7
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	429a      	cmp	r2, r3
 8004916:	d197      	bne.n	8004848 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	0018      	movs	r0, r3
 800491c:	46bd      	mov	sp, r7
 800491e:	b008      	add	sp, #32
 8004920:	bd80      	pop	{r7, pc}
 8004922:	46c0      	nop			; (mov r8, r8)
 8004924:	20000044 	.word	0x20000044
 8004928:	ffffdfff 	.word	0xffffdfff

0800492c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b08a      	sub	sp, #40	; 0x28
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
 8004938:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800493a:	2317      	movs	r3, #23
 800493c:	18fb      	adds	r3, r7, r3
 800493e:	2200      	movs	r2, #0
 8004940:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004942:	f7fd f987 	bl	8001c54 <HAL_GetTick>
 8004946:	0002      	movs	r2, r0
 8004948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494a:	1a9b      	subs	r3, r3, r2
 800494c:	683a      	ldr	r2, [r7, #0]
 800494e:	18d3      	adds	r3, r2, r3
 8004950:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004952:	f7fd f97f 	bl	8001c54 <HAL_GetTick>
 8004956:	0003      	movs	r3, r0
 8004958:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	330c      	adds	r3, #12
 8004960:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004962:	4b41      	ldr	r3, [pc, #260]	; (8004a68 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	0013      	movs	r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	189b      	adds	r3, r3, r2
 800496c:	00da      	lsls	r2, r3, #3
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	0d1b      	lsrs	r3, r3, #20
 8004972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004974:	4353      	muls	r3, r2
 8004976:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004978:	e068      	b.n	8004a4c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800497a:	68ba      	ldr	r2, [r7, #8]
 800497c:	23c0      	movs	r3, #192	; 0xc0
 800497e:	00db      	lsls	r3, r3, #3
 8004980:	429a      	cmp	r2, r3
 8004982:	d10a      	bne.n	800499a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d107      	bne.n	800499a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	b2da      	uxtb	r2, r3
 8004990:	2117      	movs	r1, #23
 8004992:	187b      	adds	r3, r7, r1
 8004994:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004996:	187b      	adds	r3, r7, r1
 8004998:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	3301      	adds	r3, #1
 800499e:	d055      	beq.n	8004a4c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80049a0:	f7fd f958 	bl	8001c54 <HAL_GetTick>
 80049a4:	0002      	movs	r2, r0
 80049a6:	6a3b      	ldr	r3, [r7, #32]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d902      	bls.n	80049b6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80049b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d142      	bne.n	8004a3c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	685a      	ldr	r2, [r3, #4]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	21e0      	movs	r1, #224	; 0xe0
 80049c2:	438a      	bics	r2, r1
 80049c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	2382      	movs	r3, #130	; 0x82
 80049cc:	005b      	lsls	r3, r3, #1
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d113      	bne.n	80049fa <SPI_WaitFifoStateUntilTimeout+0xce>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	689a      	ldr	r2, [r3, #8]
 80049d6:	2380      	movs	r3, #128	; 0x80
 80049d8:	021b      	lsls	r3, r3, #8
 80049da:	429a      	cmp	r2, r3
 80049dc:	d005      	beq.n	80049ea <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	689a      	ldr	r2, [r3, #8]
 80049e2:	2380      	movs	r3, #128	; 0x80
 80049e4:	00db      	lsls	r3, r3, #3
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d107      	bne.n	80049fa <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2140      	movs	r1, #64	; 0x40
 80049f6:	438a      	bics	r2, r1
 80049f8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049fe:	2380      	movs	r3, #128	; 0x80
 8004a00:	019b      	lsls	r3, r3, #6
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d110      	bne.n	8004a28 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4916      	ldr	r1, [pc, #88]	; (8004a6c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004a12:	400a      	ands	r2, r1
 8004a14:	601a      	str	r2, [r3, #0]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2180      	movs	r1, #128	; 0x80
 8004a22:	0189      	lsls	r1, r1, #6
 8004a24:	430a      	orrs	r2, r1
 8004a26:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	225d      	movs	r2, #93	; 0x5d
 8004a2c:	2101      	movs	r1, #1
 8004a2e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	225c      	movs	r2, #92	; 0x5c
 8004a34:	2100      	movs	r1, #0
 8004a36:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e010      	b.n	8004a5e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004a42:	2300      	movs	r3, #0
 8004a44:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	68ba      	ldr	r2, [r7, #8]
 8004a54:	4013      	ands	r3, r2
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d18e      	bne.n	800497a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	0018      	movs	r0, r3
 8004a60:	46bd      	mov	sp, r7
 8004a62:	b00a      	add	sp, #40	; 0x28
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	46c0      	nop			; (mov r8, r8)
 8004a68:	20000044 	.word	0x20000044
 8004a6c:	ffffdfff 	.word	0xffffdfff

08004a70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af02      	add	r7, sp, #8
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a7c:	68ba      	ldr	r2, [r7, #8]
 8004a7e:	23c0      	movs	r3, #192	; 0xc0
 8004a80:	0159      	lsls	r1, r3, #5
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	9300      	str	r3, [sp, #0]
 8004a88:	0013      	movs	r3, r2
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f7ff ff4e 	bl	800492c <SPI_WaitFifoStateUntilTimeout>
 8004a90:	1e03      	subs	r3, r0, #0
 8004a92:	d007      	beq.n	8004aa4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a98:	2220      	movs	r2, #32
 8004a9a:	431a      	orrs	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e027      	b.n	8004af4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004aa4:	68ba      	ldr	r2, [r7, #8]
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	9300      	str	r3, [sp, #0]
 8004aac:	0013      	movs	r3, r2
 8004aae:	2200      	movs	r2, #0
 8004ab0:	2180      	movs	r1, #128	; 0x80
 8004ab2:	f7ff fead 	bl	8004810 <SPI_WaitFlagStateUntilTimeout>
 8004ab6:	1e03      	subs	r3, r0, #0
 8004ab8:	d007      	beq.n	8004aca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004abe:	2220      	movs	r2, #32
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e014      	b.n	8004af4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	23c0      	movs	r3, #192	; 0xc0
 8004ace:	00d9      	lsls	r1, r3, #3
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	0013      	movs	r3, r2
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f7ff ff27 	bl	800492c <SPI_WaitFifoStateUntilTimeout>
 8004ade:	1e03      	subs	r3, r0, #0
 8004ae0:	d007      	beq.n	8004af2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	431a      	orrs	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e000      	b.n	8004af4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	0018      	movs	r0, r3
 8004af6:	46bd      	mov	sp, r7
 8004af8:	b004      	add	sp, #16
 8004afa:	bd80      	pop	{r7, pc}

08004afc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e042      	b.n	8004b94 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	223d      	movs	r2, #61	; 0x3d
 8004b12:	5c9b      	ldrb	r3, [r3, r2]
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d107      	bne.n	8004b2a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	223c      	movs	r2, #60	; 0x3c
 8004b1e:	2100      	movs	r1, #0
 8004b20:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	0018      	movs	r0, r3
 8004b26:	f7fc fea9 	bl	800187c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	223d      	movs	r2, #61	; 0x3d
 8004b2e:	2102      	movs	r1, #2
 8004b30:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	3304      	adds	r3, #4
 8004b3a:	0019      	movs	r1, r3
 8004b3c:	0010      	movs	r0, r2
 8004b3e:	f000 fbe7 	bl	8005310 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2246      	movs	r2, #70	; 0x46
 8004b46:	2101      	movs	r1, #1
 8004b48:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	223e      	movs	r2, #62	; 0x3e
 8004b4e:	2101      	movs	r1, #1
 8004b50:	5499      	strb	r1, [r3, r2]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	223f      	movs	r2, #63	; 0x3f
 8004b56:	2101      	movs	r1, #1
 8004b58:	5499      	strb	r1, [r3, r2]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2240      	movs	r2, #64	; 0x40
 8004b5e:	2101      	movs	r1, #1
 8004b60:	5499      	strb	r1, [r3, r2]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2241      	movs	r2, #65	; 0x41
 8004b66:	2101      	movs	r1, #1
 8004b68:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2242      	movs	r2, #66	; 0x42
 8004b6e:	2101      	movs	r1, #1
 8004b70:	5499      	strb	r1, [r3, r2]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2243      	movs	r2, #67	; 0x43
 8004b76:	2101      	movs	r1, #1
 8004b78:	5499      	strb	r1, [r3, r2]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2244      	movs	r2, #68	; 0x44
 8004b7e:	2101      	movs	r1, #1
 8004b80:	5499      	strb	r1, [r3, r2]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2245      	movs	r2, #69	; 0x45
 8004b86:	2101      	movs	r1, #1
 8004b88:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	223d      	movs	r2, #61	; 0x3d
 8004b8e:	2101      	movs	r1, #1
 8004b90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	0018      	movs	r0, r3
 8004b96:	46bd      	mov	sp, r7
 8004b98:	b002      	add	sp, #8
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d101      	bne.n	8004bae <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e042      	b.n	8004c34 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	223d      	movs	r2, #61	; 0x3d
 8004bb2:	5c9b      	ldrb	r3, [r3, r2]
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d107      	bne.n	8004bca <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	223c      	movs	r2, #60	; 0x3c
 8004bbe:	2100      	movs	r1, #0
 8004bc0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	0018      	movs	r0, r3
 8004bc6:	f000 f839 	bl	8004c3c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	223d      	movs	r2, #61	; 0x3d
 8004bce:	2102      	movs	r1, #2
 8004bd0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	3304      	adds	r3, #4
 8004bda:	0019      	movs	r1, r3
 8004bdc:	0010      	movs	r0, r2
 8004bde:	f000 fb97 	bl	8005310 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2246      	movs	r2, #70	; 0x46
 8004be6:	2101      	movs	r1, #1
 8004be8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	223e      	movs	r2, #62	; 0x3e
 8004bee:	2101      	movs	r1, #1
 8004bf0:	5499      	strb	r1, [r3, r2]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	223f      	movs	r2, #63	; 0x3f
 8004bf6:	2101      	movs	r1, #1
 8004bf8:	5499      	strb	r1, [r3, r2]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2240      	movs	r2, #64	; 0x40
 8004bfe:	2101      	movs	r1, #1
 8004c00:	5499      	strb	r1, [r3, r2]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2241      	movs	r2, #65	; 0x41
 8004c06:	2101      	movs	r1, #1
 8004c08:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2242      	movs	r2, #66	; 0x42
 8004c0e:	2101      	movs	r1, #1
 8004c10:	5499      	strb	r1, [r3, r2]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2243      	movs	r2, #67	; 0x43
 8004c16:	2101      	movs	r1, #1
 8004c18:	5499      	strb	r1, [r3, r2]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2244      	movs	r2, #68	; 0x44
 8004c1e:	2101      	movs	r1, #1
 8004c20:	5499      	strb	r1, [r3, r2]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2245      	movs	r2, #69	; 0x45
 8004c26:	2101      	movs	r1, #1
 8004c28:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	223d      	movs	r2, #61	; 0x3d
 8004c2e:	2101      	movs	r1, #1
 8004c30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	0018      	movs	r0, r3
 8004c36:	46bd      	mov	sp, r7
 8004c38:	b002      	add	sp, #8
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004c44:	46c0      	nop			; (mov r8, r8)
 8004c46:	46bd      	mov	sp, r7
 8004c48:	b002      	add	sp, #8
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c56:	230f      	movs	r3, #15
 8004c58:	18fb      	adds	r3, r7, r3
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d108      	bne.n	8004c76 <HAL_TIM_OC_Start_IT+0x2a>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	223e      	movs	r2, #62	; 0x3e
 8004c68:	5c9b      	ldrb	r3, [r3, r2]
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	1e5a      	subs	r2, r3, #1
 8004c70:	4193      	sbcs	r3, r2
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	e01f      	b.n	8004cb6 <HAL_TIM_OC_Start_IT+0x6a>
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	2b04      	cmp	r3, #4
 8004c7a:	d108      	bne.n	8004c8e <HAL_TIM_OC_Start_IT+0x42>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	223f      	movs	r2, #63	; 0x3f
 8004c80:	5c9b      	ldrb	r3, [r3, r2]
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	3b01      	subs	r3, #1
 8004c86:	1e5a      	subs	r2, r3, #1
 8004c88:	4193      	sbcs	r3, r2
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	e013      	b.n	8004cb6 <HAL_TIM_OC_Start_IT+0x6a>
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	2b08      	cmp	r3, #8
 8004c92:	d108      	bne.n	8004ca6 <HAL_TIM_OC_Start_IT+0x5a>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2240      	movs	r2, #64	; 0x40
 8004c98:	5c9b      	ldrb	r3, [r3, r2]
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	1e5a      	subs	r2, r3, #1
 8004ca0:	4193      	sbcs	r3, r2
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	e007      	b.n	8004cb6 <HAL_TIM_OC_Start_IT+0x6a>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2241      	movs	r2, #65	; 0x41
 8004caa:	5c9b      	ldrb	r3, [r3, r2]
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	1e5a      	subs	r2, r3, #1
 8004cb2:	4193      	sbcs	r3, r2
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d001      	beq.n	8004cbe <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e0b7      	b.n	8004e2e <HAL_TIM_OC_Start_IT+0x1e2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d104      	bne.n	8004cce <HAL_TIM_OC_Start_IT+0x82>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	223e      	movs	r2, #62	; 0x3e
 8004cc8:	2102      	movs	r1, #2
 8004cca:	5499      	strb	r1, [r3, r2]
 8004ccc:	e013      	b.n	8004cf6 <HAL_TIM_OC_Start_IT+0xaa>
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	2b04      	cmp	r3, #4
 8004cd2:	d104      	bne.n	8004cde <HAL_TIM_OC_Start_IT+0x92>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	223f      	movs	r2, #63	; 0x3f
 8004cd8:	2102      	movs	r1, #2
 8004cda:	5499      	strb	r1, [r3, r2]
 8004cdc:	e00b      	b.n	8004cf6 <HAL_TIM_OC_Start_IT+0xaa>
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	2b08      	cmp	r3, #8
 8004ce2:	d104      	bne.n	8004cee <HAL_TIM_OC_Start_IT+0xa2>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2240      	movs	r2, #64	; 0x40
 8004ce8:	2102      	movs	r1, #2
 8004cea:	5499      	strb	r1, [r3, r2]
 8004cec:	e003      	b.n	8004cf6 <HAL_TIM_OC_Start_IT+0xaa>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2241      	movs	r2, #65	; 0x41
 8004cf2:	2102      	movs	r1, #2
 8004cf4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	2b0c      	cmp	r3, #12
 8004cfa:	d02a      	beq.n	8004d52 <HAL_TIM_OC_Start_IT+0x106>
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	2b0c      	cmp	r3, #12
 8004d00:	d830      	bhi.n	8004d64 <HAL_TIM_OC_Start_IT+0x118>
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	2b08      	cmp	r3, #8
 8004d06:	d01b      	beq.n	8004d40 <HAL_TIM_OC_Start_IT+0xf4>
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	2b08      	cmp	r3, #8
 8004d0c:	d82a      	bhi.n	8004d64 <HAL_TIM_OC_Start_IT+0x118>
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d003      	beq.n	8004d1c <HAL_TIM_OC_Start_IT+0xd0>
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	2b04      	cmp	r3, #4
 8004d18:	d009      	beq.n	8004d2e <HAL_TIM_OC_Start_IT+0xe2>
 8004d1a:	e023      	b.n	8004d64 <HAL_TIM_OC_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68da      	ldr	r2, [r3, #12]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2102      	movs	r1, #2
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	60da      	str	r2, [r3, #12]
      break;
 8004d2c:	e01f      	b.n	8004d6e <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68da      	ldr	r2, [r3, #12]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2104      	movs	r1, #4
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	60da      	str	r2, [r3, #12]
      break;
 8004d3e:	e016      	b.n	8004d6e <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68da      	ldr	r2, [r3, #12]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2108      	movs	r1, #8
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	60da      	str	r2, [r3, #12]
      break;
 8004d50:	e00d      	b.n	8004d6e <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68da      	ldr	r2, [r3, #12]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2110      	movs	r1, #16
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	60da      	str	r2, [r3, #12]
      break;
 8004d62:	e004      	b.n	8004d6e <HAL_TIM_OC_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 8004d64:	230f      	movs	r3, #15
 8004d66:	18fb      	adds	r3, r7, r3
 8004d68:	2201      	movs	r2, #1
 8004d6a:	701a      	strb	r2, [r3, #0]
      break;
 8004d6c:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8004d6e:	230f      	movs	r3, #15
 8004d70:	18fb      	adds	r3, r7, r3
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d157      	bne.n	8004e28 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	6839      	ldr	r1, [r7, #0]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	0018      	movs	r0, r3
 8004d82:	f000 fddb 	bl	800593c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a2b      	ldr	r2, [pc, #172]	; (8004e38 <HAL_TIM_OC_Start_IT+0x1ec>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d00e      	beq.n	8004dae <HAL_TIM_OC_Start_IT+0x162>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a29      	ldr	r2, [pc, #164]	; (8004e3c <HAL_TIM_OC_Start_IT+0x1f0>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d009      	beq.n	8004dae <HAL_TIM_OC_Start_IT+0x162>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a28      	ldr	r2, [pc, #160]	; (8004e40 <HAL_TIM_OC_Start_IT+0x1f4>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d004      	beq.n	8004dae <HAL_TIM_OC_Start_IT+0x162>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a26      	ldr	r2, [pc, #152]	; (8004e44 <HAL_TIM_OC_Start_IT+0x1f8>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d101      	bne.n	8004db2 <HAL_TIM_OC_Start_IT+0x166>
 8004dae:	2301      	movs	r3, #1
 8004db0:	e000      	b.n	8004db4 <HAL_TIM_OC_Start_IT+0x168>
 8004db2:	2300      	movs	r3, #0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d008      	beq.n	8004dca <HAL_TIM_OC_Start_IT+0x17e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2180      	movs	r1, #128	; 0x80
 8004dc4:	0209      	lsls	r1, r1, #8
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a1a      	ldr	r2, [pc, #104]	; (8004e38 <HAL_TIM_OC_Start_IT+0x1ec>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d00f      	beq.n	8004df4 <HAL_TIM_OC_Start_IT+0x1a8>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	2380      	movs	r3, #128	; 0x80
 8004dda:	05db      	lsls	r3, r3, #23
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d009      	beq.n	8004df4 <HAL_TIM_OC_Start_IT+0x1a8>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a18      	ldr	r2, [pc, #96]	; (8004e48 <HAL_TIM_OC_Start_IT+0x1fc>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d004      	beq.n	8004df4 <HAL_TIM_OC_Start_IT+0x1a8>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a13      	ldr	r2, [pc, #76]	; (8004e3c <HAL_TIM_OC_Start_IT+0x1f0>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d111      	bne.n	8004e18 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	2207      	movs	r2, #7
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	2b06      	cmp	r3, #6
 8004e04:	d010      	beq.n	8004e28 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2101      	movs	r1, #1
 8004e12:	430a      	orrs	r2, r1
 8004e14:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e16:	e007      	b.n	8004e28 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2101      	movs	r1, #1
 8004e24:	430a      	orrs	r2, r1
 8004e26:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004e28:	230f      	movs	r3, #15
 8004e2a:	18fb      	adds	r3, r7, r3
 8004e2c:	781b      	ldrb	r3, [r3, #0]
}
 8004e2e:	0018      	movs	r0, r3
 8004e30:	46bd      	mov	sp, r7
 8004e32:	b004      	add	sp, #16
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	46c0      	nop			; (mov r8, r8)
 8004e38:	40012c00 	.word	0x40012c00
 8004e3c:	40014000 	.word	0x40014000
 8004e40:	40014400 	.word	0x40014400
 8004e44:	40014800 	.word	0x40014800
 8004e48:	40000400 	.word	0x40000400

08004e4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d124      	bne.n	8004eac <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	2202      	movs	r2, #2
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d11d      	bne.n	8004eac <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2203      	movs	r2, #3
 8004e76:	4252      	negs	r2, r2
 8004e78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	2203      	movs	r2, #3
 8004e88:	4013      	ands	r3, r2
 8004e8a:	d004      	beq.n	8004e96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	0018      	movs	r0, r3
 8004e90:	f000 fa26 	bl	80052e0 <HAL_TIM_IC_CaptureCallback>
 8004e94:	e007      	b.n	8004ea6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	0018      	movs	r0, r3
 8004e9a:	f7fb f9f5 	bl	8000288 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	0018      	movs	r0, r3
 8004ea2:	f000 fa25 	bl	80052f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	2204      	movs	r2, #4
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	2b04      	cmp	r3, #4
 8004eb8:	d125      	bne.n	8004f06 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	2204      	movs	r2, #4
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	2b04      	cmp	r3, #4
 8004ec6:	d11e      	bne.n	8004f06 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2205      	movs	r2, #5
 8004ece:	4252      	negs	r2, r2
 8004ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2202      	movs	r2, #2
 8004ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	699a      	ldr	r2, [r3, #24]
 8004ede:	23c0      	movs	r3, #192	; 0xc0
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	d004      	beq.n	8004ef0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	0018      	movs	r0, r3
 8004eea:	f000 f9f9 	bl	80052e0 <HAL_TIM_IC_CaptureCallback>
 8004eee:	e007      	b.n	8004f00 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	0018      	movs	r0, r3
 8004ef4:	f7fb f9c8 	bl	8000288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	0018      	movs	r0, r3
 8004efc:	f000 f9f8 	bl	80052f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	2208      	movs	r2, #8
 8004f0e:	4013      	ands	r3, r2
 8004f10:	2b08      	cmp	r3, #8
 8004f12:	d124      	bne.n	8004f5e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	2208      	movs	r2, #8
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	2b08      	cmp	r3, #8
 8004f20:	d11d      	bne.n	8004f5e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2209      	movs	r2, #9
 8004f28:	4252      	negs	r2, r2
 8004f2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2204      	movs	r2, #4
 8004f30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	69db      	ldr	r3, [r3, #28]
 8004f38:	2203      	movs	r2, #3
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	d004      	beq.n	8004f48 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	0018      	movs	r0, r3
 8004f42:	f000 f9cd 	bl	80052e0 <HAL_TIM_IC_CaptureCallback>
 8004f46:	e007      	b.n	8004f58 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	0018      	movs	r0, r3
 8004f4c:	f7fb f99c 	bl	8000288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	0018      	movs	r0, r3
 8004f54:	f000 f9cc 	bl	80052f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	2210      	movs	r2, #16
 8004f66:	4013      	ands	r3, r2
 8004f68:	2b10      	cmp	r3, #16
 8004f6a:	d125      	bne.n	8004fb8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	2210      	movs	r2, #16
 8004f74:	4013      	ands	r3, r2
 8004f76:	2b10      	cmp	r3, #16
 8004f78:	d11e      	bne.n	8004fb8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2211      	movs	r2, #17
 8004f80:	4252      	negs	r2, r2
 8004f82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2208      	movs	r2, #8
 8004f88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	69da      	ldr	r2, [r3, #28]
 8004f90:	23c0      	movs	r3, #192	; 0xc0
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	4013      	ands	r3, r2
 8004f96:	d004      	beq.n	8004fa2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	0018      	movs	r0, r3
 8004f9c:	f000 f9a0 	bl	80052e0 <HAL_TIM_IC_CaptureCallback>
 8004fa0:	e007      	b.n	8004fb2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	0018      	movs	r0, r3
 8004fa6:	f7fb f96f 	bl	8000288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	0018      	movs	r0, r3
 8004fae:	f000 f99f 	bl	80052f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d10f      	bne.n	8004fe6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	4013      	ands	r3, r2
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d108      	bne.n	8004fe6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2202      	movs	r2, #2
 8004fda:	4252      	negs	r2, r2
 8004fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	0018      	movs	r0, r3
 8004fe2:	f000 f975 	bl	80052d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	2280      	movs	r2, #128	; 0x80
 8004fee:	4013      	ands	r3, r2
 8004ff0:	2b80      	cmp	r3, #128	; 0x80
 8004ff2:	d10f      	bne.n	8005014 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	2280      	movs	r2, #128	; 0x80
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	2b80      	cmp	r3, #128	; 0x80
 8005000:	d108      	bne.n	8005014 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2281      	movs	r2, #129	; 0x81
 8005008:	4252      	negs	r2, r2
 800500a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	0018      	movs	r0, r3
 8005010:	f000 fd7c 	bl	8005b0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	2240      	movs	r2, #64	; 0x40
 800501c:	4013      	ands	r3, r2
 800501e:	2b40      	cmp	r3, #64	; 0x40
 8005020:	d10f      	bne.n	8005042 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	2240      	movs	r2, #64	; 0x40
 800502a:	4013      	ands	r3, r2
 800502c:	2b40      	cmp	r3, #64	; 0x40
 800502e:	d108      	bne.n	8005042 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2241      	movs	r2, #65	; 0x41
 8005036:	4252      	negs	r2, r2
 8005038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	0018      	movs	r0, r3
 800503e:	f000 f95f 	bl	8005300 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	2220      	movs	r2, #32
 800504a:	4013      	ands	r3, r2
 800504c:	2b20      	cmp	r3, #32
 800504e:	d10f      	bne.n	8005070 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	2220      	movs	r2, #32
 8005058:	4013      	ands	r3, r2
 800505a:	2b20      	cmp	r3, #32
 800505c:	d108      	bne.n	8005070 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2221      	movs	r2, #33	; 0x21
 8005064:	4252      	negs	r2, r2
 8005066:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	0018      	movs	r0, r3
 800506c:	f000 fd46 	bl	8005afc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005070:	46c0      	nop			; (mov r8, r8)
 8005072:	46bd      	mov	sp, r7
 8005074:	b002      	add	sp, #8
 8005076:	bd80      	pop	{r7, pc}

08005078 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b086      	sub	sp, #24
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005084:	2317      	movs	r3, #23
 8005086:	18fb      	adds	r3, r7, r3
 8005088:	2200      	movs	r2, #0
 800508a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	223c      	movs	r2, #60	; 0x3c
 8005090:	5c9b      	ldrb	r3, [r3, r2]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d101      	bne.n	800509a <HAL_TIM_OC_ConfigChannel+0x22>
 8005096:	2302      	movs	r3, #2
 8005098:	e042      	b.n	8005120 <HAL_TIM_OC_ConfigChannel+0xa8>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	223c      	movs	r2, #60	; 0x3c
 800509e:	2101      	movs	r1, #1
 80050a0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2b0c      	cmp	r3, #12
 80050a6:	d027      	beq.n	80050f8 <HAL_TIM_OC_ConfigChannel+0x80>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2b0c      	cmp	r3, #12
 80050ac:	d82c      	bhi.n	8005108 <HAL_TIM_OC_ConfigChannel+0x90>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2b08      	cmp	r3, #8
 80050b2:	d019      	beq.n	80050e8 <HAL_TIM_OC_ConfigChannel+0x70>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2b08      	cmp	r3, #8
 80050b8:	d826      	bhi.n	8005108 <HAL_TIM_OC_ConfigChannel+0x90>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d003      	beq.n	80050c8 <HAL_TIM_OC_ConfigChannel+0x50>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2b04      	cmp	r3, #4
 80050c4:	d008      	beq.n	80050d8 <HAL_TIM_OC_ConfigChannel+0x60>
 80050c6:	e01f      	b.n	8005108 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68ba      	ldr	r2, [r7, #8]
 80050ce:	0011      	movs	r1, r2
 80050d0:	0018      	movs	r0, r3
 80050d2:	f000 f99d 	bl	8005410 <TIM_OC1_SetConfig>
      break;
 80050d6:	e01c      	b.n	8005112 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68ba      	ldr	r2, [r7, #8]
 80050de:	0011      	movs	r1, r2
 80050e0:	0018      	movs	r0, r3
 80050e2:	f000 fa1d 	bl	8005520 <TIM_OC2_SetConfig>
      break;
 80050e6:	e014      	b.n	8005112 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68ba      	ldr	r2, [r7, #8]
 80050ee:	0011      	movs	r1, r2
 80050f0:	0018      	movs	r0, r3
 80050f2:	f000 fa99 	bl	8005628 <TIM_OC3_SetConfig>
      break;
 80050f6:	e00c      	b.n	8005112 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68ba      	ldr	r2, [r7, #8]
 80050fe:	0011      	movs	r1, r2
 8005100:	0018      	movs	r0, r3
 8005102:	f000 fb17 	bl	8005734 <TIM_OC4_SetConfig>
      break;
 8005106:	e004      	b.n	8005112 <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8005108:	2317      	movs	r3, #23
 800510a:	18fb      	adds	r3, r7, r3
 800510c:	2201      	movs	r2, #1
 800510e:	701a      	strb	r2, [r3, #0]
      break;
 8005110:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	223c      	movs	r2, #60	; 0x3c
 8005116:	2100      	movs	r1, #0
 8005118:	5499      	strb	r1, [r3, r2]

  return status;
 800511a:	2317      	movs	r3, #23
 800511c:	18fb      	adds	r3, r7, r3
 800511e:	781b      	ldrb	r3, [r3, #0]
}
 8005120:	0018      	movs	r0, r3
 8005122:	46bd      	mov	sp, r7
 8005124:	b006      	add	sp, #24
 8005126:	bd80      	pop	{r7, pc}

08005128 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005132:	230f      	movs	r3, #15
 8005134:	18fb      	adds	r3, r7, r3
 8005136:	2200      	movs	r2, #0
 8005138:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	223c      	movs	r2, #60	; 0x3c
 800513e:	5c9b      	ldrb	r3, [r3, r2]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d101      	bne.n	8005148 <HAL_TIM_ConfigClockSource+0x20>
 8005144:	2302      	movs	r3, #2
 8005146:	e0bc      	b.n	80052c2 <HAL_TIM_ConfigClockSource+0x19a>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	223c      	movs	r2, #60	; 0x3c
 800514c:	2101      	movs	r1, #1
 800514e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	223d      	movs	r2, #61	; 0x3d
 8005154:	2102      	movs	r1, #2
 8005156:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	2277      	movs	r2, #119	; 0x77
 8005164:	4393      	bics	r3, r2
 8005166:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	4a58      	ldr	r2, [pc, #352]	; (80052cc <HAL_TIM_ConfigClockSource+0x1a4>)
 800516c:	4013      	ands	r3, r2
 800516e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68ba      	ldr	r2, [r7, #8]
 8005176:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2280      	movs	r2, #128	; 0x80
 800517e:	0192      	lsls	r2, r2, #6
 8005180:	4293      	cmp	r3, r2
 8005182:	d040      	beq.n	8005206 <HAL_TIM_ConfigClockSource+0xde>
 8005184:	2280      	movs	r2, #128	; 0x80
 8005186:	0192      	lsls	r2, r2, #6
 8005188:	4293      	cmp	r3, r2
 800518a:	d900      	bls.n	800518e <HAL_TIM_ConfigClockSource+0x66>
 800518c:	e088      	b.n	80052a0 <HAL_TIM_ConfigClockSource+0x178>
 800518e:	2280      	movs	r2, #128	; 0x80
 8005190:	0152      	lsls	r2, r2, #5
 8005192:	4293      	cmp	r3, r2
 8005194:	d100      	bne.n	8005198 <HAL_TIM_ConfigClockSource+0x70>
 8005196:	e088      	b.n	80052aa <HAL_TIM_ConfigClockSource+0x182>
 8005198:	2280      	movs	r2, #128	; 0x80
 800519a:	0152      	lsls	r2, r2, #5
 800519c:	4293      	cmp	r3, r2
 800519e:	d900      	bls.n	80051a2 <HAL_TIM_ConfigClockSource+0x7a>
 80051a0:	e07e      	b.n	80052a0 <HAL_TIM_ConfigClockSource+0x178>
 80051a2:	2b70      	cmp	r3, #112	; 0x70
 80051a4:	d018      	beq.n	80051d8 <HAL_TIM_ConfigClockSource+0xb0>
 80051a6:	d900      	bls.n	80051aa <HAL_TIM_ConfigClockSource+0x82>
 80051a8:	e07a      	b.n	80052a0 <HAL_TIM_ConfigClockSource+0x178>
 80051aa:	2b60      	cmp	r3, #96	; 0x60
 80051ac:	d04f      	beq.n	800524e <HAL_TIM_ConfigClockSource+0x126>
 80051ae:	d900      	bls.n	80051b2 <HAL_TIM_ConfigClockSource+0x8a>
 80051b0:	e076      	b.n	80052a0 <HAL_TIM_ConfigClockSource+0x178>
 80051b2:	2b50      	cmp	r3, #80	; 0x50
 80051b4:	d03b      	beq.n	800522e <HAL_TIM_ConfigClockSource+0x106>
 80051b6:	d900      	bls.n	80051ba <HAL_TIM_ConfigClockSource+0x92>
 80051b8:	e072      	b.n	80052a0 <HAL_TIM_ConfigClockSource+0x178>
 80051ba:	2b40      	cmp	r3, #64	; 0x40
 80051bc:	d057      	beq.n	800526e <HAL_TIM_ConfigClockSource+0x146>
 80051be:	d900      	bls.n	80051c2 <HAL_TIM_ConfigClockSource+0x9a>
 80051c0:	e06e      	b.n	80052a0 <HAL_TIM_ConfigClockSource+0x178>
 80051c2:	2b30      	cmp	r3, #48	; 0x30
 80051c4:	d063      	beq.n	800528e <HAL_TIM_ConfigClockSource+0x166>
 80051c6:	d86b      	bhi.n	80052a0 <HAL_TIM_ConfigClockSource+0x178>
 80051c8:	2b20      	cmp	r3, #32
 80051ca:	d060      	beq.n	800528e <HAL_TIM_ConfigClockSource+0x166>
 80051cc:	d868      	bhi.n	80052a0 <HAL_TIM_ConfigClockSource+0x178>
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d05d      	beq.n	800528e <HAL_TIM_ConfigClockSource+0x166>
 80051d2:	2b10      	cmp	r3, #16
 80051d4:	d05b      	beq.n	800528e <HAL_TIM_ConfigClockSource+0x166>
 80051d6:	e063      	b.n	80052a0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6818      	ldr	r0, [r3, #0]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	6899      	ldr	r1, [r3, #8]
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	685a      	ldr	r2, [r3, #4]
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	f000 fb88 	bl	80058fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	2277      	movs	r2, #119	; 0x77
 80051f8:	4313      	orrs	r3, r2
 80051fa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68ba      	ldr	r2, [r7, #8]
 8005202:	609a      	str	r2, [r3, #8]
      break;
 8005204:	e052      	b.n	80052ac <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6818      	ldr	r0, [r3, #0]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	6899      	ldr	r1, [r3, #8]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	685a      	ldr	r2, [r3, #4]
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	f000 fb71 	bl	80058fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	689a      	ldr	r2, [r3, #8]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2180      	movs	r1, #128	; 0x80
 8005226:	01c9      	lsls	r1, r1, #7
 8005228:	430a      	orrs	r2, r1
 800522a:	609a      	str	r2, [r3, #8]
      break;
 800522c:	e03e      	b.n	80052ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6818      	ldr	r0, [r3, #0]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	6859      	ldr	r1, [r3, #4]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	001a      	movs	r2, r3
 800523c:	f000 fae4 	bl	8005808 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2150      	movs	r1, #80	; 0x50
 8005246:	0018      	movs	r0, r3
 8005248:	f000 fb3e 	bl	80058c8 <TIM_ITRx_SetConfig>
      break;
 800524c:	e02e      	b.n	80052ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6818      	ldr	r0, [r3, #0]
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	6859      	ldr	r1, [r3, #4]
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	001a      	movs	r2, r3
 800525c:	f000 fb02 	bl	8005864 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2160      	movs	r1, #96	; 0x60
 8005266:	0018      	movs	r0, r3
 8005268:	f000 fb2e 	bl	80058c8 <TIM_ITRx_SetConfig>
      break;
 800526c:	e01e      	b.n	80052ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6818      	ldr	r0, [r3, #0]
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	6859      	ldr	r1, [r3, #4]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	001a      	movs	r2, r3
 800527c:	f000 fac4 	bl	8005808 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2140      	movs	r1, #64	; 0x40
 8005286:	0018      	movs	r0, r3
 8005288:	f000 fb1e 	bl	80058c8 <TIM_ITRx_SetConfig>
      break;
 800528c:	e00e      	b.n	80052ac <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	0019      	movs	r1, r3
 8005298:	0010      	movs	r0, r2
 800529a:	f000 fb15 	bl	80058c8 <TIM_ITRx_SetConfig>
      break;
 800529e:	e005      	b.n	80052ac <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80052a0:	230f      	movs	r3, #15
 80052a2:	18fb      	adds	r3, r7, r3
 80052a4:	2201      	movs	r2, #1
 80052a6:	701a      	strb	r2, [r3, #0]
      break;
 80052a8:	e000      	b.n	80052ac <HAL_TIM_ConfigClockSource+0x184>
      break;
 80052aa:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	223d      	movs	r2, #61	; 0x3d
 80052b0:	2101      	movs	r1, #1
 80052b2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	223c      	movs	r2, #60	; 0x3c
 80052b8:	2100      	movs	r1, #0
 80052ba:	5499      	strb	r1, [r3, r2]

  return status;
 80052bc:	230f      	movs	r3, #15
 80052be:	18fb      	adds	r3, r7, r3
 80052c0:	781b      	ldrb	r3, [r3, #0]
}
 80052c2:	0018      	movs	r0, r3
 80052c4:	46bd      	mov	sp, r7
 80052c6:	b004      	add	sp, #16
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	46c0      	nop			; (mov r8, r8)
 80052cc:	ffff00ff 	.word	0xffff00ff

080052d0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80052d8:	46c0      	nop			; (mov r8, r8)
 80052da:	46bd      	mov	sp, r7
 80052dc:	b002      	add	sp, #8
 80052de:	bd80      	pop	{r7, pc}

080052e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052e8:	46c0      	nop			; (mov r8, r8)
 80052ea:	46bd      	mov	sp, r7
 80052ec:	b002      	add	sp, #8
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052f8:	46c0      	nop			; (mov r8, r8)
 80052fa:	46bd      	mov	sp, r7
 80052fc:	b002      	add	sp, #8
 80052fe:	bd80      	pop	{r7, pc}

08005300 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005308:	46c0      	nop			; (mov r8, r8)
 800530a:	46bd      	mov	sp, r7
 800530c:	b002      	add	sp, #8
 800530e:	bd80      	pop	{r7, pc}

08005310 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a34      	ldr	r2, [pc, #208]	; (80053f4 <TIM_Base_SetConfig+0xe4>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d008      	beq.n	800533a <TIM_Base_SetConfig+0x2a>
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	2380      	movs	r3, #128	; 0x80
 800532c:	05db      	lsls	r3, r3, #23
 800532e:	429a      	cmp	r2, r3
 8005330:	d003      	beq.n	800533a <TIM_Base_SetConfig+0x2a>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a30      	ldr	r2, [pc, #192]	; (80053f8 <TIM_Base_SetConfig+0xe8>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d108      	bne.n	800534c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2270      	movs	r2, #112	; 0x70
 800533e:	4393      	bics	r3, r2
 8005340:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	4313      	orrs	r3, r2
 800534a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a29      	ldr	r2, [pc, #164]	; (80053f4 <TIM_Base_SetConfig+0xe4>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d018      	beq.n	8005386 <TIM_Base_SetConfig+0x76>
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	2380      	movs	r3, #128	; 0x80
 8005358:	05db      	lsls	r3, r3, #23
 800535a:	429a      	cmp	r2, r3
 800535c:	d013      	beq.n	8005386 <TIM_Base_SetConfig+0x76>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a25      	ldr	r2, [pc, #148]	; (80053f8 <TIM_Base_SetConfig+0xe8>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d00f      	beq.n	8005386 <TIM_Base_SetConfig+0x76>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a24      	ldr	r2, [pc, #144]	; (80053fc <TIM_Base_SetConfig+0xec>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d00b      	beq.n	8005386 <TIM_Base_SetConfig+0x76>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a23      	ldr	r2, [pc, #140]	; (8005400 <TIM_Base_SetConfig+0xf0>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d007      	beq.n	8005386 <TIM_Base_SetConfig+0x76>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a22      	ldr	r2, [pc, #136]	; (8005404 <TIM_Base_SetConfig+0xf4>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d003      	beq.n	8005386 <TIM_Base_SetConfig+0x76>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a21      	ldr	r2, [pc, #132]	; (8005408 <TIM_Base_SetConfig+0xf8>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d108      	bne.n	8005398 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	4a20      	ldr	r2, [pc, #128]	; (800540c <TIM_Base_SetConfig+0xfc>)
 800538a:	4013      	ands	r3, r2
 800538c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	4313      	orrs	r3, r2
 8005396:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2280      	movs	r2, #128	; 0x80
 800539c:	4393      	bics	r3, r2
 800539e:	001a      	movs	r2, r3
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	695b      	ldr	r3, [r3, #20]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	689a      	ldr	r2, [r3, #8]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a0c      	ldr	r2, [pc, #48]	; (80053f4 <TIM_Base_SetConfig+0xe4>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d00b      	beq.n	80053de <TIM_Base_SetConfig+0xce>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a0d      	ldr	r2, [pc, #52]	; (8005400 <TIM_Base_SetConfig+0xf0>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d007      	beq.n	80053de <TIM_Base_SetConfig+0xce>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a0c      	ldr	r2, [pc, #48]	; (8005404 <TIM_Base_SetConfig+0xf4>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d003      	beq.n	80053de <TIM_Base_SetConfig+0xce>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a0b      	ldr	r2, [pc, #44]	; (8005408 <TIM_Base_SetConfig+0xf8>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d103      	bne.n	80053e6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	691a      	ldr	r2, [r3, #16]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	615a      	str	r2, [r3, #20]
}
 80053ec:	46c0      	nop			; (mov r8, r8)
 80053ee:	46bd      	mov	sp, r7
 80053f0:	b004      	add	sp, #16
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	40012c00 	.word	0x40012c00
 80053f8:	40000400 	.word	0x40000400
 80053fc:	40002000 	.word	0x40002000
 8005400:	40014000 	.word	0x40014000
 8005404:	40014400 	.word	0x40014400
 8005408:	40014800 	.word	0x40014800
 800540c:	fffffcff 	.word	0xfffffcff

08005410 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	2201      	movs	r2, #1
 8005420:	4393      	bics	r3, r2
 8005422:	001a      	movs	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a1b      	ldr	r3, [r3, #32]
 800542c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2270      	movs	r2, #112	; 0x70
 800543e:	4393      	bics	r3, r2
 8005440:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2203      	movs	r2, #3
 8005446:	4393      	bics	r3, r2
 8005448:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	4313      	orrs	r3, r2
 8005452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	2202      	movs	r2, #2
 8005458:	4393      	bics	r3, r2
 800545a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	4313      	orrs	r3, r2
 8005464:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a27      	ldr	r2, [pc, #156]	; (8005508 <TIM_OC1_SetConfig+0xf8>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d00b      	beq.n	8005486 <TIM_OC1_SetConfig+0x76>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a26      	ldr	r2, [pc, #152]	; (800550c <TIM_OC1_SetConfig+0xfc>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d007      	beq.n	8005486 <TIM_OC1_SetConfig+0x76>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a25      	ldr	r2, [pc, #148]	; (8005510 <TIM_OC1_SetConfig+0x100>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d003      	beq.n	8005486 <TIM_OC1_SetConfig+0x76>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a24      	ldr	r2, [pc, #144]	; (8005514 <TIM_OC1_SetConfig+0x104>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d10c      	bne.n	80054a0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	2208      	movs	r2, #8
 800548a:	4393      	bics	r3, r2
 800548c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	697a      	ldr	r2, [r7, #20]
 8005494:	4313      	orrs	r3, r2
 8005496:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	2204      	movs	r2, #4
 800549c:	4393      	bics	r3, r2
 800549e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a19      	ldr	r2, [pc, #100]	; (8005508 <TIM_OC1_SetConfig+0xf8>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d00b      	beq.n	80054c0 <TIM_OC1_SetConfig+0xb0>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a18      	ldr	r2, [pc, #96]	; (800550c <TIM_OC1_SetConfig+0xfc>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d007      	beq.n	80054c0 <TIM_OC1_SetConfig+0xb0>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a17      	ldr	r2, [pc, #92]	; (8005510 <TIM_OC1_SetConfig+0x100>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d003      	beq.n	80054c0 <TIM_OC1_SetConfig+0xb0>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a16      	ldr	r2, [pc, #88]	; (8005514 <TIM_OC1_SetConfig+0x104>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d111      	bne.n	80054e4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	4a15      	ldr	r2, [pc, #84]	; (8005518 <TIM_OC1_SetConfig+0x108>)
 80054c4:	4013      	ands	r3, r2
 80054c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	4a14      	ldr	r2, [pc, #80]	; (800551c <TIM_OC1_SetConfig+0x10c>)
 80054cc:	4013      	ands	r3, r2
 80054ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	695b      	ldr	r3, [r3, #20]
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	685a      	ldr	r2, [r3, #4]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	621a      	str	r2, [r3, #32]
}
 80054fe:	46c0      	nop			; (mov r8, r8)
 8005500:	46bd      	mov	sp, r7
 8005502:	b006      	add	sp, #24
 8005504:	bd80      	pop	{r7, pc}
 8005506:	46c0      	nop			; (mov r8, r8)
 8005508:	40012c00 	.word	0x40012c00
 800550c:	40014000 	.word	0x40014000
 8005510:	40014400 	.word	0x40014400
 8005514:	40014800 	.word	0x40014800
 8005518:	fffffeff 	.word	0xfffffeff
 800551c:	fffffdff 	.word	0xfffffdff

08005520 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	2210      	movs	r2, #16
 8005530:	4393      	bics	r3, r2
 8005532:	001a      	movs	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a1b      	ldr	r3, [r3, #32]
 800553c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	4a2e      	ldr	r2, [pc, #184]	; (8005608 <TIM_OC2_SetConfig+0xe8>)
 800554e:	4013      	ands	r3, r2
 8005550:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	4a2d      	ldr	r2, [pc, #180]	; (800560c <TIM_OC2_SetConfig+0xec>)
 8005556:	4013      	ands	r3, r2
 8005558:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	021b      	lsls	r3, r3, #8
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	4313      	orrs	r3, r2
 8005564:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	2220      	movs	r2, #32
 800556a:	4393      	bics	r3, r2
 800556c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	011b      	lsls	r3, r3, #4
 8005574:	697a      	ldr	r2, [r7, #20]
 8005576:	4313      	orrs	r3, r2
 8005578:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a24      	ldr	r2, [pc, #144]	; (8005610 <TIM_OC2_SetConfig+0xf0>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d10d      	bne.n	800559e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	2280      	movs	r2, #128	; 0x80
 8005586:	4393      	bics	r3, r2
 8005588:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	011b      	lsls	r3, r3, #4
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	4313      	orrs	r3, r2
 8005594:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	2240      	movs	r2, #64	; 0x40
 800559a:	4393      	bics	r3, r2
 800559c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a1b      	ldr	r2, [pc, #108]	; (8005610 <TIM_OC2_SetConfig+0xf0>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d00b      	beq.n	80055be <TIM_OC2_SetConfig+0x9e>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a1a      	ldr	r2, [pc, #104]	; (8005614 <TIM_OC2_SetConfig+0xf4>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d007      	beq.n	80055be <TIM_OC2_SetConfig+0x9e>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a19      	ldr	r2, [pc, #100]	; (8005618 <TIM_OC2_SetConfig+0xf8>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d003      	beq.n	80055be <TIM_OC2_SetConfig+0x9e>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a18      	ldr	r2, [pc, #96]	; (800561c <TIM_OC2_SetConfig+0xfc>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d113      	bne.n	80055e6 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	4a17      	ldr	r2, [pc, #92]	; (8005620 <TIM_OC2_SetConfig+0x100>)
 80055c2:	4013      	ands	r3, r2
 80055c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	4a16      	ldr	r2, [pc, #88]	; (8005624 <TIM_OC2_SetConfig+0x104>)
 80055ca:	4013      	ands	r3, r2
 80055cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	693a      	ldr	r2, [r7, #16]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	685a      	ldr	r2, [r3, #4]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	621a      	str	r2, [r3, #32]
}
 8005600:	46c0      	nop			; (mov r8, r8)
 8005602:	46bd      	mov	sp, r7
 8005604:	b006      	add	sp, #24
 8005606:	bd80      	pop	{r7, pc}
 8005608:	ffff8fff 	.word	0xffff8fff
 800560c:	fffffcff 	.word	0xfffffcff
 8005610:	40012c00 	.word	0x40012c00
 8005614:	40014000 	.word	0x40014000
 8005618:	40014400 	.word	0x40014400
 800561c:	40014800 	.word	0x40014800
 8005620:	fffffbff 	.word	0xfffffbff
 8005624:	fffff7ff 	.word	0xfffff7ff

08005628 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b086      	sub	sp, #24
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	4a35      	ldr	r2, [pc, #212]	; (800570c <TIM_OC3_SetConfig+0xe4>)
 8005638:	401a      	ands	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2270      	movs	r2, #112	; 0x70
 8005654:	4393      	bics	r3, r2
 8005656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2203      	movs	r2, #3
 800565c:	4393      	bics	r3, r2
 800565e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	4313      	orrs	r3, r2
 8005668:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	4a28      	ldr	r2, [pc, #160]	; (8005710 <TIM_OC3_SetConfig+0xe8>)
 800566e:	4013      	ands	r3, r2
 8005670:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	021b      	lsls	r3, r3, #8
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	4313      	orrs	r3, r2
 800567c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a24      	ldr	r2, [pc, #144]	; (8005714 <TIM_OC3_SetConfig+0xec>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d10d      	bne.n	80056a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	4a23      	ldr	r2, [pc, #140]	; (8005718 <TIM_OC3_SetConfig+0xf0>)
 800568a:	4013      	ands	r3, r2
 800568c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	021b      	lsls	r3, r3, #8
 8005694:	697a      	ldr	r2, [r7, #20]
 8005696:	4313      	orrs	r3, r2
 8005698:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	4a1f      	ldr	r2, [pc, #124]	; (800571c <TIM_OC3_SetConfig+0xf4>)
 800569e:	4013      	ands	r3, r2
 80056a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a1b      	ldr	r2, [pc, #108]	; (8005714 <TIM_OC3_SetConfig+0xec>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d00b      	beq.n	80056c2 <TIM_OC3_SetConfig+0x9a>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a1c      	ldr	r2, [pc, #112]	; (8005720 <TIM_OC3_SetConfig+0xf8>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d007      	beq.n	80056c2 <TIM_OC3_SetConfig+0x9a>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a1b      	ldr	r2, [pc, #108]	; (8005724 <TIM_OC3_SetConfig+0xfc>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d003      	beq.n	80056c2 <TIM_OC3_SetConfig+0x9a>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a1a      	ldr	r2, [pc, #104]	; (8005728 <TIM_OC3_SetConfig+0x100>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d113      	bne.n	80056ea <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	4a19      	ldr	r2, [pc, #100]	; (800572c <TIM_OC3_SetConfig+0x104>)
 80056c6:	4013      	ands	r3, r2
 80056c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	4a18      	ldr	r2, [pc, #96]	; (8005730 <TIM_OC3_SetConfig+0x108>)
 80056ce:	4013      	ands	r3, r2
 80056d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	011b      	lsls	r3, r3, #4
 80056d8:	693a      	ldr	r2, [r7, #16]
 80056da:	4313      	orrs	r3, r2
 80056dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	011b      	lsls	r3, r3, #4
 80056e4:	693a      	ldr	r2, [r7, #16]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	693a      	ldr	r2, [r7, #16]
 80056ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	685a      	ldr	r2, [r3, #4]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	621a      	str	r2, [r3, #32]
}
 8005704:	46c0      	nop			; (mov r8, r8)
 8005706:	46bd      	mov	sp, r7
 8005708:	b006      	add	sp, #24
 800570a:	bd80      	pop	{r7, pc}
 800570c:	fffffeff 	.word	0xfffffeff
 8005710:	fffffdff 	.word	0xfffffdff
 8005714:	40012c00 	.word	0x40012c00
 8005718:	fffff7ff 	.word	0xfffff7ff
 800571c:	fffffbff 	.word	0xfffffbff
 8005720:	40014000 	.word	0x40014000
 8005724:	40014400 	.word	0x40014400
 8005728:	40014800 	.word	0x40014800
 800572c:	ffffefff 	.word	0xffffefff
 8005730:	ffffdfff 	.word	0xffffdfff

08005734 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b086      	sub	sp, #24
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	4a28      	ldr	r2, [pc, #160]	; (80057e4 <TIM_OC4_SetConfig+0xb0>)
 8005744:	401a      	ands	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	69db      	ldr	r3, [r3, #28]
 800575a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	4a22      	ldr	r2, [pc, #136]	; (80057e8 <TIM_OC4_SetConfig+0xb4>)
 8005760:	4013      	ands	r3, r2
 8005762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	4a21      	ldr	r2, [pc, #132]	; (80057ec <TIM_OC4_SetConfig+0xb8>)
 8005768:	4013      	ands	r3, r2
 800576a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	021b      	lsls	r3, r3, #8
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	4313      	orrs	r3, r2
 8005776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	4a1d      	ldr	r2, [pc, #116]	; (80057f0 <TIM_OC4_SetConfig+0xbc>)
 800577c:	4013      	ands	r3, r2
 800577e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	031b      	lsls	r3, r3, #12
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	4313      	orrs	r3, r2
 800578a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a19      	ldr	r2, [pc, #100]	; (80057f4 <TIM_OC4_SetConfig+0xc0>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d00b      	beq.n	80057ac <TIM_OC4_SetConfig+0x78>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a18      	ldr	r2, [pc, #96]	; (80057f8 <TIM_OC4_SetConfig+0xc4>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d007      	beq.n	80057ac <TIM_OC4_SetConfig+0x78>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a17      	ldr	r2, [pc, #92]	; (80057fc <TIM_OC4_SetConfig+0xc8>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d003      	beq.n	80057ac <TIM_OC4_SetConfig+0x78>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a16      	ldr	r2, [pc, #88]	; (8005800 <TIM_OC4_SetConfig+0xcc>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d109      	bne.n	80057c0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	4a15      	ldr	r2, [pc, #84]	; (8005804 <TIM_OC4_SetConfig+0xd0>)
 80057b0:	4013      	ands	r3, r2
 80057b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	695b      	ldr	r3, [r3, #20]
 80057b8:	019b      	lsls	r3, r3, #6
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	4313      	orrs	r3, r2
 80057be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	685a      	ldr	r2, [r3, #4]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	693a      	ldr	r2, [r7, #16]
 80057d8:	621a      	str	r2, [r3, #32]
}
 80057da:	46c0      	nop			; (mov r8, r8)
 80057dc:	46bd      	mov	sp, r7
 80057de:	b006      	add	sp, #24
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	46c0      	nop			; (mov r8, r8)
 80057e4:	ffffefff 	.word	0xffffefff
 80057e8:	ffff8fff 	.word	0xffff8fff
 80057ec:	fffffcff 	.word	0xfffffcff
 80057f0:	ffffdfff 	.word	0xffffdfff
 80057f4:	40012c00 	.word	0x40012c00
 80057f8:	40014000 	.word	0x40014000
 80057fc:	40014400 	.word	0x40014400
 8005800:	40014800 	.word	0x40014800
 8005804:	ffffbfff 	.word	0xffffbfff

08005808 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b086      	sub	sp, #24
 800580c:	af00      	add	r7, sp, #0
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6a1b      	ldr	r3, [r3, #32]
 8005818:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	2201      	movs	r2, #1
 8005820:	4393      	bics	r3, r2
 8005822:	001a      	movs	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	699b      	ldr	r3, [r3, #24]
 800582c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	22f0      	movs	r2, #240	; 0xf0
 8005832:	4393      	bics	r3, r2
 8005834:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	011b      	lsls	r3, r3, #4
 800583a:	693a      	ldr	r2, [r7, #16]
 800583c:	4313      	orrs	r3, r2
 800583e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	220a      	movs	r2, #10
 8005844:	4393      	bics	r3, r2
 8005846:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	4313      	orrs	r3, r2
 800584e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	621a      	str	r2, [r3, #32]
}
 800585c:	46c0      	nop			; (mov r8, r8)
 800585e:	46bd      	mov	sp, r7
 8005860:	b006      	add	sp, #24
 8005862:	bd80      	pop	{r7, pc}

08005864 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b086      	sub	sp, #24
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6a1b      	ldr	r3, [r3, #32]
 8005874:	2210      	movs	r2, #16
 8005876:	4393      	bics	r3, r2
 8005878:	001a      	movs	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6a1b      	ldr	r3, [r3, #32]
 8005888:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	4a0d      	ldr	r2, [pc, #52]	; (80058c4 <TIM_TI2_ConfigInputStage+0x60>)
 800588e:	4013      	ands	r3, r2
 8005890:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	031b      	lsls	r3, r3, #12
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	4313      	orrs	r3, r2
 800589a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	22a0      	movs	r2, #160	; 0xa0
 80058a0:	4393      	bics	r3, r2
 80058a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	011b      	lsls	r3, r3, #4
 80058a8:	693a      	ldr	r2, [r7, #16]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	697a      	ldr	r2, [r7, #20]
 80058b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	621a      	str	r2, [r3, #32]
}
 80058ba:	46c0      	nop			; (mov r8, r8)
 80058bc:	46bd      	mov	sp, r7
 80058be:	b006      	add	sp, #24
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	46c0      	nop			; (mov r8, r8)
 80058c4:	ffff0fff 	.word	0xffff0fff

080058c8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2270      	movs	r2, #112	; 0x70
 80058dc:	4393      	bics	r3, r2
 80058de:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058e0:	683a      	ldr	r2, [r7, #0]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	2207      	movs	r2, #7
 80058e8:	4313      	orrs	r3, r2
 80058ea:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	609a      	str	r2, [r3, #8]
}
 80058f2:	46c0      	nop			; (mov r8, r8)
 80058f4:	46bd      	mov	sp, r7
 80058f6:	b004      	add	sp, #16
 80058f8:	bd80      	pop	{r7, pc}
	...

080058fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b086      	sub	sp, #24
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]
 8005908:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	4a09      	ldr	r2, [pc, #36]	; (8005938 <TIM_ETR_SetConfig+0x3c>)
 8005914:	4013      	ands	r3, r2
 8005916:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	021a      	lsls	r2, r3, #8
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	431a      	orrs	r2, r3
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	4313      	orrs	r3, r2
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	4313      	orrs	r3, r2
 8005928:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	697a      	ldr	r2, [r7, #20]
 800592e:	609a      	str	r2, [r3, #8]
}
 8005930:	46c0      	nop			; (mov r8, r8)
 8005932:	46bd      	mov	sp, r7
 8005934:	b006      	add	sp, #24
 8005936:	bd80      	pop	{r7, pc}
 8005938:	ffff00ff 	.word	0xffff00ff

0800593c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b086      	sub	sp, #24
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	221f      	movs	r2, #31
 800594c:	4013      	ands	r3, r2
 800594e:	2201      	movs	r2, #1
 8005950:	409a      	lsls	r2, r3
 8005952:	0013      	movs	r3, r2
 8005954:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	43d2      	mvns	r2, r2
 800595e:	401a      	ands	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6a1a      	ldr	r2, [r3, #32]
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	211f      	movs	r1, #31
 800596c:	400b      	ands	r3, r1
 800596e:	6879      	ldr	r1, [r7, #4]
 8005970:	4099      	lsls	r1, r3
 8005972:	000b      	movs	r3, r1
 8005974:	431a      	orrs	r2, r3
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	621a      	str	r2, [r3, #32]
}
 800597a:	46c0      	nop			; (mov r8, r8)
 800597c:	46bd      	mov	sp, r7
 800597e:	b006      	add	sp, #24
 8005980:	bd80      	pop	{r7, pc}
	...

08005984 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	223c      	movs	r2, #60	; 0x3c
 8005992:	5c9b      	ldrb	r3, [r3, r2]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d101      	bne.n	800599c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005998:	2302      	movs	r3, #2
 800599a:	e047      	b.n	8005a2c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	223c      	movs	r2, #60	; 0x3c
 80059a0:	2101      	movs	r1, #1
 80059a2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	223d      	movs	r2, #61	; 0x3d
 80059a8:	2102      	movs	r1, #2
 80059aa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2270      	movs	r2, #112	; 0x70
 80059c0:	4393      	bics	r3, r2
 80059c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a16      	ldr	r2, [pc, #88]	; (8005a34 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d00f      	beq.n	8005a00 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	2380      	movs	r3, #128	; 0x80
 80059e6:	05db      	lsls	r3, r3, #23
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d009      	beq.n	8005a00 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a11      	ldr	r2, [pc, #68]	; (8005a38 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d004      	beq.n	8005a00 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a10      	ldr	r2, [pc, #64]	; (8005a3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d10c      	bne.n	8005a1a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	2280      	movs	r2, #128	; 0x80
 8005a04:	4393      	bics	r3, r2
 8005a06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	68ba      	ldr	r2, [r7, #8]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68ba      	ldr	r2, [r7, #8]
 8005a18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	223d      	movs	r2, #61	; 0x3d
 8005a1e:	2101      	movs	r1, #1
 8005a20:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	223c      	movs	r2, #60	; 0x3c
 8005a26:	2100      	movs	r1, #0
 8005a28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	0018      	movs	r0, r3
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	b004      	add	sp, #16
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	40012c00 	.word	0x40012c00
 8005a38:	40000400 	.word	0x40000400
 8005a3c:	40014000 	.word	0x40014000

08005a40 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	223c      	movs	r2, #60	; 0x3c
 8005a52:	5c9b      	ldrb	r3, [r3, r2]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d101      	bne.n	8005a5c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005a58:	2302      	movs	r3, #2
 8005a5a:	e03e      	b.n	8005ada <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	223c      	movs	r2, #60	; 0x3c
 8005a60:	2101      	movs	r1, #1
 8005a62:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	22ff      	movs	r2, #255	; 0xff
 8005a68:	4393      	bics	r3, r2
 8005a6a:	001a      	movs	r2, r3
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	4a1b      	ldr	r2, [pc, #108]	; (8005ae4 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8005a78:	401a      	ands	r2, r3
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	4a18      	ldr	r2, [pc, #96]	; (8005ae8 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8005a86:	401a      	ands	r2, r3
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	4a16      	ldr	r2, [pc, #88]	; (8005aec <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8005a94:	401a      	ands	r2, r3
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	4a13      	ldr	r2, [pc, #76]	; (8005af0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8005aa2:	401a      	ands	r2, r3
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	4a11      	ldr	r2, [pc, #68]	; (8005af4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8005ab0:	401a      	ands	r2, r3
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	695b      	ldr	r3, [r3, #20]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	4a0e      	ldr	r2, [pc, #56]	; (8005af8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8005abe:	401a      	ands	r2, r3
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	69db      	ldr	r3, [r3, #28]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	223c      	movs	r2, #60	; 0x3c
 8005ad4:	2100      	movs	r1, #0
 8005ad6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	0018      	movs	r0, r3
 8005adc:	46bd      	mov	sp, r7
 8005ade:	b004      	add	sp, #16
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	46c0      	nop			; (mov r8, r8)
 8005ae4:	fffffcff 	.word	0xfffffcff
 8005ae8:	fffffbff 	.word	0xfffffbff
 8005aec:	fffff7ff 	.word	0xfffff7ff
 8005af0:	ffffefff 	.word	0xffffefff
 8005af4:	ffffdfff 	.word	0xffffdfff
 8005af8:	ffffbfff 	.word	0xffffbfff

08005afc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b04:	46c0      	nop			; (mov r8, r8)
 8005b06:	46bd      	mov	sp, r7
 8005b08:	b002      	add	sp, #8
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b14:	46c0      	nop			; (mov r8, r8)
 8005b16:	46bd      	mov	sp, r7
 8005b18:	b002      	add	sp, #8
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d101      	bne.n	8005b2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e044      	b.n	8005bb8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d107      	bne.n	8005b46 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2274      	movs	r2, #116	; 0x74
 8005b3a:	2100      	movs	r1, #0
 8005b3c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	0018      	movs	r0, r3
 8005b42:	f7fb ff53 	bl	80019ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2224      	movs	r2, #36	; 0x24
 8005b4a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2101      	movs	r1, #1
 8005b58:	438a      	bics	r2, r1
 8005b5a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	0018      	movs	r0, r3
 8005b60:	f000 fc2e 	bl	80063c0 <UART_SetConfig>
 8005b64:	0003      	movs	r3, r0
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d101      	bne.n	8005b6e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e024      	b.n	8005bb8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d003      	beq.n	8005b7e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	0018      	movs	r0, r3
 8005b7a:	f000 fd61 	bl	8006640 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	685a      	ldr	r2, [r3, #4]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	490d      	ldr	r1, [pc, #52]	; (8005bc0 <HAL_UART_Init+0xa4>)
 8005b8a:	400a      	ands	r2, r1
 8005b8c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	689a      	ldr	r2, [r3, #8]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	212a      	movs	r1, #42	; 0x2a
 8005b9a:	438a      	bics	r2, r1
 8005b9c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2101      	movs	r1, #1
 8005baa:	430a      	orrs	r2, r1
 8005bac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	0018      	movs	r0, r3
 8005bb2:	f000 fdf9 	bl	80067a8 <UART_CheckIdleState>
 8005bb6:	0003      	movs	r3, r0
}
 8005bb8:	0018      	movs	r0, r3
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	b002      	add	sp, #8
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	ffffb7ff 	.word	0xffffb7ff

08005bc4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b08a      	sub	sp, #40	; 0x28
 8005bc8:	af02      	add	r7, sp, #8
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	603b      	str	r3, [r7, #0]
 8005bd0:	1dbb      	adds	r3, r7, #6
 8005bd2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bd8:	2b20      	cmp	r3, #32
 8005bda:	d000      	beq.n	8005bde <HAL_UART_Transmit+0x1a>
 8005bdc:	e096      	b.n	8005d0c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d003      	beq.n	8005bec <HAL_UART_Transmit+0x28>
 8005be4:	1dbb      	adds	r3, r7, #6
 8005be6:	881b      	ldrh	r3, [r3, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d101      	bne.n	8005bf0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e08e      	b.n	8005d0e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	689a      	ldr	r2, [r3, #8]
 8005bf4:	2380      	movs	r3, #128	; 0x80
 8005bf6:	015b      	lsls	r3, r3, #5
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d109      	bne.n	8005c10 <HAL_UART_Transmit+0x4c>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d105      	bne.n	8005c10 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	2201      	movs	r2, #1
 8005c08:	4013      	ands	r3, r2
 8005c0a:	d001      	beq.n	8005c10 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e07e      	b.n	8005d0e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2274      	movs	r2, #116	; 0x74
 8005c14:	5c9b      	ldrb	r3, [r3, r2]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d101      	bne.n	8005c1e <HAL_UART_Transmit+0x5a>
 8005c1a:	2302      	movs	r3, #2
 8005c1c:	e077      	b.n	8005d0e <HAL_UART_Transmit+0x14a>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2274      	movs	r2, #116	; 0x74
 8005c22:	2101      	movs	r1, #1
 8005c24:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2280      	movs	r2, #128	; 0x80
 8005c2a:	2100      	movs	r1, #0
 8005c2c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2221      	movs	r2, #33	; 0x21
 8005c32:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c34:	f7fc f80e 	bl	8001c54 <HAL_GetTick>
 8005c38:	0003      	movs	r3, r0
 8005c3a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	1dba      	adds	r2, r7, #6
 8005c40:	2150      	movs	r1, #80	; 0x50
 8005c42:	8812      	ldrh	r2, [r2, #0]
 8005c44:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	1dba      	adds	r2, r7, #6
 8005c4a:	2152      	movs	r1, #82	; 0x52
 8005c4c:	8812      	ldrh	r2, [r2, #0]
 8005c4e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	689a      	ldr	r2, [r3, #8]
 8005c54:	2380      	movs	r3, #128	; 0x80
 8005c56:	015b      	lsls	r3, r3, #5
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d108      	bne.n	8005c6e <HAL_UART_Transmit+0xaa>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d104      	bne.n	8005c6e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8005c64:	2300      	movs	r3, #0
 8005c66:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	61bb      	str	r3, [r7, #24]
 8005c6c:	e003      	b.n	8005c76 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c72:	2300      	movs	r3, #0
 8005c74:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2274      	movs	r2, #116	; 0x74
 8005c7a:	2100      	movs	r1, #0
 8005c7c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8005c7e:	e02d      	b.n	8005cdc <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c80:	697a      	ldr	r2, [r7, #20]
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	9300      	str	r3, [sp, #0]
 8005c88:	0013      	movs	r3, r2
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	2180      	movs	r1, #128	; 0x80
 8005c8e:	f000 fdd3 	bl	8006838 <UART_WaitOnFlagUntilTimeout>
 8005c92:	1e03      	subs	r3, r0, #0
 8005c94:	d001      	beq.n	8005c9a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e039      	b.n	8005d0e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d10b      	bne.n	8005cb8 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	881a      	ldrh	r2, [r3, #0]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	05d2      	lsls	r2, r2, #23
 8005caa:	0dd2      	lsrs	r2, r2, #23
 8005cac:	b292      	uxth	r2, r2
 8005cae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	3302      	adds	r3, #2
 8005cb4:	61bb      	str	r3, [r7, #24]
 8005cb6:	e008      	b.n	8005cca <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	781a      	ldrb	r2, [r3, #0]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	b292      	uxth	r2, r2
 8005cc2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2252      	movs	r2, #82	; 0x52
 8005cce:	5a9b      	ldrh	r3, [r3, r2]
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	b299      	uxth	r1, r3
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2252      	movs	r2, #82	; 0x52
 8005cda:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2252      	movs	r2, #82	; 0x52
 8005ce0:	5a9b      	ldrh	r3, [r3, r2]
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d1cb      	bne.n	8005c80 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	68f8      	ldr	r0, [r7, #12]
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	9300      	str	r3, [sp, #0]
 8005cf0:	0013      	movs	r3, r2
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	2140      	movs	r1, #64	; 0x40
 8005cf6:	f000 fd9f 	bl	8006838 <UART_WaitOnFlagUntilTimeout>
 8005cfa:	1e03      	subs	r3, r0, #0
 8005cfc:	d001      	beq.n	8005d02 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e005      	b.n	8005d0e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2220      	movs	r2, #32
 8005d06:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	e000      	b.n	8005d0e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005d0c:	2302      	movs	r3, #2
  }
}
 8005d0e:	0018      	movs	r0, r3
 8005d10:	46bd      	mov	sp, r7
 8005d12:	b008      	add	sp, #32
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d16:	b580      	push	{r7, lr}
 8005d18:	b088      	sub	sp, #32
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	60f8      	str	r0, [r7, #12]
 8005d1e:	60b9      	str	r1, [r7, #8]
 8005d20:	1dbb      	adds	r3, r7, #6
 8005d22:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d28:	2b20      	cmp	r3, #32
 8005d2a:	d150      	bne.n	8005dce <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d003      	beq.n	8005d3a <HAL_UART_Receive_IT+0x24>
 8005d32:	1dbb      	adds	r3, r7, #6
 8005d34:	881b      	ldrh	r3, [r3, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d101      	bne.n	8005d3e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e048      	b.n	8005dd0 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	689a      	ldr	r2, [r3, #8]
 8005d42:	2380      	movs	r3, #128	; 0x80
 8005d44:	015b      	lsls	r3, r3, #5
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d109      	bne.n	8005d5e <HAL_UART_Receive_IT+0x48>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d105      	bne.n	8005d5e <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	2201      	movs	r2, #1
 8005d56:	4013      	ands	r3, r2
 8005d58:	d001      	beq.n	8005d5e <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e038      	b.n	8005dd0 <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2274      	movs	r2, #116	; 0x74
 8005d62:	5c9b      	ldrb	r3, [r3, r2]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d101      	bne.n	8005d6c <HAL_UART_Receive_IT+0x56>
 8005d68:	2302      	movs	r3, #2
 8005d6a:	e031      	b.n	8005dd0 <HAL_UART_Receive_IT+0xba>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2274      	movs	r2, #116	; 0x74
 8005d70:	2101      	movs	r1, #1
 8005d72:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	685a      	ldr	r2, [r3, #4]
 8005d80:	2380      	movs	r3, #128	; 0x80
 8005d82:	041b      	lsls	r3, r3, #16
 8005d84:	4013      	ands	r3, r2
 8005d86:	d019      	beq.n	8005dbc <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d88:	f3ef 8310 	mrs	r3, PRIMASK
 8005d8c:	613b      	str	r3, [r7, #16]
  return(result);
 8005d8e:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005d90:	61fb      	str	r3, [r7, #28]
 8005d92:	2301      	movs	r3, #1
 8005d94:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	f383 8810 	msr	PRIMASK, r3
}
 8005d9c:	46c0      	nop			; (mov r8, r8)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2180      	movs	r1, #128	; 0x80
 8005daa:	04c9      	lsls	r1, r1, #19
 8005dac:	430a      	orrs	r2, r1
 8005dae:	601a      	str	r2, [r3, #0]
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	f383 8810 	msr	PRIMASK, r3
}
 8005dba:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005dbc:	1dbb      	adds	r3, r7, #6
 8005dbe:	881a      	ldrh	r2, [r3, #0]
 8005dc0:	68b9      	ldr	r1, [r7, #8]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	0018      	movs	r0, r3
 8005dc6:	f000 fdfb 	bl	80069c0 <UART_Start_Receive_IT>
 8005dca:	0003      	movs	r3, r0
 8005dcc:	e000      	b.n	8005dd0 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8005dce:	2302      	movs	r3, #2
  }
}
 8005dd0:	0018      	movs	r0, r3
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	b008      	add	sp, #32
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005dd8:	b590      	push	{r4, r7, lr}
 8005dda:	b0ab      	sub	sp, #172	; 0xac
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	69db      	ldr	r3, [r3, #28]
 8005de6:	22a4      	movs	r2, #164	; 0xa4
 8005de8:	18b9      	adds	r1, r7, r2
 8005dea:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	20a0      	movs	r0, #160	; 0xa0
 8005df4:	1839      	adds	r1, r7, r0
 8005df6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	219c      	movs	r1, #156	; 0x9c
 8005e00:	1879      	adds	r1, r7, r1
 8005e02:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005e04:	0011      	movs	r1, r2
 8005e06:	18bb      	adds	r3, r7, r2
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a99      	ldr	r2, [pc, #612]	; (8006070 <HAL_UART_IRQHandler+0x298>)
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	2298      	movs	r2, #152	; 0x98
 8005e10:	18bc      	adds	r4, r7, r2
 8005e12:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8005e14:	18bb      	adds	r3, r7, r2
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d114      	bne.n	8005e46 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e1c:	187b      	adds	r3, r7, r1
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2220      	movs	r2, #32
 8005e22:	4013      	ands	r3, r2
 8005e24:	d00f      	beq.n	8005e46 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e26:	183b      	adds	r3, r7, r0
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2220      	movs	r2, #32
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	d00a      	beq.n	8005e46 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d100      	bne.n	8005e3a <HAL_UART_IRQHandler+0x62>
 8005e38:	e296      	b.n	8006368 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	0010      	movs	r0, r2
 8005e42:	4798      	blx	r3
      }
      return;
 8005e44:	e290      	b.n	8006368 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005e46:	2398      	movs	r3, #152	; 0x98
 8005e48:	18fb      	adds	r3, r7, r3
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d100      	bne.n	8005e52 <HAL_UART_IRQHandler+0x7a>
 8005e50:	e114      	b.n	800607c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005e52:	239c      	movs	r3, #156	; 0x9c
 8005e54:	18fb      	adds	r3, r7, r3
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	d106      	bne.n	8005e6c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005e5e:	23a0      	movs	r3, #160	; 0xa0
 8005e60:	18fb      	adds	r3, r7, r3
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a83      	ldr	r2, [pc, #524]	; (8006074 <HAL_UART_IRQHandler+0x29c>)
 8005e66:	4013      	ands	r3, r2
 8005e68:	d100      	bne.n	8005e6c <HAL_UART_IRQHandler+0x94>
 8005e6a:	e107      	b.n	800607c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e6c:	23a4      	movs	r3, #164	; 0xa4
 8005e6e:	18fb      	adds	r3, r7, r3
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2201      	movs	r2, #1
 8005e74:	4013      	ands	r3, r2
 8005e76:	d012      	beq.n	8005e9e <HAL_UART_IRQHandler+0xc6>
 8005e78:	23a0      	movs	r3, #160	; 0xa0
 8005e7a:	18fb      	adds	r3, r7, r3
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	2380      	movs	r3, #128	; 0x80
 8005e80:	005b      	lsls	r3, r3, #1
 8005e82:	4013      	ands	r3, r2
 8005e84:	d00b      	beq.n	8005e9e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2280      	movs	r2, #128	; 0x80
 8005e92:	589b      	ldr	r3, [r3, r2]
 8005e94:	2201      	movs	r2, #1
 8005e96:	431a      	orrs	r2, r3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2180      	movs	r1, #128	; 0x80
 8005e9c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e9e:	23a4      	movs	r3, #164	; 0xa4
 8005ea0:	18fb      	adds	r3, r7, r3
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2202      	movs	r2, #2
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	d011      	beq.n	8005ece <HAL_UART_IRQHandler+0xf6>
 8005eaa:	239c      	movs	r3, #156	; 0x9c
 8005eac:	18fb      	adds	r3, r7, r3
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	d00b      	beq.n	8005ece <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2202      	movs	r2, #2
 8005ebc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2280      	movs	r2, #128	; 0x80
 8005ec2:	589b      	ldr	r3, [r3, r2]
 8005ec4:	2204      	movs	r2, #4
 8005ec6:	431a      	orrs	r2, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2180      	movs	r1, #128	; 0x80
 8005ecc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ece:	23a4      	movs	r3, #164	; 0xa4
 8005ed0:	18fb      	adds	r3, r7, r3
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2204      	movs	r2, #4
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	d011      	beq.n	8005efe <HAL_UART_IRQHandler+0x126>
 8005eda:	239c      	movs	r3, #156	; 0x9c
 8005edc:	18fb      	adds	r3, r7, r3
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	d00b      	beq.n	8005efe <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2204      	movs	r2, #4
 8005eec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2280      	movs	r2, #128	; 0x80
 8005ef2:	589b      	ldr	r3, [r3, r2]
 8005ef4:	2202      	movs	r2, #2
 8005ef6:	431a      	orrs	r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2180      	movs	r1, #128	; 0x80
 8005efc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005efe:	23a4      	movs	r3, #164	; 0xa4
 8005f00:	18fb      	adds	r3, r7, r3
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2208      	movs	r2, #8
 8005f06:	4013      	ands	r3, r2
 8005f08:	d017      	beq.n	8005f3a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f0a:	23a0      	movs	r3, #160	; 0xa0
 8005f0c:	18fb      	adds	r3, r7, r3
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2220      	movs	r2, #32
 8005f12:	4013      	ands	r3, r2
 8005f14:	d105      	bne.n	8005f22 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005f16:	239c      	movs	r3, #156	; 0x9c
 8005f18:	18fb      	adds	r3, r7, r3
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f20:	d00b      	beq.n	8005f3a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2208      	movs	r2, #8
 8005f28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2280      	movs	r2, #128	; 0x80
 8005f2e:	589b      	ldr	r3, [r3, r2]
 8005f30:	2208      	movs	r2, #8
 8005f32:	431a      	orrs	r2, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2180      	movs	r1, #128	; 0x80
 8005f38:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005f3a:	23a4      	movs	r3, #164	; 0xa4
 8005f3c:	18fb      	adds	r3, r7, r3
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	2380      	movs	r3, #128	; 0x80
 8005f42:	011b      	lsls	r3, r3, #4
 8005f44:	4013      	ands	r3, r2
 8005f46:	d013      	beq.n	8005f70 <HAL_UART_IRQHandler+0x198>
 8005f48:	23a0      	movs	r3, #160	; 0xa0
 8005f4a:	18fb      	adds	r3, r7, r3
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	2380      	movs	r3, #128	; 0x80
 8005f50:	04db      	lsls	r3, r3, #19
 8005f52:	4013      	ands	r3, r2
 8005f54:	d00c      	beq.n	8005f70 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2280      	movs	r2, #128	; 0x80
 8005f5c:	0112      	lsls	r2, r2, #4
 8005f5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2280      	movs	r2, #128	; 0x80
 8005f64:	589b      	ldr	r3, [r3, r2]
 8005f66:	2220      	movs	r2, #32
 8005f68:	431a      	orrs	r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2180      	movs	r1, #128	; 0x80
 8005f6e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2280      	movs	r2, #128	; 0x80
 8005f74:	589b      	ldr	r3, [r3, r2]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d100      	bne.n	8005f7c <HAL_UART_IRQHandler+0x1a4>
 8005f7a:	e1f7      	b.n	800636c <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005f7c:	23a4      	movs	r3, #164	; 0xa4
 8005f7e:	18fb      	adds	r3, r7, r3
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2220      	movs	r2, #32
 8005f84:	4013      	ands	r3, r2
 8005f86:	d00e      	beq.n	8005fa6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005f88:	23a0      	movs	r3, #160	; 0xa0
 8005f8a:	18fb      	adds	r3, r7, r3
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2220      	movs	r2, #32
 8005f90:	4013      	ands	r3, r2
 8005f92:	d008      	beq.n	8005fa6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d004      	beq.n	8005fa6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	0010      	movs	r0, r2
 8005fa4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2280      	movs	r2, #128	; 0x80
 8005faa:	589b      	ldr	r3, [r3, r2]
 8005fac:	2194      	movs	r1, #148	; 0x94
 8005fae:	187a      	adds	r2, r7, r1
 8005fb0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	2240      	movs	r2, #64	; 0x40
 8005fba:	4013      	ands	r3, r2
 8005fbc:	2b40      	cmp	r3, #64	; 0x40
 8005fbe:	d004      	beq.n	8005fca <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005fc0:	187b      	adds	r3, r7, r1
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2228      	movs	r2, #40	; 0x28
 8005fc6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fc8:	d047      	beq.n	800605a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	0018      	movs	r0, r3
 8005fce:	f000 fd93 	bl	8006af8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	2240      	movs	r2, #64	; 0x40
 8005fda:	4013      	ands	r3, r2
 8005fdc:	2b40      	cmp	r3, #64	; 0x40
 8005fde:	d137      	bne.n	8006050 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fe0:	f3ef 8310 	mrs	r3, PRIMASK
 8005fe4:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005fe6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fe8:	2090      	movs	r0, #144	; 0x90
 8005fea:	183a      	adds	r2, r7, r0
 8005fec:	6013      	str	r3, [r2, #0]
 8005fee:	2301      	movs	r3, #1
 8005ff0:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ff2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ff4:	f383 8810 	msr	PRIMASK, r3
}
 8005ff8:	46c0      	nop			; (mov r8, r8)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	689a      	ldr	r2, [r3, #8]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2140      	movs	r1, #64	; 0x40
 8006006:	438a      	bics	r2, r1
 8006008:	609a      	str	r2, [r3, #8]
 800600a:	183b      	adds	r3, r7, r0
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006010:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006012:	f383 8810 	msr	PRIMASK, r3
}
 8006016:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800601c:	2b00      	cmp	r3, #0
 800601e:	d012      	beq.n	8006046 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006024:	4a14      	ldr	r2, [pc, #80]	; (8006078 <HAL_UART_IRQHandler+0x2a0>)
 8006026:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800602c:	0018      	movs	r0, r3
 800602e:	f7fc fc69 	bl	8002904 <HAL_DMA_Abort_IT>
 8006032:	1e03      	subs	r3, r0, #0
 8006034:	d01a      	beq.n	800606c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800603a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006040:	0018      	movs	r0, r3
 8006042:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006044:	e012      	b.n	800606c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	0018      	movs	r0, r3
 800604a:	f000 f9a5 	bl	8006398 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800604e:	e00d      	b.n	800606c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	0018      	movs	r0, r3
 8006054:	f000 f9a0 	bl	8006398 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006058:	e008      	b.n	800606c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	0018      	movs	r0, r3
 800605e:	f000 f99b 	bl	8006398 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2280      	movs	r2, #128	; 0x80
 8006066:	2100      	movs	r1, #0
 8006068:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800606a:	e17f      	b.n	800636c <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800606c:	46c0      	nop			; (mov r8, r8)
    return;
 800606e:	e17d      	b.n	800636c <HAL_UART_IRQHandler+0x594>
 8006070:	0000080f 	.word	0x0000080f
 8006074:	04000120 	.word	0x04000120
 8006078:	08006bbd 	.word	0x08006bbd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006080:	2b01      	cmp	r3, #1
 8006082:	d000      	beq.n	8006086 <HAL_UART_IRQHandler+0x2ae>
 8006084:	e131      	b.n	80062ea <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006086:	23a4      	movs	r3, #164	; 0xa4
 8006088:	18fb      	adds	r3, r7, r3
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2210      	movs	r2, #16
 800608e:	4013      	ands	r3, r2
 8006090:	d100      	bne.n	8006094 <HAL_UART_IRQHandler+0x2bc>
 8006092:	e12a      	b.n	80062ea <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006094:	23a0      	movs	r3, #160	; 0xa0
 8006096:	18fb      	adds	r3, r7, r3
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2210      	movs	r2, #16
 800609c:	4013      	ands	r3, r2
 800609e:	d100      	bne.n	80060a2 <HAL_UART_IRQHandler+0x2ca>
 80060a0:	e123      	b.n	80062ea <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2210      	movs	r2, #16
 80060a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	2240      	movs	r2, #64	; 0x40
 80060b2:	4013      	ands	r3, r2
 80060b4:	2b40      	cmp	r3, #64	; 0x40
 80060b6:	d000      	beq.n	80060ba <HAL_UART_IRQHandler+0x2e2>
 80060b8:	e09b      	b.n	80061f2 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	685a      	ldr	r2, [r3, #4]
 80060c2:	217e      	movs	r1, #126	; 0x7e
 80060c4:	187b      	adds	r3, r7, r1
 80060c6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80060c8:	187b      	adds	r3, r7, r1
 80060ca:	881b      	ldrh	r3, [r3, #0]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d100      	bne.n	80060d2 <HAL_UART_IRQHandler+0x2fa>
 80060d0:	e14e      	b.n	8006370 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2258      	movs	r2, #88	; 0x58
 80060d6:	5a9b      	ldrh	r3, [r3, r2]
 80060d8:	187a      	adds	r2, r7, r1
 80060da:	8812      	ldrh	r2, [r2, #0]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d300      	bcc.n	80060e2 <HAL_UART_IRQHandler+0x30a>
 80060e0:	e146      	b.n	8006370 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	187a      	adds	r2, r7, r1
 80060e6:	215a      	movs	r1, #90	; 0x5a
 80060e8:	8812      	ldrh	r2, [r2, #0]
 80060ea:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060f0:	699b      	ldr	r3, [r3, #24]
 80060f2:	2b20      	cmp	r3, #32
 80060f4:	d06e      	beq.n	80061d4 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060f6:	f3ef 8310 	mrs	r3, PRIMASK
 80060fa:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80060fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060fe:	67bb      	str	r3, [r7, #120]	; 0x78
 8006100:	2301      	movs	r3, #1
 8006102:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006106:	f383 8810 	msr	PRIMASK, r3
}
 800610a:	46c0      	nop			; (mov r8, r8)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	499a      	ldr	r1, [pc, #616]	; (8006380 <HAL_UART_IRQHandler+0x5a8>)
 8006118:	400a      	ands	r2, r1
 800611a:	601a      	str	r2, [r3, #0]
 800611c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800611e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006122:	f383 8810 	msr	PRIMASK, r3
}
 8006126:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006128:	f3ef 8310 	mrs	r3, PRIMASK
 800612c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800612e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006130:	677b      	str	r3, [r7, #116]	; 0x74
 8006132:	2301      	movs	r3, #1
 8006134:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006136:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006138:	f383 8810 	msr	PRIMASK, r3
}
 800613c:	46c0      	nop			; (mov r8, r8)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	689a      	ldr	r2, [r3, #8]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2101      	movs	r1, #1
 800614a:	438a      	bics	r2, r1
 800614c:	609a      	str	r2, [r3, #8]
 800614e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006150:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006152:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006154:	f383 8810 	msr	PRIMASK, r3
}
 8006158:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800615a:	f3ef 8310 	mrs	r3, PRIMASK
 800615e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006160:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006162:	673b      	str	r3, [r7, #112]	; 0x70
 8006164:	2301      	movs	r3, #1
 8006166:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006168:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800616a:	f383 8810 	msr	PRIMASK, r3
}
 800616e:	46c0      	nop			; (mov r8, r8)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	689a      	ldr	r2, [r3, #8]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2140      	movs	r1, #64	; 0x40
 800617c:	438a      	bics	r2, r1
 800617e:	609a      	str	r2, [r3, #8]
 8006180:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006182:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006184:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006186:	f383 8810 	msr	PRIMASK, r3
}
 800618a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2220      	movs	r2, #32
 8006190:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006198:	f3ef 8310 	mrs	r3, PRIMASK
 800619c:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800619e:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80061a2:	2301      	movs	r3, #1
 80061a4:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061a8:	f383 8810 	msr	PRIMASK, r3
}
 80061ac:	46c0      	nop			; (mov r8, r8)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2110      	movs	r1, #16
 80061ba:	438a      	bics	r2, r1
 80061bc:	601a      	str	r2, [r3, #0]
 80061be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061c4:	f383 8810 	msr	PRIMASK, r3
}
 80061c8:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ce:	0018      	movs	r0, r3
 80061d0:	f7fc fb60 	bl	8002894 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2258      	movs	r2, #88	; 0x58
 80061d8:	5a9a      	ldrh	r2, [r3, r2]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	215a      	movs	r1, #90	; 0x5a
 80061de:	5a5b      	ldrh	r3, [r3, r1]
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	0011      	movs	r1, r2
 80061ea:	0018      	movs	r0, r3
 80061ec:	f000 f8dc 	bl	80063a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80061f0:	e0be      	b.n	8006370 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2258      	movs	r2, #88	; 0x58
 80061f6:	5a99      	ldrh	r1, [r3, r2]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	225a      	movs	r2, #90	; 0x5a
 80061fc:	5a9b      	ldrh	r3, [r3, r2]
 80061fe:	b29a      	uxth	r2, r3
 8006200:	208e      	movs	r0, #142	; 0x8e
 8006202:	183b      	adds	r3, r7, r0
 8006204:	1a8a      	subs	r2, r1, r2
 8006206:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	225a      	movs	r2, #90	; 0x5a
 800620c:	5a9b      	ldrh	r3, [r3, r2]
 800620e:	b29b      	uxth	r3, r3
 8006210:	2b00      	cmp	r3, #0
 8006212:	d100      	bne.n	8006216 <HAL_UART_IRQHandler+0x43e>
 8006214:	e0ae      	b.n	8006374 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8006216:	183b      	adds	r3, r7, r0
 8006218:	881b      	ldrh	r3, [r3, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d100      	bne.n	8006220 <HAL_UART_IRQHandler+0x448>
 800621e:	e0a9      	b.n	8006374 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006220:	f3ef 8310 	mrs	r3, PRIMASK
 8006224:	60fb      	str	r3, [r7, #12]
  return(result);
 8006226:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006228:	2488      	movs	r4, #136	; 0x88
 800622a:	193a      	adds	r2, r7, r4
 800622c:	6013      	str	r3, [r2, #0]
 800622e:	2301      	movs	r3, #1
 8006230:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	f383 8810 	msr	PRIMASK, r3
}
 8006238:	46c0      	nop			; (mov r8, r8)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	494f      	ldr	r1, [pc, #316]	; (8006384 <HAL_UART_IRQHandler+0x5ac>)
 8006246:	400a      	ands	r2, r1
 8006248:	601a      	str	r2, [r3, #0]
 800624a:	193b      	adds	r3, r7, r4
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	f383 8810 	msr	PRIMASK, r3
}
 8006256:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006258:	f3ef 8310 	mrs	r3, PRIMASK
 800625c:	61bb      	str	r3, [r7, #24]
  return(result);
 800625e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006260:	2484      	movs	r4, #132	; 0x84
 8006262:	193a      	adds	r2, r7, r4
 8006264:	6013      	str	r3, [r2, #0]
 8006266:	2301      	movs	r3, #1
 8006268:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	f383 8810 	msr	PRIMASK, r3
}
 8006270:	46c0      	nop			; (mov r8, r8)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	689a      	ldr	r2, [r3, #8]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2101      	movs	r1, #1
 800627e:	438a      	bics	r2, r1
 8006280:	609a      	str	r2, [r3, #8]
 8006282:	193b      	adds	r3, r7, r4
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006288:	6a3b      	ldr	r3, [r7, #32]
 800628a:	f383 8810 	msr	PRIMASK, r3
}
 800628e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2220      	movs	r2, #32
 8006294:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062a2:	f3ef 8310 	mrs	r3, PRIMASK
 80062a6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80062a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062aa:	2480      	movs	r4, #128	; 0x80
 80062ac:	193a      	adds	r2, r7, r4
 80062ae:	6013      	str	r3, [r2, #0]
 80062b0:	2301      	movs	r3, #1
 80062b2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b6:	f383 8810 	msr	PRIMASK, r3
}
 80062ba:	46c0      	nop			; (mov r8, r8)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2110      	movs	r1, #16
 80062c8:	438a      	bics	r2, r1
 80062ca:	601a      	str	r2, [r3, #0]
 80062cc:	193b      	adds	r3, r7, r4
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d4:	f383 8810 	msr	PRIMASK, r3
}
 80062d8:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80062da:	183b      	adds	r3, r7, r0
 80062dc:	881a      	ldrh	r2, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	0011      	movs	r1, r2
 80062e2:	0018      	movs	r0, r3
 80062e4:	f000 f860 	bl	80063a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80062e8:	e044      	b.n	8006374 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80062ea:	23a4      	movs	r3, #164	; 0xa4
 80062ec:	18fb      	adds	r3, r7, r3
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	2380      	movs	r3, #128	; 0x80
 80062f2:	035b      	lsls	r3, r3, #13
 80062f4:	4013      	ands	r3, r2
 80062f6:	d010      	beq.n	800631a <HAL_UART_IRQHandler+0x542>
 80062f8:	239c      	movs	r3, #156	; 0x9c
 80062fa:	18fb      	adds	r3, r7, r3
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	2380      	movs	r3, #128	; 0x80
 8006300:	03db      	lsls	r3, r3, #15
 8006302:	4013      	ands	r3, r2
 8006304:	d009      	beq.n	800631a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2280      	movs	r2, #128	; 0x80
 800630c:	0352      	lsls	r2, r2, #13
 800630e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	0018      	movs	r0, r3
 8006314:	f000 fdfc 	bl	8006f10 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006318:	e02f      	b.n	800637a <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800631a:	23a4      	movs	r3, #164	; 0xa4
 800631c:	18fb      	adds	r3, r7, r3
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	2280      	movs	r2, #128	; 0x80
 8006322:	4013      	ands	r3, r2
 8006324:	d00f      	beq.n	8006346 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006326:	23a0      	movs	r3, #160	; 0xa0
 8006328:	18fb      	adds	r3, r7, r3
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2280      	movs	r2, #128	; 0x80
 800632e:	4013      	ands	r3, r2
 8006330:	d009      	beq.n	8006346 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006336:	2b00      	cmp	r3, #0
 8006338:	d01e      	beq.n	8006378 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	0010      	movs	r0, r2
 8006342:	4798      	blx	r3
    }
    return;
 8006344:	e018      	b.n	8006378 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006346:	23a4      	movs	r3, #164	; 0xa4
 8006348:	18fb      	adds	r3, r7, r3
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2240      	movs	r2, #64	; 0x40
 800634e:	4013      	ands	r3, r2
 8006350:	d013      	beq.n	800637a <HAL_UART_IRQHandler+0x5a2>
 8006352:	23a0      	movs	r3, #160	; 0xa0
 8006354:	18fb      	adds	r3, r7, r3
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2240      	movs	r2, #64	; 0x40
 800635a:	4013      	ands	r3, r2
 800635c:	d00d      	beq.n	800637a <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	0018      	movs	r0, r3
 8006362:	f000 fc42 	bl	8006bea <UART_EndTransmit_IT>
    return;
 8006366:	e008      	b.n	800637a <HAL_UART_IRQHandler+0x5a2>
      return;
 8006368:	46c0      	nop			; (mov r8, r8)
 800636a:	e006      	b.n	800637a <HAL_UART_IRQHandler+0x5a2>
    return;
 800636c:	46c0      	nop			; (mov r8, r8)
 800636e:	e004      	b.n	800637a <HAL_UART_IRQHandler+0x5a2>
      return;
 8006370:	46c0      	nop			; (mov r8, r8)
 8006372:	e002      	b.n	800637a <HAL_UART_IRQHandler+0x5a2>
      return;
 8006374:	46c0      	nop			; (mov r8, r8)
 8006376:	e000      	b.n	800637a <HAL_UART_IRQHandler+0x5a2>
    return;
 8006378:	46c0      	nop			; (mov r8, r8)
  }

}
 800637a:	46bd      	mov	sp, r7
 800637c:	b02b      	add	sp, #172	; 0xac
 800637e:	bd90      	pop	{r4, r7, pc}
 8006380:	fffffeff 	.word	0xfffffeff
 8006384:	fffffedf 	.word	0xfffffedf

08006388 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006390:	46c0      	nop			; (mov r8, r8)
 8006392:	46bd      	mov	sp, r7
 8006394:	b002      	add	sp, #8
 8006396:	bd80      	pop	{r7, pc}

08006398 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80063a0:	46c0      	nop			; (mov r8, r8)
 80063a2:	46bd      	mov	sp, r7
 80063a4:	b002      	add	sp, #8
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	000a      	movs	r2, r1
 80063b2:	1cbb      	adds	r3, r7, #2
 80063b4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80063b6:	46c0      	nop			; (mov r8, r8)
 80063b8:	46bd      	mov	sp, r7
 80063ba:	b002      	add	sp, #8
 80063bc:	bd80      	pop	{r7, pc}
	...

080063c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b088      	sub	sp, #32
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80063c8:	231e      	movs	r3, #30
 80063ca:	18fb      	adds	r3, r7, r3
 80063cc:	2200      	movs	r2, #0
 80063ce:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	689a      	ldr	r2, [r3, #8]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	431a      	orrs	r2, r3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	695b      	ldr	r3, [r3, #20]
 80063de:	431a      	orrs	r2, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	69db      	ldr	r3, [r3, #28]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a8d      	ldr	r2, [pc, #564]	; (8006624 <UART_SetConfig+0x264>)
 80063f0:	4013      	ands	r3, r2
 80063f2:	0019      	movs	r1, r3
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	697a      	ldr	r2, [r7, #20]
 80063fa:	430a      	orrs	r2, r1
 80063fc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	4a88      	ldr	r2, [pc, #544]	; (8006628 <UART_SetConfig+0x268>)
 8006406:	4013      	ands	r3, r2
 8006408:	0019      	movs	r1, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	68da      	ldr	r2, [r3, #12]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	430a      	orrs	r2, r1
 8006414:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6a1b      	ldr	r3, [r3, #32]
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	4313      	orrs	r3, r2
 8006424:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	4a7f      	ldr	r2, [pc, #508]	; (800662c <UART_SetConfig+0x26c>)
 800642e:	4013      	ands	r3, r2
 8006430:	0019      	movs	r1, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	697a      	ldr	r2, [r7, #20]
 8006438:	430a      	orrs	r2, r1
 800643a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a7b      	ldr	r2, [pc, #492]	; (8006630 <UART_SetConfig+0x270>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d127      	bne.n	8006496 <UART_SetConfig+0xd6>
 8006446:	4b7b      	ldr	r3, [pc, #492]	; (8006634 <UART_SetConfig+0x274>)
 8006448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800644a:	2203      	movs	r2, #3
 800644c:	4013      	ands	r3, r2
 800644e:	2b03      	cmp	r3, #3
 8006450:	d00d      	beq.n	800646e <UART_SetConfig+0xae>
 8006452:	d81b      	bhi.n	800648c <UART_SetConfig+0xcc>
 8006454:	2b02      	cmp	r3, #2
 8006456:	d014      	beq.n	8006482 <UART_SetConfig+0xc2>
 8006458:	d818      	bhi.n	800648c <UART_SetConfig+0xcc>
 800645a:	2b00      	cmp	r3, #0
 800645c:	d002      	beq.n	8006464 <UART_SetConfig+0xa4>
 800645e:	2b01      	cmp	r3, #1
 8006460:	d00a      	beq.n	8006478 <UART_SetConfig+0xb8>
 8006462:	e013      	b.n	800648c <UART_SetConfig+0xcc>
 8006464:	231f      	movs	r3, #31
 8006466:	18fb      	adds	r3, r7, r3
 8006468:	2200      	movs	r2, #0
 800646a:	701a      	strb	r2, [r3, #0]
 800646c:	e021      	b.n	80064b2 <UART_SetConfig+0xf2>
 800646e:	231f      	movs	r3, #31
 8006470:	18fb      	adds	r3, r7, r3
 8006472:	2202      	movs	r2, #2
 8006474:	701a      	strb	r2, [r3, #0]
 8006476:	e01c      	b.n	80064b2 <UART_SetConfig+0xf2>
 8006478:	231f      	movs	r3, #31
 800647a:	18fb      	adds	r3, r7, r3
 800647c:	2204      	movs	r2, #4
 800647e:	701a      	strb	r2, [r3, #0]
 8006480:	e017      	b.n	80064b2 <UART_SetConfig+0xf2>
 8006482:	231f      	movs	r3, #31
 8006484:	18fb      	adds	r3, r7, r3
 8006486:	2208      	movs	r2, #8
 8006488:	701a      	strb	r2, [r3, #0]
 800648a:	e012      	b.n	80064b2 <UART_SetConfig+0xf2>
 800648c:	231f      	movs	r3, #31
 800648e:	18fb      	adds	r3, r7, r3
 8006490:	2210      	movs	r2, #16
 8006492:	701a      	strb	r2, [r3, #0]
 8006494:	e00d      	b.n	80064b2 <UART_SetConfig+0xf2>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a67      	ldr	r2, [pc, #412]	; (8006638 <UART_SetConfig+0x278>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d104      	bne.n	80064aa <UART_SetConfig+0xea>
 80064a0:	231f      	movs	r3, #31
 80064a2:	18fb      	adds	r3, r7, r3
 80064a4:	2200      	movs	r2, #0
 80064a6:	701a      	strb	r2, [r3, #0]
 80064a8:	e003      	b.n	80064b2 <UART_SetConfig+0xf2>
 80064aa:	231f      	movs	r3, #31
 80064ac:	18fb      	adds	r3, r7, r3
 80064ae:	2210      	movs	r2, #16
 80064b0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	69da      	ldr	r2, [r3, #28]
 80064b6:	2380      	movs	r3, #128	; 0x80
 80064b8:	021b      	lsls	r3, r3, #8
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d15d      	bne.n	800657a <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 80064be:	231f      	movs	r3, #31
 80064c0:	18fb      	adds	r3, r7, r3
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	2b08      	cmp	r3, #8
 80064c6:	d015      	beq.n	80064f4 <UART_SetConfig+0x134>
 80064c8:	dc18      	bgt.n	80064fc <UART_SetConfig+0x13c>
 80064ca:	2b04      	cmp	r3, #4
 80064cc:	d00d      	beq.n	80064ea <UART_SetConfig+0x12a>
 80064ce:	dc15      	bgt.n	80064fc <UART_SetConfig+0x13c>
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d002      	beq.n	80064da <UART_SetConfig+0x11a>
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	d005      	beq.n	80064e4 <UART_SetConfig+0x124>
 80064d8:	e010      	b.n	80064fc <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064da:	f7fd fe95 	bl	8004208 <HAL_RCC_GetPCLK1Freq>
 80064de:	0003      	movs	r3, r0
 80064e0:	61bb      	str	r3, [r7, #24]
        break;
 80064e2:	e012      	b.n	800650a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064e4:	4b55      	ldr	r3, [pc, #340]	; (800663c <UART_SetConfig+0x27c>)
 80064e6:	61bb      	str	r3, [r7, #24]
        break;
 80064e8:	e00f      	b.n	800650a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064ea:	f7fd fe1f 	bl	800412c <HAL_RCC_GetSysClockFreq>
 80064ee:	0003      	movs	r3, r0
 80064f0:	61bb      	str	r3, [r7, #24]
        break;
 80064f2:	e00a      	b.n	800650a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064f4:	2380      	movs	r3, #128	; 0x80
 80064f6:	021b      	lsls	r3, r3, #8
 80064f8:	61bb      	str	r3, [r7, #24]
        break;
 80064fa:	e006      	b.n	800650a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80064fc:	2300      	movs	r3, #0
 80064fe:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006500:	231e      	movs	r3, #30
 8006502:	18fb      	adds	r3, r7, r3
 8006504:	2201      	movs	r2, #1
 8006506:	701a      	strb	r2, [r3, #0]
        break;
 8006508:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d100      	bne.n	8006512 <UART_SetConfig+0x152>
 8006510:	e07b      	b.n	800660a <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	005a      	lsls	r2, r3, #1
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	085b      	lsrs	r3, r3, #1
 800651c:	18d2      	adds	r2, r2, r3
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	0019      	movs	r1, r3
 8006524:	0010      	movs	r0, r2
 8006526:	f7f9 fdf7 	bl	8000118 <__udivsi3>
 800652a:	0003      	movs	r3, r0
 800652c:	b29b      	uxth	r3, r3
 800652e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	2b0f      	cmp	r3, #15
 8006534:	d91c      	bls.n	8006570 <UART_SetConfig+0x1b0>
 8006536:	693a      	ldr	r2, [r7, #16]
 8006538:	2380      	movs	r3, #128	; 0x80
 800653a:	025b      	lsls	r3, r3, #9
 800653c:	429a      	cmp	r2, r3
 800653e:	d217      	bcs.n	8006570 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	b29a      	uxth	r2, r3
 8006544:	200e      	movs	r0, #14
 8006546:	183b      	adds	r3, r7, r0
 8006548:	210f      	movs	r1, #15
 800654a:	438a      	bics	r2, r1
 800654c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	085b      	lsrs	r3, r3, #1
 8006552:	b29b      	uxth	r3, r3
 8006554:	2207      	movs	r2, #7
 8006556:	4013      	ands	r3, r2
 8006558:	b299      	uxth	r1, r3
 800655a:	183b      	adds	r3, r7, r0
 800655c:	183a      	adds	r2, r7, r0
 800655e:	8812      	ldrh	r2, [r2, #0]
 8006560:	430a      	orrs	r2, r1
 8006562:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	183a      	adds	r2, r7, r0
 800656a:	8812      	ldrh	r2, [r2, #0]
 800656c:	60da      	str	r2, [r3, #12]
 800656e:	e04c      	b.n	800660a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8006570:	231e      	movs	r3, #30
 8006572:	18fb      	adds	r3, r7, r3
 8006574:	2201      	movs	r2, #1
 8006576:	701a      	strb	r2, [r3, #0]
 8006578:	e047      	b.n	800660a <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800657a:	231f      	movs	r3, #31
 800657c:	18fb      	adds	r3, r7, r3
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	2b08      	cmp	r3, #8
 8006582:	d015      	beq.n	80065b0 <UART_SetConfig+0x1f0>
 8006584:	dc18      	bgt.n	80065b8 <UART_SetConfig+0x1f8>
 8006586:	2b04      	cmp	r3, #4
 8006588:	d00d      	beq.n	80065a6 <UART_SetConfig+0x1e6>
 800658a:	dc15      	bgt.n	80065b8 <UART_SetConfig+0x1f8>
 800658c:	2b00      	cmp	r3, #0
 800658e:	d002      	beq.n	8006596 <UART_SetConfig+0x1d6>
 8006590:	2b02      	cmp	r3, #2
 8006592:	d005      	beq.n	80065a0 <UART_SetConfig+0x1e0>
 8006594:	e010      	b.n	80065b8 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006596:	f7fd fe37 	bl	8004208 <HAL_RCC_GetPCLK1Freq>
 800659a:	0003      	movs	r3, r0
 800659c:	61bb      	str	r3, [r7, #24]
        break;
 800659e:	e012      	b.n	80065c6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065a0:	4b26      	ldr	r3, [pc, #152]	; (800663c <UART_SetConfig+0x27c>)
 80065a2:	61bb      	str	r3, [r7, #24]
        break;
 80065a4:	e00f      	b.n	80065c6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065a6:	f7fd fdc1 	bl	800412c <HAL_RCC_GetSysClockFreq>
 80065aa:	0003      	movs	r3, r0
 80065ac:	61bb      	str	r3, [r7, #24]
        break;
 80065ae:	e00a      	b.n	80065c6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065b0:	2380      	movs	r3, #128	; 0x80
 80065b2:	021b      	lsls	r3, r3, #8
 80065b4:	61bb      	str	r3, [r7, #24]
        break;
 80065b6:	e006      	b.n	80065c6 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 80065b8:	2300      	movs	r3, #0
 80065ba:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80065bc:	231e      	movs	r3, #30
 80065be:	18fb      	adds	r3, r7, r3
 80065c0:	2201      	movs	r2, #1
 80065c2:	701a      	strb	r2, [r3, #0]
        break;
 80065c4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d01e      	beq.n	800660a <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	085a      	lsrs	r2, r3, #1
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	18d2      	adds	r2, r2, r3
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	0019      	movs	r1, r3
 80065dc:	0010      	movs	r0, r2
 80065de:	f7f9 fd9b 	bl	8000118 <__udivsi3>
 80065e2:	0003      	movs	r3, r0
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	2b0f      	cmp	r3, #15
 80065ec:	d909      	bls.n	8006602 <UART_SetConfig+0x242>
 80065ee:	693a      	ldr	r2, [r7, #16]
 80065f0:	2380      	movs	r3, #128	; 0x80
 80065f2:	025b      	lsls	r3, r3, #9
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d204      	bcs.n	8006602 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	693a      	ldr	r2, [r7, #16]
 80065fe:	60da      	str	r2, [r3, #12]
 8006600:	e003      	b.n	800660a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8006602:	231e      	movs	r3, #30
 8006604:	18fb      	adds	r3, r7, r3
 8006606:	2201      	movs	r2, #1
 8006608:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006616:	231e      	movs	r3, #30
 8006618:	18fb      	adds	r3, r7, r3
 800661a:	781b      	ldrb	r3, [r3, #0]
}
 800661c:	0018      	movs	r0, r3
 800661e:	46bd      	mov	sp, r7
 8006620:	b008      	add	sp, #32
 8006622:	bd80      	pop	{r7, pc}
 8006624:	ffff69f3 	.word	0xffff69f3
 8006628:	ffffcfff 	.word	0xffffcfff
 800662c:	fffff4ff 	.word	0xfffff4ff
 8006630:	40013800 	.word	0x40013800
 8006634:	40021000 	.word	0x40021000
 8006638:	40004400 	.word	0x40004400
 800663c:	007a1200 	.word	0x007a1200

08006640 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664c:	2201      	movs	r2, #1
 800664e:	4013      	ands	r3, r2
 8006650:	d00b      	beq.n	800666a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	4a4a      	ldr	r2, [pc, #296]	; (8006784 <UART_AdvFeatureConfig+0x144>)
 800665a:	4013      	ands	r3, r2
 800665c:	0019      	movs	r1, r3
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	430a      	orrs	r2, r1
 8006668:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666e:	2202      	movs	r2, #2
 8006670:	4013      	ands	r3, r2
 8006672:	d00b      	beq.n	800668c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	4a43      	ldr	r2, [pc, #268]	; (8006788 <UART_AdvFeatureConfig+0x148>)
 800667c:	4013      	ands	r3, r2
 800667e:	0019      	movs	r1, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	430a      	orrs	r2, r1
 800668a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006690:	2204      	movs	r2, #4
 8006692:	4013      	ands	r3, r2
 8006694:	d00b      	beq.n	80066ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	4a3b      	ldr	r2, [pc, #236]	; (800678c <UART_AdvFeatureConfig+0x14c>)
 800669e:	4013      	ands	r3, r2
 80066a0:	0019      	movs	r1, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	430a      	orrs	r2, r1
 80066ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b2:	2208      	movs	r2, #8
 80066b4:	4013      	ands	r3, r2
 80066b6:	d00b      	beq.n	80066d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	4a34      	ldr	r2, [pc, #208]	; (8006790 <UART_AdvFeatureConfig+0x150>)
 80066c0:	4013      	ands	r3, r2
 80066c2:	0019      	movs	r1, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	430a      	orrs	r2, r1
 80066ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d4:	2210      	movs	r2, #16
 80066d6:	4013      	ands	r3, r2
 80066d8:	d00b      	beq.n	80066f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	4a2c      	ldr	r2, [pc, #176]	; (8006794 <UART_AdvFeatureConfig+0x154>)
 80066e2:	4013      	ands	r3, r2
 80066e4:	0019      	movs	r1, r3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	430a      	orrs	r2, r1
 80066f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f6:	2220      	movs	r2, #32
 80066f8:	4013      	ands	r3, r2
 80066fa:	d00b      	beq.n	8006714 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	4a25      	ldr	r2, [pc, #148]	; (8006798 <UART_AdvFeatureConfig+0x158>)
 8006704:	4013      	ands	r3, r2
 8006706:	0019      	movs	r1, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	430a      	orrs	r2, r1
 8006712:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006718:	2240      	movs	r2, #64	; 0x40
 800671a:	4013      	ands	r3, r2
 800671c:	d01d      	beq.n	800675a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	4a1d      	ldr	r2, [pc, #116]	; (800679c <UART_AdvFeatureConfig+0x15c>)
 8006726:	4013      	ands	r3, r2
 8006728:	0019      	movs	r1, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	430a      	orrs	r2, r1
 8006734:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800673a:	2380      	movs	r3, #128	; 0x80
 800673c:	035b      	lsls	r3, r3, #13
 800673e:	429a      	cmp	r2, r3
 8006740:	d10b      	bne.n	800675a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	4a15      	ldr	r2, [pc, #84]	; (80067a0 <UART_AdvFeatureConfig+0x160>)
 800674a:	4013      	ands	r3, r2
 800674c:	0019      	movs	r1, r3
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	430a      	orrs	r2, r1
 8006758:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675e:	2280      	movs	r2, #128	; 0x80
 8006760:	4013      	ands	r3, r2
 8006762:	d00b      	beq.n	800677c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	4a0e      	ldr	r2, [pc, #56]	; (80067a4 <UART_AdvFeatureConfig+0x164>)
 800676c:	4013      	ands	r3, r2
 800676e:	0019      	movs	r1, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	430a      	orrs	r2, r1
 800677a:	605a      	str	r2, [r3, #4]
  }
}
 800677c:	46c0      	nop			; (mov r8, r8)
 800677e:	46bd      	mov	sp, r7
 8006780:	b002      	add	sp, #8
 8006782:	bd80      	pop	{r7, pc}
 8006784:	fffdffff 	.word	0xfffdffff
 8006788:	fffeffff 	.word	0xfffeffff
 800678c:	fffbffff 	.word	0xfffbffff
 8006790:	ffff7fff 	.word	0xffff7fff
 8006794:	ffffefff 	.word	0xffffefff
 8006798:	ffffdfff 	.word	0xffffdfff
 800679c:	ffefffff 	.word	0xffefffff
 80067a0:	ff9fffff 	.word	0xff9fffff
 80067a4:	fff7ffff 	.word	0xfff7ffff

080067a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b086      	sub	sp, #24
 80067ac:	af02      	add	r7, sp, #8
 80067ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2280      	movs	r2, #128	; 0x80
 80067b4:	2100      	movs	r1, #0
 80067b6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80067b8:	f7fb fa4c 	bl	8001c54 <HAL_GetTick>
 80067bc:	0003      	movs	r3, r0
 80067be:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2208      	movs	r2, #8
 80067c8:	4013      	ands	r3, r2
 80067ca:	2b08      	cmp	r3, #8
 80067cc:	d10c      	bne.n	80067e8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2280      	movs	r2, #128	; 0x80
 80067d2:	0391      	lsls	r1, r2, #14
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	4a17      	ldr	r2, [pc, #92]	; (8006834 <UART_CheckIdleState+0x8c>)
 80067d8:	9200      	str	r2, [sp, #0]
 80067da:	2200      	movs	r2, #0
 80067dc:	f000 f82c 	bl	8006838 <UART_WaitOnFlagUntilTimeout>
 80067e0:	1e03      	subs	r3, r0, #0
 80067e2:	d001      	beq.n	80067e8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067e4:	2303      	movs	r3, #3
 80067e6:	e021      	b.n	800682c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2204      	movs	r2, #4
 80067f0:	4013      	ands	r3, r2
 80067f2:	2b04      	cmp	r3, #4
 80067f4:	d10c      	bne.n	8006810 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2280      	movs	r2, #128	; 0x80
 80067fa:	03d1      	lsls	r1, r2, #15
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	4a0d      	ldr	r2, [pc, #52]	; (8006834 <UART_CheckIdleState+0x8c>)
 8006800:	9200      	str	r2, [sp, #0]
 8006802:	2200      	movs	r2, #0
 8006804:	f000 f818 	bl	8006838 <UART_WaitOnFlagUntilTimeout>
 8006808:	1e03      	subs	r3, r0, #0
 800680a:	d001      	beq.n	8006810 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800680c:	2303      	movs	r3, #3
 800680e:	e00d      	b.n	800682c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2220      	movs	r2, #32
 8006814:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2220      	movs	r2, #32
 800681a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2274      	movs	r2, #116	; 0x74
 8006826:	2100      	movs	r1, #0
 8006828:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800682a:	2300      	movs	r3, #0
}
 800682c:	0018      	movs	r0, r3
 800682e:	46bd      	mov	sp, r7
 8006830:	b004      	add	sp, #16
 8006832:	bd80      	pop	{r7, pc}
 8006834:	01ffffff 	.word	0x01ffffff

08006838 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b094      	sub	sp, #80	; 0x50
 800683c:	af00      	add	r7, sp, #0
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	60b9      	str	r1, [r7, #8]
 8006842:	603b      	str	r3, [r7, #0]
 8006844:	1dfb      	adds	r3, r7, #7
 8006846:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006848:	e0a3      	b.n	8006992 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800684a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800684c:	3301      	adds	r3, #1
 800684e:	d100      	bne.n	8006852 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006850:	e09f      	b.n	8006992 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006852:	f7fb f9ff 	bl	8001c54 <HAL_GetTick>
 8006856:	0002      	movs	r2, r0
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800685e:	429a      	cmp	r2, r3
 8006860:	d302      	bcc.n	8006868 <UART_WaitOnFlagUntilTimeout+0x30>
 8006862:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006864:	2b00      	cmp	r3, #0
 8006866:	d13d      	bne.n	80068e4 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006868:	f3ef 8310 	mrs	r3, PRIMASK
 800686c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800686e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006870:	647b      	str	r3, [r7, #68]	; 0x44
 8006872:	2301      	movs	r3, #1
 8006874:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006878:	f383 8810 	msr	PRIMASK, r3
}
 800687c:	46c0      	nop			; (mov r8, r8)
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	494c      	ldr	r1, [pc, #304]	; (80069bc <UART_WaitOnFlagUntilTimeout+0x184>)
 800688a:	400a      	ands	r2, r1
 800688c:	601a      	str	r2, [r3, #0]
 800688e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006890:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006894:	f383 8810 	msr	PRIMASK, r3
}
 8006898:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800689a:	f3ef 8310 	mrs	r3, PRIMASK
 800689e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80068a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068a2:	643b      	str	r3, [r7, #64]	; 0x40
 80068a4:	2301      	movs	r3, #1
 80068a6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068aa:	f383 8810 	msr	PRIMASK, r3
}
 80068ae:	46c0      	nop			; (mov r8, r8)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	689a      	ldr	r2, [r3, #8]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2101      	movs	r1, #1
 80068bc:	438a      	bics	r2, r1
 80068be:	609a      	str	r2, [r3, #8]
 80068c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068c6:	f383 8810 	msr	PRIMASK, r3
}
 80068ca:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2220      	movs	r2, #32
 80068d0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2220      	movs	r2, #32
 80068d6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2274      	movs	r2, #116	; 0x74
 80068dc:	2100      	movs	r1, #0
 80068de:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80068e0:	2303      	movs	r3, #3
 80068e2:	e067      	b.n	80069b4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2204      	movs	r2, #4
 80068ec:	4013      	ands	r3, r2
 80068ee:	d050      	beq.n	8006992 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	69da      	ldr	r2, [r3, #28]
 80068f6:	2380      	movs	r3, #128	; 0x80
 80068f8:	011b      	lsls	r3, r3, #4
 80068fa:	401a      	ands	r2, r3
 80068fc:	2380      	movs	r3, #128	; 0x80
 80068fe:	011b      	lsls	r3, r3, #4
 8006900:	429a      	cmp	r2, r3
 8006902:	d146      	bne.n	8006992 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2280      	movs	r2, #128	; 0x80
 800690a:	0112      	lsls	r2, r2, #4
 800690c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800690e:	f3ef 8310 	mrs	r3, PRIMASK
 8006912:	613b      	str	r3, [r7, #16]
  return(result);
 8006914:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006916:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006918:	2301      	movs	r3, #1
 800691a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	f383 8810 	msr	PRIMASK, r3
}
 8006922:	46c0      	nop			; (mov r8, r8)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4923      	ldr	r1, [pc, #140]	; (80069bc <UART_WaitOnFlagUntilTimeout+0x184>)
 8006930:	400a      	ands	r2, r1
 8006932:	601a      	str	r2, [r3, #0]
 8006934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006936:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	f383 8810 	msr	PRIMASK, r3
}
 800693e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006940:	f3ef 8310 	mrs	r3, PRIMASK
 8006944:	61fb      	str	r3, [r7, #28]
  return(result);
 8006946:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006948:	64bb      	str	r3, [r7, #72]	; 0x48
 800694a:	2301      	movs	r3, #1
 800694c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800694e:	6a3b      	ldr	r3, [r7, #32]
 8006950:	f383 8810 	msr	PRIMASK, r3
}
 8006954:	46c0      	nop			; (mov r8, r8)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	689a      	ldr	r2, [r3, #8]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2101      	movs	r1, #1
 8006962:	438a      	bics	r2, r1
 8006964:	609a      	str	r2, [r3, #8]
 8006966:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006968:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800696a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696c:	f383 8810 	msr	PRIMASK, r3
}
 8006970:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2220      	movs	r2, #32
 8006976:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2220      	movs	r2, #32
 800697c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2280      	movs	r2, #128	; 0x80
 8006982:	2120      	movs	r1, #32
 8006984:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2274      	movs	r2, #116	; 0x74
 800698a:	2100      	movs	r1, #0
 800698c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800698e:	2303      	movs	r3, #3
 8006990:	e010      	b.n	80069b4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	69db      	ldr	r3, [r3, #28]
 8006998:	68ba      	ldr	r2, [r7, #8]
 800699a:	4013      	ands	r3, r2
 800699c:	68ba      	ldr	r2, [r7, #8]
 800699e:	1ad3      	subs	r3, r2, r3
 80069a0:	425a      	negs	r2, r3
 80069a2:	4153      	adcs	r3, r2
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	001a      	movs	r2, r3
 80069a8:	1dfb      	adds	r3, r7, #7
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d100      	bne.n	80069b2 <UART_WaitOnFlagUntilTimeout+0x17a>
 80069b0:	e74b      	b.n	800684a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069b2:	2300      	movs	r3, #0
}
 80069b4:	0018      	movs	r0, r3
 80069b6:	46bd      	mov	sp, r7
 80069b8:	b014      	add	sp, #80	; 0x50
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	fffffe5f 	.word	0xfffffe5f

080069c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b08c      	sub	sp, #48	; 0x30
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	1dbb      	adds	r3, r7, #6
 80069cc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	68ba      	ldr	r2, [r7, #8]
 80069d2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	1dba      	adds	r2, r7, #6
 80069d8:	2158      	movs	r1, #88	; 0x58
 80069da:	8812      	ldrh	r2, [r2, #0]
 80069dc:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	1dba      	adds	r2, r7, #6
 80069e2:	215a      	movs	r1, #90	; 0x5a
 80069e4:	8812      	ldrh	r2, [r2, #0]
 80069e6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2200      	movs	r2, #0
 80069ec:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	689a      	ldr	r2, [r3, #8]
 80069f2:	2380      	movs	r3, #128	; 0x80
 80069f4:	015b      	lsls	r3, r3, #5
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d10d      	bne.n	8006a16 <UART_Start_Receive_IT+0x56>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d104      	bne.n	8006a0c <UART_Start_Receive_IT+0x4c>
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	225c      	movs	r2, #92	; 0x5c
 8006a06:	4939      	ldr	r1, [pc, #228]	; (8006aec <UART_Start_Receive_IT+0x12c>)
 8006a08:	5299      	strh	r1, [r3, r2]
 8006a0a:	e01a      	b.n	8006a42 <UART_Start_Receive_IT+0x82>
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	225c      	movs	r2, #92	; 0x5c
 8006a10:	21ff      	movs	r1, #255	; 0xff
 8006a12:	5299      	strh	r1, [r3, r2]
 8006a14:	e015      	b.n	8006a42 <UART_Start_Receive_IT+0x82>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10d      	bne.n	8006a3a <UART_Start_Receive_IT+0x7a>
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d104      	bne.n	8006a30 <UART_Start_Receive_IT+0x70>
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	225c      	movs	r2, #92	; 0x5c
 8006a2a:	21ff      	movs	r1, #255	; 0xff
 8006a2c:	5299      	strh	r1, [r3, r2]
 8006a2e:	e008      	b.n	8006a42 <UART_Start_Receive_IT+0x82>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	225c      	movs	r2, #92	; 0x5c
 8006a34:	217f      	movs	r1, #127	; 0x7f
 8006a36:	5299      	strh	r1, [r3, r2]
 8006a38:	e003      	b.n	8006a42 <UART_Start_Receive_IT+0x82>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	225c      	movs	r2, #92	; 0x5c
 8006a3e:	2100      	movs	r1, #0
 8006a40:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2280      	movs	r2, #128	; 0x80
 8006a46:	2100      	movs	r1, #0
 8006a48:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2222      	movs	r2, #34	; 0x22
 8006a4e:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a50:	f3ef 8310 	mrs	r3, PRIMASK
 8006a54:	61fb      	str	r3, [r7, #28]
  return(result);
 8006a56:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a5e:	6a3b      	ldr	r3, [r7, #32]
 8006a60:	f383 8810 	msr	PRIMASK, r3
}
 8006a64:	46c0      	nop			; (mov r8, r8)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	689a      	ldr	r2, [r3, #8]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2101      	movs	r1, #1
 8006a72:	430a      	orrs	r2, r1
 8006a74:	609a      	str	r2, [r3, #8]
 8006a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a78:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7c:	f383 8810 	msr	PRIMASK, r3
}
 8006a80:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	689a      	ldr	r2, [r3, #8]
 8006a86:	2380      	movs	r3, #128	; 0x80
 8006a88:	015b      	lsls	r3, r3, #5
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d107      	bne.n	8006a9e <UART_Start_Receive_IT+0xde>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d103      	bne.n	8006a9e <UART_Start_Receive_IT+0xde>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	4a15      	ldr	r2, [pc, #84]	; (8006af0 <UART_Start_Receive_IT+0x130>)
 8006a9a:	665a      	str	r2, [r3, #100]	; 0x64
 8006a9c:	e002      	b.n	8006aa4 <UART_Start_Receive_IT+0xe4>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	4a14      	ldr	r2, [pc, #80]	; (8006af4 <UART_Start_Receive_IT+0x134>)
 8006aa2:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2274      	movs	r2, #116	; 0x74
 8006aa8:	2100      	movs	r1, #0
 8006aaa:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006aac:	f3ef 8310 	mrs	r3, PRIMASK
 8006ab0:	613b      	str	r3, [r7, #16]
  return(result);
 8006ab2:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006ab4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	f383 8810 	msr	PRIMASK, r3
}
 8006ac0:	46c0      	nop			; (mov r8, r8)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2190      	movs	r1, #144	; 0x90
 8006ace:	0049      	lsls	r1, r1, #1
 8006ad0:	430a      	orrs	r2, r1
 8006ad2:	601a      	str	r2, [r3, #0]
 8006ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	f383 8810 	msr	PRIMASK, r3
}
 8006ade:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	0018      	movs	r0, r3
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	b00c      	add	sp, #48	; 0x30
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	46c0      	nop			; (mov r8, r8)
 8006aec:	000001ff 	.word	0x000001ff
 8006af0:	08006da9 	.word	0x08006da9
 8006af4:	08006c41 	.word	0x08006c41

08006af8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b08e      	sub	sp, #56	; 0x38
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b00:	f3ef 8310 	mrs	r3, PRIMASK
 8006b04:	617b      	str	r3, [r7, #20]
  return(result);
 8006b06:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b08:	637b      	str	r3, [r7, #52]	; 0x34
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	f383 8810 	msr	PRIMASK, r3
}
 8006b14:	46c0      	nop			; (mov r8, r8)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4925      	ldr	r1, [pc, #148]	; (8006bb8 <UART_EndRxTransfer+0xc0>)
 8006b22:	400a      	ands	r2, r1
 8006b24:	601a      	str	r2, [r3, #0]
 8006b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b28:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	f383 8810 	msr	PRIMASK, r3
}
 8006b30:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b32:	f3ef 8310 	mrs	r3, PRIMASK
 8006b36:	623b      	str	r3, [r7, #32]
  return(result);
 8006b38:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b3a:	633b      	str	r3, [r7, #48]	; 0x30
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b42:	f383 8810 	msr	PRIMASK, r3
}
 8006b46:	46c0      	nop			; (mov r8, r8)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	689a      	ldr	r2, [r3, #8]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2101      	movs	r1, #1
 8006b54:	438a      	bics	r2, r1
 8006b56:	609a      	str	r2, [r3, #8]
 8006b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5e:	f383 8810 	msr	PRIMASK, r3
}
 8006b62:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d118      	bne.n	8006b9e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b6c:	f3ef 8310 	mrs	r3, PRIMASK
 8006b70:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b72:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b76:	2301      	movs	r3, #1
 8006b78:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f383 8810 	msr	PRIMASK, r3
}
 8006b80:	46c0      	nop			; (mov r8, r8)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2110      	movs	r1, #16
 8006b8e:	438a      	bics	r2, r1
 8006b90:	601a      	str	r2, [r3, #0]
 8006b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	f383 8810 	msr	PRIMASK, r3
}
 8006b9c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2220      	movs	r2, #32
 8006ba2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006bb0:	46c0      	nop			; (mov r8, r8)
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	b00e      	add	sp, #56	; 0x38
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	fffffedf 	.word	0xfffffedf

08006bbc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	225a      	movs	r2, #90	; 0x5a
 8006bce:	2100      	movs	r1, #0
 8006bd0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2252      	movs	r2, #82	; 0x52
 8006bd6:	2100      	movs	r1, #0
 8006bd8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	0018      	movs	r0, r3
 8006bde:	f7ff fbdb 	bl	8006398 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006be2:	46c0      	nop			; (mov r8, r8)
 8006be4:	46bd      	mov	sp, r7
 8006be6:	b004      	add	sp, #16
 8006be8:	bd80      	pop	{r7, pc}

08006bea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006bea:	b580      	push	{r7, lr}
 8006bec:	b086      	sub	sp, #24
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bf2:	f3ef 8310 	mrs	r3, PRIMASK
 8006bf6:	60bb      	str	r3, [r7, #8]
  return(result);
 8006bf8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006bfa:	617b      	str	r3, [r7, #20]
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f383 8810 	msr	PRIMASK, r3
}
 8006c06:	46c0      	nop			; (mov r8, r8)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2140      	movs	r1, #64	; 0x40
 8006c14:	438a      	bics	r2, r1
 8006c16:	601a      	str	r2, [r3, #0]
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	f383 8810 	msr	PRIMASK, r3
}
 8006c22:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2220      	movs	r2, #32
 8006c28:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	0018      	movs	r0, r3
 8006c34:	f7ff fba8 	bl	8006388 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c38:	46c0      	nop			; (mov r8, r8)
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	b006      	add	sp, #24
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b090      	sub	sp, #64	; 0x40
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006c48:	203e      	movs	r0, #62	; 0x3e
 8006c4a:	183b      	adds	r3, r7, r0
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	215c      	movs	r1, #92	; 0x5c
 8006c50:	5a52      	ldrh	r2, [r2, r1]
 8006c52:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c58:	2b22      	cmp	r3, #34	; 0x22
 8006c5a:	d000      	beq.n	8006c5e <UART_RxISR_8BIT+0x1e>
 8006c5c:	e095      	b.n	8006d8a <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	213c      	movs	r1, #60	; 0x3c
 8006c64:	187b      	adds	r3, r7, r1
 8006c66:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8006c68:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006c6a:	187b      	adds	r3, r7, r1
 8006c6c:	881b      	ldrh	r3, [r3, #0]
 8006c6e:	b2da      	uxtb	r2, r3
 8006c70:	183b      	adds	r3, r7, r0
 8006c72:	881b      	ldrh	r3, [r3, #0]
 8006c74:	b2d9      	uxtb	r1, r3
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c7a:	400a      	ands	r2, r1
 8006c7c:	b2d2      	uxtb	r2, r2
 8006c7e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c84:	1c5a      	adds	r2, r3, #1
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	225a      	movs	r2, #90	; 0x5a
 8006c8e:	5a9b      	ldrh	r3, [r3, r2]
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	3b01      	subs	r3, #1
 8006c94:	b299      	uxth	r1, r3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	225a      	movs	r2, #90	; 0x5a
 8006c9a:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	225a      	movs	r2, #90	; 0x5a
 8006ca0:	5a9b      	ldrh	r3, [r3, r2]
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d178      	bne.n	8006d9a <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ca8:	f3ef 8310 	mrs	r3, PRIMASK
 8006cac:	61bb      	str	r3, [r7, #24]
  return(result);
 8006cae:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	f383 8810 	msr	PRIMASK, r3
}
 8006cbc:	46c0      	nop			; (mov r8, r8)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4936      	ldr	r1, [pc, #216]	; (8006da4 <UART_RxISR_8BIT+0x164>)
 8006cca:	400a      	ands	r2, r1
 8006ccc:	601a      	str	r2, [r3, #0]
 8006cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cd2:	6a3b      	ldr	r3, [r7, #32]
 8006cd4:	f383 8810 	msr	PRIMASK, r3
}
 8006cd8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cda:	f3ef 8310 	mrs	r3, PRIMASK
 8006cde:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ce2:	637b      	str	r3, [r7, #52]	; 0x34
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cea:	f383 8810 	msr	PRIMASK, r3
}
 8006cee:	46c0      	nop			; (mov r8, r8)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	689a      	ldr	r2, [r3, #8]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2101      	movs	r1, #1
 8006cfc:	438a      	bics	r2, r1
 8006cfe:	609a      	str	r2, [r3, #8]
 8006d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d06:	f383 8810 	msr	PRIMASK, r3
}
 8006d0a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2220      	movs	r2, #32
 8006d10:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d12f      	bne.n	8006d80 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d26:	f3ef 8310 	mrs	r3, PRIMASK
 8006d2a:	60fb      	str	r3, [r7, #12]
  return(result);
 8006d2c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d2e:	633b      	str	r3, [r7, #48]	; 0x30
 8006d30:	2301      	movs	r3, #1
 8006d32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	f383 8810 	msr	PRIMASK, r3
}
 8006d3a:	46c0      	nop			; (mov r8, r8)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	2110      	movs	r1, #16
 8006d48:	438a      	bics	r2, r1
 8006d4a:	601a      	str	r2, [r3, #0]
 8006d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	f383 8810 	msr	PRIMASK, r3
}
 8006d56:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	69db      	ldr	r3, [r3, #28]
 8006d5e:	2210      	movs	r2, #16
 8006d60:	4013      	ands	r3, r2
 8006d62:	2b10      	cmp	r3, #16
 8006d64:	d103      	bne.n	8006d6e <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2210      	movs	r2, #16
 8006d6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2258      	movs	r2, #88	; 0x58
 8006d72:	5a9a      	ldrh	r2, [r3, r2]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	0011      	movs	r1, r2
 8006d78:	0018      	movs	r0, r3
 8006d7a:	f7ff fb15 	bl	80063a8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d7e:	e00c      	b.n	8006d9a <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	0018      	movs	r0, r3
 8006d84:	f7f9 fdd6 	bl	8000934 <HAL_UART_RxCpltCallback>
}
 8006d88:	e007      	b.n	8006d9a <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	699a      	ldr	r2, [r3, #24]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	2108      	movs	r1, #8
 8006d96:	430a      	orrs	r2, r1
 8006d98:	619a      	str	r2, [r3, #24]
}
 8006d9a:	46c0      	nop			; (mov r8, r8)
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	b010      	add	sp, #64	; 0x40
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	46c0      	nop			; (mov r8, r8)
 8006da4:	fffffedf 	.word	0xfffffedf

08006da8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b090      	sub	sp, #64	; 0x40
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006db0:	203e      	movs	r0, #62	; 0x3e
 8006db2:	183b      	adds	r3, r7, r0
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	215c      	movs	r1, #92	; 0x5c
 8006db8:	5a52      	ldrh	r2, [r2, r1]
 8006dba:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dc0:	2b22      	cmp	r3, #34	; 0x22
 8006dc2:	d000      	beq.n	8006dc6 <UART_RxISR_16BIT+0x1e>
 8006dc4:	e095      	b.n	8006ef2 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	213c      	movs	r1, #60	; 0x3c
 8006dcc:	187b      	adds	r3, r7, r1
 8006dce:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8006dd0:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dd6:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8006dd8:	187b      	adds	r3, r7, r1
 8006dda:	183a      	adds	r2, r7, r0
 8006ddc:	881b      	ldrh	r3, [r3, #0]
 8006dde:	8812      	ldrh	r2, [r2, #0]
 8006de0:	4013      	ands	r3, r2
 8006de2:	b29a      	uxth	r2, r3
 8006de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dec:	1c9a      	adds	r2, r3, #2
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	225a      	movs	r2, #90	; 0x5a
 8006df6:	5a9b      	ldrh	r3, [r3, r2]
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	b299      	uxth	r1, r3
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	225a      	movs	r2, #90	; 0x5a
 8006e02:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	225a      	movs	r2, #90	; 0x5a
 8006e08:	5a9b      	ldrh	r3, [r3, r2]
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d178      	bne.n	8006f02 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e10:	f3ef 8310 	mrs	r3, PRIMASK
 8006e14:	617b      	str	r3, [r7, #20]
  return(result);
 8006e16:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e18:	637b      	str	r3, [r7, #52]	; 0x34
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	f383 8810 	msr	PRIMASK, r3
}
 8006e24:	46c0      	nop			; (mov r8, r8)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4936      	ldr	r1, [pc, #216]	; (8006f0c <UART_RxISR_16BIT+0x164>)
 8006e32:	400a      	ands	r2, r1
 8006e34:	601a      	str	r2, [r3, #0]
 8006e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e38:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e3a:	69fb      	ldr	r3, [r7, #28]
 8006e3c:	f383 8810 	msr	PRIMASK, r3
}
 8006e40:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e42:	f3ef 8310 	mrs	r3, PRIMASK
 8006e46:	623b      	str	r3, [r7, #32]
  return(result);
 8006e48:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e4a:	633b      	str	r3, [r7, #48]	; 0x30
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e52:	f383 8810 	msr	PRIMASK, r3
}
 8006e56:	46c0      	nop			; (mov r8, r8)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	689a      	ldr	r2, [r3, #8]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2101      	movs	r1, #1
 8006e64:	438a      	bics	r2, r1
 8006e66:	609a      	str	r2, [r3, #8]
 8006e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e6a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e6e:	f383 8810 	msr	PRIMASK, r3
}
 8006e72:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2220      	movs	r2, #32
 8006e78:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d12f      	bne.n	8006ee8 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e8e:	f3ef 8310 	mrs	r3, PRIMASK
 8006e92:	60bb      	str	r3, [r7, #8]
  return(result);
 8006e94:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e98:	2301      	movs	r3, #1
 8006e9a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f383 8810 	msr	PRIMASK, r3
}
 8006ea2:	46c0      	nop			; (mov r8, r8)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2110      	movs	r1, #16
 8006eb0:	438a      	bics	r2, r1
 8006eb2:	601a      	str	r2, [r3, #0]
 8006eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	f383 8810 	msr	PRIMASK, r3
}
 8006ebe:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	69db      	ldr	r3, [r3, #28]
 8006ec6:	2210      	movs	r2, #16
 8006ec8:	4013      	ands	r3, r2
 8006eca:	2b10      	cmp	r3, #16
 8006ecc:	d103      	bne.n	8006ed6 <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	2210      	movs	r2, #16
 8006ed4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2258      	movs	r2, #88	; 0x58
 8006eda:	5a9a      	ldrh	r2, [r3, r2]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	0011      	movs	r1, r2
 8006ee0:	0018      	movs	r0, r3
 8006ee2:	f7ff fa61 	bl	80063a8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ee6:	e00c      	b.n	8006f02 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	0018      	movs	r0, r3
 8006eec:	f7f9 fd22 	bl	8000934 <HAL_UART_RxCpltCallback>
}
 8006ef0:	e007      	b.n	8006f02 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	699a      	ldr	r2, [r3, #24]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2108      	movs	r1, #8
 8006efe:	430a      	orrs	r2, r1
 8006f00:	619a      	str	r2, [r3, #24]
}
 8006f02:	46c0      	nop			; (mov r8, r8)
 8006f04:	46bd      	mov	sp, r7
 8006f06:	b010      	add	sp, #64	; 0x40
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	46c0      	nop			; (mov r8, r8)
 8006f0c:	fffffedf 	.word	0xfffffedf

08006f10 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b082      	sub	sp, #8
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006f18:	46c0      	nop			; (mov r8, r8)
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	b002      	add	sp, #8
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <__libc_init_array>:
 8006f20:	b570      	push	{r4, r5, r6, lr}
 8006f22:	2600      	movs	r6, #0
 8006f24:	4d0c      	ldr	r5, [pc, #48]	; (8006f58 <__libc_init_array+0x38>)
 8006f26:	4c0d      	ldr	r4, [pc, #52]	; (8006f5c <__libc_init_array+0x3c>)
 8006f28:	1b64      	subs	r4, r4, r5
 8006f2a:	10a4      	asrs	r4, r4, #2
 8006f2c:	42a6      	cmp	r6, r4
 8006f2e:	d109      	bne.n	8006f44 <__libc_init_array+0x24>
 8006f30:	2600      	movs	r6, #0
 8006f32:	f000 f835 	bl	8006fa0 <_init>
 8006f36:	4d0a      	ldr	r5, [pc, #40]	; (8006f60 <__libc_init_array+0x40>)
 8006f38:	4c0a      	ldr	r4, [pc, #40]	; (8006f64 <__libc_init_array+0x44>)
 8006f3a:	1b64      	subs	r4, r4, r5
 8006f3c:	10a4      	asrs	r4, r4, #2
 8006f3e:	42a6      	cmp	r6, r4
 8006f40:	d105      	bne.n	8006f4e <__libc_init_array+0x2e>
 8006f42:	bd70      	pop	{r4, r5, r6, pc}
 8006f44:	00b3      	lsls	r3, r6, #2
 8006f46:	58eb      	ldr	r3, [r5, r3]
 8006f48:	4798      	blx	r3
 8006f4a:	3601      	adds	r6, #1
 8006f4c:	e7ee      	b.n	8006f2c <__libc_init_array+0xc>
 8006f4e:	00b3      	lsls	r3, r6, #2
 8006f50:	58eb      	ldr	r3, [r5, r3]
 8006f52:	4798      	blx	r3
 8006f54:	3601      	adds	r6, #1
 8006f56:	e7f2      	b.n	8006f3e <__libc_init_array+0x1e>
 8006f58:	0800719c 	.word	0x0800719c
 8006f5c:	0800719c 	.word	0x0800719c
 8006f60:	0800719c 	.word	0x0800719c
 8006f64:	080071a0 	.word	0x080071a0

08006f68 <memset>:
 8006f68:	0003      	movs	r3, r0
 8006f6a:	1882      	adds	r2, r0, r2
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d100      	bne.n	8006f72 <memset+0xa>
 8006f70:	4770      	bx	lr
 8006f72:	7019      	strb	r1, [r3, #0]
 8006f74:	3301      	adds	r3, #1
 8006f76:	e7f9      	b.n	8006f6c <memset+0x4>

08006f78 <strncpy>:
 8006f78:	0003      	movs	r3, r0
 8006f7a:	b530      	push	{r4, r5, lr}
 8006f7c:	001d      	movs	r5, r3
 8006f7e:	2a00      	cmp	r2, #0
 8006f80:	d006      	beq.n	8006f90 <strncpy+0x18>
 8006f82:	780c      	ldrb	r4, [r1, #0]
 8006f84:	3a01      	subs	r2, #1
 8006f86:	3301      	adds	r3, #1
 8006f88:	702c      	strb	r4, [r5, #0]
 8006f8a:	3101      	adds	r1, #1
 8006f8c:	2c00      	cmp	r4, #0
 8006f8e:	d1f5      	bne.n	8006f7c <strncpy+0x4>
 8006f90:	2100      	movs	r1, #0
 8006f92:	189a      	adds	r2, r3, r2
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d100      	bne.n	8006f9a <strncpy+0x22>
 8006f98:	bd30      	pop	{r4, r5, pc}
 8006f9a:	7019      	strb	r1, [r3, #0]
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	e7f9      	b.n	8006f94 <strncpy+0x1c>

08006fa0 <_init>:
 8006fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fa2:	46c0      	nop			; (mov r8, r8)
 8006fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fa6:	bc08      	pop	{r3}
 8006fa8:	469e      	mov	lr, r3
 8006faa:	4770      	bx	lr

08006fac <_fini>:
 8006fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fae:	46c0      	nop			; (mov r8, r8)
 8006fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fb2:	bc08      	pop	{r3}
 8006fb4:	469e      	mov	lr, r3
 8006fb6:	4770      	bx	lr
