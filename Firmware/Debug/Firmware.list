
Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053cc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  0800548c  0800548c  0001548c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005610  08005610  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005610  08005610  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005610  08005610  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005610  08005610  00015610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005614  08005614  00015614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005618  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  20000010  08005628  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  08005628  00020364  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001506e  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d6b  00000000  00000000  000350e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f0  00000000  00000000  00037e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fba  00000000  00000000  00039248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000135ee  00000000  00000000  0003a202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000182df  00000000  00000000  0004d7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00074eee  00000000  00000000  00065acf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004890  00000000  00000000  000da9c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000df250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005474 	.word	0x08005474

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08005474 	.word	0x08005474

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000224:	f3bf 8f4f 	dsb	sy
}
 8000228:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800022a:	4b04      	ldr	r3, [pc, #16]	; (800023c <__NVIC_SystemReset+0x1c>)
 800022c:	4a04      	ldr	r2, [pc, #16]	; (8000240 <__NVIC_SystemReset+0x20>)
 800022e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000230:	f3bf 8f4f 	dsb	sy
}
 8000234:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000236:	46c0      	nop			; (mov r8, r8)
 8000238:	e7fd      	b.n	8000236 <__NVIC_SystemReset+0x16>
 800023a:	46c0      	nop			; (mov r8, r8)
 800023c:	e000ed00 	.word	0xe000ed00
 8000240:	05fa0004 	.word	0x05fa0004

08000244 <HAL_TIM_OC_DelayElapsedCallback>:
uint8_t PMT_ON = 1;
uint8_t ERPA_ON = 1;
uint8_t HK_ON = 1;

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
//      }
//    }
//  }

  /* Timer 3 also called but doesn't need to do anything on IT */
}
 800024c:	46c0      	nop			; (mov r8, r8)
 800024e:	46bd      	mov	sp, r7
 8000250:	b002      	add	sp, #8
 8000252:	bd80      	pop	{r7, pc}

08000254 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b084      	sub	sp, #16
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]

//  HAL_UART_Receive_IT(&huart1, rx_buf, 1);
  char key = rx_buf[0];
 800025c:	210f      	movs	r1, #15
 800025e:	187b      	adds	r3, r7, r1
 8000260:	4a70      	ldr	r2, [pc, #448]	; (8000424 <HAL_UART_RxCpltCallback+0x1d0>)
 8000262:	7812      	ldrb	r2, [r2, #0]
 8000264:	701a      	strb	r2, [r3, #0]

  switch (key)
 8000266:	187b      	adds	r3, r7, r1
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	3b21      	subs	r3, #33	; 0x21
 800026c:	2b52      	cmp	r3, #82	; 0x52
 800026e:	d900      	bls.n	8000272 <HAL_UART_RxCpltCallback+0x1e>
 8000270:	e0d3      	b.n	800041a <HAL_UART_RxCpltCallback+0x1c6>
 8000272:	009a      	lsls	r2, r3, #2
 8000274:	4b6c      	ldr	r3, [pc, #432]	; (8000428 <HAL_UART_RxCpltCallback+0x1d4>)
 8000276:	18d3      	adds	r3, r2, r3
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	469f      	mov	pc, r3
  {

  case 'G':
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 800027c:	4b6b      	ldr	r3, [pc, #428]	; (800042c <HAL_UART_RxCpltCallback+0x1d8>)
 800027e:	2140      	movs	r1, #64	; 0x40
 8000280:	2201      	movs	r2, #1
 8000282:	0018      	movs	r0, r3
 8000284:	f002 f8ac 	bl	80023e0 <HAL_GPIO_WritePin>
    break;
 8000288:	e0c7      	b.n	800041a <HAL_UART_RxCpltCallback+0x1c6>
  }
  case 'H':
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 800028a:	4b68      	ldr	r3, [pc, #416]	; (800042c <HAL_UART_RxCpltCallback+0x1d8>)
 800028c:	2140      	movs	r1, #64	; 0x40
 800028e:	2200      	movs	r2, #0
 8000290:	0018      	movs	r0, r3
 8000292:	f002 f8a5 	bl	80023e0 <HAL_GPIO_WritePin>
    break;
 8000296:	e0c0      	b.n	800041a <HAL_UART_RxCpltCallback+0x1c6>
  }

  case 'I':
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_SET);
 8000298:	4b64      	ldr	r3, [pc, #400]	; (800042c <HAL_UART_RxCpltCallback+0x1d8>)
 800029a:	2180      	movs	r1, #128	; 0x80
 800029c:	2201      	movs	r2, #1
 800029e:	0018      	movs	r0, r3
 80002a0:	f002 f89e 	bl	80023e0 <HAL_GPIO_WritePin>
    break;
 80002a4:	e0b9      	b.n	800041a <HAL_UART_RxCpltCallback+0x1c6>
  }
  case 'J':
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_RESET);
 80002a6:	4b61      	ldr	r3, [pc, #388]	; (800042c <HAL_UART_RxCpltCallback+0x1d8>)
 80002a8:	2180      	movs	r1, #128	; 0x80
 80002aa:	2200      	movs	r2, #0
 80002ac:	0018      	movs	r0, r3
 80002ae:	f002 f897 	bl	80023e0 <HAL_GPIO_WritePin>
    break;
 80002b2:	e0b2      	b.n	800041a <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '<':
  {
    if (step < 5)
 80002b4:	4b5e      	ldr	r3, [pc, #376]	; (8000430 <HAL_UART_RxCpltCallback+0x1dc>)
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	2b04      	cmp	r3, #4
 80002ba:	d900      	bls.n	80002be <HAL_UART_RxCpltCallback+0x6a>
 80002bc:	e0aa      	b.n	8000414 <HAL_UART_RxCpltCallback+0x1c0>
    {
      step++;
 80002be:	4b5c      	ldr	r3, [pc, #368]	; (8000430 <HAL_UART_RxCpltCallback+0x1dc>)
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	3301      	adds	r3, #1
 80002c4:	b2da      	uxtb	r2, r3
 80002c6:	4b5a      	ldr	r3, [pc, #360]	; (8000430 <HAL_UART_RxCpltCallback+0x1dc>)
 80002c8:	701a      	strb	r2, [r3, #0]
    }
    break;
 80002ca:	e0a3      	b.n	8000414 <HAL_UART_RxCpltCallback+0x1c0>
  }
  case '>':
  {
    if (step > 0)
 80002cc:	4b58      	ldr	r3, [pc, #352]	; (8000430 <HAL_UART_RxCpltCallback+0x1dc>)
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d100      	bne.n	80002d6 <HAL_UART_RxCpltCallback+0x82>
 80002d4:	e0a0      	b.n	8000418 <HAL_UART_RxCpltCallback+0x1c4>
    {
      step--;
 80002d6:	4b56      	ldr	r3, [pc, #344]	; (8000430 <HAL_UART_RxCpltCallback+0x1dc>)
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	3b01      	subs	r3, #1
 80002dc:	b2da      	uxtb	r2, r3
 80002de:	4b54      	ldr	r3, [pc, #336]	; (8000430 <HAL_UART_RxCpltCallback+0x1dc>)
 80002e0:	701a      	strb	r2, [r3, #0]
    }
    break;
 80002e2:	e099      	b.n	8000418 <HAL_UART_RxCpltCallback+0x1c4>
  }
  case 'a':
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 80002e4:	4b53      	ldr	r3, [pc, #332]	; (8000434 <HAL_UART_RxCpltCallback+0x1e0>)
 80002e6:	2120      	movs	r1, #32
 80002e8:	2201      	movs	r2, #1
 80002ea:	0018      	movs	r0, r3
 80002ec:	f002 f878 	bl	80023e0 <HAL_GPIO_WritePin>
    break;
 80002f0:	e093      	b.n	800041a <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '$':
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 80002f2:	4b50      	ldr	r3, [pc, #320]	; (8000434 <HAL_UART_RxCpltCallback+0x1e0>)
 80002f4:	2120      	movs	r1, #32
 80002f6:	2200      	movs	r2, #0
 80002f8:	0018      	movs	r0, r3
 80002fa:	f002 f871 	bl	80023e0 <HAL_GPIO_WritePin>
    break;
 80002fe:	e08c      	b.n	800041a <HAL_UART_RxCpltCallback+0x1c6>
  }
  case 'b':
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000300:	4b4c      	ldr	r3, [pc, #304]	; (8000434 <HAL_UART_RxCpltCallback+0x1e0>)
 8000302:	2140      	movs	r1, #64	; 0x40
 8000304:	2201      	movs	r2, #1
 8000306:	0018      	movs	r0, r3
 8000308:	f002 f86a 	bl	80023e0 <HAL_GPIO_WritePin>
    break;
 800030c:	e085      	b.n	800041a <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '%':
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 800030e:	4b49      	ldr	r3, [pc, #292]	; (8000434 <HAL_UART_RxCpltCallback+0x1e0>)
 8000310:	2140      	movs	r1, #64	; 0x40
 8000312:	2200      	movs	r2, #0
 8000314:	0018      	movs	r0, r3
 8000316:	f002 f863 	bl	80023e0 <HAL_GPIO_WritePin>
    break;
 800031a:	e07e      	b.n	800041a <HAL_UART_RxCpltCallback+0x1c6>
  }
  case 'c':
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 800031c:	4846      	ldr	r0, [pc, #280]	; (8000438 <HAL_UART_RxCpltCallback+0x1e4>)
 800031e:	2380      	movs	r3, #128	; 0x80
 8000320:	00db      	lsls	r3, r3, #3
 8000322:	2201      	movs	r2, #1
 8000324:	0019      	movs	r1, r3
 8000326:	f002 f85b 	bl	80023e0 <HAL_GPIO_WritePin>
    break;
 800032a:	e076      	b.n	800041a <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '^':
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 800032c:	4842      	ldr	r0, [pc, #264]	; (8000438 <HAL_UART_RxCpltCallback+0x1e4>)
 800032e:	2380      	movs	r3, #128	; 0x80
 8000330:	00db      	lsls	r3, r3, #3
 8000332:	2200      	movs	r2, #0
 8000334:	0019      	movs	r1, r3
 8000336:	f002 f853 	bl	80023e0 <HAL_GPIO_WritePin>
    break;
 800033a:	e06e      	b.n	800041a <HAL_UART_RxCpltCallback+0x1c6>
  }
  case 'd':
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 800033c:	483e      	ldr	r0, [pc, #248]	; (8000438 <HAL_UART_RxCpltCallback+0x1e4>)
 800033e:	2380      	movs	r3, #128	; 0x80
 8000340:	019b      	lsls	r3, r3, #6
 8000342:	2201      	movs	r2, #1
 8000344:	0019      	movs	r1, r3
 8000346:	f002 f84b 	bl	80023e0 <HAL_GPIO_WritePin>
    break;
 800034a:	e066      	b.n	800041a <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '&':
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 800034c:	483a      	ldr	r0, [pc, #232]	; (8000438 <HAL_UART_RxCpltCallback+0x1e4>)
 800034e:	2380      	movs	r3, #128	; 0x80
 8000350:	019b      	lsls	r3, r3, #6
 8000352:	2200      	movs	r2, #0
 8000354:	0019      	movs	r1, r3
 8000356:	f002 f843 	bl	80023e0 <HAL_GPIO_WritePin>
    break;
 800035a:	e05e      	b.n	800041a <HAL_UART_RxCpltCallback+0x1c6>
  }
  case 'e':
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 800035c:	4b36      	ldr	r3, [pc, #216]	; (8000438 <HAL_UART_RxCpltCallback+0x1e4>)
 800035e:	2180      	movs	r1, #128	; 0x80
 8000360:	2201      	movs	r2, #1
 8000362:	0018      	movs	r0, r3
 8000364:	f002 f83c 	bl	80023e0 <HAL_GPIO_WritePin>
    break;
 8000368:	e057      	b.n	800041a <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '*':
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 800036a:	4b33      	ldr	r3, [pc, #204]	; (8000438 <HAL_UART_RxCpltCallback+0x1e4>)
 800036c:	2180      	movs	r1, #128	; 0x80
 800036e:	2200      	movs	r2, #0
 8000370:	0018      	movs	r0, r3
 8000372:	f002 f835 	bl	80023e0 <HAL_GPIO_WritePin>
    break;
 8000376:	e050      	b.n	800041a <HAL_UART_RxCpltCallback+0x1c6>
  }
  case 'f':
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000378:	482f      	ldr	r0, [pc, #188]	; (8000438 <HAL_UART_RxCpltCallback+0x1e4>)
 800037a:	2380      	movs	r3, #128	; 0x80
 800037c:	005b      	lsls	r3, r3, #1
 800037e:	2201      	movs	r2, #1
 8000380:	0019      	movs	r1, r3
 8000382:	f002 f82d 	bl	80023e0 <HAL_GPIO_WritePin>
    break;
 8000386:	e048      	b.n	800041a <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '(':
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000388:	482b      	ldr	r0, [pc, #172]	; (8000438 <HAL_UART_RxCpltCallback+0x1e4>)
 800038a:	2380      	movs	r3, #128	; 0x80
 800038c:	005b      	lsls	r3, r3, #1
 800038e:	2200      	movs	r2, #0
 8000390:	0019      	movs	r1, r3
 8000392:	f002 f825 	bl	80023e0 <HAL_GPIO_WritePin>
    break;
 8000396:	e040      	b.n	800041a <HAL_UART_RxCpltCallback+0x1c6>
  }
  case 'g':
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000398:	4827      	ldr	r0, [pc, #156]	; (8000438 <HAL_UART_RxCpltCallback+0x1e4>)
 800039a:	2380      	movs	r3, #128	; 0x80
 800039c:	009b      	lsls	r3, r3, #2
 800039e:	2201      	movs	r2, #1
 80003a0:	0019      	movs	r1, r3
 80003a2:	f002 f81d 	bl	80023e0 <HAL_GPIO_WritePin>
    break;
 80003a6:	e038      	b.n	800041a <HAL_UART_RxCpltCallback+0x1c6>
  }
  case ')':
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 80003a8:	4823      	ldr	r0, [pc, #140]	; (8000438 <HAL_UART_RxCpltCallback+0x1e4>)
 80003aa:	2380      	movs	r3, #128	; 0x80
 80003ac:	009b      	lsls	r3, r3, #2
 80003ae:	2200      	movs	r2, #0
 80003b0:	0019      	movs	r1, r3
 80003b2:	f002 f815 	bl	80023e0 <HAL_GPIO_WritePin>
    break;
 80003b6:	e030      	b.n	800041a <HAL_UART_RxCpltCallback+0x1c6>
  }
  case 'h':
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 80003b8:	4b1f      	ldr	r3, [pc, #124]	; (8000438 <HAL_UART_RxCpltCallback+0x1e4>)
 80003ba:	2140      	movs	r1, #64	; 0x40
 80003bc:	2201      	movs	r2, #1
 80003be:	0018      	movs	r0, r3
 80003c0:	f002 f80e 	bl	80023e0 <HAL_GPIO_WritePin>
    break;
 80003c4:	e029      	b.n	800041a <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '-':
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 80003c6:	4b1c      	ldr	r3, [pc, #112]	; (8000438 <HAL_UART_RxCpltCallback+0x1e4>)
 80003c8:	2140      	movs	r1, #64	; 0x40
 80003ca:	2200      	movs	r2, #0
 80003cc:	0018      	movs	r0, r3
 80003ce:	f002 f807 	bl	80023e0 <HAL_GPIO_WritePin>
    break;
 80003d2:	e022      	b.n	800041a <HAL_UART_RxCpltCallback+0x1c6>
  }
  case 's':
  {
      HAL_SuspendTick();
 80003d4:	f001 f93c 	bl	8001650 <HAL_SuspendTick>
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80003d8:	2101      	movs	r1, #1
 80003da:	2001      	movs	r0, #1
 80003dc:	f002 f94c 	bl	8002678 <HAL_PWR_EnterSTOPMode>
      NVIC_SystemReset();
 80003e0:	f7ff ff1e 	bl	8000220 <__NVIC_SystemReset>
      break;
  }
  case '1':
  {
    PMT_ON = 1;
 80003e4:	4b15      	ldr	r3, [pc, #84]	; (800043c <HAL_UART_RxCpltCallback+0x1e8>)
 80003e6:	2201      	movs	r2, #1
 80003e8:	701a      	strb	r2, [r3, #0]
    break;
 80003ea:	e016      	b.n	800041a <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '!':
  {
    PMT_ON = 0;
 80003ec:	4b13      	ldr	r3, [pc, #76]	; (800043c <HAL_UART_RxCpltCallback+0x1e8>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	701a      	strb	r2, [r3, #0]
    break;
 80003f2:	e012      	b.n	800041a <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '2':
  {
    ERPA_ON = 1;
 80003f4:	4b12      	ldr	r3, [pc, #72]	; (8000440 <HAL_UART_RxCpltCallback+0x1ec>)
 80003f6:	2201      	movs	r2, #1
 80003f8:	701a      	strb	r2, [r3, #0]
    break;
 80003fa:	e00e      	b.n	800041a <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '@':
  {
    ERPA_ON = 0;
 80003fc:	4b10      	ldr	r3, [pc, #64]	; (8000440 <HAL_UART_RxCpltCallback+0x1ec>)
 80003fe:	2200      	movs	r2, #0
 8000400:	701a      	strb	r2, [r3, #0]
    break;
 8000402:	e00a      	b.n	800041a <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '3':
  {
    HK_ON = 1;
 8000404:	4b0f      	ldr	r3, [pc, #60]	; (8000444 <HAL_UART_RxCpltCallback+0x1f0>)
 8000406:	2201      	movs	r2, #1
 8000408:	701a      	strb	r2, [r3, #0]
    break;
 800040a:	e006      	b.n	800041a <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '#':
  {
    HK_ON = 0;
 800040c:	4b0d      	ldr	r3, [pc, #52]	; (8000444 <HAL_UART_RxCpltCallback+0x1f0>)
 800040e:	2200      	movs	r2, #0
 8000410:	701a      	strb	r2, [r3, #0]
    break;
 8000412:	e002      	b.n	800041a <HAL_UART_RxCpltCallback+0x1c6>
    break;
 8000414:	46c0      	nop			; (mov r8, r8)
 8000416:	e000      	b.n	800041a <HAL_UART_RxCpltCallback+0x1c6>
    break;
 8000418:	46c0      	nop			; (mov r8, r8)
  }
  }
}
 800041a:	46c0      	nop			; (mov r8, r8)
 800041c:	46bd      	mov	sp, r7
 800041e:	b004      	add	sp, #16
 8000420:	bd80      	pop	{r7, pc}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	200002ec 	.word	0x200002ec
 8000428:	080054ac 	.word	0x080054ac
 800042c:	48001400 	.word	0x48001400
 8000430:	20000358 	.word	0x20000358
 8000434:	48000400 	.word	0x48000400
 8000438:	48000800 	.word	0x48000800
 800043c:	20000000 	.word	0x20000000
 8000440:	20000001 	.word	0x20000001
 8000444:	20000002 	.word	0x20000002

08000448 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800044e:	f001 f89b 	bl	8001588 <HAL_Init>
  int16_t val;
  float temp_c;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000452:	f000 f871 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000456:	f000 fc75 	bl	8000d44 <MX_GPIO_Init>
  MX_DMA_Init();
 800045a:	f000 fc55 	bl	8000d08 <MX_DMA_Init>
  MX_SPI2_Init();
 800045e:	f000 fa99 	bl	8000994 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000462:	f000 fad7 	bl	8000a14 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000466:	f000 fb8d 	bl	8000b84 <MX_TIM2_Init>
  MX_SPI1_Init();
 800046a:	f000 fa53 	bl	8000914 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800046e:	f000 fc0b 	bl	8000c88 <MX_USART1_UART_Init>
  MX_DAC1_Init();
 8000472:	f000 f9dd 	bl	8000830 <MX_DAC1_Init>
  MX_ADC_Init();
 8000476:	f000 f8c9 	bl	800060c <MX_ADC_Init>
  MX_I2C1_Init();
 800047a:	f000 fa0b 	bl	8000894 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800047e:	4b28      	ldr	r3, [pc, #160]	; (8000520 <main+0xd8>)
 8000480:	2100      	movs	r1, #0
 8000482:	0018      	movs	r0, r3
 8000484:	f001 fc7f 	bl	8001d86 <HAL_DAC_Start>

  /* Start Timers with OC & Interrupt */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000488:	4b26      	ldr	r3, [pc, #152]	; (8000524 <main+0xdc>)
 800048a:	2100      	movs	r1, #0
 800048c:	0018      	movs	r0, r3
 800048e:	f002 ffd1 	bl	8003434 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000492:	4b25      	ldr	r3, [pc, #148]	; (8000528 <main+0xe0>)
 8000494:	210c      	movs	r1, #12
 8000496:	0018      	movs	r0, r3
 8000498:	f002 ffcc 	bl	8003434 <HAL_TIM_OC_Start_IT>

  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 800049c:	46c0      	nop			; (mov r8, r8)
 800049e:	4b23      	ldr	r3, [pc, #140]	; (800052c <main+0xe4>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	69da      	ldr	r2, [r3, #28]
 80004a4:	2380      	movs	r3, #128	; 0x80
 80004a6:	025b      	lsls	r3, r3, #9
 80004a8:	401a      	ands	r2, r3
 80004aa:	2380      	movs	r3, #128	; 0x80
 80004ac:	025b      	lsls	r3, r3, #9
 80004ae:	429a      	cmp	r2, r3
 80004b0:	d0f5      	beq.n	800049e <main+0x56>
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	4b1d      	ldr	r3, [pc, #116]	; (800052c <main+0xe4>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	69da      	ldr	r2, [r3, #28]
 80004ba:	2380      	movs	r3, #128	; 0x80
 80004bc:	03db      	lsls	r3, r3, #15
 80004be:	401a      	ands	r2, r3
 80004c0:	2380      	movs	r3, #128	; 0x80
 80004c2:	03db      	lsls	r3, r3, #15
 80004c4:	429a      	cmp	r2, r3
 80004c6:	d1f5      	bne.n	80004b4 <main+0x6c>

  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_ADDRESS;
 80004c8:	4b19      	ldr	r3, [pc, #100]	; (8000530 <main+0xe8>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
  WakeUpSelection.AddressLength = UART_ADDRESS_DETECT_7B;
 80004ce:	4b18      	ldr	r3, [pc, #96]	; (8000530 <main+0xe8>)
 80004d0:	2210      	movs	r2, #16
 80004d2:	809a      	strh	r2, [r3, #4]
  WakeUpSelection.Address = 0x23; // send "£"
 80004d4:	4b16      	ldr	r3, [pc, #88]	; (8000530 <main+0xe8>)
 80004d6:	2223      	movs	r2, #35	; 0x23
 80004d8:	719a      	strb	r2, [r3, #6]

  if (HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection) != HAL_OK) {
 80004da:	4b15      	ldr	r3, [pc, #84]	; (8000530 <main+0xe8>)
 80004dc:	4813      	ldr	r0, [pc, #76]	; (800052c <main+0xe4>)
 80004de:	6819      	ldr	r1, [r3, #0]
 80004e0:	685a      	ldr	r2, [r3, #4]
 80004e2:	f004 fedf 	bl	80052a4 <HAL_UARTEx_StopModeWakeUpSourceConfig>
 80004e6:	1e03      	subs	r3, r0, #0
 80004e8:	d001      	beq.n	80004ee <main+0xa6>
      Error_Handler();
 80004ea:	f000 fcc5 	bl	8000e78 <Error_Handler>
  }
  /* Enable the LPUART Wake UP from stop mode Interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 80004ee:	4b0f      	ldr	r3, [pc, #60]	; (800052c <main+0xe4>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	689a      	ldr	r2, [r3, #8]
 80004f4:	4b0d      	ldr	r3, [pc, #52]	; (800052c <main+0xe4>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	2180      	movs	r1, #128	; 0x80
 80004fa:	03c9      	lsls	r1, r1, #15
 80004fc:	430a      	orrs	r2, r1
 80004fe:	609a      	str	r2, [r3, #8]

  /* enable MCU wake-up by LPUART */
  HAL_UARTEx_EnableStopMode(&huart1);
 8000500:	4b0a      	ldr	r3, [pc, #40]	; (800052c <main+0xe4>)
 8000502:	0018      	movs	r0, r3
 8000504:	f004 ff34 	bl	8005370 <HAL_UARTEx_EnableStopMode>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_UART_Receive(&huart1, rx_buf, 1, 0);
 8000508:	490a      	ldr	r1, [pc, #40]	; (8000534 <main+0xec>)
 800050a:	4808      	ldr	r0, [pc, #32]	; (800052c <main+0xe4>)
 800050c:	2300      	movs	r3, #0
 800050e:	2201      	movs	r2, #1
 8000510:	f003 ff4c 	bl	80043ac <HAL_UART_Receive>
    HAL_UART_RxCpltCallback(&huart1);
 8000514:	4b05      	ldr	r3, [pc, #20]	; (800052c <main+0xe4>)
 8000516:	0018      	movs	r0, r3
 8000518:	f7ff fe9c 	bl	8000254 <HAL_UART_RxCpltCallback>
    HAL_UART_Receive(&huart1, rx_buf, 1, 0);
 800051c:	e7f4      	b.n	8000508 <main+0xc0>
 800051e:	46c0      	nop			; (mov r8, r8)
 8000520:	200000b0 	.word	0x200000b0
 8000524:	200001d8 	.word	0x200001d8
 8000528:	20000220 	.word	0x20000220
 800052c:	20000268 	.word	0x20000268
 8000530:	20000350 	.word	0x20000350
 8000534:	200002ec 	.word	0x200002ec

08000538 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000538:	b590      	push	{r4, r7, lr}
 800053a:	b097      	sub	sp, #92	; 0x5c
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	2428      	movs	r4, #40	; 0x28
 8000540:	193b      	adds	r3, r7, r4
 8000542:	0018      	movs	r0, r3
 8000544:	2330      	movs	r3, #48	; 0x30
 8000546:	001a      	movs	r2, r3
 8000548:	2100      	movs	r1, #0
 800054a:	f004 ff66 	bl	800541a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054e:	2318      	movs	r3, #24
 8000550:	18fb      	adds	r3, r7, r3
 8000552:	0018      	movs	r0, r3
 8000554:	2310      	movs	r3, #16
 8000556:	001a      	movs	r2, r3
 8000558:	2100      	movs	r1, #0
 800055a:	f004 ff5e 	bl	800541a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800055e:	1d3b      	adds	r3, r7, #4
 8000560:	0018      	movs	r0, r3
 8000562:	2314      	movs	r3, #20
 8000564:	001a      	movs	r2, r3
 8000566:	2100      	movs	r1, #0
 8000568:	f004 ff57 	bl	800541a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_HSI14;
 800056c:	0021      	movs	r1, r4
 800056e:	187b      	adds	r3, r7, r1
 8000570:	2212      	movs	r2, #18
 8000572:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000574:	187b      	adds	r3, r7, r1
 8000576:	2201      	movs	r2, #1
 8000578:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800057a:	187b      	adds	r3, r7, r1
 800057c:	2201      	movs	r2, #1
 800057e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000580:	187b      	adds	r3, r7, r1
 8000582:	2210      	movs	r2, #16
 8000584:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000586:	187b      	adds	r3, r7, r1
 8000588:	2210      	movs	r2, #16
 800058a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2202      	movs	r2, #2
 8000590:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2200      	movs	r2, #0
 8000596:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000598:	187b      	adds	r3, r7, r1
 800059a:	22a0      	movs	r2, #160	; 0xa0
 800059c:	0392      	lsls	r2, r2, #14
 800059e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	2200      	movs	r2, #0
 80005a4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a6:	187b      	adds	r3, r7, r1
 80005a8:	0018      	movs	r0, r3
 80005aa:	f002 f899 	bl	80026e0 <HAL_RCC_OscConfig>
 80005ae:	1e03      	subs	r3, r0, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80005b2:	f000 fc61 	bl	8000e78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 80005b6:	2118      	movs	r1, #24
 80005b8:	187b      	adds	r3, r7, r1
 80005ba:	2207      	movs	r2, #7
 80005bc:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005be:	187b      	adds	r3, r7, r1
 80005c0:	2202      	movs	r2, #2
 80005c2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ca:	187b      	adds	r3, r7, r1
 80005cc:	2200      	movs	r2, #0
 80005ce:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005d0:	187b      	adds	r3, r7, r1
 80005d2:	2101      	movs	r1, #1
 80005d4:	0018      	movs	r0, r3
 80005d6:	f002 fb9d 	bl	8002d14 <HAL_RCC_ClockConfig>
 80005da:	1e03      	subs	r3, r0, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005de:	f000 fc4b 	bl	8000e78 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_I2C1;
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	2221      	movs	r2, #33	; 0x21
 80005e6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	2203      	movs	r2, #3
 80005ec:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	2200      	movs	r2, #0
 80005f2:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005f4:	1d3b      	adds	r3, r7, #4
 80005f6:	0018      	movs	r0, r3
 80005f8:	f002 fcde 	bl	8002fb8 <HAL_RCCEx_PeriphCLKConfig>
 80005fc:	1e03      	subs	r3, r0, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000600:	f000 fc3a 	bl	8000e78 <Error_Handler>
  }
}
 8000604:	46c0      	nop			; (mov r8, r8)
 8000606:	46bd      	mov	sp, r7
 8000608:	b017      	add	sp, #92	; 0x5c
 800060a:	bd90      	pop	{r4, r7, pc}

0800060c <MX_ADC_Init>:
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	0018      	movs	r0, r3
 8000616:	230c      	movs	r3, #12
 8000618:	001a      	movs	r2, r3
 800061a:	2100      	movs	r1, #0
 800061c:	f004 fefd 	bl	800541a <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc.Instance = ADC1;
 8000620:	4b81      	ldr	r3, [pc, #516]	; (8000828 <MX_ADC_Init+0x21c>)
 8000622:	4a82      	ldr	r2, [pc, #520]	; (800082c <MX_ADC_Init+0x220>)
 8000624:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000626:	4b80      	ldr	r3, [pc, #512]	; (8000828 <MX_ADC_Init+0x21c>)
 8000628:	2200      	movs	r2, #0
 800062a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800062c:	4b7e      	ldr	r3, [pc, #504]	; (8000828 <MX_ADC_Init+0x21c>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000632:	4b7d      	ldr	r3, [pc, #500]	; (8000828 <MX_ADC_Init+0x21c>)
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000638:	4b7b      	ldr	r3, [pc, #492]	; (8000828 <MX_ADC_Init+0x21c>)
 800063a:	2201      	movs	r2, #1
 800063c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800063e:	4b7a      	ldr	r3, [pc, #488]	; (8000828 <MX_ADC_Init+0x21c>)
 8000640:	2204      	movs	r2, #4
 8000642:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000644:	4b78      	ldr	r3, [pc, #480]	; (8000828 <MX_ADC_Init+0x21c>)
 8000646:	2200      	movs	r2, #0
 8000648:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800064a:	4b77      	ldr	r3, [pc, #476]	; (8000828 <MX_ADC_Init+0x21c>)
 800064c:	2200      	movs	r2, #0
 800064e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000650:	4b75      	ldr	r3, [pc, #468]	; (8000828 <MX_ADC_Init+0x21c>)
 8000652:	2200      	movs	r2, #0
 8000654:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000656:	4b74      	ldr	r3, [pc, #464]	; (8000828 <MX_ADC_Init+0x21c>)
 8000658:	2200      	movs	r2, #0
 800065a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800065c:	4b72      	ldr	r3, [pc, #456]	; (8000828 <MX_ADC_Init+0x21c>)
 800065e:	22c2      	movs	r2, #194	; 0xc2
 8000660:	32ff      	adds	r2, #255	; 0xff
 8000662:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000664:	4b70      	ldr	r3, [pc, #448]	; (8000828 <MX_ADC_Init+0x21c>)
 8000666:	2200      	movs	r2, #0
 8000668:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800066a:	4b6f      	ldr	r3, [pc, #444]	; (8000828 <MX_ADC_Init+0x21c>)
 800066c:	2224      	movs	r2, #36	; 0x24
 800066e:	2100      	movs	r1, #0
 8000670:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000672:	4b6d      	ldr	r3, [pc, #436]	; (8000828 <MX_ADC_Init+0x21c>)
 8000674:	2201      	movs	r2, #1
 8000676:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000678:	4b6b      	ldr	r3, [pc, #428]	; (8000828 <MX_ADC_Init+0x21c>)
 800067a:	0018      	movs	r0, r3
 800067c:	f000 fff6 	bl	800166c <HAL_ADC_Init>
 8000680:	1e03      	subs	r3, r0, #0
 8000682:	d001      	beq.n	8000688 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000684:	f000 fbf8 	bl	8000e78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_0;
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	2280      	movs	r2, #128	; 0x80
 8000692:	0152      	lsls	r2, r2, #5
 8000694:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	2280      	movs	r2, #128	; 0x80
 800069a:	0552      	lsls	r2, r2, #21
 800069c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800069e:	1d3a      	adds	r2, r7, #4
 80006a0:	4b61      	ldr	r3, [pc, #388]	; (8000828 <MX_ADC_Init+0x21c>)
 80006a2:	0011      	movs	r1, r2
 80006a4:	0018      	movs	r0, r3
 80006a6:	f001 f921 	bl	80018ec <HAL_ADC_ConfigChannel>
 80006aa:	1e03      	subs	r3, r0, #0
 80006ac:	d001      	beq.n	80006b2 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80006ae:	f000 fbe3 	bl	8000e78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_1;
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	2201      	movs	r2, #1
 80006b6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006b8:	1d3a      	adds	r2, r7, #4
 80006ba:	4b5b      	ldr	r3, [pc, #364]	; (8000828 <MX_ADC_Init+0x21c>)
 80006bc:	0011      	movs	r1, r2
 80006be:	0018      	movs	r0, r3
 80006c0:	f001 f914 	bl	80018ec <HAL_ADC_ConfigChannel>
 80006c4:	1e03      	subs	r3, r0, #0
 80006c6:	d001      	beq.n	80006cc <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 80006c8:	f000 fbd6 	bl	8000e78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_2;
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2202      	movs	r2, #2
 80006d0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006d2:	1d3a      	adds	r2, r7, #4
 80006d4:	4b54      	ldr	r3, [pc, #336]	; (8000828 <MX_ADC_Init+0x21c>)
 80006d6:	0011      	movs	r1, r2
 80006d8:	0018      	movs	r0, r3
 80006da:	f001 f907 	bl	80018ec <HAL_ADC_ConfigChannel>
 80006de:	1e03      	subs	r3, r0, #0
 80006e0:	d001      	beq.n	80006e6 <MX_ADC_Init+0xda>
  {
    Error_Handler();
 80006e2:	f000 fbc9 	bl	8000e78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_3;
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	2203      	movs	r2, #3
 80006ea:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006ec:	1d3a      	adds	r2, r7, #4
 80006ee:	4b4e      	ldr	r3, [pc, #312]	; (8000828 <MX_ADC_Init+0x21c>)
 80006f0:	0011      	movs	r1, r2
 80006f2:	0018      	movs	r0, r3
 80006f4:	f001 f8fa 	bl	80018ec <HAL_ADC_ConfigChannel>
 80006f8:	1e03      	subs	r3, r0, #0
 80006fa:	d001      	beq.n	8000700 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 80006fc:	f000 fbbc 	bl	8000e78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_5;
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	2205      	movs	r2, #5
 8000704:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000706:	1d3a      	adds	r2, r7, #4
 8000708:	4b47      	ldr	r3, [pc, #284]	; (8000828 <MX_ADC_Init+0x21c>)
 800070a:	0011      	movs	r1, r2
 800070c:	0018      	movs	r0, r3
 800070e:	f001 f8ed 	bl	80018ec <HAL_ADC_ConfigChannel>
 8000712:	1e03      	subs	r3, r0, #0
 8000714:	d001      	beq.n	800071a <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 8000716:	f000 fbaf 	bl	8000e78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_6;
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	2206      	movs	r2, #6
 800071e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000720:	1d3a      	adds	r2, r7, #4
 8000722:	4b41      	ldr	r3, [pc, #260]	; (8000828 <MX_ADC_Init+0x21c>)
 8000724:	0011      	movs	r1, r2
 8000726:	0018      	movs	r0, r3
 8000728:	f001 f8e0 	bl	80018ec <HAL_ADC_ConfigChannel>
 800072c:	1e03      	subs	r3, r0, #0
 800072e:	d001      	beq.n	8000734 <MX_ADC_Init+0x128>
  {
    Error_Handler();
 8000730:	f000 fba2 	bl	8000e78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_7;
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	2207      	movs	r2, #7
 8000738:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800073a:	1d3a      	adds	r2, r7, #4
 800073c:	4b3a      	ldr	r3, [pc, #232]	; (8000828 <MX_ADC_Init+0x21c>)
 800073e:	0011      	movs	r1, r2
 8000740:	0018      	movs	r0, r3
 8000742:	f001 f8d3 	bl	80018ec <HAL_ADC_ConfigChannel>
 8000746:	1e03      	subs	r3, r0, #0
 8000748:	d001      	beq.n	800074e <MX_ADC_Init+0x142>
  {
    Error_Handler();
 800074a:	f000 fb95 	bl	8000e78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_8;
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	2208      	movs	r2, #8
 8000752:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000754:	1d3a      	adds	r2, r7, #4
 8000756:	4b34      	ldr	r3, [pc, #208]	; (8000828 <MX_ADC_Init+0x21c>)
 8000758:	0011      	movs	r1, r2
 800075a:	0018      	movs	r0, r3
 800075c:	f001 f8c6 	bl	80018ec <HAL_ADC_ConfigChannel>
 8000760:	1e03      	subs	r3, r0, #0
 8000762:	d001      	beq.n	8000768 <MX_ADC_Init+0x15c>
  {
    Error_Handler();
 8000764:	f000 fb88 	bl	8000e78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_9;
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	2209      	movs	r2, #9
 800076c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800076e:	1d3a      	adds	r2, r7, #4
 8000770:	4b2d      	ldr	r3, [pc, #180]	; (8000828 <MX_ADC_Init+0x21c>)
 8000772:	0011      	movs	r1, r2
 8000774:	0018      	movs	r0, r3
 8000776:	f001 f8b9 	bl	80018ec <HAL_ADC_ConfigChannel>
 800077a:	1e03      	subs	r3, r0, #0
 800077c:	d001      	beq.n	8000782 <MX_ADC_Init+0x176>
  {
    Error_Handler();
 800077e:	f000 fb7b 	bl	8000e78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_10;
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	220a      	movs	r2, #10
 8000786:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000788:	1d3a      	adds	r2, r7, #4
 800078a:	4b27      	ldr	r3, [pc, #156]	; (8000828 <MX_ADC_Init+0x21c>)
 800078c:	0011      	movs	r1, r2
 800078e:	0018      	movs	r0, r3
 8000790:	f001 f8ac 	bl	80018ec <HAL_ADC_ConfigChannel>
 8000794:	1e03      	subs	r3, r0, #0
 8000796:	d001      	beq.n	800079c <MX_ADC_Init+0x190>
  {
    Error_Handler();
 8000798:	f000 fb6e 	bl	8000e78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_11;
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	220b      	movs	r2, #11
 80007a0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007a2:	1d3a      	adds	r2, r7, #4
 80007a4:	4b20      	ldr	r3, [pc, #128]	; (8000828 <MX_ADC_Init+0x21c>)
 80007a6:	0011      	movs	r1, r2
 80007a8:	0018      	movs	r0, r3
 80007aa:	f001 f89f 	bl	80018ec <HAL_ADC_ConfigChannel>
 80007ae:	1e03      	subs	r3, r0, #0
 80007b0:	d001      	beq.n	80007b6 <MX_ADC_Init+0x1aa>
  {
    Error_Handler();
 80007b2:	f000 fb61 	bl	8000e78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_12;
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	220c      	movs	r2, #12
 80007ba:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007bc:	1d3a      	adds	r2, r7, #4
 80007be:	4b1a      	ldr	r3, [pc, #104]	; (8000828 <MX_ADC_Init+0x21c>)
 80007c0:	0011      	movs	r1, r2
 80007c2:	0018      	movs	r0, r3
 80007c4:	f001 f892 	bl	80018ec <HAL_ADC_ConfigChannel>
 80007c8:	1e03      	subs	r3, r0, #0
 80007ca:	d001      	beq.n	80007d0 <MX_ADC_Init+0x1c4>
  {
    Error_Handler();
 80007cc:	f000 fb54 	bl	8000e78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_13;
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	220d      	movs	r2, #13
 80007d4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007d6:	1d3a      	adds	r2, r7, #4
 80007d8:	4b13      	ldr	r3, [pc, #76]	; (8000828 <MX_ADC_Init+0x21c>)
 80007da:	0011      	movs	r1, r2
 80007dc:	0018      	movs	r0, r3
 80007de:	f001 f885 	bl	80018ec <HAL_ADC_ConfigChannel>
 80007e2:	1e03      	subs	r3, r0, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC_Init+0x1de>
  {
    Error_Handler();
 80007e6:	f000 fb47 	bl	8000e78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_14;
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	220e      	movs	r2, #14
 80007ee:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007f0:	1d3a      	adds	r2, r7, #4
 80007f2:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <MX_ADC_Init+0x21c>)
 80007f4:	0011      	movs	r1, r2
 80007f6:	0018      	movs	r0, r3
 80007f8:	f001 f878 	bl	80018ec <HAL_ADC_ConfigChannel>
 80007fc:	1e03      	subs	r3, r0, #0
 80007fe:	d001      	beq.n	8000804 <MX_ADC_Init+0x1f8>
  {
    Error_Handler();
 8000800:	f000 fb3a 	bl	8000e78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_15;
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	220f      	movs	r2, #15
 8000808:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800080a:	1d3a      	adds	r2, r7, #4
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_ADC_Init+0x21c>)
 800080e:	0011      	movs	r1, r2
 8000810:	0018      	movs	r0, r3
 8000812:	f001 f86b 	bl	80018ec <HAL_ADC_ConfigChannel>
 8000816:	1e03      	subs	r3, r0, #0
 8000818:	d001      	beq.n	800081e <MX_ADC_Init+0x212>
  {
    Error_Handler();
 800081a:	f000 fb2d 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */
}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	46bd      	mov	sp, r7
 8000822:	b004      	add	sp, #16
 8000824:	bd80      	pop	{r7, pc}
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	2000002c 	.word	0x2000002c
 800082c:	40012400 	.word	0x40012400

08000830 <MX_DAC1_Init>:
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC1_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */
  step = 0;
 8000836:	4b14      	ldr	r3, [pc, #80]	; (8000888 <MX_DAC1_Init+0x58>)
 8000838:	2200      	movs	r2, #0
 800083a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800083c:	003b      	movs	r3, r7
 800083e:	0018      	movs	r0, r3
 8000840:	2308      	movs	r3, #8
 8000842:	001a      	movs	r2, r3
 8000844:	2100      	movs	r1, #0
 8000846:	f004 fde8 	bl	800541a <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
   */
  hdac1.Instance = DAC;
 800084a:	4b10      	ldr	r3, [pc, #64]	; (800088c <MX_DAC1_Init+0x5c>)
 800084c:	4a10      	ldr	r2, [pc, #64]	; (8000890 <MX_DAC1_Init+0x60>)
 800084e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000850:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_DAC1_Init+0x5c>)
 8000852:	0018      	movs	r0, r3
 8000854:	f001 fa36 	bl	8001cc4 <HAL_DAC_Init>
 8000858:	1e03      	subs	r3, r0, #0
 800085a:	d001      	beq.n	8000860 <MX_DAC1_Init+0x30>
  {
    Error_Handler();
 800085c:	f000 fb0c 	bl	8000e78 <Error_Handler>
  }

  /** DAC channel OUT1 config
   */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000860:	003b      	movs	r3, r7
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000866:	003b      	movs	r3, r7
 8000868:	2200      	movs	r2, #0
 800086a:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800086c:	0039      	movs	r1, r7
 800086e:	4b07      	ldr	r3, [pc, #28]	; (800088c <MX_DAC1_Init+0x5c>)
 8000870:	2200      	movs	r2, #0
 8000872:	0018      	movs	r0, r3
 8000874:	f001 fa49 	bl	8001d0a <HAL_DAC_ConfigChannel>
 8000878:	1e03      	subs	r3, r0, #0
 800087a:	d001      	beq.n	8000880 <MX_DAC1_Init+0x50>
  {
    Error_Handler();
 800087c:	f000 fafc 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */
}
 8000880:	46c0      	nop			; (mov r8, r8)
 8000882:	46bd      	mov	sp, r7
 8000884:	b002      	add	sp, #8
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000358 	.word	0x20000358
 800088c:	200000b0 	.word	0x200000b0
 8000890:	40007400 	.word	0x40007400

08000894 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000898:	4b1b      	ldr	r3, [pc, #108]	; (8000908 <MX_I2C1_Init+0x74>)
 800089a:	4a1c      	ldr	r2, [pc, #112]	; (800090c <MX_I2C1_Init+0x78>)
 800089c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800089e:	4b1a      	ldr	r3, [pc, #104]	; (8000908 <MX_I2C1_Init+0x74>)
 80008a0:	4a1b      	ldr	r2, [pc, #108]	; (8000910 <MX_I2C1_Init+0x7c>)
 80008a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008a4:	4b18      	ldr	r3, [pc, #96]	; (8000908 <MX_I2C1_Init+0x74>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008aa:	4b17      	ldr	r3, [pc, #92]	; (8000908 <MX_I2C1_Init+0x74>)
 80008ac:	2201      	movs	r2, #1
 80008ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008b0:	4b15      	ldr	r3, [pc, #84]	; (8000908 <MX_I2C1_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008b6:	4b14      	ldr	r3, [pc, #80]	; (8000908 <MX_I2C1_Init+0x74>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <MX_I2C1_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <MX_I2C1_Init+0x74>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <MX_I2C1_Init+0x74>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <MX_I2C1_Init+0x74>)
 80008d0:	0018      	movs	r0, r3
 80008d2:	f001 fda3 	bl	800241c <HAL_I2C_Init>
 80008d6:	1e03      	subs	r3, r0, #0
 80008d8:	d001      	beq.n	80008de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008da:	f000 facd 	bl	8000e78 <Error_Handler>
  }

  /** Configure Analogue filter
   */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008de:	4b0a      	ldr	r3, [pc, #40]	; (8000908 <MX_I2C1_Init+0x74>)
 80008e0:	2100      	movs	r1, #0
 80008e2:	0018      	movs	r0, r3
 80008e4:	f001 fe30 	bl	8002548 <HAL_I2CEx_ConfigAnalogFilter>
 80008e8:	1e03      	subs	r3, r0, #0
 80008ea:	d001      	beq.n	80008f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008ec:	f000 fac4 	bl	8000e78 <Error_Handler>
  }

  /** Configure Digital filter
   */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008f0:	4b05      	ldr	r3, [pc, #20]	; (8000908 <MX_I2C1_Init+0x74>)
 80008f2:	2100      	movs	r1, #0
 80008f4:	0018      	movs	r0, r3
 80008f6:	f001 fe73 	bl	80025e0 <HAL_I2CEx_ConfigDigitalFilter>
 80008fa:	1e03      	subs	r3, r0, #0
 80008fc:	d001      	beq.n	8000902 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008fe:	f000 fabb 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	200000c4 	.word	0x200000c4
 800090c:	40005400 	.word	0x40005400
 8000910:	2000090e 	.word	0x2000090e

08000914 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000918:	4b1c      	ldr	r3, [pc, #112]	; (800098c <MX_SPI1_Init+0x78>)
 800091a:	4a1d      	ldr	r2, [pc, #116]	; (8000990 <MX_SPI1_Init+0x7c>)
 800091c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800091e:	4b1b      	ldr	r3, [pc, #108]	; (800098c <MX_SPI1_Init+0x78>)
 8000920:	2282      	movs	r2, #130	; 0x82
 8000922:	0052      	lsls	r2, r2, #1
 8000924:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000926:	4b19      	ldr	r3, [pc, #100]	; (800098c <MX_SPI1_Init+0x78>)
 8000928:	2280      	movs	r2, #128	; 0x80
 800092a:	00d2      	lsls	r2, r2, #3
 800092c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800092e:	4b17      	ldr	r3, [pc, #92]	; (800098c <MX_SPI1_Init+0x78>)
 8000930:	22f0      	movs	r2, #240	; 0xf0
 8000932:	0112      	lsls	r2, r2, #4
 8000934:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000936:	4b15      	ldr	r3, [pc, #84]	; (800098c <MX_SPI1_Init+0x78>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800093c:	4b13      	ldr	r3, [pc, #76]	; (800098c <MX_SPI1_Init+0x78>)
 800093e:	2200      	movs	r2, #0
 8000940:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000942:	4b12      	ldr	r3, [pc, #72]	; (800098c <MX_SPI1_Init+0x78>)
 8000944:	2280      	movs	r2, #128	; 0x80
 8000946:	0092      	lsls	r2, r2, #2
 8000948:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800094a:	4b10      	ldr	r3, [pc, #64]	; (800098c <MX_SPI1_Init+0x78>)
 800094c:	2218      	movs	r2, #24
 800094e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000950:	4b0e      	ldr	r3, [pc, #56]	; (800098c <MX_SPI1_Init+0x78>)
 8000952:	2200      	movs	r2, #0
 8000954:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000956:	4b0d      	ldr	r3, [pc, #52]	; (800098c <MX_SPI1_Init+0x78>)
 8000958:	2200      	movs	r2, #0
 800095a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800095c:	4b0b      	ldr	r3, [pc, #44]	; (800098c <MX_SPI1_Init+0x78>)
 800095e:	2200      	movs	r2, #0
 8000960:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000962:	4b0a      	ldr	r3, [pc, #40]	; (800098c <MX_SPI1_Init+0x78>)
 8000964:	2207      	movs	r2, #7
 8000966:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000968:	4b08      	ldr	r3, [pc, #32]	; (800098c <MX_SPI1_Init+0x78>)
 800096a:	2200      	movs	r2, #0
 800096c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800096e:	4b07      	ldr	r3, [pc, #28]	; (800098c <MX_SPI1_Init+0x78>)
 8000970:	2208      	movs	r2, #8
 8000972:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000974:	4b05      	ldr	r3, [pc, #20]	; (800098c <MX_SPI1_Init+0x78>)
 8000976:	0018      	movs	r0, r3
 8000978:	f002 fbfc 	bl	8003174 <HAL_SPI_Init>
 800097c:	1e03      	subs	r3, r0, #0
 800097e:	d001      	beq.n	8000984 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8000980:	f000 fa7a 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 8000984:	46c0      	nop			; (mov r8, r8)
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	20000110 	.word	0x20000110
 8000990:	40013000 	.word	0x40013000

08000994 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000998:	4b1c      	ldr	r3, [pc, #112]	; (8000a0c <MX_SPI2_Init+0x78>)
 800099a:	4a1d      	ldr	r2, [pc, #116]	; (8000a10 <MX_SPI2_Init+0x7c>)
 800099c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800099e:	4b1b      	ldr	r3, [pc, #108]	; (8000a0c <MX_SPI2_Init+0x78>)
 80009a0:	2282      	movs	r2, #130	; 0x82
 80009a2:	0052      	lsls	r2, r2, #1
 80009a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80009a6:	4b19      	ldr	r3, [pc, #100]	; (8000a0c <MX_SPI2_Init+0x78>)
 80009a8:	2280      	movs	r2, #128	; 0x80
 80009aa:	00d2      	lsls	r2, r2, #3
 80009ac:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80009ae:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <MX_SPI2_Init+0x78>)
 80009b0:	22f0      	movs	r2, #240	; 0xf0
 80009b2:	0112      	lsls	r2, r2, #4
 80009b4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009b6:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <MX_SPI2_Init+0x78>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009bc:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <MX_SPI2_Init+0x78>)
 80009be:	2200      	movs	r2, #0
 80009c0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80009c2:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <MX_SPI2_Init+0x78>)
 80009c4:	2280      	movs	r2, #128	; 0x80
 80009c6:	0092      	lsls	r2, r2, #2
 80009c8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80009ca:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <MX_SPI2_Init+0x78>)
 80009cc:	2218      	movs	r2, #24
 80009ce:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009d0:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <MX_SPI2_Init+0x78>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009d6:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <MX_SPI2_Init+0x78>)
 80009d8:	2200      	movs	r2, #0
 80009da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009dc:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <MX_SPI2_Init+0x78>)
 80009de:	2200      	movs	r2, #0
 80009e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80009e2:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <MX_SPI2_Init+0x78>)
 80009e4:	2207      	movs	r2, #7
 80009e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009e8:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <MX_SPI2_Init+0x78>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009ee:	4b07      	ldr	r3, [pc, #28]	; (8000a0c <MX_SPI2_Init+0x78>)
 80009f0:	2208      	movs	r2, #8
 80009f2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009f4:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <MX_SPI2_Init+0x78>)
 80009f6:	0018      	movs	r0, r3
 80009f8:	f002 fbbc 	bl	8003174 <HAL_SPI_Init>
 80009fc:	1e03      	subs	r3, r0, #0
 80009fe:	d001      	beq.n	8000a04 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8000a00:	f000 fa3a 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */
}
 8000a04:	46c0      	nop			; (mov r8, r8)
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	20000174 	.word	0x20000174
 8000a10:	40003800 	.word	0x40003800

08000a14 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b096      	sub	sp, #88	; 0x58
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a1a:	2348      	movs	r3, #72	; 0x48
 8000a1c:	18fb      	adds	r3, r7, r3
 8000a1e:	0018      	movs	r0, r3
 8000a20:	2310      	movs	r3, #16
 8000a22:	001a      	movs	r2, r3
 8000a24:	2100      	movs	r1, #0
 8000a26:	f004 fcf8 	bl	800541a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a2a:	2340      	movs	r3, #64	; 0x40
 8000a2c:	18fb      	adds	r3, r7, r3
 8000a2e:	0018      	movs	r0, r3
 8000a30:	2308      	movs	r3, #8
 8000a32:	001a      	movs	r2, r3
 8000a34:	2100      	movs	r1, #0
 8000a36:	f004 fcf0 	bl	800541a <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a3a:	2324      	movs	r3, #36	; 0x24
 8000a3c:	18fb      	adds	r3, r7, r3
 8000a3e:	0018      	movs	r0, r3
 8000a40:	231c      	movs	r3, #28
 8000a42:	001a      	movs	r2, r3
 8000a44:	2100      	movs	r1, #0
 8000a46:	f004 fce8 	bl	800541a <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	2320      	movs	r3, #32
 8000a50:	001a      	movs	r2, r3
 8000a52:	2100      	movs	r1, #0
 8000a54:	f004 fce1 	bl	800541a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a58:	4b46      	ldr	r3, [pc, #280]	; (8000b74 <MX_TIM1_Init+0x160>)
 8000a5a:	4a47      	ldr	r2, [pc, #284]	; (8000b78 <MX_TIM1_Init+0x164>)
 8000a5c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100 - 1;
 8000a5e:	4b45      	ldr	r3, [pc, #276]	; (8000b74 <MX_TIM1_Init+0x160>)
 8000a60:	2263      	movs	r2, #99	; 0x63
 8000a62:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a64:	4b43      	ldr	r3, [pc, #268]	; (8000b74 <MX_TIM1_Init+0x160>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 30000 - 1;
 8000a6a:	4b42      	ldr	r3, [pc, #264]	; (8000b74 <MX_TIM1_Init+0x160>)
 8000a6c:	4a43      	ldr	r2, [pc, #268]	; (8000b7c <MX_TIM1_Init+0x168>)
 8000a6e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a70:	4b40      	ldr	r3, [pc, #256]	; (8000b74 <MX_TIM1_Init+0x160>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a76:	4b3f      	ldr	r3, [pc, #252]	; (8000b74 <MX_TIM1_Init+0x160>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a7c:	4b3d      	ldr	r3, [pc, #244]	; (8000b74 <MX_TIM1_Init+0x160>)
 8000a7e:	2280      	movs	r2, #128	; 0x80
 8000a80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a82:	4b3c      	ldr	r3, [pc, #240]	; (8000b74 <MX_TIM1_Init+0x160>)
 8000a84:	0018      	movs	r0, r3
 8000a86:	f002 fc2d 	bl	80032e4 <HAL_TIM_Base_Init>
 8000a8a:	1e03      	subs	r3, r0, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000a8e:	f000 f9f3 	bl	8000e78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a92:	2148      	movs	r1, #72	; 0x48
 8000a94:	187b      	adds	r3, r7, r1
 8000a96:	2280      	movs	r2, #128	; 0x80
 8000a98:	0152      	lsls	r2, r2, #5
 8000a9a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a9c:	187a      	adds	r2, r7, r1
 8000a9e:	4b35      	ldr	r3, [pc, #212]	; (8000b74 <MX_TIM1_Init+0x160>)
 8000aa0:	0011      	movs	r1, r2
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f002 ff34 	bl	8003910 <HAL_TIM_ConfigClockSource>
 8000aa8:	1e03      	subs	r3, r0, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000aac:	f000 f9e4 	bl	8000e78 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000ab0:	4b30      	ldr	r3, [pc, #192]	; (8000b74 <MX_TIM1_Init+0x160>)
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f002 fc66 	bl	8003384 <HAL_TIM_OC_Init>
 8000ab8:	1e03      	subs	r3, r0, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000abc:	f000 f9dc 	bl	8000e78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac0:	2140      	movs	r1, #64	; 0x40
 8000ac2:	187b      	adds	r3, r7, r1
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac8:	187b      	adds	r3, r7, r1
 8000aca:	2200      	movs	r2, #0
 8000acc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ace:	187a      	adds	r2, r7, r1
 8000ad0:	4b28      	ldr	r3, [pc, #160]	; (8000b74 <MX_TIM1_Init+0x160>)
 8000ad2:	0011      	movs	r1, r2
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f003 fb49 	bl	800416c <HAL_TIMEx_MasterConfigSynchronization>
 8000ada:	1e03      	subs	r3, r0, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8000ade:	f000 f9cb 	bl	8000e78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000ae2:	2124      	movs	r1, #36	; 0x24
 8000ae4:	187b      	adds	r3, r7, r1
 8000ae6:	2230      	movs	r2, #48	; 0x30
 8000ae8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 6000 - 1;
 8000aea:	187b      	adds	r3, r7, r1
 8000aec:	4a24      	ldr	r2, [pc, #144]	; (8000b80 <MX_TIM1_Init+0x16c>)
 8000aee:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000af0:	187b      	adds	r3, r7, r1
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	2200      	movs	r2, #0
 8000afa:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	2200      	movs	r2, #0
 8000b00:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b02:	187b      	adds	r3, r7, r1
 8000b04:	2200      	movs	r2, #0
 8000b06:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b08:	187b      	adds	r3, r7, r1
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b0e:	1879      	adds	r1, r7, r1
 8000b10:	4b18      	ldr	r3, [pc, #96]	; (8000b74 <MX_TIM1_Init+0x160>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	0018      	movs	r0, r3
 8000b16:	f002 fea3 	bl	8003860 <HAL_TIM_OC_ConfigChannel>
 8000b1a:	1e03      	subs	r3, r0, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000b1e:	f000 f9ab 	bl	8000e78 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	2280      	movs	r2, #128	; 0x80
 8000b44:	0192      	lsls	r2, r2, #6
 8000b46:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b4e:	1d3a      	adds	r2, r7, #4
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <MX_TIM1_Init+0x160>)
 8000b52:	0011      	movs	r1, r2
 8000b54:	0018      	movs	r0, r3
 8000b56:	f003 fb67 	bl	8004228 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b5a:	1e03      	subs	r3, r0, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8000b5e:	f000 f98b 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b62:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <MX_TIM1_Init+0x160>)
 8000b64:	0018      	movs	r0, r3
 8000b66:	f000 fbc7 	bl	80012f8 <HAL_TIM_MspPostInit>
}
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	b016      	add	sp, #88	; 0x58
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	200001d8 	.word	0x200001d8
 8000b78:	40012c00 	.word	0x40012c00
 8000b7c:	0000752f 	.word	0x0000752f
 8000b80:	0000176f 	.word	0x0000176f

08000b84 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08e      	sub	sp, #56	; 0x38
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b8a:	2328      	movs	r3, #40	; 0x28
 8000b8c:	18fb      	adds	r3, r7, r3
 8000b8e:	0018      	movs	r0, r3
 8000b90:	2310      	movs	r3, #16
 8000b92:	001a      	movs	r2, r3
 8000b94:	2100      	movs	r1, #0
 8000b96:	f004 fc40 	bl	800541a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b9a:	2320      	movs	r3, #32
 8000b9c:	18fb      	adds	r3, r7, r3
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	2308      	movs	r3, #8
 8000ba2:	001a      	movs	r2, r3
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	f004 fc38 	bl	800541a <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	0018      	movs	r0, r3
 8000bae:	231c      	movs	r3, #28
 8000bb0:	001a      	movs	r2, r3
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	f004 fc31 	bl	800541a <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bb8:	4b30      	ldr	r3, [pc, #192]	; (8000c7c <MX_TIM2_Init+0xf8>)
 8000bba:	2280      	movs	r2, #128	; 0x80
 8000bbc:	05d2      	lsls	r2, r2, #23
 8000bbe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100 - 1;
 8000bc0:	4b2e      	ldr	r3, [pc, #184]	; (8000c7c <MX_TIM2_Init+0xf8>)
 8000bc2:	2263      	movs	r2, #99	; 0x63
 8000bc4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc6:	4b2d      	ldr	r3, [pc, #180]	; (8000c7c <MX_TIM2_Init+0xf8>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 24000 - 1;
 8000bcc:	4b2b      	ldr	r3, [pc, #172]	; (8000c7c <MX_TIM2_Init+0xf8>)
 8000bce:	4a2c      	ldr	r2, [pc, #176]	; (8000c80 <MX_TIM2_Init+0xfc>)
 8000bd0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd2:	4b2a      	ldr	r3, [pc, #168]	; (8000c7c <MX_TIM2_Init+0xf8>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bd8:	4b28      	ldr	r3, [pc, #160]	; (8000c7c <MX_TIM2_Init+0xf8>)
 8000bda:	2280      	movs	r2, #128	; 0x80
 8000bdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bde:	4b27      	ldr	r3, [pc, #156]	; (8000c7c <MX_TIM2_Init+0xf8>)
 8000be0:	0018      	movs	r0, r3
 8000be2:	f002 fb7f 	bl	80032e4 <HAL_TIM_Base_Init>
 8000be6:	1e03      	subs	r3, r0, #0
 8000be8:	d001      	beq.n	8000bee <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000bea:	f000 f945 	bl	8000e78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bee:	2128      	movs	r1, #40	; 0x28
 8000bf0:	187b      	adds	r3, r7, r1
 8000bf2:	2280      	movs	r2, #128	; 0x80
 8000bf4:	0152      	lsls	r2, r2, #5
 8000bf6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bf8:	187a      	adds	r2, r7, r1
 8000bfa:	4b20      	ldr	r3, [pc, #128]	; (8000c7c <MX_TIM2_Init+0xf8>)
 8000bfc:	0011      	movs	r1, r2
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f002 fe86 	bl	8003910 <HAL_TIM_ConfigClockSource>
 8000c04:	1e03      	subs	r3, r0, #0
 8000c06:	d001      	beq.n	8000c0c <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000c08:	f000 f936 	bl	8000e78 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000c0c:	4b1b      	ldr	r3, [pc, #108]	; (8000c7c <MX_TIM2_Init+0xf8>)
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f002 fbb8 	bl	8003384 <HAL_TIM_OC_Init>
 8000c14:	1e03      	subs	r3, r0, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000c18:	f000 f92e 	bl	8000e78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c1c:	2120      	movs	r1, #32
 8000c1e:	187b      	adds	r3, r7, r1
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c24:	187b      	adds	r3, r7, r1
 8000c26:	2200      	movs	r2, #0
 8000c28:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c2a:	187a      	adds	r2, r7, r1
 8000c2c:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <MX_TIM2_Init+0xf8>)
 8000c2e:	0011      	movs	r1, r2
 8000c30:	0018      	movs	r0, r3
 8000c32:	f003 fa9b 	bl	800416c <HAL_TIMEx_MasterConfigSynchronization>
 8000c36:	1e03      	subs	r3, r0, #0
 8000c38:	d001      	beq.n	8000c3e <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000c3a:	f000 f91d 	bl	8000e78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	2230      	movs	r2, #48	; 0x30
 8000c42:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 12000 - 1;
 8000c44:	1d3b      	adds	r3, r7, #4
 8000c46:	4a0f      	ldr	r2, [pc, #60]	; (8000c84 <MX_TIM2_Init+0x100>)
 8000c48:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	2200      	movs	r2, #0
 8000c54:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c56:	1d39      	adds	r1, r7, #4
 8000c58:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <MX_TIM2_Init+0xf8>)
 8000c5a:	220c      	movs	r2, #12
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	f002 fdff 	bl	8003860 <HAL_TIM_OC_ConfigChannel>
 8000c62:	1e03      	subs	r3, r0, #0
 8000c64:	d001      	beq.n	8000c6a <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000c66:	f000 f907 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c6a:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <MX_TIM2_Init+0xf8>)
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f000 fb43 	bl	80012f8 <HAL_TIM_MspPostInit>
}
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	46bd      	mov	sp, r7
 8000c76:	b00e      	add	sp, #56	; 0x38
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	20000220 	.word	0x20000220
 8000c80:	00005dbf 	.word	0x00005dbf
 8000c84:	00002edf 	.word	0x00002edf

08000c88 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */
  erpa_seq = 0;
 8000c8c:	4b19      	ldr	r3, [pc, #100]	; (8000cf4 <MX_USART1_UART_Init+0x6c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	801a      	strh	r2, [r3, #0]
  pmt_seq = 0;
 8000c92:	4b19      	ldr	r3, [pc, #100]	; (8000cf8 <MX_USART1_UART_Init+0x70>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	801a      	strh	r2, [r3, #0]
  hk_seq = 0;
 8000c98:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <MX_USART1_UART_Init+0x74>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	801a      	strh	r2, [r3, #0]
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c9e:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <MX_USART1_UART_Init+0x78>)
 8000ca0:	4a18      	ldr	r2, [pc, #96]	; (8000d04 <MX_USART1_UART_Init+0x7c>)
 8000ca2:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8000ca4:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <MX_USART1_UART_Init+0x78>)
 8000ca6:	2296      	movs	r2, #150	; 0x96
 8000ca8:	01d2      	lsls	r2, r2, #7
 8000caa:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cac:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <MX_USART1_UART_Init+0x78>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cb2:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <MX_USART1_UART_Init+0x78>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cb8:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <MX_USART1_UART_Init+0x78>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cbe:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <MX_USART1_UART_Init+0x78>)
 8000cc0:	220c      	movs	r2, #12
 8000cc2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc4:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <MX_USART1_UART_Init+0x78>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cca:	4b0d      	ldr	r3, [pc, #52]	; (8000d00 <MX_USART1_UART_Init+0x78>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cd0:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <MX_USART1_UART_Init+0x78>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cd6:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <MX_USART1_UART_Init+0x78>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <MX_USART1_UART_Init+0x78>)
 8000cde:	0018      	movs	r0, r3
 8000ce0:	f003 fb10 	bl	8004304 <HAL_UART_Init>
 8000ce4:	1e03      	subs	r3, r0, #0
 8000ce6:	d001      	beq.n	8000cec <MX_USART1_UART_Init+0x64>
  {
    Error_Handler();
 8000ce8:	f000 f8c6 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 8000cec:	46c0      	nop			; (mov r8, r8)
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	2000035a 	.word	0x2000035a
 8000cf8:	2000035c 	.word	0x2000035c
 8000cfc:	2000035e 	.word	0x2000035e
 8000d00:	20000268 	.word	0x20000268
 8000d04:	40013800 	.word	0x40013800

08000d08 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <MX_DMA_Init+0x38>)
 8000d10:	695a      	ldr	r2, [r3, #20]
 8000d12:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <MX_DMA_Init+0x38>)
 8000d14:	2101      	movs	r1, #1
 8000d16:	430a      	orrs	r2, r1
 8000d18:	615a      	str	r2, [r3, #20]
 8000d1a:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <MX_DMA_Init+0x38>)
 8000d1c:	695b      	ldr	r3, [r3, #20]
 8000d1e:	2201      	movs	r2, #1
 8000d20:	4013      	ands	r3, r2
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2100      	movs	r1, #0
 8000d2a:	2009      	movs	r0, #9
 8000d2c:	f000 ff98 	bl	8001c60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d30:	2009      	movs	r0, #9
 8000d32:	f000 ffaa 	bl	8001c8a <HAL_NVIC_EnableIRQ>
}
 8000d36:	46c0      	nop			; (mov r8, r8)
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	b002      	add	sp, #8
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	40021000 	.word	0x40021000

08000d44 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000d44:	b590      	push	{r4, r7, lr}
 8000d46:	b08b      	sub	sp, #44	; 0x2c
 8000d48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4a:	2414      	movs	r4, #20
 8000d4c:	193b      	adds	r3, r7, r4
 8000d4e:	0018      	movs	r0, r3
 8000d50:	2314      	movs	r3, #20
 8000d52:	001a      	movs	r2, r3
 8000d54:	2100      	movs	r1, #0
 8000d56:	f004 fb60 	bl	800541a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5a:	4b43      	ldr	r3, [pc, #268]	; (8000e68 <MX_GPIO_Init+0x124>)
 8000d5c:	695a      	ldr	r2, [r3, #20]
 8000d5e:	4b42      	ldr	r3, [pc, #264]	; (8000e68 <MX_GPIO_Init+0x124>)
 8000d60:	2180      	movs	r1, #128	; 0x80
 8000d62:	0309      	lsls	r1, r1, #12
 8000d64:	430a      	orrs	r2, r1
 8000d66:	615a      	str	r2, [r3, #20]
 8000d68:	4b3f      	ldr	r3, [pc, #252]	; (8000e68 <MX_GPIO_Init+0x124>)
 8000d6a:	695a      	ldr	r2, [r3, #20]
 8000d6c:	2380      	movs	r3, #128	; 0x80
 8000d6e:	031b      	lsls	r3, r3, #12
 8000d70:	4013      	ands	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d76:	4b3c      	ldr	r3, [pc, #240]	; (8000e68 <MX_GPIO_Init+0x124>)
 8000d78:	695a      	ldr	r2, [r3, #20]
 8000d7a:	4b3b      	ldr	r3, [pc, #236]	; (8000e68 <MX_GPIO_Init+0x124>)
 8000d7c:	2180      	movs	r1, #128	; 0x80
 8000d7e:	03c9      	lsls	r1, r1, #15
 8000d80:	430a      	orrs	r2, r1
 8000d82:	615a      	str	r2, [r3, #20]
 8000d84:	4b38      	ldr	r3, [pc, #224]	; (8000e68 <MX_GPIO_Init+0x124>)
 8000d86:	695a      	ldr	r2, [r3, #20]
 8000d88:	2380      	movs	r3, #128	; 0x80
 8000d8a:	03db      	lsls	r3, r3, #15
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d92:	4b35      	ldr	r3, [pc, #212]	; (8000e68 <MX_GPIO_Init+0x124>)
 8000d94:	695a      	ldr	r2, [r3, #20]
 8000d96:	4b34      	ldr	r3, [pc, #208]	; (8000e68 <MX_GPIO_Init+0x124>)
 8000d98:	2180      	movs	r1, #128	; 0x80
 8000d9a:	0289      	lsls	r1, r1, #10
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	615a      	str	r2, [r3, #20]
 8000da0:	4b31      	ldr	r3, [pc, #196]	; (8000e68 <MX_GPIO_Init+0x124>)
 8000da2:	695a      	ldr	r2, [r3, #20]
 8000da4:	2380      	movs	r3, #128	; 0x80
 8000da6:	029b      	lsls	r3, r3, #10
 8000da8:	4013      	ands	r3, r2
 8000daa:	60bb      	str	r3, [r7, #8]
 8000dac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dae:	4b2e      	ldr	r3, [pc, #184]	; (8000e68 <MX_GPIO_Init+0x124>)
 8000db0:	695a      	ldr	r2, [r3, #20]
 8000db2:	4b2d      	ldr	r3, [pc, #180]	; (8000e68 <MX_GPIO_Init+0x124>)
 8000db4:	2180      	movs	r1, #128	; 0x80
 8000db6:	02c9      	lsls	r1, r1, #11
 8000db8:	430a      	orrs	r2, r1
 8000dba:	615a      	str	r2, [r3, #20]
 8000dbc:	4b2a      	ldr	r3, [pc, #168]	; (8000e68 <MX_GPIO_Init+0x124>)
 8000dbe:	695a      	ldr	r2, [r3, #20]
 8000dc0:	2380      	movs	r3, #128	; 0x80
 8000dc2:	02db      	lsls	r3, r3, #11
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	607b      	str	r3, [r7, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10, GPIO_PIN_RESET);
 8000dca:	239f      	movs	r3, #159	; 0x9f
 8000dcc:	019b      	lsls	r3, r3, #6
 8000dce:	4827      	ldr	r0, [pc, #156]	; (8000e6c <MX_GPIO_Init+0x128>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	0019      	movs	r1, r3
 8000dd4:	f001 fb04 	bl	80023e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6 | GPIO_PIN_7, GPIO_PIN_RESET);
 8000dd8:	4b25      	ldr	r3, [pc, #148]	; (8000e70 <MX_GPIO_Init+0x12c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	21c0      	movs	r1, #192	; 0xc0
 8000dde:	0018      	movs	r0, r3
 8000de0:	f001 fafe 	bl	80023e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5 | GPIO_PIN_6, GPIO_PIN_RESET);
 8000de4:	4b23      	ldr	r3, [pc, #140]	; (8000e74 <MX_GPIO_Init+0x130>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	2160      	movs	r1, #96	; 0x60
 8000dea:	0018      	movs	r0, r3
 8000dec:	f001 faf8 	bl	80023e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
 8000df0:	193b      	adds	r3, r7, r4
 8000df2:	229f      	movs	r2, #159	; 0x9f
 8000df4:	0192      	lsls	r2, r2, #6
 8000df6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df8:	193b      	adds	r3, r7, r4
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	193b      	adds	r3, r7, r4
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e04:	193b      	adds	r3, r7, r4
 8000e06:	2200      	movs	r2, #0
 8000e08:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e0a:	193b      	adds	r3, r7, r4
 8000e0c:	4a17      	ldr	r2, [pc, #92]	; (8000e6c <MX_GPIO_Init+0x128>)
 8000e0e:	0019      	movs	r1, r3
 8000e10:	0010      	movs	r0, r2
 8000e12:	f001 f975 	bl	8002100 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8000e16:	193b      	adds	r3, r7, r4
 8000e18:	22c0      	movs	r2, #192	; 0xc0
 8000e1a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1c:	193b      	adds	r3, r7, r4
 8000e1e:	2201      	movs	r2, #1
 8000e20:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	193b      	adds	r3, r7, r4
 8000e24:	2200      	movs	r2, #0
 8000e26:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e28:	193b      	adds	r3, r7, r4
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e2e:	193b      	adds	r3, r7, r4
 8000e30:	4a0f      	ldr	r2, [pc, #60]	; (8000e70 <MX_GPIO_Init+0x12c>)
 8000e32:	0019      	movs	r1, r3
 8000e34:	0010      	movs	r0, r2
 8000e36:	f001 f963 	bl	8002100 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8000e3a:	0021      	movs	r1, r4
 8000e3c:	187b      	adds	r3, r7, r1
 8000e3e:	2260      	movs	r2, #96	; 0x60
 8000e40:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e42:	187b      	adds	r3, r7, r1
 8000e44:	2201      	movs	r2, #1
 8000e46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	187b      	adds	r3, r7, r1
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4e:	187b      	adds	r3, r7, r1
 8000e50:	2200      	movs	r2, #0
 8000e52:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e54:	187b      	adds	r3, r7, r1
 8000e56:	4a07      	ldr	r2, [pc, #28]	; (8000e74 <MX_GPIO_Init+0x130>)
 8000e58:	0019      	movs	r1, r3
 8000e5a:	0010      	movs	r0, r2
 8000e5c:	f001 f950 	bl	8002100 <HAL_GPIO_Init>
}
 8000e60:	46c0      	nop			; (mov r8, r8)
 8000e62:	46bd      	mov	sp, r7
 8000e64:	b00b      	add	sp, #44	; 0x2c
 8000e66:	bd90      	pop	{r4, r7, pc}
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	48000800 	.word	0x48000800
 8000e70:	48001400 	.word	0x48001400
 8000e74:	48000400 	.word	0x48000400

08000e78 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e7c:	b672      	cpsid	i
}
 8000e7e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <Error_Handler+0x8>
	...

08000e84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <HAL_MspInit+0x44>)
 8000e8c:	699a      	ldr	r2, [r3, #24]
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <HAL_MspInit+0x44>)
 8000e90:	2101      	movs	r1, #1
 8000e92:	430a      	orrs	r2, r1
 8000e94:	619a      	str	r2, [r3, #24]
 8000e96:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <HAL_MspInit+0x44>)
 8000e98:	699b      	ldr	r3, [r3, #24]
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <HAL_MspInit+0x44>)
 8000ea4:	69da      	ldr	r2, [r3, #28]
 8000ea6:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <HAL_MspInit+0x44>)
 8000ea8:	2180      	movs	r1, #128	; 0x80
 8000eaa:	0549      	lsls	r1, r1, #21
 8000eac:	430a      	orrs	r2, r1
 8000eae:	61da      	str	r2, [r3, #28]
 8000eb0:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <HAL_MspInit+0x44>)
 8000eb2:	69da      	ldr	r2, [r3, #28]
 8000eb4:	2380      	movs	r3, #128	; 0x80
 8000eb6:	055b      	lsls	r3, r3, #21
 8000eb8:	4013      	ands	r3, r2
 8000eba:	603b      	str	r3, [r7, #0]
 8000ebc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	b002      	add	sp, #8
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	40021000 	.word	0x40021000

08000ecc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ecc:	b590      	push	{r4, r7, lr}
 8000ece:	b08d      	sub	sp, #52	; 0x34
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	241c      	movs	r4, #28
 8000ed6:	193b      	adds	r3, r7, r4
 8000ed8:	0018      	movs	r0, r3
 8000eda:	2314      	movs	r3, #20
 8000edc:	001a      	movs	r2, r3
 8000ede:	2100      	movs	r1, #0
 8000ee0:	f004 fa9b 	bl	800541a <memset>
  if(hadc->Instance==ADC1)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a4a      	ldr	r2, [pc, #296]	; (8001014 <HAL_ADC_MspInit+0x148>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d000      	beq.n	8000ef0 <HAL_ADC_MspInit+0x24>
 8000eee:	e08d      	b.n	800100c <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ef0:	4b49      	ldr	r3, [pc, #292]	; (8001018 <HAL_ADC_MspInit+0x14c>)
 8000ef2:	699a      	ldr	r2, [r3, #24]
 8000ef4:	4b48      	ldr	r3, [pc, #288]	; (8001018 <HAL_ADC_MspInit+0x14c>)
 8000ef6:	2180      	movs	r1, #128	; 0x80
 8000ef8:	0089      	lsls	r1, r1, #2
 8000efa:	430a      	orrs	r2, r1
 8000efc:	619a      	str	r2, [r3, #24]
 8000efe:	4b46      	ldr	r3, [pc, #280]	; (8001018 <HAL_ADC_MspInit+0x14c>)
 8000f00:	699a      	ldr	r2, [r3, #24]
 8000f02:	2380      	movs	r3, #128	; 0x80
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	4013      	ands	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
 8000f0a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0c:	4b42      	ldr	r3, [pc, #264]	; (8001018 <HAL_ADC_MspInit+0x14c>)
 8000f0e:	695a      	ldr	r2, [r3, #20]
 8000f10:	4b41      	ldr	r3, [pc, #260]	; (8001018 <HAL_ADC_MspInit+0x14c>)
 8000f12:	2180      	movs	r1, #128	; 0x80
 8000f14:	0309      	lsls	r1, r1, #12
 8000f16:	430a      	orrs	r2, r1
 8000f18:	615a      	str	r2, [r3, #20]
 8000f1a:	4b3f      	ldr	r3, [pc, #252]	; (8001018 <HAL_ADC_MspInit+0x14c>)
 8000f1c:	695a      	ldr	r2, [r3, #20]
 8000f1e:	2380      	movs	r3, #128	; 0x80
 8000f20:	031b      	lsls	r3, r3, #12
 8000f22:	4013      	ands	r3, r2
 8000f24:	617b      	str	r3, [r7, #20]
 8000f26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f28:	4b3b      	ldr	r3, [pc, #236]	; (8001018 <HAL_ADC_MspInit+0x14c>)
 8000f2a:	695a      	ldr	r2, [r3, #20]
 8000f2c:	4b3a      	ldr	r3, [pc, #232]	; (8001018 <HAL_ADC_MspInit+0x14c>)
 8000f2e:	2180      	movs	r1, #128	; 0x80
 8000f30:	0289      	lsls	r1, r1, #10
 8000f32:	430a      	orrs	r2, r1
 8000f34:	615a      	str	r2, [r3, #20]
 8000f36:	4b38      	ldr	r3, [pc, #224]	; (8001018 <HAL_ADC_MspInit+0x14c>)
 8000f38:	695a      	ldr	r2, [r3, #20]
 8000f3a:	2380      	movs	r3, #128	; 0x80
 8000f3c:	029b      	lsls	r3, r3, #10
 8000f3e:	4013      	ands	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
 8000f42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f44:	4b34      	ldr	r3, [pc, #208]	; (8001018 <HAL_ADC_MspInit+0x14c>)
 8000f46:	695a      	ldr	r2, [r3, #20]
 8000f48:	4b33      	ldr	r3, [pc, #204]	; (8001018 <HAL_ADC_MspInit+0x14c>)
 8000f4a:	2180      	movs	r1, #128	; 0x80
 8000f4c:	02c9      	lsls	r1, r1, #11
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	615a      	str	r2, [r3, #20]
 8000f52:	4b31      	ldr	r3, [pc, #196]	; (8001018 <HAL_ADC_MspInit+0x14c>)
 8000f54:	695a      	ldr	r2, [r3, #20]
 8000f56:	2380      	movs	r3, #128	; 0x80
 8000f58:	02db      	lsls	r3, r3, #11
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000f60:	193b      	adds	r3, r7, r4
 8000f62:	223f      	movs	r2, #63	; 0x3f
 8000f64:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f66:	193b      	adds	r3, r7, r4
 8000f68:	2203      	movs	r2, #3
 8000f6a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	193b      	adds	r3, r7, r4
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f72:	193b      	adds	r3, r7, r4
 8000f74:	4a29      	ldr	r2, [pc, #164]	; (800101c <HAL_ADC_MspInit+0x150>)
 8000f76:	0019      	movs	r1, r3
 8000f78:	0010      	movs	r0, r2
 8000f7a:	f001 f8c1 	bl	8002100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000f7e:	193b      	adds	r3, r7, r4
 8000f80:	22ef      	movs	r2, #239	; 0xef
 8000f82:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f84:	193b      	adds	r3, r7, r4
 8000f86:	2203      	movs	r2, #3
 8000f88:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	193b      	adds	r3, r7, r4
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f90:	193a      	adds	r2, r7, r4
 8000f92:	2390      	movs	r3, #144	; 0x90
 8000f94:	05db      	lsls	r3, r3, #23
 8000f96:	0011      	movs	r1, r2
 8000f98:	0018      	movs	r0, r3
 8000f9a:	f001 f8b1 	bl	8002100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f9e:	193b      	adds	r3, r7, r4
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fa4:	193b      	adds	r3, r7, r4
 8000fa6:	2203      	movs	r2, #3
 8000fa8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	193b      	adds	r3, r7, r4
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb0:	193b      	adds	r3, r7, r4
 8000fb2:	4a1b      	ldr	r2, [pc, #108]	; (8001020 <HAL_ADC_MspInit+0x154>)
 8000fb4:	0019      	movs	r1, r3
 8000fb6:	0010      	movs	r0, r2
 8000fb8:	f001 f8a2 	bl	8002100 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000fbc:	4b19      	ldr	r3, [pc, #100]	; (8001024 <HAL_ADC_MspInit+0x158>)
 8000fbe:	4a1a      	ldr	r2, [pc, #104]	; (8001028 <HAL_ADC_MspInit+0x15c>)
 8000fc0:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fc2:	4b18      	ldr	r3, [pc, #96]	; (8001024 <HAL_ADC_MspInit+0x158>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fc8:	4b16      	ldr	r3, [pc, #88]	; (8001024 <HAL_ADC_MspInit+0x158>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <HAL_ADC_MspInit+0x158>)
 8000fd0:	2280      	movs	r2, #128	; 0x80
 8000fd2:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fd4:	4b13      	ldr	r3, [pc, #76]	; (8001024 <HAL_ADC_MspInit+0x158>)
 8000fd6:	2280      	movs	r2, #128	; 0x80
 8000fd8:	0052      	lsls	r2, r2, #1
 8000fda:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fdc:	4b11      	ldr	r3, [pc, #68]	; (8001024 <HAL_ADC_MspInit+0x158>)
 8000fde:	2280      	movs	r2, #128	; 0x80
 8000fe0:	00d2      	lsls	r2, r2, #3
 8000fe2:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8000fe4:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <HAL_ADC_MspInit+0x158>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <HAL_ADC_MspInit+0x158>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <HAL_ADC_MspInit+0x158>)
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	f000 ff00 	bl	8001df8 <HAL_DMA_Init>
 8000ff8:	1e03      	subs	r3, r0, #0
 8000ffa:	d001      	beq.n	8001000 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8000ffc:	f7ff ff3c 	bl	8000e78 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4a08      	ldr	r2, [pc, #32]	; (8001024 <HAL_ADC_MspInit+0x158>)
 8001004:	631a      	str	r2, [r3, #48]	; 0x30
 8001006:	4b07      	ldr	r3, [pc, #28]	; (8001024 <HAL_ADC_MspInit+0x158>)
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800100c:	46c0      	nop			; (mov r8, r8)
 800100e:	46bd      	mov	sp, r7
 8001010:	b00d      	add	sp, #52	; 0x34
 8001012:	bd90      	pop	{r4, r7, pc}
 8001014:	40012400 	.word	0x40012400
 8001018:	40021000 	.word	0x40021000
 800101c:	48000800 	.word	0x48000800
 8001020:	48000400 	.word	0x48000400
 8001024:	2000006c 	.word	0x2000006c
 8001028:	40020008 	.word	0x40020008

0800102c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800102c:	b590      	push	{r4, r7, lr}
 800102e:	b08b      	sub	sp, #44	; 0x2c
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	2414      	movs	r4, #20
 8001036:	193b      	adds	r3, r7, r4
 8001038:	0018      	movs	r0, r3
 800103a:	2314      	movs	r3, #20
 800103c:	001a      	movs	r2, r3
 800103e:	2100      	movs	r1, #0
 8001040:	f004 f9eb 	bl	800541a <memset>
  if(hdac->Instance==DAC)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a19      	ldr	r2, [pc, #100]	; (80010b0 <HAL_DAC_MspInit+0x84>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d12b      	bne.n	80010a6 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800104e:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <HAL_DAC_MspInit+0x88>)
 8001050:	69da      	ldr	r2, [r3, #28]
 8001052:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <HAL_DAC_MspInit+0x88>)
 8001054:	2180      	movs	r1, #128	; 0x80
 8001056:	0589      	lsls	r1, r1, #22
 8001058:	430a      	orrs	r2, r1
 800105a:	61da      	str	r2, [r3, #28]
 800105c:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <HAL_DAC_MspInit+0x88>)
 800105e:	69da      	ldr	r2, [r3, #28]
 8001060:	2380      	movs	r3, #128	; 0x80
 8001062:	059b      	lsls	r3, r3, #22
 8001064:	4013      	ands	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106a:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <HAL_DAC_MspInit+0x88>)
 800106c:	695a      	ldr	r2, [r3, #20]
 800106e:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <HAL_DAC_MspInit+0x88>)
 8001070:	2180      	movs	r1, #128	; 0x80
 8001072:	0289      	lsls	r1, r1, #10
 8001074:	430a      	orrs	r2, r1
 8001076:	615a      	str	r2, [r3, #20]
 8001078:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <HAL_DAC_MspInit+0x88>)
 800107a:	695a      	ldr	r2, [r3, #20]
 800107c:	2380      	movs	r3, #128	; 0x80
 800107e:	029b      	lsls	r3, r3, #10
 8001080:	4013      	ands	r3, r2
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001086:	193b      	adds	r3, r7, r4
 8001088:	2210      	movs	r2, #16
 800108a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800108c:	193b      	adds	r3, r7, r4
 800108e:	2203      	movs	r2, #3
 8001090:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	193b      	adds	r3, r7, r4
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001098:	193a      	adds	r2, r7, r4
 800109a:	2390      	movs	r3, #144	; 0x90
 800109c:	05db      	lsls	r3, r3, #23
 800109e:	0011      	movs	r1, r2
 80010a0:	0018      	movs	r0, r3
 80010a2:	f001 f82d 	bl	8002100 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80010a6:	46c0      	nop			; (mov r8, r8)
 80010a8:	46bd      	mov	sp, r7
 80010aa:	b00b      	add	sp, #44	; 0x2c
 80010ac:	bd90      	pop	{r4, r7, pc}
 80010ae:	46c0      	nop			; (mov r8, r8)
 80010b0:	40007400 	.word	0x40007400
 80010b4:	40021000 	.word	0x40021000

080010b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010b8:	b590      	push	{r4, r7, lr}
 80010ba:	b08b      	sub	sp, #44	; 0x2c
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	2414      	movs	r4, #20
 80010c2:	193b      	adds	r3, r7, r4
 80010c4:	0018      	movs	r0, r3
 80010c6:	2314      	movs	r3, #20
 80010c8:	001a      	movs	r2, r3
 80010ca:	2100      	movs	r1, #0
 80010cc:	f004 f9a5 	bl	800541a <memset>
  if(hi2c->Instance==I2C1)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a1c      	ldr	r2, [pc, #112]	; (8001148 <HAL_I2C_MspInit+0x90>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d132      	bne.n	8001140 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010da:	4b1c      	ldr	r3, [pc, #112]	; (800114c <HAL_I2C_MspInit+0x94>)
 80010dc:	695a      	ldr	r2, [r3, #20]
 80010de:	4b1b      	ldr	r3, [pc, #108]	; (800114c <HAL_I2C_MspInit+0x94>)
 80010e0:	2180      	movs	r1, #128	; 0x80
 80010e2:	02c9      	lsls	r1, r1, #11
 80010e4:	430a      	orrs	r2, r1
 80010e6:	615a      	str	r2, [r3, #20]
 80010e8:	4b18      	ldr	r3, [pc, #96]	; (800114c <HAL_I2C_MspInit+0x94>)
 80010ea:	695a      	ldr	r2, [r3, #20]
 80010ec:	2380      	movs	r3, #128	; 0x80
 80010ee:	02db      	lsls	r3, r3, #11
 80010f0:	4013      	ands	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
 80010f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010f6:	193b      	adds	r3, r7, r4
 80010f8:	22c0      	movs	r2, #192	; 0xc0
 80010fa:	0092      	lsls	r2, r2, #2
 80010fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010fe:	0021      	movs	r1, r4
 8001100:	187b      	adds	r3, r7, r1
 8001102:	2212      	movs	r2, #18
 8001104:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	187b      	adds	r3, r7, r1
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800110c:	187b      	adds	r3, r7, r1
 800110e:	2203      	movs	r2, #3
 8001110:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001112:	187b      	adds	r3, r7, r1
 8001114:	2201      	movs	r2, #1
 8001116:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001118:	187b      	adds	r3, r7, r1
 800111a:	4a0d      	ldr	r2, [pc, #52]	; (8001150 <HAL_I2C_MspInit+0x98>)
 800111c:	0019      	movs	r1, r3
 800111e:	0010      	movs	r0, r2
 8001120:	f000 ffee 	bl	8002100 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001124:	4b09      	ldr	r3, [pc, #36]	; (800114c <HAL_I2C_MspInit+0x94>)
 8001126:	69da      	ldr	r2, [r3, #28]
 8001128:	4b08      	ldr	r3, [pc, #32]	; (800114c <HAL_I2C_MspInit+0x94>)
 800112a:	2180      	movs	r1, #128	; 0x80
 800112c:	0389      	lsls	r1, r1, #14
 800112e:	430a      	orrs	r2, r1
 8001130:	61da      	str	r2, [r3, #28]
 8001132:	4b06      	ldr	r3, [pc, #24]	; (800114c <HAL_I2C_MspInit+0x94>)
 8001134:	69da      	ldr	r2, [r3, #28]
 8001136:	2380      	movs	r3, #128	; 0x80
 8001138:	039b      	lsls	r3, r3, #14
 800113a:	4013      	ands	r3, r2
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001140:	46c0      	nop			; (mov r8, r8)
 8001142:	46bd      	mov	sp, r7
 8001144:	b00b      	add	sp, #44	; 0x2c
 8001146:	bd90      	pop	{r4, r7, pc}
 8001148:	40005400 	.word	0x40005400
 800114c:	40021000 	.word	0x40021000
 8001150:	48000400 	.word	0x48000400

08001154 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001154:	b590      	push	{r4, r7, lr}
 8001156:	b08d      	sub	sp, #52	; 0x34
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	241c      	movs	r4, #28
 800115e:	193b      	adds	r3, r7, r4
 8001160:	0018      	movs	r0, r3
 8001162:	2314      	movs	r3, #20
 8001164:	001a      	movs	r2, r3
 8001166:	2100      	movs	r1, #0
 8001168:	f004 f957 	bl	800541a <memset>
  if(hspi->Instance==SPI1)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a38      	ldr	r2, [pc, #224]	; (8001254 <HAL_SPI_MspInit+0x100>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d132      	bne.n	80011dc <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001176:	4b38      	ldr	r3, [pc, #224]	; (8001258 <HAL_SPI_MspInit+0x104>)
 8001178:	699a      	ldr	r2, [r3, #24]
 800117a:	4b37      	ldr	r3, [pc, #220]	; (8001258 <HAL_SPI_MspInit+0x104>)
 800117c:	2180      	movs	r1, #128	; 0x80
 800117e:	0149      	lsls	r1, r1, #5
 8001180:	430a      	orrs	r2, r1
 8001182:	619a      	str	r2, [r3, #24]
 8001184:	4b34      	ldr	r3, [pc, #208]	; (8001258 <HAL_SPI_MspInit+0x104>)
 8001186:	699a      	ldr	r2, [r3, #24]
 8001188:	2380      	movs	r3, #128	; 0x80
 800118a:	015b      	lsls	r3, r3, #5
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
 8001190:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001192:	4b31      	ldr	r3, [pc, #196]	; (8001258 <HAL_SPI_MspInit+0x104>)
 8001194:	695a      	ldr	r2, [r3, #20]
 8001196:	4b30      	ldr	r3, [pc, #192]	; (8001258 <HAL_SPI_MspInit+0x104>)
 8001198:	2180      	movs	r1, #128	; 0x80
 800119a:	02c9      	lsls	r1, r1, #11
 800119c:	430a      	orrs	r2, r1
 800119e:	615a      	str	r2, [r3, #20]
 80011a0:	4b2d      	ldr	r3, [pc, #180]	; (8001258 <HAL_SPI_MspInit+0x104>)
 80011a2:	695a      	ldr	r2, [r3, #20]
 80011a4:	2380      	movs	r3, #128	; 0x80
 80011a6:	02db      	lsls	r3, r3, #11
 80011a8:	4013      	ands	r3, r2
 80011aa:	617b      	str	r3, [r7, #20]
 80011ac:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80011ae:	0021      	movs	r1, r4
 80011b0:	187b      	adds	r3, r7, r1
 80011b2:	2218      	movs	r2, #24
 80011b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b6:	187b      	adds	r3, r7, r1
 80011b8:	2202      	movs	r2, #2
 80011ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	187b      	adds	r3, r7, r1
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011c2:	187b      	adds	r3, r7, r1
 80011c4:	2203      	movs	r2, #3
 80011c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80011c8:	187b      	adds	r3, r7, r1
 80011ca:	2200      	movs	r2, #0
 80011cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ce:	187b      	adds	r3, r7, r1
 80011d0:	4a22      	ldr	r2, [pc, #136]	; (800125c <HAL_SPI_MspInit+0x108>)
 80011d2:	0019      	movs	r1, r3
 80011d4:	0010      	movs	r0, r2
 80011d6:	f000 ff93 	bl	8002100 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80011da:	e037      	b.n	800124c <HAL_SPI_MspInit+0xf8>
  else if(hspi->Instance==SPI2)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a1f      	ldr	r2, [pc, #124]	; (8001260 <HAL_SPI_MspInit+0x10c>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d132      	bne.n	800124c <HAL_SPI_MspInit+0xf8>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011e6:	4b1c      	ldr	r3, [pc, #112]	; (8001258 <HAL_SPI_MspInit+0x104>)
 80011e8:	69da      	ldr	r2, [r3, #28]
 80011ea:	4b1b      	ldr	r3, [pc, #108]	; (8001258 <HAL_SPI_MspInit+0x104>)
 80011ec:	2180      	movs	r1, #128	; 0x80
 80011ee:	01c9      	lsls	r1, r1, #7
 80011f0:	430a      	orrs	r2, r1
 80011f2:	61da      	str	r2, [r3, #28]
 80011f4:	4b18      	ldr	r3, [pc, #96]	; (8001258 <HAL_SPI_MspInit+0x104>)
 80011f6:	69da      	ldr	r2, [r3, #28]
 80011f8:	2380      	movs	r3, #128	; 0x80
 80011fa:	01db      	lsls	r3, r3, #7
 80011fc:	4013      	ands	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
 8001200:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001202:	4b15      	ldr	r3, [pc, #84]	; (8001258 <HAL_SPI_MspInit+0x104>)
 8001204:	695a      	ldr	r2, [r3, #20]
 8001206:	4b14      	ldr	r3, [pc, #80]	; (8001258 <HAL_SPI_MspInit+0x104>)
 8001208:	2180      	movs	r1, #128	; 0x80
 800120a:	02c9      	lsls	r1, r1, #11
 800120c:	430a      	orrs	r2, r1
 800120e:	615a      	str	r2, [r3, #20]
 8001210:	4b11      	ldr	r3, [pc, #68]	; (8001258 <HAL_SPI_MspInit+0x104>)
 8001212:	695a      	ldr	r2, [r3, #20]
 8001214:	2380      	movs	r3, #128	; 0x80
 8001216:	02db      	lsls	r3, r3, #11
 8001218:	4013      	ands	r3, r2
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800121e:	211c      	movs	r1, #28
 8001220:	187b      	adds	r3, r7, r1
 8001222:	22c0      	movs	r2, #192	; 0xc0
 8001224:	01d2      	lsls	r2, r2, #7
 8001226:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001228:	187b      	adds	r3, r7, r1
 800122a:	2202      	movs	r2, #2
 800122c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	187b      	adds	r3, r7, r1
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001234:	187b      	adds	r3, r7, r1
 8001236:	2203      	movs	r2, #3
 8001238:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800123a:	187b      	adds	r3, r7, r1
 800123c:	2200      	movs	r2, #0
 800123e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001240:	187b      	adds	r3, r7, r1
 8001242:	4a06      	ldr	r2, [pc, #24]	; (800125c <HAL_SPI_MspInit+0x108>)
 8001244:	0019      	movs	r1, r3
 8001246:	0010      	movs	r0, r2
 8001248:	f000 ff5a 	bl	8002100 <HAL_GPIO_Init>
}
 800124c:	46c0      	nop			; (mov r8, r8)
 800124e:	46bd      	mov	sp, r7
 8001250:	b00d      	add	sp, #52	; 0x34
 8001252:	bd90      	pop	{r4, r7, pc}
 8001254:	40013000 	.word	0x40013000
 8001258:	40021000 	.word	0x40021000
 800125c:	48000400 	.word	0x48000400
 8001260:	40003800 	.word	0x40003800

08001264 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a1f      	ldr	r2, [pc, #124]	; (80012f0 <HAL_TIM_Base_MspInit+0x8c>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d11e      	bne.n	80012b4 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001276:	4b1f      	ldr	r3, [pc, #124]	; (80012f4 <HAL_TIM_Base_MspInit+0x90>)
 8001278:	699a      	ldr	r2, [r3, #24]
 800127a:	4b1e      	ldr	r3, [pc, #120]	; (80012f4 <HAL_TIM_Base_MspInit+0x90>)
 800127c:	2180      	movs	r1, #128	; 0x80
 800127e:	0109      	lsls	r1, r1, #4
 8001280:	430a      	orrs	r2, r1
 8001282:	619a      	str	r2, [r3, #24]
 8001284:	4b1b      	ldr	r3, [pc, #108]	; (80012f4 <HAL_TIM_Base_MspInit+0x90>)
 8001286:	699a      	ldr	r2, [r3, #24]
 8001288:	2380      	movs	r3, #128	; 0x80
 800128a:	011b      	lsls	r3, r3, #4
 800128c:	4013      	ands	r3, r2
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 1, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2101      	movs	r1, #1
 8001296:	200d      	movs	r0, #13
 8001298:	f000 fce2 	bl	8001c60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 800129c:	200d      	movs	r0, #13
 800129e:	f000 fcf4 	bl	8001c8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2101      	movs	r1, #1
 80012a6:	200e      	movs	r0, #14
 80012a8:	f000 fcda 	bl	8001c60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80012ac:	200e      	movs	r0, #14
 80012ae:	f000 fcec 	bl	8001c8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012b2:	e019      	b.n	80012e8 <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM2)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	2380      	movs	r3, #128	; 0x80
 80012ba:	05db      	lsls	r3, r3, #23
 80012bc:	429a      	cmp	r2, r3
 80012be:	d113      	bne.n	80012e8 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <HAL_TIM_Base_MspInit+0x90>)
 80012c2:	69da      	ldr	r2, [r3, #28]
 80012c4:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <HAL_TIM_Base_MspInit+0x90>)
 80012c6:	2101      	movs	r1, #1
 80012c8:	430a      	orrs	r2, r1
 80012ca:	61da      	str	r2, [r3, #28]
 80012cc:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <HAL_TIM_Base_MspInit+0x90>)
 80012ce:	69db      	ldr	r3, [r3, #28]
 80012d0:	2201      	movs	r2, #1
 80012d2:	4013      	ands	r3, r2
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80012d8:	2200      	movs	r2, #0
 80012da:	2101      	movs	r1, #1
 80012dc:	200f      	movs	r0, #15
 80012de:	f000 fcbf 	bl	8001c60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012e2:	200f      	movs	r0, #15
 80012e4:	f000 fcd1 	bl	8001c8a <HAL_NVIC_EnableIRQ>
}
 80012e8:	46c0      	nop			; (mov r8, r8)
 80012ea:	46bd      	mov	sp, r7
 80012ec:	b004      	add	sp, #16
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40012c00 	.word	0x40012c00
 80012f4:	40021000 	.word	0x40021000

080012f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012f8:	b590      	push	{r4, r7, lr}
 80012fa:	b08b      	sub	sp, #44	; 0x2c
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	2414      	movs	r4, #20
 8001302:	193b      	adds	r3, r7, r4
 8001304:	0018      	movs	r0, r3
 8001306:	2314      	movs	r3, #20
 8001308:	001a      	movs	r2, r3
 800130a:	2100      	movs	r1, #0
 800130c:	f004 f885 	bl	800541a <memset>
  if(htim->Instance==TIM1)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a2c      	ldr	r2, [pc, #176]	; (80013c8 <HAL_TIM_MspPostInit+0xd0>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d126      	bne.n	8001368 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131a:	4b2c      	ldr	r3, [pc, #176]	; (80013cc <HAL_TIM_MspPostInit+0xd4>)
 800131c:	695a      	ldr	r2, [r3, #20]
 800131e:	4b2b      	ldr	r3, [pc, #172]	; (80013cc <HAL_TIM_MspPostInit+0xd4>)
 8001320:	2180      	movs	r1, #128	; 0x80
 8001322:	0289      	lsls	r1, r1, #10
 8001324:	430a      	orrs	r2, r1
 8001326:	615a      	str	r2, [r3, #20]
 8001328:	4b28      	ldr	r3, [pc, #160]	; (80013cc <HAL_TIM_MspPostInit+0xd4>)
 800132a:	695a      	ldr	r2, [r3, #20]
 800132c:	2380      	movs	r3, #128	; 0x80
 800132e:	029b      	lsls	r3, r3, #10
 8001330:	4013      	ands	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001336:	193b      	adds	r3, r7, r4
 8001338:	2280      	movs	r2, #128	; 0x80
 800133a:	0052      	lsls	r2, r2, #1
 800133c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133e:	0021      	movs	r1, r4
 8001340:	187b      	adds	r3, r7, r1
 8001342:	2202      	movs	r2, #2
 8001344:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	187b      	adds	r3, r7, r1
 8001348:	2200      	movs	r2, #0
 800134a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	187b      	adds	r3, r7, r1
 800134e:	2200      	movs	r2, #0
 8001350:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001352:	187b      	adds	r3, r7, r1
 8001354:	2202      	movs	r2, #2
 8001356:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001358:	187a      	adds	r2, r7, r1
 800135a:	2390      	movs	r3, #144	; 0x90
 800135c:	05db      	lsls	r3, r3, #23
 800135e:	0011      	movs	r1, r2
 8001360:	0018      	movs	r0, r3
 8001362:	f000 fecd 	bl	8002100 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001366:	e02a      	b.n	80013be <HAL_TIM_MspPostInit+0xc6>
  else if(htim->Instance==TIM2)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	2380      	movs	r3, #128	; 0x80
 800136e:	05db      	lsls	r3, r3, #23
 8001370:	429a      	cmp	r2, r3
 8001372:	d124      	bne.n	80013be <HAL_TIM_MspPostInit+0xc6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001374:	4b15      	ldr	r3, [pc, #84]	; (80013cc <HAL_TIM_MspPostInit+0xd4>)
 8001376:	695a      	ldr	r2, [r3, #20]
 8001378:	4b14      	ldr	r3, [pc, #80]	; (80013cc <HAL_TIM_MspPostInit+0xd4>)
 800137a:	2180      	movs	r1, #128	; 0x80
 800137c:	02c9      	lsls	r1, r1, #11
 800137e:	430a      	orrs	r2, r1
 8001380:	615a      	str	r2, [r3, #20]
 8001382:	4b12      	ldr	r3, [pc, #72]	; (80013cc <HAL_TIM_MspPostInit+0xd4>)
 8001384:	695a      	ldr	r2, [r3, #20]
 8001386:	2380      	movs	r3, #128	; 0x80
 8001388:	02db      	lsls	r3, r3, #11
 800138a:	4013      	ands	r3, r2
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001390:	2114      	movs	r1, #20
 8001392:	187b      	adds	r3, r7, r1
 8001394:	2280      	movs	r2, #128	; 0x80
 8001396:	0112      	lsls	r2, r2, #4
 8001398:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139a:	187b      	adds	r3, r7, r1
 800139c:	2202      	movs	r2, #2
 800139e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	187b      	adds	r3, r7, r1
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	187b      	adds	r3, r7, r1
 80013a8:	2200      	movs	r2, #0
 80013aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80013ac:	187b      	adds	r3, r7, r1
 80013ae:	2202      	movs	r2, #2
 80013b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b2:	187b      	adds	r3, r7, r1
 80013b4:	4a06      	ldr	r2, [pc, #24]	; (80013d0 <HAL_TIM_MspPostInit+0xd8>)
 80013b6:	0019      	movs	r1, r3
 80013b8:	0010      	movs	r0, r2
 80013ba:	f000 fea1 	bl	8002100 <HAL_GPIO_Init>
}
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	46bd      	mov	sp, r7
 80013c2:	b00b      	add	sp, #44	; 0x2c
 80013c4:	bd90      	pop	{r4, r7, pc}
 80013c6:	46c0      	nop			; (mov r8, r8)
 80013c8:	40012c00 	.word	0x40012c00
 80013cc:	40021000 	.word	0x40021000
 80013d0:	48000400 	.word	0x48000400

080013d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013d4:	b590      	push	{r4, r7, lr}
 80013d6:	b08b      	sub	sp, #44	; 0x2c
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	2414      	movs	r4, #20
 80013de:	193b      	adds	r3, r7, r4
 80013e0:	0018      	movs	r0, r3
 80013e2:	2314      	movs	r3, #20
 80013e4:	001a      	movs	r2, r3
 80013e6:	2100      	movs	r1, #0
 80013e8:	f004 f817 	bl	800541a <memset>
  if(huart->Instance==USART1)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a21      	ldr	r2, [pc, #132]	; (8001478 <HAL_UART_MspInit+0xa4>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d13b      	bne.n	800146e <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013f6:	4b21      	ldr	r3, [pc, #132]	; (800147c <HAL_UART_MspInit+0xa8>)
 80013f8:	699a      	ldr	r2, [r3, #24]
 80013fa:	4b20      	ldr	r3, [pc, #128]	; (800147c <HAL_UART_MspInit+0xa8>)
 80013fc:	2180      	movs	r1, #128	; 0x80
 80013fe:	01c9      	lsls	r1, r1, #7
 8001400:	430a      	orrs	r2, r1
 8001402:	619a      	str	r2, [r3, #24]
 8001404:	4b1d      	ldr	r3, [pc, #116]	; (800147c <HAL_UART_MspInit+0xa8>)
 8001406:	699a      	ldr	r2, [r3, #24]
 8001408:	2380      	movs	r3, #128	; 0x80
 800140a:	01db      	lsls	r3, r3, #7
 800140c:	4013      	ands	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
 8001410:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001412:	4b1a      	ldr	r3, [pc, #104]	; (800147c <HAL_UART_MspInit+0xa8>)
 8001414:	695a      	ldr	r2, [r3, #20]
 8001416:	4b19      	ldr	r3, [pc, #100]	; (800147c <HAL_UART_MspInit+0xa8>)
 8001418:	2180      	movs	r1, #128	; 0x80
 800141a:	0289      	lsls	r1, r1, #10
 800141c:	430a      	orrs	r2, r1
 800141e:	615a      	str	r2, [r3, #20]
 8001420:	4b16      	ldr	r3, [pc, #88]	; (800147c <HAL_UART_MspInit+0xa8>)
 8001422:	695a      	ldr	r2, [r3, #20]
 8001424:	2380      	movs	r3, #128	; 0x80
 8001426:	029b      	lsls	r3, r3, #10
 8001428:	4013      	ands	r3, r2
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800142e:	193b      	adds	r3, r7, r4
 8001430:	22c0      	movs	r2, #192	; 0xc0
 8001432:	00d2      	lsls	r2, r2, #3
 8001434:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001436:	0021      	movs	r1, r4
 8001438:	187b      	adds	r3, r7, r1
 800143a:	2202      	movs	r2, #2
 800143c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	187b      	adds	r3, r7, r1
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001444:	187b      	adds	r3, r7, r1
 8001446:	2203      	movs	r2, #3
 8001448:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800144a:	187b      	adds	r3, r7, r1
 800144c:	2201      	movs	r2, #1
 800144e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001450:	187a      	adds	r2, r7, r1
 8001452:	2390      	movs	r3, #144	; 0x90
 8001454:	05db      	lsls	r3, r3, #23
 8001456:	0011      	movs	r1, r2
 8001458:	0018      	movs	r0, r3
 800145a:	f000 fe51 	bl	8002100 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800145e:	2200      	movs	r2, #0
 8001460:	2100      	movs	r1, #0
 8001462:	201b      	movs	r0, #27
 8001464:	f000 fbfc 	bl	8001c60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001468:	201b      	movs	r0, #27
 800146a:	f000 fc0e 	bl	8001c8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800146e:	46c0      	nop			; (mov r8, r8)
 8001470:	46bd      	mov	sp, r7
 8001472:	b00b      	add	sp, #44	; 0x2c
 8001474:	bd90      	pop	{r4, r7, pc}
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	40013800 	.word	0x40013800
 800147c:	40021000 	.word	0x40021000

08001480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001484:	e7fe      	b.n	8001484 <NMI_Handler+0x4>

08001486 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148a:	e7fe      	b.n	800148a <HardFault_Handler+0x4>

0800148c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001490:	46c0      	nop			; (mov r8, r8)
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800149a:	46c0      	nop			; (mov r8, r8)
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014a4:	f000 f8b8 	bl	8001618 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014a8:	46c0      	nop			; (mov r8, r8)
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
	...

080014b0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80014b4:	4b03      	ldr	r3, [pc, #12]	; (80014c4 <DMA1_Channel1_IRQHandler+0x14>)
 80014b6:	0018      	movs	r0, r3
 80014b8:	f000 fd63 	bl	8001f82 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80014bc:	46c0      	nop			; (mov r8, r8)
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	46c0      	nop			; (mov r8, r8)
 80014c4:	2000006c 	.word	0x2000006c

080014c8 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014cc:	4b03      	ldr	r3, [pc, #12]	; (80014dc <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80014ce:	0018      	movs	r0, r3
 80014d0:	f002 f8b0 	bl	8003634 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80014d4:	46c0      	nop			; (mov r8, r8)
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	46c0      	nop			; (mov r8, r8)
 80014dc:	200001d8 	.word	0x200001d8

080014e0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014e4:	4b03      	ldr	r3, [pc, #12]	; (80014f4 <TIM1_CC_IRQHandler+0x14>)
 80014e6:	0018      	movs	r0, r3
 80014e8:	f002 f8a4 	bl	8003634 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80014ec:	46c0      	nop			; (mov r8, r8)
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	46c0      	nop			; (mov r8, r8)
 80014f4:	200001d8 	.word	0x200001d8

080014f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014fc:	4b03      	ldr	r3, [pc, #12]	; (800150c <TIM2_IRQHandler+0x14>)
 80014fe:	0018      	movs	r0, r3
 8001500:	f002 f898 	bl	8003634 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001504:	46c0      	nop			; (mov r8, r8)
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	46c0      	nop			; (mov r8, r8)
 800150c:	20000220 	.word	0x20000220

08001510 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001514:	4b03      	ldr	r3, [pc, #12]	; (8001524 <USART1_IRQHandler+0x14>)
 8001516:	0018      	movs	r0, r3
 8001518:	f003 f824 	bl	8004564 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800151c:	46c0      	nop			; (mov r8, r8)
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	46c0      	nop			; (mov r8, r8)
 8001524:	20000268 	.word	0x20000268

08001528 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800152c:	46c0      	nop			; (mov r8, r8)
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
	...

08001534 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001534:	480d      	ldr	r0, [pc, #52]	; (800156c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001536:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001538:	480d      	ldr	r0, [pc, #52]	; (8001570 <LoopForever+0x6>)
  ldr r1, =_edata
 800153a:	490e      	ldr	r1, [pc, #56]	; (8001574 <LoopForever+0xa>)
  ldr r2, =_sidata
 800153c:	4a0e      	ldr	r2, [pc, #56]	; (8001578 <LoopForever+0xe>)
  movs r3, #0
 800153e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001540:	e002      	b.n	8001548 <LoopCopyDataInit>

08001542 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001542:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001544:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001546:	3304      	adds	r3, #4

08001548 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001548:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800154a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800154c:	d3f9      	bcc.n	8001542 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800154e:	4a0b      	ldr	r2, [pc, #44]	; (800157c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001550:	4c0b      	ldr	r4, [pc, #44]	; (8001580 <LoopForever+0x16>)
  movs r3, #0
 8001552:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001554:	e001      	b.n	800155a <LoopFillZerobss>

08001556 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001556:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001558:	3204      	adds	r2, #4

0800155a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800155a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800155c:	d3fb      	bcc.n	8001556 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800155e:	f7ff ffe3 	bl	8001528 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001562:	f003 ff63 	bl	800542c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001566:	f7fe ff6f 	bl	8000448 <main>

0800156a <LoopForever>:

LoopForever:
    b LoopForever
 800156a:	e7fe      	b.n	800156a <LoopForever>
  ldr   r0, =_estack
 800156c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001574:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001578:	08005618 	.word	0x08005618
  ldr r2, =_sbss
 800157c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001580:	20000364 	.word	0x20000364

08001584 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001584:	e7fe      	b.n	8001584 <ADC1_COMP_IRQHandler>
	...

08001588 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800158c:	4b07      	ldr	r3, [pc, #28]	; (80015ac <HAL_Init+0x24>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <HAL_Init+0x24>)
 8001592:	2110      	movs	r1, #16
 8001594:	430a      	orrs	r2, r1
 8001596:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001598:	2003      	movs	r0, #3
 800159a:	f000 f809 	bl	80015b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800159e:	f7ff fc71 	bl	8000e84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	0018      	movs	r0, r3
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	46c0      	nop			; (mov r8, r8)
 80015ac:	40022000 	.word	0x40022000

080015b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b0:	b590      	push	{r4, r7, lr}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015b8:	4b14      	ldr	r3, [pc, #80]	; (800160c <HAL_InitTick+0x5c>)
 80015ba:	681c      	ldr	r4, [r3, #0]
 80015bc:	4b14      	ldr	r3, [pc, #80]	; (8001610 <HAL_InitTick+0x60>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	0019      	movs	r1, r3
 80015c2:	23fa      	movs	r3, #250	; 0xfa
 80015c4:	0098      	lsls	r0, r3, #2
 80015c6:	f7fe fd9f 	bl	8000108 <__udivsi3>
 80015ca:	0003      	movs	r3, r0
 80015cc:	0019      	movs	r1, r3
 80015ce:	0020      	movs	r0, r4
 80015d0:	f7fe fd9a 	bl	8000108 <__udivsi3>
 80015d4:	0003      	movs	r3, r0
 80015d6:	0018      	movs	r0, r3
 80015d8:	f000 fb67 	bl	8001caa <HAL_SYSTICK_Config>
 80015dc:	1e03      	subs	r3, r0, #0
 80015de:	d001      	beq.n	80015e4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e00f      	b.n	8001604 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b03      	cmp	r3, #3
 80015e8:	d80b      	bhi.n	8001602 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	2301      	movs	r3, #1
 80015ee:	425b      	negs	r3, r3
 80015f0:	2200      	movs	r2, #0
 80015f2:	0018      	movs	r0, r3
 80015f4:	f000 fb34 	bl	8001c60 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015f8:	4b06      	ldr	r3, [pc, #24]	; (8001614 <HAL_InitTick+0x64>)
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80015fe:	2300      	movs	r3, #0
 8001600:	e000      	b.n	8001604 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
}
 8001604:	0018      	movs	r0, r3
 8001606:	46bd      	mov	sp, r7
 8001608:	b003      	add	sp, #12
 800160a:	bd90      	pop	{r4, r7, pc}
 800160c:	20000004 	.word	0x20000004
 8001610:	2000000c 	.word	0x2000000c
 8001614:	20000008 	.word	0x20000008

08001618 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800161c:	4b05      	ldr	r3, [pc, #20]	; (8001634 <HAL_IncTick+0x1c>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	001a      	movs	r2, r3
 8001622:	4b05      	ldr	r3, [pc, #20]	; (8001638 <HAL_IncTick+0x20>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	18d2      	adds	r2, r2, r3
 8001628:	4b03      	ldr	r3, [pc, #12]	; (8001638 <HAL_IncTick+0x20>)
 800162a:	601a      	str	r2, [r3, #0]
}
 800162c:	46c0      	nop			; (mov r8, r8)
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	46c0      	nop			; (mov r8, r8)
 8001634:	2000000c 	.word	0x2000000c
 8001638:	20000360 	.word	0x20000360

0800163c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  return uwTick;
 8001640:	4b02      	ldr	r3, [pc, #8]	; (800164c <HAL_GetTick+0x10>)
 8001642:	681b      	ldr	r3, [r3, #0]
}
 8001644:	0018      	movs	r0, r3
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	46c0      	nop			; (mov r8, r8)
 800164c:	20000360 	.word	0x20000360

08001650 <HAL_SuspendTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)

{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8001654:	4b04      	ldr	r3, [pc, #16]	; (8001668 <HAL_SuspendTick+0x18>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4b03      	ldr	r3, [pc, #12]	; (8001668 <HAL_SuspendTick+0x18>)
 800165a:	2102      	movs	r1, #2
 800165c:	438a      	bics	r2, r1
 800165e:	601a      	str	r2, [r3, #0]
}
 8001660:	46c0      	nop			; (mov r8, r8)
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	46c0      	nop			; (mov r8, r8)
 8001668:	e000e010 	.word	0xe000e010

0800166c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001674:	230f      	movs	r3, #15
 8001676:	18fb      	adds	r3, r7, r3
 8001678:	2200      	movs	r2, #0
 800167a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 800167c:	2300      	movs	r3, #0
 800167e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d101      	bne.n	800168a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e125      	b.n	80018d6 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800168e:	2b00      	cmp	r3, #0
 8001690:	d10a      	bne.n	80016a8 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2234      	movs	r2, #52	; 0x34
 800169c:	2100      	movs	r1, #0
 800169e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	0018      	movs	r0, r3
 80016a4:	f7ff fc12 	bl	8000ecc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ac:	2210      	movs	r2, #16
 80016ae:	4013      	ands	r3, r2
 80016b0:	d000      	beq.n	80016b4 <HAL_ADC_Init+0x48>
 80016b2:	e103      	b.n	80018bc <HAL_ADC_Init+0x250>
 80016b4:	230f      	movs	r3, #15
 80016b6:	18fb      	adds	r3, r7, r3
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d000      	beq.n	80016c0 <HAL_ADC_Init+0x54>
 80016be:	e0fd      	b.n	80018bc <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	2204      	movs	r2, #4
 80016c8:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80016ca:	d000      	beq.n	80016ce <HAL_ADC_Init+0x62>
 80016cc:	e0f6      	b.n	80018bc <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016d2:	4a83      	ldr	r2, [pc, #524]	; (80018e0 <HAL_ADC_Init+0x274>)
 80016d4:	4013      	ands	r3, r2
 80016d6:	2202      	movs	r2, #2
 80016d8:	431a      	orrs	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	2203      	movs	r2, #3
 80016e6:	4013      	ands	r3, r2
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d112      	bne.n	8001712 <HAL_ADC_Init+0xa6>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2201      	movs	r2, #1
 80016f4:	4013      	ands	r3, r2
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d009      	beq.n	800170e <HAL_ADC_Init+0xa2>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	68da      	ldr	r2, [r3, #12]
 8001700:	2380      	movs	r3, #128	; 0x80
 8001702:	021b      	lsls	r3, r3, #8
 8001704:	401a      	ands	r2, r3
 8001706:	2380      	movs	r3, #128	; 0x80
 8001708:	021b      	lsls	r3, r3, #8
 800170a:	429a      	cmp	r2, r3
 800170c:	d101      	bne.n	8001712 <HAL_ADC_Init+0xa6>
 800170e:	2301      	movs	r3, #1
 8001710:	e000      	b.n	8001714 <HAL_ADC_Init+0xa8>
 8001712:	2300      	movs	r3, #0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d116      	bne.n	8001746 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	2218      	movs	r2, #24
 8001720:	4393      	bics	r3, r2
 8001722:	0019      	movs	r1, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	430a      	orrs	r2, r1
 800172e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	0899      	lsrs	r1, r3, #2
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	430a      	orrs	r2, r1
 8001744:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	68da      	ldr	r2, [r3, #12]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4964      	ldr	r1, [pc, #400]	; (80018e4 <HAL_ADC_Init+0x278>)
 8001752:	400a      	ands	r2, r1
 8001754:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	7e1b      	ldrb	r3, [r3, #24]
 800175a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	7e5b      	ldrb	r3, [r3, #25]
 8001760:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001762:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	7e9b      	ldrb	r3, [r3, #26]
 8001768:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800176a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001770:	2b01      	cmp	r3, #1
 8001772:	d002      	beq.n	800177a <HAL_ADC_Init+0x10e>
 8001774:	2380      	movs	r3, #128	; 0x80
 8001776:	015b      	lsls	r3, r3, #5
 8001778:	e000      	b.n	800177c <HAL_ADC_Init+0x110>
 800177a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800177c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001782:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	691b      	ldr	r3, [r3, #16]
 8001788:	2b02      	cmp	r3, #2
 800178a:	d101      	bne.n	8001790 <HAL_ADC_Init+0x124>
 800178c:	2304      	movs	r3, #4
 800178e:	e000      	b.n	8001792 <HAL_ADC_Init+0x126>
 8001790:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001792:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2124      	movs	r1, #36	; 0x24
 8001798:	5c5b      	ldrb	r3, [r3, r1]
 800179a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800179c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	7edb      	ldrb	r3, [r3, #27]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d115      	bne.n	80017d8 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	7e9b      	ldrb	r3, [r3, #26]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d105      	bne.n	80017c0 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	2280      	movs	r2, #128	; 0x80
 80017b8:	0252      	lsls	r2, r2, #9
 80017ba:	4313      	orrs	r3, r2
 80017bc:	60bb      	str	r3, [r7, #8]
 80017be:	e00b      	b.n	80017d8 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017c4:	2220      	movs	r2, #32
 80017c6:	431a      	orrs	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017d0:	2201      	movs	r2, #1
 80017d2:	431a      	orrs	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	69da      	ldr	r2, [r3, #28]
 80017dc:	23c2      	movs	r3, #194	; 0xc2
 80017de:	33ff      	adds	r3, #255	; 0xff
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d007      	beq.n	80017f4 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80017ec:	4313      	orrs	r3, r2
 80017ee:	68ba      	ldr	r2, [r7, #8]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	68d9      	ldr	r1, [r3, #12]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	430a      	orrs	r2, r1
 8001802:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001808:	2380      	movs	r3, #128	; 0x80
 800180a:	055b      	lsls	r3, r3, #21
 800180c:	429a      	cmp	r2, r3
 800180e:	d01b      	beq.n	8001848 <HAL_ADC_Init+0x1dc>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001814:	2b01      	cmp	r3, #1
 8001816:	d017      	beq.n	8001848 <HAL_ADC_Init+0x1dc>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181c:	2b02      	cmp	r3, #2
 800181e:	d013      	beq.n	8001848 <HAL_ADC_Init+0x1dc>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001824:	2b03      	cmp	r3, #3
 8001826:	d00f      	beq.n	8001848 <HAL_ADC_Init+0x1dc>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182c:	2b04      	cmp	r3, #4
 800182e:	d00b      	beq.n	8001848 <HAL_ADC_Init+0x1dc>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001834:	2b05      	cmp	r3, #5
 8001836:	d007      	beq.n	8001848 <HAL_ADC_Init+0x1dc>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183c:	2b06      	cmp	r3, #6
 800183e:	d003      	beq.n	8001848 <HAL_ADC_Init+0x1dc>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001844:	2b07      	cmp	r3, #7
 8001846:	d112      	bne.n	800186e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	695a      	ldr	r2, [r3, #20]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2107      	movs	r1, #7
 8001854:	438a      	bics	r2, r1
 8001856:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6959      	ldr	r1, [r3, #20]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001862:	2207      	movs	r2, #7
 8001864:	401a      	ands	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	430a      	orrs	r2, r1
 800186c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	4a1c      	ldr	r2, [pc, #112]	; (80018e8 <HAL_ADC_Init+0x27c>)
 8001876:	4013      	ands	r3, r2
 8001878:	68ba      	ldr	r2, [r7, #8]
 800187a:	429a      	cmp	r2, r3
 800187c:	d10b      	bne.n	8001896 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001888:	2203      	movs	r2, #3
 800188a:	4393      	bics	r3, r2
 800188c:	2201      	movs	r2, #1
 800188e:	431a      	orrs	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001894:	e01c      	b.n	80018d0 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800189a:	2212      	movs	r2, #18
 800189c:	4393      	bics	r3, r2
 800189e:	2210      	movs	r2, #16
 80018a0:	431a      	orrs	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018aa:	2201      	movs	r2, #1
 80018ac:	431a      	orrs	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80018b2:	230f      	movs	r3, #15
 80018b4:	18fb      	adds	r3, r7, r3
 80018b6:	2201      	movs	r2, #1
 80018b8:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80018ba:	e009      	b.n	80018d0 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c0:	2210      	movs	r2, #16
 80018c2:	431a      	orrs	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80018c8:	230f      	movs	r3, #15
 80018ca:	18fb      	adds	r3, r7, r3
 80018cc:	2201      	movs	r2, #1
 80018ce:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80018d0:	230f      	movs	r3, #15
 80018d2:	18fb      	adds	r3, r7, r3
 80018d4:	781b      	ldrb	r3, [r3, #0]
}
 80018d6:	0018      	movs	r0, r3
 80018d8:	46bd      	mov	sp, r7
 80018da:	b004      	add	sp, #16
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	46c0      	nop			; (mov r8, r8)
 80018e0:	fffffefd 	.word	0xfffffefd
 80018e4:	fffe0219 	.word	0xfffe0219
 80018e8:	833fffe7 	.word	0x833fffe7

080018ec <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018f6:	230f      	movs	r3, #15
 80018f8:	18fb      	adds	r3, r7, r3
 80018fa:	2200      	movs	r2, #0
 80018fc:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80018fe:	2300      	movs	r3, #0
 8001900:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001906:	2380      	movs	r3, #128	; 0x80
 8001908:	055b      	lsls	r3, r3, #21
 800190a:	429a      	cmp	r2, r3
 800190c:	d011      	beq.n	8001932 <HAL_ADC_ConfigChannel+0x46>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001912:	2b01      	cmp	r3, #1
 8001914:	d00d      	beq.n	8001932 <HAL_ADC_ConfigChannel+0x46>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191a:	2b02      	cmp	r3, #2
 800191c:	d009      	beq.n	8001932 <HAL_ADC_ConfigChannel+0x46>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001922:	2b03      	cmp	r3, #3
 8001924:	d005      	beq.n	8001932 <HAL_ADC_ConfigChannel+0x46>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192a:	2b04      	cmp	r3, #4
 800192c:	d001      	beq.n	8001932 <HAL_ADC_ConfigChannel+0x46>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2234      	movs	r2, #52	; 0x34
 8001936:	5c9b      	ldrb	r3, [r3, r2]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d101      	bne.n	8001940 <HAL_ADC_ConfigChannel+0x54>
 800193c:	2302      	movs	r3, #2
 800193e:	e0d0      	b.n	8001ae2 <HAL_ADC_ConfigChannel+0x1f6>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2234      	movs	r2, #52	; 0x34
 8001944:	2101      	movs	r1, #1
 8001946:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	2204      	movs	r2, #4
 8001950:	4013      	ands	r3, r2
 8001952:	d000      	beq.n	8001956 <HAL_ADC_ConfigChannel+0x6a>
 8001954:	e0b4      	b.n	8001ac0 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	4a64      	ldr	r2, [pc, #400]	; (8001aec <HAL_ADC_ConfigChannel+0x200>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d100      	bne.n	8001962 <HAL_ADC_ConfigChannel+0x76>
 8001960:	e082      	b.n	8001a68 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2201      	movs	r2, #1
 800196e:	409a      	lsls	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	430a      	orrs	r2, r1
 8001976:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800197c:	2380      	movs	r3, #128	; 0x80
 800197e:	055b      	lsls	r3, r3, #21
 8001980:	429a      	cmp	r2, r3
 8001982:	d037      	beq.n	80019f4 <HAL_ADC_ConfigChannel+0x108>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001988:	2b01      	cmp	r3, #1
 800198a:	d033      	beq.n	80019f4 <HAL_ADC_ConfigChannel+0x108>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001990:	2b02      	cmp	r3, #2
 8001992:	d02f      	beq.n	80019f4 <HAL_ADC_ConfigChannel+0x108>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001998:	2b03      	cmp	r3, #3
 800199a:	d02b      	beq.n	80019f4 <HAL_ADC_ConfigChannel+0x108>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a0:	2b04      	cmp	r3, #4
 80019a2:	d027      	beq.n	80019f4 <HAL_ADC_ConfigChannel+0x108>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a8:	2b05      	cmp	r3, #5
 80019aa:	d023      	beq.n	80019f4 <HAL_ADC_ConfigChannel+0x108>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b0:	2b06      	cmp	r3, #6
 80019b2:	d01f      	beq.n	80019f4 <HAL_ADC_ConfigChannel+0x108>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b8:	2b07      	cmp	r3, #7
 80019ba:	d01b      	beq.n	80019f4 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	2107      	movs	r1, #7
 80019c8:	400b      	ands	r3, r1
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d012      	beq.n	80019f4 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	695a      	ldr	r2, [r3, #20]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2107      	movs	r1, #7
 80019da:	438a      	bics	r2, r1
 80019dc:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6959      	ldr	r1, [r3, #20]
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	2207      	movs	r2, #7
 80019ea:	401a      	ands	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	430a      	orrs	r2, r1
 80019f2:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b10      	cmp	r3, #16
 80019fa:	d007      	beq.n	8001a0c <HAL_ADC_ConfigChannel+0x120>
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b11      	cmp	r3, #17
 8001a02:	d003      	beq.n	8001a0c <HAL_ADC_ConfigChannel+0x120>
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b12      	cmp	r3, #18
 8001a0a:	d163      	bne.n	8001ad4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001a0c:	4b38      	ldr	r3, [pc, #224]	; (8001af0 <HAL_ADC_ConfigChannel+0x204>)
 8001a0e:	6819      	ldr	r1, [r3, #0]
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b10      	cmp	r3, #16
 8001a16:	d009      	beq.n	8001a2c <HAL_ADC_ConfigChannel+0x140>
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b11      	cmp	r3, #17
 8001a1e:	d102      	bne.n	8001a26 <HAL_ADC_ConfigChannel+0x13a>
 8001a20:	2380      	movs	r3, #128	; 0x80
 8001a22:	03db      	lsls	r3, r3, #15
 8001a24:	e004      	b.n	8001a30 <HAL_ADC_ConfigChannel+0x144>
 8001a26:	2380      	movs	r3, #128	; 0x80
 8001a28:	045b      	lsls	r3, r3, #17
 8001a2a:	e001      	b.n	8001a30 <HAL_ADC_ConfigChannel+0x144>
 8001a2c:	2380      	movs	r3, #128	; 0x80
 8001a2e:	041b      	lsls	r3, r3, #16
 8001a30:	4a2f      	ldr	r2, [pc, #188]	; (8001af0 <HAL_ADC_ConfigChannel+0x204>)
 8001a32:	430b      	orrs	r3, r1
 8001a34:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2b10      	cmp	r3, #16
 8001a3c:	d14a      	bne.n	8001ad4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a3e:	4b2d      	ldr	r3, [pc, #180]	; (8001af4 <HAL_ADC_ConfigChannel+0x208>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	492d      	ldr	r1, [pc, #180]	; (8001af8 <HAL_ADC_ConfigChannel+0x20c>)
 8001a44:	0018      	movs	r0, r3
 8001a46:	f7fe fb5f 	bl	8000108 <__udivsi3>
 8001a4a:	0003      	movs	r3, r0
 8001a4c:	001a      	movs	r2, r3
 8001a4e:	0013      	movs	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	189b      	adds	r3, r3, r2
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a58:	e002      	b.n	8001a60 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1f9      	bne.n	8001a5a <HAL_ADC_ConfigChannel+0x16e>
 8001a66:	e035      	b.n	8001ad4 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2101      	movs	r1, #1
 8001a74:	4099      	lsls	r1, r3
 8001a76:	000b      	movs	r3, r1
 8001a78:	43d9      	mvns	r1, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	400a      	ands	r2, r1
 8001a80:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2b10      	cmp	r3, #16
 8001a88:	d007      	beq.n	8001a9a <HAL_ADC_ConfigChannel+0x1ae>
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2b11      	cmp	r3, #17
 8001a90:	d003      	beq.n	8001a9a <HAL_ADC_ConfigChannel+0x1ae>
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2b12      	cmp	r3, #18
 8001a98:	d11c      	bne.n	8001ad4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001a9a:	4b15      	ldr	r3, [pc, #84]	; (8001af0 <HAL_ADC_ConfigChannel+0x204>)
 8001a9c:	6819      	ldr	r1, [r3, #0]
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2b10      	cmp	r3, #16
 8001aa4:	d007      	beq.n	8001ab6 <HAL_ADC_ConfigChannel+0x1ca>
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2b11      	cmp	r3, #17
 8001aac:	d101      	bne.n	8001ab2 <HAL_ADC_ConfigChannel+0x1c6>
 8001aae:	4b13      	ldr	r3, [pc, #76]	; (8001afc <HAL_ADC_ConfigChannel+0x210>)
 8001ab0:	e002      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x1cc>
 8001ab2:	4b13      	ldr	r3, [pc, #76]	; (8001b00 <HAL_ADC_ConfigChannel+0x214>)
 8001ab4:	e000      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x1cc>
 8001ab6:	4b13      	ldr	r3, [pc, #76]	; (8001b04 <HAL_ADC_ConfigChannel+0x218>)
 8001ab8:	4a0d      	ldr	r2, [pc, #52]	; (8001af0 <HAL_ADC_ConfigChannel+0x204>)
 8001aba:	400b      	ands	r3, r1
 8001abc:	6013      	str	r3, [r2, #0]
 8001abe:	e009      	b.n	8001ad4 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ac4:	2220      	movs	r2, #32
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001acc:	230f      	movs	r3, #15
 8001ace:	18fb      	adds	r3, r7, r3
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2234      	movs	r2, #52	; 0x34
 8001ad8:	2100      	movs	r1, #0
 8001ada:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001adc:	230f      	movs	r3, #15
 8001ade:	18fb      	adds	r3, r7, r3
 8001ae0:	781b      	ldrb	r3, [r3, #0]
}
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	b004      	add	sp, #16
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	46c0      	nop			; (mov r8, r8)
 8001aec:	00001001 	.word	0x00001001
 8001af0:	40012708 	.word	0x40012708
 8001af4:	20000004 	.word	0x20000004
 8001af8:	000f4240 	.word	0x000f4240
 8001afc:	ffbfffff 	.word	0xffbfffff
 8001b00:	feffffff 	.word	0xfeffffff
 8001b04:	ff7fffff 	.word	0xff7fffff

08001b08 <__NVIC_EnableIRQ>:
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	0002      	movs	r2, r0
 8001b10:	1dfb      	adds	r3, r7, #7
 8001b12:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b14:	1dfb      	adds	r3, r7, #7
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b7f      	cmp	r3, #127	; 0x7f
 8001b1a:	d809      	bhi.n	8001b30 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b1c:	1dfb      	adds	r3, r7, #7
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	001a      	movs	r2, r3
 8001b22:	231f      	movs	r3, #31
 8001b24:	401a      	ands	r2, r3
 8001b26:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <__NVIC_EnableIRQ+0x30>)
 8001b28:	2101      	movs	r1, #1
 8001b2a:	4091      	lsls	r1, r2
 8001b2c:	000a      	movs	r2, r1
 8001b2e:	601a      	str	r2, [r3, #0]
}
 8001b30:	46c0      	nop			; (mov r8, r8)
 8001b32:	46bd      	mov	sp, r7
 8001b34:	b002      	add	sp, #8
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	e000e100 	.word	0xe000e100

08001b3c <__NVIC_SetPriority>:
{
 8001b3c:	b590      	push	{r4, r7, lr}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	0002      	movs	r2, r0
 8001b44:	6039      	str	r1, [r7, #0]
 8001b46:	1dfb      	adds	r3, r7, #7
 8001b48:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b4a:	1dfb      	adds	r3, r7, #7
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	2b7f      	cmp	r3, #127	; 0x7f
 8001b50:	d828      	bhi.n	8001ba4 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b52:	4a2f      	ldr	r2, [pc, #188]	; (8001c10 <__NVIC_SetPriority+0xd4>)
 8001b54:	1dfb      	adds	r3, r7, #7
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	b25b      	sxtb	r3, r3
 8001b5a:	089b      	lsrs	r3, r3, #2
 8001b5c:	33c0      	adds	r3, #192	; 0xc0
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	589b      	ldr	r3, [r3, r2]
 8001b62:	1dfa      	adds	r2, r7, #7
 8001b64:	7812      	ldrb	r2, [r2, #0]
 8001b66:	0011      	movs	r1, r2
 8001b68:	2203      	movs	r2, #3
 8001b6a:	400a      	ands	r2, r1
 8001b6c:	00d2      	lsls	r2, r2, #3
 8001b6e:	21ff      	movs	r1, #255	; 0xff
 8001b70:	4091      	lsls	r1, r2
 8001b72:	000a      	movs	r2, r1
 8001b74:	43d2      	mvns	r2, r2
 8001b76:	401a      	ands	r2, r3
 8001b78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	019b      	lsls	r3, r3, #6
 8001b7e:	22ff      	movs	r2, #255	; 0xff
 8001b80:	401a      	ands	r2, r3
 8001b82:	1dfb      	adds	r3, r7, #7
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	0018      	movs	r0, r3
 8001b88:	2303      	movs	r3, #3
 8001b8a:	4003      	ands	r3, r0
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b90:	481f      	ldr	r0, [pc, #124]	; (8001c10 <__NVIC_SetPriority+0xd4>)
 8001b92:	1dfb      	adds	r3, r7, #7
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	b25b      	sxtb	r3, r3
 8001b98:	089b      	lsrs	r3, r3, #2
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	33c0      	adds	r3, #192	; 0xc0
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	501a      	str	r2, [r3, r0]
}
 8001ba2:	e031      	b.n	8001c08 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ba4:	4a1b      	ldr	r2, [pc, #108]	; (8001c14 <__NVIC_SetPriority+0xd8>)
 8001ba6:	1dfb      	adds	r3, r7, #7
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	0019      	movs	r1, r3
 8001bac:	230f      	movs	r3, #15
 8001bae:	400b      	ands	r3, r1
 8001bb0:	3b08      	subs	r3, #8
 8001bb2:	089b      	lsrs	r3, r3, #2
 8001bb4:	3306      	adds	r3, #6
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	18d3      	adds	r3, r2, r3
 8001bba:	3304      	adds	r3, #4
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	1dfa      	adds	r2, r7, #7
 8001bc0:	7812      	ldrb	r2, [r2, #0]
 8001bc2:	0011      	movs	r1, r2
 8001bc4:	2203      	movs	r2, #3
 8001bc6:	400a      	ands	r2, r1
 8001bc8:	00d2      	lsls	r2, r2, #3
 8001bca:	21ff      	movs	r1, #255	; 0xff
 8001bcc:	4091      	lsls	r1, r2
 8001bce:	000a      	movs	r2, r1
 8001bd0:	43d2      	mvns	r2, r2
 8001bd2:	401a      	ands	r2, r3
 8001bd4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	019b      	lsls	r3, r3, #6
 8001bda:	22ff      	movs	r2, #255	; 0xff
 8001bdc:	401a      	ands	r2, r3
 8001bde:	1dfb      	adds	r3, r7, #7
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	0018      	movs	r0, r3
 8001be4:	2303      	movs	r3, #3
 8001be6:	4003      	ands	r3, r0
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bec:	4809      	ldr	r0, [pc, #36]	; (8001c14 <__NVIC_SetPriority+0xd8>)
 8001bee:	1dfb      	adds	r3, r7, #7
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	001c      	movs	r4, r3
 8001bf4:	230f      	movs	r3, #15
 8001bf6:	4023      	ands	r3, r4
 8001bf8:	3b08      	subs	r3, #8
 8001bfa:	089b      	lsrs	r3, r3, #2
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	3306      	adds	r3, #6
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	18c3      	adds	r3, r0, r3
 8001c04:	3304      	adds	r3, #4
 8001c06:	601a      	str	r2, [r3, #0]
}
 8001c08:	46c0      	nop			; (mov r8, r8)
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	b003      	add	sp, #12
 8001c0e:	bd90      	pop	{r4, r7, pc}
 8001c10:	e000e100 	.word	0xe000e100
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	1e5a      	subs	r2, r3, #1
 8001c24:	2380      	movs	r3, #128	; 0x80
 8001c26:	045b      	lsls	r3, r3, #17
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d301      	bcc.n	8001c30 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e010      	b.n	8001c52 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c30:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <SysTick_Config+0x44>)
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	3a01      	subs	r2, #1
 8001c36:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c38:	2301      	movs	r3, #1
 8001c3a:	425b      	negs	r3, r3
 8001c3c:	2103      	movs	r1, #3
 8001c3e:	0018      	movs	r0, r3
 8001c40:	f7ff ff7c 	bl	8001b3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c44:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <SysTick_Config+0x44>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c4a:	4b04      	ldr	r3, [pc, #16]	; (8001c5c <SysTick_Config+0x44>)
 8001c4c:	2207      	movs	r2, #7
 8001c4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	0018      	movs	r0, r3
 8001c54:	46bd      	mov	sp, r7
 8001c56:	b002      	add	sp, #8
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	46c0      	nop			; (mov r8, r8)
 8001c5c:	e000e010 	.word	0xe000e010

08001c60 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60b9      	str	r1, [r7, #8]
 8001c68:	607a      	str	r2, [r7, #4]
 8001c6a:	210f      	movs	r1, #15
 8001c6c:	187b      	adds	r3, r7, r1
 8001c6e:	1c02      	adds	r2, r0, #0
 8001c70:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001c72:	68ba      	ldr	r2, [r7, #8]
 8001c74:	187b      	adds	r3, r7, r1
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	b25b      	sxtb	r3, r3
 8001c7a:	0011      	movs	r1, r2
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	f7ff ff5d 	bl	8001b3c <__NVIC_SetPriority>
}
 8001c82:	46c0      	nop			; (mov r8, r8)
 8001c84:	46bd      	mov	sp, r7
 8001c86:	b004      	add	sp, #16
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	0002      	movs	r2, r0
 8001c92:	1dfb      	adds	r3, r7, #7
 8001c94:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c96:	1dfb      	adds	r3, r7, #7
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	b25b      	sxtb	r3, r3
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	f7ff ff33 	bl	8001b08 <__NVIC_EnableIRQ>
}
 8001ca2:	46c0      	nop			; (mov r8, r8)
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	b002      	add	sp, #8
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	f7ff ffaf 	bl	8001c18 <SysTick_Config>
 8001cba:	0003      	movs	r3, r0
}
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	b002      	add	sp, #8
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e015      	b.n	8001d02 <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if (hdac->State == HAL_DAC_STATE_RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	791b      	ldrb	r3, [r3, #4]
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d106      	bne.n	8001cee <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	0018      	movs	r0, r3
 8001cea:	f7ff f99f 	bl	800102c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2202      	movs	r2, #2
 8001cf2:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	0018      	movs	r0, r3
 8001d04:	46bd      	mov	sp, r7
 8001d06:	b002      	add	sp, #8
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_DAC_ConfigChannel>:
  *          This parameter can be one of the following values:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b086      	sub	sp, #24
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	60f8      	str	r0, [r7, #12]
 8001d12:	60b9      	str	r1, [r7, #8]
 8001d14:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001d16:	2300      	movs	r3, #0
 8001d18:	617b      	str	r3, [r7, #20]
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	795b      	ldrb	r3, [r3, #5]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d101      	bne.n	8001d2a <HAL_DAC_ConfigChannel+0x20>
 8001d26:	2302      	movs	r3, #2
 8001d28:	e029      	b.n	8001d7e <HAL_DAC_ConfigChannel+0x74>
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2202      	movs	r2, #2
 8001d34:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel); 
 8001d3e:	223e      	movs	r2, #62	; 0x3e
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	409a      	lsls	r2, r3
 8001d44:	0013      	movs	r3, r2
 8001d46:	43da      	mvns	r2, r3
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	409a      	lsls	r2, r3
 8001d60:	0013      	movs	r3, r2
 8001d62:	697a      	ldr	r2, [r7, #20]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2201      	movs	r2, #1
 8001d74:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	0018      	movs	r0, r3
 8001d80:	46bd      	mov	sp, r7
 8001d82:	b006      	add	sp, #24
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_DAC_Start>:
       /* STM32F091xC  STM32F098xx */

#if defined (STM32F051x8) || defined (STM32F058xx)

HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
 8001d8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	795b      	ldrb	r3, [r3, #5]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d101      	bne.n	8001d9c <HAL_DAC_Start+0x16>
 8001d98:	2302      	movs	r3, #2
 8001d9a:	e028      	b.n	8001dee <HAL_DAC_Start+0x68>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2202      	movs	r2, #2
 8001da6:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6819      	ldr	r1, [r3, #0]
 8001dae:	2201      	movs	r2, #1
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	409a      	lsls	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d10e      	bne.n	8001de0 <HAL_DAC_Start+0x5a>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	223c      	movs	r2, #60	; 0x3c
 8001dca:	4013      	ands	r3, r2
 8001dcc:	2b3c      	cmp	r3, #60	; 0x3c
 8001dce:	d107      	bne.n	8001de0 <HAL_DAC_Start+0x5a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2101      	movs	r1, #1
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	605a      	str	r2, [r3, #4]
    }
  }
 
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	0018      	movs	r0, r3
 8001df0:	46bd      	mov	sp, r7
 8001df2:	b002      	add	sp, #8
 8001df4:	bd80      	pop	{r7, pc}
	...

08001df8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e036      	b.n	8001e7c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2221      	movs	r2, #33	; 0x21
 8001e12:	2102      	movs	r1, #2
 8001e14:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	4a18      	ldr	r2, [pc, #96]	; (8001e84 <HAL_DMA_Init+0x8c>)
 8001e22:	4013      	ands	r3, r2
 8001e24:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001e2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	695b      	ldr	r3, [r3, #20]
 8001e40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	69db      	ldr	r3, [r3, #28]
 8001e4c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	0018      	movs	r0, r3
 8001e60:	f000 f932 	bl	80020c8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2221      	movs	r2, #33	; 0x21
 8001e6e:	2101      	movs	r1, #1
 8001e70:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2220      	movs	r2, #32
 8001e76:	2100      	movs	r1, #0
 8001e78:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
}  
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	b004      	add	sp, #16
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	ffffc00f 	.word	0xffffc00f

08001e88 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2221      	movs	r2, #33	; 0x21
 8001e94:	5c9b      	ldrb	r3, [r3, r2]
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d008      	beq.n	8001eae <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2204      	movs	r2, #4
 8001ea0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2220      	movs	r2, #32
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e020      	b.n	8001ef0 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	210e      	movs	r1, #14
 8001eba:	438a      	bics	r2, r1
 8001ebc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2101      	movs	r1, #1
 8001eca:	438a      	bics	r2, r1
 8001ecc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	4091      	lsls	r1, r2
 8001eda:	000a      	movs	r2, r1
 8001edc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2221      	movs	r2, #33	; 0x21
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2220      	movs	r2, #32
 8001eea:	2100      	movs	r1, #0
 8001eec:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	b002      	add	sp, #8
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f00:	210f      	movs	r1, #15
 8001f02:	187b      	adds	r3, r7, r1
 8001f04:	2200      	movs	r2, #0
 8001f06:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2221      	movs	r2, #33	; 0x21
 8001f0c:	5c9b      	ldrb	r3, [r3, r2]
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d006      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2204      	movs	r2, #4
 8001f18:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001f1a:	187b      	adds	r3, r7, r1
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	701a      	strb	r2, [r3, #0]
 8001f20:	e028      	b.n	8001f74 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	210e      	movs	r1, #14
 8001f2e:	438a      	bics	r2, r1
 8001f30:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	438a      	bics	r2, r1
 8001f40:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	4091      	lsls	r1, r2
 8001f4e:	000a      	movs	r2, r1
 8001f50:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2221      	movs	r2, #33	; 0x21
 8001f56:	2101      	movs	r1, #1
 8001f58:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2220      	movs	r2, #32
 8001f5e:	2100      	movs	r1, #0
 8001f60:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d004      	beq.n	8001f74 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	0010      	movs	r0, r2
 8001f72:	4798      	blx	r3
    } 
  }
  return status;
 8001f74:	230f      	movs	r3, #15
 8001f76:	18fb      	adds	r3, r7, r3
 8001f78:	781b      	ldrb	r3, [r3, #0]
}
 8001f7a:	0018      	movs	r0, r3
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	b004      	add	sp, #16
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b084      	sub	sp, #16
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	2204      	movs	r2, #4
 8001fa0:	409a      	lsls	r2, r3
 8001fa2:	0013      	movs	r3, r2
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	d024      	beq.n	8001ff4 <HAL_DMA_IRQHandler+0x72>
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	2204      	movs	r2, #4
 8001fae:	4013      	ands	r3, r2
 8001fb0:	d020      	beq.n	8001ff4 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2220      	movs	r2, #32
 8001fba:	4013      	ands	r3, r2
 8001fbc:	d107      	bne.n	8001fce <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2104      	movs	r1, #4
 8001fca:	438a      	bics	r2, r1
 8001fcc:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd6:	2104      	movs	r1, #4
 8001fd8:	4091      	lsls	r1, r2
 8001fda:	000a      	movs	r2, r1
 8001fdc:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d100      	bne.n	8001fe8 <HAL_DMA_IRQHandler+0x66>
 8001fe6:	e06a      	b.n	80020be <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	0010      	movs	r0, r2
 8001ff0:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001ff2:	e064      	b.n	80020be <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	409a      	lsls	r2, r3
 8001ffc:	0013      	movs	r3, r2
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	4013      	ands	r3, r2
 8002002:	d02b      	beq.n	800205c <HAL_DMA_IRQHandler+0xda>
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	2202      	movs	r2, #2
 8002008:	4013      	ands	r3, r2
 800200a:	d027      	beq.n	800205c <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2220      	movs	r2, #32
 8002014:	4013      	ands	r3, r2
 8002016:	d10b      	bne.n	8002030 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	210a      	movs	r1, #10
 8002024:	438a      	bics	r2, r1
 8002026:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2221      	movs	r2, #33	; 0x21
 800202c:	2101      	movs	r1, #1
 800202e:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002038:	2102      	movs	r1, #2
 800203a:	4091      	lsls	r1, r2
 800203c:	000a      	movs	r2, r1
 800203e:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2220      	movs	r2, #32
 8002044:	2100      	movs	r1, #0
 8002046:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204c:	2b00      	cmp	r3, #0
 800204e:	d036      	beq.n	80020be <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	0010      	movs	r0, r2
 8002058:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800205a:	e030      	b.n	80020be <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002060:	2208      	movs	r2, #8
 8002062:	409a      	lsls	r2, r3
 8002064:	0013      	movs	r3, r2
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	4013      	ands	r3, r2
 800206a:	d028      	beq.n	80020be <HAL_DMA_IRQHandler+0x13c>
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	2208      	movs	r2, #8
 8002070:	4013      	ands	r3, r2
 8002072:	d024      	beq.n	80020be <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	210e      	movs	r1, #14
 8002080:	438a      	bics	r2, r1
 8002082:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800208c:	2101      	movs	r1, #1
 800208e:	4091      	lsls	r1, r2
 8002090:	000a      	movs	r2, r1
 8002092:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2221      	movs	r2, #33	; 0x21
 800209e:	2101      	movs	r1, #1
 80020a0:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2220      	movs	r2, #32
 80020a6:	2100      	movs	r1, #0
 80020a8:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d005      	beq.n	80020be <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	0010      	movs	r0, r2
 80020ba:	4798      	blx	r3
    }
   }
}  
 80020bc:	e7ff      	b.n	80020be <HAL_DMA_IRQHandler+0x13c>
 80020be:	46c0      	nop			; (mov r8, r8)
 80020c0:	46bd      	mov	sp, r7
 80020c2:	b004      	add	sp, #16
 80020c4:	bd80      	pop	{r7, pc}
	...

080020c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a08      	ldr	r2, [pc, #32]	; (80020f8 <DMA_CalcBaseAndBitshift+0x30>)
 80020d6:	4694      	mov	ip, r2
 80020d8:	4463      	add	r3, ip
 80020da:	2114      	movs	r1, #20
 80020dc:	0018      	movs	r0, r3
 80020de:	f7fe f813 	bl	8000108 <__udivsi3>
 80020e2:	0003      	movs	r3, r0
 80020e4:	009a      	lsls	r2, r3, #2
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a03      	ldr	r2, [pc, #12]	; (80020fc <DMA_CalcBaseAndBitshift+0x34>)
 80020ee:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80020f0:	46c0      	nop			; (mov r8, r8)
 80020f2:	46bd      	mov	sp, r7
 80020f4:	b002      	add	sp, #8
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	bffdfff8 	.word	0xbffdfff8
 80020fc:	40020000 	.word	0x40020000

08002100 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800210a:	2300      	movs	r3, #0
 800210c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800210e:	e14f      	b.n	80023b0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2101      	movs	r1, #1
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	4091      	lsls	r1, r2
 800211a:	000a      	movs	r2, r1
 800211c:	4013      	ands	r3, r2
 800211e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d100      	bne.n	8002128 <HAL_GPIO_Init+0x28>
 8002126:	e140      	b.n	80023aa <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	2203      	movs	r2, #3
 800212e:	4013      	ands	r3, r2
 8002130:	2b01      	cmp	r3, #1
 8002132:	d005      	beq.n	8002140 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2203      	movs	r2, #3
 800213a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800213c:	2b02      	cmp	r3, #2
 800213e:	d130      	bne.n	80021a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	2203      	movs	r2, #3
 800214c:	409a      	lsls	r2, r3
 800214e:	0013      	movs	r3, r2
 8002150:	43da      	mvns	r2, r3
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	4013      	ands	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	68da      	ldr	r2, [r3, #12]
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	409a      	lsls	r2, r3
 8002162:	0013      	movs	r3, r2
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	4313      	orrs	r3, r2
 8002168:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002176:	2201      	movs	r2, #1
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	409a      	lsls	r2, r3
 800217c:	0013      	movs	r3, r2
 800217e:	43da      	mvns	r2, r3
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	4013      	ands	r3, r2
 8002184:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	091b      	lsrs	r3, r3, #4
 800218c:	2201      	movs	r2, #1
 800218e:	401a      	ands	r2, r3
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	409a      	lsls	r2, r3
 8002194:	0013      	movs	r3, r2
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	4313      	orrs	r3, r2
 800219a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2203      	movs	r2, #3
 80021a8:	4013      	ands	r3, r2
 80021aa:	2b03      	cmp	r3, #3
 80021ac:	d017      	beq.n	80021de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	2203      	movs	r2, #3
 80021ba:	409a      	lsls	r2, r3
 80021bc:	0013      	movs	r3, r2
 80021be:	43da      	mvns	r2, r3
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	4013      	ands	r3, r2
 80021c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	689a      	ldr	r2, [r3, #8]
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	409a      	lsls	r2, r3
 80021d0:	0013      	movs	r3, r2
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2203      	movs	r2, #3
 80021e4:	4013      	ands	r3, r2
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d123      	bne.n	8002232 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	08da      	lsrs	r2, r3, #3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	3208      	adds	r2, #8
 80021f2:	0092      	lsls	r2, r2, #2
 80021f4:	58d3      	ldr	r3, [r2, r3]
 80021f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	2207      	movs	r2, #7
 80021fc:	4013      	ands	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	220f      	movs	r2, #15
 8002202:	409a      	lsls	r2, r3
 8002204:	0013      	movs	r3, r2
 8002206:	43da      	mvns	r2, r3
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	4013      	ands	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	691a      	ldr	r2, [r3, #16]
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	2107      	movs	r1, #7
 8002216:	400b      	ands	r3, r1
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	409a      	lsls	r2, r3
 800221c:	0013      	movs	r3, r2
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	4313      	orrs	r3, r2
 8002222:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	08da      	lsrs	r2, r3, #3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3208      	adds	r2, #8
 800222c:	0092      	lsls	r2, r2, #2
 800222e:	6939      	ldr	r1, [r7, #16]
 8002230:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	2203      	movs	r2, #3
 800223e:	409a      	lsls	r2, r3
 8002240:	0013      	movs	r3, r2
 8002242:	43da      	mvns	r2, r3
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4013      	ands	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2203      	movs	r2, #3
 8002250:	401a      	ands	r2, r3
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	409a      	lsls	r2, r3
 8002258:	0013      	movs	r3, r2
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	4313      	orrs	r3, r2
 800225e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685a      	ldr	r2, [r3, #4]
 800226a:	23c0      	movs	r3, #192	; 0xc0
 800226c:	029b      	lsls	r3, r3, #10
 800226e:	4013      	ands	r3, r2
 8002270:	d100      	bne.n	8002274 <HAL_GPIO_Init+0x174>
 8002272:	e09a      	b.n	80023aa <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002274:	4b54      	ldr	r3, [pc, #336]	; (80023c8 <HAL_GPIO_Init+0x2c8>)
 8002276:	699a      	ldr	r2, [r3, #24]
 8002278:	4b53      	ldr	r3, [pc, #332]	; (80023c8 <HAL_GPIO_Init+0x2c8>)
 800227a:	2101      	movs	r1, #1
 800227c:	430a      	orrs	r2, r1
 800227e:	619a      	str	r2, [r3, #24]
 8002280:	4b51      	ldr	r3, [pc, #324]	; (80023c8 <HAL_GPIO_Init+0x2c8>)
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	2201      	movs	r2, #1
 8002286:	4013      	ands	r3, r2
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800228c:	4a4f      	ldr	r2, [pc, #316]	; (80023cc <HAL_GPIO_Init+0x2cc>)
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	089b      	lsrs	r3, r3, #2
 8002292:	3302      	adds	r3, #2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	589b      	ldr	r3, [r3, r2]
 8002298:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	2203      	movs	r2, #3
 800229e:	4013      	ands	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	220f      	movs	r2, #15
 80022a4:	409a      	lsls	r2, r3
 80022a6:	0013      	movs	r3, r2
 80022a8:	43da      	mvns	r2, r3
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	4013      	ands	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	2390      	movs	r3, #144	; 0x90
 80022b4:	05db      	lsls	r3, r3, #23
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d013      	beq.n	80022e2 <HAL_GPIO_Init+0x1e2>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a44      	ldr	r2, [pc, #272]	; (80023d0 <HAL_GPIO_Init+0x2d0>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d00d      	beq.n	80022de <HAL_GPIO_Init+0x1de>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a43      	ldr	r2, [pc, #268]	; (80023d4 <HAL_GPIO_Init+0x2d4>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d007      	beq.n	80022da <HAL_GPIO_Init+0x1da>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a42      	ldr	r2, [pc, #264]	; (80023d8 <HAL_GPIO_Init+0x2d8>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d101      	bne.n	80022d6 <HAL_GPIO_Init+0x1d6>
 80022d2:	2303      	movs	r3, #3
 80022d4:	e006      	b.n	80022e4 <HAL_GPIO_Init+0x1e4>
 80022d6:	2305      	movs	r3, #5
 80022d8:	e004      	b.n	80022e4 <HAL_GPIO_Init+0x1e4>
 80022da:	2302      	movs	r3, #2
 80022dc:	e002      	b.n	80022e4 <HAL_GPIO_Init+0x1e4>
 80022de:	2301      	movs	r3, #1
 80022e0:	e000      	b.n	80022e4 <HAL_GPIO_Init+0x1e4>
 80022e2:	2300      	movs	r3, #0
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	2103      	movs	r1, #3
 80022e8:	400a      	ands	r2, r1
 80022ea:	0092      	lsls	r2, r2, #2
 80022ec:	4093      	lsls	r3, r2
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022f4:	4935      	ldr	r1, [pc, #212]	; (80023cc <HAL_GPIO_Init+0x2cc>)
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	089b      	lsrs	r3, r3, #2
 80022fa:	3302      	adds	r3, #2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002302:	4b36      	ldr	r3, [pc, #216]	; (80023dc <HAL_GPIO_Init+0x2dc>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	43da      	mvns	r2, r3
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	4013      	ands	r3, r2
 8002310:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	2380      	movs	r3, #128	; 0x80
 8002318:	025b      	lsls	r3, r3, #9
 800231a:	4013      	ands	r3, r2
 800231c:	d003      	beq.n	8002326 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	4313      	orrs	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002326:	4b2d      	ldr	r3, [pc, #180]	; (80023dc <HAL_GPIO_Init+0x2dc>)
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800232c:	4b2b      	ldr	r3, [pc, #172]	; (80023dc <HAL_GPIO_Init+0x2dc>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	43da      	mvns	r2, r3
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4013      	ands	r3, r2
 800233a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	2380      	movs	r3, #128	; 0x80
 8002342:	029b      	lsls	r3, r3, #10
 8002344:	4013      	ands	r3, r2
 8002346:	d003      	beq.n	8002350 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	4313      	orrs	r3, r2
 800234e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002350:	4b22      	ldr	r3, [pc, #136]	; (80023dc <HAL_GPIO_Init+0x2dc>)
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002356:	4b21      	ldr	r3, [pc, #132]	; (80023dc <HAL_GPIO_Init+0x2dc>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	43da      	mvns	r2, r3
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	4013      	ands	r3, r2
 8002364:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	2380      	movs	r3, #128	; 0x80
 800236c:	035b      	lsls	r3, r3, #13
 800236e:	4013      	ands	r3, r2
 8002370:	d003      	beq.n	800237a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	4313      	orrs	r3, r2
 8002378:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800237a:	4b18      	ldr	r3, [pc, #96]	; (80023dc <HAL_GPIO_Init+0x2dc>)
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002380:	4b16      	ldr	r3, [pc, #88]	; (80023dc <HAL_GPIO_Init+0x2dc>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	43da      	mvns	r2, r3
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4013      	ands	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	2380      	movs	r3, #128	; 0x80
 8002396:	039b      	lsls	r3, r3, #14
 8002398:	4013      	ands	r3, r2
 800239a:	d003      	beq.n	80023a4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80023a4:	4b0d      	ldr	r3, [pc, #52]	; (80023dc <HAL_GPIO_Init+0x2dc>)
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	3301      	adds	r3, #1
 80023ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	40da      	lsrs	r2, r3
 80023b8:	1e13      	subs	r3, r2, #0
 80023ba:	d000      	beq.n	80023be <HAL_GPIO_Init+0x2be>
 80023bc:	e6a8      	b.n	8002110 <HAL_GPIO_Init+0x10>
  } 
}
 80023be:	46c0      	nop			; (mov r8, r8)
 80023c0:	46c0      	nop			; (mov r8, r8)
 80023c2:	46bd      	mov	sp, r7
 80023c4:	b006      	add	sp, #24
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40021000 	.word	0x40021000
 80023cc:	40010000 	.word	0x40010000
 80023d0:	48000400 	.word	0x48000400
 80023d4:	48000800 	.word	0x48000800
 80023d8:	48000c00 	.word	0x48000c00
 80023dc:	40010400 	.word	0x40010400

080023e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	0008      	movs	r0, r1
 80023ea:	0011      	movs	r1, r2
 80023ec:	1cbb      	adds	r3, r7, #2
 80023ee:	1c02      	adds	r2, r0, #0
 80023f0:	801a      	strh	r2, [r3, #0]
 80023f2:	1c7b      	adds	r3, r7, #1
 80023f4:	1c0a      	adds	r2, r1, #0
 80023f6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023f8:	1c7b      	adds	r3, r7, #1
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d004      	beq.n	800240a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002400:	1cbb      	adds	r3, r7, #2
 8002402:	881a      	ldrh	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002408:	e003      	b.n	8002412 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800240a:	1cbb      	adds	r3, r7, #2
 800240c:	881a      	ldrh	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002412:	46c0      	nop			; (mov r8, r8)
 8002414:	46bd      	mov	sp, r7
 8002416:	b002      	add	sp, #8
 8002418:	bd80      	pop	{r7, pc}
	...

0800241c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e082      	b.n	8002534 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2241      	movs	r2, #65	; 0x41
 8002432:	5c9b      	ldrb	r3, [r3, r2]
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d107      	bne.n	800244a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2240      	movs	r2, #64	; 0x40
 800243e:	2100      	movs	r1, #0
 8002440:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	0018      	movs	r0, r3
 8002446:	f7fe fe37 	bl	80010b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2241      	movs	r2, #65	; 0x41
 800244e:	2124      	movs	r1, #36	; 0x24
 8002450:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2101      	movs	r1, #1
 800245e:	438a      	bics	r2, r1
 8002460:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685a      	ldr	r2, [r3, #4]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4934      	ldr	r1, [pc, #208]	; (800253c <HAL_I2C_Init+0x120>)
 800246c:	400a      	ands	r2, r1
 800246e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4931      	ldr	r1, [pc, #196]	; (8002540 <HAL_I2C_Init+0x124>)
 800247c:	400a      	ands	r2, r1
 800247e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d108      	bne.n	800249a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2180      	movs	r1, #128	; 0x80
 8002492:	0209      	lsls	r1, r1, #8
 8002494:	430a      	orrs	r2, r1
 8002496:	609a      	str	r2, [r3, #8]
 8002498:	e007      	b.n	80024aa <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	689a      	ldr	r2, [r3, #8]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2184      	movs	r1, #132	; 0x84
 80024a4:	0209      	lsls	r1, r1, #8
 80024a6:	430a      	orrs	r2, r1
 80024a8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d104      	bne.n	80024bc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2280      	movs	r2, #128	; 0x80
 80024b8:	0112      	lsls	r2, r2, #4
 80024ba:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	685a      	ldr	r2, [r3, #4]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	491f      	ldr	r1, [pc, #124]	; (8002544 <HAL_I2C_Init+0x128>)
 80024c8:	430a      	orrs	r2, r1
 80024ca:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68da      	ldr	r2, [r3, #12]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	491a      	ldr	r1, [pc, #104]	; (8002540 <HAL_I2C_Init+0x124>)
 80024d8:	400a      	ands	r2, r1
 80024da:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691a      	ldr	r2, [r3, #16]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	431a      	orrs	r2, r3
 80024e6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	69d9      	ldr	r1, [r3, #28]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a1a      	ldr	r2, [r3, #32]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	430a      	orrs	r2, r1
 8002504:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2101      	movs	r1, #1
 8002512:	430a      	orrs	r2, r1
 8002514:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2241      	movs	r2, #65	; 0x41
 8002520:	2120      	movs	r1, #32
 8002522:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2242      	movs	r2, #66	; 0x42
 800252e:	2100      	movs	r1, #0
 8002530:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	0018      	movs	r0, r3
 8002536:	46bd      	mov	sp, r7
 8002538:	b002      	add	sp, #8
 800253a:	bd80      	pop	{r7, pc}
 800253c:	f0ffffff 	.word	0xf0ffffff
 8002540:	ffff7fff 	.word	0xffff7fff
 8002544:	02008000 	.word	0x02008000

08002548 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2241      	movs	r2, #65	; 0x41
 8002556:	5c9b      	ldrb	r3, [r3, r2]
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b20      	cmp	r3, #32
 800255c:	d138      	bne.n	80025d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2240      	movs	r2, #64	; 0x40
 8002562:	5c9b      	ldrb	r3, [r3, r2]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d101      	bne.n	800256c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002568:	2302      	movs	r3, #2
 800256a:	e032      	b.n	80025d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2240      	movs	r2, #64	; 0x40
 8002570:	2101      	movs	r1, #1
 8002572:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2241      	movs	r2, #65	; 0x41
 8002578:	2124      	movs	r1, #36	; 0x24
 800257a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2101      	movs	r1, #1
 8002588:	438a      	bics	r2, r1
 800258a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4911      	ldr	r1, [pc, #68]	; (80025dc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002598:	400a      	ands	r2, r1
 800259a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6819      	ldr	r1, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	430a      	orrs	r2, r1
 80025aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2101      	movs	r1, #1
 80025b8:	430a      	orrs	r2, r1
 80025ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2241      	movs	r2, #65	; 0x41
 80025c0:	2120      	movs	r1, #32
 80025c2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2240      	movs	r2, #64	; 0x40
 80025c8:	2100      	movs	r1, #0
 80025ca:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80025cc:	2300      	movs	r3, #0
 80025ce:	e000      	b.n	80025d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80025d0:	2302      	movs	r3, #2
  }
}
 80025d2:	0018      	movs	r0, r3
 80025d4:	46bd      	mov	sp, r7
 80025d6:	b002      	add	sp, #8
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	46c0      	nop			; (mov r8, r8)
 80025dc:	ffffefff 	.word	0xffffefff

080025e0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2241      	movs	r2, #65	; 0x41
 80025ee:	5c9b      	ldrb	r3, [r3, r2]
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b20      	cmp	r3, #32
 80025f4:	d139      	bne.n	800266a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2240      	movs	r2, #64	; 0x40
 80025fa:	5c9b      	ldrb	r3, [r3, r2]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d101      	bne.n	8002604 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002600:	2302      	movs	r3, #2
 8002602:	e033      	b.n	800266c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2240      	movs	r2, #64	; 0x40
 8002608:	2101      	movs	r1, #1
 800260a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2241      	movs	r2, #65	; 0x41
 8002610:	2124      	movs	r1, #36	; 0x24
 8002612:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2101      	movs	r1, #1
 8002620:	438a      	bics	r2, r1
 8002622:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	4a11      	ldr	r2, [pc, #68]	; (8002674 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002630:	4013      	ands	r3, r2
 8002632:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	021b      	lsls	r3, r3, #8
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	4313      	orrs	r3, r2
 800263c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2101      	movs	r1, #1
 8002652:	430a      	orrs	r2, r1
 8002654:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2241      	movs	r2, #65	; 0x41
 800265a:	2120      	movs	r1, #32
 800265c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2240      	movs	r2, #64	; 0x40
 8002662:	2100      	movs	r1, #0
 8002664:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002666:	2300      	movs	r3, #0
 8002668:	e000      	b.n	800266c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800266a:	2302      	movs	r3, #2
  }
}
 800266c:	0018      	movs	r0, r3
 800266e:	46bd      	mov	sp, r7
 8002670:	b004      	add	sp, #16
 8002672:	bd80      	pop	{r7, pc}
 8002674:	fffff0ff 	.word	0xfffff0ff

08002678 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI:Enter STOP mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter STOP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	000a      	movs	r2, r1
 8002682:	1cfb      	adds	r3, r7, #3
 8002684:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 800268a:	4b13      	ldr	r3, [pc, #76]	; (80026d8 <HAL_PWR_EnterSTOPMode+0x60>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PDDS and LPDS bits */
  tmpreg &= (uint32_t)~(PWR_CR_PDDS | PWR_CR_LPDS);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2203      	movs	r2, #3
 8002694:	4393      	bics	r3, r2
 8002696:	60fb      	str	r3, [r7, #12]

  /* Set LPDS bit according to Regulator value */
  tmpreg |= Regulator;
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4313      	orrs	r3, r2
 800269e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 80026a0:	4b0d      	ldr	r3, [pc, #52]	; (80026d8 <HAL_PWR_EnterSTOPMode+0x60>)
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 80026a6:	4b0d      	ldr	r3, [pc, #52]	; (80026dc <HAL_PWR_EnterSTOPMode+0x64>)
 80026a8:	691a      	ldr	r2, [r3, #16]
 80026aa:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <HAL_PWR_EnterSTOPMode+0x64>)
 80026ac:	2104      	movs	r1, #4
 80026ae:	430a      	orrs	r2, r1
 80026b0:	611a      	str	r2, [r3, #16]

  /* Select STOP mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80026b2:	1cfb      	adds	r3, r7, #3
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d101      	bne.n	80026be <HAL_PWR_EnterSTOPMode+0x46>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80026ba:	bf30      	wfi
 80026bc:	e002      	b.n	80026c4 <HAL_PWR_EnterSTOPMode+0x4c>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80026be:	bf40      	sev
    __WFE();
 80026c0:	bf20      	wfe
    __WFE();
 80026c2:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 80026c4:	4b05      	ldr	r3, [pc, #20]	; (80026dc <HAL_PWR_EnterSTOPMode+0x64>)
 80026c6:	691a      	ldr	r2, [r3, #16]
 80026c8:	4b04      	ldr	r3, [pc, #16]	; (80026dc <HAL_PWR_EnterSTOPMode+0x64>)
 80026ca:	2104      	movs	r1, #4
 80026cc:	438a      	bics	r2, r1
 80026ce:	611a      	str	r2, [r3, #16]
}
 80026d0:	46c0      	nop			; (mov r8, r8)
 80026d2:	46bd      	mov	sp, r7
 80026d4:	b004      	add	sp, #16
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40007000 	.word	0x40007000
 80026dc:	e000ed00 	.word	0xe000ed00

080026e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b088      	sub	sp, #32
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e301      	b.n	8002cf6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2201      	movs	r2, #1
 80026f8:	4013      	ands	r3, r2
 80026fa:	d100      	bne.n	80026fe <HAL_RCC_OscConfig+0x1e>
 80026fc:	e08d      	b.n	800281a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80026fe:	4bc3      	ldr	r3, [pc, #780]	; (8002a0c <HAL_RCC_OscConfig+0x32c>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	220c      	movs	r2, #12
 8002704:	4013      	ands	r3, r2
 8002706:	2b04      	cmp	r3, #4
 8002708:	d00e      	beq.n	8002728 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800270a:	4bc0      	ldr	r3, [pc, #768]	; (8002a0c <HAL_RCC_OscConfig+0x32c>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	220c      	movs	r2, #12
 8002710:	4013      	ands	r3, r2
 8002712:	2b08      	cmp	r3, #8
 8002714:	d116      	bne.n	8002744 <HAL_RCC_OscConfig+0x64>
 8002716:	4bbd      	ldr	r3, [pc, #756]	; (8002a0c <HAL_RCC_OscConfig+0x32c>)
 8002718:	685a      	ldr	r2, [r3, #4]
 800271a:	2380      	movs	r3, #128	; 0x80
 800271c:	025b      	lsls	r3, r3, #9
 800271e:	401a      	ands	r2, r3
 8002720:	2380      	movs	r3, #128	; 0x80
 8002722:	025b      	lsls	r3, r3, #9
 8002724:	429a      	cmp	r2, r3
 8002726:	d10d      	bne.n	8002744 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002728:	4bb8      	ldr	r3, [pc, #736]	; (8002a0c <HAL_RCC_OscConfig+0x32c>)
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	2380      	movs	r3, #128	; 0x80
 800272e:	029b      	lsls	r3, r3, #10
 8002730:	4013      	ands	r3, r2
 8002732:	d100      	bne.n	8002736 <HAL_RCC_OscConfig+0x56>
 8002734:	e070      	b.n	8002818 <HAL_RCC_OscConfig+0x138>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d000      	beq.n	8002740 <HAL_RCC_OscConfig+0x60>
 800273e:	e06b      	b.n	8002818 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e2d8      	b.n	8002cf6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d107      	bne.n	800275c <HAL_RCC_OscConfig+0x7c>
 800274c:	4baf      	ldr	r3, [pc, #700]	; (8002a0c <HAL_RCC_OscConfig+0x32c>)
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	4bae      	ldr	r3, [pc, #696]	; (8002a0c <HAL_RCC_OscConfig+0x32c>)
 8002752:	2180      	movs	r1, #128	; 0x80
 8002754:	0249      	lsls	r1, r1, #9
 8002756:	430a      	orrs	r2, r1
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	e02f      	b.n	80027bc <HAL_RCC_OscConfig+0xdc>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d10c      	bne.n	800277e <HAL_RCC_OscConfig+0x9e>
 8002764:	4ba9      	ldr	r3, [pc, #676]	; (8002a0c <HAL_RCC_OscConfig+0x32c>)
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	4ba8      	ldr	r3, [pc, #672]	; (8002a0c <HAL_RCC_OscConfig+0x32c>)
 800276a:	49a9      	ldr	r1, [pc, #676]	; (8002a10 <HAL_RCC_OscConfig+0x330>)
 800276c:	400a      	ands	r2, r1
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	4ba6      	ldr	r3, [pc, #664]	; (8002a0c <HAL_RCC_OscConfig+0x32c>)
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	4ba5      	ldr	r3, [pc, #660]	; (8002a0c <HAL_RCC_OscConfig+0x32c>)
 8002776:	49a7      	ldr	r1, [pc, #668]	; (8002a14 <HAL_RCC_OscConfig+0x334>)
 8002778:	400a      	ands	r2, r1
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	e01e      	b.n	80027bc <HAL_RCC_OscConfig+0xdc>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b05      	cmp	r3, #5
 8002784:	d10e      	bne.n	80027a4 <HAL_RCC_OscConfig+0xc4>
 8002786:	4ba1      	ldr	r3, [pc, #644]	; (8002a0c <HAL_RCC_OscConfig+0x32c>)
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	4ba0      	ldr	r3, [pc, #640]	; (8002a0c <HAL_RCC_OscConfig+0x32c>)
 800278c:	2180      	movs	r1, #128	; 0x80
 800278e:	02c9      	lsls	r1, r1, #11
 8002790:	430a      	orrs	r2, r1
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	4b9d      	ldr	r3, [pc, #628]	; (8002a0c <HAL_RCC_OscConfig+0x32c>)
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	4b9c      	ldr	r3, [pc, #624]	; (8002a0c <HAL_RCC_OscConfig+0x32c>)
 800279a:	2180      	movs	r1, #128	; 0x80
 800279c:	0249      	lsls	r1, r1, #9
 800279e:	430a      	orrs	r2, r1
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	e00b      	b.n	80027bc <HAL_RCC_OscConfig+0xdc>
 80027a4:	4b99      	ldr	r3, [pc, #612]	; (8002a0c <HAL_RCC_OscConfig+0x32c>)
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	4b98      	ldr	r3, [pc, #608]	; (8002a0c <HAL_RCC_OscConfig+0x32c>)
 80027aa:	4999      	ldr	r1, [pc, #612]	; (8002a10 <HAL_RCC_OscConfig+0x330>)
 80027ac:	400a      	ands	r2, r1
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	4b96      	ldr	r3, [pc, #600]	; (8002a0c <HAL_RCC_OscConfig+0x32c>)
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	4b95      	ldr	r3, [pc, #596]	; (8002a0c <HAL_RCC_OscConfig+0x32c>)
 80027b6:	4997      	ldr	r1, [pc, #604]	; (8002a14 <HAL_RCC_OscConfig+0x334>)
 80027b8:	400a      	ands	r2, r1
 80027ba:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d014      	beq.n	80027ee <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c4:	f7fe ff3a 	bl	800163c <HAL_GetTick>
 80027c8:	0003      	movs	r3, r0
 80027ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027ce:	f7fe ff35 	bl	800163c <HAL_GetTick>
 80027d2:	0002      	movs	r2, r0
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b64      	cmp	r3, #100	; 0x64
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e28a      	b.n	8002cf6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e0:	4b8a      	ldr	r3, [pc, #552]	; (8002a0c <HAL_RCC_OscConfig+0x32c>)
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	2380      	movs	r3, #128	; 0x80
 80027e6:	029b      	lsls	r3, r3, #10
 80027e8:	4013      	ands	r3, r2
 80027ea:	d0f0      	beq.n	80027ce <HAL_RCC_OscConfig+0xee>
 80027ec:	e015      	b.n	800281a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ee:	f7fe ff25 	bl	800163c <HAL_GetTick>
 80027f2:	0003      	movs	r3, r0
 80027f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027f8:	f7fe ff20 	bl	800163c <HAL_GetTick>
 80027fc:	0002      	movs	r2, r0
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b64      	cmp	r3, #100	; 0x64
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e275      	b.n	8002cf6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800280a:	4b80      	ldr	r3, [pc, #512]	; (8002a0c <HAL_RCC_OscConfig+0x32c>)
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	2380      	movs	r3, #128	; 0x80
 8002810:	029b      	lsls	r3, r3, #10
 8002812:	4013      	ands	r3, r2
 8002814:	d1f0      	bne.n	80027f8 <HAL_RCC_OscConfig+0x118>
 8002816:	e000      	b.n	800281a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002818:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2202      	movs	r2, #2
 8002820:	4013      	ands	r3, r2
 8002822:	d100      	bne.n	8002826 <HAL_RCC_OscConfig+0x146>
 8002824:	e069      	b.n	80028fa <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002826:	4b79      	ldr	r3, [pc, #484]	; (8002a0c <HAL_RCC_OscConfig+0x32c>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	220c      	movs	r2, #12
 800282c:	4013      	ands	r3, r2
 800282e:	d00b      	beq.n	8002848 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002830:	4b76      	ldr	r3, [pc, #472]	; (8002a0c <HAL_RCC_OscConfig+0x32c>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	220c      	movs	r2, #12
 8002836:	4013      	ands	r3, r2
 8002838:	2b08      	cmp	r3, #8
 800283a:	d11c      	bne.n	8002876 <HAL_RCC_OscConfig+0x196>
 800283c:	4b73      	ldr	r3, [pc, #460]	; (8002a0c <HAL_RCC_OscConfig+0x32c>)
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	2380      	movs	r3, #128	; 0x80
 8002842:	025b      	lsls	r3, r3, #9
 8002844:	4013      	ands	r3, r2
 8002846:	d116      	bne.n	8002876 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002848:	4b70      	ldr	r3, [pc, #448]	; (8002a0c <HAL_RCC_OscConfig+0x32c>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2202      	movs	r2, #2
 800284e:	4013      	ands	r3, r2
 8002850:	d005      	beq.n	800285e <HAL_RCC_OscConfig+0x17e>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d001      	beq.n	800285e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e24b      	b.n	8002cf6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800285e:	4b6b      	ldr	r3, [pc, #428]	; (8002a0c <HAL_RCC_OscConfig+0x32c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	22f8      	movs	r2, #248	; 0xf8
 8002864:	4393      	bics	r3, r2
 8002866:	0019      	movs	r1, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	00da      	lsls	r2, r3, #3
 800286e:	4b67      	ldr	r3, [pc, #412]	; (8002a0c <HAL_RCC_OscConfig+0x32c>)
 8002870:	430a      	orrs	r2, r1
 8002872:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002874:	e041      	b.n	80028fa <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d024      	beq.n	80028c8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800287e:	4b63      	ldr	r3, [pc, #396]	; (8002a0c <HAL_RCC_OscConfig+0x32c>)
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	4b62      	ldr	r3, [pc, #392]	; (8002a0c <HAL_RCC_OscConfig+0x32c>)
 8002884:	2101      	movs	r1, #1
 8002886:	430a      	orrs	r2, r1
 8002888:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288a:	f7fe fed7 	bl	800163c <HAL_GetTick>
 800288e:	0003      	movs	r3, r0
 8002890:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002894:	f7fe fed2 	bl	800163c <HAL_GetTick>
 8002898:	0002      	movs	r2, r0
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e227      	b.n	8002cf6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a6:	4b59      	ldr	r3, [pc, #356]	; (8002a0c <HAL_RCC_OscConfig+0x32c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2202      	movs	r2, #2
 80028ac:	4013      	ands	r3, r2
 80028ae:	d0f1      	beq.n	8002894 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b0:	4b56      	ldr	r3, [pc, #344]	; (8002a0c <HAL_RCC_OscConfig+0x32c>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	22f8      	movs	r2, #248	; 0xf8
 80028b6:	4393      	bics	r3, r2
 80028b8:	0019      	movs	r1, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	00da      	lsls	r2, r3, #3
 80028c0:	4b52      	ldr	r3, [pc, #328]	; (8002a0c <HAL_RCC_OscConfig+0x32c>)
 80028c2:	430a      	orrs	r2, r1
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	e018      	b.n	80028fa <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028c8:	4b50      	ldr	r3, [pc, #320]	; (8002a0c <HAL_RCC_OscConfig+0x32c>)
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	4b4f      	ldr	r3, [pc, #316]	; (8002a0c <HAL_RCC_OscConfig+0x32c>)
 80028ce:	2101      	movs	r1, #1
 80028d0:	438a      	bics	r2, r1
 80028d2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d4:	f7fe feb2 	bl	800163c <HAL_GetTick>
 80028d8:	0003      	movs	r3, r0
 80028da:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028de:	f7fe fead 	bl	800163c <HAL_GetTick>
 80028e2:	0002      	movs	r2, r0
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e202      	b.n	8002cf6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028f0:	4b46      	ldr	r3, [pc, #280]	; (8002a0c <HAL_RCC_OscConfig+0x32c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2202      	movs	r2, #2
 80028f6:	4013      	ands	r3, r2
 80028f8:	d1f1      	bne.n	80028de <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2208      	movs	r2, #8
 8002900:	4013      	ands	r3, r2
 8002902:	d036      	beq.n	8002972 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	69db      	ldr	r3, [r3, #28]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d019      	beq.n	8002940 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800290c:	4b3f      	ldr	r3, [pc, #252]	; (8002a0c <HAL_RCC_OscConfig+0x32c>)
 800290e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002910:	4b3e      	ldr	r3, [pc, #248]	; (8002a0c <HAL_RCC_OscConfig+0x32c>)
 8002912:	2101      	movs	r1, #1
 8002914:	430a      	orrs	r2, r1
 8002916:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002918:	f7fe fe90 	bl	800163c <HAL_GetTick>
 800291c:	0003      	movs	r3, r0
 800291e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002920:	e008      	b.n	8002934 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002922:	f7fe fe8b 	bl	800163c <HAL_GetTick>
 8002926:	0002      	movs	r2, r0
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e1e0      	b.n	8002cf6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002934:	4b35      	ldr	r3, [pc, #212]	; (8002a0c <HAL_RCC_OscConfig+0x32c>)
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	2202      	movs	r2, #2
 800293a:	4013      	ands	r3, r2
 800293c:	d0f1      	beq.n	8002922 <HAL_RCC_OscConfig+0x242>
 800293e:	e018      	b.n	8002972 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002940:	4b32      	ldr	r3, [pc, #200]	; (8002a0c <HAL_RCC_OscConfig+0x32c>)
 8002942:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002944:	4b31      	ldr	r3, [pc, #196]	; (8002a0c <HAL_RCC_OscConfig+0x32c>)
 8002946:	2101      	movs	r1, #1
 8002948:	438a      	bics	r2, r1
 800294a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800294c:	f7fe fe76 	bl	800163c <HAL_GetTick>
 8002950:	0003      	movs	r3, r0
 8002952:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002954:	e008      	b.n	8002968 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002956:	f7fe fe71 	bl	800163c <HAL_GetTick>
 800295a:	0002      	movs	r2, r0
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e1c6      	b.n	8002cf6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002968:	4b28      	ldr	r3, [pc, #160]	; (8002a0c <HAL_RCC_OscConfig+0x32c>)
 800296a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296c:	2202      	movs	r2, #2
 800296e:	4013      	ands	r3, r2
 8002970:	d1f1      	bne.n	8002956 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2204      	movs	r2, #4
 8002978:	4013      	ands	r3, r2
 800297a:	d100      	bne.n	800297e <HAL_RCC_OscConfig+0x29e>
 800297c:	e0b4      	b.n	8002ae8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800297e:	201f      	movs	r0, #31
 8002980:	183b      	adds	r3, r7, r0
 8002982:	2200      	movs	r2, #0
 8002984:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002986:	4b21      	ldr	r3, [pc, #132]	; (8002a0c <HAL_RCC_OscConfig+0x32c>)
 8002988:	69da      	ldr	r2, [r3, #28]
 800298a:	2380      	movs	r3, #128	; 0x80
 800298c:	055b      	lsls	r3, r3, #21
 800298e:	4013      	ands	r3, r2
 8002990:	d110      	bne.n	80029b4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002992:	4b1e      	ldr	r3, [pc, #120]	; (8002a0c <HAL_RCC_OscConfig+0x32c>)
 8002994:	69da      	ldr	r2, [r3, #28]
 8002996:	4b1d      	ldr	r3, [pc, #116]	; (8002a0c <HAL_RCC_OscConfig+0x32c>)
 8002998:	2180      	movs	r1, #128	; 0x80
 800299a:	0549      	lsls	r1, r1, #21
 800299c:	430a      	orrs	r2, r1
 800299e:	61da      	str	r2, [r3, #28]
 80029a0:	4b1a      	ldr	r3, [pc, #104]	; (8002a0c <HAL_RCC_OscConfig+0x32c>)
 80029a2:	69da      	ldr	r2, [r3, #28]
 80029a4:	2380      	movs	r3, #128	; 0x80
 80029a6:	055b      	lsls	r3, r3, #21
 80029a8:	4013      	ands	r3, r2
 80029aa:	60fb      	str	r3, [r7, #12]
 80029ac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80029ae:	183b      	adds	r3, r7, r0
 80029b0:	2201      	movs	r2, #1
 80029b2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b4:	4b18      	ldr	r3, [pc, #96]	; (8002a18 <HAL_RCC_OscConfig+0x338>)
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	2380      	movs	r3, #128	; 0x80
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	4013      	ands	r3, r2
 80029be:	d11a      	bne.n	80029f6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029c0:	4b15      	ldr	r3, [pc, #84]	; (8002a18 <HAL_RCC_OscConfig+0x338>)
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	4b14      	ldr	r3, [pc, #80]	; (8002a18 <HAL_RCC_OscConfig+0x338>)
 80029c6:	2180      	movs	r1, #128	; 0x80
 80029c8:	0049      	lsls	r1, r1, #1
 80029ca:	430a      	orrs	r2, r1
 80029cc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ce:	f7fe fe35 	bl	800163c <HAL_GetTick>
 80029d2:	0003      	movs	r3, r0
 80029d4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029d8:	f7fe fe30 	bl	800163c <HAL_GetTick>
 80029dc:	0002      	movs	r2, r0
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b64      	cmp	r3, #100	; 0x64
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e185      	b.n	8002cf6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ea:	4b0b      	ldr	r3, [pc, #44]	; (8002a18 <HAL_RCC_OscConfig+0x338>)
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	2380      	movs	r3, #128	; 0x80
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	4013      	ands	r3, r2
 80029f4:	d0f0      	beq.n	80029d8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d10e      	bne.n	8002a1c <HAL_RCC_OscConfig+0x33c>
 80029fe:	4b03      	ldr	r3, [pc, #12]	; (8002a0c <HAL_RCC_OscConfig+0x32c>)
 8002a00:	6a1a      	ldr	r2, [r3, #32]
 8002a02:	4b02      	ldr	r3, [pc, #8]	; (8002a0c <HAL_RCC_OscConfig+0x32c>)
 8002a04:	2101      	movs	r1, #1
 8002a06:	430a      	orrs	r2, r1
 8002a08:	621a      	str	r2, [r3, #32]
 8002a0a:	e035      	b.n	8002a78 <HAL_RCC_OscConfig+0x398>
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	fffeffff 	.word	0xfffeffff
 8002a14:	fffbffff 	.word	0xfffbffff
 8002a18:	40007000 	.word	0x40007000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d10c      	bne.n	8002a3e <HAL_RCC_OscConfig+0x35e>
 8002a24:	4bb6      	ldr	r3, [pc, #728]	; (8002d00 <HAL_RCC_OscConfig+0x620>)
 8002a26:	6a1a      	ldr	r2, [r3, #32]
 8002a28:	4bb5      	ldr	r3, [pc, #724]	; (8002d00 <HAL_RCC_OscConfig+0x620>)
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	438a      	bics	r2, r1
 8002a2e:	621a      	str	r2, [r3, #32]
 8002a30:	4bb3      	ldr	r3, [pc, #716]	; (8002d00 <HAL_RCC_OscConfig+0x620>)
 8002a32:	6a1a      	ldr	r2, [r3, #32]
 8002a34:	4bb2      	ldr	r3, [pc, #712]	; (8002d00 <HAL_RCC_OscConfig+0x620>)
 8002a36:	2104      	movs	r1, #4
 8002a38:	438a      	bics	r2, r1
 8002a3a:	621a      	str	r2, [r3, #32]
 8002a3c:	e01c      	b.n	8002a78 <HAL_RCC_OscConfig+0x398>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	2b05      	cmp	r3, #5
 8002a44:	d10c      	bne.n	8002a60 <HAL_RCC_OscConfig+0x380>
 8002a46:	4bae      	ldr	r3, [pc, #696]	; (8002d00 <HAL_RCC_OscConfig+0x620>)
 8002a48:	6a1a      	ldr	r2, [r3, #32]
 8002a4a:	4bad      	ldr	r3, [pc, #692]	; (8002d00 <HAL_RCC_OscConfig+0x620>)
 8002a4c:	2104      	movs	r1, #4
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	621a      	str	r2, [r3, #32]
 8002a52:	4bab      	ldr	r3, [pc, #684]	; (8002d00 <HAL_RCC_OscConfig+0x620>)
 8002a54:	6a1a      	ldr	r2, [r3, #32]
 8002a56:	4baa      	ldr	r3, [pc, #680]	; (8002d00 <HAL_RCC_OscConfig+0x620>)
 8002a58:	2101      	movs	r1, #1
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	621a      	str	r2, [r3, #32]
 8002a5e:	e00b      	b.n	8002a78 <HAL_RCC_OscConfig+0x398>
 8002a60:	4ba7      	ldr	r3, [pc, #668]	; (8002d00 <HAL_RCC_OscConfig+0x620>)
 8002a62:	6a1a      	ldr	r2, [r3, #32]
 8002a64:	4ba6      	ldr	r3, [pc, #664]	; (8002d00 <HAL_RCC_OscConfig+0x620>)
 8002a66:	2101      	movs	r1, #1
 8002a68:	438a      	bics	r2, r1
 8002a6a:	621a      	str	r2, [r3, #32]
 8002a6c:	4ba4      	ldr	r3, [pc, #656]	; (8002d00 <HAL_RCC_OscConfig+0x620>)
 8002a6e:	6a1a      	ldr	r2, [r3, #32]
 8002a70:	4ba3      	ldr	r3, [pc, #652]	; (8002d00 <HAL_RCC_OscConfig+0x620>)
 8002a72:	2104      	movs	r1, #4
 8002a74:	438a      	bics	r2, r1
 8002a76:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d014      	beq.n	8002aaa <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a80:	f7fe fddc 	bl	800163c <HAL_GetTick>
 8002a84:	0003      	movs	r3, r0
 8002a86:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a88:	e009      	b.n	8002a9e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a8a:	f7fe fdd7 	bl	800163c <HAL_GetTick>
 8002a8e:	0002      	movs	r2, r0
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	4a9b      	ldr	r2, [pc, #620]	; (8002d04 <HAL_RCC_OscConfig+0x624>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e12b      	b.n	8002cf6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a9e:	4b98      	ldr	r3, [pc, #608]	; (8002d00 <HAL_RCC_OscConfig+0x620>)
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	d0f0      	beq.n	8002a8a <HAL_RCC_OscConfig+0x3aa>
 8002aa8:	e013      	b.n	8002ad2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aaa:	f7fe fdc7 	bl	800163c <HAL_GetTick>
 8002aae:	0003      	movs	r3, r0
 8002ab0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ab2:	e009      	b.n	8002ac8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ab4:	f7fe fdc2 	bl	800163c <HAL_GetTick>
 8002ab8:	0002      	movs	r2, r0
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	4a91      	ldr	r2, [pc, #580]	; (8002d04 <HAL_RCC_OscConfig+0x624>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e116      	b.n	8002cf6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ac8:	4b8d      	ldr	r3, [pc, #564]	; (8002d00 <HAL_RCC_OscConfig+0x620>)
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	2202      	movs	r2, #2
 8002ace:	4013      	ands	r3, r2
 8002ad0:	d1f0      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ad2:	231f      	movs	r3, #31
 8002ad4:	18fb      	adds	r3, r7, r3
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d105      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002adc:	4b88      	ldr	r3, [pc, #544]	; (8002d00 <HAL_RCC_OscConfig+0x620>)
 8002ade:	69da      	ldr	r2, [r3, #28]
 8002ae0:	4b87      	ldr	r3, [pc, #540]	; (8002d00 <HAL_RCC_OscConfig+0x620>)
 8002ae2:	4989      	ldr	r1, [pc, #548]	; (8002d08 <HAL_RCC_OscConfig+0x628>)
 8002ae4:	400a      	ands	r2, r1
 8002ae6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2210      	movs	r2, #16
 8002aee:	4013      	ands	r3, r2
 8002af0:	d063      	beq.n	8002bba <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d12a      	bne.n	8002b50 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002afa:	4b81      	ldr	r3, [pc, #516]	; (8002d00 <HAL_RCC_OscConfig+0x620>)
 8002afc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002afe:	4b80      	ldr	r3, [pc, #512]	; (8002d00 <HAL_RCC_OscConfig+0x620>)
 8002b00:	2104      	movs	r1, #4
 8002b02:	430a      	orrs	r2, r1
 8002b04:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002b06:	4b7e      	ldr	r3, [pc, #504]	; (8002d00 <HAL_RCC_OscConfig+0x620>)
 8002b08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b0a:	4b7d      	ldr	r3, [pc, #500]	; (8002d00 <HAL_RCC_OscConfig+0x620>)
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b12:	f7fe fd93 	bl	800163c <HAL_GetTick>
 8002b16:	0003      	movs	r3, r0
 8002b18:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002b1c:	f7fe fd8e 	bl	800163c <HAL_GetTick>
 8002b20:	0002      	movs	r2, r0
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e0e3      	b.n	8002cf6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002b2e:	4b74      	ldr	r3, [pc, #464]	; (8002d00 <HAL_RCC_OscConfig+0x620>)
 8002b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b32:	2202      	movs	r2, #2
 8002b34:	4013      	ands	r3, r2
 8002b36:	d0f1      	beq.n	8002b1c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002b38:	4b71      	ldr	r3, [pc, #452]	; (8002d00 <HAL_RCC_OscConfig+0x620>)
 8002b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b3c:	22f8      	movs	r2, #248	; 0xf8
 8002b3e:	4393      	bics	r3, r2
 8002b40:	0019      	movs	r1, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	00da      	lsls	r2, r3, #3
 8002b48:	4b6d      	ldr	r3, [pc, #436]	; (8002d00 <HAL_RCC_OscConfig+0x620>)
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	635a      	str	r2, [r3, #52]	; 0x34
 8002b4e:	e034      	b.n	8002bba <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	3305      	adds	r3, #5
 8002b56:	d111      	bne.n	8002b7c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002b58:	4b69      	ldr	r3, [pc, #420]	; (8002d00 <HAL_RCC_OscConfig+0x620>)
 8002b5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b5c:	4b68      	ldr	r3, [pc, #416]	; (8002d00 <HAL_RCC_OscConfig+0x620>)
 8002b5e:	2104      	movs	r1, #4
 8002b60:	438a      	bics	r2, r1
 8002b62:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002b64:	4b66      	ldr	r3, [pc, #408]	; (8002d00 <HAL_RCC_OscConfig+0x620>)
 8002b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b68:	22f8      	movs	r2, #248	; 0xf8
 8002b6a:	4393      	bics	r3, r2
 8002b6c:	0019      	movs	r1, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	00da      	lsls	r2, r3, #3
 8002b74:	4b62      	ldr	r3, [pc, #392]	; (8002d00 <HAL_RCC_OscConfig+0x620>)
 8002b76:	430a      	orrs	r2, r1
 8002b78:	635a      	str	r2, [r3, #52]	; 0x34
 8002b7a:	e01e      	b.n	8002bba <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002b7c:	4b60      	ldr	r3, [pc, #384]	; (8002d00 <HAL_RCC_OscConfig+0x620>)
 8002b7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b80:	4b5f      	ldr	r3, [pc, #380]	; (8002d00 <HAL_RCC_OscConfig+0x620>)
 8002b82:	2104      	movs	r1, #4
 8002b84:	430a      	orrs	r2, r1
 8002b86:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002b88:	4b5d      	ldr	r3, [pc, #372]	; (8002d00 <HAL_RCC_OscConfig+0x620>)
 8002b8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b8c:	4b5c      	ldr	r3, [pc, #368]	; (8002d00 <HAL_RCC_OscConfig+0x620>)
 8002b8e:	2101      	movs	r1, #1
 8002b90:	438a      	bics	r2, r1
 8002b92:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b94:	f7fe fd52 	bl	800163c <HAL_GetTick>
 8002b98:	0003      	movs	r3, r0
 8002b9a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002b9c:	e008      	b.n	8002bb0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002b9e:	f7fe fd4d 	bl	800163c <HAL_GetTick>
 8002ba2:	0002      	movs	r2, r0
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e0a2      	b.n	8002cf6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002bb0:	4b53      	ldr	r3, [pc, #332]	; (8002d00 <HAL_RCC_OscConfig+0x620>)
 8002bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	d1f1      	bne.n	8002b9e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d100      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x4e4>
 8002bc2:	e097      	b.n	8002cf4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bc4:	4b4e      	ldr	r3, [pc, #312]	; (8002d00 <HAL_RCC_OscConfig+0x620>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	220c      	movs	r2, #12
 8002bca:	4013      	ands	r3, r2
 8002bcc:	2b08      	cmp	r3, #8
 8002bce:	d100      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x4f2>
 8002bd0:	e06b      	b.n	8002caa <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d14c      	bne.n	8002c74 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bda:	4b49      	ldr	r3, [pc, #292]	; (8002d00 <HAL_RCC_OscConfig+0x620>)
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	4b48      	ldr	r3, [pc, #288]	; (8002d00 <HAL_RCC_OscConfig+0x620>)
 8002be0:	494a      	ldr	r1, [pc, #296]	; (8002d0c <HAL_RCC_OscConfig+0x62c>)
 8002be2:	400a      	ands	r2, r1
 8002be4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be6:	f7fe fd29 	bl	800163c <HAL_GetTick>
 8002bea:	0003      	movs	r3, r0
 8002bec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bf0:	f7fe fd24 	bl	800163c <HAL_GetTick>
 8002bf4:	0002      	movs	r2, r0
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e079      	b.n	8002cf6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c02:	4b3f      	ldr	r3, [pc, #252]	; (8002d00 <HAL_RCC_OscConfig+0x620>)
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	2380      	movs	r3, #128	; 0x80
 8002c08:	049b      	lsls	r3, r3, #18
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	d1f0      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c0e:	4b3c      	ldr	r3, [pc, #240]	; (8002d00 <HAL_RCC_OscConfig+0x620>)
 8002c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c12:	220f      	movs	r2, #15
 8002c14:	4393      	bics	r3, r2
 8002c16:	0019      	movs	r1, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c1c:	4b38      	ldr	r3, [pc, #224]	; (8002d00 <HAL_RCC_OscConfig+0x620>)
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c22:	4b37      	ldr	r3, [pc, #220]	; (8002d00 <HAL_RCC_OscConfig+0x620>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	4a3a      	ldr	r2, [pc, #232]	; (8002d10 <HAL_RCC_OscConfig+0x630>)
 8002c28:	4013      	ands	r3, r2
 8002c2a:	0019      	movs	r1, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	431a      	orrs	r2, r3
 8002c36:	4b32      	ldr	r3, [pc, #200]	; (8002d00 <HAL_RCC_OscConfig+0x620>)
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c3c:	4b30      	ldr	r3, [pc, #192]	; (8002d00 <HAL_RCC_OscConfig+0x620>)
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	4b2f      	ldr	r3, [pc, #188]	; (8002d00 <HAL_RCC_OscConfig+0x620>)
 8002c42:	2180      	movs	r1, #128	; 0x80
 8002c44:	0449      	lsls	r1, r1, #17
 8002c46:	430a      	orrs	r2, r1
 8002c48:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4a:	f7fe fcf7 	bl	800163c <HAL_GetTick>
 8002c4e:	0003      	movs	r3, r0
 8002c50:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c54:	f7fe fcf2 	bl	800163c <HAL_GetTick>
 8002c58:	0002      	movs	r2, r0
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e047      	b.n	8002cf6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c66:	4b26      	ldr	r3, [pc, #152]	; (8002d00 <HAL_RCC_OscConfig+0x620>)
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	2380      	movs	r3, #128	; 0x80
 8002c6c:	049b      	lsls	r3, r3, #18
 8002c6e:	4013      	ands	r3, r2
 8002c70:	d0f0      	beq.n	8002c54 <HAL_RCC_OscConfig+0x574>
 8002c72:	e03f      	b.n	8002cf4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c74:	4b22      	ldr	r3, [pc, #136]	; (8002d00 <HAL_RCC_OscConfig+0x620>)
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	4b21      	ldr	r3, [pc, #132]	; (8002d00 <HAL_RCC_OscConfig+0x620>)
 8002c7a:	4924      	ldr	r1, [pc, #144]	; (8002d0c <HAL_RCC_OscConfig+0x62c>)
 8002c7c:	400a      	ands	r2, r1
 8002c7e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c80:	f7fe fcdc 	bl	800163c <HAL_GetTick>
 8002c84:	0003      	movs	r3, r0
 8002c86:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c88:	e008      	b.n	8002c9c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c8a:	f7fe fcd7 	bl	800163c <HAL_GetTick>
 8002c8e:	0002      	movs	r2, r0
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e02c      	b.n	8002cf6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c9c:	4b18      	ldr	r3, [pc, #96]	; (8002d00 <HAL_RCC_OscConfig+0x620>)
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	2380      	movs	r3, #128	; 0x80
 8002ca2:	049b      	lsls	r3, r3, #18
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	d1f0      	bne.n	8002c8a <HAL_RCC_OscConfig+0x5aa>
 8002ca8:	e024      	b.n	8002cf4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d101      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e01f      	b.n	8002cf6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002cb6:	4b12      	ldr	r3, [pc, #72]	; (8002d00 <HAL_RCC_OscConfig+0x620>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002cbc:	4b10      	ldr	r3, [pc, #64]	; (8002d00 <HAL_RCC_OscConfig+0x620>)
 8002cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	2380      	movs	r3, #128	; 0x80
 8002cc6:	025b      	lsls	r3, r3, #9
 8002cc8:	401a      	ands	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d10e      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	220f      	movs	r2, #15
 8002cd6:	401a      	ands	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d107      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	23f0      	movs	r3, #240	; 0xf0
 8002ce4:	039b      	lsls	r3, r3, #14
 8002ce6:	401a      	ands	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d001      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e000      	b.n	8002cf6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	b008      	add	sp, #32
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	46c0      	nop			; (mov r8, r8)
 8002d00:	40021000 	.word	0x40021000
 8002d04:	00001388 	.word	0x00001388
 8002d08:	efffffff 	.word	0xefffffff
 8002d0c:	feffffff 	.word	0xfeffffff
 8002d10:	ffc2ffff 	.word	0xffc2ffff

08002d14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d101      	bne.n	8002d28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e0b3      	b.n	8002e90 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d28:	4b5b      	ldr	r3, [pc, #364]	; (8002e98 <HAL_RCC_ClockConfig+0x184>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	4013      	ands	r3, r2
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d911      	bls.n	8002d5a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d36:	4b58      	ldr	r3, [pc, #352]	; (8002e98 <HAL_RCC_ClockConfig+0x184>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	4393      	bics	r3, r2
 8002d3e:	0019      	movs	r1, r3
 8002d40:	4b55      	ldr	r3, [pc, #340]	; (8002e98 <HAL_RCC_ClockConfig+0x184>)
 8002d42:	683a      	ldr	r2, [r7, #0]
 8002d44:	430a      	orrs	r2, r1
 8002d46:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d48:	4b53      	ldr	r3, [pc, #332]	; (8002e98 <HAL_RCC_ClockConfig+0x184>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	4013      	ands	r3, r2
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d001      	beq.n	8002d5a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e09a      	b.n	8002e90 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2202      	movs	r2, #2
 8002d60:	4013      	ands	r3, r2
 8002d62:	d015      	beq.n	8002d90 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2204      	movs	r2, #4
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	d006      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002d6e:	4b4b      	ldr	r3, [pc, #300]	; (8002e9c <HAL_RCC_ClockConfig+0x188>)
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	4b4a      	ldr	r3, [pc, #296]	; (8002e9c <HAL_RCC_ClockConfig+0x188>)
 8002d74:	21e0      	movs	r1, #224	; 0xe0
 8002d76:	00c9      	lsls	r1, r1, #3
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d7c:	4b47      	ldr	r3, [pc, #284]	; (8002e9c <HAL_RCC_ClockConfig+0x188>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	22f0      	movs	r2, #240	; 0xf0
 8002d82:	4393      	bics	r3, r2
 8002d84:	0019      	movs	r1, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	689a      	ldr	r2, [r3, #8]
 8002d8a:	4b44      	ldr	r3, [pc, #272]	; (8002e9c <HAL_RCC_ClockConfig+0x188>)
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2201      	movs	r2, #1
 8002d96:	4013      	ands	r3, r2
 8002d98:	d040      	beq.n	8002e1c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d107      	bne.n	8002db2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002da2:	4b3e      	ldr	r3, [pc, #248]	; (8002e9c <HAL_RCC_ClockConfig+0x188>)
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	2380      	movs	r3, #128	; 0x80
 8002da8:	029b      	lsls	r3, r3, #10
 8002daa:	4013      	ands	r3, r2
 8002dac:	d114      	bne.n	8002dd8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e06e      	b.n	8002e90 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d107      	bne.n	8002dca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dba:	4b38      	ldr	r3, [pc, #224]	; (8002e9c <HAL_RCC_ClockConfig+0x188>)
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	2380      	movs	r3, #128	; 0x80
 8002dc0:	049b      	lsls	r3, r3, #18
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	d108      	bne.n	8002dd8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e062      	b.n	8002e90 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dca:	4b34      	ldr	r3, [pc, #208]	; (8002e9c <HAL_RCC_ClockConfig+0x188>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2202      	movs	r2, #2
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	d101      	bne.n	8002dd8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e05b      	b.n	8002e90 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dd8:	4b30      	ldr	r3, [pc, #192]	; (8002e9c <HAL_RCC_ClockConfig+0x188>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	2203      	movs	r2, #3
 8002dde:	4393      	bics	r3, r2
 8002de0:	0019      	movs	r1, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685a      	ldr	r2, [r3, #4]
 8002de6:	4b2d      	ldr	r3, [pc, #180]	; (8002e9c <HAL_RCC_ClockConfig+0x188>)
 8002de8:	430a      	orrs	r2, r1
 8002dea:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dec:	f7fe fc26 	bl	800163c <HAL_GetTick>
 8002df0:	0003      	movs	r3, r0
 8002df2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002df4:	e009      	b.n	8002e0a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002df6:	f7fe fc21 	bl	800163c <HAL_GetTick>
 8002dfa:	0002      	movs	r2, r0
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	4a27      	ldr	r2, [pc, #156]	; (8002ea0 <HAL_RCC_ClockConfig+0x18c>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e042      	b.n	8002e90 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e0a:	4b24      	ldr	r3, [pc, #144]	; (8002e9c <HAL_RCC_ClockConfig+0x188>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	220c      	movs	r2, #12
 8002e10:	401a      	ands	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d1ec      	bne.n	8002df6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e1c:	4b1e      	ldr	r3, [pc, #120]	; (8002e98 <HAL_RCC_ClockConfig+0x184>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2201      	movs	r2, #1
 8002e22:	4013      	ands	r3, r2
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d211      	bcs.n	8002e4e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e2a:	4b1b      	ldr	r3, [pc, #108]	; (8002e98 <HAL_RCC_ClockConfig+0x184>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	4393      	bics	r3, r2
 8002e32:	0019      	movs	r1, r3
 8002e34:	4b18      	ldr	r3, [pc, #96]	; (8002e98 <HAL_RCC_ClockConfig+0x184>)
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e3c:	4b16      	ldr	r3, [pc, #88]	; (8002e98 <HAL_RCC_ClockConfig+0x184>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2201      	movs	r2, #1
 8002e42:	4013      	ands	r3, r2
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d001      	beq.n	8002e4e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e020      	b.n	8002e90 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2204      	movs	r2, #4
 8002e54:	4013      	ands	r3, r2
 8002e56:	d009      	beq.n	8002e6c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002e58:	4b10      	ldr	r3, [pc, #64]	; (8002e9c <HAL_RCC_ClockConfig+0x188>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	4a11      	ldr	r2, [pc, #68]	; (8002ea4 <HAL_RCC_ClockConfig+0x190>)
 8002e5e:	4013      	ands	r3, r2
 8002e60:	0019      	movs	r1, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68da      	ldr	r2, [r3, #12]
 8002e66:	4b0d      	ldr	r3, [pc, #52]	; (8002e9c <HAL_RCC_ClockConfig+0x188>)
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002e6c:	f000 f820 	bl	8002eb0 <HAL_RCC_GetSysClockFreq>
 8002e70:	0001      	movs	r1, r0
 8002e72:	4b0a      	ldr	r3, [pc, #40]	; (8002e9c <HAL_RCC_ClockConfig+0x188>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	091b      	lsrs	r3, r3, #4
 8002e78:	220f      	movs	r2, #15
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	4a0a      	ldr	r2, [pc, #40]	; (8002ea8 <HAL_RCC_ClockConfig+0x194>)
 8002e7e:	5cd3      	ldrb	r3, [r2, r3]
 8002e80:	000a      	movs	r2, r1
 8002e82:	40da      	lsrs	r2, r3
 8002e84:	4b09      	ldr	r3, [pc, #36]	; (8002eac <HAL_RCC_ClockConfig+0x198>)
 8002e86:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002e88:	2003      	movs	r0, #3
 8002e8a:	f7fe fb91 	bl	80015b0 <HAL_InitTick>
  
  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	0018      	movs	r0, r3
 8002e92:	46bd      	mov	sp, r7
 8002e94:	b004      	add	sp, #16
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40022000 	.word	0x40022000
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	00001388 	.word	0x00001388
 8002ea4:	fffff8ff 	.word	0xfffff8ff
 8002ea8:	080055f8 	.word	0x080055f8
 8002eac:	20000004 	.word	0x20000004

08002eb0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eb0:	b590      	push	{r4, r7, lr}
 8002eb2:	b08f      	sub	sp, #60	; 0x3c
 8002eb4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002eb6:	2314      	movs	r3, #20
 8002eb8:	18fb      	adds	r3, r7, r3
 8002eba:	4a2b      	ldr	r2, [pc, #172]	; (8002f68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ebc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002ebe:	c313      	stmia	r3!, {r0, r1, r4}
 8002ec0:	6812      	ldr	r2, [r2, #0]
 8002ec2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002ec4:	1d3b      	adds	r3, r7, #4
 8002ec6:	4a29      	ldr	r2, [pc, #164]	; (8002f6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ec8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002eca:	c313      	stmia	r3!, {r0, r1, r4}
 8002ecc:	6812      	ldr	r2, [r2, #0]
 8002ece:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ed8:	2300      	movs	r3, #0
 8002eda:	637b      	str	r3, [r7, #52]	; 0x34
 8002edc:	2300      	movs	r3, #0
 8002ede:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002ee4:	4b22      	ldr	r3, [pc, #136]	; (8002f70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eec:	220c      	movs	r2, #12
 8002eee:	4013      	ands	r3, r2
 8002ef0:	2b04      	cmp	r3, #4
 8002ef2:	d002      	beq.n	8002efa <HAL_RCC_GetSysClockFreq+0x4a>
 8002ef4:	2b08      	cmp	r3, #8
 8002ef6:	d003      	beq.n	8002f00 <HAL_RCC_GetSysClockFreq+0x50>
 8002ef8:	e02d      	b.n	8002f56 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002efa:	4b1e      	ldr	r3, [pc, #120]	; (8002f74 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002efc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002efe:	e02d      	b.n	8002f5c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f02:	0c9b      	lsrs	r3, r3, #18
 8002f04:	220f      	movs	r2, #15
 8002f06:	4013      	ands	r3, r2
 8002f08:	2214      	movs	r2, #20
 8002f0a:	18ba      	adds	r2, r7, r2
 8002f0c:	5cd3      	ldrb	r3, [r2, r3]
 8002f0e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002f10:	4b17      	ldr	r3, [pc, #92]	; (8002f70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f14:	220f      	movs	r2, #15
 8002f16:	4013      	ands	r3, r2
 8002f18:	1d3a      	adds	r2, r7, #4
 8002f1a:	5cd3      	ldrb	r3, [r2, r3]
 8002f1c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002f1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f20:	2380      	movs	r3, #128	; 0x80
 8002f22:	025b      	lsls	r3, r3, #9
 8002f24:	4013      	ands	r3, r2
 8002f26:	d009      	beq.n	8002f3c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f2a:	4812      	ldr	r0, [pc, #72]	; (8002f74 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f2c:	f7fd f8ec 	bl	8000108 <__udivsi3>
 8002f30:	0003      	movs	r3, r0
 8002f32:	001a      	movs	r2, r3
 8002f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f36:	4353      	muls	r3, r2
 8002f38:	637b      	str	r3, [r7, #52]	; 0x34
 8002f3a:	e009      	b.n	8002f50 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002f3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f3e:	000a      	movs	r2, r1
 8002f40:	0152      	lsls	r2, r2, #5
 8002f42:	1a52      	subs	r2, r2, r1
 8002f44:	0193      	lsls	r3, r2, #6
 8002f46:	1a9b      	subs	r3, r3, r2
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	185b      	adds	r3, r3, r1
 8002f4c:	021b      	lsls	r3, r3, #8
 8002f4e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f52:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002f54:	e002      	b.n	8002f5c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f56:	4b07      	ldr	r3, [pc, #28]	; (8002f74 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f58:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002f5a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002f5e:	0018      	movs	r0, r3
 8002f60:	46bd      	mov	sp, r7
 8002f62:	b00f      	add	sp, #60	; 0x3c
 8002f64:	bd90      	pop	{r4, r7, pc}
 8002f66:	46c0      	nop			; (mov r8, r8)
 8002f68:	0800548c 	.word	0x0800548c
 8002f6c:	0800549c 	.word	0x0800549c
 8002f70:	40021000 	.word	0x40021000
 8002f74:	007a1200 	.word	0x007a1200

08002f78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f7c:	4b02      	ldr	r3, [pc, #8]	; (8002f88 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
}
 8002f80:	0018      	movs	r0, r3
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	20000004 	.word	0x20000004

08002f8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002f90:	f7ff fff2 	bl	8002f78 <HAL_RCC_GetHCLKFreq>
 8002f94:	0001      	movs	r1, r0
 8002f96:	4b06      	ldr	r3, [pc, #24]	; (8002fb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	0a1b      	lsrs	r3, r3, #8
 8002f9c:	2207      	movs	r2, #7
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	4a04      	ldr	r2, [pc, #16]	; (8002fb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002fa2:	5cd3      	ldrb	r3, [r2, r3]
 8002fa4:	40d9      	lsrs	r1, r3
 8002fa6:	000b      	movs	r3, r1
}    
 8002fa8:	0018      	movs	r0, r3
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	46c0      	nop			; (mov r8, r8)
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	08005608 	.word	0x08005608

08002fb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	2380      	movs	r3, #128	; 0x80
 8002fce:	025b      	lsls	r3, r3, #9
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	d100      	bne.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002fd4:	e08e      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002fd6:	2017      	movs	r0, #23
 8002fd8:	183b      	adds	r3, r7, r0
 8002fda:	2200      	movs	r2, #0
 8002fdc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fde:	4b5f      	ldr	r3, [pc, #380]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002fe0:	69da      	ldr	r2, [r3, #28]
 8002fe2:	2380      	movs	r3, #128	; 0x80
 8002fe4:	055b      	lsls	r3, r3, #21
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	d110      	bne.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fea:	4b5c      	ldr	r3, [pc, #368]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002fec:	69da      	ldr	r2, [r3, #28]
 8002fee:	4b5b      	ldr	r3, [pc, #364]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ff0:	2180      	movs	r1, #128	; 0x80
 8002ff2:	0549      	lsls	r1, r1, #21
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	61da      	str	r2, [r3, #28]
 8002ff8:	4b58      	ldr	r3, [pc, #352]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ffa:	69da      	ldr	r2, [r3, #28]
 8002ffc:	2380      	movs	r3, #128	; 0x80
 8002ffe:	055b      	lsls	r3, r3, #21
 8003000:	4013      	ands	r3, r2
 8003002:	60bb      	str	r3, [r7, #8]
 8003004:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003006:	183b      	adds	r3, r7, r0
 8003008:	2201      	movs	r2, #1
 800300a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800300c:	4b54      	ldr	r3, [pc, #336]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	2380      	movs	r3, #128	; 0x80
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	4013      	ands	r3, r2
 8003016:	d11a      	bne.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003018:	4b51      	ldr	r3, [pc, #324]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	4b50      	ldr	r3, [pc, #320]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800301e:	2180      	movs	r1, #128	; 0x80
 8003020:	0049      	lsls	r1, r1, #1
 8003022:	430a      	orrs	r2, r1
 8003024:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003026:	f7fe fb09 	bl	800163c <HAL_GetTick>
 800302a:	0003      	movs	r3, r0
 800302c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800302e:	e008      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003030:	f7fe fb04 	bl	800163c <HAL_GetTick>
 8003034:	0002      	movs	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b64      	cmp	r3, #100	; 0x64
 800303c:	d901      	bls.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e087      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003042:	4b47      	ldr	r3, [pc, #284]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	2380      	movs	r3, #128	; 0x80
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	4013      	ands	r3, r2
 800304c:	d0f0      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800304e:	4b43      	ldr	r3, [pc, #268]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003050:	6a1a      	ldr	r2, [r3, #32]
 8003052:	23c0      	movs	r3, #192	; 0xc0
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	4013      	ands	r3, r2
 8003058:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d034      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	23c0      	movs	r3, #192	; 0xc0
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4013      	ands	r3, r2
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	429a      	cmp	r2, r3
 800306e:	d02c      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003070:	4b3a      	ldr	r3, [pc, #232]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	4a3b      	ldr	r2, [pc, #236]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003076:	4013      	ands	r3, r2
 8003078:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800307a:	4b38      	ldr	r3, [pc, #224]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800307c:	6a1a      	ldr	r2, [r3, #32]
 800307e:	4b37      	ldr	r3, [pc, #220]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003080:	2180      	movs	r1, #128	; 0x80
 8003082:	0249      	lsls	r1, r1, #9
 8003084:	430a      	orrs	r2, r1
 8003086:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003088:	4b34      	ldr	r3, [pc, #208]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800308a:	6a1a      	ldr	r2, [r3, #32]
 800308c:	4b33      	ldr	r3, [pc, #204]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800308e:	4936      	ldr	r1, [pc, #216]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003090:	400a      	ands	r2, r1
 8003092:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003094:	4b31      	ldr	r3, [pc, #196]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2201      	movs	r2, #1
 800309e:	4013      	ands	r3, r2
 80030a0:	d013      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a2:	f7fe facb 	bl	800163c <HAL_GetTick>
 80030a6:	0003      	movs	r3, r0
 80030a8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030aa:	e009      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ac:	f7fe fac6 	bl	800163c <HAL_GetTick>
 80030b0:	0002      	movs	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	4a2d      	ldr	r2, [pc, #180]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e048      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c0:	4b26      	ldr	r3, [pc, #152]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	2202      	movs	r2, #2
 80030c6:	4013      	ands	r3, r2
 80030c8:	d0f0      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030ca:	4b24      	ldr	r3, [pc, #144]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	4a25      	ldr	r2, [pc, #148]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030d0:	4013      	ands	r3, r2
 80030d2:	0019      	movs	r1, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	4b20      	ldr	r3, [pc, #128]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80030da:	430a      	orrs	r2, r1
 80030dc:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030de:	2317      	movs	r3, #23
 80030e0:	18fb      	adds	r3, r7, r3
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d105      	bne.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030e8:	4b1c      	ldr	r3, [pc, #112]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80030ea:	69da      	ldr	r2, [r3, #28]
 80030ec:	4b1b      	ldr	r3, [pc, #108]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80030ee:	4920      	ldr	r1, [pc, #128]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80030f0:	400a      	ands	r2, r1
 80030f2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2201      	movs	r2, #1
 80030fa:	4013      	ands	r3, r2
 80030fc:	d009      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030fe:	4b17      	ldr	r3, [pc, #92]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003102:	2203      	movs	r2, #3
 8003104:	4393      	bics	r3, r2
 8003106:	0019      	movs	r1, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	4b13      	ldr	r3, [pc, #76]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800310e:	430a      	orrs	r2, r1
 8003110:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2220      	movs	r2, #32
 8003118:	4013      	ands	r3, r2
 800311a:	d009      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800311c:	4b0f      	ldr	r3, [pc, #60]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800311e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003120:	2210      	movs	r2, #16
 8003122:	4393      	bics	r3, r2
 8003124:	0019      	movs	r1, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68da      	ldr	r2, [r3, #12]
 800312a:	4b0c      	ldr	r3, [pc, #48]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800312c:	430a      	orrs	r2, r1
 800312e:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	2380      	movs	r3, #128	; 0x80
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	4013      	ands	r3, r2
 800313a:	d009      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800313c:	4b07      	ldr	r3, [pc, #28]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800313e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003140:	2240      	movs	r2, #64	; 0x40
 8003142:	4393      	bics	r3, r2
 8003144:	0019      	movs	r1, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	691a      	ldr	r2, [r3, #16]
 800314a:	4b04      	ldr	r3, [pc, #16]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800314c:	430a      	orrs	r2, r1
 800314e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	0018      	movs	r0, r3
 8003154:	46bd      	mov	sp, r7
 8003156:	b006      	add	sp, #24
 8003158:	bd80      	pop	{r7, pc}
 800315a:	46c0      	nop			; (mov r8, r8)
 800315c:	40021000 	.word	0x40021000
 8003160:	40007000 	.word	0x40007000
 8003164:	fffffcff 	.word	0xfffffcff
 8003168:	fffeffff 	.word	0xfffeffff
 800316c:	00001388 	.word	0x00001388
 8003170:	efffffff 	.word	0xefffffff

08003174 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e0a8      	b.n	80032d8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318a:	2b00      	cmp	r3, #0
 800318c:	d109      	bne.n	80031a2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685a      	ldr	r2, [r3, #4]
 8003192:	2382      	movs	r3, #130	; 0x82
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	429a      	cmp	r2, r3
 8003198:	d009      	beq.n	80031ae <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	61da      	str	r2, [r3, #28]
 80031a0:	e005      	b.n	80031ae <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	225d      	movs	r2, #93	; 0x5d
 80031b8:	5c9b      	ldrb	r3, [r3, r2]
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d107      	bne.n	80031d0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	225c      	movs	r2, #92	; 0x5c
 80031c4:	2100      	movs	r1, #0
 80031c6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	0018      	movs	r0, r3
 80031cc:	f7fd ffc2 	bl	8001154 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	225d      	movs	r2, #93	; 0x5d
 80031d4:	2102      	movs	r1, #2
 80031d6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2140      	movs	r1, #64	; 0x40
 80031e4:	438a      	bics	r2, r1
 80031e6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68da      	ldr	r2, [r3, #12]
 80031ec:	23e0      	movs	r3, #224	; 0xe0
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d902      	bls.n	80031fa <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80031f4:	2300      	movs	r3, #0
 80031f6:	60fb      	str	r3, [r7, #12]
 80031f8:	e002      	b.n	8003200 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80031fa:	2380      	movs	r3, #128	; 0x80
 80031fc:	015b      	lsls	r3, r3, #5
 80031fe:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68da      	ldr	r2, [r3, #12]
 8003204:	23f0      	movs	r3, #240	; 0xf0
 8003206:	011b      	lsls	r3, r3, #4
 8003208:	429a      	cmp	r2, r3
 800320a:	d008      	beq.n	800321e <HAL_SPI_Init+0xaa>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68da      	ldr	r2, [r3, #12]
 8003210:	23e0      	movs	r3, #224	; 0xe0
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	429a      	cmp	r2, r3
 8003216:	d002      	beq.n	800321e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685a      	ldr	r2, [r3, #4]
 8003222:	2382      	movs	r3, #130	; 0x82
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	401a      	ands	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6899      	ldr	r1, [r3, #8]
 800322c:	2384      	movs	r3, #132	; 0x84
 800322e:	021b      	lsls	r3, r3, #8
 8003230:	400b      	ands	r3, r1
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	2102      	movs	r1, #2
 800323a:	400b      	ands	r3, r1
 800323c:	431a      	orrs	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	2101      	movs	r1, #1
 8003244:	400b      	ands	r3, r1
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6999      	ldr	r1, [r3, #24]
 800324c:	2380      	movs	r3, #128	; 0x80
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	400b      	ands	r3, r1
 8003252:	431a      	orrs	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	69db      	ldr	r3, [r3, #28]
 8003258:	2138      	movs	r1, #56	; 0x38
 800325a:	400b      	ands	r3, r1
 800325c:	431a      	orrs	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	2180      	movs	r1, #128	; 0x80
 8003264:	400b      	ands	r3, r1
 8003266:	431a      	orrs	r2, r3
 8003268:	0011      	movs	r1, r2
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800326e:	2380      	movs	r3, #128	; 0x80
 8003270:	019b      	lsls	r3, r3, #6
 8003272:	401a      	ands	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	430a      	orrs	r2, r1
 800327a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	0c1b      	lsrs	r3, r3, #16
 8003282:	2204      	movs	r2, #4
 8003284:	401a      	ands	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328a:	2110      	movs	r1, #16
 800328c:	400b      	ands	r3, r1
 800328e:	431a      	orrs	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003294:	2108      	movs	r1, #8
 8003296:	400b      	ands	r3, r1
 8003298:	431a      	orrs	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68d9      	ldr	r1, [r3, #12]
 800329e:	23f0      	movs	r3, #240	; 0xf0
 80032a0:	011b      	lsls	r3, r3, #4
 80032a2:	400b      	ands	r3, r1
 80032a4:	431a      	orrs	r2, r3
 80032a6:	0011      	movs	r1, r2
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	2380      	movs	r3, #128	; 0x80
 80032ac:	015b      	lsls	r3, r3, #5
 80032ae:	401a      	ands	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	430a      	orrs	r2, r1
 80032b6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	69da      	ldr	r2, [r3, #28]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4907      	ldr	r1, [pc, #28]	; (80032e0 <HAL_SPI_Init+0x16c>)
 80032c4:	400a      	ands	r2, r1
 80032c6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	225d      	movs	r2, #93	; 0x5d
 80032d2:	2101      	movs	r1, #1
 80032d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	0018      	movs	r0, r3
 80032da:	46bd      	mov	sp, r7
 80032dc:	b004      	add	sp, #16
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	fffff7ff 	.word	0xfffff7ff

080032e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e042      	b.n	800337c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	223d      	movs	r2, #61	; 0x3d
 80032fa:	5c9b      	ldrb	r3, [r3, r2]
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d107      	bne.n	8003312 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	223c      	movs	r2, #60	; 0x3c
 8003306:	2100      	movs	r1, #0
 8003308:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	0018      	movs	r0, r3
 800330e:	f7fd ffa9 	bl	8001264 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	223d      	movs	r2, #61	; 0x3d
 8003316:	2102      	movs	r1, #2
 8003318:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	3304      	adds	r3, #4
 8003322:	0019      	movs	r1, r3
 8003324:	0010      	movs	r0, r2
 8003326:	f000 fbe7 	bl	8003af8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2246      	movs	r2, #70	; 0x46
 800332e:	2101      	movs	r1, #1
 8003330:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	223e      	movs	r2, #62	; 0x3e
 8003336:	2101      	movs	r1, #1
 8003338:	5499      	strb	r1, [r3, r2]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	223f      	movs	r2, #63	; 0x3f
 800333e:	2101      	movs	r1, #1
 8003340:	5499      	strb	r1, [r3, r2]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2240      	movs	r2, #64	; 0x40
 8003346:	2101      	movs	r1, #1
 8003348:	5499      	strb	r1, [r3, r2]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2241      	movs	r2, #65	; 0x41
 800334e:	2101      	movs	r1, #1
 8003350:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2242      	movs	r2, #66	; 0x42
 8003356:	2101      	movs	r1, #1
 8003358:	5499      	strb	r1, [r3, r2]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2243      	movs	r2, #67	; 0x43
 800335e:	2101      	movs	r1, #1
 8003360:	5499      	strb	r1, [r3, r2]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2244      	movs	r2, #68	; 0x44
 8003366:	2101      	movs	r1, #1
 8003368:	5499      	strb	r1, [r3, r2]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2245      	movs	r2, #69	; 0x45
 800336e:	2101      	movs	r1, #1
 8003370:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	223d      	movs	r2, #61	; 0x3d
 8003376:	2101      	movs	r1, #1
 8003378:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	0018      	movs	r0, r3
 800337e:	46bd      	mov	sp, r7
 8003380:	b002      	add	sp, #8
 8003382:	bd80      	pop	{r7, pc}

08003384 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e042      	b.n	800341c <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	223d      	movs	r2, #61	; 0x3d
 800339a:	5c9b      	ldrb	r3, [r3, r2]
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d107      	bne.n	80033b2 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	223c      	movs	r2, #60	; 0x3c
 80033a6:	2100      	movs	r1, #0
 80033a8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	0018      	movs	r0, r3
 80033ae:	f000 f839 	bl	8003424 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	223d      	movs	r2, #61	; 0x3d
 80033b6:	2102      	movs	r1, #2
 80033b8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	3304      	adds	r3, #4
 80033c2:	0019      	movs	r1, r3
 80033c4:	0010      	movs	r0, r2
 80033c6:	f000 fb97 	bl	8003af8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2246      	movs	r2, #70	; 0x46
 80033ce:	2101      	movs	r1, #1
 80033d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	223e      	movs	r2, #62	; 0x3e
 80033d6:	2101      	movs	r1, #1
 80033d8:	5499      	strb	r1, [r3, r2]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	223f      	movs	r2, #63	; 0x3f
 80033de:	2101      	movs	r1, #1
 80033e0:	5499      	strb	r1, [r3, r2]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2240      	movs	r2, #64	; 0x40
 80033e6:	2101      	movs	r1, #1
 80033e8:	5499      	strb	r1, [r3, r2]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2241      	movs	r2, #65	; 0x41
 80033ee:	2101      	movs	r1, #1
 80033f0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2242      	movs	r2, #66	; 0x42
 80033f6:	2101      	movs	r1, #1
 80033f8:	5499      	strb	r1, [r3, r2]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2243      	movs	r2, #67	; 0x43
 80033fe:	2101      	movs	r1, #1
 8003400:	5499      	strb	r1, [r3, r2]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2244      	movs	r2, #68	; 0x44
 8003406:	2101      	movs	r1, #1
 8003408:	5499      	strb	r1, [r3, r2]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2245      	movs	r2, #69	; 0x45
 800340e:	2101      	movs	r1, #1
 8003410:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	223d      	movs	r2, #61	; 0x3d
 8003416:	2101      	movs	r1, #1
 8003418:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	0018      	movs	r0, r3
 800341e:	46bd      	mov	sp, r7
 8003420:	b002      	add	sp, #8
 8003422:	bd80      	pop	{r7, pc}

08003424 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800342c:	46c0      	nop			; (mov r8, r8)
 800342e:	46bd      	mov	sp, r7
 8003430:	b002      	add	sp, #8
 8003432:	bd80      	pop	{r7, pc}

08003434 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800343e:	230f      	movs	r3, #15
 8003440:	18fb      	adds	r3, r7, r3
 8003442:	2200      	movs	r2, #0
 8003444:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d108      	bne.n	800345e <HAL_TIM_OC_Start_IT+0x2a>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	223e      	movs	r2, #62	; 0x3e
 8003450:	5c9b      	ldrb	r3, [r3, r2]
 8003452:	b2db      	uxtb	r3, r3
 8003454:	3b01      	subs	r3, #1
 8003456:	1e5a      	subs	r2, r3, #1
 8003458:	4193      	sbcs	r3, r2
 800345a:	b2db      	uxtb	r3, r3
 800345c:	e01f      	b.n	800349e <HAL_TIM_OC_Start_IT+0x6a>
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	2b04      	cmp	r3, #4
 8003462:	d108      	bne.n	8003476 <HAL_TIM_OC_Start_IT+0x42>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	223f      	movs	r2, #63	; 0x3f
 8003468:	5c9b      	ldrb	r3, [r3, r2]
 800346a:	b2db      	uxtb	r3, r3
 800346c:	3b01      	subs	r3, #1
 800346e:	1e5a      	subs	r2, r3, #1
 8003470:	4193      	sbcs	r3, r2
 8003472:	b2db      	uxtb	r3, r3
 8003474:	e013      	b.n	800349e <HAL_TIM_OC_Start_IT+0x6a>
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	2b08      	cmp	r3, #8
 800347a:	d108      	bne.n	800348e <HAL_TIM_OC_Start_IT+0x5a>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2240      	movs	r2, #64	; 0x40
 8003480:	5c9b      	ldrb	r3, [r3, r2]
 8003482:	b2db      	uxtb	r3, r3
 8003484:	3b01      	subs	r3, #1
 8003486:	1e5a      	subs	r2, r3, #1
 8003488:	4193      	sbcs	r3, r2
 800348a:	b2db      	uxtb	r3, r3
 800348c:	e007      	b.n	800349e <HAL_TIM_OC_Start_IT+0x6a>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2241      	movs	r2, #65	; 0x41
 8003492:	5c9b      	ldrb	r3, [r3, r2]
 8003494:	b2db      	uxtb	r3, r3
 8003496:	3b01      	subs	r3, #1
 8003498:	1e5a      	subs	r2, r3, #1
 800349a:	4193      	sbcs	r3, r2
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e0b7      	b.n	8003616 <HAL_TIM_OC_Start_IT+0x1e2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d104      	bne.n	80034b6 <HAL_TIM_OC_Start_IT+0x82>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	223e      	movs	r2, #62	; 0x3e
 80034b0:	2102      	movs	r1, #2
 80034b2:	5499      	strb	r1, [r3, r2]
 80034b4:	e013      	b.n	80034de <HAL_TIM_OC_Start_IT+0xaa>
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d104      	bne.n	80034c6 <HAL_TIM_OC_Start_IT+0x92>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	223f      	movs	r2, #63	; 0x3f
 80034c0:	2102      	movs	r1, #2
 80034c2:	5499      	strb	r1, [r3, r2]
 80034c4:	e00b      	b.n	80034de <HAL_TIM_OC_Start_IT+0xaa>
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	d104      	bne.n	80034d6 <HAL_TIM_OC_Start_IT+0xa2>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2240      	movs	r2, #64	; 0x40
 80034d0:	2102      	movs	r1, #2
 80034d2:	5499      	strb	r1, [r3, r2]
 80034d4:	e003      	b.n	80034de <HAL_TIM_OC_Start_IT+0xaa>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2241      	movs	r2, #65	; 0x41
 80034da:	2102      	movs	r1, #2
 80034dc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	2b0c      	cmp	r3, #12
 80034e2:	d02a      	beq.n	800353a <HAL_TIM_OC_Start_IT+0x106>
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	2b0c      	cmp	r3, #12
 80034e8:	d830      	bhi.n	800354c <HAL_TIM_OC_Start_IT+0x118>
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	2b08      	cmp	r3, #8
 80034ee:	d01b      	beq.n	8003528 <HAL_TIM_OC_Start_IT+0xf4>
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	2b08      	cmp	r3, #8
 80034f4:	d82a      	bhi.n	800354c <HAL_TIM_OC_Start_IT+0x118>
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d003      	beq.n	8003504 <HAL_TIM_OC_Start_IT+0xd0>
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	2b04      	cmp	r3, #4
 8003500:	d009      	beq.n	8003516 <HAL_TIM_OC_Start_IT+0xe2>
 8003502:	e023      	b.n	800354c <HAL_TIM_OC_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2102      	movs	r1, #2
 8003510:	430a      	orrs	r2, r1
 8003512:	60da      	str	r2, [r3, #12]
      break;
 8003514:	e01f      	b.n	8003556 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68da      	ldr	r2, [r3, #12]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2104      	movs	r1, #4
 8003522:	430a      	orrs	r2, r1
 8003524:	60da      	str	r2, [r3, #12]
      break;
 8003526:	e016      	b.n	8003556 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68da      	ldr	r2, [r3, #12]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2108      	movs	r1, #8
 8003534:	430a      	orrs	r2, r1
 8003536:	60da      	str	r2, [r3, #12]
      break;
 8003538:	e00d      	b.n	8003556 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68da      	ldr	r2, [r3, #12]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2110      	movs	r1, #16
 8003546:	430a      	orrs	r2, r1
 8003548:	60da      	str	r2, [r3, #12]
      break;
 800354a:	e004      	b.n	8003556 <HAL_TIM_OC_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 800354c:	230f      	movs	r3, #15
 800354e:	18fb      	adds	r3, r7, r3
 8003550:	2201      	movs	r2, #1
 8003552:	701a      	strb	r2, [r3, #0]
      break;
 8003554:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8003556:	230f      	movs	r3, #15
 8003558:	18fb      	adds	r3, r7, r3
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d157      	bne.n	8003610 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6839      	ldr	r1, [r7, #0]
 8003566:	2201      	movs	r2, #1
 8003568:	0018      	movs	r0, r3
 800356a:	f000 fddb 	bl	8004124 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a2b      	ldr	r2, [pc, #172]	; (8003620 <HAL_TIM_OC_Start_IT+0x1ec>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d00e      	beq.n	8003596 <HAL_TIM_OC_Start_IT+0x162>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a29      	ldr	r2, [pc, #164]	; (8003624 <HAL_TIM_OC_Start_IT+0x1f0>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d009      	beq.n	8003596 <HAL_TIM_OC_Start_IT+0x162>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a28      	ldr	r2, [pc, #160]	; (8003628 <HAL_TIM_OC_Start_IT+0x1f4>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d004      	beq.n	8003596 <HAL_TIM_OC_Start_IT+0x162>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a26      	ldr	r2, [pc, #152]	; (800362c <HAL_TIM_OC_Start_IT+0x1f8>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d101      	bne.n	800359a <HAL_TIM_OC_Start_IT+0x166>
 8003596:	2301      	movs	r3, #1
 8003598:	e000      	b.n	800359c <HAL_TIM_OC_Start_IT+0x168>
 800359a:	2300      	movs	r3, #0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d008      	beq.n	80035b2 <HAL_TIM_OC_Start_IT+0x17e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2180      	movs	r1, #128	; 0x80
 80035ac:	0209      	lsls	r1, r1, #8
 80035ae:	430a      	orrs	r2, r1
 80035b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a1a      	ldr	r2, [pc, #104]	; (8003620 <HAL_TIM_OC_Start_IT+0x1ec>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d00f      	beq.n	80035dc <HAL_TIM_OC_Start_IT+0x1a8>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	2380      	movs	r3, #128	; 0x80
 80035c2:	05db      	lsls	r3, r3, #23
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d009      	beq.n	80035dc <HAL_TIM_OC_Start_IT+0x1a8>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a18      	ldr	r2, [pc, #96]	; (8003630 <HAL_TIM_OC_Start_IT+0x1fc>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d004      	beq.n	80035dc <HAL_TIM_OC_Start_IT+0x1a8>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a13      	ldr	r2, [pc, #76]	; (8003624 <HAL_TIM_OC_Start_IT+0x1f0>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d111      	bne.n	8003600 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	2207      	movs	r2, #7
 80035e4:	4013      	ands	r3, r2
 80035e6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	2b06      	cmp	r3, #6
 80035ec:	d010      	beq.n	8003610 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2101      	movs	r1, #1
 80035fa:	430a      	orrs	r2, r1
 80035fc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035fe:	e007      	b.n	8003610 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2101      	movs	r1, #1
 800360c:	430a      	orrs	r2, r1
 800360e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003610:	230f      	movs	r3, #15
 8003612:	18fb      	adds	r3, r7, r3
 8003614:	781b      	ldrb	r3, [r3, #0]
}
 8003616:	0018      	movs	r0, r3
 8003618:	46bd      	mov	sp, r7
 800361a:	b004      	add	sp, #16
 800361c:	bd80      	pop	{r7, pc}
 800361e:	46c0      	nop			; (mov r8, r8)
 8003620:	40012c00 	.word	0x40012c00
 8003624:	40014000 	.word	0x40014000
 8003628:	40014400 	.word	0x40014400
 800362c:	40014800 	.word	0x40014800
 8003630:	40000400 	.word	0x40000400

08003634 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	2202      	movs	r2, #2
 8003644:	4013      	ands	r3, r2
 8003646:	2b02      	cmp	r3, #2
 8003648:	d124      	bne.n	8003694 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	2202      	movs	r2, #2
 8003652:	4013      	ands	r3, r2
 8003654:	2b02      	cmp	r3, #2
 8003656:	d11d      	bne.n	8003694 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2203      	movs	r2, #3
 800365e:	4252      	negs	r2, r2
 8003660:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	2203      	movs	r2, #3
 8003670:	4013      	ands	r3, r2
 8003672:	d004      	beq.n	800367e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	0018      	movs	r0, r3
 8003678:	f000 fa26 	bl	8003ac8 <HAL_TIM_IC_CaptureCallback>
 800367c:	e007      	b.n	800368e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	0018      	movs	r0, r3
 8003682:	f7fc fddf 	bl	8000244 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	0018      	movs	r0, r3
 800368a:	f000 fa25 	bl	8003ad8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	2204      	movs	r2, #4
 800369c:	4013      	ands	r3, r2
 800369e:	2b04      	cmp	r3, #4
 80036a0:	d125      	bne.n	80036ee <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	2204      	movs	r2, #4
 80036aa:	4013      	ands	r3, r2
 80036ac:	2b04      	cmp	r3, #4
 80036ae:	d11e      	bne.n	80036ee <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2205      	movs	r2, #5
 80036b6:	4252      	negs	r2, r2
 80036b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2202      	movs	r2, #2
 80036be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	699a      	ldr	r2, [r3, #24]
 80036c6:	23c0      	movs	r3, #192	; 0xc0
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4013      	ands	r3, r2
 80036cc:	d004      	beq.n	80036d8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	0018      	movs	r0, r3
 80036d2:	f000 f9f9 	bl	8003ac8 <HAL_TIM_IC_CaptureCallback>
 80036d6:	e007      	b.n	80036e8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	0018      	movs	r0, r3
 80036dc:	f7fc fdb2 	bl	8000244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	0018      	movs	r0, r3
 80036e4:	f000 f9f8 	bl	8003ad8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	2208      	movs	r2, #8
 80036f6:	4013      	ands	r3, r2
 80036f8:	2b08      	cmp	r3, #8
 80036fa:	d124      	bne.n	8003746 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	2208      	movs	r2, #8
 8003704:	4013      	ands	r3, r2
 8003706:	2b08      	cmp	r3, #8
 8003708:	d11d      	bne.n	8003746 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2209      	movs	r2, #9
 8003710:	4252      	negs	r2, r2
 8003712:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2204      	movs	r2, #4
 8003718:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	69db      	ldr	r3, [r3, #28]
 8003720:	2203      	movs	r2, #3
 8003722:	4013      	ands	r3, r2
 8003724:	d004      	beq.n	8003730 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	0018      	movs	r0, r3
 800372a:	f000 f9cd 	bl	8003ac8 <HAL_TIM_IC_CaptureCallback>
 800372e:	e007      	b.n	8003740 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	0018      	movs	r0, r3
 8003734:	f7fc fd86 	bl	8000244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	0018      	movs	r0, r3
 800373c:	f000 f9cc 	bl	8003ad8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	2210      	movs	r2, #16
 800374e:	4013      	ands	r3, r2
 8003750:	2b10      	cmp	r3, #16
 8003752:	d125      	bne.n	80037a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	2210      	movs	r2, #16
 800375c:	4013      	ands	r3, r2
 800375e:	2b10      	cmp	r3, #16
 8003760:	d11e      	bne.n	80037a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2211      	movs	r2, #17
 8003768:	4252      	negs	r2, r2
 800376a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2208      	movs	r2, #8
 8003770:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	69da      	ldr	r2, [r3, #28]
 8003778:	23c0      	movs	r3, #192	; 0xc0
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	4013      	ands	r3, r2
 800377e:	d004      	beq.n	800378a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	0018      	movs	r0, r3
 8003784:	f000 f9a0 	bl	8003ac8 <HAL_TIM_IC_CaptureCallback>
 8003788:	e007      	b.n	800379a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	0018      	movs	r0, r3
 800378e:	f7fc fd59 	bl	8000244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	0018      	movs	r0, r3
 8003796:	f000 f99f 	bl	8003ad8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	2201      	movs	r2, #1
 80037a8:	4013      	ands	r3, r2
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d10f      	bne.n	80037ce <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	2201      	movs	r2, #1
 80037b6:	4013      	ands	r3, r2
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d108      	bne.n	80037ce <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2202      	movs	r2, #2
 80037c2:	4252      	negs	r2, r2
 80037c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	0018      	movs	r0, r3
 80037ca:	f000 f975 	bl	8003ab8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	2280      	movs	r2, #128	; 0x80
 80037d6:	4013      	ands	r3, r2
 80037d8:	2b80      	cmp	r3, #128	; 0x80
 80037da:	d10f      	bne.n	80037fc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	2280      	movs	r2, #128	; 0x80
 80037e4:	4013      	ands	r3, r2
 80037e6:	2b80      	cmp	r3, #128	; 0x80
 80037e8:	d108      	bne.n	80037fc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2281      	movs	r2, #129	; 0x81
 80037f0:	4252      	negs	r2, r2
 80037f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	0018      	movs	r0, r3
 80037f8:	f000 fd7c 	bl	80042f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	2240      	movs	r2, #64	; 0x40
 8003804:	4013      	ands	r3, r2
 8003806:	2b40      	cmp	r3, #64	; 0x40
 8003808:	d10f      	bne.n	800382a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	2240      	movs	r2, #64	; 0x40
 8003812:	4013      	ands	r3, r2
 8003814:	2b40      	cmp	r3, #64	; 0x40
 8003816:	d108      	bne.n	800382a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2241      	movs	r2, #65	; 0x41
 800381e:	4252      	negs	r2, r2
 8003820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	0018      	movs	r0, r3
 8003826:	f000 f95f 	bl	8003ae8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	2220      	movs	r2, #32
 8003832:	4013      	ands	r3, r2
 8003834:	2b20      	cmp	r3, #32
 8003836:	d10f      	bne.n	8003858 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	2220      	movs	r2, #32
 8003840:	4013      	ands	r3, r2
 8003842:	2b20      	cmp	r3, #32
 8003844:	d108      	bne.n	8003858 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2221      	movs	r2, #33	; 0x21
 800384c:	4252      	negs	r2, r2
 800384e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	0018      	movs	r0, r3
 8003854:	f000 fd46 	bl	80042e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003858:	46c0      	nop			; (mov r8, r8)
 800385a:	46bd      	mov	sp, r7
 800385c:	b002      	add	sp, #8
 800385e:	bd80      	pop	{r7, pc}

08003860 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800386c:	2317      	movs	r3, #23
 800386e:	18fb      	adds	r3, r7, r3
 8003870:	2200      	movs	r2, #0
 8003872:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	223c      	movs	r2, #60	; 0x3c
 8003878:	5c9b      	ldrb	r3, [r3, r2]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d101      	bne.n	8003882 <HAL_TIM_OC_ConfigChannel+0x22>
 800387e:	2302      	movs	r3, #2
 8003880:	e042      	b.n	8003908 <HAL_TIM_OC_ConfigChannel+0xa8>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	223c      	movs	r2, #60	; 0x3c
 8003886:	2101      	movs	r1, #1
 8003888:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2b0c      	cmp	r3, #12
 800388e:	d027      	beq.n	80038e0 <HAL_TIM_OC_ConfigChannel+0x80>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b0c      	cmp	r3, #12
 8003894:	d82c      	bhi.n	80038f0 <HAL_TIM_OC_ConfigChannel+0x90>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2b08      	cmp	r3, #8
 800389a:	d019      	beq.n	80038d0 <HAL_TIM_OC_ConfigChannel+0x70>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b08      	cmp	r3, #8
 80038a0:	d826      	bhi.n	80038f0 <HAL_TIM_OC_ConfigChannel+0x90>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d003      	beq.n	80038b0 <HAL_TIM_OC_ConfigChannel+0x50>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b04      	cmp	r3, #4
 80038ac:	d008      	beq.n	80038c0 <HAL_TIM_OC_ConfigChannel+0x60>
 80038ae:	e01f      	b.n	80038f0 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	0011      	movs	r1, r2
 80038b8:	0018      	movs	r0, r3
 80038ba:	f000 f99d 	bl	8003bf8 <TIM_OC1_SetConfig>
      break;
 80038be:	e01c      	b.n	80038fa <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68ba      	ldr	r2, [r7, #8]
 80038c6:	0011      	movs	r1, r2
 80038c8:	0018      	movs	r0, r3
 80038ca:	f000 fa1d 	bl	8003d08 <TIM_OC2_SetConfig>
      break;
 80038ce:	e014      	b.n	80038fa <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68ba      	ldr	r2, [r7, #8]
 80038d6:	0011      	movs	r1, r2
 80038d8:	0018      	movs	r0, r3
 80038da:	f000 fa99 	bl	8003e10 <TIM_OC3_SetConfig>
      break;
 80038de:	e00c      	b.n	80038fa <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68ba      	ldr	r2, [r7, #8]
 80038e6:	0011      	movs	r1, r2
 80038e8:	0018      	movs	r0, r3
 80038ea:	f000 fb17 	bl	8003f1c <TIM_OC4_SetConfig>
      break;
 80038ee:	e004      	b.n	80038fa <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 80038f0:	2317      	movs	r3, #23
 80038f2:	18fb      	adds	r3, r7, r3
 80038f4:	2201      	movs	r2, #1
 80038f6:	701a      	strb	r2, [r3, #0]
      break;
 80038f8:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	223c      	movs	r2, #60	; 0x3c
 80038fe:	2100      	movs	r1, #0
 8003900:	5499      	strb	r1, [r3, r2]

  return status;
 8003902:	2317      	movs	r3, #23
 8003904:	18fb      	adds	r3, r7, r3
 8003906:	781b      	ldrb	r3, [r3, #0]
}
 8003908:	0018      	movs	r0, r3
 800390a:	46bd      	mov	sp, r7
 800390c:	b006      	add	sp, #24
 800390e:	bd80      	pop	{r7, pc}

08003910 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800391a:	230f      	movs	r3, #15
 800391c:	18fb      	adds	r3, r7, r3
 800391e:	2200      	movs	r2, #0
 8003920:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	223c      	movs	r2, #60	; 0x3c
 8003926:	5c9b      	ldrb	r3, [r3, r2]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d101      	bne.n	8003930 <HAL_TIM_ConfigClockSource+0x20>
 800392c:	2302      	movs	r3, #2
 800392e:	e0bc      	b.n	8003aaa <HAL_TIM_ConfigClockSource+0x19a>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	223c      	movs	r2, #60	; 0x3c
 8003934:	2101      	movs	r1, #1
 8003936:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	223d      	movs	r2, #61	; 0x3d
 800393c:	2102      	movs	r1, #2
 800393e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	2277      	movs	r2, #119	; 0x77
 800394c:	4393      	bics	r3, r2
 800394e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	4a58      	ldr	r2, [pc, #352]	; (8003ab4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003954:	4013      	ands	r3, r2
 8003956:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68ba      	ldr	r2, [r7, #8]
 800395e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2280      	movs	r2, #128	; 0x80
 8003966:	0192      	lsls	r2, r2, #6
 8003968:	4293      	cmp	r3, r2
 800396a:	d040      	beq.n	80039ee <HAL_TIM_ConfigClockSource+0xde>
 800396c:	2280      	movs	r2, #128	; 0x80
 800396e:	0192      	lsls	r2, r2, #6
 8003970:	4293      	cmp	r3, r2
 8003972:	d900      	bls.n	8003976 <HAL_TIM_ConfigClockSource+0x66>
 8003974:	e088      	b.n	8003a88 <HAL_TIM_ConfigClockSource+0x178>
 8003976:	2280      	movs	r2, #128	; 0x80
 8003978:	0152      	lsls	r2, r2, #5
 800397a:	4293      	cmp	r3, r2
 800397c:	d100      	bne.n	8003980 <HAL_TIM_ConfigClockSource+0x70>
 800397e:	e088      	b.n	8003a92 <HAL_TIM_ConfigClockSource+0x182>
 8003980:	2280      	movs	r2, #128	; 0x80
 8003982:	0152      	lsls	r2, r2, #5
 8003984:	4293      	cmp	r3, r2
 8003986:	d900      	bls.n	800398a <HAL_TIM_ConfigClockSource+0x7a>
 8003988:	e07e      	b.n	8003a88 <HAL_TIM_ConfigClockSource+0x178>
 800398a:	2b70      	cmp	r3, #112	; 0x70
 800398c:	d018      	beq.n	80039c0 <HAL_TIM_ConfigClockSource+0xb0>
 800398e:	d900      	bls.n	8003992 <HAL_TIM_ConfigClockSource+0x82>
 8003990:	e07a      	b.n	8003a88 <HAL_TIM_ConfigClockSource+0x178>
 8003992:	2b60      	cmp	r3, #96	; 0x60
 8003994:	d04f      	beq.n	8003a36 <HAL_TIM_ConfigClockSource+0x126>
 8003996:	d900      	bls.n	800399a <HAL_TIM_ConfigClockSource+0x8a>
 8003998:	e076      	b.n	8003a88 <HAL_TIM_ConfigClockSource+0x178>
 800399a:	2b50      	cmp	r3, #80	; 0x50
 800399c:	d03b      	beq.n	8003a16 <HAL_TIM_ConfigClockSource+0x106>
 800399e:	d900      	bls.n	80039a2 <HAL_TIM_ConfigClockSource+0x92>
 80039a0:	e072      	b.n	8003a88 <HAL_TIM_ConfigClockSource+0x178>
 80039a2:	2b40      	cmp	r3, #64	; 0x40
 80039a4:	d057      	beq.n	8003a56 <HAL_TIM_ConfigClockSource+0x146>
 80039a6:	d900      	bls.n	80039aa <HAL_TIM_ConfigClockSource+0x9a>
 80039a8:	e06e      	b.n	8003a88 <HAL_TIM_ConfigClockSource+0x178>
 80039aa:	2b30      	cmp	r3, #48	; 0x30
 80039ac:	d063      	beq.n	8003a76 <HAL_TIM_ConfigClockSource+0x166>
 80039ae:	d86b      	bhi.n	8003a88 <HAL_TIM_ConfigClockSource+0x178>
 80039b0:	2b20      	cmp	r3, #32
 80039b2:	d060      	beq.n	8003a76 <HAL_TIM_ConfigClockSource+0x166>
 80039b4:	d868      	bhi.n	8003a88 <HAL_TIM_ConfigClockSource+0x178>
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d05d      	beq.n	8003a76 <HAL_TIM_ConfigClockSource+0x166>
 80039ba:	2b10      	cmp	r3, #16
 80039bc:	d05b      	beq.n	8003a76 <HAL_TIM_ConfigClockSource+0x166>
 80039be:	e063      	b.n	8003a88 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6818      	ldr	r0, [r3, #0]
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	6899      	ldr	r1, [r3, #8]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	f000 fb88 	bl	80040e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	2277      	movs	r2, #119	; 0x77
 80039e0:	4313      	orrs	r3, r2
 80039e2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	609a      	str	r2, [r3, #8]
      break;
 80039ec:	e052      	b.n	8003a94 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6818      	ldr	r0, [r3, #0]
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	6899      	ldr	r1, [r3, #8]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685a      	ldr	r2, [r3, #4]
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	f000 fb71 	bl	80040e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	689a      	ldr	r2, [r3, #8]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2180      	movs	r1, #128	; 0x80
 8003a0e:	01c9      	lsls	r1, r1, #7
 8003a10:	430a      	orrs	r2, r1
 8003a12:	609a      	str	r2, [r3, #8]
      break;
 8003a14:	e03e      	b.n	8003a94 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6818      	ldr	r0, [r3, #0]
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	6859      	ldr	r1, [r3, #4]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	001a      	movs	r2, r3
 8003a24:	f000 fae4 	bl	8003ff0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2150      	movs	r1, #80	; 0x50
 8003a2e:	0018      	movs	r0, r3
 8003a30:	f000 fb3e 	bl	80040b0 <TIM_ITRx_SetConfig>
      break;
 8003a34:	e02e      	b.n	8003a94 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6818      	ldr	r0, [r3, #0]
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	6859      	ldr	r1, [r3, #4]
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	001a      	movs	r2, r3
 8003a44:	f000 fb02 	bl	800404c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2160      	movs	r1, #96	; 0x60
 8003a4e:	0018      	movs	r0, r3
 8003a50:	f000 fb2e 	bl	80040b0 <TIM_ITRx_SetConfig>
      break;
 8003a54:	e01e      	b.n	8003a94 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6818      	ldr	r0, [r3, #0]
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	6859      	ldr	r1, [r3, #4]
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	001a      	movs	r2, r3
 8003a64:	f000 fac4 	bl	8003ff0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2140      	movs	r1, #64	; 0x40
 8003a6e:	0018      	movs	r0, r3
 8003a70:	f000 fb1e 	bl	80040b0 <TIM_ITRx_SetConfig>
      break;
 8003a74:	e00e      	b.n	8003a94 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	0019      	movs	r1, r3
 8003a80:	0010      	movs	r0, r2
 8003a82:	f000 fb15 	bl	80040b0 <TIM_ITRx_SetConfig>
      break;
 8003a86:	e005      	b.n	8003a94 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003a88:	230f      	movs	r3, #15
 8003a8a:	18fb      	adds	r3, r7, r3
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	701a      	strb	r2, [r3, #0]
      break;
 8003a90:	e000      	b.n	8003a94 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003a92:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	223d      	movs	r2, #61	; 0x3d
 8003a98:	2101      	movs	r1, #1
 8003a9a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	223c      	movs	r2, #60	; 0x3c
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	5499      	strb	r1, [r3, r2]

  return status;
 8003aa4:	230f      	movs	r3, #15
 8003aa6:	18fb      	adds	r3, r7, r3
 8003aa8:	781b      	ldrb	r3, [r3, #0]
}
 8003aaa:	0018      	movs	r0, r3
 8003aac:	46bd      	mov	sp, r7
 8003aae:	b004      	add	sp, #16
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	46c0      	nop			; (mov r8, r8)
 8003ab4:	ffff00ff 	.word	0xffff00ff

08003ab8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003ac0:	46c0      	nop			; (mov r8, r8)
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	b002      	add	sp, #8
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ad0:	46c0      	nop			; (mov r8, r8)
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	b002      	add	sp, #8
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ae0:	46c0      	nop			; (mov r8, r8)
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	b002      	add	sp, #8
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003af0:	46c0      	nop			; (mov r8, r8)
 8003af2:	46bd      	mov	sp, r7
 8003af4:	b002      	add	sp, #8
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a34      	ldr	r2, [pc, #208]	; (8003bdc <TIM_Base_SetConfig+0xe4>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d008      	beq.n	8003b22 <TIM_Base_SetConfig+0x2a>
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	2380      	movs	r3, #128	; 0x80
 8003b14:	05db      	lsls	r3, r3, #23
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d003      	beq.n	8003b22 <TIM_Base_SetConfig+0x2a>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a30      	ldr	r2, [pc, #192]	; (8003be0 <TIM_Base_SetConfig+0xe8>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d108      	bne.n	8003b34 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2270      	movs	r2, #112	; 0x70
 8003b26:	4393      	bics	r3, r2
 8003b28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a29      	ldr	r2, [pc, #164]	; (8003bdc <TIM_Base_SetConfig+0xe4>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d018      	beq.n	8003b6e <TIM_Base_SetConfig+0x76>
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	2380      	movs	r3, #128	; 0x80
 8003b40:	05db      	lsls	r3, r3, #23
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d013      	beq.n	8003b6e <TIM_Base_SetConfig+0x76>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a25      	ldr	r2, [pc, #148]	; (8003be0 <TIM_Base_SetConfig+0xe8>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d00f      	beq.n	8003b6e <TIM_Base_SetConfig+0x76>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a24      	ldr	r2, [pc, #144]	; (8003be4 <TIM_Base_SetConfig+0xec>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d00b      	beq.n	8003b6e <TIM_Base_SetConfig+0x76>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a23      	ldr	r2, [pc, #140]	; (8003be8 <TIM_Base_SetConfig+0xf0>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d007      	beq.n	8003b6e <TIM_Base_SetConfig+0x76>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a22      	ldr	r2, [pc, #136]	; (8003bec <TIM_Base_SetConfig+0xf4>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d003      	beq.n	8003b6e <TIM_Base_SetConfig+0x76>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a21      	ldr	r2, [pc, #132]	; (8003bf0 <TIM_Base_SetConfig+0xf8>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d108      	bne.n	8003b80 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	4a20      	ldr	r2, [pc, #128]	; (8003bf4 <TIM_Base_SetConfig+0xfc>)
 8003b72:	4013      	ands	r3, r2
 8003b74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2280      	movs	r2, #128	; 0x80
 8003b84:	4393      	bics	r3, r2
 8003b86:	001a      	movs	r2, r3
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	695b      	ldr	r3, [r3, #20]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	689a      	ldr	r2, [r3, #8]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a0c      	ldr	r2, [pc, #48]	; (8003bdc <TIM_Base_SetConfig+0xe4>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d00b      	beq.n	8003bc6 <TIM_Base_SetConfig+0xce>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a0d      	ldr	r2, [pc, #52]	; (8003be8 <TIM_Base_SetConfig+0xf0>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d007      	beq.n	8003bc6 <TIM_Base_SetConfig+0xce>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a0c      	ldr	r2, [pc, #48]	; (8003bec <TIM_Base_SetConfig+0xf4>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d003      	beq.n	8003bc6 <TIM_Base_SetConfig+0xce>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a0b      	ldr	r2, [pc, #44]	; (8003bf0 <TIM_Base_SetConfig+0xf8>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d103      	bne.n	8003bce <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	691a      	ldr	r2, [r3, #16]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	615a      	str	r2, [r3, #20]
}
 8003bd4:	46c0      	nop			; (mov r8, r8)
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	b004      	add	sp, #16
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	40012c00 	.word	0x40012c00
 8003be0:	40000400 	.word	0x40000400
 8003be4:	40002000 	.word	0x40002000
 8003be8:	40014000 	.word	0x40014000
 8003bec:	40014400 	.word	0x40014400
 8003bf0:	40014800 	.word	0x40014800
 8003bf4:	fffffcff 	.word	0xfffffcff

08003bf8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b086      	sub	sp, #24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	2201      	movs	r2, #1
 8003c08:	4393      	bics	r3, r2
 8003c0a:	001a      	movs	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2270      	movs	r2, #112	; 0x70
 8003c26:	4393      	bics	r3, r2
 8003c28:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2203      	movs	r2, #3
 8003c2e:	4393      	bics	r3, r2
 8003c30:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	2202      	movs	r2, #2
 8003c40:	4393      	bics	r3, r2
 8003c42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a27      	ldr	r2, [pc, #156]	; (8003cf0 <TIM_OC1_SetConfig+0xf8>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d00b      	beq.n	8003c6e <TIM_OC1_SetConfig+0x76>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a26      	ldr	r2, [pc, #152]	; (8003cf4 <TIM_OC1_SetConfig+0xfc>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d007      	beq.n	8003c6e <TIM_OC1_SetConfig+0x76>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a25      	ldr	r2, [pc, #148]	; (8003cf8 <TIM_OC1_SetConfig+0x100>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d003      	beq.n	8003c6e <TIM_OC1_SetConfig+0x76>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a24      	ldr	r2, [pc, #144]	; (8003cfc <TIM_OC1_SetConfig+0x104>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d10c      	bne.n	8003c88 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	2208      	movs	r2, #8
 8003c72:	4393      	bics	r3, r2
 8003c74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	2204      	movs	r2, #4
 8003c84:	4393      	bics	r3, r2
 8003c86:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a19      	ldr	r2, [pc, #100]	; (8003cf0 <TIM_OC1_SetConfig+0xf8>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d00b      	beq.n	8003ca8 <TIM_OC1_SetConfig+0xb0>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a18      	ldr	r2, [pc, #96]	; (8003cf4 <TIM_OC1_SetConfig+0xfc>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d007      	beq.n	8003ca8 <TIM_OC1_SetConfig+0xb0>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a17      	ldr	r2, [pc, #92]	; (8003cf8 <TIM_OC1_SetConfig+0x100>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d003      	beq.n	8003ca8 <TIM_OC1_SetConfig+0xb0>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a16      	ldr	r2, [pc, #88]	; (8003cfc <TIM_OC1_SetConfig+0x104>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d111      	bne.n	8003ccc <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	4a15      	ldr	r2, [pc, #84]	; (8003d00 <TIM_OC1_SetConfig+0x108>)
 8003cac:	4013      	ands	r3, r2
 8003cae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	4a14      	ldr	r2, [pc, #80]	; (8003d04 <TIM_OC1_SetConfig+0x10c>)
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685a      	ldr	r2, [r3, #4]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	621a      	str	r2, [r3, #32]
}
 8003ce6:	46c0      	nop			; (mov r8, r8)
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	b006      	add	sp, #24
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	46c0      	nop			; (mov r8, r8)
 8003cf0:	40012c00 	.word	0x40012c00
 8003cf4:	40014000 	.word	0x40014000
 8003cf8:	40014400 	.word	0x40014400
 8003cfc:	40014800 	.word	0x40014800
 8003d00:	fffffeff 	.word	0xfffffeff
 8003d04:	fffffdff 	.word	0xfffffdff

08003d08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	2210      	movs	r2, #16
 8003d18:	4393      	bics	r3, r2
 8003d1a:	001a      	movs	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a1b      	ldr	r3, [r3, #32]
 8003d24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	4a2e      	ldr	r2, [pc, #184]	; (8003df0 <TIM_OC2_SetConfig+0xe8>)
 8003d36:	4013      	ands	r3, r2
 8003d38:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	4a2d      	ldr	r2, [pc, #180]	; (8003df4 <TIM_OC2_SetConfig+0xec>)
 8003d3e:	4013      	ands	r3, r2
 8003d40:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	021b      	lsls	r3, r3, #8
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	2220      	movs	r2, #32
 8003d52:	4393      	bics	r3, r2
 8003d54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	011b      	lsls	r3, r3, #4
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a24      	ldr	r2, [pc, #144]	; (8003df8 <TIM_OC2_SetConfig+0xf0>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d10d      	bne.n	8003d86 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	2280      	movs	r2, #128	; 0x80
 8003d6e:	4393      	bics	r3, r2
 8003d70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	011b      	lsls	r3, r3, #4
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	2240      	movs	r2, #64	; 0x40
 8003d82:	4393      	bics	r3, r2
 8003d84:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a1b      	ldr	r2, [pc, #108]	; (8003df8 <TIM_OC2_SetConfig+0xf0>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d00b      	beq.n	8003da6 <TIM_OC2_SetConfig+0x9e>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a1a      	ldr	r2, [pc, #104]	; (8003dfc <TIM_OC2_SetConfig+0xf4>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d007      	beq.n	8003da6 <TIM_OC2_SetConfig+0x9e>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a19      	ldr	r2, [pc, #100]	; (8003e00 <TIM_OC2_SetConfig+0xf8>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d003      	beq.n	8003da6 <TIM_OC2_SetConfig+0x9e>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a18      	ldr	r2, [pc, #96]	; (8003e04 <TIM_OC2_SetConfig+0xfc>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d113      	bne.n	8003dce <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	4a17      	ldr	r2, [pc, #92]	; (8003e08 <TIM_OC2_SetConfig+0x100>)
 8003daa:	4013      	ands	r3, r2
 8003dac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	4a16      	ldr	r2, [pc, #88]	; (8003e0c <TIM_OC2_SetConfig+0x104>)
 8003db2:	4013      	ands	r3, r2
 8003db4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	621a      	str	r2, [r3, #32]
}
 8003de8:	46c0      	nop			; (mov r8, r8)
 8003dea:	46bd      	mov	sp, r7
 8003dec:	b006      	add	sp, #24
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	ffff8fff 	.word	0xffff8fff
 8003df4:	fffffcff 	.word	0xfffffcff
 8003df8:	40012c00 	.word	0x40012c00
 8003dfc:	40014000 	.word	0x40014000
 8003e00:	40014400 	.word	0x40014400
 8003e04:	40014800 	.word	0x40014800
 8003e08:	fffffbff 	.word	0xfffffbff
 8003e0c:	fffff7ff 	.word	0xfffff7ff

08003e10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	4a35      	ldr	r2, [pc, #212]	; (8003ef4 <TIM_OC3_SetConfig+0xe4>)
 8003e20:	401a      	ands	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2270      	movs	r2, #112	; 0x70
 8003e3c:	4393      	bics	r3, r2
 8003e3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2203      	movs	r2, #3
 8003e44:	4393      	bics	r3, r2
 8003e46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	4a28      	ldr	r2, [pc, #160]	; (8003ef8 <TIM_OC3_SetConfig+0xe8>)
 8003e56:	4013      	ands	r3, r2
 8003e58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	021b      	lsls	r3, r3, #8
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a24      	ldr	r2, [pc, #144]	; (8003efc <TIM_OC3_SetConfig+0xec>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d10d      	bne.n	8003e8a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	4a23      	ldr	r2, [pc, #140]	; (8003f00 <TIM_OC3_SetConfig+0xf0>)
 8003e72:	4013      	ands	r3, r2
 8003e74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	021b      	lsls	r3, r3, #8
 8003e7c:	697a      	ldr	r2, [r7, #20]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	4a1f      	ldr	r2, [pc, #124]	; (8003f04 <TIM_OC3_SetConfig+0xf4>)
 8003e86:	4013      	ands	r3, r2
 8003e88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a1b      	ldr	r2, [pc, #108]	; (8003efc <TIM_OC3_SetConfig+0xec>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d00b      	beq.n	8003eaa <TIM_OC3_SetConfig+0x9a>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a1c      	ldr	r2, [pc, #112]	; (8003f08 <TIM_OC3_SetConfig+0xf8>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d007      	beq.n	8003eaa <TIM_OC3_SetConfig+0x9a>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a1b      	ldr	r2, [pc, #108]	; (8003f0c <TIM_OC3_SetConfig+0xfc>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d003      	beq.n	8003eaa <TIM_OC3_SetConfig+0x9a>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a1a      	ldr	r2, [pc, #104]	; (8003f10 <TIM_OC3_SetConfig+0x100>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d113      	bne.n	8003ed2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	4a19      	ldr	r2, [pc, #100]	; (8003f14 <TIM_OC3_SetConfig+0x104>)
 8003eae:	4013      	ands	r3, r2
 8003eb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	4a18      	ldr	r2, [pc, #96]	; (8003f18 <TIM_OC3_SetConfig+0x108>)
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	011b      	lsls	r3, r3, #4
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	011b      	lsls	r3, r3, #4
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685a      	ldr	r2, [r3, #4]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	621a      	str	r2, [r3, #32]
}
 8003eec:	46c0      	nop			; (mov r8, r8)
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	b006      	add	sp, #24
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	fffffeff 	.word	0xfffffeff
 8003ef8:	fffffdff 	.word	0xfffffdff
 8003efc:	40012c00 	.word	0x40012c00
 8003f00:	fffff7ff 	.word	0xfffff7ff
 8003f04:	fffffbff 	.word	0xfffffbff
 8003f08:	40014000 	.word	0x40014000
 8003f0c:	40014400 	.word	0x40014400
 8003f10:	40014800 	.word	0x40014800
 8003f14:	ffffefff 	.word	0xffffefff
 8003f18:	ffffdfff 	.word	0xffffdfff

08003f1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	4a28      	ldr	r2, [pc, #160]	; (8003fcc <TIM_OC4_SetConfig+0xb0>)
 8003f2c:	401a      	ands	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	4a22      	ldr	r2, [pc, #136]	; (8003fd0 <TIM_OC4_SetConfig+0xb4>)
 8003f48:	4013      	ands	r3, r2
 8003f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	4a21      	ldr	r2, [pc, #132]	; (8003fd4 <TIM_OC4_SetConfig+0xb8>)
 8003f50:	4013      	ands	r3, r2
 8003f52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	021b      	lsls	r3, r3, #8
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	4a1d      	ldr	r2, [pc, #116]	; (8003fd8 <TIM_OC4_SetConfig+0xbc>)
 8003f64:	4013      	ands	r3, r2
 8003f66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	031b      	lsls	r3, r3, #12
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a19      	ldr	r2, [pc, #100]	; (8003fdc <TIM_OC4_SetConfig+0xc0>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d00b      	beq.n	8003f94 <TIM_OC4_SetConfig+0x78>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a18      	ldr	r2, [pc, #96]	; (8003fe0 <TIM_OC4_SetConfig+0xc4>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d007      	beq.n	8003f94 <TIM_OC4_SetConfig+0x78>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a17      	ldr	r2, [pc, #92]	; (8003fe4 <TIM_OC4_SetConfig+0xc8>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d003      	beq.n	8003f94 <TIM_OC4_SetConfig+0x78>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a16      	ldr	r2, [pc, #88]	; (8003fe8 <TIM_OC4_SetConfig+0xcc>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d109      	bne.n	8003fa8 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	4a15      	ldr	r2, [pc, #84]	; (8003fec <TIM_OC4_SetConfig+0xd0>)
 8003f98:	4013      	ands	r3, r2
 8003f9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	019b      	lsls	r3, r3, #6
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685a      	ldr	r2, [r3, #4]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	621a      	str	r2, [r3, #32]
}
 8003fc2:	46c0      	nop			; (mov r8, r8)
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	b006      	add	sp, #24
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	46c0      	nop			; (mov r8, r8)
 8003fcc:	ffffefff 	.word	0xffffefff
 8003fd0:	ffff8fff 	.word	0xffff8fff
 8003fd4:	fffffcff 	.word	0xfffffcff
 8003fd8:	ffffdfff 	.word	0xffffdfff
 8003fdc:	40012c00 	.word	0x40012c00
 8003fe0:	40014000 	.word	0x40014000
 8003fe4:	40014400 	.word	0x40014400
 8003fe8:	40014800 	.word	0x40014800
 8003fec:	ffffbfff 	.word	0xffffbfff

08003ff0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b086      	sub	sp, #24
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6a1b      	ldr	r3, [r3, #32]
 8004000:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	2201      	movs	r2, #1
 8004008:	4393      	bics	r3, r2
 800400a:	001a      	movs	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	22f0      	movs	r2, #240	; 0xf0
 800401a:	4393      	bics	r3, r2
 800401c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	011b      	lsls	r3, r3, #4
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	4313      	orrs	r3, r2
 8004026:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	220a      	movs	r2, #10
 800402c:	4393      	bics	r3, r2
 800402e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	4313      	orrs	r3, r2
 8004036:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	697a      	ldr	r2, [r7, #20]
 8004042:	621a      	str	r2, [r3, #32]
}
 8004044:	46c0      	nop			; (mov r8, r8)
 8004046:	46bd      	mov	sp, r7
 8004048:	b006      	add	sp, #24
 800404a:	bd80      	pop	{r7, pc}

0800404c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	2210      	movs	r2, #16
 800405e:	4393      	bics	r3, r2
 8004060:	001a      	movs	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	4a0d      	ldr	r2, [pc, #52]	; (80040ac <TIM_TI2_ConfigInputStage+0x60>)
 8004076:	4013      	ands	r3, r2
 8004078:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	031b      	lsls	r3, r3, #12
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	4313      	orrs	r3, r2
 8004082:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	22a0      	movs	r2, #160	; 0xa0
 8004088:	4393      	bics	r3, r2
 800408a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	011b      	lsls	r3, r3, #4
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	4313      	orrs	r3, r2
 8004094:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	621a      	str	r2, [r3, #32]
}
 80040a2:	46c0      	nop			; (mov r8, r8)
 80040a4:	46bd      	mov	sp, r7
 80040a6:	b006      	add	sp, #24
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	46c0      	nop			; (mov r8, r8)
 80040ac:	ffff0fff 	.word	0xffff0fff

080040b0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2270      	movs	r2, #112	; 0x70
 80040c4:	4393      	bics	r3, r2
 80040c6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040c8:	683a      	ldr	r2, [r7, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	2207      	movs	r2, #7
 80040d0:	4313      	orrs	r3, r2
 80040d2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	609a      	str	r2, [r3, #8]
}
 80040da:	46c0      	nop			; (mov r8, r8)
 80040dc:	46bd      	mov	sp, r7
 80040de:	b004      	add	sp, #16
 80040e0:	bd80      	pop	{r7, pc}
	...

080040e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
 80040f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	4a09      	ldr	r2, [pc, #36]	; (8004120 <TIM_ETR_SetConfig+0x3c>)
 80040fc:	4013      	ands	r3, r2
 80040fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	021a      	lsls	r2, r3, #8
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	431a      	orrs	r2, r3
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	4313      	orrs	r3, r2
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	4313      	orrs	r3, r2
 8004110:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	609a      	str	r2, [r3, #8]
}
 8004118:	46c0      	nop			; (mov r8, r8)
 800411a:	46bd      	mov	sp, r7
 800411c:	b006      	add	sp, #24
 800411e:	bd80      	pop	{r7, pc}
 8004120:	ffff00ff 	.word	0xffff00ff

08004124 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	221f      	movs	r2, #31
 8004134:	4013      	ands	r3, r2
 8004136:	2201      	movs	r2, #1
 8004138:	409a      	lsls	r2, r3
 800413a:	0013      	movs	r3, r2
 800413c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	43d2      	mvns	r2, r2
 8004146:	401a      	ands	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6a1a      	ldr	r2, [r3, #32]
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	211f      	movs	r1, #31
 8004154:	400b      	ands	r3, r1
 8004156:	6879      	ldr	r1, [r7, #4]
 8004158:	4099      	lsls	r1, r3
 800415a:	000b      	movs	r3, r1
 800415c:	431a      	orrs	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	621a      	str	r2, [r3, #32]
}
 8004162:	46c0      	nop			; (mov r8, r8)
 8004164:	46bd      	mov	sp, r7
 8004166:	b006      	add	sp, #24
 8004168:	bd80      	pop	{r7, pc}
	...

0800416c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	223c      	movs	r2, #60	; 0x3c
 800417a:	5c9b      	ldrb	r3, [r3, r2]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d101      	bne.n	8004184 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004180:	2302      	movs	r3, #2
 8004182:	e047      	b.n	8004214 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	223c      	movs	r2, #60	; 0x3c
 8004188:	2101      	movs	r1, #1
 800418a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	223d      	movs	r2, #61	; 0x3d
 8004190:	2102      	movs	r1, #2
 8004192:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2270      	movs	r2, #112	; 0x70
 80041a8:	4393      	bics	r3, r2
 80041aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a16      	ldr	r2, [pc, #88]	; (800421c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d00f      	beq.n	80041e8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	2380      	movs	r3, #128	; 0x80
 80041ce:	05db      	lsls	r3, r3, #23
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d009      	beq.n	80041e8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a11      	ldr	r2, [pc, #68]	; (8004220 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d004      	beq.n	80041e8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a10      	ldr	r2, [pc, #64]	; (8004224 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d10c      	bne.n	8004202 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	2280      	movs	r2, #128	; 0x80
 80041ec:	4393      	bics	r3, r2
 80041ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	68ba      	ldr	r2, [r7, #8]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68ba      	ldr	r2, [r7, #8]
 8004200:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	223d      	movs	r2, #61	; 0x3d
 8004206:	2101      	movs	r1, #1
 8004208:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	223c      	movs	r2, #60	; 0x3c
 800420e:	2100      	movs	r1, #0
 8004210:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	0018      	movs	r0, r3
 8004216:	46bd      	mov	sp, r7
 8004218:	b004      	add	sp, #16
 800421a:	bd80      	pop	{r7, pc}
 800421c:	40012c00 	.word	0x40012c00
 8004220:	40000400 	.word	0x40000400
 8004224:	40014000 	.word	0x40014000

08004228 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004232:	2300      	movs	r3, #0
 8004234:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	223c      	movs	r2, #60	; 0x3c
 800423a:	5c9b      	ldrb	r3, [r3, r2]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d101      	bne.n	8004244 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004240:	2302      	movs	r3, #2
 8004242:	e03e      	b.n	80042c2 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	223c      	movs	r2, #60	; 0x3c
 8004248:	2101      	movs	r1, #1
 800424a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	22ff      	movs	r2, #255	; 0xff
 8004250:	4393      	bics	r3, r2
 8004252:	001a      	movs	r2, r3
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	4313      	orrs	r3, r2
 800425a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	4a1b      	ldr	r2, [pc, #108]	; (80042cc <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8004260:	401a      	ands	r2, r3
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	4313      	orrs	r3, r2
 8004268:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	4a18      	ldr	r2, [pc, #96]	; (80042d0 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800426e:	401a      	ands	r2, r3
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	4313      	orrs	r3, r2
 8004276:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	4a16      	ldr	r2, [pc, #88]	; (80042d4 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 800427c:	401a      	ands	r2, r3
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4313      	orrs	r3, r2
 8004284:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	4a13      	ldr	r2, [pc, #76]	; (80042d8 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800428a:	401a      	ands	r2, r3
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	4313      	orrs	r3, r2
 8004292:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	4a11      	ldr	r2, [pc, #68]	; (80042dc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8004298:	401a      	ands	r2, r3
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	4313      	orrs	r3, r2
 80042a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	4a0e      	ldr	r2, [pc, #56]	; (80042e0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80042a6:	401a      	ands	r2, r3
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	69db      	ldr	r3, [r3, #28]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	223c      	movs	r2, #60	; 0x3c
 80042bc:	2100      	movs	r1, #0
 80042be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	0018      	movs	r0, r3
 80042c4:	46bd      	mov	sp, r7
 80042c6:	b004      	add	sp, #16
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	46c0      	nop			; (mov r8, r8)
 80042cc:	fffffcff 	.word	0xfffffcff
 80042d0:	fffffbff 	.word	0xfffffbff
 80042d4:	fffff7ff 	.word	0xfffff7ff
 80042d8:	ffffefff 	.word	0xffffefff
 80042dc:	ffffdfff 	.word	0xffffdfff
 80042e0:	ffffbfff 	.word	0xffffbfff

080042e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042ec:	46c0      	nop			; (mov r8, r8)
 80042ee:	46bd      	mov	sp, r7
 80042f0:	b002      	add	sp, #8
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042fc:	46c0      	nop			; (mov r8, r8)
 80042fe:	46bd      	mov	sp, r7
 8004300:	b002      	add	sp, #8
 8004302:	bd80      	pop	{r7, pc}

08004304 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e044      	b.n	80043a0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800431a:	2b00      	cmp	r3, #0
 800431c:	d107      	bne.n	800432e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2274      	movs	r2, #116	; 0x74
 8004322:	2100      	movs	r1, #0
 8004324:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	0018      	movs	r0, r3
 800432a:	f7fd f853 	bl	80013d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2224      	movs	r2, #36	; 0x24
 8004332:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2101      	movs	r1, #1
 8004340:	438a      	bics	r2, r1
 8004342:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	0018      	movs	r0, r3
 8004348:	f000 fc00 	bl	8004b4c <UART_SetConfig>
 800434c:	0003      	movs	r3, r0
 800434e:	2b01      	cmp	r3, #1
 8004350:	d101      	bne.n	8004356 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e024      	b.n	80043a0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435a:	2b00      	cmp	r3, #0
 800435c:	d003      	beq.n	8004366 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	0018      	movs	r0, r3
 8004362:	f000 fd33 	bl	8004dcc <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	685a      	ldr	r2, [r3, #4]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	490d      	ldr	r1, [pc, #52]	; (80043a8 <HAL_UART_Init+0xa4>)
 8004372:	400a      	ands	r2, r1
 8004374:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	689a      	ldr	r2, [r3, #8]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	212a      	movs	r1, #42	; 0x2a
 8004382:	438a      	bics	r2, r1
 8004384:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2101      	movs	r1, #1
 8004392:	430a      	orrs	r2, r1
 8004394:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	0018      	movs	r0, r3
 800439a:	f000 fdcb 	bl	8004f34 <UART_CheckIdleState>
 800439e:	0003      	movs	r3, r0
}
 80043a0:	0018      	movs	r0, r3
 80043a2:	46bd      	mov	sp, r7
 80043a4:	b002      	add	sp, #8
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	ffffb7ff 	.word	0xffffb7ff

080043ac <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b08a      	sub	sp, #40	; 0x28
 80043b0:	af02      	add	r7, sp, #8
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	603b      	str	r3, [r7, #0]
 80043b8:	1dbb      	adds	r3, r7, #6
 80043ba:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043c0:	2b20      	cmp	r3, #32
 80043c2:	d000      	beq.n	80043c6 <HAL_UART_Receive+0x1a>
 80043c4:	e0c6      	b.n	8004554 <HAL_UART_Receive+0x1a8>
  {
    if ((pData == NULL) || (Size == 0U))
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d003      	beq.n	80043d4 <HAL_UART_Receive+0x28>
 80043cc:	1dbb      	adds	r3, r7, #6
 80043ce:	881b      	ldrh	r3, [r3, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d101      	bne.n	80043d8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e0be      	b.n	8004556 <HAL_UART_Receive+0x1aa>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	689a      	ldr	r2, [r3, #8]
 80043dc:	2380      	movs	r3, #128	; 0x80
 80043de:	015b      	lsls	r3, r3, #5
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d109      	bne.n	80043f8 <HAL_UART_Receive+0x4c>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d105      	bne.n	80043f8 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	2201      	movs	r2, #1
 80043f0:	4013      	ands	r3, r2
 80043f2:	d001      	beq.n	80043f8 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e0ae      	b.n	8004556 <HAL_UART_Receive+0x1aa>
      }
    }

    __HAL_LOCK(huart);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2274      	movs	r2, #116	; 0x74
 80043fc:	5c9b      	ldrb	r3, [r3, r2]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d101      	bne.n	8004406 <HAL_UART_Receive+0x5a>
 8004402:	2302      	movs	r3, #2
 8004404:	e0a7      	b.n	8004556 <HAL_UART_Receive+0x1aa>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2274      	movs	r2, #116	; 0x74
 800440a:	2101      	movs	r1, #1
 800440c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2280      	movs	r2, #128	; 0x80
 8004412:	2100      	movs	r1, #0
 8004414:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2222      	movs	r2, #34	; 0x22
 800441a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004422:	f7fd f90b 	bl	800163c <HAL_GetTick>
 8004426:	0003      	movs	r3, r0
 8004428:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	1dba      	adds	r2, r7, #6
 800442e:	2158      	movs	r1, #88	; 0x58
 8004430:	8812      	ldrh	r2, [r2, #0]
 8004432:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	1dba      	adds	r2, r7, #6
 8004438:	215a      	movs	r1, #90	; 0x5a
 800443a:	8812      	ldrh	r2, [r2, #0]
 800443c:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	689a      	ldr	r2, [r3, #8]
 8004442:	2380      	movs	r3, #128	; 0x80
 8004444:	015b      	lsls	r3, r3, #5
 8004446:	429a      	cmp	r2, r3
 8004448:	d10d      	bne.n	8004466 <HAL_UART_Receive+0xba>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d104      	bne.n	800445c <HAL_UART_Receive+0xb0>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	225c      	movs	r2, #92	; 0x5c
 8004456:	4942      	ldr	r1, [pc, #264]	; (8004560 <HAL_UART_Receive+0x1b4>)
 8004458:	5299      	strh	r1, [r3, r2]
 800445a:	e01a      	b.n	8004492 <HAL_UART_Receive+0xe6>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	225c      	movs	r2, #92	; 0x5c
 8004460:	21ff      	movs	r1, #255	; 0xff
 8004462:	5299      	strh	r1, [r3, r2]
 8004464:	e015      	b.n	8004492 <HAL_UART_Receive+0xe6>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10d      	bne.n	800448a <HAL_UART_Receive+0xde>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d104      	bne.n	8004480 <HAL_UART_Receive+0xd4>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	225c      	movs	r2, #92	; 0x5c
 800447a:	21ff      	movs	r1, #255	; 0xff
 800447c:	5299      	strh	r1, [r3, r2]
 800447e:	e008      	b.n	8004492 <HAL_UART_Receive+0xe6>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	225c      	movs	r2, #92	; 0x5c
 8004484:	217f      	movs	r1, #127	; 0x7f
 8004486:	5299      	strh	r1, [r3, r2]
 8004488:	e003      	b.n	8004492 <HAL_UART_Receive+0xe6>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	225c      	movs	r2, #92	; 0x5c
 800448e:	2100      	movs	r1, #0
 8004490:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8004492:	2312      	movs	r3, #18
 8004494:	18fb      	adds	r3, r7, r3
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	215c      	movs	r1, #92	; 0x5c
 800449a:	5a52      	ldrh	r2, [r2, r1]
 800449c:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	689a      	ldr	r2, [r3, #8]
 80044a2:	2380      	movs	r3, #128	; 0x80
 80044a4:	015b      	lsls	r3, r3, #5
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d108      	bne.n	80044bc <HAL_UART_Receive+0x110>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d104      	bne.n	80044bc <HAL_UART_Receive+0x110>
    {
      pdata8bits  = NULL;
 80044b2:	2300      	movs	r3, #0
 80044b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	61bb      	str	r3, [r7, #24]
 80044ba:	e003      	b.n	80044c4 <HAL_UART_Receive+0x118>
    }
    else
    {
      pdata8bits  = pData;
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044c0:	2300      	movs	r3, #0
 80044c2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2274      	movs	r2, #116	; 0x74
 80044c8:	2100      	movs	r1, #0
 80044ca:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80044cc:	e037      	b.n	800453e <HAL_UART_Receive+0x192>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	9300      	str	r3, [sp, #0]
 80044d6:	0013      	movs	r3, r2
 80044d8:	2200      	movs	r2, #0
 80044da:	2120      	movs	r1, #32
 80044dc:	f000 fd72 	bl	8004fc4 <UART_WaitOnFlagUntilTimeout>
 80044e0:	1e03      	subs	r3, r0, #0
 80044e2:	d001      	beq.n	80044e8 <HAL_UART_Receive+0x13c>
      {
        return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e036      	b.n	8004556 <HAL_UART_Receive+0x1aa>
      }
      if (pdata8bits == NULL)
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10e      	bne.n	800450c <HAL_UART_Receive+0x160>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	2212      	movs	r2, #18
 80044f8:	18ba      	adds	r2, r7, r2
 80044fa:	8812      	ldrh	r2, [r2, #0]
 80044fc:	4013      	ands	r3, r2
 80044fe:	b29a      	uxth	r2, r3
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	3302      	adds	r3, #2
 8004508:	61bb      	str	r3, [r7, #24]
 800450a:	e00f      	b.n	800452c <HAL_UART_Receive+0x180>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004512:	b29b      	uxth	r3, r3
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2212      	movs	r2, #18
 8004518:	18ba      	adds	r2, r7, r2
 800451a:	8812      	ldrh	r2, [r2, #0]
 800451c:	b2d2      	uxtb	r2, r2
 800451e:	4013      	ands	r3, r2
 8004520:	b2da      	uxtb	r2, r3
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	3301      	adds	r3, #1
 800452a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	225a      	movs	r2, #90	; 0x5a
 8004530:	5a9b      	ldrh	r3, [r3, r2]
 8004532:	b29b      	uxth	r3, r3
 8004534:	3b01      	subs	r3, #1
 8004536:	b299      	uxth	r1, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	225a      	movs	r2, #90	; 0x5a
 800453c:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	225a      	movs	r2, #90	; 0x5a
 8004542:	5a9b      	ldrh	r3, [r3, r2]
 8004544:	b29b      	uxth	r3, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1c1      	bne.n	80044ce <HAL_UART_Receive+0x122>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2220      	movs	r2, #32
 800454e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004550:	2300      	movs	r3, #0
 8004552:	e000      	b.n	8004556 <HAL_UART_Receive+0x1aa>
  }
  else
  {
    return HAL_BUSY;
 8004554:	2302      	movs	r3, #2
  }
}
 8004556:	0018      	movs	r0, r3
 8004558:	46bd      	mov	sp, r7
 800455a:	b008      	add	sp, #32
 800455c:	bd80      	pop	{r7, pc}
 800455e:	46c0      	nop			; (mov r8, r8)
 8004560:	000001ff 	.word	0x000001ff

08004564 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004564:	b590      	push	{r4, r7, lr}
 8004566:	b0ab      	sub	sp, #172	; 0xac
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	69db      	ldr	r3, [r3, #28]
 8004572:	22a4      	movs	r2, #164	; 0xa4
 8004574:	18b9      	adds	r1, r7, r2
 8004576:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	20a0      	movs	r0, #160	; 0xa0
 8004580:	1839      	adds	r1, r7, r0
 8004582:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	219c      	movs	r1, #156	; 0x9c
 800458c:	1879      	adds	r1, r7, r1
 800458e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004590:	0011      	movs	r1, r2
 8004592:	18bb      	adds	r3, r7, r2
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a99      	ldr	r2, [pc, #612]	; (80047fc <HAL_UART_IRQHandler+0x298>)
 8004598:	4013      	ands	r3, r2
 800459a:	2298      	movs	r2, #152	; 0x98
 800459c:	18bc      	adds	r4, r7, r2
 800459e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80045a0:	18bb      	adds	r3, r7, r2
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d114      	bne.n	80045d2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80045a8:	187b      	adds	r3, r7, r1
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2220      	movs	r2, #32
 80045ae:	4013      	ands	r3, r2
 80045b0:	d00f      	beq.n	80045d2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80045b2:	183b      	adds	r3, r7, r0
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2220      	movs	r2, #32
 80045b8:	4013      	ands	r3, r2
 80045ba:	d00a      	beq.n	80045d2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d100      	bne.n	80045c6 <HAL_UART_IRQHandler+0x62>
 80045c4:	e296      	b.n	8004af4 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	0010      	movs	r0, r2
 80045ce:	4798      	blx	r3
      }
      return;
 80045d0:	e290      	b.n	8004af4 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80045d2:	2398      	movs	r3, #152	; 0x98
 80045d4:	18fb      	adds	r3, r7, r3
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d100      	bne.n	80045de <HAL_UART_IRQHandler+0x7a>
 80045dc:	e114      	b.n	8004808 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80045de:	239c      	movs	r3, #156	; 0x9c
 80045e0:	18fb      	adds	r3, r7, r3
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2201      	movs	r2, #1
 80045e6:	4013      	ands	r3, r2
 80045e8:	d106      	bne.n	80045f8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80045ea:	23a0      	movs	r3, #160	; 0xa0
 80045ec:	18fb      	adds	r3, r7, r3
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a83      	ldr	r2, [pc, #524]	; (8004800 <HAL_UART_IRQHandler+0x29c>)
 80045f2:	4013      	ands	r3, r2
 80045f4:	d100      	bne.n	80045f8 <HAL_UART_IRQHandler+0x94>
 80045f6:	e107      	b.n	8004808 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80045f8:	23a4      	movs	r3, #164	; 0xa4
 80045fa:	18fb      	adds	r3, r7, r3
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2201      	movs	r2, #1
 8004600:	4013      	ands	r3, r2
 8004602:	d012      	beq.n	800462a <HAL_UART_IRQHandler+0xc6>
 8004604:	23a0      	movs	r3, #160	; 0xa0
 8004606:	18fb      	adds	r3, r7, r3
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	2380      	movs	r3, #128	; 0x80
 800460c:	005b      	lsls	r3, r3, #1
 800460e:	4013      	ands	r3, r2
 8004610:	d00b      	beq.n	800462a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2201      	movs	r2, #1
 8004618:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2280      	movs	r2, #128	; 0x80
 800461e:	589b      	ldr	r3, [r3, r2]
 8004620:	2201      	movs	r2, #1
 8004622:	431a      	orrs	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2180      	movs	r1, #128	; 0x80
 8004628:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800462a:	23a4      	movs	r3, #164	; 0xa4
 800462c:	18fb      	adds	r3, r7, r3
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2202      	movs	r2, #2
 8004632:	4013      	ands	r3, r2
 8004634:	d011      	beq.n	800465a <HAL_UART_IRQHandler+0xf6>
 8004636:	239c      	movs	r3, #156	; 0x9c
 8004638:	18fb      	adds	r3, r7, r3
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2201      	movs	r2, #1
 800463e:	4013      	ands	r3, r2
 8004640:	d00b      	beq.n	800465a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2202      	movs	r2, #2
 8004648:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2280      	movs	r2, #128	; 0x80
 800464e:	589b      	ldr	r3, [r3, r2]
 8004650:	2204      	movs	r2, #4
 8004652:	431a      	orrs	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2180      	movs	r1, #128	; 0x80
 8004658:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800465a:	23a4      	movs	r3, #164	; 0xa4
 800465c:	18fb      	adds	r3, r7, r3
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2204      	movs	r2, #4
 8004662:	4013      	ands	r3, r2
 8004664:	d011      	beq.n	800468a <HAL_UART_IRQHandler+0x126>
 8004666:	239c      	movs	r3, #156	; 0x9c
 8004668:	18fb      	adds	r3, r7, r3
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2201      	movs	r2, #1
 800466e:	4013      	ands	r3, r2
 8004670:	d00b      	beq.n	800468a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2204      	movs	r2, #4
 8004678:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2280      	movs	r2, #128	; 0x80
 800467e:	589b      	ldr	r3, [r3, r2]
 8004680:	2202      	movs	r2, #2
 8004682:	431a      	orrs	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2180      	movs	r1, #128	; 0x80
 8004688:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800468a:	23a4      	movs	r3, #164	; 0xa4
 800468c:	18fb      	adds	r3, r7, r3
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2208      	movs	r2, #8
 8004692:	4013      	ands	r3, r2
 8004694:	d017      	beq.n	80046c6 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004696:	23a0      	movs	r3, #160	; 0xa0
 8004698:	18fb      	adds	r3, r7, r3
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2220      	movs	r2, #32
 800469e:	4013      	ands	r3, r2
 80046a0:	d105      	bne.n	80046ae <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80046a2:	239c      	movs	r3, #156	; 0x9c
 80046a4:	18fb      	adds	r3, r7, r3
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2201      	movs	r2, #1
 80046aa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80046ac:	d00b      	beq.n	80046c6 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2208      	movs	r2, #8
 80046b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2280      	movs	r2, #128	; 0x80
 80046ba:	589b      	ldr	r3, [r3, r2]
 80046bc:	2208      	movs	r2, #8
 80046be:	431a      	orrs	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2180      	movs	r1, #128	; 0x80
 80046c4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80046c6:	23a4      	movs	r3, #164	; 0xa4
 80046c8:	18fb      	adds	r3, r7, r3
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	2380      	movs	r3, #128	; 0x80
 80046ce:	011b      	lsls	r3, r3, #4
 80046d0:	4013      	ands	r3, r2
 80046d2:	d013      	beq.n	80046fc <HAL_UART_IRQHandler+0x198>
 80046d4:	23a0      	movs	r3, #160	; 0xa0
 80046d6:	18fb      	adds	r3, r7, r3
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	2380      	movs	r3, #128	; 0x80
 80046dc:	04db      	lsls	r3, r3, #19
 80046de:	4013      	ands	r3, r2
 80046e0:	d00c      	beq.n	80046fc <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2280      	movs	r2, #128	; 0x80
 80046e8:	0112      	lsls	r2, r2, #4
 80046ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2280      	movs	r2, #128	; 0x80
 80046f0:	589b      	ldr	r3, [r3, r2]
 80046f2:	2220      	movs	r2, #32
 80046f4:	431a      	orrs	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2180      	movs	r1, #128	; 0x80
 80046fa:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2280      	movs	r2, #128	; 0x80
 8004700:	589b      	ldr	r3, [r3, r2]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d100      	bne.n	8004708 <HAL_UART_IRQHandler+0x1a4>
 8004706:	e1f7      	b.n	8004af8 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004708:	23a4      	movs	r3, #164	; 0xa4
 800470a:	18fb      	adds	r3, r7, r3
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2220      	movs	r2, #32
 8004710:	4013      	ands	r3, r2
 8004712:	d00e      	beq.n	8004732 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004714:	23a0      	movs	r3, #160	; 0xa0
 8004716:	18fb      	adds	r3, r7, r3
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2220      	movs	r2, #32
 800471c:	4013      	ands	r3, r2
 800471e:	d008      	beq.n	8004732 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004724:	2b00      	cmp	r3, #0
 8004726:	d004      	beq.n	8004732 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	0010      	movs	r0, r2
 8004730:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2280      	movs	r2, #128	; 0x80
 8004736:	589b      	ldr	r3, [r3, r2]
 8004738:	2194      	movs	r1, #148	; 0x94
 800473a:	187a      	adds	r2, r7, r1
 800473c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	2240      	movs	r2, #64	; 0x40
 8004746:	4013      	ands	r3, r2
 8004748:	2b40      	cmp	r3, #64	; 0x40
 800474a:	d004      	beq.n	8004756 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800474c:	187b      	adds	r3, r7, r1
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2228      	movs	r2, #40	; 0x28
 8004752:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004754:	d047      	beq.n	80047e6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	0018      	movs	r0, r3
 800475a:	f000 fcf7 	bl	800514c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	2240      	movs	r2, #64	; 0x40
 8004766:	4013      	ands	r3, r2
 8004768:	2b40      	cmp	r3, #64	; 0x40
 800476a:	d137      	bne.n	80047dc <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800476c:	f3ef 8310 	mrs	r3, PRIMASK
 8004770:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004772:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004774:	2090      	movs	r0, #144	; 0x90
 8004776:	183a      	adds	r2, r7, r0
 8004778:	6013      	str	r3, [r2, #0]
 800477a:	2301      	movs	r3, #1
 800477c:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800477e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004780:	f383 8810 	msr	PRIMASK, r3
}
 8004784:	46c0      	nop			; (mov r8, r8)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	689a      	ldr	r2, [r3, #8]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2140      	movs	r1, #64	; 0x40
 8004792:	438a      	bics	r2, r1
 8004794:	609a      	str	r2, [r3, #8]
 8004796:	183b      	adds	r3, r7, r0
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800479c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800479e:	f383 8810 	msr	PRIMASK, r3
}
 80047a2:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d012      	beq.n	80047d2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b0:	4a14      	ldr	r2, [pc, #80]	; (8004804 <HAL_UART_IRQHandler+0x2a0>)
 80047b2:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b8:	0018      	movs	r0, r3
 80047ba:	f7fd fb9d 	bl	8001ef8 <HAL_DMA_Abort_IT>
 80047be:	1e03      	subs	r3, r0, #0
 80047c0:	d01a      	beq.n	80047f8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047cc:	0018      	movs	r0, r3
 80047ce:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047d0:	e012      	b.n	80047f8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	0018      	movs	r0, r3
 80047d6:	f000 f9a5 	bl	8004b24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047da:	e00d      	b.n	80047f8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	0018      	movs	r0, r3
 80047e0:	f000 f9a0 	bl	8004b24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047e4:	e008      	b.n	80047f8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	0018      	movs	r0, r3
 80047ea:	f000 f99b 	bl	8004b24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2280      	movs	r2, #128	; 0x80
 80047f2:	2100      	movs	r1, #0
 80047f4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80047f6:	e17f      	b.n	8004af8 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f8:	46c0      	nop			; (mov r8, r8)
    return;
 80047fa:	e17d      	b.n	8004af8 <HAL_UART_IRQHandler+0x594>
 80047fc:	0000080f 	.word	0x0000080f
 8004800:	04000120 	.word	0x04000120
 8004804:	08005211 	.word	0x08005211

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800480c:	2b01      	cmp	r3, #1
 800480e:	d000      	beq.n	8004812 <HAL_UART_IRQHandler+0x2ae>
 8004810:	e131      	b.n	8004a76 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004812:	23a4      	movs	r3, #164	; 0xa4
 8004814:	18fb      	adds	r3, r7, r3
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2210      	movs	r2, #16
 800481a:	4013      	ands	r3, r2
 800481c:	d100      	bne.n	8004820 <HAL_UART_IRQHandler+0x2bc>
 800481e:	e12a      	b.n	8004a76 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004820:	23a0      	movs	r3, #160	; 0xa0
 8004822:	18fb      	adds	r3, r7, r3
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2210      	movs	r2, #16
 8004828:	4013      	ands	r3, r2
 800482a:	d100      	bne.n	800482e <HAL_UART_IRQHandler+0x2ca>
 800482c:	e123      	b.n	8004a76 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2210      	movs	r2, #16
 8004834:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	2240      	movs	r2, #64	; 0x40
 800483e:	4013      	ands	r3, r2
 8004840:	2b40      	cmp	r3, #64	; 0x40
 8004842:	d000      	beq.n	8004846 <HAL_UART_IRQHandler+0x2e2>
 8004844:	e09b      	b.n	800497e <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	685a      	ldr	r2, [r3, #4]
 800484e:	217e      	movs	r1, #126	; 0x7e
 8004850:	187b      	adds	r3, r7, r1
 8004852:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004854:	187b      	adds	r3, r7, r1
 8004856:	881b      	ldrh	r3, [r3, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d100      	bne.n	800485e <HAL_UART_IRQHandler+0x2fa>
 800485c:	e14e      	b.n	8004afc <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2258      	movs	r2, #88	; 0x58
 8004862:	5a9b      	ldrh	r3, [r3, r2]
 8004864:	187a      	adds	r2, r7, r1
 8004866:	8812      	ldrh	r2, [r2, #0]
 8004868:	429a      	cmp	r2, r3
 800486a:	d300      	bcc.n	800486e <HAL_UART_IRQHandler+0x30a>
 800486c:	e146      	b.n	8004afc <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	187a      	adds	r2, r7, r1
 8004872:	215a      	movs	r1, #90	; 0x5a
 8004874:	8812      	ldrh	r2, [r2, #0]
 8004876:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	2b20      	cmp	r3, #32
 8004880:	d06e      	beq.n	8004960 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004882:	f3ef 8310 	mrs	r3, PRIMASK
 8004886:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800488a:	67bb      	str	r3, [r7, #120]	; 0x78
 800488c:	2301      	movs	r3, #1
 800488e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004892:	f383 8810 	msr	PRIMASK, r3
}
 8004896:	46c0      	nop			; (mov r8, r8)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	499a      	ldr	r1, [pc, #616]	; (8004b0c <HAL_UART_IRQHandler+0x5a8>)
 80048a4:	400a      	ands	r2, r1
 80048a6:	601a      	str	r2, [r3, #0]
 80048a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048aa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ae:	f383 8810 	msr	PRIMASK, r3
}
 80048b2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048b4:	f3ef 8310 	mrs	r3, PRIMASK
 80048b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80048ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048bc:	677b      	str	r3, [r7, #116]	; 0x74
 80048be:	2301      	movs	r3, #1
 80048c0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048c4:	f383 8810 	msr	PRIMASK, r3
}
 80048c8:	46c0      	nop			; (mov r8, r8)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	689a      	ldr	r2, [r3, #8]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2101      	movs	r1, #1
 80048d6:	438a      	bics	r2, r1
 80048d8:	609a      	str	r2, [r3, #8]
 80048da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048dc:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048e0:	f383 8810 	msr	PRIMASK, r3
}
 80048e4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048e6:	f3ef 8310 	mrs	r3, PRIMASK
 80048ea:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80048ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048ee:	673b      	str	r3, [r7, #112]	; 0x70
 80048f0:	2301      	movs	r3, #1
 80048f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048f6:	f383 8810 	msr	PRIMASK, r3
}
 80048fa:	46c0      	nop			; (mov r8, r8)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	689a      	ldr	r2, [r3, #8]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2140      	movs	r1, #64	; 0x40
 8004908:	438a      	bics	r2, r1
 800490a:	609a      	str	r2, [r3, #8]
 800490c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800490e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004910:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004912:	f383 8810 	msr	PRIMASK, r3
}
 8004916:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2220      	movs	r2, #32
 800491c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004924:	f3ef 8310 	mrs	r3, PRIMASK
 8004928:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800492a:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800492c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800492e:	2301      	movs	r3, #1
 8004930:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004932:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004934:	f383 8810 	msr	PRIMASK, r3
}
 8004938:	46c0      	nop			; (mov r8, r8)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2110      	movs	r1, #16
 8004946:	438a      	bics	r2, r1
 8004948:	601a      	str	r2, [r3, #0]
 800494a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800494c:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800494e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004950:	f383 8810 	msr	PRIMASK, r3
}
 8004954:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800495a:	0018      	movs	r0, r3
 800495c:	f7fd fa94 	bl	8001e88 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2258      	movs	r2, #88	; 0x58
 8004964:	5a9a      	ldrh	r2, [r3, r2]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	215a      	movs	r1, #90	; 0x5a
 800496a:	5a5b      	ldrh	r3, [r3, r1]
 800496c:	b29b      	uxth	r3, r3
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	b29a      	uxth	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	0011      	movs	r1, r2
 8004976:	0018      	movs	r0, r3
 8004978:	f000 f8dc 	bl	8004b34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800497c:	e0be      	b.n	8004afc <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2258      	movs	r2, #88	; 0x58
 8004982:	5a99      	ldrh	r1, [r3, r2]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	225a      	movs	r2, #90	; 0x5a
 8004988:	5a9b      	ldrh	r3, [r3, r2]
 800498a:	b29a      	uxth	r2, r3
 800498c:	208e      	movs	r0, #142	; 0x8e
 800498e:	183b      	adds	r3, r7, r0
 8004990:	1a8a      	subs	r2, r1, r2
 8004992:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	225a      	movs	r2, #90	; 0x5a
 8004998:	5a9b      	ldrh	r3, [r3, r2]
 800499a:	b29b      	uxth	r3, r3
 800499c:	2b00      	cmp	r3, #0
 800499e:	d100      	bne.n	80049a2 <HAL_UART_IRQHandler+0x43e>
 80049a0:	e0ae      	b.n	8004b00 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 80049a2:	183b      	adds	r3, r7, r0
 80049a4:	881b      	ldrh	r3, [r3, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d100      	bne.n	80049ac <HAL_UART_IRQHandler+0x448>
 80049aa:	e0a9      	b.n	8004b00 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049ac:	f3ef 8310 	mrs	r3, PRIMASK
 80049b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80049b2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049b4:	2488      	movs	r4, #136	; 0x88
 80049b6:	193a      	adds	r2, r7, r4
 80049b8:	6013      	str	r3, [r2, #0]
 80049ba:	2301      	movs	r3, #1
 80049bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	f383 8810 	msr	PRIMASK, r3
}
 80049c4:	46c0      	nop			; (mov r8, r8)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	494f      	ldr	r1, [pc, #316]	; (8004b10 <HAL_UART_IRQHandler+0x5ac>)
 80049d2:	400a      	ands	r2, r1
 80049d4:	601a      	str	r2, [r3, #0]
 80049d6:	193b      	adds	r3, r7, r4
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	f383 8810 	msr	PRIMASK, r3
}
 80049e2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049e4:	f3ef 8310 	mrs	r3, PRIMASK
 80049e8:	61bb      	str	r3, [r7, #24]
  return(result);
 80049ea:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ec:	2484      	movs	r4, #132	; 0x84
 80049ee:	193a      	adds	r2, r7, r4
 80049f0:	6013      	str	r3, [r2, #0]
 80049f2:	2301      	movs	r3, #1
 80049f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	f383 8810 	msr	PRIMASK, r3
}
 80049fc:	46c0      	nop			; (mov r8, r8)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689a      	ldr	r2, [r3, #8]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2101      	movs	r1, #1
 8004a0a:	438a      	bics	r2, r1
 8004a0c:	609a      	str	r2, [r3, #8]
 8004a0e:	193b      	adds	r3, r7, r4
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a14:	6a3b      	ldr	r3, [r7, #32]
 8004a16:	f383 8810 	msr	PRIMASK, r3
}
 8004a1a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2220      	movs	r2, #32
 8004a20:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a2e:	f3ef 8310 	mrs	r3, PRIMASK
 8004a32:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a36:	2480      	movs	r4, #128	; 0x80
 8004a38:	193a      	adds	r2, r7, r4
 8004a3a:	6013      	str	r3, [r2, #0]
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a42:	f383 8810 	msr	PRIMASK, r3
}
 8004a46:	46c0      	nop			; (mov r8, r8)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2110      	movs	r1, #16
 8004a54:	438a      	bics	r2, r1
 8004a56:	601a      	str	r2, [r3, #0]
 8004a58:	193b      	adds	r3, r7, r4
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a60:	f383 8810 	msr	PRIMASK, r3
}
 8004a64:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a66:	183b      	adds	r3, r7, r0
 8004a68:	881a      	ldrh	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	0011      	movs	r1, r2
 8004a6e:	0018      	movs	r0, r3
 8004a70:	f000 f860 	bl	8004b34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a74:	e044      	b.n	8004b00 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004a76:	23a4      	movs	r3, #164	; 0xa4
 8004a78:	18fb      	adds	r3, r7, r3
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	2380      	movs	r3, #128	; 0x80
 8004a7e:	035b      	lsls	r3, r3, #13
 8004a80:	4013      	ands	r3, r2
 8004a82:	d010      	beq.n	8004aa6 <HAL_UART_IRQHandler+0x542>
 8004a84:	239c      	movs	r3, #156	; 0x9c
 8004a86:	18fb      	adds	r3, r7, r3
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	2380      	movs	r3, #128	; 0x80
 8004a8c:	03db      	lsls	r3, r3, #15
 8004a8e:	4013      	ands	r3, r2
 8004a90:	d009      	beq.n	8004aa6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2280      	movs	r2, #128	; 0x80
 8004a98:	0352      	lsls	r2, r2, #13
 8004a9a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	0018      	movs	r0, r3
 8004aa0:	f000 fbf8 	bl	8005294 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004aa4:	e02f      	b.n	8004b06 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004aa6:	23a4      	movs	r3, #164	; 0xa4
 8004aa8:	18fb      	adds	r3, r7, r3
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2280      	movs	r2, #128	; 0x80
 8004aae:	4013      	ands	r3, r2
 8004ab0:	d00f      	beq.n	8004ad2 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004ab2:	23a0      	movs	r3, #160	; 0xa0
 8004ab4:	18fb      	adds	r3, r7, r3
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2280      	movs	r2, #128	; 0x80
 8004aba:	4013      	ands	r3, r2
 8004abc:	d009      	beq.n	8004ad2 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d01e      	beq.n	8004b04 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	0010      	movs	r0, r2
 8004ace:	4798      	blx	r3
    }
    return;
 8004ad0:	e018      	b.n	8004b04 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004ad2:	23a4      	movs	r3, #164	; 0xa4
 8004ad4:	18fb      	adds	r3, r7, r3
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2240      	movs	r2, #64	; 0x40
 8004ada:	4013      	ands	r3, r2
 8004adc:	d013      	beq.n	8004b06 <HAL_UART_IRQHandler+0x5a2>
 8004ade:	23a0      	movs	r3, #160	; 0xa0
 8004ae0:	18fb      	adds	r3, r7, r3
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2240      	movs	r2, #64	; 0x40
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	d00d      	beq.n	8004b06 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	0018      	movs	r0, r3
 8004aee:	f000 fba6 	bl	800523e <UART_EndTransmit_IT>
    return;
 8004af2:	e008      	b.n	8004b06 <HAL_UART_IRQHandler+0x5a2>
      return;
 8004af4:	46c0      	nop			; (mov r8, r8)
 8004af6:	e006      	b.n	8004b06 <HAL_UART_IRQHandler+0x5a2>
    return;
 8004af8:	46c0      	nop			; (mov r8, r8)
 8004afa:	e004      	b.n	8004b06 <HAL_UART_IRQHandler+0x5a2>
      return;
 8004afc:	46c0      	nop			; (mov r8, r8)
 8004afe:	e002      	b.n	8004b06 <HAL_UART_IRQHandler+0x5a2>
      return;
 8004b00:	46c0      	nop			; (mov r8, r8)
 8004b02:	e000      	b.n	8004b06 <HAL_UART_IRQHandler+0x5a2>
    return;
 8004b04:	46c0      	nop			; (mov r8, r8)
  }

}
 8004b06:	46bd      	mov	sp, r7
 8004b08:	b02b      	add	sp, #172	; 0xac
 8004b0a:	bd90      	pop	{r4, r7, pc}
 8004b0c:	fffffeff 	.word	0xfffffeff
 8004b10:	fffffedf 	.word	0xfffffedf

08004b14 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004b1c:	46c0      	nop			; (mov r8, r8)
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	b002      	add	sp, #8
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004b2c:	46c0      	nop			; (mov r8, r8)
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	b002      	add	sp, #8
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	000a      	movs	r2, r1
 8004b3e:	1cbb      	adds	r3, r7, #2
 8004b40:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b42:	46c0      	nop			; (mov r8, r8)
 8004b44:	46bd      	mov	sp, r7
 8004b46:	b002      	add	sp, #8
 8004b48:	bd80      	pop	{r7, pc}
	...

08004b4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b088      	sub	sp, #32
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b54:	231e      	movs	r3, #30
 8004b56:	18fb      	adds	r3, r7, r3
 8004b58:	2200      	movs	r2, #0
 8004b5a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689a      	ldr	r2, [r3, #8]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	431a      	orrs	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	431a      	orrs	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	69db      	ldr	r3, [r3, #28]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a8d      	ldr	r2, [pc, #564]	; (8004db0 <UART_SetConfig+0x264>)
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	0019      	movs	r1, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	697a      	ldr	r2, [r7, #20]
 8004b86:	430a      	orrs	r2, r1
 8004b88:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	4a88      	ldr	r2, [pc, #544]	; (8004db4 <UART_SetConfig+0x268>)
 8004b92:	4013      	ands	r3, r2
 8004b94:	0019      	movs	r1, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68da      	ldr	r2, [r3, #12]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a1b      	ldr	r3, [r3, #32]
 8004bac:	697a      	ldr	r2, [r7, #20]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	4a7f      	ldr	r2, [pc, #508]	; (8004db8 <UART_SetConfig+0x26c>)
 8004bba:	4013      	ands	r3, r2
 8004bbc:	0019      	movs	r1, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a7b      	ldr	r2, [pc, #492]	; (8004dbc <UART_SetConfig+0x270>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d127      	bne.n	8004c22 <UART_SetConfig+0xd6>
 8004bd2:	4b7b      	ldr	r3, [pc, #492]	; (8004dc0 <UART_SetConfig+0x274>)
 8004bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd6:	2203      	movs	r2, #3
 8004bd8:	4013      	ands	r3, r2
 8004bda:	2b03      	cmp	r3, #3
 8004bdc:	d00d      	beq.n	8004bfa <UART_SetConfig+0xae>
 8004bde:	d81b      	bhi.n	8004c18 <UART_SetConfig+0xcc>
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d014      	beq.n	8004c0e <UART_SetConfig+0xc2>
 8004be4:	d818      	bhi.n	8004c18 <UART_SetConfig+0xcc>
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d002      	beq.n	8004bf0 <UART_SetConfig+0xa4>
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d00a      	beq.n	8004c04 <UART_SetConfig+0xb8>
 8004bee:	e013      	b.n	8004c18 <UART_SetConfig+0xcc>
 8004bf0:	231f      	movs	r3, #31
 8004bf2:	18fb      	adds	r3, r7, r3
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	701a      	strb	r2, [r3, #0]
 8004bf8:	e021      	b.n	8004c3e <UART_SetConfig+0xf2>
 8004bfa:	231f      	movs	r3, #31
 8004bfc:	18fb      	adds	r3, r7, r3
 8004bfe:	2202      	movs	r2, #2
 8004c00:	701a      	strb	r2, [r3, #0]
 8004c02:	e01c      	b.n	8004c3e <UART_SetConfig+0xf2>
 8004c04:	231f      	movs	r3, #31
 8004c06:	18fb      	adds	r3, r7, r3
 8004c08:	2204      	movs	r2, #4
 8004c0a:	701a      	strb	r2, [r3, #0]
 8004c0c:	e017      	b.n	8004c3e <UART_SetConfig+0xf2>
 8004c0e:	231f      	movs	r3, #31
 8004c10:	18fb      	adds	r3, r7, r3
 8004c12:	2208      	movs	r2, #8
 8004c14:	701a      	strb	r2, [r3, #0]
 8004c16:	e012      	b.n	8004c3e <UART_SetConfig+0xf2>
 8004c18:	231f      	movs	r3, #31
 8004c1a:	18fb      	adds	r3, r7, r3
 8004c1c:	2210      	movs	r2, #16
 8004c1e:	701a      	strb	r2, [r3, #0]
 8004c20:	e00d      	b.n	8004c3e <UART_SetConfig+0xf2>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a67      	ldr	r2, [pc, #412]	; (8004dc4 <UART_SetConfig+0x278>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d104      	bne.n	8004c36 <UART_SetConfig+0xea>
 8004c2c:	231f      	movs	r3, #31
 8004c2e:	18fb      	adds	r3, r7, r3
 8004c30:	2200      	movs	r2, #0
 8004c32:	701a      	strb	r2, [r3, #0]
 8004c34:	e003      	b.n	8004c3e <UART_SetConfig+0xf2>
 8004c36:	231f      	movs	r3, #31
 8004c38:	18fb      	adds	r3, r7, r3
 8004c3a:	2210      	movs	r2, #16
 8004c3c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	69da      	ldr	r2, [r3, #28]
 8004c42:	2380      	movs	r3, #128	; 0x80
 8004c44:	021b      	lsls	r3, r3, #8
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d15d      	bne.n	8004d06 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8004c4a:	231f      	movs	r3, #31
 8004c4c:	18fb      	adds	r3, r7, r3
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	2b08      	cmp	r3, #8
 8004c52:	d015      	beq.n	8004c80 <UART_SetConfig+0x134>
 8004c54:	dc18      	bgt.n	8004c88 <UART_SetConfig+0x13c>
 8004c56:	2b04      	cmp	r3, #4
 8004c58:	d00d      	beq.n	8004c76 <UART_SetConfig+0x12a>
 8004c5a:	dc15      	bgt.n	8004c88 <UART_SetConfig+0x13c>
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d002      	beq.n	8004c66 <UART_SetConfig+0x11a>
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d005      	beq.n	8004c70 <UART_SetConfig+0x124>
 8004c64:	e010      	b.n	8004c88 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c66:	f7fe f991 	bl	8002f8c <HAL_RCC_GetPCLK1Freq>
 8004c6a:	0003      	movs	r3, r0
 8004c6c:	61bb      	str	r3, [r7, #24]
        break;
 8004c6e:	e012      	b.n	8004c96 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c70:	4b55      	ldr	r3, [pc, #340]	; (8004dc8 <UART_SetConfig+0x27c>)
 8004c72:	61bb      	str	r3, [r7, #24]
        break;
 8004c74:	e00f      	b.n	8004c96 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c76:	f7fe f91b 	bl	8002eb0 <HAL_RCC_GetSysClockFreq>
 8004c7a:	0003      	movs	r3, r0
 8004c7c:	61bb      	str	r3, [r7, #24]
        break;
 8004c7e:	e00a      	b.n	8004c96 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c80:	2380      	movs	r3, #128	; 0x80
 8004c82:	021b      	lsls	r3, r3, #8
 8004c84:	61bb      	str	r3, [r7, #24]
        break;
 8004c86:	e006      	b.n	8004c96 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c8c:	231e      	movs	r3, #30
 8004c8e:	18fb      	adds	r3, r7, r3
 8004c90:	2201      	movs	r2, #1
 8004c92:	701a      	strb	r2, [r3, #0]
        break;
 8004c94:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d100      	bne.n	8004c9e <UART_SetConfig+0x152>
 8004c9c:	e07b      	b.n	8004d96 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	005a      	lsls	r2, r3, #1
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	085b      	lsrs	r3, r3, #1
 8004ca8:	18d2      	adds	r2, r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	0019      	movs	r1, r3
 8004cb0:	0010      	movs	r0, r2
 8004cb2:	f7fb fa29 	bl	8000108 <__udivsi3>
 8004cb6:	0003      	movs	r3, r0
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	2b0f      	cmp	r3, #15
 8004cc0:	d91c      	bls.n	8004cfc <UART_SetConfig+0x1b0>
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	2380      	movs	r3, #128	; 0x80
 8004cc6:	025b      	lsls	r3, r3, #9
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d217      	bcs.n	8004cfc <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	200e      	movs	r0, #14
 8004cd2:	183b      	adds	r3, r7, r0
 8004cd4:	210f      	movs	r1, #15
 8004cd6:	438a      	bics	r2, r1
 8004cd8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	085b      	lsrs	r3, r3, #1
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	2207      	movs	r2, #7
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	b299      	uxth	r1, r3
 8004ce6:	183b      	adds	r3, r7, r0
 8004ce8:	183a      	adds	r2, r7, r0
 8004cea:	8812      	ldrh	r2, [r2, #0]
 8004cec:	430a      	orrs	r2, r1
 8004cee:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	183a      	adds	r2, r7, r0
 8004cf6:	8812      	ldrh	r2, [r2, #0]
 8004cf8:	60da      	str	r2, [r3, #12]
 8004cfa:	e04c      	b.n	8004d96 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8004cfc:	231e      	movs	r3, #30
 8004cfe:	18fb      	adds	r3, r7, r3
 8004d00:	2201      	movs	r2, #1
 8004d02:	701a      	strb	r2, [r3, #0]
 8004d04:	e047      	b.n	8004d96 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d06:	231f      	movs	r3, #31
 8004d08:	18fb      	adds	r3, r7, r3
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	2b08      	cmp	r3, #8
 8004d0e:	d015      	beq.n	8004d3c <UART_SetConfig+0x1f0>
 8004d10:	dc18      	bgt.n	8004d44 <UART_SetConfig+0x1f8>
 8004d12:	2b04      	cmp	r3, #4
 8004d14:	d00d      	beq.n	8004d32 <UART_SetConfig+0x1e6>
 8004d16:	dc15      	bgt.n	8004d44 <UART_SetConfig+0x1f8>
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d002      	beq.n	8004d22 <UART_SetConfig+0x1d6>
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d005      	beq.n	8004d2c <UART_SetConfig+0x1e0>
 8004d20:	e010      	b.n	8004d44 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d22:	f7fe f933 	bl	8002f8c <HAL_RCC_GetPCLK1Freq>
 8004d26:	0003      	movs	r3, r0
 8004d28:	61bb      	str	r3, [r7, #24]
        break;
 8004d2a:	e012      	b.n	8004d52 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d2c:	4b26      	ldr	r3, [pc, #152]	; (8004dc8 <UART_SetConfig+0x27c>)
 8004d2e:	61bb      	str	r3, [r7, #24]
        break;
 8004d30:	e00f      	b.n	8004d52 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d32:	f7fe f8bd 	bl	8002eb0 <HAL_RCC_GetSysClockFreq>
 8004d36:	0003      	movs	r3, r0
 8004d38:	61bb      	str	r3, [r7, #24]
        break;
 8004d3a:	e00a      	b.n	8004d52 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d3c:	2380      	movs	r3, #128	; 0x80
 8004d3e:	021b      	lsls	r3, r3, #8
 8004d40:	61bb      	str	r3, [r7, #24]
        break;
 8004d42:	e006      	b.n	8004d52 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8004d44:	2300      	movs	r3, #0
 8004d46:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d48:	231e      	movs	r3, #30
 8004d4a:	18fb      	adds	r3, r7, r3
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	701a      	strb	r2, [r3, #0]
        break;
 8004d50:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d01e      	beq.n	8004d96 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	085a      	lsrs	r2, r3, #1
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	18d2      	adds	r2, r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	0019      	movs	r1, r3
 8004d68:	0010      	movs	r0, r2
 8004d6a:	f7fb f9cd 	bl	8000108 <__udivsi3>
 8004d6e:	0003      	movs	r3, r0
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	2b0f      	cmp	r3, #15
 8004d78:	d909      	bls.n	8004d8e <UART_SetConfig+0x242>
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	2380      	movs	r3, #128	; 0x80
 8004d7e:	025b      	lsls	r3, r3, #9
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d204      	bcs.n	8004d8e <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	60da      	str	r2, [r3, #12]
 8004d8c:	e003      	b.n	8004d96 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8004d8e:	231e      	movs	r3, #30
 8004d90:	18fb      	adds	r3, r7, r3
 8004d92:	2201      	movs	r2, #1
 8004d94:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004da2:	231e      	movs	r3, #30
 8004da4:	18fb      	adds	r3, r7, r3
 8004da6:	781b      	ldrb	r3, [r3, #0]
}
 8004da8:	0018      	movs	r0, r3
 8004daa:	46bd      	mov	sp, r7
 8004dac:	b008      	add	sp, #32
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	ffff69f3 	.word	0xffff69f3
 8004db4:	ffffcfff 	.word	0xffffcfff
 8004db8:	fffff4ff 	.word	0xfffff4ff
 8004dbc:	40013800 	.word	0x40013800
 8004dc0:	40021000 	.word	0x40021000
 8004dc4:	40004400 	.word	0x40004400
 8004dc8:	007a1200 	.word	0x007a1200

08004dcc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd8:	2201      	movs	r2, #1
 8004dda:	4013      	ands	r3, r2
 8004ddc:	d00b      	beq.n	8004df6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	4a4a      	ldr	r2, [pc, #296]	; (8004f10 <UART_AdvFeatureConfig+0x144>)
 8004de6:	4013      	ands	r3, r2
 8004de8:	0019      	movs	r1, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	430a      	orrs	r2, r1
 8004df4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfa:	2202      	movs	r2, #2
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	d00b      	beq.n	8004e18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	4a43      	ldr	r2, [pc, #268]	; (8004f14 <UART_AdvFeatureConfig+0x148>)
 8004e08:	4013      	ands	r3, r2
 8004e0a:	0019      	movs	r1, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	430a      	orrs	r2, r1
 8004e16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1c:	2204      	movs	r2, #4
 8004e1e:	4013      	ands	r3, r2
 8004e20:	d00b      	beq.n	8004e3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	4a3b      	ldr	r2, [pc, #236]	; (8004f18 <UART_AdvFeatureConfig+0x14c>)
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	0019      	movs	r1, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	430a      	orrs	r2, r1
 8004e38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3e:	2208      	movs	r2, #8
 8004e40:	4013      	ands	r3, r2
 8004e42:	d00b      	beq.n	8004e5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	4a34      	ldr	r2, [pc, #208]	; (8004f1c <UART_AdvFeatureConfig+0x150>)
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	0019      	movs	r1, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e60:	2210      	movs	r2, #16
 8004e62:	4013      	ands	r3, r2
 8004e64:	d00b      	beq.n	8004e7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	4a2c      	ldr	r2, [pc, #176]	; (8004f20 <UART_AdvFeatureConfig+0x154>)
 8004e6e:	4013      	ands	r3, r2
 8004e70:	0019      	movs	r1, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e82:	2220      	movs	r2, #32
 8004e84:	4013      	ands	r3, r2
 8004e86:	d00b      	beq.n	8004ea0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	4a25      	ldr	r2, [pc, #148]	; (8004f24 <UART_AdvFeatureConfig+0x158>)
 8004e90:	4013      	ands	r3, r2
 8004e92:	0019      	movs	r1, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	430a      	orrs	r2, r1
 8004e9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea4:	2240      	movs	r2, #64	; 0x40
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	d01d      	beq.n	8004ee6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	4a1d      	ldr	r2, [pc, #116]	; (8004f28 <UART_AdvFeatureConfig+0x15c>)
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	0019      	movs	r1, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ec6:	2380      	movs	r3, #128	; 0x80
 8004ec8:	035b      	lsls	r3, r3, #13
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d10b      	bne.n	8004ee6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	4a15      	ldr	r2, [pc, #84]	; (8004f2c <UART_AdvFeatureConfig+0x160>)
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	0019      	movs	r1, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eea:	2280      	movs	r2, #128	; 0x80
 8004eec:	4013      	ands	r3, r2
 8004eee:	d00b      	beq.n	8004f08 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	4a0e      	ldr	r2, [pc, #56]	; (8004f30 <UART_AdvFeatureConfig+0x164>)
 8004ef8:	4013      	ands	r3, r2
 8004efa:	0019      	movs	r1, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	430a      	orrs	r2, r1
 8004f06:	605a      	str	r2, [r3, #4]
  }
}
 8004f08:	46c0      	nop			; (mov r8, r8)
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	b002      	add	sp, #8
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	fffdffff 	.word	0xfffdffff
 8004f14:	fffeffff 	.word	0xfffeffff
 8004f18:	fffbffff 	.word	0xfffbffff
 8004f1c:	ffff7fff 	.word	0xffff7fff
 8004f20:	ffffefff 	.word	0xffffefff
 8004f24:	ffffdfff 	.word	0xffffdfff
 8004f28:	ffefffff 	.word	0xffefffff
 8004f2c:	ff9fffff 	.word	0xff9fffff
 8004f30:	fff7ffff 	.word	0xfff7ffff

08004f34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af02      	add	r7, sp, #8
 8004f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2280      	movs	r2, #128	; 0x80
 8004f40:	2100      	movs	r1, #0
 8004f42:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f44:	f7fc fb7a 	bl	800163c <HAL_GetTick>
 8004f48:	0003      	movs	r3, r0
 8004f4a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2208      	movs	r2, #8
 8004f54:	4013      	ands	r3, r2
 8004f56:	2b08      	cmp	r3, #8
 8004f58:	d10c      	bne.n	8004f74 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2280      	movs	r2, #128	; 0x80
 8004f5e:	0391      	lsls	r1, r2, #14
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	4a17      	ldr	r2, [pc, #92]	; (8004fc0 <UART_CheckIdleState+0x8c>)
 8004f64:	9200      	str	r2, [sp, #0]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f000 f82c 	bl	8004fc4 <UART_WaitOnFlagUntilTimeout>
 8004f6c:	1e03      	subs	r3, r0, #0
 8004f6e:	d001      	beq.n	8004f74 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e021      	b.n	8004fb8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2204      	movs	r2, #4
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	2b04      	cmp	r3, #4
 8004f80:	d10c      	bne.n	8004f9c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2280      	movs	r2, #128	; 0x80
 8004f86:	03d1      	lsls	r1, r2, #15
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	4a0d      	ldr	r2, [pc, #52]	; (8004fc0 <UART_CheckIdleState+0x8c>)
 8004f8c:	9200      	str	r2, [sp, #0]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f000 f818 	bl	8004fc4 <UART_WaitOnFlagUntilTimeout>
 8004f94:	1e03      	subs	r3, r0, #0
 8004f96:	d001      	beq.n	8004f9c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e00d      	b.n	8004fb8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2220      	movs	r2, #32
 8004fa6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2274      	movs	r2, #116	; 0x74
 8004fb2:	2100      	movs	r1, #0
 8004fb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004fb6:	2300      	movs	r3, #0
}
 8004fb8:	0018      	movs	r0, r3
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	b004      	add	sp, #16
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	01ffffff 	.word	0x01ffffff

08004fc4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b094      	sub	sp, #80	; 0x50
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	603b      	str	r3, [r7, #0]
 8004fd0:	1dfb      	adds	r3, r7, #7
 8004fd2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fd4:	e0a3      	b.n	800511e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fd8:	3301      	adds	r3, #1
 8004fda:	d100      	bne.n	8004fde <UART_WaitOnFlagUntilTimeout+0x1a>
 8004fdc:	e09f      	b.n	800511e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fde:	f7fc fb2d 	bl	800163c <HAL_GetTick>
 8004fe2:	0002      	movs	r2, r0
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d302      	bcc.n	8004ff4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d13d      	bne.n	8005070 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ff4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ff8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ffc:	647b      	str	r3, [r7, #68]	; 0x44
 8004ffe:	2301      	movs	r3, #1
 8005000:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005004:	f383 8810 	msr	PRIMASK, r3
}
 8005008:	46c0      	nop			; (mov r8, r8)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	494c      	ldr	r1, [pc, #304]	; (8005148 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005016:	400a      	ands	r2, r1
 8005018:	601a      	str	r2, [r3, #0]
 800501a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800501c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800501e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005020:	f383 8810 	msr	PRIMASK, r3
}
 8005024:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005026:	f3ef 8310 	mrs	r3, PRIMASK
 800502a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800502c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800502e:	643b      	str	r3, [r7, #64]	; 0x40
 8005030:	2301      	movs	r3, #1
 8005032:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005036:	f383 8810 	msr	PRIMASK, r3
}
 800503a:	46c0      	nop			; (mov r8, r8)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	689a      	ldr	r2, [r3, #8]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2101      	movs	r1, #1
 8005048:	438a      	bics	r2, r1
 800504a:	609a      	str	r2, [r3, #8]
 800504c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800504e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005052:	f383 8810 	msr	PRIMASK, r3
}
 8005056:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2220      	movs	r2, #32
 800505c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2220      	movs	r2, #32
 8005062:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2274      	movs	r2, #116	; 0x74
 8005068:	2100      	movs	r1, #0
 800506a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e067      	b.n	8005140 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2204      	movs	r2, #4
 8005078:	4013      	ands	r3, r2
 800507a:	d050      	beq.n	800511e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	69da      	ldr	r2, [r3, #28]
 8005082:	2380      	movs	r3, #128	; 0x80
 8005084:	011b      	lsls	r3, r3, #4
 8005086:	401a      	ands	r2, r3
 8005088:	2380      	movs	r3, #128	; 0x80
 800508a:	011b      	lsls	r3, r3, #4
 800508c:	429a      	cmp	r2, r3
 800508e:	d146      	bne.n	800511e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2280      	movs	r2, #128	; 0x80
 8005096:	0112      	lsls	r2, r2, #4
 8005098:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800509a:	f3ef 8310 	mrs	r3, PRIMASK
 800509e:	613b      	str	r3, [r7, #16]
  return(result);
 80050a0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050a4:	2301      	movs	r3, #1
 80050a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	f383 8810 	msr	PRIMASK, r3
}
 80050ae:	46c0      	nop			; (mov r8, r8)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4923      	ldr	r1, [pc, #140]	; (8005148 <UART_WaitOnFlagUntilTimeout+0x184>)
 80050bc:	400a      	ands	r2, r1
 80050be:	601a      	str	r2, [r3, #0]
 80050c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050c2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	f383 8810 	msr	PRIMASK, r3
}
 80050ca:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050cc:	f3ef 8310 	mrs	r3, PRIMASK
 80050d0:	61fb      	str	r3, [r7, #28]
  return(result);
 80050d2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80050d6:	2301      	movs	r3, #1
 80050d8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050da:	6a3b      	ldr	r3, [r7, #32]
 80050dc:	f383 8810 	msr	PRIMASK, r3
}
 80050e0:	46c0      	nop			; (mov r8, r8)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	689a      	ldr	r2, [r3, #8]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2101      	movs	r1, #1
 80050ee:	438a      	bics	r2, r1
 80050f0:	609a      	str	r2, [r3, #8]
 80050f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050f4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f8:	f383 8810 	msr	PRIMASK, r3
}
 80050fc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2220      	movs	r2, #32
 8005102:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2220      	movs	r2, #32
 8005108:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2280      	movs	r2, #128	; 0x80
 800510e:	2120      	movs	r1, #32
 8005110:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2274      	movs	r2, #116	; 0x74
 8005116:	2100      	movs	r1, #0
 8005118:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e010      	b.n	8005140 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	69db      	ldr	r3, [r3, #28]
 8005124:	68ba      	ldr	r2, [r7, #8]
 8005126:	4013      	ands	r3, r2
 8005128:	68ba      	ldr	r2, [r7, #8]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	425a      	negs	r2, r3
 800512e:	4153      	adcs	r3, r2
 8005130:	b2db      	uxtb	r3, r3
 8005132:	001a      	movs	r2, r3
 8005134:	1dfb      	adds	r3, r7, #7
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	429a      	cmp	r2, r3
 800513a:	d100      	bne.n	800513e <UART_WaitOnFlagUntilTimeout+0x17a>
 800513c:	e74b      	b.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	0018      	movs	r0, r3
 8005142:	46bd      	mov	sp, r7
 8005144:	b014      	add	sp, #80	; 0x50
 8005146:	bd80      	pop	{r7, pc}
 8005148:	fffffe5f 	.word	0xfffffe5f

0800514c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b08e      	sub	sp, #56	; 0x38
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005154:	f3ef 8310 	mrs	r3, PRIMASK
 8005158:	617b      	str	r3, [r7, #20]
  return(result);
 800515a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800515c:	637b      	str	r3, [r7, #52]	; 0x34
 800515e:	2301      	movs	r3, #1
 8005160:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	f383 8810 	msr	PRIMASK, r3
}
 8005168:	46c0      	nop			; (mov r8, r8)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4925      	ldr	r1, [pc, #148]	; (800520c <UART_EndRxTransfer+0xc0>)
 8005176:	400a      	ands	r2, r1
 8005178:	601a      	str	r2, [r3, #0]
 800517a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800517c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	f383 8810 	msr	PRIMASK, r3
}
 8005184:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005186:	f3ef 8310 	mrs	r3, PRIMASK
 800518a:	623b      	str	r3, [r7, #32]
  return(result);
 800518c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800518e:	633b      	str	r3, [r7, #48]	; 0x30
 8005190:	2301      	movs	r3, #1
 8005192:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005196:	f383 8810 	msr	PRIMASK, r3
}
 800519a:	46c0      	nop			; (mov r8, r8)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689a      	ldr	r2, [r3, #8]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2101      	movs	r1, #1
 80051a8:	438a      	bics	r2, r1
 80051aa:	609a      	str	r2, [r3, #8]
 80051ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ae:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b2:	f383 8810 	msr	PRIMASK, r3
}
 80051b6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d118      	bne.n	80051f2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051c0:	f3ef 8310 	mrs	r3, PRIMASK
 80051c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80051c6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051ca:	2301      	movs	r3, #1
 80051cc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f383 8810 	msr	PRIMASK, r3
}
 80051d4:	46c0      	nop			; (mov r8, r8)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2110      	movs	r1, #16
 80051e2:	438a      	bics	r2, r1
 80051e4:	601a      	str	r2, [r3, #0]
 80051e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	f383 8810 	msr	PRIMASK, r3
}
 80051f0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2220      	movs	r2, #32
 80051f6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005204:	46c0      	nop			; (mov r8, r8)
 8005206:	46bd      	mov	sp, r7
 8005208:	b00e      	add	sp, #56	; 0x38
 800520a:	bd80      	pop	{r7, pc}
 800520c:	fffffedf 	.word	0xfffffedf

08005210 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	225a      	movs	r2, #90	; 0x5a
 8005222:	2100      	movs	r1, #0
 8005224:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2252      	movs	r2, #82	; 0x52
 800522a:	2100      	movs	r1, #0
 800522c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	0018      	movs	r0, r3
 8005232:	f7ff fc77 	bl	8004b24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005236:	46c0      	nop			; (mov r8, r8)
 8005238:	46bd      	mov	sp, r7
 800523a:	b004      	add	sp, #16
 800523c:	bd80      	pop	{r7, pc}

0800523e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800523e:	b580      	push	{r7, lr}
 8005240:	b086      	sub	sp, #24
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005246:	f3ef 8310 	mrs	r3, PRIMASK
 800524a:	60bb      	str	r3, [r7, #8]
  return(result);
 800524c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800524e:	617b      	str	r3, [r7, #20]
 8005250:	2301      	movs	r3, #1
 8005252:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f383 8810 	msr	PRIMASK, r3
}
 800525a:	46c0      	nop			; (mov r8, r8)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2140      	movs	r1, #64	; 0x40
 8005268:	438a      	bics	r2, r1
 800526a:	601a      	str	r2, [r3, #0]
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	f383 8810 	msr	PRIMASK, r3
}
 8005276:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2220      	movs	r2, #32
 800527c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	0018      	movs	r0, r3
 8005288:	f7ff fc44 	bl	8004b14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800528c:	46c0      	nop			; (mov r8, r8)
 800528e:	46bd      	mov	sp, r7
 8005290:	b006      	add	sp, #24
 8005292:	bd80      	pop	{r7, pc}

08005294 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800529c:	46c0      	nop			; (mov r8, r8)
 800529e:	46bd      	mov	sp, r7
 80052a0:	b002      	add	sp, #8
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b088      	sub	sp, #32
 80052a8:	af02      	add	r7, sp, #8
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	1d3b      	adds	r3, r7, #4
 80052ae:	6019      	str	r1, [r3, #0]
 80052b0:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052b2:	2317      	movs	r3, #23
 80052b4:	18fb      	adds	r3, r7, r3
 80052b6:	2200      	movs	r2, #0
 80052b8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2274      	movs	r2, #116	; 0x74
 80052be:	5c9b      	ldrb	r3, [r3, r2]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d101      	bne.n	80052c8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x24>
 80052c4:	2302      	movs	r3, #2
 80052c6:	e04a      	b.n	800535e <HAL_UARTEx_StopModeWakeUpSourceConfig+0xba>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2274      	movs	r2, #116	; 0x74
 80052cc:	2101      	movs	r1, #1
 80052ce:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2224      	movs	r2, #36	; 0x24
 80052d4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2101      	movs	r1, #1
 80052e2:	438a      	bics	r2, r1
 80052e4:	601a      	str	r2, [r3, #0]

#if defined(USART_CR3_WUS)
  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	4a1e      	ldr	r2, [pc, #120]	; (8005368 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc4>)
 80052ee:	4013      	ands	r3, r2
 80052f0:	0019      	movs	r1, r3
 80052f2:	1d3b      	adds	r3, r7, #4
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	430a      	orrs	r2, r1
 80052fc:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_WUS */

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 80052fe:	1d3b      	adds	r3, r7, #4
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d105      	bne.n	8005312 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x6e>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8005306:	1d3b      	adds	r3, r7, #4
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	6819      	ldr	r1, [r3, #0]
 800530c:	685a      	ldr	r2, [r3, #4]
 800530e:	f000 f860 	bl	80053d2 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2101      	movs	r1, #1
 800531e:	430a      	orrs	r2, r1
 8005320:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005322:	f7fc f98b 	bl	800163c <HAL_GetTick>
 8005326:	0003      	movs	r3, r0
 8005328:	613b      	str	r3, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	2280      	movs	r2, #128	; 0x80
 800532e:	03d1      	lsls	r1, r2, #15
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	4a0e      	ldr	r2, [pc, #56]	; (800536c <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc8>)
 8005334:	9200      	str	r2, [sp, #0]
 8005336:	2200      	movs	r2, #0
 8005338:	f7ff fe44 	bl	8004fc4 <UART_WaitOnFlagUntilTimeout>
 800533c:	1e03      	subs	r3, r0, #0
 800533e:	d004      	beq.n	800534a <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa6>
  {
    status = HAL_TIMEOUT;
 8005340:	2317      	movs	r3, #23
 8005342:	18fb      	adds	r3, r7, r3
 8005344:	2203      	movs	r2, #3
 8005346:	701a      	strb	r2, [r3, #0]
 8005348:	e002      	b.n	8005350 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xac>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2220      	movs	r2, #32
 800534e:	679a      	str	r2, [r3, #120]	; 0x78
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2274      	movs	r2, #116	; 0x74
 8005354:	2100      	movs	r1, #0
 8005356:	5499      	strb	r1, [r3, r2]

  return status;
 8005358:	2317      	movs	r3, #23
 800535a:	18fb      	adds	r3, r7, r3
 800535c:	781b      	ldrb	r3, [r3, #0]
}
 800535e:	0018      	movs	r0, r3
 8005360:	46bd      	mov	sp, r7
 8005362:	b006      	add	sp, #24
 8005364:	bd80      	pop	{r7, pc}
 8005366:	46c0      	nop			; (mov r8, r8)
 8005368:	ffcfffff 	.word	0xffcfffff
 800536c:	01ffffff 	.word	0x01ffffff

08005370 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2274      	movs	r2, #116	; 0x74
 800537c:	5c9b      	ldrb	r3, [r3, r2]
 800537e:	2b01      	cmp	r3, #1
 8005380:	d101      	bne.n	8005386 <HAL_UARTEx_EnableStopMode+0x16>
 8005382:	2302      	movs	r3, #2
 8005384:	e021      	b.n	80053ca <HAL_UARTEx_EnableStopMode+0x5a>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2274      	movs	r2, #116	; 0x74
 800538a:	2101      	movs	r1, #1
 800538c:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800538e:	f3ef 8310 	mrs	r3, PRIMASK
 8005392:	60bb      	str	r3, [r7, #8]
  return(result);
 8005394:	68bb      	ldr	r3, [r7, #8]

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8005396:	617b      	str	r3, [r7, #20]
 8005398:	2301      	movs	r3, #1
 800539a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f383 8810 	msr	PRIMASK, r3
}
 80053a2:	46c0      	nop			; (mov r8, r8)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2102      	movs	r1, #2
 80053b0:	430a      	orrs	r2, r1
 80053b2:	601a      	str	r2, [r3, #0]
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	f383 8810 	msr	PRIMASK, r3
}
 80053be:	46c0      	nop			; (mov r8, r8)

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2274      	movs	r2, #116	; 0x74
 80053c4:	2100      	movs	r1, #0
 80053c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	0018      	movs	r0, r3
 80053cc:	46bd      	mov	sp, r7
 80053ce:	b006      	add	sp, #24
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b084      	sub	sp, #16
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	60f8      	str	r0, [r7, #12]
 80053da:	1d3b      	adds	r3, r7, #4
 80053dc:	6019      	str	r1, [r3, #0]
 80053de:	605a      	str	r2, [r3, #4]
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	2210      	movs	r2, #16
 80053e8:	4393      	bics	r3, r2
 80053ea:	001a      	movs	r2, r3
 80053ec:	1d3b      	adds	r3, r7, #4
 80053ee:	889b      	ldrh	r3, [r3, #4]
 80053f0:	0019      	movs	r1, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	430a      	orrs	r2, r1
 80053f8:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	021b      	lsls	r3, r3, #8
 8005402:	0a19      	lsrs	r1, r3, #8
 8005404:	1d3b      	adds	r3, r7, #4
 8005406:	799b      	ldrb	r3, [r3, #6]
 8005408:	061a      	lsls	r2, r3, #24
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	430a      	orrs	r2, r1
 8005410:	605a      	str	r2, [r3, #4]
}
 8005412:	46c0      	nop			; (mov r8, r8)
 8005414:	46bd      	mov	sp, r7
 8005416:	b004      	add	sp, #16
 8005418:	bd80      	pop	{r7, pc}

0800541a <memset>:
 800541a:	0003      	movs	r3, r0
 800541c:	1882      	adds	r2, r0, r2
 800541e:	4293      	cmp	r3, r2
 8005420:	d100      	bne.n	8005424 <memset+0xa>
 8005422:	4770      	bx	lr
 8005424:	7019      	strb	r1, [r3, #0]
 8005426:	3301      	adds	r3, #1
 8005428:	e7f9      	b.n	800541e <memset+0x4>
	...

0800542c <__libc_init_array>:
 800542c:	b570      	push	{r4, r5, r6, lr}
 800542e:	2600      	movs	r6, #0
 8005430:	4c0c      	ldr	r4, [pc, #48]	; (8005464 <__libc_init_array+0x38>)
 8005432:	4d0d      	ldr	r5, [pc, #52]	; (8005468 <__libc_init_array+0x3c>)
 8005434:	1b64      	subs	r4, r4, r5
 8005436:	10a4      	asrs	r4, r4, #2
 8005438:	42a6      	cmp	r6, r4
 800543a:	d109      	bne.n	8005450 <__libc_init_array+0x24>
 800543c:	2600      	movs	r6, #0
 800543e:	f000 f819 	bl	8005474 <_init>
 8005442:	4c0a      	ldr	r4, [pc, #40]	; (800546c <__libc_init_array+0x40>)
 8005444:	4d0a      	ldr	r5, [pc, #40]	; (8005470 <__libc_init_array+0x44>)
 8005446:	1b64      	subs	r4, r4, r5
 8005448:	10a4      	asrs	r4, r4, #2
 800544a:	42a6      	cmp	r6, r4
 800544c:	d105      	bne.n	800545a <__libc_init_array+0x2e>
 800544e:	bd70      	pop	{r4, r5, r6, pc}
 8005450:	00b3      	lsls	r3, r6, #2
 8005452:	58eb      	ldr	r3, [r5, r3]
 8005454:	4798      	blx	r3
 8005456:	3601      	adds	r6, #1
 8005458:	e7ee      	b.n	8005438 <__libc_init_array+0xc>
 800545a:	00b3      	lsls	r3, r6, #2
 800545c:	58eb      	ldr	r3, [r5, r3]
 800545e:	4798      	blx	r3
 8005460:	3601      	adds	r6, #1
 8005462:	e7f2      	b.n	800544a <__libc_init_array+0x1e>
 8005464:	08005610 	.word	0x08005610
 8005468:	08005610 	.word	0x08005610
 800546c:	08005614 	.word	0x08005614
 8005470:	08005610 	.word	0x08005610

08005474 <_init>:
 8005474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005476:	46c0      	nop			; (mov r8, r8)
 8005478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800547a:	bc08      	pop	{r3}
 800547c:	469e      	mov	lr, r3
 800547e:	4770      	bx	lr

08005480 <_fini>:
 8005480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005482:	46c0      	nop			; (mov r8, r8)
 8005484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005486:	bc08      	pop	{r3}
 8005488:	469e      	mov	lr, r3
 800548a:	4770      	bx	lr
