
Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006540  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08006600  08006600  00016600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800663c  0800663c  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  0800663c  0800663c  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800663c  0800663c  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800663c  0800663c  0001663c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006640  08006640  00016640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08006644  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000344  20000028  0800666c  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  0800666c  0002036c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016185  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c68  00000000  00000000  000361d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f8  00000000  00000000  00038e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012e8  00000000  00000000  0003a238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000141ef  00000000  00000000  0003b520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001867e  00000000  00000000  0004f70f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00078b57  00000000  00000000  00067d8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e08e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048b8  00000000  00000000  000e0934  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000028 	.word	0x20000028
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080065e8 	.word	0x080065e8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000002c 	.word	0x2000002c
 8000104:	080065e8 	.word	0x080065e8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000224:	f3bf 8f4f 	dsb	sy
}
 8000228:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800022a:	4b04      	ldr	r3, [pc, #16]	; (800023c <__NVIC_SystemReset+0x1c>)
 800022c:	4a04      	ldr	r2, [pc, #16]	; (8000240 <__NVIC_SystemReset+0x20>)
 800022e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000230:	f3bf 8f4f 	dsb	sy
}
 8000234:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000236:	46c0      	nop			; (mov r8, r8)
 8000238:	e7fd      	b.n	8000236 <__NVIC_SystemReset+0x16>
 800023a:	46c0      	nop			; (mov r8, r8)
 800023c:	e000ed00 	.word	0xe000ed00
 8000240:	05fa0004 	.word	0x05fa0004

08000244 <fillErpaBuffer>:
int hk_counter = 0;

int startupTimer = 0;


uint8_t *fillErpaBuffer(erpaData data) {
 8000244:	b084      	sub	sp, #16
 8000246:	b5b0      	push	{r4, r5, r7, lr}
 8000248:	b084      	sub	sp, #16
 800024a:	af00      	add	r7, sp, #0
 800024c:	2520      	movs	r5, #32
 800024e:	197c      	adds	r4, r7, r5
 8000250:	6020      	str	r0, [r4, #0]
 8000252:	6061      	str	r1, [r4, #4]
 8000254:	60a2      	str	r2, [r4, #8]
 8000256:	60e3      	str	r3, [r4, #12]

	uint8_t erpa_ret[16];

	erpa_ret[0] = data.sync; // ERPA SYNC 0xAA MSB
 8000258:	0029      	movs	r1, r5
 800025a:	187b      	adds	r3, r7, r1
 800025c:	781a      	ldrb	r2, [r3, #0]
 800025e:	003b      	movs	r3, r7
 8000260:	701a      	strb	r2, [r3, #0]
	erpa_ret[1] = data.sync; // ERPA SYNC 0xAA LSB
 8000262:	187b      	adds	r3, r7, r1
 8000264:	781a      	ldrb	r2, [r3, #0]
 8000266:	003b      	movs	r3, r7
 8000268:	705a      	strb	r2, [r3, #1]
	erpa_ret[2] = ((erpa_seq & 0xFF00) >> 8); // ERPA SEQ # MSB
 800026a:	4b2f      	ldr	r3, [pc, #188]	; (8000328 <fillErpaBuffer+0xe4>)
 800026c:	881b      	ldrh	r3, [r3, #0]
 800026e:	0a1b      	lsrs	r3, r3, #8
 8000270:	b29b      	uxth	r3, r3
 8000272:	b2da      	uxtb	r2, r3
 8000274:	003b      	movs	r3, r7
 8000276:	709a      	strb	r2, [r3, #2]
	erpa_ret[3] = (erpa_seq & 0xFF); // ERPA SEQ # MSB
 8000278:	4b2b      	ldr	r3, [pc, #172]	; (8000328 <fillErpaBuffer+0xe4>)
 800027a:	881b      	ldrh	r3, [r3, #0]
 800027c:	b2da      	uxtb	r2, r3
 800027e:	003b      	movs	r3, r7
 8000280:	70da      	strb	r2, [r3, #3]
	erpa_ret[4] = ((data.spiData & 0xFF00) >> 8); // ERPA eADC MSB
 8000282:	187b      	adds	r3, r7, r1
 8000284:	685b      	ldr	r3, [r3, #4]
 8000286:	121b      	asrs	r3, r3, #8
 8000288:	b2da      	uxtb	r2, r3
 800028a:	003b      	movs	r3, r7
 800028c:	711a      	strb	r2, [r3, #4]
	erpa_ret[5] = (data.spiData & 0xFF); // ERPA eADC LSB
 800028e:	187b      	adds	r3, r7, r1
 8000290:	685b      	ldr	r3, [r3, #4]
 8000292:	b2da      	uxtb	r2, r3
 8000294:	003b      	movs	r3, r7
 8000296:	715a      	strb	r2, [r3, #5]
	erpa_ret[6] = ((data.swpComm & 0xFF00) >> 8); //SWP Commanded MSB
 8000298:	187b      	adds	r3, r7, r1
 800029a:	689b      	ldr	r3, [r3, #8]
 800029c:	0a1b      	lsrs	r3, r3, #8
 800029e:	b2da      	uxtb	r2, r3
 80002a0:	003b      	movs	r3, r7
 80002a2:	719a      	strb	r2, [r3, #6]
	erpa_ret[7] = (data.swpComm & 0xFF); //SWP Commanded LSB
 80002a4:	187b      	adds	r3, r7, r1
 80002a6:	689b      	ldr	r3, [r3, #8]
 80002a8:	b2da      	uxtb	r2, r3
 80002aa:	003b      	movs	r3, r7
 80002ac:	71da      	strb	r2, [r3, #7]
	erpa_ret[8] = ((data.swpMon & 0xFF00) >> 8); // SWP Monitored MSB
 80002ae:	187b      	adds	r3, r7, r1
 80002b0:	68db      	ldr	r3, [r3, #12]
 80002b2:	0a1b      	lsrs	r3, r3, #8
 80002b4:	b2da      	uxtb	r2, r3
 80002b6:	003b      	movs	r3, r7
 80002b8:	721a      	strb	r2, [r3, #8]
	erpa_ret[9] = (data.swpMon & 0xFF); // SWP Monitored LSB
 80002ba:	187b      	adds	r3, r7, r1
 80002bc:	68db      	ldr	r3, [r3, #12]
 80002be:	b2da      	uxtb	r2, r3
 80002c0:	003b      	movs	r3, r7
 80002c2:	725a      	strb	r2, [r3, #9]
	erpa_ret[10] = ((data.tmp1 & 0xFF00) >> 8); // TEMPURATURE 1 MSB
 80002c4:	187b      	adds	r3, r7, r1
 80002c6:	8a5b      	ldrh	r3, [r3, #18]
 80002c8:	0a1b      	lsrs	r3, r3, #8
 80002ca:	b29b      	uxth	r3, r3
 80002cc:	b2da      	uxtb	r2, r3
 80002ce:	003b      	movs	r3, r7
 80002d0:	729a      	strb	r2, [r3, #10]
	erpa_ret[11] = (data.tmp1 & 0xFF); // TEMPURATURE 1 LSB
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	8a5b      	ldrh	r3, [r3, #18]
 80002d6:	b2da      	uxtb	r2, r3
 80002d8:	003b      	movs	r3, r7
 80002da:	72da      	strb	r2, [r3, #11]
	erpa_ret[12] = ((data.tmp2 & 0xFF00) >> 8); // TEMPURATURE 2 MSB
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	8a9b      	ldrh	r3, [r3, #20]
 80002e0:	0a1b      	lsrs	r3, r3, #8
 80002e2:	b29b      	uxth	r3, r3
 80002e4:	b2da      	uxtb	r2, r3
 80002e6:	003b      	movs	r3, r7
 80002e8:	731a      	strb	r2, [r3, #12]
	erpa_ret[13] = (data.tmp2 & 0xFF); // TEMPURATURE 2 LSB
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	8a9b      	ldrh	r3, [r3, #20]
 80002ee:	b2da      	uxtb	r2, r3
 80002f0:	003b      	movs	r3, r7
 80002f2:	735a      	strb	r2, [r3, #13]
	erpa_ret[14] = ((data.endMon & 0xFF00) >> 8); // ENDmon MSB
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	8a1b      	ldrh	r3, [r3, #16]
 80002f8:	0a1b      	lsrs	r3, r3, #8
 80002fa:	b29b      	uxth	r3, r3
 80002fc:	b2da      	uxtb	r2, r3
 80002fe:	003b      	movs	r3, r7
 8000300:	739a      	strb	r2, [r3, #14]
	erpa_ret[15] = (data.endMon & 0xFF); // ENDmon LSB
 8000302:	187b      	adds	r3, r7, r1
 8000304:	8a1b      	ldrh	r3, [r3, #16]
 8000306:	b2da      	uxtb	r2, r3
 8000308:	003b      	movs	r3, r7
 800030a:	73da      	strb	r2, [r3, #15]

	erpa_seq++;
 800030c:	4b06      	ldr	r3, [pc, #24]	; (8000328 <fillErpaBuffer+0xe4>)
 800030e:	881b      	ldrh	r3, [r3, #0]
 8000310:	3301      	adds	r3, #1
 8000312:	b29a      	uxth	r2, r3
 8000314:	4b04      	ldr	r3, [pc, #16]	; (8000328 <fillErpaBuffer+0xe4>)
 8000316:	801a      	strh	r2, [r3, #0]

	return erpa_ret;
 8000318:	2300      	movs	r3, #0
}
 800031a:	0018      	movs	r0, r3
 800031c:	46bd      	mov	sp, r7
 800031e:	b004      	add	sp, #16
 8000320:	bcb0      	pop	{r4, r5, r7}
 8000322:	bc08      	pop	{r3}
 8000324:	b004      	add	sp, #16
 8000326:	4718      	bx	r3
 8000328:	2000033c 	.word	0x2000033c

0800032c <HAL_TIM_OC_DelayElapsedCallback>:


void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 800032c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800032e:	b093      	sub	sp, #76	; 0x4c
 8000330:	af02      	add	r7, sp, #8
 8000332:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8000334:	687a      	ldr	r2, [r7, #4]
 8000336:	4bc5      	ldr	r3, [pc, #788]	; (800064c <HAL_TIM_OC_DelayElapsedCallback+0x320>)
 8000338:	429a      	cmp	r2, r3
 800033a:	d000      	beq.n	800033e <HAL_TIM_OC_DelayElapsedCallback+0x12>
 800033c:	e1a6      	b.n	800068c <HAL_TIM_OC_DelayElapsedCallback+0x360>
        if (!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8))) { //check pin state
 800033e:	2380      	movs	r3, #128	; 0x80
 8000340:	005a      	lsls	r2, r3, #1
 8000342:	2390      	movs	r3, #144	; 0x90
 8000344:	05db      	lsls	r3, r3, #23
 8000346:	0011      	movs	r1, r2
 8000348:	0018      	movs	r0, r3
 800034a:	f002 fbe7 	bl	8002b1c <HAL_GPIO_ReadPin>
 800034e:	1e03      	subs	r3, r0, #0
 8000350:	d000      	beq.n	8000354 <HAL_TIM_OC_DelayElapsedCallback+0x28>
 8000352:	e1e1      	b.n	8000718 <HAL_TIM_OC_DelayElapsedCallback+0x3ec>
             * Steps DAC
             * +/- 0.5v Every 100ms
             */

            /* Write to SPI (begin transfer?) */
            HAL_SPI_Transmit(&hspi1, (uint8_t * ) & WRITE, 1, 1);
 8000354:	49be      	ldr	r1, [pc, #760]	; (8000650 <HAL_TIM_OC_DelayElapsedCallback+0x324>)
 8000356:	48bf      	ldr	r0, [pc, #764]	; (8000654 <HAL_TIM_OC_DelayElapsedCallback+0x328>)
 8000358:	2301      	movs	r3, #1
 800035a:	2201      	movs	r2, #1
 800035c:	f003 fb7c 	bl	8003a58 <HAL_SPI_Transmit>

            while (!(SPI1->SR));
 8000360:	46c0      	nop			; (mov r8, r8)
 8000362:	4bbd      	ldr	r3, [pc, #756]	; (8000658 <HAL_TIM_OC_DelayElapsedCallback+0x32c>)
 8000364:	689b      	ldr	r3, [r3, #8]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d0fb      	beq.n	8000362 <HAL_TIM_OC_DelayElapsedCallback+0x36>

            raw = SPI1->DR;
 800036a:	4bbb      	ldr	r3, [pc, #748]	; (8000658 <HAL_TIM_OC_DelayElapsedCallback+0x32c>)
 800036c:	68db      	ldr	r3, [r3, #12]
 800036e:	001a      	movs	r2, r3
 8000370:	4bba      	ldr	r3, [pc, #744]	; (800065c <HAL_TIM_OC_DelayElapsedCallback+0x330>)
 8000372:	601a      	str	r2, [r3, #0]

            DAC->DHR12R1 = DAC_OUT[step];
 8000374:	4bba      	ldr	r3, [pc, #744]	; (8000660 <HAL_TIM_OC_DelayElapsedCallback+0x334>)
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	0019      	movs	r1, r3
 800037a:	4bba      	ldr	r3, [pc, #744]	; (8000664 <HAL_TIM_OC_DelayElapsedCallback+0x338>)
 800037c:	4aba      	ldr	r2, [pc, #744]	; (8000668 <HAL_TIM_OC_DelayElapsedCallback+0x33c>)
 800037e:	0089      	lsls	r1, r1, #2
 8000380:	588a      	ldr	r2, [r1, r2]
 8000382:	609a      	str	r2, [r3, #8]

            HAL_ADC_Start_DMA(&hadc, (uint32_t *) adcResultsDMA, adcChannelCount);
 8000384:	2310      	movs	r3, #16
 8000386:	001a      	movs	r2, r3
 8000388:	49b8      	ldr	r1, [pc, #736]	; (800066c <HAL_TIM_OC_DelayElapsedCallback+0x340>)
 800038a:	4bb9      	ldr	r3, [pc, #740]	; (8000670 <HAL_TIM_OC_DelayElapsedCallback+0x344>)
 800038c:	0018      	movs	r0, r3
 800038e:	f001 fc17 	bl	8001bc0 <HAL_ADC_Start_DMA>
            uint16_t PA0 = adcResultsDMA[0]; //ADC_IN0, END_mon: entrance/collimator monitor
 8000392:	203e      	movs	r0, #62	; 0x3e
 8000394:	183b      	adds	r3, r7, r0
 8000396:	4ab5      	ldr	r2, [pc, #724]	; (800066c <HAL_TIM_OC_DelayElapsedCallback+0x340>)
 8000398:	8812      	ldrh	r2, [r2, #0]
 800039a:	801a      	strh	r2, [r3, #0]
            uint16_t PA7 = adcResultsDMA[4]; //ADC_IN7, SWP_mon: Sweep voltage monitor
 800039c:	243c      	movs	r4, #60	; 0x3c
 800039e:	193b      	adds	r3, r7, r4
 80003a0:	4ab2      	ldr	r2, [pc, #712]	; (800066c <HAL_TIM_OC_DelayElapsedCallback+0x340>)
 80003a2:	8912      	ldrh	r2, [r2, #8]
 80003a4:	801a      	strh	r2, [r3, #0]
            uint16_t PB0 = adcResultsDMA[5]; //ADC_IN8, TMP 1: Sweep temperature
 80003a6:	253a      	movs	r5, #58	; 0x3a
 80003a8:	197b      	adds	r3, r7, r5
 80003aa:	4ab0      	ldr	r2, [pc, #704]	; (800066c <HAL_TIM_OC_DelayElapsedCallback+0x340>)
 80003ac:	8952      	ldrh	r2, [r2, #10]
 80003ae:	801a      	strh	r2, [r3, #0]
            uint16_t PB1 = adcResultsDMA[6]; //ADC_IN9, TMP 2: feedbacks
 80003b0:	2638      	movs	r6, #56	; 0x38
 80003b2:	19bb      	adds	r3, r7, r6
 80003b4:	4aad      	ldr	r2, [pc, #692]	; (800066c <HAL_TIM_OC_DelayElapsedCallback+0x340>)
 80003b6:	8992      	ldrh	r2, [r2, #12]
 80003b8:	801a      	strh	r2, [r3, #0]

            erpaData data;
            data.sync = 0xAA;
 80003ba:	2108      	movs	r1, #8
 80003bc:	187b      	adds	r3, r7, r1
 80003be:	22aa      	movs	r2, #170	; 0xaa
 80003c0:	701a      	strb	r2, [r3, #0]
            data.spiData = raw;
 80003c2:	4ba6      	ldr	r3, [pc, #664]	; (800065c <HAL_TIM_OC_DelayElapsedCallback+0x330>)
 80003c4:	681a      	ldr	r2, [r3, #0]
 80003c6:	187b      	adds	r3, r7, r1
 80003c8:	605a      	str	r2, [r3, #4]
            data.swpComm = DAC->DHR12R1;
 80003ca:	4ba6      	ldr	r3, [pc, #664]	; (8000664 <HAL_TIM_OC_DelayElapsedCallback+0x338>)
 80003cc:	689a      	ldr	r2, [r3, #8]
 80003ce:	187b      	adds	r3, r7, r1
 80003d0:	609a      	str	r2, [r3, #8]
            data.swpMon = PA7;
 80003d2:	193b      	adds	r3, r7, r4
 80003d4:	881a      	ldrh	r2, [r3, #0]
 80003d6:	187b      	adds	r3, r7, r1
 80003d8:	60da      	str	r2, [r3, #12]
            data.endMon = PA0;
 80003da:	187b      	adds	r3, r7, r1
 80003dc:	183a      	adds	r2, r7, r0
 80003de:	8812      	ldrh	r2, [r2, #0]
 80003e0:	821a      	strh	r2, [r3, #16]
            data.tmp1 = PB0;
 80003e2:	187b      	adds	r3, r7, r1
 80003e4:	197a      	adds	r2, r7, r5
 80003e6:	8812      	ldrh	r2, [r2, #0]
 80003e8:	825a      	strh	r2, [r3, #18]
            data.tmp2 = PB1;
 80003ea:	187b      	adds	r3, r7, r1
 80003ec:	19ba      	adds	r2, r7, r6
 80003ee:	8812      	ldrh	r2, [r2, #0]
 80003f0:	829a      	strh	r2, [r3, #20]

            erpa_buf = fillErpaBuffer(data);
 80003f2:	187b      	adds	r3, r7, r1
 80003f4:	466a      	mov	r2, sp
 80003f6:	0011      	movs	r1, r2
 80003f8:	001a      	movs	r2, r3
 80003fa:	3210      	adds	r2, #16
 80003fc:	ca11      	ldmia	r2!, {r0, r4}
 80003fe:	c111      	stmia	r1!, {r0, r4}
 8000400:	6818      	ldr	r0, [r3, #0]
 8000402:	6859      	ldr	r1, [r3, #4]
 8000404:	689a      	ldr	r2, [r3, #8]
 8000406:	68db      	ldr	r3, [r3, #12]
 8000408:	f7ff ff1c 	bl	8000244 <fillErpaBuffer>
 800040c:	0002      	movs	r2, r0
 800040e:	4b99      	ldr	r3, [pc, #612]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x348>)
 8000410:	601a      	str	r2, [r3, #0]

            HAL_UART_Transmit(&huart1, erpa_buf, sizeof(erpa_buf), 100);
 8000412:	4b98      	ldr	r3, [pc, #608]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x348>)
 8000414:	6819      	ldr	r1, [r3, #0]
 8000416:	4898      	ldr	r0, [pc, #608]	; (8000678 <HAL_TIM_OC_DelayElapsedCallback+0x34c>)
 8000418:	2364      	movs	r3, #100	; 0x64
 800041a:	2204      	movs	r2, #4
 800041c:	f004 fe4e 	bl	80050bc <HAL_UART_Transmit>

            if (step == 5) {
 8000420:	4b8f      	ldr	r3, [pc, #572]	; (8000660 <HAL_TIM_OC_DelayElapsedCallback+0x334>)
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	2b05      	cmp	r3, #5
 8000426:	d103      	bne.n	8000430 <HAL_TIM_OC_DelayElapsedCallback+0x104>
                up = 0;
 8000428:	4b94      	ldr	r3, [pc, #592]	; (800067c <HAL_TIM_OC_DelayElapsedCallback+0x350>)
 800042a:	2200      	movs	r2, #0
 800042c:	601a      	str	r2, [r3, #0]
 800042e:	e006      	b.n	800043e <HAL_TIM_OC_DelayElapsedCallback+0x112>
            } else if (step == 0) {
 8000430:	4b8b      	ldr	r3, [pc, #556]	; (8000660 <HAL_TIM_OC_DelayElapsedCallback+0x334>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d102      	bne.n	800043e <HAL_TIM_OC_DelayElapsedCallback+0x112>
                up = 1;
 8000438:	4b90      	ldr	r3, [pc, #576]	; (800067c <HAL_TIM_OC_DelayElapsedCallback+0x350>)
 800043a:	2201      	movs	r2, #1
 800043c:	601a      	str	r2, [r3, #0]
            }

            up == 1 ? step++ : step--;
 800043e:	4b8f      	ldr	r3, [pc, #572]	; (800067c <HAL_TIM_OC_DelayElapsedCallback+0x350>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	2b01      	cmp	r3, #1
 8000444:	d106      	bne.n	8000454 <HAL_TIM_OC_DelayElapsedCallback+0x128>
 8000446:	4b86      	ldr	r3, [pc, #536]	; (8000660 <HAL_TIM_OC_DelayElapsedCallback+0x334>)
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	3301      	adds	r3, #1
 800044c:	b2da      	uxtb	r2, r3
 800044e:	4b84      	ldr	r3, [pc, #528]	; (8000660 <HAL_TIM_OC_DelayElapsedCallback+0x334>)
 8000450:	701a      	strb	r2, [r3, #0]
 8000452:	e005      	b.n	8000460 <HAL_TIM_OC_DelayElapsedCallback+0x134>
 8000454:	4b82      	ldr	r3, [pc, #520]	; (8000660 <HAL_TIM_OC_DelayElapsedCallback+0x334>)
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	3b01      	subs	r3, #1
 800045a:	b2da      	uxtb	r2, r3
 800045c:	4b80      	ldr	r3, [pc, #512]	; (8000660 <HAL_TIM_OC_DelayElapsedCallback+0x334>)
 800045e:	701a      	strb	r2, [r3, #0]

            if (hk_counter == 50) {
 8000460:	4b87      	ldr	r3, [pc, #540]	; (8000680 <HAL_TIM_OC_DelayElapsedCallback+0x354>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	2b32      	cmp	r3, #50	; 0x32
 8000466:	d000      	beq.n	800046a <HAL_TIM_OC_DelayElapsedCallback+0x13e>
 8000468:	e0e9      	b.n	800063e <HAL_TIM_OC_DelayElapsedCallback+0x312>
                HAL_ADC_Start_DMA(&hadc, (uint32_t *) adcResultsDMA, adcChannelCount);
 800046a:	2310      	movs	r3, #16
 800046c:	001a      	movs	r2, r3
 800046e:	497f      	ldr	r1, [pc, #508]	; (800066c <HAL_TIM_OC_DelayElapsedCallback+0x340>)
 8000470:	4b7f      	ldr	r3, [pc, #508]	; (8000670 <HAL_TIM_OC_DelayElapsedCallback+0x344>)
 8000472:	0018      	movs	r0, r3
 8000474:	f001 fba4 	bl	8001bc0 <HAL_ADC_Start_DMA>

                uint16_t PA1 = adcResultsDMA[1]; //ADC_IN1, BUS_Vmon: instrument bus voltage monitor
 8000478:	2136      	movs	r1, #54	; 0x36
 800047a:	187b      	adds	r3, r7, r1
 800047c:	4a7b      	ldr	r2, [pc, #492]	; (800066c <HAL_TIM_OC_DelayElapsedCallback+0x340>)
 800047e:	8852      	ldrh	r2, [r2, #2]
 8000480:	801a      	strh	r2, [r3, #0]
                uint16_t PA2 = adcResultsDMA[2]; //ADC_IN2, BUS_Imon: instrument bus current monitor
 8000482:	2034      	movs	r0, #52	; 0x34
 8000484:	183b      	adds	r3, r7, r0
 8000486:	4a79      	ldr	r2, [pc, #484]	; (800066c <HAL_TIM_OC_DelayElapsedCallback+0x340>)
 8000488:	8892      	ldrh	r2, [r2, #4]
 800048a:	801a      	strh	r2, [r3, #0]
                uint16_t PA3 = adcResultsDMA[3]; //ADC_IN3, 5vref_mon: Accurate 5V for ADC monitor
 800048c:	2432      	movs	r4, #50	; 0x32
 800048e:	193b      	adds	r3, r7, r4
 8000490:	4a76      	ldr	r2, [pc, #472]	; (800066c <HAL_TIM_OC_DelayElapsedCallback+0x340>)
 8000492:	88d2      	ldrh	r2, [r2, #6]
 8000494:	801a      	strh	r2, [r3, #0]
                uint16_t PC0 = adcResultsDMA[7]; //ADC_IN10, 2v5_mon: power monitor
 8000496:	2530      	movs	r5, #48	; 0x30
 8000498:	197b      	adds	r3, r7, r5
 800049a:	4a74      	ldr	r2, [pc, #464]	; (800066c <HAL_TIM_OC_DelayElapsedCallback+0x340>)
 800049c:	89d2      	ldrh	r2, [r2, #14]
 800049e:	801a      	strh	r2, [r3, #0]
                uint16_t PC1 = adcResultsDMA[8]; //ADC_IN11, 3v3_mon: power monitor
 80004a0:	262e      	movs	r6, #46	; 0x2e
 80004a2:	19bb      	adds	r3, r7, r6
 80004a4:	4a71      	ldr	r2, [pc, #452]	; (800066c <HAL_TIM_OC_DelayElapsedCallback+0x340>)
 80004a6:	8a12      	ldrh	r2, [r2, #16]
 80004a8:	801a      	strh	r2, [r3, #0]
                uint16_t PC2 = adcResultsDMA[9]; //ADC_IN12, 5v_mon: power monitor
 80004aa:	232c      	movs	r3, #44	; 0x2c
 80004ac:	18fb      	adds	r3, r7, r3
 80004ae:	4a6f      	ldr	r2, [pc, #444]	; (800066c <HAL_TIM_OC_DelayElapsedCallback+0x340>)
 80004b0:	8a52      	ldrh	r2, [r2, #18]
 80004b2:	801a      	strh	r2, [r3, #0]
                uint16_t PC3 = adcResultsDMA[10]; //ADC_IN13, n3v3_mon: power monitor
 80004b4:	222a      	movs	r2, #42	; 0x2a
 80004b6:	18bb      	adds	r3, r7, r2
 80004b8:	4a6c      	ldr	r2, [pc, #432]	; (800066c <HAL_TIM_OC_DelayElapsedCallback+0x340>)
 80004ba:	8a92      	ldrh	r2, [r2, #20]
 80004bc:	801a      	strh	r2, [r3, #0]
                uint16_t PC4 = adcResultsDMA[11]; //ADC_IN14, n5v_mon: power monitor
 80004be:	2328      	movs	r3, #40	; 0x28
 80004c0:	18fb      	adds	r3, r7, r3
 80004c2:	4a6a      	ldr	r2, [pc, #424]	; (800066c <HAL_TIM_OC_DelayElapsedCallback+0x340>)
 80004c4:	8ad2      	ldrh	r2, [r2, #22]
 80004c6:	801a      	strh	r2, [r3, #0]
                uint16_t PC5 = adcResultsDMA[12]; //ADC_IN15, 15v_mon: power monitor
 80004c8:	2226      	movs	r2, #38	; 0x26
 80004ca:	18bb      	adds	r3, r7, r2
 80004cc:	4a67      	ldr	r2, [pc, #412]	; (800066c <HAL_TIM_OC_DelayElapsedCallback+0x340>)
 80004ce:	8b12      	ldrh	r2, [r2, #24]
 80004d0:	801a      	strh	r2, [r3, #0]
                uint16_t MCU_TEMP = adcResultsDMA[13]; //(internally connected) ADC_IN16, VSENSE
 80004d2:	2324      	movs	r3, #36	; 0x24
 80004d4:	18fb      	adds	r3, r7, r3
 80004d6:	4a65      	ldr	r2, [pc, #404]	; (800066c <HAL_TIM_OC_DelayElapsedCallback+0x340>)
 80004d8:	8b52      	ldrh	r2, [r2, #26]
 80004da:	801a      	strh	r2, [r3, #0]
                uint16_t MCU_VREF = adcResultsDMA[14]; //(internally connected) ADC_IN17, VREFINT
 80004dc:	2222      	movs	r2, #34	; 0x22
 80004de:	18bb      	adds	r3, r7, r2
 80004e0:	4a62      	ldr	r2, [pc, #392]	; (800066c <HAL_TIM_OC_DelayElapsedCallback+0x340>)
 80004e2:	8b92      	ldrh	r2, [r2, #28]
 80004e4:	801a      	strh	r2, [r3, #0]

                hk_buf[0] = hk_sync; // HK SYNC 0xCC MSB
 80004e6:	22cc      	movs	r2, #204	; 0xcc
 80004e8:	4b66      	ldr	r3, [pc, #408]	; (8000684 <HAL_TIM_OC_DelayElapsedCallback+0x358>)
 80004ea:	701a      	strb	r2, [r3, #0]
                hk_buf[1] = hk_sync; // HK SYNC 0xCC LSB
 80004ec:	22cc      	movs	r2, #204	; 0xcc
 80004ee:	4b65      	ldr	r3, [pc, #404]	; (8000684 <HAL_TIM_OC_DelayElapsedCallback+0x358>)
 80004f0:	705a      	strb	r2, [r3, #1]
                hk_buf[2] = ((hk_seq & 0xFF00) >> 8); // HK SEQ # MSB
 80004f2:	4b65      	ldr	r3, [pc, #404]	; (8000688 <HAL_TIM_OC_DelayElapsedCallback+0x35c>)
 80004f4:	881b      	ldrh	r3, [r3, #0]
 80004f6:	0a1b      	lsrs	r3, r3, #8
 80004f8:	b29b      	uxth	r3, r3
 80004fa:	b2da      	uxtb	r2, r3
 80004fc:	4b61      	ldr	r3, [pc, #388]	; (8000684 <HAL_TIM_OC_DelayElapsedCallback+0x358>)
 80004fe:	709a      	strb	r2, [r3, #2]
                hk_buf[3] = (hk_seq & 0xFF); // HK SEQ # LSB
 8000500:	4b61      	ldr	r3, [pc, #388]	; (8000688 <HAL_TIM_OC_DelayElapsedCallback+0x35c>)
 8000502:	881b      	ldrh	r3, [r3, #0]
 8000504:	b2da      	uxtb	r2, r3
 8000506:	4b5f      	ldr	r3, [pc, #380]	; (8000684 <HAL_TIM_OC_DelayElapsedCallback+0x358>)
 8000508:	70da      	strb	r2, [r3, #3]
                hk_buf[4] = ((PA1 & 0xFF00) >> 8); // BUS_Vmon MSB
 800050a:	187b      	adds	r3, r7, r1
 800050c:	881b      	ldrh	r3, [r3, #0]
 800050e:	0a1b      	lsrs	r3, r3, #8
 8000510:	b29b      	uxth	r3, r3
 8000512:	b2da      	uxtb	r2, r3
 8000514:	4b5b      	ldr	r3, [pc, #364]	; (8000684 <HAL_TIM_OC_DelayElapsedCallback+0x358>)
 8000516:	711a      	strb	r2, [r3, #4]
                hk_buf[5] = (PA1 & 0xFF); // BUS_Vmon LSB
 8000518:	187b      	adds	r3, r7, r1
 800051a:	881b      	ldrh	r3, [r3, #0]
 800051c:	b2da      	uxtb	r2, r3
 800051e:	4b59      	ldr	r3, [pc, #356]	; (8000684 <HAL_TIM_OC_DelayElapsedCallback+0x358>)
 8000520:	715a      	strb	r2, [r3, #5]
                hk_buf[6] = ((PA2 & 0xFF00) >> 8); // BUS_Imon MSB
 8000522:	183b      	adds	r3, r7, r0
 8000524:	881b      	ldrh	r3, [r3, #0]
 8000526:	0a1b      	lsrs	r3, r3, #8
 8000528:	b29b      	uxth	r3, r3
 800052a:	b2da      	uxtb	r2, r3
 800052c:	4b55      	ldr	r3, [pc, #340]	; (8000684 <HAL_TIM_OC_DelayElapsedCallback+0x358>)
 800052e:	719a      	strb	r2, [r3, #6]
                hk_buf[7] = (PA2 & 0xFF); // BUS_Imon LSB
 8000530:	183b      	adds	r3, r7, r0
 8000532:	881b      	ldrh	r3, [r3, #0]
 8000534:	b2da      	uxtb	r2, r3
 8000536:	4b53      	ldr	r3, [pc, #332]	; (8000684 <HAL_TIM_OC_DelayElapsedCallback+0x358>)
 8000538:	71da      	strb	r2, [r3, #7]
                hk_buf[8] = ((PC0 & 0xFF00) >> 8); // 2.5v_mon MSB
 800053a:	197b      	adds	r3, r7, r5
 800053c:	881b      	ldrh	r3, [r3, #0]
 800053e:	0a1b      	lsrs	r3, r3, #8
 8000540:	b29b      	uxth	r3, r3
 8000542:	b2da      	uxtb	r2, r3
 8000544:	4b4f      	ldr	r3, [pc, #316]	; (8000684 <HAL_TIM_OC_DelayElapsedCallback+0x358>)
 8000546:	721a      	strb	r2, [r3, #8]
                hk_buf[9] = (PC0 & 0xFF); // 2.5v_mon LSB
 8000548:	197b      	adds	r3, r7, r5
 800054a:	881b      	ldrh	r3, [r3, #0]
 800054c:	b2da      	uxtb	r2, r3
 800054e:	4b4d      	ldr	r3, [pc, #308]	; (8000684 <HAL_TIM_OC_DelayElapsedCallback+0x358>)
 8000550:	725a      	strb	r2, [r3, #9]
                hk_buf[10] = ((PC1 & 0xFF00) >> 8); // 3v3_mon MSB
 8000552:	19bb      	adds	r3, r7, r6
 8000554:	881b      	ldrh	r3, [r3, #0]
 8000556:	0a1b      	lsrs	r3, r3, #8
 8000558:	b29b      	uxth	r3, r3
 800055a:	b2da      	uxtb	r2, r3
 800055c:	4b49      	ldr	r3, [pc, #292]	; (8000684 <HAL_TIM_OC_DelayElapsedCallback+0x358>)
 800055e:	729a      	strb	r2, [r3, #10]
                hk_buf[11] = (PC1 & 0xFF); // 3v3_mon LSB
 8000560:	19bb      	adds	r3, r7, r6
 8000562:	881b      	ldrh	r3, [r3, #0]
 8000564:	b2da      	uxtb	r2, r3
 8000566:	4b47      	ldr	r3, [pc, #284]	; (8000684 <HAL_TIM_OC_DelayElapsedCallback+0x358>)
 8000568:	72da      	strb	r2, [r3, #11]
                hk_buf[12] = ((PC2 & 0xFF00) >> 8); // 5v_mon MSB
 800056a:	212c      	movs	r1, #44	; 0x2c
 800056c:	187b      	adds	r3, r7, r1
 800056e:	881b      	ldrh	r3, [r3, #0]
 8000570:	0a1b      	lsrs	r3, r3, #8
 8000572:	b29b      	uxth	r3, r3
 8000574:	b2da      	uxtb	r2, r3
 8000576:	4b43      	ldr	r3, [pc, #268]	; (8000684 <HAL_TIM_OC_DelayElapsedCallback+0x358>)
 8000578:	731a      	strb	r2, [r3, #12]
                hk_buf[13] = (PC2 & 0xFF); // 5v_mon LSB
 800057a:	187b      	adds	r3, r7, r1
 800057c:	881b      	ldrh	r3, [r3, #0]
 800057e:	b2da      	uxtb	r2, r3
 8000580:	4b40      	ldr	r3, [pc, #256]	; (8000684 <HAL_TIM_OC_DelayElapsedCallback+0x358>)
 8000582:	735a      	strb	r2, [r3, #13]
                hk_buf[14] = ((PA3 & 0xFF00) >> 8); // 5vref_mon MSB
 8000584:	193b      	adds	r3, r7, r4
 8000586:	881b      	ldrh	r3, [r3, #0]
 8000588:	0a1b      	lsrs	r3, r3, #8
 800058a:	b29b      	uxth	r3, r3
 800058c:	b2da      	uxtb	r2, r3
 800058e:	4b3d      	ldr	r3, [pc, #244]	; (8000684 <HAL_TIM_OC_DelayElapsedCallback+0x358>)
 8000590:	739a      	strb	r2, [r3, #14]
                hk_buf[15] = (PA3 & 0xFF); // 5vref_mon LSB
 8000592:	193b      	adds	r3, r7, r4
 8000594:	881b      	ldrh	r3, [r3, #0]
 8000596:	b2da      	uxtb	r2, r3
 8000598:	4b3a      	ldr	r3, [pc, #232]	; (8000684 <HAL_TIM_OC_DelayElapsedCallback+0x358>)
 800059a:	73da      	strb	r2, [r3, #15]
                hk_buf[16] = ((PC5 & 0xFF00) >> 8); // 15v_mon MSB
 800059c:	2026      	movs	r0, #38	; 0x26
 800059e:	183b      	adds	r3, r7, r0
 80005a0:	881b      	ldrh	r3, [r3, #0]
 80005a2:	0a1b      	lsrs	r3, r3, #8
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	b2da      	uxtb	r2, r3
 80005a8:	4b36      	ldr	r3, [pc, #216]	; (8000684 <HAL_TIM_OC_DelayElapsedCallback+0x358>)
 80005aa:	741a      	strb	r2, [r3, #16]
                hk_buf[17] = (PC5 & 0xFF); // 15v_mon LSB
 80005ac:	183b      	adds	r3, r7, r0
 80005ae:	881b      	ldrh	r3, [r3, #0]
 80005b0:	b2da      	uxtb	r2, r3
 80005b2:	4b34      	ldr	r3, [pc, #208]	; (8000684 <HAL_TIM_OC_DelayElapsedCallback+0x358>)
 80005b4:	745a      	strb	r2, [r3, #17]
                hk_buf[18] = ((PC3 & 0xFF00) >> 8); // n3v3_mon MSB
 80005b6:	212a      	movs	r1, #42	; 0x2a
 80005b8:	187b      	adds	r3, r7, r1
 80005ba:	881b      	ldrh	r3, [r3, #0]
 80005bc:	0a1b      	lsrs	r3, r3, #8
 80005be:	b29b      	uxth	r3, r3
 80005c0:	b2da      	uxtb	r2, r3
 80005c2:	4b30      	ldr	r3, [pc, #192]	; (8000684 <HAL_TIM_OC_DelayElapsedCallback+0x358>)
 80005c4:	749a      	strb	r2, [r3, #18]
                hk_buf[19] = (PC3 & 0xFF); // n3v3_mon LSB
 80005c6:	187b      	adds	r3, r7, r1
 80005c8:	881b      	ldrh	r3, [r3, #0]
 80005ca:	b2da      	uxtb	r2, r3
 80005cc:	4b2d      	ldr	r3, [pc, #180]	; (8000684 <HAL_TIM_OC_DelayElapsedCallback+0x358>)
 80005ce:	74da      	strb	r2, [r3, #19]
                hk_buf[20] = ((PC4 & 0xFF00) >> 8); // n5v_mon MSB
 80005d0:	2128      	movs	r1, #40	; 0x28
 80005d2:	187b      	adds	r3, r7, r1
 80005d4:	881b      	ldrh	r3, [r3, #0]
 80005d6:	0a1b      	lsrs	r3, r3, #8
 80005d8:	b29b      	uxth	r3, r3
 80005da:	b2da      	uxtb	r2, r3
 80005dc:	4b29      	ldr	r3, [pc, #164]	; (8000684 <HAL_TIM_OC_DelayElapsedCallback+0x358>)
 80005de:	751a      	strb	r2, [r3, #20]
                hk_buf[21] = (PC4 & 0xFF); // n5v_mon LSB
 80005e0:	187b      	adds	r3, r7, r1
 80005e2:	881b      	ldrh	r3, [r3, #0]
 80005e4:	b2da      	uxtb	r2, r3
 80005e6:	4b27      	ldr	r3, [pc, #156]	; (8000684 <HAL_TIM_OC_DelayElapsedCallback+0x358>)
 80005e8:	755a      	strb	r2, [r3, #21]
                hk_buf[22] = ((MCU_TEMP & 0xFF00) >> 8); // VSENSE MSB
 80005ea:	2124      	movs	r1, #36	; 0x24
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	881b      	ldrh	r3, [r3, #0]
 80005f0:	0a1b      	lsrs	r3, r3, #8
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	b2da      	uxtb	r2, r3
 80005f6:	4b23      	ldr	r3, [pc, #140]	; (8000684 <HAL_TIM_OC_DelayElapsedCallback+0x358>)
 80005f8:	759a      	strb	r2, [r3, #22]
                hk_buf[23] = (MCU_TEMP & 0xFF); // VSENSE LSB
 80005fa:	187b      	adds	r3, r7, r1
 80005fc:	881b      	ldrh	r3, [r3, #0]
 80005fe:	b2da      	uxtb	r2, r3
 8000600:	4b20      	ldr	r3, [pc, #128]	; (8000684 <HAL_TIM_OC_DelayElapsedCallback+0x358>)
 8000602:	75da      	strb	r2, [r3, #23]
                hk_buf[24] = ((MCU_VREF & 0xFF00) >> 8); // VREFINT MSB
 8000604:	2122      	movs	r1, #34	; 0x22
 8000606:	187b      	adds	r3, r7, r1
 8000608:	881b      	ldrh	r3, [r3, #0]
 800060a:	0a1b      	lsrs	r3, r3, #8
 800060c:	b29b      	uxth	r3, r3
 800060e:	b2da      	uxtb	r2, r3
 8000610:	4b1c      	ldr	r3, [pc, #112]	; (8000684 <HAL_TIM_OC_DelayElapsedCallback+0x358>)
 8000612:	761a      	strb	r2, [r3, #24]
                hk_buf[25] = (MCU_VREF & 0xFF); // VREFINT LSB
 8000614:	187b      	adds	r3, r7, r1
 8000616:	881b      	ldrh	r3, [r3, #0]
 8000618:	b2da      	uxtb	r2, r3
 800061a:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <HAL_TIM_OC_DelayElapsedCallback+0x358>)
 800061c:	765a      	strb	r2, [r3, #25]

                HAL_UART_Transmit(&huart1, hk_buf, sizeof(hk_buf), 100);
 800061e:	4919      	ldr	r1, [pc, #100]	; (8000684 <HAL_TIM_OC_DelayElapsedCallback+0x358>)
 8000620:	4815      	ldr	r0, [pc, #84]	; (8000678 <HAL_TIM_OC_DelayElapsedCallback+0x34c>)
 8000622:	2364      	movs	r3, #100	; 0x64
 8000624:	221a      	movs	r2, #26
 8000626:	f004 fd49 	bl	80050bc <HAL_UART_Transmit>

                hk_counter = 1;
 800062a:	4b15      	ldr	r3, [pc, #84]	; (8000680 <HAL_TIM_OC_DelayElapsedCallback+0x354>)
 800062c:	2201      	movs	r2, #1
 800062e:	601a      	str	r2, [r3, #0]

                hk_seq++;
 8000630:	4b15      	ldr	r3, [pc, #84]	; (8000688 <HAL_TIM_OC_DelayElapsedCallback+0x35c>)
 8000632:	881b      	ldrh	r3, [r3, #0]
 8000634:	3301      	adds	r3, #1
 8000636:	b29a      	uxth	r2, r3
 8000638:	4b13      	ldr	r3, [pc, #76]	; (8000688 <HAL_TIM_OC_DelayElapsedCallback+0x35c>)
 800063a:	801a      	strh	r2, [r3, #0]
        }
    }


    /* Timer 3 also called but doesn't need to do anything on IT */
}
 800063c:	e06c      	b.n	8000718 <HAL_TIM_OC_DelayElapsedCallback+0x3ec>
                hk_counter++;
 800063e:	4b10      	ldr	r3, [pc, #64]	; (8000680 <HAL_TIM_OC_DelayElapsedCallback+0x354>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	1c5a      	adds	r2, r3, #1
 8000644:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <HAL_TIM_OC_DelayElapsedCallback+0x354>)
 8000646:	601a      	str	r2, [r3, #0]
}
 8000648:	e066      	b.n	8000718 <HAL_TIM_OC_DelayElapsedCallback+0x3ec>
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	200001f0 	.word	0x200001f0
 8000650:	08006620 	.word	0x08006620
 8000654:	20000128 	.word	0x20000128
 8000658:	40013000 	.word	0x40013000
 800065c:	20000334 	.word	0x20000334
 8000660:	20000330 	.word	0x20000330
 8000664:	40007400 	.word	0x40007400
 8000668:	20000000 	.word	0x20000000
 800066c:	20000310 	.word	0x20000310
 8000670:	20000044 	.word	0x20000044
 8000674:	20000338 	.word	0x20000338
 8000678:	20000280 	.word	0x20000280
 800067c:	20000018 	.word	0x20000018
 8000680:	20000364 	.word	0x20000364
 8000684:	20000348 	.word	0x20000348
 8000688:	20000362 	.word	0x20000362
    } else if (htim == &htim2) {
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	4b24      	ldr	r3, [pc, #144]	; (8000720 <HAL_TIM_OC_DelayElapsedCallback+0x3f4>)
 8000690:	429a      	cmp	r2, r3
 8000692:	d141      	bne.n	8000718 <HAL_TIM_OC_DelayElapsedCallback+0x3ec>
        if (!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11))) { //check pin state
 8000694:	2380      	movs	r3, #128	; 0x80
 8000696:	011b      	lsls	r3, r3, #4
 8000698:	4a22      	ldr	r2, [pc, #136]	; (8000724 <HAL_TIM_OC_DelayElapsedCallback+0x3f8>)
 800069a:	0019      	movs	r1, r3
 800069c:	0010      	movs	r0, r2
 800069e:	f002 fa3d 	bl	8002b1c <HAL_GPIO_ReadPin>
 80006a2:	1e03      	subs	r3, r0, #0
 80006a4:	d138      	bne.n	8000718 <HAL_TIM_OC_DelayElapsedCallback+0x3ec>
            HAL_SPI_Transmit(&hspi2, (uint8_t * ) & WRITE, 1, 1);
 80006a6:	4920      	ldr	r1, [pc, #128]	; (8000728 <HAL_TIM_OC_DelayElapsedCallback+0x3fc>)
 80006a8:	4820      	ldr	r0, [pc, #128]	; (800072c <HAL_TIM_OC_DelayElapsedCallback+0x400>)
 80006aa:	2301      	movs	r3, #1
 80006ac:	2201      	movs	r2, #1
 80006ae:	f003 f9d3 	bl	8003a58 <HAL_SPI_Transmit>
            while (!(SPI2->SR));
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	4b1e      	ldr	r3, [pc, #120]	; (8000730 <HAL_TIM_OC_DelayElapsedCallback+0x404>)
 80006b6:	689b      	ldr	r3, [r3, #8]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d0fb      	beq.n	80006b4 <HAL_TIM_OC_DelayElapsedCallback+0x388>
            raw = SPI2->DR;
 80006bc:	4b1c      	ldr	r3, [pc, #112]	; (8000730 <HAL_TIM_OC_DelayElapsedCallback+0x404>)
 80006be:	68db      	ldr	r3, [r3, #12]
 80006c0:	001a      	movs	r2, r3
 80006c2:	4b1c      	ldr	r3, [pc, #112]	; (8000734 <HAL_TIM_OC_DelayElapsedCallback+0x408>)
 80006c4:	601a      	str	r2, [r3, #0]
            pmt_buf[0] = pmt_sync;
 80006c6:	22bb      	movs	r2, #187	; 0xbb
 80006c8:	4b1b      	ldr	r3, [pc, #108]	; (8000738 <HAL_TIM_OC_DelayElapsedCallback+0x40c>)
 80006ca:	701a      	strb	r2, [r3, #0]
            pmt_buf[1] = pmt_sync;
 80006cc:	22bb      	movs	r2, #187	; 0xbb
 80006ce:	4b1a      	ldr	r3, [pc, #104]	; (8000738 <HAL_TIM_OC_DelayElapsedCallback+0x40c>)
 80006d0:	705a      	strb	r2, [r3, #1]
            pmt_buf[2] = ((pmt_seq & 0xFF00) >> 8);
 80006d2:	4b1a      	ldr	r3, [pc, #104]	; (800073c <HAL_TIM_OC_DelayElapsedCallback+0x410>)
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	0a1b      	lsrs	r3, r3, #8
 80006d8:	b29b      	uxth	r3, r3
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	4b16      	ldr	r3, [pc, #88]	; (8000738 <HAL_TIM_OC_DelayElapsedCallback+0x40c>)
 80006de:	709a      	strb	r2, [r3, #2]
            pmt_buf[3] = (pmt_seq & 0xFF);;
 80006e0:	4b16      	ldr	r3, [pc, #88]	; (800073c <HAL_TIM_OC_DelayElapsedCallback+0x410>)
 80006e2:	881b      	ldrh	r3, [r3, #0]
 80006e4:	b2da      	uxtb	r2, r3
 80006e6:	4b14      	ldr	r3, [pc, #80]	; (8000738 <HAL_TIM_OC_DelayElapsedCallback+0x40c>)
 80006e8:	70da      	strb	r2, [r3, #3]
            pmt_buf[4] = ((raw & 0xFF00) >> 8);
 80006ea:	4b12      	ldr	r3, [pc, #72]	; (8000734 <HAL_TIM_OC_DelayElapsedCallback+0x408>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	121b      	asrs	r3, r3, #8
 80006f0:	b2da      	uxtb	r2, r3
 80006f2:	4b11      	ldr	r3, [pc, #68]	; (8000738 <HAL_TIM_OC_DelayElapsedCallback+0x40c>)
 80006f4:	711a      	strb	r2, [r3, #4]
            pmt_buf[5] = (raw & 0xFF);
 80006f6:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <HAL_TIM_OC_DelayElapsedCallback+0x408>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <HAL_TIM_OC_DelayElapsedCallback+0x40c>)
 80006fe:	715a      	strb	r2, [r3, #5]
            pmt_seq++;
 8000700:	4b0e      	ldr	r3, [pc, #56]	; (800073c <HAL_TIM_OC_DelayElapsedCallback+0x410>)
 8000702:	881b      	ldrh	r3, [r3, #0]
 8000704:	3301      	adds	r3, #1
 8000706:	b29a      	uxth	r2, r3
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <HAL_TIM_OC_DelayElapsedCallback+0x410>)
 800070a:	801a      	strh	r2, [r3, #0]
            HAL_UART_Transmit(&huart1, pmt_buf, sizeof(pmt_buf), 100);
 800070c:	490a      	ldr	r1, [pc, #40]	; (8000738 <HAL_TIM_OC_DelayElapsedCallback+0x40c>)
 800070e:	480c      	ldr	r0, [pc, #48]	; (8000740 <HAL_TIM_OC_DelayElapsedCallback+0x414>)
 8000710:	2364      	movs	r3, #100	; 0x64
 8000712:	2206      	movs	r2, #6
 8000714:	f004 fcd2 	bl	80050bc <HAL_UART_Transmit>
}
 8000718:	46c0      	nop			; (mov r8, r8)
 800071a:	46bd      	mov	sp, r7
 800071c:	b011      	add	sp, #68	; 0x44
 800071e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000720:	20000238 	.word	0x20000238
 8000724:	48000400 	.word	0x48000400
 8000728:	08006620 	.word	0x08006620
 800072c:	2000018c 	.word	0x2000018c
 8000730:	40003800 	.word	0x40003800
 8000734:	20000334 	.word	0x20000334
 8000738:	20000340 	.word	0x20000340
 800073c:	20000346 	.word	0x20000346
 8000740:	20000280 	.word	0x20000280

08000744 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	char sleepChar = Rx_data;
 800074c:	4a0c      	ldr	r2, [pc, #48]	; (8000780 <HAL_UART_RxCpltCallback+0x3c>)
 800074e:	230f      	movs	r3, #15
 8000750:	18fb      	adds	r3, r7, r3
 8000752:	701a      	strb	r2, [r3, #0]
	if (Rx_data[0] == 's') { // should be "¶" in the future
 8000754:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <HAL_UART_RxCpltCallback+0x3c>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b73      	cmp	r3, #115	; 0x73
 800075a:	d107      	bne.n	800076c <HAL_UART_RxCpltCallback+0x28>
		HAL_SuspendTick();
 800075c:	f001 f8e2 	bl	8001924 <HAL_SuspendTick>
		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000760:	2101      	movs	r1, #1
 8000762:	2001      	movs	r0, #1
 8000764:	f002 fb42 	bl	8002dec <HAL_PWR_EnterSTOPMode>
		NVIC_SystemReset();
 8000768:	f7ff fd5a 	bl	8000220 <__NVIC_SystemReset>
	}
	HAL_UART_Receive_IT(&huart1, Rx_data, 1);
 800076c:	4904      	ldr	r1, [pc, #16]	; (8000780 <HAL_UART_RxCpltCallback+0x3c>)
 800076e:	4b05      	ldr	r3, [pc, #20]	; (8000784 <HAL_UART_RxCpltCallback+0x40>)
 8000770:	2201      	movs	r2, #1
 8000772:	0018      	movs	r0, r3
 8000774:	f004 fd4b 	bl	800520e <HAL_UART_Receive_IT>
}
 8000778:	46c0      	nop			; (mov r8, r8)
 800077a:	46bd      	mov	sp, r7
 800077c:	b004      	add	sp, #16
 800077e:	bd80      	pop	{r7, pc}
 8000780:	2000030c 	.word	0x2000030c
 8000784:	20000280 	.word	0x20000280

08000788 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800078e:	f001 f865 	bl	800185c <HAL_Init>
  float temp_c;

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000792:	f000 f86d 	bl	8000870 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000796:	f000 fc57 	bl	8001048 <MX_GPIO_Init>
  MX_DMA_Init();
 800079a:	f000 fc37 	bl	800100c <MX_DMA_Init>
  MX_SPI2_Init();
 800079e:	f000 fa7b 	bl	8000c98 <MX_SPI2_Init>
  MX_TIM1_Init();
 80007a2:	f000 fab9 	bl	8000d18 <MX_TIM1_Init>
  MX_TIM2_Init();
 80007a6:	f000 fb6f 	bl	8000e88 <MX_TIM2_Init>
  MX_SPI1_Init();
 80007aa:	f000 fa35 	bl	8000c18 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80007ae:	f000 fbed 	bl	8000f8c <MX_USART1_UART_Init>
  MX_DAC1_Init();
 80007b2:	f000 f9bf 	bl	8000b34 <MX_DAC1_Init>
  MX_ADC_Init();
 80007b6:	f000 f8c5 	bl	8000944 <MX_ADC_Init>
  MX_I2C1_Init();
 80007ba:	f000 f9ed 	bl	8000b98 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

    HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80007be:	4b26      	ldr	r3, [pc, #152]	; (8000858 <main+0xd0>)
 80007c0:	2100      	movs	r1, #0
 80007c2:	0018      	movs	r0, r3
 80007c4:	f001 fdeb 	bl	800239e <HAL_DAC_Start>


    /* Start Timers with OC & Interrupt */
    HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 80007c8:	4b24      	ldr	r3, [pc, #144]	; (800085c <main+0xd4>)
 80007ca:	2100      	movs	r1, #0
 80007cc:	0018      	movs	r0, r3
 80007ce:	f003 fcb9 	bl	8004144 <HAL_TIM_OC_Start_IT>
    HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 80007d2:	4b23      	ldr	r3, [pc, #140]	; (8000860 <main+0xd8>)
 80007d4:	210c      	movs	r1, #12
 80007d6:	0018      	movs	r0, r3
 80007d8:	f003 fcb4 	bl	8004144 <HAL_TIM_OC_Start_IT>


    while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 80007dc:	46c0      	nop			; (mov r8, r8)
 80007de:	4b21      	ldr	r3, [pc, #132]	; (8000864 <main+0xdc>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	69da      	ldr	r2, [r3, #28]
 80007e4:	2380      	movs	r3, #128	; 0x80
 80007e6:	025b      	lsls	r3, r3, #9
 80007e8:	401a      	ands	r2, r3
 80007ea:	2380      	movs	r3, #128	; 0x80
 80007ec:	025b      	lsls	r3, r3, #9
 80007ee:	429a      	cmp	r2, r3
 80007f0:	d0f5      	beq.n	80007de <main+0x56>
    while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <main+0xdc>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	69da      	ldr	r2, [r3, #28]
 80007fa:	2380      	movs	r3, #128	; 0x80
 80007fc:	03db      	lsls	r3, r3, #15
 80007fe:	401a      	ands	r2, r3
 8000800:	2380      	movs	r3, #128	; 0x80
 8000802:	03db      	lsls	r3, r3, #15
 8000804:	429a      	cmp	r2, r3
 8000806:	d1f5      	bne.n	80007f4 <main+0x6c>

    WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_ADDRESS;
 8000808:	4b17      	ldr	r3, [pc, #92]	; (8000868 <main+0xe0>)
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
    WakeUpSelection.AddressLength = UART_ADDRESS_DETECT_7B;
 800080e:	4b16      	ldr	r3, [pc, #88]	; (8000868 <main+0xe0>)
 8000810:	2210      	movs	r2, #16
 8000812:	809a      	strh	r2, [r3, #4]
    WakeUpSelection.Address = 0x23; // send "£"
 8000814:	4b14      	ldr	r3, [pc, #80]	; (8000868 <main+0xe0>)
 8000816:	2223      	movs	r2, #35	; 0x23
 8000818:	719a      	strb	r2, [r3, #6]

    if (HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection) != HAL_OK) {
 800081a:	4b13      	ldr	r3, [pc, #76]	; (8000868 <main+0xe0>)
 800081c:	4811      	ldr	r0, [pc, #68]	; (8000864 <main+0xdc>)
 800081e:	6819      	ldr	r1, [r3, #0]
 8000820:	685a      	ldr	r2, [r3, #4]
 8000822:	f005 fdf9 	bl	8006418 <HAL_UARTEx_StopModeWakeUpSourceConfig>
 8000826:	1e03      	subs	r3, r0, #0
 8000828:	d001      	beq.n	800082e <main+0xa6>
        Error_Handler();
 800082a:	f000 fc8d 	bl	8001148 <Error_Handler>
    }
    /* Enable the LPUART Wake UP from stop mode Interrupt */
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 800082e:	4b0d      	ldr	r3, [pc, #52]	; (8000864 <main+0xdc>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	689a      	ldr	r2, [r3, #8]
 8000834:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <main+0xdc>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2180      	movs	r1, #128	; 0x80
 800083a:	03c9      	lsls	r1, r1, #15
 800083c:	430a      	orrs	r2, r1
 800083e:	609a      	str	r2, [r3, #8]
    /* enable MCU wake-up by LPUART */
    HAL_UARTEx_EnableStopMode(&huart1);
 8000840:	4b08      	ldr	r3, [pc, #32]	; (8000864 <main+0xdc>)
 8000842:	0018      	movs	r0, r3
 8000844:	f005 fe4e 	bl	80064e4 <HAL_UARTEx_EnableStopMode>
    HAL_UART_Receive_IT(&huart1, Rx_data, 1);
 8000848:	4908      	ldr	r1, [pc, #32]	; (800086c <main+0xe4>)
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <main+0xdc>)
 800084c:	2201      	movs	r2, #1
 800084e:	0018      	movs	r0, r3
 8000850:	f004 fcdd 	bl	800520e <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1) {
 8000854:	e7fe      	b.n	8000854 <main+0xcc>
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	200000c8 	.word	0x200000c8
 800085c:	200001f0 	.word	0x200001f0
 8000860:	20000238 	.word	0x20000238
 8000864:	20000280 	.word	0x20000280
 8000868:	20000304 	.word	0x20000304
 800086c:	2000030c 	.word	0x2000030c

08000870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000870:	b590      	push	{r4, r7, lr}
 8000872:	b097      	sub	sp, #92	; 0x5c
 8000874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000876:	2428      	movs	r4, #40	; 0x28
 8000878:	193b      	adds	r3, r7, r4
 800087a:	0018      	movs	r0, r3
 800087c:	2330      	movs	r3, #48	; 0x30
 800087e:	001a      	movs	r2, r3
 8000880:	2100      	movs	r1, #0
 8000882:	f005 fea9 	bl	80065d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000886:	2318      	movs	r3, #24
 8000888:	18fb      	adds	r3, r7, r3
 800088a:	0018      	movs	r0, r3
 800088c:	2310      	movs	r3, #16
 800088e:	001a      	movs	r2, r3
 8000890:	2100      	movs	r1, #0
 8000892:	f005 fea1 	bl	80065d8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	0018      	movs	r0, r3
 800089a:	2314      	movs	r3, #20
 800089c:	001a      	movs	r2, r3
 800089e:	2100      	movs	r1, #0
 80008a0:	f005 fe9a 	bl	80065d8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80008a4:	0021      	movs	r1, r4
 80008a6:	187b      	adds	r3, r7, r1
 80008a8:	2212      	movs	r2, #18
 80008aa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008ac:	187b      	adds	r3, r7, r1
 80008ae:	2201      	movs	r2, #1
 80008b0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80008b2:	187b      	adds	r3, r7, r1
 80008b4:	2201      	movs	r2, #1
 80008b6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008b8:	187b      	adds	r3, r7, r1
 80008ba:	2210      	movs	r2, #16
 80008bc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80008be:	187b      	adds	r3, r7, r1
 80008c0:	2210      	movs	r2, #16
 80008c2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c4:	187b      	adds	r3, r7, r1
 80008c6:	2202      	movs	r2, #2
 80008c8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008ca:	187b      	adds	r3, r7, r1
 80008cc:	2200      	movs	r2, #0
 80008ce:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80008d0:	187b      	adds	r3, r7, r1
 80008d2:	22a0      	movs	r2, #160	; 0xa0
 80008d4:	0392      	lsls	r2, r2, #14
 80008d6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80008d8:	187b      	adds	r3, r7, r1
 80008da:	2200      	movs	r2, #0
 80008dc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	0018      	movs	r0, r3
 80008e2:	f002 fab7 	bl	8002e54 <HAL_RCC_OscConfig>
 80008e6:	1e03      	subs	r3, r0, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80008ea:	f000 fc2d 	bl	8001148 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ee:	2118      	movs	r1, #24
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	2207      	movs	r2, #7
 80008f4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f6:	187b      	adds	r3, r7, r1
 80008f8:	2202      	movs	r2, #2
 80008fa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008fc:	187b      	adds	r3, r7, r1
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000902:	187b      	adds	r3, r7, r1
 8000904:	2200      	movs	r2, #0
 8000906:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000908:	187b      	adds	r3, r7, r1
 800090a:	2101      	movs	r1, #1
 800090c:	0018      	movs	r0, r3
 800090e:	f002 fdbb 	bl	8003488 <HAL_RCC_ClockConfig>
 8000912:	1e03      	subs	r3, r0, #0
 8000914:	d001      	beq.n	800091a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000916:	f000 fc17 	bl	8001148 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	2221      	movs	r2, #33	; 0x21
 800091e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	2203      	movs	r2, #3
 8000924:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	2200      	movs	r2, #0
 800092a:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	0018      	movs	r0, r3
 8000930:	f002 fefc 	bl	800372c <HAL_RCCEx_PeriphCLKConfig>
 8000934:	1e03      	subs	r3, r0, #0
 8000936:	d001      	beq.n	800093c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000938:	f000 fc06 	bl	8001148 <Error_Handler>
  }
}
 800093c:	46c0      	nop			; (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	b017      	add	sp, #92	; 0x5c
 8000942:	bd90      	pop	{r4, r7, pc}

08000944 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	0018      	movs	r0, r3
 800094e:	230c      	movs	r3, #12
 8000950:	001a      	movs	r2, r3
 8000952:	2100      	movs	r1, #0
 8000954:	f005 fe40 	bl	80065d8 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000958:	4b74      	ldr	r3, [pc, #464]	; (8000b2c <MX_ADC_Init+0x1e8>)
 800095a:	4a75      	ldr	r2, [pc, #468]	; (8000b30 <MX_ADC_Init+0x1ec>)
 800095c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800095e:	4b73      	ldr	r3, [pc, #460]	; (8000b2c <MX_ADC_Init+0x1e8>)
 8000960:	2200      	movs	r2, #0
 8000962:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000964:	4b71      	ldr	r3, [pc, #452]	; (8000b2c <MX_ADC_Init+0x1e8>)
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800096a:	4b70      	ldr	r3, [pc, #448]	; (8000b2c <MX_ADC_Init+0x1e8>)
 800096c:	2200      	movs	r2, #0
 800096e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000970:	4b6e      	ldr	r3, [pc, #440]	; (8000b2c <MX_ADC_Init+0x1e8>)
 8000972:	2201      	movs	r2, #1
 8000974:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000976:	4b6d      	ldr	r3, [pc, #436]	; (8000b2c <MX_ADC_Init+0x1e8>)
 8000978:	2204      	movs	r2, #4
 800097a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800097c:	4b6b      	ldr	r3, [pc, #428]	; (8000b2c <MX_ADC_Init+0x1e8>)
 800097e:	2200      	movs	r2, #0
 8000980:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000982:	4b6a      	ldr	r3, [pc, #424]	; (8000b2c <MX_ADC_Init+0x1e8>)
 8000984:	2200      	movs	r2, #0
 8000986:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000988:	4b68      	ldr	r3, [pc, #416]	; (8000b2c <MX_ADC_Init+0x1e8>)
 800098a:	2200      	movs	r2, #0
 800098c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800098e:	4b67      	ldr	r3, [pc, #412]	; (8000b2c <MX_ADC_Init+0x1e8>)
 8000990:	2200      	movs	r2, #0
 8000992:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000994:	4b65      	ldr	r3, [pc, #404]	; (8000b2c <MX_ADC_Init+0x1e8>)
 8000996:	22c2      	movs	r2, #194	; 0xc2
 8000998:	32ff      	adds	r2, #255	; 0xff
 800099a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800099c:	4b63      	ldr	r3, [pc, #396]	; (8000b2c <MX_ADC_Init+0x1e8>)
 800099e:	2200      	movs	r2, #0
 80009a0:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80009a2:	4b62      	ldr	r3, [pc, #392]	; (8000b2c <MX_ADC_Init+0x1e8>)
 80009a4:	2224      	movs	r2, #36	; 0x24
 80009a6:	2100      	movs	r1, #0
 80009a8:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009aa:	4b60      	ldr	r3, [pc, #384]	; (8000b2c <MX_ADC_Init+0x1e8>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80009b0:	4b5e      	ldr	r3, [pc, #376]	; (8000b2c <MX_ADC_Init+0x1e8>)
 80009b2:	0018      	movs	r0, r3
 80009b4:	f000 ffc4 	bl	8001940 <HAL_ADC_Init>
 80009b8:	1e03      	subs	r3, r0, #0
 80009ba:	d001      	beq.n	80009c0 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80009bc:	f000 fbc4 	bl	8001148 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	2280      	movs	r2, #128	; 0x80
 80009ca:	0152      	lsls	r2, r2, #5
 80009cc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	2280      	movs	r2, #128	; 0x80
 80009d2:	0552      	lsls	r2, r2, #21
 80009d4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80009d6:	1d3a      	adds	r2, r7, #4
 80009d8:	4b54      	ldr	r3, [pc, #336]	; (8000b2c <MX_ADC_Init+0x1e8>)
 80009da:	0011      	movs	r1, r2
 80009dc:	0018      	movs	r0, r3
 80009de:	f001 f989 	bl	8001cf4 <HAL_ADC_ConfigChannel>
 80009e2:	1e03      	subs	r3, r0, #0
 80009e4:	d001      	beq.n	80009ea <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80009e6:	f000 fbaf 	bl	8001148 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	2201      	movs	r2, #1
 80009ee:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80009f0:	1d3a      	adds	r2, r7, #4
 80009f2:	4b4e      	ldr	r3, [pc, #312]	; (8000b2c <MX_ADC_Init+0x1e8>)
 80009f4:	0011      	movs	r1, r2
 80009f6:	0018      	movs	r0, r3
 80009f8:	f001 f97c 	bl	8001cf4 <HAL_ADC_ConfigChannel>
 80009fc:	1e03      	subs	r3, r0, #0
 80009fe:	d001      	beq.n	8000a04 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8000a00:	f000 fba2 	bl	8001148 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	2202      	movs	r2, #2
 8000a08:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a0a:	1d3a      	adds	r2, r7, #4
 8000a0c:	4b47      	ldr	r3, [pc, #284]	; (8000b2c <MX_ADC_Init+0x1e8>)
 8000a0e:	0011      	movs	r1, r2
 8000a10:	0018      	movs	r0, r3
 8000a12:	f001 f96f 	bl	8001cf4 <HAL_ADC_ConfigChannel>
 8000a16:	1e03      	subs	r3, r0, #0
 8000a18:	d001      	beq.n	8000a1e <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8000a1a:	f000 fb95 	bl	8001148 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	2203      	movs	r2, #3
 8000a22:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a24:	1d3a      	adds	r2, r7, #4
 8000a26:	4b41      	ldr	r3, [pc, #260]	; (8000b2c <MX_ADC_Init+0x1e8>)
 8000a28:	0011      	movs	r1, r2
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f001 f962 	bl	8001cf4 <HAL_ADC_ConfigChannel>
 8000a30:	1e03      	subs	r3, r0, #0
 8000a32:	d001      	beq.n	8000a38 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 8000a34:	f000 fb88 	bl	8001148 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	2207      	movs	r2, #7
 8000a3c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a3e:	1d3a      	adds	r2, r7, #4
 8000a40:	4b3a      	ldr	r3, [pc, #232]	; (8000b2c <MX_ADC_Init+0x1e8>)
 8000a42:	0011      	movs	r1, r2
 8000a44:	0018      	movs	r0, r3
 8000a46:	f001 f955 	bl	8001cf4 <HAL_ADC_ConfigChannel>
 8000a4a:	1e03      	subs	r3, r0, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 8000a4e:	f000 fb7b 	bl	8001148 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	2208      	movs	r2, #8
 8000a56:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a58:	1d3a      	adds	r2, r7, #4
 8000a5a:	4b34      	ldr	r3, [pc, #208]	; (8000b2c <MX_ADC_Init+0x1e8>)
 8000a5c:	0011      	movs	r1, r2
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f001 f948 	bl	8001cf4 <HAL_ADC_ConfigChannel>
 8000a64:	1e03      	subs	r3, r0, #0
 8000a66:	d001      	beq.n	8000a6c <MX_ADC_Init+0x128>
  {
    Error_Handler();
 8000a68:	f000 fb6e 	bl	8001148 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	2209      	movs	r2, #9
 8000a70:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a72:	1d3a      	adds	r2, r7, #4
 8000a74:	4b2d      	ldr	r3, [pc, #180]	; (8000b2c <MX_ADC_Init+0x1e8>)
 8000a76:	0011      	movs	r1, r2
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f001 f93b 	bl	8001cf4 <HAL_ADC_ConfigChannel>
 8000a7e:	1e03      	subs	r3, r0, #0
 8000a80:	d001      	beq.n	8000a86 <MX_ADC_Init+0x142>
  {
    Error_Handler();
 8000a82:	f000 fb61 	bl	8001148 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	220a      	movs	r2, #10
 8000a8a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a8c:	1d3a      	adds	r2, r7, #4
 8000a8e:	4b27      	ldr	r3, [pc, #156]	; (8000b2c <MX_ADC_Init+0x1e8>)
 8000a90:	0011      	movs	r1, r2
 8000a92:	0018      	movs	r0, r3
 8000a94:	f001 f92e 	bl	8001cf4 <HAL_ADC_ConfigChannel>
 8000a98:	1e03      	subs	r3, r0, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_ADC_Init+0x15c>
  {
    Error_Handler();
 8000a9c:	f000 fb54 	bl	8001148 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	220b      	movs	r2, #11
 8000aa4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000aa6:	1d3a      	adds	r2, r7, #4
 8000aa8:	4b20      	ldr	r3, [pc, #128]	; (8000b2c <MX_ADC_Init+0x1e8>)
 8000aaa:	0011      	movs	r1, r2
 8000aac:	0018      	movs	r0, r3
 8000aae:	f001 f921 	bl	8001cf4 <HAL_ADC_ConfigChannel>
 8000ab2:	1e03      	subs	r3, r0, #0
 8000ab4:	d001      	beq.n	8000aba <MX_ADC_Init+0x176>
  {
    Error_Handler();
 8000ab6:	f000 fb47 	bl	8001148 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	220c      	movs	r2, #12
 8000abe:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ac0:	1d3a      	adds	r2, r7, #4
 8000ac2:	4b1a      	ldr	r3, [pc, #104]	; (8000b2c <MX_ADC_Init+0x1e8>)
 8000ac4:	0011      	movs	r1, r2
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f001 f914 	bl	8001cf4 <HAL_ADC_ConfigChannel>
 8000acc:	1e03      	subs	r3, r0, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_ADC_Init+0x190>
  {
    Error_Handler();
 8000ad0:	f000 fb3a 	bl	8001148 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	220d      	movs	r2, #13
 8000ad8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ada:	1d3a      	adds	r2, r7, #4
 8000adc:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <MX_ADC_Init+0x1e8>)
 8000ade:	0011      	movs	r1, r2
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f001 f907 	bl	8001cf4 <HAL_ADC_ConfigChannel>
 8000ae6:	1e03      	subs	r3, r0, #0
 8000ae8:	d001      	beq.n	8000aee <MX_ADC_Init+0x1aa>
  {
    Error_Handler();
 8000aea:	f000 fb2d 	bl	8001148 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000aee:	1d3b      	adds	r3, r7, #4
 8000af0:	220e      	movs	r2, #14
 8000af2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000af4:	1d3a      	adds	r2, r7, #4
 8000af6:	4b0d      	ldr	r3, [pc, #52]	; (8000b2c <MX_ADC_Init+0x1e8>)
 8000af8:	0011      	movs	r1, r2
 8000afa:	0018      	movs	r0, r3
 8000afc:	f001 f8fa 	bl	8001cf4 <HAL_ADC_ConfigChannel>
 8000b00:	1e03      	subs	r3, r0, #0
 8000b02:	d001      	beq.n	8000b08 <MX_ADC_Init+0x1c4>
  {
    Error_Handler();
 8000b04:	f000 fb20 	bl	8001148 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	220f      	movs	r2, #15
 8000b0c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b0e:	1d3a      	adds	r2, r7, #4
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <MX_ADC_Init+0x1e8>)
 8000b12:	0011      	movs	r1, r2
 8000b14:	0018      	movs	r0, r3
 8000b16:	f001 f8ed 	bl	8001cf4 <HAL_ADC_ConfigChannel>
 8000b1a:	1e03      	subs	r3, r0, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_ADC_Init+0x1de>
  {
    Error_Handler();
 8000b1e:	f000 fb13 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	46bd      	mov	sp, r7
 8000b26:	b004      	add	sp, #16
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	20000044 	.word	0x20000044
 8000b30:	40012400 	.word	0x40012400

08000b34 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */
    step = 0;
 8000b3a:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <MX_DAC1_Init+0x58>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b40:	003b      	movs	r3, r7
 8000b42:	0018      	movs	r0, r3
 8000b44:	2308      	movs	r3, #8
 8000b46:	001a      	movs	r2, r3
 8000b48:	2100      	movs	r1, #0
 8000b4a:	f005 fd45 	bl	80065d8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC;
 8000b4e:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <MX_DAC1_Init+0x5c>)
 8000b50:	4a10      	ldr	r2, [pc, #64]	; (8000b94 <MX_DAC1_Init+0x60>)
 8000b52:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b54:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <MX_DAC1_Init+0x5c>)
 8000b56:	0018      	movs	r0, r3
 8000b58:	f001 fbc0 	bl	80022dc <HAL_DAC_Init>
 8000b5c:	1e03      	subs	r3, r0, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_DAC1_Init+0x30>
  {
    Error_Handler();
 8000b60:	f000 faf2 	bl	8001148 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000b64:	003b      	movs	r3, r7
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000b6a:	003b      	movs	r3, r7
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b70:	0039      	movs	r1, r7
 8000b72:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <MX_DAC1_Init+0x5c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	0018      	movs	r0, r3
 8000b78:	f001 fbd3 	bl	8002322 <HAL_DAC_ConfigChannel>
 8000b7c:	1e03      	subs	r3, r0, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_DAC1_Init+0x50>
  {
    Error_Handler();
 8000b80:	f000 fae2 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000b84:	46c0      	nop			; (mov r8, r8)
 8000b86:	46bd      	mov	sp, r7
 8000b88:	b002      	add	sp, #8
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000330 	.word	0x20000330
 8000b90:	200000c8 	.word	0x200000c8
 8000b94:	40007400 	.word	0x40007400

08000b98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b9c:	4b1b      	ldr	r3, [pc, #108]	; (8000c0c <MX_I2C1_Init+0x74>)
 8000b9e:	4a1c      	ldr	r2, [pc, #112]	; (8000c10 <MX_I2C1_Init+0x78>)
 8000ba0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000ba2:	4b1a      	ldr	r3, [pc, #104]	; (8000c0c <MX_I2C1_Init+0x74>)
 8000ba4:	4a1b      	ldr	r2, [pc, #108]	; (8000c14 <MX_I2C1_Init+0x7c>)
 8000ba6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ba8:	4b18      	ldr	r3, [pc, #96]	; (8000c0c <MX_I2C1_Init+0x74>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bae:	4b17      	ldr	r3, [pc, #92]	; (8000c0c <MX_I2C1_Init+0x74>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bb4:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <MX_I2C1_Init+0x74>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000bba:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <MX_I2C1_Init+0x74>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bc0:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <MX_I2C1_Init+0x74>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bc6:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <MX_I2C1_Init+0x74>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <MX_I2C1_Init+0x74>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <MX_I2C1_Init+0x74>)
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f001 ffdb 	bl	8002b90 <HAL_I2C_Init>
 8000bda:	1e03      	subs	r3, r0, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000bde:	f000 fab3 	bl	8001148 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000be2:	4b0a      	ldr	r3, [pc, #40]	; (8000c0c <MX_I2C1_Init+0x74>)
 8000be4:	2100      	movs	r1, #0
 8000be6:	0018      	movs	r0, r3
 8000be8:	f002 f868 	bl	8002cbc <HAL_I2CEx_ConfigAnalogFilter>
 8000bec:	1e03      	subs	r3, r0, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000bf0:	f000 faaa 	bl	8001148 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bf4:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <MX_I2C1_Init+0x74>)
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	f002 f8ab 	bl	8002d54 <HAL_I2CEx_ConfigDigitalFilter>
 8000bfe:	1e03      	subs	r3, r0, #0
 8000c00:	d001      	beq.n	8000c06 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c02:	f000 faa1 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	200000dc 	.word	0x200000dc
 8000c10:	40005400 	.word	0x40005400
 8000c14:	2000090e 	.word	0x2000090e

08000c18 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c1c:	4b1c      	ldr	r3, [pc, #112]	; (8000c90 <MX_SPI1_Init+0x78>)
 8000c1e:	4a1d      	ldr	r2, [pc, #116]	; (8000c94 <MX_SPI1_Init+0x7c>)
 8000c20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c22:	4b1b      	ldr	r3, [pc, #108]	; (8000c90 <MX_SPI1_Init+0x78>)
 8000c24:	2282      	movs	r2, #130	; 0x82
 8000c26:	0052      	lsls	r2, r2, #1
 8000c28:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000c2a:	4b19      	ldr	r3, [pc, #100]	; (8000c90 <MX_SPI1_Init+0x78>)
 8000c2c:	2280      	movs	r2, #128	; 0x80
 8000c2e:	00d2      	lsls	r2, r2, #3
 8000c30:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000c32:	4b17      	ldr	r3, [pc, #92]	; (8000c90 <MX_SPI1_Init+0x78>)
 8000c34:	22f0      	movs	r2, #240	; 0xf0
 8000c36:	0112      	lsls	r2, r2, #4
 8000c38:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c3a:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <MX_SPI1_Init+0x78>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c40:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <MX_SPI1_Init+0x78>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c46:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <MX_SPI1_Init+0x78>)
 8000c48:	2280      	movs	r2, #128	; 0x80
 8000c4a:	0092      	lsls	r2, r2, #2
 8000c4c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000c4e:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <MX_SPI1_Init+0x78>)
 8000c50:	2218      	movs	r2, #24
 8000c52:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c54:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <MX_SPI1_Init+0x78>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c5a:	4b0d      	ldr	r3, [pc, #52]	; (8000c90 <MX_SPI1_Init+0x78>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c60:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <MX_SPI1_Init+0x78>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c66:	4b0a      	ldr	r3, [pc, #40]	; (8000c90 <MX_SPI1_Init+0x78>)
 8000c68:	2207      	movs	r2, #7
 8000c6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <MX_SPI1_Init+0x78>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c72:	4b07      	ldr	r3, [pc, #28]	; (8000c90 <MX_SPI1_Init+0x78>)
 8000c74:	2208      	movs	r2, #8
 8000c76:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <MX_SPI1_Init+0x78>)
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f002 fe34 	bl	80038e8 <HAL_SPI_Init>
 8000c80:	1e03      	subs	r3, r0, #0
 8000c82:	d001      	beq.n	8000c88 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8000c84:	f000 fa60 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c88:	46c0      	nop			; (mov r8, r8)
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	20000128 	.word	0x20000128
 8000c94:	40013000 	.word	0x40013000

08000c98 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000c9c:	4b1c      	ldr	r3, [pc, #112]	; (8000d10 <MX_SPI2_Init+0x78>)
 8000c9e:	4a1d      	ldr	r2, [pc, #116]	; (8000d14 <MX_SPI2_Init+0x7c>)
 8000ca0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ca2:	4b1b      	ldr	r3, [pc, #108]	; (8000d10 <MX_SPI2_Init+0x78>)
 8000ca4:	2282      	movs	r2, #130	; 0x82
 8000ca6:	0052      	lsls	r2, r2, #1
 8000ca8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000caa:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <MX_SPI2_Init+0x78>)
 8000cac:	2280      	movs	r2, #128	; 0x80
 8000cae:	00d2      	lsls	r2, r2, #3
 8000cb0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000cb2:	4b17      	ldr	r3, [pc, #92]	; (8000d10 <MX_SPI2_Init+0x78>)
 8000cb4:	22f0      	movs	r2, #240	; 0xf0
 8000cb6:	0112      	lsls	r2, r2, #4
 8000cb8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cba:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <MX_SPI2_Init+0x78>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cc0:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <MX_SPI2_Init+0x78>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000cc6:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <MX_SPI2_Init+0x78>)
 8000cc8:	2280      	movs	r2, #128	; 0x80
 8000cca:	0092      	lsls	r2, r2, #2
 8000ccc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000cce:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <MX_SPI2_Init+0x78>)
 8000cd0:	2218      	movs	r2, #24
 8000cd2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cd4:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <MX_SPI2_Init+0x78>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cda:	4b0d      	ldr	r3, [pc, #52]	; (8000d10 <MX_SPI2_Init+0x78>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ce0:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <MX_SPI2_Init+0x78>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000ce6:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <MX_SPI2_Init+0x78>)
 8000ce8:	2207      	movs	r2, #7
 8000cea:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cec:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <MX_SPI2_Init+0x78>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cf2:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <MX_SPI2_Init+0x78>)
 8000cf4:	2208      	movs	r2, #8
 8000cf6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000cf8:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <MX_SPI2_Init+0x78>)
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f002 fdf4 	bl	80038e8 <HAL_SPI_Init>
 8000d00:	1e03      	subs	r3, r0, #0
 8000d02:	d001      	beq.n	8000d08 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8000d04:	f000 fa20 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d08:	46c0      	nop			; (mov r8, r8)
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	2000018c 	.word	0x2000018c
 8000d14:	40003800 	.word	0x40003800

08000d18 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b096      	sub	sp, #88	; 0x58
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d1e:	2348      	movs	r3, #72	; 0x48
 8000d20:	18fb      	adds	r3, r7, r3
 8000d22:	0018      	movs	r0, r3
 8000d24:	2310      	movs	r3, #16
 8000d26:	001a      	movs	r2, r3
 8000d28:	2100      	movs	r1, #0
 8000d2a:	f005 fc55 	bl	80065d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d2e:	2340      	movs	r3, #64	; 0x40
 8000d30:	18fb      	adds	r3, r7, r3
 8000d32:	0018      	movs	r0, r3
 8000d34:	2308      	movs	r3, #8
 8000d36:	001a      	movs	r2, r3
 8000d38:	2100      	movs	r1, #0
 8000d3a:	f005 fc4d 	bl	80065d8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d3e:	2324      	movs	r3, #36	; 0x24
 8000d40:	18fb      	adds	r3, r7, r3
 8000d42:	0018      	movs	r0, r3
 8000d44:	231c      	movs	r3, #28
 8000d46:	001a      	movs	r2, r3
 8000d48:	2100      	movs	r1, #0
 8000d4a:	f005 fc45 	bl	80065d8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	0018      	movs	r0, r3
 8000d52:	2320      	movs	r3, #32
 8000d54:	001a      	movs	r2, r3
 8000d56:	2100      	movs	r1, #0
 8000d58:	f005 fc3e 	bl	80065d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d5c:	4b46      	ldr	r3, [pc, #280]	; (8000e78 <MX_TIM1_Init+0x160>)
 8000d5e:	4a47      	ldr	r2, [pc, #284]	; (8000e7c <MX_TIM1_Init+0x164>)
 8000d60:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100 - 1;
 8000d62:	4b45      	ldr	r3, [pc, #276]	; (8000e78 <MX_TIM1_Init+0x160>)
 8000d64:	2263      	movs	r2, #99	; 0x63
 8000d66:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d68:	4b43      	ldr	r3, [pc, #268]	; (8000e78 <MX_TIM1_Init+0x160>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24000;
 8000d6e:	4b42      	ldr	r3, [pc, #264]	; (8000e78 <MX_TIM1_Init+0x160>)
 8000d70:	4a43      	ldr	r2, [pc, #268]	; (8000e80 <MX_TIM1_Init+0x168>)
 8000d72:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d74:	4b40      	ldr	r3, [pc, #256]	; (8000e78 <MX_TIM1_Init+0x160>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d7a:	4b3f      	ldr	r3, [pc, #252]	; (8000e78 <MX_TIM1_Init+0x160>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d80:	4b3d      	ldr	r3, [pc, #244]	; (8000e78 <MX_TIM1_Init+0x160>)
 8000d82:	2280      	movs	r2, #128	; 0x80
 8000d84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d86:	4b3c      	ldr	r3, [pc, #240]	; (8000e78 <MX_TIM1_Init+0x160>)
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f003 f933 	bl	8003ff4 <HAL_TIM_Base_Init>
 8000d8e:	1e03      	subs	r3, r0, #0
 8000d90:	d001      	beq.n	8000d96 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000d92:	f000 f9d9 	bl	8001148 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d96:	2148      	movs	r1, #72	; 0x48
 8000d98:	187b      	adds	r3, r7, r1
 8000d9a:	2280      	movs	r2, #128	; 0x80
 8000d9c:	0152      	lsls	r2, r2, #5
 8000d9e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000da0:	187a      	adds	r2, r7, r1
 8000da2:	4b35      	ldr	r3, [pc, #212]	; (8000e78 <MX_TIM1_Init+0x160>)
 8000da4:	0011      	movs	r1, r2
 8000da6:	0018      	movs	r0, r3
 8000da8:	f003 fc3a 	bl	8004620 <HAL_TIM_ConfigClockSource>
 8000dac:	1e03      	subs	r3, r0, #0
 8000dae:	d001      	beq.n	8000db4 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000db0:	f000 f9ca 	bl	8001148 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000db4:	4b30      	ldr	r3, [pc, #192]	; (8000e78 <MX_TIM1_Init+0x160>)
 8000db6:	0018      	movs	r0, r3
 8000db8:	f003 f96c 	bl	8004094 <HAL_TIM_OC_Init>
 8000dbc:	1e03      	subs	r3, r0, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000dc0:	f000 f9c2 	bl	8001148 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc4:	2140      	movs	r1, #64	; 0x40
 8000dc6:	187b      	adds	r3, r7, r1
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dcc:	187b      	adds	r3, r7, r1
 8000dce:	2200      	movs	r2, #0
 8000dd0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dd2:	187a      	adds	r2, r7, r1
 8000dd4:	4b28      	ldr	r3, [pc, #160]	; (8000e78 <MX_TIM1_Init+0x160>)
 8000dd6:	0011      	movs	r1, r2
 8000dd8:	0018      	movs	r0, r3
 8000dda:	f004 f84f 	bl	8004e7c <HAL_TIMEx_MasterConfigSynchronization>
 8000dde:	1e03      	subs	r3, r0, #0
 8000de0:	d001      	beq.n	8000de6 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8000de2:	f000 f9b1 	bl	8001148 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000de6:	2124      	movs	r1, #36	; 0x24
 8000de8:	187b      	adds	r3, r7, r1
 8000dea:	2230      	movs	r2, #48	; 0x30
 8000dec:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 12000 - 1;
 8000dee:	187b      	adds	r3, r7, r1
 8000df0:	4a24      	ldr	r2, [pc, #144]	; (8000e84 <MX_TIM1_Init+0x16c>)
 8000df2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000df4:	187b      	adds	r3, r7, r1
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000dfa:	187b      	adds	r3, r7, r1
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e00:	187b      	adds	r3, r7, r1
 8000e02:	2200      	movs	r2, #0
 8000e04:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e06:	187b      	adds	r3, r7, r1
 8000e08:	2200      	movs	r2, #0
 8000e0a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e0c:	187b      	adds	r3, r7, r1
 8000e0e:	2200      	movs	r2, #0
 8000e10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e12:	1879      	adds	r1, r7, r1
 8000e14:	4b18      	ldr	r3, [pc, #96]	; (8000e78 <MX_TIM1_Init+0x160>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	0018      	movs	r0, r3
 8000e1a:	f003 fba9 	bl	8004570 <HAL_TIM_OC_ConfigChannel>
 8000e1e:	1e03      	subs	r3, r0, #0
 8000e20:	d001      	beq.n	8000e26 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000e22:	f000 f991 	bl	8001148 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e2c:	1d3b      	adds	r3, r7, #4
 8000e2e:	2200      	movs	r2, #0
 8000e30:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	2200      	movs	r2, #0
 8000e36:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	2200      	movs	r2, #0
 8000e42:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	2280      	movs	r2, #128	; 0x80
 8000e48:	0192      	lsls	r2, r2, #6
 8000e4a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e4c:	1d3b      	adds	r3, r7, #4
 8000e4e:	2200      	movs	r2, #0
 8000e50:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e52:	1d3a      	adds	r2, r7, #4
 8000e54:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <MX_TIM1_Init+0x160>)
 8000e56:	0011      	movs	r1, r2
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f004 f86d 	bl	8004f38 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e5e:	1e03      	subs	r3, r0, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8000e62:	f000 f971 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e66:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <MX_TIM1_Init+0x160>)
 8000e68:	0018      	movs	r0, r3
 8000e6a:	f000 fbaf 	bl	80015cc <HAL_TIM_MspPostInit>

}
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	46bd      	mov	sp, r7
 8000e72:	b016      	add	sp, #88	; 0x58
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	200001f0 	.word	0x200001f0
 8000e7c:	40012c00 	.word	0x40012c00
 8000e80:	00005dc0 	.word	0x00005dc0
 8000e84:	00002edf 	.word	0x00002edf

08000e88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08e      	sub	sp, #56	; 0x38
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e8e:	2328      	movs	r3, #40	; 0x28
 8000e90:	18fb      	adds	r3, r7, r3
 8000e92:	0018      	movs	r0, r3
 8000e94:	2310      	movs	r3, #16
 8000e96:	001a      	movs	r2, r3
 8000e98:	2100      	movs	r1, #0
 8000e9a:	f005 fb9d 	bl	80065d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e9e:	2320      	movs	r3, #32
 8000ea0:	18fb      	adds	r3, r7, r3
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	2308      	movs	r3, #8
 8000ea6:	001a      	movs	r2, r3
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	f005 fb95 	bl	80065d8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	231c      	movs	r3, #28
 8000eb4:	001a      	movs	r2, r3
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	f005 fb8e 	bl	80065d8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ebc:	4b30      	ldr	r3, [pc, #192]	; (8000f80 <MX_TIM2_Init+0xf8>)
 8000ebe:	2280      	movs	r2, #128	; 0x80
 8000ec0:	05d2      	lsls	r2, r2, #23
 8000ec2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100 - 1;
 8000ec4:	4b2e      	ldr	r3, [pc, #184]	; (8000f80 <MX_TIM2_Init+0xf8>)
 8000ec6:	2263      	movs	r2, #99	; 0x63
 8000ec8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eca:	4b2d      	ldr	r3, [pc, #180]	; (8000f80 <MX_TIM2_Init+0xf8>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 30000 - 1;
 8000ed0:	4b2b      	ldr	r3, [pc, #172]	; (8000f80 <MX_TIM2_Init+0xf8>)
 8000ed2:	4a2c      	ldr	r2, [pc, #176]	; (8000f84 <MX_TIM2_Init+0xfc>)
 8000ed4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed6:	4b2a      	ldr	r3, [pc, #168]	; (8000f80 <MX_TIM2_Init+0xf8>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000edc:	4b28      	ldr	r3, [pc, #160]	; (8000f80 <MX_TIM2_Init+0xf8>)
 8000ede:	2280      	movs	r2, #128	; 0x80
 8000ee0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ee2:	4b27      	ldr	r3, [pc, #156]	; (8000f80 <MX_TIM2_Init+0xf8>)
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f003 f885 	bl	8003ff4 <HAL_TIM_Base_Init>
 8000eea:	1e03      	subs	r3, r0, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000eee:	f000 f92b 	bl	8001148 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ef2:	2128      	movs	r1, #40	; 0x28
 8000ef4:	187b      	adds	r3, r7, r1
 8000ef6:	2280      	movs	r2, #128	; 0x80
 8000ef8:	0152      	lsls	r2, r2, #5
 8000efa:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000efc:	187a      	adds	r2, r7, r1
 8000efe:	4b20      	ldr	r3, [pc, #128]	; (8000f80 <MX_TIM2_Init+0xf8>)
 8000f00:	0011      	movs	r1, r2
 8000f02:	0018      	movs	r0, r3
 8000f04:	f003 fb8c 	bl	8004620 <HAL_TIM_ConfigClockSource>
 8000f08:	1e03      	subs	r3, r0, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000f0c:	f000 f91c 	bl	8001148 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000f10:	4b1b      	ldr	r3, [pc, #108]	; (8000f80 <MX_TIM2_Init+0xf8>)
 8000f12:	0018      	movs	r0, r3
 8000f14:	f003 f8be 	bl	8004094 <HAL_TIM_OC_Init>
 8000f18:	1e03      	subs	r3, r0, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000f1c:	f000 f914 	bl	8001148 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f20:	2120      	movs	r1, #32
 8000f22:	187b      	adds	r3, r7, r1
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f28:	187b      	adds	r3, r7, r1
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f2e:	187a      	adds	r2, r7, r1
 8000f30:	4b13      	ldr	r3, [pc, #76]	; (8000f80 <MX_TIM2_Init+0xf8>)
 8000f32:	0011      	movs	r1, r2
 8000f34:	0018      	movs	r0, r3
 8000f36:	f003 ffa1 	bl	8004e7c <HAL_TIMEx_MasterConfigSynchronization>
 8000f3a:	1e03      	subs	r3, r0, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000f3e:	f000 f903 	bl	8001148 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	2230      	movs	r2, #48	; 0x30
 8000f46:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 6000 - 1;
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	4a0f      	ldr	r2, [pc, #60]	; (8000f88 <MX_TIM2_Init+0x100>)
 8000f4c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f54:	1d3b      	adds	r3, r7, #4
 8000f56:	2200      	movs	r2, #0
 8000f58:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f5a:	1d39      	adds	r1, r7, #4
 8000f5c:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <MX_TIM2_Init+0xf8>)
 8000f5e:	220c      	movs	r2, #12
 8000f60:	0018      	movs	r0, r3
 8000f62:	f003 fb05 	bl	8004570 <HAL_TIM_OC_ConfigChannel>
 8000f66:	1e03      	subs	r3, r0, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000f6a:	f000 f8ed 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f6e:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <MX_TIM2_Init+0xf8>)
 8000f70:	0018      	movs	r0, r3
 8000f72:	f000 fb2b 	bl	80015cc <HAL_TIM_MspPostInit>

}
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	b00e      	add	sp, #56	; 0x38
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	46c0      	nop			; (mov r8, r8)
 8000f80:	20000238 	.word	0x20000238
 8000f84:	0000752f 	.word	0x0000752f
 8000f88:	0000176f 	.word	0x0000176f

08000f8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */
    erpa_seq = 0;
 8000f90:	4b19      	ldr	r3, [pc, #100]	; (8000ff8 <MX_USART1_UART_Init+0x6c>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	801a      	strh	r2, [r3, #0]
    pmt_seq = 0;
 8000f96:	4b19      	ldr	r3, [pc, #100]	; (8000ffc <MX_USART1_UART_Init+0x70>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	801a      	strh	r2, [r3, #0]
    hk_seq = 0;
 8000f9c:	4b18      	ldr	r3, [pc, #96]	; (8001000 <MX_USART1_UART_Init+0x74>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	801a      	strh	r2, [r3, #0]
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fa2:	4b18      	ldr	r3, [pc, #96]	; (8001004 <MX_USART1_UART_Init+0x78>)
 8000fa4:	4a18      	ldr	r2, [pc, #96]	; (8001008 <MX_USART1_UART_Init+0x7c>)
 8000fa6:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fa8:	4b16      	ldr	r3, [pc, #88]	; (8001004 <MX_USART1_UART_Init+0x78>)
 8000faa:	22e1      	movs	r2, #225	; 0xe1
 8000fac:	0252      	lsls	r2, r2, #9
 8000fae:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb0:	4b14      	ldr	r3, [pc, #80]	; (8001004 <MX_USART1_UART_Init+0x78>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fb6:	4b13      	ldr	r3, [pc, #76]	; (8001004 <MX_USART1_UART_Init+0x78>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fbc:	4b11      	ldr	r3, [pc, #68]	; (8001004 <MX_USART1_UART_Init+0x78>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fc2:	4b10      	ldr	r3, [pc, #64]	; (8001004 <MX_USART1_UART_Init+0x78>)
 8000fc4:	220c      	movs	r2, #12
 8000fc6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <MX_USART1_UART_Init+0x78>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fce:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <MX_USART1_UART_Init+0x78>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fd4:	4b0b      	ldr	r3, [pc, #44]	; (8001004 <MX_USART1_UART_Init+0x78>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fda:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <MX_USART1_UART_Init+0x78>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <MX_USART1_UART_Init+0x78>)
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f004 f816 	bl	8005014 <HAL_UART_Init>
 8000fe8:	1e03      	subs	r3, r0, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_USART1_UART_Init+0x64>
  {
    Error_Handler();
 8000fec:	f000 f8ac 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ff0:	46c0      	nop			; (mov r8, r8)
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	46c0      	nop			; (mov r8, r8)
 8000ff8:	2000033c 	.word	0x2000033c
 8000ffc:	20000346 	.word	0x20000346
 8001000:	20000362 	.word	0x20000362
 8001004:	20000280 	.word	0x20000280
 8001008:	40013800 	.word	0x40013800

0800100c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001012:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <MX_DMA_Init+0x38>)
 8001014:	695a      	ldr	r2, [r3, #20]
 8001016:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <MX_DMA_Init+0x38>)
 8001018:	2101      	movs	r1, #1
 800101a:	430a      	orrs	r2, r1
 800101c:	615a      	str	r2, [r3, #20]
 800101e:	4b09      	ldr	r3, [pc, #36]	; (8001044 <MX_DMA_Init+0x38>)
 8001020:	695b      	ldr	r3, [r3, #20]
 8001022:	2201      	movs	r2, #1
 8001024:	4013      	ands	r3, r2
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	2100      	movs	r1, #0
 800102e:	2009      	movs	r0, #9
 8001030:	f001 f922 	bl	8002278 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001034:	2009      	movs	r0, #9
 8001036:	f001 f934 	bl	80022a2 <HAL_NVIC_EnableIRQ>

}
 800103a:	46c0      	nop			; (mov r8, r8)
 800103c:	46bd      	mov	sp, r7
 800103e:	b002      	add	sp, #8
 8001040:	bd80      	pop	{r7, pc}
 8001042:	46c0      	nop			; (mov r8, r8)
 8001044:	40021000 	.word	0x40021000

08001048 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001048:	b590      	push	{r4, r7, lr}
 800104a:	b08b      	sub	sp, #44	; 0x2c
 800104c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104e:	2414      	movs	r4, #20
 8001050:	193b      	adds	r3, r7, r4
 8001052:	0018      	movs	r0, r3
 8001054:	2314      	movs	r3, #20
 8001056:	001a      	movs	r2, r3
 8001058:	2100      	movs	r1, #0
 800105a:	f005 fabd 	bl	80065d8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800105e:	4b37      	ldr	r3, [pc, #220]	; (800113c <MX_GPIO_Init+0xf4>)
 8001060:	695a      	ldr	r2, [r3, #20]
 8001062:	4b36      	ldr	r3, [pc, #216]	; (800113c <MX_GPIO_Init+0xf4>)
 8001064:	2180      	movs	r1, #128	; 0x80
 8001066:	0309      	lsls	r1, r1, #12
 8001068:	430a      	orrs	r2, r1
 800106a:	615a      	str	r2, [r3, #20]
 800106c:	4b33      	ldr	r3, [pc, #204]	; (800113c <MX_GPIO_Init+0xf4>)
 800106e:	695a      	ldr	r2, [r3, #20]
 8001070:	2380      	movs	r3, #128	; 0x80
 8001072:	031b      	lsls	r3, r3, #12
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
 8001078:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800107a:	4b30      	ldr	r3, [pc, #192]	; (800113c <MX_GPIO_Init+0xf4>)
 800107c:	695a      	ldr	r2, [r3, #20]
 800107e:	4b2f      	ldr	r3, [pc, #188]	; (800113c <MX_GPIO_Init+0xf4>)
 8001080:	2180      	movs	r1, #128	; 0x80
 8001082:	03c9      	lsls	r1, r1, #15
 8001084:	430a      	orrs	r2, r1
 8001086:	615a      	str	r2, [r3, #20]
 8001088:	4b2c      	ldr	r3, [pc, #176]	; (800113c <MX_GPIO_Init+0xf4>)
 800108a:	695a      	ldr	r2, [r3, #20]
 800108c:	2380      	movs	r3, #128	; 0x80
 800108e:	03db      	lsls	r3, r3, #15
 8001090:	4013      	ands	r3, r2
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	4b29      	ldr	r3, [pc, #164]	; (800113c <MX_GPIO_Init+0xf4>)
 8001098:	695a      	ldr	r2, [r3, #20]
 800109a:	4b28      	ldr	r3, [pc, #160]	; (800113c <MX_GPIO_Init+0xf4>)
 800109c:	2180      	movs	r1, #128	; 0x80
 800109e:	0289      	lsls	r1, r1, #10
 80010a0:	430a      	orrs	r2, r1
 80010a2:	615a      	str	r2, [r3, #20]
 80010a4:	4b25      	ldr	r3, [pc, #148]	; (800113c <MX_GPIO_Init+0xf4>)
 80010a6:	695a      	ldr	r2, [r3, #20]
 80010a8:	2380      	movs	r3, #128	; 0x80
 80010aa:	029b      	lsls	r3, r3, #10
 80010ac:	4013      	ands	r3, r2
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b2:	4b22      	ldr	r3, [pc, #136]	; (800113c <MX_GPIO_Init+0xf4>)
 80010b4:	695a      	ldr	r2, [r3, #20]
 80010b6:	4b21      	ldr	r3, [pc, #132]	; (800113c <MX_GPIO_Init+0xf4>)
 80010b8:	2180      	movs	r1, #128	; 0x80
 80010ba:	02c9      	lsls	r1, r1, #11
 80010bc:	430a      	orrs	r2, r1
 80010be:	615a      	str	r2, [r3, #20]
 80010c0:	4b1e      	ldr	r3, [pc, #120]	; (800113c <MX_GPIO_Init+0xf4>)
 80010c2:	695a      	ldr	r2, [r3, #20]
 80010c4:	2380      	movs	r3, #128	; 0x80
 80010c6:	02db      	lsls	r3, r3, #11
 80010c8:	4013      	ands	r3, r2
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|BLUE_LED_Pin
 80010ce:	239f      	movs	r3, #159	; 0x9f
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	481b      	ldr	r0, [pc, #108]	; (8001140 <MX_GPIO_Init+0xf8>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	0019      	movs	r1, r3
 80010d8:	f001 fd3d 	bl	8002b56 <HAL_GPIO_WritePin>
                          |GREEN_LED_Pin|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80010dc:	4b19      	ldr	r3, [pc, #100]	; (8001144 <MX_GPIO_Init+0xfc>)
 80010de:	2200      	movs	r2, #0
 80010e0:	21c0      	movs	r1, #192	; 0xc0
 80010e2:	0018      	movs	r0, r3
 80010e4:	f001 fd37 	bl	8002b56 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 BLUE_LED_Pin
                           GREEN_LED_Pin PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|BLUE_LED_Pin
 80010e8:	193b      	adds	r3, r7, r4
 80010ea:	229f      	movs	r2, #159	; 0x9f
 80010ec:	0192      	lsls	r2, r2, #6
 80010ee:	601a      	str	r2, [r3, #0]
                          |GREEN_LED_Pin|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f0:	193b      	adds	r3, r7, r4
 80010f2:	2201      	movs	r2, #1
 80010f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	193b      	adds	r3, r7, r4
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fc:	193b      	adds	r3, r7, r4
 80010fe:	2200      	movs	r2, #0
 8001100:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001102:	193b      	adds	r3, r7, r4
 8001104:	4a0e      	ldr	r2, [pc, #56]	; (8001140 <MX_GPIO_Init+0xf8>)
 8001106:	0019      	movs	r1, r3
 8001108:	0010      	movs	r0, r2
 800110a:	f001 fb97 	bl	800283c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800110e:	0021      	movs	r1, r4
 8001110:	187b      	adds	r3, r7, r1
 8001112:	22c0      	movs	r2, #192	; 0xc0
 8001114:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001116:	187b      	adds	r3, r7, r1
 8001118:	2201      	movs	r2, #1
 800111a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	187b      	adds	r3, r7, r1
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001122:	187b      	adds	r3, r7, r1
 8001124:	2200      	movs	r2, #0
 8001126:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001128:	187b      	adds	r3, r7, r1
 800112a:	4a06      	ldr	r2, [pc, #24]	; (8001144 <MX_GPIO_Init+0xfc>)
 800112c:	0019      	movs	r1, r3
 800112e:	0010      	movs	r0, r2
 8001130:	f001 fb84 	bl	800283c <HAL_GPIO_Init>

}
 8001134:	46c0      	nop			; (mov r8, r8)
 8001136:	46bd      	mov	sp, r7
 8001138:	b00b      	add	sp, #44	; 0x2c
 800113a:	bd90      	pop	{r4, r7, pc}
 800113c:	40021000 	.word	0x40021000
 8001140:	48000800 	.word	0x48000800
 8001144:	48001400 	.word	0x48001400

08001148 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800114c:	b672      	cpsid	i
}
 800114e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8001150:	e7fe      	b.n	8001150 <Error_Handler+0x8>
	...

08001154 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115a:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <HAL_MspInit+0x44>)
 800115c:	699a      	ldr	r2, [r3, #24]
 800115e:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <HAL_MspInit+0x44>)
 8001160:	2101      	movs	r1, #1
 8001162:	430a      	orrs	r2, r1
 8001164:	619a      	str	r2, [r3, #24]
 8001166:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <HAL_MspInit+0x44>)
 8001168:	699b      	ldr	r3, [r3, #24]
 800116a:	2201      	movs	r2, #1
 800116c:	4013      	ands	r3, r2
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001172:	4b09      	ldr	r3, [pc, #36]	; (8001198 <HAL_MspInit+0x44>)
 8001174:	69da      	ldr	r2, [r3, #28]
 8001176:	4b08      	ldr	r3, [pc, #32]	; (8001198 <HAL_MspInit+0x44>)
 8001178:	2180      	movs	r1, #128	; 0x80
 800117a:	0549      	lsls	r1, r1, #21
 800117c:	430a      	orrs	r2, r1
 800117e:	61da      	str	r2, [r3, #28]
 8001180:	4b05      	ldr	r3, [pc, #20]	; (8001198 <HAL_MspInit+0x44>)
 8001182:	69da      	ldr	r2, [r3, #28]
 8001184:	2380      	movs	r3, #128	; 0x80
 8001186:	055b      	lsls	r3, r3, #21
 8001188:	4013      	ands	r3, r2
 800118a:	603b      	str	r3, [r7, #0]
 800118c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	46bd      	mov	sp, r7
 8001192:	b002      	add	sp, #8
 8001194:	bd80      	pop	{r7, pc}
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	40021000 	.word	0x40021000

0800119c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800119c:	b590      	push	{r4, r7, lr}
 800119e:	b08d      	sub	sp, #52	; 0x34
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	241c      	movs	r4, #28
 80011a6:	193b      	adds	r3, r7, r4
 80011a8:	0018      	movs	r0, r3
 80011aa:	2314      	movs	r3, #20
 80011ac:	001a      	movs	r2, r3
 80011ae:	2100      	movs	r1, #0
 80011b0:	f005 fa12 	bl	80065d8 <memset>
  if(hadc->Instance==ADC1)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a4a      	ldr	r2, [pc, #296]	; (80012e4 <HAL_ADC_MspInit+0x148>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d000      	beq.n	80011c0 <HAL_ADC_MspInit+0x24>
 80011be:	e08d      	b.n	80012dc <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011c0:	4b49      	ldr	r3, [pc, #292]	; (80012e8 <HAL_ADC_MspInit+0x14c>)
 80011c2:	699a      	ldr	r2, [r3, #24]
 80011c4:	4b48      	ldr	r3, [pc, #288]	; (80012e8 <HAL_ADC_MspInit+0x14c>)
 80011c6:	2180      	movs	r1, #128	; 0x80
 80011c8:	0089      	lsls	r1, r1, #2
 80011ca:	430a      	orrs	r2, r1
 80011cc:	619a      	str	r2, [r3, #24]
 80011ce:	4b46      	ldr	r3, [pc, #280]	; (80012e8 <HAL_ADC_MspInit+0x14c>)
 80011d0:	699a      	ldr	r2, [r3, #24]
 80011d2:	2380      	movs	r3, #128	; 0x80
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	4013      	ands	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
 80011da:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011dc:	4b42      	ldr	r3, [pc, #264]	; (80012e8 <HAL_ADC_MspInit+0x14c>)
 80011de:	695a      	ldr	r2, [r3, #20]
 80011e0:	4b41      	ldr	r3, [pc, #260]	; (80012e8 <HAL_ADC_MspInit+0x14c>)
 80011e2:	2180      	movs	r1, #128	; 0x80
 80011e4:	0309      	lsls	r1, r1, #12
 80011e6:	430a      	orrs	r2, r1
 80011e8:	615a      	str	r2, [r3, #20]
 80011ea:	4b3f      	ldr	r3, [pc, #252]	; (80012e8 <HAL_ADC_MspInit+0x14c>)
 80011ec:	695a      	ldr	r2, [r3, #20]
 80011ee:	2380      	movs	r3, #128	; 0x80
 80011f0:	031b      	lsls	r3, r3, #12
 80011f2:	4013      	ands	r3, r2
 80011f4:	617b      	str	r3, [r7, #20]
 80011f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f8:	4b3b      	ldr	r3, [pc, #236]	; (80012e8 <HAL_ADC_MspInit+0x14c>)
 80011fa:	695a      	ldr	r2, [r3, #20]
 80011fc:	4b3a      	ldr	r3, [pc, #232]	; (80012e8 <HAL_ADC_MspInit+0x14c>)
 80011fe:	2180      	movs	r1, #128	; 0x80
 8001200:	0289      	lsls	r1, r1, #10
 8001202:	430a      	orrs	r2, r1
 8001204:	615a      	str	r2, [r3, #20]
 8001206:	4b38      	ldr	r3, [pc, #224]	; (80012e8 <HAL_ADC_MspInit+0x14c>)
 8001208:	695a      	ldr	r2, [r3, #20]
 800120a:	2380      	movs	r3, #128	; 0x80
 800120c:	029b      	lsls	r3, r3, #10
 800120e:	4013      	ands	r3, r2
 8001210:	613b      	str	r3, [r7, #16]
 8001212:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001214:	4b34      	ldr	r3, [pc, #208]	; (80012e8 <HAL_ADC_MspInit+0x14c>)
 8001216:	695a      	ldr	r2, [r3, #20]
 8001218:	4b33      	ldr	r3, [pc, #204]	; (80012e8 <HAL_ADC_MspInit+0x14c>)
 800121a:	2180      	movs	r1, #128	; 0x80
 800121c:	02c9      	lsls	r1, r1, #11
 800121e:	430a      	orrs	r2, r1
 8001220:	615a      	str	r2, [r3, #20]
 8001222:	4b31      	ldr	r3, [pc, #196]	; (80012e8 <HAL_ADC_MspInit+0x14c>)
 8001224:	695a      	ldr	r2, [r3, #20]
 8001226:	2380      	movs	r3, #128	; 0x80
 8001228:	02db      	lsls	r3, r3, #11
 800122a:	4013      	ands	r3, r2
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001230:	193b      	adds	r3, r7, r4
 8001232:	223f      	movs	r2, #63	; 0x3f
 8001234:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001236:	193b      	adds	r3, r7, r4
 8001238:	2203      	movs	r2, #3
 800123a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	193b      	adds	r3, r7, r4
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001242:	193b      	adds	r3, r7, r4
 8001244:	4a29      	ldr	r2, [pc, #164]	; (80012ec <HAL_ADC_MspInit+0x150>)
 8001246:	0019      	movs	r1, r3
 8001248:	0010      	movs	r0, r2
 800124a:	f001 faf7 	bl	800283c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800124e:	193b      	adds	r3, r7, r4
 8001250:	228f      	movs	r2, #143	; 0x8f
 8001252:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001254:	193b      	adds	r3, r7, r4
 8001256:	2203      	movs	r2, #3
 8001258:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	193b      	adds	r3, r7, r4
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001260:	193a      	adds	r2, r7, r4
 8001262:	2390      	movs	r3, #144	; 0x90
 8001264:	05db      	lsls	r3, r3, #23
 8001266:	0011      	movs	r1, r2
 8001268:	0018      	movs	r0, r3
 800126a:	f001 fae7 	bl	800283c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800126e:	193b      	adds	r3, r7, r4
 8001270:	2203      	movs	r2, #3
 8001272:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001274:	193b      	adds	r3, r7, r4
 8001276:	2203      	movs	r2, #3
 8001278:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	193b      	adds	r3, r7, r4
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001280:	193b      	adds	r3, r7, r4
 8001282:	4a1b      	ldr	r2, [pc, #108]	; (80012f0 <HAL_ADC_MspInit+0x154>)
 8001284:	0019      	movs	r1, r3
 8001286:	0010      	movs	r0, r2
 8001288:	f001 fad8 	bl	800283c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 800128c:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <HAL_ADC_MspInit+0x158>)
 800128e:	4a1a      	ldr	r2, [pc, #104]	; (80012f8 <HAL_ADC_MspInit+0x15c>)
 8001290:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001292:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <HAL_ADC_MspInit+0x158>)
 8001294:	2200      	movs	r2, #0
 8001296:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001298:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <HAL_ADC_MspInit+0x158>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 800129e:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <HAL_ADC_MspInit+0x158>)
 80012a0:	2280      	movs	r2, #128	; 0x80
 80012a2:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012a4:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <HAL_ADC_MspInit+0x158>)
 80012a6:	2280      	movs	r2, #128	; 0x80
 80012a8:	0052      	lsls	r2, r2, #1
 80012aa:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012ac:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <HAL_ADC_MspInit+0x158>)
 80012ae:	2280      	movs	r2, #128	; 0x80
 80012b0:	00d2      	lsls	r2, r2, #3
 80012b2:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 80012b4:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <HAL_ADC_MspInit+0x158>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80012ba:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <HAL_ADC_MspInit+0x158>)
 80012bc:	2200      	movs	r2, #0
 80012be:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <HAL_ADC_MspInit+0x158>)
 80012c2:	0018      	movs	r0, r3
 80012c4:	f001 f8a4 	bl	8002410 <HAL_DMA_Init>
 80012c8:	1e03      	subs	r3, r0, #0
 80012ca:	d001      	beq.n	80012d0 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 80012cc:	f7ff ff3c 	bl	8001148 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a08      	ldr	r2, [pc, #32]	; (80012f4 <HAL_ADC_MspInit+0x158>)
 80012d4:	631a      	str	r2, [r3, #48]	; 0x30
 80012d6:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <HAL_ADC_MspInit+0x158>)
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012dc:	46c0      	nop			; (mov r8, r8)
 80012de:	46bd      	mov	sp, r7
 80012e0:	b00d      	add	sp, #52	; 0x34
 80012e2:	bd90      	pop	{r4, r7, pc}
 80012e4:	40012400 	.word	0x40012400
 80012e8:	40021000 	.word	0x40021000
 80012ec:	48000800 	.word	0x48000800
 80012f0:	48000400 	.word	0x48000400
 80012f4:	20000084 	.word	0x20000084
 80012f8:	40020008 	.word	0x40020008

080012fc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80012fc:	b590      	push	{r4, r7, lr}
 80012fe:	b08b      	sub	sp, #44	; 0x2c
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	2414      	movs	r4, #20
 8001306:	193b      	adds	r3, r7, r4
 8001308:	0018      	movs	r0, r3
 800130a:	2314      	movs	r3, #20
 800130c:	001a      	movs	r2, r3
 800130e:	2100      	movs	r1, #0
 8001310:	f005 f962 	bl	80065d8 <memset>
  if(hdac->Instance==DAC)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a19      	ldr	r2, [pc, #100]	; (8001380 <HAL_DAC_MspInit+0x84>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d12b      	bne.n	8001376 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800131e:	4b19      	ldr	r3, [pc, #100]	; (8001384 <HAL_DAC_MspInit+0x88>)
 8001320:	69da      	ldr	r2, [r3, #28]
 8001322:	4b18      	ldr	r3, [pc, #96]	; (8001384 <HAL_DAC_MspInit+0x88>)
 8001324:	2180      	movs	r1, #128	; 0x80
 8001326:	0589      	lsls	r1, r1, #22
 8001328:	430a      	orrs	r2, r1
 800132a:	61da      	str	r2, [r3, #28]
 800132c:	4b15      	ldr	r3, [pc, #84]	; (8001384 <HAL_DAC_MspInit+0x88>)
 800132e:	69da      	ldr	r2, [r3, #28]
 8001330:	2380      	movs	r3, #128	; 0x80
 8001332:	059b      	lsls	r3, r3, #22
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
 8001338:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800133a:	4b12      	ldr	r3, [pc, #72]	; (8001384 <HAL_DAC_MspInit+0x88>)
 800133c:	695a      	ldr	r2, [r3, #20]
 800133e:	4b11      	ldr	r3, [pc, #68]	; (8001384 <HAL_DAC_MspInit+0x88>)
 8001340:	2180      	movs	r1, #128	; 0x80
 8001342:	0289      	lsls	r1, r1, #10
 8001344:	430a      	orrs	r2, r1
 8001346:	615a      	str	r2, [r3, #20]
 8001348:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <HAL_DAC_MspInit+0x88>)
 800134a:	695a      	ldr	r2, [r3, #20]
 800134c:	2380      	movs	r3, #128	; 0x80
 800134e:	029b      	lsls	r3, r3, #10
 8001350:	4013      	ands	r3, r2
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001356:	193b      	adds	r3, r7, r4
 8001358:	2210      	movs	r2, #16
 800135a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800135c:	193b      	adds	r3, r7, r4
 800135e:	2203      	movs	r2, #3
 8001360:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	193b      	adds	r3, r7, r4
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001368:	193a      	adds	r2, r7, r4
 800136a:	2390      	movs	r3, #144	; 0x90
 800136c:	05db      	lsls	r3, r3, #23
 800136e:	0011      	movs	r1, r2
 8001370:	0018      	movs	r0, r3
 8001372:	f001 fa63 	bl	800283c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001376:	46c0      	nop			; (mov r8, r8)
 8001378:	46bd      	mov	sp, r7
 800137a:	b00b      	add	sp, #44	; 0x2c
 800137c:	bd90      	pop	{r4, r7, pc}
 800137e:	46c0      	nop			; (mov r8, r8)
 8001380:	40007400 	.word	0x40007400
 8001384:	40021000 	.word	0x40021000

08001388 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001388:	b590      	push	{r4, r7, lr}
 800138a:	b08b      	sub	sp, #44	; 0x2c
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001390:	2414      	movs	r4, #20
 8001392:	193b      	adds	r3, r7, r4
 8001394:	0018      	movs	r0, r3
 8001396:	2314      	movs	r3, #20
 8001398:	001a      	movs	r2, r3
 800139a:	2100      	movs	r1, #0
 800139c:	f005 f91c 	bl	80065d8 <memset>
  if(hi2c->Instance==I2C1)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a1c      	ldr	r2, [pc, #112]	; (8001418 <HAL_I2C_MspInit+0x90>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d132      	bne.n	8001410 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013aa:	4b1c      	ldr	r3, [pc, #112]	; (800141c <HAL_I2C_MspInit+0x94>)
 80013ac:	695a      	ldr	r2, [r3, #20]
 80013ae:	4b1b      	ldr	r3, [pc, #108]	; (800141c <HAL_I2C_MspInit+0x94>)
 80013b0:	2180      	movs	r1, #128	; 0x80
 80013b2:	02c9      	lsls	r1, r1, #11
 80013b4:	430a      	orrs	r2, r1
 80013b6:	615a      	str	r2, [r3, #20]
 80013b8:	4b18      	ldr	r3, [pc, #96]	; (800141c <HAL_I2C_MspInit+0x94>)
 80013ba:	695a      	ldr	r2, [r3, #20]
 80013bc:	2380      	movs	r3, #128	; 0x80
 80013be:	02db      	lsls	r3, r3, #11
 80013c0:	4013      	ands	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
 80013c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013c6:	193b      	adds	r3, r7, r4
 80013c8:	22c0      	movs	r2, #192	; 0xc0
 80013ca:	0092      	lsls	r2, r2, #2
 80013cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013ce:	0021      	movs	r1, r4
 80013d0:	187b      	adds	r3, r7, r1
 80013d2:	2212      	movs	r2, #18
 80013d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	187b      	adds	r3, r7, r1
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013dc:	187b      	adds	r3, r7, r1
 80013de:	2203      	movs	r2, #3
 80013e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80013e2:	187b      	adds	r3, r7, r1
 80013e4:	2201      	movs	r2, #1
 80013e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e8:	187b      	adds	r3, r7, r1
 80013ea:	4a0d      	ldr	r2, [pc, #52]	; (8001420 <HAL_I2C_MspInit+0x98>)
 80013ec:	0019      	movs	r1, r3
 80013ee:	0010      	movs	r0, r2
 80013f0:	f001 fa24 	bl	800283c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013f4:	4b09      	ldr	r3, [pc, #36]	; (800141c <HAL_I2C_MspInit+0x94>)
 80013f6:	69da      	ldr	r2, [r3, #28]
 80013f8:	4b08      	ldr	r3, [pc, #32]	; (800141c <HAL_I2C_MspInit+0x94>)
 80013fa:	2180      	movs	r1, #128	; 0x80
 80013fc:	0389      	lsls	r1, r1, #14
 80013fe:	430a      	orrs	r2, r1
 8001400:	61da      	str	r2, [r3, #28]
 8001402:	4b06      	ldr	r3, [pc, #24]	; (800141c <HAL_I2C_MspInit+0x94>)
 8001404:	69da      	ldr	r2, [r3, #28]
 8001406:	2380      	movs	r3, #128	; 0x80
 8001408:	039b      	lsls	r3, r3, #14
 800140a:	4013      	ands	r3, r2
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001410:	46c0      	nop			; (mov r8, r8)
 8001412:	46bd      	mov	sp, r7
 8001414:	b00b      	add	sp, #44	; 0x2c
 8001416:	bd90      	pop	{r4, r7, pc}
 8001418:	40005400 	.word	0x40005400
 800141c:	40021000 	.word	0x40021000
 8001420:	48000400 	.word	0x48000400

08001424 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001424:	b590      	push	{r4, r7, lr}
 8001426:	b08d      	sub	sp, #52	; 0x34
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	241c      	movs	r4, #28
 800142e:	193b      	adds	r3, r7, r4
 8001430:	0018      	movs	r0, r3
 8001432:	2314      	movs	r3, #20
 8001434:	001a      	movs	r2, r3
 8001436:	2100      	movs	r1, #0
 8001438:	f005 f8ce 	bl	80065d8 <memset>
  if(hspi->Instance==SPI1)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a39      	ldr	r2, [pc, #228]	; (8001528 <HAL_SPI_MspInit+0x104>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d133      	bne.n	80014ae <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001446:	4b39      	ldr	r3, [pc, #228]	; (800152c <HAL_SPI_MspInit+0x108>)
 8001448:	699a      	ldr	r2, [r3, #24]
 800144a:	4b38      	ldr	r3, [pc, #224]	; (800152c <HAL_SPI_MspInit+0x108>)
 800144c:	2180      	movs	r1, #128	; 0x80
 800144e:	0149      	lsls	r1, r1, #5
 8001450:	430a      	orrs	r2, r1
 8001452:	619a      	str	r2, [r3, #24]
 8001454:	4b35      	ldr	r3, [pc, #212]	; (800152c <HAL_SPI_MspInit+0x108>)
 8001456:	699a      	ldr	r2, [r3, #24]
 8001458:	2380      	movs	r3, #128	; 0x80
 800145a:	015b      	lsls	r3, r3, #5
 800145c:	4013      	ands	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
 8001460:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001462:	4b32      	ldr	r3, [pc, #200]	; (800152c <HAL_SPI_MspInit+0x108>)
 8001464:	695a      	ldr	r2, [r3, #20]
 8001466:	4b31      	ldr	r3, [pc, #196]	; (800152c <HAL_SPI_MspInit+0x108>)
 8001468:	2180      	movs	r1, #128	; 0x80
 800146a:	0289      	lsls	r1, r1, #10
 800146c:	430a      	orrs	r2, r1
 800146e:	615a      	str	r2, [r3, #20]
 8001470:	4b2e      	ldr	r3, [pc, #184]	; (800152c <HAL_SPI_MspInit+0x108>)
 8001472:	695a      	ldr	r2, [r3, #20]
 8001474:	2380      	movs	r3, #128	; 0x80
 8001476:	029b      	lsls	r3, r3, #10
 8001478:	4013      	ands	r3, r2
 800147a:	617b      	str	r3, [r7, #20]
 800147c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800147e:	0021      	movs	r1, r4
 8001480:	187b      	adds	r3, r7, r1
 8001482:	2260      	movs	r2, #96	; 0x60
 8001484:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001486:	187b      	adds	r3, r7, r1
 8001488:	2202      	movs	r2, #2
 800148a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	187b      	adds	r3, r7, r1
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001492:	187b      	adds	r3, r7, r1
 8001494:	2203      	movs	r2, #3
 8001496:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001498:	187b      	adds	r3, r7, r1
 800149a:	2200      	movs	r2, #0
 800149c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149e:	187a      	adds	r2, r7, r1
 80014a0:	2390      	movs	r3, #144	; 0x90
 80014a2:	05db      	lsls	r3, r3, #23
 80014a4:	0011      	movs	r1, r2
 80014a6:	0018      	movs	r0, r3
 80014a8:	f001 f9c8 	bl	800283c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80014ac:	e037      	b.n	800151e <HAL_SPI_MspInit+0xfa>
  else if(hspi->Instance==SPI2)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a1f      	ldr	r2, [pc, #124]	; (8001530 <HAL_SPI_MspInit+0x10c>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d132      	bne.n	800151e <HAL_SPI_MspInit+0xfa>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80014b8:	4b1c      	ldr	r3, [pc, #112]	; (800152c <HAL_SPI_MspInit+0x108>)
 80014ba:	69da      	ldr	r2, [r3, #28]
 80014bc:	4b1b      	ldr	r3, [pc, #108]	; (800152c <HAL_SPI_MspInit+0x108>)
 80014be:	2180      	movs	r1, #128	; 0x80
 80014c0:	01c9      	lsls	r1, r1, #7
 80014c2:	430a      	orrs	r2, r1
 80014c4:	61da      	str	r2, [r3, #28]
 80014c6:	4b19      	ldr	r3, [pc, #100]	; (800152c <HAL_SPI_MspInit+0x108>)
 80014c8:	69da      	ldr	r2, [r3, #28]
 80014ca:	2380      	movs	r3, #128	; 0x80
 80014cc:	01db      	lsls	r3, r3, #7
 80014ce:	4013      	ands	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d4:	4b15      	ldr	r3, [pc, #84]	; (800152c <HAL_SPI_MspInit+0x108>)
 80014d6:	695a      	ldr	r2, [r3, #20]
 80014d8:	4b14      	ldr	r3, [pc, #80]	; (800152c <HAL_SPI_MspInit+0x108>)
 80014da:	2180      	movs	r1, #128	; 0x80
 80014dc:	02c9      	lsls	r1, r1, #11
 80014de:	430a      	orrs	r2, r1
 80014e0:	615a      	str	r2, [r3, #20]
 80014e2:	4b12      	ldr	r3, [pc, #72]	; (800152c <HAL_SPI_MspInit+0x108>)
 80014e4:	695a      	ldr	r2, [r3, #20]
 80014e6:	2380      	movs	r3, #128	; 0x80
 80014e8:	02db      	lsls	r3, r3, #11
 80014ea:	4013      	ands	r3, r2
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80014f0:	211c      	movs	r1, #28
 80014f2:	187b      	adds	r3, r7, r1
 80014f4:	22c0      	movs	r2, #192	; 0xc0
 80014f6:	01d2      	lsls	r2, r2, #7
 80014f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fa:	187b      	adds	r3, r7, r1
 80014fc:	2202      	movs	r2, #2
 80014fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	187b      	adds	r3, r7, r1
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001506:	187b      	adds	r3, r7, r1
 8001508:	2203      	movs	r2, #3
 800150a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800150c:	187b      	adds	r3, r7, r1
 800150e:	2200      	movs	r2, #0
 8001510:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001512:	187b      	adds	r3, r7, r1
 8001514:	4a07      	ldr	r2, [pc, #28]	; (8001534 <HAL_SPI_MspInit+0x110>)
 8001516:	0019      	movs	r1, r3
 8001518:	0010      	movs	r0, r2
 800151a:	f001 f98f 	bl	800283c <HAL_GPIO_Init>
}
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	46bd      	mov	sp, r7
 8001522:	b00d      	add	sp, #52	; 0x34
 8001524:	bd90      	pop	{r4, r7, pc}
 8001526:	46c0      	nop			; (mov r8, r8)
 8001528:	40013000 	.word	0x40013000
 800152c:	40021000 	.word	0x40021000
 8001530:	40003800 	.word	0x40003800
 8001534:	48000400 	.word	0x48000400

08001538 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a1f      	ldr	r2, [pc, #124]	; (80015c4 <HAL_TIM_Base_MspInit+0x8c>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d11e      	bne.n	8001588 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800154a:	4b1f      	ldr	r3, [pc, #124]	; (80015c8 <HAL_TIM_Base_MspInit+0x90>)
 800154c:	699a      	ldr	r2, [r3, #24]
 800154e:	4b1e      	ldr	r3, [pc, #120]	; (80015c8 <HAL_TIM_Base_MspInit+0x90>)
 8001550:	2180      	movs	r1, #128	; 0x80
 8001552:	0109      	lsls	r1, r1, #4
 8001554:	430a      	orrs	r2, r1
 8001556:	619a      	str	r2, [r3, #24]
 8001558:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <HAL_TIM_Base_MspInit+0x90>)
 800155a:	699a      	ldr	r2, [r3, #24]
 800155c:	2380      	movs	r3, #128	; 0x80
 800155e:	011b      	lsls	r3, r3, #4
 8001560:	4013      	ands	r3, r2
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 1, 0);
 8001566:	2200      	movs	r2, #0
 8001568:	2101      	movs	r1, #1
 800156a:	200d      	movs	r0, #13
 800156c:	f000 fe84 	bl	8002278 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001570:	200d      	movs	r0, #13
 8001572:	f000 fe96 	bl	80022a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 8001576:	2200      	movs	r2, #0
 8001578:	2101      	movs	r1, #1
 800157a:	200e      	movs	r0, #14
 800157c:	f000 fe7c 	bl	8002278 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001580:	200e      	movs	r0, #14
 8001582:	f000 fe8e 	bl	80022a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001586:	e019      	b.n	80015bc <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM2)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	2380      	movs	r3, #128	; 0x80
 800158e:	05db      	lsls	r3, r3, #23
 8001590:	429a      	cmp	r2, r3
 8001592:	d113      	bne.n	80015bc <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <HAL_TIM_Base_MspInit+0x90>)
 8001596:	69da      	ldr	r2, [r3, #28]
 8001598:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <HAL_TIM_Base_MspInit+0x90>)
 800159a:	2101      	movs	r1, #1
 800159c:	430a      	orrs	r2, r1
 800159e:	61da      	str	r2, [r3, #28]
 80015a0:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <HAL_TIM_Base_MspInit+0x90>)
 80015a2:	69db      	ldr	r3, [r3, #28]
 80015a4:	2201      	movs	r2, #1
 80015a6:	4013      	ands	r3, r2
 80015a8:	60bb      	str	r3, [r7, #8]
 80015aa:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80015ac:	2200      	movs	r2, #0
 80015ae:	2101      	movs	r1, #1
 80015b0:	200f      	movs	r0, #15
 80015b2:	f000 fe61 	bl	8002278 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015b6:	200f      	movs	r0, #15
 80015b8:	f000 fe73 	bl	80022a2 <HAL_NVIC_EnableIRQ>
}
 80015bc:	46c0      	nop			; (mov r8, r8)
 80015be:	46bd      	mov	sp, r7
 80015c0:	b004      	add	sp, #16
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40012c00 	.word	0x40012c00
 80015c8:	40021000 	.word	0x40021000

080015cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015cc:	b590      	push	{r4, r7, lr}
 80015ce:	b08b      	sub	sp, #44	; 0x2c
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d4:	2414      	movs	r4, #20
 80015d6:	193b      	adds	r3, r7, r4
 80015d8:	0018      	movs	r0, r3
 80015da:	2314      	movs	r3, #20
 80015dc:	001a      	movs	r2, r3
 80015de:	2100      	movs	r1, #0
 80015e0:	f004 fffa 	bl	80065d8 <memset>
  if(htim->Instance==TIM1)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a2c      	ldr	r2, [pc, #176]	; (800169c <HAL_TIM_MspPostInit+0xd0>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d126      	bne.n	800163c <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ee:	4b2c      	ldr	r3, [pc, #176]	; (80016a0 <HAL_TIM_MspPostInit+0xd4>)
 80015f0:	695a      	ldr	r2, [r3, #20]
 80015f2:	4b2b      	ldr	r3, [pc, #172]	; (80016a0 <HAL_TIM_MspPostInit+0xd4>)
 80015f4:	2180      	movs	r1, #128	; 0x80
 80015f6:	0289      	lsls	r1, r1, #10
 80015f8:	430a      	orrs	r2, r1
 80015fa:	615a      	str	r2, [r3, #20]
 80015fc:	4b28      	ldr	r3, [pc, #160]	; (80016a0 <HAL_TIM_MspPostInit+0xd4>)
 80015fe:	695a      	ldr	r2, [r3, #20]
 8001600:	2380      	movs	r3, #128	; 0x80
 8001602:	029b      	lsls	r3, r3, #10
 8001604:	4013      	ands	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
 8001608:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800160a:	193b      	adds	r3, r7, r4
 800160c:	2280      	movs	r2, #128	; 0x80
 800160e:	0052      	lsls	r2, r2, #1
 8001610:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001612:	0021      	movs	r1, r4
 8001614:	187b      	adds	r3, r7, r1
 8001616:	2202      	movs	r2, #2
 8001618:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	187b      	adds	r3, r7, r1
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001620:	187b      	adds	r3, r7, r1
 8001622:	2200      	movs	r2, #0
 8001624:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001626:	187b      	adds	r3, r7, r1
 8001628:	2202      	movs	r2, #2
 800162a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162c:	187a      	adds	r2, r7, r1
 800162e:	2390      	movs	r3, #144	; 0x90
 8001630:	05db      	lsls	r3, r3, #23
 8001632:	0011      	movs	r1, r2
 8001634:	0018      	movs	r0, r3
 8001636:	f001 f901 	bl	800283c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800163a:	e02a      	b.n	8001692 <HAL_TIM_MspPostInit+0xc6>
  else if(htim->Instance==TIM2)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	2380      	movs	r3, #128	; 0x80
 8001642:	05db      	lsls	r3, r3, #23
 8001644:	429a      	cmp	r2, r3
 8001646:	d124      	bne.n	8001692 <HAL_TIM_MspPostInit+0xc6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001648:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <HAL_TIM_MspPostInit+0xd4>)
 800164a:	695a      	ldr	r2, [r3, #20]
 800164c:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <HAL_TIM_MspPostInit+0xd4>)
 800164e:	2180      	movs	r1, #128	; 0x80
 8001650:	02c9      	lsls	r1, r1, #11
 8001652:	430a      	orrs	r2, r1
 8001654:	615a      	str	r2, [r3, #20]
 8001656:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <HAL_TIM_MspPostInit+0xd4>)
 8001658:	695a      	ldr	r2, [r3, #20]
 800165a:	2380      	movs	r3, #128	; 0x80
 800165c:	02db      	lsls	r3, r3, #11
 800165e:	4013      	ands	r3, r2
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001664:	2114      	movs	r1, #20
 8001666:	187b      	adds	r3, r7, r1
 8001668:	2280      	movs	r2, #128	; 0x80
 800166a:	0112      	lsls	r2, r2, #4
 800166c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166e:	187b      	adds	r3, r7, r1
 8001670:	2202      	movs	r2, #2
 8001672:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	187b      	adds	r3, r7, r1
 8001676:	2200      	movs	r2, #0
 8001678:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167a:	187b      	adds	r3, r7, r1
 800167c:	2200      	movs	r2, #0
 800167e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001680:	187b      	adds	r3, r7, r1
 8001682:	2202      	movs	r2, #2
 8001684:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001686:	187b      	adds	r3, r7, r1
 8001688:	4a06      	ldr	r2, [pc, #24]	; (80016a4 <HAL_TIM_MspPostInit+0xd8>)
 800168a:	0019      	movs	r1, r3
 800168c:	0010      	movs	r0, r2
 800168e:	f001 f8d5 	bl	800283c <HAL_GPIO_Init>
}
 8001692:	46c0      	nop			; (mov r8, r8)
 8001694:	46bd      	mov	sp, r7
 8001696:	b00b      	add	sp, #44	; 0x2c
 8001698:	bd90      	pop	{r4, r7, pc}
 800169a:	46c0      	nop			; (mov r8, r8)
 800169c:	40012c00 	.word	0x40012c00
 80016a0:	40021000 	.word	0x40021000
 80016a4:	48000400 	.word	0x48000400

080016a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016a8:	b590      	push	{r4, r7, lr}
 80016aa:	b08b      	sub	sp, #44	; 0x2c
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	2414      	movs	r4, #20
 80016b2:	193b      	adds	r3, r7, r4
 80016b4:	0018      	movs	r0, r3
 80016b6:	2314      	movs	r3, #20
 80016b8:	001a      	movs	r2, r3
 80016ba:	2100      	movs	r1, #0
 80016bc:	f004 ff8c 	bl	80065d8 <memset>
  if(huart->Instance==USART1)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a21      	ldr	r2, [pc, #132]	; (800174c <HAL_UART_MspInit+0xa4>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d13b      	bne.n	8001742 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016ca:	4b21      	ldr	r3, [pc, #132]	; (8001750 <HAL_UART_MspInit+0xa8>)
 80016cc:	699a      	ldr	r2, [r3, #24]
 80016ce:	4b20      	ldr	r3, [pc, #128]	; (8001750 <HAL_UART_MspInit+0xa8>)
 80016d0:	2180      	movs	r1, #128	; 0x80
 80016d2:	01c9      	lsls	r1, r1, #7
 80016d4:	430a      	orrs	r2, r1
 80016d6:	619a      	str	r2, [r3, #24]
 80016d8:	4b1d      	ldr	r3, [pc, #116]	; (8001750 <HAL_UART_MspInit+0xa8>)
 80016da:	699a      	ldr	r2, [r3, #24]
 80016dc:	2380      	movs	r3, #128	; 0x80
 80016de:	01db      	lsls	r3, r3, #7
 80016e0:	4013      	ands	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
 80016e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e6:	4b1a      	ldr	r3, [pc, #104]	; (8001750 <HAL_UART_MspInit+0xa8>)
 80016e8:	695a      	ldr	r2, [r3, #20]
 80016ea:	4b19      	ldr	r3, [pc, #100]	; (8001750 <HAL_UART_MspInit+0xa8>)
 80016ec:	2180      	movs	r1, #128	; 0x80
 80016ee:	0289      	lsls	r1, r1, #10
 80016f0:	430a      	orrs	r2, r1
 80016f2:	615a      	str	r2, [r3, #20]
 80016f4:	4b16      	ldr	r3, [pc, #88]	; (8001750 <HAL_UART_MspInit+0xa8>)
 80016f6:	695a      	ldr	r2, [r3, #20]
 80016f8:	2380      	movs	r3, #128	; 0x80
 80016fa:	029b      	lsls	r3, r3, #10
 80016fc:	4013      	ands	r3, r2
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001702:	193b      	adds	r3, r7, r4
 8001704:	22c0      	movs	r2, #192	; 0xc0
 8001706:	00d2      	lsls	r2, r2, #3
 8001708:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170a:	0021      	movs	r1, r4
 800170c:	187b      	adds	r3, r7, r1
 800170e:	2202      	movs	r2, #2
 8001710:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	187b      	adds	r3, r7, r1
 8001714:	2200      	movs	r2, #0
 8001716:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001718:	187b      	adds	r3, r7, r1
 800171a:	2203      	movs	r2, #3
 800171c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800171e:	187b      	adds	r3, r7, r1
 8001720:	2201      	movs	r2, #1
 8001722:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001724:	187a      	adds	r2, r7, r1
 8001726:	2390      	movs	r3, #144	; 0x90
 8001728:	05db      	lsls	r3, r3, #23
 800172a:	0011      	movs	r1, r2
 800172c:	0018      	movs	r0, r3
 800172e:	f001 f885 	bl	800283c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001732:	2200      	movs	r2, #0
 8001734:	2100      	movs	r1, #0
 8001736:	201b      	movs	r0, #27
 8001738:	f000 fd9e 	bl	8002278 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800173c:	201b      	movs	r0, #27
 800173e:	f000 fdb0 	bl	80022a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001742:	46c0      	nop			; (mov r8, r8)
 8001744:	46bd      	mov	sp, r7
 8001746:	b00b      	add	sp, #44	; 0x2c
 8001748:	bd90      	pop	{r4, r7, pc}
 800174a:	46c0      	nop			; (mov r8, r8)
 800174c:	40013800 	.word	0x40013800
 8001750:	40021000 	.word	0x40021000

08001754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001758:	e7fe      	b.n	8001758 <NMI_Handler+0x4>

0800175a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800175e:	e7fe      	b.n	800175e <HardFault_Handler+0x4>

08001760 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001764:	46c0      	nop			; (mov r8, r8)
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800176e:	46c0      	nop			; (mov r8, r8)
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001778:	f000 f8b8 	bl	80018ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800177c:	46c0      	nop			; (mov r8, r8)
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001788:	4b03      	ldr	r3, [pc, #12]	; (8001798 <DMA1_Channel1_IRQHandler+0x14>)
 800178a:	0018      	movs	r0, r3
 800178c:	f000 ff6b 	bl	8002666 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001790:	46c0      	nop			; (mov r8, r8)
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	46c0      	nop			; (mov r8, r8)
 8001798:	20000084 	.word	0x20000084

0800179c <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017a0:	4b03      	ldr	r3, [pc, #12]	; (80017b0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80017a2:	0018      	movs	r0, r3
 80017a4:	f002 fdce 	bl	8004344 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80017a8:	46c0      	nop			; (mov r8, r8)
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	46c0      	nop			; (mov r8, r8)
 80017b0:	200001f0 	.word	0x200001f0

080017b4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017b8:	4b03      	ldr	r3, [pc, #12]	; (80017c8 <TIM1_CC_IRQHandler+0x14>)
 80017ba:	0018      	movs	r0, r3
 80017bc:	f002 fdc2 	bl	8004344 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80017c0:	46c0      	nop			; (mov r8, r8)
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	46c0      	nop			; (mov r8, r8)
 80017c8:	200001f0 	.word	0x200001f0

080017cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017d0:	4b03      	ldr	r3, [pc, #12]	; (80017e0 <TIM2_IRQHandler+0x14>)
 80017d2:	0018      	movs	r0, r3
 80017d4:	f002 fdb6 	bl	8004344 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017d8:	46c0      	nop			; (mov r8, r8)
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	46c0      	nop			; (mov r8, r8)
 80017e0:	20000238 	.word	0x20000238

080017e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017e8:	4b03      	ldr	r3, [pc, #12]	; (80017f8 <USART1_IRQHandler+0x14>)
 80017ea:	0018      	movs	r0, r3
 80017ec:	f003 fd70 	bl	80052d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017f0:	46c0      	nop			; (mov r8, r8)
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	46c0      	nop			; (mov r8, r8)
 80017f8:	20000280 	.word	0x20000280

080017fc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001800:	46c0      	nop			; (mov r8, r8)
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001808:	480d      	ldr	r0, [pc, #52]	; (8001840 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800180a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800180c:	480d      	ldr	r0, [pc, #52]	; (8001844 <LoopForever+0x6>)
  ldr r1, =_edata
 800180e:	490e      	ldr	r1, [pc, #56]	; (8001848 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001810:	4a0e      	ldr	r2, [pc, #56]	; (800184c <LoopForever+0xe>)
  movs r3, #0
 8001812:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001814:	e002      	b.n	800181c <LoopCopyDataInit>

08001816 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001816:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001818:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800181a:	3304      	adds	r3, #4

0800181c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800181c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800181e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001820:	d3f9      	bcc.n	8001816 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001822:	4a0b      	ldr	r2, [pc, #44]	; (8001850 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001824:	4c0b      	ldr	r4, [pc, #44]	; (8001854 <LoopForever+0x16>)
  movs r3, #0
 8001826:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001828:	e001      	b.n	800182e <LoopFillZerobss>

0800182a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800182a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800182c:	3204      	adds	r2, #4

0800182e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800182e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001830:	d3fb      	bcc.n	800182a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001832:	f7ff ffe3 	bl	80017fc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001836:	f004 feab 	bl	8006590 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800183a:	f7fe ffa5 	bl	8000788 <main>

0800183e <LoopForever>:

LoopForever:
    b LoopForever
 800183e:	e7fe      	b.n	800183e <LoopForever>
  ldr   r0, =_estack
 8001840:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001848:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 800184c:	08006644 	.word	0x08006644
  ldr r2, =_sbss
 8001850:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001854:	2000036c 	.word	0x2000036c

08001858 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001858:	e7fe      	b.n	8001858 <ADC1_COMP_IRQHandler>
	...

0800185c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001860:	4b07      	ldr	r3, [pc, #28]	; (8001880 <HAL_Init+0x24>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <HAL_Init+0x24>)
 8001866:	2110      	movs	r1, #16
 8001868:	430a      	orrs	r2, r1
 800186a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800186c:	2003      	movs	r0, #3
 800186e:	f000 f809 	bl	8001884 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001872:	f7ff fc6f 	bl	8001154 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001876:	2300      	movs	r3, #0
}
 8001878:	0018      	movs	r0, r3
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	46c0      	nop			; (mov r8, r8)
 8001880:	40022000 	.word	0x40022000

08001884 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001884:	b590      	push	{r4, r7, lr}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800188c:	4b14      	ldr	r3, [pc, #80]	; (80018e0 <HAL_InitTick+0x5c>)
 800188e:	681c      	ldr	r4, [r3, #0]
 8001890:	4b14      	ldr	r3, [pc, #80]	; (80018e4 <HAL_InitTick+0x60>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	0019      	movs	r1, r3
 8001896:	23fa      	movs	r3, #250	; 0xfa
 8001898:	0098      	lsls	r0, r3, #2
 800189a:	f7fe fc35 	bl	8000108 <__udivsi3>
 800189e:	0003      	movs	r3, r0
 80018a0:	0019      	movs	r1, r3
 80018a2:	0020      	movs	r0, r4
 80018a4:	f7fe fc30 	bl	8000108 <__udivsi3>
 80018a8:	0003      	movs	r3, r0
 80018aa:	0018      	movs	r0, r3
 80018ac:	f000 fd09 	bl	80022c2 <HAL_SYSTICK_Config>
 80018b0:	1e03      	subs	r3, r0, #0
 80018b2:	d001      	beq.n	80018b8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e00f      	b.n	80018d8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b03      	cmp	r3, #3
 80018bc:	d80b      	bhi.n	80018d6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	2301      	movs	r3, #1
 80018c2:	425b      	negs	r3, r3
 80018c4:	2200      	movs	r2, #0
 80018c6:	0018      	movs	r0, r3
 80018c8:	f000 fcd6 	bl	8002278 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <HAL_InitTick+0x64>)
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80018d2:	2300      	movs	r3, #0
 80018d4:	e000      	b.n	80018d8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
}
 80018d8:	0018      	movs	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	b003      	add	sp, #12
 80018de:	bd90      	pop	{r4, r7, pc}
 80018e0:	2000001c 	.word	0x2000001c
 80018e4:	20000024 	.word	0x20000024
 80018e8:	20000020 	.word	0x20000020

080018ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018f0:	4b05      	ldr	r3, [pc, #20]	; (8001908 <HAL_IncTick+0x1c>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	001a      	movs	r2, r3
 80018f6:	4b05      	ldr	r3, [pc, #20]	; (800190c <HAL_IncTick+0x20>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	18d2      	adds	r2, r2, r3
 80018fc:	4b03      	ldr	r3, [pc, #12]	; (800190c <HAL_IncTick+0x20>)
 80018fe:	601a      	str	r2, [r3, #0]
}
 8001900:	46c0      	nop			; (mov r8, r8)
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	46c0      	nop			; (mov r8, r8)
 8001908:	20000024 	.word	0x20000024
 800190c:	20000368 	.word	0x20000368

08001910 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  return uwTick;
 8001914:	4b02      	ldr	r3, [pc, #8]	; (8001920 <HAL_GetTick+0x10>)
 8001916:	681b      	ldr	r3, [r3, #0]
}
 8001918:	0018      	movs	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	46c0      	nop			; (mov r8, r8)
 8001920:	20000368 	.word	0x20000368

08001924 <HAL_SuspendTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)

{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8001928:	4b04      	ldr	r3, [pc, #16]	; (800193c <HAL_SuspendTick+0x18>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	4b03      	ldr	r3, [pc, #12]	; (800193c <HAL_SuspendTick+0x18>)
 800192e:	2102      	movs	r1, #2
 8001930:	438a      	bics	r2, r1
 8001932:	601a      	str	r2, [r3, #0]
}
 8001934:	46c0      	nop			; (mov r8, r8)
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	46c0      	nop			; (mov r8, r8)
 800193c:	e000e010 	.word	0xe000e010

08001940 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001948:	230f      	movs	r3, #15
 800194a:	18fb      	adds	r3, r7, r3
 800194c:	2200      	movs	r2, #0
 800194e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001950:	2300      	movs	r3, #0
 8001952:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e125      	b.n	8001baa <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001962:	2b00      	cmp	r3, #0
 8001964:	d10a      	bne.n	800197c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2234      	movs	r2, #52	; 0x34
 8001970:	2100      	movs	r1, #0
 8001972:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	0018      	movs	r0, r3
 8001978:	f7ff fc10 	bl	800119c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001980:	2210      	movs	r2, #16
 8001982:	4013      	ands	r3, r2
 8001984:	d000      	beq.n	8001988 <HAL_ADC_Init+0x48>
 8001986:	e103      	b.n	8001b90 <HAL_ADC_Init+0x250>
 8001988:	230f      	movs	r3, #15
 800198a:	18fb      	adds	r3, r7, r3
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d000      	beq.n	8001994 <HAL_ADC_Init+0x54>
 8001992:	e0fd      	b.n	8001b90 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	2204      	movs	r2, #4
 800199c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800199e:	d000      	beq.n	80019a2 <HAL_ADC_Init+0x62>
 80019a0:	e0f6      	b.n	8001b90 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019a6:	4a83      	ldr	r2, [pc, #524]	; (8001bb4 <HAL_ADC_Init+0x274>)
 80019a8:	4013      	ands	r3, r2
 80019aa:	2202      	movs	r2, #2
 80019ac:	431a      	orrs	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	2203      	movs	r2, #3
 80019ba:	4013      	ands	r3, r2
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d112      	bne.n	80019e6 <HAL_ADC_Init+0xa6>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2201      	movs	r2, #1
 80019c8:	4013      	ands	r3, r2
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d009      	beq.n	80019e2 <HAL_ADC_Init+0xa2>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68da      	ldr	r2, [r3, #12]
 80019d4:	2380      	movs	r3, #128	; 0x80
 80019d6:	021b      	lsls	r3, r3, #8
 80019d8:	401a      	ands	r2, r3
 80019da:	2380      	movs	r3, #128	; 0x80
 80019dc:	021b      	lsls	r3, r3, #8
 80019de:	429a      	cmp	r2, r3
 80019e0:	d101      	bne.n	80019e6 <HAL_ADC_Init+0xa6>
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <HAL_ADC_Init+0xa8>
 80019e6:	2300      	movs	r3, #0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d116      	bne.n	8001a1a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	2218      	movs	r2, #24
 80019f4:	4393      	bics	r3, r2
 80019f6:	0019      	movs	r1, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	430a      	orrs	r2, r1
 8001a02:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	0899      	lsrs	r1, r3, #2
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685a      	ldr	r2, [r3, #4]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	430a      	orrs	r2, r1
 8001a18:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	68da      	ldr	r2, [r3, #12]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4964      	ldr	r1, [pc, #400]	; (8001bb8 <HAL_ADC_Init+0x278>)
 8001a26:	400a      	ands	r2, r1
 8001a28:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	7e1b      	ldrb	r3, [r3, #24]
 8001a2e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	7e5b      	ldrb	r3, [r3, #25]
 8001a34:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a36:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	7e9b      	ldrb	r3, [r3, #26]
 8001a3c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001a3e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d002      	beq.n	8001a4e <HAL_ADC_Init+0x10e>
 8001a48:	2380      	movs	r3, #128	; 0x80
 8001a4a:	015b      	lsls	r3, r3, #5
 8001a4c:	e000      	b.n	8001a50 <HAL_ADC_Init+0x110>
 8001a4e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001a50:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001a56:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	691b      	ldr	r3, [r3, #16]
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d101      	bne.n	8001a64 <HAL_ADC_Init+0x124>
 8001a60:	2304      	movs	r3, #4
 8001a62:	e000      	b.n	8001a66 <HAL_ADC_Init+0x126>
 8001a64:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001a66:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2124      	movs	r1, #36	; 0x24
 8001a6c:	5c5b      	ldrb	r3, [r3, r1]
 8001a6e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001a70:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a72:	68ba      	ldr	r2, [r7, #8]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	7edb      	ldrb	r3, [r3, #27]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d115      	bne.n	8001aac <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	7e9b      	ldrb	r3, [r3, #26]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d105      	bne.n	8001a94 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	2280      	movs	r2, #128	; 0x80
 8001a8c:	0252      	lsls	r2, r2, #9
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	60bb      	str	r3, [r7, #8]
 8001a92:	e00b      	b.n	8001aac <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a98:	2220      	movs	r2, #32
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	431a      	orrs	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	69da      	ldr	r2, [r3, #28]
 8001ab0:	23c2      	movs	r3, #194	; 0xc2
 8001ab2:	33ff      	adds	r3, #255	; 0xff
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d007      	beq.n	8001ac8 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	68ba      	ldr	r2, [r7, #8]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	68d9      	ldr	r1, [r3, #12]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68ba      	ldr	r2, [r7, #8]
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001adc:	2380      	movs	r3, #128	; 0x80
 8001ade:	055b      	lsls	r3, r3, #21
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d01b      	beq.n	8001b1c <HAL_ADC_Init+0x1dc>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d017      	beq.n	8001b1c <HAL_ADC_Init+0x1dc>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d013      	beq.n	8001b1c <HAL_ADC_Init+0x1dc>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af8:	2b03      	cmp	r3, #3
 8001afa:	d00f      	beq.n	8001b1c <HAL_ADC_Init+0x1dc>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b00:	2b04      	cmp	r3, #4
 8001b02:	d00b      	beq.n	8001b1c <HAL_ADC_Init+0x1dc>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b08:	2b05      	cmp	r3, #5
 8001b0a:	d007      	beq.n	8001b1c <HAL_ADC_Init+0x1dc>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b10:	2b06      	cmp	r3, #6
 8001b12:	d003      	beq.n	8001b1c <HAL_ADC_Init+0x1dc>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b18:	2b07      	cmp	r3, #7
 8001b1a:	d112      	bne.n	8001b42 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	695a      	ldr	r2, [r3, #20]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2107      	movs	r1, #7
 8001b28:	438a      	bics	r2, r1
 8001b2a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6959      	ldr	r1, [r3, #20]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b36:	2207      	movs	r2, #7
 8001b38:	401a      	ands	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	4a1c      	ldr	r2, [pc, #112]	; (8001bbc <HAL_ADC_Init+0x27c>)
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	68ba      	ldr	r2, [r7, #8]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d10b      	bne.n	8001b6a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b5c:	2203      	movs	r2, #3
 8001b5e:	4393      	bics	r3, r2
 8001b60:	2201      	movs	r2, #1
 8001b62:	431a      	orrs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001b68:	e01c      	b.n	8001ba4 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b6e:	2212      	movs	r2, #18
 8001b70:	4393      	bics	r3, r2
 8001b72:	2210      	movs	r2, #16
 8001b74:	431a      	orrs	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b7e:	2201      	movs	r2, #1
 8001b80:	431a      	orrs	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001b86:	230f      	movs	r3, #15
 8001b88:	18fb      	adds	r3, r7, r3
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001b8e:	e009      	b.n	8001ba4 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b94:	2210      	movs	r2, #16
 8001b96:	431a      	orrs	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001b9c:	230f      	movs	r3, #15
 8001b9e:	18fb      	adds	r3, r7, r3
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ba4:	230f      	movs	r3, #15
 8001ba6:	18fb      	adds	r3, r7, r3
 8001ba8:	781b      	ldrb	r3, [r3, #0]
}
 8001baa:	0018      	movs	r0, r3
 8001bac:	46bd      	mov	sp, r7
 8001bae:	b004      	add	sp, #16
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	46c0      	nop			; (mov r8, r8)
 8001bb4:	fffffefd 	.word	0xfffffefd
 8001bb8:	fffe0219 	.word	0xfffe0219
 8001bbc:	833fffe7 	.word	0x833fffe7

08001bc0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001bc0:	b590      	push	{r4, r7, lr}
 8001bc2:	b087      	sub	sp, #28
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bcc:	2317      	movs	r3, #23
 8001bce:	18fb      	adds	r3, r7, r3
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	2204      	movs	r2, #4
 8001bdc:	4013      	ands	r3, r2
 8001bde:	d15e      	bne.n	8001c9e <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2234      	movs	r2, #52	; 0x34
 8001be4:	5c9b      	ldrb	r3, [r3, r2]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d101      	bne.n	8001bee <HAL_ADC_Start_DMA+0x2e>
 8001bea:	2302      	movs	r3, #2
 8001bec:	e05e      	b.n	8001cac <HAL_ADC_Start_DMA+0xec>
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2234      	movs	r2, #52	; 0x34
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	7e5b      	ldrb	r3, [r3, #25]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d007      	beq.n	8001c0e <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001bfe:	2317      	movs	r3, #23
 8001c00:	18fc      	adds	r4, r7, r3
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	0018      	movs	r0, r3
 8001c06:	f000 f983 	bl	8001f10 <ADC_Enable>
 8001c0a:	0003      	movs	r3, r0
 8001c0c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001c0e:	2317      	movs	r3, #23
 8001c10:	18fb      	adds	r3, r7, r3
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d146      	bne.n	8001ca6 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c1c:	4a25      	ldr	r2, [pc, #148]	; (8001cb4 <HAL_ADC_Start_DMA+0xf4>)
 8001c1e:	4013      	ands	r3, r2
 8001c20:	2280      	movs	r2, #128	; 0x80
 8001c22:	0052      	lsls	r2, r2, #1
 8001c24:	431a      	orrs	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2234      	movs	r2, #52	; 0x34
 8001c34:	2100      	movs	r1, #0
 8001c36:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3c:	4a1e      	ldr	r2, [pc, #120]	; (8001cb8 <HAL_ADC_Start_DMA+0xf8>)
 8001c3e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c44:	4a1d      	ldr	r2, [pc, #116]	; (8001cbc <HAL_ADC_Start_DMA+0xfc>)
 8001c46:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4c:	4a1c      	ldr	r2, [pc, #112]	; (8001cc0 <HAL_ADC_Start_DMA+0x100>)
 8001c4e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	221c      	movs	r2, #28
 8001c56:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	685a      	ldr	r2, [r3, #4]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2110      	movs	r1, #16
 8001c64:	430a      	orrs	r2, r1
 8001c66:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68da      	ldr	r2, [r3, #12]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2101      	movs	r1, #1
 8001c74:	430a      	orrs	r2, r1
 8001c76:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	3340      	adds	r3, #64	; 0x40
 8001c82:	0019      	movs	r1, r3
 8001c84:	68ba      	ldr	r2, [r7, #8]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f000 fc0a 	bl	80024a0 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	689a      	ldr	r2, [r3, #8]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2104      	movs	r1, #4
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	e003      	b.n	8001ca6 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001c9e:	2317      	movs	r3, #23
 8001ca0:	18fb      	adds	r3, r7, r3
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001ca6:	2317      	movs	r3, #23
 8001ca8:	18fb      	adds	r3, r7, r3
 8001caa:	781b      	ldrb	r3, [r3, #0]
}
 8001cac:	0018      	movs	r0, r3
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	b007      	add	sp, #28
 8001cb2:	bd90      	pop	{r4, r7, pc}
 8001cb4:	fffff0fe 	.word	0xfffff0fe
 8001cb8:	08002019 	.word	0x08002019
 8001cbc:	080020cd 	.word	0x080020cd
 8001cc0:	080020eb 	.word	0x080020eb

08001cc4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001ccc:	46c0      	nop			; (mov r8, r8)
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	b002      	add	sp, #8
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001cdc:	46c0      	nop			; (mov r8, r8)
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	b002      	add	sp, #8
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001cec:	46c0      	nop			; (mov r8, r8)
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	b002      	add	sp, #8
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cfe:	230f      	movs	r3, #15
 8001d00:	18fb      	adds	r3, r7, r3
 8001d02:	2200      	movs	r2, #0
 8001d04:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d0e:	2380      	movs	r3, #128	; 0x80
 8001d10:	055b      	lsls	r3, r3, #21
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d011      	beq.n	8001d3a <HAL_ADC_ConfigChannel+0x46>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d00d      	beq.n	8001d3a <HAL_ADC_ConfigChannel+0x46>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d009      	beq.n	8001d3a <HAL_ADC_ConfigChannel+0x46>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2a:	2b03      	cmp	r3, #3
 8001d2c:	d005      	beq.n	8001d3a <HAL_ADC_ConfigChannel+0x46>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	d001      	beq.n	8001d3a <HAL_ADC_ConfigChannel+0x46>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2234      	movs	r2, #52	; 0x34
 8001d3e:	5c9b      	ldrb	r3, [r3, r2]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d101      	bne.n	8001d48 <HAL_ADC_ConfigChannel+0x54>
 8001d44:	2302      	movs	r3, #2
 8001d46:	e0d0      	b.n	8001eea <HAL_ADC_ConfigChannel+0x1f6>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2234      	movs	r2, #52	; 0x34
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	2204      	movs	r2, #4
 8001d58:	4013      	ands	r3, r2
 8001d5a:	d000      	beq.n	8001d5e <HAL_ADC_ConfigChannel+0x6a>
 8001d5c:	e0b4      	b.n	8001ec8 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	4a64      	ldr	r2, [pc, #400]	; (8001ef4 <HAL_ADC_ConfigChannel+0x200>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d100      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x76>
 8001d68:	e082      	b.n	8001e70 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2201      	movs	r2, #1
 8001d76:	409a      	lsls	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d84:	2380      	movs	r3, #128	; 0x80
 8001d86:	055b      	lsls	r3, r3, #21
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d037      	beq.n	8001dfc <HAL_ADC_ConfigChannel+0x108>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d033      	beq.n	8001dfc <HAL_ADC_ConfigChannel+0x108>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d02f      	beq.n	8001dfc <HAL_ADC_ConfigChannel+0x108>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da0:	2b03      	cmp	r3, #3
 8001da2:	d02b      	beq.n	8001dfc <HAL_ADC_ConfigChannel+0x108>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da8:	2b04      	cmp	r3, #4
 8001daa:	d027      	beq.n	8001dfc <HAL_ADC_ConfigChannel+0x108>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db0:	2b05      	cmp	r3, #5
 8001db2:	d023      	beq.n	8001dfc <HAL_ADC_ConfigChannel+0x108>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db8:	2b06      	cmp	r3, #6
 8001dba:	d01f      	beq.n	8001dfc <HAL_ADC_ConfigChannel+0x108>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc0:	2b07      	cmp	r3, #7
 8001dc2:	d01b      	beq.n	8001dfc <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	2107      	movs	r1, #7
 8001dd0:	400b      	ands	r3, r1
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d012      	beq.n	8001dfc <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	695a      	ldr	r2, [r3, #20]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2107      	movs	r1, #7
 8001de2:	438a      	bics	r2, r1
 8001de4:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6959      	ldr	r1, [r3, #20]
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	2207      	movs	r2, #7
 8001df2:	401a      	ands	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2b10      	cmp	r3, #16
 8001e02:	d007      	beq.n	8001e14 <HAL_ADC_ConfigChannel+0x120>
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2b11      	cmp	r3, #17
 8001e0a:	d003      	beq.n	8001e14 <HAL_ADC_ConfigChannel+0x120>
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2b12      	cmp	r3, #18
 8001e12:	d163      	bne.n	8001edc <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001e14:	4b38      	ldr	r3, [pc, #224]	; (8001ef8 <HAL_ADC_ConfigChannel+0x204>)
 8001e16:	6819      	ldr	r1, [r3, #0]
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2b10      	cmp	r3, #16
 8001e1e:	d009      	beq.n	8001e34 <HAL_ADC_ConfigChannel+0x140>
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b11      	cmp	r3, #17
 8001e26:	d102      	bne.n	8001e2e <HAL_ADC_ConfigChannel+0x13a>
 8001e28:	2380      	movs	r3, #128	; 0x80
 8001e2a:	03db      	lsls	r3, r3, #15
 8001e2c:	e004      	b.n	8001e38 <HAL_ADC_ConfigChannel+0x144>
 8001e2e:	2380      	movs	r3, #128	; 0x80
 8001e30:	045b      	lsls	r3, r3, #17
 8001e32:	e001      	b.n	8001e38 <HAL_ADC_ConfigChannel+0x144>
 8001e34:	2380      	movs	r3, #128	; 0x80
 8001e36:	041b      	lsls	r3, r3, #16
 8001e38:	4a2f      	ldr	r2, [pc, #188]	; (8001ef8 <HAL_ADC_ConfigChannel+0x204>)
 8001e3a:	430b      	orrs	r3, r1
 8001e3c:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2b10      	cmp	r3, #16
 8001e44:	d14a      	bne.n	8001edc <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e46:	4b2d      	ldr	r3, [pc, #180]	; (8001efc <HAL_ADC_ConfigChannel+0x208>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	492d      	ldr	r1, [pc, #180]	; (8001f00 <HAL_ADC_ConfigChannel+0x20c>)
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	f7fe f95b 	bl	8000108 <__udivsi3>
 8001e52:	0003      	movs	r3, r0
 8001e54:	001a      	movs	r2, r3
 8001e56:	0013      	movs	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	189b      	adds	r3, r3, r2
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e60:	e002      	b.n	8001e68 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	3b01      	subs	r3, #1
 8001e66:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1f9      	bne.n	8001e62 <HAL_ADC_ConfigChannel+0x16e>
 8001e6e:	e035      	b.n	8001edc <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	4099      	lsls	r1, r3
 8001e7e:	000b      	movs	r3, r1
 8001e80:	43d9      	mvns	r1, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	400a      	ands	r2, r1
 8001e88:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2b10      	cmp	r3, #16
 8001e90:	d007      	beq.n	8001ea2 <HAL_ADC_ConfigChannel+0x1ae>
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2b11      	cmp	r3, #17
 8001e98:	d003      	beq.n	8001ea2 <HAL_ADC_ConfigChannel+0x1ae>
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2b12      	cmp	r3, #18
 8001ea0:	d11c      	bne.n	8001edc <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001ea2:	4b15      	ldr	r3, [pc, #84]	; (8001ef8 <HAL_ADC_ConfigChannel+0x204>)
 8001ea4:	6819      	ldr	r1, [r3, #0]
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2b10      	cmp	r3, #16
 8001eac:	d007      	beq.n	8001ebe <HAL_ADC_ConfigChannel+0x1ca>
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2b11      	cmp	r3, #17
 8001eb4:	d101      	bne.n	8001eba <HAL_ADC_ConfigChannel+0x1c6>
 8001eb6:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <HAL_ADC_ConfigChannel+0x210>)
 8001eb8:	e002      	b.n	8001ec0 <HAL_ADC_ConfigChannel+0x1cc>
 8001eba:	4b13      	ldr	r3, [pc, #76]	; (8001f08 <HAL_ADC_ConfigChannel+0x214>)
 8001ebc:	e000      	b.n	8001ec0 <HAL_ADC_ConfigChannel+0x1cc>
 8001ebe:	4b13      	ldr	r3, [pc, #76]	; (8001f0c <HAL_ADC_ConfigChannel+0x218>)
 8001ec0:	4a0d      	ldr	r2, [pc, #52]	; (8001ef8 <HAL_ADC_ConfigChannel+0x204>)
 8001ec2:	400b      	ands	r3, r1
 8001ec4:	6013      	str	r3, [r2, #0]
 8001ec6:	e009      	b.n	8001edc <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ecc:	2220      	movs	r2, #32
 8001ece:	431a      	orrs	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001ed4:	230f      	movs	r3, #15
 8001ed6:	18fb      	adds	r3, r7, r3
 8001ed8:	2201      	movs	r2, #1
 8001eda:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2234      	movs	r2, #52	; 0x34
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001ee4:	230f      	movs	r3, #15
 8001ee6:	18fb      	adds	r3, r7, r3
 8001ee8:	781b      	ldrb	r3, [r3, #0]
}
 8001eea:	0018      	movs	r0, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	b004      	add	sp, #16
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	46c0      	nop			; (mov r8, r8)
 8001ef4:	00001001 	.word	0x00001001
 8001ef8:	40012708 	.word	0x40012708
 8001efc:	2000001c 	.word	0x2000001c
 8001f00:	000f4240 	.word	0x000f4240
 8001f04:	ffbfffff 	.word	0xffbfffff
 8001f08:	feffffff 	.word	0xfeffffff
 8001f0c:	ff7fffff 	.word	0xff7fffff

08001f10 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	2203      	movs	r2, #3
 8001f28:	4013      	ands	r3, r2
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d112      	bne.n	8001f54 <ADC_Enable+0x44>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2201      	movs	r2, #1
 8001f36:	4013      	ands	r3, r2
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d009      	beq.n	8001f50 <ADC_Enable+0x40>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68da      	ldr	r2, [r3, #12]
 8001f42:	2380      	movs	r3, #128	; 0x80
 8001f44:	021b      	lsls	r3, r3, #8
 8001f46:	401a      	ands	r2, r3
 8001f48:	2380      	movs	r3, #128	; 0x80
 8001f4a:	021b      	lsls	r3, r3, #8
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d101      	bne.n	8001f54 <ADC_Enable+0x44>
 8001f50:	2301      	movs	r3, #1
 8001f52:	e000      	b.n	8001f56 <ADC_Enable+0x46>
 8001f54:	2300      	movs	r3, #0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d152      	bne.n	8002000 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	4a2a      	ldr	r2, [pc, #168]	; (800200c <ADC_Enable+0xfc>)
 8001f62:	4013      	ands	r3, r2
 8001f64:	d00d      	beq.n	8001f82 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f6a:	2210      	movs	r2, #16
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f76:	2201      	movs	r2, #1
 8001f78:	431a      	orrs	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e03f      	b.n	8002002 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f92:	4b1f      	ldr	r3, [pc, #124]	; (8002010 <ADC_Enable+0x100>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	491f      	ldr	r1, [pc, #124]	; (8002014 <ADC_Enable+0x104>)
 8001f98:	0018      	movs	r0, r3
 8001f9a:	f7fe f8b5 	bl	8000108 <__udivsi3>
 8001f9e:	0003      	movs	r3, r0
 8001fa0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001fa2:	e002      	b.n	8001faa <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1f9      	bne.n	8001fa4 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001fb0:	f7ff fcae 	bl	8001910 <HAL_GetTick>
 8001fb4:	0003      	movs	r3, r0
 8001fb6:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001fb8:	e01b      	b.n	8001ff2 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001fba:	f7ff fca9 	bl	8001910 <HAL_GetTick>
 8001fbe:	0002      	movs	r2, r0
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d914      	bls.n	8001ff2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d00d      	beq.n	8001ff2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fda:	2210      	movs	r2, #16
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e007      	b.n	8002002 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d1dc      	bne.n	8001fba <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	0018      	movs	r0, r3
 8002004:	46bd      	mov	sp, r7
 8002006:	b004      	add	sp, #16
 8002008:	bd80      	pop	{r7, pc}
 800200a:	46c0      	nop			; (mov r8, r8)
 800200c:	80000017 	.word	0x80000017
 8002010:	2000001c 	.word	0x2000001c
 8002014:	000f4240 	.word	0x000f4240

08002018 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002024:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800202a:	2250      	movs	r2, #80	; 0x50
 800202c:	4013      	ands	r3, r2
 800202e:	d140      	bne.n	80020b2 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002034:	2280      	movs	r2, #128	; 0x80
 8002036:	0092      	lsls	r2, r2, #2
 8002038:	431a      	orrs	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68da      	ldr	r2, [r3, #12]
 8002044:	23c0      	movs	r3, #192	; 0xc0
 8002046:	011b      	lsls	r3, r3, #4
 8002048:	4013      	ands	r3, r2
 800204a:	d12d      	bne.n	80020a8 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002050:	2b00      	cmp	r3, #0
 8002052:	d129      	bne.n	80020a8 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2208      	movs	r2, #8
 800205c:	4013      	ands	r3, r2
 800205e:	2b08      	cmp	r3, #8
 8002060:	d122      	bne.n	80020a8 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	2204      	movs	r2, #4
 800206a:	4013      	ands	r3, r2
 800206c:	d110      	bne.n	8002090 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	685a      	ldr	r2, [r3, #4]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	210c      	movs	r1, #12
 800207a:	438a      	bics	r2, r1
 800207c:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002082:	4a11      	ldr	r2, [pc, #68]	; (80020c8 <ADC_DMAConvCplt+0xb0>)
 8002084:	4013      	ands	r3, r2
 8002086:	2201      	movs	r2, #1
 8002088:	431a      	orrs	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	639a      	str	r2, [r3, #56]	; 0x38
 800208e:	e00b      	b.n	80020a8 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002094:	2220      	movs	r2, #32
 8002096:	431a      	orrs	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a0:	2201      	movs	r2, #1
 80020a2:	431a      	orrs	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	0018      	movs	r0, r3
 80020ac:	f7ff fe0a 	bl	8001cc4 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 80020b0:	e005      	b.n	80020be <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	0010      	movs	r0, r2
 80020bc:	4798      	blx	r3
}
 80020be:	46c0      	nop			; (mov r8, r8)
 80020c0:	46bd      	mov	sp, r7
 80020c2:	b004      	add	sp, #16
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	46c0      	nop			; (mov r8, r8)
 80020c8:	fffffefe 	.word	0xfffffefe

080020cc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d8:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	0018      	movs	r0, r3
 80020de:	f7ff fdf9 	bl	8001cd4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020e2:	46c0      	nop			; (mov r8, r8)
 80020e4:	46bd      	mov	sp, r7
 80020e6:	b004      	add	sp, #16
 80020e8:	bd80      	pop	{r7, pc}

080020ea <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b084      	sub	sp, #16
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fc:	2240      	movs	r2, #64	; 0x40
 80020fe:	431a      	orrs	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002108:	2204      	movs	r2, #4
 800210a:	431a      	orrs	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	0018      	movs	r0, r3
 8002114:	f7ff fde6 	bl	8001ce4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002118:	46c0      	nop			; (mov r8, r8)
 800211a:	46bd      	mov	sp, r7
 800211c:	b004      	add	sp, #16
 800211e:	bd80      	pop	{r7, pc}

08002120 <__NVIC_EnableIRQ>:
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	0002      	movs	r2, r0
 8002128:	1dfb      	adds	r3, r7, #7
 800212a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800212c:	1dfb      	adds	r3, r7, #7
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b7f      	cmp	r3, #127	; 0x7f
 8002132:	d809      	bhi.n	8002148 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002134:	1dfb      	adds	r3, r7, #7
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	001a      	movs	r2, r3
 800213a:	231f      	movs	r3, #31
 800213c:	401a      	ands	r2, r3
 800213e:	4b04      	ldr	r3, [pc, #16]	; (8002150 <__NVIC_EnableIRQ+0x30>)
 8002140:	2101      	movs	r1, #1
 8002142:	4091      	lsls	r1, r2
 8002144:	000a      	movs	r2, r1
 8002146:	601a      	str	r2, [r3, #0]
}
 8002148:	46c0      	nop			; (mov r8, r8)
 800214a:	46bd      	mov	sp, r7
 800214c:	b002      	add	sp, #8
 800214e:	bd80      	pop	{r7, pc}
 8002150:	e000e100 	.word	0xe000e100

08002154 <__NVIC_SetPriority>:
{
 8002154:	b590      	push	{r4, r7, lr}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	0002      	movs	r2, r0
 800215c:	6039      	str	r1, [r7, #0]
 800215e:	1dfb      	adds	r3, r7, #7
 8002160:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002162:	1dfb      	adds	r3, r7, #7
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2b7f      	cmp	r3, #127	; 0x7f
 8002168:	d828      	bhi.n	80021bc <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800216a:	4a2f      	ldr	r2, [pc, #188]	; (8002228 <__NVIC_SetPriority+0xd4>)
 800216c:	1dfb      	adds	r3, r7, #7
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	b25b      	sxtb	r3, r3
 8002172:	089b      	lsrs	r3, r3, #2
 8002174:	33c0      	adds	r3, #192	; 0xc0
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	589b      	ldr	r3, [r3, r2]
 800217a:	1dfa      	adds	r2, r7, #7
 800217c:	7812      	ldrb	r2, [r2, #0]
 800217e:	0011      	movs	r1, r2
 8002180:	2203      	movs	r2, #3
 8002182:	400a      	ands	r2, r1
 8002184:	00d2      	lsls	r2, r2, #3
 8002186:	21ff      	movs	r1, #255	; 0xff
 8002188:	4091      	lsls	r1, r2
 800218a:	000a      	movs	r2, r1
 800218c:	43d2      	mvns	r2, r2
 800218e:	401a      	ands	r2, r3
 8002190:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	019b      	lsls	r3, r3, #6
 8002196:	22ff      	movs	r2, #255	; 0xff
 8002198:	401a      	ands	r2, r3
 800219a:	1dfb      	adds	r3, r7, #7
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	0018      	movs	r0, r3
 80021a0:	2303      	movs	r3, #3
 80021a2:	4003      	ands	r3, r0
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021a8:	481f      	ldr	r0, [pc, #124]	; (8002228 <__NVIC_SetPriority+0xd4>)
 80021aa:	1dfb      	adds	r3, r7, #7
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	b25b      	sxtb	r3, r3
 80021b0:	089b      	lsrs	r3, r3, #2
 80021b2:	430a      	orrs	r2, r1
 80021b4:	33c0      	adds	r3, #192	; 0xc0
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	501a      	str	r2, [r3, r0]
}
 80021ba:	e031      	b.n	8002220 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021bc:	4a1b      	ldr	r2, [pc, #108]	; (800222c <__NVIC_SetPriority+0xd8>)
 80021be:	1dfb      	adds	r3, r7, #7
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	0019      	movs	r1, r3
 80021c4:	230f      	movs	r3, #15
 80021c6:	400b      	ands	r3, r1
 80021c8:	3b08      	subs	r3, #8
 80021ca:	089b      	lsrs	r3, r3, #2
 80021cc:	3306      	adds	r3, #6
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	18d3      	adds	r3, r2, r3
 80021d2:	3304      	adds	r3, #4
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	1dfa      	adds	r2, r7, #7
 80021d8:	7812      	ldrb	r2, [r2, #0]
 80021da:	0011      	movs	r1, r2
 80021dc:	2203      	movs	r2, #3
 80021de:	400a      	ands	r2, r1
 80021e0:	00d2      	lsls	r2, r2, #3
 80021e2:	21ff      	movs	r1, #255	; 0xff
 80021e4:	4091      	lsls	r1, r2
 80021e6:	000a      	movs	r2, r1
 80021e8:	43d2      	mvns	r2, r2
 80021ea:	401a      	ands	r2, r3
 80021ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	019b      	lsls	r3, r3, #6
 80021f2:	22ff      	movs	r2, #255	; 0xff
 80021f4:	401a      	ands	r2, r3
 80021f6:	1dfb      	adds	r3, r7, #7
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	0018      	movs	r0, r3
 80021fc:	2303      	movs	r3, #3
 80021fe:	4003      	ands	r3, r0
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002204:	4809      	ldr	r0, [pc, #36]	; (800222c <__NVIC_SetPriority+0xd8>)
 8002206:	1dfb      	adds	r3, r7, #7
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	001c      	movs	r4, r3
 800220c:	230f      	movs	r3, #15
 800220e:	4023      	ands	r3, r4
 8002210:	3b08      	subs	r3, #8
 8002212:	089b      	lsrs	r3, r3, #2
 8002214:	430a      	orrs	r2, r1
 8002216:	3306      	adds	r3, #6
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	18c3      	adds	r3, r0, r3
 800221c:	3304      	adds	r3, #4
 800221e:	601a      	str	r2, [r3, #0]
}
 8002220:	46c0      	nop			; (mov r8, r8)
 8002222:	46bd      	mov	sp, r7
 8002224:	b003      	add	sp, #12
 8002226:	bd90      	pop	{r4, r7, pc}
 8002228:	e000e100 	.word	0xe000e100
 800222c:	e000ed00 	.word	0xe000ed00

08002230 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	1e5a      	subs	r2, r3, #1
 800223c:	2380      	movs	r3, #128	; 0x80
 800223e:	045b      	lsls	r3, r3, #17
 8002240:	429a      	cmp	r2, r3
 8002242:	d301      	bcc.n	8002248 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002244:	2301      	movs	r3, #1
 8002246:	e010      	b.n	800226a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002248:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <SysTick_Config+0x44>)
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	3a01      	subs	r2, #1
 800224e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002250:	2301      	movs	r3, #1
 8002252:	425b      	negs	r3, r3
 8002254:	2103      	movs	r1, #3
 8002256:	0018      	movs	r0, r3
 8002258:	f7ff ff7c 	bl	8002154 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800225c:	4b05      	ldr	r3, [pc, #20]	; (8002274 <SysTick_Config+0x44>)
 800225e:	2200      	movs	r2, #0
 8002260:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002262:	4b04      	ldr	r3, [pc, #16]	; (8002274 <SysTick_Config+0x44>)
 8002264:	2207      	movs	r2, #7
 8002266:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002268:	2300      	movs	r3, #0
}
 800226a:	0018      	movs	r0, r3
 800226c:	46bd      	mov	sp, r7
 800226e:	b002      	add	sp, #8
 8002270:	bd80      	pop	{r7, pc}
 8002272:	46c0      	nop			; (mov r8, r8)
 8002274:	e000e010 	.word	0xe000e010

08002278 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	60b9      	str	r1, [r7, #8]
 8002280:	607a      	str	r2, [r7, #4]
 8002282:	210f      	movs	r1, #15
 8002284:	187b      	adds	r3, r7, r1
 8002286:	1c02      	adds	r2, r0, #0
 8002288:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	187b      	adds	r3, r7, r1
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	b25b      	sxtb	r3, r3
 8002292:	0011      	movs	r1, r2
 8002294:	0018      	movs	r0, r3
 8002296:	f7ff ff5d 	bl	8002154 <__NVIC_SetPriority>
}
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	46bd      	mov	sp, r7
 800229e:	b004      	add	sp, #16
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b082      	sub	sp, #8
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	0002      	movs	r2, r0
 80022aa:	1dfb      	adds	r3, r7, #7
 80022ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022ae:	1dfb      	adds	r3, r7, #7
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	b25b      	sxtb	r3, r3
 80022b4:	0018      	movs	r0, r3
 80022b6:	f7ff ff33 	bl	8002120 <__NVIC_EnableIRQ>
}
 80022ba:	46c0      	nop			; (mov r8, r8)
 80022bc:	46bd      	mov	sp, r7
 80022be:	b002      	add	sp, #8
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b082      	sub	sp, #8
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	0018      	movs	r0, r3
 80022ce:	f7ff ffaf 	bl	8002230 <SysTick_Config>
 80022d2:	0003      	movs	r3, r0
}
 80022d4:	0018      	movs	r0, r3
 80022d6:	46bd      	mov	sp, r7
 80022d8:	b002      	add	sp, #8
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e015      	b.n	800231a <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if (hdac->State == HAL_DAC_STATE_RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	791b      	ldrb	r3, [r3, #4]
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d106      	bne.n	8002306 <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	0018      	movs	r0, r3
 8002302:	f7fe fffb 	bl	80012fc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2202      	movs	r2, #2
 800230a:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	0018      	movs	r0, r3
 800231c:	46bd      	mov	sp, r7
 800231e:	b002      	add	sp, #8
 8002320:	bd80      	pop	{r7, pc}

08002322 <HAL_DAC_ConfigChannel>:
  *          This parameter can be one of the following values:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b086      	sub	sp, #24
 8002326:	af00      	add	r7, sp, #0
 8002328:	60f8      	str	r0, [r7, #12]
 800232a:	60b9      	str	r1, [r7, #8]
 800232c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800232e:	2300      	movs	r3, #0
 8002330:	617b      	str	r3, [r7, #20]
 8002332:	2300      	movs	r3, #0
 8002334:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	795b      	ldrb	r3, [r3, #5]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d101      	bne.n	8002342 <HAL_DAC_ConfigChannel+0x20>
 800233e:	2302      	movs	r3, #2
 8002340:	e029      	b.n	8002396 <HAL_DAC_ConfigChannel+0x74>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2201      	movs	r2, #1
 8002346:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2202      	movs	r2, #2
 800234c:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel); 
 8002356:	223e      	movs	r2, #62	; 0x3e
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	409a      	lsls	r2, r3
 800235c:	0013      	movs	r3, r2
 800235e:	43da      	mvns	r2, r3
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	4013      	ands	r3, r2
 8002364:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	4313      	orrs	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	409a      	lsls	r2, r3
 8002378:	0013      	movs	r3, r2
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	4313      	orrs	r3, r2
 800237e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2201      	movs	r2, #1
 800238c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	0018      	movs	r0, r3
 8002398:	46bd      	mov	sp, r7
 800239a:	b006      	add	sp, #24
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_DAC_Start>:
       /* STM32F091xC  STM32F098xx */

#if defined (STM32F051x8) || defined (STM32F058xx)

HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b082      	sub	sp, #8
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
 80023a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	795b      	ldrb	r3, [r3, #5]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d101      	bne.n	80023b4 <HAL_DAC_Start+0x16>
 80023b0:	2302      	movs	r3, #2
 80023b2:	e028      	b.n	8002406 <HAL_DAC_Start+0x68>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2202      	movs	r2, #2
 80023be:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6819      	ldr	r1, [r3, #0]
 80023c6:	2201      	movs	r2, #1
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	409a      	lsls	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	430a      	orrs	r2, r1
 80023d2:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10e      	bne.n	80023f8 <HAL_DAC_Start+0x5a>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	223c      	movs	r2, #60	; 0x3c
 80023e2:	4013      	ands	r3, r2
 80023e4:	2b3c      	cmp	r3, #60	; 0x3c
 80023e6:	d107      	bne.n	80023f8 <HAL_DAC_Start+0x5a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2101      	movs	r1, #1
 80023f4:	430a      	orrs	r2, r1
 80023f6:	605a      	str	r2, [r3, #4]
    }
  }
 
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	0018      	movs	r0, r3
 8002408:	46bd      	mov	sp, r7
 800240a:	b002      	add	sp, #8
 800240c:	bd80      	pop	{r7, pc}
	...

08002410 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002418:	2300      	movs	r3, #0
 800241a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e036      	b.n	8002494 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2221      	movs	r2, #33	; 0x21
 800242a:	2102      	movs	r1, #2
 800242c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	4a18      	ldr	r2, [pc, #96]	; (800249c <HAL_DMA_Init+0x8c>)
 800243a:	4013      	ands	r3, r2
 800243c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002446:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002452:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	695b      	ldr	r3, [r3, #20]
 8002458:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800245e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	69db      	ldr	r3, [r3, #28]
 8002464:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	4313      	orrs	r3, r2
 800246a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	0018      	movs	r0, r3
 8002478:	f000 f9c4 	bl	8002804 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2221      	movs	r2, #33	; 0x21
 8002486:	2101      	movs	r1, #1
 8002488:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2220      	movs	r2, #32
 800248e:	2100      	movs	r1, #0
 8002490:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}  
 8002494:	0018      	movs	r0, r3
 8002496:	46bd      	mov	sp, r7
 8002498:	b004      	add	sp, #16
 800249a:	bd80      	pop	{r7, pc}
 800249c:	ffffc00f 	.word	0xffffc00f

080024a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
 80024ac:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80024ae:	2317      	movs	r3, #23
 80024b0:	18fb      	adds	r3, r7, r3
 80024b2:	2200      	movs	r2, #0
 80024b4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2220      	movs	r2, #32
 80024ba:	5c9b      	ldrb	r3, [r3, r2]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d101      	bne.n	80024c4 <HAL_DMA_Start_IT+0x24>
 80024c0:	2302      	movs	r3, #2
 80024c2:	e04f      	b.n	8002564 <HAL_DMA_Start_IT+0xc4>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2220      	movs	r2, #32
 80024c8:	2101      	movs	r1, #1
 80024ca:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2221      	movs	r2, #33	; 0x21
 80024d0:	5c9b      	ldrb	r3, [r3, r2]
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d13a      	bne.n	800254e <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2221      	movs	r2, #33	; 0x21
 80024dc:	2102      	movs	r1, #2
 80024de:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2101      	movs	r1, #1
 80024f2:	438a      	bics	r2, r1
 80024f4:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	68b9      	ldr	r1, [r7, #8]
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f000 f954 	bl	80027aa <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002506:	2b00      	cmp	r3, #0
 8002508:	d008      	beq.n	800251c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	210e      	movs	r1, #14
 8002516:	430a      	orrs	r2, r1
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	e00f      	b.n	800253c <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	210a      	movs	r1, #10
 8002528:	430a      	orrs	r2, r1
 800252a:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2104      	movs	r1, #4
 8002538:	438a      	bics	r2, r1
 800253a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2101      	movs	r1, #1
 8002548:	430a      	orrs	r2, r1
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	e007      	b.n	800255e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2220      	movs	r2, #32
 8002552:	2100      	movs	r1, #0
 8002554:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002556:	2317      	movs	r3, #23
 8002558:	18fb      	adds	r3, r7, r3
 800255a:	2202      	movs	r2, #2
 800255c:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 800255e:	2317      	movs	r3, #23
 8002560:	18fb      	adds	r3, r7, r3
 8002562:	781b      	ldrb	r3, [r3, #0]
} 
 8002564:	0018      	movs	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	b006      	add	sp, #24
 800256a:	bd80      	pop	{r7, pc}

0800256c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2221      	movs	r2, #33	; 0x21
 8002578:	5c9b      	ldrb	r3, [r3, r2]
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d008      	beq.n	8002592 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2204      	movs	r2, #4
 8002584:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2220      	movs	r2, #32
 800258a:	2100      	movs	r1, #0
 800258c:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e020      	b.n	80025d4 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	210e      	movs	r1, #14
 800259e:	438a      	bics	r2, r1
 80025a0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2101      	movs	r1, #1
 80025ae:	438a      	bics	r2, r1
 80025b0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ba:	2101      	movs	r1, #1
 80025bc:	4091      	lsls	r1, r2
 80025be:	000a      	movs	r2, r1
 80025c0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2221      	movs	r2, #33	; 0x21
 80025c6:	2101      	movs	r1, #1
 80025c8:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2220      	movs	r2, #32
 80025ce:	2100      	movs	r1, #0
 80025d0:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	0018      	movs	r0, r3
 80025d6:	46bd      	mov	sp, r7
 80025d8:	b002      	add	sp, #8
 80025da:	bd80      	pop	{r7, pc}

080025dc <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025e4:	210f      	movs	r1, #15
 80025e6:	187b      	adds	r3, r7, r1
 80025e8:	2200      	movs	r2, #0
 80025ea:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2221      	movs	r2, #33	; 0x21
 80025f0:	5c9b      	ldrb	r3, [r3, r2]
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d006      	beq.n	8002606 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2204      	movs	r2, #4
 80025fc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80025fe:	187b      	adds	r3, r7, r1
 8002600:	2201      	movs	r2, #1
 8002602:	701a      	strb	r2, [r3, #0]
 8002604:	e028      	b.n	8002658 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	210e      	movs	r1, #14
 8002612:	438a      	bics	r2, r1
 8002614:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2101      	movs	r1, #1
 8002622:	438a      	bics	r2, r1
 8002624:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800262e:	2101      	movs	r1, #1
 8002630:	4091      	lsls	r1, r2
 8002632:	000a      	movs	r2, r1
 8002634:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2221      	movs	r2, #33	; 0x21
 800263a:	2101      	movs	r1, #1
 800263c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2220      	movs	r2, #32
 8002642:	2100      	movs	r1, #0
 8002644:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800264a:	2b00      	cmp	r3, #0
 800264c:	d004      	beq.n	8002658 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	0010      	movs	r0, r2
 8002656:	4798      	blx	r3
    } 
  }
  return status;
 8002658:	230f      	movs	r3, #15
 800265a:	18fb      	adds	r3, r7, r3
 800265c:	781b      	ldrb	r3, [r3, #0]
}
 800265e:	0018      	movs	r0, r3
 8002660:	46bd      	mov	sp, r7
 8002662:	b004      	add	sp, #16
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b084      	sub	sp, #16
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	2204      	movs	r2, #4
 8002684:	409a      	lsls	r2, r3
 8002686:	0013      	movs	r3, r2
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	4013      	ands	r3, r2
 800268c:	d024      	beq.n	80026d8 <HAL_DMA_IRQHandler+0x72>
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	2204      	movs	r2, #4
 8002692:	4013      	ands	r3, r2
 8002694:	d020      	beq.n	80026d8 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2220      	movs	r2, #32
 800269e:	4013      	ands	r3, r2
 80026a0:	d107      	bne.n	80026b2 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2104      	movs	r1, #4
 80026ae:	438a      	bics	r2, r1
 80026b0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ba:	2104      	movs	r1, #4
 80026bc:	4091      	lsls	r1, r2
 80026be:	000a      	movs	r2, r1
 80026c0:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d100      	bne.n	80026cc <HAL_DMA_IRQHandler+0x66>
 80026ca:	e06a      	b.n	80027a2 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	0010      	movs	r0, r2
 80026d4:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80026d6:	e064      	b.n	80027a2 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026dc:	2202      	movs	r2, #2
 80026de:	409a      	lsls	r2, r3
 80026e0:	0013      	movs	r3, r2
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	4013      	ands	r3, r2
 80026e6:	d02b      	beq.n	8002740 <HAL_DMA_IRQHandler+0xda>
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	2202      	movs	r2, #2
 80026ec:	4013      	ands	r3, r2
 80026ee:	d027      	beq.n	8002740 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2220      	movs	r2, #32
 80026f8:	4013      	ands	r3, r2
 80026fa:	d10b      	bne.n	8002714 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	210a      	movs	r1, #10
 8002708:	438a      	bics	r2, r1
 800270a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2221      	movs	r2, #33	; 0x21
 8002710:	2101      	movs	r1, #1
 8002712:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800271c:	2102      	movs	r1, #2
 800271e:	4091      	lsls	r1, r2
 8002720:	000a      	movs	r2, r1
 8002722:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2220      	movs	r2, #32
 8002728:	2100      	movs	r1, #0
 800272a:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002730:	2b00      	cmp	r3, #0
 8002732:	d036      	beq.n	80027a2 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	0010      	movs	r0, r2
 800273c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800273e:	e030      	b.n	80027a2 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002744:	2208      	movs	r2, #8
 8002746:	409a      	lsls	r2, r3
 8002748:	0013      	movs	r3, r2
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	4013      	ands	r3, r2
 800274e:	d028      	beq.n	80027a2 <HAL_DMA_IRQHandler+0x13c>
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2208      	movs	r2, #8
 8002754:	4013      	ands	r3, r2
 8002756:	d024      	beq.n	80027a2 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	210e      	movs	r1, #14
 8002764:	438a      	bics	r2, r1
 8002766:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002770:	2101      	movs	r1, #1
 8002772:	4091      	lsls	r1, r2
 8002774:	000a      	movs	r2, r1
 8002776:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2221      	movs	r2, #33	; 0x21
 8002782:	2101      	movs	r1, #1
 8002784:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2220      	movs	r2, #32
 800278a:	2100      	movs	r1, #0
 800278c:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	2b00      	cmp	r3, #0
 8002794:	d005      	beq.n	80027a2 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	0010      	movs	r0, r2
 800279e:	4798      	blx	r3
    }
   }
}  
 80027a0:	e7ff      	b.n	80027a2 <HAL_DMA_IRQHandler+0x13c>
 80027a2:	46c0      	nop			; (mov r8, r8)
 80027a4:	46bd      	mov	sp, r7
 80027a6:	b004      	add	sp, #16
 80027a8:	bd80      	pop	{r7, pc}

080027aa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b084      	sub	sp, #16
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	60f8      	str	r0, [r7, #12]
 80027b2:	60b9      	str	r1, [r7, #8]
 80027b4:	607a      	str	r2, [r7, #4]
 80027b6:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c0:	2101      	movs	r1, #1
 80027c2:	4091      	lsls	r1, r2
 80027c4:	000a      	movs	r2, r1
 80027c6:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	2b10      	cmp	r3, #16
 80027d6:	d108      	bne.n	80027ea <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68ba      	ldr	r2, [r7, #8]
 80027e6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80027e8:	e007      	b.n	80027fa <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68ba      	ldr	r2, [r7, #8]
 80027f0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	60da      	str	r2, [r3, #12]
}
 80027fa:	46c0      	nop			; (mov r8, r8)
 80027fc:	46bd      	mov	sp, r7
 80027fe:	b004      	add	sp, #16
 8002800:	bd80      	pop	{r7, pc}
	...

08002804 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a08      	ldr	r2, [pc, #32]	; (8002834 <DMA_CalcBaseAndBitshift+0x30>)
 8002812:	4694      	mov	ip, r2
 8002814:	4463      	add	r3, ip
 8002816:	2114      	movs	r1, #20
 8002818:	0018      	movs	r0, r3
 800281a:	f7fd fc75 	bl	8000108 <__udivsi3>
 800281e:	0003      	movs	r3, r0
 8002820:	009a      	lsls	r2, r3, #2
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a03      	ldr	r2, [pc, #12]	; (8002838 <DMA_CalcBaseAndBitshift+0x34>)
 800282a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800282c:	46c0      	nop			; (mov r8, r8)
 800282e:	46bd      	mov	sp, r7
 8002830:	b002      	add	sp, #8
 8002832:	bd80      	pop	{r7, pc}
 8002834:	bffdfff8 	.word	0xbffdfff8
 8002838:	40020000 	.word	0x40020000

0800283c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002846:	2300      	movs	r3, #0
 8002848:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800284a:	e14f      	b.n	8002aec <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2101      	movs	r1, #1
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	4091      	lsls	r1, r2
 8002856:	000a      	movs	r2, r1
 8002858:	4013      	ands	r3, r2
 800285a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d100      	bne.n	8002864 <HAL_GPIO_Init+0x28>
 8002862:	e140      	b.n	8002ae6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2203      	movs	r2, #3
 800286a:	4013      	ands	r3, r2
 800286c:	2b01      	cmp	r3, #1
 800286e:	d005      	beq.n	800287c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	2203      	movs	r2, #3
 8002876:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002878:	2b02      	cmp	r3, #2
 800287a:	d130      	bne.n	80028de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	2203      	movs	r2, #3
 8002888:	409a      	lsls	r2, r3
 800288a:	0013      	movs	r3, r2
 800288c:	43da      	mvns	r2, r3
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	4013      	ands	r3, r2
 8002892:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	68da      	ldr	r2, [r3, #12]
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	409a      	lsls	r2, r3
 800289e:	0013      	movs	r3, r2
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028b2:	2201      	movs	r2, #1
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	409a      	lsls	r2, r3
 80028b8:	0013      	movs	r3, r2
 80028ba:	43da      	mvns	r2, r3
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	4013      	ands	r3, r2
 80028c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	091b      	lsrs	r3, r3, #4
 80028c8:	2201      	movs	r2, #1
 80028ca:	401a      	ands	r2, r3
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	409a      	lsls	r2, r3
 80028d0:	0013      	movs	r3, r2
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	2203      	movs	r2, #3
 80028e4:	4013      	ands	r3, r2
 80028e6:	2b03      	cmp	r3, #3
 80028e8:	d017      	beq.n	800291a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	2203      	movs	r2, #3
 80028f6:	409a      	lsls	r2, r3
 80028f8:	0013      	movs	r3, r2
 80028fa:	43da      	mvns	r2, r3
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	4013      	ands	r3, r2
 8002900:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	689a      	ldr	r2, [r3, #8]
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	409a      	lsls	r2, r3
 800290c:	0013      	movs	r3, r2
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	4313      	orrs	r3, r2
 8002912:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	2203      	movs	r2, #3
 8002920:	4013      	ands	r3, r2
 8002922:	2b02      	cmp	r3, #2
 8002924:	d123      	bne.n	800296e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	08da      	lsrs	r2, r3, #3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	3208      	adds	r2, #8
 800292e:	0092      	lsls	r2, r2, #2
 8002930:	58d3      	ldr	r3, [r2, r3]
 8002932:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	2207      	movs	r2, #7
 8002938:	4013      	ands	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	220f      	movs	r2, #15
 800293e:	409a      	lsls	r2, r3
 8002940:	0013      	movs	r3, r2
 8002942:	43da      	mvns	r2, r3
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	4013      	ands	r3, r2
 8002948:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	691a      	ldr	r2, [r3, #16]
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	2107      	movs	r1, #7
 8002952:	400b      	ands	r3, r1
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	409a      	lsls	r2, r3
 8002958:	0013      	movs	r3, r2
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	4313      	orrs	r3, r2
 800295e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	08da      	lsrs	r2, r3, #3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3208      	adds	r2, #8
 8002968:	0092      	lsls	r2, r2, #2
 800296a:	6939      	ldr	r1, [r7, #16]
 800296c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	2203      	movs	r2, #3
 800297a:	409a      	lsls	r2, r3
 800297c:	0013      	movs	r3, r2
 800297e:	43da      	mvns	r2, r3
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	4013      	ands	r3, r2
 8002984:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2203      	movs	r2, #3
 800298c:	401a      	ands	r2, r3
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	409a      	lsls	r2, r3
 8002994:	0013      	movs	r3, r2
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	4313      	orrs	r3, r2
 800299a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685a      	ldr	r2, [r3, #4]
 80029a6:	23c0      	movs	r3, #192	; 0xc0
 80029a8:	029b      	lsls	r3, r3, #10
 80029aa:	4013      	ands	r3, r2
 80029ac:	d100      	bne.n	80029b0 <HAL_GPIO_Init+0x174>
 80029ae:	e09a      	b.n	8002ae6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029b0:	4b54      	ldr	r3, [pc, #336]	; (8002b04 <HAL_GPIO_Init+0x2c8>)
 80029b2:	699a      	ldr	r2, [r3, #24]
 80029b4:	4b53      	ldr	r3, [pc, #332]	; (8002b04 <HAL_GPIO_Init+0x2c8>)
 80029b6:	2101      	movs	r1, #1
 80029b8:	430a      	orrs	r2, r1
 80029ba:	619a      	str	r2, [r3, #24]
 80029bc:	4b51      	ldr	r3, [pc, #324]	; (8002b04 <HAL_GPIO_Init+0x2c8>)
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	2201      	movs	r2, #1
 80029c2:	4013      	ands	r3, r2
 80029c4:	60bb      	str	r3, [r7, #8]
 80029c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029c8:	4a4f      	ldr	r2, [pc, #316]	; (8002b08 <HAL_GPIO_Init+0x2cc>)
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	089b      	lsrs	r3, r3, #2
 80029ce:	3302      	adds	r3, #2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	589b      	ldr	r3, [r3, r2]
 80029d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	2203      	movs	r2, #3
 80029da:	4013      	ands	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	220f      	movs	r2, #15
 80029e0:	409a      	lsls	r2, r3
 80029e2:	0013      	movs	r3, r2
 80029e4:	43da      	mvns	r2, r3
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	4013      	ands	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	2390      	movs	r3, #144	; 0x90
 80029f0:	05db      	lsls	r3, r3, #23
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d013      	beq.n	8002a1e <HAL_GPIO_Init+0x1e2>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a44      	ldr	r2, [pc, #272]	; (8002b0c <HAL_GPIO_Init+0x2d0>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d00d      	beq.n	8002a1a <HAL_GPIO_Init+0x1de>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a43      	ldr	r2, [pc, #268]	; (8002b10 <HAL_GPIO_Init+0x2d4>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d007      	beq.n	8002a16 <HAL_GPIO_Init+0x1da>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a42      	ldr	r2, [pc, #264]	; (8002b14 <HAL_GPIO_Init+0x2d8>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d101      	bne.n	8002a12 <HAL_GPIO_Init+0x1d6>
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e006      	b.n	8002a20 <HAL_GPIO_Init+0x1e4>
 8002a12:	2305      	movs	r3, #5
 8002a14:	e004      	b.n	8002a20 <HAL_GPIO_Init+0x1e4>
 8002a16:	2302      	movs	r3, #2
 8002a18:	e002      	b.n	8002a20 <HAL_GPIO_Init+0x1e4>
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e000      	b.n	8002a20 <HAL_GPIO_Init+0x1e4>
 8002a1e:	2300      	movs	r3, #0
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	2103      	movs	r1, #3
 8002a24:	400a      	ands	r2, r1
 8002a26:	0092      	lsls	r2, r2, #2
 8002a28:	4093      	lsls	r3, r2
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a30:	4935      	ldr	r1, [pc, #212]	; (8002b08 <HAL_GPIO_Init+0x2cc>)
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	089b      	lsrs	r3, r3, #2
 8002a36:	3302      	adds	r3, #2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a3e:	4b36      	ldr	r3, [pc, #216]	; (8002b18 <HAL_GPIO_Init+0x2dc>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	43da      	mvns	r2, r3
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685a      	ldr	r2, [r3, #4]
 8002a52:	2380      	movs	r3, #128	; 0x80
 8002a54:	025b      	lsls	r3, r3, #9
 8002a56:	4013      	ands	r3, r2
 8002a58:	d003      	beq.n	8002a62 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a62:	4b2d      	ldr	r3, [pc, #180]	; (8002b18 <HAL_GPIO_Init+0x2dc>)
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002a68:	4b2b      	ldr	r3, [pc, #172]	; (8002b18 <HAL_GPIO_Init+0x2dc>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	43da      	mvns	r2, r3
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	4013      	ands	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	2380      	movs	r3, #128	; 0x80
 8002a7e:	029b      	lsls	r3, r3, #10
 8002a80:	4013      	ands	r3, r2
 8002a82:	d003      	beq.n	8002a8c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a8c:	4b22      	ldr	r3, [pc, #136]	; (8002b18 <HAL_GPIO_Init+0x2dc>)
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a92:	4b21      	ldr	r3, [pc, #132]	; (8002b18 <HAL_GPIO_Init+0x2dc>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	43da      	mvns	r2, r3
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	2380      	movs	r3, #128	; 0x80
 8002aa8:	035b      	lsls	r3, r3, #13
 8002aaa:	4013      	ands	r3, r2
 8002aac:	d003      	beq.n	8002ab6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002ab6:	4b18      	ldr	r3, [pc, #96]	; (8002b18 <HAL_GPIO_Init+0x2dc>)
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002abc:	4b16      	ldr	r3, [pc, #88]	; (8002b18 <HAL_GPIO_Init+0x2dc>)
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	43da      	mvns	r2, r3
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	2380      	movs	r3, #128	; 0x80
 8002ad2:	039b      	lsls	r3, r3, #14
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	d003      	beq.n	8002ae0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002ae0:	4b0d      	ldr	r3, [pc, #52]	; (8002b18 <HAL_GPIO_Init+0x2dc>)
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	40da      	lsrs	r2, r3
 8002af4:	1e13      	subs	r3, r2, #0
 8002af6:	d000      	beq.n	8002afa <HAL_GPIO_Init+0x2be>
 8002af8:	e6a8      	b.n	800284c <HAL_GPIO_Init+0x10>
  } 
}
 8002afa:	46c0      	nop			; (mov r8, r8)
 8002afc:	46c0      	nop			; (mov r8, r8)
 8002afe:	46bd      	mov	sp, r7
 8002b00:	b006      	add	sp, #24
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	40021000 	.word	0x40021000
 8002b08:	40010000 	.word	0x40010000
 8002b0c:	48000400 	.word	0x48000400
 8002b10:	48000800 	.word	0x48000800
 8002b14:	48000c00 	.word	0x48000c00
 8002b18:	40010400 	.word	0x40010400

08002b1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	000a      	movs	r2, r1
 8002b26:	1cbb      	adds	r3, r7, #2
 8002b28:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	1cba      	adds	r2, r7, #2
 8002b30:	8812      	ldrh	r2, [r2, #0]
 8002b32:	4013      	ands	r3, r2
 8002b34:	d004      	beq.n	8002b40 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002b36:	230f      	movs	r3, #15
 8002b38:	18fb      	adds	r3, r7, r3
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	701a      	strb	r2, [r3, #0]
 8002b3e:	e003      	b.n	8002b48 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b40:	230f      	movs	r3, #15
 8002b42:	18fb      	adds	r3, r7, r3
 8002b44:	2200      	movs	r2, #0
 8002b46:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002b48:	230f      	movs	r3, #15
 8002b4a:	18fb      	adds	r3, r7, r3
 8002b4c:	781b      	ldrb	r3, [r3, #0]
  }
 8002b4e:	0018      	movs	r0, r3
 8002b50:	46bd      	mov	sp, r7
 8002b52:	b004      	add	sp, #16
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b082      	sub	sp, #8
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
 8002b5e:	0008      	movs	r0, r1
 8002b60:	0011      	movs	r1, r2
 8002b62:	1cbb      	adds	r3, r7, #2
 8002b64:	1c02      	adds	r2, r0, #0
 8002b66:	801a      	strh	r2, [r3, #0]
 8002b68:	1c7b      	adds	r3, r7, #1
 8002b6a:	1c0a      	adds	r2, r1, #0
 8002b6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b6e:	1c7b      	adds	r3, r7, #1
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d004      	beq.n	8002b80 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b76:	1cbb      	adds	r3, r7, #2
 8002b78:	881a      	ldrh	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b7e:	e003      	b.n	8002b88 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b80:	1cbb      	adds	r3, r7, #2
 8002b82:	881a      	ldrh	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b88:	46c0      	nop			; (mov r8, r8)
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	b002      	add	sp, #8
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e082      	b.n	8002ca8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2241      	movs	r2, #65	; 0x41
 8002ba6:	5c9b      	ldrb	r3, [r3, r2]
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d107      	bne.n	8002bbe <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2240      	movs	r2, #64	; 0x40
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	0018      	movs	r0, r3
 8002bba:	f7fe fbe5 	bl	8001388 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2241      	movs	r2, #65	; 0x41
 8002bc2:	2124      	movs	r1, #36	; 0x24
 8002bc4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	438a      	bics	r2, r1
 8002bd4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685a      	ldr	r2, [r3, #4]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4934      	ldr	r1, [pc, #208]	; (8002cb0 <HAL_I2C_Init+0x120>)
 8002be0:	400a      	ands	r2, r1
 8002be2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689a      	ldr	r2, [r3, #8]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4931      	ldr	r1, [pc, #196]	; (8002cb4 <HAL_I2C_Init+0x124>)
 8002bf0:	400a      	ands	r2, r1
 8002bf2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d108      	bne.n	8002c0e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2180      	movs	r1, #128	; 0x80
 8002c06:	0209      	lsls	r1, r1, #8
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	609a      	str	r2, [r3, #8]
 8002c0c:	e007      	b.n	8002c1e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2184      	movs	r1, #132	; 0x84
 8002c18:	0209      	lsls	r1, r1, #8
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d104      	bne.n	8002c30 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2280      	movs	r2, #128	; 0x80
 8002c2c:	0112      	lsls	r2, r2, #4
 8002c2e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	491f      	ldr	r1, [pc, #124]	; (8002cb8 <HAL_I2C_Init+0x128>)
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68da      	ldr	r2, [r3, #12]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	491a      	ldr	r1, [pc, #104]	; (8002cb4 <HAL_I2C_Init+0x124>)
 8002c4c:	400a      	ands	r2, r1
 8002c4e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	691a      	ldr	r2, [r3, #16]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	430a      	orrs	r2, r1
 8002c68:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	69d9      	ldr	r1, [r3, #28]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a1a      	ldr	r2, [r3, #32]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	430a      	orrs	r2, r1
 8002c78:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2101      	movs	r1, #1
 8002c86:	430a      	orrs	r2, r1
 8002c88:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2241      	movs	r2, #65	; 0x41
 8002c94:	2120      	movs	r1, #32
 8002c96:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2242      	movs	r2, #66	; 0x42
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	0018      	movs	r0, r3
 8002caa:	46bd      	mov	sp, r7
 8002cac:	b002      	add	sp, #8
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	f0ffffff 	.word	0xf0ffffff
 8002cb4:	ffff7fff 	.word	0xffff7fff
 8002cb8:	02008000 	.word	0x02008000

08002cbc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2241      	movs	r2, #65	; 0x41
 8002cca:	5c9b      	ldrb	r3, [r3, r2]
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b20      	cmp	r3, #32
 8002cd0:	d138      	bne.n	8002d44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2240      	movs	r2, #64	; 0x40
 8002cd6:	5c9b      	ldrb	r3, [r3, r2]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d101      	bne.n	8002ce0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002cdc:	2302      	movs	r3, #2
 8002cde:	e032      	b.n	8002d46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2240      	movs	r2, #64	; 0x40
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2241      	movs	r2, #65	; 0x41
 8002cec:	2124      	movs	r1, #36	; 0x24
 8002cee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	438a      	bics	r2, r1
 8002cfe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4911      	ldr	r1, [pc, #68]	; (8002d50 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002d0c:	400a      	ands	r2, r1
 8002d0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6819      	ldr	r1, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	683a      	ldr	r2, [r7, #0]
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2241      	movs	r2, #65	; 0x41
 8002d34:	2120      	movs	r1, #32
 8002d36:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2240      	movs	r2, #64	; 0x40
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002d40:	2300      	movs	r3, #0
 8002d42:	e000      	b.n	8002d46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d44:	2302      	movs	r3, #2
  }
}
 8002d46:	0018      	movs	r0, r3
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	b002      	add	sp, #8
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	46c0      	nop			; (mov r8, r8)
 8002d50:	ffffefff 	.word	0xffffefff

08002d54 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2241      	movs	r2, #65	; 0x41
 8002d62:	5c9b      	ldrb	r3, [r3, r2]
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b20      	cmp	r3, #32
 8002d68:	d139      	bne.n	8002dde <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2240      	movs	r2, #64	; 0x40
 8002d6e:	5c9b      	ldrb	r3, [r3, r2]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d101      	bne.n	8002d78 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d74:	2302      	movs	r3, #2
 8002d76:	e033      	b.n	8002de0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2240      	movs	r2, #64	; 0x40
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2241      	movs	r2, #65	; 0x41
 8002d84:	2124      	movs	r1, #36	; 0x24
 8002d86:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2101      	movs	r1, #1
 8002d94:	438a      	bics	r2, r1
 8002d96:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	4a11      	ldr	r2, [pc, #68]	; (8002de8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002da4:	4013      	ands	r3, r2
 8002da6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	021b      	lsls	r3, r3, #8
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2241      	movs	r2, #65	; 0x41
 8002dce:	2120      	movs	r1, #32
 8002dd0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2240      	movs	r2, #64	; 0x40
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	e000      	b.n	8002de0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002dde:	2302      	movs	r3, #2
  }
}
 8002de0:	0018      	movs	r0, r3
 8002de2:	46bd      	mov	sp, r7
 8002de4:	b004      	add	sp, #16
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	fffff0ff 	.word	0xfffff0ff

08002dec <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI:Enter STOP mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter STOP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	000a      	movs	r2, r1
 8002df6:	1cfb      	adds	r3, r7, #3
 8002df8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8002dfe:	4b13      	ldr	r3, [pc, #76]	; (8002e4c <HAL_PWR_EnterSTOPMode+0x60>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	60fb      	str	r3, [r7, #12]
  
  /* Clear PDDS and LPDS bits */
  tmpreg &= (uint32_t)~(PWR_CR_PDDS | PWR_CR_LPDS);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2203      	movs	r2, #3
 8002e08:	4393      	bics	r3, r2
 8002e0a:	60fb      	str	r3, [r7, #12]

  /* Set LPDS bit according to Regulator value */
  tmpreg |= Regulator;
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 8002e14:	4b0d      	ldr	r3, [pc, #52]	; (8002e4c <HAL_PWR_EnterSTOPMode+0x60>)
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8002e1a:	4b0d      	ldr	r3, [pc, #52]	; (8002e50 <HAL_PWR_EnterSTOPMode+0x64>)
 8002e1c:	691a      	ldr	r2, [r3, #16]
 8002e1e:	4b0c      	ldr	r3, [pc, #48]	; (8002e50 <HAL_PWR_EnterSTOPMode+0x64>)
 8002e20:	2104      	movs	r1, #4
 8002e22:	430a      	orrs	r2, r1
 8002e24:	611a      	str	r2, [r3, #16]

  /* Select STOP mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8002e26:	1cfb      	adds	r3, r7, #3
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d101      	bne.n	8002e32 <HAL_PWR_EnterSTOPMode+0x46>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002e2e:	bf30      	wfi
 8002e30:	e002      	b.n	8002e38 <HAL_PWR_EnterSTOPMode+0x4c>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002e32:	bf40      	sev
    __WFE();
 8002e34:	bf20      	wfe
    __WFE();
 8002e36:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 8002e38:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <HAL_PWR_EnterSTOPMode+0x64>)
 8002e3a:	691a      	ldr	r2, [r3, #16]
 8002e3c:	4b04      	ldr	r3, [pc, #16]	; (8002e50 <HAL_PWR_EnterSTOPMode+0x64>)
 8002e3e:	2104      	movs	r1, #4
 8002e40:	438a      	bics	r2, r1
 8002e42:	611a      	str	r2, [r3, #16]
}
 8002e44:	46c0      	nop			; (mov r8, r8)
 8002e46:	46bd      	mov	sp, r7
 8002e48:	b004      	add	sp, #16
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40007000 	.word	0x40007000
 8002e50:	e000ed00 	.word	0xe000ed00

08002e54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b088      	sub	sp, #32
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e301      	b.n	800346a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	d100      	bne.n	8002e72 <HAL_RCC_OscConfig+0x1e>
 8002e70:	e08d      	b.n	8002f8e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002e72:	4bc3      	ldr	r3, [pc, #780]	; (8003180 <HAL_RCC_OscConfig+0x32c>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	220c      	movs	r2, #12
 8002e78:	4013      	ands	r3, r2
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	d00e      	beq.n	8002e9c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e7e:	4bc0      	ldr	r3, [pc, #768]	; (8003180 <HAL_RCC_OscConfig+0x32c>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	220c      	movs	r2, #12
 8002e84:	4013      	ands	r3, r2
 8002e86:	2b08      	cmp	r3, #8
 8002e88:	d116      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x64>
 8002e8a:	4bbd      	ldr	r3, [pc, #756]	; (8003180 <HAL_RCC_OscConfig+0x32c>)
 8002e8c:	685a      	ldr	r2, [r3, #4]
 8002e8e:	2380      	movs	r3, #128	; 0x80
 8002e90:	025b      	lsls	r3, r3, #9
 8002e92:	401a      	ands	r2, r3
 8002e94:	2380      	movs	r3, #128	; 0x80
 8002e96:	025b      	lsls	r3, r3, #9
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d10d      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e9c:	4bb8      	ldr	r3, [pc, #736]	; (8003180 <HAL_RCC_OscConfig+0x32c>)
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	2380      	movs	r3, #128	; 0x80
 8002ea2:	029b      	lsls	r3, r3, #10
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	d100      	bne.n	8002eaa <HAL_RCC_OscConfig+0x56>
 8002ea8:	e070      	b.n	8002f8c <HAL_RCC_OscConfig+0x138>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d000      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x60>
 8002eb2:	e06b      	b.n	8002f8c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e2d8      	b.n	800346a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d107      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x7c>
 8002ec0:	4baf      	ldr	r3, [pc, #700]	; (8003180 <HAL_RCC_OscConfig+0x32c>)
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	4bae      	ldr	r3, [pc, #696]	; (8003180 <HAL_RCC_OscConfig+0x32c>)
 8002ec6:	2180      	movs	r1, #128	; 0x80
 8002ec8:	0249      	lsls	r1, r1, #9
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	601a      	str	r2, [r3, #0]
 8002ece:	e02f      	b.n	8002f30 <HAL_RCC_OscConfig+0xdc>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d10c      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x9e>
 8002ed8:	4ba9      	ldr	r3, [pc, #676]	; (8003180 <HAL_RCC_OscConfig+0x32c>)
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	4ba8      	ldr	r3, [pc, #672]	; (8003180 <HAL_RCC_OscConfig+0x32c>)
 8002ede:	49a9      	ldr	r1, [pc, #676]	; (8003184 <HAL_RCC_OscConfig+0x330>)
 8002ee0:	400a      	ands	r2, r1
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	4ba6      	ldr	r3, [pc, #664]	; (8003180 <HAL_RCC_OscConfig+0x32c>)
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	4ba5      	ldr	r3, [pc, #660]	; (8003180 <HAL_RCC_OscConfig+0x32c>)
 8002eea:	49a7      	ldr	r1, [pc, #668]	; (8003188 <HAL_RCC_OscConfig+0x334>)
 8002eec:	400a      	ands	r2, r1
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	e01e      	b.n	8002f30 <HAL_RCC_OscConfig+0xdc>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2b05      	cmp	r3, #5
 8002ef8:	d10e      	bne.n	8002f18 <HAL_RCC_OscConfig+0xc4>
 8002efa:	4ba1      	ldr	r3, [pc, #644]	; (8003180 <HAL_RCC_OscConfig+0x32c>)
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	4ba0      	ldr	r3, [pc, #640]	; (8003180 <HAL_RCC_OscConfig+0x32c>)
 8002f00:	2180      	movs	r1, #128	; 0x80
 8002f02:	02c9      	lsls	r1, r1, #11
 8002f04:	430a      	orrs	r2, r1
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	4b9d      	ldr	r3, [pc, #628]	; (8003180 <HAL_RCC_OscConfig+0x32c>)
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	4b9c      	ldr	r3, [pc, #624]	; (8003180 <HAL_RCC_OscConfig+0x32c>)
 8002f0e:	2180      	movs	r1, #128	; 0x80
 8002f10:	0249      	lsls	r1, r1, #9
 8002f12:	430a      	orrs	r2, r1
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	e00b      	b.n	8002f30 <HAL_RCC_OscConfig+0xdc>
 8002f18:	4b99      	ldr	r3, [pc, #612]	; (8003180 <HAL_RCC_OscConfig+0x32c>)
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	4b98      	ldr	r3, [pc, #608]	; (8003180 <HAL_RCC_OscConfig+0x32c>)
 8002f1e:	4999      	ldr	r1, [pc, #612]	; (8003184 <HAL_RCC_OscConfig+0x330>)
 8002f20:	400a      	ands	r2, r1
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	4b96      	ldr	r3, [pc, #600]	; (8003180 <HAL_RCC_OscConfig+0x32c>)
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	4b95      	ldr	r3, [pc, #596]	; (8003180 <HAL_RCC_OscConfig+0x32c>)
 8002f2a:	4997      	ldr	r1, [pc, #604]	; (8003188 <HAL_RCC_OscConfig+0x334>)
 8002f2c:	400a      	ands	r2, r1
 8002f2e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d014      	beq.n	8002f62 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f38:	f7fe fcea 	bl	8001910 <HAL_GetTick>
 8002f3c:	0003      	movs	r3, r0
 8002f3e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f42:	f7fe fce5 	bl	8001910 <HAL_GetTick>
 8002f46:	0002      	movs	r2, r0
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b64      	cmp	r3, #100	; 0x64
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e28a      	b.n	800346a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f54:	4b8a      	ldr	r3, [pc, #552]	; (8003180 <HAL_RCC_OscConfig+0x32c>)
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	2380      	movs	r3, #128	; 0x80
 8002f5a:	029b      	lsls	r3, r3, #10
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	d0f0      	beq.n	8002f42 <HAL_RCC_OscConfig+0xee>
 8002f60:	e015      	b.n	8002f8e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f62:	f7fe fcd5 	bl	8001910 <HAL_GetTick>
 8002f66:	0003      	movs	r3, r0
 8002f68:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f6c:	f7fe fcd0 	bl	8001910 <HAL_GetTick>
 8002f70:	0002      	movs	r2, r0
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b64      	cmp	r3, #100	; 0x64
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e275      	b.n	800346a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f7e:	4b80      	ldr	r3, [pc, #512]	; (8003180 <HAL_RCC_OscConfig+0x32c>)
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	2380      	movs	r3, #128	; 0x80
 8002f84:	029b      	lsls	r3, r3, #10
 8002f86:	4013      	ands	r3, r2
 8002f88:	d1f0      	bne.n	8002f6c <HAL_RCC_OscConfig+0x118>
 8002f8a:	e000      	b.n	8002f8e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f8c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2202      	movs	r2, #2
 8002f94:	4013      	ands	r3, r2
 8002f96:	d100      	bne.n	8002f9a <HAL_RCC_OscConfig+0x146>
 8002f98:	e069      	b.n	800306e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002f9a:	4b79      	ldr	r3, [pc, #484]	; (8003180 <HAL_RCC_OscConfig+0x32c>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	220c      	movs	r2, #12
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	d00b      	beq.n	8002fbc <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002fa4:	4b76      	ldr	r3, [pc, #472]	; (8003180 <HAL_RCC_OscConfig+0x32c>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	220c      	movs	r2, #12
 8002faa:	4013      	ands	r3, r2
 8002fac:	2b08      	cmp	r3, #8
 8002fae:	d11c      	bne.n	8002fea <HAL_RCC_OscConfig+0x196>
 8002fb0:	4b73      	ldr	r3, [pc, #460]	; (8003180 <HAL_RCC_OscConfig+0x32c>)
 8002fb2:	685a      	ldr	r2, [r3, #4]
 8002fb4:	2380      	movs	r3, #128	; 0x80
 8002fb6:	025b      	lsls	r3, r3, #9
 8002fb8:	4013      	ands	r3, r2
 8002fba:	d116      	bne.n	8002fea <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fbc:	4b70      	ldr	r3, [pc, #448]	; (8003180 <HAL_RCC_OscConfig+0x32c>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d005      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x17e>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d001      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e24b      	b.n	800346a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd2:	4b6b      	ldr	r3, [pc, #428]	; (8003180 <HAL_RCC_OscConfig+0x32c>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	22f8      	movs	r2, #248	; 0xf8
 8002fd8:	4393      	bics	r3, r2
 8002fda:	0019      	movs	r1, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	00da      	lsls	r2, r3, #3
 8002fe2:	4b67      	ldr	r3, [pc, #412]	; (8003180 <HAL_RCC_OscConfig+0x32c>)
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fe8:	e041      	b.n	800306e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d024      	beq.n	800303c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ff2:	4b63      	ldr	r3, [pc, #396]	; (8003180 <HAL_RCC_OscConfig+0x32c>)
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	4b62      	ldr	r3, [pc, #392]	; (8003180 <HAL_RCC_OscConfig+0x32c>)
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffe:	f7fe fc87 	bl	8001910 <HAL_GetTick>
 8003002:	0003      	movs	r3, r0
 8003004:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003008:	f7fe fc82 	bl	8001910 <HAL_GetTick>
 800300c:	0002      	movs	r2, r0
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e227      	b.n	800346a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800301a:	4b59      	ldr	r3, [pc, #356]	; (8003180 <HAL_RCC_OscConfig+0x32c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2202      	movs	r2, #2
 8003020:	4013      	ands	r3, r2
 8003022:	d0f1      	beq.n	8003008 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003024:	4b56      	ldr	r3, [pc, #344]	; (8003180 <HAL_RCC_OscConfig+0x32c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	22f8      	movs	r2, #248	; 0xf8
 800302a:	4393      	bics	r3, r2
 800302c:	0019      	movs	r1, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	00da      	lsls	r2, r3, #3
 8003034:	4b52      	ldr	r3, [pc, #328]	; (8003180 <HAL_RCC_OscConfig+0x32c>)
 8003036:	430a      	orrs	r2, r1
 8003038:	601a      	str	r2, [r3, #0]
 800303a:	e018      	b.n	800306e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800303c:	4b50      	ldr	r3, [pc, #320]	; (8003180 <HAL_RCC_OscConfig+0x32c>)
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	4b4f      	ldr	r3, [pc, #316]	; (8003180 <HAL_RCC_OscConfig+0x32c>)
 8003042:	2101      	movs	r1, #1
 8003044:	438a      	bics	r2, r1
 8003046:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003048:	f7fe fc62 	bl	8001910 <HAL_GetTick>
 800304c:	0003      	movs	r3, r0
 800304e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003050:	e008      	b.n	8003064 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003052:	f7fe fc5d 	bl	8001910 <HAL_GetTick>
 8003056:	0002      	movs	r2, r0
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d901      	bls.n	8003064 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e202      	b.n	800346a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003064:	4b46      	ldr	r3, [pc, #280]	; (8003180 <HAL_RCC_OscConfig+0x32c>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2202      	movs	r2, #2
 800306a:	4013      	ands	r3, r2
 800306c:	d1f1      	bne.n	8003052 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2208      	movs	r2, #8
 8003074:	4013      	ands	r3, r2
 8003076:	d036      	beq.n	80030e6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	69db      	ldr	r3, [r3, #28]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d019      	beq.n	80030b4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003080:	4b3f      	ldr	r3, [pc, #252]	; (8003180 <HAL_RCC_OscConfig+0x32c>)
 8003082:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003084:	4b3e      	ldr	r3, [pc, #248]	; (8003180 <HAL_RCC_OscConfig+0x32c>)
 8003086:	2101      	movs	r1, #1
 8003088:	430a      	orrs	r2, r1
 800308a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800308c:	f7fe fc40 	bl	8001910 <HAL_GetTick>
 8003090:	0003      	movs	r3, r0
 8003092:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003094:	e008      	b.n	80030a8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003096:	f7fe fc3b 	bl	8001910 <HAL_GetTick>
 800309a:	0002      	movs	r2, r0
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e1e0      	b.n	800346a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030a8:	4b35      	ldr	r3, [pc, #212]	; (8003180 <HAL_RCC_OscConfig+0x32c>)
 80030aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ac:	2202      	movs	r2, #2
 80030ae:	4013      	ands	r3, r2
 80030b0:	d0f1      	beq.n	8003096 <HAL_RCC_OscConfig+0x242>
 80030b2:	e018      	b.n	80030e6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030b4:	4b32      	ldr	r3, [pc, #200]	; (8003180 <HAL_RCC_OscConfig+0x32c>)
 80030b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030b8:	4b31      	ldr	r3, [pc, #196]	; (8003180 <HAL_RCC_OscConfig+0x32c>)
 80030ba:	2101      	movs	r1, #1
 80030bc:	438a      	bics	r2, r1
 80030be:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c0:	f7fe fc26 	bl	8001910 <HAL_GetTick>
 80030c4:	0003      	movs	r3, r0
 80030c6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c8:	e008      	b.n	80030dc <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030ca:	f7fe fc21 	bl	8001910 <HAL_GetTick>
 80030ce:	0002      	movs	r2, r0
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e1c6      	b.n	800346a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030dc:	4b28      	ldr	r3, [pc, #160]	; (8003180 <HAL_RCC_OscConfig+0x32c>)
 80030de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e0:	2202      	movs	r2, #2
 80030e2:	4013      	ands	r3, r2
 80030e4:	d1f1      	bne.n	80030ca <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2204      	movs	r2, #4
 80030ec:	4013      	ands	r3, r2
 80030ee:	d100      	bne.n	80030f2 <HAL_RCC_OscConfig+0x29e>
 80030f0:	e0b4      	b.n	800325c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030f2:	201f      	movs	r0, #31
 80030f4:	183b      	adds	r3, r7, r0
 80030f6:	2200      	movs	r2, #0
 80030f8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030fa:	4b21      	ldr	r3, [pc, #132]	; (8003180 <HAL_RCC_OscConfig+0x32c>)
 80030fc:	69da      	ldr	r2, [r3, #28]
 80030fe:	2380      	movs	r3, #128	; 0x80
 8003100:	055b      	lsls	r3, r3, #21
 8003102:	4013      	ands	r3, r2
 8003104:	d110      	bne.n	8003128 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003106:	4b1e      	ldr	r3, [pc, #120]	; (8003180 <HAL_RCC_OscConfig+0x32c>)
 8003108:	69da      	ldr	r2, [r3, #28]
 800310a:	4b1d      	ldr	r3, [pc, #116]	; (8003180 <HAL_RCC_OscConfig+0x32c>)
 800310c:	2180      	movs	r1, #128	; 0x80
 800310e:	0549      	lsls	r1, r1, #21
 8003110:	430a      	orrs	r2, r1
 8003112:	61da      	str	r2, [r3, #28]
 8003114:	4b1a      	ldr	r3, [pc, #104]	; (8003180 <HAL_RCC_OscConfig+0x32c>)
 8003116:	69da      	ldr	r2, [r3, #28]
 8003118:	2380      	movs	r3, #128	; 0x80
 800311a:	055b      	lsls	r3, r3, #21
 800311c:	4013      	ands	r3, r2
 800311e:	60fb      	str	r3, [r7, #12]
 8003120:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003122:	183b      	adds	r3, r7, r0
 8003124:	2201      	movs	r2, #1
 8003126:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003128:	4b18      	ldr	r3, [pc, #96]	; (800318c <HAL_RCC_OscConfig+0x338>)
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	2380      	movs	r3, #128	; 0x80
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	4013      	ands	r3, r2
 8003132:	d11a      	bne.n	800316a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003134:	4b15      	ldr	r3, [pc, #84]	; (800318c <HAL_RCC_OscConfig+0x338>)
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	4b14      	ldr	r3, [pc, #80]	; (800318c <HAL_RCC_OscConfig+0x338>)
 800313a:	2180      	movs	r1, #128	; 0x80
 800313c:	0049      	lsls	r1, r1, #1
 800313e:	430a      	orrs	r2, r1
 8003140:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003142:	f7fe fbe5 	bl	8001910 <HAL_GetTick>
 8003146:	0003      	movs	r3, r0
 8003148:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800314c:	f7fe fbe0 	bl	8001910 <HAL_GetTick>
 8003150:	0002      	movs	r2, r0
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b64      	cmp	r3, #100	; 0x64
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e185      	b.n	800346a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800315e:	4b0b      	ldr	r3, [pc, #44]	; (800318c <HAL_RCC_OscConfig+0x338>)
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	2380      	movs	r3, #128	; 0x80
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	4013      	ands	r3, r2
 8003168:	d0f0      	beq.n	800314c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d10e      	bne.n	8003190 <HAL_RCC_OscConfig+0x33c>
 8003172:	4b03      	ldr	r3, [pc, #12]	; (8003180 <HAL_RCC_OscConfig+0x32c>)
 8003174:	6a1a      	ldr	r2, [r3, #32]
 8003176:	4b02      	ldr	r3, [pc, #8]	; (8003180 <HAL_RCC_OscConfig+0x32c>)
 8003178:	2101      	movs	r1, #1
 800317a:	430a      	orrs	r2, r1
 800317c:	621a      	str	r2, [r3, #32]
 800317e:	e035      	b.n	80031ec <HAL_RCC_OscConfig+0x398>
 8003180:	40021000 	.word	0x40021000
 8003184:	fffeffff 	.word	0xfffeffff
 8003188:	fffbffff 	.word	0xfffbffff
 800318c:	40007000 	.word	0x40007000
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d10c      	bne.n	80031b2 <HAL_RCC_OscConfig+0x35e>
 8003198:	4bb6      	ldr	r3, [pc, #728]	; (8003474 <HAL_RCC_OscConfig+0x620>)
 800319a:	6a1a      	ldr	r2, [r3, #32]
 800319c:	4bb5      	ldr	r3, [pc, #724]	; (8003474 <HAL_RCC_OscConfig+0x620>)
 800319e:	2101      	movs	r1, #1
 80031a0:	438a      	bics	r2, r1
 80031a2:	621a      	str	r2, [r3, #32]
 80031a4:	4bb3      	ldr	r3, [pc, #716]	; (8003474 <HAL_RCC_OscConfig+0x620>)
 80031a6:	6a1a      	ldr	r2, [r3, #32]
 80031a8:	4bb2      	ldr	r3, [pc, #712]	; (8003474 <HAL_RCC_OscConfig+0x620>)
 80031aa:	2104      	movs	r1, #4
 80031ac:	438a      	bics	r2, r1
 80031ae:	621a      	str	r2, [r3, #32]
 80031b0:	e01c      	b.n	80031ec <HAL_RCC_OscConfig+0x398>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	2b05      	cmp	r3, #5
 80031b8:	d10c      	bne.n	80031d4 <HAL_RCC_OscConfig+0x380>
 80031ba:	4bae      	ldr	r3, [pc, #696]	; (8003474 <HAL_RCC_OscConfig+0x620>)
 80031bc:	6a1a      	ldr	r2, [r3, #32]
 80031be:	4bad      	ldr	r3, [pc, #692]	; (8003474 <HAL_RCC_OscConfig+0x620>)
 80031c0:	2104      	movs	r1, #4
 80031c2:	430a      	orrs	r2, r1
 80031c4:	621a      	str	r2, [r3, #32]
 80031c6:	4bab      	ldr	r3, [pc, #684]	; (8003474 <HAL_RCC_OscConfig+0x620>)
 80031c8:	6a1a      	ldr	r2, [r3, #32]
 80031ca:	4baa      	ldr	r3, [pc, #680]	; (8003474 <HAL_RCC_OscConfig+0x620>)
 80031cc:	2101      	movs	r1, #1
 80031ce:	430a      	orrs	r2, r1
 80031d0:	621a      	str	r2, [r3, #32]
 80031d2:	e00b      	b.n	80031ec <HAL_RCC_OscConfig+0x398>
 80031d4:	4ba7      	ldr	r3, [pc, #668]	; (8003474 <HAL_RCC_OscConfig+0x620>)
 80031d6:	6a1a      	ldr	r2, [r3, #32]
 80031d8:	4ba6      	ldr	r3, [pc, #664]	; (8003474 <HAL_RCC_OscConfig+0x620>)
 80031da:	2101      	movs	r1, #1
 80031dc:	438a      	bics	r2, r1
 80031de:	621a      	str	r2, [r3, #32]
 80031e0:	4ba4      	ldr	r3, [pc, #656]	; (8003474 <HAL_RCC_OscConfig+0x620>)
 80031e2:	6a1a      	ldr	r2, [r3, #32]
 80031e4:	4ba3      	ldr	r3, [pc, #652]	; (8003474 <HAL_RCC_OscConfig+0x620>)
 80031e6:	2104      	movs	r1, #4
 80031e8:	438a      	bics	r2, r1
 80031ea:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d014      	beq.n	800321e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031f4:	f7fe fb8c 	bl	8001910 <HAL_GetTick>
 80031f8:	0003      	movs	r3, r0
 80031fa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031fc:	e009      	b.n	8003212 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031fe:	f7fe fb87 	bl	8001910 <HAL_GetTick>
 8003202:	0002      	movs	r2, r0
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	4a9b      	ldr	r2, [pc, #620]	; (8003478 <HAL_RCC_OscConfig+0x624>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e12b      	b.n	800346a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003212:	4b98      	ldr	r3, [pc, #608]	; (8003474 <HAL_RCC_OscConfig+0x620>)
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	2202      	movs	r2, #2
 8003218:	4013      	ands	r3, r2
 800321a:	d0f0      	beq.n	80031fe <HAL_RCC_OscConfig+0x3aa>
 800321c:	e013      	b.n	8003246 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800321e:	f7fe fb77 	bl	8001910 <HAL_GetTick>
 8003222:	0003      	movs	r3, r0
 8003224:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003226:	e009      	b.n	800323c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003228:	f7fe fb72 	bl	8001910 <HAL_GetTick>
 800322c:	0002      	movs	r2, r0
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	4a91      	ldr	r2, [pc, #580]	; (8003478 <HAL_RCC_OscConfig+0x624>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e116      	b.n	800346a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800323c:	4b8d      	ldr	r3, [pc, #564]	; (8003474 <HAL_RCC_OscConfig+0x620>)
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	2202      	movs	r2, #2
 8003242:	4013      	ands	r3, r2
 8003244:	d1f0      	bne.n	8003228 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003246:	231f      	movs	r3, #31
 8003248:	18fb      	adds	r3, r7, r3
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d105      	bne.n	800325c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003250:	4b88      	ldr	r3, [pc, #544]	; (8003474 <HAL_RCC_OscConfig+0x620>)
 8003252:	69da      	ldr	r2, [r3, #28]
 8003254:	4b87      	ldr	r3, [pc, #540]	; (8003474 <HAL_RCC_OscConfig+0x620>)
 8003256:	4989      	ldr	r1, [pc, #548]	; (800347c <HAL_RCC_OscConfig+0x628>)
 8003258:	400a      	ands	r2, r1
 800325a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2210      	movs	r2, #16
 8003262:	4013      	ands	r3, r2
 8003264:	d063      	beq.n	800332e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d12a      	bne.n	80032c4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800326e:	4b81      	ldr	r3, [pc, #516]	; (8003474 <HAL_RCC_OscConfig+0x620>)
 8003270:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003272:	4b80      	ldr	r3, [pc, #512]	; (8003474 <HAL_RCC_OscConfig+0x620>)
 8003274:	2104      	movs	r1, #4
 8003276:	430a      	orrs	r2, r1
 8003278:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800327a:	4b7e      	ldr	r3, [pc, #504]	; (8003474 <HAL_RCC_OscConfig+0x620>)
 800327c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800327e:	4b7d      	ldr	r3, [pc, #500]	; (8003474 <HAL_RCC_OscConfig+0x620>)
 8003280:	2101      	movs	r1, #1
 8003282:	430a      	orrs	r2, r1
 8003284:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003286:	f7fe fb43 	bl	8001910 <HAL_GetTick>
 800328a:	0003      	movs	r3, r0
 800328c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003290:	f7fe fb3e 	bl	8001910 <HAL_GetTick>
 8003294:	0002      	movs	r2, r0
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e0e3      	b.n	800346a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80032a2:	4b74      	ldr	r3, [pc, #464]	; (8003474 <HAL_RCC_OscConfig+0x620>)
 80032a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a6:	2202      	movs	r2, #2
 80032a8:	4013      	ands	r3, r2
 80032aa:	d0f1      	beq.n	8003290 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80032ac:	4b71      	ldr	r3, [pc, #452]	; (8003474 <HAL_RCC_OscConfig+0x620>)
 80032ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b0:	22f8      	movs	r2, #248	; 0xf8
 80032b2:	4393      	bics	r3, r2
 80032b4:	0019      	movs	r1, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	00da      	lsls	r2, r3, #3
 80032bc:	4b6d      	ldr	r3, [pc, #436]	; (8003474 <HAL_RCC_OscConfig+0x620>)
 80032be:	430a      	orrs	r2, r1
 80032c0:	635a      	str	r2, [r3, #52]	; 0x34
 80032c2:	e034      	b.n	800332e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	3305      	adds	r3, #5
 80032ca:	d111      	bne.n	80032f0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80032cc:	4b69      	ldr	r3, [pc, #420]	; (8003474 <HAL_RCC_OscConfig+0x620>)
 80032ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032d0:	4b68      	ldr	r3, [pc, #416]	; (8003474 <HAL_RCC_OscConfig+0x620>)
 80032d2:	2104      	movs	r1, #4
 80032d4:	438a      	bics	r2, r1
 80032d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80032d8:	4b66      	ldr	r3, [pc, #408]	; (8003474 <HAL_RCC_OscConfig+0x620>)
 80032da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032dc:	22f8      	movs	r2, #248	; 0xf8
 80032de:	4393      	bics	r3, r2
 80032e0:	0019      	movs	r1, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	00da      	lsls	r2, r3, #3
 80032e8:	4b62      	ldr	r3, [pc, #392]	; (8003474 <HAL_RCC_OscConfig+0x620>)
 80032ea:	430a      	orrs	r2, r1
 80032ec:	635a      	str	r2, [r3, #52]	; 0x34
 80032ee:	e01e      	b.n	800332e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80032f0:	4b60      	ldr	r3, [pc, #384]	; (8003474 <HAL_RCC_OscConfig+0x620>)
 80032f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032f4:	4b5f      	ldr	r3, [pc, #380]	; (8003474 <HAL_RCC_OscConfig+0x620>)
 80032f6:	2104      	movs	r1, #4
 80032f8:	430a      	orrs	r2, r1
 80032fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80032fc:	4b5d      	ldr	r3, [pc, #372]	; (8003474 <HAL_RCC_OscConfig+0x620>)
 80032fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003300:	4b5c      	ldr	r3, [pc, #368]	; (8003474 <HAL_RCC_OscConfig+0x620>)
 8003302:	2101      	movs	r1, #1
 8003304:	438a      	bics	r2, r1
 8003306:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003308:	f7fe fb02 	bl	8001910 <HAL_GetTick>
 800330c:	0003      	movs	r3, r0
 800330e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003310:	e008      	b.n	8003324 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003312:	f7fe fafd 	bl	8001910 <HAL_GetTick>
 8003316:	0002      	movs	r2, r0
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e0a2      	b.n	800346a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003324:	4b53      	ldr	r3, [pc, #332]	; (8003474 <HAL_RCC_OscConfig+0x620>)
 8003326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003328:	2202      	movs	r2, #2
 800332a:	4013      	ands	r3, r2
 800332c:	d1f1      	bne.n	8003312 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d100      	bne.n	8003338 <HAL_RCC_OscConfig+0x4e4>
 8003336:	e097      	b.n	8003468 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003338:	4b4e      	ldr	r3, [pc, #312]	; (8003474 <HAL_RCC_OscConfig+0x620>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	220c      	movs	r2, #12
 800333e:	4013      	ands	r3, r2
 8003340:	2b08      	cmp	r3, #8
 8003342:	d100      	bne.n	8003346 <HAL_RCC_OscConfig+0x4f2>
 8003344:	e06b      	b.n	800341e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	2b02      	cmp	r3, #2
 800334c:	d14c      	bne.n	80033e8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800334e:	4b49      	ldr	r3, [pc, #292]	; (8003474 <HAL_RCC_OscConfig+0x620>)
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	4b48      	ldr	r3, [pc, #288]	; (8003474 <HAL_RCC_OscConfig+0x620>)
 8003354:	494a      	ldr	r1, [pc, #296]	; (8003480 <HAL_RCC_OscConfig+0x62c>)
 8003356:	400a      	ands	r2, r1
 8003358:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800335a:	f7fe fad9 	bl	8001910 <HAL_GetTick>
 800335e:	0003      	movs	r3, r0
 8003360:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003362:	e008      	b.n	8003376 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003364:	f7fe fad4 	bl	8001910 <HAL_GetTick>
 8003368:	0002      	movs	r2, r0
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e079      	b.n	800346a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003376:	4b3f      	ldr	r3, [pc, #252]	; (8003474 <HAL_RCC_OscConfig+0x620>)
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	2380      	movs	r3, #128	; 0x80
 800337c:	049b      	lsls	r3, r3, #18
 800337e:	4013      	ands	r3, r2
 8003380:	d1f0      	bne.n	8003364 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003382:	4b3c      	ldr	r3, [pc, #240]	; (8003474 <HAL_RCC_OscConfig+0x620>)
 8003384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003386:	220f      	movs	r2, #15
 8003388:	4393      	bics	r3, r2
 800338a:	0019      	movs	r1, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003390:	4b38      	ldr	r3, [pc, #224]	; (8003474 <HAL_RCC_OscConfig+0x620>)
 8003392:	430a      	orrs	r2, r1
 8003394:	62da      	str	r2, [r3, #44]	; 0x2c
 8003396:	4b37      	ldr	r3, [pc, #220]	; (8003474 <HAL_RCC_OscConfig+0x620>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	4a3a      	ldr	r2, [pc, #232]	; (8003484 <HAL_RCC_OscConfig+0x630>)
 800339c:	4013      	ands	r3, r2
 800339e:	0019      	movs	r1, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a8:	431a      	orrs	r2, r3
 80033aa:	4b32      	ldr	r3, [pc, #200]	; (8003474 <HAL_RCC_OscConfig+0x620>)
 80033ac:	430a      	orrs	r2, r1
 80033ae:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033b0:	4b30      	ldr	r3, [pc, #192]	; (8003474 <HAL_RCC_OscConfig+0x620>)
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	4b2f      	ldr	r3, [pc, #188]	; (8003474 <HAL_RCC_OscConfig+0x620>)
 80033b6:	2180      	movs	r1, #128	; 0x80
 80033b8:	0449      	lsls	r1, r1, #17
 80033ba:	430a      	orrs	r2, r1
 80033bc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033be:	f7fe faa7 	bl	8001910 <HAL_GetTick>
 80033c2:	0003      	movs	r3, r0
 80033c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033c8:	f7fe faa2 	bl	8001910 <HAL_GetTick>
 80033cc:	0002      	movs	r2, r0
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e047      	b.n	800346a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033da:	4b26      	ldr	r3, [pc, #152]	; (8003474 <HAL_RCC_OscConfig+0x620>)
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	2380      	movs	r3, #128	; 0x80
 80033e0:	049b      	lsls	r3, r3, #18
 80033e2:	4013      	ands	r3, r2
 80033e4:	d0f0      	beq.n	80033c8 <HAL_RCC_OscConfig+0x574>
 80033e6:	e03f      	b.n	8003468 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e8:	4b22      	ldr	r3, [pc, #136]	; (8003474 <HAL_RCC_OscConfig+0x620>)
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	4b21      	ldr	r3, [pc, #132]	; (8003474 <HAL_RCC_OscConfig+0x620>)
 80033ee:	4924      	ldr	r1, [pc, #144]	; (8003480 <HAL_RCC_OscConfig+0x62c>)
 80033f0:	400a      	ands	r2, r1
 80033f2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f4:	f7fe fa8c 	bl	8001910 <HAL_GetTick>
 80033f8:	0003      	movs	r3, r0
 80033fa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033fc:	e008      	b.n	8003410 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033fe:	f7fe fa87 	bl	8001910 <HAL_GetTick>
 8003402:	0002      	movs	r2, r0
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d901      	bls.n	8003410 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e02c      	b.n	800346a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003410:	4b18      	ldr	r3, [pc, #96]	; (8003474 <HAL_RCC_OscConfig+0x620>)
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	2380      	movs	r3, #128	; 0x80
 8003416:	049b      	lsls	r3, r3, #18
 8003418:	4013      	ands	r3, r2
 800341a:	d1f0      	bne.n	80033fe <HAL_RCC_OscConfig+0x5aa>
 800341c:	e024      	b.n	8003468 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d101      	bne.n	800342a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e01f      	b.n	800346a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800342a:	4b12      	ldr	r3, [pc, #72]	; (8003474 <HAL_RCC_OscConfig+0x620>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003430:	4b10      	ldr	r3, [pc, #64]	; (8003474 <HAL_RCC_OscConfig+0x620>)
 8003432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003434:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	2380      	movs	r3, #128	; 0x80
 800343a:	025b      	lsls	r3, r3, #9
 800343c:	401a      	ands	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	429a      	cmp	r2, r3
 8003444:	d10e      	bne.n	8003464 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	220f      	movs	r2, #15
 800344a:	401a      	ands	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003450:	429a      	cmp	r2, r3
 8003452:	d107      	bne.n	8003464 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	23f0      	movs	r3, #240	; 0xf0
 8003458:	039b      	lsls	r3, r3, #14
 800345a:	401a      	ands	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003460:	429a      	cmp	r2, r3
 8003462:	d001      	beq.n	8003468 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e000      	b.n	800346a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	0018      	movs	r0, r3
 800346c:	46bd      	mov	sp, r7
 800346e:	b008      	add	sp, #32
 8003470:	bd80      	pop	{r7, pc}
 8003472:	46c0      	nop			; (mov r8, r8)
 8003474:	40021000 	.word	0x40021000
 8003478:	00001388 	.word	0x00001388
 800347c:	efffffff 	.word	0xefffffff
 8003480:	feffffff 	.word	0xfeffffff
 8003484:	ffc2ffff 	.word	0xffc2ffff

08003488 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e0b3      	b.n	8003604 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800349c:	4b5b      	ldr	r3, [pc, #364]	; (800360c <HAL_RCC_ClockConfig+0x184>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2201      	movs	r2, #1
 80034a2:	4013      	ands	r3, r2
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d911      	bls.n	80034ce <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034aa:	4b58      	ldr	r3, [pc, #352]	; (800360c <HAL_RCC_ClockConfig+0x184>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2201      	movs	r2, #1
 80034b0:	4393      	bics	r3, r2
 80034b2:	0019      	movs	r1, r3
 80034b4:	4b55      	ldr	r3, [pc, #340]	; (800360c <HAL_RCC_ClockConfig+0x184>)
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	430a      	orrs	r2, r1
 80034ba:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034bc:	4b53      	ldr	r3, [pc, #332]	; (800360c <HAL_RCC_ClockConfig+0x184>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2201      	movs	r2, #1
 80034c2:	4013      	ands	r3, r2
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d001      	beq.n	80034ce <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e09a      	b.n	8003604 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2202      	movs	r2, #2
 80034d4:	4013      	ands	r3, r2
 80034d6:	d015      	beq.n	8003504 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2204      	movs	r2, #4
 80034de:	4013      	ands	r3, r2
 80034e0:	d006      	beq.n	80034f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80034e2:	4b4b      	ldr	r3, [pc, #300]	; (8003610 <HAL_RCC_ClockConfig+0x188>)
 80034e4:	685a      	ldr	r2, [r3, #4]
 80034e6:	4b4a      	ldr	r3, [pc, #296]	; (8003610 <HAL_RCC_ClockConfig+0x188>)
 80034e8:	21e0      	movs	r1, #224	; 0xe0
 80034ea:	00c9      	lsls	r1, r1, #3
 80034ec:	430a      	orrs	r2, r1
 80034ee:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034f0:	4b47      	ldr	r3, [pc, #284]	; (8003610 <HAL_RCC_ClockConfig+0x188>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	22f0      	movs	r2, #240	; 0xf0
 80034f6:	4393      	bics	r3, r2
 80034f8:	0019      	movs	r1, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689a      	ldr	r2, [r3, #8]
 80034fe:	4b44      	ldr	r3, [pc, #272]	; (8003610 <HAL_RCC_ClockConfig+0x188>)
 8003500:	430a      	orrs	r2, r1
 8003502:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2201      	movs	r2, #1
 800350a:	4013      	ands	r3, r2
 800350c:	d040      	beq.n	8003590 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d107      	bne.n	8003526 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003516:	4b3e      	ldr	r3, [pc, #248]	; (8003610 <HAL_RCC_ClockConfig+0x188>)
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	2380      	movs	r3, #128	; 0x80
 800351c:	029b      	lsls	r3, r3, #10
 800351e:	4013      	ands	r3, r2
 8003520:	d114      	bne.n	800354c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e06e      	b.n	8003604 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	2b02      	cmp	r3, #2
 800352c:	d107      	bne.n	800353e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800352e:	4b38      	ldr	r3, [pc, #224]	; (8003610 <HAL_RCC_ClockConfig+0x188>)
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	2380      	movs	r3, #128	; 0x80
 8003534:	049b      	lsls	r3, r3, #18
 8003536:	4013      	ands	r3, r2
 8003538:	d108      	bne.n	800354c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e062      	b.n	8003604 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800353e:	4b34      	ldr	r3, [pc, #208]	; (8003610 <HAL_RCC_ClockConfig+0x188>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2202      	movs	r2, #2
 8003544:	4013      	ands	r3, r2
 8003546:	d101      	bne.n	800354c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e05b      	b.n	8003604 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800354c:	4b30      	ldr	r3, [pc, #192]	; (8003610 <HAL_RCC_ClockConfig+0x188>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	2203      	movs	r2, #3
 8003552:	4393      	bics	r3, r2
 8003554:	0019      	movs	r1, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	4b2d      	ldr	r3, [pc, #180]	; (8003610 <HAL_RCC_ClockConfig+0x188>)
 800355c:	430a      	orrs	r2, r1
 800355e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003560:	f7fe f9d6 	bl	8001910 <HAL_GetTick>
 8003564:	0003      	movs	r3, r0
 8003566:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003568:	e009      	b.n	800357e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800356a:	f7fe f9d1 	bl	8001910 <HAL_GetTick>
 800356e:	0002      	movs	r2, r0
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	4a27      	ldr	r2, [pc, #156]	; (8003614 <HAL_RCC_ClockConfig+0x18c>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d901      	bls.n	800357e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e042      	b.n	8003604 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800357e:	4b24      	ldr	r3, [pc, #144]	; (8003610 <HAL_RCC_ClockConfig+0x188>)
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	220c      	movs	r2, #12
 8003584:	401a      	ands	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	429a      	cmp	r2, r3
 800358e:	d1ec      	bne.n	800356a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003590:	4b1e      	ldr	r3, [pc, #120]	; (800360c <HAL_RCC_ClockConfig+0x184>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2201      	movs	r2, #1
 8003596:	4013      	ands	r3, r2
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	429a      	cmp	r2, r3
 800359c:	d211      	bcs.n	80035c2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800359e:	4b1b      	ldr	r3, [pc, #108]	; (800360c <HAL_RCC_ClockConfig+0x184>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2201      	movs	r2, #1
 80035a4:	4393      	bics	r3, r2
 80035a6:	0019      	movs	r1, r3
 80035a8:	4b18      	ldr	r3, [pc, #96]	; (800360c <HAL_RCC_ClockConfig+0x184>)
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	430a      	orrs	r2, r1
 80035ae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b0:	4b16      	ldr	r3, [pc, #88]	; (800360c <HAL_RCC_ClockConfig+0x184>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2201      	movs	r2, #1
 80035b6:	4013      	ands	r3, r2
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d001      	beq.n	80035c2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e020      	b.n	8003604 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2204      	movs	r2, #4
 80035c8:	4013      	ands	r3, r2
 80035ca:	d009      	beq.n	80035e0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80035cc:	4b10      	ldr	r3, [pc, #64]	; (8003610 <HAL_RCC_ClockConfig+0x188>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	4a11      	ldr	r2, [pc, #68]	; (8003618 <HAL_RCC_ClockConfig+0x190>)
 80035d2:	4013      	ands	r3, r2
 80035d4:	0019      	movs	r1, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68da      	ldr	r2, [r3, #12]
 80035da:	4b0d      	ldr	r3, [pc, #52]	; (8003610 <HAL_RCC_ClockConfig+0x188>)
 80035dc:	430a      	orrs	r2, r1
 80035de:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80035e0:	f000 f820 	bl	8003624 <HAL_RCC_GetSysClockFreq>
 80035e4:	0001      	movs	r1, r0
 80035e6:	4b0a      	ldr	r3, [pc, #40]	; (8003610 <HAL_RCC_ClockConfig+0x188>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	091b      	lsrs	r3, r3, #4
 80035ec:	220f      	movs	r2, #15
 80035ee:	4013      	ands	r3, r2
 80035f0:	4a0a      	ldr	r2, [pc, #40]	; (800361c <HAL_RCC_ClockConfig+0x194>)
 80035f2:	5cd3      	ldrb	r3, [r2, r3]
 80035f4:	000a      	movs	r2, r1
 80035f6:	40da      	lsrs	r2, r3
 80035f8:	4b09      	ldr	r3, [pc, #36]	; (8003620 <HAL_RCC_ClockConfig+0x198>)
 80035fa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80035fc:	2003      	movs	r0, #3
 80035fe:	f7fe f941 	bl	8001884 <HAL_InitTick>
  
  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	0018      	movs	r0, r3
 8003606:	46bd      	mov	sp, r7
 8003608:	b004      	add	sp, #16
 800360a:	bd80      	pop	{r7, pc}
 800360c:	40022000 	.word	0x40022000
 8003610:	40021000 	.word	0x40021000
 8003614:	00001388 	.word	0x00001388
 8003618:	fffff8ff 	.word	0xfffff8ff
 800361c:	08006624 	.word	0x08006624
 8003620:	2000001c 	.word	0x2000001c

08003624 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003624:	b590      	push	{r4, r7, lr}
 8003626:	b08f      	sub	sp, #60	; 0x3c
 8003628:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800362a:	2314      	movs	r3, #20
 800362c:	18fb      	adds	r3, r7, r3
 800362e:	4a2b      	ldr	r2, [pc, #172]	; (80036dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003630:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003632:	c313      	stmia	r3!, {r0, r1, r4}
 8003634:	6812      	ldr	r2, [r2, #0]
 8003636:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003638:	1d3b      	adds	r3, r7, #4
 800363a:	4a29      	ldr	r2, [pc, #164]	; (80036e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800363c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800363e:	c313      	stmia	r3!, {r0, r1, r4}
 8003640:	6812      	ldr	r2, [r2, #0]
 8003642:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003644:	2300      	movs	r3, #0
 8003646:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003648:	2300      	movs	r3, #0
 800364a:	62bb      	str	r3, [r7, #40]	; 0x28
 800364c:	2300      	movs	r3, #0
 800364e:	637b      	str	r3, [r7, #52]	; 0x34
 8003650:	2300      	movs	r3, #0
 8003652:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003654:	2300      	movs	r3, #0
 8003656:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003658:	4b22      	ldr	r3, [pc, #136]	; (80036e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800365e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003660:	220c      	movs	r2, #12
 8003662:	4013      	ands	r3, r2
 8003664:	2b04      	cmp	r3, #4
 8003666:	d002      	beq.n	800366e <HAL_RCC_GetSysClockFreq+0x4a>
 8003668:	2b08      	cmp	r3, #8
 800366a:	d003      	beq.n	8003674 <HAL_RCC_GetSysClockFreq+0x50>
 800366c:	e02d      	b.n	80036ca <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800366e:	4b1e      	ldr	r3, [pc, #120]	; (80036e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003670:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003672:	e02d      	b.n	80036d0 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003676:	0c9b      	lsrs	r3, r3, #18
 8003678:	220f      	movs	r2, #15
 800367a:	4013      	ands	r3, r2
 800367c:	2214      	movs	r2, #20
 800367e:	18ba      	adds	r2, r7, r2
 8003680:	5cd3      	ldrb	r3, [r2, r3]
 8003682:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003684:	4b17      	ldr	r3, [pc, #92]	; (80036e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003688:	220f      	movs	r2, #15
 800368a:	4013      	ands	r3, r2
 800368c:	1d3a      	adds	r2, r7, #4
 800368e:	5cd3      	ldrb	r3, [r2, r3]
 8003690:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003692:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003694:	2380      	movs	r3, #128	; 0x80
 8003696:	025b      	lsls	r3, r3, #9
 8003698:	4013      	ands	r3, r2
 800369a:	d009      	beq.n	80036b0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800369c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800369e:	4812      	ldr	r0, [pc, #72]	; (80036e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80036a0:	f7fc fd32 	bl	8000108 <__udivsi3>
 80036a4:	0003      	movs	r3, r0
 80036a6:	001a      	movs	r2, r3
 80036a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036aa:	4353      	muls	r3, r2
 80036ac:	637b      	str	r3, [r7, #52]	; 0x34
 80036ae:	e009      	b.n	80036c4 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80036b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036b2:	000a      	movs	r2, r1
 80036b4:	0152      	lsls	r2, r2, #5
 80036b6:	1a52      	subs	r2, r2, r1
 80036b8:	0193      	lsls	r3, r2, #6
 80036ba:	1a9b      	subs	r3, r3, r2
 80036bc:	00db      	lsls	r3, r3, #3
 80036be:	185b      	adds	r3, r3, r1
 80036c0:	021b      	lsls	r3, r3, #8
 80036c2:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80036c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036c6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80036c8:	e002      	b.n	80036d0 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036ca:	4b07      	ldr	r3, [pc, #28]	; (80036e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80036cc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80036ce:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80036d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80036d2:	0018      	movs	r0, r3
 80036d4:	46bd      	mov	sp, r7
 80036d6:	b00f      	add	sp, #60	; 0x3c
 80036d8:	bd90      	pop	{r4, r7, pc}
 80036da:	46c0      	nop			; (mov r8, r8)
 80036dc:	08006600 	.word	0x08006600
 80036e0:	08006610 	.word	0x08006610
 80036e4:	40021000 	.word	0x40021000
 80036e8:	007a1200 	.word	0x007a1200

080036ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036f0:	4b02      	ldr	r3, [pc, #8]	; (80036fc <HAL_RCC_GetHCLKFreq+0x10>)
 80036f2:	681b      	ldr	r3, [r3, #0]
}
 80036f4:	0018      	movs	r0, r3
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	46c0      	nop			; (mov r8, r8)
 80036fc:	2000001c 	.word	0x2000001c

08003700 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003704:	f7ff fff2 	bl	80036ec <HAL_RCC_GetHCLKFreq>
 8003708:	0001      	movs	r1, r0
 800370a:	4b06      	ldr	r3, [pc, #24]	; (8003724 <HAL_RCC_GetPCLK1Freq+0x24>)
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	0a1b      	lsrs	r3, r3, #8
 8003710:	2207      	movs	r2, #7
 8003712:	4013      	ands	r3, r2
 8003714:	4a04      	ldr	r2, [pc, #16]	; (8003728 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003716:	5cd3      	ldrb	r3, [r2, r3]
 8003718:	40d9      	lsrs	r1, r3
 800371a:	000b      	movs	r3, r1
}    
 800371c:	0018      	movs	r0, r3
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	46c0      	nop			; (mov r8, r8)
 8003724:	40021000 	.word	0x40021000
 8003728:	08006634 	.word	0x08006634

0800372c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003734:	2300      	movs	r3, #0
 8003736:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003738:	2300      	movs	r3, #0
 800373a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	2380      	movs	r3, #128	; 0x80
 8003742:	025b      	lsls	r3, r3, #9
 8003744:	4013      	ands	r3, r2
 8003746:	d100      	bne.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003748:	e08e      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800374a:	2017      	movs	r0, #23
 800374c:	183b      	adds	r3, r7, r0
 800374e:	2200      	movs	r2, #0
 8003750:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003752:	4b5f      	ldr	r3, [pc, #380]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003754:	69da      	ldr	r2, [r3, #28]
 8003756:	2380      	movs	r3, #128	; 0x80
 8003758:	055b      	lsls	r3, r3, #21
 800375a:	4013      	ands	r3, r2
 800375c:	d110      	bne.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800375e:	4b5c      	ldr	r3, [pc, #368]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003760:	69da      	ldr	r2, [r3, #28]
 8003762:	4b5b      	ldr	r3, [pc, #364]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003764:	2180      	movs	r1, #128	; 0x80
 8003766:	0549      	lsls	r1, r1, #21
 8003768:	430a      	orrs	r2, r1
 800376a:	61da      	str	r2, [r3, #28]
 800376c:	4b58      	ldr	r3, [pc, #352]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800376e:	69da      	ldr	r2, [r3, #28]
 8003770:	2380      	movs	r3, #128	; 0x80
 8003772:	055b      	lsls	r3, r3, #21
 8003774:	4013      	ands	r3, r2
 8003776:	60bb      	str	r3, [r7, #8]
 8003778:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800377a:	183b      	adds	r3, r7, r0
 800377c:	2201      	movs	r2, #1
 800377e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003780:	4b54      	ldr	r3, [pc, #336]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	2380      	movs	r3, #128	; 0x80
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	4013      	ands	r3, r2
 800378a:	d11a      	bne.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800378c:	4b51      	ldr	r3, [pc, #324]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	4b50      	ldr	r3, [pc, #320]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003792:	2180      	movs	r1, #128	; 0x80
 8003794:	0049      	lsls	r1, r1, #1
 8003796:	430a      	orrs	r2, r1
 8003798:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800379a:	f7fe f8b9 	bl	8001910 <HAL_GetTick>
 800379e:	0003      	movs	r3, r0
 80037a0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a2:	e008      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037a4:	f7fe f8b4 	bl	8001910 <HAL_GetTick>
 80037a8:	0002      	movs	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b64      	cmp	r3, #100	; 0x64
 80037b0:	d901      	bls.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e087      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b6:	4b47      	ldr	r3, [pc, #284]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	2380      	movs	r3, #128	; 0x80
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	4013      	ands	r3, r2
 80037c0:	d0f0      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037c2:	4b43      	ldr	r3, [pc, #268]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80037c4:	6a1a      	ldr	r2, [r3, #32]
 80037c6:	23c0      	movs	r3, #192	; 0xc0
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	4013      	ands	r3, r2
 80037cc:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d034      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685a      	ldr	r2, [r3, #4]
 80037d8:	23c0      	movs	r3, #192	; 0xc0
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	4013      	ands	r3, r2
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d02c      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037e4:	4b3a      	ldr	r3, [pc, #232]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	4a3b      	ldr	r2, [pc, #236]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037ea:	4013      	ands	r3, r2
 80037ec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037ee:	4b38      	ldr	r3, [pc, #224]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80037f0:	6a1a      	ldr	r2, [r3, #32]
 80037f2:	4b37      	ldr	r3, [pc, #220]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80037f4:	2180      	movs	r1, #128	; 0x80
 80037f6:	0249      	lsls	r1, r1, #9
 80037f8:	430a      	orrs	r2, r1
 80037fa:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037fc:	4b34      	ldr	r3, [pc, #208]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80037fe:	6a1a      	ldr	r2, [r3, #32]
 8003800:	4b33      	ldr	r3, [pc, #204]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003802:	4936      	ldr	r1, [pc, #216]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003804:	400a      	ands	r2, r1
 8003806:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003808:	4b31      	ldr	r3, [pc, #196]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2201      	movs	r2, #1
 8003812:	4013      	ands	r3, r2
 8003814:	d013      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003816:	f7fe f87b 	bl	8001910 <HAL_GetTick>
 800381a:	0003      	movs	r3, r0
 800381c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800381e:	e009      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003820:	f7fe f876 	bl	8001910 <HAL_GetTick>
 8003824:	0002      	movs	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	4a2d      	ldr	r2, [pc, #180]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d901      	bls.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e048      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003834:	4b26      	ldr	r3, [pc, #152]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	2202      	movs	r2, #2
 800383a:	4013      	ands	r3, r2
 800383c:	d0f0      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800383e:	4b24      	ldr	r3, [pc, #144]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	4a25      	ldr	r2, [pc, #148]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003844:	4013      	ands	r3, r2
 8003846:	0019      	movs	r1, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	4b20      	ldr	r3, [pc, #128]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800384e:	430a      	orrs	r2, r1
 8003850:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003852:	2317      	movs	r3, #23
 8003854:	18fb      	adds	r3, r7, r3
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d105      	bne.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800385c:	4b1c      	ldr	r3, [pc, #112]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800385e:	69da      	ldr	r2, [r3, #28]
 8003860:	4b1b      	ldr	r3, [pc, #108]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003862:	4920      	ldr	r1, [pc, #128]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003864:	400a      	ands	r2, r1
 8003866:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2201      	movs	r2, #1
 800386e:	4013      	ands	r3, r2
 8003870:	d009      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003872:	4b17      	ldr	r3, [pc, #92]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003876:	2203      	movs	r2, #3
 8003878:	4393      	bics	r3, r2
 800387a:	0019      	movs	r1, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	4b13      	ldr	r3, [pc, #76]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003882:	430a      	orrs	r2, r1
 8003884:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2220      	movs	r2, #32
 800388c:	4013      	ands	r3, r2
 800388e:	d009      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003890:	4b0f      	ldr	r3, [pc, #60]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003894:	2210      	movs	r2, #16
 8003896:	4393      	bics	r3, r2
 8003898:	0019      	movs	r1, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	4b0c      	ldr	r3, [pc, #48]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80038a0:	430a      	orrs	r2, r1
 80038a2:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	2380      	movs	r3, #128	; 0x80
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	4013      	ands	r3, r2
 80038ae:	d009      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038b0:	4b07      	ldr	r3, [pc, #28]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80038b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b4:	2240      	movs	r2, #64	; 0x40
 80038b6:	4393      	bics	r3, r2
 80038b8:	0019      	movs	r1, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691a      	ldr	r2, [r3, #16]
 80038be:	4b04      	ldr	r3, [pc, #16]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80038c0:	430a      	orrs	r2, r1
 80038c2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	0018      	movs	r0, r3
 80038c8:	46bd      	mov	sp, r7
 80038ca:	b006      	add	sp, #24
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	46c0      	nop			; (mov r8, r8)
 80038d0:	40021000 	.word	0x40021000
 80038d4:	40007000 	.word	0x40007000
 80038d8:	fffffcff 	.word	0xfffffcff
 80038dc:	fffeffff 	.word	0xfffeffff
 80038e0:	00001388 	.word	0x00001388
 80038e4:	efffffff 	.word	0xefffffff

080038e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e0a8      	b.n	8003a4c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d109      	bne.n	8003916 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685a      	ldr	r2, [r3, #4]
 8003906:	2382      	movs	r3, #130	; 0x82
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	429a      	cmp	r2, r3
 800390c:	d009      	beq.n	8003922 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	61da      	str	r2, [r3, #28]
 8003914:	e005      	b.n	8003922 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	225d      	movs	r2, #93	; 0x5d
 800392c:	5c9b      	ldrb	r3, [r3, r2]
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b00      	cmp	r3, #0
 8003932:	d107      	bne.n	8003944 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	225c      	movs	r2, #92	; 0x5c
 8003938:	2100      	movs	r1, #0
 800393a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	0018      	movs	r0, r3
 8003940:	f7fd fd70 	bl	8001424 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	225d      	movs	r2, #93	; 0x5d
 8003948:	2102      	movs	r1, #2
 800394a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2140      	movs	r1, #64	; 0x40
 8003958:	438a      	bics	r2, r1
 800395a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	68da      	ldr	r2, [r3, #12]
 8003960:	23e0      	movs	r3, #224	; 0xe0
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	429a      	cmp	r2, r3
 8003966:	d902      	bls.n	800396e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003968:	2300      	movs	r3, #0
 800396a:	60fb      	str	r3, [r7, #12]
 800396c:	e002      	b.n	8003974 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800396e:	2380      	movs	r3, #128	; 0x80
 8003970:	015b      	lsls	r3, r3, #5
 8003972:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68da      	ldr	r2, [r3, #12]
 8003978:	23f0      	movs	r3, #240	; 0xf0
 800397a:	011b      	lsls	r3, r3, #4
 800397c:	429a      	cmp	r2, r3
 800397e:	d008      	beq.n	8003992 <HAL_SPI_Init+0xaa>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68da      	ldr	r2, [r3, #12]
 8003984:	23e0      	movs	r3, #224	; 0xe0
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	429a      	cmp	r2, r3
 800398a:	d002      	beq.n	8003992 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	2382      	movs	r3, #130	; 0x82
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	401a      	ands	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6899      	ldr	r1, [r3, #8]
 80039a0:	2384      	movs	r3, #132	; 0x84
 80039a2:	021b      	lsls	r3, r3, #8
 80039a4:	400b      	ands	r3, r1
 80039a6:	431a      	orrs	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	2102      	movs	r1, #2
 80039ae:	400b      	ands	r3, r1
 80039b0:	431a      	orrs	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	2101      	movs	r1, #1
 80039b8:	400b      	ands	r3, r1
 80039ba:	431a      	orrs	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6999      	ldr	r1, [r3, #24]
 80039c0:	2380      	movs	r3, #128	; 0x80
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	400b      	ands	r3, r1
 80039c6:	431a      	orrs	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	69db      	ldr	r3, [r3, #28]
 80039cc:	2138      	movs	r1, #56	; 0x38
 80039ce:	400b      	ands	r3, r1
 80039d0:	431a      	orrs	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	2180      	movs	r1, #128	; 0x80
 80039d8:	400b      	ands	r3, r1
 80039da:	431a      	orrs	r2, r3
 80039dc:	0011      	movs	r1, r2
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039e2:	2380      	movs	r3, #128	; 0x80
 80039e4:	019b      	lsls	r3, r3, #6
 80039e6:	401a      	ands	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	430a      	orrs	r2, r1
 80039ee:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	0c1b      	lsrs	r3, r3, #16
 80039f6:	2204      	movs	r2, #4
 80039f8:	401a      	ands	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fe:	2110      	movs	r1, #16
 8003a00:	400b      	ands	r3, r1
 8003a02:	431a      	orrs	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a08:	2108      	movs	r1, #8
 8003a0a:	400b      	ands	r3, r1
 8003a0c:	431a      	orrs	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68d9      	ldr	r1, [r3, #12]
 8003a12:	23f0      	movs	r3, #240	; 0xf0
 8003a14:	011b      	lsls	r3, r3, #4
 8003a16:	400b      	ands	r3, r1
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	0011      	movs	r1, r2
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	2380      	movs	r3, #128	; 0x80
 8003a20:	015b      	lsls	r3, r3, #5
 8003a22:	401a      	ands	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	69da      	ldr	r2, [r3, #28]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4907      	ldr	r1, [pc, #28]	; (8003a54 <HAL_SPI_Init+0x16c>)
 8003a38:	400a      	ands	r2, r1
 8003a3a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	225d      	movs	r2, #93	; 0x5d
 8003a46:	2101      	movs	r1, #1
 8003a48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	b004      	add	sp, #16
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	fffff7ff 	.word	0xfffff7ff

08003a58 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b088      	sub	sp, #32
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	603b      	str	r3, [r7, #0]
 8003a64:	1dbb      	adds	r3, r7, #6
 8003a66:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a68:	231f      	movs	r3, #31
 8003a6a:	18fb      	adds	r3, r7, r3
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	225c      	movs	r2, #92	; 0x5c
 8003a74:	5c9b      	ldrb	r3, [r3, r2]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d101      	bne.n	8003a7e <HAL_SPI_Transmit+0x26>
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	e140      	b.n	8003d00 <HAL_SPI_Transmit+0x2a8>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	225c      	movs	r2, #92	; 0x5c
 8003a82:	2101      	movs	r1, #1
 8003a84:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a86:	f7fd ff43 	bl	8001910 <HAL_GetTick>
 8003a8a:	0003      	movs	r3, r0
 8003a8c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003a8e:	2316      	movs	r3, #22
 8003a90:	18fb      	adds	r3, r7, r3
 8003a92:	1dba      	adds	r2, r7, #6
 8003a94:	8812      	ldrh	r2, [r2, #0]
 8003a96:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	225d      	movs	r2, #93	; 0x5d
 8003a9c:	5c9b      	ldrb	r3, [r3, r2]
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d004      	beq.n	8003aae <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003aa4:	231f      	movs	r3, #31
 8003aa6:	18fb      	adds	r3, r7, r3
 8003aa8:	2202      	movs	r2, #2
 8003aaa:	701a      	strb	r2, [r3, #0]
    goto error;
 8003aac:	e11d      	b.n	8003cea <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d003      	beq.n	8003abc <HAL_SPI_Transmit+0x64>
 8003ab4:	1dbb      	adds	r3, r7, #6
 8003ab6:	881b      	ldrh	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d104      	bne.n	8003ac6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003abc:	231f      	movs	r3, #31
 8003abe:	18fb      	adds	r3, r7, r3
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	701a      	strb	r2, [r3, #0]
    goto error;
 8003ac4:	e111      	b.n	8003cea <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	225d      	movs	r2, #93	; 0x5d
 8003aca:	2103      	movs	r1, #3
 8003acc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	68ba      	ldr	r2, [r7, #8]
 8003ad8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	1dba      	adds	r2, r7, #6
 8003ade:	8812      	ldrh	r2, [r2, #0]
 8003ae0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	1dba      	adds	r2, r7, #6
 8003ae6:	8812      	ldrh	r2, [r2, #0]
 8003ae8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2244      	movs	r2, #68	; 0x44
 8003af4:	2100      	movs	r1, #0
 8003af6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2246      	movs	r2, #70	; 0x46
 8003afc:	2100      	movs	r1, #0
 8003afe:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	2380      	movs	r3, #128	; 0x80
 8003b12:	021b      	lsls	r3, r3, #8
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d110      	bne.n	8003b3a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2140      	movs	r1, #64	; 0x40
 8003b24:	438a      	bics	r2, r1
 8003b26:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2180      	movs	r1, #128	; 0x80
 8003b34:	01c9      	lsls	r1, r1, #7
 8003b36:	430a      	orrs	r2, r1
 8003b38:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2240      	movs	r2, #64	; 0x40
 8003b42:	4013      	ands	r3, r2
 8003b44:	2b40      	cmp	r3, #64	; 0x40
 8003b46:	d007      	beq.n	8003b58 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2140      	movs	r1, #64	; 0x40
 8003b54:	430a      	orrs	r2, r1
 8003b56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	68da      	ldr	r2, [r3, #12]
 8003b5c:	23e0      	movs	r3, #224	; 0xe0
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d94e      	bls.n	8003c02 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d004      	beq.n	8003b76 <HAL_SPI_Transmit+0x11e>
 8003b6c:	2316      	movs	r3, #22
 8003b6e:	18fb      	adds	r3, r7, r3
 8003b70:	881b      	ldrh	r3, [r3, #0]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d13f      	bne.n	8003bf6 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7a:	881a      	ldrh	r2, [r3, #0]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b86:	1c9a      	adds	r2, r3, #2
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	3b01      	subs	r3, #1
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b9a:	e02c      	b.n	8003bf6 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d112      	bne.n	8003bd0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bae:	881a      	ldrh	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bba:	1c9a      	adds	r2, r3, #2
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003bce:	e012      	b.n	8003bf6 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bd0:	f7fd fe9e 	bl	8001910 <HAL_GetTick>
 8003bd4:	0002      	movs	r2, r0
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d802      	bhi.n	8003be6 <HAL_SPI_Transmit+0x18e>
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	3301      	adds	r3, #1
 8003be4:	d102      	bne.n	8003bec <HAL_SPI_Transmit+0x194>
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d104      	bne.n	8003bf6 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8003bec:	231f      	movs	r3, #31
 8003bee:	18fb      	adds	r3, r7, r3
 8003bf0:	2203      	movs	r2, #3
 8003bf2:	701a      	strb	r2, [r3, #0]
          goto error;
 8003bf4:	e079      	b.n	8003cea <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1cd      	bne.n	8003b9c <HAL_SPI_Transmit+0x144>
 8003c00:	e04f      	b.n	8003ca2 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d004      	beq.n	8003c14 <HAL_SPI_Transmit+0x1bc>
 8003c0a:	2316      	movs	r3, #22
 8003c0c:	18fb      	adds	r3, r7, r3
 8003c0e:	881b      	ldrh	r3, [r3, #0]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d141      	bne.n	8003c98 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	330c      	adds	r3, #12
 8003c1e:	7812      	ldrb	r2, [r2, #0]
 8003c20:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c26:	1c5a      	adds	r2, r3, #1
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	3b01      	subs	r3, #1
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8003c3a:	e02d      	b.n	8003c98 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	2202      	movs	r2, #2
 8003c44:	4013      	ands	r3, r2
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d113      	bne.n	8003c72 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	330c      	adds	r3, #12
 8003c54:	7812      	ldrb	r2, [r2, #0]
 8003c56:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5c:	1c5a      	adds	r2, r3, #1
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c70:	e012      	b.n	8003c98 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c72:	f7fd fe4d 	bl	8001910 <HAL_GetTick>
 8003c76:	0002      	movs	r2, r0
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d802      	bhi.n	8003c88 <HAL_SPI_Transmit+0x230>
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	3301      	adds	r3, #1
 8003c86:	d102      	bne.n	8003c8e <HAL_SPI_Transmit+0x236>
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d104      	bne.n	8003c98 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8003c8e:	231f      	movs	r3, #31
 8003c90:	18fb      	adds	r3, r7, r3
 8003c92:	2203      	movs	r2, #3
 8003c94:	701a      	strb	r2, [r3, #0]
          goto error;
 8003c96:	e028      	b.n	8003cea <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1cc      	bne.n	8003c3c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ca2:	69ba      	ldr	r2, [r7, #24]
 8003ca4:	6839      	ldr	r1, [r7, #0]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	0018      	movs	r0, r3
 8003caa:	f000 f95d 	bl	8003f68 <SPI_EndRxTxTransaction>
 8003cae:	1e03      	subs	r3, r0, #0
 8003cb0:	d002      	beq.n	8003cb8 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2220      	movs	r2, #32
 8003cb6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10a      	bne.n	8003cd6 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	613b      	str	r3, [r7, #16]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	613b      	str	r3, [r7, #16]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	613b      	str	r3, [r7, #16]
 8003cd4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d004      	beq.n	8003ce8 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8003cde:	231f      	movs	r3, #31
 8003ce0:	18fb      	adds	r3, r7, r3
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	701a      	strb	r2, [r3, #0]
 8003ce6:	e000      	b.n	8003cea <HAL_SPI_Transmit+0x292>
  }

error:
 8003ce8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	225d      	movs	r2, #93	; 0x5d
 8003cee:	2101      	movs	r1, #1
 8003cf0:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	225c      	movs	r2, #92	; 0x5c
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003cfa:	231f      	movs	r3, #31
 8003cfc:	18fb      	adds	r3, r7, r3
 8003cfe:	781b      	ldrb	r3, [r3, #0]
}
 8003d00:	0018      	movs	r0, r3
 8003d02:	46bd      	mov	sp, r7
 8003d04:	b008      	add	sp, #32
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b088      	sub	sp, #32
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	603b      	str	r3, [r7, #0]
 8003d14:	1dfb      	adds	r3, r7, #7
 8003d16:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d18:	f7fd fdfa 	bl	8001910 <HAL_GetTick>
 8003d1c:	0002      	movs	r2, r0
 8003d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d20:	1a9b      	subs	r3, r3, r2
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	18d3      	adds	r3, r2, r3
 8003d26:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d28:	f7fd fdf2 	bl	8001910 <HAL_GetTick>
 8003d2c:	0003      	movs	r3, r0
 8003d2e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d30:	4b3a      	ldr	r3, [pc, #232]	; (8003e1c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	015b      	lsls	r3, r3, #5
 8003d36:	0d1b      	lsrs	r3, r3, #20
 8003d38:	69fa      	ldr	r2, [r7, #28]
 8003d3a:	4353      	muls	r3, r2
 8003d3c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d3e:	e058      	b.n	8003df2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	3301      	adds	r3, #1
 8003d44:	d055      	beq.n	8003df2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d46:	f7fd fde3 	bl	8001910 <HAL_GetTick>
 8003d4a:	0002      	movs	r2, r0
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	69fa      	ldr	r2, [r7, #28]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d902      	bls.n	8003d5c <SPI_WaitFlagStateUntilTimeout+0x54>
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d142      	bne.n	8003de2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	685a      	ldr	r2, [r3, #4]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	21e0      	movs	r1, #224	; 0xe0
 8003d68:	438a      	bics	r2, r1
 8003d6a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	685a      	ldr	r2, [r3, #4]
 8003d70:	2382      	movs	r3, #130	; 0x82
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d113      	bne.n	8003da0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	2380      	movs	r3, #128	; 0x80
 8003d7e:	021b      	lsls	r3, r3, #8
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d005      	beq.n	8003d90 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	2380      	movs	r3, #128	; 0x80
 8003d8a:	00db      	lsls	r3, r3, #3
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d107      	bne.n	8003da0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2140      	movs	r1, #64	; 0x40
 8003d9c:	438a      	bics	r2, r1
 8003d9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003da4:	2380      	movs	r3, #128	; 0x80
 8003da6:	019b      	lsls	r3, r3, #6
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d110      	bne.n	8003dce <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	491a      	ldr	r1, [pc, #104]	; (8003e20 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003db8:	400a      	ands	r2, r1
 8003dba:	601a      	str	r2, [r3, #0]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2180      	movs	r1, #128	; 0x80
 8003dc8:	0189      	lsls	r1, r1, #6
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	225d      	movs	r2, #93	; 0x5d
 8003dd2:	2101      	movs	r1, #1
 8003dd4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	225c      	movs	r2, #92	; 0x5c
 8003dda:	2100      	movs	r1, #0
 8003ddc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e017      	b.n	8003e12 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d101      	bne.n	8003dec <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003de8:	2300      	movs	r3, #0
 8003dea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	3b01      	subs	r3, #1
 8003df0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	68ba      	ldr	r2, [r7, #8]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	68ba      	ldr	r2, [r7, #8]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	425a      	negs	r2, r3
 8003e02:	4153      	adcs	r3, r2
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	001a      	movs	r2, r3
 8003e08:	1dfb      	adds	r3, r7, #7
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d197      	bne.n	8003d40 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	0018      	movs	r0, r3
 8003e14:	46bd      	mov	sp, r7
 8003e16:	b008      	add	sp, #32
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	46c0      	nop			; (mov r8, r8)
 8003e1c:	2000001c 	.word	0x2000001c
 8003e20:	ffffdfff 	.word	0xffffdfff

08003e24 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b08a      	sub	sp, #40	; 0x28
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
 8003e30:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003e32:	2317      	movs	r3, #23
 8003e34:	18fb      	adds	r3, r7, r3
 8003e36:	2200      	movs	r2, #0
 8003e38:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003e3a:	f7fd fd69 	bl	8001910 <HAL_GetTick>
 8003e3e:	0002      	movs	r2, r0
 8003e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e42:	1a9b      	subs	r3, r3, r2
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	18d3      	adds	r3, r2, r3
 8003e48:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003e4a:	f7fd fd61 	bl	8001910 <HAL_GetTick>
 8003e4e:	0003      	movs	r3, r0
 8003e50:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	330c      	adds	r3, #12
 8003e58:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003e5a:	4b41      	ldr	r3, [pc, #260]	; (8003f60 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	0013      	movs	r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	189b      	adds	r3, r3, r2
 8003e64:	00da      	lsls	r2, r3, #3
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	0d1b      	lsrs	r3, r3, #20
 8003e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e6c:	4353      	muls	r3, r2
 8003e6e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003e70:	e068      	b.n	8003f44 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	23c0      	movs	r3, #192	; 0xc0
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d10a      	bne.n	8003e92 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d107      	bne.n	8003e92 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	2117      	movs	r1, #23
 8003e8a:	187b      	adds	r3, r7, r1
 8003e8c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003e8e:	187b      	adds	r3, r7, r1
 8003e90:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	3301      	adds	r3, #1
 8003e96:	d055      	beq.n	8003f44 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e98:	f7fd fd3a 	bl	8001910 <HAL_GetTick>
 8003e9c:	0002      	movs	r2, r0
 8003e9e:	6a3b      	ldr	r3, [r7, #32]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d902      	bls.n	8003eae <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d142      	bne.n	8003f34 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	21e0      	movs	r1, #224	; 0xe0
 8003eba:	438a      	bics	r2, r1
 8003ebc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	685a      	ldr	r2, [r3, #4]
 8003ec2:	2382      	movs	r3, #130	; 0x82
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d113      	bne.n	8003ef2 <SPI_WaitFifoStateUntilTimeout+0xce>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	689a      	ldr	r2, [r3, #8]
 8003ece:	2380      	movs	r3, #128	; 0x80
 8003ed0:	021b      	lsls	r3, r3, #8
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d005      	beq.n	8003ee2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	689a      	ldr	r2, [r3, #8]
 8003eda:	2380      	movs	r3, #128	; 0x80
 8003edc:	00db      	lsls	r3, r3, #3
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d107      	bne.n	8003ef2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2140      	movs	r1, #64	; 0x40
 8003eee:	438a      	bics	r2, r1
 8003ef0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ef6:	2380      	movs	r3, #128	; 0x80
 8003ef8:	019b      	lsls	r3, r3, #6
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d110      	bne.n	8003f20 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4916      	ldr	r1, [pc, #88]	; (8003f64 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8003f0a:	400a      	ands	r2, r1
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2180      	movs	r1, #128	; 0x80
 8003f1a:	0189      	lsls	r1, r1, #6
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	225d      	movs	r2, #93	; 0x5d
 8003f24:	2101      	movs	r1, #1
 8003f26:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	225c      	movs	r2, #92	; 0x5c
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e010      	b.n	8003f56 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	3b01      	subs	r3, #1
 8003f42:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d18e      	bne.n	8003e72 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	0018      	movs	r0, r3
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	b00a      	add	sp, #40	; 0x28
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	46c0      	nop			; (mov r8, r8)
 8003f60:	2000001c 	.word	0x2000001c
 8003f64:	ffffdfff 	.word	0xffffdfff

08003f68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b086      	sub	sp, #24
 8003f6c:	af02      	add	r7, sp, #8
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f74:	68ba      	ldr	r2, [r7, #8]
 8003f76:	23c0      	movs	r3, #192	; 0xc0
 8003f78:	0159      	lsls	r1, r3, #5
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	9300      	str	r3, [sp, #0]
 8003f80:	0013      	movs	r3, r2
 8003f82:	2200      	movs	r2, #0
 8003f84:	f7ff ff4e 	bl	8003e24 <SPI_WaitFifoStateUntilTimeout>
 8003f88:	1e03      	subs	r3, r0, #0
 8003f8a:	d007      	beq.n	8003f9c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f90:	2220      	movs	r2, #32
 8003f92:	431a      	orrs	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e027      	b.n	8003fec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	0013      	movs	r3, r2
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	2180      	movs	r1, #128	; 0x80
 8003faa:	f7ff fead 	bl	8003d08 <SPI_WaitFlagStateUntilTimeout>
 8003fae:	1e03      	subs	r3, r0, #0
 8003fb0:	d007      	beq.n	8003fc2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e014      	b.n	8003fec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	23c0      	movs	r3, #192	; 0xc0
 8003fc6:	00d9      	lsls	r1, r3, #3
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	0013      	movs	r3, r2
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f7ff ff27 	bl	8003e24 <SPI_WaitFifoStateUntilTimeout>
 8003fd6:	1e03      	subs	r3, r0, #0
 8003fd8:	d007      	beq.n	8003fea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fde:	2220      	movs	r2, #32
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e000      	b.n	8003fec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	0018      	movs	r0, r3
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	b004      	add	sp, #16
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e042      	b.n	800408c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	223d      	movs	r2, #61	; 0x3d
 800400a:	5c9b      	ldrb	r3, [r3, r2]
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d107      	bne.n	8004022 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	223c      	movs	r2, #60	; 0x3c
 8004016:	2100      	movs	r1, #0
 8004018:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	0018      	movs	r0, r3
 800401e:	f7fd fa8b 	bl	8001538 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	223d      	movs	r2, #61	; 0x3d
 8004026:	2102      	movs	r1, #2
 8004028:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	3304      	adds	r3, #4
 8004032:	0019      	movs	r1, r3
 8004034:	0010      	movs	r0, r2
 8004036:	f000 fbe7 	bl	8004808 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2246      	movs	r2, #70	; 0x46
 800403e:	2101      	movs	r1, #1
 8004040:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	223e      	movs	r2, #62	; 0x3e
 8004046:	2101      	movs	r1, #1
 8004048:	5499      	strb	r1, [r3, r2]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	223f      	movs	r2, #63	; 0x3f
 800404e:	2101      	movs	r1, #1
 8004050:	5499      	strb	r1, [r3, r2]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2240      	movs	r2, #64	; 0x40
 8004056:	2101      	movs	r1, #1
 8004058:	5499      	strb	r1, [r3, r2]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2241      	movs	r2, #65	; 0x41
 800405e:	2101      	movs	r1, #1
 8004060:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2242      	movs	r2, #66	; 0x42
 8004066:	2101      	movs	r1, #1
 8004068:	5499      	strb	r1, [r3, r2]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2243      	movs	r2, #67	; 0x43
 800406e:	2101      	movs	r1, #1
 8004070:	5499      	strb	r1, [r3, r2]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2244      	movs	r2, #68	; 0x44
 8004076:	2101      	movs	r1, #1
 8004078:	5499      	strb	r1, [r3, r2]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2245      	movs	r2, #69	; 0x45
 800407e:	2101      	movs	r1, #1
 8004080:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	223d      	movs	r2, #61	; 0x3d
 8004086:	2101      	movs	r1, #1
 8004088:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	0018      	movs	r0, r3
 800408e:	46bd      	mov	sp, r7
 8004090:	b002      	add	sp, #8
 8004092:	bd80      	pop	{r7, pc}

08004094 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e042      	b.n	800412c <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	223d      	movs	r2, #61	; 0x3d
 80040aa:	5c9b      	ldrb	r3, [r3, r2]
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d107      	bne.n	80040c2 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	223c      	movs	r2, #60	; 0x3c
 80040b6:	2100      	movs	r1, #0
 80040b8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	0018      	movs	r0, r3
 80040be:	f000 f839 	bl	8004134 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	223d      	movs	r2, #61	; 0x3d
 80040c6:	2102      	movs	r1, #2
 80040c8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	3304      	adds	r3, #4
 80040d2:	0019      	movs	r1, r3
 80040d4:	0010      	movs	r0, r2
 80040d6:	f000 fb97 	bl	8004808 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2246      	movs	r2, #70	; 0x46
 80040de:	2101      	movs	r1, #1
 80040e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	223e      	movs	r2, #62	; 0x3e
 80040e6:	2101      	movs	r1, #1
 80040e8:	5499      	strb	r1, [r3, r2]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	223f      	movs	r2, #63	; 0x3f
 80040ee:	2101      	movs	r1, #1
 80040f0:	5499      	strb	r1, [r3, r2]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2240      	movs	r2, #64	; 0x40
 80040f6:	2101      	movs	r1, #1
 80040f8:	5499      	strb	r1, [r3, r2]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2241      	movs	r2, #65	; 0x41
 80040fe:	2101      	movs	r1, #1
 8004100:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2242      	movs	r2, #66	; 0x42
 8004106:	2101      	movs	r1, #1
 8004108:	5499      	strb	r1, [r3, r2]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2243      	movs	r2, #67	; 0x43
 800410e:	2101      	movs	r1, #1
 8004110:	5499      	strb	r1, [r3, r2]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2244      	movs	r2, #68	; 0x44
 8004116:	2101      	movs	r1, #1
 8004118:	5499      	strb	r1, [r3, r2]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2245      	movs	r2, #69	; 0x45
 800411e:	2101      	movs	r1, #1
 8004120:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	223d      	movs	r2, #61	; 0x3d
 8004126:	2101      	movs	r1, #1
 8004128:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	0018      	movs	r0, r3
 800412e:	46bd      	mov	sp, r7
 8004130:	b002      	add	sp, #8
 8004132:	bd80      	pop	{r7, pc}

08004134 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800413c:	46c0      	nop			; (mov r8, r8)
 800413e:	46bd      	mov	sp, r7
 8004140:	b002      	add	sp, #8
 8004142:	bd80      	pop	{r7, pc}

08004144 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800414e:	230f      	movs	r3, #15
 8004150:	18fb      	adds	r3, r7, r3
 8004152:	2200      	movs	r2, #0
 8004154:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d108      	bne.n	800416e <HAL_TIM_OC_Start_IT+0x2a>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	223e      	movs	r2, #62	; 0x3e
 8004160:	5c9b      	ldrb	r3, [r3, r2]
 8004162:	b2db      	uxtb	r3, r3
 8004164:	3b01      	subs	r3, #1
 8004166:	1e5a      	subs	r2, r3, #1
 8004168:	4193      	sbcs	r3, r2
 800416a:	b2db      	uxtb	r3, r3
 800416c:	e01f      	b.n	80041ae <HAL_TIM_OC_Start_IT+0x6a>
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	2b04      	cmp	r3, #4
 8004172:	d108      	bne.n	8004186 <HAL_TIM_OC_Start_IT+0x42>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	223f      	movs	r2, #63	; 0x3f
 8004178:	5c9b      	ldrb	r3, [r3, r2]
 800417a:	b2db      	uxtb	r3, r3
 800417c:	3b01      	subs	r3, #1
 800417e:	1e5a      	subs	r2, r3, #1
 8004180:	4193      	sbcs	r3, r2
 8004182:	b2db      	uxtb	r3, r3
 8004184:	e013      	b.n	80041ae <HAL_TIM_OC_Start_IT+0x6a>
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	2b08      	cmp	r3, #8
 800418a:	d108      	bne.n	800419e <HAL_TIM_OC_Start_IT+0x5a>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2240      	movs	r2, #64	; 0x40
 8004190:	5c9b      	ldrb	r3, [r3, r2]
 8004192:	b2db      	uxtb	r3, r3
 8004194:	3b01      	subs	r3, #1
 8004196:	1e5a      	subs	r2, r3, #1
 8004198:	4193      	sbcs	r3, r2
 800419a:	b2db      	uxtb	r3, r3
 800419c:	e007      	b.n	80041ae <HAL_TIM_OC_Start_IT+0x6a>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2241      	movs	r2, #65	; 0x41
 80041a2:	5c9b      	ldrb	r3, [r3, r2]
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	3b01      	subs	r3, #1
 80041a8:	1e5a      	subs	r2, r3, #1
 80041aa:	4193      	sbcs	r3, r2
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e0b7      	b.n	8004326 <HAL_TIM_OC_Start_IT+0x1e2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d104      	bne.n	80041c6 <HAL_TIM_OC_Start_IT+0x82>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	223e      	movs	r2, #62	; 0x3e
 80041c0:	2102      	movs	r1, #2
 80041c2:	5499      	strb	r1, [r3, r2]
 80041c4:	e013      	b.n	80041ee <HAL_TIM_OC_Start_IT+0xaa>
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	2b04      	cmp	r3, #4
 80041ca:	d104      	bne.n	80041d6 <HAL_TIM_OC_Start_IT+0x92>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	223f      	movs	r2, #63	; 0x3f
 80041d0:	2102      	movs	r1, #2
 80041d2:	5499      	strb	r1, [r3, r2]
 80041d4:	e00b      	b.n	80041ee <HAL_TIM_OC_Start_IT+0xaa>
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	2b08      	cmp	r3, #8
 80041da:	d104      	bne.n	80041e6 <HAL_TIM_OC_Start_IT+0xa2>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2240      	movs	r2, #64	; 0x40
 80041e0:	2102      	movs	r1, #2
 80041e2:	5499      	strb	r1, [r3, r2]
 80041e4:	e003      	b.n	80041ee <HAL_TIM_OC_Start_IT+0xaa>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2241      	movs	r2, #65	; 0x41
 80041ea:	2102      	movs	r1, #2
 80041ec:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	2b0c      	cmp	r3, #12
 80041f2:	d02a      	beq.n	800424a <HAL_TIM_OC_Start_IT+0x106>
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	2b0c      	cmp	r3, #12
 80041f8:	d830      	bhi.n	800425c <HAL_TIM_OC_Start_IT+0x118>
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	2b08      	cmp	r3, #8
 80041fe:	d01b      	beq.n	8004238 <HAL_TIM_OC_Start_IT+0xf4>
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	2b08      	cmp	r3, #8
 8004204:	d82a      	bhi.n	800425c <HAL_TIM_OC_Start_IT+0x118>
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d003      	beq.n	8004214 <HAL_TIM_OC_Start_IT+0xd0>
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	2b04      	cmp	r3, #4
 8004210:	d009      	beq.n	8004226 <HAL_TIM_OC_Start_IT+0xe2>
 8004212:	e023      	b.n	800425c <HAL_TIM_OC_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68da      	ldr	r2, [r3, #12]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2102      	movs	r1, #2
 8004220:	430a      	orrs	r2, r1
 8004222:	60da      	str	r2, [r3, #12]
      break;
 8004224:	e01f      	b.n	8004266 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68da      	ldr	r2, [r3, #12]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2104      	movs	r1, #4
 8004232:	430a      	orrs	r2, r1
 8004234:	60da      	str	r2, [r3, #12]
      break;
 8004236:	e016      	b.n	8004266 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68da      	ldr	r2, [r3, #12]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2108      	movs	r1, #8
 8004244:	430a      	orrs	r2, r1
 8004246:	60da      	str	r2, [r3, #12]
      break;
 8004248:	e00d      	b.n	8004266 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68da      	ldr	r2, [r3, #12]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2110      	movs	r1, #16
 8004256:	430a      	orrs	r2, r1
 8004258:	60da      	str	r2, [r3, #12]
      break;
 800425a:	e004      	b.n	8004266 <HAL_TIM_OC_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 800425c:	230f      	movs	r3, #15
 800425e:	18fb      	adds	r3, r7, r3
 8004260:	2201      	movs	r2, #1
 8004262:	701a      	strb	r2, [r3, #0]
      break;
 8004264:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8004266:	230f      	movs	r3, #15
 8004268:	18fb      	adds	r3, r7, r3
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d157      	bne.n	8004320 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6839      	ldr	r1, [r7, #0]
 8004276:	2201      	movs	r2, #1
 8004278:	0018      	movs	r0, r3
 800427a:	f000 fddb 	bl	8004e34 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a2b      	ldr	r2, [pc, #172]	; (8004330 <HAL_TIM_OC_Start_IT+0x1ec>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d00e      	beq.n	80042a6 <HAL_TIM_OC_Start_IT+0x162>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a29      	ldr	r2, [pc, #164]	; (8004334 <HAL_TIM_OC_Start_IT+0x1f0>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d009      	beq.n	80042a6 <HAL_TIM_OC_Start_IT+0x162>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a28      	ldr	r2, [pc, #160]	; (8004338 <HAL_TIM_OC_Start_IT+0x1f4>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d004      	beq.n	80042a6 <HAL_TIM_OC_Start_IT+0x162>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a26      	ldr	r2, [pc, #152]	; (800433c <HAL_TIM_OC_Start_IT+0x1f8>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d101      	bne.n	80042aa <HAL_TIM_OC_Start_IT+0x166>
 80042a6:	2301      	movs	r3, #1
 80042a8:	e000      	b.n	80042ac <HAL_TIM_OC_Start_IT+0x168>
 80042aa:	2300      	movs	r3, #0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d008      	beq.n	80042c2 <HAL_TIM_OC_Start_IT+0x17e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2180      	movs	r1, #128	; 0x80
 80042bc:	0209      	lsls	r1, r1, #8
 80042be:	430a      	orrs	r2, r1
 80042c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a1a      	ldr	r2, [pc, #104]	; (8004330 <HAL_TIM_OC_Start_IT+0x1ec>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d00f      	beq.n	80042ec <HAL_TIM_OC_Start_IT+0x1a8>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	2380      	movs	r3, #128	; 0x80
 80042d2:	05db      	lsls	r3, r3, #23
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d009      	beq.n	80042ec <HAL_TIM_OC_Start_IT+0x1a8>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a18      	ldr	r2, [pc, #96]	; (8004340 <HAL_TIM_OC_Start_IT+0x1fc>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d004      	beq.n	80042ec <HAL_TIM_OC_Start_IT+0x1a8>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a13      	ldr	r2, [pc, #76]	; (8004334 <HAL_TIM_OC_Start_IT+0x1f0>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d111      	bne.n	8004310 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	2207      	movs	r2, #7
 80042f4:	4013      	ands	r3, r2
 80042f6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	2b06      	cmp	r3, #6
 80042fc:	d010      	beq.n	8004320 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2101      	movs	r1, #1
 800430a:	430a      	orrs	r2, r1
 800430c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800430e:	e007      	b.n	8004320 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2101      	movs	r1, #1
 800431c:	430a      	orrs	r2, r1
 800431e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004320:	230f      	movs	r3, #15
 8004322:	18fb      	adds	r3, r7, r3
 8004324:	781b      	ldrb	r3, [r3, #0]
}
 8004326:	0018      	movs	r0, r3
 8004328:	46bd      	mov	sp, r7
 800432a:	b004      	add	sp, #16
 800432c:	bd80      	pop	{r7, pc}
 800432e:	46c0      	nop			; (mov r8, r8)
 8004330:	40012c00 	.word	0x40012c00
 8004334:	40014000 	.word	0x40014000
 8004338:	40014400 	.word	0x40014400
 800433c:	40014800 	.word	0x40014800
 8004340:	40000400 	.word	0x40000400

08004344 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	2202      	movs	r2, #2
 8004354:	4013      	ands	r3, r2
 8004356:	2b02      	cmp	r3, #2
 8004358:	d124      	bne.n	80043a4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	2202      	movs	r2, #2
 8004362:	4013      	ands	r3, r2
 8004364:	2b02      	cmp	r3, #2
 8004366:	d11d      	bne.n	80043a4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2203      	movs	r2, #3
 800436e:	4252      	negs	r2, r2
 8004370:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	2203      	movs	r2, #3
 8004380:	4013      	ands	r3, r2
 8004382:	d004      	beq.n	800438e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	0018      	movs	r0, r3
 8004388:	f000 fa26 	bl	80047d8 <HAL_TIM_IC_CaptureCallback>
 800438c:	e007      	b.n	800439e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	0018      	movs	r0, r3
 8004392:	f7fb ffcb 	bl	800032c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	0018      	movs	r0, r3
 800439a:	f000 fa25 	bl	80047e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	2204      	movs	r2, #4
 80043ac:	4013      	ands	r3, r2
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d125      	bne.n	80043fe <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	2204      	movs	r2, #4
 80043ba:	4013      	ands	r3, r2
 80043bc:	2b04      	cmp	r3, #4
 80043be:	d11e      	bne.n	80043fe <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2205      	movs	r2, #5
 80043c6:	4252      	negs	r2, r2
 80043c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2202      	movs	r2, #2
 80043ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	699a      	ldr	r2, [r3, #24]
 80043d6:	23c0      	movs	r3, #192	; 0xc0
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	4013      	ands	r3, r2
 80043dc:	d004      	beq.n	80043e8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	0018      	movs	r0, r3
 80043e2:	f000 f9f9 	bl	80047d8 <HAL_TIM_IC_CaptureCallback>
 80043e6:	e007      	b.n	80043f8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	0018      	movs	r0, r3
 80043ec:	f7fb ff9e 	bl	800032c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	0018      	movs	r0, r3
 80043f4:	f000 f9f8 	bl	80047e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	2208      	movs	r2, #8
 8004406:	4013      	ands	r3, r2
 8004408:	2b08      	cmp	r3, #8
 800440a:	d124      	bne.n	8004456 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	2208      	movs	r2, #8
 8004414:	4013      	ands	r3, r2
 8004416:	2b08      	cmp	r3, #8
 8004418:	d11d      	bne.n	8004456 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2209      	movs	r2, #9
 8004420:	4252      	negs	r2, r2
 8004422:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2204      	movs	r2, #4
 8004428:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	69db      	ldr	r3, [r3, #28]
 8004430:	2203      	movs	r2, #3
 8004432:	4013      	ands	r3, r2
 8004434:	d004      	beq.n	8004440 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	0018      	movs	r0, r3
 800443a:	f000 f9cd 	bl	80047d8 <HAL_TIM_IC_CaptureCallback>
 800443e:	e007      	b.n	8004450 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	0018      	movs	r0, r3
 8004444:	f7fb ff72 	bl	800032c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	0018      	movs	r0, r3
 800444c:	f000 f9cc 	bl	80047e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	2210      	movs	r2, #16
 800445e:	4013      	ands	r3, r2
 8004460:	2b10      	cmp	r3, #16
 8004462:	d125      	bne.n	80044b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	2210      	movs	r2, #16
 800446c:	4013      	ands	r3, r2
 800446e:	2b10      	cmp	r3, #16
 8004470:	d11e      	bne.n	80044b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2211      	movs	r2, #17
 8004478:	4252      	negs	r2, r2
 800447a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2208      	movs	r2, #8
 8004480:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	69da      	ldr	r2, [r3, #28]
 8004488:	23c0      	movs	r3, #192	; 0xc0
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	4013      	ands	r3, r2
 800448e:	d004      	beq.n	800449a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	0018      	movs	r0, r3
 8004494:	f000 f9a0 	bl	80047d8 <HAL_TIM_IC_CaptureCallback>
 8004498:	e007      	b.n	80044aa <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	0018      	movs	r0, r3
 800449e:	f7fb ff45 	bl	800032c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	0018      	movs	r0, r3
 80044a6:	f000 f99f 	bl	80047e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	2201      	movs	r2, #1
 80044b8:	4013      	ands	r3, r2
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d10f      	bne.n	80044de <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	2201      	movs	r2, #1
 80044c6:	4013      	ands	r3, r2
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d108      	bne.n	80044de <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2202      	movs	r2, #2
 80044d2:	4252      	negs	r2, r2
 80044d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	0018      	movs	r0, r3
 80044da:	f000 f975 	bl	80047c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	2280      	movs	r2, #128	; 0x80
 80044e6:	4013      	ands	r3, r2
 80044e8:	2b80      	cmp	r3, #128	; 0x80
 80044ea:	d10f      	bne.n	800450c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	2280      	movs	r2, #128	; 0x80
 80044f4:	4013      	ands	r3, r2
 80044f6:	2b80      	cmp	r3, #128	; 0x80
 80044f8:	d108      	bne.n	800450c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2281      	movs	r2, #129	; 0x81
 8004500:	4252      	negs	r2, r2
 8004502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	0018      	movs	r0, r3
 8004508:	f000 fd7c 	bl	8005004 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	2240      	movs	r2, #64	; 0x40
 8004514:	4013      	ands	r3, r2
 8004516:	2b40      	cmp	r3, #64	; 0x40
 8004518:	d10f      	bne.n	800453a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	2240      	movs	r2, #64	; 0x40
 8004522:	4013      	ands	r3, r2
 8004524:	2b40      	cmp	r3, #64	; 0x40
 8004526:	d108      	bne.n	800453a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2241      	movs	r2, #65	; 0x41
 800452e:	4252      	negs	r2, r2
 8004530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	0018      	movs	r0, r3
 8004536:	f000 f95f 	bl	80047f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	2220      	movs	r2, #32
 8004542:	4013      	ands	r3, r2
 8004544:	2b20      	cmp	r3, #32
 8004546:	d10f      	bne.n	8004568 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	2220      	movs	r2, #32
 8004550:	4013      	ands	r3, r2
 8004552:	2b20      	cmp	r3, #32
 8004554:	d108      	bne.n	8004568 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2221      	movs	r2, #33	; 0x21
 800455c:	4252      	negs	r2, r2
 800455e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	0018      	movs	r0, r3
 8004564:	f000 fd46 	bl	8004ff4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004568:	46c0      	nop			; (mov r8, r8)
 800456a:	46bd      	mov	sp, r7
 800456c:	b002      	add	sp, #8
 800456e:	bd80      	pop	{r7, pc}

08004570 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800457c:	2317      	movs	r3, #23
 800457e:	18fb      	adds	r3, r7, r3
 8004580:	2200      	movs	r2, #0
 8004582:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	223c      	movs	r2, #60	; 0x3c
 8004588:	5c9b      	ldrb	r3, [r3, r2]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d101      	bne.n	8004592 <HAL_TIM_OC_ConfigChannel+0x22>
 800458e:	2302      	movs	r3, #2
 8004590:	e042      	b.n	8004618 <HAL_TIM_OC_ConfigChannel+0xa8>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	223c      	movs	r2, #60	; 0x3c
 8004596:	2101      	movs	r1, #1
 8004598:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b0c      	cmp	r3, #12
 800459e:	d027      	beq.n	80045f0 <HAL_TIM_OC_ConfigChannel+0x80>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b0c      	cmp	r3, #12
 80045a4:	d82c      	bhi.n	8004600 <HAL_TIM_OC_ConfigChannel+0x90>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2b08      	cmp	r3, #8
 80045aa:	d019      	beq.n	80045e0 <HAL_TIM_OC_ConfigChannel+0x70>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b08      	cmp	r3, #8
 80045b0:	d826      	bhi.n	8004600 <HAL_TIM_OC_ConfigChannel+0x90>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d003      	beq.n	80045c0 <HAL_TIM_OC_ConfigChannel+0x50>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b04      	cmp	r3, #4
 80045bc:	d008      	beq.n	80045d0 <HAL_TIM_OC_ConfigChannel+0x60>
 80045be:	e01f      	b.n	8004600 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68ba      	ldr	r2, [r7, #8]
 80045c6:	0011      	movs	r1, r2
 80045c8:	0018      	movs	r0, r3
 80045ca:	f000 f99d 	bl	8004908 <TIM_OC1_SetConfig>
      break;
 80045ce:	e01c      	b.n	800460a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68ba      	ldr	r2, [r7, #8]
 80045d6:	0011      	movs	r1, r2
 80045d8:	0018      	movs	r0, r3
 80045da:	f000 fa1d 	bl	8004a18 <TIM_OC2_SetConfig>
      break;
 80045de:	e014      	b.n	800460a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68ba      	ldr	r2, [r7, #8]
 80045e6:	0011      	movs	r1, r2
 80045e8:	0018      	movs	r0, r3
 80045ea:	f000 fa99 	bl	8004b20 <TIM_OC3_SetConfig>
      break;
 80045ee:	e00c      	b.n	800460a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68ba      	ldr	r2, [r7, #8]
 80045f6:	0011      	movs	r1, r2
 80045f8:	0018      	movs	r0, r3
 80045fa:	f000 fb17 	bl	8004c2c <TIM_OC4_SetConfig>
      break;
 80045fe:	e004      	b.n	800460a <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8004600:	2317      	movs	r3, #23
 8004602:	18fb      	adds	r3, r7, r3
 8004604:	2201      	movs	r2, #1
 8004606:	701a      	strb	r2, [r3, #0]
      break;
 8004608:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	223c      	movs	r2, #60	; 0x3c
 800460e:	2100      	movs	r1, #0
 8004610:	5499      	strb	r1, [r3, r2]

  return status;
 8004612:	2317      	movs	r3, #23
 8004614:	18fb      	adds	r3, r7, r3
 8004616:	781b      	ldrb	r3, [r3, #0]
}
 8004618:	0018      	movs	r0, r3
 800461a:	46bd      	mov	sp, r7
 800461c:	b006      	add	sp, #24
 800461e:	bd80      	pop	{r7, pc}

08004620 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800462a:	230f      	movs	r3, #15
 800462c:	18fb      	adds	r3, r7, r3
 800462e:	2200      	movs	r2, #0
 8004630:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	223c      	movs	r2, #60	; 0x3c
 8004636:	5c9b      	ldrb	r3, [r3, r2]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d101      	bne.n	8004640 <HAL_TIM_ConfigClockSource+0x20>
 800463c:	2302      	movs	r3, #2
 800463e:	e0bc      	b.n	80047ba <HAL_TIM_ConfigClockSource+0x19a>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	223c      	movs	r2, #60	; 0x3c
 8004644:	2101      	movs	r1, #1
 8004646:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	223d      	movs	r2, #61	; 0x3d
 800464c:	2102      	movs	r1, #2
 800464e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	2277      	movs	r2, #119	; 0x77
 800465c:	4393      	bics	r3, r2
 800465e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	4a58      	ldr	r2, [pc, #352]	; (80047c4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004664:	4013      	ands	r3, r2
 8004666:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2280      	movs	r2, #128	; 0x80
 8004676:	0192      	lsls	r2, r2, #6
 8004678:	4293      	cmp	r3, r2
 800467a:	d040      	beq.n	80046fe <HAL_TIM_ConfigClockSource+0xde>
 800467c:	2280      	movs	r2, #128	; 0x80
 800467e:	0192      	lsls	r2, r2, #6
 8004680:	4293      	cmp	r3, r2
 8004682:	d900      	bls.n	8004686 <HAL_TIM_ConfigClockSource+0x66>
 8004684:	e088      	b.n	8004798 <HAL_TIM_ConfigClockSource+0x178>
 8004686:	2280      	movs	r2, #128	; 0x80
 8004688:	0152      	lsls	r2, r2, #5
 800468a:	4293      	cmp	r3, r2
 800468c:	d100      	bne.n	8004690 <HAL_TIM_ConfigClockSource+0x70>
 800468e:	e088      	b.n	80047a2 <HAL_TIM_ConfigClockSource+0x182>
 8004690:	2280      	movs	r2, #128	; 0x80
 8004692:	0152      	lsls	r2, r2, #5
 8004694:	4293      	cmp	r3, r2
 8004696:	d900      	bls.n	800469a <HAL_TIM_ConfigClockSource+0x7a>
 8004698:	e07e      	b.n	8004798 <HAL_TIM_ConfigClockSource+0x178>
 800469a:	2b70      	cmp	r3, #112	; 0x70
 800469c:	d018      	beq.n	80046d0 <HAL_TIM_ConfigClockSource+0xb0>
 800469e:	d900      	bls.n	80046a2 <HAL_TIM_ConfigClockSource+0x82>
 80046a0:	e07a      	b.n	8004798 <HAL_TIM_ConfigClockSource+0x178>
 80046a2:	2b60      	cmp	r3, #96	; 0x60
 80046a4:	d04f      	beq.n	8004746 <HAL_TIM_ConfigClockSource+0x126>
 80046a6:	d900      	bls.n	80046aa <HAL_TIM_ConfigClockSource+0x8a>
 80046a8:	e076      	b.n	8004798 <HAL_TIM_ConfigClockSource+0x178>
 80046aa:	2b50      	cmp	r3, #80	; 0x50
 80046ac:	d03b      	beq.n	8004726 <HAL_TIM_ConfigClockSource+0x106>
 80046ae:	d900      	bls.n	80046b2 <HAL_TIM_ConfigClockSource+0x92>
 80046b0:	e072      	b.n	8004798 <HAL_TIM_ConfigClockSource+0x178>
 80046b2:	2b40      	cmp	r3, #64	; 0x40
 80046b4:	d057      	beq.n	8004766 <HAL_TIM_ConfigClockSource+0x146>
 80046b6:	d900      	bls.n	80046ba <HAL_TIM_ConfigClockSource+0x9a>
 80046b8:	e06e      	b.n	8004798 <HAL_TIM_ConfigClockSource+0x178>
 80046ba:	2b30      	cmp	r3, #48	; 0x30
 80046bc:	d063      	beq.n	8004786 <HAL_TIM_ConfigClockSource+0x166>
 80046be:	d86b      	bhi.n	8004798 <HAL_TIM_ConfigClockSource+0x178>
 80046c0:	2b20      	cmp	r3, #32
 80046c2:	d060      	beq.n	8004786 <HAL_TIM_ConfigClockSource+0x166>
 80046c4:	d868      	bhi.n	8004798 <HAL_TIM_ConfigClockSource+0x178>
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d05d      	beq.n	8004786 <HAL_TIM_ConfigClockSource+0x166>
 80046ca:	2b10      	cmp	r3, #16
 80046cc:	d05b      	beq.n	8004786 <HAL_TIM_ConfigClockSource+0x166>
 80046ce:	e063      	b.n	8004798 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6818      	ldr	r0, [r3, #0]
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	6899      	ldr	r1, [r3, #8]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	f000 fb88 	bl	8004df4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	2277      	movs	r2, #119	; 0x77
 80046f0:	4313      	orrs	r3, r2
 80046f2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68ba      	ldr	r2, [r7, #8]
 80046fa:	609a      	str	r2, [r3, #8]
      break;
 80046fc:	e052      	b.n	80047a4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6818      	ldr	r0, [r3, #0]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	6899      	ldr	r1, [r3, #8]
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	685a      	ldr	r2, [r3, #4]
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	f000 fb71 	bl	8004df4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	689a      	ldr	r2, [r3, #8]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2180      	movs	r1, #128	; 0x80
 800471e:	01c9      	lsls	r1, r1, #7
 8004720:	430a      	orrs	r2, r1
 8004722:	609a      	str	r2, [r3, #8]
      break;
 8004724:	e03e      	b.n	80047a4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6818      	ldr	r0, [r3, #0]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	6859      	ldr	r1, [r3, #4]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	001a      	movs	r2, r3
 8004734:	f000 fae4 	bl	8004d00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2150      	movs	r1, #80	; 0x50
 800473e:	0018      	movs	r0, r3
 8004740:	f000 fb3e 	bl	8004dc0 <TIM_ITRx_SetConfig>
      break;
 8004744:	e02e      	b.n	80047a4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6818      	ldr	r0, [r3, #0]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	6859      	ldr	r1, [r3, #4]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	001a      	movs	r2, r3
 8004754:	f000 fb02 	bl	8004d5c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2160      	movs	r1, #96	; 0x60
 800475e:	0018      	movs	r0, r3
 8004760:	f000 fb2e 	bl	8004dc0 <TIM_ITRx_SetConfig>
      break;
 8004764:	e01e      	b.n	80047a4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6818      	ldr	r0, [r3, #0]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	6859      	ldr	r1, [r3, #4]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	001a      	movs	r2, r3
 8004774:	f000 fac4 	bl	8004d00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2140      	movs	r1, #64	; 0x40
 800477e:	0018      	movs	r0, r3
 8004780:	f000 fb1e 	bl	8004dc0 <TIM_ITRx_SetConfig>
      break;
 8004784:	e00e      	b.n	80047a4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	0019      	movs	r1, r3
 8004790:	0010      	movs	r0, r2
 8004792:	f000 fb15 	bl	8004dc0 <TIM_ITRx_SetConfig>
      break;
 8004796:	e005      	b.n	80047a4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004798:	230f      	movs	r3, #15
 800479a:	18fb      	adds	r3, r7, r3
 800479c:	2201      	movs	r2, #1
 800479e:	701a      	strb	r2, [r3, #0]
      break;
 80047a0:	e000      	b.n	80047a4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80047a2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	223d      	movs	r2, #61	; 0x3d
 80047a8:	2101      	movs	r1, #1
 80047aa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	223c      	movs	r2, #60	; 0x3c
 80047b0:	2100      	movs	r1, #0
 80047b2:	5499      	strb	r1, [r3, r2]

  return status;
 80047b4:	230f      	movs	r3, #15
 80047b6:	18fb      	adds	r3, r7, r3
 80047b8:	781b      	ldrb	r3, [r3, #0]
}
 80047ba:	0018      	movs	r0, r3
 80047bc:	46bd      	mov	sp, r7
 80047be:	b004      	add	sp, #16
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	46c0      	nop			; (mov r8, r8)
 80047c4:	ffff00ff 	.word	0xffff00ff

080047c8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80047d0:	46c0      	nop			; (mov r8, r8)
 80047d2:	46bd      	mov	sp, r7
 80047d4:	b002      	add	sp, #8
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047e0:	46c0      	nop			; (mov r8, r8)
 80047e2:	46bd      	mov	sp, r7
 80047e4:	b002      	add	sp, #8
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047f0:	46c0      	nop			; (mov r8, r8)
 80047f2:	46bd      	mov	sp, r7
 80047f4:	b002      	add	sp, #8
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004800:	46c0      	nop			; (mov r8, r8)
 8004802:	46bd      	mov	sp, r7
 8004804:	b002      	add	sp, #8
 8004806:	bd80      	pop	{r7, pc}

08004808 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a34      	ldr	r2, [pc, #208]	; (80048ec <TIM_Base_SetConfig+0xe4>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d008      	beq.n	8004832 <TIM_Base_SetConfig+0x2a>
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	2380      	movs	r3, #128	; 0x80
 8004824:	05db      	lsls	r3, r3, #23
 8004826:	429a      	cmp	r2, r3
 8004828:	d003      	beq.n	8004832 <TIM_Base_SetConfig+0x2a>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a30      	ldr	r2, [pc, #192]	; (80048f0 <TIM_Base_SetConfig+0xe8>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d108      	bne.n	8004844 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2270      	movs	r2, #112	; 0x70
 8004836:	4393      	bics	r3, r2
 8004838:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	4313      	orrs	r3, r2
 8004842:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a29      	ldr	r2, [pc, #164]	; (80048ec <TIM_Base_SetConfig+0xe4>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d018      	beq.n	800487e <TIM_Base_SetConfig+0x76>
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	2380      	movs	r3, #128	; 0x80
 8004850:	05db      	lsls	r3, r3, #23
 8004852:	429a      	cmp	r2, r3
 8004854:	d013      	beq.n	800487e <TIM_Base_SetConfig+0x76>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a25      	ldr	r2, [pc, #148]	; (80048f0 <TIM_Base_SetConfig+0xe8>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d00f      	beq.n	800487e <TIM_Base_SetConfig+0x76>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a24      	ldr	r2, [pc, #144]	; (80048f4 <TIM_Base_SetConfig+0xec>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d00b      	beq.n	800487e <TIM_Base_SetConfig+0x76>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a23      	ldr	r2, [pc, #140]	; (80048f8 <TIM_Base_SetConfig+0xf0>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d007      	beq.n	800487e <TIM_Base_SetConfig+0x76>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a22      	ldr	r2, [pc, #136]	; (80048fc <TIM_Base_SetConfig+0xf4>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d003      	beq.n	800487e <TIM_Base_SetConfig+0x76>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a21      	ldr	r2, [pc, #132]	; (8004900 <TIM_Base_SetConfig+0xf8>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d108      	bne.n	8004890 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	4a20      	ldr	r2, [pc, #128]	; (8004904 <TIM_Base_SetConfig+0xfc>)
 8004882:	4013      	ands	r3, r2
 8004884:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	4313      	orrs	r3, r2
 800488e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2280      	movs	r2, #128	; 0x80
 8004894:	4393      	bics	r3, r2
 8004896:	001a      	movs	r2, r3
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	4313      	orrs	r3, r2
 800489e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	689a      	ldr	r2, [r3, #8]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a0c      	ldr	r2, [pc, #48]	; (80048ec <TIM_Base_SetConfig+0xe4>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d00b      	beq.n	80048d6 <TIM_Base_SetConfig+0xce>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a0d      	ldr	r2, [pc, #52]	; (80048f8 <TIM_Base_SetConfig+0xf0>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d007      	beq.n	80048d6 <TIM_Base_SetConfig+0xce>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a0c      	ldr	r2, [pc, #48]	; (80048fc <TIM_Base_SetConfig+0xf4>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d003      	beq.n	80048d6 <TIM_Base_SetConfig+0xce>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a0b      	ldr	r2, [pc, #44]	; (8004900 <TIM_Base_SetConfig+0xf8>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d103      	bne.n	80048de <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	691a      	ldr	r2, [r3, #16]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	615a      	str	r2, [r3, #20]
}
 80048e4:	46c0      	nop			; (mov r8, r8)
 80048e6:	46bd      	mov	sp, r7
 80048e8:	b004      	add	sp, #16
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	40012c00 	.word	0x40012c00
 80048f0:	40000400 	.word	0x40000400
 80048f4:	40002000 	.word	0x40002000
 80048f8:	40014000 	.word	0x40014000
 80048fc:	40014400 	.word	0x40014400
 8004900:	40014800 	.word	0x40014800
 8004904:	fffffcff 	.word	0xfffffcff

08004908 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	2201      	movs	r2, #1
 8004918:	4393      	bics	r3, r2
 800491a:	001a      	movs	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2270      	movs	r2, #112	; 0x70
 8004936:	4393      	bics	r3, r2
 8004938:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2203      	movs	r2, #3
 800493e:	4393      	bics	r3, r2
 8004940:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	4313      	orrs	r3, r2
 800494a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	2202      	movs	r2, #2
 8004950:	4393      	bics	r3, r2
 8004952:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	697a      	ldr	r2, [r7, #20]
 800495a:	4313      	orrs	r3, r2
 800495c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a27      	ldr	r2, [pc, #156]	; (8004a00 <TIM_OC1_SetConfig+0xf8>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d00b      	beq.n	800497e <TIM_OC1_SetConfig+0x76>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a26      	ldr	r2, [pc, #152]	; (8004a04 <TIM_OC1_SetConfig+0xfc>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d007      	beq.n	800497e <TIM_OC1_SetConfig+0x76>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a25      	ldr	r2, [pc, #148]	; (8004a08 <TIM_OC1_SetConfig+0x100>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d003      	beq.n	800497e <TIM_OC1_SetConfig+0x76>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a24      	ldr	r2, [pc, #144]	; (8004a0c <TIM_OC1_SetConfig+0x104>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d10c      	bne.n	8004998 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	2208      	movs	r2, #8
 8004982:	4393      	bics	r3, r2
 8004984:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	4313      	orrs	r3, r2
 800498e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	2204      	movs	r2, #4
 8004994:	4393      	bics	r3, r2
 8004996:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a19      	ldr	r2, [pc, #100]	; (8004a00 <TIM_OC1_SetConfig+0xf8>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d00b      	beq.n	80049b8 <TIM_OC1_SetConfig+0xb0>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a18      	ldr	r2, [pc, #96]	; (8004a04 <TIM_OC1_SetConfig+0xfc>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d007      	beq.n	80049b8 <TIM_OC1_SetConfig+0xb0>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a17      	ldr	r2, [pc, #92]	; (8004a08 <TIM_OC1_SetConfig+0x100>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d003      	beq.n	80049b8 <TIM_OC1_SetConfig+0xb0>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a16      	ldr	r2, [pc, #88]	; (8004a0c <TIM_OC1_SetConfig+0x104>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d111      	bne.n	80049dc <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	4a15      	ldr	r2, [pc, #84]	; (8004a10 <TIM_OC1_SetConfig+0x108>)
 80049bc:	4013      	ands	r3, r2
 80049be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	4a14      	ldr	r2, [pc, #80]	; (8004a14 <TIM_OC1_SetConfig+0x10c>)
 80049c4:	4013      	ands	r3, r2
 80049c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	695b      	ldr	r3, [r3, #20]
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	4313      	orrs	r3, r2
 80049da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	693a      	ldr	r2, [r7, #16]
 80049e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	685a      	ldr	r2, [r3, #4]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	697a      	ldr	r2, [r7, #20]
 80049f4:	621a      	str	r2, [r3, #32]
}
 80049f6:	46c0      	nop			; (mov r8, r8)
 80049f8:	46bd      	mov	sp, r7
 80049fa:	b006      	add	sp, #24
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	46c0      	nop			; (mov r8, r8)
 8004a00:	40012c00 	.word	0x40012c00
 8004a04:	40014000 	.word	0x40014000
 8004a08:	40014400 	.word	0x40014400
 8004a0c:	40014800 	.word	0x40014800
 8004a10:	fffffeff 	.word	0xfffffeff
 8004a14:	fffffdff 	.word	0xfffffdff

08004a18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b086      	sub	sp, #24
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	2210      	movs	r2, #16
 8004a28:	4393      	bics	r3, r2
 8004a2a:	001a      	movs	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a1b      	ldr	r3, [r3, #32]
 8004a34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	4a2e      	ldr	r2, [pc, #184]	; (8004b00 <TIM_OC2_SetConfig+0xe8>)
 8004a46:	4013      	ands	r3, r2
 8004a48:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	4a2d      	ldr	r2, [pc, #180]	; (8004b04 <TIM_OC2_SetConfig+0xec>)
 8004a4e:	4013      	ands	r3, r2
 8004a50:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	021b      	lsls	r3, r3, #8
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	2220      	movs	r2, #32
 8004a62:	4393      	bics	r3, r2
 8004a64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	011b      	lsls	r3, r3, #4
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a24      	ldr	r2, [pc, #144]	; (8004b08 <TIM_OC2_SetConfig+0xf0>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d10d      	bne.n	8004a96 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	2280      	movs	r2, #128	; 0x80
 8004a7e:	4393      	bics	r3, r2
 8004a80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	011b      	lsls	r3, r3, #4
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	2240      	movs	r2, #64	; 0x40
 8004a92:	4393      	bics	r3, r2
 8004a94:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a1b      	ldr	r2, [pc, #108]	; (8004b08 <TIM_OC2_SetConfig+0xf0>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d00b      	beq.n	8004ab6 <TIM_OC2_SetConfig+0x9e>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a1a      	ldr	r2, [pc, #104]	; (8004b0c <TIM_OC2_SetConfig+0xf4>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d007      	beq.n	8004ab6 <TIM_OC2_SetConfig+0x9e>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a19      	ldr	r2, [pc, #100]	; (8004b10 <TIM_OC2_SetConfig+0xf8>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d003      	beq.n	8004ab6 <TIM_OC2_SetConfig+0x9e>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a18      	ldr	r2, [pc, #96]	; (8004b14 <TIM_OC2_SetConfig+0xfc>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d113      	bne.n	8004ade <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	4a17      	ldr	r2, [pc, #92]	; (8004b18 <TIM_OC2_SetConfig+0x100>)
 8004aba:	4013      	ands	r3, r2
 8004abc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	4a16      	ldr	r2, [pc, #88]	; (8004b1c <TIM_OC2_SetConfig+0x104>)
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	621a      	str	r2, [r3, #32]
}
 8004af8:	46c0      	nop			; (mov r8, r8)
 8004afa:	46bd      	mov	sp, r7
 8004afc:	b006      	add	sp, #24
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	ffff8fff 	.word	0xffff8fff
 8004b04:	fffffcff 	.word	0xfffffcff
 8004b08:	40012c00 	.word	0x40012c00
 8004b0c:	40014000 	.word	0x40014000
 8004b10:	40014400 	.word	0x40014400
 8004b14:	40014800 	.word	0x40014800
 8004b18:	fffffbff 	.word	0xfffffbff
 8004b1c:	fffff7ff 	.word	0xfffff7ff

08004b20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b086      	sub	sp, #24
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	4a35      	ldr	r2, [pc, #212]	; (8004c04 <TIM_OC3_SetConfig+0xe4>)
 8004b30:	401a      	ands	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	69db      	ldr	r3, [r3, #28]
 8004b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2270      	movs	r2, #112	; 0x70
 8004b4c:	4393      	bics	r3, r2
 8004b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2203      	movs	r2, #3
 8004b54:	4393      	bics	r3, r2
 8004b56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	4a28      	ldr	r2, [pc, #160]	; (8004c08 <TIM_OC3_SetConfig+0xe8>)
 8004b66:	4013      	ands	r3, r2
 8004b68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	021b      	lsls	r3, r3, #8
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a24      	ldr	r2, [pc, #144]	; (8004c0c <TIM_OC3_SetConfig+0xec>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d10d      	bne.n	8004b9a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	4a23      	ldr	r2, [pc, #140]	; (8004c10 <TIM_OC3_SetConfig+0xf0>)
 8004b82:	4013      	ands	r3, r2
 8004b84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	021b      	lsls	r3, r3, #8
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	4a1f      	ldr	r2, [pc, #124]	; (8004c14 <TIM_OC3_SetConfig+0xf4>)
 8004b96:	4013      	ands	r3, r2
 8004b98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a1b      	ldr	r2, [pc, #108]	; (8004c0c <TIM_OC3_SetConfig+0xec>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d00b      	beq.n	8004bba <TIM_OC3_SetConfig+0x9a>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a1c      	ldr	r2, [pc, #112]	; (8004c18 <TIM_OC3_SetConfig+0xf8>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d007      	beq.n	8004bba <TIM_OC3_SetConfig+0x9a>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a1b      	ldr	r2, [pc, #108]	; (8004c1c <TIM_OC3_SetConfig+0xfc>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d003      	beq.n	8004bba <TIM_OC3_SetConfig+0x9a>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a1a      	ldr	r2, [pc, #104]	; (8004c20 <TIM_OC3_SetConfig+0x100>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d113      	bne.n	8004be2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	4a19      	ldr	r2, [pc, #100]	; (8004c24 <TIM_OC3_SetConfig+0x104>)
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	4a18      	ldr	r2, [pc, #96]	; (8004c28 <TIM_OC3_SetConfig+0x108>)
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	011b      	lsls	r3, r3, #4
 8004bd0:	693a      	ldr	r2, [r7, #16]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	011b      	lsls	r3, r3, #4
 8004bdc:	693a      	ldr	r2, [r7, #16]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	685a      	ldr	r2, [r3, #4]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	621a      	str	r2, [r3, #32]
}
 8004bfc:	46c0      	nop			; (mov r8, r8)
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	b006      	add	sp, #24
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	fffffeff 	.word	0xfffffeff
 8004c08:	fffffdff 	.word	0xfffffdff
 8004c0c:	40012c00 	.word	0x40012c00
 8004c10:	fffff7ff 	.word	0xfffff7ff
 8004c14:	fffffbff 	.word	0xfffffbff
 8004c18:	40014000 	.word	0x40014000
 8004c1c:	40014400 	.word	0x40014400
 8004c20:	40014800 	.word	0x40014800
 8004c24:	ffffefff 	.word	0xffffefff
 8004c28:	ffffdfff 	.word	0xffffdfff

08004c2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a1b      	ldr	r3, [r3, #32]
 8004c3a:	4a28      	ldr	r2, [pc, #160]	; (8004cdc <TIM_OC4_SetConfig+0xb0>)
 8004c3c:	401a      	ands	r2, r3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	69db      	ldr	r3, [r3, #28]
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	4a22      	ldr	r2, [pc, #136]	; (8004ce0 <TIM_OC4_SetConfig+0xb4>)
 8004c58:	4013      	ands	r3, r2
 8004c5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	4a21      	ldr	r2, [pc, #132]	; (8004ce4 <TIM_OC4_SetConfig+0xb8>)
 8004c60:	4013      	ands	r3, r2
 8004c62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	021b      	lsls	r3, r3, #8
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	4a1d      	ldr	r2, [pc, #116]	; (8004ce8 <TIM_OC4_SetConfig+0xbc>)
 8004c74:	4013      	ands	r3, r2
 8004c76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	031b      	lsls	r3, r3, #12
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a19      	ldr	r2, [pc, #100]	; (8004cec <TIM_OC4_SetConfig+0xc0>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d00b      	beq.n	8004ca4 <TIM_OC4_SetConfig+0x78>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a18      	ldr	r2, [pc, #96]	; (8004cf0 <TIM_OC4_SetConfig+0xc4>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d007      	beq.n	8004ca4 <TIM_OC4_SetConfig+0x78>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a17      	ldr	r2, [pc, #92]	; (8004cf4 <TIM_OC4_SetConfig+0xc8>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d003      	beq.n	8004ca4 <TIM_OC4_SetConfig+0x78>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a16      	ldr	r2, [pc, #88]	; (8004cf8 <TIM_OC4_SetConfig+0xcc>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d109      	bne.n	8004cb8 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	4a15      	ldr	r2, [pc, #84]	; (8004cfc <TIM_OC4_SetConfig+0xd0>)
 8004ca8:	4013      	ands	r3, r2
 8004caa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	695b      	ldr	r3, [r3, #20]
 8004cb0:	019b      	lsls	r3, r3, #6
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	693a      	ldr	r2, [r7, #16]
 8004cd0:	621a      	str	r2, [r3, #32]
}
 8004cd2:	46c0      	nop			; (mov r8, r8)
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	b006      	add	sp, #24
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	46c0      	nop			; (mov r8, r8)
 8004cdc:	ffffefff 	.word	0xffffefff
 8004ce0:	ffff8fff 	.word	0xffff8fff
 8004ce4:	fffffcff 	.word	0xfffffcff
 8004ce8:	ffffdfff 	.word	0xffffdfff
 8004cec:	40012c00 	.word	0x40012c00
 8004cf0:	40014000 	.word	0x40014000
 8004cf4:	40014400 	.word	0x40014400
 8004cf8:	40014800 	.word	0x40014800
 8004cfc:	ffffbfff 	.word	0xffffbfff

08004d00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b086      	sub	sp, #24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6a1b      	ldr	r3, [r3, #32]
 8004d10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6a1b      	ldr	r3, [r3, #32]
 8004d16:	2201      	movs	r2, #1
 8004d18:	4393      	bics	r3, r2
 8004d1a:	001a      	movs	r2, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	22f0      	movs	r2, #240	; 0xf0
 8004d2a:	4393      	bics	r3, r2
 8004d2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	011b      	lsls	r3, r3, #4
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	220a      	movs	r2, #10
 8004d3c:	4393      	bics	r3, r2
 8004d3e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	621a      	str	r2, [r3, #32]
}
 8004d54:	46c0      	nop			; (mov r8, r8)
 8004d56:	46bd      	mov	sp, r7
 8004d58:	b006      	add	sp, #24
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b086      	sub	sp, #24
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6a1b      	ldr	r3, [r3, #32]
 8004d6c:	2210      	movs	r2, #16
 8004d6e:	4393      	bics	r3, r2
 8004d70:	001a      	movs	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6a1b      	ldr	r3, [r3, #32]
 8004d80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	4a0d      	ldr	r2, [pc, #52]	; (8004dbc <TIM_TI2_ConfigInputStage+0x60>)
 8004d86:	4013      	ands	r3, r2
 8004d88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	031b      	lsls	r3, r3, #12
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	22a0      	movs	r2, #160	; 0xa0
 8004d98:	4393      	bics	r3, r2
 8004d9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	011b      	lsls	r3, r3, #4
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	621a      	str	r2, [r3, #32]
}
 8004db2:	46c0      	nop			; (mov r8, r8)
 8004db4:	46bd      	mov	sp, r7
 8004db6:	b006      	add	sp, #24
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	46c0      	nop			; (mov r8, r8)
 8004dbc:	ffff0fff 	.word	0xffff0fff

08004dc0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2270      	movs	r2, #112	; 0x70
 8004dd4:	4393      	bics	r3, r2
 8004dd6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004dd8:	683a      	ldr	r2, [r7, #0]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	2207      	movs	r2, #7
 8004de0:	4313      	orrs	r3, r2
 8004de2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	609a      	str	r2, [r3, #8]
}
 8004dea:	46c0      	nop			; (mov r8, r8)
 8004dec:	46bd      	mov	sp, r7
 8004dee:	b004      	add	sp, #16
 8004df0:	bd80      	pop	{r7, pc}
	...

08004df4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b086      	sub	sp, #24
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
 8004e00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	4a09      	ldr	r2, [pc, #36]	; (8004e30 <TIM_ETR_SetConfig+0x3c>)
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	021a      	lsls	r2, r3, #8
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	431a      	orrs	r2, r3
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	697a      	ldr	r2, [r7, #20]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	609a      	str	r2, [r3, #8]
}
 8004e28:	46c0      	nop			; (mov r8, r8)
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	b006      	add	sp, #24
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	ffff00ff 	.word	0xffff00ff

08004e34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b086      	sub	sp, #24
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	221f      	movs	r2, #31
 8004e44:	4013      	ands	r3, r2
 8004e46:	2201      	movs	r2, #1
 8004e48:	409a      	lsls	r2, r3
 8004e4a:	0013      	movs	r3, r2
 8004e4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	43d2      	mvns	r2, r2
 8004e56:	401a      	ands	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6a1a      	ldr	r2, [r3, #32]
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	211f      	movs	r1, #31
 8004e64:	400b      	ands	r3, r1
 8004e66:	6879      	ldr	r1, [r7, #4]
 8004e68:	4099      	lsls	r1, r3
 8004e6a:	000b      	movs	r3, r1
 8004e6c:	431a      	orrs	r2, r3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	621a      	str	r2, [r3, #32]
}
 8004e72:	46c0      	nop			; (mov r8, r8)
 8004e74:	46bd      	mov	sp, r7
 8004e76:	b006      	add	sp, #24
 8004e78:	bd80      	pop	{r7, pc}
	...

08004e7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	223c      	movs	r2, #60	; 0x3c
 8004e8a:	5c9b      	ldrb	r3, [r3, r2]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d101      	bne.n	8004e94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e90:	2302      	movs	r3, #2
 8004e92:	e047      	b.n	8004f24 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	223c      	movs	r2, #60	; 0x3c
 8004e98:	2101      	movs	r1, #1
 8004e9a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	223d      	movs	r2, #61	; 0x3d
 8004ea0:	2102      	movs	r1, #2
 8004ea2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2270      	movs	r2, #112	; 0x70
 8004eb8:	4393      	bics	r3, r2
 8004eba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a16      	ldr	r2, [pc, #88]	; (8004f2c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d00f      	beq.n	8004ef8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	2380      	movs	r3, #128	; 0x80
 8004ede:	05db      	lsls	r3, r3, #23
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d009      	beq.n	8004ef8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a11      	ldr	r2, [pc, #68]	; (8004f30 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d004      	beq.n	8004ef8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a10      	ldr	r2, [pc, #64]	; (8004f34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d10c      	bne.n	8004f12 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	2280      	movs	r2, #128	; 0x80
 8004efc:	4393      	bics	r3, r2
 8004efe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	68ba      	ldr	r2, [r7, #8]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68ba      	ldr	r2, [r7, #8]
 8004f10:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	223d      	movs	r2, #61	; 0x3d
 8004f16:	2101      	movs	r1, #1
 8004f18:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	223c      	movs	r2, #60	; 0x3c
 8004f1e:	2100      	movs	r1, #0
 8004f20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	0018      	movs	r0, r3
 8004f26:	46bd      	mov	sp, r7
 8004f28:	b004      	add	sp, #16
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	40012c00 	.word	0x40012c00
 8004f30:	40000400 	.word	0x40000400
 8004f34:	40014000 	.word	0x40014000

08004f38 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004f42:	2300      	movs	r3, #0
 8004f44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	223c      	movs	r2, #60	; 0x3c
 8004f4a:	5c9b      	ldrb	r3, [r3, r2]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d101      	bne.n	8004f54 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004f50:	2302      	movs	r3, #2
 8004f52:	e03e      	b.n	8004fd2 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	223c      	movs	r2, #60	; 0x3c
 8004f58:	2101      	movs	r1, #1
 8004f5a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	22ff      	movs	r2, #255	; 0xff
 8004f60:	4393      	bics	r3, r2
 8004f62:	001a      	movs	r2, r3
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	4a1b      	ldr	r2, [pc, #108]	; (8004fdc <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8004f70:	401a      	ands	r2, r3
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	4a18      	ldr	r2, [pc, #96]	; (8004fe0 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8004f7e:	401a      	ands	r2, r3
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	4a16      	ldr	r2, [pc, #88]	; (8004fe4 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8004f8c:	401a      	ands	r2, r3
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	4a13      	ldr	r2, [pc, #76]	; (8004fe8 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8004f9a:	401a      	ands	r2, r3
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	4a11      	ldr	r2, [pc, #68]	; (8004fec <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8004fa8:	401a      	ands	r2, r3
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	4a0e      	ldr	r2, [pc, #56]	; (8004ff0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8004fb6:	401a      	ands	r2, r3
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	69db      	ldr	r3, [r3, #28]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	223c      	movs	r2, #60	; 0x3c
 8004fcc:	2100      	movs	r1, #0
 8004fce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	0018      	movs	r0, r3
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	b004      	add	sp, #16
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	46c0      	nop			; (mov r8, r8)
 8004fdc:	fffffcff 	.word	0xfffffcff
 8004fe0:	fffffbff 	.word	0xfffffbff
 8004fe4:	fffff7ff 	.word	0xfffff7ff
 8004fe8:	ffffefff 	.word	0xffffefff
 8004fec:	ffffdfff 	.word	0xffffdfff
 8004ff0:	ffffbfff 	.word	0xffffbfff

08004ff4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ffc:	46c0      	nop			; (mov r8, r8)
 8004ffe:	46bd      	mov	sp, r7
 8005000:	b002      	add	sp, #8
 8005002:	bd80      	pop	{r7, pc}

08005004 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800500c:	46c0      	nop			; (mov r8, r8)
 800500e:	46bd      	mov	sp, r7
 8005010:	b002      	add	sp, #8
 8005012:	bd80      	pop	{r7, pc}

08005014 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e044      	b.n	80050b0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800502a:	2b00      	cmp	r3, #0
 800502c:	d107      	bne.n	800503e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2274      	movs	r2, #116	; 0x74
 8005032:	2100      	movs	r1, #0
 8005034:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	0018      	movs	r0, r3
 800503a:	f7fc fb35 	bl	80016a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2224      	movs	r2, #36	; 0x24
 8005042:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2101      	movs	r1, #1
 8005050:	438a      	bics	r2, r1
 8005052:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	0018      	movs	r0, r3
 8005058:	f000 fc2e 	bl	80058b8 <UART_SetConfig>
 800505c:	0003      	movs	r3, r0
 800505e:	2b01      	cmp	r3, #1
 8005060:	d101      	bne.n	8005066 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e024      	b.n	80050b0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506a:	2b00      	cmp	r3, #0
 800506c:	d003      	beq.n	8005076 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	0018      	movs	r0, r3
 8005072:	f000 fd61 	bl	8005b38 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	685a      	ldr	r2, [r3, #4]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	490d      	ldr	r1, [pc, #52]	; (80050b8 <HAL_UART_Init+0xa4>)
 8005082:	400a      	ands	r2, r1
 8005084:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	689a      	ldr	r2, [r3, #8]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	212a      	movs	r1, #42	; 0x2a
 8005092:	438a      	bics	r2, r1
 8005094:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2101      	movs	r1, #1
 80050a2:	430a      	orrs	r2, r1
 80050a4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	0018      	movs	r0, r3
 80050aa:	f000 fdf9 	bl	8005ca0 <UART_CheckIdleState>
 80050ae:	0003      	movs	r3, r0
}
 80050b0:	0018      	movs	r0, r3
 80050b2:	46bd      	mov	sp, r7
 80050b4:	b002      	add	sp, #8
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	ffffb7ff 	.word	0xffffb7ff

080050bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b08a      	sub	sp, #40	; 0x28
 80050c0:	af02      	add	r7, sp, #8
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	603b      	str	r3, [r7, #0]
 80050c8:	1dbb      	adds	r3, r7, #6
 80050ca:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050d0:	2b20      	cmp	r3, #32
 80050d2:	d000      	beq.n	80050d6 <HAL_UART_Transmit+0x1a>
 80050d4:	e096      	b.n	8005204 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d003      	beq.n	80050e4 <HAL_UART_Transmit+0x28>
 80050dc:	1dbb      	adds	r3, r7, #6
 80050de:	881b      	ldrh	r3, [r3, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d101      	bne.n	80050e8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e08e      	b.n	8005206 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	689a      	ldr	r2, [r3, #8]
 80050ec:	2380      	movs	r3, #128	; 0x80
 80050ee:	015b      	lsls	r3, r3, #5
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d109      	bne.n	8005108 <HAL_UART_Transmit+0x4c>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d105      	bne.n	8005108 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	2201      	movs	r2, #1
 8005100:	4013      	ands	r3, r2
 8005102:	d001      	beq.n	8005108 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e07e      	b.n	8005206 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2274      	movs	r2, #116	; 0x74
 800510c:	5c9b      	ldrb	r3, [r3, r2]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d101      	bne.n	8005116 <HAL_UART_Transmit+0x5a>
 8005112:	2302      	movs	r3, #2
 8005114:	e077      	b.n	8005206 <HAL_UART_Transmit+0x14a>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2274      	movs	r2, #116	; 0x74
 800511a:	2101      	movs	r1, #1
 800511c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2280      	movs	r2, #128	; 0x80
 8005122:	2100      	movs	r1, #0
 8005124:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2221      	movs	r2, #33	; 0x21
 800512a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800512c:	f7fc fbf0 	bl	8001910 <HAL_GetTick>
 8005130:	0003      	movs	r3, r0
 8005132:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	1dba      	adds	r2, r7, #6
 8005138:	2150      	movs	r1, #80	; 0x50
 800513a:	8812      	ldrh	r2, [r2, #0]
 800513c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	1dba      	adds	r2, r7, #6
 8005142:	2152      	movs	r1, #82	; 0x52
 8005144:	8812      	ldrh	r2, [r2, #0]
 8005146:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	689a      	ldr	r2, [r3, #8]
 800514c:	2380      	movs	r3, #128	; 0x80
 800514e:	015b      	lsls	r3, r3, #5
 8005150:	429a      	cmp	r2, r3
 8005152:	d108      	bne.n	8005166 <HAL_UART_Transmit+0xaa>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d104      	bne.n	8005166 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800515c:	2300      	movs	r3, #0
 800515e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	61bb      	str	r3, [r7, #24]
 8005164:	e003      	b.n	800516e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800516a:	2300      	movs	r3, #0
 800516c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2274      	movs	r2, #116	; 0x74
 8005172:	2100      	movs	r1, #0
 8005174:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8005176:	e02d      	b.n	80051d4 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	68f8      	ldr	r0, [r7, #12]
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	9300      	str	r3, [sp, #0]
 8005180:	0013      	movs	r3, r2
 8005182:	2200      	movs	r2, #0
 8005184:	2180      	movs	r1, #128	; 0x80
 8005186:	f000 fdd3 	bl	8005d30 <UART_WaitOnFlagUntilTimeout>
 800518a:	1e03      	subs	r3, r0, #0
 800518c:	d001      	beq.n	8005192 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e039      	b.n	8005206 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d10b      	bne.n	80051b0 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	881a      	ldrh	r2, [r3, #0]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	05d2      	lsls	r2, r2, #23
 80051a2:	0dd2      	lsrs	r2, r2, #23
 80051a4:	b292      	uxth	r2, r2
 80051a6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	3302      	adds	r3, #2
 80051ac:	61bb      	str	r3, [r7, #24]
 80051ae:	e008      	b.n	80051c2 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	781a      	ldrb	r2, [r3, #0]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	b292      	uxth	r2, r2
 80051ba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	3301      	adds	r3, #1
 80051c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2252      	movs	r2, #82	; 0x52
 80051c6:	5a9b      	ldrh	r3, [r3, r2]
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	3b01      	subs	r3, #1
 80051cc:	b299      	uxth	r1, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2252      	movs	r2, #82	; 0x52
 80051d2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2252      	movs	r2, #82	; 0x52
 80051d8:	5a9b      	ldrh	r3, [r3, r2]
 80051da:	b29b      	uxth	r3, r3
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d1cb      	bne.n	8005178 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	9300      	str	r3, [sp, #0]
 80051e8:	0013      	movs	r3, r2
 80051ea:	2200      	movs	r2, #0
 80051ec:	2140      	movs	r1, #64	; 0x40
 80051ee:	f000 fd9f 	bl	8005d30 <UART_WaitOnFlagUntilTimeout>
 80051f2:	1e03      	subs	r3, r0, #0
 80051f4:	d001      	beq.n	80051fa <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e005      	b.n	8005206 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2220      	movs	r2, #32
 80051fe:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005200:	2300      	movs	r3, #0
 8005202:	e000      	b.n	8005206 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005204:	2302      	movs	r3, #2
  }
}
 8005206:	0018      	movs	r0, r3
 8005208:	46bd      	mov	sp, r7
 800520a:	b008      	add	sp, #32
 800520c:	bd80      	pop	{r7, pc}

0800520e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b088      	sub	sp, #32
 8005212:	af00      	add	r7, sp, #0
 8005214:	60f8      	str	r0, [r7, #12]
 8005216:	60b9      	str	r1, [r7, #8]
 8005218:	1dbb      	adds	r3, r7, #6
 800521a:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005220:	2b20      	cmp	r3, #32
 8005222:	d150      	bne.n	80052c6 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d003      	beq.n	8005232 <HAL_UART_Receive_IT+0x24>
 800522a:	1dbb      	adds	r3, r7, #6
 800522c:	881b      	ldrh	r3, [r3, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d101      	bne.n	8005236 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e048      	b.n	80052c8 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	689a      	ldr	r2, [r3, #8]
 800523a:	2380      	movs	r3, #128	; 0x80
 800523c:	015b      	lsls	r3, r3, #5
 800523e:	429a      	cmp	r2, r3
 8005240:	d109      	bne.n	8005256 <HAL_UART_Receive_IT+0x48>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d105      	bne.n	8005256 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	2201      	movs	r2, #1
 800524e:	4013      	ands	r3, r2
 8005250:	d001      	beq.n	8005256 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e038      	b.n	80052c8 <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2274      	movs	r2, #116	; 0x74
 800525a:	5c9b      	ldrb	r3, [r3, r2]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d101      	bne.n	8005264 <HAL_UART_Receive_IT+0x56>
 8005260:	2302      	movs	r3, #2
 8005262:	e031      	b.n	80052c8 <HAL_UART_Receive_IT+0xba>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2274      	movs	r2, #116	; 0x74
 8005268:	2101      	movs	r1, #1
 800526a:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	685a      	ldr	r2, [r3, #4]
 8005278:	2380      	movs	r3, #128	; 0x80
 800527a:	041b      	lsls	r3, r3, #16
 800527c:	4013      	ands	r3, r2
 800527e:	d019      	beq.n	80052b4 <HAL_UART_Receive_IT+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005280:	f3ef 8310 	mrs	r3, PRIMASK
 8005284:	613b      	str	r3, [r7, #16]
  return(result);
 8005286:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005288:	61fb      	str	r3, [r7, #28]
 800528a:	2301      	movs	r3, #1
 800528c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	f383 8810 	msr	PRIMASK, r3
}
 8005294:	46c0      	nop			; (mov r8, r8)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2180      	movs	r1, #128	; 0x80
 80052a2:	04c9      	lsls	r1, r1, #19
 80052a4:	430a      	orrs	r2, r1
 80052a6:	601a      	str	r2, [r3, #0]
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	f383 8810 	msr	PRIMASK, r3
}
 80052b2:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80052b4:	1dbb      	adds	r3, r7, #6
 80052b6:	881a      	ldrh	r2, [r3, #0]
 80052b8:	68b9      	ldr	r1, [r7, #8]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	0018      	movs	r0, r3
 80052be:	f000 fdfb 	bl	8005eb8 <UART_Start_Receive_IT>
 80052c2:	0003      	movs	r3, r0
 80052c4:	e000      	b.n	80052c8 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 80052c6:	2302      	movs	r3, #2
  }
}
 80052c8:	0018      	movs	r0, r3
 80052ca:	46bd      	mov	sp, r7
 80052cc:	b008      	add	sp, #32
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80052d0:	b590      	push	{r4, r7, lr}
 80052d2:	b0ab      	sub	sp, #172	; 0xac
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	69db      	ldr	r3, [r3, #28]
 80052de:	22a4      	movs	r2, #164	; 0xa4
 80052e0:	18b9      	adds	r1, r7, r2
 80052e2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	20a0      	movs	r0, #160	; 0xa0
 80052ec:	1839      	adds	r1, r7, r0
 80052ee:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	219c      	movs	r1, #156	; 0x9c
 80052f8:	1879      	adds	r1, r7, r1
 80052fa:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80052fc:	0011      	movs	r1, r2
 80052fe:	18bb      	adds	r3, r7, r2
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a99      	ldr	r2, [pc, #612]	; (8005568 <HAL_UART_IRQHandler+0x298>)
 8005304:	4013      	ands	r3, r2
 8005306:	2298      	movs	r2, #152	; 0x98
 8005308:	18bc      	adds	r4, r7, r2
 800530a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800530c:	18bb      	adds	r3, r7, r2
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d114      	bne.n	800533e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005314:	187b      	adds	r3, r7, r1
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2220      	movs	r2, #32
 800531a:	4013      	ands	r3, r2
 800531c:	d00f      	beq.n	800533e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800531e:	183b      	adds	r3, r7, r0
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2220      	movs	r2, #32
 8005324:	4013      	ands	r3, r2
 8005326:	d00a      	beq.n	800533e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800532c:	2b00      	cmp	r3, #0
 800532e:	d100      	bne.n	8005332 <HAL_UART_IRQHandler+0x62>
 8005330:	e296      	b.n	8005860 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	0010      	movs	r0, r2
 800533a:	4798      	blx	r3
      }
      return;
 800533c:	e290      	b.n	8005860 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800533e:	2398      	movs	r3, #152	; 0x98
 8005340:	18fb      	adds	r3, r7, r3
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d100      	bne.n	800534a <HAL_UART_IRQHandler+0x7a>
 8005348:	e114      	b.n	8005574 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800534a:	239c      	movs	r3, #156	; 0x9c
 800534c:	18fb      	adds	r3, r7, r3
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2201      	movs	r2, #1
 8005352:	4013      	ands	r3, r2
 8005354:	d106      	bne.n	8005364 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005356:	23a0      	movs	r3, #160	; 0xa0
 8005358:	18fb      	adds	r3, r7, r3
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a83      	ldr	r2, [pc, #524]	; (800556c <HAL_UART_IRQHandler+0x29c>)
 800535e:	4013      	ands	r3, r2
 8005360:	d100      	bne.n	8005364 <HAL_UART_IRQHandler+0x94>
 8005362:	e107      	b.n	8005574 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005364:	23a4      	movs	r3, #164	; 0xa4
 8005366:	18fb      	adds	r3, r7, r3
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2201      	movs	r2, #1
 800536c:	4013      	ands	r3, r2
 800536e:	d012      	beq.n	8005396 <HAL_UART_IRQHandler+0xc6>
 8005370:	23a0      	movs	r3, #160	; 0xa0
 8005372:	18fb      	adds	r3, r7, r3
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	2380      	movs	r3, #128	; 0x80
 8005378:	005b      	lsls	r3, r3, #1
 800537a:	4013      	ands	r3, r2
 800537c:	d00b      	beq.n	8005396 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2201      	movs	r2, #1
 8005384:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2280      	movs	r2, #128	; 0x80
 800538a:	589b      	ldr	r3, [r3, r2]
 800538c:	2201      	movs	r2, #1
 800538e:	431a      	orrs	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2180      	movs	r1, #128	; 0x80
 8005394:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005396:	23a4      	movs	r3, #164	; 0xa4
 8005398:	18fb      	adds	r3, r7, r3
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2202      	movs	r2, #2
 800539e:	4013      	ands	r3, r2
 80053a0:	d011      	beq.n	80053c6 <HAL_UART_IRQHandler+0xf6>
 80053a2:	239c      	movs	r3, #156	; 0x9c
 80053a4:	18fb      	adds	r3, r7, r3
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2201      	movs	r2, #1
 80053aa:	4013      	ands	r3, r2
 80053ac:	d00b      	beq.n	80053c6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2202      	movs	r2, #2
 80053b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2280      	movs	r2, #128	; 0x80
 80053ba:	589b      	ldr	r3, [r3, r2]
 80053bc:	2204      	movs	r2, #4
 80053be:	431a      	orrs	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2180      	movs	r1, #128	; 0x80
 80053c4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053c6:	23a4      	movs	r3, #164	; 0xa4
 80053c8:	18fb      	adds	r3, r7, r3
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2204      	movs	r2, #4
 80053ce:	4013      	ands	r3, r2
 80053d0:	d011      	beq.n	80053f6 <HAL_UART_IRQHandler+0x126>
 80053d2:	239c      	movs	r3, #156	; 0x9c
 80053d4:	18fb      	adds	r3, r7, r3
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2201      	movs	r2, #1
 80053da:	4013      	ands	r3, r2
 80053dc:	d00b      	beq.n	80053f6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2204      	movs	r2, #4
 80053e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2280      	movs	r2, #128	; 0x80
 80053ea:	589b      	ldr	r3, [r3, r2]
 80053ec:	2202      	movs	r2, #2
 80053ee:	431a      	orrs	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2180      	movs	r1, #128	; 0x80
 80053f4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80053f6:	23a4      	movs	r3, #164	; 0xa4
 80053f8:	18fb      	adds	r3, r7, r3
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2208      	movs	r2, #8
 80053fe:	4013      	ands	r3, r2
 8005400:	d017      	beq.n	8005432 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005402:	23a0      	movs	r3, #160	; 0xa0
 8005404:	18fb      	adds	r3, r7, r3
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2220      	movs	r2, #32
 800540a:	4013      	ands	r3, r2
 800540c:	d105      	bne.n	800541a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800540e:	239c      	movs	r3, #156	; 0x9c
 8005410:	18fb      	adds	r3, r7, r3
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2201      	movs	r2, #1
 8005416:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005418:	d00b      	beq.n	8005432 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2208      	movs	r2, #8
 8005420:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2280      	movs	r2, #128	; 0x80
 8005426:	589b      	ldr	r3, [r3, r2]
 8005428:	2208      	movs	r2, #8
 800542a:	431a      	orrs	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2180      	movs	r1, #128	; 0x80
 8005430:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005432:	23a4      	movs	r3, #164	; 0xa4
 8005434:	18fb      	adds	r3, r7, r3
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	2380      	movs	r3, #128	; 0x80
 800543a:	011b      	lsls	r3, r3, #4
 800543c:	4013      	ands	r3, r2
 800543e:	d013      	beq.n	8005468 <HAL_UART_IRQHandler+0x198>
 8005440:	23a0      	movs	r3, #160	; 0xa0
 8005442:	18fb      	adds	r3, r7, r3
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	2380      	movs	r3, #128	; 0x80
 8005448:	04db      	lsls	r3, r3, #19
 800544a:	4013      	ands	r3, r2
 800544c:	d00c      	beq.n	8005468 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2280      	movs	r2, #128	; 0x80
 8005454:	0112      	lsls	r2, r2, #4
 8005456:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2280      	movs	r2, #128	; 0x80
 800545c:	589b      	ldr	r3, [r3, r2]
 800545e:	2220      	movs	r2, #32
 8005460:	431a      	orrs	r2, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2180      	movs	r1, #128	; 0x80
 8005466:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2280      	movs	r2, #128	; 0x80
 800546c:	589b      	ldr	r3, [r3, r2]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d100      	bne.n	8005474 <HAL_UART_IRQHandler+0x1a4>
 8005472:	e1f7      	b.n	8005864 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005474:	23a4      	movs	r3, #164	; 0xa4
 8005476:	18fb      	adds	r3, r7, r3
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2220      	movs	r2, #32
 800547c:	4013      	ands	r3, r2
 800547e:	d00e      	beq.n	800549e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005480:	23a0      	movs	r3, #160	; 0xa0
 8005482:	18fb      	adds	r3, r7, r3
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2220      	movs	r2, #32
 8005488:	4013      	ands	r3, r2
 800548a:	d008      	beq.n	800549e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005490:	2b00      	cmp	r3, #0
 8005492:	d004      	beq.n	800549e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	0010      	movs	r0, r2
 800549c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2280      	movs	r2, #128	; 0x80
 80054a2:	589b      	ldr	r3, [r3, r2]
 80054a4:	2194      	movs	r1, #148	; 0x94
 80054a6:	187a      	adds	r2, r7, r1
 80054a8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	2240      	movs	r2, #64	; 0x40
 80054b2:	4013      	ands	r3, r2
 80054b4:	2b40      	cmp	r3, #64	; 0x40
 80054b6:	d004      	beq.n	80054c2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80054b8:	187b      	adds	r3, r7, r1
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2228      	movs	r2, #40	; 0x28
 80054be:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054c0:	d047      	beq.n	8005552 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	0018      	movs	r0, r3
 80054c6:	f000 fd93 	bl	8005ff0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	2240      	movs	r2, #64	; 0x40
 80054d2:	4013      	ands	r3, r2
 80054d4:	2b40      	cmp	r3, #64	; 0x40
 80054d6:	d137      	bne.n	8005548 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054d8:	f3ef 8310 	mrs	r3, PRIMASK
 80054dc:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80054de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054e0:	2090      	movs	r0, #144	; 0x90
 80054e2:	183a      	adds	r2, r7, r0
 80054e4:	6013      	str	r3, [r2, #0]
 80054e6:	2301      	movs	r3, #1
 80054e8:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054ec:	f383 8810 	msr	PRIMASK, r3
}
 80054f0:	46c0      	nop			; (mov r8, r8)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	689a      	ldr	r2, [r3, #8]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2140      	movs	r1, #64	; 0x40
 80054fe:	438a      	bics	r2, r1
 8005500:	609a      	str	r2, [r3, #8]
 8005502:	183b      	adds	r3, r7, r0
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005508:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800550a:	f383 8810 	msr	PRIMASK, r3
}
 800550e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005514:	2b00      	cmp	r3, #0
 8005516:	d012      	beq.n	800553e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800551c:	4a14      	ldr	r2, [pc, #80]	; (8005570 <HAL_UART_IRQHandler+0x2a0>)
 800551e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005524:	0018      	movs	r0, r3
 8005526:	f7fd f859 	bl	80025dc <HAL_DMA_Abort_IT>
 800552a:	1e03      	subs	r3, r0, #0
 800552c:	d01a      	beq.n	8005564 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005532:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005538:	0018      	movs	r0, r3
 800553a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800553c:	e012      	b.n	8005564 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	0018      	movs	r0, r3
 8005542:	f000 f9a5 	bl	8005890 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005546:	e00d      	b.n	8005564 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	0018      	movs	r0, r3
 800554c:	f000 f9a0 	bl	8005890 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005550:	e008      	b.n	8005564 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	0018      	movs	r0, r3
 8005556:	f000 f99b 	bl	8005890 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2280      	movs	r2, #128	; 0x80
 800555e:	2100      	movs	r1, #0
 8005560:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005562:	e17f      	b.n	8005864 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005564:	46c0      	nop			; (mov r8, r8)
    return;
 8005566:	e17d      	b.n	8005864 <HAL_UART_IRQHandler+0x594>
 8005568:	0000080f 	.word	0x0000080f
 800556c:	04000120 	.word	0x04000120
 8005570:	080060b5 	.word	0x080060b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005578:	2b01      	cmp	r3, #1
 800557a:	d000      	beq.n	800557e <HAL_UART_IRQHandler+0x2ae>
 800557c:	e131      	b.n	80057e2 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800557e:	23a4      	movs	r3, #164	; 0xa4
 8005580:	18fb      	adds	r3, r7, r3
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2210      	movs	r2, #16
 8005586:	4013      	ands	r3, r2
 8005588:	d100      	bne.n	800558c <HAL_UART_IRQHandler+0x2bc>
 800558a:	e12a      	b.n	80057e2 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800558c:	23a0      	movs	r3, #160	; 0xa0
 800558e:	18fb      	adds	r3, r7, r3
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2210      	movs	r2, #16
 8005594:	4013      	ands	r3, r2
 8005596:	d100      	bne.n	800559a <HAL_UART_IRQHandler+0x2ca>
 8005598:	e123      	b.n	80057e2 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2210      	movs	r2, #16
 80055a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	2240      	movs	r2, #64	; 0x40
 80055aa:	4013      	ands	r3, r2
 80055ac:	2b40      	cmp	r3, #64	; 0x40
 80055ae:	d000      	beq.n	80055b2 <HAL_UART_IRQHandler+0x2e2>
 80055b0:	e09b      	b.n	80056ea <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	685a      	ldr	r2, [r3, #4]
 80055ba:	217e      	movs	r1, #126	; 0x7e
 80055bc:	187b      	adds	r3, r7, r1
 80055be:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80055c0:	187b      	adds	r3, r7, r1
 80055c2:	881b      	ldrh	r3, [r3, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d100      	bne.n	80055ca <HAL_UART_IRQHandler+0x2fa>
 80055c8:	e14e      	b.n	8005868 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2258      	movs	r2, #88	; 0x58
 80055ce:	5a9b      	ldrh	r3, [r3, r2]
 80055d0:	187a      	adds	r2, r7, r1
 80055d2:	8812      	ldrh	r2, [r2, #0]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d300      	bcc.n	80055da <HAL_UART_IRQHandler+0x30a>
 80055d8:	e146      	b.n	8005868 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	187a      	adds	r2, r7, r1
 80055de:	215a      	movs	r1, #90	; 0x5a
 80055e0:	8812      	ldrh	r2, [r2, #0]
 80055e2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	2b20      	cmp	r3, #32
 80055ec:	d06e      	beq.n	80056cc <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055ee:	f3ef 8310 	mrs	r3, PRIMASK
 80055f2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80055f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055f6:	67bb      	str	r3, [r7, #120]	; 0x78
 80055f8:	2301      	movs	r3, #1
 80055fa:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055fe:	f383 8810 	msr	PRIMASK, r3
}
 8005602:	46c0      	nop			; (mov r8, r8)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	499a      	ldr	r1, [pc, #616]	; (8005878 <HAL_UART_IRQHandler+0x5a8>)
 8005610:	400a      	ands	r2, r1
 8005612:	601a      	str	r2, [r3, #0]
 8005614:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005616:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561a:	f383 8810 	msr	PRIMASK, r3
}
 800561e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005620:	f3ef 8310 	mrs	r3, PRIMASK
 8005624:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005628:	677b      	str	r3, [r7, #116]	; 0x74
 800562a:	2301      	movs	r3, #1
 800562c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800562e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005630:	f383 8810 	msr	PRIMASK, r3
}
 8005634:	46c0      	nop			; (mov r8, r8)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	689a      	ldr	r2, [r3, #8]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2101      	movs	r1, #1
 8005642:	438a      	bics	r2, r1
 8005644:	609a      	str	r2, [r3, #8]
 8005646:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005648:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800564a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800564c:	f383 8810 	msr	PRIMASK, r3
}
 8005650:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005652:	f3ef 8310 	mrs	r3, PRIMASK
 8005656:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005658:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800565a:	673b      	str	r3, [r7, #112]	; 0x70
 800565c:	2301      	movs	r3, #1
 800565e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005660:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005662:	f383 8810 	msr	PRIMASK, r3
}
 8005666:	46c0      	nop			; (mov r8, r8)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	689a      	ldr	r2, [r3, #8]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2140      	movs	r1, #64	; 0x40
 8005674:	438a      	bics	r2, r1
 8005676:	609a      	str	r2, [r3, #8]
 8005678:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800567a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800567c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800567e:	f383 8810 	msr	PRIMASK, r3
}
 8005682:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2220      	movs	r2, #32
 8005688:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005690:	f3ef 8310 	mrs	r3, PRIMASK
 8005694:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005696:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005698:	66fb      	str	r3, [r7, #108]	; 0x6c
 800569a:	2301      	movs	r3, #1
 800569c:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800569e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056a0:	f383 8810 	msr	PRIMASK, r3
}
 80056a4:	46c0      	nop			; (mov r8, r8)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2110      	movs	r1, #16
 80056b2:	438a      	bics	r2, r1
 80056b4:	601a      	str	r2, [r3, #0]
 80056b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056bc:	f383 8810 	msr	PRIMASK, r3
}
 80056c0:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c6:	0018      	movs	r0, r3
 80056c8:	f7fc ff50 	bl	800256c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2258      	movs	r2, #88	; 0x58
 80056d0:	5a9a      	ldrh	r2, [r3, r2]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	215a      	movs	r1, #90	; 0x5a
 80056d6:	5a5b      	ldrh	r3, [r3, r1]
 80056d8:	b29b      	uxth	r3, r3
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	b29a      	uxth	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	0011      	movs	r1, r2
 80056e2:	0018      	movs	r0, r3
 80056e4:	f000 f8dc 	bl	80058a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80056e8:	e0be      	b.n	8005868 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2258      	movs	r2, #88	; 0x58
 80056ee:	5a99      	ldrh	r1, [r3, r2]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	225a      	movs	r2, #90	; 0x5a
 80056f4:	5a9b      	ldrh	r3, [r3, r2]
 80056f6:	b29a      	uxth	r2, r3
 80056f8:	208e      	movs	r0, #142	; 0x8e
 80056fa:	183b      	adds	r3, r7, r0
 80056fc:	1a8a      	subs	r2, r1, r2
 80056fe:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	225a      	movs	r2, #90	; 0x5a
 8005704:	5a9b      	ldrh	r3, [r3, r2]
 8005706:	b29b      	uxth	r3, r3
 8005708:	2b00      	cmp	r3, #0
 800570a:	d100      	bne.n	800570e <HAL_UART_IRQHandler+0x43e>
 800570c:	e0ae      	b.n	800586c <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 800570e:	183b      	adds	r3, r7, r0
 8005710:	881b      	ldrh	r3, [r3, #0]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d100      	bne.n	8005718 <HAL_UART_IRQHandler+0x448>
 8005716:	e0a9      	b.n	800586c <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005718:	f3ef 8310 	mrs	r3, PRIMASK
 800571c:	60fb      	str	r3, [r7, #12]
  return(result);
 800571e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005720:	2488      	movs	r4, #136	; 0x88
 8005722:	193a      	adds	r2, r7, r4
 8005724:	6013      	str	r3, [r2, #0]
 8005726:	2301      	movs	r3, #1
 8005728:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	f383 8810 	msr	PRIMASK, r3
}
 8005730:	46c0      	nop			; (mov r8, r8)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	494f      	ldr	r1, [pc, #316]	; (800587c <HAL_UART_IRQHandler+0x5ac>)
 800573e:	400a      	ands	r2, r1
 8005740:	601a      	str	r2, [r3, #0]
 8005742:	193b      	adds	r3, r7, r4
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	f383 8810 	msr	PRIMASK, r3
}
 800574e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005750:	f3ef 8310 	mrs	r3, PRIMASK
 8005754:	61bb      	str	r3, [r7, #24]
  return(result);
 8005756:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005758:	2484      	movs	r4, #132	; 0x84
 800575a:	193a      	adds	r2, r7, r4
 800575c:	6013      	str	r3, [r2, #0]
 800575e:	2301      	movs	r3, #1
 8005760:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	f383 8810 	msr	PRIMASK, r3
}
 8005768:	46c0      	nop			; (mov r8, r8)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	689a      	ldr	r2, [r3, #8]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2101      	movs	r1, #1
 8005776:	438a      	bics	r2, r1
 8005778:	609a      	str	r2, [r3, #8]
 800577a:	193b      	adds	r3, r7, r4
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005780:	6a3b      	ldr	r3, [r7, #32]
 8005782:	f383 8810 	msr	PRIMASK, r3
}
 8005786:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2220      	movs	r2, #32
 800578c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800579a:	f3ef 8310 	mrs	r3, PRIMASK
 800579e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80057a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057a2:	2480      	movs	r4, #128	; 0x80
 80057a4:	193a      	adds	r2, r7, r4
 80057a6:	6013      	str	r3, [r2, #0]
 80057a8:	2301      	movs	r3, #1
 80057aa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ae:	f383 8810 	msr	PRIMASK, r3
}
 80057b2:	46c0      	nop			; (mov r8, r8)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2110      	movs	r1, #16
 80057c0:	438a      	bics	r2, r1
 80057c2:	601a      	str	r2, [r3, #0]
 80057c4:	193b      	adds	r3, r7, r4
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057cc:	f383 8810 	msr	PRIMASK, r3
}
 80057d0:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057d2:	183b      	adds	r3, r7, r0
 80057d4:	881a      	ldrh	r2, [r3, #0]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	0011      	movs	r1, r2
 80057da:	0018      	movs	r0, r3
 80057dc:	f000 f860 	bl	80058a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80057e0:	e044      	b.n	800586c <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80057e2:	23a4      	movs	r3, #164	; 0xa4
 80057e4:	18fb      	adds	r3, r7, r3
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	2380      	movs	r3, #128	; 0x80
 80057ea:	035b      	lsls	r3, r3, #13
 80057ec:	4013      	ands	r3, r2
 80057ee:	d010      	beq.n	8005812 <HAL_UART_IRQHandler+0x542>
 80057f0:	239c      	movs	r3, #156	; 0x9c
 80057f2:	18fb      	adds	r3, r7, r3
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	2380      	movs	r3, #128	; 0x80
 80057f8:	03db      	lsls	r3, r3, #15
 80057fa:	4013      	ands	r3, r2
 80057fc:	d009      	beq.n	8005812 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2280      	movs	r2, #128	; 0x80
 8005804:	0352      	lsls	r2, r2, #13
 8005806:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	0018      	movs	r0, r3
 800580c:	f000 fdfc 	bl	8006408 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005810:	e02f      	b.n	8005872 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005812:	23a4      	movs	r3, #164	; 0xa4
 8005814:	18fb      	adds	r3, r7, r3
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2280      	movs	r2, #128	; 0x80
 800581a:	4013      	ands	r3, r2
 800581c:	d00f      	beq.n	800583e <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800581e:	23a0      	movs	r3, #160	; 0xa0
 8005820:	18fb      	adds	r3, r7, r3
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2280      	movs	r2, #128	; 0x80
 8005826:	4013      	ands	r3, r2
 8005828:	d009      	beq.n	800583e <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800582e:	2b00      	cmp	r3, #0
 8005830:	d01e      	beq.n	8005870 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	0010      	movs	r0, r2
 800583a:	4798      	blx	r3
    }
    return;
 800583c:	e018      	b.n	8005870 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800583e:	23a4      	movs	r3, #164	; 0xa4
 8005840:	18fb      	adds	r3, r7, r3
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2240      	movs	r2, #64	; 0x40
 8005846:	4013      	ands	r3, r2
 8005848:	d013      	beq.n	8005872 <HAL_UART_IRQHandler+0x5a2>
 800584a:	23a0      	movs	r3, #160	; 0xa0
 800584c:	18fb      	adds	r3, r7, r3
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2240      	movs	r2, #64	; 0x40
 8005852:	4013      	ands	r3, r2
 8005854:	d00d      	beq.n	8005872 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	0018      	movs	r0, r3
 800585a:	f000 fc42 	bl	80060e2 <UART_EndTransmit_IT>
    return;
 800585e:	e008      	b.n	8005872 <HAL_UART_IRQHandler+0x5a2>
      return;
 8005860:	46c0      	nop			; (mov r8, r8)
 8005862:	e006      	b.n	8005872 <HAL_UART_IRQHandler+0x5a2>
    return;
 8005864:	46c0      	nop			; (mov r8, r8)
 8005866:	e004      	b.n	8005872 <HAL_UART_IRQHandler+0x5a2>
      return;
 8005868:	46c0      	nop			; (mov r8, r8)
 800586a:	e002      	b.n	8005872 <HAL_UART_IRQHandler+0x5a2>
      return;
 800586c:	46c0      	nop			; (mov r8, r8)
 800586e:	e000      	b.n	8005872 <HAL_UART_IRQHandler+0x5a2>
    return;
 8005870:	46c0      	nop			; (mov r8, r8)
  }

}
 8005872:	46bd      	mov	sp, r7
 8005874:	b02b      	add	sp, #172	; 0xac
 8005876:	bd90      	pop	{r4, r7, pc}
 8005878:	fffffeff 	.word	0xfffffeff
 800587c:	fffffedf 	.word	0xfffffedf

08005880 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005888:	46c0      	nop			; (mov r8, r8)
 800588a:	46bd      	mov	sp, r7
 800588c:	b002      	add	sp, #8
 800588e:	bd80      	pop	{r7, pc}

08005890 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005898:	46c0      	nop			; (mov r8, r8)
 800589a:	46bd      	mov	sp, r7
 800589c:	b002      	add	sp, #8
 800589e:	bd80      	pop	{r7, pc}

080058a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	000a      	movs	r2, r1
 80058aa:	1cbb      	adds	r3, r7, #2
 80058ac:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058ae:	46c0      	nop			; (mov r8, r8)
 80058b0:	46bd      	mov	sp, r7
 80058b2:	b002      	add	sp, #8
 80058b4:	bd80      	pop	{r7, pc}
	...

080058b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b088      	sub	sp, #32
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058c0:	231e      	movs	r3, #30
 80058c2:	18fb      	adds	r3, r7, r3
 80058c4:	2200      	movs	r2, #0
 80058c6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	689a      	ldr	r2, [r3, #8]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	431a      	orrs	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	431a      	orrs	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	69db      	ldr	r3, [r3, #28]
 80058dc:	4313      	orrs	r3, r2
 80058de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a8d      	ldr	r2, [pc, #564]	; (8005b1c <UART_SetConfig+0x264>)
 80058e8:	4013      	ands	r3, r2
 80058ea:	0019      	movs	r1, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	430a      	orrs	r2, r1
 80058f4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	4a88      	ldr	r2, [pc, #544]	; (8005b20 <UART_SetConfig+0x268>)
 80058fe:	4013      	ands	r3, r2
 8005900:	0019      	movs	r1, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	68da      	ldr	r2, [r3, #12]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	430a      	orrs	r2, r1
 800590c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a1b      	ldr	r3, [r3, #32]
 8005918:	697a      	ldr	r2, [r7, #20]
 800591a:	4313      	orrs	r3, r2
 800591c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	4a7f      	ldr	r2, [pc, #508]	; (8005b24 <UART_SetConfig+0x26c>)
 8005926:	4013      	ands	r3, r2
 8005928:	0019      	movs	r1, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	697a      	ldr	r2, [r7, #20]
 8005930:	430a      	orrs	r2, r1
 8005932:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a7b      	ldr	r2, [pc, #492]	; (8005b28 <UART_SetConfig+0x270>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d127      	bne.n	800598e <UART_SetConfig+0xd6>
 800593e:	4b7b      	ldr	r3, [pc, #492]	; (8005b2c <UART_SetConfig+0x274>)
 8005940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005942:	2203      	movs	r2, #3
 8005944:	4013      	ands	r3, r2
 8005946:	2b03      	cmp	r3, #3
 8005948:	d00d      	beq.n	8005966 <UART_SetConfig+0xae>
 800594a:	d81b      	bhi.n	8005984 <UART_SetConfig+0xcc>
 800594c:	2b02      	cmp	r3, #2
 800594e:	d014      	beq.n	800597a <UART_SetConfig+0xc2>
 8005950:	d818      	bhi.n	8005984 <UART_SetConfig+0xcc>
 8005952:	2b00      	cmp	r3, #0
 8005954:	d002      	beq.n	800595c <UART_SetConfig+0xa4>
 8005956:	2b01      	cmp	r3, #1
 8005958:	d00a      	beq.n	8005970 <UART_SetConfig+0xb8>
 800595a:	e013      	b.n	8005984 <UART_SetConfig+0xcc>
 800595c:	231f      	movs	r3, #31
 800595e:	18fb      	adds	r3, r7, r3
 8005960:	2200      	movs	r2, #0
 8005962:	701a      	strb	r2, [r3, #0]
 8005964:	e021      	b.n	80059aa <UART_SetConfig+0xf2>
 8005966:	231f      	movs	r3, #31
 8005968:	18fb      	adds	r3, r7, r3
 800596a:	2202      	movs	r2, #2
 800596c:	701a      	strb	r2, [r3, #0]
 800596e:	e01c      	b.n	80059aa <UART_SetConfig+0xf2>
 8005970:	231f      	movs	r3, #31
 8005972:	18fb      	adds	r3, r7, r3
 8005974:	2204      	movs	r2, #4
 8005976:	701a      	strb	r2, [r3, #0]
 8005978:	e017      	b.n	80059aa <UART_SetConfig+0xf2>
 800597a:	231f      	movs	r3, #31
 800597c:	18fb      	adds	r3, r7, r3
 800597e:	2208      	movs	r2, #8
 8005980:	701a      	strb	r2, [r3, #0]
 8005982:	e012      	b.n	80059aa <UART_SetConfig+0xf2>
 8005984:	231f      	movs	r3, #31
 8005986:	18fb      	adds	r3, r7, r3
 8005988:	2210      	movs	r2, #16
 800598a:	701a      	strb	r2, [r3, #0]
 800598c:	e00d      	b.n	80059aa <UART_SetConfig+0xf2>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a67      	ldr	r2, [pc, #412]	; (8005b30 <UART_SetConfig+0x278>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d104      	bne.n	80059a2 <UART_SetConfig+0xea>
 8005998:	231f      	movs	r3, #31
 800599a:	18fb      	adds	r3, r7, r3
 800599c:	2200      	movs	r2, #0
 800599e:	701a      	strb	r2, [r3, #0]
 80059a0:	e003      	b.n	80059aa <UART_SetConfig+0xf2>
 80059a2:	231f      	movs	r3, #31
 80059a4:	18fb      	adds	r3, r7, r3
 80059a6:	2210      	movs	r2, #16
 80059a8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	69da      	ldr	r2, [r3, #28]
 80059ae:	2380      	movs	r3, #128	; 0x80
 80059b0:	021b      	lsls	r3, r3, #8
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d15d      	bne.n	8005a72 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 80059b6:	231f      	movs	r3, #31
 80059b8:	18fb      	adds	r3, r7, r3
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	2b08      	cmp	r3, #8
 80059be:	d015      	beq.n	80059ec <UART_SetConfig+0x134>
 80059c0:	dc18      	bgt.n	80059f4 <UART_SetConfig+0x13c>
 80059c2:	2b04      	cmp	r3, #4
 80059c4:	d00d      	beq.n	80059e2 <UART_SetConfig+0x12a>
 80059c6:	dc15      	bgt.n	80059f4 <UART_SetConfig+0x13c>
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d002      	beq.n	80059d2 <UART_SetConfig+0x11a>
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d005      	beq.n	80059dc <UART_SetConfig+0x124>
 80059d0:	e010      	b.n	80059f4 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059d2:	f7fd fe95 	bl	8003700 <HAL_RCC_GetPCLK1Freq>
 80059d6:	0003      	movs	r3, r0
 80059d8:	61bb      	str	r3, [r7, #24]
        break;
 80059da:	e012      	b.n	8005a02 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059dc:	4b55      	ldr	r3, [pc, #340]	; (8005b34 <UART_SetConfig+0x27c>)
 80059de:	61bb      	str	r3, [r7, #24]
        break;
 80059e0:	e00f      	b.n	8005a02 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059e2:	f7fd fe1f 	bl	8003624 <HAL_RCC_GetSysClockFreq>
 80059e6:	0003      	movs	r3, r0
 80059e8:	61bb      	str	r3, [r7, #24]
        break;
 80059ea:	e00a      	b.n	8005a02 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059ec:	2380      	movs	r3, #128	; 0x80
 80059ee:	021b      	lsls	r3, r3, #8
 80059f0:	61bb      	str	r3, [r7, #24]
        break;
 80059f2:	e006      	b.n	8005a02 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80059f4:	2300      	movs	r3, #0
 80059f6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80059f8:	231e      	movs	r3, #30
 80059fa:	18fb      	adds	r3, r7, r3
 80059fc:	2201      	movs	r2, #1
 80059fe:	701a      	strb	r2, [r3, #0]
        break;
 8005a00:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d100      	bne.n	8005a0a <UART_SetConfig+0x152>
 8005a08:	e07b      	b.n	8005b02 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	005a      	lsls	r2, r3, #1
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	085b      	lsrs	r3, r3, #1
 8005a14:	18d2      	adds	r2, r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	0019      	movs	r1, r3
 8005a1c:	0010      	movs	r0, r2
 8005a1e:	f7fa fb73 	bl	8000108 <__udivsi3>
 8005a22:	0003      	movs	r3, r0
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	2b0f      	cmp	r3, #15
 8005a2c:	d91c      	bls.n	8005a68 <UART_SetConfig+0x1b0>
 8005a2e:	693a      	ldr	r2, [r7, #16]
 8005a30:	2380      	movs	r3, #128	; 0x80
 8005a32:	025b      	lsls	r3, r3, #9
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d217      	bcs.n	8005a68 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	b29a      	uxth	r2, r3
 8005a3c:	200e      	movs	r0, #14
 8005a3e:	183b      	adds	r3, r7, r0
 8005a40:	210f      	movs	r1, #15
 8005a42:	438a      	bics	r2, r1
 8005a44:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	085b      	lsrs	r3, r3, #1
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	2207      	movs	r2, #7
 8005a4e:	4013      	ands	r3, r2
 8005a50:	b299      	uxth	r1, r3
 8005a52:	183b      	adds	r3, r7, r0
 8005a54:	183a      	adds	r2, r7, r0
 8005a56:	8812      	ldrh	r2, [r2, #0]
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	183a      	adds	r2, r7, r0
 8005a62:	8812      	ldrh	r2, [r2, #0]
 8005a64:	60da      	str	r2, [r3, #12]
 8005a66:	e04c      	b.n	8005b02 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8005a68:	231e      	movs	r3, #30
 8005a6a:	18fb      	adds	r3, r7, r3
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	701a      	strb	r2, [r3, #0]
 8005a70:	e047      	b.n	8005b02 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a72:	231f      	movs	r3, #31
 8005a74:	18fb      	adds	r3, r7, r3
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	2b08      	cmp	r3, #8
 8005a7a:	d015      	beq.n	8005aa8 <UART_SetConfig+0x1f0>
 8005a7c:	dc18      	bgt.n	8005ab0 <UART_SetConfig+0x1f8>
 8005a7e:	2b04      	cmp	r3, #4
 8005a80:	d00d      	beq.n	8005a9e <UART_SetConfig+0x1e6>
 8005a82:	dc15      	bgt.n	8005ab0 <UART_SetConfig+0x1f8>
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d002      	beq.n	8005a8e <UART_SetConfig+0x1d6>
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d005      	beq.n	8005a98 <UART_SetConfig+0x1e0>
 8005a8c:	e010      	b.n	8005ab0 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a8e:	f7fd fe37 	bl	8003700 <HAL_RCC_GetPCLK1Freq>
 8005a92:	0003      	movs	r3, r0
 8005a94:	61bb      	str	r3, [r7, #24]
        break;
 8005a96:	e012      	b.n	8005abe <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a98:	4b26      	ldr	r3, [pc, #152]	; (8005b34 <UART_SetConfig+0x27c>)
 8005a9a:	61bb      	str	r3, [r7, #24]
        break;
 8005a9c:	e00f      	b.n	8005abe <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a9e:	f7fd fdc1 	bl	8003624 <HAL_RCC_GetSysClockFreq>
 8005aa2:	0003      	movs	r3, r0
 8005aa4:	61bb      	str	r3, [r7, #24]
        break;
 8005aa6:	e00a      	b.n	8005abe <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005aa8:	2380      	movs	r3, #128	; 0x80
 8005aaa:	021b      	lsls	r3, r3, #8
 8005aac:	61bb      	str	r3, [r7, #24]
        break;
 8005aae:	e006      	b.n	8005abe <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005ab4:	231e      	movs	r3, #30
 8005ab6:	18fb      	adds	r3, r7, r3
 8005ab8:	2201      	movs	r2, #1
 8005aba:	701a      	strb	r2, [r3, #0]
        break;
 8005abc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d01e      	beq.n	8005b02 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	085a      	lsrs	r2, r3, #1
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	18d2      	adds	r2, r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	0019      	movs	r1, r3
 8005ad4:	0010      	movs	r0, r2
 8005ad6:	f7fa fb17 	bl	8000108 <__udivsi3>
 8005ada:	0003      	movs	r3, r0
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	2b0f      	cmp	r3, #15
 8005ae4:	d909      	bls.n	8005afa <UART_SetConfig+0x242>
 8005ae6:	693a      	ldr	r2, [r7, #16]
 8005ae8:	2380      	movs	r3, #128	; 0x80
 8005aea:	025b      	lsls	r3, r3, #9
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d204      	bcs.n	8005afa <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	60da      	str	r2, [r3, #12]
 8005af8:	e003      	b.n	8005b02 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8005afa:	231e      	movs	r3, #30
 8005afc:	18fb      	adds	r3, r7, r3
 8005afe:	2201      	movs	r2, #1
 8005b00:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005b0e:	231e      	movs	r3, #30
 8005b10:	18fb      	adds	r3, r7, r3
 8005b12:	781b      	ldrb	r3, [r3, #0]
}
 8005b14:	0018      	movs	r0, r3
 8005b16:	46bd      	mov	sp, r7
 8005b18:	b008      	add	sp, #32
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	ffff69f3 	.word	0xffff69f3
 8005b20:	ffffcfff 	.word	0xffffcfff
 8005b24:	fffff4ff 	.word	0xfffff4ff
 8005b28:	40013800 	.word	0x40013800
 8005b2c:	40021000 	.word	0x40021000
 8005b30:	40004400 	.word	0x40004400
 8005b34:	007a1200 	.word	0x007a1200

08005b38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b44:	2201      	movs	r2, #1
 8005b46:	4013      	ands	r3, r2
 8005b48:	d00b      	beq.n	8005b62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	4a4a      	ldr	r2, [pc, #296]	; (8005c7c <UART_AdvFeatureConfig+0x144>)
 8005b52:	4013      	ands	r3, r2
 8005b54:	0019      	movs	r1, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	430a      	orrs	r2, r1
 8005b60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b66:	2202      	movs	r2, #2
 8005b68:	4013      	ands	r3, r2
 8005b6a:	d00b      	beq.n	8005b84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	4a43      	ldr	r2, [pc, #268]	; (8005c80 <UART_AdvFeatureConfig+0x148>)
 8005b74:	4013      	ands	r3, r2
 8005b76:	0019      	movs	r1, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	430a      	orrs	r2, r1
 8005b82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b88:	2204      	movs	r2, #4
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	d00b      	beq.n	8005ba6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	4a3b      	ldr	r2, [pc, #236]	; (8005c84 <UART_AdvFeatureConfig+0x14c>)
 8005b96:	4013      	ands	r3, r2
 8005b98:	0019      	movs	r1, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	430a      	orrs	r2, r1
 8005ba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005baa:	2208      	movs	r2, #8
 8005bac:	4013      	ands	r3, r2
 8005bae:	d00b      	beq.n	8005bc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	4a34      	ldr	r2, [pc, #208]	; (8005c88 <UART_AdvFeatureConfig+0x150>)
 8005bb8:	4013      	ands	r3, r2
 8005bba:	0019      	movs	r1, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	430a      	orrs	r2, r1
 8005bc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bcc:	2210      	movs	r2, #16
 8005bce:	4013      	ands	r3, r2
 8005bd0:	d00b      	beq.n	8005bea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	4a2c      	ldr	r2, [pc, #176]	; (8005c8c <UART_AdvFeatureConfig+0x154>)
 8005bda:	4013      	ands	r3, r2
 8005bdc:	0019      	movs	r1, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	430a      	orrs	r2, r1
 8005be8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bee:	2220      	movs	r2, #32
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	d00b      	beq.n	8005c0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	4a25      	ldr	r2, [pc, #148]	; (8005c90 <UART_AdvFeatureConfig+0x158>)
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	0019      	movs	r1, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	430a      	orrs	r2, r1
 8005c0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c10:	2240      	movs	r2, #64	; 0x40
 8005c12:	4013      	ands	r3, r2
 8005c14:	d01d      	beq.n	8005c52 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	4a1d      	ldr	r2, [pc, #116]	; (8005c94 <UART_AdvFeatureConfig+0x15c>)
 8005c1e:	4013      	ands	r3, r2
 8005c20:	0019      	movs	r1, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	430a      	orrs	r2, r1
 8005c2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c32:	2380      	movs	r3, #128	; 0x80
 8005c34:	035b      	lsls	r3, r3, #13
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d10b      	bne.n	8005c52 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	4a15      	ldr	r2, [pc, #84]	; (8005c98 <UART_AdvFeatureConfig+0x160>)
 8005c42:	4013      	ands	r3, r2
 8005c44:	0019      	movs	r1, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c56:	2280      	movs	r2, #128	; 0x80
 8005c58:	4013      	ands	r3, r2
 8005c5a:	d00b      	beq.n	8005c74 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	4a0e      	ldr	r2, [pc, #56]	; (8005c9c <UART_AdvFeatureConfig+0x164>)
 8005c64:	4013      	ands	r3, r2
 8005c66:	0019      	movs	r1, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	430a      	orrs	r2, r1
 8005c72:	605a      	str	r2, [r3, #4]
  }
}
 8005c74:	46c0      	nop			; (mov r8, r8)
 8005c76:	46bd      	mov	sp, r7
 8005c78:	b002      	add	sp, #8
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	fffdffff 	.word	0xfffdffff
 8005c80:	fffeffff 	.word	0xfffeffff
 8005c84:	fffbffff 	.word	0xfffbffff
 8005c88:	ffff7fff 	.word	0xffff7fff
 8005c8c:	ffffefff 	.word	0xffffefff
 8005c90:	ffffdfff 	.word	0xffffdfff
 8005c94:	ffefffff 	.word	0xffefffff
 8005c98:	ff9fffff 	.word	0xff9fffff
 8005c9c:	fff7ffff 	.word	0xfff7ffff

08005ca0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af02      	add	r7, sp, #8
 8005ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2280      	movs	r2, #128	; 0x80
 8005cac:	2100      	movs	r1, #0
 8005cae:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005cb0:	f7fb fe2e 	bl	8001910 <HAL_GetTick>
 8005cb4:	0003      	movs	r3, r0
 8005cb6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2208      	movs	r2, #8
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	2b08      	cmp	r3, #8
 8005cc4:	d10c      	bne.n	8005ce0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2280      	movs	r2, #128	; 0x80
 8005cca:	0391      	lsls	r1, r2, #14
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	4a17      	ldr	r2, [pc, #92]	; (8005d2c <UART_CheckIdleState+0x8c>)
 8005cd0:	9200      	str	r2, [sp, #0]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f000 f82c 	bl	8005d30 <UART_WaitOnFlagUntilTimeout>
 8005cd8:	1e03      	subs	r3, r0, #0
 8005cda:	d001      	beq.n	8005ce0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e021      	b.n	8005d24 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2204      	movs	r2, #4
 8005ce8:	4013      	ands	r3, r2
 8005cea:	2b04      	cmp	r3, #4
 8005cec:	d10c      	bne.n	8005d08 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2280      	movs	r2, #128	; 0x80
 8005cf2:	03d1      	lsls	r1, r2, #15
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	4a0d      	ldr	r2, [pc, #52]	; (8005d2c <UART_CheckIdleState+0x8c>)
 8005cf8:	9200      	str	r2, [sp, #0]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f000 f818 	bl	8005d30 <UART_WaitOnFlagUntilTimeout>
 8005d00:	1e03      	subs	r3, r0, #0
 8005d02:	d001      	beq.n	8005d08 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d04:	2303      	movs	r3, #3
 8005d06:	e00d      	b.n	8005d24 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2220      	movs	r2, #32
 8005d0c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2220      	movs	r2, #32
 8005d12:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2274      	movs	r2, #116	; 0x74
 8005d1e:	2100      	movs	r1, #0
 8005d20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	0018      	movs	r0, r3
 8005d26:	46bd      	mov	sp, r7
 8005d28:	b004      	add	sp, #16
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	01ffffff 	.word	0x01ffffff

08005d30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b094      	sub	sp, #80	; 0x50
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	603b      	str	r3, [r7, #0]
 8005d3c:	1dfb      	adds	r3, r7, #7
 8005d3e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d40:	e0a3      	b.n	8005e8a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d44:	3301      	adds	r3, #1
 8005d46:	d100      	bne.n	8005d4a <UART_WaitOnFlagUntilTimeout+0x1a>
 8005d48:	e09f      	b.n	8005e8a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d4a:	f7fb fde1 	bl	8001910 <HAL_GetTick>
 8005d4e:	0002      	movs	r2, r0
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d302      	bcc.n	8005d60 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d13d      	bne.n	8005ddc <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d60:	f3ef 8310 	mrs	r3, PRIMASK
 8005d64:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d68:	647b      	str	r3, [r7, #68]	; 0x44
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d70:	f383 8810 	msr	PRIMASK, r3
}
 8005d74:	46c0      	nop			; (mov r8, r8)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	494c      	ldr	r1, [pc, #304]	; (8005eb4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005d82:	400a      	ands	r2, r1
 8005d84:	601a      	str	r2, [r3, #0]
 8005d86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d88:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8c:	f383 8810 	msr	PRIMASK, r3
}
 8005d90:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d92:	f3ef 8310 	mrs	r3, PRIMASK
 8005d96:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d9a:	643b      	str	r3, [r7, #64]	; 0x40
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da2:	f383 8810 	msr	PRIMASK, r3
}
 8005da6:	46c0      	nop			; (mov r8, r8)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	689a      	ldr	r2, [r3, #8]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2101      	movs	r1, #1
 8005db4:	438a      	bics	r2, r1
 8005db6:	609a      	str	r2, [r3, #8]
 8005db8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dba:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dbe:	f383 8810 	msr	PRIMASK, r3
}
 8005dc2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2220      	movs	r2, #32
 8005dc8:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2220      	movs	r2, #32
 8005dce:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2274      	movs	r2, #116	; 0x74
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e067      	b.n	8005eac <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2204      	movs	r2, #4
 8005de4:	4013      	ands	r3, r2
 8005de6:	d050      	beq.n	8005e8a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	69da      	ldr	r2, [r3, #28]
 8005dee:	2380      	movs	r3, #128	; 0x80
 8005df0:	011b      	lsls	r3, r3, #4
 8005df2:	401a      	ands	r2, r3
 8005df4:	2380      	movs	r3, #128	; 0x80
 8005df6:	011b      	lsls	r3, r3, #4
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d146      	bne.n	8005e8a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2280      	movs	r2, #128	; 0x80
 8005e02:	0112      	lsls	r2, r2, #4
 8005e04:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e06:	f3ef 8310 	mrs	r3, PRIMASK
 8005e0a:	613b      	str	r3, [r7, #16]
  return(result);
 8005e0c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e10:	2301      	movs	r3, #1
 8005e12:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	f383 8810 	msr	PRIMASK, r3
}
 8005e1a:	46c0      	nop			; (mov r8, r8)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4923      	ldr	r1, [pc, #140]	; (8005eb4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005e28:	400a      	ands	r2, r1
 8005e2a:	601a      	str	r2, [r3, #0]
 8005e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e2e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	f383 8810 	msr	PRIMASK, r3
}
 8005e36:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e38:	f3ef 8310 	mrs	r3, PRIMASK
 8005e3c:	61fb      	str	r3, [r7, #28]
  return(result);
 8005e3e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e40:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e42:	2301      	movs	r3, #1
 8005e44:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e46:	6a3b      	ldr	r3, [r7, #32]
 8005e48:	f383 8810 	msr	PRIMASK, r3
}
 8005e4c:	46c0      	nop			; (mov r8, r8)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	689a      	ldr	r2, [r3, #8]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2101      	movs	r1, #1
 8005e5a:	438a      	bics	r2, r1
 8005e5c:	609a      	str	r2, [r3, #8]
 8005e5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e60:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e64:	f383 8810 	msr	PRIMASK, r3
}
 8005e68:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2220      	movs	r2, #32
 8005e6e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2220      	movs	r2, #32
 8005e74:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2280      	movs	r2, #128	; 0x80
 8005e7a:	2120      	movs	r1, #32
 8005e7c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2274      	movs	r2, #116	; 0x74
 8005e82:	2100      	movs	r1, #0
 8005e84:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e010      	b.n	8005eac <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	69db      	ldr	r3, [r3, #28]
 8005e90:	68ba      	ldr	r2, [r7, #8]
 8005e92:	4013      	ands	r3, r2
 8005e94:	68ba      	ldr	r2, [r7, #8]
 8005e96:	1ad3      	subs	r3, r2, r3
 8005e98:	425a      	negs	r2, r3
 8005e9a:	4153      	adcs	r3, r2
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	001a      	movs	r2, r3
 8005ea0:	1dfb      	adds	r3, r7, #7
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d100      	bne.n	8005eaa <UART_WaitOnFlagUntilTimeout+0x17a>
 8005ea8:	e74b      	b.n	8005d42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	0018      	movs	r0, r3
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	b014      	add	sp, #80	; 0x50
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	fffffe5f 	.word	0xfffffe5f

08005eb8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b08c      	sub	sp, #48	; 0x30
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	1dbb      	adds	r3, r7, #6
 8005ec4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	68ba      	ldr	r2, [r7, #8]
 8005eca:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	1dba      	adds	r2, r7, #6
 8005ed0:	2158      	movs	r1, #88	; 0x58
 8005ed2:	8812      	ldrh	r2, [r2, #0]
 8005ed4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	1dba      	adds	r2, r7, #6
 8005eda:	215a      	movs	r1, #90	; 0x5a
 8005edc:	8812      	ldrh	r2, [r2, #0]
 8005ede:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	689a      	ldr	r2, [r3, #8]
 8005eea:	2380      	movs	r3, #128	; 0x80
 8005eec:	015b      	lsls	r3, r3, #5
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d10d      	bne.n	8005f0e <UART_Start_Receive_IT+0x56>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d104      	bne.n	8005f04 <UART_Start_Receive_IT+0x4c>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	225c      	movs	r2, #92	; 0x5c
 8005efe:	4939      	ldr	r1, [pc, #228]	; (8005fe4 <UART_Start_Receive_IT+0x12c>)
 8005f00:	5299      	strh	r1, [r3, r2]
 8005f02:	e01a      	b.n	8005f3a <UART_Start_Receive_IT+0x82>
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	225c      	movs	r2, #92	; 0x5c
 8005f08:	21ff      	movs	r1, #255	; 0xff
 8005f0a:	5299      	strh	r1, [r3, r2]
 8005f0c:	e015      	b.n	8005f3a <UART_Start_Receive_IT+0x82>
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d10d      	bne.n	8005f32 <UART_Start_Receive_IT+0x7a>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d104      	bne.n	8005f28 <UART_Start_Receive_IT+0x70>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	225c      	movs	r2, #92	; 0x5c
 8005f22:	21ff      	movs	r1, #255	; 0xff
 8005f24:	5299      	strh	r1, [r3, r2]
 8005f26:	e008      	b.n	8005f3a <UART_Start_Receive_IT+0x82>
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	225c      	movs	r2, #92	; 0x5c
 8005f2c:	217f      	movs	r1, #127	; 0x7f
 8005f2e:	5299      	strh	r1, [r3, r2]
 8005f30:	e003      	b.n	8005f3a <UART_Start_Receive_IT+0x82>
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	225c      	movs	r2, #92	; 0x5c
 8005f36:	2100      	movs	r1, #0
 8005f38:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2280      	movs	r2, #128	; 0x80
 8005f3e:	2100      	movs	r1, #0
 8005f40:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2222      	movs	r2, #34	; 0x22
 8005f46:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f48:	f3ef 8310 	mrs	r3, PRIMASK
 8005f4c:	61fb      	str	r3, [r7, #28]
  return(result);
 8005f4e:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f52:	2301      	movs	r3, #1
 8005f54:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f56:	6a3b      	ldr	r3, [r7, #32]
 8005f58:	f383 8810 	msr	PRIMASK, r3
}
 8005f5c:	46c0      	nop			; (mov r8, r8)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	689a      	ldr	r2, [r3, #8]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2101      	movs	r1, #1
 8005f6a:	430a      	orrs	r2, r1
 8005f6c:	609a      	str	r2, [r3, #8]
 8005f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f70:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f74:	f383 8810 	msr	PRIMASK, r3
}
 8005f78:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	689a      	ldr	r2, [r3, #8]
 8005f7e:	2380      	movs	r3, #128	; 0x80
 8005f80:	015b      	lsls	r3, r3, #5
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d107      	bne.n	8005f96 <UART_Start_Receive_IT+0xde>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d103      	bne.n	8005f96 <UART_Start_Receive_IT+0xde>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	4a15      	ldr	r2, [pc, #84]	; (8005fe8 <UART_Start_Receive_IT+0x130>)
 8005f92:	665a      	str	r2, [r3, #100]	; 0x64
 8005f94:	e002      	b.n	8005f9c <UART_Start_Receive_IT+0xe4>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	4a14      	ldr	r2, [pc, #80]	; (8005fec <UART_Start_Receive_IT+0x134>)
 8005f9a:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2274      	movs	r2, #116	; 0x74
 8005fa0:	2100      	movs	r1, #0
 8005fa2:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fa4:	f3ef 8310 	mrs	r3, PRIMASK
 8005fa8:	613b      	str	r3, [r7, #16]
  return(result);
 8005faa:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005fac:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fae:	2301      	movs	r3, #1
 8005fb0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	f383 8810 	msr	PRIMASK, r3
}
 8005fb8:	46c0      	nop			; (mov r8, r8)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2190      	movs	r1, #144	; 0x90
 8005fc6:	0049      	lsls	r1, r1, #1
 8005fc8:	430a      	orrs	r2, r1
 8005fca:	601a      	str	r2, [r3, #0]
 8005fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fce:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	f383 8810 	msr	PRIMASK, r3
}
 8005fd6:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	0018      	movs	r0, r3
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	b00c      	add	sp, #48	; 0x30
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	46c0      	nop			; (mov r8, r8)
 8005fe4:	000001ff 	.word	0x000001ff
 8005fe8:	080062a1 	.word	0x080062a1
 8005fec:	08006139 	.word	0x08006139

08005ff0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b08e      	sub	sp, #56	; 0x38
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ff8:	f3ef 8310 	mrs	r3, PRIMASK
 8005ffc:	617b      	str	r3, [r7, #20]
  return(result);
 8005ffe:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006000:	637b      	str	r3, [r7, #52]	; 0x34
 8006002:	2301      	movs	r3, #1
 8006004:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	f383 8810 	msr	PRIMASK, r3
}
 800600c:	46c0      	nop			; (mov r8, r8)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4925      	ldr	r1, [pc, #148]	; (80060b0 <UART_EndRxTransfer+0xc0>)
 800601a:	400a      	ands	r2, r1
 800601c:	601a      	str	r2, [r3, #0]
 800601e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006020:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	f383 8810 	msr	PRIMASK, r3
}
 8006028:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800602a:	f3ef 8310 	mrs	r3, PRIMASK
 800602e:	623b      	str	r3, [r7, #32]
  return(result);
 8006030:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006032:	633b      	str	r3, [r7, #48]	; 0x30
 8006034:	2301      	movs	r3, #1
 8006036:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603a:	f383 8810 	msr	PRIMASK, r3
}
 800603e:	46c0      	nop			; (mov r8, r8)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	689a      	ldr	r2, [r3, #8]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2101      	movs	r1, #1
 800604c:	438a      	bics	r2, r1
 800604e:	609a      	str	r2, [r3, #8]
 8006050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006052:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006056:	f383 8810 	msr	PRIMASK, r3
}
 800605a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006060:	2b01      	cmp	r3, #1
 8006062:	d118      	bne.n	8006096 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006064:	f3ef 8310 	mrs	r3, PRIMASK
 8006068:	60bb      	str	r3, [r7, #8]
  return(result);
 800606a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800606c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800606e:	2301      	movs	r3, #1
 8006070:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f383 8810 	msr	PRIMASK, r3
}
 8006078:	46c0      	nop			; (mov r8, r8)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2110      	movs	r1, #16
 8006086:	438a      	bics	r2, r1
 8006088:	601a      	str	r2, [r3, #0]
 800608a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800608c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	f383 8810 	msr	PRIMASK, r3
}
 8006094:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2220      	movs	r2, #32
 800609a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	665a      	str	r2, [r3, #100]	; 0x64
}
 80060a8:	46c0      	nop			; (mov r8, r8)
 80060aa:	46bd      	mov	sp, r7
 80060ac:	b00e      	add	sp, #56	; 0x38
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	fffffedf 	.word	0xfffffedf

080060b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	225a      	movs	r2, #90	; 0x5a
 80060c6:	2100      	movs	r1, #0
 80060c8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2252      	movs	r2, #82	; 0x52
 80060ce:	2100      	movs	r1, #0
 80060d0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	0018      	movs	r0, r3
 80060d6:	f7ff fbdb 	bl	8005890 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060da:	46c0      	nop			; (mov r8, r8)
 80060dc:	46bd      	mov	sp, r7
 80060de:	b004      	add	sp, #16
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80060e2:	b580      	push	{r7, lr}
 80060e4:	b086      	sub	sp, #24
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060ea:	f3ef 8310 	mrs	r3, PRIMASK
 80060ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80060f0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80060f2:	617b      	str	r3, [r7, #20]
 80060f4:	2301      	movs	r3, #1
 80060f6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f383 8810 	msr	PRIMASK, r3
}
 80060fe:	46c0      	nop			; (mov r8, r8)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2140      	movs	r1, #64	; 0x40
 800610c:	438a      	bics	r2, r1
 800610e:	601a      	str	r2, [r3, #0]
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	f383 8810 	msr	PRIMASK, r3
}
 800611a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2220      	movs	r2, #32
 8006120:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	0018      	movs	r0, r3
 800612c:	f7ff fba8 	bl	8005880 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006130:	46c0      	nop			; (mov r8, r8)
 8006132:	46bd      	mov	sp, r7
 8006134:	b006      	add	sp, #24
 8006136:	bd80      	pop	{r7, pc}

08006138 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b090      	sub	sp, #64	; 0x40
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006140:	203e      	movs	r0, #62	; 0x3e
 8006142:	183b      	adds	r3, r7, r0
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	215c      	movs	r1, #92	; 0x5c
 8006148:	5a52      	ldrh	r2, [r2, r1]
 800614a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006150:	2b22      	cmp	r3, #34	; 0x22
 8006152:	d000      	beq.n	8006156 <UART_RxISR_8BIT+0x1e>
 8006154:	e095      	b.n	8006282 <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	213c      	movs	r1, #60	; 0x3c
 800615c:	187b      	adds	r3, r7, r1
 800615e:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8006160:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006162:	187b      	adds	r3, r7, r1
 8006164:	881b      	ldrh	r3, [r3, #0]
 8006166:	b2da      	uxtb	r2, r3
 8006168:	183b      	adds	r3, r7, r0
 800616a:	881b      	ldrh	r3, [r3, #0]
 800616c:	b2d9      	uxtb	r1, r3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006172:	400a      	ands	r2, r1
 8006174:	b2d2      	uxtb	r2, r2
 8006176:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800617c:	1c5a      	adds	r2, r3, #1
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	225a      	movs	r2, #90	; 0x5a
 8006186:	5a9b      	ldrh	r3, [r3, r2]
 8006188:	b29b      	uxth	r3, r3
 800618a:	3b01      	subs	r3, #1
 800618c:	b299      	uxth	r1, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	225a      	movs	r2, #90	; 0x5a
 8006192:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	225a      	movs	r2, #90	; 0x5a
 8006198:	5a9b      	ldrh	r3, [r3, r2]
 800619a:	b29b      	uxth	r3, r3
 800619c:	2b00      	cmp	r3, #0
 800619e:	d178      	bne.n	8006292 <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061a0:	f3ef 8310 	mrs	r3, PRIMASK
 80061a4:	61bb      	str	r3, [r7, #24]
  return(result);
 80061a6:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80061aa:	2301      	movs	r3, #1
 80061ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	f383 8810 	msr	PRIMASK, r3
}
 80061b4:	46c0      	nop			; (mov r8, r8)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4936      	ldr	r1, [pc, #216]	; (800629c <UART_RxISR_8BIT+0x164>)
 80061c2:	400a      	ands	r2, r1
 80061c4:	601a      	str	r2, [r3, #0]
 80061c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061ca:	6a3b      	ldr	r3, [r7, #32]
 80061cc:	f383 8810 	msr	PRIMASK, r3
}
 80061d0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061d2:	f3ef 8310 	mrs	r3, PRIMASK
 80061d6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80061d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061da:	637b      	str	r3, [r7, #52]	; 0x34
 80061dc:	2301      	movs	r3, #1
 80061de:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e2:	f383 8810 	msr	PRIMASK, r3
}
 80061e6:	46c0      	nop			; (mov r8, r8)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	689a      	ldr	r2, [r3, #8]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2101      	movs	r1, #1
 80061f4:	438a      	bics	r2, r1
 80061f6:	609a      	str	r2, [r3, #8]
 80061f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061fe:	f383 8810 	msr	PRIMASK, r3
}
 8006202:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2220      	movs	r2, #32
 8006208:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006214:	2b01      	cmp	r3, #1
 8006216:	d12f      	bne.n	8006278 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800621e:	f3ef 8310 	mrs	r3, PRIMASK
 8006222:	60fb      	str	r3, [r7, #12]
  return(result);
 8006224:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006226:	633b      	str	r3, [r7, #48]	; 0x30
 8006228:	2301      	movs	r3, #1
 800622a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	f383 8810 	msr	PRIMASK, r3
}
 8006232:	46c0      	nop			; (mov r8, r8)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2110      	movs	r1, #16
 8006240:	438a      	bics	r2, r1
 8006242:	601a      	str	r2, [r3, #0]
 8006244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006246:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	f383 8810 	msr	PRIMASK, r3
}
 800624e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	69db      	ldr	r3, [r3, #28]
 8006256:	2210      	movs	r2, #16
 8006258:	4013      	ands	r3, r2
 800625a:	2b10      	cmp	r3, #16
 800625c:	d103      	bne.n	8006266 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2210      	movs	r2, #16
 8006264:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2258      	movs	r2, #88	; 0x58
 800626a:	5a9a      	ldrh	r2, [r3, r2]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	0011      	movs	r1, r2
 8006270:	0018      	movs	r0, r3
 8006272:	f7ff fb15 	bl	80058a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006276:	e00c      	b.n	8006292 <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	0018      	movs	r0, r3
 800627c:	f7fa fa62 	bl	8000744 <HAL_UART_RxCpltCallback>
}
 8006280:	e007      	b.n	8006292 <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	699a      	ldr	r2, [r3, #24]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2108      	movs	r1, #8
 800628e:	430a      	orrs	r2, r1
 8006290:	619a      	str	r2, [r3, #24]
}
 8006292:	46c0      	nop			; (mov r8, r8)
 8006294:	46bd      	mov	sp, r7
 8006296:	b010      	add	sp, #64	; 0x40
 8006298:	bd80      	pop	{r7, pc}
 800629a:	46c0      	nop			; (mov r8, r8)
 800629c:	fffffedf 	.word	0xfffffedf

080062a0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b090      	sub	sp, #64	; 0x40
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80062a8:	203e      	movs	r0, #62	; 0x3e
 80062aa:	183b      	adds	r3, r7, r0
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	215c      	movs	r1, #92	; 0x5c
 80062b0:	5a52      	ldrh	r2, [r2, r1]
 80062b2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062b8:	2b22      	cmp	r3, #34	; 0x22
 80062ba:	d000      	beq.n	80062be <UART_RxISR_16BIT+0x1e>
 80062bc:	e095      	b.n	80063ea <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	213c      	movs	r1, #60	; 0x3c
 80062c4:	187b      	adds	r3, r7, r1
 80062c6:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80062c8:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ce:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80062d0:	187b      	adds	r3, r7, r1
 80062d2:	183a      	adds	r2, r7, r0
 80062d4:	881b      	ldrh	r3, [r3, #0]
 80062d6:	8812      	ldrh	r2, [r2, #0]
 80062d8:	4013      	ands	r3, r2
 80062da:	b29a      	uxth	r2, r3
 80062dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062de:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062e4:	1c9a      	adds	r2, r3, #2
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	225a      	movs	r2, #90	; 0x5a
 80062ee:	5a9b      	ldrh	r3, [r3, r2]
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	3b01      	subs	r3, #1
 80062f4:	b299      	uxth	r1, r3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	225a      	movs	r2, #90	; 0x5a
 80062fa:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	225a      	movs	r2, #90	; 0x5a
 8006300:	5a9b      	ldrh	r3, [r3, r2]
 8006302:	b29b      	uxth	r3, r3
 8006304:	2b00      	cmp	r3, #0
 8006306:	d178      	bne.n	80063fa <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006308:	f3ef 8310 	mrs	r3, PRIMASK
 800630c:	617b      	str	r3, [r7, #20]
  return(result);
 800630e:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006310:	637b      	str	r3, [r7, #52]	; 0x34
 8006312:	2301      	movs	r3, #1
 8006314:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	f383 8810 	msr	PRIMASK, r3
}
 800631c:	46c0      	nop			; (mov r8, r8)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4936      	ldr	r1, [pc, #216]	; (8006404 <UART_RxISR_16BIT+0x164>)
 800632a:	400a      	ands	r2, r1
 800632c:	601a      	str	r2, [r3, #0]
 800632e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006330:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	f383 8810 	msr	PRIMASK, r3
}
 8006338:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800633a:	f3ef 8310 	mrs	r3, PRIMASK
 800633e:	623b      	str	r3, [r7, #32]
  return(result);
 8006340:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006342:	633b      	str	r3, [r7, #48]	; 0x30
 8006344:	2301      	movs	r3, #1
 8006346:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634a:	f383 8810 	msr	PRIMASK, r3
}
 800634e:	46c0      	nop			; (mov r8, r8)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689a      	ldr	r2, [r3, #8]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2101      	movs	r1, #1
 800635c:	438a      	bics	r2, r1
 800635e:	609a      	str	r2, [r3, #8]
 8006360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006362:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006366:	f383 8810 	msr	PRIMASK, r3
}
 800636a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2220      	movs	r2, #32
 8006370:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800637c:	2b01      	cmp	r3, #1
 800637e:	d12f      	bne.n	80063e0 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006386:	f3ef 8310 	mrs	r3, PRIMASK
 800638a:	60bb      	str	r3, [r7, #8]
  return(result);
 800638c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800638e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006390:	2301      	movs	r3, #1
 8006392:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f383 8810 	msr	PRIMASK, r3
}
 800639a:	46c0      	nop			; (mov r8, r8)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	2110      	movs	r1, #16
 80063a8:	438a      	bics	r2, r1
 80063aa:	601a      	str	r2, [r3, #0]
 80063ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	f383 8810 	msr	PRIMASK, r3
}
 80063b6:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	69db      	ldr	r3, [r3, #28]
 80063be:	2210      	movs	r2, #16
 80063c0:	4013      	ands	r3, r2
 80063c2:	2b10      	cmp	r3, #16
 80063c4:	d103      	bne.n	80063ce <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2210      	movs	r2, #16
 80063cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2258      	movs	r2, #88	; 0x58
 80063d2:	5a9a      	ldrh	r2, [r3, r2]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	0011      	movs	r1, r2
 80063d8:	0018      	movs	r0, r3
 80063da:	f7ff fa61 	bl	80058a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80063de:	e00c      	b.n	80063fa <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	0018      	movs	r0, r3
 80063e4:	f7fa f9ae 	bl	8000744 <HAL_UART_RxCpltCallback>
}
 80063e8:	e007      	b.n	80063fa <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	699a      	ldr	r2, [r3, #24]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2108      	movs	r1, #8
 80063f6:	430a      	orrs	r2, r1
 80063f8:	619a      	str	r2, [r3, #24]
}
 80063fa:	46c0      	nop			; (mov r8, r8)
 80063fc:	46bd      	mov	sp, r7
 80063fe:	b010      	add	sp, #64	; 0x40
 8006400:	bd80      	pop	{r7, pc}
 8006402:	46c0      	nop			; (mov r8, r8)
 8006404:	fffffedf 	.word	0xfffffedf

08006408 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006410:	46c0      	nop			; (mov r8, r8)
 8006412:	46bd      	mov	sp, r7
 8006414:	b002      	add	sp, #8
 8006416:	bd80      	pop	{r7, pc}

08006418 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b088      	sub	sp, #32
 800641c:	af02      	add	r7, sp, #8
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	1d3b      	adds	r3, r7, #4
 8006422:	6019      	str	r1, [r3, #0]
 8006424:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006426:	2317      	movs	r3, #23
 8006428:	18fb      	adds	r3, r7, r3
 800642a:	2200      	movs	r2, #0
 800642c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2274      	movs	r2, #116	; 0x74
 8006432:	5c9b      	ldrb	r3, [r3, r2]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d101      	bne.n	800643c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x24>
 8006438:	2302      	movs	r3, #2
 800643a:	e04a      	b.n	80064d2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xba>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2274      	movs	r2, #116	; 0x74
 8006440:	2101      	movs	r1, #1
 8006442:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2224      	movs	r2, #36	; 0x24
 8006448:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2101      	movs	r1, #1
 8006456:	438a      	bics	r2, r1
 8006458:	601a      	str	r2, [r3, #0]

#if defined(USART_CR3_WUS)
  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	4a1e      	ldr	r2, [pc, #120]	; (80064dc <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc4>)
 8006462:	4013      	ands	r3, r2
 8006464:	0019      	movs	r1, r3
 8006466:	1d3b      	adds	r3, r7, #4
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	430a      	orrs	r2, r1
 8006470:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_WUS */

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8006472:	1d3b      	adds	r3, r7, #4
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d105      	bne.n	8006486 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x6e>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800647a:	1d3b      	adds	r3, r7, #4
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	6819      	ldr	r1, [r3, #0]
 8006480:	685a      	ldr	r2, [r3, #4]
 8006482:	f000 f860 	bl	8006546 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2101      	movs	r1, #1
 8006492:	430a      	orrs	r2, r1
 8006494:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006496:	f7fb fa3b 	bl	8001910 <HAL_GetTick>
 800649a:	0003      	movs	r3, r0
 800649c:	613b      	str	r3, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	2280      	movs	r2, #128	; 0x80
 80064a2:	03d1      	lsls	r1, r2, #15
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	4a0e      	ldr	r2, [pc, #56]	; (80064e0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc8>)
 80064a8:	9200      	str	r2, [sp, #0]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f7ff fc40 	bl	8005d30 <UART_WaitOnFlagUntilTimeout>
 80064b0:	1e03      	subs	r3, r0, #0
 80064b2:	d004      	beq.n	80064be <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa6>
  {
    status = HAL_TIMEOUT;
 80064b4:	2317      	movs	r3, #23
 80064b6:	18fb      	adds	r3, r7, r3
 80064b8:	2203      	movs	r2, #3
 80064ba:	701a      	strb	r2, [r3, #0]
 80064bc:	e002      	b.n	80064c4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xac>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2220      	movs	r2, #32
 80064c2:	679a      	str	r2, [r3, #120]	; 0x78
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2274      	movs	r2, #116	; 0x74
 80064c8:	2100      	movs	r1, #0
 80064ca:	5499      	strb	r1, [r3, r2]

  return status;
 80064cc:	2317      	movs	r3, #23
 80064ce:	18fb      	adds	r3, r7, r3
 80064d0:	781b      	ldrb	r3, [r3, #0]
}
 80064d2:	0018      	movs	r0, r3
 80064d4:	46bd      	mov	sp, r7
 80064d6:	b006      	add	sp, #24
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	46c0      	nop			; (mov r8, r8)
 80064dc:	ffcfffff 	.word	0xffcfffff
 80064e0:	01ffffff 	.word	0x01ffffff

080064e4 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b086      	sub	sp, #24
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2274      	movs	r2, #116	; 0x74
 80064f0:	5c9b      	ldrb	r3, [r3, r2]
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d101      	bne.n	80064fa <HAL_UARTEx_EnableStopMode+0x16>
 80064f6:	2302      	movs	r3, #2
 80064f8:	e021      	b.n	800653e <HAL_UARTEx_EnableStopMode+0x5a>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2274      	movs	r2, #116	; 0x74
 80064fe:	2101      	movs	r1, #1
 8006500:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006502:	f3ef 8310 	mrs	r3, PRIMASK
 8006506:	60bb      	str	r3, [r7, #8]
  return(result);
 8006508:	68bb      	ldr	r3, [r7, #8]

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800650a:	617b      	str	r3, [r7, #20]
 800650c:	2301      	movs	r3, #1
 800650e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f383 8810 	msr	PRIMASK, r3
}
 8006516:	46c0      	nop			; (mov r8, r8)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2102      	movs	r1, #2
 8006524:	430a      	orrs	r2, r1
 8006526:	601a      	str	r2, [r3, #0]
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	f383 8810 	msr	PRIMASK, r3
}
 8006532:	46c0      	nop			; (mov r8, r8)

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2274      	movs	r2, #116	; 0x74
 8006538:	2100      	movs	r1, #0
 800653a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	0018      	movs	r0, r3
 8006540:	46bd      	mov	sp, r7
 8006542:	b006      	add	sp, #24
 8006544:	bd80      	pop	{r7, pc}

08006546 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b084      	sub	sp, #16
 800654a:	af00      	add	r7, sp, #0
 800654c:	60f8      	str	r0, [r7, #12]
 800654e:	1d3b      	adds	r3, r7, #4
 8006550:	6019      	str	r1, [r3, #0]
 8006552:	605a      	str	r2, [r3, #4]
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	2210      	movs	r2, #16
 800655c:	4393      	bics	r3, r2
 800655e:	001a      	movs	r2, r3
 8006560:	1d3b      	adds	r3, r7, #4
 8006562:	889b      	ldrh	r3, [r3, #4]
 8006564:	0019      	movs	r1, r3
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	430a      	orrs	r2, r1
 800656c:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	021b      	lsls	r3, r3, #8
 8006576:	0a19      	lsrs	r1, r3, #8
 8006578:	1d3b      	adds	r3, r7, #4
 800657a:	799b      	ldrb	r3, [r3, #6]
 800657c:	061a      	lsls	r2, r3, #24
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	430a      	orrs	r2, r1
 8006584:	605a      	str	r2, [r3, #4]
}
 8006586:	46c0      	nop			; (mov r8, r8)
 8006588:	46bd      	mov	sp, r7
 800658a:	b004      	add	sp, #16
 800658c:	bd80      	pop	{r7, pc}
	...

08006590 <__libc_init_array>:
 8006590:	b570      	push	{r4, r5, r6, lr}
 8006592:	2600      	movs	r6, #0
 8006594:	4d0c      	ldr	r5, [pc, #48]	; (80065c8 <__libc_init_array+0x38>)
 8006596:	4c0d      	ldr	r4, [pc, #52]	; (80065cc <__libc_init_array+0x3c>)
 8006598:	1b64      	subs	r4, r4, r5
 800659a:	10a4      	asrs	r4, r4, #2
 800659c:	42a6      	cmp	r6, r4
 800659e:	d109      	bne.n	80065b4 <__libc_init_array+0x24>
 80065a0:	2600      	movs	r6, #0
 80065a2:	f000 f821 	bl	80065e8 <_init>
 80065a6:	4d0a      	ldr	r5, [pc, #40]	; (80065d0 <__libc_init_array+0x40>)
 80065a8:	4c0a      	ldr	r4, [pc, #40]	; (80065d4 <__libc_init_array+0x44>)
 80065aa:	1b64      	subs	r4, r4, r5
 80065ac:	10a4      	asrs	r4, r4, #2
 80065ae:	42a6      	cmp	r6, r4
 80065b0:	d105      	bne.n	80065be <__libc_init_array+0x2e>
 80065b2:	bd70      	pop	{r4, r5, r6, pc}
 80065b4:	00b3      	lsls	r3, r6, #2
 80065b6:	58eb      	ldr	r3, [r5, r3]
 80065b8:	4798      	blx	r3
 80065ba:	3601      	adds	r6, #1
 80065bc:	e7ee      	b.n	800659c <__libc_init_array+0xc>
 80065be:	00b3      	lsls	r3, r6, #2
 80065c0:	58eb      	ldr	r3, [r5, r3]
 80065c2:	4798      	blx	r3
 80065c4:	3601      	adds	r6, #1
 80065c6:	e7f2      	b.n	80065ae <__libc_init_array+0x1e>
 80065c8:	0800663c 	.word	0x0800663c
 80065cc:	0800663c 	.word	0x0800663c
 80065d0:	0800663c 	.word	0x0800663c
 80065d4:	08006640 	.word	0x08006640

080065d8 <memset>:
 80065d8:	0003      	movs	r3, r0
 80065da:	1882      	adds	r2, r0, r2
 80065dc:	4293      	cmp	r3, r2
 80065de:	d100      	bne.n	80065e2 <memset+0xa>
 80065e0:	4770      	bx	lr
 80065e2:	7019      	strb	r1, [r3, #0]
 80065e4:	3301      	adds	r3, #1
 80065e6:	e7f9      	b.n	80065dc <memset+0x4>

080065e8 <_init>:
 80065e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ea:	46c0      	nop			; (mov r8, r8)
 80065ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ee:	bc08      	pop	{r3}
 80065f0:	469e      	mov	lr, r3
 80065f2:	4770      	bx	lr

080065f4 <_fini>:
 80065f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065f6:	46c0      	nop			; (mov r8, r8)
 80065f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065fa:	bc08      	pop	{r3}
 80065fc:	469e      	mov	lr, r3
 80065fe:	4770      	bx	lr
