
Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e24  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08005ee4  08005ee4  00015ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f20  08005f20  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08005f20  08005f20  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005f20  08005f20  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f20  08005f20  00015f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f24  08005f24  00015f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08005f28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  20000028  08005f50  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000032c  08005f50  0002032c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f5d  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027d6  00000000  00000000  00032fad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f8  00000000  00000000  00035788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ff0  00000000  00000000  00036880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001312c  00000000  00000000  00037870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014651  00000000  00000000  0004a99c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00073d2c  00000000  00000000  0005efed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d2d19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d20  00000000  00000000  000d2d6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000028 	.word	0x20000028
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005ecc 	.word	0x08005ecc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000002c 	.word	0x2000002c
 8000104:	08005ecc 	.word	0x08005ecc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000224:	f3bf 8f4f 	dsb	sy
}
 8000228:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800022a:	4b04      	ldr	r3, [pc, #16]	; (800023c <__NVIC_SystemReset+0x1c>)
 800022c:	4a04      	ldr	r2, [pc, #16]	; (8000240 <__NVIC_SystemReset+0x20>)
 800022e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000230:	f3bf 8f4f 	dsb	sy
}
 8000234:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000236:	46c0      	nop			; (mov r8, r8)
 8000238:	e7fd      	b.n	8000236 <__NVIC_SystemReset+0x16>
 800023a:	46c0      	nop			; (mov r8, r8)
 800023c:	e000ed00 	.word	0xe000ed00
 8000240:	05fa0004 	.word	0x05fa0004

08000244 <HAL_TIM_OC_DelayElapsedCallback>:
uint8_t hk_buf[26];
const uint8_t hk_sync = 0xCC;
uint16_t hk_seq = 0;
int hk_counter = 0;

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8000244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000246:	b08d      	sub	sp, #52	; 0x34
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
    if (htim == &htim1) {
 800024c:	687a      	ldr	r2, [r7, #4]
 800024e:	4b69      	ldr	r3, [pc, #420]	; (80003f4 <HAL_TIM_OC_DelayElapsedCallback+0x1b0>)
 8000250:	429a      	cmp	r2, r3
 8000252:	d000      	beq.n	8000256 <HAL_TIM_OC_DelayElapsedCallback+0x12>
 8000254:	e1e8      	b.n	8000628 <HAL_TIM_OC_DelayElapsedCallback+0x3e4>
        if (!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8))) { //check pin state
 8000256:	2380      	movs	r3, #128	; 0x80
 8000258:	005a      	lsls	r2, r3, #1
 800025a:	2390      	movs	r3, #144	; 0x90
 800025c:	05db      	lsls	r3, r3, #23
 800025e:	0011      	movs	r1, r2
 8000260:	0018      	movs	r0, r3
 8000262:	f002 fb83 	bl	800296c <HAL_GPIO_ReadPin>
 8000266:	1e03      	subs	r3, r0, #0
 8000268:	d000      	beq.n	800026c <HAL_TIM_OC_DelayElapsedCallback+0x28>
 800026a:	e1dd      	b.n	8000628 <HAL_TIM_OC_DelayElapsedCallback+0x3e4>
             * Sets CNV and samples ERPA's ADC
             * Steps DAC
             * +/- 0.5v Every 100ms
             */

            uint16_t t1 = TS_CAL1;
 800026c:	4a62      	ldr	r2, [pc, #392]	; (80003f8 <HAL_TIM_OC_DelayElapsedCallback+0x1b4>)
 800026e:	232e      	movs	r3, #46	; 0x2e
 8000270:	18fb      	adds	r3, r7, r3
 8000272:	8812      	ldrh	r2, [r2, #0]
 8000274:	801a      	strh	r2, [r3, #0]
            uint16_t t2 = TS_CAL2;
 8000276:	4a61      	ldr	r2, [pc, #388]	; (80003fc <HAL_TIM_OC_DelayElapsedCallback+0x1b8>)
 8000278:	232c      	movs	r3, #44	; 0x2c
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	8812      	ldrh	r2, [r2, #0]
 800027e:	801a      	strh	r2, [r3, #0]
            /* Write to SPI (begin transfer?) */
            HAL_SPI_Transmit(&hspi1, (uint8_t * ) & WRITE, 1, 1);
 8000280:	495f      	ldr	r1, [pc, #380]	; (8000400 <HAL_TIM_OC_DelayElapsedCallback+0x1bc>)
 8000282:	4860      	ldr	r0, [pc, #384]	; (8000404 <HAL_TIM_OC_DelayElapsedCallback+0x1c0>)
 8000284:	2301      	movs	r3, #1
 8000286:	2201      	movs	r2, #1
 8000288:	f003 f9e0 	bl	800364c <HAL_SPI_Transmit>

            while (!(SPI1->SR));
 800028c:	46c0      	nop			; (mov r8, r8)
 800028e:	4b5e      	ldr	r3, [pc, #376]	; (8000408 <HAL_TIM_OC_DelayElapsedCallback+0x1c4>)
 8000290:	689b      	ldr	r3, [r3, #8]
 8000292:	2b00      	cmp	r3, #0
 8000294:	d0fb      	beq.n	800028e <HAL_TIM_OC_DelayElapsedCallback+0x4a>

            raw = SPI1->DR;
 8000296:	4b5c      	ldr	r3, [pc, #368]	; (8000408 <HAL_TIM_OC_DelayElapsedCallback+0x1c4>)
 8000298:	68db      	ldr	r3, [r3, #12]
 800029a:	001a      	movs	r2, r3
 800029c:	4b5b      	ldr	r3, [pc, #364]	; (800040c <HAL_TIM_OC_DelayElapsedCallback+0x1c8>)
 800029e:	601a      	str	r2, [r3, #0]

            DAC->DHR12R1 = DAC_OUT[step];
 80002a0:	4b5b      	ldr	r3, [pc, #364]	; (8000410 <HAL_TIM_OC_DelayElapsedCallback+0x1cc>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	0019      	movs	r1, r3
 80002a6:	4b5b      	ldr	r3, [pc, #364]	; (8000414 <HAL_TIM_OC_DelayElapsedCallback+0x1d0>)
 80002a8:	4a5b      	ldr	r2, [pc, #364]	; (8000418 <HAL_TIM_OC_DelayElapsedCallback+0x1d4>)
 80002aa:	0089      	lsls	r1, r1, #2
 80002ac:	588a      	ldr	r2, [r1, r2]
 80002ae:	609a      	str	r2, [r3, #8]

            HAL_ADC_Start_DMA(&hadc, (uint32_t *) adcResultsDMA, adcChannelCount);
 80002b0:	2310      	movs	r3, #16
 80002b2:	001a      	movs	r2, r3
 80002b4:	4959      	ldr	r1, [pc, #356]	; (800041c <HAL_TIM_OC_DelayElapsedCallback+0x1d8>)
 80002b6:	4b5a      	ldr	r3, [pc, #360]	; (8000420 <HAL_TIM_OC_DelayElapsedCallback+0x1dc>)
 80002b8:	0018      	movs	r0, r3
 80002ba:	f001 fba9 	bl	8001a10 <HAL_ADC_Start_DMA>
            uint16_t PA0 = adcResultsDMA[0]; //ADC_IN0, END_mon: entrance/collimator monitor
 80002be:	212a      	movs	r1, #42	; 0x2a
 80002c0:	187b      	adds	r3, r7, r1
 80002c2:	4a56      	ldr	r2, [pc, #344]	; (800041c <HAL_TIM_OC_DelayElapsedCallback+0x1d8>)
 80002c4:	8812      	ldrh	r2, [r2, #0]
 80002c6:	801a      	strh	r2, [r3, #0]
            uint16_t PA7 = adcResultsDMA[4]; //ADC_IN7, SWP_mon: Sweep voltage monitor
 80002c8:	2028      	movs	r0, #40	; 0x28
 80002ca:	183b      	adds	r3, r7, r0
 80002cc:	4a53      	ldr	r2, [pc, #332]	; (800041c <HAL_TIM_OC_DelayElapsedCallback+0x1d8>)
 80002ce:	8912      	ldrh	r2, [r2, #8]
 80002d0:	801a      	strh	r2, [r3, #0]
            uint16_t PB0 = adcResultsDMA[5]; //ADC_IN8, TMP 1: Sweep temperature
 80002d2:	2426      	movs	r4, #38	; 0x26
 80002d4:	193b      	adds	r3, r7, r4
 80002d6:	4a51      	ldr	r2, [pc, #324]	; (800041c <HAL_TIM_OC_DelayElapsedCallback+0x1d8>)
 80002d8:	8952      	ldrh	r2, [r2, #10]
 80002da:	801a      	strh	r2, [r3, #0]
            uint16_t PB1 = adcResultsDMA[6]; //ADC_IN9, TMP 2: feedbacks
 80002dc:	2524      	movs	r5, #36	; 0x24
 80002de:	197b      	adds	r3, r7, r5
 80002e0:	4a4e      	ldr	r2, [pc, #312]	; (800041c <HAL_TIM_OC_DelayElapsedCallback+0x1d8>)
 80002e2:	8992      	ldrh	r2, [r2, #12]
 80002e4:	801a      	strh	r2, [r3, #0]

            erpa_buf[0] = erpa_sync; // ERPA SYNC 0xAA MSB
 80002e6:	22aa      	movs	r2, #170	; 0xaa
 80002e8:	4b4e      	ldr	r3, [pc, #312]	; (8000424 <HAL_TIM_OC_DelayElapsedCallback+0x1e0>)
 80002ea:	701a      	strb	r2, [r3, #0]
            erpa_buf[1] = erpa_sync; // ERPA SYNC 0xAA LSB
 80002ec:	22aa      	movs	r2, #170	; 0xaa
 80002ee:	4b4d      	ldr	r3, [pc, #308]	; (8000424 <HAL_TIM_OC_DelayElapsedCallback+0x1e0>)
 80002f0:	705a      	strb	r2, [r3, #1]
            erpa_buf[2] = ((erpa_seq & 0xFF00) >> 8); // ERPA SEQ # MSB
 80002f2:	4b4d      	ldr	r3, [pc, #308]	; (8000428 <HAL_TIM_OC_DelayElapsedCallback+0x1e4>)
 80002f4:	881b      	ldrh	r3, [r3, #0]
 80002f6:	0a1b      	lsrs	r3, r3, #8
 80002f8:	b29b      	uxth	r3, r3
 80002fa:	b2da      	uxtb	r2, r3
 80002fc:	4b49      	ldr	r3, [pc, #292]	; (8000424 <HAL_TIM_OC_DelayElapsedCallback+0x1e0>)
 80002fe:	709a      	strb	r2, [r3, #2]
            erpa_buf[3] = (erpa_seq & 0xFF); // ERPA SEQ # MSB
 8000300:	4b49      	ldr	r3, [pc, #292]	; (8000428 <HAL_TIM_OC_DelayElapsedCallback+0x1e4>)
 8000302:	881b      	ldrh	r3, [r3, #0]
 8000304:	b2da      	uxtb	r2, r3
 8000306:	4b47      	ldr	r3, [pc, #284]	; (8000424 <HAL_TIM_OC_DelayElapsedCallback+0x1e0>)
 8000308:	70da      	strb	r2, [r3, #3]
            erpa_buf[4] = ((raw & 0xFF00) >> 8); // ERPA eADC MSB
 800030a:	4b40      	ldr	r3, [pc, #256]	; (800040c <HAL_TIM_OC_DelayElapsedCallback+0x1c8>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	121b      	asrs	r3, r3, #8
 8000310:	b2da      	uxtb	r2, r3
 8000312:	4b44      	ldr	r3, [pc, #272]	; (8000424 <HAL_TIM_OC_DelayElapsedCallback+0x1e0>)
 8000314:	711a      	strb	r2, [r3, #4]
            erpa_buf[5] = (raw & 0xFF); // ERPA eADC LSB
 8000316:	4b3d      	ldr	r3, [pc, #244]	; (800040c <HAL_TIM_OC_DelayElapsedCallback+0x1c8>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	b2da      	uxtb	r2, r3
 800031c:	4b41      	ldr	r3, [pc, #260]	; (8000424 <HAL_TIM_OC_DelayElapsedCallback+0x1e0>)
 800031e:	715a      	strb	r2, [r3, #5]
            erpa_buf[6] = ((DAC_OUT[step] & 0xFF00) >> 8); //SWP Commanded MSB
 8000320:	4b3b      	ldr	r3, [pc, #236]	; (8000410 <HAL_TIM_OC_DelayElapsedCallback+0x1cc>)
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	001a      	movs	r2, r3
 8000326:	4b3c      	ldr	r3, [pc, #240]	; (8000418 <HAL_TIM_OC_DelayElapsedCallback+0x1d4>)
 8000328:	0092      	lsls	r2, r2, #2
 800032a:	58d3      	ldr	r3, [r2, r3]
 800032c:	0a1b      	lsrs	r3, r3, #8
 800032e:	b2da      	uxtb	r2, r3
 8000330:	4b3c      	ldr	r3, [pc, #240]	; (8000424 <HAL_TIM_OC_DelayElapsedCallback+0x1e0>)
 8000332:	719a      	strb	r2, [r3, #6]
            erpa_buf[7] = (DAC_OUT[step] & 0xFF); //SWP Commanded LSB
 8000334:	4b36      	ldr	r3, [pc, #216]	; (8000410 <HAL_TIM_OC_DelayElapsedCallback+0x1cc>)
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	001a      	movs	r2, r3
 800033a:	4b37      	ldr	r3, [pc, #220]	; (8000418 <HAL_TIM_OC_DelayElapsedCallback+0x1d4>)
 800033c:	0092      	lsls	r2, r2, #2
 800033e:	58d3      	ldr	r3, [r2, r3]
 8000340:	b2da      	uxtb	r2, r3
 8000342:	4b38      	ldr	r3, [pc, #224]	; (8000424 <HAL_TIM_OC_DelayElapsedCallback+0x1e0>)
 8000344:	71da      	strb	r2, [r3, #7]
            erpa_buf[8] = ((PA7 & 0xFF00) >> 8); // SWP Monitored MSB
 8000346:	183b      	adds	r3, r7, r0
 8000348:	881b      	ldrh	r3, [r3, #0]
 800034a:	0a1b      	lsrs	r3, r3, #8
 800034c:	b29b      	uxth	r3, r3
 800034e:	b2da      	uxtb	r2, r3
 8000350:	4b34      	ldr	r3, [pc, #208]	; (8000424 <HAL_TIM_OC_DelayElapsedCallback+0x1e0>)
 8000352:	721a      	strb	r2, [r3, #8]
            erpa_buf[9] = (PA7 & 0xFF); // SWP Monitored LSB
 8000354:	183b      	adds	r3, r7, r0
 8000356:	881b      	ldrh	r3, [r3, #0]
 8000358:	b2da      	uxtb	r2, r3
 800035a:	4b32      	ldr	r3, [pc, #200]	; (8000424 <HAL_TIM_OC_DelayElapsedCallback+0x1e0>)
 800035c:	725a      	strb	r2, [r3, #9]
            erpa_buf[10] = ((PB0 & 0xFF00) >> 8); // TEMPURATURE 1 MSB
 800035e:	193b      	adds	r3, r7, r4
 8000360:	881b      	ldrh	r3, [r3, #0]
 8000362:	0a1b      	lsrs	r3, r3, #8
 8000364:	b29b      	uxth	r3, r3
 8000366:	b2da      	uxtb	r2, r3
 8000368:	4b2e      	ldr	r3, [pc, #184]	; (8000424 <HAL_TIM_OC_DelayElapsedCallback+0x1e0>)
 800036a:	729a      	strb	r2, [r3, #10]
            erpa_buf[11] = (PB0 & 0xFF); // TEMPURATURE 1 LSB
 800036c:	193b      	adds	r3, r7, r4
 800036e:	881b      	ldrh	r3, [r3, #0]
 8000370:	b2da      	uxtb	r2, r3
 8000372:	4b2c      	ldr	r3, [pc, #176]	; (8000424 <HAL_TIM_OC_DelayElapsedCallback+0x1e0>)
 8000374:	72da      	strb	r2, [r3, #11]
            erpa_buf[12] = ((PB1 & 0xFF00) >> 8); // TEMPURATURE 2 MSB
 8000376:	197b      	adds	r3, r7, r5
 8000378:	881b      	ldrh	r3, [r3, #0]
 800037a:	0a1b      	lsrs	r3, r3, #8
 800037c:	b29b      	uxth	r3, r3
 800037e:	b2da      	uxtb	r2, r3
 8000380:	4b28      	ldr	r3, [pc, #160]	; (8000424 <HAL_TIM_OC_DelayElapsedCallback+0x1e0>)
 8000382:	731a      	strb	r2, [r3, #12]
            erpa_buf[13] = (PB1 & 0xFF); // TEMPURATURE 2 LSB
 8000384:	197b      	adds	r3, r7, r5
 8000386:	881b      	ldrh	r3, [r3, #0]
 8000388:	b2da      	uxtb	r2, r3
 800038a:	4b26      	ldr	r3, [pc, #152]	; (8000424 <HAL_TIM_OC_DelayElapsedCallback+0x1e0>)
 800038c:	735a      	strb	r2, [r3, #13]
            erpa_buf[14] = ((PA0 & 0xFF00) >> 8); // ENDmon MSB
 800038e:	187b      	adds	r3, r7, r1
 8000390:	881b      	ldrh	r3, [r3, #0]
 8000392:	0a1b      	lsrs	r3, r3, #8
 8000394:	b29b      	uxth	r3, r3
 8000396:	b2da      	uxtb	r2, r3
 8000398:	4b22      	ldr	r3, [pc, #136]	; (8000424 <HAL_TIM_OC_DelayElapsedCallback+0x1e0>)
 800039a:	739a      	strb	r2, [r3, #14]
            erpa_buf[15] = (PA0 & 0xFF); // ENDmon LSB
 800039c:	187b      	adds	r3, r7, r1
 800039e:	881b      	ldrh	r3, [r3, #0]
 80003a0:	b2da      	uxtb	r2, r3
 80003a2:	4b20      	ldr	r3, [pc, #128]	; (8000424 <HAL_TIM_OC_DelayElapsedCallback+0x1e0>)
 80003a4:	73da      	strb	r2, [r3, #15]

            erpa_seq++;
 80003a6:	4b20      	ldr	r3, [pc, #128]	; (8000428 <HAL_TIM_OC_DelayElapsedCallback+0x1e4>)
 80003a8:	881b      	ldrh	r3, [r3, #0]
 80003aa:	3301      	adds	r3, #1
 80003ac:	b29a      	uxth	r2, r3
 80003ae:	4b1e      	ldr	r3, [pc, #120]	; (8000428 <HAL_TIM_OC_DelayElapsedCallback+0x1e4>)
 80003b0:	801a      	strh	r2, [r3, #0]

            HAL_UART_Transmit(&huart1, erpa_buf, sizeof(erpa_buf), 100);
 80003b2:	491c      	ldr	r1, [pc, #112]	; (8000424 <HAL_TIM_OC_DelayElapsedCallback+0x1e0>)
 80003b4:	481d      	ldr	r0, [pc, #116]	; (800042c <HAL_TIM_OC_DelayElapsedCallback+0x1e8>)
 80003b6:	2364      	movs	r3, #100	; 0x64
 80003b8:	2210      	movs	r2, #16
 80003ba:	f004 fc79 	bl	8004cb0 <HAL_UART_Transmit>

            if (step == 5) {
 80003be:	4b14      	ldr	r3, [pc, #80]	; (8000410 <HAL_TIM_OC_DelayElapsedCallback+0x1cc>)
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	2b05      	cmp	r3, #5
 80003c4:	d103      	bne.n	80003ce <HAL_TIM_OC_DelayElapsedCallback+0x18a>
                up = 0;
 80003c6:	4b1a      	ldr	r3, [pc, #104]	; (8000430 <HAL_TIM_OC_DelayElapsedCallback+0x1ec>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	601a      	str	r2, [r3, #0]
 80003cc:	e006      	b.n	80003dc <HAL_TIM_OC_DelayElapsedCallback+0x198>
            } else if (step == 0) {
 80003ce:	4b10      	ldr	r3, [pc, #64]	; (8000410 <HAL_TIM_OC_DelayElapsedCallback+0x1cc>)
 80003d0:	781b      	ldrb	r3, [r3, #0]
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d102      	bne.n	80003dc <HAL_TIM_OC_DelayElapsedCallback+0x198>
                up = 1;
 80003d6:	4b16      	ldr	r3, [pc, #88]	; (8000430 <HAL_TIM_OC_DelayElapsedCallback+0x1ec>)
 80003d8:	2201      	movs	r2, #1
 80003da:	601a      	str	r2, [r3, #0]
            }

            up == 1 ? step++ : step--;
 80003dc:	4b14      	ldr	r3, [pc, #80]	; (8000430 <HAL_TIM_OC_DelayElapsedCallback+0x1ec>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	2b01      	cmp	r3, #1
 80003e2:	d127      	bne.n	8000434 <HAL_TIM_OC_DelayElapsedCallback+0x1f0>
 80003e4:	4b0a      	ldr	r3, [pc, #40]	; (8000410 <HAL_TIM_OC_DelayElapsedCallback+0x1cc>)
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	3301      	adds	r3, #1
 80003ea:	b2da      	uxtb	r2, r3
 80003ec:	4b08      	ldr	r3, [pc, #32]	; (8000410 <HAL_TIM_OC_DelayElapsedCallback+0x1cc>)
 80003ee:	701a      	strb	r2, [r3, #0]
 80003f0:	e026      	b.n	8000440 <HAL_TIM_OC_DelayElapsedCallback+0x1fc>
 80003f2:	46c0      	nop			; (mov r8, r8)
 80003f4:	200001a4 	.word	0x200001a4
 80003f8:	1ffff7b8 	.word	0x1ffff7b8
 80003fc:	1ffff7c2 	.word	0x1ffff7c2
 8000400:	08005f04 	.word	0x08005f04
 8000404:	200000dc 	.word	0x200000dc
 8000408:	40013000 	.word	0x40013000
 800040c:	200002e8 	.word	0x200002e8
 8000410:	200002e4 	.word	0x200002e4
 8000414:	40007400 	.word	0x40007400
 8000418:	20000000 	.word	0x20000000
 800041c:	200002c4 	.word	0x200002c4
 8000420:	20000044 	.word	0x20000044
 8000424:	200002ec 	.word	0x200002ec
 8000428:	200002fc 	.word	0x200002fc
 800042c:	20000234 	.word	0x20000234
 8000430:	20000018 	.word	0x20000018
 8000434:	4ba1      	ldr	r3, [pc, #644]	; (80006bc <HAL_TIM_OC_DelayElapsedCallback+0x478>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	3b01      	subs	r3, #1
 800043a:	b2da      	uxtb	r2, r3
 800043c:	4b9f      	ldr	r3, [pc, #636]	; (80006bc <HAL_TIM_OC_DelayElapsedCallback+0x478>)
 800043e:	701a      	strb	r2, [r3, #0]

            if (hk_counter == 50) {
 8000440:	4b9f      	ldr	r3, [pc, #636]	; (80006c0 <HAL_TIM_OC_DelayElapsedCallback+0x47c>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	2b32      	cmp	r3, #50	; 0x32
 8000446:	d000      	beq.n	800044a <HAL_TIM_OC_DelayElapsedCallback+0x206>
 8000448:	e0e9      	b.n	800061e <HAL_TIM_OC_DelayElapsedCallback+0x3da>
                HAL_ADC_Start_DMA(&hadc, (uint32_t *) adcResultsDMA, adcChannelCount);
 800044a:	2310      	movs	r3, #16
 800044c:	001a      	movs	r2, r3
 800044e:	499d      	ldr	r1, [pc, #628]	; (80006c4 <HAL_TIM_OC_DelayElapsedCallback+0x480>)
 8000450:	4b9d      	ldr	r3, [pc, #628]	; (80006c8 <HAL_TIM_OC_DelayElapsedCallback+0x484>)
 8000452:	0018      	movs	r0, r3
 8000454:	f001 fadc 	bl	8001a10 <HAL_ADC_Start_DMA>

                uint16_t PA1 = adcResultsDMA[1]; //ADC_IN1, BUS_Vmon: instrument bus voltage monitor
 8000458:	2122      	movs	r1, #34	; 0x22
 800045a:	187b      	adds	r3, r7, r1
 800045c:	4a99      	ldr	r2, [pc, #612]	; (80006c4 <HAL_TIM_OC_DelayElapsedCallback+0x480>)
 800045e:	8852      	ldrh	r2, [r2, #2]
 8000460:	801a      	strh	r2, [r3, #0]
                uint16_t PA2 = adcResultsDMA[2]; //ADC_IN2, BUS_Imon: instrument bus current monitor
 8000462:	2020      	movs	r0, #32
 8000464:	183b      	adds	r3, r7, r0
 8000466:	4a97      	ldr	r2, [pc, #604]	; (80006c4 <HAL_TIM_OC_DelayElapsedCallback+0x480>)
 8000468:	8892      	ldrh	r2, [r2, #4]
 800046a:	801a      	strh	r2, [r3, #0]
                uint16_t PA3 = adcResultsDMA[3]; //ADC_IN3, 5vref_mon: Accurate 5V for ADC monitor
 800046c:	241e      	movs	r4, #30
 800046e:	193b      	adds	r3, r7, r4
 8000470:	4a94      	ldr	r2, [pc, #592]	; (80006c4 <HAL_TIM_OC_DelayElapsedCallback+0x480>)
 8000472:	88d2      	ldrh	r2, [r2, #6]
 8000474:	801a      	strh	r2, [r3, #0]
                uint16_t PC0 = adcResultsDMA[7]; //ADC_IN10, 2v5_mon: power monitor
 8000476:	251c      	movs	r5, #28
 8000478:	197b      	adds	r3, r7, r5
 800047a:	4a92      	ldr	r2, [pc, #584]	; (80006c4 <HAL_TIM_OC_DelayElapsedCallback+0x480>)
 800047c:	89d2      	ldrh	r2, [r2, #14]
 800047e:	801a      	strh	r2, [r3, #0]
                uint16_t PC1 = adcResultsDMA[8]; //ADC_IN11, 3v3_mon: power monitor
 8000480:	261a      	movs	r6, #26
 8000482:	19bb      	adds	r3, r7, r6
 8000484:	4a8f      	ldr	r2, [pc, #572]	; (80006c4 <HAL_TIM_OC_DelayElapsedCallback+0x480>)
 8000486:	8a12      	ldrh	r2, [r2, #16]
 8000488:	801a      	strh	r2, [r3, #0]
                uint16_t PC2 = adcResultsDMA[9]; //ADC_IN12, 5v_mon: power monitor
 800048a:	2318      	movs	r3, #24
 800048c:	18fb      	adds	r3, r7, r3
 800048e:	4a8d      	ldr	r2, [pc, #564]	; (80006c4 <HAL_TIM_OC_DelayElapsedCallback+0x480>)
 8000490:	8a52      	ldrh	r2, [r2, #18]
 8000492:	801a      	strh	r2, [r3, #0]
                uint16_t PC3 = adcResultsDMA[10]; //ADC_IN13, n3v3_mon: power monitor
 8000494:	2216      	movs	r2, #22
 8000496:	18bb      	adds	r3, r7, r2
 8000498:	4a8a      	ldr	r2, [pc, #552]	; (80006c4 <HAL_TIM_OC_DelayElapsedCallback+0x480>)
 800049a:	8a92      	ldrh	r2, [r2, #20]
 800049c:	801a      	strh	r2, [r3, #0]
                uint16_t PC4 = adcResultsDMA[11]; //ADC_IN14, n5v_mon: power monitor
 800049e:	2314      	movs	r3, #20
 80004a0:	18fb      	adds	r3, r7, r3
 80004a2:	4a88      	ldr	r2, [pc, #544]	; (80006c4 <HAL_TIM_OC_DelayElapsedCallback+0x480>)
 80004a4:	8ad2      	ldrh	r2, [r2, #22]
 80004a6:	801a      	strh	r2, [r3, #0]
                uint16_t PC5 = adcResultsDMA[12]; //ADC_IN15, 15v_mon: power monitor
 80004a8:	2212      	movs	r2, #18
 80004aa:	18bb      	adds	r3, r7, r2
 80004ac:	4a85      	ldr	r2, [pc, #532]	; (80006c4 <HAL_TIM_OC_DelayElapsedCallback+0x480>)
 80004ae:	8b12      	ldrh	r2, [r2, #24]
 80004b0:	801a      	strh	r2, [r3, #0]
                uint16_t MCU_TEMP = adcResultsDMA[13]; //(internally connected) ADC_IN16, VSENSE
 80004b2:	2310      	movs	r3, #16
 80004b4:	18fb      	adds	r3, r7, r3
 80004b6:	4a83      	ldr	r2, [pc, #524]	; (80006c4 <HAL_TIM_OC_DelayElapsedCallback+0x480>)
 80004b8:	8b52      	ldrh	r2, [r2, #26]
 80004ba:	801a      	strh	r2, [r3, #0]
                uint16_t MCU_VREF = adcResultsDMA[14]; //(internally connected) ADC_IN17, VREFINT
 80004bc:	220e      	movs	r2, #14
 80004be:	18bb      	adds	r3, r7, r2
 80004c0:	4a80      	ldr	r2, [pc, #512]	; (80006c4 <HAL_TIM_OC_DelayElapsedCallback+0x480>)
 80004c2:	8b92      	ldrh	r2, [r2, #28]
 80004c4:	801a      	strh	r2, [r3, #0]

                hk_buf[0] = hk_sync; // HK SYNC 0xCC MSB
 80004c6:	22cc      	movs	r2, #204	; 0xcc
 80004c8:	4b80      	ldr	r3, [pc, #512]	; (80006cc <HAL_TIM_OC_DelayElapsedCallback+0x488>)
 80004ca:	701a      	strb	r2, [r3, #0]
                hk_buf[1] = hk_sync; // HK SYNC 0xCC LSB
 80004cc:	22cc      	movs	r2, #204	; 0xcc
 80004ce:	4b7f      	ldr	r3, [pc, #508]	; (80006cc <HAL_TIM_OC_DelayElapsedCallback+0x488>)
 80004d0:	705a      	strb	r2, [r3, #1]
                hk_buf[2] = ((hk_seq & 0xFF00) >> 8); // HK SEQ # MSB
 80004d2:	4b7f      	ldr	r3, [pc, #508]	; (80006d0 <HAL_TIM_OC_DelayElapsedCallback+0x48c>)
 80004d4:	881b      	ldrh	r3, [r3, #0]
 80004d6:	0a1b      	lsrs	r3, r3, #8
 80004d8:	b29b      	uxth	r3, r3
 80004da:	b2da      	uxtb	r2, r3
 80004dc:	4b7b      	ldr	r3, [pc, #492]	; (80006cc <HAL_TIM_OC_DelayElapsedCallback+0x488>)
 80004de:	709a      	strb	r2, [r3, #2]
                hk_buf[3] = (hk_seq & 0xFF); // HK SEQ # LSB
 80004e0:	4b7b      	ldr	r3, [pc, #492]	; (80006d0 <HAL_TIM_OC_DelayElapsedCallback+0x48c>)
 80004e2:	881b      	ldrh	r3, [r3, #0]
 80004e4:	b2da      	uxtb	r2, r3
 80004e6:	4b79      	ldr	r3, [pc, #484]	; (80006cc <HAL_TIM_OC_DelayElapsedCallback+0x488>)
 80004e8:	70da      	strb	r2, [r3, #3]
                hk_buf[4] = ((PA1 & 0xFF00) >> 8); // BUS_Vmon MSB
 80004ea:	187b      	adds	r3, r7, r1
 80004ec:	881b      	ldrh	r3, [r3, #0]
 80004ee:	0a1b      	lsrs	r3, r3, #8
 80004f0:	b29b      	uxth	r3, r3
 80004f2:	b2da      	uxtb	r2, r3
 80004f4:	4b75      	ldr	r3, [pc, #468]	; (80006cc <HAL_TIM_OC_DelayElapsedCallback+0x488>)
 80004f6:	711a      	strb	r2, [r3, #4]
                hk_buf[5] = (PA1 & 0xFF); // BUS_Vmon LSB
 80004f8:	187b      	adds	r3, r7, r1
 80004fa:	881b      	ldrh	r3, [r3, #0]
 80004fc:	b2da      	uxtb	r2, r3
 80004fe:	4b73      	ldr	r3, [pc, #460]	; (80006cc <HAL_TIM_OC_DelayElapsedCallback+0x488>)
 8000500:	715a      	strb	r2, [r3, #5]
                hk_buf[6] = ((PA2 & 0xFF00) >> 8); // BUS_Imon MSB
 8000502:	183b      	adds	r3, r7, r0
 8000504:	881b      	ldrh	r3, [r3, #0]
 8000506:	0a1b      	lsrs	r3, r3, #8
 8000508:	b29b      	uxth	r3, r3
 800050a:	b2da      	uxtb	r2, r3
 800050c:	4b6f      	ldr	r3, [pc, #444]	; (80006cc <HAL_TIM_OC_DelayElapsedCallback+0x488>)
 800050e:	719a      	strb	r2, [r3, #6]
                hk_buf[7] = (PA2 & 0xFF); // BUS_Imon LSB
 8000510:	183b      	adds	r3, r7, r0
 8000512:	881b      	ldrh	r3, [r3, #0]
 8000514:	b2da      	uxtb	r2, r3
 8000516:	4b6d      	ldr	r3, [pc, #436]	; (80006cc <HAL_TIM_OC_DelayElapsedCallback+0x488>)
 8000518:	71da      	strb	r2, [r3, #7]
                hk_buf[8] = ((PC0 & 0xFF00) >> 8); // 2.5v_mon MSB
 800051a:	197b      	adds	r3, r7, r5
 800051c:	881b      	ldrh	r3, [r3, #0]
 800051e:	0a1b      	lsrs	r3, r3, #8
 8000520:	b29b      	uxth	r3, r3
 8000522:	b2da      	uxtb	r2, r3
 8000524:	4b69      	ldr	r3, [pc, #420]	; (80006cc <HAL_TIM_OC_DelayElapsedCallback+0x488>)
 8000526:	721a      	strb	r2, [r3, #8]
                hk_buf[9] = (PC0 & 0xFF); // 2.5v_mon LSB
 8000528:	197b      	adds	r3, r7, r5
 800052a:	881b      	ldrh	r3, [r3, #0]
 800052c:	b2da      	uxtb	r2, r3
 800052e:	4b67      	ldr	r3, [pc, #412]	; (80006cc <HAL_TIM_OC_DelayElapsedCallback+0x488>)
 8000530:	725a      	strb	r2, [r3, #9]
                hk_buf[10] = ((PC1 & 0xFF00) >> 8); // 3v3_mon MSB
 8000532:	19bb      	adds	r3, r7, r6
 8000534:	881b      	ldrh	r3, [r3, #0]
 8000536:	0a1b      	lsrs	r3, r3, #8
 8000538:	b29b      	uxth	r3, r3
 800053a:	b2da      	uxtb	r2, r3
 800053c:	4b63      	ldr	r3, [pc, #396]	; (80006cc <HAL_TIM_OC_DelayElapsedCallback+0x488>)
 800053e:	729a      	strb	r2, [r3, #10]
                hk_buf[11] = (PC1 & 0xFF); // 3v3_mon LSB
 8000540:	19bb      	adds	r3, r7, r6
 8000542:	881b      	ldrh	r3, [r3, #0]
 8000544:	b2da      	uxtb	r2, r3
 8000546:	4b61      	ldr	r3, [pc, #388]	; (80006cc <HAL_TIM_OC_DelayElapsedCallback+0x488>)
 8000548:	72da      	strb	r2, [r3, #11]
                hk_buf[12] = ((PC2 & 0xFF00) >> 8); // 5v_mon MSB
 800054a:	2118      	movs	r1, #24
 800054c:	187b      	adds	r3, r7, r1
 800054e:	881b      	ldrh	r3, [r3, #0]
 8000550:	0a1b      	lsrs	r3, r3, #8
 8000552:	b29b      	uxth	r3, r3
 8000554:	b2da      	uxtb	r2, r3
 8000556:	4b5d      	ldr	r3, [pc, #372]	; (80006cc <HAL_TIM_OC_DelayElapsedCallback+0x488>)
 8000558:	731a      	strb	r2, [r3, #12]
                hk_buf[13] = (PC2 & 0xFF); // 5v_mon LSB
 800055a:	187b      	adds	r3, r7, r1
 800055c:	881b      	ldrh	r3, [r3, #0]
 800055e:	b2da      	uxtb	r2, r3
 8000560:	4b5a      	ldr	r3, [pc, #360]	; (80006cc <HAL_TIM_OC_DelayElapsedCallback+0x488>)
 8000562:	735a      	strb	r2, [r3, #13]
                hk_buf[14] = ((PA3 & 0xFF00) >> 8); // 5vref_mon MSB
 8000564:	193b      	adds	r3, r7, r4
 8000566:	881b      	ldrh	r3, [r3, #0]
 8000568:	0a1b      	lsrs	r3, r3, #8
 800056a:	b29b      	uxth	r3, r3
 800056c:	b2da      	uxtb	r2, r3
 800056e:	4b57      	ldr	r3, [pc, #348]	; (80006cc <HAL_TIM_OC_DelayElapsedCallback+0x488>)
 8000570:	739a      	strb	r2, [r3, #14]
                hk_buf[15] = (PA3 & 0xFF); // 5vref_mon LSB
 8000572:	193b      	adds	r3, r7, r4
 8000574:	881b      	ldrh	r3, [r3, #0]
 8000576:	b2da      	uxtb	r2, r3
 8000578:	4b54      	ldr	r3, [pc, #336]	; (80006cc <HAL_TIM_OC_DelayElapsedCallback+0x488>)
 800057a:	73da      	strb	r2, [r3, #15]
                hk_buf[16] = ((PC5 & 0xFF00) >> 8); // 15v_mon MSB
 800057c:	2012      	movs	r0, #18
 800057e:	183b      	adds	r3, r7, r0
 8000580:	881b      	ldrh	r3, [r3, #0]
 8000582:	0a1b      	lsrs	r3, r3, #8
 8000584:	b29b      	uxth	r3, r3
 8000586:	b2da      	uxtb	r2, r3
 8000588:	4b50      	ldr	r3, [pc, #320]	; (80006cc <HAL_TIM_OC_DelayElapsedCallback+0x488>)
 800058a:	741a      	strb	r2, [r3, #16]
                hk_buf[17] = (PC5 & 0xFF); // 15v_mon LSB
 800058c:	183b      	adds	r3, r7, r0
 800058e:	881b      	ldrh	r3, [r3, #0]
 8000590:	b2da      	uxtb	r2, r3
 8000592:	4b4e      	ldr	r3, [pc, #312]	; (80006cc <HAL_TIM_OC_DelayElapsedCallback+0x488>)
 8000594:	745a      	strb	r2, [r3, #17]
                hk_buf[18] = ((PC3 & 0xFF00) >> 8); // n3v3_mon MSB
 8000596:	2116      	movs	r1, #22
 8000598:	187b      	adds	r3, r7, r1
 800059a:	881b      	ldrh	r3, [r3, #0]
 800059c:	0a1b      	lsrs	r3, r3, #8
 800059e:	b29b      	uxth	r3, r3
 80005a0:	b2da      	uxtb	r2, r3
 80005a2:	4b4a      	ldr	r3, [pc, #296]	; (80006cc <HAL_TIM_OC_DelayElapsedCallback+0x488>)
 80005a4:	749a      	strb	r2, [r3, #18]
                hk_buf[19] = (PC3 & 0xFF); // n3v3_mon LSB
 80005a6:	187b      	adds	r3, r7, r1
 80005a8:	881b      	ldrh	r3, [r3, #0]
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	4b47      	ldr	r3, [pc, #284]	; (80006cc <HAL_TIM_OC_DelayElapsedCallback+0x488>)
 80005ae:	74da      	strb	r2, [r3, #19]
                hk_buf[20] = ((PC4 & 0xFF00) >> 8); // n5v_mon MSB
 80005b0:	2114      	movs	r1, #20
 80005b2:	187b      	adds	r3, r7, r1
 80005b4:	881b      	ldrh	r3, [r3, #0]
 80005b6:	0a1b      	lsrs	r3, r3, #8
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	b2da      	uxtb	r2, r3
 80005bc:	4b43      	ldr	r3, [pc, #268]	; (80006cc <HAL_TIM_OC_DelayElapsedCallback+0x488>)
 80005be:	751a      	strb	r2, [r3, #20]
                hk_buf[21] = (PC4 & 0xFF); // n5v_mon LSB
 80005c0:	187b      	adds	r3, r7, r1
 80005c2:	881b      	ldrh	r3, [r3, #0]
 80005c4:	b2da      	uxtb	r2, r3
 80005c6:	4b41      	ldr	r3, [pc, #260]	; (80006cc <HAL_TIM_OC_DelayElapsedCallback+0x488>)
 80005c8:	755a      	strb	r2, [r3, #21]
                hk_buf[22] = ((MCU_TEMP & 0xFF00) >> 8); // VSENSE MSB
 80005ca:	2110      	movs	r1, #16
 80005cc:	187b      	adds	r3, r7, r1
 80005ce:	881b      	ldrh	r3, [r3, #0]
 80005d0:	0a1b      	lsrs	r3, r3, #8
 80005d2:	b29b      	uxth	r3, r3
 80005d4:	b2da      	uxtb	r2, r3
 80005d6:	4b3d      	ldr	r3, [pc, #244]	; (80006cc <HAL_TIM_OC_DelayElapsedCallback+0x488>)
 80005d8:	759a      	strb	r2, [r3, #22]
                hk_buf[23] = (MCU_TEMP & 0xFF); // VSENSE LSB
 80005da:	187b      	adds	r3, r7, r1
 80005dc:	881b      	ldrh	r3, [r3, #0]
 80005de:	b2da      	uxtb	r2, r3
 80005e0:	4b3a      	ldr	r3, [pc, #232]	; (80006cc <HAL_TIM_OC_DelayElapsedCallback+0x488>)
 80005e2:	75da      	strb	r2, [r3, #23]
                hk_buf[24] = ((MCU_VREF & 0xFF00) >> 8); // VREFINT MSB
 80005e4:	210e      	movs	r1, #14
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	881b      	ldrh	r3, [r3, #0]
 80005ea:	0a1b      	lsrs	r3, r3, #8
 80005ec:	b29b      	uxth	r3, r3
 80005ee:	b2da      	uxtb	r2, r3
 80005f0:	4b36      	ldr	r3, [pc, #216]	; (80006cc <HAL_TIM_OC_DelayElapsedCallback+0x488>)
 80005f2:	761a      	strb	r2, [r3, #24]
                hk_buf[25] = (MCU_VREF & 0xFF); // VREFINT LSB
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	881b      	ldrh	r3, [r3, #0]
 80005f8:	b2da      	uxtb	r2, r3
 80005fa:	4b34      	ldr	r3, [pc, #208]	; (80006cc <HAL_TIM_OC_DelayElapsedCallback+0x488>)
 80005fc:	765a      	strb	r2, [r3, #25]

                HAL_UART_Transmit(&huart1, hk_buf, sizeof(hk_buf), 100);
 80005fe:	4933      	ldr	r1, [pc, #204]	; (80006cc <HAL_TIM_OC_DelayElapsedCallback+0x488>)
 8000600:	4834      	ldr	r0, [pc, #208]	; (80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x490>)
 8000602:	2364      	movs	r3, #100	; 0x64
 8000604:	221a      	movs	r2, #26
 8000606:	f004 fb53 	bl	8004cb0 <HAL_UART_Transmit>

                hk_counter = 1;
 800060a:	4b2d      	ldr	r3, [pc, #180]	; (80006c0 <HAL_TIM_OC_DelayElapsedCallback+0x47c>)
 800060c:	2201      	movs	r2, #1
 800060e:	601a      	str	r2, [r3, #0]

                hk_seq++;
 8000610:	4b2f      	ldr	r3, [pc, #188]	; (80006d0 <HAL_TIM_OC_DelayElapsedCallback+0x48c>)
 8000612:	881b      	ldrh	r3, [r3, #0]
 8000614:	3301      	adds	r3, #1
 8000616:	b29a      	uxth	r2, r3
 8000618:	4b2d      	ldr	r3, [pc, #180]	; (80006d0 <HAL_TIM_OC_DelayElapsedCallback+0x48c>)
 800061a:	801a      	strh	r2, [r3, #0]
 800061c:	e004      	b.n	8000628 <HAL_TIM_OC_DelayElapsedCallback+0x3e4>

            } else {
                hk_counter++;
 800061e:	4b28      	ldr	r3, [pc, #160]	; (80006c0 <HAL_TIM_OC_DelayElapsedCallback+0x47c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	1c5a      	adds	r2, r3, #1
 8000624:	4b26      	ldr	r3, [pc, #152]	; (80006c0 <HAL_TIM_OC_DelayElapsedCallback+0x47c>)
 8000626:	601a      	str	r2, [r3, #0]
            }

        }
    }

    if (htim == &htim2) {
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <HAL_TIM_OC_DelayElapsedCallback+0x494>)
 800062c:	429a      	cmp	r2, r3
 800062e:	d141      	bne.n	80006b4 <HAL_TIM_OC_DelayElapsedCallback+0x470>
        if (!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11))) { //check pin state
 8000630:	2380      	movs	r3, #128	; 0x80
 8000632:	011b      	lsls	r3, r3, #4
 8000634:	4a29      	ldr	r2, [pc, #164]	; (80006dc <HAL_TIM_OC_DelayElapsedCallback+0x498>)
 8000636:	0019      	movs	r1, r3
 8000638:	0010      	movs	r0, r2
 800063a:	f002 f997 	bl	800296c <HAL_GPIO_ReadPin>
 800063e:	1e03      	subs	r3, r0, #0
 8000640:	d138      	bne.n	80006b4 <HAL_TIM_OC_DelayElapsedCallback+0x470>
             * Sets CNV and samples UVPMT's ADC
             * Every 125ms
             */

            /* Write to SPI (begin transfer?) */
            HAL_SPI_Transmit(&hspi2, (uint8_t * ) & WRITE, 1, 1);
 8000642:	4927      	ldr	r1, [pc, #156]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x49c>)
 8000644:	4827      	ldr	r0, [pc, #156]	; (80006e4 <HAL_TIM_OC_DelayElapsedCallback+0x4a0>)
 8000646:	2301      	movs	r3, #1
 8000648:	2201      	movs	r2, #1
 800064a:	f002 ffff 	bl	800364c <HAL_SPI_Transmit>

            while (!(SPI2->SR));
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	4b25      	ldr	r3, [pc, #148]	; (80006e8 <HAL_TIM_OC_DelayElapsedCallback+0x4a4>)
 8000652:	689b      	ldr	r3, [r3, #8]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d0fb      	beq.n	8000650 <HAL_TIM_OC_DelayElapsedCallback+0x40c>

            raw = SPI2->DR;
 8000658:	4b23      	ldr	r3, [pc, #140]	; (80006e8 <HAL_TIM_OC_DelayElapsedCallback+0x4a4>)
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	001a      	movs	r2, r3
 800065e:	4b23      	ldr	r3, [pc, #140]	; (80006ec <HAL_TIM_OC_DelayElapsedCallback+0x4a8>)
 8000660:	601a      	str	r2, [r3, #0]


            pmt_buf[0] = pmt_sync;
 8000662:	22bb      	movs	r2, #187	; 0xbb
 8000664:	4b22      	ldr	r3, [pc, #136]	; (80006f0 <HAL_TIM_OC_DelayElapsedCallback+0x4ac>)
 8000666:	701a      	strb	r2, [r3, #0]
            pmt_buf[1] = pmt_sync;
 8000668:	22bb      	movs	r2, #187	; 0xbb
 800066a:	4b21      	ldr	r3, [pc, #132]	; (80006f0 <HAL_TIM_OC_DelayElapsedCallback+0x4ac>)
 800066c:	705a      	strb	r2, [r3, #1]
            pmt_buf[2] = ((pmt_seq & 0xFF00) >> 8);
 800066e:	4b21      	ldr	r3, [pc, #132]	; (80006f4 <HAL_TIM_OC_DelayElapsedCallback+0x4b0>)
 8000670:	881b      	ldrh	r3, [r3, #0]
 8000672:	0a1b      	lsrs	r3, r3, #8
 8000674:	b29b      	uxth	r3, r3
 8000676:	b2da      	uxtb	r2, r3
 8000678:	4b1d      	ldr	r3, [pc, #116]	; (80006f0 <HAL_TIM_OC_DelayElapsedCallback+0x4ac>)
 800067a:	709a      	strb	r2, [r3, #2]
            pmt_buf[3] = (pmt_seq & 0xFF);;
 800067c:	4b1d      	ldr	r3, [pc, #116]	; (80006f4 <HAL_TIM_OC_DelayElapsedCallback+0x4b0>)
 800067e:	881b      	ldrh	r3, [r3, #0]
 8000680:	b2da      	uxtb	r2, r3
 8000682:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <HAL_TIM_OC_DelayElapsedCallback+0x4ac>)
 8000684:	70da      	strb	r2, [r3, #3]
            pmt_buf[4] = ((raw & 0xFF00) >> 8);
 8000686:	4b19      	ldr	r3, [pc, #100]	; (80006ec <HAL_TIM_OC_DelayElapsedCallback+0x4a8>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	121b      	asrs	r3, r3, #8
 800068c:	b2da      	uxtb	r2, r3
 800068e:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <HAL_TIM_OC_DelayElapsedCallback+0x4ac>)
 8000690:	711a      	strb	r2, [r3, #4]
            pmt_buf[5] = (raw & 0xFF);
 8000692:	4b16      	ldr	r3, [pc, #88]	; (80006ec <HAL_TIM_OC_DelayElapsedCallback+0x4a8>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	b2da      	uxtb	r2, r3
 8000698:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <HAL_TIM_OC_DelayElapsedCallback+0x4ac>)
 800069a:	715a      	strb	r2, [r3, #5]

            pmt_seq++;
 800069c:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <HAL_TIM_OC_DelayElapsedCallback+0x4b0>)
 800069e:	881b      	ldrh	r3, [r3, #0]
 80006a0:	3301      	adds	r3, #1
 80006a2:	b29a      	uxth	r2, r3
 80006a4:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <HAL_TIM_OC_DelayElapsedCallback+0x4b0>)
 80006a6:	801a      	strh	r2, [r3, #0]

            HAL_UART_Transmit(&huart1, pmt_buf, sizeof(pmt_buf), 100);
 80006a8:	4911      	ldr	r1, [pc, #68]	; (80006f0 <HAL_TIM_OC_DelayElapsedCallback+0x4ac>)
 80006aa:	480a      	ldr	r0, [pc, #40]	; (80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x490>)
 80006ac:	2364      	movs	r3, #100	; 0x64
 80006ae:	2206      	movs	r2, #6
 80006b0:	f004 fafe 	bl	8004cb0 <HAL_UART_Transmit>
        }
    }


    /* Timer 3 also called but doesn't need to do anything on IT */
}
 80006b4:	46c0      	nop			; (mov r8, r8)
 80006b6:	46bd      	mov	sp, r7
 80006b8:	b00d      	add	sp, #52	; 0x34
 80006ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006bc:	200002e4 	.word	0x200002e4
 80006c0:	20000324 	.word	0x20000324
 80006c4:	200002c4 	.word	0x200002c4
 80006c8:	20000044 	.word	0x20000044
 80006cc:	20000308 	.word	0x20000308
 80006d0:	20000322 	.word	0x20000322
 80006d4:	20000234 	.word	0x20000234
 80006d8:	200001ec 	.word	0x200001ec
 80006dc:	48000400 	.word	0x48000400
 80006e0:	08005f04 	.word	0x08005f04
 80006e4:	20000140 	.word	0x20000140
 80006e8:	40003800 	.word	0x40003800
 80006ec:	200002e8 	.word	0x200002e8
 80006f0:	20000300 	.word	0x20000300
 80006f4:	20000306 	.word	0x20000306

080006f8 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80006fc:	f000 ffd6 	bl	80016ac <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000700:	f000 f876 	bl	80007f0 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000704:	f000 fc1c 	bl	8000f40 <MX_GPIO_Init>
    MX_DMA_Init();
 8000708:	f000 fbfc 	bl	8000f04 <MX_DMA_Init>
    MX_SPI2_Init();
 800070c:	f000 fa42 	bl	8000b94 <MX_SPI2_Init>
    MX_TIM1_Init();
 8000710:	f000 fa7e 	bl	8000c10 <MX_TIM1_Init>
    MX_TIM2_Init();
 8000714:	f000 fb34 	bl	8000d80 <MX_TIM2_Init>
    MX_SPI1_Init();
 8000718:	f000 f9fc 	bl	8000b14 <MX_SPI1_Init>
    MX_USART1_UART_Init();
 800071c:	f000 fbb2 	bl	8000e84 <MX_USART1_UART_Init>
    MX_DAC1_Init();
 8000720:	f000 f9c6 	bl	8000ab0 <MX_DAC1_Init>
    MX_ADC_Init();
 8000724:	f000 f8cc 	bl	80008c0 <MX_ADC_Init>
    /* USER CODE BEGIN 2 */

    HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000728:	4b2b      	ldr	r3, [pc, #172]	; (80007d8 <main+0xe0>)
 800072a:	2100      	movs	r1, #0
 800072c:	0018      	movs	r0, r3
 800072e:	f001 fd5e 	bl	80021ee <HAL_DAC_Start>


    /* Start Timers with OC & Interrupt */
    HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000732:	4b2a      	ldr	r3, [pc, #168]	; (80007dc <main+0xe4>)
 8000734:	2100      	movs	r1, #0
 8000736:	0018      	movs	r0, r3
 8000738:	f003 fafe 	bl	8003d38 <HAL_TIM_OC_Start_IT>
    HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 800073c:	4b28      	ldr	r3, [pc, #160]	; (80007e0 <main+0xe8>)
 800073e:	210c      	movs	r1, #12
 8000740:	0018      	movs	r0, r3
 8000742:	f003 faf9 	bl	8003d38 <HAL_TIM_OC_Start_IT>

    while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	4b26      	ldr	r3, [pc, #152]	; (80007e4 <main+0xec>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	69da      	ldr	r2, [r3, #28]
 800074e:	2380      	movs	r3, #128	; 0x80
 8000750:	025b      	lsls	r3, r3, #9
 8000752:	401a      	ands	r2, r3
 8000754:	2380      	movs	r3, #128	; 0x80
 8000756:	025b      	lsls	r3, r3, #9
 8000758:	429a      	cmp	r2, r3
 800075a:	d0f5      	beq.n	8000748 <main+0x50>
    while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 800075c:	46c0      	nop			; (mov r8, r8)
 800075e:	4b21      	ldr	r3, [pc, #132]	; (80007e4 <main+0xec>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	69da      	ldr	r2, [r3, #28]
 8000764:	2380      	movs	r3, #128	; 0x80
 8000766:	03db      	lsls	r3, r3, #15
 8000768:	401a      	ands	r2, r3
 800076a:	2380      	movs	r3, #128	; 0x80
 800076c:	03db      	lsls	r3, r3, #15
 800076e:	429a      	cmp	r2, r3
 8000770:	d1f5      	bne.n	800075e <main+0x66>

    WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_ADDRESS;
 8000772:	4b1d      	ldr	r3, [pc, #116]	; (80007e8 <main+0xf0>)
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
    WakeUpSelection.AddressLength = UART_ADDRESS_DETECT_7B;
 8000778:	4b1b      	ldr	r3, [pc, #108]	; (80007e8 <main+0xf0>)
 800077a:	2210      	movs	r2, #16
 800077c:	809a      	strh	r2, [r3, #4]
    WakeUpSelection.Address = 0x23; // send "£"
 800077e:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <main+0xf0>)
 8000780:	2223      	movs	r2, #35	; 0x23
 8000782:	719a      	strb	r2, [r3, #6]

    if (HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection) != HAL_OK) {
 8000784:	4b18      	ldr	r3, [pc, #96]	; (80007e8 <main+0xf0>)
 8000786:	4817      	ldr	r0, [pc, #92]	; (80007e4 <main+0xec>)
 8000788:	6819      	ldr	r1, [r3, #0]
 800078a:	685a      	ldr	r2, [r3, #4]
 800078c:	f005 fab6 	bl	8005cfc <HAL_UARTEx_StopModeWakeUpSourceConfig>
 8000790:	1e03      	subs	r3, r0, #0
 8000792:	d001      	beq.n	8000798 <main+0xa0>
        Error_Handler();
 8000794:	f000 fc2c 	bl	8000ff0 <Error_Handler>
    }
    /* Enable the LPUART Wake UP from stop mode Interrupt */
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <main+0xec>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	689a      	ldr	r2, [r3, #8]
 800079e:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <main+0xec>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2180      	movs	r1, #128	; 0x80
 80007a4:	03c9      	lsls	r1, r1, #15
 80007a6:	430a      	orrs	r2, r1
 80007a8:	609a      	str	r2, [r3, #8]
    /* enable MCU wake-up by LPUART */
    HAL_UARTEx_EnableStopMode(&huart1);
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <main+0xec>)
 80007ac:	0018      	movs	r0, r3
 80007ae:	f005 fb0b 	bl	8005dc8 <HAL_UARTEx_EnableStopMode>
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1) {
        HAL_UART_Receive(&huart1, Rx_data, 1, 1000);
 80007b2:	23fa      	movs	r3, #250	; 0xfa
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	490d      	ldr	r1, [pc, #52]	; (80007ec <main+0xf4>)
 80007b8:	480a      	ldr	r0, [pc, #40]	; (80007e4 <main+0xec>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	f004 fb22 	bl	8004e04 <HAL_UART_Receive>
        if (Rx_data[0] == 's') { // should be "¶" in the future
 80007c0:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <main+0xf4>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b73      	cmp	r3, #115	; 0x73
 80007c6:	d1f4      	bne.n	80007b2 <main+0xba>
            HAL_SuspendTick();
 80007c8:	f000 ffd4 	bl	8001774 <HAL_SuspendTick>
            HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80007cc:	2101      	movs	r1, #1
 80007ce:	2001      	movs	r0, #1
 80007d0:	f002 f906 	bl	80029e0 <HAL_PWR_EnterSTOPMode>
            NVIC_SystemReset();
 80007d4:	f7ff fd24 	bl	8000220 <__NVIC_SystemReset>
 80007d8:	200000c8 	.word	0x200000c8
 80007dc:	200001a4 	.word	0x200001a4
 80007e0:	200001ec 	.word	0x200001ec
 80007e4:	20000234 	.word	0x20000234
 80007e8:	200002b8 	.word	0x200002b8
 80007ec:	200002c0 	.word	0x200002c0

080007f0 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
 80007f0:	b590      	push	{r4, r7, lr}
 80007f2:	b097      	sub	sp, #92	; 0x5c
 80007f4:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f6:	2428      	movs	r4, #40	; 0x28
 80007f8:	193b      	adds	r3, r7, r4
 80007fa:	0018      	movs	r0, r3
 80007fc:	2330      	movs	r3, #48	; 0x30
 80007fe:	001a      	movs	r2, r3
 8000800:	2100      	movs	r1, #0
 8000802:	f005 fb5b 	bl	8005ebc <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000806:	2318      	movs	r3, #24
 8000808:	18fb      	adds	r3, r7, r3
 800080a:	0018      	movs	r0, r3
 800080c:	2310      	movs	r3, #16
 800080e:	001a      	movs	r2, r3
 8000810:	2100      	movs	r1, #0
 8000812:	f005 fb53 	bl	8005ebc <memset>
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	0018      	movs	r0, r3
 800081a:	2314      	movs	r3, #20
 800081c:	001a      	movs	r2, r3
 800081e:	2100      	movs	r1, #0
 8000820:	f005 fb4c 	bl	8005ebc <memset>

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_HSI14;
 8000824:	0021      	movs	r1, r4
 8000826:	187b      	adds	r3, r7, r1
 8000828:	2212      	movs	r2, #18
 800082a:	601a      	str	r2, [r3, #0]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800082c:	187b      	adds	r3, r7, r1
 800082e:	2201      	movs	r2, #1
 8000830:	60da      	str	r2, [r3, #12]
    RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000832:	187b      	adds	r3, r7, r1
 8000834:	2201      	movs	r2, #1
 8000836:	615a      	str	r2, [r3, #20]
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000838:	187b      	adds	r3, r7, r1
 800083a:	2210      	movs	r2, #16
 800083c:	611a      	str	r2, [r3, #16]
    RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800083e:	187b      	adds	r3, r7, r1
 8000840:	2210      	movs	r2, #16
 8000842:	619a      	str	r2, [r3, #24]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000844:	187b      	adds	r3, r7, r1
 8000846:	2202      	movs	r2, #2
 8000848:	621a      	str	r2, [r3, #32]
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800084a:	187b      	adds	r3, r7, r1
 800084c:	2200      	movs	r2, #0
 800084e:	625a      	str	r2, [r3, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000850:	187b      	adds	r3, r7, r1
 8000852:	22a0      	movs	r2, #160	; 0xa0
 8000854:	0392      	lsls	r2, r2, #14
 8000856:	629a      	str	r2, [r3, #40]	; 0x28
    RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000858:	187b      	adds	r3, r7, r1
 800085a:	2200      	movs	r2, #0
 800085c:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800085e:	187b      	adds	r3, r7, r1
 8000860:	0018      	movs	r0, r3
 8000862:	f002 f8f1 	bl	8002a48 <HAL_RCC_OscConfig>
 8000866:	1e03      	subs	r3, r0, #0
 8000868:	d001      	beq.n	800086e <SystemClock_Config+0x7e>
        Error_Handler();
 800086a:	f000 fbc1 	bl	8000ff0 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800086e:	2118      	movs	r1, #24
 8000870:	187b      	adds	r3, r7, r1
 8000872:	2207      	movs	r2, #7
 8000874:	601a      	str	r2, [r3, #0]
                                  | RCC_CLOCKTYPE_PCLK1;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000876:	187b      	adds	r3, r7, r1
 8000878:	2202      	movs	r2, #2
 800087a:	605a      	str	r2, [r3, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800087c:	187b      	adds	r3, r7, r1
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000882:	187b      	adds	r3, r7, r1
 8000884:	2200      	movs	r2, #0
 8000886:	60da      	str	r2, [r3, #12]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000888:	187b      	adds	r3, r7, r1
 800088a:	2101      	movs	r1, #1
 800088c:	0018      	movs	r0, r3
 800088e:	f002 fbf5 	bl	800307c <HAL_RCC_ClockConfig>
 8000892:	1e03      	subs	r3, r0, #0
 8000894:	d001      	beq.n	800089a <SystemClock_Config+0xaa>
        Error_Handler();
 8000896:	f000 fbab 	bl	8000ff0 <Error_Handler>
    }
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	2201      	movs	r2, #1
 800089e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	2203      	movs	r2, #3
 80008a4:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	0018      	movs	r0, r3
 80008aa:	f002 fd39 	bl	8003320 <HAL_RCCEx_PeriphCLKConfig>
 80008ae:	1e03      	subs	r3, r0, #0
 80008b0:	d001      	beq.n	80008b6 <SystemClock_Config+0xc6>
        Error_Handler();
 80008b2:	f000 fb9d 	bl	8000ff0 <Error_Handler>
    }
}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	46bd      	mov	sp, r7
 80008ba:	b017      	add	sp, #92	; 0x5c
 80008bc:	bd90      	pop	{r4, r7, pc}
	...

080008c0 <MX_ADC_Init>:
/**
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN ADC_Init 0 */

    /* USER CODE END ADC_Init 0 */

    ADC_ChannelConfTypeDef sConfig = {0};
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	0018      	movs	r0, r3
 80008ca:	230c      	movs	r3, #12
 80008cc:	001a      	movs	r2, r3
 80008ce:	2100      	movs	r1, #0
 80008d0:	f005 faf4 	bl	8005ebc <memset>

    /* USER CODE END ADC_Init 1 */

    /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
    */
    hadc.Instance = ADC1;
 80008d4:	4b74      	ldr	r3, [pc, #464]	; (8000aa8 <MX_ADC_Init+0x1e8>)
 80008d6:	4a75      	ldr	r2, [pc, #468]	; (8000aac <MX_ADC_Init+0x1ec>)
 80008d8:	601a      	str	r2, [r3, #0]
    hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008da:	4b73      	ldr	r3, [pc, #460]	; (8000aa8 <MX_ADC_Init+0x1e8>)
 80008dc:	2200      	movs	r2, #0
 80008de:	605a      	str	r2, [r3, #4]
    hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80008e0:	4b71      	ldr	r3, [pc, #452]	; (8000aa8 <MX_ADC_Init+0x1e8>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
    hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008e6:	4b70      	ldr	r3, [pc, #448]	; (8000aa8 <MX_ADC_Init+0x1e8>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	60da      	str	r2, [r3, #12]
    hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80008ec:	4b6e      	ldr	r3, [pc, #440]	; (8000aa8 <MX_ADC_Init+0x1e8>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	611a      	str	r2, [r3, #16]
    hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008f2:	4b6d      	ldr	r3, [pc, #436]	; (8000aa8 <MX_ADC_Init+0x1e8>)
 80008f4:	2204      	movs	r2, #4
 80008f6:	615a      	str	r2, [r3, #20]
    hadc.Init.LowPowerAutoWait = DISABLE;
 80008f8:	4b6b      	ldr	r3, [pc, #428]	; (8000aa8 <MX_ADC_Init+0x1e8>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	761a      	strb	r2, [r3, #24]
    hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80008fe:	4b6a      	ldr	r3, [pc, #424]	; (8000aa8 <MX_ADC_Init+0x1e8>)
 8000900:	2200      	movs	r2, #0
 8000902:	765a      	strb	r2, [r3, #25]
    hadc.Init.ContinuousConvMode = DISABLE;
 8000904:	4b68      	ldr	r3, [pc, #416]	; (8000aa8 <MX_ADC_Init+0x1e8>)
 8000906:	2200      	movs	r2, #0
 8000908:	769a      	strb	r2, [r3, #26]
    hadc.Init.DiscontinuousConvMode = DISABLE;
 800090a:	4b67      	ldr	r3, [pc, #412]	; (8000aa8 <MX_ADC_Init+0x1e8>)
 800090c:	2200      	movs	r2, #0
 800090e:	76da      	strb	r2, [r3, #27]
    hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000910:	4b65      	ldr	r3, [pc, #404]	; (8000aa8 <MX_ADC_Init+0x1e8>)
 8000912:	22c2      	movs	r2, #194	; 0xc2
 8000914:	32ff      	adds	r2, #255	; 0xff
 8000916:	61da      	str	r2, [r3, #28]
    hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000918:	4b63      	ldr	r3, [pc, #396]	; (8000aa8 <MX_ADC_Init+0x1e8>)
 800091a:	2200      	movs	r2, #0
 800091c:	621a      	str	r2, [r3, #32]
    hadc.Init.DMAContinuousRequests = DISABLE;
 800091e:	4b62      	ldr	r3, [pc, #392]	; (8000aa8 <MX_ADC_Init+0x1e8>)
 8000920:	2224      	movs	r2, #36	; 0x24
 8000922:	2100      	movs	r1, #0
 8000924:	5499      	strb	r1, [r3, r2]
    hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000926:	4b60      	ldr	r3, [pc, #384]	; (8000aa8 <MX_ADC_Init+0x1e8>)
 8000928:	2201      	movs	r2, #1
 800092a:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_ADC_Init(&hadc) != HAL_OK) {
 800092c:	4b5e      	ldr	r3, [pc, #376]	; (8000aa8 <MX_ADC_Init+0x1e8>)
 800092e:	0018      	movs	r0, r3
 8000930:	f000 ff2e 	bl	8001790 <HAL_ADC_Init>
 8000934:	1e03      	subs	r3, r0, #0
 8000936:	d001      	beq.n	800093c <MX_ADC_Init+0x7c>
        Error_Handler();
 8000938:	f000 fb5a 	bl	8000ff0 <Error_Handler>
    }

    /** Configure for the selected ADC regular channel to be converted.
    */
    sConfig.Channel = ADC_CHANNEL_0;
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
    sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	2280      	movs	r2, #128	; 0x80
 8000946:	0152      	lsls	r2, r2, #5
 8000948:	605a      	str	r2, [r3, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	2280      	movs	r2, #128	; 0x80
 800094e:	0552      	lsls	r2, r2, #21
 8000950:	609a      	str	r2, [r3, #8]
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000952:	1d3a      	adds	r2, r7, #4
 8000954:	4b54      	ldr	r3, [pc, #336]	; (8000aa8 <MX_ADC_Init+0x1e8>)
 8000956:	0011      	movs	r1, r2
 8000958:	0018      	movs	r0, r3
 800095a:	f001 f8f3 	bl	8001b44 <HAL_ADC_ConfigChannel>
 800095e:	1e03      	subs	r3, r0, #0
 8000960:	d001      	beq.n	8000966 <MX_ADC_Init+0xa6>
        Error_Handler();
 8000962:	f000 fb45 	bl	8000ff0 <Error_Handler>
    }

    /** Configure for the selected ADC regular channel to be converted.
    */
    sConfig.Channel = ADC_CHANNEL_1;
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	2201      	movs	r2, #1
 800096a:	601a      	str	r2, [r3, #0]
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800096c:	1d3a      	adds	r2, r7, #4
 800096e:	4b4e      	ldr	r3, [pc, #312]	; (8000aa8 <MX_ADC_Init+0x1e8>)
 8000970:	0011      	movs	r1, r2
 8000972:	0018      	movs	r0, r3
 8000974:	f001 f8e6 	bl	8001b44 <HAL_ADC_ConfigChannel>
 8000978:	1e03      	subs	r3, r0, #0
 800097a:	d001      	beq.n	8000980 <MX_ADC_Init+0xc0>
        Error_Handler();
 800097c:	f000 fb38 	bl	8000ff0 <Error_Handler>
    }

    /** Configure for the selected ADC regular channel to be converted.
    */
    sConfig.Channel = ADC_CHANNEL_2;
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	2202      	movs	r2, #2
 8000984:	601a      	str	r2, [r3, #0]
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000986:	1d3a      	adds	r2, r7, #4
 8000988:	4b47      	ldr	r3, [pc, #284]	; (8000aa8 <MX_ADC_Init+0x1e8>)
 800098a:	0011      	movs	r1, r2
 800098c:	0018      	movs	r0, r3
 800098e:	f001 f8d9 	bl	8001b44 <HAL_ADC_ConfigChannel>
 8000992:	1e03      	subs	r3, r0, #0
 8000994:	d001      	beq.n	800099a <MX_ADC_Init+0xda>
        Error_Handler();
 8000996:	f000 fb2b 	bl	8000ff0 <Error_Handler>
    }

    /** Configure for the selected ADC regular channel to be converted.
    */
    sConfig.Channel = ADC_CHANNEL_3;
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	2203      	movs	r2, #3
 800099e:	601a      	str	r2, [r3, #0]
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80009a0:	1d3a      	adds	r2, r7, #4
 80009a2:	4b41      	ldr	r3, [pc, #260]	; (8000aa8 <MX_ADC_Init+0x1e8>)
 80009a4:	0011      	movs	r1, r2
 80009a6:	0018      	movs	r0, r3
 80009a8:	f001 f8cc 	bl	8001b44 <HAL_ADC_ConfigChannel>
 80009ac:	1e03      	subs	r3, r0, #0
 80009ae:	d001      	beq.n	80009b4 <MX_ADC_Init+0xf4>
        Error_Handler();
 80009b0:	f000 fb1e 	bl	8000ff0 <Error_Handler>
    }

    /** Configure for the selected ADC regular channel to be converted.
    */
    sConfig.Channel = ADC_CHANNEL_7;
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	2207      	movs	r2, #7
 80009b8:	601a      	str	r2, [r3, #0]
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80009ba:	1d3a      	adds	r2, r7, #4
 80009bc:	4b3a      	ldr	r3, [pc, #232]	; (8000aa8 <MX_ADC_Init+0x1e8>)
 80009be:	0011      	movs	r1, r2
 80009c0:	0018      	movs	r0, r3
 80009c2:	f001 f8bf 	bl	8001b44 <HAL_ADC_ConfigChannel>
 80009c6:	1e03      	subs	r3, r0, #0
 80009c8:	d001      	beq.n	80009ce <MX_ADC_Init+0x10e>
        Error_Handler();
 80009ca:	f000 fb11 	bl	8000ff0 <Error_Handler>
    }

    /** Configure for the selected ADC regular channel to be converted.
    */
    sConfig.Channel = ADC_CHANNEL_8;
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	2208      	movs	r2, #8
 80009d2:	601a      	str	r2, [r3, #0]
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80009d4:	1d3a      	adds	r2, r7, #4
 80009d6:	4b34      	ldr	r3, [pc, #208]	; (8000aa8 <MX_ADC_Init+0x1e8>)
 80009d8:	0011      	movs	r1, r2
 80009da:	0018      	movs	r0, r3
 80009dc:	f001 f8b2 	bl	8001b44 <HAL_ADC_ConfigChannel>
 80009e0:	1e03      	subs	r3, r0, #0
 80009e2:	d001      	beq.n	80009e8 <MX_ADC_Init+0x128>
        Error_Handler();
 80009e4:	f000 fb04 	bl	8000ff0 <Error_Handler>
    }

    /** Configure for the selected ADC regular channel to be converted.
    */
    sConfig.Channel = ADC_CHANNEL_9;
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	2209      	movs	r2, #9
 80009ec:	601a      	str	r2, [r3, #0]
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80009ee:	1d3a      	adds	r2, r7, #4
 80009f0:	4b2d      	ldr	r3, [pc, #180]	; (8000aa8 <MX_ADC_Init+0x1e8>)
 80009f2:	0011      	movs	r1, r2
 80009f4:	0018      	movs	r0, r3
 80009f6:	f001 f8a5 	bl	8001b44 <HAL_ADC_ConfigChannel>
 80009fa:	1e03      	subs	r3, r0, #0
 80009fc:	d001      	beq.n	8000a02 <MX_ADC_Init+0x142>
        Error_Handler();
 80009fe:	f000 faf7 	bl	8000ff0 <Error_Handler>
    }

    /** Configure for the selected ADC regular channel to be converted.
    */
    sConfig.Channel = ADC_CHANNEL_10;
 8000a02:	1d3b      	adds	r3, r7, #4
 8000a04:	220a      	movs	r2, #10
 8000a06:	601a      	str	r2, [r3, #0]
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000a08:	1d3a      	adds	r2, r7, #4
 8000a0a:	4b27      	ldr	r3, [pc, #156]	; (8000aa8 <MX_ADC_Init+0x1e8>)
 8000a0c:	0011      	movs	r1, r2
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f001 f898 	bl	8001b44 <HAL_ADC_ConfigChannel>
 8000a14:	1e03      	subs	r3, r0, #0
 8000a16:	d001      	beq.n	8000a1c <MX_ADC_Init+0x15c>
        Error_Handler();
 8000a18:	f000 faea 	bl	8000ff0 <Error_Handler>
    }

    /** Configure for the selected ADC regular channel to be converted.
    */
    sConfig.Channel = ADC_CHANNEL_11;
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	220b      	movs	r2, #11
 8000a20:	601a      	str	r2, [r3, #0]
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000a22:	1d3a      	adds	r2, r7, #4
 8000a24:	4b20      	ldr	r3, [pc, #128]	; (8000aa8 <MX_ADC_Init+0x1e8>)
 8000a26:	0011      	movs	r1, r2
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f001 f88b 	bl	8001b44 <HAL_ADC_ConfigChannel>
 8000a2e:	1e03      	subs	r3, r0, #0
 8000a30:	d001      	beq.n	8000a36 <MX_ADC_Init+0x176>
        Error_Handler();
 8000a32:	f000 fadd 	bl	8000ff0 <Error_Handler>
    }

    /** Configure for the selected ADC regular channel to be converted.
    */
    sConfig.Channel = ADC_CHANNEL_12;
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	220c      	movs	r2, #12
 8000a3a:	601a      	str	r2, [r3, #0]
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000a3c:	1d3a      	adds	r2, r7, #4
 8000a3e:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <MX_ADC_Init+0x1e8>)
 8000a40:	0011      	movs	r1, r2
 8000a42:	0018      	movs	r0, r3
 8000a44:	f001 f87e 	bl	8001b44 <HAL_ADC_ConfigChannel>
 8000a48:	1e03      	subs	r3, r0, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_ADC_Init+0x190>
        Error_Handler();
 8000a4c:	f000 fad0 	bl	8000ff0 <Error_Handler>
    }

    /** Configure for the selected ADC regular channel to be converted.
    */
    sConfig.Channel = ADC_CHANNEL_13;
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	220d      	movs	r2, #13
 8000a54:	601a      	str	r2, [r3, #0]
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000a56:	1d3a      	adds	r2, r7, #4
 8000a58:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <MX_ADC_Init+0x1e8>)
 8000a5a:	0011      	movs	r1, r2
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f001 f871 	bl	8001b44 <HAL_ADC_ConfigChannel>
 8000a62:	1e03      	subs	r3, r0, #0
 8000a64:	d001      	beq.n	8000a6a <MX_ADC_Init+0x1aa>
        Error_Handler();
 8000a66:	f000 fac3 	bl	8000ff0 <Error_Handler>
    }

    /** Configure for the selected ADC regular channel to be converted.
    */
    sConfig.Channel = ADC_CHANNEL_14;
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	220e      	movs	r2, #14
 8000a6e:	601a      	str	r2, [r3, #0]
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000a70:	1d3a      	adds	r2, r7, #4
 8000a72:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <MX_ADC_Init+0x1e8>)
 8000a74:	0011      	movs	r1, r2
 8000a76:	0018      	movs	r0, r3
 8000a78:	f001 f864 	bl	8001b44 <HAL_ADC_ConfigChannel>
 8000a7c:	1e03      	subs	r3, r0, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_ADC_Init+0x1c4>
        Error_Handler();
 8000a80:	f000 fab6 	bl	8000ff0 <Error_Handler>
    }

    /** Configure for the selected ADC regular channel to be converted.
    */
    sConfig.Channel = ADC_CHANNEL_15;
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	220f      	movs	r2, #15
 8000a88:	601a      	str	r2, [r3, #0]
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000a8a:	1d3a      	adds	r2, r7, #4
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <MX_ADC_Init+0x1e8>)
 8000a8e:	0011      	movs	r1, r2
 8000a90:	0018      	movs	r0, r3
 8000a92:	f001 f857 	bl	8001b44 <HAL_ADC_ConfigChannel>
 8000a96:	1e03      	subs	r3, r0, #0
 8000a98:	d001      	beq.n	8000a9e <MX_ADC_Init+0x1de>
        Error_Handler();
 8000a9a:	f000 faa9 	bl	8000ff0 <Error_Handler>
    }
    /* USER CODE BEGIN ADC_Init 2 */

    /* USER CODE END ADC_Init 2 */

}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	b004      	add	sp, #16
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	20000044 	.word	0x20000044
 8000aac:	40012400 	.word	0x40012400

08000ab0 <MX_DAC1_Init>:
/**
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN DAC1_Init 0 */
    step = 0;
 8000ab6:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <MX_DAC1_Init+0x58>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	701a      	strb	r2, [r3, #0]
    /* USER CODE END DAC1_Init 0 */

    DAC_ChannelConfTypeDef sConfig = {0};
 8000abc:	003b      	movs	r3, r7
 8000abe:	0018      	movs	r0, r3
 8000ac0:	2308      	movs	r3, #8
 8000ac2:	001a      	movs	r2, r3
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	f005 f9f9 	bl	8005ebc <memset>

    /* USER CODE END DAC1_Init 1 */

    /** DAC Initialization
    */
    hdac1.Instance = DAC;
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <MX_DAC1_Init+0x5c>)
 8000acc:	4a10      	ldr	r2, [pc, #64]	; (8000b10 <MX_DAC1_Init+0x60>)
 8000ace:	601a      	str	r2, [r3, #0]
    if (HAL_DAC_Init(&hdac1) != HAL_OK) {
 8000ad0:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <MX_DAC1_Init+0x5c>)
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f001 fb2a 	bl	800212c <HAL_DAC_Init>
 8000ad8:	1e03      	subs	r3, r0, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_DAC1_Init+0x30>
        Error_Handler();
 8000adc:	f000 fa88 	bl	8000ff0 <Error_Handler>
    }

    /** DAC channel OUT1 config
    */
    sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000ae0:	003b      	movs	r3, r7
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
    sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000ae6:	003b      	movs	r3, r7
 8000ae8:	2200      	movs	r2, #0
 8000aea:	605a      	str	r2, [r3, #4]
    if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8000aec:	0039      	movs	r1, r7
 8000aee:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <MX_DAC1_Init+0x5c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	0018      	movs	r0, r3
 8000af4:	f001 fb3d 	bl	8002172 <HAL_DAC_ConfigChannel>
 8000af8:	1e03      	subs	r3, r0, #0
 8000afa:	d001      	beq.n	8000b00 <MX_DAC1_Init+0x50>
        Error_Handler();
 8000afc:	f000 fa78 	bl	8000ff0 <Error_Handler>
    }
    /* USER CODE BEGIN DAC1_Init 2 */

    /* USER CODE END DAC1_Init 2 */

}
 8000b00:	46c0      	nop			; (mov r8, r8)
 8000b02:	46bd      	mov	sp, r7
 8000b04:	b002      	add	sp, #8
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	200002e4 	.word	0x200002e4
 8000b0c:	200000c8 	.word	0x200000c8
 8000b10:	40007400 	.word	0x40007400

08000b14 <MX_SPI1_Init>:
/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN SPI1_Init 1 */

    /* USER CODE END SPI1_Init 1 */
    /* SPI1 parameter configuration*/
    hspi1.Instance = SPI1;
 8000b18:	4b1c      	ldr	r3, [pc, #112]	; (8000b8c <MX_SPI1_Init+0x78>)
 8000b1a:	4a1d      	ldr	r2, [pc, #116]	; (8000b90 <MX_SPI1_Init+0x7c>)
 8000b1c:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b1e:	4b1b      	ldr	r3, [pc, #108]	; (8000b8c <MX_SPI1_Init+0x78>)
 8000b20:	2282      	movs	r2, #130	; 0x82
 8000b22:	0052      	lsls	r2, r2, #1
 8000b24:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000b26:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <MX_SPI1_Init+0x78>)
 8000b28:	2280      	movs	r2, #128	; 0x80
 8000b2a:	0212      	lsls	r2, r2, #8
 8000b2c:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000b2e:	4b17      	ldr	r3, [pc, #92]	; (8000b8c <MX_SPI1_Init+0x78>)
 8000b30:	22f0      	movs	r2, #240	; 0xf0
 8000b32:	0112      	lsls	r2, r2, #4
 8000b34:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b36:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <MX_SPI1_Init+0x78>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b3c:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <MX_SPI1_Init+0x78>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b42:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <MX_SPI1_Init+0x78>)
 8000b44:	2280      	movs	r2, #128	; 0x80
 8000b46:	0092      	lsls	r2, r2, #2
 8000b48:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000b4a:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <MX_SPI1_Init+0x78>)
 8000b4c:	2218      	movs	r2, #24
 8000b4e:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b50:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <MX_SPI1_Init+0x78>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b56:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <MX_SPI1_Init+0x78>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b5c:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <MX_SPI1_Init+0x78>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 7;
 8000b62:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <MX_SPI1_Init+0x78>)
 8000b64:	2207      	movs	r2, #7
 8000b66:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b68:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <MX_SPI1_Init+0x78>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	631a      	str	r2, [r3, #48]	; 0x30
    hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b6e:	4b07      	ldr	r3, [pc, #28]	; (8000b8c <MX_SPI1_Init+0x78>)
 8000b70:	2208      	movs	r2, #8
 8000b72:	635a      	str	r2, [r3, #52]	; 0x34
    if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <MX_SPI1_Init+0x78>)
 8000b76:	0018      	movs	r0, r3
 8000b78:	f002 fcb0 	bl	80034dc <HAL_SPI_Init>
 8000b7c:	1e03      	subs	r3, r0, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_SPI1_Init+0x70>
        Error_Handler();
 8000b80:	f000 fa36 	bl	8000ff0 <Error_Handler>
    }
    /* USER CODE BEGIN SPI1_Init 2 */

    /* USER CODE END SPI1_Init 2 */

}
 8000b84:	46c0      	nop			; (mov r8, r8)
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	200000dc 	.word	0x200000dc
 8000b90:	40013000 	.word	0x40013000

08000b94 <MX_SPI2_Init>:
/**
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN SPI2_Init 1 */

    /* USER CODE END SPI2_Init 1 */
    /* SPI2 parameter configuration*/
    hspi2.Instance = SPI2;
 8000b98:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <MX_SPI2_Init+0x74>)
 8000b9a:	4a1c      	ldr	r2, [pc, #112]	; (8000c0c <MX_SPI2_Init+0x78>)
 8000b9c:	601a      	str	r2, [r3, #0]
    hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b9e:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <MX_SPI2_Init+0x74>)
 8000ba0:	2282      	movs	r2, #130	; 0x82
 8000ba2:	0052      	lsls	r2, r2, #1
 8000ba4:	605a      	str	r2, [r3, #4]
    hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ba6:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <MX_SPI2_Init+0x74>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
    hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000bac:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <MX_SPI2_Init+0x74>)
 8000bae:	22f0      	movs	r2, #240	; 0xf0
 8000bb0:	0112      	lsls	r2, r2, #4
 8000bb2:	60da      	str	r2, [r3, #12]
    hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bb4:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <MX_SPI2_Init+0x74>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	611a      	str	r2, [r3, #16]
    hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bba:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <MX_SPI2_Init+0x74>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	615a      	str	r2, [r3, #20]
    hspi2.Init.NSS = SPI_NSS_SOFT;
 8000bc0:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <MX_SPI2_Init+0x74>)
 8000bc2:	2280      	movs	r2, #128	; 0x80
 8000bc4:	0092      	lsls	r2, r2, #2
 8000bc6:	619a      	str	r2, [r3, #24]
    hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000bc8:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <MX_SPI2_Init+0x74>)
 8000bca:	2218      	movs	r2, #24
 8000bcc:	61da      	str	r2, [r3, #28]
    hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bce:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <MX_SPI2_Init+0x74>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	621a      	str	r2, [r3, #32]
    hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <MX_SPI2_Init+0x74>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	625a      	str	r2, [r3, #36]	; 0x24
    hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bda:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <MX_SPI2_Init+0x74>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	629a      	str	r2, [r3, #40]	; 0x28
    hspi2.Init.CRCPolynomial = 7;
 8000be0:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <MX_SPI2_Init+0x74>)
 8000be2:	2207      	movs	r2, #7
 8000be4:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000be6:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <MX_SPI2_Init+0x74>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	631a      	str	r2, [r3, #48]	; 0x30
    hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000bec:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <MX_SPI2_Init+0x74>)
 8000bee:	2208      	movs	r2, #8
 8000bf0:	635a      	str	r2, [r3, #52]	; 0x34
    if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8000bf2:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <MX_SPI2_Init+0x74>)
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f002 fc71 	bl	80034dc <HAL_SPI_Init>
 8000bfa:	1e03      	subs	r3, r0, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_SPI2_Init+0x6e>
        Error_Handler();
 8000bfe:	f000 f9f7 	bl	8000ff0 <Error_Handler>
    }
    /* USER CODE BEGIN SPI2_Init 2 */

    /* USER CODE END SPI2_Init 2 */

}
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000140 	.word	0x20000140
 8000c0c:	40003800 	.word	0x40003800

08000c10 <MX_TIM1_Init>:
/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void) {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b096      	sub	sp, #88	; 0x58
 8000c14:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM1_Init 0 */

    /* USER CODE END TIM1_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c16:	2348      	movs	r3, #72	; 0x48
 8000c18:	18fb      	adds	r3, r7, r3
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	2310      	movs	r3, #16
 8000c1e:	001a      	movs	r2, r3
 8000c20:	2100      	movs	r1, #0
 8000c22:	f005 f94b 	bl	8005ebc <memset>
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c26:	2340      	movs	r3, #64	; 0x40
 8000c28:	18fb      	adds	r3, r7, r3
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	2308      	movs	r3, #8
 8000c2e:	001a      	movs	r2, r3
 8000c30:	2100      	movs	r1, #0
 8000c32:	f005 f943 	bl	8005ebc <memset>
    TIM_OC_InitTypeDef sConfigOC = {0};
 8000c36:	2324      	movs	r3, #36	; 0x24
 8000c38:	18fb      	adds	r3, r7, r3
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	231c      	movs	r3, #28
 8000c3e:	001a      	movs	r2, r3
 8000c40:	2100      	movs	r1, #0
 8000c42:	f005 f93b 	bl	8005ebc <memset>
    TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	0018      	movs	r0, r3
 8000c4a:	2320      	movs	r3, #32
 8000c4c:	001a      	movs	r2, r3
 8000c4e:	2100      	movs	r1, #0
 8000c50:	f005 f934 	bl	8005ebc <memset>

    /* USER CODE BEGIN TIM1_Init 1 */

    /* USER CODE END TIM1_Init 1 */
    htim1.Instance = TIM1;
 8000c54:	4b46      	ldr	r3, [pc, #280]	; (8000d70 <MX_TIM1_Init+0x160>)
 8000c56:	4a47      	ldr	r2, [pc, #284]	; (8000d74 <MX_TIM1_Init+0x164>)
 8000c58:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 100 - 1;
 8000c5a:	4b45      	ldr	r3, [pc, #276]	; (8000d70 <MX_TIM1_Init+0x160>)
 8000c5c:	2263      	movs	r2, #99	; 0x63
 8000c5e:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c60:	4b43      	ldr	r3, [pc, #268]	; (8000d70 <MX_TIM1_Init+0x160>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 24000;
 8000c66:	4b42      	ldr	r3, [pc, #264]	; (8000d70 <MX_TIM1_Init+0x160>)
 8000c68:	4a43      	ldr	r2, [pc, #268]	; (8000d78 <MX_TIM1_Init+0x168>)
 8000c6a:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c6c:	4b40      	ldr	r3, [pc, #256]	; (8000d70 <MX_TIM1_Init+0x160>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]
    htim1.Init.RepetitionCounter = 0;
 8000c72:	4b3f      	ldr	r3, [pc, #252]	; (8000d70 <MX_TIM1_Init+0x160>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	615a      	str	r2, [r3, #20]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c78:	4b3d      	ldr	r3, [pc, #244]	; (8000d70 <MX_TIM1_Init+0x160>)
 8000c7a:	2280      	movs	r2, #128	; 0x80
 8000c7c:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000c7e:	4b3c      	ldr	r3, [pc, #240]	; (8000d70 <MX_TIM1_Init+0x160>)
 8000c80:	0018      	movs	r0, r3
 8000c82:	f002 ffb1 	bl	8003be8 <HAL_TIM_Base_Init>
 8000c86:	1e03      	subs	r3, r0, #0
 8000c88:	d001      	beq.n	8000c8e <MX_TIM1_Init+0x7e>
        Error_Handler();
 8000c8a:	f000 f9b1 	bl	8000ff0 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c8e:	2148      	movs	r1, #72	; 0x48
 8000c90:	187b      	adds	r3, r7, r1
 8000c92:	2280      	movs	r2, #128	; 0x80
 8000c94:	0152      	lsls	r2, r2, #5
 8000c96:	601a      	str	r2, [r3, #0]
    if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000c98:	187a      	adds	r2, r7, r1
 8000c9a:	4b35      	ldr	r3, [pc, #212]	; (8000d70 <MX_TIM1_Init+0x160>)
 8000c9c:	0011      	movs	r1, r2
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f003 fab8 	bl	8004214 <HAL_TIM_ConfigClockSource>
 8000ca4:	1e03      	subs	r3, r0, #0
 8000ca6:	d001      	beq.n	8000cac <MX_TIM1_Init+0x9c>
        Error_Handler();
 8000ca8:	f000 f9a2 	bl	8000ff0 <Error_Handler>
    }
    if (HAL_TIM_OC_Init(&htim1) != HAL_OK) {
 8000cac:	4b30      	ldr	r3, [pc, #192]	; (8000d70 <MX_TIM1_Init+0x160>)
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f002 ffea 	bl	8003c88 <HAL_TIM_OC_Init>
 8000cb4:	1e03      	subs	r3, r0, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_TIM1_Init+0xac>
        Error_Handler();
 8000cb8:	f000 f99a 	bl	8000ff0 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cbc:	2140      	movs	r1, #64	; 0x40
 8000cbe:	187b      	adds	r3, r7, r1
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc4:	187b      	adds	r3, r7, r1
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	605a      	str	r2, [r3, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8000cca:	187a      	adds	r2, r7, r1
 8000ccc:	4b28      	ldr	r3, [pc, #160]	; (8000d70 <MX_TIM1_Init+0x160>)
 8000cce:	0011      	movs	r1, r2
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	f003 fecd 	bl	8004a70 <HAL_TIMEx_MasterConfigSynchronization>
 8000cd6:	1e03      	subs	r3, r0, #0
 8000cd8:	d001      	beq.n	8000cde <MX_TIM1_Init+0xce>
        Error_Handler();
 8000cda:	f000 f989 	bl	8000ff0 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000cde:	2124      	movs	r1, #36	; 0x24
 8000ce0:	187b      	adds	r3, r7, r1
 8000ce2:	2230      	movs	r2, #48	; 0x30
 8000ce4:	601a      	str	r2, [r3, #0]
    sConfigOC.Pulse = 12000 - 1;
 8000ce6:	187b      	adds	r3, r7, r1
 8000ce8:	4a24      	ldr	r2, [pc, #144]	; (8000d7c <MX_TIM1_Init+0x16c>)
 8000cea:	605a      	str	r2, [r3, #4]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cec:	187b      	adds	r3, r7, r1
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cf2:	187b      	adds	r3, r7, r1
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	60da      	str	r2, [r3, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cf8:	187b      	adds	r3, r7, r1
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	611a      	str	r2, [r3, #16]
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cfe:	187b      	adds	r3, r7, r1
 8000d00:	2200      	movs	r2, #0
 8000d02:	615a      	str	r2, [r3, #20]
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d04:	187b      	adds	r3, r7, r1
 8000d06:	2200      	movs	r2, #0
 8000d08:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8000d0a:	1879      	adds	r1, r7, r1
 8000d0c:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <MX_TIM1_Init+0x160>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	0018      	movs	r0, r3
 8000d12:	f003 fa27 	bl	8004164 <HAL_TIM_OC_ConfigChannel>
 8000d16:	1e03      	subs	r3, r0, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM1_Init+0x10e>
        Error_Handler();
 8000d1a:	f000 f969 	bl	8000ff0 <Error_Handler>
    }
    sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d1e:	1d3b      	adds	r3, r7, #4
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
    sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d24:	1d3b      	adds	r3, r7, #4
 8000d26:	2200      	movs	r2, #0
 8000d28:	605a      	str	r2, [r3, #4]
    sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d2a:	1d3b      	adds	r3, r7, #4
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]
    sBreakDeadTimeConfig.DeadTime = 0;
 8000d30:	1d3b      	adds	r3, r7, #4
 8000d32:	2200      	movs	r2, #0
 8000d34:	60da      	str	r2, [r3, #12]
    sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	2200      	movs	r2, #0
 8000d3a:	611a      	str	r2, [r3, #16]
    sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d3c:	1d3b      	adds	r3, r7, #4
 8000d3e:	2280      	movs	r2, #128	; 0x80
 8000d40:	0192      	lsls	r2, r2, #6
 8000d42:	615a      	str	r2, [r3, #20]
    sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d44:	1d3b      	adds	r3, r7, #4
 8000d46:	2200      	movs	r2, #0
 8000d48:	61da      	str	r2, [r3, #28]
    if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK) {
 8000d4a:	1d3a      	adds	r2, r7, #4
 8000d4c:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <MX_TIM1_Init+0x160>)
 8000d4e:	0011      	movs	r1, r2
 8000d50:	0018      	movs	r0, r3
 8000d52:	f003 feeb 	bl	8004b2c <HAL_TIMEx_ConfigBreakDeadTime>
 8000d56:	1e03      	subs	r3, r0, #0
 8000d58:	d001      	beq.n	8000d5e <MX_TIM1_Init+0x14e>
        Error_Handler();
 8000d5a:	f000 f949 	bl	8000ff0 <Error_Handler>
    }
    /* USER CODE BEGIN TIM1_Init 2 */

    /* USER CODE END TIM1_Init 2 */
    HAL_TIM_MspPostInit(&htim1);
 8000d5e:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <MX_TIM1_Init+0x160>)
 8000d60:	0018      	movs	r0, r3
 8000d62:	f000 fb5b 	bl	800141c <HAL_TIM_MspPostInit>

}
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	b016      	add	sp, #88	; 0x58
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	200001a4 	.word	0x200001a4
 8000d74:	40012c00 	.word	0x40012c00
 8000d78:	00005dc0 	.word	0x00005dc0
 8000d7c:	00002edf 	.word	0x00002edf

08000d80 <MX_TIM2_Init>:
/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08e      	sub	sp, #56	; 0x38
 8000d84:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM2_Init 0 */

    /* USER CODE END TIM2_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d86:	2328      	movs	r3, #40	; 0x28
 8000d88:	18fb      	adds	r3, r7, r3
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	2310      	movs	r3, #16
 8000d8e:	001a      	movs	r2, r3
 8000d90:	2100      	movs	r1, #0
 8000d92:	f005 f893 	bl	8005ebc <memset>
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d96:	2320      	movs	r3, #32
 8000d98:	18fb      	adds	r3, r7, r3
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	2308      	movs	r3, #8
 8000d9e:	001a      	movs	r2, r3
 8000da0:	2100      	movs	r1, #0
 8000da2:	f005 f88b 	bl	8005ebc <memset>
    TIM_OC_InitTypeDef sConfigOC = {0};
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	0018      	movs	r0, r3
 8000daa:	231c      	movs	r3, #28
 8000dac:	001a      	movs	r2, r3
 8000dae:	2100      	movs	r1, #0
 8000db0:	f005 f884 	bl	8005ebc <memset>

    /* USER CODE BEGIN TIM2_Init 1 */

    /* USER CODE END TIM2_Init 1 */
    htim2.Instance = TIM2;
 8000db4:	4b30      	ldr	r3, [pc, #192]	; (8000e78 <MX_TIM2_Init+0xf8>)
 8000db6:	2280      	movs	r2, #128	; 0x80
 8000db8:	05d2      	lsls	r2, r2, #23
 8000dba:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 100 - 1;
 8000dbc:	4b2e      	ldr	r3, [pc, #184]	; (8000e78 <MX_TIM2_Init+0xf8>)
 8000dbe:	2263      	movs	r2, #99	; 0x63
 8000dc0:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc2:	4b2d      	ldr	r3, [pc, #180]	; (8000e78 <MX_TIM2_Init+0xf8>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 30000 - 1;
 8000dc8:	4b2b      	ldr	r3, [pc, #172]	; (8000e78 <MX_TIM2_Init+0xf8>)
 8000dca:	4a2c      	ldr	r2, [pc, #176]	; (8000e7c <MX_TIM2_Init+0xfc>)
 8000dcc:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dce:	4b2a      	ldr	r3, [pc, #168]	; (8000e78 <MX_TIM2_Init+0xf8>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dd4:	4b28      	ldr	r3, [pc, #160]	; (8000e78 <MX_TIM2_Init+0xf8>)
 8000dd6:	2280      	movs	r2, #128	; 0x80
 8000dd8:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000dda:	4b27      	ldr	r3, [pc, #156]	; (8000e78 <MX_TIM2_Init+0xf8>)
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f002 ff03 	bl	8003be8 <HAL_TIM_Base_Init>
 8000de2:	1e03      	subs	r3, r0, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM2_Init+0x6a>
        Error_Handler();
 8000de6:	f000 f903 	bl	8000ff0 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dea:	2128      	movs	r1, #40	; 0x28
 8000dec:	187b      	adds	r3, r7, r1
 8000dee:	2280      	movs	r2, #128	; 0x80
 8000df0:	0152      	lsls	r2, r2, #5
 8000df2:	601a      	str	r2, [r3, #0]
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000df4:	187a      	adds	r2, r7, r1
 8000df6:	4b20      	ldr	r3, [pc, #128]	; (8000e78 <MX_TIM2_Init+0xf8>)
 8000df8:	0011      	movs	r1, r2
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f003 fa0a 	bl	8004214 <HAL_TIM_ConfigClockSource>
 8000e00:	1e03      	subs	r3, r0, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM2_Init+0x88>
        Error_Handler();
 8000e04:	f000 f8f4 	bl	8000ff0 <Error_Handler>
    }
    if (HAL_TIM_OC_Init(&htim2) != HAL_OK) {
 8000e08:	4b1b      	ldr	r3, [pc, #108]	; (8000e78 <MX_TIM2_Init+0xf8>)
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	f002 ff3c 	bl	8003c88 <HAL_TIM_OC_Init>
 8000e10:	1e03      	subs	r3, r0, #0
 8000e12:	d001      	beq.n	8000e18 <MX_TIM2_Init+0x98>
        Error_Handler();
 8000e14:	f000 f8ec 	bl	8000ff0 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e18:	2120      	movs	r1, #32
 8000e1a:	187b      	adds	r3, r7, r1
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e20:	187b      	adds	r3, r7, r1
 8000e22:	2200      	movs	r2, #0
 8000e24:	605a      	str	r2, [r3, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8000e26:	187a      	adds	r2, r7, r1
 8000e28:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <MX_TIM2_Init+0xf8>)
 8000e2a:	0011      	movs	r1, r2
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f003 fe1f 	bl	8004a70 <HAL_TIMEx_MasterConfigSynchronization>
 8000e32:	1e03      	subs	r3, r0, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM2_Init+0xba>
        Error_Handler();
 8000e36:	f000 f8db 	bl	8000ff0 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	2230      	movs	r2, #48	; 0x30
 8000e3e:	601a      	str	r2, [r3, #0]
    sConfigOC.Pulse = 6000 - 1;
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	4a0f      	ldr	r2, [pc, #60]	; (8000e80 <MX_TIM2_Init+0x100>)
 8000e44:	605a      	str	r2, [r3, #4]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e4c:	1d3b      	adds	r3, r7, #4
 8000e4e:	2200      	movs	r2, #0
 8000e50:	611a      	str	r2, [r3, #16]
    if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) {
 8000e52:	1d39      	adds	r1, r7, #4
 8000e54:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <MX_TIM2_Init+0xf8>)
 8000e56:	220c      	movs	r2, #12
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f003 f983 	bl	8004164 <HAL_TIM_OC_ConfigChannel>
 8000e5e:	1e03      	subs	r3, r0, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM2_Init+0xe6>
        Error_Handler();
 8000e62:	f000 f8c5 	bl	8000ff0 <Error_Handler>
    }
    /* USER CODE BEGIN TIM2_Init 2 */

    /* USER CODE END TIM2_Init 2 */
    HAL_TIM_MspPostInit(&htim2);
 8000e66:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <MX_TIM2_Init+0xf8>)
 8000e68:	0018      	movs	r0, r3
 8000e6a:	f000 fad7 	bl	800141c <HAL_TIM_MspPostInit>

}
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	46bd      	mov	sp, r7
 8000e72:	b00e      	add	sp, #56	; 0x38
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	200001ec 	.word	0x200001ec
 8000e7c:	0000752f 	.word	0x0000752f
 8000e80:	0000176f 	.word	0x0000176f

08000e84 <MX_USART1_UART_Init>:
/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN USART1_Init 0 */
    erpa_seq = 0;
 8000e88:	4b19      	ldr	r3, [pc, #100]	; (8000ef0 <MX_USART1_UART_Init+0x6c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	801a      	strh	r2, [r3, #0]
    pmt_seq = 0;
 8000e8e:	4b19      	ldr	r3, [pc, #100]	; (8000ef4 <MX_USART1_UART_Init+0x70>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	801a      	strh	r2, [r3, #0]
    hk_seq = 0;
 8000e94:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <MX_USART1_UART_Init+0x74>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	801a      	strh	r2, [r3, #0]
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 8000e9a:	4b18      	ldr	r3, [pc, #96]	; (8000efc <MX_USART1_UART_Init+0x78>)
 8000e9c:	4a18      	ldr	r2, [pc, #96]	; (8000f00 <MX_USART1_UART_Init+0x7c>)
 8000e9e:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 8000ea0:	4b16      	ldr	r3, [pc, #88]	; (8000efc <MX_USART1_UART_Init+0x78>)
 8000ea2:	22e1      	movs	r2, #225	; 0xe1
 8000ea4:	0252      	lsls	r2, r2, #9
 8000ea6:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ea8:	4b14      	ldr	r3, [pc, #80]	; (8000efc <MX_USART1_UART_Init+0x78>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8000eae:	4b13      	ldr	r3, [pc, #76]	; (8000efc <MX_USART1_UART_Init+0x78>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8000eb4:	4b11      	ldr	r3, [pc, #68]	; (8000efc <MX_USART1_UART_Init+0x78>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8000eba:	4b10      	ldr	r3, [pc, #64]	; (8000efc <MX_USART1_UART_Init+0x78>)
 8000ebc:	220c      	movs	r2, #12
 8000ebe:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ec0:	4b0e      	ldr	r3, [pc, #56]	; (8000efc <MX_USART1_UART_Init+0x78>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ec6:	4b0d      	ldr	r3, [pc, #52]	; (8000efc <MX_USART1_UART_Init+0x78>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	61da      	str	r2, [r3, #28]
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ecc:	4b0b      	ldr	r3, [pc, #44]	; (8000efc <MX_USART1_UART_Init+0x78>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	621a      	str	r2, [r3, #32]
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ed2:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <MX_USART1_UART_Init+0x78>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000ed8:	4b08      	ldr	r3, [pc, #32]	; (8000efc <MX_USART1_UART_Init+0x78>)
 8000eda:	0018      	movs	r0, r3
 8000edc:	f003 fe94 	bl	8004c08 <HAL_UART_Init>
 8000ee0:	1e03      	subs	r3, r0, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_USART1_UART_Init+0x64>
        Error_Handler();
 8000ee4:	f000 f884 	bl	8000ff0 <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */

}
 8000ee8:	46c0      	nop			; (mov r8, r8)
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	46c0      	nop			; (mov r8, r8)
 8000ef0:	200002fc 	.word	0x200002fc
 8000ef4:	20000306 	.word	0x20000306
 8000ef8:	20000322 	.word	0x20000322
 8000efc:	20000234 	.word	0x20000234
 8000f00:	40013800 	.word	0x40013800

08000f04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0

    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 8000f0a:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <MX_DMA_Init+0x38>)
 8000f0c:	695a      	ldr	r2, [r3, #20]
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <MX_DMA_Init+0x38>)
 8000f10:	2101      	movs	r1, #1
 8000f12:	430a      	orrs	r2, r1
 8000f14:	615a      	str	r2, [r3, #20]
 8000f16:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <MX_DMA_Init+0x38>)
 8000f18:	695b      	ldr	r3, [r3, #20]
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]

    /* DMA interrupt init */
    /* DMA1_Channel1_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2100      	movs	r1, #0
 8000f26:	2009      	movs	r0, #9
 8000f28:	f001 f8ce 	bl	80020c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f2c:	2009      	movs	r0, #9
 8000f2e:	f001 f8e0 	bl	80020f2 <HAL_NVIC_EnableIRQ>

}
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	46bd      	mov	sp, r7
 8000f36:	b002      	add	sp, #8
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	40021000 	.word	0x40021000

08000f40 <MX_GPIO_Init>:
/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void) {
 8000f40:	b590      	push	{r4, r7, lr}
 8000f42:	b089      	sub	sp, #36	; 0x24
 8000f44:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f46:	240c      	movs	r4, #12
 8000f48:	193b      	adds	r3, r7, r4
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	2314      	movs	r3, #20
 8000f4e:	001a      	movs	r2, r3
 8000f50:	2100      	movs	r1, #0
 8000f52:	f004 ffb3 	bl	8005ebc <memset>

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f56:	4b24      	ldr	r3, [pc, #144]	; (8000fe8 <MX_GPIO_Init+0xa8>)
 8000f58:	695a      	ldr	r2, [r3, #20]
 8000f5a:	4b23      	ldr	r3, [pc, #140]	; (8000fe8 <MX_GPIO_Init+0xa8>)
 8000f5c:	2180      	movs	r1, #128	; 0x80
 8000f5e:	0309      	lsls	r1, r1, #12
 8000f60:	430a      	orrs	r2, r1
 8000f62:	615a      	str	r2, [r3, #20]
 8000f64:	4b20      	ldr	r3, [pc, #128]	; (8000fe8 <MX_GPIO_Init+0xa8>)
 8000f66:	695a      	ldr	r2, [r3, #20]
 8000f68:	2380      	movs	r3, #128	; 0x80
 8000f6a:	031b      	lsls	r3, r3, #12
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f72:	4b1d      	ldr	r3, [pc, #116]	; (8000fe8 <MX_GPIO_Init+0xa8>)
 8000f74:	695a      	ldr	r2, [r3, #20]
 8000f76:	4b1c      	ldr	r3, [pc, #112]	; (8000fe8 <MX_GPIO_Init+0xa8>)
 8000f78:	2180      	movs	r1, #128	; 0x80
 8000f7a:	0289      	lsls	r1, r1, #10
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	615a      	str	r2, [r3, #20]
 8000f80:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <MX_GPIO_Init+0xa8>)
 8000f82:	695a      	ldr	r2, [r3, #20]
 8000f84:	2380      	movs	r3, #128	; 0x80
 8000f86:	029b      	lsls	r3, r3, #10
 8000f88:	4013      	ands	r3, r2
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8e:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <MX_GPIO_Init+0xa8>)
 8000f90:	695a      	ldr	r2, [r3, #20]
 8000f92:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <MX_GPIO_Init+0xa8>)
 8000f94:	2180      	movs	r1, #128	; 0x80
 8000f96:	02c9      	lsls	r1, r1, #11
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	615a      	str	r2, [r3, #20]
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <MX_GPIO_Init+0xa8>)
 8000f9e:	695a      	ldr	r2, [r3, #20]
 8000fa0:	2380      	movs	r3, #128	; 0x80
 8000fa2:	02db      	lsls	r3, r3, #11
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, BLUE_LED_Pin | GREEN_LED_Pin, GPIO_PIN_RESET);
 8000faa:	23c0      	movs	r3, #192	; 0xc0
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	480f      	ldr	r0, [pc, #60]	; (8000fec <MX_GPIO_Init+0xac>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	0019      	movs	r1, r3
 8000fb4:	f001 fcf7 	bl	80029a6 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : BLUE_LED_Pin GREEN_LED_Pin */
    GPIO_InitStruct.Pin = BLUE_LED_Pin | GREEN_LED_Pin;
 8000fb8:	193b      	adds	r3, r7, r4
 8000fba:	22c0      	movs	r2, #192	; 0xc0
 8000fbc:	0092      	lsls	r2, r2, #2
 8000fbe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc0:	193b      	adds	r3, r7, r4
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	193b      	adds	r3, r7, r4
 8000fc8:	2200      	movs	r2, #0
 8000fca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fcc:	193b      	adds	r3, r7, r4
 8000fce:	2200      	movs	r2, #0
 8000fd0:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd2:	193b      	adds	r3, r7, r4
 8000fd4:	4a05      	ldr	r2, [pc, #20]	; (8000fec <MX_GPIO_Init+0xac>)
 8000fd6:	0019      	movs	r1, r3
 8000fd8:	0010      	movs	r0, r2
 8000fda:	f001 fb57 	bl	800268c <HAL_GPIO_Init>

}
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	b009      	add	sp, #36	; 0x24
 8000fe4:	bd90      	pop	{r4, r7, pc}
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	48000800 	.word	0x48000800

08000ff0 <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff4:	b672      	cpsid	i
}
 8000ff6:	46c0      	nop			; (mov r8, r8)
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8000ff8:	e7fe      	b.n	8000ff8 <Error_Handler+0x8>
	...

08000ffc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001002:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <HAL_MspInit+0x44>)
 8001004:	699a      	ldr	r2, [r3, #24]
 8001006:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <HAL_MspInit+0x44>)
 8001008:	2101      	movs	r1, #1
 800100a:	430a      	orrs	r2, r1
 800100c:	619a      	str	r2, [r3, #24]
 800100e:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <HAL_MspInit+0x44>)
 8001010:	699b      	ldr	r3, [r3, #24]
 8001012:	2201      	movs	r2, #1
 8001014:	4013      	ands	r3, r2
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800101a:	4b09      	ldr	r3, [pc, #36]	; (8001040 <HAL_MspInit+0x44>)
 800101c:	69da      	ldr	r2, [r3, #28]
 800101e:	4b08      	ldr	r3, [pc, #32]	; (8001040 <HAL_MspInit+0x44>)
 8001020:	2180      	movs	r1, #128	; 0x80
 8001022:	0549      	lsls	r1, r1, #21
 8001024:	430a      	orrs	r2, r1
 8001026:	61da      	str	r2, [r3, #28]
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <HAL_MspInit+0x44>)
 800102a:	69da      	ldr	r2, [r3, #28]
 800102c:	2380      	movs	r3, #128	; 0x80
 800102e:	055b      	lsls	r3, r3, #21
 8001030:	4013      	ands	r3, r2
 8001032:	603b      	str	r3, [r7, #0]
 8001034:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	46bd      	mov	sp, r7
 800103a:	b002      	add	sp, #8
 800103c:	bd80      	pop	{r7, pc}
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	40021000 	.word	0x40021000

08001044 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001044:	b590      	push	{r4, r7, lr}
 8001046:	b08d      	sub	sp, #52	; 0x34
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	241c      	movs	r4, #28
 800104e:	193b      	adds	r3, r7, r4
 8001050:	0018      	movs	r0, r3
 8001052:	2314      	movs	r3, #20
 8001054:	001a      	movs	r2, r3
 8001056:	2100      	movs	r1, #0
 8001058:	f004 ff30 	bl	8005ebc <memset>
  if(hadc->Instance==ADC1)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a4a      	ldr	r2, [pc, #296]	; (800118c <HAL_ADC_MspInit+0x148>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d000      	beq.n	8001068 <HAL_ADC_MspInit+0x24>
 8001066:	e08d      	b.n	8001184 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001068:	4b49      	ldr	r3, [pc, #292]	; (8001190 <HAL_ADC_MspInit+0x14c>)
 800106a:	699a      	ldr	r2, [r3, #24]
 800106c:	4b48      	ldr	r3, [pc, #288]	; (8001190 <HAL_ADC_MspInit+0x14c>)
 800106e:	2180      	movs	r1, #128	; 0x80
 8001070:	0089      	lsls	r1, r1, #2
 8001072:	430a      	orrs	r2, r1
 8001074:	619a      	str	r2, [r3, #24]
 8001076:	4b46      	ldr	r3, [pc, #280]	; (8001190 <HAL_ADC_MspInit+0x14c>)
 8001078:	699a      	ldr	r2, [r3, #24]
 800107a:	2380      	movs	r3, #128	; 0x80
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	4013      	ands	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
 8001082:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001084:	4b42      	ldr	r3, [pc, #264]	; (8001190 <HAL_ADC_MspInit+0x14c>)
 8001086:	695a      	ldr	r2, [r3, #20]
 8001088:	4b41      	ldr	r3, [pc, #260]	; (8001190 <HAL_ADC_MspInit+0x14c>)
 800108a:	2180      	movs	r1, #128	; 0x80
 800108c:	0309      	lsls	r1, r1, #12
 800108e:	430a      	orrs	r2, r1
 8001090:	615a      	str	r2, [r3, #20]
 8001092:	4b3f      	ldr	r3, [pc, #252]	; (8001190 <HAL_ADC_MspInit+0x14c>)
 8001094:	695a      	ldr	r2, [r3, #20]
 8001096:	2380      	movs	r3, #128	; 0x80
 8001098:	031b      	lsls	r3, r3, #12
 800109a:	4013      	ands	r3, r2
 800109c:	617b      	str	r3, [r7, #20]
 800109e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a0:	4b3b      	ldr	r3, [pc, #236]	; (8001190 <HAL_ADC_MspInit+0x14c>)
 80010a2:	695a      	ldr	r2, [r3, #20]
 80010a4:	4b3a      	ldr	r3, [pc, #232]	; (8001190 <HAL_ADC_MspInit+0x14c>)
 80010a6:	2180      	movs	r1, #128	; 0x80
 80010a8:	0289      	lsls	r1, r1, #10
 80010aa:	430a      	orrs	r2, r1
 80010ac:	615a      	str	r2, [r3, #20]
 80010ae:	4b38      	ldr	r3, [pc, #224]	; (8001190 <HAL_ADC_MspInit+0x14c>)
 80010b0:	695a      	ldr	r2, [r3, #20]
 80010b2:	2380      	movs	r3, #128	; 0x80
 80010b4:	029b      	lsls	r3, r3, #10
 80010b6:	4013      	ands	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
 80010ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010bc:	4b34      	ldr	r3, [pc, #208]	; (8001190 <HAL_ADC_MspInit+0x14c>)
 80010be:	695a      	ldr	r2, [r3, #20]
 80010c0:	4b33      	ldr	r3, [pc, #204]	; (8001190 <HAL_ADC_MspInit+0x14c>)
 80010c2:	2180      	movs	r1, #128	; 0x80
 80010c4:	02c9      	lsls	r1, r1, #11
 80010c6:	430a      	orrs	r2, r1
 80010c8:	615a      	str	r2, [r3, #20]
 80010ca:	4b31      	ldr	r3, [pc, #196]	; (8001190 <HAL_ADC_MspInit+0x14c>)
 80010cc:	695a      	ldr	r2, [r3, #20]
 80010ce:	2380      	movs	r3, #128	; 0x80
 80010d0:	02db      	lsls	r3, r3, #11
 80010d2:	4013      	ands	r3, r2
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80010d8:	193b      	adds	r3, r7, r4
 80010da:	223f      	movs	r2, #63	; 0x3f
 80010dc:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010de:	193b      	adds	r3, r7, r4
 80010e0:	2203      	movs	r2, #3
 80010e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	193b      	adds	r3, r7, r4
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ea:	193b      	adds	r3, r7, r4
 80010ec:	4a29      	ldr	r2, [pc, #164]	; (8001194 <HAL_ADC_MspInit+0x150>)
 80010ee:	0019      	movs	r1, r3
 80010f0:	0010      	movs	r0, r2
 80010f2:	f001 facb 	bl	800268c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80010f6:	193b      	adds	r3, r7, r4
 80010f8:	228f      	movs	r2, #143	; 0x8f
 80010fa:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010fc:	193b      	adds	r3, r7, r4
 80010fe:	2203      	movs	r2, #3
 8001100:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	193b      	adds	r3, r7, r4
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001108:	193a      	adds	r2, r7, r4
 800110a:	2390      	movs	r3, #144	; 0x90
 800110c:	05db      	lsls	r3, r3, #23
 800110e:	0011      	movs	r1, r2
 8001110:	0018      	movs	r0, r3
 8001112:	f001 fabb 	bl	800268c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001116:	193b      	adds	r3, r7, r4
 8001118:	2203      	movs	r2, #3
 800111a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800111c:	193b      	adds	r3, r7, r4
 800111e:	2203      	movs	r2, #3
 8001120:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	193b      	adds	r3, r7, r4
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001128:	193b      	adds	r3, r7, r4
 800112a:	4a1b      	ldr	r2, [pc, #108]	; (8001198 <HAL_ADC_MspInit+0x154>)
 800112c:	0019      	movs	r1, r3
 800112e:	0010      	movs	r0, r2
 8001130:	f001 faac 	bl	800268c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001134:	4b19      	ldr	r3, [pc, #100]	; (800119c <HAL_ADC_MspInit+0x158>)
 8001136:	4a1a      	ldr	r2, [pc, #104]	; (80011a0 <HAL_ADC_MspInit+0x15c>)
 8001138:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800113a:	4b18      	ldr	r3, [pc, #96]	; (800119c <HAL_ADC_MspInit+0x158>)
 800113c:	2200      	movs	r2, #0
 800113e:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001140:	4b16      	ldr	r3, [pc, #88]	; (800119c <HAL_ADC_MspInit+0x158>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001146:	4b15      	ldr	r3, [pc, #84]	; (800119c <HAL_ADC_MspInit+0x158>)
 8001148:	2280      	movs	r2, #128	; 0x80
 800114a:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800114c:	4b13      	ldr	r3, [pc, #76]	; (800119c <HAL_ADC_MspInit+0x158>)
 800114e:	2280      	movs	r2, #128	; 0x80
 8001150:	0052      	lsls	r2, r2, #1
 8001152:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <HAL_ADC_MspInit+0x158>)
 8001156:	2280      	movs	r2, #128	; 0x80
 8001158:	00d2      	lsls	r2, r2, #3
 800115a:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 800115c:	4b0f      	ldr	r3, [pc, #60]	; (800119c <HAL_ADC_MspInit+0x158>)
 800115e:	2200      	movs	r2, #0
 8001160:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8001162:	4b0e      	ldr	r3, [pc, #56]	; (800119c <HAL_ADC_MspInit+0x158>)
 8001164:	2200      	movs	r2, #0
 8001166:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001168:	4b0c      	ldr	r3, [pc, #48]	; (800119c <HAL_ADC_MspInit+0x158>)
 800116a:	0018      	movs	r0, r3
 800116c:	f001 f878 	bl	8002260 <HAL_DMA_Init>
 8001170:	1e03      	subs	r3, r0, #0
 8001172:	d001      	beq.n	8001178 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8001174:	f7ff ff3c 	bl	8000ff0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4a08      	ldr	r2, [pc, #32]	; (800119c <HAL_ADC_MspInit+0x158>)
 800117c:	631a      	str	r2, [r3, #48]	; 0x30
 800117e:	4b07      	ldr	r3, [pc, #28]	; (800119c <HAL_ADC_MspInit+0x158>)
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001184:	46c0      	nop			; (mov r8, r8)
 8001186:	46bd      	mov	sp, r7
 8001188:	b00d      	add	sp, #52	; 0x34
 800118a:	bd90      	pop	{r4, r7, pc}
 800118c:	40012400 	.word	0x40012400
 8001190:	40021000 	.word	0x40021000
 8001194:	48000800 	.word	0x48000800
 8001198:	48000400 	.word	0x48000400
 800119c:	20000084 	.word	0x20000084
 80011a0:	40020008 	.word	0x40020008

080011a4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80011a4:	b590      	push	{r4, r7, lr}
 80011a6:	b08b      	sub	sp, #44	; 0x2c
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	2414      	movs	r4, #20
 80011ae:	193b      	adds	r3, r7, r4
 80011b0:	0018      	movs	r0, r3
 80011b2:	2314      	movs	r3, #20
 80011b4:	001a      	movs	r2, r3
 80011b6:	2100      	movs	r1, #0
 80011b8:	f004 fe80 	bl	8005ebc <memset>
  if(hdac->Instance==DAC)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a19      	ldr	r2, [pc, #100]	; (8001228 <HAL_DAC_MspInit+0x84>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d12b      	bne.n	800121e <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80011c6:	4b19      	ldr	r3, [pc, #100]	; (800122c <HAL_DAC_MspInit+0x88>)
 80011c8:	69da      	ldr	r2, [r3, #28]
 80011ca:	4b18      	ldr	r3, [pc, #96]	; (800122c <HAL_DAC_MspInit+0x88>)
 80011cc:	2180      	movs	r1, #128	; 0x80
 80011ce:	0589      	lsls	r1, r1, #22
 80011d0:	430a      	orrs	r2, r1
 80011d2:	61da      	str	r2, [r3, #28]
 80011d4:	4b15      	ldr	r3, [pc, #84]	; (800122c <HAL_DAC_MspInit+0x88>)
 80011d6:	69da      	ldr	r2, [r3, #28]
 80011d8:	2380      	movs	r3, #128	; 0x80
 80011da:	059b      	lsls	r3, r3, #22
 80011dc:	4013      	ands	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
 80011e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e2:	4b12      	ldr	r3, [pc, #72]	; (800122c <HAL_DAC_MspInit+0x88>)
 80011e4:	695a      	ldr	r2, [r3, #20]
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <HAL_DAC_MspInit+0x88>)
 80011e8:	2180      	movs	r1, #128	; 0x80
 80011ea:	0289      	lsls	r1, r1, #10
 80011ec:	430a      	orrs	r2, r1
 80011ee:	615a      	str	r2, [r3, #20]
 80011f0:	4b0e      	ldr	r3, [pc, #56]	; (800122c <HAL_DAC_MspInit+0x88>)
 80011f2:	695a      	ldr	r2, [r3, #20]
 80011f4:	2380      	movs	r3, #128	; 0x80
 80011f6:	029b      	lsls	r3, r3, #10
 80011f8:	4013      	ands	r3, r2
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011fe:	193b      	adds	r3, r7, r4
 8001200:	2210      	movs	r2, #16
 8001202:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001204:	193b      	adds	r3, r7, r4
 8001206:	2203      	movs	r2, #3
 8001208:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	193b      	adds	r3, r7, r4
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001210:	193a      	adds	r2, r7, r4
 8001212:	2390      	movs	r3, #144	; 0x90
 8001214:	05db      	lsls	r3, r3, #23
 8001216:	0011      	movs	r1, r2
 8001218:	0018      	movs	r0, r3
 800121a:	f001 fa37 	bl	800268c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800121e:	46c0      	nop			; (mov r8, r8)
 8001220:	46bd      	mov	sp, r7
 8001222:	b00b      	add	sp, #44	; 0x2c
 8001224:	bd90      	pop	{r4, r7, pc}
 8001226:	46c0      	nop			; (mov r8, r8)
 8001228:	40007400 	.word	0x40007400
 800122c:	40021000 	.word	0x40021000

08001230 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001230:	b590      	push	{r4, r7, lr}
 8001232:	b08d      	sub	sp, #52	; 0x34
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001238:	241c      	movs	r4, #28
 800123a:	193b      	adds	r3, r7, r4
 800123c:	0018      	movs	r0, r3
 800123e:	2314      	movs	r3, #20
 8001240:	001a      	movs	r2, r3
 8001242:	2100      	movs	r1, #0
 8001244:	f004 fe3a 	bl	8005ebc <memset>
  if(hspi->Instance==SPI1)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a4a      	ldr	r2, [pc, #296]	; (8001378 <HAL_SPI_MspInit+0x148>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d156      	bne.n	8001300 <HAL_SPI_MspInit+0xd0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001252:	4b4a      	ldr	r3, [pc, #296]	; (800137c <HAL_SPI_MspInit+0x14c>)
 8001254:	699a      	ldr	r2, [r3, #24]
 8001256:	4b49      	ldr	r3, [pc, #292]	; (800137c <HAL_SPI_MspInit+0x14c>)
 8001258:	2180      	movs	r1, #128	; 0x80
 800125a:	0149      	lsls	r1, r1, #5
 800125c:	430a      	orrs	r2, r1
 800125e:	619a      	str	r2, [r3, #24]
 8001260:	4b46      	ldr	r3, [pc, #280]	; (800137c <HAL_SPI_MspInit+0x14c>)
 8001262:	699a      	ldr	r2, [r3, #24]
 8001264:	2380      	movs	r3, #128	; 0x80
 8001266:	015b      	lsls	r3, r3, #5
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
 800126c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126e:	4b43      	ldr	r3, [pc, #268]	; (800137c <HAL_SPI_MspInit+0x14c>)
 8001270:	695a      	ldr	r2, [r3, #20]
 8001272:	4b42      	ldr	r3, [pc, #264]	; (800137c <HAL_SPI_MspInit+0x14c>)
 8001274:	2180      	movs	r1, #128	; 0x80
 8001276:	0289      	lsls	r1, r1, #10
 8001278:	430a      	orrs	r2, r1
 800127a:	615a      	str	r2, [r3, #20]
 800127c:	4b3f      	ldr	r3, [pc, #252]	; (800137c <HAL_SPI_MspInit+0x14c>)
 800127e:	695a      	ldr	r2, [r3, #20]
 8001280:	2380      	movs	r3, #128	; 0x80
 8001282:	029b      	lsls	r3, r3, #10
 8001284:	4013      	ands	r3, r2
 8001286:	617b      	str	r3, [r7, #20]
 8001288:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128a:	4b3c      	ldr	r3, [pc, #240]	; (800137c <HAL_SPI_MspInit+0x14c>)
 800128c:	695a      	ldr	r2, [r3, #20]
 800128e:	4b3b      	ldr	r3, [pc, #236]	; (800137c <HAL_SPI_MspInit+0x14c>)
 8001290:	2180      	movs	r1, #128	; 0x80
 8001292:	02c9      	lsls	r1, r1, #11
 8001294:	430a      	orrs	r2, r1
 8001296:	615a      	str	r2, [r3, #20]
 8001298:	4b38      	ldr	r3, [pc, #224]	; (800137c <HAL_SPI_MspInit+0x14c>)
 800129a:	695a      	ldr	r2, [r3, #20]
 800129c:	2380      	movs	r3, #128	; 0x80
 800129e:	02db      	lsls	r3, r3, #11
 80012a0:	4013      	ands	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
 80012a4:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80012a6:	193b      	adds	r3, r7, r4
 80012a8:	2260      	movs	r2, #96	; 0x60
 80012aa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ac:	193b      	adds	r3, r7, r4
 80012ae:	2202      	movs	r2, #2
 80012b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	193b      	adds	r3, r7, r4
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012b8:	193b      	adds	r3, r7, r4
 80012ba:	2203      	movs	r2, #3
 80012bc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80012be:	193b      	adds	r3, r7, r4
 80012c0:	2200      	movs	r2, #0
 80012c2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c4:	193a      	adds	r2, r7, r4
 80012c6:	2390      	movs	r3, #144	; 0x90
 80012c8:	05db      	lsls	r3, r3, #23
 80012ca:	0011      	movs	r1, r2
 80012cc:	0018      	movs	r0, r3
 80012ce:	f001 f9dd 	bl	800268c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012d2:	0021      	movs	r1, r4
 80012d4:	187b      	adds	r3, r7, r1
 80012d6:	2220      	movs	r2, #32
 80012d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012da:	187b      	adds	r3, r7, r1
 80012dc:	2202      	movs	r2, #2
 80012de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	187b      	adds	r3, r7, r1
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012e6:	187b      	adds	r3, r7, r1
 80012e8:	2203      	movs	r2, #3
 80012ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80012ec:	187b      	adds	r3, r7, r1
 80012ee:	2200      	movs	r2, #0
 80012f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f2:	187b      	adds	r3, r7, r1
 80012f4:	4a22      	ldr	r2, [pc, #136]	; (8001380 <HAL_SPI_MspInit+0x150>)
 80012f6:	0019      	movs	r1, r3
 80012f8:	0010      	movs	r0, r2
 80012fa:	f001 f9c7 	bl	800268c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80012fe:	e037      	b.n	8001370 <HAL_SPI_MspInit+0x140>
  else if(hspi->Instance==SPI2)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a1f      	ldr	r2, [pc, #124]	; (8001384 <HAL_SPI_MspInit+0x154>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d132      	bne.n	8001370 <HAL_SPI_MspInit+0x140>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800130a:	4b1c      	ldr	r3, [pc, #112]	; (800137c <HAL_SPI_MspInit+0x14c>)
 800130c:	69da      	ldr	r2, [r3, #28]
 800130e:	4b1b      	ldr	r3, [pc, #108]	; (800137c <HAL_SPI_MspInit+0x14c>)
 8001310:	2180      	movs	r1, #128	; 0x80
 8001312:	01c9      	lsls	r1, r1, #7
 8001314:	430a      	orrs	r2, r1
 8001316:	61da      	str	r2, [r3, #28]
 8001318:	4b18      	ldr	r3, [pc, #96]	; (800137c <HAL_SPI_MspInit+0x14c>)
 800131a:	69da      	ldr	r2, [r3, #28]
 800131c:	2380      	movs	r3, #128	; 0x80
 800131e:	01db      	lsls	r3, r3, #7
 8001320:	4013      	ands	r3, r2
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001326:	4b15      	ldr	r3, [pc, #84]	; (800137c <HAL_SPI_MspInit+0x14c>)
 8001328:	695a      	ldr	r2, [r3, #20]
 800132a:	4b14      	ldr	r3, [pc, #80]	; (800137c <HAL_SPI_MspInit+0x14c>)
 800132c:	2180      	movs	r1, #128	; 0x80
 800132e:	02c9      	lsls	r1, r1, #11
 8001330:	430a      	orrs	r2, r1
 8001332:	615a      	str	r2, [r3, #20]
 8001334:	4b11      	ldr	r3, [pc, #68]	; (800137c <HAL_SPI_MspInit+0x14c>)
 8001336:	695a      	ldr	r2, [r3, #20]
 8001338:	2380      	movs	r3, #128	; 0x80
 800133a:	02db      	lsls	r3, r3, #11
 800133c:	4013      	ands	r3, r2
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001342:	211c      	movs	r1, #28
 8001344:	187b      	adds	r3, r7, r1
 8001346:	22e0      	movs	r2, #224	; 0xe0
 8001348:	0212      	lsls	r2, r2, #8
 800134a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134c:	187b      	adds	r3, r7, r1
 800134e:	2202      	movs	r2, #2
 8001350:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	187b      	adds	r3, r7, r1
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001358:	187b      	adds	r3, r7, r1
 800135a:	2203      	movs	r2, #3
 800135c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800135e:	187b      	adds	r3, r7, r1
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001364:	187b      	adds	r3, r7, r1
 8001366:	4a06      	ldr	r2, [pc, #24]	; (8001380 <HAL_SPI_MspInit+0x150>)
 8001368:	0019      	movs	r1, r3
 800136a:	0010      	movs	r0, r2
 800136c:	f001 f98e 	bl	800268c <HAL_GPIO_Init>
}
 8001370:	46c0      	nop			; (mov r8, r8)
 8001372:	46bd      	mov	sp, r7
 8001374:	b00d      	add	sp, #52	; 0x34
 8001376:	bd90      	pop	{r4, r7, pc}
 8001378:	40013000 	.word	0x40013000
 800137c:	40021000 	.word	0x40021000
 8001380:	48000400 	.word	0x48000400
 8001384:	40003800 	.word	0x40003800

08001388 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a1f      	ldr	r2, [pc, #124]	; (8001414 <HAL_TIM_Base_MspInit+0x8c>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d11e      	bne.n	80013d8 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800139a:	4b1f      	ldr	r3, [pc, #124]	; (8001418 <HAL_TIM_Base_MspInit+0x90>)
 800139c:	699a      	ldr	r2, [r3, #24]
 800139e:	4b1e      	ldr	r3, [pc, #120]	; (8001418 <HAL_TIM_Base_MspInit+0x90>)
 80013a0:	2180      	movs	r1, #128	; 0x80
 80013a2:	0109      	lsls	r1, r1, #4
 80013a4:	430a      	orrs	r2, r1
 80013a6:	619a      	str	r2, [r3, #24]
 80013a8:	4b1b      	ldr	r3, [pc, #108]	; (8001418 <HAL_TIM_Base_MspInit+0x90>)
 80013aa:	699a      	ldr	r2, [r3, #24]
 80013ac:	2380      	movs	r3, #128	; 0x80
 80013ae:	011b      	lsls	r3, r3, #4
 80013b0:	4013      	ands	r3, r2
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2100      	movs	r1, #0
 80013ba:	200d      	movs	r0, #13
 80013bc:	f000 fe84 	bl	80020c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80013c0:	200d      	movs	r0, #13
 80013c2:	f000 fe96 	bl	80020f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2100      	movs	r1, #0
 80013ca:	200e      	movs	r0, #14
 80013cc:	f000 fe7c 	bl	80020c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80013d0:	200e      	movs	r0, #14
 80013d2:	f000 fe8e 	bl	80020f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013d6:	e019      	b.n	800140c <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM2)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	2380      	movs	r3, #128	; 0x80
 80013de:	05db      	lsls	r3, r3, #23
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d113      	bne.n	800140c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <HAL_TIM_Base_MspInit+0x90>)
 80013e6:	69da      	ldr	r2, [r3, #28]
 80013e8:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <HAL_TIM_Base_MspInit+0x90>)
 80013ea:	2101      	movs	r1, #1
 80013ec:	430a      	orrs	r2, r1
 80013ee:	61da      	str	r2, [r3, #28]
 80013f0:	4b09      	ldr	r3, [pc, #36]	; (8001418 <HAL_TIM_Base_MspInit+0x90>)
 80013f2:	69db      	ldr	r3, [r3, #28]
 80013f4:	2201      	movs	r2, #1
 80013f6:	4013      	ands	r3, r2
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013fc:	2200      	movs	r2, #0
 80013fe:	2100      	movs	r1, #0
 8001400:	200f      	movs	r0, #15
 8001402:	f000 fe61 	bl	80020c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001406:	200f      	movs	r0, #15
 8001408:	f000 fe73 	bl	80020f2 <HAL_NVIC_EnableIRQ>
}
 800140c:	46c0      	nop			; (mov r8, r8)
 800140e:	46bd      	mov	sp, r7
 8001410:	b004      	add	sp, #16
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40012c00 	.word	0x40012c00
 8001418:	40021000 	.word	0x40021000

0800141c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800141c:	b590      	push	{r4, r7, lr}
 800141e:	b08b      	sub	sp, #44	; 0x2c
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	2414      	movs	r4, #20
 8001426:	193b      	adds	r3, r7, r4
 8001428:	0018      	movs	r0, r3
 800142a:	2314      	movs	r3, #20
 800142c:	001a      	movs	r2, r3
 800142e:	2100      	movs	r1, #0
 8001430:	f004 fd44 	bl	8005ebc <memset>
  if(htim->Instance==TIM1)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a2c      	ldr	r2, [pc, #176]	; (80014ec <HAL_TIM_MspPostInit+0xd0>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d126      	bne.n	800148c <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800143e:	4b2c      	ldr	r3, [pc, #176]	; (80014f0 <HAL_TIM_MspPostInit+0xd4>)
 8001440:	695a      	ldr	r2, [r3, #20]
 8001442:	4b2b      	ldr	r3, [pc, #172]	; (80014f0 <HAL_TIM_MspPostInit+0xd4>)
 8001444:	2180      	movs	r1, #128	; 0x80
 8001446:	0289      	lsls	r1, r1, #10
 8001448:	430a      	orrs	r2, r1
 800144a:	615a      	str	r2, [r3, #20]
 800144c:	4b28      	ldr	r3, [pc, #160]	; (80014f0 <HAL_TIM_MspPostInit+0xd4>)
 800144e:	695a      	ldr	r2, [r3, #20]
 8001450:	2380      	movs	r3, #128	; 0x80
 8001452:	029b      	lsls	r3, r3, #10
 8001454:	4013      	ands	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800145a:	193b      	adds	r3, r7, r4
 800145c:	2280      	movs	r2, #128	; 0x80
 800145e:	0052      	lsls	r2, r2, #1
 8001460:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001462:	0021      	movs	r1, r4
 8001464:	187b      	adds	r3, r7, r1
 8001466:	2202      	movs	r2, #2
 8001468:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	187b      	adds	r3, r7, r1
 800146c:	2200      	movs	r2, #0
 800146e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001470:	187b      	adds	r3, r7, r1
 8001472:	2200      	movs	r2, #0
 8001474:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001476:	187b      	adds	r3, r7, r1
 8001478:	2202      	movs	r2, #2
 800147a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147c:	187a      	adds	r2, r7, r1
 800147e:	2390      	movs	r3, #144	; 0x90
 8001480:	05db      	lsls	r3, r3, #23
 8001482:	0011      	movs	r1, r2
 8001484:	0018      	movs	r0, r3
 8001486:	f001 f901 	bl	800268c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800148a:	e02a      	b.n	80014e2 <HAL_TIM_MspPostInit+0xc6>
  else if(htim->Instance==TIM2)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	2380      	movs	r3, #128	; 0x80
 8001492:	05db      	lsls	r3, r3, #23
 8001494:	429a      	cmp	r2, r3
 8001496:	d124      	bne.n	80014e2 <HAL_TIM_MspPostInit+0xc6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001498:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <HAL_TIM_MspPostInit+0xd4>)
 800149a:	695a      	ldr	r2, [r3, #20]
 800149c:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <HAL_TIM_MspPostInit+0xd4>)
 800149e:	2180      	movs	r1, #128	; 0x80
 80014a0:	02c9      	lsls	r1, r1, #11
 80014a2:	430a      	orrs	r2, r1
 80014a4:	615a      	str	r2, [r3, #20]
 80014a6:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <HAL_TIM_MspPostInit+0xd4>)
 80014a8:	695a      	ldr	r2, [r3, #20]
 80014aa:	2380      	movs	r3, #128	; 0x80
 80014ac:	02db      	lsls	r3, r3, #11
 80014ae:	4013      	ands	r3, r2
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80014b4:	2114      	movs	r1, #20
 80014b6:	187b      	adds	r3, r7, r1
 80014b8:	2280      	movs	r2, #128	; 0x80
 80014ba:	0112      	lsls	r2, r2, #4
 80014bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014be:	187b      	adds	r3, r7, r1
 80014c0:	2202      	movs	r2, #2
 80014c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	187b      	adds	r3, r7, r1
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ca:	187b      	adds	r3, r7, r1
 80014cc:	2200      	movs	r2, #0
 80014ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80014d0:	187b      	adds	r3, r7, r1
 80014d2:	2202      	movs	r2, #2
 80014d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d6:	187b      	adds	r3, r7, r1
 80014d8:	4a06      	ldr	r2, [pc, #24]	; (80014f4 <HAL_TIM_MspPostInit+0xd8>)
 80014da:	0019      	movs	r1, r3
 80014dc:	0010      	movs	r0, r2
 80014de:	f001 f8d5 	bl	800268c <HAL_GPIO_Init>
}
 80014e2:	46c0      	nop			; (mov r8, r8)
 80014e4:	46bd      	mov	sp, r7
 80014e6:	b00b      	add	sp, #44	; 0x2c
 80014e8:	bd90      	pop	{r4, r7, pc}
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	40012c00 	.word	0x40012c00
 80014f0:	40021000 	.word	0x40021000
 80014f4:	48000400 	.word	0x48000400

080014f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014f8:	b590      	push	{r4, r7, lr}
 80014fa:	b08b      	sub	sp, #44	; 0x2c
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001500:	2414      	movs	r4, #20
 8001502:	193b      	adds	r3, r7, r4
 8001504:	0018      	movs	r0, r3
 8001506:	2314      	movs	r3, #20
 8001508:	001a      	movs	r2, r3
 800150a:	2100      	movs	r1, #0
 800150c:	f004 fcd6 	bl	8005ebc <memset>
  if(huart->Instance==USART1)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a21      	ldr	r2, [pc, #132]	; (800159c <HAL_UART_MspInit+0xa4>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d13b      	bne.n	8001592 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800151a:	4b21      	ldr	r3, [pc, #132]	; (80015a0 <HAL_UART_MspInit+0xa8>)
 800151c:	699a      	ldr	r2, [r3, #24]
 800151e:	4b20      	ldr	r3, [pc, #128]	; (80015a0 <HAL_UART_MspInit+0xa8>)
 8001520:	2180      	movs	r1, #128	; 0x80
 8001522:	01c9      	lsls	r1, r1, #7
 8001524:	430a      	orrs	r2, r1
 8001526:	619a      	str	r2, [r3, #24]
 8001528:	4b1d      	ldr	r3, [pc, #116]	; (80015a0 <HAL_UART_MspInit+0xa8>)
 800152a:	699a      	ldr	r2, [r3, #24]
 800152c:	2380      	movs	r3, #128	; 0x80
 800152e:	01db      	lsls	r3, r3, #7
 8001530:	4013      	ands	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
 8001534:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001536:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <HAL_UART_MspInit+0xa8>)
 8001538:	695a      	ldr	r2, [r3, #20]
 800153a:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <HAL_UART_MspInit+0xa8>)
 800153c:	2180      	movs	r1, #128	; 0x80
 800153e:	0289      	lsls	r1, r1, #10
 8001540:	430a      	orrs	r2, r1
 8001542:	615a      	str	r2, [r3, #20]
 8001544:	4b16      	ldr	r3, [pc, #88]	; (80015a0 <HAL_UART_MspInit+0xa8>)
 8001546:	695a      	ldr	r2, [r3, #20]
 8001548:	2380      	movs	r3, #128	; 0x80
 800154a:	029b      	lsls	r3, r3, #10
 800154c:	4013      	ands	r3, r2
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001552:	193b      	adds	r3, r7, r4
 8001554:	22c0      	movs	r2, #192	; 0xc0
 8001556:	00d2      	lsls	r2, r2, #3
 8001558:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155a:	0021      	movs	r1, r4
 800155c:	187b      	adds	r3, r7, r1
 800155e:	2202      	movs	r2, #2
 8001560:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	187b      	adds	r3, r7, r1
 8001564:	2200      	movs	r2, #0
 8001566:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001568:	187b      	adds	r3, r7, r1
 800156a:	2203      	movs	r2, #3
 800156c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800156e:	187b      	adds	r3, r7, r1
 8001570:	2201      	movs	r2, #1
 8001572:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001574:	187a      	adds	r2, r7, r1
 8001576:	2390      	movs	r3, #144	; 0x90
 8001578:	05db      	lsls	r3, r3, #23
 800157a:	0011      	movs	r1, r2
 800157c:	0018      	movs	r0, r3
 800157e:	f001 f885 	bl	800268c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001582:	2200      	movs	r2, #0
 8001584:	2100      	movs	r1, #0
 8001586:	201b      	movs	r0, #27
 8001588:	f000 fd9e 	bl	80020c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800158c:	201b      	movs	r0, #27
 800158e:	f000 fdb0 	bl	80020f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001592:	46c0      	nop			; (mov r8, r8)
 8001594:	46bd      	mov	sp, r7
 8001596:	b00b      	add	sp, #44	; 0x2c
 8001598:	bd90      	pop	{r4, r7, pc}
 800159a:	46c0      	nop			; (mov r8, r8)
 800159c:	40013800 	.word	0x40013800
 80015a0:	40021000 	.word	0x40021000

080015a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015a8:	e7fe      	b.n	80015a8 <NMI_Handler+0x4>

080015aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ae:	e7fe      	b.n	80015ae <HardFault_Handler+0x4>

080015b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80015b4:	46c0      	nop			; (mov r8, r8)
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015be:	46c0      	nop			; (mov r8, r8)
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015c8:	f000 f8b8 	bl	800173c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015cc:	46c0      	nop			; (mov r8, r8)
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
	...

080015d4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80015d8:	4b03      	ldr	r3, [pc, #12]	; (80015e8 <DMA1_Channel1_IRQHandler+0x14>)
 80015da:	0018      	movs	r0, r3
 80015dc:	f000 ff6b 	bl	80024b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015e0:	46c0      	nop			; (mov r8, r8)
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	46c0      	nop			; (mov r8, r8)
 80015e8:	20000084 	.word	0x20000084

080015ec <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015f0:	4b03      	ldr	r3, [pc, #12]	; (8001600 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80015f2:	0018      	movs	r0, r3
 80015f4:	f002 fca0 	bl	8003f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80015f8:	46c0      	nop			; (mov r8, r8)
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	200001a4 	.word	0x200001a4

08001604 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001608:	4b03      	ldr	r3, [pc, #12]	; (8001618 <TIM1_CC_IRQHandler+0x14>)
 800160a:	0018      	movs	r0, r3
 800160c:	f002 fc94 	bl	8003f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001610:	46c0      	nop			; (mov r8, r8)
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	46c0      	nop			; (mov r8, r8)
 8001618:	200001a4 	.word	0x200001a4

0800161c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001620:	4b03      	ldr	r3, [pc, #12]	; (8001630 <TIM2_IRQHandler+0x14>)
 8001622:	0018      	movs	r0, r3
 8001624:	f002 fc88 	bl	8003f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001628:	46c0      	nop			; (mov r8, r8)
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	46c0      	nop			; (mov r8, r8)
 8001630:	200001ec 	.word	0x200001ec

08001634 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001638:	4b03      	ldr	r3, [pc, #12]	; (8001648 <USART1_IRQHandler+0x14>)
 800163a:	0018      	movs	r0, r3
 800163c:	f003 fcbe 	bl	8004fbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001640:	46c0      	nop			; (mov r8, r8)
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	46c0      	nop			; (mov r8, r8)
 8001648:	20000234 	.word	0x20000234

0800164c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001650:	46c0      	nop			; (mov r8, r8)
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
	...

08001658 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001658:	480d      	ldr	r0, [pc, #52]	; (8001690 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800165a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800165c:	480d      	ldr	r0, [pc, #52]	; (8001694 <LoopForever+0x6>)
  ldr r1, =_edata
 800165e:	490e      	ldr	r1, [pc, #56]	; (8001698 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001660:	4a0e      	ldr	r2, [pc, #56]	; (800169c <LoopForever+0xe>)
  movs r3, #0
 8001662:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001664:	e002      	b.n	800166c <LoopCopyDataInit>

08001666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800166a:	3304      	adds	r3, #4

0800166c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800166c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001670:	d3f9      	bcc.n	8001666 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001672:	4a0b      	ldr	r2, [pc, #44]	; (80016a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001674:	4c0b      	ldr	r4, [pc, #44]	; (80016a4 <LoopForever+0x16>)
  movs r3, #0
 8001676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001678:	e001      	b.n	800167e <LoopFillZerobss>

0800167a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800167a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800167c:	3204      	adds	r2, #4

0800167e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001680:	d3fb      	bcc.n	800167a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001682:	f7ff ffe3 	bl	800164c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001686:	f004 fbf5 	bl	8005e74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800168a:	f7ff f835 	bl	80006f8 <main>

0800168e <LoopForever>:

LoopForever:
    b LoopForever
 800168e:	e7fe      	b.n	800168e <LoopForever>
  ldr   r0, =_estack
 8001690:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001694:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001698:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 800169c:	08005f28 	.word	0x08005f28
  ldr r2, =_sbss
 80016a0:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 80016a4:	2000032c 	.word	0x2000032c

080016a8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016a8:	e7fe      	b.n	80016a8 <ADC1_COMP_IRQHandler>
	...

080016ac <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016b0:	4b07      	ldr	r3, [pc, #28]	; (80016d0 <HAL_Init+0x24>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <HAL_Init+0x24>)
 80016b6:	2110      	movs	r1, #16
 80016b8:	430a      	orrs	r2, r1
 80016ba:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80016bc:	2003      	movs	r0, #3
 80016be:	f000 f809 	bl	80016d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016c2:	f7ff fc9b 	bl	8000ffc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	0018      	movs	r0, r3
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	46c0      	nop			; (mov r8, r8)
 80016d0:	40022000 	.word	0x40022000

080016d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d4:	b590      	push	{r4, r7, lr}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016dc:	4b14      	ldr	r3, [pc, #80]	; (8001730 <HAL_InitTick+0x5c>)
 80016de:	681c      	ldr	r4, [r3, #0]
 80016e0:	4b14      	ldr	r3, [pc, #80]	; (8001734 <HAL_InitTick+0x60>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	0019      	movs	r1, r3
 80016e6:	23fa      	movs	r3, #250	; 0xfa
 80016e8:	0098      	lsls	r0, r3, #2
 80016ea:	f7fe fd0d 	bl	8000108 <__udivsi3>
 80016ee:	0003      	movs	r3, r0
 80016f0:	0019      	movs	r1, r3
 80016f2:	0020      	movs	r0, r4
 80016f4:	f7fe fd08 	bl	8000108 <__udivsi3>
 80016f8:	0003      	movs	r3, r0
 80016fa:	0018      	movs	r0, r3
 80016fc:	f000 fd09 	bl	8002112 <HAL_SYSTICK_Config>
 8001700:	1e03      	subs	r3, r0, #0
 8001702:	d001      	beq.n	8001708 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e00f      	b.n	8001728 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2b03      	cmp	r3, #3
 800170c:	d80b      	bhi.n	8001726 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	2301      	movs	r3, #1
 8001712:	425b      	negs	r3, r3
 8001714:	2200      	movs	r2, #0
 8001716:	0018      	movs	r0, r3
 8001718:	f000 fcd6 	bl	80020c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <HAL_InitTick+0x64>)
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001722:	2300      	movs	r3, #0
 8001724:	e000      	b.n	8001728 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
}
 8001728:	0018      	movs	r0, r3
 800172a:	46bd      	mov	sp, r7
 800172c:	b003      	add	sp, #12
 800172e:	bd90      	pop	{r4, r7, pc}
 8001730:	2000001c 	.word	0x2000001c
 8001734:	20000024 	.word	0x20000024
 8001738:	20000020 	.word	0x20000020

0800173c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001740:	4b05      	ldr	r3, [pc, #20]	; (8001758 <HAL_IncTick+0x1c>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	001a      	movs	r2, r3
 8001746:	4b05      	ldr	r3, [pc, #20]	; (800175c <HAL_IncTick+0x20>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	18d2      	adds	r2, r2, r3
 800174c:	4b03      	ldr	r3, [pc, #12]	; (800175c <HAL_IncTick+0x20>)
 800174e:	601a      	str	r2, [r3, #0]
}
 8001750:	46c0      	nop			; (mov r8, r8)
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	46c0      	nop			; (mov r8, r8)
 8001758:	20000024 	.word	0x20000024
 800175c:	20000328 	.word	0x20000328

08001760 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  return uwTick;
 8001764:	4b02      	ldr	r3, [pc, #8]	; (8001770 <HAL_GetTick+0x10>)
 8001766:	681b      	ldr	r3, [r3, #0]
}
 8001768:	0018      	movs	r0, r3
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	46c0      	nop			; (mov r8, r8)
 8001770:	20000328 	.word	0x20000328

08001774 <HAL_SuspendTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)

{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8001778:	4b04      	ldr	r3, [pc, #16]	; (800178c <HAL_SuspendTick+0x18>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4b03      	ldr	r3, [pc, #12]	; (800178c <HAL_SuspendTick+0x18>)
 800177e:	2102      	movs	r1, #2
 8001780:	438a      	bics	r2, r1
 8001782:	601a      	str	r2, [r3, #0]
}
 8001784:	46c0      	nop			; (mov r8, r8)
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	e000e010 	.word	0xe000e010

08001790 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001798:	230f      	movs	r3, #15
 800179a:	18fb      	adds	r3, r7, r3
 800179c:	2200      	movs	r2, #0
 800179e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e125      	b.n	80019fa <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d10a      	bne.n	80017cc <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2234      	movs	r2, #52	; 0x34
 80017c0:	2100      	movs	r1, #0
 80017c2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	0018      	movs	r0, r3
 80017c8:	f7ff fc3c 	bl	8001044 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017d0:	2210      	movs	r2, #16
 80017d2:	4013      	ands	r3, r2
 80017d4:	d000      	beq.n	80017d8 <HAL_ADC_Init+0x48>
 80017d6:	e103      	b.n	80019e0 <HAL_ADC_Init+0x250>
 80017d8:	230f      	movs	r3, #15
 80017da:	18fb      	adds	r3, r7, r3
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d000      	beq.n	80017e4 <HAL_ADC_Init+0x54>
 80017e2:	e0fd      	b.n	80019e0 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	2204      	movs	r2, #4
 80017ec:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80017ee:	d000      	beq.n	80017f2 <HAL_ADC_Init+0x62>
 80017f0:	e0f6      	b.n	80019e0 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017f6:	4a83      	ldr	r2, [pc, #524]	; (8001a04 <HAL_ADC_Init+0x274>)
 80017f8:	4013      	ands	r3, r2
 80017fa:	2202      	movs	r2, #2
 80017fc:	431a      	orrs	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	2203      	movs	r2, #3
 800180a:	4013      	ands	r3, r2
 800180c:	2b01      	cmp	r3, #1
 800180e:	d112      	bne.n	8001836 <HAL_ADC_Init+0xa6>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2201      	movs	r2, #1
 8001818:	4013      	ands	r3, r2
 800181a:	2b01      	cmp	r3, #1
 800181c:	d009      	beq.n	8001832 <HAL_ADC_Init+0xa2>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	68da      	ldr	r2, [r3, #12]
 8001824:	2380      	movs	r3, #128	; 0x80
 8001826:	021b      	lsls	r3, r3, #8
 8001828:	401a      	ands	r2, r3
 800182a:	2380      	movs	r3, #128	; 0x80
 800182c:	021b      	lsls	r3, r3, #8
 800182e:	429a      	cmp	r2, r3
 8001830:	d101      	bne.n	8001836 <HAL_ADC_Init+0xa6>
 8001832:	2301      	movs	r3, #1
 8001834:	e000      	b.n	8001838 <HAL_ADC_Init+0xa8>
 8001836:	2300      	movs	r3, #0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d116      	bne.n	800186a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	2218      	movs	r2, #24
 8001844:	4393      	bics	r3, r2
 8001846:	0019      	movs	r1, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	430a      	orrs	r2, r1
 8001852:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	0899      	lsrs	r1, r3, #2
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685a      	ldr	r2, [r3, #4]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	430a      	orrs	r2, r1
 8001868:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	68da      	ldr	r2, [r3, #12]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4964      	ldr	r1, [pc, #400]	; (8001a08 <HAL_ADC_Init+0x278>)
 8001876:	400a      	ands	r2, r1
 8001878:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	7e1b      	ldrb	r3, [r3, #24]
 800187e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	7e5b      	ldrb	r3, [r3, #25]
 8001884:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001886:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	7e9b      	ldrb	r3, [r3, #26]
 800188c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800188e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001894:	2b01      	cmp	r3, #1
 8001896:	d002      	beq.n	800189e <HAL_ADC_Init+0x10e>
 8001898:	2380      	movs	r3, #128	; 0x80
 800189a:	015b      	lsls	r3, r3, #5
 800189c:	e000      	b.n	80018a0 <HAL_ADC_Init+0x110>
 800189e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80018a0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80018a6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d101      	bne.n	80018b4 <HAL_ADC_Init+0x124>
 80018b0:	2304      	movs	r3, #4
 80018b2:	e000      	b.n	80018b6 <HAL_ADC_Init+0x126>
 80018b4:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80018b6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2124      	movs	r1, #36	; 0x24
 80018bc:	5c5b      	ldrb	r3, [r3, r1]
 80018be:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80018c0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	7edb      	ldrb	r3, [r3, #27]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d115      	bne.n	80018fc <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	7e9b      	ldrb	r3, [r3, #26]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d105      	bne.n	80018e4 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	2280      	movs	r2, #128	; 0x80
 80018dc:	0252      	lsls	r2, r2, #9
 80018de:	4313      	orrs	r3, r2
 80018e0:	60bb      	str	r3, [r7, #8]
 80018e2:	e00b      	b.n	80018fc <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018e8:	2220      	movs	r2, #32
 80018ea:	431a      	orrs	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018f4:	2201      	movs	r2, #1
 80018f6:	431a      	orrs	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	69da      	ldr	r2, [r3, #28]
 8001900:	23c2      	movs	r3, #194	; 0xc2
 8001902:	33ff      	adds	r3, #255	; 0xff
 8001904:	429a      	cmp	r2, r3
 8001906:	d007      	beq.n	8001918 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001910:	4313      	orrs	r3, r2
 8001912:	68ba      	ldr	r2, [r7, #8]
 8001914:	4313      	orrs	r3, r2
 8001916:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	68d9      	ldr	r1, [r3, #12]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	68ba      	ldr	r2, [r7, #8]
 8001924:	430a      	orrs	r2, r1
 8001926:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800192c:	2380      	movs	r3, #128	; 0x80
 800192e:	055b      	lsls	r3, r3, #21
 8001930:	429a      	cmp	r2, r3
 8001932:	d01b      	beq.n	800196c <HAL_ADC_Init+0x1dc>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001938:	2b01      	cmp	r3, #1
 800193a:	d017      	beq.n	800196c <HAL_ADC_Init+0x1dc>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001940:	2b02      	cmp	r3, #2
 8001942:	d013      	beq.n	800196c <HAL_ADC_Init+0x1dc>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001948:	2b03      	cmp	r3, #3
 800194a:	d00f      	beq.n	800196c <HAL_ADC_Init+0x1dc>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001950:	2b04      	cmp	r3, #4
 8001952:	d00b      	beq.n	800196c <HAL_ADC_Init+0x1dc>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001958:	2b05      	cmp	r3, #5
 800195a:	d007      	beq.n	800196c <HAL_ADC_Init+0x1dc>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001960:	2b06      	cmp	r3, #6
 8001962:	d003      	beq.n	800196c <HAL_ADC_Init+0x1dc>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001968:	2b07      	cmp	r3, #7
 800196a:	d112      	bne.n	8001992 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	695a      	ldr	r2, [r3, #20]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2107      	movs	r1, #7
 8001978:	438a      	bics	r2, r1
 800197a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6959      	ldr	r1, [r3, #20]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001986:	2207      	movs	r2, #7
 8001988:	401a      	ands	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	430a      	orrs	r2, r1
 8001990:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	4a1c      	ldr	r2, [pc, #112]	; (8001a0c <HAL_ADC_Init+0x27c>)
 800199a:	4013      	ands	r3, r2
 800199c:	68ba      	ldr	r2, [r7, #8]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d10b      	bne.n	80019ba <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ac:	2203      	movs	r2, #3
 80019ae:	4393      	bics	r3, r2
 80019b0:	2201      	movs	r2, #1
 80019b2:	431a      	orrs	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80019b8:	e01c      	b.n	80019f4 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019be:	2212      	movs	r2, #18
 80019c0:	4393      	bics	r3, r2
 80019c2:	2210      	movs	r2, #16
 80019c4:	431a      	orrs	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ce:	2201      	movs	r2, #1
 80019d0:	431a      	orrs	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80019d6:	230f      	movs	r3, #15
 80019d8:	18fb      	adds	r3, r7, r3
 80019da:	2201      	movs	r2, #1
 80019dc:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80019de:	e009      	b.n	80019f4 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019e4:	2210      	movs	r2, #16
 80019e6:	431a      	orrs	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80019ec:	230f      	movs	r3, #15
 80019ee:	18fb      	adds	r3, r7, r3
 80019f0:	2201      	movs	r2, #1
 80019f2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80019f4:	230f      	movs	r3, #15
 80019f6:	18fb      	adds	r3, r7, r3
 80019f8:	781b      	ldrb	r3, [r3, #0]
}
 80019fa:	0018      	movs	r0, r3
 80019fc:	46bd      	mov	sp, r7
 80019fe:	b004      	add	sp, #16
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	46c0      	nop			; (mov r8, r8)
 8001a04:	fffffefd 	.word	0xfffffefd
 8001a08:	fffe0219 	.word	0xfffe0219
 8001a0c:	833fffe7 	.word	0x833fffe7

08001a10 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001a10:	b590      	push	{r4, r7, lr}
 8001a12:	b087      	sub	sp, #28
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a1c:	2317      	movs	r3, #23
 8001a1e:	18fb      	adds	r3, r7, r3
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	2204      	movs	r2, #4
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	d15e      	bne.n	8001aee <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2234      	movs	r2, #52	; 0x34
 8001a34:	5c9b      	ldrb	r3, [r3, r2]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d101      	bne.n	8001a3e <HAL_ADC_Start_DMA+0x2e>
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	e05e      	b.n	8001afc <HAL_ADC_Start_DMA+0xec>
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2234      	movs	r2, #52	; 0x34
 8001a42:	2101      	movs	r1, #1
 8001a44:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	7e5b      	ldrb	r3, [r3, #25]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d007      	beq.n	8001a5e <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001a4e:	2317      	movs	r3, #23
 8001a50:	18fc      	adds	r4, r7, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	0018      	movs	r0, r3
 8001a56:	f000 f983 	bl	8001d60 <ADC_Enable>
 8001a5a:	0003      	movs	r3, r0
 8001a5c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001a5e:	2317      	movs	r3, #23
 8001a60:	18fb      	adds	r3, r7, r3
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d146      	bne.n	8001af6 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a6c:	4a25      	ldr	r2, [pc, #148]	; (8001b04 <HAL_ADC_Start_DMA+0xf4>)
 8001a6e:	4013      	ands	r3, r2
 8001a70:	2280      	movs	r2, #128	; 0x80
 8001a72:	0052      	lsls	r2, r2, #1
 8001a74:	431a      	orrs	r2, r3
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2234      	movs	r2, #52	; 0x34
 8001a84:	2100      	movs	r1, #0
 8001a86:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8c:	4a1e      	ldr	r2, [pc, #120]	; (8001b08 <HAL_ADC_Start_DMA+0xf8>)
 8001a8e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a94:	4a1d      	ldr	r2, [pc, #116]	; (8001b0c <HAL_ADC_Start_DMA+0xfc>)
 8001a96:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9c:	4a1c      	ldr	r2, [pc, #112]	; (8001b10 <HAL_ADC_Start_DMA+0x100>)
 8001a9e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	221c      	movs	r2, #28
 8001aa6:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2110      	movs	r1, #16
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	68da      	ldr	r2, [r3, #12]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	3340      	adds	r3, #64	; 0x40
 8001ad2:	0019      	movs	r1, r3
 8001ad4:	68ba      	ldr	r2, [r7, #8]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f000 fc0a 	bl	80022f0 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	689a      	ldr	r2, [r3, #8]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2104      	movs	r1, #4
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	e003      	b.n	8001af6 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001aee:	2317      	movs	r3, #23
 8001af0:	18fb      	adds	r3, r7, r3
 8001af2:	2202      	movs	r2, #2
 8001af4:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001af6:	2317      	movs	r3, #23
 8001af8:	18fb      	adds	r3, r7, r3
 8001afa:	781b      	ldrb	r3, [r3, #0]
}
 8001afc:	0018      	movs	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	b007      	add	sp, #28
 8001b02:	bd90      	pop	{r4, r7, pc}
 8001b04:	fffff0fe 	.word	0xfffff0fe
 8001b08:	08001e69 	.word	0x08001e69
 8001b0c:	08001f1d 	.word	0x08001f1d
 8001b10:	08001f3b 	.word	0x08001f3b

08001b14 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001b1c:	46c0      	nop			; (mov r8, r8)
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	b002      	add	sp, #8
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001b2c:	46c0      	nop			; (mov r8, r8)
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	b002      	add	sp, #8
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001b3c:	46c0      	nop			; (mov r8, r8)
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	b002      	add	sp, #8
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b4e:	230f      	movs	r3, #15
 8001b50:	18fb      	adds	r3, r7, r3
 8001b52:	2200      	movs	r2, #0
 8001b54:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b5e:	2380      	movs	r3, #128	; 0x80
 8001b60:	055b      	lsls	r3, r3, #21
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d011      	beq.n	8001b8a <HAL_ADC_ConfigChannel+0x46>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d00d      	beq.n	8001b8a <HAL_ADC_ConfigChannel+0x46>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d009      	beq.n	8001b8a <HAL_ADC_ConfigChannel+0x46>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7a:	2b03      	cmp	r3, #3
 8001b7c:	d005      	beq.n	8001b8a <HAL_ADC_ConfigChannel+0x46>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	d001      	beq.n	8001b8a <HAL_ADC_ConfigChannel+0x46>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2234      	movs	r2, #52	; 0x34
 8001b8e:	5c9b      	ldrb	r3, [r3, r2]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d101      	bne.n	8001b98 <HAL_ADC_ConfigChannel+0x54>
 8001b94:	2302      	movs	r3, #2
 8001b96:	e0d0      	b.n	8001d3a <HAL_ADC_ConfigChannel+0x1f6>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2234      	movs	r2, #52	; 0x34
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	2204      	movs	r2, #4
 8001ba8:	4013      	ands	r3, r2
 8001baa:	d000      	beq.n	8001bae <HAL_ADC_ConfigChannel+0x6a>
 8001bac:	e0b4      	b.n	8001d18 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	4a64      	ldr	r2, [pc, #400]	; (8001d44 <HAL_ADC_ConfigChannel+0x200>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d100      	bne.n	8001bba <HAL_ADC_ConfigChannel+0x76>
 8001bb8:	e082      	b.n	8001cc0 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	409a      	lsls	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bd4:	2380      	movs	r3, #128	; 0x80
 8001bd6:	055b      	lsls	r3, r3, #21
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d037      	beq.n	8001c4c <HAL_ADC_ConfigChannel+0x108>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d033      	beq.n	8001c4c <HAL_ADC_ConfigChannel+0x108>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d02f      	beq.n	8001c4c <HAL_ADC_ConfigChannel+0x108>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf0:	2b03      	cmp	r3, #3
 8001bf2:	d02b      	beq.n	8001c4c <HAL_ADC_ConfigChannel+0x108>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf8:	2b04      	cmp	r3, #4
 8001bfa:	d027      	beq.n	8001c4c <HAL_ADC_ConfigChannel+0x108>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c00:	2b05      	cmp	r3, #5
 8001c02:	d023      	beq.n	8001c4c <HAL_ADC_ConfigChannel+0x108>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c08:	2b06      	cmp	r3, #6
 8001c0a:	d01f      	beq.n	8001c4c <HAL_ADC_ConfigChannel+0x108>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c10:	2b07      	cmp	r3, #7
 8001c12:	d01b      	beq.n	8001c4c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	2107      	movs	r1, #7
 8001c20:	400b      	ands	r3, r1
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d012      	beq.n	8001c4c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	695a      	ldr	r2, [r3, #20]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2107      	movs	r1, #7
 8001c32:	438a      	bics	r2, r1
 8001c34:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6959      	ldr	r1, [r3, #20]
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	2207      	movs	r2, #7
 8001c42:	401a      	ands	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2b10      	cmp	r3, #16
 8001c52:	d007      	beq.n	8001c64 <HAL_ADC_ConfigChannel+0x120>
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2b11      	cmp	r3, #17
 8001c5a:	d003      	beq.n	8001c64 <HAL_ADC_ConfigChannel+0x120>
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2b12      	cmp	r3, #18
 8001c62:	d163      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001c64:	4b38      	ldr	r3, [pc, #224]	; (8001d48 <HAL_ADC_ConfigChannel+0x204>)
 8001c66:	6819      	ldr	r1, [r3, #0]
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2b10      	cmp	r3, #16
 8001c6e:	d009      	beq.n	8001c84 <HAL_ADC_ConfigChannel+0x140>
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2b11      	cmp	r3, #17
 8001c76:	d102      	bne.n	8001c7e <HAL_ADC_ConfigChannel+0x13a>
 8001c78:	2380      	movs	r3, #128	; 0x80
 8001c7a:	03db      	lsls	r3, r3, #15
 8001c7c:	e004      	b.n	8001c88 <HAL_ADC_ConfigChannel+0x144>
 8001c7e:	2380      	movs	r3, #128	; 0x80
 8001c80:	045b      	lsls	r3, r3, #17
 8001c82:	e001      	b.n	8001c88 <HAL_ADC_ConfigChannel+0x144>
 8001c84:	2380      	movs	r3, #128	; 0x80
 8001c86:	041b      	lsls	r3, r3, #16
 8001c88:	4a2f      	ldr	r2, [pc, #188]	; (8001d48 <HAL_ADC_ConfigChannel+0x204>)
 8001c8a:	430b      	orrs	r3, r1
 8001c8c:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2b10      	cmp	r3, #16
 8001c94:	d14a      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c96:	4b2d      	ldr	r3, [pc, #180]	; (8001d4c <HAL_ADC_ConfigChannel+0x208>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	492d      	ldr	r1, [pc, #180]	; (8001d50 <HAL_ADC_ConfigChannel+0x20c>)
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	f7fe fa33 	bl	8000108 <__udivsi3>
 8001ca2:	0003      	movs	r3, r0
 8001ca4:	001a      	movs	r2, r3
 8001ca6:	0013      	movs	r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	189b      	adds	r3, r3, r2
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001cb0:	e002      	b.n	8001cb8 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1f9      	bne.n	8001cb2 <HAL_ADC_ConfigChannel+0x16e>
 8001cbe:	e035      	b.n	8001d2c <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2101      	movs	r1, #1
 8001ccc:	4099      	lsls	r1, r3
 8001cce:	000b      	movs	r3, r1
 8001cd0:	43d9      	mvns	r1, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	400a      	ands	r2, r1
 8001cd8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2b10      	cmp	r3, #16
 8001ce0:	d007      	beq.n	8001cf2 <HAL_ADC_ConfigChannel+0x1ae>
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2b11      	cmp	r3, #17
 8001ce8:	d003      	beq.n	8001cf2 <HAL_ADC_ConfigChannel+0x1ae>
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2b12      	cmp	r3, #18
 8001cf0:	d11c      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001cf2:	4b15      	ldr	r3, [pc, #84]	; (8001d48 <HAL_ADC_ConfigChannel+0x204>)
 8001cf4:	6819      	ldr	r1, [r3, #0]
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2b10      	cmp	r3, #16
 8001cfc:	d007      	beq.n	8001d0e <HAL_ADC_ConfigChannel+0x1ca>
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2b11      	cmp	r3, #17
 8001d04:	d101      	bne.n	8001d0a <HAL_ADC_ConfigChannel+0x1c6>
 8001d06:	4b13      	ldr	r3, [pc, #76]	; (8001d54 <HAL_ADC_ConfigChannel+0x210>)
 8001d08:	e002      	b.n	8001d10 <HAL_ADC_ConfigChannel+0x1cc>
 8001d0a:	4b13      	ldr	r3, [pc, #76]	; (8001d58 <HAL_ADC_ConfigChannel+0x214>)
 8001d0c:	e000      	b.n	8001d10 <HAL_ADC_ConfigChannel+0x1cc>
 8001d0e:	4b13      	ldr	r3, [pc, #76]	; (8001d5c <HAL_ADC_ConfigChannel+0x218>)
 8001d10:	4a0d      	ldr	r2, [pc, #52]	; (8001d48 <HAL_ADC_ConfigChannel+0x204>)
 8001d12:	400b      	ands	r3, r1
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	e009      	b.n	8001d2c <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d1c:	2220      	movs	r2, #32
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001d24:	230f      	movs	r3, #15
 8001d26:	18fb      	adds	r3, r7, r3
 8001d28:	2201      	movs	r2, #1
 8001d2a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2234      	movs	r2, #52	; 0x34
 8001d30:	2100      	movs	r1, #0
 8001d32:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001d34:	230f      	movs	r3, #15
 8001d36:	18fb      	adds	r3, r7, r3
 8001d38:	781b      	ldrb	r3, [r3, #0]
}
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	b004      	add	sp, #16
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	46c0      	nop			; (mov r8, r8)
 8001d44:	00001001 	.word	0x00001001
 8001d48:	40012708 	.word	0x40012708
 8001d4c:	2000001c 	.word	0x2000001c
 8001d50:	000f4240 	.word	0x000f4240
 8001d54:	ffbfffff 	.word	0xffbfffff
 8001d58:	feffffff 	.word	0xfeffffff
 8001d5c:	ff7fffff 	.word	0xff7fffff

08001d60 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	2203      	movs	r2, #3
 8001d78:	4013      	ands	r3, r2
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d112      	bne.n	8001da4 <ADC_Enable+0x44>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2201      	movs	r2, #1
 8001d86:	4013      	ands	r3, r2
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d009      	beq.n	8001da0 <ADC_Enable+0x40>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68da      	ldr	r2, [r3, #12]
 8001d92:	2380      	movs	r3, #128	; 0x80
 8001d94:	021b      	lsls	r3, r3, #8
 8001d96:	401a      	ands	r2, r3
 8001d98:	2380      	movs	r3, #128	; 0x80
 8001d9a:	021b      	lsls	r3, r3, #8
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d101      	bne.n	8001da4 <ADC_Enable+0x44>
 8001da0:	2301      	movs	r3, #1
 8001da2:	e000      	b.n	8001da6 <ADC_Enable+0x46>
 8001da4:	2300      	movs	r3, #0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d152      	bne.n	8001e50 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	4a2a      	ldr	r2, [pc, #168]	; (8001e5c <ADC_Enable+0xfc>)
 8001db2:	4013      	ands	r3, r2
 8001db4:	d00d      	beq.n	8001dd2 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dba:	2210      	movs	r2, #16
 8001dbc:	431a      	orrs	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	431a      	orrs	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e03f      	b.n	8001e52 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2101      	movs	r1, #1
 8001dde:	430a      	orrs	r2, r1
 8001de0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001de2:	4b1f      	ldr	r3, [pc, #124]	; (8001e60 <ADC_Enable+0x100>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	491f      	ldr	r1, [pc, #124]	; (8001e64 <ADC_Enable+0x104>)
 8001de8:	0018      	movs	r0, r3
 8001dea:	f7fe f98d 	bl	8000108 <__udivsi3>
 8001dee:	0003      	movs	r3, r0
 8001df0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001df2:	e002      	b.n	8001dfa <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	3b01      	subs	r3, #1
 8001df8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d1f9      	bne.n	8001df4 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e00:	f7ff fcae 	bl	8001760 <HAL_GetTick>
 8001e04:	0003      	movs	r3, r0
 8001e06:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e08:	e01b      	b.n	8001e42 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e0a:	f7ff fca9 	bl	8001760 <HAL_GetTick>
 8001e0e:	0002      	movs	r2, r0
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d914      	bls.n	8001e42 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	4013      	ands	r3, r2
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d00d      	beq.n	8001e42 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e2a:	2210      	movs	r2, #16
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e36:	2201      	movs	r2, #1
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e007      	b.n	8001e52 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d1dc      	bne.n	8001e0a <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	0018      	movs	r0, r3
 8001e54:	46bd      	mov	sp, r7
 8001e56:	b004      	add	sp, #16
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	46c0      	nop			; (mov r8, r8)
 8001e5c:	80000017 	.word	0x80000017
 8001e60:	2000001c 	.word	0x2000001c
 8001e64:	000f4240 	.word	0x000f4240

08001e68 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e74:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e7a:	2250      	movs	r2, #80	; 0x50
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	d140      	bne.n	8001f02 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e84:	2280      	movs	r2, #128	; 0x80
 8001e86:	0092      	lsls	r2, r2, #2
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68da      	ldr	r2, [r3, #12]
 8001e94:	23c0      	movs	r3, #192	; 0xc0
 8001e96:	011b      	lsls	r3, r3, #4
 8001e98:	4013      	ands	r3, r2
 8001e9a:	d12d      	bne.n	8001ef8 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d129      	bne.n	8001ef8 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2208      	movs	r2, #8
 8001eac:	4013      	ands	r3, r2
 8001eae:	2b08      	cmp	r3, #8
 8001eb0:	d122      	bne.n	8001ef8 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	2204      	movs	r2, #4
 8001eba:	4013      	ands	r3, r2
 8001ebc:	d110      	bne.n	8001ee0 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	210c      	movs	r1, #12
 8001eca:	438a      	bics	r2, r1
 8001ecc:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed2:	4a11      	ldr	r2, [pc, #68]	; (8001f18 <ADC_DMAConvCplt+0xb0>)
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	639a      	str	r2, [r3, #56]	; 0x38
 8001ede:	e00b      	b.n	8001ef8 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee4:	2220      	movs	r2, #32
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	0018      	movs	r0, r3
 8001efc:	f7ff fe0a 	bl	8001b14 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8001f00:	e005      	b.n	8001f0e <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	0010      	movs	r0, r2
 8001f0c:	4798      	blx	r3
}
 8001f0e:	46c0      	nop			; (mov r8, r8)
 8001f10:	46bd      	mov	sp, r7
 8001f12:	b004      	add	sp, #16
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	46c0      	nop			; (mov r8, r8)
 8001f18:	fffffefe 	.word	0xfffffefe

08001f1c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f28:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	f7ff fdf9 	bl	8001b24 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f32:	46c0      	nop			; (mov r8, r8)
 8001f34:	46bd      	mov	sp, r7
 8001f36:	b004      	add	sp, #16
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b084      	sub	sp, #16
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f46:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f4c:	2240      	movs	r2, #64	; 0x40
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f58:	2204      	movs	r2, #4
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	0018      	movs	r0, r3
 8001f64:	f7ff fde6 	bl	8001b34 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f68:	46c0      	nop			; (mov r8, r8)
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	b004      	add	sp, #16
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <__NVIC_EnableIRQ>:
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	0002      	movs	r2, r0
 8001f78:	1dfb      	adds	r3, r7, #7
 8001f7a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f7c:	1dfb      	adds	r3, r7, #7
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b7f      	cmp	r3, #127	; 0x7f
 8001f82:	d809      	bhi.n	8001f98 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f84:	1dfb      	adds	r3, r7, #7
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	001a      	movs	r2, r3
 8001f8a:	231f      	movs	r3, #31
 8001f8c:	401a      	ands	r2, r3
 8001f8e:	4b04      	ldr	r3, [pc, #16]	; (8001fa0 <__NVIC_EnableIRQ+0x30>)
 8001f90:	2101      	movs	r1, #1
 8001f92:	4091      	lsls	r1, r2
 8001f94:	000a      	movs	r2, r1
 8001f96:	601a      	str	r2, [r3, #0]
}
 8001f98:	46c0      	nop			; (mov r8, r8)
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	b002      	add	sp, #8
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	e000e100 	.word	0xe000e100

08001fa4 <__NVIC_SetPriority>:
{
 8001fa4:	b590      	push	{r4, r7, lr}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	0002      	movs	r2, r0
 8001fac:	6039      	str	r1, [r7, #0]
 8001fae:	1dfb      	adds	r3, r7, #7
 8001fb0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001fb2:	1dfb      	adds	r3, r7, #7
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	2b7f      	cmp	r3, #127	; 0x7f
 8001fb8:	d828      	bhi.n	800200c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fba:	4a2f      	ldr	r2, [pc, #188]	; (8002078 <__NVIC_SetPriority+0xd4>)
 8001fbc:	1dfb      	adds	r3, r7, #7
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	b25b      	sxtb	r3, r3
 8001fc2:	089b      	lsrs	r3, r3, #2
 8001fc4:	33c0      	adds	r3, #192	; 0xc0
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	589b      	ldr	r3, [r3, r2]
 8001fca:	1dfa      	adds	r2, r7, #7
 8001fcc:	7812      	ldrb	r2, [r2, #0]
 8001fce:	0011      	movs	r1, r2
 8001fd0:	2203      	movs	r2, #3
 8001fd2:	400a      	ands	r2, r1
 8001fd4:	00d2      	lsls	r2, r2, #3
 8001fd6:	21ff      	movs	r1, #255	; 0xff
 8001fd8:	4091      	lsls	r1, r2
 8001fda:	000a      	movs	r2, r1
 8001fdc:	43d2      	mvns	r2, r2
 8001fde:	401a      	ands	r2, r3
 8001fe0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	019b      	lsls	r3, r3, #6
 8001fe6:	22ff      	movs	r2, #255	; 0xff
 8001fe8:	401a      	ands	r2, r3
 8001fea:	1dfb      	adds	r3, r7, #7
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	0018      	movs	r0, r3
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	4003      	ands	r3, r0
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ff8:	481f      	ldr	r0, [pc, #124]	; (8002078 <__NVIC_SetPriority+0xd4>)
 8001ffa:	1dfb      	adds	r3, r7, #7
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	b25b      	sxtb	r3, r3
 8002000:	089b      	lsrs	r3, r3, #2
 8002002:	430a      	orrs	r2, r1
 8002004:	33c0      	adds	r3, #192	; 0xc0
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	501a      	str	r2, [r3, r0]
}
 800200a:	e031      	b.n	8002070 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800200c:	4a1b      	ldr	r2, [pc, #108]	; (800207c <__NVIC_SetPriority+0xd8>)
 800200e:	1dfb      	adds	r3, r7, #7
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	0019      	movs	r1, r3
 8002014:	230f      	movs	r3, #15
 8002016:	400b      	ands	r3, r1
 8002018:	3b08      	subs	r3, #8
 800201a:	089b      	lsrs	r3, r3, #2
 800201c:	3306      	adds	r3, #6
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	18d3      	adds	r3, r2, r3
 8002022:	3304      	adds	r3, #4
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	1dfa      	adds	r2, r7, #7
 8002028:	7812      	ldrb	r2, [r2, #0]
 800202a:	0011      	movs	r1, r2
 800202c:	2203      	movs	r2, #3
 800202e:	400a      	ands	r2, r1
 8002030:	00d2      	lsls	r2, r2, #3
 8002032:	21ff      	movs	r1, #255	; 0xff
 8002034:	4091      	lsls	r1, r2
 8002036:	000a      	movs	r2, r1
 8002038:	43d2      	mvns	r2, r2
 800203a:	401a      	ands	r2, r3
 800203c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	019b      	lsls	r3, r3, #6
 8002042:	22ff      	movs	r2, #255	; 0xff
 8002044:	401a      	ands	r2, r3
 8002046:	1dfb      	adds	r3, r7, #7
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	0018      	movs	r0, r3
 800204c:	2303      	movs	r3, #3
 800204e:	4003      	ands	r3, r0
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002054:	4809      	ldr	r0, [pc, #36]	; (800207c <__NVIC_SetPriority+0xd8>)
 8002056:	1dfb      	adds	r3, r7, #7
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	001c      	movs	r4, r3
 800205c:	230f      	movs	r3, #15
 800205e:	4023      	ands	r3, r4
 8002060:	3b08      	subs	r3, #8
 8002062:	089b      	lsrs	r3, r3, #2
 8002064:	430a      	orrs	r2, r1
 8002066:	3306      	adds	r3, #6
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	18c3      	adds	r3, r0, r3
 800206c:	3304      	adds	r3, #4
 800206e:	601a      	str	r2, [r3, #0]
}
 8002070:	46c0      	nop			; (mov r8, r8)
 8002072:	46bd      	mov	sp, r7
 8002074:	b003      	add	sp, #12
 8002076:	bd90      	pop	{r4, r7, pc}
 8002078:	e000e100 	.word	0xe000e100
 800207c:	e000ed00 	.word	0xe000ed00

08002080 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	1e5a      	subs	r2, r3, #1
 800208c:	2380      	movs	r3, #128	; 0x80
 800208e:	045b      	lsls	r3, r3, #17
 8002090:	429a      	cmp	r2, r3
 8002092:	d301      	bcc.n	8002098 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002094:	2301      	movs	r3, #1
 8002096:	e010      	b.n	80020ba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002098:	4b0a      	ldr	r3, [pc, #40]	; (80020c4 <SysTick_Config+0x44>)
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	3a01      	subs	r2, #1
 800209e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020a0:	2301      	movs	r3, #1
 80020a2:	425b      	negs	r3, r3
 80020a4:	2103      	movs	r1, #3
 80020a6:	0018      	movs	r0, r3
 80020a8:	f7ff ff7c 	bl	8001fa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020ac:	4b05      	ldr	r3, [pc, #20]	; (80020c4 <SysTick_Config+0x44>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020b2:	4b04      	ldr	r3, [pc, #16]	; (80020c4 <SysTick_Config+0x44>)
 80020b4:	2207      	movs	r2, #7
 80020b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	0018      	movs	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	b002      	add	sp, #8
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	46c0      	nop			; (mov r8, r8)
 80020c4:	e000e010 	.word	0xe000e010

080020c8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60b9      	str	r1, [r7, #8]
 80020d0:	607a      	str	r2, [r7, #4]
 80020d2:	210f      	movs	r1, #15
 80020d4:	187b      	adds	r3, r7, r1
 80020d6:	1c02      	adds	r2, r0, #0
 80020d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	187b      	adds	r3, r7, r1
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	b25b      	sxtb	r3, r3
 80020e2:	0011      	movs	r1, r2
 80020e4:	0018      	movs	r0, r3
 80020e6:	f7ff ff5d 	bl	8001fa4 <__NVIC_SetPriority>
}
 80020ea:	46c0      	nop			; (mov r8, r8)
 80020ec:	46bd      	mov	sp, r7
 80020ee:	b004      	add	sp, #16
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b082      	sub	sp, #8
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	0002      	movs	r2, r0
 80020fa:	1dfb      	adds	r3, r7, #7
 80020fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020fe:	1dfb      	adds	r3, r7, #7
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	b25b      	sxtb	r3, r3
 8002104:	0018      	movs	r0, r3
 8002106:	f7ff ff33 	bl	8001f70 <__NVIC_EnableIRQ>
}
 800210a:	46c0      	nop			; (mov r8, r8)
 800210c:	46bd      	mov	sp, r7
 800210e:	b002      	add	sp, #8
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b082      	sub	sp, #8
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	0018      	movs	r0, r3
 800211e:	f7ff ffaf 	bl	8002080 <SysTick_Config>
 8002122:	0003      	movs	r3, r0
}
 8002124:	0018      	movs	r0, r3
 8002126:	46bd      	mov	sp, r7
 8002128:	b002      	add	sp, #8
 800212a:	bd80      	pop	{r7, pc}

0800212c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e015      	b.n	800216a <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if (hdac->State == HAL_DAC_STATE_RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	791b      	ldrb	r3, [r3, #4]
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b00      	cmp	r3, #0
 8002146:	d106      	bne.n	8002156 <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	0018      	movs	r0, r3
 8002152:	f7ff f827 	bl	80011a4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2202      	movs	r2, #2
 800215a:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2201      	movs	r2, #1
 8002166:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	0018      	movs	r0, r3
 800216c:	46bd      	mov	sp, r7
 800216e:	b002      	add	sp, #8
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_DAC_ConfigChannel>:
  *          This parameter can be one of the following values:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b086      	sub	sp, #24
 8002176:	af00      	add	r7, sp, #0
 8002178:	60f8      	str	r0, [r7, #12]
 800217a:	60b9      	str	r1, [r7, #8]
 800217c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800217e:	2300      	movs	r3, #0
 8002180:	617b      	str	r3, [r7, #20]
 8002182:	2300      	movs	r3, #0
 8002184:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	795b      	ldrb	r3, [r3, #5]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d101      	bne.n	8002192 <HAL_DAC_ConfigChannel+0x20>
 800218e:	2302      	movs	r3, #2
 8002190:	e029      	b.n	80021e6 <HAL_DAC_ConfigChannel+0x74>
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2201      	movs	r2, #1
 8002196:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2202      	movs	r2, #2
 800219c:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel); 
 80021a6:	223e      	movs	r2, #62	; 0x3e
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	409a      	lsls	r2, r3
 80021ac:	0013      	movs	r3, r2
 80021ae:	43da      	mvns	r2, r3
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	4013      	ands	r3, r2
 80021b4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	4313      	orrs	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	409a      	lsls	r2, r3
 80021c8:	0013      	movs	r3, r2
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2201      	movs	r2, #1
 80021dc:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	0018      	movs	r0, r3
 80021e8:	46bd      	mov	sp, r7
 80021ea:	b006      	add	sp, #24
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_DAC_Start>:
       /* STM32F091xC  STM32F098xx */

#if defined (STM32F051x8) || defined (STM32F058xx)

HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b082      	sub	sp, #8
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
 80021f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	795b      	ldrb	r3, [r3, #5]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d101      	bne.n	8002204 <HAL_DAC_Start+0x16>
 8002200:	2302      	movs	r3, #2
 8002202:	e028      	b.n	8002256 <HAL_DAC_Start+0x68>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2202      	movs	r2, #2
 800220e:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6819      	ldr	r1, [r3, #0]
 8002216:	2201      	movs	r2, #1
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	409a      	lsls	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	430a      	orrs	r2, r1
 8002222:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d10e      	bne.n	8002248 <HAL_DAC_Start+0x5a>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	223c      	movs	r2, #60	; 0x3c
 8002232:	4013      	ands	r3, r2
 8002234:	2b3c      	cmp	r3, #60	; 0x3c
 8002236:	d107      	bne.n	8002248 <HAL_DAC_Start+0x5a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2101      	movs	r1, #1
 8002244:	430a      	orrs	r2, r1
 8002246:	605a      	str	r2, [r3, #4]
    }
  }
 
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	0018      	movs	r0, r3
 8002258:	46bd      	mov	sp, r7
 800225a:	b002      	add	sp, #8
 800225c:	bd80      	pop	{r7, pc}
	...

08002260 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002268:	2300      	movs	r3, #0
 800226a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e036      	b.n	80022e4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2221      	movs	r2, #33	; 0x21
 800227a:	2102      	movs	r1, #2
 800227c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	4a18      	ldr	r2, [pc, #96]	; (80022ec <HAL_DMA_Init+0x8c>)
 800228a:	4013      	ands	r3, r2
 800228c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002296:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69db      	ldr	r3, [r3, #28]
 80022b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	0018      	movs	r0, r3
 80022c8:	f000 f9c4 	bl	8002654 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2221      	movs	r2, #33	; 0x21
 80022d6:	2101      	movs	r1, #1
 80022d8:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2220      	movs	r2, #32
 80022de:	2100      	movs	r1, #0
 80022e0:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}  
 80022e4:	0018      	movs	r0, r3
 80022e6:	46bd      	mov	sp, r7
 80022e8:	b004      	add	sp, #16
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	ffffc00f 	.word	0xffffc00f

080022f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
 80022fc:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80022fe:	2317      	movs	r3, #23
 8002300:	18fb      	adds	r3, r7, r3
 8002302:	2200      	movs	r2, #0
 8002304:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2220      	movs	r2, #32
 800230a:	5c9b      	ldrb	r3, [r3, r2]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d101      	bne.n	8002314 <HAL_DMA_Start_IT+0x24>
 8002310:	2302      	movs	r3, #2
 8002312:	e04f      	b.n	80023b4 <HAL_DMA_Start_IT+0xc4>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2220      	movs	r2, #32
 8002318:	2101      	movs	r1, #1
 800231a:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2221      	movs	r2, #33	; 0x21
 8002320:	5c9b      	ldrb	r3, [r3, r2]
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b01      	cmp	r3, #1
 8002326:	d13a      	bne.n	800239e <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2221      	movs	r2, #33	; 0x21
 800232c:	2102      	movs	r1, #2
 800232e:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2101      	movs	r1, #1
 8002342:	438a      	bics	r2, r1
 8002344:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	68b9      	ldr	r1, [r7, #8]
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f000 f954 	bl	80025fa <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002356:	2b00      	cmp	r3, #0
 8002358:	d008      	beq.n	800236c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	210e      	movs	r1, #14
 8002366:	430a      	orrs	r2, r1
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	e00f      	b.n	800238c <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	210a      	movs	r1, #10
 8002378:	430a      	orrs	r2, r1
 800237a:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2104      	movs	r1, #4
 8002388:	438a      	bics	r2, r1
 800238a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2101      	movs	r1, #1
 8002398:	430a      	orrs	r2, r1
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	e007      	b.n	80023ae <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2220      	movs	r2, #32
 80023a2:	2100      	movs	r1, #0
 80023a4:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80023a6:	2317      	movs	r3, #23
 80023a8:	18fb      	adds	r3, r7, r3
 80023aa:	2202      	movs	r2, #2
 80023ac:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 80023ae:	2317      	movs	r3, #23
 80023b0:	18fb      	adds	r3, r7, r3
 80023b2:	781b      	ldrb	r3, [r3, #0]
} 
 80023b4:	0018      	movs	r0, r3
 80023b6:	46bd      	mov	sp, r7
 80023b8:	b006      	add	sp, #24
 80023ba:	bd80      	pop	{r7, pc}

080023bc <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2221      	movs	r2, #33	; 0x21
 80023c8:	5c9b      	ldrb	r3, [r3, r2]
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d008      	beq.n	80023e2 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2204      	movs	r2, #4
 80023d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2220      	movs	r2, #32
 80023da:	2100      	movs	r1, #0
 80023dc:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e020      	b.n	8002424 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	210e      	movs	r1, #14
 80023ee:	438a      	bics	r2, r1
 80023f0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2101      	movs	r1, #1
 80023fe:	438a      	bics	r2, r1
 8002400:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800240a:	2101      	movs	r1, #1
 800240c:	4091      	lsls	r1, r2
 800240e:	000a      	movs	r2, r1
 8002410:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2221      	movs	r2, #33	; 0x21
 8002416:	2101      	movs	r1, #1
 8002418:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2220      	movs	r2, #32
 800241e:	2100      	movs	r1, #0
 8002420:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	0018      	movs	r0, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	b002      	add	sp, #8
 800242a:	bd80      	pop	{r7, pc}

0800242c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002434:	210f      	movs	r1, #15
 8002436:	187b      	adds	r3, r7, r1
 8002438:	2200      	movs	r2, #0
 800243a:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2221      	movs	r2, #33	; 0x21
 8002440:	5c9b      	ldrb	r3, [r3, r2]
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d006      	beq.n	8002456 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2204      	movs	r2, #4
 800244c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800244e:	187b      	adds	r3, r7, r1
 8002450:	2201      	movs	r2, #1
 8002452:	701a      	strb	r2, [r3, #0]
 8002454:	e028      	b.n	80024a8 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	210e      	movs	r1, #14
 8002462:	438a      	bics	r2, r1
 8002464:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2101      	movs	r1, #1
 8002472:	438a      	bics	r2, r1
 8002474:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800247e:	2101      	movs	r1, #1
 8002480:	4091      	lsls	r1, r2
 8002482:	000a      	movs	r2, r1
 8002484:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2221      	movs	r2, #33	; 0x21
 800248a:	2101      	movs	r1, #1
 800248c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2220      	movs	r2, #32
 8002492:	2100      	movs	r1, #0
 8002494:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800249a:	2b00      	cmp	r3, #0
 800249c:	d004      	beq.n	80024a8 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	0010      	movs	r0, r2
 80024a6:	4798      	blx	r3
    } 
  }
  return status;
 80024a8:	230f      	movs	r3, #15
 80024aa:	18fb      	adds	r3, r7, r3
 80024ac:	781b      	ldrb	r3, [r3, #0]
}
 80024ae:	0018      	movs	r0, r3
 80024b0:	46bd      	mov	sp, r7
 80024b2:	b004      	add	sp, #16
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b084      	sub	sp, #16
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	2204      	movs	r2, #4
 80024d4:	409a      	lsls	r2, r3
 80024d6:	0013      	movs	r3, r2
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	4013      	ands	r3, r2
 80024dc:	d024      	beq.n	8002528 <HAL_DMA_IRQHandler+0x72>
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	2204      	movs	r2, #4
 80024e2:	4013      	ands	r3, r2
 80024e4:	d020      	beq.n	8002528 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2220      	movs	r2, #32
 80024ee:	4013      	ands	r3, r2
 80024f0:	d107      	bne.n	8002502 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2104      	movs	r1, #4
 80024fe:	438a      	bics	r2, r1
 8002500:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800250a:	2104      	movs	r1, #4
 800250c:	4091      	lsls	r1, r2
 800250e:	000a      	movs	r2, r1
 8002510:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002516:	2b00      	cmp	r3, #0
 8002518:	d100      	bne.n	800251c <HAL_DMA_IRQHandler+0x66>
 800251a:	e06a      	b.n	80025f2 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	0010      	movs	r0, r2
 8002524:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002526:	e064      	b.n	80025f2 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252c:	2202      	movs	r2, #2
 800252e:	409a      	lsls	r2, r3
 8002530:	0013      	movs	r3, r2
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	4013      	ands	r3, r2
 8002536:	d02b      	beq.n	8002590 <HAL_DMA_IRQHandler+0xda>
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	2202      	movs	r2, #2
 800253c:	4013      	ands	r3, r2
 800253e:	d027      	beq.n	8002590 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2220      	movs	r2, #32
 8002548:	4013      	ands	r3, r2
 800254a:	d10b      	bne.n	8002564 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	210a      	movs	r1, #10
 8002558:	438a      	bics	r2, r1
 800255a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2221      	movs	r2, #33	; 0x21
 8002560:	2101      	movs	r1, #1
 8002562:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800256c:	2102      	movs	r1, #2
 800256e:	4091      	lsls	r1, r2
 8002570:	000a      	movs	r2, r1
 8002572:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2220      	movs	r2, #32
 8002578:	2100      	movs	r1, #0
 800257a:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002580:	2b00      	cmp	r3, #0
 8002582:	d036      	beq.n	80025f2 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	0010      	movs	r0, r2
 800258c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800258e:	e030      	b.n	80025f2 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002594:	2208      	movs	r2, #8
 8002596:	409a      	lsls	r2, r3
 8002598:	0013      	movs	r3, r2
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	4013      	ands	r3, r2
 800259e:	d028      	beq.n	80025f2 <HAL_DMA_IRQHandler+0x13c>
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	2208      	movs	r2, #8
 80025a4:	4013      	ands	r3, r2
 80025a6:	d024      	beq.n	80025f2 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	210e      	movs	r1, #14
 80025b4:	438a      	bics	r2, r1
 80025b6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c0:	2101      	movs	r1, #1
 80025c2:	4091      	lsls	r1, r2
 80025c4:	000a      	movs	r2, r1
 80025c6:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2221      	movs	r2, #33	; 0x21
 80025d2:	2101      	movs	r1, #1
 80025d4:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2220      	movs	r2, #32
 80025da:	2100      	movs	r1, #0
 80025dc:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d005      	beq.n	80025f2 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	0010      	movs	r0, r2
 80025ee:	4798      	blx	r3
    }
   }
}  
 80025f0:	e7ff      	b.n	80025f2 <HAL_DMA_IRQHandler+0x13c>
 80025f2:	46c0      	nop			; (mov r8, r8)
 80025f4:	46bd      	mov	sp, r7
 80025f6:	b004      	add	sp, #16
 80025f8:	bd80      	pop	{r7, pc}

080025fa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b084      	sub	sp, #16
 80025fe:	af00      	add	r7, sp, #0
 8002600:	60f8      	str	r0, [r7, #12]
 8002602:	60b9      	str	r1, [r7, #8]
 8002604:	607a      	str	r2, [r7, #4]
 8002606:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002610:	2101      	movs	r1, #1
 8002612:	4091      	lsls	r1, r2
 8002614:	000a      	movs	r2, r1
 8002616:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	2b10      	cmp	r3, #16
 8002626:	d108      	bne.n	800263a <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68ba      	ldr	r2, [r7, #8]
 8002636:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002638:	e007      	b.n	800264a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	60da      	str	r2, [r3, #12]
}
 800264a:	46c0      	nop			; (mov r8, r8)
 800264c:	46bd      	mov	sp, r7
 800264e:	b004      	add	sp, #16
 8002650:	bd80      	pop	{r7, pc}
	...

08002654 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a08      	ldr	r2, [pc, #32]	; (8002684 <DMA_CalcBaseAndBitshift+0x30>)
 8002662:	4694      	mov	ip, r2
 8002664:	4463      	add	r3, ip
 8002666:	2114      	movs	r1, #20
 8002668:	0018      	movs	r0, r3
 800266a:	f7fd fd4d 	bl	8000108 <__udivsi3>
 800266e:	0003      	movs	r3, r0
 8002670:	009a      	lsls	r2, r3, #2
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a03      	ldr	r2, [pc, #12]	; (8002688 <DMA_CalcBaseAndBitshift+0x34>)
 800267a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800267c:	46c0      	nop			; (mov r8, r8)
 800267e:	46bd      	mov	sp, r7
 8002680:	b002      	add	sp, #8
 8002682:	bd80      	pop	{r7, pc}
 8002684:	bffdfff8 	.word	0xbffdfff8
 8002688:	40020000 	.word	0x40020000

0800268c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002696:	2300      	movs	r3, #0
 8002698:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800269a:	e14f      	b.n	800293c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2101      	movs	r1, #1
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	4091      	lsls	r1, r2
 80026a6:	000a      	movs	r2, r1
 80026a8:	4013      	ands	r3, r2
 80026aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d100      	bne.n	80026b4 <HAL_GPIO_Init+0x28>
 80026b2:	e140      	b.n	8002936 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	2203      	movs	r2, #3
 80026ba:	4013      	ands	r3, r2
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d005      	beq.n	80026cc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	2203      	movs	r2, #3
 80026c6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d130      	bne.n	800272e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	2203      	movs	r2, #3
 80026d8:	409a      	lsls	r2, r3
 80026da:	0013      	movs	r3, r2
 80026dc:	43da      	mvns	r2, r3
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	4013      	ands	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	68da      	ldr	r2, [r3, #12]
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	409a      	lsls	r2, r3
 80026ee:	0013      	movs	r3, r2
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002702:	2201      	movs	r2, #1
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	409a      	lsls	r2, r3
 8002708:	0013      	movs	r3, r2
 800270a:	43da      	mvns	r2, r3
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	4013      	ands	r3, r2
 8002710:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	091b      	lsrs	r3, r3, #4
 8002718:	2201      	movs	r2, #1
 800271a:	401a      	ands	r2, r3
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	409a      	lsls	r2, r3
 8002720:	0013      	movs	r3, r2
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	4313      	orrs	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2203      	movs	r2, #3
 8002734:	4013      	ands	r3, r2
 8002736:	2b03      	cmp	r3, #3
 8002738:	d017      	beq.n	800276a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	2203      	movs	r2, #3
 8002746:	409a      	lsls	r2, r3
 8002748:	0013      	movs	r3, r2
 800274a:	43da      	mvns	r2, r3
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	4013      	ands	r3, r2
 8002750:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	409a      	lsls	r2, r3
 800275c:	0013      	movs	r3, r2
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	4313      	orrs	r3, r2
 8002762:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2203      	movs	r2, #3
 8002770:	4013      	ands	r3, r2
 8002772:	2b02      	cmp	r3, #2
 8002774:	d123      	bne.n	80027be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	08da      	lsrs	r2, r3, #3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	3208      	adds	r2, #8
 800277e:	0092      	lsls	r2, r2, #2
 8002780:	58d3      	ldr	r3, [r2, r3]
 8002782:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	2207      	movs	r2, #7
 8002788:	4013      	ands	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	220f      	movs	r2, #15
 800278e:	409a      	lsls	r2, r3
 8002790:	0013      	movs	r3, r2
 8002792:	43da      	mvns	r2, r3
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	4013      	ands	r3, r2
 8002798:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	691a      	ldr	r2, [r3, #16]
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	2107      	movs	r1, #7
 80027a2:	400b      	ands	r3, r1
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	409a      	lsls	r2, r3
 80027a8:	0013      	movs	r3, r2
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	08da      	lsrs	r2, r3, #3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3208      	adds	r2, #8
 80027b8:	0092      	lsls	r2, r2, #2
 80027ba:	6939      	ldr	r1, [r7, #16]
 80027bc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	2203      	movs	r2, #3
 80027ca:	409a      	lsls	r2, r3
 80027cc:	0013      	movs	r3, r2
 80027ce:	43da      	mvns	r2, r3
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	4013      	ands	r3, r2
 80027d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2203      	movs	r2, #3
 80027dc:	401a      	ands	r2, r3
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	409a      	lsls	r2, r3
 80027e4:	0013      	movs	r3, r2
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	23c0      	movs	r3, #192	; 0xc0
 80027f8:	029b      	lsls	r3, r3, #10
 80027fa:	4013      	ands	r3, r2
 80027fc:	d100      	bne.n	8002800 <HAL_GPIO_Init+0x174>
 80027fe:	e09a      	b.n	8002936 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002800:	4b54      	ldr	r3, [pc, #336]	; (8002954 <HAL_GPIO_Init+0x2c8>)
 8002802:	699a      	ldr	r2, [r3, #24]
 8002804:	4b53      	ldr	r3, [pc, #332]	; (8002954 <HAL_GPIO_Init+0x2c8>)
 8002806:	2101      	movs	r1, #1
 8002808:	430a      	orrs	r2, r1
 800280a:	619a      	str	r2, [r3, #24]
 800280c:	4b51      	ldr	r3, [pc, #324]	; (8002954 <HAL_GPIO_Init+0x2c8>)
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	2201      	movs	r2, #1
 8002812:	4013      	ands	r3, r2
 8002814:	60bb      	str	r3, [r7, #8]
 8002816:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002818:	4a4f      	ldr	r2, [pc, #316]	; (8002958 <HAL_GPIO_Init+0x2cc>)
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	089b      	lsrs	r3, r3, #2
 800281e:	3302      	adds	r3, #2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	589b      	ldr	r3, [r3, r2]
 8002824:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	2203      	movs	r2, #3
 800282a:	4013      	ands	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	220f      	movs	r2, #15
 8002830:	409a      	lsls	r2, r3
 8002832:	0013      	movs	r3, r2
 8002834:	43da      	mvns	r2, r3
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	4013      	ands	r3, r2
 800283a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	2390      	movs	r3, #144	; 0x90
 8002840:	05db      	lsls	r3, r3, #23
 8002842:	429a      	cmp	r2, r3
 8002844:	d013      	beq.n	800286e <HAL_GPIO_Init+0x1e2>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a44      	ldr	r2, [pc, #272]	; (800295c <HAL_GPIO_Init+0x2d0>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d00d      	beq.n	800286a <HAL_GPIO_Init+0x1de>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a43      	ldr	r2, [pc, #268]	; (8002960 <HAL_GPIO_Init+0x2d4>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d007      	beq.n	8002866 <HAL_GPIO_Init+0x1da>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a42      	ldr	r2, [pc, #264]	; (8002964 <HAL_GPIO_Init+0x2d8>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d101      	bne.n	8002862 <HAL_GPIO_Init+0x1d6>
 800285e:	2303      	movs	r3, #3
 8002860:	e006      	b.n	8002870 <HAL_GPIO_Init+0x1e4>
 8002862:	2305      	movs	r3, #5
 8002864:	e004      	b.n	8002870 <HAL_GPIO_Init+0x1e4>
 8002866:	2302      	movs	r3, #2
 8002868:	e002      	b.n	8002870 <HAL_GPIO_Init+0x1e4>
 800286a:	2301      	movs	r3, #1
 800286c:	e000      	b.n	8002870 <HAL_GPIO_Init+0x1e4>
 800286e:	2300      	movs	r3, #0
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	2103      	movs	r1, #3
 8002874:	400a      	ands	r2, r1
 8002876:	0092      	lsls	r2, r2, #2
 8002878:	4093      	lsls	r3, r2
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	4313      	orrs	r3, r2
 800287e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002880:	4935      	ldr	r1, [pc, #212]	; (8002958 <HAL_GPIO_Init+0x2cc>)
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	089b      	lsrs	r3, r3, #2
 8002886:	3302      	adds	r3, #2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800288e:	4b36      	ldr	r3, [pc, #216]	; (8002968 <HAL_GPIO_Init+0x2dc>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	43da      	mvns	r2, r3
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	4013      	ands	r3, r2
 800289c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	2380      	movs	r3, #128	; 0x80
 80028a4:	025b      	lsls	r3, r3, #9
 80028a6:	4013      	ands	r3, r2
 80028a8:	d003      	beq.n	80028b2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80028b2:	4b2d      	ldr	r3, [pc, #180]	; (8002968 <HAL_GPIO_Init+0x2dc>)
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80028b8:	4b2b      	ldr	r3, [pc, #172]	; (8002968 <HAL_GPIO_Init+0x2dc>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	43da      	mvns	r2, r3
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	4013      	ands	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	2380      	movs	r3, #128	; 0x80
 80028ce:	029b      	lsls	r3, r3, #10
 80028d0:	4013      	ands	r3, r2
 80028d2:	d003      	beq.n	80028dc <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	4313      	orrs	r3, r2
 80028da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80028dc:	4b22      	ldr	r3, [pc, #136]	; (8002968 <HAL_GPIO_Init+0x2dc>)
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028e2:	4b21      	ldr	r3, [pc, #132]	; (8002968 <HAL_GPIO_Init+0x2dc>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	43da      	mvns	r2, r3
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	4013      	ands	r3, r2
 80028f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685a      	ldr	r2, [r3, #4]
 80028f6:	2380      	movs	r3, #128	; 0x80
 80028f8:	035b      	lsls	r3, r3, #13
 80028fa:	4013      	ands	r3, r2
 80028fc:	d003      	beq.n	8002906 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4313      	orrs	r3, r2
 8002904:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002906:	4b18      	ldr	r3, [pc, #96]	; (8002968 <HAL_GPIO_Init+0x2dc>)
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800290c:	4b16      	ldr	r3, [pc, #88]	; (8002968 <HAL_GPIO_Init+0x2dc>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	43da      	mvns	r2, r3
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	4013      	ands	r3, r2
 800291a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	2380      	movs	r3, #128	; 0x80
 8002922:	039b      	lsls	r3, r3, #14
 8002924:	4013      	ands	r3, r2
 8002926:	d003      	beq.n	8002930 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	4313      	orrs	r3, r2
 800292e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002930:	4b0d      	ldr	r3, [pc, #52]	; (8002968 <HAL_GPIO_Init+0x2dc>)
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	3301      	adds	r3, #1
 800293a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	40da      	lsrs	r2, r3
 8002944:	1e13      	subs	r3, r2, #0
 8002946:	d000      	beq.n	800294a <HAL_GPIO_Init+0x2be>
 8002948:	e6a8      	b.n	800269c <HAL_GPIO_Init+0x10>
  } 
}
 800294a:	46c0      	nop			; (mov r8, r8)
 800294c:	46c0      	nop			; (mov r8, r8)
 800294e:	46bd      	mov	sp, r7
 8002950:	b006      	add	sp, #24
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40021000 	.word	0x40021000
 8002958:	40010000 	.word	0x40010000
 800295c:	48000400 	.word	0x48000400
 8002960:	48000800 	.word	0x48000800
 8002964:	48000c00 	.word	0x48000c00
 8002968:	40010400 	.word	0x40010400

0800296c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	000a      	movs	r2, r1
 8002976:	1cbb      	adds	r3, r7, #2
 8002978:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	1cba      	adds	r2, r7, #2
 8002980:	8812      	ldrh	r2, [r2, #0]
 8002982:	4013      	ands	r3, r2
 8002984:	d004      	beq.n	8002990 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002986:	230f      	movs	r3, #15
 8002988:	18fb      	adds	r3, r7, r3
 800298a:	2201      	movs	r2, #1
 800298c:	701a      	strb	r2, [r3, #0]
 800298e:	e003      	b.n	8002998 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002990:	230f      	movs	r3, #15
 8002992:	18fb      	adds	r3, r7, r3
 8002994:	2200      	movs	r2, #0
 8002996:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002998:	230f      	movs	r3, #15
 800299a:	18fb      	adds	r3, r7, r3
 800299c:	781b      	ldrb	r3, [r3, #0]
  }
 800299e:	0018      	movs	r0, r3
 80029a0:	46bd      	mov	sp, r7
 80029a2:	b004      	add	sp, #16
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b082      	sub	sp, #8
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
 80029ae:	0008      	movs	r0, r1
 80029b0:	0011      	movs	r1, r2
 80029b2:	1cbb      	adds	r3, r7, #2
 80029b4:	1c02      	adds	r2, r0, #0
 80029b6:	801a      	strh	r2, [r3, #0]
 80029b8:	1c7b      	adds	r3, r7, #1
 80029ba:	1c0a      	adds	r2, r1, #0
 80029bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029be:	1c7b      	adds	r3, r7, #1
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d004      	beq.n	80029d0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029c6:	1cbb      	adds	r3, r7, #2
 80029c8:	881a      	ldrh	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029ce:	e003      	b.n	80029d8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029d0:	1cbb      	adds	r3, r7, #2
 80029d2:	881a      	ldrh	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029d8:	46c0      	nop			; (mov r8, r8)
 80029da:	46bd      	mov	sp, r7
 80029dc:	b002      	add	sp, #8
 80029de:	bd80      	pop	{r7, pc}

080029e0 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI:Enter STOP mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter STOP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	000a      	movs	r2, r1
 80029ea:	1cfb      	adds	r3, r7, #3
 80029ec:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
 80029ee:	2300      	movs	r3, #0
 80029f0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 80029f2:	4b13      	ldr	r3, [pc, #76]	; (8002a40 <HAL_PWR_EnterSTOPMode+0x60>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear PDDS and LPDS bits */
  tmpreg &= (uint32_t)~(PWR_CR_PDDS | PWR_CR_LPDS);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2203      	movs	r2, #3
 80029fc:	4393      	bics	r3, r2
 80029fe:	60fb      	str	r3, [r7, #12]

  /* Set LPDS bit according to Regulator value */
  tmpreg |= Regulator;
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 8002a08:	4b0d      	ldr	r3, [pc, #52]	; (8002a40 <HAL_PWR_EnterSTOPMode+0x60>)
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8002a0e:	4b0d      	ldr	r3, [pc, #52]	; (8002a44 <HAL_PWR_EnterSTOPMode+0x64>)
 8002a10:	691a      	ldr	r2, [r3, #16]
 8002a12:	4b0c      	ldr	r3, [pc, #48]	; (8002a44 <HAL_PWR_EnterSTOPMode+0x64>)
 8002a14:	2104      	movs	r1, #4
 8002a16:	430a      	orrs	r2, r1
 8002a18:	611a      	str	r2, [r3, #16]

  /* Select STOP mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8002a1a:	1cfb      	adds	r3, r7, #3
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d101      	bne.n	8002a26 <HAL_PWR_EnterSTOPMode+0x46>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002a22:	bf30      	wfi
 8002a24:	e002      	b.n	8002a2c <HAL_PWR_EnterSTOPMode+0x4c>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002a26:	bf40      	sev
    __WFE();
 8002a28:	bf20      	wfe
    __WFE();
 8002a2a:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 8002a2c:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <HAL_PWR_EnterSTOPMode+0x64>)
 8002a2e:	691a      	ldr	r2, [r3, #16]
 8002a30:	4b04      	ldr	r3, [pc, #16]	; (8002a44 <HAL_PWR_EnterSTOPMode+0x64>)
 8002a32:	2104      	movs	r1, #4
 8002a34:	438a      	bics	r2, r1
 8002a36:	611a      	str	r2, [r3, #16]
}
 8002a38:	46c0      	nop			; (mov r8, r8)
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	b004      	add	sp, #16
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40007000 	.word	0x40007000
 8002a44:	e000ed00 	.word	0xe000ed00

08002a48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b088      	sub	sp, #32
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e301      	b.n	800305e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	4013      	ands	r3, r2
 8002a62:	d100      	bne.n	8002a66 <HAL_RCC_OscConfig+0x1e>
 8002a64:	e08d      	b.n	8002b82 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002a66:	4bc3      	ldr	r3, [pc, #780]	; (8002d74 <HAL_RCC_OscConfig+0x32c>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	220c      	movs	r2, #12
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	d00e      	beq.n	8002a90 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a72:	4bc0      	ldr	r3, [pc, #768]	; (8002d74 <HAL_RCC_OscConfig+0x32c>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	220c      	movs	r2, #12
 8002a78:	4013      	ands	r3, r2
 8002a7a:	2b08      	cmp	r3, #8
 8002a7c:	d116      	bne.n	8002aac <HAL_RCC_OscConfig+0x64>
 8002a7e:	4bbd      	ldr	r3, [pc, #756]	; (8002d74 <HAL_RCC_OscConfig+0x32c>)
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	2380      	movs	r3, #128	; 0x80
 8002a84:	025b      	lsls	r3, r3, #9
 8002a86:	401a      	ands	r2, r3
 8002a88:	2380      	movs	r3, #128	; 0x80
 8002a8a:	025b      	lsls	r3, r3, #9
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d10d      	bne.n	8002aac <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a90:	4bb8      	ldr	r3, [pc, #736]	; (8002d74 <HAL_RCC_OscConfig+0x32c>)
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	2380      	movs	r3, #128	; 0x80
 8002a96:	029b      	lsls	r3, r3, #10
 8002a98:	4013      	ands	r3, r2
 8002a9a:	d100      	bne.n	8002a9e <HAL_RCC_OscConfig+0x56>
 8002a9c:	e070      	b.n	8002b80 <HAL_RCC_OscConfig+0x138>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d000      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x60>
 8002aa6:	e06b      	b.n	8002b80 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e2d8      	b.n	800305e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d107      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x7c>
 8002ab4:	4baf      	ldr	r3, [pc, #700]	; (8002d74 <HAL_RCC_OscConfig+0x32c>)
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	4bae      	ldr	r3, [pc, #696]	; (8002d74 <HAL_RCC_OscConfig+0x32c>)
 8002aba:	2180      	movs	r1, #128	; 0x80
 8002abc:	0249      	lsls	r1, r1, #9
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	e02f      	b.n	8002b24 <HAL_RCC_OscConfig+0xdc>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d10c      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x9e>
 8002acc:	4ba9      	ldr	r3, [pc, #676]	; (8002d74 <HAL_RCC_OscConfig+0x32c>)
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	4ba8      	ldr	r3, [pc, #672]	; (8002d74 <HAL_RCC_OscConfig+0x32c>)
 8002ad2:	49a9      	ldr	r1, [pc, #676]	; (8002d78 <HAL_RCC_OscConfig+0x330>)
 8002ad4:	400a      	ands	r2, r1
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	4ba6      	ldr	r3, [pc, #664]	; (8002d74 <HAL_RCC_OscConfig+0x32c>)
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	4ba5      	ldr	r3, [pc, #660]	; (8002d74 <HAL_RCC_OscConfig+0x32c>)
 8002ade:	49a7      	ldr	r1, [pc, #668]	; (8002d7c <HAL_RCC_OscConfig+0x334>)
 8002ae0:	400a      	ands	r2, r1
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	e01e      	b.n	8002b24 <HAL_RCC_OscConfig+0xdc>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b05      	cmp	r3, #5
 8002aec:	d10e      	bne.n	8002b0c <HAL_RCC_OscConfig+0xc4>
 8002aee:	4ba1      	ldr	r3, [pc, #644]	; (8002d74 <HAL_RCC_OscConfig+0x32c>)
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	4ba0      	ldr	r3, [pc, #640]	; (8002d74 <HAL_RCC_OscConfig+0x32c>)
 8002af4:	2180      	movs	r1, #128	; 0x80
 8002af6:	02c9      	lsls	r1, r1, #11
 8002af8:	430a      	orrs	r2, r1
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	4b9d      	ldr	r3, [pc, #628]	; (8002d74 <HAL_RCC_OscConfig+0x32c>)
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	4b9c      	ldr	r3, [pc, #624]	; (8002d74 <HAL_RCC_OscConfig+0x32c>)
 8002b02:	2180      	movs	r1, #128	; 0x80
 8002b04:	0249      	lsls	r1, r1, #9
 8002b06:	430a      	orrs	r2, r1
 8002b08:	601a      	str	r2, [r3, #0]
 8002b0a:	e00b      	b.n	8002b24 <HAL_RCC_OscConfig+0xdc>
 8002b0c:	4b99      	ldr	r3, [pc, #612]	; (8002d74 <HAL_RCC_OscConfig+0x32c>)
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	4b98      	ldr	r3, [pc, #608]	; (8002d74 <HAL_RCC_OscConfig+0x32c>)
 8002b12:	4999      	ldr	r1, [pc, #612]	; (8002d78 <HAL_RCC_OscConfig+0x330>)
 8002b14:	400a      	ands	r2, r1
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	4b96      	ldr	r3, [pc, #600]	; (8002d74 <HAL_RCC_OscConfig+0x32c>)
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	4b95      	ldr	r3, [pc, #596]	; (8002d74 <HAL_RCC_OscConfig+0x32c>)
 8002b1e:	4997      	ldr	r1, [pc, #604]	; (8002d7c <HAL_RCC_OscConfig+0x334>)
 8002b20:	400a      	ands	r2, r1
 8002b22:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d014      	beq.n	8002b56 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2c:	f7fe fe18 	bl	8001760 <HAL_GetTick>
 8002b30:	0003      	movs	r3, r0
 8002b32:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b36:	f7fe fe13 	bl	8001760 <HAL_GetTick>
 8002b3a:	0002      	movs	r2, r0
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b64      	cmp	r3, #100	; 0x64
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e28a      	b.n	800305e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b48:	4b8a      	ldr	r3, [pc, #552]	; (8002d74 <HAL_RCC_OscConfig+0x32c>)
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	2380      	movs	r3, #128	; 0x80
 8002b4e:	029b      	lsls	r3, r3, #10
 8002b50:	4013      	ands	r3, r2
 8002b52:	d0f0      	beq.n	8002b36 <HAL_RCC_OscConfig+0xee>
 8002b54:	e015      	b.n	8002b82 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b56:	f7fe fe03 	bl	8001760 <HAL_GetTick>
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b60:	f7fe fdfe 	bl	8001760 <HAL_GetTick>
 8002b64:	0002      	movs	r2, r0
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b64      	cmp	r3, #100	; 0x64
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e275      	b.n	800305e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b72:	4b80      	ldr	r3, [pc, #512]	; (8002d74 <HAL_RCC_OscConfig+0x32c>)
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	2380      	movs	r3, #128	; 0x80
 8002b78:	029b      	lsls	r3, r3, #10
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	d1f0      	bne.n	8002b60 <HAL_RCC_OscConfig+0x118>
 8002b7e:	e000      	b.n	8002b82 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b80:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2202      	movs	r2, #2
 8002b88:	4013      	ands	r3, r2
 8002b8a:	d100      	bne.n	8002b8e <HAL_RCC_OscConfig+0x146>
 8002b8c:	e069      	b.n	8002c62 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002b8e:	4b79      	ldr	r3, [pc, #484]	; (8002d74 <HAL_RCC_OscConfig+0x32c>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	220c      	movs	r2, #12
 8002b94:	4013      	ands	r3, r2
 8002b96:	d00b      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002b98:	4b76      	ldr	r3, [pc, #472]	; (8002d74 <HAL_RCC_OscConfig+0x32c>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	220c      	movs	r2, #12
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	2b08      	cmp	r3, #8
 8002ba2:	d11c      	bne.n	8002bde <HAL_RCC_OscConfig+0x196>
 8002ba4:	4b73      	ldr	r3, [pc, #460]	; (8002d74 <HAL_RCC_OscConfig+0x32c>)
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	2380      	movs	r3, #128	; 0x80
 8002baa:	025b      	lsls	r3, r3, #9
 8002bac:	4013      	ands	r3, r2
 8002bae:	d116      	bne.n	8002bde <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bb0:	4b70      	ldr	r3, [pc, #448]	; (8002d74 <HAL_RCC_OscConfig+0x32c>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	d005      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x17e>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d001      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e24b      	b.n	800305e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc6:	4b6b      	ldr	r3, [pc, #428]	; (8002d74 <HAL_RCC_OscConfig+0x32c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	22f8      	movs	r2, #248	; 0xf8
 8002bcc:	4393      	bics	r3, r2
 8002bce:	0019      	movs	r1, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	00da      	lsls	r2, r3, #3
 8002bd6:	4b67      	ldr	r3, [pc, #412]	; (8002d74 <HAL_RCC_OscConfig+0x32c>)
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bdc:	e041      	b.n	8002c62 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d024      	beq.n	8002c30 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002be6:	4b63      	ldr	r3, [pc, #396]	; (8002d74 <HAL_RCC_OscConfig+0x32c>)
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	4b62      	ldr	r3, [pc, #392]	; (8002d74 <HAL_RCC_OscConfig+0x32c>)
 8002bec:	2101      	movs	r1, #1
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf2:	f7fe fdb5 	bl	8001760 <HAL_GetTick>
 8002bf6:	0003      	movs	r3, r0
 8002bf8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bfc:	f7fe fdb0 	bl	8001760 <HAL_GetTick>
 8002c00:	0002      	movs	r2, r0
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e227      	b.n	800305e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c0e:	4b59      	ldr	r3, [pc, #356]	; (8002d74 <HAL_RCC_OscConfig+0x32c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2202      	movs	r2, #2
 8002c14:	4013      	ands	r3, r2
 8002c16:	d0f1      	beq.n	8002bfc <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c18:	4b56      	ldr	r3, [pc, #344]	; (8002d74 <HAL_RCC_OscConfig+0x32c>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	22f8      	movs	r2, #248	; 0xf8
 8002c1e:	4393      	bics	r3, r2
 8002c20:	0019      	movs	r1, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	00da      	lsls	r2, r3, #3
 8002c28:	4b52      	ldr	r3, [pc, #328]	; (8002d74 <HAL_RCC_OscConfig+0x32c>)
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	e018      	b.n	8002c62 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c30:	4b50      	ldr	r3, [pc, #320]	; (8002d74 <HAL_RCC_OscConfig+0x32c>)
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	4b4f      	ldr	r3, [pc, #316]	; (8002d74 <HAL_RCC_OscConfig+0x32c>)
 8002c36:	2101      	movs	r1, #1
 8002c38:	438a      	bics	r2, r1
 8002c3a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3c:	f7fe fd90 	bl	8001760 <HAL_GetTick>
 8002c40:	0003      	movs	r3, r0
 8002c42:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c44:	e008      	b.n	8002c58 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c46:	f7fe fd8b 	bl	8001760 <HAL_GetTick>
 8002c4a:	0002      	movs	r2, r0
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e202      	b.n	800305e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c58:	4b46      	ldr	r3, [pc, #280]	; (8002d74 <HAL_RCC_OscConfig+0x32c>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	4013      	ands	r3, r2
 8002c60:	d1f1      	bne.n	8002c46 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2208      	movs	r2, #8
 8002c68:	4013      	ands	r3, r2
 8002c6a:	d036      	beq.n	8002cda <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	69db      	ldr	r3, [r3, #28]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d019      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c74:	4b3f      	ldr	r3, [pc, #252]	; (8002d74 <HAL_RCC_OscConfig+0x32c>)
 8002c76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c78:	4b3e      	ldr	r3, [pc, #248]	; (8002d74 <HAL_RCC_OscConfig+0x32c>)
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c80:	f7fe fd6e 	bl	8001760 <HAL_GetTick>
 8002c84:	0003      	movs	r3, r0
 8002c86:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c88:	e008      	b.n	8002c9c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c8a:	f7fe fd69 	bl	8001760 <HAL_GetTick>
 8002c8e:	0002      	movs	r2, r0
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e1e0      	b.n	800305e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c9c:	4b35      	ldr	r3, [pc, #212]	; (8002d74 <HAL_RCC_OscConfig+0x32c>)
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	d0f1      	beq.n	8002c8a <HAL_RCC_OscConfig+0x242>
 8002ca6:	e018      	b.n	8002cda <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ca8:	4b32      	ldr	r3, [pc, #200]	; (8002d74 <HAL_RCC_OscConfig+0x32c>)
 8002caa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cac:	4b31      	ldr	r3, [pc, #196]	; (8002d74 <HAL_RCC_OscConfig+0x32c>)
 8002cae:	2101      	movs	r1, #1
 8002cb0:	438a      	bics	r2, r1
 8002cb2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cb4:	f7fe fd54 	bl	8001760 <HAL_GetTick>
 8002cb8:	0003      	movs	r3, r0
 8002cba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cbc:	e008      	b.n	8002cd0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cbe:	f7fe fd4f 	bl	8001760 <HAL_GetTick>
 8002cc2:	0002      	movs	r2, r0
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e1c6      	b.n	800305e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cd0:	4b28      	ldr	r3, [pc, #160]	; (8002d74 <HAL_RCC_OscConfig+0x32c>)
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd4:	2202      	movs	r2, #2
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	d1f1      	bne.n	8002cbe <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2204      	movs	r2, #4
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	d100      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x29e>
 8002ce4:	e0b4      	b.n	8002e50 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ce6:	201f      	movs	r0, #31
 8002ce8:	183b      	adds	r3, r7, r0
 8002cea:	2200      	movs	r2, #0
 8002cec:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cee:	4b21      	ldr	r3, [pc, #132]	; (8002d74 <HAL_RCC_OscConfig+0x32c>)
 8002cf0:	69da      	ldr	r2, [r3, #28]
 8002cf2:	2380      	movs	r3, #128	; 0x80
 8002cf4:	055b      	lsls	r3, r3, #21
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	d110      	bne.n	8002d1c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cfa:	4b1e      	ldr	r3, [pc, #120]	; (8002d74 <HAL_RCC_OscConfig+0x32c>)
 8002cfc:	69da      	ldr	r2, [r3, #28]
 8002cfe:	4b1d      	ldr	r3, [pc, #116]	; (8002d74 <HAL_RCC_OscConfig+0x32c>)
 8002d00:	2180      	movs	r1, #128	; 0x80
 8002d02:	0549      	lsls	r1, r1, #21
 8002d04:	430a      	orrs	r2, r1
 8002d06:	61da      	str	r2, [r3, #28]
 8002d08:	4b1a      	ldr	r3, [pc, #104]	; (8002d74 <HAL_RCC_OscConfig+0x32c>)
 8002d0a:	69da      	ldr	r2, [r3, #28]
 8002d0c:	2380      	movs	r3, #128	; 0x80
 8002d0e:	055b      	lsls	r3, r3, #21
 8002d10:	4013      	ands	r3, r2
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002d16:	183b      	adds	r3, r7, r0
 8002d18:	2201      	movs	r2, #1
 8002d1a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d1c:	4b18      	ldr	r3, [pc, #96]	; (8002d80 <HAL_RCC_OscConfig+0x338>)
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	2380      	movs	r3, #128	; 0x80
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	4013      	ands	r3, r2
 8002d26:	d11a      	bne.n	8002d5e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d28:	4b15      	ldr	r3, [pc, #84]	; (8002d80 <HAL_RCC_OscConfig+0x338>)
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	4b14      	ldr	r3, [pc, #80]	; (8002d80 <HAL_RCC_OscConfig+0x338>)
 8002d2e:	2180      	movs	r1, #128	; 0x80
 8002d30:	0049      	lsls	r1, r1, #1
 8002d32:	430a      	orrs	r2, r1
 8002d34:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d36:	f7fe fd13 	bl	8001760 <HAL_GetTick>
 8002d3a:	0003      	movs	r3, r0
 8002d3c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d40:	f7fe fd0e 	bl	8001760 <HAL_GetTick>
 8002d44:	0002      	movs	r2, r0
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b64      	cmp	r3, #100	; 0x64
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e185      	b.n	800305e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d52:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <HAL_RCC_OscConfig+0x338>)
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	2380      	movs	r3, #128	; 0x80
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	d0f0      	beq.n	8002d40 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d10e      	bne.n	8002d84 <HAL_RCC_OscConfig+0x33c>
 8002d66:	4b03      	ldr	r3, [pc, #12]	; (8002d74 <HAL_RCC_OscConfig+0x32c>)
 8002d68:	6a1a      	ldr	r2, [r3, #32]
 8002d6a:	4b02      	ldr	r3, [pc, #8]	; (8002d74 <HAL_RCC_OscConfig+0x32c>)
 8002d6c:	2101      	movs	r1, #1
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	621a      	str	r2, [r3, #32]
 8002d72:	e035      	b.n	8002de0 <HAL_RCC_OscConfig+0x398>
 8002d74:	40021000 	.word	0x40021000
 8002d78:	fffeffff 	.word	0xfffeffff
 8002d7c:	fffbffff 	.word	0xfffbffff
 8002d80:	40007000 	.word	0x40007000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10c      	bne.n	8002da6 <HAL_RCC_OscConfig+0x35e>
 8002d8c:	4bb6      	ldr	r3, [pc, #728]	; (8003068 <HAL_RCC_OscConfig+0x620>)
 8002d8e:	6a1a      	ldr	r2, [r3, #32]
 8002d90:	4bb5      	ldr	r3, [pc, #724]	; (8003068 <HAL_RCC_OscConfig+0x620>)
 8002d92:	2101      	movs	r1, #1
 8002d94:	438a      	bics	r2, r1
 8002d96:	621a      	str	r2, [r3, #32]
 8002d98:	4bb3      	ldr	r3, [pc, #716]	; (8003068 <HAL_RCC_OscConfig+0x620>)
 8002d9a:	6a1a      	ldr	r2, [r3, #32]
 8002d9c:	4bb2      	ldr	r3, [pc, #712]	; (8003068 <HAL_RCC_OscConfig+0x620>)
 8002d9e:	2104      	movs	r1, #4
 8002da0:	438a      	bics	r2, r1
 8002da2:	621a      	str	r2, [r3, #32]
 8002da4:	e01c      	b.n	8002de0 <HAL_RCC_OscConfig+0x398>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	2b05      	cmp	r3, #5
 8002dac:	d10c      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x380>
 8002dae:	4bae      	ldr	r3, [pc, #696]	; (8003068 <HAL_RCC_OscConfig+0x620>)
 8002db0:	6a1a      	ldr	r2, [r3, #32]
 8002db2:	4bad      	ldr	r3, [pc, #692]	; (8003068 <HAL_RCC_OscConfig+0x620>)
 8002db4:	2104      	movs	r1, #4
 8002db6:	430a      	orrs	r2, r1
 8002db8:	621a      	str	r2, [r3, #32]
 8002dba:	4bab      	ldr	r3, [pc, #684]	; (8003068 <HAL_RCC_OscConfig+0x620>)
 8002dbc:	6a1a      	ldr	r2, [r3, #32]
 8002dbe:	4baa      	ldr	r3, [pc, #680]	; (8003068 <HAL_RCC_OscConfig+0x620>)
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	621a      	str	r2, [r3, #32]
 8002dc6:	e00b      	b.n	8002de0 <HAL_RCC_OscConfig+0x398>
 8002dc8:	4ba7      	ldr	r3, [pc, #668]	; (8003068 <HAL_RCC_OscConfig+0x620>)
 8002dca:	6a1a      	ldr	r2, [r3, #32]
 8002dcc:	4ba6      	ldr	r3, [pc, #664]	; (8003068 <HAL_RCC_OscConfig+0x620>)
 8002dce:	2101      	movs	r1, #1
 8002dd0:	438a      	bics	r2, r1
 8002dd2:	621a      	str	r2, [r3, #32]
 8002dd4:	4ba4      	ldr	r3, [pc, #656]	; (8003068 <HAL_RCC_OscConfig+0x620>)
 8002dd6:	6a1a      	ldr	r2, [r3, #32]
 8002dd8:	4ba3      	ldr	r3, [pc, #652]	; (8003068 <HAL_RCC_OscConfig+0x620>)
 8002dda:	2104      	movs	r1, #4
 8002ddc:	438a      	bics	r2, r1
 8002dde:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d014      	beq.n	8002e12 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de8:	f7fe fcba 	bl	8001760 <HAL_GetTick>
 8002dec:	0003      	movs	r3, r0
 8002dee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df0:	e009      	b.n	8002e06 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002df2:	f7fe fcb5 	bl	8001760 <HAL_GetTick>
 8002df6:	0002      	movs	r2, r0
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	4a9b      	ldr	r2, [pc, #620]	; (800306c <HAL_RCC_OscConfig+0x624>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e12b      	b.n	800305e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e06:	4b98      	ldr	r3, [pc, #608]	; (8003068 <HAL_RCC_OscConfig+0x620>)
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	d0f0      	beq.n	8002df2 <HAL_RCC_OscConfig+0x3aa>
 8002e10:	e013      	b.n	8002e3a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e12:	f7fe fca5 	bl	8001760 <HAL_GetTick>
 8002e16:	0003      	movs	r3, r0
 8002e18:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e1a:	e009      	b.n	8002e30 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e1c:	f7fe fca0 	bl	8001760 <HAL_GetTick>
 8002e20:	0002      	movs	r2, r0
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	4a91      	ldr	r2, [pc, #580]	; (800306c <HAL_RCC_OscConfig+0x624>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e116      	b.n	800305e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e30:	4b8d      	ldr	r3, [pc, #564]	; (8003068 <HAL_RCC_OscConfig+0x620>)
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	2202      	movs	r2, #2
 8002e36:	4013      	ands	r3, r2
 8002e38:	d1f0      	bne.n	8002e1c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e3a:	231f      	movs	r3, #31
 8002e3c:	18fb      	adds	r3, r7, r3
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d105      	bne.n	8002e50 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e44:	4b88      	ldr	r3, [pc, #544]	; (8003068 <HAL_RCC_OscConfig+0x620>)
 8002e46:	69da      	ldr	r2, [r3, #28]
 8002e48:	4b87      	ldr	r3, [pc, #540]	; (8003068 <HAL_RCC_OscConfig+0x620>)
 8002e4a:	4989      	ldr	r1, [pc, #548]	; (8003070 <HAL_RCC_OscConfig+0x628>)
 8002e4c:	400a      	ands	r2, r1
 8002e4e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2210      	movs	r2, #16
 8002e56:	4013      	ands	r3, r2
 8002e58:	d063      	beq.n	8002f22 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d12a      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002e62:	4b81      	ldr	r3, [pc, #516]	; (8003068 <HAL_RCC_OscConfig+0x620>)
 8002e64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e66:	4b80      	ldr	r3, [pc, #512]	; (8003068 <HAL_RCC_OscConfig+0x620>)
 8002e68:	2104      	movs	r1, #4
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002e6e:	4b7e      	ldr	r3, [pc, #504]	; (8003068 <HAL_RCC_OscConfig+0x620>)
 8002e70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e72:	4b7d      	ldr	r3, [pc, #500]	; (8003068 <HAL_RCC_OscConfig+0x620>)
 8002e74:	2101      	movs	r1, #1
 8002e76:	430a      	orrs	r2, r1
 8002e78:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e7a:	f7fe fc71 	bl	8001760 <HAL_GetTick>
 8002e7e:	0003      	movs	r3, r0
 8002e80:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002e84:	f7fe fc6c 	bl	8001760 <HAL_GetTick>
 8002e88:	0002      	movs	r2, r0
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e0e3      	b.n	800305e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002e96:	4b74      	ldr	r3, [pc, #464]	; (8003068 <HAL_RCC_OscConfig+0x620>)
 8002e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	d0f1      	beq.n	8002e84 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002ea0:	4b71      	ldr	r3, [pc, #452]	; (8003068 <HAL_RCC_OscConfig+0x620>)
 8002ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea4:	22f8      	movs	r2, #248	; 0xf8
 8002ea6:	4393      	bics	r3, r2
 8002ea8:	0019      	movs	r1, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	00da      	lsls	r2, r3, #3
 8002eb0:	4b6d      	ldr	r3, [pc, #436]	; (8003068 <HAL_RCC_OscConfig+0x620>)
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	635a      	str	r2, [r3, #52]	; 0x34
 8002eb6:	e034      	b.n	8002f22 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	3305      	adds	r3, #5
 8002ebe:	d111      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002ec0:	4b69      	ldr	r3, [pc, #420]	; (8003068 <HAL_RCC_OscConfig+0x620>)
 8002ec2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ec4:	4b68      	ldr	r3, [pc, #416]	; (8003068 <HAL_RCC_OscConfig+0x620>)
 8002ec6:	2104      	movs	r1, #4
 8002ec8:	438a      	bics	r2, r1
 8002eca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002ecc:	4b66      	ldr	r3, [pc, #408]	; (8003068 <HAL_RCC_OscConfig+0x620>)
 8002ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed0:	22f8      	movs	r2, #248	; 0xf8
 8002ed2:	4393      	bics	r3, r2
 8002ed4:	0019      	movs	r1, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	00da      	lsls	r2, r3, #3
 8002edc:	4b62      	ldr	r3, [pc, #392]	; (8003068 <HAL_RCC_OscConfig+0x620>)
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	635a      	str	r2, [r3, #52]	; 0x34
 8002ee2:	e01e      	b.n	8002f22 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002ee4:	4b60      	ldr	r3, [pc, #384]	; (8003068 <HAL_RCC_OscConfig+0x620>)
 8002ee6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ee8:	4b5f      	ldr	r3, [pc, #380]	; (8003068 <HAL_RCC_OscConfig+0x620>)
 8002eea:	2104      	movs	r1, #4
 8002eec:	430a      	orrs	r2, r1
 8002eee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002ef0:	4b5d      	ldr	r3, [pc, #372]	; (8003068 <HAL_RCC_OscConfig+0x620>)
 8002ef2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ef4:	4b5c      	ldr	r3, [pc, #368]	; (8003068 <HAL_RCC_OscConfig+0x620>)
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	438a      	bics	r2, r1
 8002efa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002efc:	f7fe fc30 	bl	8001760 <HAL_GetTick>
 8002f00:	0003      	movs	r3, r0
 8002f02:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002f04:	e008      	b.n	8002f18 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002f06:	f7fe fc2b 	bl	8001760 <HAL_GetTick>
 8002f0a:	0002      	movs	r2, r0
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d901      	bls.n	8002f18 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e0a2      	b.n	800305e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002f18:	4b53      	ldr	r3, [pc, #332]	; (8003068 <HAL_RCC_OscConfig+0x620>)
 8002f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f1c:	2202      	movs	r2, #2
 8002f1e:	4013      	ands	r3, r2
 8002f20:	d1f1      	bne.n	8002f06 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d100      	bne.n	8002f2c <HAL_RCC_OscConfig+0x4e4>
 8002f2a:	e097      	b.n	800305c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f2c:	4b4e      	ldr	r3, [pc, #312]	; (8003068 <HAL_RCC_OscConfig+0x620>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	220c      	movs	r2, #12
 8002f32:	4013      	ands	r3, r2
 8002f34:	2b08      	cmp	r3, #8
 8002f36:	d100      	bne.n	8002f3a <HAL_RCC_OscConfig+0x4f2>
 8002f38:	e06b      	b.n	8003012 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d14c      	bne.n	8002fdc <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f42:	4b49      	ldr	r3, [pc, #292]	; (8003068 <HAL_RCC_OscConfig+0x620>)
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	4b48      	ldr	r3, [pc, #288]	; (8003068 <HAL_RCC_OscConfig+0x620>)
 8002f48:	494a      	ldr	r1, [pc, #296]	; (8003074 <HAL_RCC_OscConfig+0x62c>)
 8002f4a:	400a      	ands	r2, r1
 8002f4c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4e:	f7fe fc07 	bl	8001760 <HAL_GetTick>
 8002f52:	0003      	movs	r3, r0
 8002f54:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f58:	f7fe fc02 	bl	8001760 <HAL_GetTick>
 8002f5c:	0002      	movs	r2, r0
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e079      	b.n	800305e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f6a:	4b3f      	ldr	r3, [pc, #252]	; (8003068 <HAL_RCC_OscConfig+0x620>)
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	2380      	movs	r3, #128	; 0x80
 8002f70:	049b      	lsls	r3, r3, #18
 8002f72:	4013      	ands	r3, r2
 8002f74:	d1f0      	bne.n	8002f58 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f76:	4b3c      	ldr	r3, [pc, #240]	; (8003068 <HAL_RCC_OscConfig+0x620>)
 8002f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7a:	220f      	movs	r2, #15
 8002f7c:	4393      	bics	r3, r2
 8002f7e:	0019      	movs	r1, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f84:	4b38      	ldr	r3, [pc, #224]	; (8003068 <HAL_RCC_OscConfig+0x620>)
 8002f86:	430a      	orrs	r2, r1
 8002f88:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f8a:	4b37      	ldr	r3, [pc, #220]	; (8003068 <HAL_RCC_OscConfig+0x620>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	4a3a      	ldr	r2, [pc, #232]	; (8003078 <HAL_RCC_OscConfig+0x630>)
 8002f90:	4013      	ands	r3, r2
 8002f92:	0019      	movs	r1, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	4b32      	ldr	r3, [pc, #200]	; (8003068 <HAL_RCC_OscConfig+0x620>)
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fa4:	4b30      	ldr	r3, [pc, #192]	; (8003068 <HAL_RCC_OscConfig+0x620>)
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	4b2f      	ldr	r3, [pc, #188]	; (8003068 <HAL_RCC_OscConfig+0x620>)
 8002faa:	2180      	movs	r1, #128	; 0x80
 8002fac:	0449      	lsls	r1, r1, #17
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb2:	f7fe fbd5 	bl	8001760 <HAL_GetTick>
 8002fb6:	0003      	movs	r3, r0
 8002fb8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fbc:	f7fe fbd0 	bl	8001760 <HAL_GetTick>
 8002fc0:	0002      	movs	r2, r0
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e047      	b.n	800305e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fce:	4b26      	ldr	r3, [pc, #152]	; (8003068 <HAL_RCC_OscConfig+0x620>)
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	2380      	movs	r3, #128	; 0x80
 8002fd4:	049b      	lsls	r3, r3, #18
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	d0f0      	beq.n	8002fbc <HAL_RCC_OscConfig+0x574>
 8002fda:	e03f      	b.n	800305c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fdc:	4b22      	ldr	r3, [pc, #136]	; (8003068 <HAL_RCC_OscConfig+0x620>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	4b21      	ldr	r3, [pc, #132]	; (8003068 <HAL_RCC_OscConfig+0x620>)
 8002fe2:	4924      	ldr	r1, [pc, #144]	; (8003074 <HAL_RCC_OscConfig+0x62c>)
 8002fe4:	400a      	ands	r2, r1
 8002fe6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe8:	f7fe fbba 	bl	8001760 <HAL_GetTick>
 8002fec:	0003      	movs	r3, r0
 8002fee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ff0:	e008      	b.n	8003004 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ff2:	f7fe fbb5 	bl	8001760 <HAL_GetTick>
 8002ff6:	0002      	movs	r2, r0
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e02c      	b.n	800305e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003004:	4b18      	ldr	r3, [pc, #96]	; (8003068 <HAL_RCC_OscConfig+0x620>)
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	2380      	movs	r3, #128	; 0x80
 800300a:	049b      	lsls	r3, r3, #18
 800300c:	4013      	ands	r3, r2
 800300e:	d1f0      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x5aa>
 8003010:	e024      	b.n	800305c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d101      	bne.n	800301e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e01f      	b.n	800305e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800301e:	4b12      	ldr	r3, [pc, #72]	; (8003068 <HAL_RCC_OscConfig+0x620>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003024:	4b10      	ldr	r3, [pc, #64]	; (8003068 <HAL_RCC_OscConfig+0x620>)
 8003026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003028:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	2380      	movs	r3, #128	; 0x80
 800302e:	025b      	lsls	r3, r3, #9
 8003030:	401a      	ands	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003036:	429a      	cmp	r2, r3
 8003038:	d10e      	bne.n	8003058 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	220f      	movs	r2, #15
 800303e:	401a      	ands	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003044:	429a      	cmp	r2, r3
 8003046:	d107      	bne.n	8003058 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	23f0      	movs	r3, #240	; 0xf0
 800304c:	039b      	lsls	r3, r3, #14
 800304e:	401a      	ands	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003054:	429a      	cmp	r2, r3
 8003056:	d001      	beq.n	800305c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e000      	b.n	800305e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	0018      	movs	r0, r3
 8003060:	46bd      	mov	sp, r7
 8003062:	b008      	add	sp, #32
 8003064:	bd80      	pop	{r7, pc}
 8003066:	46c0      	nop			; (mov r8, r8)
 8003068:	40021000 	.word	0x40021000
 800306c:	00001388 	.word	0x00001388
 8003070:	efffffff 	.word	0xefffffff
 8003074:	feffffff 	.word	0xfeffffff
 8003078:	ffc2ffff 	.word	0xffc2ffff

0800307c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e0b3      	b.n	80031f8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003090:	4b5b      	ldr	r3, [pc, #364]	; (8003200 <HAL_RCC_ClockConfig+0x184>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2201      	movs	r2, #1
 8003096:	4013      	ands	r3, r2
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	429a      	cmp	r2, r3
 800309c:	d911      	bls.n	80030c2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800309e:	4b58      	ldr	r3, [pc, #352]	; (8003200 <HAL_RCC_ClockConfig+0x184>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2201      	movs	r2, #1
 80030a4:	4393      	bics	r3, r2
 80030a6:	0019      	movs	r1, r3
 80030a8:	4b55      	ldr	r3, [pc, #340]	; (8003200 <HAL_RCC_ClockConfig+0x184>)
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	430a      	orrs	r2, r1
 80030ae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b0:	4b53      	ldr	r3, [pc, #332]	; (8003200 <HAL_RCC_ClockConfig+0x184>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2201      	movs	r2, #1
 80030b6:	4013      	ands	r3, r2
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d001      	beq.n	80030c2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e09a      	b.n	80031f8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2202      	movs	r2, #2
 80030c8:	4013      	ands	r3, r2
 80030ca:	d015      	beq.n	80030f8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2204      	movs	r2, #4
 80030d2:	4013      	ands	r3, r2
 80030d4:	d006      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80030d6:	4b4b      	ldr	r3, [pc, #300]	; (8003204 <HAL_RCC_ClockConfig+0x188>)
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	4b4a      	ldr	r3, [pc, #296]	; (8003204 <HAL_RCC_ClockConfig+0x188>)
 80030dc:	21e0      	movs	r1, #224	; 0xe0
 80030de:	00c9      	lsls	r1, r1, #3
 80030e0:	430a      	orrs	r2, r1
 80030e2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030e4:	4b47      	ldr	r3, [pc, #284]	; (8003204 <HAL_RCC_ClockConfig+0x188>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	22f0      	movs	r2, #240	; 0xf0
 80030ea:	4393      	bics	r3, r2
 80030ec:	0019      	movs	r1, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689a      	ldr	r2, [r3, #8]
 80030f2:	4b44      	ldr	r3, [pc, #272]	; (8003204 <HAL_RCC_ClockConfig+0x188>)
 80030f4:	430a      	orrs	r2, r1
 80030f6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2201      	movs	r2, #1
 80030fe:	4013      	ands	r3, r2
 8003100:	d040      	beq.n	8003184 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d107      	bne.n	800311a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800310a:	4b3e      	ldr	r3, [pc, #248]	; (8003204 <HAL_RCC_ClockConfig+0x188>)
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	2380      	movs	r3, #128	; 0x80
 8003110:	029b      	lsls	r3, r3, #10
 8003112:	4013      	ands	r3, r2
 8003114:	d114      	bne.n	8003140 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e06e      	b.n	80031f8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2b02      	cmp	r3, #2
 8003120:	d107      	bne.n	8003132 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003122:	4b38      	ldr	r3, [pc, #224]	; (8003204 <HAL_RCC_ClockConfig+0x188>)
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	2380      	movs	r3, #128	; 0x80
 8003128:	049b      	lsls	r3, r3, #18
 800312a:	4013      	ands	r3, r2
 800312c:	d108      	bne.n	8003140 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e062      	b.n	80031f8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003132:	4b34      	ldr	r3, [pc, #208]	; (8003204 <HAL_RCC_ClockConfig+0x188>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2202      	movs	r2, #2
 8003138:	4013      	ands	r3, r2
 800313a:	d101      	bne.n	8003140 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e05b      	b.n	80031f8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003140:	4b30      	ldr	r3, [pc, #192]	; (8003204 <HAL_RCC_ClockConfig+0x188>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	2203      	movs	r2, #3
 8003146:	4393      	bics	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685a      	ldr	r2, [r3, #4]
 800314e:	4b2d      	ldr	r3, [pc, #180]	; (8003204 <HAL_RCC_ClockConfig+0x188>)
 8003150:	430a      	orrs	r2, r1
 8003152:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003154:	f7fe fb04 	bl	8001760 <HAL_GetTick>
 8003158:	0003      	movs	r3, r0
 800315a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800315c:	e009      	b.n	8003172 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800315e:	f7fe faff 	bl	8001760 <HAL_GetTick>
 8003162:	0002      	movs	r2, r0
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	4a27      	ldr	r2, [pc, #156]	; (8003208 <HAL_RCC_ClockConfig+0x18c>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e042      	b.n	80031f8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003172:	4b24      	ldr	r3, [pc, #144]	; (8003204 <HAL_RCC_ClockConfig+0x188>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	220c      	movs	r2, #12
 8003178:	401a      	ands	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	429a      	cmp	r2, r3
 8003182:	d1ec      	bne.n	800315e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003184:	4b1e      	ldr	r3, [pc, #120]	; (8003200 <HAL_RCC_ClockConfig+0x184>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2201      	movs	r2, #1
 800318a:	4013      	ands	r3, r2
 800318c:	683a      	ldr	r2, [r7, #0]
 800318e:	429a      	cmp	r2, r3
 8003190:	d211      	bcs.n	80031b6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003192:	4b1b      	ldr	r3, [pc, #108]	; (8003200 <HAL_RCC_ClockConfig+0x184>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2201      	movs	r2, #1
 8003198:	4393      	bics	r3, r2
 800319a:	0019      	movs	r1, r3
 800319c:	4b18      	ldr	r3, [pc, #96]	; (8003200 <HAL_RCC_ClockConfig+0x184>)
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a4:	4b16      	ldr	r3, [pc, #88]	; (8003200 <HAL_RCC_ClockConfig+0x184>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2201      	movs	r2, #1
 80031aa:	4013      	ands	r3, r2
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d001      	beq.n	80031b6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e020      	b.n	80031f8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2204      	movs	r2, #4
 80031bc:	4013      	ands	r3, r2
 80031be:	d009      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80031c0:	4b10      	ldr	r3, [pc, #64]	; (8003204 <HAL_RCC_ClockConfig+0x188>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	4a11      	ldr	r2, [pc, #68]	; (800320c <HAL_RCC_ClockConfig+0x190>)
 80031c6:	4013      	ands	r3, r2
 80031c8:	0019      	movs	r1, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68da      	ldr	r2, [r3, #12]
 80031ce:	4b0d      	ldr	r3, [pc, #52]	; (8003204 <HAL_RCC_ClockConfig+0x188>)
 80031d0:	430a      	orrs	r2, r1
 80031d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80031d4:	f000 f820 	bl	8003218 <HAL_RCC_GetSysClockFreq>
 80031d8:	0001      	movs	r1, r0
 80031da:	4b0a      	ldr	r3, [pc, #40]	; (8003204 <HAL_RCC_ClockConfig+0x188>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	091b      	lsrs	r3, r3, #4
 80031e0:	220f      	movs	r2, #15
 80031e2:	4013      	ands	r3, r2
 80031e4:	4a0a      	ldr	r2, [pc, #40]	; (8003210 <HAL_RCC_ClockConfig+0x194>)
 80031e6:	5cd3      	ldrb	r3, [r2, r3]
 80031e8:	000a      	movs	r2, r1
 80031ea:	40da      	lsrs	r2, r3
 80031ec:	4b09      	ldr	r3, [pc, #36]	; (8003214 <HAL_RCC_ClockConfig+0x198>)
 80031ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80031f0:	2003      	movs	r0, #3
 80031f2:	f7fe fa6f 	bl	80016d4 <HAL_InitTick>
  
  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	0018      	movs	r0, r3
 80031fa:	46bd      	mov	sp, r7
 80031fc:	b004      	add	sp, #16
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40022000 	.word	0x40022000
 8003204:	40021000 	.word	0x40021000
 8003208:	00001388 	.word	0x00001388
 800320c:	fffff8ff 	.word	0xfffff8ff
 8003210:	08005f08 	.word	0x08005f08
 8003214:	2000001c 	.word	0x2000001c

08003218 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003218:	b590      	push	{r4, r7, lr}
 800321a:	b08f      	sub	sp, #60	; 0x3c
 800321c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800321e:	2314      	movs	r3, #20
 8003220:	18fb      	adds	r3, r7, r3
 8003222:	4a2b      	ldr	r2, [pc, #172]	; (80032d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003224:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003226:	c313      	stmia	r3!, {r0, r1, r4}
 8003228:	6812      	ldr	r2, [r2, #0]
 800322a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800322c:	1d3b      	adds	r3, r7, #4
 800322e:	4a29      	ldr	r2, [pc, #164]	; (80032d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003230:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003232:	c313      	stmia	r3!, {r0, r1, r4}
 8003234:	6812      	ldr	r2, [r2, #0]
 8003236:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003238:	2300      	movs	r3, #0
 800323a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800323c:	2300      	movs	r3, #0
 800323e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003240:	2300      	movs	r3, #0
 8003242:	637b      	str	r3, [r7, #52]	; 0x34
 8003244:	2300      	movs	r3, #0
 8003246:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003248:	2300      	movs	r3, #0
 800324a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800324c:	4b22      	ldr	r3, [pc, #136]	; (80032d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003254:	220c      	movs	r2, #12
 8003256:	4013      	ands	r3, r2
 8003258:	2b04      	cmp	r3, #4
 800325a:	d002      	beq.n	8003262 <HAL_RCC_GetSysClockFreq+0x4a>
 800325c:	2b08      	cmp	r3, #8
 800325e:	d003      	beq.n	8003268 <HAL_RCC_GetSysClockFreq+0x50>
 8003260:	e02d      	b.n	80032be <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003262:	4b1e      	ldr	r3, [pc, #120]	; (80032dc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003264:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003266:	e02d      	b.n	80032c4 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800326a:	0c9b      	lsrs	r3, r3, #18
 800326c:	220f      	movs	r2, #15
 800326e:	4013      	ands	r3, r2
 8003270:	2214      	movs	r2, #20
 8003272:	18ba      	adds	r2, r7, r2
 8003274:	5cd3      	ldrb	r3, [r2, r3]
 8003276:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003278:	4b17      	ldr	r3, [pc, #92]	; (80032d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800327a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327c:	220f      	movs	r2, #15
 800327e:	4013      	ands	r3, r2
 8003280:	1d3a      	adds	r2, r7, #4
 8003282:	5cd3      	ldrb	r3, [r2, r3]
 8003284:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003286:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003288:	2380      	movs	r3, #128	; 0x80
 800328a:	025b      	lsls	r3, r3, #9
 800328c:	4013      	ands	r3, r2
 800328e:	d009      	beq.n	80032a4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003290:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003292:	4812      	ldr	r0, [pc, #72]	; (80032dc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003294:	f7fc ff38 	bl	8000108 <__udivsi3>
 8003298:	0003      	movs	r3, r0
 800329a:	001a      	movs	r2, r3
 800329c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329e:	4353      	muls	r3, r2
 80032a0:	637b      	str	r3, [r7, #52]	; 0x34
 80032a2:	e009      	b.n	80032b8 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80032a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032a6:	000a      	movs	r2, r1
 80032a8:	0152      	lsls	r2, r2, #5
 80032aa:	1a52      	subs	r2, r2, r1
 80032ac:	0193      	lsls	r3, r2, #6
 80032ae:	1a9b      	subs	r3, r3, r2
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	185b      	adds	r3, r3, r1
 80032b4:	021b      	lsls	r3, r3, #8
 80032b6:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80032b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80032bc:	e002      	b.n	80032c4 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032be:	4b07      	ldr	r3, [pc, #28]	; (80032dc <HAL_RCC_GetSysClockFreq+0xc4>)
 80032c0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80032c2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80032c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80032c6:	0018      	movs	r0, r3
 80032c8:	46bd      	mov	sp, r7
 80032ca:	b00f      	add	sp, #60	; 0x3c
 80032cc:	bd90      	pop	{r4, r7, pc}
 80032ce:	46c0      	nop			; (mov r8, r8)
 80032d0:	08005ee4 	.word	0x08005ee4
 80032d4:	08005ef4 	.word	0x08005ef4
 80032d8:	40021000 	.word	0x40021000
 80032dc:	007a1200 	.word	0x007a1200

080032e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032e4:	4b02      	ldr	r3, [pc, #8]	; (80032f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80032e6:	681b      	ldr	r3, [r3, #0]
}
 80032e8:	0018      	movs	r0, r3
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	46c0      	nop			; (mov r8, r8)
 80032f0:	2000001c 	.word	0x2000001c

080032f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80032f8:	f7ff fff2 	bl	80032e0 <HAL_RCC_GetHCLKFreq>
 80032fc:	0001      	movs	r1, r0
 80032fe:	4b06      	ldr	r3, [pc, #24]	; (8003318 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	0a1b      	lsrs	r3, r3, #8
 8003304:	2207      	movs	r2, #7
 8003306:	4013      	ands	r3, r2
 8003308:	4a04      	ldr	r2, [pc, #16]	; (800331c <HAL_RCC_GetPCLK1Freq+0x28>)
 800330a:	5cd3      	ldrb	r3, [r2, r3]
 800330c:	40d9      	lsrs	r1, r3
 800330e:	000b      	movs	r3, r1
}    
 8003310:	0018      	movs	r0, r3
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	40021000 	.word	0x40021000
 800331c:	08005f18 	.word	0x08005f18

08003320 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003328:	2300      	movs	r3, #0
 800332a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800332c:	2300      	movs	r3, #0
 800332e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	2380      	movs	r3, #128	; 0x80
 8003336:	025b      	lsls	r3, r3, #9
 8003338:	4013      	ands	r3, r2
 800333a:	d100      	bne.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800333c:	e08e      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800333e:	2017      	movs	r0, #23
 8003340:	183b      	adds	r3, r7, r0
 8003342:	2200      	movs	r2, #0
 8003344:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003346:	4b5f      	ldr	r3, [pc, #380]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003348:	69da      	ldr	r2, [r3, #28]
 800334a:	2380      	movs	r3, #128	; 0x80
 800334c:	055b      	lsls	r3, r3, #21
 800334e:	4013      	ands	r3, r2
 8003350:	d110      	bne.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003352:	4b5c      	ldr	r3, [pc, #368]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003354:	69da      	ldr	r2, [r3, #28]
 8003356:	4b5b      	ldr	r3, [pc, #364]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003358:	2180      	movs	r1, #128	; 0x80
 800335a:	0549      	lsls	r1, r1, #21
 800335c:	430a      	orrs	r2, r1
 800335e:	61da      	str	r2, [r3, #28]
 8003360:	4b58      	ldr	r3, [pc, #352]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003362:	69da      	ldr	r2, [r3, #28]
 8003364:	2380      	movs	r3, #128	; 0x80
 8003366:	055b      	lsls	r3, r3, #21
 8003368:	4013      	ands	r3, r2
 800336a:	60bb      	str	r3, [r7, #8]
 800336c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800336e:	183b      	adds	r3, r7, r0
 8003370:	2201      	movs	r2, #1
 8003372:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003374:	4b54      	ldr	r3, [pc, #336]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	2380      	movs	r3, #128	; 0x80
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	4013      	ands	r3, r2
 800337e:	d11a      	bne.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003380:	4b51      	ldr	r3, [pc, #324]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	4b50      	ldr	r3, [pc, #320]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003386:	2180      	movs	r1, #128	; 0x80
 8003388:	0049      	lsls	r1, r1, #1
 800338a:	430a      	orrs	r2, r1
 800338c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800338e:	f7fe f9e7 	bl	8001760 <HAL_GetTick>
 8003392:	0003      	movs	r3, r0
 8003394:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003396:	e008      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003398:	f7fe f9e2 	bl	8001760 <HAL_GetTick>
 800339c:	0002      	movs	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b64      	cmp	r3, #100	; 0x64
 80033a4:	d901      	bls.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e087      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033aa:	4b47      	ldr	r3, [pc, #284]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	2380      	movs	r3, #128	; 0x80
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	4013      	ands	r3, r2
 80033b4:	d0f0      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033b6:	4b43      	ldr	r3, [pc, #268]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80033b8:	6a1a      	ldr	r2, [r3, #32]
 80033ba:	23c0      	movs	r3, #192	; 0xc0
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	4013      	ands	r3, r2
 80033c0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d034      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	23c0      	movs	r3, #192	; 0xc0
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4013      	ands	r3, r2
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d02c      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033d8:	4b3a      	ldr	r3, [pc, #232]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	4a3b      	ldr	r2, [pc, #236]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033de:	4013      	ands	r3, r2
 80033e0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033e2:	4b38      	ldr	r3, [pc, #224]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80033e4:	6a1a      	ldr	r2, [r3, #32]
 80033e6:	4b37      	ldr	r3, [pc, #220]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80033e8:	2180      	movs	r1, #128	; 0x80
 80033ea:	0249      	lsls	r1, r1, #9
 80033ec:	430a      	orrs	r2, r1
 80033ee:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033f0:	4b34      	ldr	r3, [pc, #208]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80033f2:	6a1a      	ldr	r2, [r3, #32]
 80033f4:	4b33      	ldr	r3, [pc, #204]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80033f6:	4936      	ldr	r1, [pc, #216]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80033f8:	400a      	ands	r2, r1
 80033fa:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80033fc:	4b31      	ldr	r3, [pc, #196]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2201      	movs	r2, #1
 8003406:	4013      	ands	r3, r2
 8003408:	d013      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800340a:	f7fe f9a9 	bl	8001760 <HAL_GetTick>
 800340e:	0003      	movs	r3, r0
 8003410:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003412:	e009      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003414:	f7fe f9a4 	bl	8001760 <HAL_GetTick>
 8003418:	0002      	movs	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	4a2d      	ldr	r2, [pc, #180]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d901      	bls.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e048      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003428:	4b26      	ldr	r3, [pc, #152]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	2202      	movs	r2, #2
 800342e:	4013      	ands	r3, r2
 8003430:	d0f0      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003432:	4b24      	ldr	r3, [pc, #144]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	4a25      	ldr	r2, [pc, #148]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003438:	4013      	ands	r3, r2
 800343a:	0019      	movs	r1, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	4b20      	ldr	r3, [pc, #128]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003442:	430a      	orrs	r2, r1
 8003444:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003446:	2317      	movs	r3, #23
 8003448:	18fb      	adds	r3, r7, r3
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d105      	bne.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003450:	4b1c      	ldr	r3, [pc, #112]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003452:	69da      	ldr	r2, [r3, #28]
 8003454:	4b1b      	ldr	r3, [pc, #108]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003456:	4920      	ldr	r1, [pc, #128]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003458:	400a      	ands	r2, r1
 800345a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2201      	movs	r2, #1
 8003462:	4013      	ands	r3, r2
 8003464:	d009      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003466:	4b17      	ldr	r3, [pc, #92]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346a:	2203      	movs	r2, #3
 800346c:	4393      	bics	r3, r2
 800346e:	0019      	movs	r1, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	4b13      	ldr	r3, [pc, #76]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003476:	430a      	orrs	r2, r1
 8003478:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2220      	movs	r2, #32
 8003480:	4013      	ands	r3, r2
 8003482:	d009      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003484:	4b0f      	ldr	r3, [pc, #60]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003488:	2210      	movs	r2, #16
 800348a:	4393      	bics	r3, r2
 800348c:	0019      	movs	r1, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68da      	ldr	r2, [r3, #12]
 8003492:	4b0c      	ldr	r3, [pc, #48]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003494:	430a      	orrs	r2, r1
 8003496:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	2380      	movs	r3, #128	; 0x80
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	4013      	ands	r3, r2
 80034a2:	d009      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80034a4:	4b07      	ldr	r3, [pc, #28]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80034a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a8:	2240      	movs	r2, #64	; 0x40
 80034aa:	4393      	bics	r3, r2
 80034ac:	0019      	movs	r1, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	691a      	ldr	r2, [r3, #16]
 80034b2:	4b04      	ldr	r3, [pc, #16]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80034b4:	430a      	orrs	r2, r1
 80034b6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	0018      	movs	r0, r3
 80034bc:	46bd      	mov	sp, r7
 80034be:	b006      	add	sp, #24
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	46c0      	nop			; (mov r8, r8)
 80034c4:	40021000 	.word	0x40021000
 80034c8:	40007000 	.word	0x40007000
 80034cc:	fffffcff 	.word	0xfffffcff
 80034d0:	fffeffff 	.word	0xfffeffff
 80034d4:	00001388 	.word	0x00001388
 80034d8:	efffffff 	.word	0xefffffff

080034dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e0a8      	b.n	8003640 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d109      	bne.n	800350a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	2382      	movs	r3, #130	; 0x82
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	429a      	cmp	r2, r3
 8003500:	d009      	beq.n	8003516 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	61da      	str	r2, [r3, #28]
 8003508:	e005      	b.n	8003516 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	225d      	movs	r2, #93	; 0x5d
 8003520:	5c9b      	ldrb	r3, [r3, r2]
 8003522:	b2db      	uxtb	r3, r3
 8003524:	2b00      	cmp	r3, #0
 8003526:	d107      	bne.n	8003538 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	225c      	movs	r2, #92	; 0x5c
 800352c:	2100      	movs	r1, #0
 800352e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	0018      	movs	r0, r3
 8003534:	f7fd fe7c 	bl	8001230 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	225d      	movs	r2, #93	; 0x5d
 800353c:	2102      	movs	r1, #2
 800353e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2140      	movs	r1, #64	; 0x40
 800354c:	438a      	bics	r2, r1
 800354e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68da      	ldr	r2, [r3, #12]
 8003554:	23e0      	movs	r3, #224	; 0xe0
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	429a      	cmp	r2, r3
 800355a:	d902      	bls.n	8003562 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800355c:	2300      	movs	r3, #0
 800355e:	60fb      	str	r3, [r7, #12]
 8003560:	e002      	b.n	8003568 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003562:	2380      	movs	r3, #128	; 0x80
 8003564:	015b      	lsls	r3, r3, #5
 8003566:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68da      	ldr	r2, [r3, #12]
 800356c:	23f0      	movs	r3, #240	; 0xf0
 800356e:	011b      	lsls	r3, r3, #4
 8003570:	429a      	cmp	r2, r3
 8003572:	d008      	beq.n	8003586 <HAL_SPI_Init+0xaa>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	68da      	ldr	r2, [r3, #12]
 8003578:	23e0      	movs	r3, #224	; 0xe0
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	429a      	cmp	r2, r3
 800357e:	d002      	beq.n	8003586 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	2382      	movs	r3, #130	; 0x82
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	401a      	ands	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6899      	ldr	r1, [r3, #8]
 8003594:	2384      	movs	r3, #132	; 0x84
 8003596:	021b      	lsls	r3, r3, #8
 8003598:	400b      	ands	r3, r1
 800359a:	431a      	orrs	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	2102      	movs	r1, #2
 80035a2:	400b      	ands	r3, r1
 80035a4:	431a      	orrs	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	2101      	movs	r1, #1
 80035ac:	400b      	ands	r3, r1
 80035ae:	431a      	orrs	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6999      	ldr	r1, [r3, #24]
 80035b4:	2380      	movs	r3, #128	; 0x80
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	400b      	ands	r3, r1
 80035ba:	431a      	orrs	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	69db      	ldr	r3, [r3, #28]
 80035c0:	2138      	movs	r1, #56	; 0x38
 80035c2:	400b      	ands	r3, r1
 80035c4:	431a      	orrs	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	2180      	movs	r1, #128	; 0x80
 80035cc:	400b      	ands	r3, r1
 80035ce:	431a      	orrs	r2, r3
 80035d0:	0011      	movs	r1, r2
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035d6:	2380      	movs	r3, #128	; 0x80
 80035d8:	019b      	lsls	r3, r3, #6
 80035da:	401a      	ands	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	430a      	orrs	r2, r1
 80035e2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	0c1b      	lsrs	r3, r3, #16
 80035ea:	2204      	movs	r2, #4
 80035ec:	401a      	ands	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	2110      	movs	r1, #16
 80035f4:	400b      	ands	r3, r1
 80035f6:	431a      	orrs	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035fc:	2108      	movs	r1, #8
 80035fe:	400b      	ands	r3, r1
 8003600:	431a      	orrs	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68d9      	ldr	r1, [r3, #12]
 8003606:	23f0      	movs	r3, #240	; 0xf0
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	400b      	ands	r3, r1
 800360c:	431a      	orrs	r2, r3
 800360e:	0011      	movs	r1, r2
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	2380      	movs	r3, #128	; 0x80
 8003614:	015b      	lsls	r3, r3, #5
 8003616:	401a      	ands	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	430a      	orrs	r2, r1
 800361e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	69da      	ldr	r2, [r3, #28]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4907      	ldr	r1, [pc, #28]	; (8003648 <HAL_SPI_Init+0x16c>)
 800362c:	400a      	ands	r2, r1
 800362e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	225d      	movs	r2, #93	; 0x5d
 800363a:	2101      	movs	r1, #1
 800363c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	0018      	movs	r0, r3
 8003642:	46bd      	mov	sp, r7
 8003644:	b004      	add	sp, #16
 8003646:	bd80      	pop	{r7, pc}
 8003648:	fffff7ff 	.word	0xfffff7ff

0800364c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b088      	sub	sp, #32
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	603b      	str	r3, [r7, #0]
 8003658:	1dbb      	adds	r3, r7, #6
 800365a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800365c:	231f      	movs	r3, #31
 800365e:	18fb      	adds	r3, r7, r3
 8003660:	2200      	movs	r2, #0
 8003662:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	225c      	movs	r2, #92	; 0x5c
 8003668:	5c9b      	ldrb	r3, [r3, r2]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d101      	bne.n	8003672 <HAL_SPI_Transmit+0x26>
 800366e:	2302      	movs	r3, #2
 8003670:	e140      	b.n	80038f4 <HAL_SPI_Transmit+0x2a8>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	225c      	movs	r2, #92	; 0x5c
 8003676:	2101      	movs	r1, #1
 8003678:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800367a:	f7fe f871 	bl	8001760 <HAL_GetTick>
 800367e:	0003      	movs	r3, r0
 8003680:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003682:	2316      	movs	r3, #22
 8003684:	18fb      	adds	r3, r7, r3
 8003686:	1dba      	adds	r2, r7, #6
 8003688:	8812      	ldrh	r2, [r2, #0]
 800368a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	225d      	movs	r2, #93	; 0x5d
 8003690:	5c9b      	ldrb	r3, [r3, r2]
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b01      	cmp	r3, #1
 8003696:	d004      	beq.n	80036a2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003698:	231f      	movs	r3, #31
 800369a:	18fb      	adds	r3, r7, r3
 800369c:	2202      	movs	r2, #2
 800369e:	701a      	strb	r2, [r3, #0]
    goto error;
 80036a0:	e11d      	b.n	80038de <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d003      	beq.n	80036b0 <HAL_SPI_Transmit+0x64>
 80036a8:	1dbb      	adds	r3, r7, #6
 80036aa:	881b      	ldrh	r3, [r3, #0]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d104      	bne.n	80036ba <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80036b0:	231f      	movs	r3, #31
 80036b2:	18fb      	adds	r3, r7, r3
 80036b4:	2201      	movs	r2, #1
 80036b6:	701a      	strb	r2, [r3, #0]
    goto error;
 80036b8:	e111      	b.n	80038de <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	225d      	movs	r2, #93	; 0x5d
 80036be:	2103      	movs	r1, #3
 80036c0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	68ba      	ldr	r2, [r7, #8]
 80036cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	1dba      	adds	r2, r7, #6
 80036d2:	8812      	ldrh	r2, [r2, #0]
 80036d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	1dba      	adds	r2, r7, #6
 80036da:	8812      	ldrh	r2, [r2, #0]
 80036dc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2244      	movs	r2, #68	; 0x44
 80036e8:	2100      	movs	r1, #0
 80036ea:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2246      	movs	r2, #70	; 0x46
 80036f0:	2100      	movs	r1, #0
 80036f2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	689a      	ldr	r2, [r3, #8]
 8003704:	2380      	movs	r3, #128	; 0x80
 8003706:	021b      	lsls	r3, r3, #8
 8003708:	429a      	cmp	r2, r3
 800370a:	d110      	bne.n	800372e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2140      	movs	r1, #64	; 0x40
 8003718:	438a      	bics	r2, r1
 800371a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2180      	movs	r1, #128	; 0x80
 8003728:	01c9      	lsls	r1, r1, #7
 800372a:	430a      	orrs	r2, r1
 800372c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2240      	movs	r2, #64	; 0x40
 8003736:	4013      	ands	r3, r2
 8003738:	2b40      	cmp	r3, #64	; 0x40
 800373a:	d007      	beq.n	800374c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2140      	movs	r1, #64	; 0x40
 8003748:	430a      	orrs	r2, r1
 800374a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	68da      	ldr	r2, [r3, #12]
 8003750:	23e0      	movs	r3, #224	; 0xe0
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	429a      	cmp	r2, r3
 8003756:	d94e      	bls.n	80037f6 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d004      	beq.n	800376a <HAL_SPI_Transmit+0x11e>
 8003760:	2316      	movs	r3, #22
 8003762:	18fb      	adds	r3, r7, r3
 8003764:	881b      	ldrh	r3, [r3, #0]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d13f      	bne.n	80037ea <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376e:	881a      	ldrh	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377a:	1c9a      	adds	r2, r3, #2
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003784:	b29b      	uxth	r3, r3
 8003786:	3b01      	subs	r3, #1
 8003788:	b29a      	uxth	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800378e:	e02c      	b.n	80037ea <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	2202      	movs	r2, #2
 8003798:	4013      	ands	r3, r2
 800379a:	2b02      	cmp	r3, #2
 800379c:	d112      	bne.n	80037c4 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a2:	881a      	ldrh	r2, [r3, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ae:	1c9a      	adds	r2, r3, #2
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	3b01      	subs	r3, #1
 80037bc:	b29a      	uxth	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037c2:	e012      	b.n	80037ea <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037c4:	f7fd ffcc 	bl	8001760 <HAL_GetTick>
 80037c8:	0002      	movs	r2, r0
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	683a      	ldr	r2, [r7, #0]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d802      	bhi.n	80037da <HAL_SPI_Transmit+0x18e>
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	3301      	adds	r3, #1
 80037d8:	d102      	bne.n	80037e0 <HAL_SPI_Transmit+0x194>
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d104      	bne.n	80037ea <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80037e0:	231f      	movs	r3, #31
 80037e2:	18fb      	adds	r3, r7, r3
 80037e4:	2203      	movs	r2, #3
 80037e6:	701a      	strb	r2, [r3, #0]
          goto error;
 80037e8:	e079      	b.n	80038de <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1cd      	bne.n	8003790 <HAL_SPI_Transmit+0x144>
 80037f4:	e04f      	b.n	8003896 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d004      	beq.n	8003808 <HAL_SPI_Transmit+0x1bc>
 80037fe:	2316      	movs	r3, #22
 8003800:	18fb      	adds	r3, r7, r3
 8003802:	881b      	ldrh	r3, [r3, #0]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d141      	bne.n	800388c <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	330c      	adds	r3, #12
 8003812:	7812      	ldrb	r2, [r2, #0]
 8003814:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381a:	1c5a      	adds	r2, r3, #1
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003824:	b29b      	uxth	r3, r3
 8003826:	3b01      	subs	r3, #1
 8003828:	b29a      	uxth	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800382e:	e02d      	b.n	800388c <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	2202      	movs	r2, #2
 8003838:	4013      	ands	r3, r2
 800383a:	2b02      	cmp	r3, #2
 800383c:	d113      	bne.n	8003866 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	330c      	adds	r3, #12
 8003848:	7812      	ldrb	r2, [r2, #0]
 800384a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003850:	1c5a      	adds	r2, r3, #1
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800385a:	b29b      	uxth	r3, r3
 800385c:	3b01      	subs	r3, #1
 800385e:	b29a      	uxth	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003864:	e012      	b.n	800388c <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003866:	f7fd ff7b 	bl	8001760 <HAL_GetTick>
 800386a:	0002      	movs	r2, r0
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	429a      	cmp	r2, r3
 8003874:	d802      	bhi.n	800387c <HAL_SPI_Transmit+0x230>
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	3301      	adds	r3, #1
 800387a:	d102      	bne.n	8003882 <HAL_SPI_Transmit+0x236>
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d104      	bne.n	800388c <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8003882:	231f      	movs	r3, #31
 8003884:	18fb      	adds	r3, r7, r3
 8003886:	2203      	movs	r2, #3
 8003888:	701a      	strb	r2, [r3, #0]
          goto error;
 800388a:	e028      	b.n	80038de <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003890:	b29b      	uxth	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1cc      	bne.n	8003830 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	6839      	ldr	r1, [r7, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	0018      	movs	r0, r3
 800389e:	f000 f95d 	bl	8003b5c <SPI_EndRxTxTransaction>
 80038a2:	1e03      	subs	r3, r0, #0
 80038a4:	d002      	beq.n	80038ac <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2220      	movs	r2, #32
 80038aa:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d10a      	bne.n	80038ca <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038b4:	2300      	movs	r3, #0
 80038b6:	613b      	str	r3, [r7, #16]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	613b      	str	r3, [r7, #16]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	613b      	str	r3, [r7, #16]
 80038c8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d004      	beq.n	80038dc <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80038d2:	231f      	movs	r3, #31
 80038d4:	18fb      	adds	r3, r7, r3
 80038d6:	2201      	movs	r2, #1
 80038d8:	701a      	strb	r2, [r3, #0]
 80038da:	e000      	b.n	80038de <HAL_SPI_Transmit+0x292>
  }

error:
 80038dc:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	225d      	movs	r2, #93	; 0x5d
 80038e2:	2101      	movs	r1, #1
 80038e4:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	225c      	movs	r2, #92	; 0x5c
 80038ea:	2100      	movs	r1, #0
 80038ec:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80038ee:	231f      	movs	r3, #31
 80038f0:	18fb      	adds	r3, r7, r3
 80038f2:	781b      	ldrb	r3, [r3, #0]
}
 80038f4:	0018      	movs	r0, r3
 80038f6:	46bd      	mov	sp, r7
 80038f8:	b008      	add	sp, #32
 80038fa:	bd80      	pop	{r7, pc}

080038fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b088      	sub	sp, #32
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	603b      	str	r3, [r7, #0]
 8003908:	1dfb      	adds	r3, r7, #7
 800390a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800390c:	f7fd ff28 	bl	8001760 <HAL_GetTick>
 8003910:	0002      	movs	r2, r0
 8003912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003914:	1a9b      	subs	r3, r3, r2
 8003916:	683a      	ldr	r2, [r7, #0]
 8003918:	18d3      	adds	r3, r2, r3
 800391a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800391c:	f7fd ff20 	bl	8001760 <HAL_GetTick>
 8003920:	0003      	movs	r3, r0
 8003922:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003924:	4b3a      	ldr	r3, [pc, #232]	; (8003a10 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	015b      	lsls	r3, r3, #5
 800392a:	0d1b      	lsrs	r3, r3, #20
 800392c:	69fa      	ldr	r2, [r7, #28]
 800392e:	4353      	muls	r3, r2
 8003930:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003932:	e058      	b.n	80039e6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	3301      	adds	r3, #1
 8003938:	d055      	beq.n	80039e6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800393a:	f7fd ff11 	bl	8001760 <HAL_GetTick>
 800393e:	0002      	movs	r2, r0
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	69fa      	ldr	r2, [r7, #28]
 8003946:	429a      	cmp	r2, r3
 8003948:	d902      	bls.n	8003950 <SPI_WaitFlagStateUntilTimeout+0x54>
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d142      	bne.n	80039d6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	685a      	ldr	r2, [r3, #4]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	21e0      	movs	r1, #224	; 0xe0
 800395c:	438a      	bics	r2, r1
 800395e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	2382      	movs	r3, #130	; 0x82
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	429a      	cmp	r2, r3
 800396a:	d113      	bne.n	8003994 <SPI_WaitFlagStateUntilTimeout+0x98>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	689a      	ldr	r2, [r3, #8]
 8003970:	2380      	movs	r3, #128	; 0x80
 8003972:	021b      	lsls	r3, r3, #8
 8003974:	429a      	cmp	r2, r3
 8003976:	d005      	beq.n	8003984 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	2380      	movs	r3, #128	; 0x80
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	429a      	cmp	r2, r3
 8003982:	d107      	bne.n	8003994 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2140      	movs	r1, #64	; 0x40
 8003990:	438a      	bics	r2, r1
 8003992:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003998:	2380      	movs	r3, #128	; 0x80
 800399a:	019b      	lsls	r3, r3, #6
 800399c:	429a      	cmp	r2, r3
 800399e:	d110      	bne.n	80039c2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	491a      	ldr	r1, [pc, #104]	; (8003a14 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80039ac:	400a      	ands	r2, r1
 80039ae:	601a      	str	r2, [r3, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2180      	movs	r1, #128	; 0x80
 80039bc:	0189      	lsls	r1, r1, #6
 80039be:	430a      	orrs	r2, r1
 80039c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	225d      	movs	r2, #93	; 0x5d
 80039c6:	2101      	movs	r1, #1
 80039c8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	225c      	movs	r2, #92	; 0x5c
 80039ce:	2100      	movs	r1, #0
 80039d0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e017      	b.n	8003a06 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80039dc:	2300      	movs	r3, #0
 80039de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	3b01      	subs	r3, #1
 80039e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	4013      	ands	r3, r2
 80039f0:	68ba      	ldr	r2, [r7, #8]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	425a      	negs	r2, r3
 80039f6:	4153      	adcs	r3, r2
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	001a      	movs	r2, r3
 80039fc:	1dfb      	adds	r3, r7, #7
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d197      	bne.n	8003934 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	0018      	movs	r0, r3
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	b008      	add	sp, #32
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	46c0      	nop			; (mov r8, r8)
 8003a10:	2000001c 	.word	0x2000001c
 8003a14:	ffffdfff 	.word	0xffffdfff

08003a18 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b08a      	sub	sp, #40	; 0x28
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
 8003a24:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003a26:	2317      	movs	r3, #23
 8003a28:	18fb      	adds	r3, r7, r3
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003a2e:	f7fd fe97 	bl	8001760 <HAL_GetTick>
 8003a32:	0002      	movs	r2, r0
 8003a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a36:	1a9b      	subs	r3, r3, r2
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	18d3      	adds	r3, r2, r3
 8003a3c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003a3e:	f7fd fe8f 	bl	8001760 <HAL_GetTick>
 8003a42:	0003      	movs	r3, r0
 8003a44:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	330c      	adds	r3, #12
 8003a4c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003a4e:	4b41      	ldr	r3, [pc, #260]	; (8003b54 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	0013      	movs	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	189b      	adds	r3, r3, r2
 8003a58:	00da      	lsls	r2, r3, #3
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	0d1b      	lsrs	r3, r3, #20
 8003a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a60:	4353      	muls	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003a64:	e068      	b.n	8003b38 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003a66:	68ba      	ldr	r2, [r7, #8]
 8003a68:	23c0      	movs	r3, #192	; 0xc0
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d10a      	bne.n	8003a86 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d107      	bne.n	8003a86 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	b2da      	uxtb	r2, r3
 8003a7c:	2117      	movs	r1, #23
 8003a7e:	187b      	adds	r3, r7, r1
 8003a80:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003a82:	187b      	adds	r3, r7, r1
 8003a84:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	3301      	adds	r3, #1
 8003a8a:	d055      	beq.n	8003b38 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a8c:	f7fd fe68 	bl	8001760 <HAL_GetTick>
 8003a90:	0002      	movs	r2, r0
 8003a92:	6a3b      	ldr	r3, [r7, #32]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d902      	bls.n	8003aa2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d142      	bne.n	8003b28 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	21e0      	movs	r1, #224	; 0xe0
 8003aae:	438a      	bics	r2, r1
 8003ab0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	685a      	ldr	r2, [r3, #4]
 8003ab6:	2382      	movs	r3, #130	; 0x82
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d113      	bne.n	8003ae6 <SPI_WaitFifoStateUntilTimeout+0xce>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	689a      	ldr	r2, [r3, #8]
 8003ac2:	2380      	movs	r3, #128	; 0x80
 8003ac4:	021b      	lsls	r3, r3, #8
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d005      	beq.n	8003ad6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	689a      	ldr	r2, [r3, #8]
 8003ace:	2380      	movs	r3, #128	; 0x80
 8003ad0:	00db      	lsls	r3, r3, #3
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d107      	bne.n	8003ae6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2140      	movs	r1, #64	; 0x40
 8003ae2:	438a      	bics	r2, r1
 8003ae4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003aea:	2380      	movs	r3, #128	; 0x80
 8003aec:	019b      	lsls	r3, r3, #6
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d110      	bne.n	8003b14 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4916      	ldr	r1, [pc, #88]	; (8003b58 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8003afe:	400a      	ands	r2, r1
 8003b00:	601a      	str	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2180      	movs	r1, #128	; 0x80
 8003b0e:	0189      	lsls	r1, r1, #6
 8003b10:	430a      	orrs	r2, r1
 8003b12:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	225d      	movs	r2, #93	; 0x5d
 8003b18:	2101      	movs	r1, #1
 8003b1a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	225c      	movs	r2, #92	; 0x5c
 8003b20:	2100      	movs	r1, #0
 8003b22:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e010      	b.n	8003b4a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	3b01      	subs	r3, #1
 8003b36:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	4013      	ands	r3, r2
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d18e      	bne.n	8003a66 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	0018      	movs	r0, r3
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	b00a      	add	sp, #40	; 0x28
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	46c0      	nop			; (mov r8, r8)
 8003b54:	2000001c 	.word	0x2000001c
 8003b58:	ffffdfff 	.word	0xffffdfff

08003b5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af02      	add	r7, sp, #8
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b68:	68ba      	ldr	r2, [r7, #8]
 8003b6a:	23c0      	movs	r3, #192	; 0xc0
 8003b6c:	0159      	lsls	r1, r3, #5
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	0013      	movs	r3, r2
 8003b76:	2200      	movs	r2, #0
 8003b78:	f7ff ff4e 	bl	8003a18 <SPI_WaitFifoStateUntilTimeout>
 8003b7c:	1e03      	subs	r3, r0, #0
 8003b7e:	d007      	beq.n	8003b90 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b84:	2220      	movs	r2, #32
 8003b86:	431a      	orrs	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e027      	b.n	8003be0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b90:	68ba      	ldr	r2, [r7, #8]
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	0013      	movs	r3, r2
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	2180      	movs	r1, #128	; 0x80
 8003b9e:	f7ff fead 	bl	80038fc <SPI_WaitFlagStateUntilTimeout>
 8003ba2:	1e03      	subs	r3, r0, #0
 8003ba4:	d007      	beq.n	8003bb6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003baa:	2220      	movs	r2, #32
 8003bac:	431a      	orrs	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e014      	b.n	8003be0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003bb6:	68ba      	ldr	r2, [r7, #8]
 8003bb8:	23c0      	movs	r3, #192	; 0xc0
 8003bba:	00d9      	lsls	r1, r3, #3
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	0013      	movs	r3, r2
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f7ff ff27 	bl	8003a18 <SPI_WaitFifoStateUntilTimeout>
 8003bca:	1e03      	subs	r3, r0, #0
 8003bcc:	d007      	beq.n	8003bde <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	431a      	orrs	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e000      	b.n	8003be0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	0018      	movs	r0, r3
 8003be2:	46bd      	mov	sp, r7
 8003be4:	b004      	add	sp, #16
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e042      	b.n	8003c80 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	223d      	movs	r2, #61	; 0x3d
 8003bfe:	5c9b      	ldrb	r3, [r3, r2]
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d107      	bne.n	8003c16 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	223c      	movs	r2, #60	; 0x3c
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	0018      	movs	r0, r3
 8003c12:	f7fd fbb9 	bl	8001388 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	223d      	movs	r2, #61	; 0x3d
 8003c1a:	2102      	movs	r1, #2
 8003c1c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	3304      	adds	r3, #4
 8003c26:	0019      	movs	r1, r3
 8003c28:	0010      	movs	r0, r2
 8003c2a:	f000 fbe7 	bl	80043fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2246      	movs	r2, #70	; 0x46
 8003c32:	2101      	movs	r1, #1
 8003c34:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	223e      	movs	r2, #62	; 0x3e
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	5499      	strb	r1, [r3, r2]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	223f      	movs	r2, #63	; 0x3f
 8003c42:	2101      	movs	r1, #1
 8003c44:	5499      	strb	r1, [r3, r2]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2240      	movs	r2, #64	; 0x40
 8003c4a:	2101      	movs	r1, #1
 8003c4c:	5499      	strb	r1, [r3, r2]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2241      	movs	r2, #65	; 0x41
 8003c52:	2101      	movs	r1, #1
 8003c54:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2242      	movs	r2, #66	; 0x42
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	5499      	strb	r1, [r3, r2]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2243      	movs	r2, #67	; 0x43
 8003c62:	2101      	movs	r1, #1
 8003c64:	5499      	strb	r1, [r3, r2]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2244      	movs	r2, #68	; 0x44
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	5499      	strb	r1, [r3, r2]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2245      	movs	r2, #69	; 0x45
 8003c72:	2101      	movs	r1, #1
 8003c74:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	223d      	movs	r2, #61	; 0x3d
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	0018      	movs	r0, r3
 8003c82:	46bd      	mov	sp, r7
 8003c84:	b002      	add	sp, #8
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e042      	b.n	8003d20 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	223d      	movs	r2, #61	; 0x3d
 8003c9e:	5c9b      	ldrb	r3, [r3, r2]
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d107      	bne.n	8003cb6 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	223c      	movs	r2, #60	; 0x3c
 8003caa:	2100      	movs	r1, #0
 8003cac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	f000 f839 	bl	8003d28 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	223d      	movs	r2, #61	; 0x3d
 8003cba:	2102      	movs	r1, #2
 8003cbc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	3304      	adds	r3, #4
 8003cc6:	0019      	movs	r1, r3
 8003cc8:	0010      	movs	r0, r2
 8003cca:	f000 fb97 	bl	80043fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2246      	movs	r2, #70	; 0x46
 8003cd2:	2101      	movs	r1, #1
 8003cd4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	223e      	movs	r2, #62	; 0x3e
 8003cda:	2101      	movs	r1, #1
 8003cdc:	5499      	strb	r1, [r3, r2]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	223f      	movs	r2, #63	; 0x3f
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	5499      	strb	r1, [r3, r2]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2240      	movs	r2, #64	; 0x40
 8003cea:	2101      	movs	r1, #1
 8003cec:	5499      	strb	r1, [r3, r2]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2241      	movs	r2, #65	; 0x41
 8003cf2:	2101      	movs	r1, #1
 8003cf4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2242      	movs	r2, #66	; 0x42
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	5499      	strb	r1, [r3, r2]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2243      	movs	r2, #67	; 0x43
 8003d02:	2101      	movs	r1, #1
 8003d04:	5499      	strb	r1, [r3, r2]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2244      	movs	r2, #68	; 0x44
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	5499      	strb	r1, [r3, r2]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2245      	movs	r2, #69	; 0x45
 8003d12:	2101      	movs	r1, #1
 8003d14:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	223d      	movs	r2, #61	; 0x3d
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	0018      	movs	r0, r3
 8003d22:	46bd      	mov	sp, r7
 8003d24:	b002      	add	sp, #8
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003d30:	46c0      	nop			; (mov r8, r8)
 8003d32:	46bd      	mov	sp, r7
 8003d34:	b002      	add	sp, #8
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d42:	230f      	movs	r3, #15
 8003d44:	18fb      	adds	r3, r7, r3
 8003d46:	2200      	movs	r2, #0
 8003d48:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d108      	bne.n	8003d62 <HAL_TIM_OC_Start_IT+0x2a>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	223e      	movs	r2, #62	; 0x3e
 8003d54:	5c9b      	ldrb	r3, [r3, r2]
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	1e5a      	subs	r2, r3, #1
 8003d5c:	4193      	sbcs	r3, r2
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	e01f      	b.n	8003da2 <HAL_TIM_OC_Start_IT+0x6a>
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	2b04      	cmp	r3, #4
 8003d66:	d108      	bne.n	8003d7a <HAL_TIM_OC_Start_IT+0x42>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	223f      	movs	r2, #63	; 0x3f
 8003d6c:	5c9b      	ldrb	r3, [r3, r2]
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	3b01      	subs	r3, #1
 8003d72:	1e5a      	subs	r2, r3, #1
 8003d74:	4193      	sbcs	r3, r2
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	e013      	b.n	8003da2 <HAL_TIM_OC_Start_IT+0x6a>
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	2b08      	cmp	r3, #8
 8003d7e:	d108      	bne.n	8003d92 <HAL_TIM_OC_Start_IT+0x5a>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2240      	movs	r2, #64	; 0x40
 8003d84:	5c9b      	ldrb	r3, [r3, r2]
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	1e5a      	subs	r2, r3, #1
 8003d8c:	4193      	sbcs	r3, r2
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	e007      	b.n	8003da2 <HAL_TIM_OC_Start_IT+0x6a>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2241      	movs	r2, #65	; 0x41
 8003d96:	5c9b      	ldrb	r3, [r3, r2]
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	1e5a      	subs	r2, r3, #1
 8003d9e:	4193      	sbcs	r3, r2
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e0b7      	b.n	8003f1a <HAL_TIM_OC_Start_IT+0x1e2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d104      	bne.n	8003dba <HAL_TIM_OC_Start_IT+0x82>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	223e      	movs	r2, #62	; 0x3e
 8003db4:	2102      	movs	r1, #2
 8003db6:	5499      	strb	r1, [r3, r2]
 8003db8:	e013      	b.n	8003de2 <HAL_TIM_OC_Start_IT+0xaa>
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	2b04      	cmp	r3, #4
 8003dbe:	d104      	bne.n	8003dca <HAL_TIM_OC_Start_IT+0x92>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	223f      	movs	r2, #63	; 0x3f
 8003dc4:	2102      	movs	r1, #2
 8003dc6:	5499      	strb	r1, [r3, r2]
 8003dc8:	e00b      	b.n	8003de2 <HAL_TIM_OC_Start_IT+0xaa>
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	2b08      	cmp	r3, #8
 8003dce:	d104      	bne.n	8003dda <HAL_TIM_OC_Start_IT+0xa2>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2240      	movs	r2, #64	; 0x40
 8003dd4:	2102      	movs	r1, #2
 8003dd6:	5499      	strb	r1, [r3, r2]
 8003dd8:	e003      	b.n	8003de2 <HAL_TIM_OC_Start_IT+0xaa>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2241      	movs	r2, #65	; 0x41
 8003dde:	2102      	movs	r1, #2
 8003de0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	2b0c      	cmp	r3, #12
 8003de6:	d02a      	beq.n	8003e3e <HAL_TIM_OC_Start_IT+0x106>
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	2b0c      	cmp	r3, #12
 8003dec:	d830      	bhi.n	8003e50 <HAL_TIM_OC_Start_IT+0x118>
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	2b08      	cmp	r3, #8
 8003df2:	d01b      	beq.n	8003e2c <HAL_TIM_OC_Start_IT+0xf4>
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	2b08      	cmp	r3, #8
 8003df8:	d82a      	bhi.n	8003e50 <HAL_TIM_OC_Start_IT+0x118>
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d003      	beq.n	8003e08 <HAL_TIM_OC_Start_IT+0xd0>
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	2b04      	cmp	r3, #4
 8003e04:	d009      	beq.n	8003e1a <HAL_TIM_OC_Start_IT+0xe2>
 8003e06:	e023      	b.n	8003e50 <HAL_TIM_OC_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68da      	ldr	r2, [r3, #12]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2102      	movs	r1, #2
 8003e14:	430a      	orrs	r2, r1
 8003e16:	60da      	str	r2, [r3, #12]
      break;
 8003e18:	e01f      	b.n	8003e5a <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68da      	ldr	r2, [r3, #12]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2104      	movs	r1, #4
 8003e26:	430a      	orrs	r2, r1
 8003e28:	60da      	str	r2, [r3, #12]
      break;
 8003e2a:	e016      	b.n	8003e5a <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68da      	ldr	r2, [r3, #12]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2108      	movs	r1, #8
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	60da      	str	r2, [r3, #12]
      break;
 8003e3c:	e00d      	b.n	8003e5a <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68da      	ldr	r2, [r3, #12]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2110      	movs	r1, #16
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	60da      	str	r2, [r3, #12]
      break;
 8003e4e:	e004      	b.n	8003e5a <HAL_TIM_OC_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 8003e50:	230f      	movs	r3, #15
 8003e52:	18fb      	adds	r3, r7, r3
 8003e54:	2201      	movs	r2, #1
 8003e56:	701a      	strb	r2, [r3, #0]
      break;
 8003e58:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8003e5a:	230f      	movs	r3, #15
 8003e5c:	18fb      	adds	r3, r7, r3
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d157      	bne.n	8003f14 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6839      	ldr	r1, [r7, #0]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	0018      	movs	r0, r3
 8003e6e:	f000 fddb 	bl	8004a28 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a2b      	ldr	r2, [pc, #172]	; (8003f24 <HAL_TIM_OC_Start_IT+0x1ec>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d00e      	beq.n	8003e9a <HAL_TIM_OC_Start_IT+0x162>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a29      	ldr	r2, [pc, #164]	; (8003f28 <HAL_TIM_OC_Start_IT+0x1f0>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d009      	beq.n	8003e9a <HAL_TIM_OC_Start_IT+0x162>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a28      	ldr	r2, [pc, #160]	; (8003f2c <HAL_TIM_OC_Start_IT+0x1f4>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d004      	beq.n	8003e9a <HAL_TIM_OC_Start_IT+0x162>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a26      	ldr	r2, [pc, #152]	; (8003f30 <HAL_TIM_OC_Start_IT+0x1f8>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d101      	bne.n	8003e9e <HAL_TIM_OC_Start_IT+0x166>
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e000      	b.n	8003ea0 <HAL_TIM_OC_Start_IT+0x168>
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d008      	beq.n	8003eb6 <HAL_TIM_OC_Start_IT+0x17e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2180      	movs	r1, #128	; 0x80
 8003eb0:	0209      	lsls	r1, r1, #8
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a1a      	ldr	r2, [pc, #104]	; (8003f24 <HAL_TIM_OC_Start_IT+0x1ec>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d00f      	beq.n	8003ee0 <HAL_TIM_OC_Start_IT+0x1a8>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	2380      	movs	r3, #128	; 0x80
 8003ec6:	05db      	lsls	r3, r3, #23
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d009      	beq.n	8003ee0 <HAL_TIM_OC_Start_IT+0x1a8>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a18      	ldr	r2, [pc, #96]	; (8003f34 <HAL_TIM_OC_Start_IT+0x1fc>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d004      	beq.n	8003ee0 <HAL_TIM_OC_Start_IT+0x1a8>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a13      	ldr	r2, [pc, #76]	; (8003f28 <HAL_TIM_OC_Start_IT+0x1f0>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d111      	bne.n	8003f04 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	2207      	movs	r2, #7
 8003ee8:	4013      	ands	r3, r2
 8003eea:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	2b06      	cmp	r3, #6
 8003ef0:	d010      	beq.n	8003f14 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2101      	movs	r1, #1
 8003efe:	430a      	orrs	r2, r1
 8003f00:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f02:	e007      	b.n	8003f14 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2101      	movs	r1, #1
 8003f10:	430a      	orrs	r2, r1
 8003f12:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003f14:	230f      	movs	r3, #15
 8003f16:	18fb      	adds	r3, r7, r3
 8003f18:	781b      	ldrb	r3, [r3, #0]
}
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	b004      	add	sp, #16
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	46c0      	nop			; (mov r8, r8)
 8003f24:	40012c00 	.word	0x40012c00
 8003f28:	40014000 	.word	0x40014000
 8003f2c:	40014400 	.word	0x40014400
 8003f30:	40014800 	.word	0x40014800
 8003f34:	40000400 	.word	0x40000400

08003f38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	2202      	movs	r2, #2
 8003f48:	4013      	ands	r3, r2
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d124      	bne.n	8003f98 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	2202      	movs	r2, #2
 8003f56:	4013      	ands	r3, r2
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d11d      	bne.n	8003f98 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2203      	movs	r2, #3
 8003f62:	4252      	negs	r2, r2
 8003f64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	2203      	movs	r2, #3
 8003f74:	4013      	ands	r3, r2
 8003f76:	d004      	beq.n	8003f82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	0018      	movs	r0, r3
 8003f7c:	f000 fa26 	bl	80043cc <HAL_TIM_IC_CaptureCallback>
 8003f80:	e007      	b.n	8003f92 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	0018      	movs	r0, r3
 8003f86:	f7fc f95d 	bl	8000244 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	f000 fa25 	bl	80043dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	2204      	movs	r2, #4
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	2b04      	cmp	r3, #4
 8003fa4:	d125      	bne.n	8003ff2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	2204      	movs	r2, #4
 8003fae:	4013      	ands	r3, r2
 8003fb0:	2b04      	cmp	r3, #4
 8003fb2:	d11e      	bne.n	8003ff2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2205      	movs	r2, #5
 8003fba:	4252      	negs	r2, r2
 8003fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	699a      	ldr	r2, [r3, #24]
 8003fca:	23c0      	movs	r3, #192	; 0xc0
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	4013      	ands	r3, r2
 8003fd0:	d004      	beq.n	8003fdc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	f000 f9f9 	bl	80043cc <HAL_TIM_IC_CaptureCallback>
 8003fda:	e007      	b.n	8003fec <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	0018      	movs	r0, r3
 8003fe0:	f7fc f930 	bl	8000244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	0018      	movs	r0, r3
 8003fe8:	f000 f9f8 	bl	80043dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	2208      	movs	r2, #8
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	2b08      	cmp	r3, #8
 8003ffe:	d124      	bne.n	800404a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	2208      	movs	r2, #8
 8004008:	4013      	ands	r3, r2
 800400a:	2b08      	cmp	r3, #8
 800400c:	d11d      	bne.n	800404a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2209      	movs	r2, #9
 8004014:	4252      	negs	r2, r2
 8004016:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2204      	movs	r2, #4
 800401c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	69db      	ldr	r3, [r3, #28]
 8004024:	2203      	movs	r2, #3
 8004026:	4013      	ands	r3, r2
 8004028:	d004      	beq.n	8004034 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	0018      	movs	r0, r3
 800402e:	f000 f9cd 	bl	80043cc <HAL_TIM_IC_CaptureCallback>
 8004032:	e007      	b.n	8004044 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	0018      	movs	r0, r3
 8004038:	f7fc f904 	bl	8000244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	0018      	movs	r0, r3
 8004040:	f000 f9cc 	bl	80043dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	2210      	movs	r2, #16
 8004052:	4013      	ands	r3, r2
 8004054:	2b10      	cmp	r3, #16
 8004056:	d125      	bne.n	80040a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	2210      	movs	r2, #16
 8004060:	4013      	ands	r3, r2
 8004062:	2b10      	cmp	r3, #16
 8004064:	d11e      	bne.n	80040a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2211      	movs	r2, #17
 800406c:	4252      	negs	r2, r2
 800406e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2208      	movs	r2, #8
 8004074:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	69da      	ldr	r2, [r3, #28]
 800407c:	23c0      	movs	r3, #192	; 0xc0
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	4013      	ands	r3, r2
 8004082:	d004      	beq.n	800408e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	0018      	movs	r0, r3
 8004088:	f000 f9a0 	bl	80043cc <HAL_TIM_IC_CaptureCallback>
 800408c:	e007      	b.n	800409e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	0018      	movs	r0, r3
 8004092:	f7fc f8d7 	bl	8000244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	0018      	movs	r0, r3
 800409a:	f000 f99f 	bl	80043dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	2201      	movs	r2, #1
 80040ac:	4013      	ands	r3, r2
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d10f      	bne.n	80040d2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	2201      	movs	r2, #1
 80040ba:	4013      	ands	r3, r2
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d108      	bne.n	80040d2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2202      	movs	r2, #2
 80040c6:	4252      	negs	r2, r2
 80040c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	0018      	movs	r0, r3
 80040ce:	f000 f975 	bl	80043bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	2280      	movs	r2, #128	; 0x80
 80040da:	4013      	ands	r3, r2
 80040dc:	2b80      	cmp	r3, #128	; 0x80
 80040de:	d10f      	bne.n	8004100 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	2280      	movs	r2, #128	; 0x80
 80040e8:	4013      	ands	r3, r2
 80040ea:	2b80      	cmp	r3, #128	; 0x80
 80040ec:	d108      	bne.n	8004100 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2281      	movs	r2, #129	; 0x81
 80040f4:	4252      	negs	r2, r2
 80040f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	0018      	movs	r0, r3
 80040fc:	f000 fd7c 	bl	8004bf8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	2240      	movs	r2, #64	; 0x40
 8004108:	4013      	ands	r3, r2
 800410a:	2b40      	cmp	r3, #64	; 0x40
 800410c:	d10f      	bne.n	800412e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	2240      	movs	r2, #64	; 0x40
 8004116:	4013      	ands	r3, r2
 8004118:	2b40      	cmp	r3, #64	; 0x40
 800411a:	d108      	bne.n	800412e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2241      	movs	r2, #65	; 0x41
 8004122:	4252      	negs	r2, r2
 8004124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	0018      	movs	r0, r3
 800412a:	f000 f95f 	bl	80043ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	2220      	movs	r2, #32
 8004136:	4013      	ands	r3, r2
 8004138:	2b20      	cmp	r3, #32
 800413a:	d10f      	bne.n	800415c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	2220      	movs	r2, #32
 8004144:	4013      	ands	r3, r2
 8004146:	2b20      	cmp	r3, #32
 8004148:	d108      	bne.n	800415c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2221      	movs	r2, #33	; 0x21
 8004150:	4252      	negs	r2, r2
 8004152:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	0018      	movs	r0, r3
 8004158:	f000 fd46 	bl	8004be8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800415c:	46c0      	nop			; (mov r8, r8)
 800415e:	46bd      	mov	sp, r7
 8004160:	b002      	add	sp, #8
 8004162:	bd80      	pop	{r7, pc}

08004164 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b086      	sub	sp, #24
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004170:	2317      	movs	r3, #23
 8004172:	18fb      	adds	r3, r7, r3
 8004174:	2200      	movs	r2, #0
 8004176:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	223c      	movs	r2, #60	; 0x3c
 800417c:	5c9b      	ldrb	r3, [r3, r2]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d101      	bne.n	8004186 <HAL_TIM_OC_ConfigChannel+0x22>
 8004182:	2302      	movs	r3, #2
 8004184:	e042      	b.n	800420c <HAL_TIM_OC_ConfigChannel+0xa8>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	223c      	movs	r2, #60	; 0x3c
 800418a:	2101      	movs	r1, #1
 800418c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2b0c      	cmp	r3, #12
 8004192:	d027      	beq.n	80041e4 <HAL_TIM_OC_ConfigChannel+0x80>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b0c      	cmp	r3, #12
 8004198:	d82c      	bhi.n	80041f4 <HAL_TIM_OC_ConfigChannel+0x90>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2b08      	cmp	r3, #8
 800419e:	d019      	beq.n	80041d4 <HAL_TIM_OC_ConfigChannel+0x70>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b08      	cmp	r3, #8
 80041a4:	d826      	bhi.n	80041f4 <HAL_TIM_OC_ConfigChannel+0x90>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d003      	beq.n	80041b4 <HAL_TIM_OC_ConfigChannel+0x50>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2b04      	cmp	r3, #4
 80041b0:	d008      	beq.n	80041c4 <HAL_TIM_OC_ConfigChannel+0x60>
 80041b2:	e01f      	b.n	80041f4 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68ba      	ldr	r2, [r7, #8]
 80041ba:	0011      	movs	r1, r2
 80041bc:	0018      	movs	r0, r3
 80041be:	f000 f99d 	bl	80044fc <TIM_OC1_SetConfig>
      break;
 80041c2:	e01c      	b.n	80041fe <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	0011      	movs	r1, r2
 80041cc:	0018      	movs	r0, r3
 80041ce:	f000 fa1d 	bl	800460c <TIM_OC2_SetConfig>
      break;
 80041d2:	e014      	b.n	80041fe <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	0011      	movs	r1, r2
 80041dc:	0018      	movs	r0, r3
 80041de:	f000 fa99 	bl	8004714 <TIM_OC3_SetConfig>
      break;
 80041e2:	e00c      	b.n	80041fe <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	0011      	movs	r1, r2
 80041ec:	0018      	movs	r0, r3
 80041ee:	f000 fb17 	bl	8004820 <TIM_OC4_SetConfig>
      break;
 80041f2:	e004      	b.n	80041fe <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 80041f4:	2317      	movs	r3, #23
 80041f6:	18fb      	adds	r3, r7, r3
 80041f8:	2201      	movs	r2, #1
 80041fa:	701a      	strb	r2, [r3, #0]
      break;
 80041fc:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	223c      	movs	r2, #60	; 0x3c
 8004202:	2100      	movs	r1, #0
 8004204:	5499      	strb	r1, [r3, r2]

  return status;
 8004206:	2317      	movs	r3, #23
 8004208:	18fb      	adds	r3, r7, r3
 800420a:	781b      	ldrb	r3, [r3, #0]
}
 800420c:	0018      	movs	r0, r3
 800420e:	46bd      	mov	sp, r7
 8004210:	b006      	add	sp, #24
 8004212:	bd80      	pop	{r7, pc}

08004214 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800421e:	230f      	movs	r3, #15
 8004220:	18fb      	adds	r3, r7, r3
 8004222:	2200      	movs	r2, #0
 8004224:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	223c      	movs	r2, #60	; 0x3c
 800422a:	5c9b      	ldrb	r3, [r3, r2]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d101      	bne.n	8004234 <HAL_TIM_ConfigClockSource+0x20>
 8004230:	2302      	movs	r3, #2
 8004232:	e0bc      	b.n	80043ae <HAL_TIM_ConfigClockSource+0x19a>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	223c      	movs	r2, #60	; 0x3c
 8004238:	2101      	movs	r1, #1
 800423a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	223d      	movs	r2, #61	; 0x3d
 8004240:	2102      	movs	r1, #2
 8004242:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	2277      	movs	r2, #119	; 0x77
 8004250:	4393      	bics	r3, r2
 8004252:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	4a58      	ldr	r2, [pc, #352]	; (80043b8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004258:	4013      	ands	r3, r2
 800425a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2280      	movs	r2, #128	; 0x80
 800426a:	0192      	lsls	r2, r2, #6
 800426c:	4293      	cmp	r3, r2
 800426e:	d040      	beq.n	80042f2 <HAL_TIM_ConfigClockSource+0xde>
 8004270:	2280      	movs	r2, #128	; 0x80
 8004272:	0192      	lsls	r2, r2, #6
 8004274:	4293      	cmp	r3, r2
 8004276:	d900      	bls.n	800427a <HAL_TIM_ConfigClockSource+0x66>
 8004278:	e088      	b.n	800438c <HAL_TIM_ConfigClockSource+0x178>
 800427a:	2280      	movs	r2, #128	; 0x80
 800427c:	0152      	lsls	r2, r2, #5
 800427e:	4293      	cmp	r3, r2
 8004280:	d100      	bne.n	8004284 <HAL_TIM_ConfigClockSource+0x70>
 8004282:	e088      	b.n	8004396 <HAL_TIM_ConfigClockSource+0x182>
 8004284:	2280      	movs	r2, #128	; 0x80
 8004286:	0152      	lsls	r2, r2, #5
 8004288:	4293      	cmp	r3, r2
 800428a:	d900      	bls.n	800428e <HAL_TIM_ConfigClockSource+0x7a>
 800428c:	e07e      	b.n	800438c <HAL_TIM_ConfigClockSource+0x178>
 800428e:	2b70      	cmp	r3, #112	; 0x70
 8004290:	d018      	beq.n	80042c4 <HAL_TIM_ConfigClockSource+0xb0>
 8004292:	d900      	bls.n	8004296 <HAL_TIM_ConfigClockSource+0x82>
 8004294:	e07a      	b.n	800438c <HAL_TIM_ConfigClockSource+0x178>
 8004296:	2b60      	cmp	r3, #96	; 0x60
 8004298:	d04f      	beq.n	800433a <HAL_TIM_ConfigClockSource+0x126>
 800429a:	d900      	bls.n	800429e <HAL_TIM_ConfigClockSource+0x8a>
 800429c:	e076      	b.n	800438c <HAL_TIM_ConfigClockSource+0x178>
 800429e:	2b50      	cmp	r3, #80	; 0x50
 80042a0:	d03b      	beq.n	800431a <HAL_TIM_ConfigClockSource+0x106>
 80042a2:	d900      	bls.n	80042a6 <HAL_TIM_ConfigClockSource+0x92>
 80042a4:	e072      	b.n	800438c <HAL_TIM_ConfigClockSource+0x178>
 80042a6:	2b40      	cmp	r3, #64	; 0x40
 80042a8:	d057      	beq.n	800435a <HAL_TIM_ConfigClockSource+0x146>
 80042aa:	d900      	bls.n	80042ae <HAL_TIM_ConfigClockSource+0x9a>
 80042ac:	e06e      	b.n	800438c <HAL_TIM_ConfigClockSource+0x178>
 80042ae:	2b30      	cmp	r3, #48	; 0x30
 80042b0:	d063      	beq.n	800437a <HAL_TIM_ConfigClockSource+0x166>
 80042b2:	d86b      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x178>
 80042b4:	2b20      	cmp	r3, #32
 80042b6:	d060      	beq.n	800437a <HAL_TIM_ConfigClockSource+0x166>
 80042b8:	d868      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x178>
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d05d      	beq.n	800437a <HAL_TIM_ConfigClockSource+0x166>
 80042be:	2b10      	cmp	r3, #16
 80042c0:	d05b      	beq.n	800437a <HAL_TIM_ConfigClockSource+0x166>
 80042c2:	e063      	b.n	800438c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6818      	ldr	r0, [r3, #0]
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	6899      	ldr	r1, [r3, #8]
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685a      	ldr	r2, [r3, #4]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f000 fb88 	bl	80049e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	2277      	movs	r2, #119	; 0x77
 80042e4:	4313      	orrs	r3, r2
 80042e6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	609a      	str	r2, [r3, #8]
      break;
 80042f0:	e052      	b.n	8004398 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6818      	ldr	r0, [r3, #0]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	6899      	ldr	r1, [r3, #8]
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	685a      	ldr	r2, [r3, #4]
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	f000 fb71 	bl	80049e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	689a      	ldr	r2, [r3, #8]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2180      	movs	r1, #128	; 0x80
 8004312:	01c9      	lsls	r1, r1, #7
 8004314:	430a      	orrs	r2, r1
 8004316:	609a      	str	r2, [r3, #8]
      break;
 8004318:	e03e      	b.n	8004398 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6818      	ldr	r0, [r3, #0]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	6859      	ldr	r1, [r3, #4]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	001a      	movs	r2, r3
 8004328:	f000 fae4 	bl	80048f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2150      	movs	r1, #80	; 0x50
 8004332:	0018      	movs	r0, r3
 8004334:	f000 fb3e 	bl	80049b4 <TIM_ITRx_SetConfig>
      break;
 8004338:	e02e      	b.n	8004398 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6818      	ldr	r0, [r3, #0]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	6859      	ldr	r1, [r3, #4]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	001a      	movs	r2, r3
 8004348:	f000 fb02 	bl	8004950 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2160      	movs	r1, #96	; 0x60
 8004352:	0018      	movs	r0, r3
 8004354:	f000 fb2e 	bl	80049b4 <TIM_ITRx_SetConfig>
      break;
 8004358:	e01e      	b.n	8004398 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6818      	ldr	r0, [r3, #0]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	6859      	ldr	r1, [r3, #4]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	001a      	movs	r2, r3
 8004368:	f000 fac4 	bl	80048f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2140      	movs	r1, #64	; 0x40
 8004372:	0018      	movs	r0, r3
 8004374:	f000 fb1e 	bl	80049b4 <TIM_ITRx_SetConfig>
      break;
 8004378:	e00e      	b.n	8004398 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	0019      	movs	r1, r3
 8004384:	0010      	movs	r0, r2
 8004386:	f000 fb15 	bl	80049b4 <TIM_ITRx_SetConfig>
      break;
 800438a:	e005      	b.n	8004398 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800438c:	230f      	movs	r3, #15
 800438e:	18fb      	adds	r3, r7, r3
 8004390:	2201      	movs	r2, #1
 8004392:	701a      	strb	r2, [r3, #0]
      break;
 8004394:	e000      	b.n	8004398 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004396:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	223d      	movs	r2, #61	; 0x3d
 800439c:	2101      	movs	r1, #1
 800439e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	223c      	movs	r2, #60	; 0x3c
 80043a4:	2100      	movs	r1, #0
 80043a6:	5499      	strb	r1, [r3, r2]

  return status;
 80043a8:	230f      	movs	r3, #15
 80043aa:	18fb      	adds	r3, r7, r3
 80043ac:	781b      	ldrb	r3, [r3, #0]
}
 80043ae:	0018      	movs	r0, r3
 80043b0:	46bd      	mov	sp, r7
 80043b2:	b004      	add	sp, #16
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	46c0      	nop			; (mov r8, r8)
 80043b8:	ffff00ff 	.word	0xffff00ff

080043bc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80043c4:	46c0      	nop			; (mov r8, r8)
 80043c6:	46bd      	mov	sp, r7
 80043c8:	b002      	add	sp, #8
 80043ca:	bd80      	pop	{r7, pc}

080043cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043d4:	46c0      	nop			; (mov r8, r8)
 80043d6:	46bd      	mov	sp, r7
 80043d8:	b002      	add	sp, #8
 80043da:	bd80      	pop	{r7, pc}

080043dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043e4:	46c0      	nop			; (mov r8, r8)
 80043e6:	46bd      	mov	sp, r7
 80043e8:	b002      	add	sp, #8
 80043ea:	bd80      	pop	{r7, pc}

080043ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043f4:	46c0      	nop			; (mov r8, r8)
 80043f6:	46bd      	mov	sp, r7
 80043f8:	b002      	add	sp, #8
 80043fa:	bd80      	pop	{r7, pc}

080043fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a34      	ldr	r2, [pc, #208]	; (80044e0 <TIM_Base_SetConfig+0xe4>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d008      	beq.n	8004426 <TIM_Base_SetConfig+0x2a>
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	2380      	movs	r3, #128	; 0x80
 8004418:	05db      	lsls	r3, r3, #23
 800441a:	429a      	cmp	r2, r3
 800441c:	d003      	beq.n	8004426 <TIM_Base_SetConfig+0x2a>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a30      	ldr	r2, [pc, #192]	; (80044e4 <TIM_Base_SetConfig+0xe8>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d108      	bne.n	8004438 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2270      	movs	r2, #112	; 0x70
 800442a:	4393      	bics	r3, r2
 800442c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	4313      	orrs	r3, r2
 8004436:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a29      	ldr	r2, [pc, #164]	; (80044e0 <TIM_Base_SetConfig+0xe4>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d018      	beq.n	8004472 <TIM_Base_SetConfig+0x76>
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	2380      	movs	r3, #128	; 0x80
 8004444:	05db      	lsls	r3, r3, #23
 8004446:	429a      	cmp	r2, r3
 8004448:	d013      	beq.n	8004472 <TIM_Base_SetConfig+0x76>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a25      	ldr	r2, [pc, #148]	; (80044e4 <TIM_Base_SetConfig+0xe8>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d00f      	beq.n	8004472 <TIM_Base_SetConfig+0x76>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a24      	ldr	r2, [pc, #144]	; (80044e8 <TIM_Base_SetConfig+0xec>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d00b      	beq.n	8004472 <TIM_Base_SetConfig+0x76>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a23      	ldr	r2, [pc, #140]	; (80044ec <TIM_Base_SetConfig+0xf0>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d007      	beq.n	8004472 <TIM_Base_SetConfig+0x76>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a22      	ldr	r2, [pc, #136]	; (80044f0 <TIM_Base_SetConfig+0xf4>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d003      	beq.n	8004472 <TIM_Base_SetConfig+0x76>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a21      	ldr	r2, [pc, #132]	; (80044f4 <TIM_Base_SetConfig+0xf8>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d108      	bne.n	8004484 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	4a20      	ldr	r2, [pc, #128]	; (80044f8 <TIM_Base_SetConfig+0xfc>)
 8004476:	4013      	ands	r3, r2
 8004478:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	4313      	orrs	r3, r2
 8004482:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2280      	movs	r2, #128	; 0x80
 8004488:	4393      	bics	r3, r2
 800448a:	001a      	movs	r2, r3
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	695b      	ldr	r3, [r3, #20]
 8004490:	4313      	orrs	r3, r2
 8004492:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	689a      	ldr	r2, [r3, #8]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a0c      	ldr	r2, [pc, #48]	; (80044e0 <TIM_Base_SetConfig+0xe4>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d00b      	beq.n	80044ca <TIM_Base_SetConfig+0xce>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a0d      	ldr	r2, [pc, #52]	; (80044ec <TIM_Base_SetConfig+0xf0>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d007      	beq.n	80044ca <TIM_Base_SetConfig+0xce>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a0c      	ldr	r2, [pc, #48]	; (80044f0 <TIM_Base_SetConfig+0xf4>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d003      	beq.n	80044ca <TIM_Base_SetConfig+0xce>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a0b      	ldr	r2, [pc, #44]	; (80044f4 <TIM_Base_SetConfig+0xf8>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d103      	bne.n	80044d2 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	691a      	ldr	r2, [r3, #16]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2201      	movs	r2, #1
 80044d6:	615a      	str	r2, [r3, #20]
}
 80044d8:	46c0      	nop			; (mov r8, r8)
 80044da:	46bd      	mov	sp, r7
 80044dc:	b004      	add	sp, #16
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	40012c00 	.word	0x40012c00
 80044e4:	40000400 	.word	0x40000400
 80044e8:	40002000 	.word	0x40002000
 80044ec:	40014000 	.word	0x40014000
 80044f0:	40014400 	.word	0x40014400
 80044f4:	40014800 	.word	0x40014800
 80044f8:	fffffcff 	.word	0xfffffcff

080044fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	2201      	movs	r2, #1
 800450c:	4393      	bics	r3, r2
 800450e:	001a      	movs	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a1b      	ldr	r3, [r3, #32]
 8004518:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2270      	movs	r2, #112	; 0x70
 800452a:	4393      	bics	r3, r2
 800452c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2203      	movs	r2, #3
 8004532:	4393      	bics	r3, r2
 8004534:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	4313      	orrs	r3, r2
 800453e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	2202      	movs	r2, #2
 8004544:	4393      	bics	r3, r2
 8004546:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	4313      	orrs	r3, r2
 8004550:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a27      	ldr	r2, [pc, #156]	; (80045f4 <TIM_OC1_SetConfig+0xf8>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d00b      	beq.n	8004572 <TIM_OC1_SetConfig+0x76>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a26      	ldr	r2, [pc, #152]	; (80045f8 <TIM_OC1_SetConfig+0xfc>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d007      	beq.n	8004572 <TIM_OC1_SetConfig+0x76>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a25      	ldr	r2, [pc, #148]	; (80045fc <TIM_OC1_SetConfig+0x100>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d003      	beq.n	8004572 <TIM_OC1_SetConfig+0x76>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a24      	ldr	r2, [pc, #144]	; (8004600 <TIM_OC1_SetConfig+0x104>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d10c      	bne.n	800458c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	2208      	movs	r2, #8
 8004576:	4393      	bics	r3, r2
 8004578:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	4313      	orrs	r3, r2
 8004582:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	2204      	movs	r2, #4
 8004588:	4393      	bics	r3, r2
 800458a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a19      	ldr	r2, [pc, #100]	; (80045f4 <TIM_OC1_SetConfig+0xf8>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d00b      	beq.n	80045ac <TIM_OC1_SetConfig+0xb0>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a18      	ldr	r2, [pc, #96]	; (80045f8 <TIM_OC1_SetConfig+0xfc>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d007      	beq.n	80045ac <TIM_OC1_SetConfig+0xb0>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a17      	ldr	r2, [pc, #92]	; (80045fc <TIM_OC1_SetConfig+0x100>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d003      	beq.n	80045ac <TIM_OC1_SetConfig+0xb0>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a16      	ldr	r2, [pc, #88]	; (8004600 <TIM_OC1_SetConfig+0x104>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d111      	bne.n	80045d0 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	4a15      	ldr	r2, [pc, #84]	; (8004604 <TIM_OC1_SetConfig+0x108>)
 80045b0:	4013      	ands	r3, r2
 80045b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	4a14      	ldr	r2, [pc, #80]	; (8004608 <TIM_OC1_SetConfig+0x10c>)
 80045b8:	4013      	ands	r3, r2
 80045ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	621a      	str	r2, [r3, #32]
}
 80045ea:	46c0      	nop			; (mov r8, r8)
 80045ec:	46bd      	mov	sp, r7
 80045ee:	b006      	add	sp, #24
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	46c0      	nop			; (mov r8, r8)
 80045f4:	40012c00 	.word	0x40012c00
 80045f8:	40014000 	.word	0x40014000
 80045fc:	40014400 	.word	0x40014400
 8004600:	40014800 	.word	0x40014800
 8004604:	fffffeff 	.word	0xfffffeff
 8004608:	fffffdff 	.word	0xfffffdff

0800460c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	2210      	movs	r2, #16
 800461c:	4393      	bics	r3, r2
 800461e:	001a      	movs	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	4a2e      	ldr	r2, [pc, #184]	; (80046f4 <TIM_OC2_SetConfig+0xe8>)
 800463a:	4013      	ands	r3, r2
 800463c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	4a2d      	ldr	r2, [pc, #180]	; (80046f8 <TIM_OC2_SetConfig+0xec>)
 8004642:	4013      	ands	r3, r2
 8004644:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	021b      	lsls	r3, r3, #8
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	4313      	orrs	r3, r2
 8004650:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	2220      	movs	r2, #32
 8004656:	4393      	bics	r3, r2
 8004658:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	011b      	lsls	r3, r3, #4
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	4313      	orrs	r3, r2
 8004664:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a24      	ldr	r2, [pc, #144]	; (80046fc <TIM_OC2_SetConfig+0xf0>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d10d      	bne.n	800468a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	2280      	movs	r2, #128	; 0x80
 8004672:	4393      	bics	r3, r2
 8004674:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	011b      	lsls	r3, r3, #4
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	4313      	orrs	r3, r2
 8004680:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	2240      	movs	r2, #64	; 0x40
 8004686:	4393      	bics	r3, r2
 8004688:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a1b      	ldr	r2, [pc, #108]	; (80046fc <TIM_OC2_SetConfig+0xf0>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d00b      	beq.n	80046aa <TIM_OC2_SetConfig+0x9e>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a1a      	ldr	r2, [pc, #104]	; (8004700 <TIM_OC2_SetConfig+0xf4>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d007      	beq.n	80046aa <TIM_OC2_SetConfig+0x9e>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a19      	ldr	r2, [pc, #100]	; (8004704 <TIM_OC2_SetConfig+0xf8>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d003      	beq.n	80046aa <TIM_OC2_SetConfig+0x9e>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a18      	ldr	r2, [pc, #96]	; (8004708 <TIM_OC2_SetConfig+0xfc>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d113      	bne.n	80046d2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	4a17      	ldr	r2, [pc, #92]	; (800470c <TIM_OC2_SetConfig+0x100>)
 80046ae:	4013      	ands	r3, r2
 80046b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	4a16      	ldr	r2, [pc, #88]	; (8004710 <TIM_OC2_SetConfig+0x104>)
 80046b6:	4013      	ands	r3, r2
 80046b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	685a      	ldr	r2, [r3, #4]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	621a      	str	r2, [r3, #32]
}
 80046ec:	46c0      	nop			; (mov r8, r8)
 80046ee:	46bd      	mov	sp, r7
 80046f0:	b006      	add	sp, #24
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	ffff8fff 	.word	0xffff8fff
 80046f8:	fffffcff 	.word	0xfffffcff
 80046fc:	40012c00 	.word	0x40012c00
 8004700:	40014000 	.word	0x40014000
 8004704:	40014400 	.word	0x40014400
 8004708:	40014800 	.word	0x40014800
 800470c:	fffffbff 	.word	0xfffffbff
 8004710:	fffff7ff 	.word	0xfffff7ff

08004714 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	4a35      	ldr	r2, [pc, #212]	; (80047f8 <TIM_OC3_SetConfig+0xe4>)
 8004724:	401a      	ands	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	69db      	ldr	r3, [r3, #28]
 800473a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2270      	movs	r2, #112	; 0x70
 8004740:	4393      	bics	r3, r2
 8004742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2203      	movs	r2, #3
 8004748:	4393      	bics	r3, r2
 800474a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	4313      	orrs	r3, r2
 8004754:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	4a28      	ldr	r2, [pc, #160]	; (80047fc <TIM_OC3_SetConfig+0xe8>)
 800475a:	4013      	ands	r3, r2
 800475c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	021b      	lsls	r3, r3, #8
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	4313      	orrs	r3, r2
 8004768:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a24      	ldr	r2, [pc, #144]	; (8004800 <TIM_OC3_SetConfig+0xec>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d10d      	bne.n	800478e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	4a23      	ldr	r2, [pc, #140]	; (8004804 <TIM_OC3_SetConfig+0xf0>)
 8004776:	4013      	ands	r3, r2
 8004778:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	021b      	lsls	r3, r3, #8
 8004780:	697a      	ldr	r2, [r7, #20]
 8004782:	4313      	orrs	r3, r2
 8004784:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	4a1f      	ldr	r2, [pc, #124]	; (8004808 <TIM_OC3_SetConfig+0xf4>)
 800478a:	4013      	ands	r3, r2
 800478c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a1b      	ldr	r2, [pc, #108]	; (8004800 <TIM_OC3_SetConfig+0xec>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d00b      	beq.n	80047ae <TIM_OC3_SetConfig+0x9a>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a1c      	ldr	r2, [pc, #112]	; (800480c <TIM_OC3_SetConfig+0xf8>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d007      	beq.n	80047ae <TIM_OC3_SetConfig+0x9a>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a1b      	ldr	r2, [pc, #108]	; (8004810 <TIM_OC3_SetConfig+0xfc>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d003      	beq.n	80047ae <TIM_OC3_SetConfig+0x9a>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a1a      	ldr	r2, [pc, #104]	; (8004814 <TIM_OC3_SetConfig+0x100>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d113      	bne.n	80047d6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	4a19      	ldr	r2, [pc, #100]	; (8004818 <TIM_OC3_SetConfig+0x104>)
 80047b2:	4013      	ands	r3, r2
 80047b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	4a18      	ldr	r2, [pc, #96]	; (800481c <TIM_OC3_SetConfig+0x108>)
 80047ba:	4013      	ands	r3, r2
 80047bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	011b      	lsls	r3, r3, #4
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	011b      	lsls	r3, r3, #4
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	693a      	ldr	r2, [r7, #16]
 80047da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	685a      	ldr	r2, [r3, #4]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	621a      	str	r2, [r3, #32]
}
 80047f0:	46c0      	nop			; (mov r8, r8)
 80047f2:	46bd      	mov	sp, r7
 80047f4:	b006      	add	sp, #24
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	fffffeff 	.word	0xfffffeff
 80047fc:	fffffdff 	.word	0xfffffdff
 8004800:	40012c00 	.word	0x40012c00
 8004804:	fffff7ff 	.word	0xfffff7ff
 8004808:	fffffbff 	.word	0xfffffbff
 800480c:	40014000 	.word	0x40014000
 8004810:	40014400 	.word	0x40014400
 8004814:	40014800 	.word	0x40014800
 8004818:	ffffefff 	.word	0xffffefff
 800481c:	ffffdfff 	.word	0xffffdfff

08004820 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	4a28      	ldr	r2, [pc, #160]	; (80048d0 <TIM_OC4_SetConfig+0xb0>)
 8004830:	401a      	ands	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	4a22      	ldr	r2, [pc, #136]	; (80048d4 <TIM_OC4_SetConfig+0xb4>)
 800484c:	4013      	ands	r3, r2
 800484e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4a21      	ldr	r2, [pc, #132]	; (80048d8 <TIM_OC4_SetConfig+0xb8>)
 8004854:	4013      	ands	r3, r2
 8004856:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	021b      	lsls	r3, r3, #8
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	4313      	orrs	r3, r2
 8004862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	4a1d      	ldr	r2, [pc, #116]	; (80048dc <TIM_OC4_SetConfig+0xbc>)
 8004868:	4013      	ands	r3, r2
 800486a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	031b      	lsls	r3, r3, #12
 8004872:	693a      	ldr	r2, [r7, #16]
 8004874:	4313      	orrs	r3, r2
 8004876:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a19      	ldr	r2, [pc, #100]	; (80048e0 <TIM_OC4_SetConfig+0xc0>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d00b      	beq.n	8004898 <TIM_OC4_SetConfig+0x78>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a18      	ldr	r2, [pc, #96]	; (80048e4 <TIM_OC4_SetConfig+0xc4>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d007      	beq.n	8004898 <TIM_OC4_SetConfig+0x78>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a17      	ldr	r2, [pc, #92]	; (80048e8 <TIM_OC4_SetConfig+0xc8>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d003      	beq.n	8004898 <TIM_OC4_SetConfig+0x78>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a16      	ldr	r2, [pc, #88]	; (80048ec <TIM_OC4_SetConfig+0xcc>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d109      	bne.n	80048ac <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	4a15      	ldr	r2, [pc, #84]	; (80048f0 <TIM_OC4_SetConfig+0xd0>)
 800489c:	4013      	ands	r3, r2
 800489e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	695b      	ldr	r3, [r3, #20]
 80048a4:	019b      	lsls	r3, r3, #6
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	685a      	ldr	r2, [r3, #4]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	693a      	ldr	r2, [r7, #16]
 80048c4:	621a      	str	r2, [r3, #32]
}
 80048c6:	46c0      	nop			; (mov r8, r8)
 80048c8:	46bd      	mov	sp, r7
 80048ca:	b006      	add	sp, #24
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	46c0      	nop			; (mov r8, r8)
 80048d0:	ffffefff 	.word	0xffffefff
 80048d4:	ffff8fff 	.word	0xffff8fff
 80048d8:	fffffcff 	.word	0xfffffcff
 80048dc:	ffffdfff 	.word	0xffffdfff
 80048e0:	40012c00 	.word	0x40012c00
 80048e4:	40014000 	.word	0x40014000
 80048e8:	40014400 	.word	0x40014400
 80048ec:	40014800 	.word	0x40014800
 80048f0:	ffffbfff 	.word	0xffffbfff

080048f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b086      	sub	sp, #24
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6a1b      	ldr	r3, [r3, #32]
 8004904:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	2201      	movs	r2, #1
 800490c:	4393      	bics	r3, r2
 800490e:	001a      	movs	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	22f0      	movs	r2, #240	; 0xf0
 800491e:	4393      	bics	r3, r2
 8004920:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	011b      	lsls	r3, r3, #4
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	4313      	orrs	r3, r2
 800492a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	220a      	movs	r2, #10
 8004930:	4393      	bics	r3, r2
 8004932:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	4313      	orrs	r3, r2
 800493a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	697a      	ldr	r2, [r7, #20]
 8004946:	621a      	str	r2, [r3, #32]
}
 8004948:	46c0      	nop			; (mov r8, r8)
 800494a:	46bd      	mov	sp, r7
 800494c:	b006      	add	sp, #24
 800494e:	bd80      	pop	{r7, pc}

08004950 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6a1b      	ldr	r3, [r3, #32]
 8004960:	2210      	movs	r2, #16
 8004962:	4393      	bics	r3, r2
 8004964:	001a      	movs	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6a1b      	ldr	r3, [r3, #32]
 8004974:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	4a0d      	ldr	r2, [pc, #52]	; (80049b0 <TIM_TI2_ConfigInputStage+0x60>)
 800497a:	4013      	ands	r3, r2
 800497c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	031b      	lsls	r3, r3, #12
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	4313      	orrs	r3, r2
 8004986:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	22a0      	movs	r2, #160	; 0xa0
 800498c:	4393      	bics	r3, r2
 800498e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	011b      	lsls	r3, r3, #4
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	4313      	orrs	r3, r2
 8004998:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	621a      	str	r2, [r3, #32]
}
 80049a6:	46c0      	nop			; (mov r8, r8)
 80049a8:	46bd      	mov	sp, r7
 80049aa:	b006      	add	sp, #24
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	46c0      	nop			; (mov r8, r8)
 80049b0:	ffff0fff 	.word	0xffff0fff

080049b4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2270      	movs	r2, #112	; 0x70
 80049c8:	4393      	bics	r3, r2
 80049ca:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049cc:	683a      	ldr	r2, [r7, #0]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	2207      	movs	r2, #7
 80049d4:	4313      	orrs	r3, r2
 80049d6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	609a      	str	r2, [r3, #8]
}
 80049de:	46c0      	nop			; (mov r8, r8)
 80049e0:	46bd      	mov	sp, r7
 80049e2:	b004      	add	sp, #16
 80049e4:	bd80      	pop	{r7, pc}
	...

080049e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
 80049f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	4a09      	ldr	r2, [pc, #36]	; (8004a24 <TIM_ETR_SetConfig+0x3c>)
 8004a00:	4013      	ands	r3, r2
 8004a02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	021a      	lsls	r2, r3, #8
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	609a      	str	r2, [r3, #8]
}
 8004a1c:	46c0      	nop			; (mov r8, r8)
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	b006      	add	sp, #24
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	ffff00ff 	.word	0xffff00ff

08004a28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	221f      	movs	r2, #31
 8004a38:	4013      	ands	r3, r2
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	409a      	lsls	r2, r3
 8004a3e:	0013      	movs	r3, r2
 8004a40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	43d2      	mvns	r2, r2
 8004a4a:	401a      	ands	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6a1a      	ldr	r2, [r3, #32]
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	211f      	movs	r1, #31
 8004a58:	400b      	ands	r3, r1
 8004a5a:	6879      	ldr	r1, [r7, #4]
 8004a5c:	4099      	lsls	r1, r3
 8004a5e:	000b      	movs	r3, r1
 8004a60:	431a      	orrs	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	621a      	str	r2, [r3, #32]
}
 8004a66:	46c0      	nop			; (mov r8, r8)
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	b006      	add	sp, #24
 8004a6c:	bd80      	pop	{r7, pc}
	...

08004a70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	223c      	movs	r2, #60	; 0x3c
 8004a7e:	5c9b      	ldrb	r3, [r3, r2]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d101      	bne.n	8004a88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a84:	2302      	movs	r3, #2
 8004a86:	e047      	b.n	8004b18 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	223c      	movs	r2, #60	; 0x3c
 8004a8c:	2101      	movs	r1, #1
 8004a8e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	223d      	movs	r2, #61	; 0x3d
 8004a94:	2102      	movs	r1, #2
 8004a96:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2270      	movs	r2, #112	; 0x70
 8004aac:	4393      	bics	r3, r2
 8004aae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a16      	ldr	r2, [pc, #88]	; (8004b20 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d00f      	beq.n	8004aec <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	2380      	movs	r3, #128	; 0x80
 8004ad2:	05db      	lsls	r3, r3, #23
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d009      	beq.n	8004aec <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a11      	ldr	r2, [pc, #68]	; (8004b24 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d004      	beq.n	8004aec <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a10      	ldr	r2, [pc, #64]	; (8004b28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d10c      	bne.n	8004b06 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	2280      	movs	r2, #128	; 0x80
 8004af0:	4393      	bics	r3, r2
 8004af2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	68ba      	ldr	r2, [r7, #8]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68ba      	ldr	r2, [r7, #8]
 8004b04:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	223d      	movs	r2, #61	; 0x3d
 8004b0a:	2101      	movs	r1, #1
 8004b0c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	223c      	movs	r2, #60	; 0x3c
 8004b12:	2100      	movs	r1, #0
 8004b14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	0018      	movs	r0, r3
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	b004      	add	sp, #16
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	40012c00 	.word	0x40012c00
 8004b24:	40000400 	.word	0x40000400
 8004b28:	40014000 	.word	0x40014000

08004b2c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004b36:	2300      	movs	r3, #0
 8004b38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	223c      	movs	r2, #60	; 0x3c
 8004b3e:	5c9b      	ldrb	r3, [r3, r2]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d101      	bne.n	8004b48 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b44:	2302      	movs	r3, #2
 8004b46:	e03e      	b.n	8004bc6 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	223c      	movs	r2, #60	; 0x3c
 8004b4c:	2101      	movs	r1, #1
 8004b4e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	22ff      	movs	r2, #255	; 0xff
 8004b54:	4393      	bics	r3, r2
 8004b56:	001a      	movs	r2, r3
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	4a1b      	ldr	r2, [pc, #108]	; (8004bd0 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8004b64:	401a      	ands	r2, r3
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	4a18      	ldr	r2, [pc, #96]	; (8004bd4 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8004b72:	401a      	ands	r2, r3
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	4a16      	ldr	r2, [pc, #88]	; (8004bd8 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8004b80:	401a      	ands	r2, r3
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	4a13      	ldr	r2, [pc, #76]	; (8004bdc <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8004b8e:	401a      	ands	r2, r3
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	4a11      	ldr	r2, [pc, #68]	; (8004be0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8004b9c:	401a      	ands	r2, r3
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	4a0e      	ldr	r2, [pc, #56]	; (8004be4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8004baa:	401a      	ands	r2, r3
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	69db      	ldr	r3, [r3, #28]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	223c      	movs	r2, #60	; 0x3c
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	0018      	movs	r0, r3
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	b004      	add	sp, #16
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	46c0      	nop			; (mov r8, r8)
 8004bd0:	fffffcff 	.word	0xfffffcff
 8004bd4:	fffffbff 	.word	0xfffffbff
 8004bd8:	fffff7ff 	.word	0xfffff7ff
 8004bdc:	ffffefff 	.word	0xffffefff
 8004be0:	ffffdfff 	.word	0xffffdfff
 8004be4:	ffffbfff 	.word	0xffffbfff

08004be8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bf0:	46c0      	nop			; (mov r8, r8)
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	b002      	add	sp, #8
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c00:	46c0      	nop			; (mov r8, r8)
 8004c02:	46bd      	mov	sp, r7
 8004c04:	b002      	add	sp, #8
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e044      	b.n	8004ca4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d107      	bne.n	8004c32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2274      	movs	r2, #116	; 0x74
 8004c26:	2100      	movs	r1, #0
 8004c28:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	0018      	movs	r0, r3
 8004c2e:	f7fc fc63 	bl	80014f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2224      	movs	r2, #36	; 0x24
 8004c36:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2101      	movs	r1, #1
 8004c44:	438a      	bics	r2, r1
 8004c46:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	0018      	movs	r0, r3
 8004c4c:	f000 fcaa 	bl	80055a4 <UART_SetConfig>
 8004c50:	0003      	movs	r3, r0
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d101      	bne.n	8004c5a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e024      	b.n	8004ca4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d003      	beq.n	8004c6a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	0018      	movs	r0, r3
 8004c66:	f000 fddd 	bl	8005824 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	490d      	ldr	r1, [pc, #52]	; (8004cac <HAL_UART_Init+0xa4>)
 8004c76:	400a      	ands	r2, r1
 8004c78:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	689a      	ldr	r2, [r3, #8]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	212a      	movs	r1, #42	; 0x2a
 8004c86:	438a      	bics	r2, r1
 8004c88:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2101      	movs	r1, #1
 8004c96:	430a      	orrs	r2, r1
 8004c98:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	0018      	movs	r0, r3
 8004c9e:	f000 fe75 	bl	800598c <UART_CheckIdleState>
 8004ca2:	0003      	movs	r3, r0
}
 8004ca4:	0018      	movs	r0, r3
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	b002      	add	sp, #8
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	ffffb7ff 	.word	0xffffb7ff

08004cb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b08a      	sub	sp, #40	; 0x28
 8004cb4:	af02      	add	r7, sp, #8
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	603b      	str	r3, [r7, #0]
 8004cbc:	1dbb      	adds	r3, r7, #6
 8004cbe:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cc4:	2b20      	cmp	r3, #32
 8004cc6:	d000      	beq.n	8004cca <HAL_UART_Transmit+0x1a>
 8004cc8:	e096      	b.n	8004df8 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d003      	beq.n	8004cd8 <HAL_UART_Transmit+0x28>
 8004cd0:	1dbb      	adds	r3, r7, #6
 8004cd2:	881b      	ldrh	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d101      	bne.n	8004cdc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e08e      	b.n	8004dfa <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	689a      	ldr	r2, [r3, #8]
 8004ce0:	2380      	movs	r3, #128	; 0x80
 8004ce2:	015b      	lsls	r3, r3, #5
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d109      	bne.n	8004cfc <HAL_UART_Transmit+0x4c>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d105      	bne.n	8004cfc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	d001      	beq.n	8004cfc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e07e      	b.n	8004dfa <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2274      	movs	r2, #116	; 0x74
 8004d00:	5c9b      	ldrb	r3, [r3, r2]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d101      	bne.n	8004d0a <HAL_UART_Transmit+0x5a>
 8004d06:	2302      	movs	r3, #2
 8004d08:	e077      	b.n	8004dfa <HAL_UART_Transmit+0x14a>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2274      	movs	r2, #116	; 0x74
 8004d0e:	2101      	movs	r1, #1
 8004d10:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2280      	movs	r2, #128	; 0x80
 8004d16:	2100      	movs	r1, #0
 8004d18:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2221      	movs	r2, #33	; 0x21
 8004d1e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d20:	f7fc fd1e 	bl	8001760 <HAL_GetTick>
 8004d24:	0003      	movs	r3, r0
 8004d26:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	1dba      	adds	r2, r7, #6
 8004d2c:	2150      	movs	r1, #80	; 0x50
 8004d2e:	8812      	ldrh	r2, [r2, #0]
 8004d30:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	1dba      	adds	r2, r7, #6
 8004d36:	2152      	movs	r1, #82	; 0x52
 8004d38:	8812      	ldrh	r2, [r2, #0]
 8004d3a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	689a      	ldr	r2, [r3, #8]
 8004d40:	2380      	movs	r3, #128	; 0x80
 8004d42:	015b      	lsls	r3, r3, #5
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d108      	bne.n	8004d5a <HAL_UART_Transmit+0xaa>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d104      	bne.n	8004d5a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8004d50:	2300      	movs	r3, #0
 8004d52:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	61bb      	str	r3, [r7, #24]
 8004d58:	e003      	b.n	8004d62 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2274      	movs	r2, #116	; 0x74
 8004d66:	2100      	movs	r1, #0
 8004d68:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8004d6a:	e02d      	b.n	8004dc8 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	9300      	str	r3, [sp, #0]
 8004d74:	0013      	movs	r3, r2
 8004d76:	2200      	movs	r2, #0
 8004d78:	2180      	movs	r1, #128	; 0x80
 8004d7a:	f000 fe4f 	bl	8005a1c <UART_WaitOnFlagUntilTimeout>
 8004d7e:	1e03      	subs	r3, r0, #0
 8004d80:	d001      	beq.n	8004d86 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e039      	b.n	8004dfa <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d10b      	bne.n	8004da4 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	881a      	ldrh	r2, [r3, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	05d2      	lsls	r2, r2, #23
 8004d96:	0dd2      	lsrs	r2, r2, #23
 8004d98:	b292      	uxth	r2, r2
 8004d9a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	3302      	adds	r3, #2
 8004da0:	61bb      	str	r3, [r7, #24]
 8004da2:	e008      	b.n	8004db6 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	781a      	ldrb	r2, [r3, #0]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	b292      	uxth	r2, r2
 8004dae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	3301      	adds	r3, #1
 8004db4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2252      	movs	r2, #82	; 0x52
 8004dba:	5a9b      	ldrh	r3, [r3, r2]
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	b299      	uxth	r1, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2252      	movs	r2, #82	; 0x52
 8004dc6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2252      	movs	r2, #82	; 0x52
 8004dcc:	5a9b      	ldrh	r3, [r3, r2]
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1cb      	bne.n	8004d6c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	9300      	str	r3, [sp, #0]
 8004ddc:	0013      	movs	r3, r2
 8004dde:	2200      	movs	r2, #0
 8004de0:	2140      	movs	r1, #64	; 0x40
 8004de2:	f000 fe1b 	bl	8005a1c <UART_WaitOnFlagUntilTimeout>
 8004de6:	1e03      	subs	r3, r0, #0
 8004de8:	d001      	beq.n	8004dee <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e005      	b.n	8004dfa <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2220      	movs	r2, #32
 8004df2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004df4:	2300      	movs	r3, #0
 8004df6:	e000      	b.n	8004dfa <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004df8:	2302      	movs	r3, #2
  }
}
 8004dfa:	0018      	movs	r0, r3
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	b008      	add	sp, #32
 8004e00:	bd80      	pop	{r7, pc}
	...

08004e04 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b08a      	sub	sp, #40	; 0x28
 8004e08:	af02      	add	r7, sp, #8
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	603b      	str	r3, [r7, #0]
 8004e10:	1dbb      	adds	r3, r7, #6
 8004e12:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e18:	2b20      	cmp	r3, #32
 8004e1a:	d000      	beq.n	8004e1e <HAL_UART_Receive+0x1a>
 8004e1c:	e0c6      	b.n	8004fac <HAL_UART_Receive+0x1a8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d003      	beq.n	8004e2c <HAL_UART_Receive+0x28>
 8004e24:	1dbb      	adds	r3, r7, #6
 8004e26:	881b      	ldrh	r3, [r3, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d101      	bne.n	8004e30 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e0be      	b.n	8004fae <HAL_UART_Receive+0x1aa>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	689a      	ldr	r2, [r3, #8]
 8004e34:	2380      	movs	r3, #128	; 0x80
 8004e36:	015b      	lsls	r3, r3, #5
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d109      	bne.n	8004e50 <HAL_UART_Receive+0x4c>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d105      	bne.n	8004e50 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	2201      	movs	r2, #1
 8004e48:	4013      	ands	r3, r2
 8004e4a:	d001      	beq.n	8004e50 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e0ae      	b.n	8004fae <HAL_UART_Receive+0x1aa>
      }
    }

    __HAL_LOCK(huart);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2274      	movs	r2, #116	; 0x74
 8004e54:	5c9b      	ldrb	r3, [r3, r2]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d101      	bne.n	8004e5e <HAL_UART_Receive+0x5a>
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	e0a7      	b.n	8004fae <HAL_UART_Receive+0x1aa>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2274      	movs	r2, #116	; 0x74
 8004e62:	2101      	movs	r1, #1
 8004e64:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2280      	movs	r2, #128	; 0x80
 8004e6a:	2100      	movs	r1, #0
 8004e6c:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2222      	movs	r2, #34	; 0x22
 8004e72:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e7a:	f7fc fc71 	bl	8001760 <HAL_GetTick>
 8004e7e:	0003      	movs	r3, r0
 8004e80:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	1dba      	adds	r2, r7, #6
 8004e86:	2158      	movs	r1, #88	; 0x58
 8004e88:	8812      	ldrh	r2, [r2, #0]
 8004e8a:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	1dba      	adds	r2, r7, #6
 8004e90:	215a      	movs	r1, #90	; 0x5a
 8004e92:	8812      	ldrh	r2, [r2, #0]
 8004e94:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	689a      	ldr	r2, [r3, #8]
 8004e9a:	2380      	movs	r3, #128	; 0x80
 8004e9c:	015b      	lsls	r3, r3, #5
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d10d      	bne.n	8004ebe <HAL_UART_Receive+0xba>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d104      	bne.n	8004eb4 <HAL_UART_Receive+0xb0>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	225c      	movs	r2, #92	; 0x5c
 8004eae:	4942      	ldr	r1, [pc, #264]	; (8004fb8 <HAL_UART_Receive+0x1b4>)
 8004eb0:	5299      	strh	r1, [r3, r2]
 8004eb2:	e01a      	b.n	8004eea <HAL_UART_Receive+0xe6>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	225c      	movs	r2, #92	; 0x5c
 8004eb8:	21ff      	movs	r1, #255	; 0xff
 8004eba:	5299      	strh	r1, [r3, r2]
 8004ebc:	e015      	b.n	8004eea <HAL_UART_Receive+0xe6>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10d      	bne.n	8004ee2 <HAL_UART_Receive+0xde>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d104      	bne.n	8004ed8 <HAL_UART_Receive+0xd4>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	225c      	movs	r2, #92	; 0x5c
 8004ed2:	21ff      	movs	r1, #255	; 0xff
 8004ed4:	5299      	strh	r1, [r3, r2]
 8004ed6:	e008      	b.n	8004eea <HAL_UART_Receive+0xe6>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	225c      	movs	r2, #92	; 0x5c
 8004edc:	217f      	movs	r1, #127	; 0x7f
 8004ede:	5299      	strh	r1, [r3, r2]
 8004ee0:	e003      	b.n	8004eea <HAL_UART_Receive+0xe6>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	225c      	movs	r2, #92	; 0x5c
 8004ee6:	2100      	movs	r1, #0
 8004ee8:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8004eea:	2312      	movs	r3, #18
 8004eec:	18fb      	adds	r3, r7, r3
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	215c      	movs	r1, #92	; 0x5c
 8004ef2:	5a52      	ldrh	r2, [r2, r1]
 8004ef4:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	689a      	ldr	r2, [r3, #8]
 8004efa:	2380      	movs	r3, #128	; 0x80
 8004efc:	015b      	lsls	r3, r3, #5
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d108      	bne.n	8004f14 <HAL_UART_Receive+0x110>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d104      	bne.n	8004f14 <HAL_UART_Receive+0x110>
    {
      pdata8bits  = NULL;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	61bb      	str	r3, [r7, #24]
 8004f12:	e003      	b.n	8004f1c <HAL_UART_Receive+0x118>
    }
    else
    {
      pdata8bits  = pData;
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2274      	movs	r2, #116	; 0x74
 8004f20:	2100      	movs	r1, #0
 8004f22:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004f24:	e037      	b.n	8004f96 <HAL_UART_Receive+0x192>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	68f8      	ldr	r0, [r7, #12]
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	0013      	movs	r3, r2
 8004f30:	2200      	movs	r2, #0
 8004f32:	2120      	movs	r1, #32
 8004f34:	f000 fd72 	bl	8005a1c <UART_WaitOnFlagUntilTimeout>
 8004f38:	1e03      	subs	r3, r0, #0
 8004f3a:	d001      	beq.n	8004f40 <HAL_UART_Receive+0x13c>
      {
        return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e036      	b.n	8004fae <HAL_UART_Receive+0x1aa>
      }
      if (pdata8bits == NULL)
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d10e      	bne.n	8004f64 <HAL_UART_Receive+0x160>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	2212      	movs	r2, #18
 8004f50:	18ba      	adds	r2, r7, r2
 8004f52:	8812      	ldrh	r2, [r2, #0]
 8004f54:	4013      	ands	r3, r2
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	3302      	adds	r3, #2
 8004f60:	61bb      	str	r3, [r7, #24]
 8004f62:	e00f      	b.n	8004f84 <HAL_UART_Receive+0x180>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	2212      	movs	r2, #18
 8004f70:	18ba      	adds	r2, r7, r2
 8004f72:	8812      	ldrh	r2, [r2, #0]
 8004f74:	b2d2      	uxtb	r2, r2
 8004f76:	4013      	ands	r3, r2
 8004f78:	b2da      	uxtb	r2, r3
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	3301      	adds	r3, #1
 8004f82:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	225a      	movs	r2, #90	; 0x5a
 8004f88:	5a9b      	ldrh	r3, [r3, r2]
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	b299      	uxth	r1, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	225a      	movs	r2, #90	; 0x5a
 8004f94:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	225a      	movs	r2, #90	; 0x5a
 8004f9a:	5a9b      	ldrh	r3, [r3, r2]
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1c1      	bne.n	8004f26 <HAL_UART_Receive+0x122>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2220      	movs	r2, #32
 8004fa6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	e000      	b.n	8004fae <HAL_UART_Receive+0x1aa>
  }
  else
  {
    return HAL_BUSY;
 8004fac:	2302      	movs	r3, #2
  }
}
 8004fae:	0018      	movs	r0, r3
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	b008      	add	sp, #32
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	46c0      	nop			; (mov r8, r8)
 8004fb8:	000001ff 	.word	0x000001ff

08004fbc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004fbc:	b590      	push	{r4, r7, lr}
 8004fbe:	b0ab      	sub	sp, #172	; 0xac
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	69db      	ldr	r3, [r3, #28]
 8004fca:	22a4      	movs	r2, #164	; 0xa4
 8004fcc:	18b9      	adds	r1, r7, r2
 8004fce:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	20a0      	movs	r0, #160	; 0xa0
 8004fd8:	1839      	adds	r1, r7, r0
 8004fda:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	219c      	movs	r1, #156	; 0x9c
 8004fe4:	1879      	adds	r1, r7, r1
 8004fe6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004fe8:	0011      	movs	r1, r2
 8004fea:	18bb      	adds	r3, r7, r2
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a99      	ldr	r2, [pc, #612]	; (8005254 <HAL_UART_IRQHandler+0x298>)
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	2298      	movs	r2, #152	; 0x98
 8004ff4:	18bc      	adds	r4, r7, r2
 8004ff6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004ff8:	18bb      	adds	r3, r7, r2
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d114      	bne.n	800502a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005000:	187b      	adds	r3, r7, r1
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2220      	movs	r2, #32
 8005006:	4013      	ands	r3, r2
 8005008:	d00f      	beq.n	800502a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800500a:	183b      	adds	r3, r7, r0
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2220      	movs	r2, #32
 8005010:	4013      	ands	r3, r2
 8005012:	d00a      	beq.n	800502a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005018:	2b00      	cmp	r3, #0
 800501a:	d100      	bne.n	800501e <HAL_UART_IRQHandler+0x62>
 800501c:	e296      	b.n	800554c <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	0010      	movs	r0, r2
 8005026:	4798      	blx	r3
      }
      return;
 8005028:	e290      	b.n	800554c <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800502a:	2398      	movs	r3, #152	; 0x98
 800502c:	18fb      	adds	r3, r7, r3
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d100      	bne.n	8005036 <HAL_UART_IRQHandler+0x7a>
 8005034:	e114      	b.n	8005260 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005036:	239c      	movs	r3, #156	; 0x9c
 8005038:	18fb      	adds	r3, r7, r3
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2201      	movs	r2, #1
 800503e:	4013      	ands	r3, r2
 8005040:	d106      	bne.n	8005050 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005042:	23a0      	movs	r3, #160	; 0xa0
 8005044:	18fb      	adds	r3, r7, r3
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a83      	ldr	r2, [pc, #524]	; (8005258 <HAL_UART_IRQHandler+0x29c>)
 800504a:	4013      	ands	r3, r2
 800504c:	d100      	bne.n	8005050 <HAL_UART_IRQHandler+0x94>
 800504e:	e107      	b.n	8005260 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005050:	23a4      	movs	r3, #164	; 0xa4
 8005052:	18fb      	adds	r3, r7, r3
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2201      	movs	r2, #1
 8005058:	4013      	ands	r3, r2
 800505a:	d012      	beq.n	8005082 <HAL_UART_IRQHandler+0xc6>
 800505c:	23a0      	movs	r3, #160	; 0xa0
 800505e:	18fb      	adds	r3, r7, r3
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	2380      	movs	r3, #128	; 0x80
 8005064:	005b      	lsls	r3, r3, #1
 8005066:	4013      	ands	r3, r2
 8005068:	d00b      	beq.n	8005082 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2201      	movs	r2, #1
 8005070:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2280      	movs	r2, #128	; 0x80
 8005076:	589b      	ldr	r3, [r3, r2]
 8005078:	2201      	movs	r2, #1
 800507a:	431a      	orrs	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2180      	movs	r1, #128	; 0x80
 8005080:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005082:	23a4      	movs	r3, #164	; 0xa4
 8005084:	18fb      	adds	r3, r7, r3
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2202      	movs	r2, #2
 800508a:	4013      	ands	r3, r2
 800508c:	d011      	beq.n	80050b2 <HAL_UART_IRQHandler+0xf6>
 800508e:	239c      	movs	r3, #156	; 0x9c
 8005090:	18fb      	adds	r3, r7, r3
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2201      	movs	r2, #1
 8005096:	4013      	ands	r3, r2
 8005098:	d00b      	beq.n	80050b2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2202      	movs	r2, #2
 80050a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2280      	movs	r2, #128	; 0x80
 80050a6:	589b      	ldr	r3, [r3, r2]
 80050a8:	2204      	movs	r2, #4
 80050aa:	431a      	orrs	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2180      	movs	r1, #128	; 0x80
 80050b0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050b2:	23a4      	movs	r3, #164	; 0xa4
 80050b4:	18fb      	adds	r3, r7, r3
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	2204      	movs	r2, #4
 80050ba:	4013      	ands	r3, r2
 80050bc:	d011      	beq.n	80050e2 <HAL_UART_IRQHandler+0x126>
 80050be:	239c      	movs	r3, #156	; 0x9c
 80050c0:	18fb      	adds	r3, r7, r3
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2201      	movs	r2, #1
 80050c6:	4013      	ands	r3, r2
 80050c8:	d00b      	beq.n	80050e2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2204      	movs	r2, #4
 80050d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2280      	movs	r2, #128	; 0x80
 80050d6:	589b      	ldr	r3, [r3, r2]
 80050d8:	2202      	movs	r2, #2
 80050da:	431a      	orrs	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2180      	movs	r1, #128	; 0x80
 80050e0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80050e2:	23a4      	movs	r3, #164	; 0xa4
 80050e4:	18fb      	adds	r3, r7, r3
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2208      	movs	r2, #8
 80050ea:	4013      	ands	r3, r2
 80050ec:	d017      	beq.n	800511e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80050ee:	23a0      	movs	r3, #160	; 0xa0
 80050f0:	18fb      	adds	r3, r7, r3
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2220      	movs	r2, #32
 80050f6:	4013      	ands	r3, r2
 80050f8:	d105      	bne.n	8005106 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80050fa:	239c      	movs	r3, #156	; 0x9c
 80050fc:	18fb      	adds	r3, r7, r3
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2201      	movs	r2, #1
 8005102:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005104:	d00b      	beq.n	800511e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2208      	movs	r2, #8
 800510c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2280      	movs	r2, #128	; 0x80
 8005112:	589b      	ldr	r3, [r3, r2]
 8005114:	2208      	movs	r2, #8
 8005116:	431a      	orrs	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2180      	movs	r1, #128	; 0x80
 800511c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800511e:	23a4      	movs	r3, #164	; 0xa4
 8005120:	18fb      	adds	r3, r7, r3
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	2380      	movs	r3, #128	; 0x80
 8005126:	011b      	lsls	r3, r3, #4
 8005128:	4013      	ands	r3, r2
 800512a:	d013      	beq.n	8005154 <HAL_UART_IRQHandler+0x198>
 800512c:	23a0      	movs	r3, #160	; 0xa0
 800512e:	18fb      	adds	r3, r7, r3
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	2380      	movs	r3, #128	; 0x80
 8005134:	04db      	lsls	r3, r3, #19
 8005136:	4013      	ands	r3, r2
 8005138:	d00c      	beq.n	8005154 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2280      	movs	r2, #128	; 0x80
 8005140:	0112      	lsls	r2, r2, #4
 8005142:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2280      	movs	r2, #128	; 0x80
 8005148:	589b      	ldr	r3, [r3, r2]
 800514a:	2220      	movs	r2, #32
 800514c:	431a      	orrs	r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2180      	movs	r1, #128	; 0x80
 8005152:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2280      	movs	r2, #128	; 0x80
 8005158:	589b      	ldr	r3, [r3, r2]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d100      	bne.n	8005160 <HAL_UART_IRQHandler+0x1a4>
 800515e:	e1f7      	b.n	8005550 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005160:	23a4      	movs	r3, #164	; 0xa4
 8005162:	18fb      	adds	r3, r7, r3
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2220      	movs	r2, #32
 8005168:	4013      	ands	r3, r2
 800516a:	d00e      	beq.n	800518a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800516c:	23a0      	movs	r3, #160	; 0xa0
 800516e:	18fb      	adds	r3, r7, r3
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2220      	movs	r2, #32
 8005174:	4013      	ands	r3, r2
 8005176:	d008      	beq.n	800518a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800517c:	2b00      	cmp	r3, #0
 800517e:	d004      	beq.n	800518a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	0010      	movs	r0, r2
 8005188:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2280      	movs	r2, #128	; 0x80
 800518e:	589b      	ldr	r3, [r3, r2]
 8005190:	2194      	movs	r1, #148	; 0x94
 8005192:	187a      	adds	r2, r7, r1
 8005194:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	2240      	movs	r2, #64	; 0x40
 800519e:	4013      	ands	r3, r2
 80051a0:	2b40      	cmp	r3, #64	; 0x40
 80051a2:	d004      	beq.n	80051ae <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80051a4:	187b      	adds	r3, r7, r1
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2228      	movs	r2, #40	; 0x28
 80051aa:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80051ac:	d047      	beq.n	800523e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	0018      	movs	r0, r3
 80051b2:	f000 fcf7 	bl	8005ba4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	2240      	movs	r2, #64	; 0x40
 80051be:	4013      	ands	r3, r2
 80051c0:	2b40      	cmp	r3, #64	; 0x40
 80051c2:	d137      	bne.n	8005234 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051c4:	f3ef 8310 	mrs	r3, PRIMASK
 80051c8:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80051ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051cc:	2090      	movs	r0, #144	; 0x90
 80051ce:	183a      	adds	r2, r7, r0
 80051d0:	6013      	str	r3, [r2, #0]
 80051d2:	2301      	movs	r3, #1
 80051d4:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051d8:	f383 8810 	msr	PRIMASK, r3
}
 80051dc:	46c0      	nop			; (mov r8, r8)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	689a      	ldr	r2, [r3, #8]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2140      	movs	r1, #64	; 0x40
 80051ea:	438a      	bics	r2, r1
 80051ec:	609a      	str	r2, [r3, #8]
 80051ee:	183b      	adds	r3, r7, r0
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051f6:	f383 8810 	msr	PRIMASK, r3
}
 80051fa:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005200:	2b00      	cmp	r3, #0
 8005202:	d012      	beq.n	800522a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005208:	4a14      	ldr	r2, [pc, #80]	; (800525c <HAL_UART_IRQHandler+0x2a0>)
 800520a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005210:	0018      	movs	r0, r3
 8005212:	f7fd f90b 	bl	800242c <HAL_DMA_Abort_IT>
 8005216:	1e03      	subs	r3, r0, #0
 8005218:	d01a      	beq.n	8005250 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800521e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005224:	0018      	movs	r0, r3
 8005226:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005228:	e012      	b.n	8005250 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	0018      	movs	r0, r3
 800522e:	f000 f9a5 	bl	800557c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005232:	e00d      	b.n	8005250 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	0018      	movs	r0, r3
 8005238:	f000 f9a0 	bl	800557c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800523c:	e008      	b.n	8005250 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	0018      	movs	r0, r3
 8005242:	f000 f99b 	bl	800557c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2280      	movs	r2, #128	; 0x80
 800524a:	2100      	movs	r1, #0
 800524c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800524e:	e17f      	b.n	8005550 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005250:	46c0      	nop			; (mov r8, r8)
    return;
 8005252:	e17d      	b.n	8005550 <HAL_UART_IRQHandler+0x594>
 8005254:	0000080f 	.word	0x0000080f
 8005258:	04000120 	.word	0x04000120
 800525c:	08005c69 	.word	0x08005c69

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005264:	2b01      	cmp	r3, #1
 8005266:	d000      	beq.n	800526a <HAL_UART_IRQHandler+0x2ae>
 8005268:	e131      	b.n	80054ce <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800526a:	23a4      	movs	r3, #164	; 0xa4
 800526c:	18fb      	adds	r3, r7, r3
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2210      	movs	r2, #16
 8005272:	4013      	ands	r3, r2
 8005274:	d100      	bne.n	8005278 <HAL_UART_IRQHandler+0x2bc>
 8005276:	e12a      	b.n	80054ce <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005278:	23a0      	movs	r3, #160	; 0xa0
 800527a:	18fb      	adds	r3, r7, r3
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2210      	movs	r2, #16
 8005280:	4013      	ands	r3, r2
 8005282:	d100      	bne.n	8005286 <HAL_UART_IRQHandler+0x2ca>
 8005284:	e123      	b.n	80054ce <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2210      	movs	r2, #16
 800528c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	2240      	movs	r2, #64	; 0x40
 8005296:	4013      	ands	r3, r2
 8005298:	2b40      	cmp	r3, #64	; 0x40
 800529a:	d000      	beq.n	800529e <HAL_UART_IRQHandler+0x2e2>
 800529c:	e09b      	b.n	80053d6 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	217e      	movs	r1, #126	; 0x7e
 80052a8:	187b      	adds	r3, r7, r1
 80052aa:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80052ac:	187b      	adds	r3, r7, r1
 80052ae:	881b      	ldrh	r3, [r3, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d100      	bne.n	80052b6 <HAL_UART_IRQHandler+0x2fa>
 80052b4:	e14e      	b.n	8005554 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2258      	movs	r2, #88	; 0x58
 80052ba:	5a9b      	ldrh	r3, [r3, r2]
 80052bc:	187a      	adds	r2, r7, r1
 80052be:	8812      	ldrh	r2, [r2, #0]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d300      	bcc.n	80052c6 <HAL_UART_IRQHandler+0x30a>
 80052c4:	e146      	b.n	8005554 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	187a      	adds	r2, r7, r1
 80052ca:	215a      	movs	r1, #90	; 0x5a
 80052cc:	8812      	ldrh	r2, [r2, #0]
 80052ce:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	2b20      	cmp	r3, #32
 80052d8:	d06e      	beq.n	80053b8 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052da:	f3ef 8310 	mrs	r3, PRIMASK
 80052de:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80052e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052e2:	67bb      	str	r3, [r7, #120]	; 0x78
 80052e4:	2301      	movs	r3, #1
 80052e6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ea:	f383 8810 	msr	PRIMASK, r3
}
 80052ee:	46c0      	nop			; (mov r8, r8)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	499a      	ldr	r1, [pc, #616]	; (8005564 <HAL_UART_IRQHandler+0x5a8>)
 80052fc:	400a      	ands	r2, r1
 80052fe:	601a      	str	r2, [r3, #0]
 8005300:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005302:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005306:	f383 8810 	msr	PRIMASK, r3
}
 800530a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800530c:	f3ef 8310 	mrs	r3, PRIMASK
 8005310:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005314:	677b      	str	r3, [r7, #116]	; 0x74
 8005316:	2301      	movs	r3, #1
 8005318:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800531a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800531c:	f383 8810 	msr	PRIMASK, r3
}
 8005320:	46c0      	nop			; (mov r8, r8)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	689a      	ldr	r2, [r3, #8]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2101      	movs	r1, #1
 800532e:	438a      	bics	r2, r1
 8005330:	609a      	str	r2, [r3, #8]
 8005332:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005334:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005336:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005338:	f383 8810 	msr	PRIMASK, r3
}
 800533c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800533e:	f3ef 8310 	mrs	r3, PRIMASK
 8005342:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005344:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005346:	673b      	str	r3, [r7, #112]	; 0x70
 8005348:	2301      	movs	r3, #1
 800534a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800534c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800534e:	f383 8810 	msr	PRIMASK, r3
}
 8005352:	46c0      	nop			; (mov r8, r8)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	689a      	ldr	r2, [r3, #8]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2140      	movs	r1, #64	; 0x40
 8005360:	438a      	bics	r2, r1
 8005362:	609a      	str	r2, [r3, #8]
 8005364:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005366:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005368:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800536a:	f383 8810 	msr	PRIMASK, r3
}
 800536e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2220      	movs	r2, #32
 8005374:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800537c:	f3ef 8310 	mrs	r3, PRIMASK
 8005380:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005382:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005384:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005386:	2301      	movs	r3, #1
 8005388:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800538a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800538c:	f383 8810 	msr	PRIMASK, r3
}
 8005390:	46c0      	nop			; (mov r8, r8)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2110      	movs	r1, #16
 800539e:	438a      	bics	r2, r1
 80053a0:	601a      	str	r2, [r3, #0]
 80053a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053a8:	f383 8810 	msr	PRIMASK, r3
}
 80053ac:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b2:	0018      	movs	r0, r3
 80053b4:	f7fd f802 	bl	80023bc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2258      	movs	r2, #88	; 0x58
 80053bc:	5a9a      	ldrh	r2, [r3, r2]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	215a      	movs	r1, #90	; 0x5a
 80053c2:	5a5b      	ldrh	r3, [r3, r1]
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	b29a      	uxth	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	0011      	movs	r1, r2
 80053ce:	0018      	movs	r0, r3
 80053d0:	f000 f8dc 	bl	800558c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80053d4:	e0be      	b.n	8005554 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2258      	movs	r2, #88	; 0x58
 80053da:	5a99      	ldrh	r1, [r3, r2]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	225a      	movs	r2, #90	; 0x5a
 80053e0:	5a9b      	ldrh	r3, [r3, r2]
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	208e      	movs	r0, #142	; 0x8e
 80053e6:	183b      	adds	r3, r7, r0
 80053e8:	1a8a      	subs	r2, r1, r2
 80053ea:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	225a      	movs	r2, #90	; 0x5a
 80053f0:	5a9b      	ldrh	r3, [r3, r2]
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d100      	bne.n	80053fa <HAL_UART_IRQHandler+0x43e>
 80053f8:	e0ae      	b.n	8005558 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 80053fa:	183b      	adds	r3, r7, r0
 80053fc:	881b      	ldrh	r3, [r3, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d100      	bne.n	8005404 <HAL_UART_IRQHandler+0x448>
 8005402:	e0a9      	b.n	8005558 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005404:	f3ef 8310 	mrs	r3, PRIMASK
 8005408:	60fb      	str	r3, [r7, #12]
  return(result);
 800540a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800540c:	2488      	movs	r4, #136	; 0x88
 800540e:	193a      	adds	r2, r7, r4
 8005410:	6013      	str	r3, [r2, #0]
 8005412:	2301      	movs	r3, #1
 8005414:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	f383 8810 	msr	PRIMASK, r3
}
 800541c:	46c0      	nop			; (mov r8, r8)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	494f      	ldr	r1, [pc, #316]	; (8005568 <HAL_UART_IRQHandler+0x5ac>)
 800542a:	400a      	ands	r2, r1
 800542c:	601a      	str	r2, [r3, #0]
 800542e:	193b      	adds	r3, r7, r4
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	f383 8810 	msr	PRIMASK, r3
}
 800543a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800543c:	f3ef 8310 	mrs	r3, PRIMASK
 8005440:	61bb      	str	r3, [r7, #24]
  return(result);
 8005442:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005444:	2484      	movs	r4, #132	; 0x84
 8005446:	193a      	adds	r2, r7, r4
 8005448:	6013      	str	r3, [r2, #0]
 800544a:	2301      	movs	r3, #1
 800544c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	f383 8810 	msr	PRIMASK, r3
}
 8005454:	46c0      	nop			; (mov r8, r8)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	689a      	ldr	r2, [r3, #8]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2101      	movs	r1, #1
 8005462:	438a      	bics	r2, r1
 8005464:	609a      	str	r2, [r3, #8]
 8005466:	193b      	adds	r3, r7, r4
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800546c:	6a3b      	ldr	r3, [r7, #32]
 800546e:	f383 8810 	msr	PRIMASK, r3
}
 8005472:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2220      	movs	r2, #32
 8005478:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005486:	f3ef 8310 	mrs	r3, PRIMASK
 800548a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800548c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800548e:	2480      	movs	r4, #128	; 0x80
 8005490:	193a      	adds	r2, r7, r4
 8005492:	6013      	str	r3, [r2, #0]
 8005494:	2301      	movs	r3, #1
 8005496:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549a:	f383 8810 	msr	PRIMASK, r3
}
 800549e:	46c0      	nop			; (mov r8, r8)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2110      	movs	r1, #16
 80054ac:	438a      	bics	r2, r1
 80054ae:	601a      	str	r2, [r3, #0]
 80054b0:	193b      	adds	r3, r7, r4
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b8:	f383 8810 	msr	PRIMASK, r3
}
 80054bc:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80054be:	183b      	adds	r3, r7, r0
 80054c0:	881a      	ldrh	r2, [r3, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	0011      	movs	r1, r2
 80054c6:	0018      	movs	r0, r3
 80054c8:	f000 f860 	bl	800558c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80054cc:	e044      	b.n	8005558 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80054ce:	23a4      	movs	r3, #164	; 0xa4
 80054d0:	18fb      	adds	r3, r7, r3
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	2380      	movs	r3, #128	; 0x80
 80054d6:	035b      	lsls	r3, r3, #13
 80054d8:	4013      	ands	r3, r2
 80054da:	d010      	beq.n	80054fe <HAL_UART_IRQHandler+0x542>
 80054dc:	239c      	movs	r3, #156	; 0x9c
 80054de:	18fb      	adds	r3, r7, r3
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	2380      	movs	r3, #128	; 0x80
 80054e4:	03db      	lsls	r3, r3, #15
 80054e6:	4013      	ands	r3, r2
 80054e8:	d009      	beq.n	80054fe <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2280      	movs	r2, #128	; 0x80
 80054f0:	0352      	lsls	r2, r2, #13
 80054f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	0018      	movs	r0, r3
 80054f8:	f000 fbf8 	bl	8005cec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80054fc:	e02f      	b.n	800555e <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80054fe:	23a4      	movs	r3, #164	; 0xa4
 8005500:	18fb      	adds	r3, r7, r3
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2280      	movs	r2, #128	; 0x80
 8005506:	4013      	ands	r3, r2
 8005508:	d00f      	beq.n	800552a <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800550a:	23a0      	movs	r3, #160	; 0xa0
 800550c:	18fb      	adds	r3, r7, r3
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2280      	movs	r2, #128	; 0x80
 8005512:	4013      	ands	r3, r2
 8005514:	d009      	beq.n	800552a <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800551a:	2b00      	cmp	r3, #0
 800551c:	d01e      	beq.n	800555c <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	0010      	movs	r0, r2
 8005526:	4798      	blx	r3
    }
    return;
 8005528:	e018      	b.n	800555c <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800552a:	23a4      	movs	r3, #164	; 0xa4
 800552c:	18fb      	adds	r3, r7, r3
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2240      	movs	r2, #64	; 0x40
 8005532:	4013      	ands	r3, r2
 8005534:	d013      	beq.n	800555e <HAL_UART_IRQHandler+0x5a2>
 8005536:	23a0      	movs	r3, #160	; 0xa0
 8005538:	18fb      	adds	r3, r7, r3
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2240      	movs	r2, #64	; 0x40
 800553e:	4013      	ands	r3, r2
 8005540:	d00d      	beq.n	800555e <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	0018      	movs	r0, r3
 8005546:	f000 fba6 	bl	8005c96 <UART_EndTransmit_IT>
    return;
 800554a:	e008      	b.n	800555e <HAL_UART_IRQHandler+0x5a2>
      return;
 800554c:	46c0      	nop			; (mov r8, r8)
 800554e:	e006      	b.n	800555e <HAL_UART_IRQHandler+0x5a2>
    return;
 8005550:	46c0      	nop			; (mov r8, r8)
 8005552:	e004      	b.n	800555e <HAL_UART_IRQHandler+0x5a2>
      return;
 8005554:	46c0      	nop			; (mov r8, r8)
 8005556:	e002      	b.n	800555e <HAL_UART_IRQHandler+0x5a2>
      return;
 8005558:	46c0      	nop			; (mov r8, r8)
 800555a:	e000      	b.n	800555e <HAL_UART_IRQHandler+0x5a2>
    return;
 800555c:	46c0      	nop			; (mov r8, r8)
  }

}
 800555e:	46bd      	mov	sp, r7
 8005560:	b02b      	add	sp, #172	; 0xac
 8005562:	bd90      	pop	{r4, r7, pc}
 8005564:	fffffeff 	.word	0xfffffeff
 8005568:	fffffedf 	.word	0xfffffedf

0800556c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005574:	46c0      	nop			; (mov r8, r8)
 8005576:	46bd      	mov	sp, r7
 8005578:	b002      	add	sp, #8
 800557a:	bd80      	pop	{r7, pc}

0800557c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005584:	46c0      	nop			; (mov r8, r8)
 8005586:	46bd      	mov	sp, r7
 8005588:	b002      	add	sp, #8
 800558a:	bd80      	pop	{r7, pc}

0800558c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	000a      	movs	r2, r1
 8005596:	1cbb      	adds	r3, r7, #2
 8005598:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800559a:	46c0      	nop			; (mov r8, r8)
 800559c:	46bd      	mov	sp, r7
 800559e:	b002      	add	sp, #8
 80055a0:	bd80      	pop	{r7, pc}
	...

080055a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b088      	sub	sp, #32
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055ac:	231e      	movs	r3, #30
 80055ae:	18fb      	adds	r3, r7, r3
 80055b0:	2200      	movs	r2, #0
 80055b2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689a      	ldr	r2, [r3, #8]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	431a      	orrs	r2, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	695b      	ldr	r3, [r3, #20]
 80055c2:	431a      	orrs	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	69db      	ldr	r3, [r3, #28]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a8d      	ldr	r2, [pc, #564]	; (8005808 <UART_SetConfig+0x264>)
 80055d4:	4013      	ands	r3, r2
 80055d6:	0019      	movs	r1, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	430a      	orrs	r2, r1
 80055e0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	4a88      	ldr	r2, [pc, #544]	; (800580c <UART_SetConfig+0x268>)
 80055ea:	4013      	ands	r3, r2
 80055ec:	0019      	movs	r1, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	68da      	ldr	r2, [r3, #12]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a1b      	ldr	r3, [r3, #32]
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	4313      	orrs	r3, r2
 8005608:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	4a7f      	ldr	r2, [pc, #508]	; (8005810 <UART_SetConfig+0x26c>)
 8005612:	4013      	ands	r3, r2
 8005614:	0019      	movs	r1, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	430a      	orrs	r2, r1
 800561e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a7b      	ldr	r2, [pc, #492]	; (8005814 <UART_SetConfig+0x270>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d127      	bne.n	800567a <UART_SetConfig+0xd6>
 800562a:	4b7b      	ldr	r3, [pc, #492]	; (8005818 <UART_SetConfig+0x274>)
 800562c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562e:	2203      	movs	r2, #3
 8005630:	4013      	ands	r3, r2
 8005632:	2b03      	cmp	r3, #3
 8005634:	d00d      	beq.n	8005652 <UART_SetConfig+0xae>
 8005636:	d81b      	bhi.n	8005670 <UART_SetConfig+0xcc>
 8005638:	2b02      	cmp	r3, #2
 800563a:	d014      	beq.n	8005666 <UART_SetConfig+0xc2>
 800563c:	d818      	bhi.n	8005670 <UART_SetConfig+0xcc>
 800563e:	2b00      	cmp	r3, #0
 8005640:	d002      	beq.n	8005648 <UART_SetConfig+0xa4>
 8005642:	2b01      	cmp	r3, #1
 8005644:	d00a      	beq.n	800565c <UART_SetConfig+0xb8>
 8005646:	e013      	b.n	8005670 <UART_SetConfig+0xcc>
 8005648:	231f      	movs	r3, #31
 800564a:	18fb      	adds	r3, r7, r3
 800564c:	2200      	movs	r2, #0
 800564e:	701a      	strb	r2, [r3, #0]
 8005650:	e021      	b.n	8005696 <UART_SetConfig+0xf2>
 8005652:	231f      	movs	r3, #31
 8005654:	18fb      	adds	r3, r7, r3
 8005656:	2202      	movs	r2, #2
 8005658:	701a      	strb	r2, [r3, #0]
 800565a:	e01c      	b.n	8005696 <UART_SetConfig+0xf2>
 800565c:	231f      	movs	r3, #31
 800565e:	18fb      	adds	r3, r7, r3
 8005660:	2204      	movs	r2, #4
 8005662:	701a      	strb	r2, [r3, #0]
 8005664:	e017      	b.n	8005696 <UART_SetConfig+0xf2>
 8005666:	231f      	movs	r3, #31
 8005668:	18fb      	adds	r3, r7, r3
 800566a:	2208      	movs	r2, #8
 800566c:	701a      	strb	r2, [r3, #0]
 800566e:	e012      	b.n	8005696 <UART_SetConfig+0xf2>
 8005670:	231f      	movs	r3, #31
 8005672:	18fb      	adds	r3, r7, r3
 8005674:	2210      	movs	r2, #16
 8005676:	701a      	strb	r2, [r3, #0]
 8005678:	e00d      	b.n	8005696 <UART_SetConfig+0xf2>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a67      	ldr	r2, [pc, #412]	; (800581c <UART_SetConfig+0x278>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d104      	bne.n	800568e <UART_SetConfig+0xea>
 8005684:	231f      	movs	r3, #31
 8005686:	18fb      	adds	r3, r7, r3
 8005688:	2200      	movs	r2, #0
 800568a:	701a      	strb	r2, [r3, #0]
 800568c:	e003      	b.n	8005696 <UART_SetConfig+0xf2>
 800568e:	231f      	movs	r3, #31
 8005690:	18fb      	adds	r3, r7, r3
 8005692:	2210      	movs	r2, #16
 8005694:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	69da      	ldr	r2, [r3, #28]
 800569a:	2380      	movs	r3, #128	; 0x80
 800569c:	021b      	lsls	r3, r3, #8
 800569e:	429a      	cmp	r2, r3
 80056a0:	d15d      	bne.n	800575e <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 80056a2:	231f      	movs	r3, #31
 80056a4:	18fb      	adds	r3, r7, r3
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	2b08      	cmp	r3, #8
 80056aa:	d015      	beq.n	80056d8 <UART_SetConfig+0x134>
 80056ac:	dc18      	bgt.n	80056e0 <UART_SetConfig+0x13c>
 80056ae:	2b04      	cmp	r3, #4
 80056b0:	d00d      	beq.n	80056ce <UART_SetConfig+0x12a>
 80056b2:	dc15      	bgt.n	80056e0 <UART_SetConfig+0x13c>
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d002      	beq.n	80056be <UART_SetConfig+0x11a>
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d005      	beq.n	80056c8 <UART_SetConfig+0x124>
 80056bc:	e010      	b.n	80056e0 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056be:	f7fd fe19 	bl	80032f4 <HAL_RCC_GetPCLK1Freq>
 80056c2:	0003      	movs	r3, r0
 80056c4:	61bb      	str	r3, [r7, #24]
        break;
 80056c6:	e012      	b.n	80056ee <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056c8:	4b55      	ldr	r3, [pc, #340]	; (8005820 <UART_SetConfig+0x27c>)
 80056ca:	61bb      	str	r3, [r7, #24]
        break;
 80056cc:	e00f      	b.n	80056ee <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056ce:	f7fd fda3 	bl	8003218 <HAL_RCC_GetSysClockFreq>
 80056d2:	0003      	movs	r3, r0
 80056d4:	61bb      	str	r3, [r7, #24]
        break;
 80056d6:	e00a      	b.n	80056ee <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056d8:	2380      	movs	r3, #128	; 0x80
 80056da:	021b      	lsls	r3, r3, #8
 80056dc:	61bb      	str	r3, [r7, #24]
        break;
 80056de:	e006      	b.n	80056ee <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80056e0:	2300      	movs	r3, #0
 80056e2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80056e4:	231e      	movs	r3, #30
 80056e6:	18fb      	adds	r3, r7, r3
 80056e8:	2201      	movs	r2, #1
 80056ea:	701a      	strb	r2, [r3, #0]
        break;
 80056ec:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d100      	bne.n	80056f6 <UART_SetConfig+0x152>
 80056f4:	e07b      	b.n	80057ee <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	005a      	lsls	r2, r3, #1
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	085b      	lsrs	r3, r3, #1
 8005700:	18d2      	adds	r2, r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	0019      	movs	r1, r3
 8005708:	0010      	movs	r0, r2
 800570a:	f7fa fcfd 	bl	8000108 <__udivsi3>
 800570e:	0003      	movs	r3, r0
 8005710:	b29b      	uxth	r3, r3
 8005712:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	2b0f      	cmp	r3, #15
 8005718:	d91c      	bls.n	8005754 <UART_SetConfig+0x1b0>
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	2380      	movs	r3, #128	; 0x80
 800571e:	025b      	lsls	r3, r3, #9
 8005720:	429a      	cmp	r2, r3
 8005722:	d217      	bcs.n	8005754 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	b29a      	uxth	r2, r3
 8005728:	200e      	movs	r0, #14
 800572a:	183b      	adds	r3, r7, r0
 800572c:	210f      	movs	r1, #15
 800572e:	438a      	bics	r2, r1
 8005730:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	085b      	lsrs	r3, r3, #1
 8005736:	b29b      	uxth	r3, r3
 8005738:	2207      	movs	r2, #7
 800573a:	4013      	ands	r3, r2
 800573c:	b299      	uxth	r1, r3
 800573e:	183b      	adds	r3, r7, r0
 8005740:	183a      	adds	r2, r7, r0
 8005742:	8812      	ldrh	r2, [r2, #0]
 8005744:	430a      	orrs	r2, r1
 8005746:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	183a      	adds	r2, r7, r0
 800574e:	8812      	ldrh	r2, [r2, #0]
 8005750:	60da      	str	r2, [r3, #12]
 8005752:	e04c      	b.n	80057ee <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8005754:	231e      	movs	r3, #30
 8005756:	18fb      	adds	r3, r7, r3
 8005758:	2201      	movs	r2, #1
 800575a:	701a      	strb	r2, [r3, #0]
 800575c:	e047      	b.n	80057ee <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800575e:	231f      	movs	r3, #31
 8005760:	18fb      	adds	r3, r7, r3
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	2b08      	cmp	r3, #8
 8005766:	d015      	beq.n	8005794 <UART_SetConfig+0x1f0>
 8005768:	dc18      	bgt.n	800579c <UART_SetConfig+0x1f8>
 800576a:	2b04      	cmp	r3, #4
 800576c:	d00d      	beq.n	800578a <UART_SetConfig+0x1e6>
 800576e:	dc15      	bgt.n	800579c <UART_SetConfig+0x1f8>
 8005770:	2b00      	cmp	r3, #0
 8005772:	d002      	beq.n	800577a <UART_SetConfig+0x1d6>
 8005774:	2b02      	cmp	r3, #2
 8005776:	d005      	beq.n	8005784 <UART_SetConfig+0x1e0>
 8005778:	e010      	b.n	800579c <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800577a:	f7fd fdbb 	bl	80032f4 <HAL_RCC_GetPCLK1Freq>
 800577e:	0003      	movs	r3, r0
 8005780:	61bb      	str	r3, [r7, #24]
        break;
 8005782:	e012      	b.n	80057aa <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005784:	4b26      	ldr	r3, [pc, #152]	; (8005820 <UART_SetConfig+0x27c>)
 8005786:	61bb      	str	r3, [r7, #24]
        break;
 8005788:	e00f      	b.n	80057aa <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800578a:	f7fd fd45 	bl	8003218 <HAL_RCC_GetSysClockFreq>
 800578e:	0003      	movs	r3, r0
 8005790:	61bb      	str	r3, [r7, #24]
        break;
 8005792:	e00a      	b.n	80057aa <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005794:	2380      	movs	r3, #128	; 0x80
 8005796:	021b      	lsls	r3, r3, #8
 8005798:	61bb      	str	r3, [r7, #24]
        break;
 800579a:	e006      	b.n	80057aa <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 800579c:	2300      	movs	r3, #0
 800579e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80057a0:	231e      	movs	r3, #30
 80057a2:	18fb      	adds	r3, r7, r3
 80057a4:	2201      	movs	r2, #1
 80057a6:	701a      	strb	r2, [r3, #0]
        break;
 80057a8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d01e      	beq.n	80057ee <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	085a      	lsrs	r2, r3, #1
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	18d2      	adds	r2, r2, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	0019      	movs	r1, r3
 80057c0:	0010      	movs	r0, r2
 80057c2:	f7fa fca1 	bl	8000108 <__udivsi3>
 80057c6:	0003      	movs	r3, r0
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	2b0f      	cmp	r3, #15
 80057d0:	d909      	bls.n	80057e6 <UART_SetConfig+0x242>
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	2380      	movs	r3, #128	; 0x80
 80057d6:	025b      	lsls	r3, r3, #9
 80057d8:	429a      	cmp	r2, r3
 80057da:	d204      	bcs.n	80057e6 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	693a      	ldr	r2, [r7, #16]
 80057e2:	60da      	str	r2, [r3, #12]
 80057e4:	e003      	b.n	80057ee <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80057e6:	231e      	movs	r3, #30
 80057e8:	18fb      	adds	r3, r7, r3
 80057ea:	2201      	movs	r2, #1
 80057ec:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80057fa:	231e      	movs	r3, #30
 80057fc:	18fb      	adds	r3, r7, r3
 80057fe:	781b      	ldrb	r3, [r3, #0]
}
 8005800:	0018      	movs	r0, r3
 8005802:	46bd      	mov	sp, r7
 8005804:	b008      	add	sp, #32
 8005806:	bd80      	pop	{r7, pc}
 8005808:	ffff69f3 	.word	0xffff69f3
 800580c:	ffffcfff 	.word	0xffffcfff
 8005810:	fffff4ff 	.word	0xfffff4ff
 8005814:	40013800 	.word	0x40013800
 8005818:	40021000 	.word	0x40021000
 800581c:	40004400 	.word	0x40004400
 8005820:	007a1200 	.word	0x007a1200

08005824 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005830:	2201      	movs	r2, #1
 8005832:	4013      	ands	r3, r2
 8005834:	d00b      	beq.n	800584e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	4a4a      	ldr	r2, [pc, #296]	; (8005968 <UART_AdvFeatureConfig+0x144>)
 800583e:	4013      	ands	r3, r2
 8005840:	0019      	movs	r1, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	430a      	orrs	r2, r1
 800584c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005852:	2202      	movs	r2, #2
 8005854:	4013      	ands	r3, r2
 8005856:	d00b      	beq.n	8005870 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	4a43      	ldr	r2, [pc, #268]	; (800596c <UART_AdvFeatureConfig+0x148>)
 8005860:	4013      	ands	r3, r2
 8005862:	0019      	movs	r1, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	430a      	orrs	r2, r1
 800586e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005874:	2204      	movs	r2, #4
 8005876:	4013      	ands	r3, r2
 8005878:	d00b      	beq.n	8005892 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	4a3b      	ldr	r2, [pc, #236]	; (8005970 <UART_AdvFeatureConfig+0x14c>)
 8005882:	4013      	ands	r3, r2
 8005884:	0019      	movs	r1, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	430a      	orrs	r2, r1
 8005890:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005896:	2208      	movs	r2, #8
 8005898:	4013      	ands	r3, r2
 800589a:	d00b      	beq.n	80058b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	4a34      	ldr	r2, [pc, #208]	; (8005974 <UART_AdvFeatureConfig+0x150>)
 80058a4:	4013      	ands	r3, r2
 80058a6:	0019      	movs	r1, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	430a      	orrs	r2, r1
 80058b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b8:	2210      	movs	r2, #16
 80058ba:	4013      	ands	r3, r2
 80058bc:	d00b      	beq.n	80058d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	4a2c      	ldr	r2, [pc, #176]	; (8005978 <UART_AdvFeatureConfig+0x154>)
 80058c6:	4013      	ands	r3, r2
 80058c8:	0019      	movs	r1, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	430a      	orrs	r2, r1
 80058d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058da:	2220      	movs	r2, #32
 80058dc:	4013      	ands	r3, r2
 80058de:	d00b      	beq.n	80058f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	4a25      	ldr	r2, [pc, #148]	; (800597c <UART_AdvFeatureConfig+0x158>)
 80058e8:	4013      	ands	r3, r2
 80058ea:	0019      	movs	r1, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	430a      	orrs	r2, r1
 80058f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fc:	2240      	movs	r2, #64	; 0x40
 80058fe:	4013      	ands	r3, r2
 8005900:	d01d      	beq.n	800593e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	4a1d      	ldr	r2, [pc, #116]	; (8005980 <UART_AdvFeatureConfig+0x15c>)
 800590a:	4013      	ands	r3, r2
 800590c:	0019      	movs	r1, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	430a      	orrs	r2, r1
 8005918:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800591e:	2380      	movs	r3, #128	; 0x80
 8005920:	035b      	lsls	r3, r3, #13
 8005922:	429a      	cmp	r2, r3
 8005924:	d10b      	bne.n	800593e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	4a15      	ldr	r2, [pc, #84]	; (8005984 <UART_AdvFeatureConfig+0x160>)
 800592e:	4013      	ands	r3, r2
 8005930:	0019      	movs	r1, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	430a      	orrs	r2, r1
 800593c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005942:	2280      	movs	r2, #128	; 0x80
 8005944:	4013      	ands	r3, r2
 8005946:	d00b      	beq.n	8005960 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	4a0e      	ldr	r2, [pc, #56]	; (8005988 <UART_AdvFeatureConfig+0x164>)
 8005950:	4013      	ands	r3, r2
 8005952:	0019      	movs	r1, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	430a      	orrs	r2, r1
 800595e:	605a      	str	r2, [r3, #4]
  }
}
 8005960:	46c0      	nop			; (mov r8, r8)
 8005962:	46bd      	mov	sp, r7
 8005964:	b002      	add	sp, #8
 8005966:	bd80      	pop	{r7, pc}
 8005968:	fffdffff 	.word	0xfffdffff
 800596c:	fffeffff 	.word	0xfffeffff
 8005970:	fffbffff 	.word	0xfffbffff
 8005974:	ffff7fff 	.word	0xffff7fff
 8005978:	ffffefff 	.word	0xffffefff
 800597c:	ffffdfff 	.word	0xffffdfff
 8005980:	ffefffff 	.word	0xffefffff
 8005984:	ff9fffff 	.word	0xff9fffff
 8005988:	fff7ffff 	.word	0xfff7ffff

0800598c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b086      	sub	sp, #24
 8005990:	af02      	add	r7, sp, #8
 8005992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2280      	movs	r2, #128	; 0x80
 8005998:	2100      	movs	r1, #0
 800599a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800599c:	f7fb fee0 	bl	8001760 <HAL_GetTick>
 80059a0:	0003      	movs	r3, r0
 80059a2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2208      	movs	r2, #8
 80059ac:	4013      	ands	r3, r2
 80059ae:	2b08      	cmp	r3, #8
 80059b0:	d10c      	bne.n	80059cc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2280      	movs	r2, #128	; 0x80
 80059b6:	0391      	lsls	r1, r2, #14
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	4a17      	ldr	r2, [pc, #92]	; (8005a18 <UART_CheckIdleState+0x8c>)
 80059bc:	9200      	str	r2, [sp, #0]
 80059be:	2200      	movs	r2, #0
 80059c0:	f000 f82c 	bl	8005a1c <UART_WaitOnFlagUntilTimeout>
 80059c4:	1e03      	subs	r3, r0, #0
 80059c6:	d001      	beq.n	80059cc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059c8:	2303      	movs	r3, #3
 80059ca:	e021      	b.n	8005a10 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2204      	movs	r2, #4
 80059d4:	4013      	ands	r3, r2
 80059d6:	2b04      	cmp	r3, #4
 80059d8:	d10c      	bne.n	80059f4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2280      	movs	r2, #128	; 0x80
 80059de:	03d1      	lsls	r1, r2, #15
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	4a0d      	ldr	r2, [pc, #52]	; (8005a18 <UART_CheckIdleState+0x8c>)
 80059e4:	9200      	str	r2, [sp, #0]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f000 f818 	bl	8005a1c <UART_WaitOnFlagUntilTimeout>
 80059ec:	1e03      	subs	r3, r0, #0
 80059ee:	d001      	beq.n	80059f4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059f0:	2303      	movs	r3, #3
 80059f2:	e00d      	b.n	8005a10 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2220      	movs	r2, #32
 80059f8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2220      	movs	r2, #32
 80059fe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2274      	movs	r2, #116	; 0x74
 8005a0a:	2100      	movs	r1, #0
 8005a0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	0018      	movs	r0, r3
 8005a12:	46bd      	mov	sp, r7
 8005a14:	b004      	add	sp, #16
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	01ffffff 	.word	0x01ffffff

08005a1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b094      	sub	sp, #80	; 0x50
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	603b      	str	r3, [r7, #0]
 8005a28:	1dfb      	adds	r3, r7, #7
 8005a2a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a2c:	e0a3      	b.n	8005b76 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a30:	3301      	adds	r3, #1
 8005a32:	d100      	bne.n	8005a36 <UART_WaitOnFlagUntilTimeout+0x1a>
 8005a34:	e09f      	b.n	8005b76 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a36:	f7fb fe93 	bl	8001760 <HAL_GetTick>
 8005a3a:	0002      	movs	r2, r0
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d302      	bcc.n	8005a4c <UART_WaitOnFlagUntilTimeout+0x30>
 8005a46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d13d      	bne.n	8005ac8 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a4c:	f3ef 8310 	mrs	r3, PRIMASK
 8005a50:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a54:	647b      	str	r3, [r7, #68]	; 0x44
 8005a56:	2301      	movs	r3, #1
 8005a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a5c:	f383 8810 	msr	PRIMASK, r3
}
 8005a60:	46c0      	nop			; (mov r8, r8)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	494c      	ldr	r1, [pc, #304]	; (8005ba0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005a6e:	400a      	ands	r2, r1
 8005a70:	601a      	str	r2, [r3, #0]
 8005a72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a74:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a78:	f383 8810 	msr	PRIMASK, r3
}
 8005a7c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a7e:	f3ef 8310 	mrs	r3, PRIMASK
 8005a82:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a86:	643b      	str	r3, [r7, #64]	; 0x40
 8005a88:	2301      	movs	r3, #1
 8005a8a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a8e:	f383 8810 	msr	PRIMASK, r3
}
 8005a92:	46c0      	nop			; (mov r8, r8)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	689a      	ldr	r2, [r3, #8]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2101      	movs	r1, #1
 8005aa0:	438a      	bics	r2, r1
 8005aa2:	609a      	str	r2, [r3, #8]
 8005aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aaa:	f383 8810 	msr	PRIMASK, r3
}
 8005aae:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2220      	movs	r2, #32
 8005ab4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2220      	movs	r2, #32
 8005aba:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2274      	movs	r2, #116	; 0x74
 8005ac0:	2100      	movs	r1, #0
 8005ac2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e067      	b.n	8005b98 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2204      	movs	r2, #4
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	d050      	beq.n	8005b76 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	69da      	ldr	r2, [r3, #28]
 8005ada:	2380      	movs	r3, #128	; 0x80
 8005adc:	011b      	lsls	r3, r3, #4
 8005ade:	401a      	ands	r2, r3
 8005ae0:	2380      	movs	r3, #128	; 0x80
 8005ae2:	011b      	lsls	r3, r3, #4
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d146      	bne.n	8005b76 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2280      	movs	r2, #128	; 0x80
 8005aee:	0112      	lsls	r2, r2, #4
 8005af0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005af2:	f3ef 8310 	mrs	r3, PRIMASK
 8005af6:	613b      	str	r3, [r7, #16]
  return(result);
 8005af8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005afa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005afc:	2301      	movs	r3, #1
 8005afe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	f383 8810 	msr	PRIMASK, r3
}
 8005b06:	46c0      	nop			; (mov r8, r8)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4923      	ldr	r1, [pc, #140]	; (8005ba0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005b14:	400a      	ands	r2, r1
 8005b16:	601a      	str	r2, [r3, #0]
 8005b18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b1a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	f383 8810 	msr	PRIMASK, r3
}
 8005b22:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b24:	f3ef 8310 	mrs	r3, PRIMASK
 8005b28:	61fb      	str	r3, [r7, #28]
  return(result);
 8005b2a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b2e:	2301      	movs	r3, #1
 8005b30:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b32:	6a3b      	ldr	r3, [r7, #32]
 8005b34:	f383 8810 	msr	PRIMASK, r3
}
 8005b38:	46c0      	nop			; (mov r8, r8)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	689a      	ldr	r2, [r3, #8]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2101      	movs	r1, #1
 8005b46:	438a      	bics	r2, r1
 8005b48:	609a      	str	r2, [r3, #8]
 8005b4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b4c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b50:	f383 8810 	msr	PRIMASK, r3
}
 8005b54:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2220      	movs	r2, #32
 8005b5a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2220      	movs	r2, #32
 8005b60:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2280      	movs	r2, #128	; 0x80
 8005b66:	2120      	movs	r1, #32
 8005b68:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2274      	movs	r2, #116	; 0x74
 8005b6e:	2100      	movs	r1, #0
 8005b70:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e010      	b.n	8005b98 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	69db      	ldr	r3, [r3, #28]
 8005b7c:	68ba      	ldr	r2, [r7, #8]
 8005b7e:	4013      	ands	r3, r2
 8005b80:	68ba      	ldr	r2, [r7, #8]
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	425a      	negs	r2, r3
 8005b86:	4153      	adcs	r3, r2
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	001a      	movs	r2, r3
 8005b8c:	1dfb      	adds	r3, r7, #7
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d100      	bne.n	8005b96 <UART_WaitOnFlagUntilTimeout+0x17a>
 8005b94:	e74b      	b.n	8005a2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	0018      	movs	r0, r3
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	b014      	add	sp, #80	; 0x50
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	fffffe5f 	.word	0xfffffe5f

08005ba4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b08e      	sub	sp, #56	; 0x38
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bac:	f3ef 8310 	mrs	r3, PRIMASK
 8005bb0:	617b      	str	r3, [r7, #20]
  return(result);
 8005bb2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bb4:	637b      	str	r3, [r7, #52]	; 0x34
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	f383 8810 	msr	PRIMASK, r3
}
 8005bc0:	46c0      	nop			; (mov r8, r8)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4925      	ldr	r1, [pc, #148]	; (8005c64 <UART_EndRxTransfer+0xc0>)
 8005bce:	400a      	ands	r2, r1
 8005bd0:	601a      	str	r2, [r3, #0]
 8005bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bd4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	f383 8810 	msr	PRIMASK, r3
}
 8005bdc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bde:	f3ef 8310 	mrs	r3, PRIMASK
 8005be2:	623b      	str	r3, [r7, #32]
  return(result);
 8005be4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005be6:	633b      	str	r3, [r7, #48]	; 0x30
 8005be8:	2301      	movs	r3, #1
 8005bea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bee:	f383 8810 	msr	PRIMASK, r3
}
 8005bf2:	46c0      	nop			; (mov r8, r8)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	689a      	ldr	r2, [r3, #8]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2101      	movs	r1, #1
 8005c00:	438a      	bics	r2, r1
 8005c02:	609a      	str	r2, [r3, #8]
 8005c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c06:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0a:	f383 8810 	msr	PRIMASK, r3
}
 8005c0e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d118      	bne.n	8005c4a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c18:	f3ef 8310 	mrs	r3, PRIMASK
 8005c1c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c1e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c22:	2301      	movs	r3, #1
 8005c24:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f383 8810 	msr	PRIMASK, r3
}
 8005c2c:	46c0      	nop			; (mov r8, r8)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2110      	movs	r1, #16
 8005c3a:	438a      	bics	r2, r1
 8005c3c:	601a      	str	r2, [r3, #0]
 8005c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c40:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	f383 8810 	msr	PRIMASK, r3
}
 8005c48:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2220      	movs	r2, #32
 8005c4e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005c5c:	46c0      	nop			; (mov r8, r8)
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	b00e      	add	sp, #56	; 0x38
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	fffffedf 	.word	0xfffffedf

08005c68 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c74:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	225a      	movs	r2, #90	; 0x5a
 8005c7a:	2100      	movs	r1, #0
 8005c7c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2252      	movs	r2, #82	; 0x52
 8005c82:	2100      	movs	r1, #0
 8005c84:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	0018      	movs	r0, r3
 8005c8a:	f7ff fc77 	bl	800557c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c8e:	46c0      	nop			; (mov r8, r8)
 8005c90:	46bd      	mov	sp, r7
 8005c92:	b004      	add	sp, #16
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b086      	sub	sp, #24
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c9e:	f3ef 8310 	mrs	r3, PRIMASK
 8005ca2:	60bb      	str	r3, [r7, #8]
  return(result);
 8005ca4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ca6:	617b      	str	r3, [r7, #20]
 8005ca8:	2301      	movs	r3, #1
 8005caa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f383 8810 	msr	PRIMASK, r3
}
 8005cb2:	46c0      	nop			; (mov r8, r8)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2140      	movs	r1, #64	; 0x40
 8005cc0:	438a      	bics	r2, r1
 8005cc2:	601a      	str	r2, [r3, #0]
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	f383 8810 	msr	PRIMASK, r3
}
 8005cce:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2220      	movs	r2, #32
 8005cd4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	0018      	movs	r0, r3
 8005ce0:	f7ff fc44 	bl	800556c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ce4:	46c0      	nop			; (mov r8, r8)
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	b006      	add	sp, #24
 8005cea:	bd80      	pop	{r7, pc}

08005cec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b082      	sub	sp, #8
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005cf4:	46c0      	nop			; (mov r8, r8)
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	b002      	add	sp, #8
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b088      	sub	sp, #32
 8005d00:	af02      	add	r7, sp, #8
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	1d3b      	adds	r3, r7, #4
 8005d06:	6019      	str	r1, [r3, #0]
 8005d08:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d0a:	2317      	movs	r3, #23
 8005d0c:	18fb      	adds	r3, r7, r3
 8005d0e:	2200      	movs	r2, #0
 8005d10:	701a      	strb	r2, [r3, #0]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2274      	movs	r2, #116	; 0x74
 8005d16:	5c9b      	ldrb	r3, [r3, r2]
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d101      	bne.n	8005d20 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x24>
 8005d1c:	2302      	movs	r3, #2
 8005d1e:	e04a      	b.n	8005db6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xba>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2274      	movs	r2, #116	; 0x74
 8005d24:	2101      	movs	r1, #1
 8005d26:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2224      	movs	r2, #36	; 0x24
 8005d2c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2101      	movs	r1, #1
 8005d3a:	438a      	bics	r2, r1
 8005d3c:	601a      	str	r2, [r3, #0]

#if defined(USART_CR3_WUS)
  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	4a1e      	ldr	r2, [pc, #120]	; (8005dc0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc4>)
 8005d46:	4013      	ands	r3, r2
 8005d48:	0019      	movs	r1, r3
 8005d4a:	1d3b      	adds	r3, r7, #4
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	430a      	orrs	r2, r1
 8005d54:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_WUS */

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8005d56:	1d3b      	adds	r3, r7, #4
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d105      	bne.n	8005d6a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x6e>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8005d5e:	1d3b      	adds	r3, r7, #4
 8005d60:	68f8      	ldr	r0, [r7, #12]
 8005d62:	6819      	ldr	r1, [r3, #0]
 8005d64:	685a      	ldr	r2, [r3, #4]
 8005d66:	f000 f860 	bl	8005e2a <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2101      	movs	r1, #1
 8005d76:	430a      	orrs	r2, r1
 8005d78:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d7a:	f7fb fcf1 	bl	8001760 <HAL_GetTick>
 8005d7e:	0003      	movs	r3, r0
 8005d80:	613b      	str	r3, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	2280      	movs	r2, #128	; 0x80
 8005d86:	03d1      	lsls	r1, r2, #15
 8005d88:	68f8      	ldr	r0, [r7, #12]
 8005d8a:	4a0e      	ldr	r2, [pc, #56]	; (8005dc4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc8>)
 8005d8c:	9200      	str	r2, [sp, #0]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f7ff fe44 	bl	8005a1c <UART_WaitOnFlagUntilTimeout>
 8005d94:	1e03      	subs	r3, r0, #0
 8005d96:	d004      	beq.n	8005da2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa6>
  {
    status = HAL_TIMEOUT;
 8005d98:	2317      	movs	r3, #23
 8005d9a:	18fb      	adds	r3, r7, r3
 8005d9c:	2203      	movs	r2, #3
 8005d9e:	701a      	strb	r2, [r3, #0]
 8005da0:	e002      	b.n	8005da8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xac>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2220      	movs	r2, #32
 8005da6:	679a      	str	r2, [r3, #120]	; 0x78
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2274      	movs	r2, #116	; 0x74
 8005dac:	2100      	movs	r1, #0
 8005dae:	5499      	strb	r1, [r3, r2]

  return status;
 8005db0:	2317      	movs	r3, #23
 8005db2:	18fb      	adds	r3, r7, r3
 8005db4:	781b      	ldrb	r3, [r3, #0]
}
 8005db6:	0018      	movs	r0, r3
 8005db8:	46bd      	mov	sp, r7
 8005dba:	b006      	add	sp, #24
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	46c0      	nop			; (mov r8, r8)
 8005dc0:	ffcfffff 	.word	0xffcfffff
 8005dc4:	01ffffff 	.word	0x01ffffff

08005dc8 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b086      	sub	sp, #24
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2274      	movs	r2, #116	; 0x74
 8005dd4:	5c9b      	ldrb	r3, [r3, r2]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d101      	bne.n	8005dde <HAL_UARTEx_EnableStopMode+0x16>
 8005dda:	2302      	movs	r3, #2
 8005ddc:	e021      	b.n	8005e22 <HAL_UARTEx_EnableStopMode+0x5a>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2274      	movs	r2, #116	; 0x74
 8005de2:	2101      	movs	r1, #1
 8005de4:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005de6:	f3ef 8310 	mrs	r3, PRIMASK
 8005dea:	60bb      	str	r3, [r7, #8]
  return(result);
 8005dec:	68bb      	ldr	r3, [r7, #8]

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8005dee:	617b      	str	r3, [r7, #20]
 8005df0:	2301      	movs	r3, #1
 8005df2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f383 8810 	msr	PRIMASK, r3
}
 8005dfa:	46c0      	nop			; (mov r8, r8)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2102      	movs	r1, #2
 8005e08:	430a      	orrs	r2, r1
 8005e0a:	601a      	str	r2, [r3, #0]
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	f383 8810 	msr	PRIMASK, r3
}
 8005e16:	46c0      	nop			; (mov r8, r8)

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2274      	movs	r2, #116	; 0x74
 8005e1c:	2100      	movs	r1, #0
 8005e1e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	0018      	movs	r0, r3
 8005e24:	46bd      	mov	sp, r7
 8005e26:	b006      	add	sp, #24
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b084      	sub	sp, #16
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	60f8      	str	r0, [r7, #12]
 8005e32:	1d3b      	adds	r3, r7, #4
 8005e34:	6019      	str	r1, [r3, #0]
 8005e36:	605a      	str	r2, [r3, #4]
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	2210      	movs	r2, #16
 8005e40:	4393      	bics	r3, r2
 8005e42:	001a      	movs	r2, r3
 8005e44:	1d3b      	adds	r3, r7, #4
 8005e46:	889b      	ldrh	r3, [r3, #4]
 8005e48:	0019      	movs	r1, r3
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	430a      	orrs	r2, r1
 8005e50:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	021b      	lsls	r3, r3, #8
 8005e5a:	0a19      	lsrs	r1, r3, #8
 8005e5c:	1d3b      	adds	r3, r7, #4
 8005e5e:	799b      	ldrb	r3, [r3, #6]
 8005e60:	061a      	lsls	r2, r3, #24
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	430a      	orrs	r2, r1
 8005e68:	605a      	str	r2, [r3, #4]
}
 8005e6a:	46c0      	nop			; (mov r8, r8)
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	b004      	add	sp, #16
 8005e70:	bd80      	pop	{r7, pc}
	...

08005e74 <__libc_init_array>:
 8005e74:	b570      	push	{r4, r5, r6, lr}
 8005e76:	2600      	movs	r6, #0
 8005e78:	4d0c      	ldr	r5, [pc, #48]	; (8005eac <__libc_init_array+0x38>)
 8005e7a:	4c0d      	ldr	r4, [pc, #52]	; (8005eb0 <__libc_init_array+0x3c>)
 8005e7c:	1b64      	subs	r4, r4, r5
 8005e7e:	10a4      	asrs	r4, r4, #2
 8005e80:	42a6      	cmp	r6, r4
 8005e82:	d109      	bne.n	8005e98 <__libc_init_array+0x24>
 8005e84:	2600      	movs	r6, #0
 8005e86:	f000 f821 	bl	8005ecc <_init>
 8005e8a:	4d0a      	ldr	r5, [pc, #40]	; (8005eb4 <__libc_init_array+0x40>)
 8005e8c:	4c0a      	ldr	r4, [pc, #40]	; (8005eb8 <__libc_init_array+0x44>)
 8005e8e:	1b64      	subs	r4, r4, r5
 8005e90:	10a4      	asrs	r4, r4, #2
 8005e92:	42a6      	cmp	r6, r4
 8005e94:	d105      	bne.n	8005ea2 <__libc_init_array+0x2e>
 8005e96:	bd70      	pop	{r4, r5, r6, pc}
 8005e98:	00b3      	lsls	r3, r6, #2
 8005e9a:	58eb      	ldr	r3, [r5, r3]
 8005e9c:	4798      	blx	r3
 8005e9e:	3601      	adds	r6, #1
 8005ea0:	e7ee      	b.n	8005e80 <__libc_init_array+0xc>
 8005ea2:	00b3      	lsls	r3, r6, #2
 8005ea4:	58eb      	ldr	r3, [r5, r3]
 8005ea6:	4798      	blx	r3
 8005ea8:	3601      	adds	r6, #1
 8005eaa:	e7f2      	b.n	8005e92 <__libc_init_array+0x1e>
 8005eac:	08005f20 	.word	0x08005f20
 8005eb0:	08005f20 	.word	0x08005f20
 8005eb4:	08005f20 	.word	0x08005f20
 8005eb8:	08005f24 	.word	0x08005f24

08005ebc <memset>:
 8005ebc:	0003      	movs	r3, r0
 8005ebe:	1882      	adds	r2, r0, r2
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d100      	bne.n	8005ec6 <memset+0xa>
 8005ec4:	4770      	bx	lr
 8005ec6:	7019      	strb	r1, [r3, #0]
 8005ec8:	3301      	adds	r3, #1
 8005eca:	e7f9      	b.n	8005ec0 <memset+0x4>

08005ecc <_init>:
 8005ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ece:	46c0      	nop			; (mov r8, r8)
 8005ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ed2:	bc08      	pop	{r3}
 8005ed4:	469e      	mov	lr, r3
 8005ed6:	4770      	bx	lr

08005ed8 <_fini>:
 8005ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eda:	46c0      	nop			; (mov r8, r8)
 8005edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ede:	bc08      	pop	{r3}
 8005ee0:	469e      	mov	lr, r3
 8005ee2:	4770      	bx	lr
