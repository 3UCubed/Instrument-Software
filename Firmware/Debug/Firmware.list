
Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c70  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  08006d30  08006d30  00016d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f4c  08006f4c  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08006f4c  08006f4c  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006f4c  08006f4c  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f4c  08006f4c  00016f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f50  08006f50  00016f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08006f54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c8  20000028  08006f7c  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f0  08006f7c  000203f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   000162a0  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c74  00000000  00000000  000362f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e8  00000000  00000000  00038f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c0  00000000  00000000  0003a350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000135be  00000000  00000000  0003b610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000185a9  00000000  00000000  0004ebce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00074e7b  00000000  00000000  00067177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dbff2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004874  00000000  00000000  000dc044  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000028 	.word	0x20000028
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006d18 	.word	0x08006d18

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000002c 	.word	0x2000002c
 8000104:	08006d18 	.word	0x08006d18

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000224:	f3bf 8f4f 	dsb	sy
}
 8000228:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800022a:	4b04      	ldr	r3, [pc, #16]	; (800023c <__NVIC_SystemReset+0x1c>)
 800022c:	4a04      	ldr	r2, [pc, #16]	; (8000240 <__NVIC_SystemReset+0x20>)
 800022e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000230:	f3bf 8f4f 	dsb	sy
}
 8000234:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000236:	46c0      	nop			; (mov r8, r8)
 8000238:	e7fd      	b.n	8000236 <__NVIC_SystemReset+0x16>
 800023a:	46c0      	nop			; (mov r8, r8)
 800023c:	e000ed00 	.word	0xe000ed00
 8000240:	05fa0004 	.word	0x05fa0004

08000244 <HAL_TIM_OC_DelayElapsedCallback>:
uint8_t PMT_ON = 1;
uint8_t ERPA_ON = 1;
uint8_t HK_ON = 1;

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000246:	b091      	sub	sp, #68	; 0x44
 8000248:	af02      	add	r7, sp, #8
 800024a:	6078      	str	r0, [r7, #4]
  if (htim == &htim2)
 800024c:	687a      	ldr	r2, [r7, #4]
 800024e:	4bd8      	ldr	r3, [pc, #864]	; (80005b0 <HAL_TIM_OC_DelayElapsedCallback+0x36c>)
 8000250:	429a      	cmp	r2, r3
 8000252:	d000      	beq.n	8000256 <HAL_TIM_OC_DelayElapsedCallback+0x12>
 8000254:	e33a      	b.n	80008cc <HAL_TIM_OC_DelayElapsedCallback+0x688>
  {
    if (1)
    { // check pin state
      if (ERPA_ON)
 8000256:	4bd7      	ldr	r3, [pc, #860]	; (80005b4 <HAL_TIM_OC_DelayElapsedCallback+0x370>)
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	2b00      	cmp	r3, #0
 800025c:	d100      	bne.n	8000260 <HAL_TIM_OC_DelayElapsedCallback+0x1c>
 800025e:	e07f      	b.n	8000360 <HAL_TIM_OC_DelayElapsedCallback+0x11c>
//        while (!(SPI2->SR))
//          ;
//
//        erpa_raw = SPI2->DR;

        DAC->DHR12R1 = DAC_OUT[step];
 8000260:	4bd5      	ldr	r3, [pc, #852]	; (80005b8 <HAL_TIM_OC_DelayElapsedCallback+0x374>)
 8000262:	781b      	ldrb	r3, [r3, #0]
 8000264:	0019      	movs	r1, r3
 8000266:	4bd5      	ldr	r3, [pc, #852]	; (80005bc <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 8000268:	4ad5      	ldr	r2, [pc, #852]	; (80005c0 <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 800026a:	0089      	lsls	r1, r1, #2
 800026c:	588a      	ldr	r2, [r1, r2]
 800026e:	609a      	str	r2, [r3, #8]

        HAL_ADC_Start_DMA(&hadc, (uint32_t *)adcResultsDMA,
 8000270:	2311      	movs	r3, #17
 8000272:	001a      	movs	r2, r3
 8000274:	49d3      	ldr	r1, [pc, #844]	; (80005c4 <HAL_TIM_OC_DelayElapsedCallback+0x380>)
 8000276:	4bd4      	ldr	r3, [pc, #848]	; (80005c8 <HAL_TIM_OC_DelayElapsedCallback+0x384>)
 8000278:	0018      	movs	r0, r3
 800027a:	f001 fe79 	bl	8001f70 <HAL_ADC_Start_DMA>
                          adcChannelCount);
        uint16_t PA0 = adcResultsDMA[0]; // ADC_IN0, END_mon: entrance/collimator monitor
 800027e:	212e      	movs	r1, #46	; 0x2e
 8000280:	187b      	adds	r3, r7, r1
 8000282:	4ad0      	ldr	r2, [pc, #832]	; (80005c4 <HAL_TIM_OC_DelayElapsedCallback+0x380>)
 8000284:	8812      	ldrh	r2, [r2, #0]
 8000286:	801a      	strh	r2, [r3, #0]
        uint16_t PA7 = adcResultsDMA[6]; // ADC_IN7, SWP_mon: Sweep voltage monitor
 8000288:	202c      	movs	r0, #44	; 0x2c
 800028a:	183b      	adds	r3, r7, r0
 800028c:	4acd      	ldr	r2, [pc, #820]	; (80005c4 <HAL_TIM_OC_DelayElapsedCallback+0x380>)
 800028e:	8992      	ldrh	r2, [r2, #12]
 8000290:	801a      	strh	r2, [r3, #0]
        uint16_t PB0 = adcResultsDMA[7]; // ADC_IN8, TMP 1: Sweep temperature
 8000292:	242a      	movs	r4, #42	; 0x2a
 8000294:	193b      	adds	r3, r7, r4
 8000296:	4acb      	ldr	r2, [pc, #812]	; (80005c4 <HAL_TIM_OC_DelayElapsedCallback+0x380>)
 8000298:	89d2      	ldrh	r2, [r2, #14]
 800029a:	801a      	strh	r2, [r3, #0]
        uint16_t PB1 = adcResultsDMA[8]; // ADC_IN9, TMP 2: feedbacks
 800029c:	2528      	movs	r5, #40	; 0x28
 800029e:	197b      	adds	r3, r7, r5
 80002a0:	4ac8      	ldr	r2, [pc, #800]	; (80005c4 <HAL_TIM_OC_DelayElapsedCallback+0x380>)
 80002a2:	8a12      	ldrh	r2, [r2, #16]
 80002a4:	801a      	strh	r2, [r3, #0]

        erpa_buf[0] = erpa_sync;                  // ERPA SYNC 0xAA MSB
 80002a6:	22aa      	movs	r2, #170	; 0xaa
 80002a8:	4bc8      	ldr	r3, [pc, #800]	; (80005cc <HAL_TIM_OC_DelayElapsedCallback+0x388>)
 80002aa:	701a      	strb	r2, [r3, #0]
        erpa_buf[1] = erpa_sync;                  // ERPA SYNC 0xAA LSB
 80002ac:	22aa      	movs	r2, #170	; 0xaa
 80002ae:	4bc7      	ldr	r3, [pc, #796]	; (80005cc <HAL_TIM_OC_DelayElapsedCallback+0x388>)
 80002b0:	705a      	strb	r2, [r3, #1]
        erpa_buf[2] = ((erpa_seq & 0xFF00) >> 8); // ERPA SEQ # MSB
 80002b2:	4bc7      	ldr	r3, [pc, #796]	; (80005d0 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 80002b4:	881b      	ldrh	r3, [r3, #0]
 80002b6:	0a1b      	lsrs	r3, r3, #8
 80002b8:	b29b      	uxth	r3, r3
 80002ba:	b2da      	uxtb	r2, r3
 80002bc:	4bc3      	ldr	r3, [pc, #780]	; (80005cc <HAL_TIM_OC_DelayElapsedCallback+0x388>)
 80002be:	709a      	strb	r2, [r3, #2]
        erpa_buf[3] = (erpa_seq & 0xFF);          // ERPA SEQ # MSB
 80002c0:	4bc3      	ldr	r3, [pc, #780]	; (80005d0 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 80002c2:	881b      	ldrh	r3, [r3, #0]
 80002c4:	b2da      	uxtb	r2, r3
 80002c6:	4bc1      	ldr	r3, [pc, #772]	; (80005cc <HAL_TIM_OC_DelayElapsedCallback+0x388>)
 80002c8:	70da      	strb	r2, [r3, #3]
        erpa_buf[4] = ((erpa_raw & 0xFF00) >> 8);      // ERPA eADC MSB
 80002ca:	4bc2      	ldr	r3, [pc, #776]	; (80005d4 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	121b      	asrs	r3, r3, #8
 80002d0:	b2da      	uxtb	r2, r3
 80002d2:	4bbe      	ldr	r3, [pc, #760]	; (80005cc <HAL_TIM_OC_DelayElapsedCallback+0x388>)
 80002d4:	711a      	strb	r2, [r3, #4]
        erpa_buf[5] = (erpa_raw & 0xFF);               // ERPA eADC LSB
 80002d6:	4bbf      	ldr	r3, [pc, #764]	; (80005d4 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	b2da      	uxtb	r2, r3
 80002dc:	4bbb      	ldr	r3, [pc, #748]	; (80005cc <HAL_TIM_OC_DelayElapsedCallback+0x388>)
 80002de:	715a      	strb	r2, [r3, #5]
        erpa_buf[6] = ((PA0 & 0xFF00) >> 8); // ENDmon MSB
 80002e0:	187b      	adds	r3, r7, r1
 80002e2:	881b      	ldrh	r3, [r3, #0]
 80002e4:	0a1b      	lsrs	r3, r3, #8
 80002e6:	b29b      	uxth	r3, r3
 80002e8:	b2da      	uxtb	r2, r3
 80002ea:	4bb8      	ldr	r3, [pc, #736]	; (80005cc <HAL_TIM_OC_DelayElapsedCallback+0x388>)
 80002ec:	719a      	strb	r2, [r3, #6]
        erpa_buf[7] = (PA0 & 0xFF);          // ENDmon LSB
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	881b      	ldrh	r3, [r3, #0]
 80002f2:	b2da      	uxtb	r2, r3
 80002f4:	4bb5      	ldr	r3, [pc, #724]	; (80005cc <HAL_TIM_OC_DelayElapsedCallback+0x388>)
 80002f6:	71da      	strb	r2, [r3, #7]
        erpa_buf[8] = ((PB0 & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 80002f8:	193b      	adds	r3, r7, r4
 80002fa:	881b      	ldrh	r3, [r3, #0]
 80002fc:	0a1b      	lsrs	r3, r3, #8
 80002fe:	b29b      	uxth	r3, r3
 8000300:	b2da      	uxtb	r2, r3
 8000302:	4bb2      	ldr	r3, [pc, #712]	; (80005cc <HAL_TIM_OC_DelayElapsedCallback+0x388>)
 8000304:	721a      	strb	r2, [r3, #8]
        erpa_buf[9] = (PB0 & 0xFF);           // TEMPURATURE 1 LSB
 8000306:	193b      	adds	r3, r7, r4
 8000308:	881b      	ldrh	r3, [r3, #0]
 800030a:	b2da      	uxtb	r2, r3
 800030c:	4baf      	ldr	r3, [pc, #700]	; (80005cc <HAL_TIM_OC_DelayElapsedCallback+0x388>)
 800030e:	725a      	strb	r2, [r3, #9]
        erpa_buf[10] = ((PB1 & 0xFF00) >> 8); // TEMPURATURE 2 MSB
 8000310:	197b      	adds	r3, r7, r5
 8000312:	881b      	ldrh	r3, [r3, #0]
 8000314:	0a1b      	lsrs	r3, r3, #8
 8000316:	b29b      	uxth	r3, r3
 8000318:	b2da      	uxtb	r2, r3
 800031a:	4bac      	ldr	r3, [pc, #688]	; (80005cc <HAL_TIM_OC_DelayElapsedCallback+0x388>)
 800031c:	729a      	strb	r2, [r3, #10]
        erpa_buf[11] = (PB1 & 0xFF);          // TEMPURATURE 2 LSB
 800031e:	197b      	adds	r3, r7, r5
 8000320:	881b      	ldrh	r3, [r3, #0]
 8000322:	b2da      	uxtb	r2, r3
 8000324:	4ba9      	ldr	r3, [pc, #676]	; (80005cc <HAL_TIM_OC_DelayElapsedCallback+0x388>)
 8000326:	72da      	strb	r2, [r3, #11]
        erpa_buf[12] = ((PA7 & 0xFF00) >> 8); // SWP Monitored MSB
 8000328:	183b      	adds	r3, r7, r0
 800032a:	881b      	ldrh	r3, [r3, #0]
 800032c:	0a1b      	lsrs	r3, r3, #8
 800032e:	b29b      	uxth	r3, r3
 8000330:	b2da      	uxtb	r2, r3
 8000332:	4ba6      	ldr	r3, [pc, #664]	; (80005cc <HAL_TIM_OC_DelayElapsedCallback+0x388>)
 8000334:	731a      	strb	r2, [r3, #12]
        erpa_buf[13] = (PA7 & 0xFF);          // SWP Monitored LSB
 8000336:	183b      	adds	r3, r7, r0
 8000338:	881b      	ldrh	r3, [r3, #0]
 800033a:	b2da      	uxtb	r2, r3
 800033c:	4ba3      	ldr	r3, [pc, #652]	; (80005cc <HAL_TIM_OC_DelayElapsedCallback+0x388>)
 800033e:	735a      	strb	r2, [r3, #13]

        erpa_seq++;
 8000340:	4ba3      	ldr	r3, [pc, #652]	; (80005d0 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 8000342:	881b      	ldrh	r3, [r3, #0]
 8000344:	3301      	adds	r3, #1
 8000346:	b29a      	uxth	r2, r3
 8000348:	4ba1      	ldr	r3, [pc, #644]	; (80005d0 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 800034a:	801a      	strh	r2, [r3, #0]
        if (ERPA_ON)
 800034c:	4b99      	ldr	r3, [pc, #612]	; (80005b4 <HAL_TIM_OC_DelayElapsedCallback+0x370>)
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	2b00      	cmp	r3, #0
 8000352:	d005      	beq.n	8000360 <HAL_TIM_OC_DelayElapsedCallback+0x11c>
        {
          HAL_UART_Transmit(&huart1, erpa_buf, sizeof(erpa_buf), 100);
 8000354:	499d      	ldr	r1, [pc, #628]	; (80005cc <HAL_TIM_OC_DelayElapsedCallback+0x388>)
 8000356:	48a0      	ldr	r0, [pc, #640]	; (80005d8 <HAL_TIM_OC_DelayElapsedCallback+0x394>)
 8000358:	2364      	movs	r3, #100	; 0x64
 800035a:	2210      	movs	r2, #16
 800035c:	f005 f968 	bl	8005630 <HAL_UART_Transmit>
        }
      }
      if (HK_ON)
 8000360:	4b9e      	ldr	r3, [pc, #632]	; (80005dc <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d100      	bne.n	800036a <HAL_TIM_OC_DelayElapsedCallback+0x126>
 8000368:	e2e1      	b.n	800092e <HAL_TIM_OC_DelayElapsedCallback+0x6ea>
      {
        if (hk_counter == HK_CADENCE)
 800036a:	4b9d      	ldr	r3, [pc, #628]	; (80005e0 <HAL_TIM_OC_DelayElapsedCallback+0x39c>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	2201      	movs	r2, #1
 8000370:	4293      	cmp	r3, r2
 8000372:	d000      	beq.n	8000376 <HAL_TIM_OC_DelayElapsedCallback+0x132>
 8000374:	e2a4      	b.n	80008c0 <HAL_TIM_OC_DelayElapsedCallback+0x67c>
          int16_t output1;
          int16_t output2;
          int16_t output3;
          int16_t output4;

          buf[0] = REG_TEMP;
 8000376:	2200      	movs	r2, #0
 8000378:	2508      	movs	r5, #8
 800037a:	197b      	adds	r3, r7, r5
 800037c:	701a      	strb	r2, [r3, #0]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_1, buf, 1,
 800037e:	2390      	movs	r3, #144	; 0x90
 8000380:	b299      	uxth	r1, r3
 8000382:	2627      	movs	r6, #39	; 0x27
 8000384:	19bc      	adds	r4, r7, r6
 8000386:	197a      	adds	r2, r7, r5
 8000388:	4896      	ldr	r0, [pc, #600]	; (80005e4 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 800038a:	23fa      	movs	r3, #250	; 0xfa
 800038c:	009b      	lsls	r3, r3, #2
 800038e:	9300      	str	r3, [sp, #0]
 8000390:	2301      	movs	r3, #1
 8000392:	f002 fe4f 	bl	8003034 <HAL_I2C_Master_Transmit>
 8000396:	0003      	movs	r3, r0
 8000398:	7023      	strb	r3, [r4, #0]
                                        1000);
          //			I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
          if (ret != HAL_OK)
 800039a:	19bb      	adds	r3, r7, r6
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d008      	beq.n	80003b4 <HAL_TIM_OC_DelayElapsedCallback+0x170>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 80003a2:	197b      	adds	r3, r7, r5
 80003a4:	4a90      	ldr	r2, [pc, #576]	; (80005e8 <HAL_TIM_OC_DelayElapsedCallback+0x3a4>)
 80003a6:	ca03      	ldmia	r2!, {r0, r1}
 80003a8:	c303      	stmia	r3!, {r0, r1}
 80003aa:	8811      	ldrh	r1, [r2, #0]
 80003ac:	8019      	strh	r1, [r3, #0]
 80003ae:	7892      	ldrb	r2, [r2, #2]
 80003b0:	709a      	strb	r2, [r3, #2]
 80003b2:	e02b      	b.n	800040c <HAL_TIM_OC_DelayElapsedCallback+0x1c8>
          }
          else
          {

            //				 Read 2 bytes from the temperature register
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_1, buf, 2,
 80003b4:	2390      	movs	r3, #144	; 0x90
 80003b6:	b299      	uxth	r1, r3
 80003b8:	2527      	movs	r5, #39	; 0x27
 80003ba:	197c      	adds	r4, r7, r5
 80003bc:	2608      	movs	r6, #8
 80003be:	19ba      	adds	r2, r7, r6
 80003c0:	4888      	ldr	r0, [pc, #544]	; (80005e4 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 80003c2:	23fa      	movs	r3, #250	; 0xfa
 80003c4:	009b      	lsls	r3, r3, #2
 80003c6:	9300      	str	r3, [sp, #0]
 80003c8:	2302      	movs	r3, #2
 80003ca:	f002 ff3b 	bl	8003244 <HAL_I2C_Master_Receive>
 80003ce:	0003      	movs	r3, r0
 80003d0:	7023      	strb	r3, [r4, #0]
                                         1000);
            if (ret != HAL_OK)
 80003d2:	197b      	adds	r3, r7, r5
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d008      	beq.n	80003ec <HAL_TIM_OC_DelayElapsedCallback+0x1a8>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 80003da:	19bb      	adds	r3, r7, r6
 80003dc:	4a83      	ldr	r2, [pc, #524]	; (80005ec <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 80003de:	ca03      	ldmia	r2!, {r0, r1}
 80003e0:	c303      	stmia	r3!, {r0, r1}
 80003e2:	8811      	ldrh	r1, [r2, #0]
 80003e4:	8019      	strh	r1, [r3, #0]
 80003e6:	7892      	ldrb	r2, [r2, #2]
 80003e8:	709a      	strb	r2, [r3, #2]
 80003ea:	e00f      	b.n	800040c <HAL_TIM_OC_DelayElapsedCallback+0x1c8>
            }
            else
            {

              output1 = (int16_t)(buf[0] << 8);
 80003ec:	2008      	movs	r0, #8
 80003ee:	183b      	adds	r3, r7, r0
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	021a      	lsls	r2, r3, #8
 80003f4:	2136      	movs	r1, #54	; 0x36
 80003f6:	187b      	adds	r3, r7, r1
 80003f8:	801a      	strh	r2, [r3, #0]
              output1 = (output1 | buf[1]) >> 3;
 80003fa:	187b      	adds	r3, r7, r1
 80003fc:	2200      	movs	r2, #0
 80003fe:	5e9b      	ldrsh	r3, [r3, r2]
 8000400:	183a      	adds	r2, r7, r0
 8000402:	7852      	ldrb	r2, [r2, #1]
 8000404:	4313      	orrs	r3, r2
 8000406:	10da      	asrs	r2, r3, #3
 8000408:	187b      	adds	r3, r7, r1
 800040a:	801a      	strh	r2, [r3, #0]
            }
          }

          // Tell ADT7410_2 that we want to read from the temperature register
          buf[0] = REG_TEMP;
 800040c:	2200      	movs	r2, #0
 800040e:	2508      	movs	r5, #8
 8000410:	197b      	adds	r3, r7, r5
 8000412:	701a      	strb	r2, [r3, #0]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_2, buf, 1,
 8000414:	2394      	movs	r3, #148	; 0x94
 8000416:	b299      	uxth	r1, r3
 8000418:	2627      	movs	r6, #39	; 0x27
 800041a:	19bc      	adds	r4, r7, r6
 800041c:	197a      	adds	r2, r7, r5
 800041e:	4871      	ldr	r0, [pc, #452]	; (80005e4 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 8000420:	23fa      	movs	r3, #250	; 0xfa
 8000422:	009b      	lsls	r3, r3, #2
 8000424:	9300      	str	r3, [sp, #0]
 8000426:	2301      	movs	r3, #1
 8000428:	f002 fe04 	bl	8003034 <HAL_I2C_Master_Transmit>
 800042c:	0003      	movs	r3, r0
 800042e:	7023      	strb	r3, [r4, #0]
                                        1000);
          //			I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
          if (ret != HAL_OK)
 8000430:	19bb      	adds	r3, r7, r6
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d008      	beq.n	800044a <HAL_TIM_OC_DelayElapsedCallback+0x206>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 8000438:	197b      	adds	r3, r7, r5
 800043a:	4a6b      	ldr	r2, [pc, #428]	; (80005e8 <HAL_TIM_OC_DelayElapsedCallback+0x3a4>)
 800043c:	ca03      	ldmia	r2!, {r0, r1}
 800043e:	c303      	stmia	r3!, {r0, r1}
 8000440:	8811      	ldrh	r1, [r2, #0]
 8000442:	8019      	strh	r1, [r3, #0]
 8000444:	7892      	ldrb	r2, [r2, #2]
 8000446:	709a      	strb	r2, [r3, #2]
 8000448:	e02b      	b.n	80004a2 <HAL_TIM_OC_DelayElapsedCallback+0x25e>
          }
          else
          {

            //				 Read 2 bytes from the temperature register
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_2, buf, 2,
 800044a:	2394      	movs	r3, #148	; 0x94
 800044c:	b299      	uxth	r1, r3
 800044e:	2527      	movs	r5, #39	; 0x27
 8000450:	197c      	adds	r4, r7, r5
 8000452:	2608      	movs	r6, #8
 8000454:	19ba      	adds	r2, r7, r6
 8000456:	4863      	ldr	r0, [pc, #396]	; (80005e4 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 8000458:	23fa      	movs	r3, #250	; 0xfa
 800045a:	009b      	lsls	r3, r3, #2
 800045c:	9300      	str	r3, [sp, #0]
 800045e:	2302      	movs	r3, #2
 8000460:	f002 fef0 	bl	8003244 <HAL_I2C_Master_Receive>
 8000464:	0003      	movs	r3, r0
 8000466:	7023      	strb	r3, [r4, #0]
                                         1000);
            if (ret != HAL_OK)
 8000468:	197b      	adds	r3, r7, r5
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	2b00      	cmp	r3, #0
 800046e:	d008      	beq.n	8000482 <HAL_TIM_OC_DelayElapsedCallback+0x23e>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 8000470:	19bb      	adds	r3, r7, r6
 8000472:	4a5e      	ldr	r2, [pc, #376]	; (80005ec <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 8000474:	ca03      	ldmia	r2!, {r0, r1}
 8000476:	c303      	stmia	r3!, {r0, r1}
 8000478:	8811      	ldrh	r1, [r2, #0]
 800047a:	8019      	strh	r1, [r3, #0]
 800047c:	7892      	ldrb	r2, [r2, #2]
 800047e:	709a      	strb	r2, [r3, #2]
 8000480:	e00f      	b.n	80004a2 <HAL_TIM_OC_DelayElapsedCallback+0x25e>
            }
            else
            {

              output2 = (int16_t)(buf[0] << 8);
 8000482:	2008      	movs	r0, #8
 8000484:	183b      	adds	r3, r7, r0
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	021a      	lsls	r2, r3, #8
 800048a:	2134      	movs	r1, #52	; 0x34
 800048c:	187b      	adds	r3, r7, r1
 800048e:	801a      	strh	r2, [r3, #0]
              output2 = (output2 | buf[1]) >> 3;
 8000490:	187b      	adds	r3, r7, r1
 8000492:	2200      	movs	r2, #0
 8000494:	5e9b      	ldrsh	r3, [r3, r2]
 8000496:	183a      	adds	r2, r7, r0
 8000498:	7852      	ldrb	r2, [r2, #1]
 800049a:	4313      	orrs	r3, r2
 800049c:	10da      	asrs	r2, r3, #3
 800049e:	187b      	adds	r3, r7, r1
 80004a0:	801a      	strh	r2, [r3, #0]
            }
          }
          // TEMP SENSOR 3
          buf[0] = REG_TEMP;
 80004a2:	2200      	movs	r2, #0
 80004a4:	2508      	movs	r5, #8
 80004a6:	197b      	adds	r3, r7, r5
 80004a8:	701a      	strb	r2, [r3, #0]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_3, buf, 1,
 80004aa:	2392      	movs	r3, #146	; 0x92
 80004ac:	b299      	uxth	r1, r3
 80004ae:	2627      	movs	r6, #39	; 0x27
 80004b0:	19bc      	adds	r4, r7, r6
 80004b2:	197a      	adds	r2, r7, r5
 80004b4:	484b      	ldr	r0, [pc, #300]	; (80005e4 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 80004b6:	23fa      	movs	r3, #250	; 0xfa
 80004b8:	009b      	lsls	r3, r3, #2
 80004ba:	9300      	str	r3, [sp, #0]
 80004bc:	2301      	movs	r3, #1
 80004be:	f002 fdb9 	bl	8003034 <HAL_I2C_Master_Transmit>
 80004c2:	0003      	movs	r3, r0
 80004c4:	7023      	strb	r3, [r4, #0]
                                        1000);
          //			I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
          if (ret != HAL_OK)
 80004c6:	19bb      	adds	r3, r7, r6
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d008      	beq.n	80004e0 <HAL_TIM_OC_DelayElapsedCallback+0x29c>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 80004ce:	197b      	adds	r3, r7, r5
 80004d0:	4a45      	ldr	r2, [pc, #276]	; (80005e8 <HAL_TIM_OC_DelayElapsedCallback+0x3a4>)
 80004d2:	ca03      	ldmia	r2!, {r0, r1}
 80004d4:	c303      	stmia	r3!, {r0, r1}
 80004d6:	8811      	ldrh	r1, [r2, #0]
 80004d8:	8019      	strh	r1, [r3, #0]
 80004da:	7892      	ldrb	r2, [r2, #2]
 80004dc:	709a      	strb	r2, [r3, #2]
 80004de:	e02b      	b.n	8000538 <HAL_TIM_OC_DelayElapsedCallback+0x2f4>
          }
          else
          {

            //				 Read 2 bytes from the temperature register
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_3, buf, 2,
 80004e0:	2392      	movs	r3, #146	; 0x92
 80004e2:	b299      	uxth	r1, r3
 80004e4:	2527      	movs	r5, #39	; 0x27
 80004e6:	197c      	adds	r4, r7, r5
 80004e8:	2608      	movs	r6, #8
 80004ea:	19ba      	adds	r2, r7, r6
 80004ec:	483d      	ldr	r0, [pc, #244]	; (80005e4 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 80004ee:	23fa      	movs	r3, #250	; 0xfa
 80004f0:	009b      	lsls	r3, r3, #2
 80004f2:	9300      	str	r3, [sp, #0]
 80004f4:	2302      	movs	r3, #2
 80004f6:	f002 fea5 	bl	8003244 <HAL_I2C_Master_Receive>
 80004fa:	0003      	movs	r3, r0
 80004fc:	7023      	strb	r3, [r4, #0]
                                         1000);
            if (ret != HAL_OK)
 80004fe:	197b      	adds	r3, r7, r5
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d008      	beq.n	8000518 <HAL_TIM_OC_DelayElapsedCallback+0x2d4>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 8000506:	19bb      	adds	r3, r7, r6
 8000508:	4a38      	ldr	r2, [pc, #224]	; (80005ec <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 800050a:	ca03      	ldmia	r2!, {r0, r1}
 800050c:	c303      	stmia	r3!, {r0, r1}
 800050e:	8811      	ldrh	r1, [r2, #0]
 8000510:	8019      	strh	r1, [r3, #0]
 8000512:	7892      	ldrb	r2, [r2, #2]
 8000514:	709a      	strb	r2, [r3, #2]
 8000516:	e00f      	b.n	8000538 <HAL_TIM_OC_DelayElapsedCallback+0x2f4>
            }
            else
            {

              output3 = (int16_t)(buf[0] << 8);
 8000518:	2008      	movs	r0, #8
 800051a:	183b      	adds	r3, r7, r0
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	021a      	lsls	r2, r3, #8
 8000520:	2132      	movs	r1, #50	; 0x32
 8000522:	187b      	adds	r3, r7, r1
 8000524:	801a      	strh	r2, [r3, #0]
              output3 = (output3 | buf[1]) >> 3;
 8000526:	187b      	adds	r3, r7, r1
 8000528:	2200      	movs	r2, #0
 800052a:	5e9b      	ldrsh	r3, [r3, r2]
 800052c:	183a      	adds	r2, r7, r0
 800052e:	7852      	ldrb	r2, [r2, #1]
 8000530:	4313      	orrs	r3, r2
 8000532:	10da      	asrs	r2, r3, #3
 8000534:	187b      	adds	r3, r7, r1
 8000536:	801a      	strh	r2, [r3, #0]
            }
          }
          // TEMP SENSOR 4
          buf[0] = REG_TEMP;
 8000538:	2200      	movs	r2, #0
 800053a:	2508      	movs	r5, #8
 800053c:	197b      	adds	r3, r7, r5
 800053e:	701a      	strb	r2, [r3, #0]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_4, buf, 1,
 8000540:	2396      	movs	r3, #150	; 0x96
 8000542:	b299      	uxth	r1, r3
 8000544:	2627      	movs	r6, #39	; 0x27
 8000546:	19bc      	adds	r4, r7, r6
 8000548:	197a      	adds	r2, r7, r5
 800054a:	4826      	ldr	r0, [pc, #152]	; (80005e4 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 800054c:	23fa      	movs	r3, #250	; 0xfa
 800054e:	009b      	lsls	r3, r3, #2
 8000550:	9300      	str	r3, [sp, #0]
 8000552:	2301      	movs	r3, #1
 8000554:	f002 fd6e 	bl	8003034 <HAL_I2C_Master_Transmit>
 8000558:	0003      	movs	r3, r0
 800055a:	7023      	strb	r3, [r4, #0]
                                        1000);
          //			I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
          if (ret != HAL_OK)
 800055c:	19bb      	adds	r3, r7, r6
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d008      	beq.n	8000576 <HAL_TIM_OC_DelayElapsedCallback+0x332>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 8000564:	197b      	adds	r3, r7, r5
 8000566:	4a20      	ldr	r2, [pc, #128]	; (80005e8 <HAL_TIM_OC_DelayElapsedCallback+0x3a4>)
 8000568:	ca03      	ldmia	r2!, {r0, r1}
 800056a:	c303      	stmia	r3!, {r0, r1}
 800056c:	8811      	ldrh	r1, [r2, #0]
 800056e:	8019      	strh	r1, [r3, #0]
 8000570:	7892      	ldrb	r2, [r2, #2]
 8000572:	709a      	strb	r2, [r3, #2]
 8000574:	e04c      	b.n	8000610 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>
          }
          else
          {

            //				 Read 2 bytes from the temperature register
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_4, buf, 2,
 8000576:	2396      	movs	r3, #150	; 0x96
 8000578:	b299      	uxth	r1, r3
 800057a:	2527      	movs	r5, #39	; 0x27
 800057c:	197c      	adds	r4, r7, r5
 800057e:	2608      	movs	r6, #8
 8000580:	19ba      	adds	r2, r7, r6
 8000582:	4818      	ldr	r0, [pc, #96]	; (80005e4 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 8000584:	23fa      	movs	r3, #250	; 0xfa
 8000586:	009b      	lsls	r3, r3, #2
 8000588:	9300      	str	r3, [sp, #0]
 800058a:	2302      	movs	r3, #2
 800058c:	f002 fe5a 	bl	8003244 <HAL_I2C_Master_Receive>
 8000590:	0003      	movs	r3, r0
 8000592:	7023      	strb	r3, [r4, #0]
                                         1000);
            if (ret != HAL_OK)
 8000594:	197b      	adds	r3, r7, r5
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d029      	beq.n	80005f0 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 800059c:	19bb      	adds	r3, r7, r6
 800059e:	4a13      	ldr	r2, [pc, #76]	; (80005ec <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 80005a0:	ca03      	ldmia	r2!, {r0, r1}
 80005a2:	c303      	stmia	r3!, {r0, r1}
 80005a4:	8811      	ldrh	r1, [r2, #0]
 80005a6:	8019      	strh	r1, [r3, #0]
 80005a8:	7892      	ldrb	r2, [r2, #2]
 80005aa:	709a      	strb	r2, [r3, #2]
 80005ac:	e030      	b.n	8000610 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	20000238 	.word	0x20000238
 80005b4:	20000019 	.word	0x20000019
 80005b8:	20000392 	.word	0x20000392
 80005bc:	40007400 	.word	0x40007400
 80005c0:	20000000 	.word	0x20000000
 80005c4:	20000370 	.word	0x20000370
 80005c8:	20000044 	.word	0x20000044
 80005cc:	2000039c 	.word	0x2000039c
 80005d0:	200003ac 	.word	0x200003ac
 80005d4:	20000398 	.word	0x20000398
 80005d8:	20000280 	.word	0x20000280
 80005dc:	2000001a 	.word	0x2000001a
 80005e0:	200003dc 	.word	0x200003dc
 80005e4:	200000dc 	.word	0x200000dc
 80005e8:	08006dac 	.word	0x08006dac
 80005ec:	08006db8 	.word	0x08006db8
            }
            else
            {

              output4 = (int16_t)(buf[0] << 8);
 80005f0:	2008      	movs	r0, #8
 80005f2:	183b      	adds	r3, r7, r0
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	021a      	lsls	r2, r3, #8
 80005f8:	2130      	movs	r1, #48	; 0x30
 80005fa:	187b      	adds	r3, r7, r1
 80005fc:	801a      	strh	r2, [r3, #0]
              output4 = (output4 | buf[1]) >> 3;
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	2200      	movs	r2, #0
 8000602:	5e9b      	ldrsh	r3, [r3, r2]
 8000604:	183a      	adds	r2, r7, r0
 8000606:	7852      	ldrb	r2, [r2, #1]
 8000608:	4313      	orrs	r3, r2
 800060a:	10da      	asrs	r2, r3, #3
 800060c:	187b      	adds	r3, r7, r1
 800060e:	801a      	strh	r2, [r3, #0]
            }
          }

          HAL_ADC_Start_DMA(&hadc, (uint32_t *)adcResultsDMA,
 8000610:	2311      	movs	r3, #17
 8000612:	001a      	movs	r2, r3
 8000614:	49c8      	ldr	r1, [pc, #800]	; (8000938 <HAL_TIM_OC_DelayElapsedCallback+0x6f4>)
 8000616:	4bc9      	ldr	r3, [pc, #804]	; (800093c <HAL_TIM_OC_DelayElapsedCallback+0x6f8>)
 8000618:	0018      	movs	r0, r3
 800061a:	f001 fca9 	bl	8001f70 <HAL_ADC_Start_DMA>
                            adcChannelCount);

          uint16_t PA1 = adcResultsDMA[1];       // ADC_IN1, BUS_Imon: instrument bus current monitor
 800061e:	2124      	movs	r1, #36	; 0x24
 8000620:	187b      	adds	r3, r7, r1
 8000622:	4ac5      	ldr	r2, [pc, #788]	; (8000938 <HAL_TIM_OC_DelayElapsedCallback+0x6f4>)
 8000624:	8852      	ldrh	r2, [r2, #2]
 8000626:	801a      	strh	r2, [r3, #0]
          uint16_t PA2 = adcResultsDMA[2];       // ADC_IN2, BUS_Vmon: instrument bus voltage monitor
 8000628:	2022      	movs	r0, #34	; 0x22
 800062a:	183b      	adds	r3, r7, r0
 800062c:	4ac2      	ldr	r2, [pc, #776]	; (8000938 <HAL_TIM_OC_DelayElapsedCallback+0x6f4>)
 800062e:	8892      	ldrh	r2, [r2, #4]
 8000630:	801a      	strh	r2, [r3, #0]
          uint16_t PA3 = adcResultsDMA[3];       // ADC_IN3, 3v3_mon: Accurate 5V for ADC monitor
 8000632:	2420      	movs	r4, #32
 8000634:	193b      	adds	r3, r7, r4
 8000636:	4ac0      	ldr	r2, [pc, #768]	; (8000938 <HAL_TIM_OC_DelayElapsedCallback+0x6f4>)
 8000638:	88d2      	ldrh	r2, [r2, #6]
 800063a:	801a      	strh	r2, [r3, #0]
          uint16_t PA5 = adcResultsDMA[4];       // ADC_IN5, n150v_mon: n150 voltage monitor
 800063c:	251e      	movs	r5, #30
 800063e:	197b      	adds	r3, r7, r5
 8000640:	4abd      	ldr	r2, [pc, #756]	; (8000938 <HAL_TIM_OC_DelayElapsedCallback+0x6f4>)
 8000642:	8912      	ldrh	r2, [r2, #8]
 8000644:	801a      	strh	r2, [r3, #0]
          uint16_t PA6 = adcResultsDMA[5];       // ADC_IN6, n800v_mon: n800 voltage monitor
 8000646:	261c      	movs	r6, #28
 8000648:	19bb      	adds	r3, r7, r6
 800064a:	4abb      	ldr	r2, [pc, #748]	; (8000938 <HAL_TIM_OC_DelayElapsedCallback+0x6f4>)
 800064c:	8952      	ldrh	r2, [r2, #10]
 800064e:	801a      	strh	r2, [r3, #0]
          uint16_t PC0 = adcResultsDMA[9];       // ADC_IN10, 2v5_mon: 2.5v voltage monitor
 8000650:	231a      	movs	r3, #26
 8000652:	18fb      	adds	r3, r7, r3
 8000654:	4ab8      	ldr	r2, [pc, #736]	; (8000938 <HAL_TIM_OC_DelayElapsedCallback+0x6f4>)
 8000656:	8a52      	ldrh	r2, [r2, #18]
 8000658:	801a      	strh	r2, [r3, #0]
          uint16_t PC1 = adcResultsDMA[10];      // ADC_IN11, n5v_mon: n5v voltage monitor
 800065a:	2218      	movs	r2, #24
 800065c:	18bb      	adds	r3, r7, r2
 800065e:	4ab6      	ldr	r2, [pc, #728]	; (8000938 <HAL_TIM_OC_DelayElapsedCallback+0x6f4>)
 8000660:	8a92      	ldrh	r2, [r2, #20]
 8000662:	801a      	strh	r2, [r3, #0]
          uint16_t PC2 = adcResultsDMA[11];      // ADC_IN12, 5v_mon: 5v voltage monitor
 8000664:	2316      	movs	r3, #22
 8000666:	18fb      	adds	r3, r7, r3
 8000668:	4ab3      	ldr	r2, [pc, #716]	; (8000938 <HAL_TIM_OC_DelayElapsedCallback+0x6f4>)
 800066a:	8ad2      	ldrh	r2, [r2, #22]
 800066c:	801a      	strh	r2, [r3, #0]
          uint16_t PC3 = adcResultsDMA[12];      // ADC_IN13, n3v3_mon: n3v3 voltage monitor
 800066e:	2214      	movs	r2, #20
 8000670:	18bb      	adds	r3, r7, r2
 8000672:	4ab1      	ldr	r2, [pc, #708]	; (8000938 <HAL_TIM_OC_DelayElapsedCallback+0x6f4>)
 8000674:	8b12      	ldrh	r2, [r2, #24]
 8000676:	801a      	strh	r2, [r3, #0]
          uint16_t PC4 = adcResultsDMA[13];      // ADC_IN14, 5vref_mon: 5v reference voltage monitor
 8000678:	2312      	movs	r3, #18
 800067a:	18fb      	adds	r3, r7, r3
 800067c:	4aae      	ldr	r2, [pc, #696]	; (8000938 <HAL_TIM_OC_DelayElapsedCallback+0x6f4>)
 800067e:	8b52      	ldrh	r2, [r2, #26]
 8000680:	801a      	strh	r2, [r3, #0]
          uint16_t PC5 = adcResultsDMA[14];      // ADC_IN15, 15v_mon: 15v voltage monitor
 8000682:	2210      	movs	r2, #16
 8000684:	18bb      	adds	r3, r7, r2
 8000686:	4aac      	ldr	r2, [pc, #688]	; (8000938 <HAL_TIM_OC_DelayElapsedCallback+0x6f4>)
 8000688:	8b92      	ldrh	r2, [r2, #28]
 800068a:	801a      	strh	r2, [r3, #0]
          uint16_t MCU_TEMP = adcResultsDMA[15]; //(internally connected) ADC_IN16, VSENSE
 800068c:	230e      	movs	r3, #14
 800068e:	18fb      	adds	r3, r7, r3
 8000690:	4aa9      	ldr	r2, [pc, #676]	; (8000938 <HAL_TIM_OC_DelayElapsedCallback+0x6f4>)
 8000692:	8bd2      	ldrh	r2, [r2, #30]
 8000694:	801a      	strh	r2, [r3, #0]
          uint16_t MCU_VREF = adcResultsDMA[16]; //(internally connected) ADC_IN17, VREFINT
 8000696:	220c      	movs	r2, #12
 8000698:	18bb      	adds	r3, r7, r2
 800069a:	4aa7      	ldr	r2, [pc, #668]	; (8000938 <HAL_TIM_OC_DelayElapsedCallback+0x6f4>)
 800069c:	8c12      	ldrh	r2, [r2, #32]
 800069e:	801a      	strh	r2, [r3, #0]

          temps_buf[0] = temps_sync;
 80006a0:	22dd      	movs	r2, #221	; 0xdd
 80006a2:	4ba7      	ldr	r3, [pc, #668]	; (8000940 <HAL_TIM_OC_DelayElapsedCallback+0x6fc>)
 80006a4:	701a      	strb	r2, [r3, #0]
          temps_buf[1] = temps_sync;
 80006a6:	22dd      	movs	r2, #221	; 0xdd
 80006a8:	4ba5      	ldr	r3, [pc, #660]	; (8000940 <HAL_TIM_OC_DelayElapsedCallback+0x6fc>)
 80006aa:	705a      	strb	r2, [r3, #1]
          temps_buf[2] = ((MCU_VREF & 0xFF00) >> 8);
 80006ac:	220c      	movs	r2, #12
 80006ae:	18bb      	adds	r3, r7, r2
 80006b0:	881b      	ldrh	r3, [r3, #0]
 80006b2:	0a1b      	lsrs	r3, r3, #8
 80006b4:	b29b      	uxth	r3, r3
 80006b6:	b2da      	uxtb	r2, r3
 80006b8:	4ba1      	ldr	r3, [pc, #644]	; (8000940 <HAL_TIM_OC_DelayElapsedCallback+0x6fc>)
 80006ba:	709a      	strb	r2, [r3, #2]
          temps_buf[3] = (MCU_VREF & 0xFF);
 80006bc:	220c      	movs	r2, #12
 80006be:	18bb      	adds	r3, r7, r2
 80006c0:	881b      	ldrh	r3, [r3, #0]
 80006c2:	b2da      	uxtb	r2, r3
 80006c4:	4b9e      	ldr	r3, [pc, #632]	; (8000940 <HAL_TIM_OC_DelayElapsedCallback+0x6fc>)
 80006c6:	70da      	strb	r2, [r3, #3]
          temps_buf[4] = ((output1 & 0xFF00) >> 8);
 80006c8:	2236      	movs	r2, #54	; 0x36
 80006ca:	18bb      	adds	r3, r7, r2
 80006cc:	2200      	movs	r2, #0
 80006ce:	5e9b      	ldrsh	r3, [r3, r2]
 80006d0:	121b      	asrs	r3, r3, #8
 80006d2:	b2da      	uxtb	r2, r3
 80006d4:	4b9a      	ldr	r3, [pc, #616]	; (8000940 <HAL_TIM_OC_DelayElapsedCallback+0x6fc>)
 80006d6:	711a      	strb	r2, [r3, #4]
          temps_buf[5] = (output1 & 0xFF);
 80006d8:	2236      	movs	r2, #54	; 0x36
 80006da:	18bb      	adds	r3, r7, r2
 80006dc:	881b      	ldrh	r3, [r3, #0]
 80006de:	b2da      	uxtb	r2, r3
 80006e0:	4b97      	ldr	r3, [pc, #604]	; (8000940 <HAL_TIM_OC_DelayElapsedCallback+0x6fc>)
 80006e2:	715a      	strb	r2, [r3, #5]
          temps_buf[6] = ((output2 & 0xFF00) >> 8);
 80006e4:	2234      	movs	r2, #52	; 0x34
 80006e6:	18bb      	adds	r3, r7, r2
 80006e8:	2200      	movs	r2, #0
 80006ea:	5e9b      	ldrsh	r3, [r3, r2]
 80006ec:	121b      	asrs	r3, r3, #8
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	4b93      	ldr	r3, [pc, #588]	; (8000940 <HAL_TIM_OC_DelayElapsedCallback+0x6fc>)
 80006f2:	719a      	strb	r2, [r3, #6]
          temps_buf[7] = (output2 & 0xFF);
 80006f4:	2234      	movs	r2, #52	; 0x34
 80006f6:	18bb      	adds	r3, r7, r2
 80006f8:	881b      	ldrh	r3, [r3, #0]
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	4b90      	ldr	r3, [pc, #576]	; (8000940 <HAL_TIM_OC_DelayElapsedCallback+0x6fc>)
 80006fe:	71da      	strb	r2, [r3, #7]
          temps_buf[8] = ((output3 & 0xFF00) >> 8);
 8000700:	2232      	movs	r2, #50	; 0x32
 8000702:	18bb      	adds	r3, r7, r2
 8000704:	2200      	movs	r2, #0
 8000706:	5e9b      	ldrsh	r3, [r3, r2]
 8000708:	121b      	asrs	r3, r3, #8
 800070a:	b2da      	uxtb	r2, r3
 800070c:	4b8c      	ldr	r3, [pc, #560]	; (8000940 <HAL_TIM_OC_DelayElapsedCallback+0x6fc>)
 800070e:	721a      	strb	r2, [r3, #8]
          temps_buf[9] = (output3 & 0xFF);
 8000710:	2232      	movs	r2, #50	; 0x32
 8000712:	18bb      	adds	r3, r7, r2
 8000714:	881b      	ldrh	r3, [r3, #0]
 8000716:	b2da      	uxtb	r2, r3
 8000718:	4b89      	ldr	r3, [pc, #548]	; (8000940 <HAL_TIM_OC_DelayElapsedCallback+0x6fc>)
 800071a:	725a      	strb	r2, [r3, #9]
          temps_buf[10] = ((output4 & 0xFF00) >> 8);
 800071c:	2230      	movs	r2, #48	; 0x30
 800071e:	18bb      	adds	r3, r7, r2
 8000720:	2200      	movs	r2, #0
 8000722:	5e9b      	ldrsh	r3, [r3, r2]
 8000724:	121b      	asrs	r3, r3, #8
 8000726:	b2da      	uxtb	r2, r3
 8000728:	4b85      	ldr	r3, [pc, #532]	; (8000940 <HAL_TIM_OC_DelayElapsedCallback+0x6fc>)
 800072a:	729a      	strb	r2, [r3, #10]
          temps_buf[11] = (output4 & 0xFF);
 800072c:	2230      	movs	r2, #48	; 0x30
 800072e:	18bb      	adds	r3, r7, r2
 8000730:	881b      	ldrh	r3, [r3, #0]
 8000732:	b2da      	uxtb	r2, r3
 8000734:	4b82      	ldr	r3, [pc, #520]	; (8000940 <HAL_TIM_OC_DelayElapsedCallback+0x6fc>)
 8000736:	72da      	strb	r2, [r3, #11]

          hk_buf[0] = hk_sync;                     // HK SYNC 0xCC MSB					0 SYNC
 8000738:	22cc      	movs	r2, #204	; 0xcc
 800073a:	4b82      	ldr	r3, [pc, #520]	; (8000944 <HAL_TIM_OC_DelayElapsedCallback+0x700>)
 800073c:	701a      	strb	r2, [r3, #0]
          hk_buf[1] = hk_sync;                     // HK SYNC 0xCC LSB
 800073e:	22cc      	movs	r2, #204	; 0xcc
 8000740:	4b80      	ldr	r3, [pc, #512]	; (8000944 <HAL_TIM_OC_DelayElapsedCallback+0x700>)
 8000742:	705a      	strb	r2, [r3, #1]
          hk_buf[2] = ((hk_seq & 0xFF00) >> 8);    // HK SEQ # MSB		1 SEQUENCE
 8000744:	4b80      	ldr	r3, [pc, #512]	; (8000948 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 8000746:	881b      	ldrh	r3, [r3, #0]
 8000748:	0a1b      	lsrs	r3, r3, #8
 800074a:	b29b      	uxth	r3, r3
 800074c:	b2da      	uxtb	r2, r3
 800074e:	4b7d      	ldr	r3, [pc, #500]	; (8000944 <HAL_TIM_OC_DelayElapsedCallback+0x700>)
 8000750:	709a      	strb	r2, [r3, #2]
          hk_buf[3] = (hk_seq & 0xFF);             // HK SEQ # LSB
 8000752:	4b7d      	ldr	r3, [pc, #500]	; (8000948 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 8000754:	881b      	ldrh	r3, [r3, #0]
 8000756:	b2da      	uxtb	r2, r3
 8000758:	4b7a      	ldr	r3, [pc, #488]	; (8000944 <HAL_TIM_OC_DelayElapsedCallback+0x700>)
 800075a:	70da      	strb	r2, [r3, #3]
          hk_buf[4] = ((PA1 & 0xFF00) >> 8);       // BUS_Vmon MSB			2 BUS_VMON PA1
 800075c:	187b      	adds	r3, r7, r1
 800075e:	881b      	ldrh	r3, [r3, #0]
 8000760:	0a1b      	lsrs	r3, r3, #8
 8000762:	b29b      	uxth	r3, r3
 8000764:	b2da      	uxtb	r2, r3
 8000766:	4b77      	ldr	r3, [pc, #476]	; (8000944 <HAL_TIM_OC_DelayElapsedCallback+0x700>)
 8000768:	711a      	strb	r2, [r3, #4]
          hk_buf[5] = (PA1 & 0xFF);                // BUS_Vmon LSB
 800076a:	187b      	adds	r3, r7, r1
 800076c:	881b      	ldrh	r3, [r3, #0]
 800076e:	b2da      	uxtb	r2, r3
 8000770:	4b74      	ldr	r3, [pc, #464]	; (8000944 <HAL_TIM_OC_DelayElapsedCallback+0x700>)
 8000772:	715a      	strb	r2, [r3, #5]
          hk_buf[6] = ((PA2 & 0xFF00) >> 8);       // BUS_Imon MSB			3 BUS_IMON PA2
 8000774:	183b      	adds	r3, r7, r0
 8000776:	881b      	ldrh	r3, [r3, #0]
 8000778:	0a1b      	lsrs	r3, r3, #8
 800077a:	b29b      	uxth	r3, r3
 800077c:	b2da      	uxtb	r2, r3
 800077e:	4b71      	ldr	r3, [pc, #452]	; (8000944 <HAL_TIM_OC_DelayElapsedCallback+0x700>)
 8000780:	719a      	strb	r2, [r3, #6]
          hk_buf[7] = (PA2 & 0xFF);                // BUS_Imon LSB
 8000782:	183b      	adds	r3, r7, r0
 8000784:	881b      	ldrh	r3, [r3, #0]
 8000786:	b2da      	uxtb	r2, r3
 8000788:	4b6e      	ldr	r3, [pc, #440]	; (8000944 <HAL_TIM_OC_DelayElapsedCallback+0x700>)
 800078a:	71da      	strb	r2, [r3, #7]
          hk_buf[8] = ((PA3 & 0xFF00) >> 8);       // 3v3_mon MSB			4 3v3_MON PA3
 800078c:	193b      	adds	r3, r7, r4
 800078e:	881b      	ldrh	r3, [r3, #0]
 8000790:	0a1b      	lsrs	r3, r3, #8
 8000792:	b29b      	uxth	r3, r3
 8000794:	b2da      	uxtb	r2, r3
 8000796:	4b6b      	ldr	r3, [pc, #428]	; (8000944 <HAL_TIM_OC_DelayElapsedCallback+0x700>)
 8000798:	721a      	strb	r2, [r3, #8]
          hk_buf[9] = (PA3 & 0xFF);                // 3v3_mon LSB
 800079a:	193b      	adds	r3, r7, r4
 800079c:	881b      	ldrh	r3, [r3, #0]
 800079e:	b2da      	uxtb	r2, r3
 80007a0:	4b68      	ldr	r3, [pc, #416]	; (8000944 <HAL_TIM_OC_DelayElapsedCallback+0x700>)
 80007a2:	725a      	strb	r2, [r3, #9]
          hk_buf[10] = ((PA5 & 0xFF00) >> 8);      // n150v_mon MSB		5 N150V_MON PA5
 80007a4:	197b      	adds	r3, r7, r5
 80007a6:	881b      	ldrh	r3, [r3, #0]
 80007a8:	0a1b      	lsrs	r3, r3, #8
 80007aa:	b29b      	uxth	r3, r3
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	4b65      	ldr	r3, [pc, #404]	; (8000944 <HAL_TIM_OC_DelayElapsedCallback+0x700>)
 80007b0:	729a      	strb	r2, [r3, #10]
          hk_buf[11] = (PA5 & 0xFF);               // n150v_mon LSB
 80007b2:	197b      	adds	r3, r7, r5
 80007b4:	881b      	ldrh	r3, [r3, #0]
 80007b6:	b2da      	uxtb	r2, r3
 80007b8:	4b62      	ldr	r3, [pc, #392]	; (8000944 <HAL_TIM_OC_DelayElapsedCallback+0x700>)
 80007ba:	72da      	strb	r2, [r3, #11]
          hk_buf[12] = ((PA6 & 0xFF00) >> 8);      // n800v_mon MSB		6 N800V_MON PA6
 80007bc:	19bb      	adds	r3, r7, r6
 80007be:	881b      	ldrh	r3, [r3, #0]
 80007c0:	0a1b      	lsrs	r3, r3, #8
 80007c2:	b29b      	uxth	r3, r3
 80007c4:	b2da      	uxtb	r2, r3
 80007c6:	4b5f      	ldr	r3, [pc, #380]	; (8000944 <HAL_TIM_OC_DelayElapsedCallback+0x700>)
 80007c8:	731a      	strb	r2, [r3, #12]
          hk_buf[13] = (PA6 & 0xFF);               // n800v_mon LSB
 80007ca:	19bb      	adds	r3, r7, r6
 80007cc:	881b      	ldrh	r3, [r3, #0]
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	4b5c      	ldr	r3, [pc, #368]	; (8000944 <HAL_TIM_OC_DelayElapsedCallback+0x700>)
 80007d2:	735a      	strb	r2, [r3, #13]
          hk_buf[14] = ((PC0 & 0xFF00) >> 8);      // 2v5_mon MSB			7 2V5_MON PC0
 80007d4:	211a      	movs	r1, #26
 80007d6:	187b      	adds	r3, r7, r1
 80007d8:	881b      	ldrh	r3, [r3, #0]
 80007da:	0a1b      	lsrs	r3, r3, #8
 80007dc:	b29b      	uxth	r3, r3
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	4b58      	ldr	r3, [pc, #352]	; (8000944 <HAL_TIM_OC_DelayElapsedCallback+0x700>)
 80007e2:	739a      	strb	r2, [r3, #14]
          hk_buf[15] = (PC0 & 0xFF);               // 2v5_mon LSB
 80007e4:	187b      	adds	r3, r7, r1
 80007e6:	881b      	ldrh	r3, [r3, #0]
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	4b56      	ldr	r3, [pc, #344]	; (8000944 <HAL_TIM_OC_DelayElapsedCallback+0x700>)
 80007ec:	73da      	strb	r2, [r3, #15]
          hk_buf[16] = ((PC1 & 0xFF00) >> 8);      // n5v_mon MSB			8 N5V_MON PC1
 80007ee:	2118      	movs	r1, #24
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	881b      	ldrh	r3, [r3, #0]
 80007f4:	0a1b      	lsrs	r3, r3, #8
 80007f6:	b29b      	uxth	r3, r3
 80007f8:	b2da      	uxtb	r2, r3
 80007fa:	4b52      	ldr	r3, [pc, #328]	; (8000944 <HAL_TIM_OC_DelayElapsedCallback+0x700>)
 80007fc:	741a      	strb	r2, [r3, #16]
          hk_buf[17] = (PC1 & 0xFF);               // n5v_mon LSB
 80007fe:	187b      	adds	r3, r7, r1
 8000800:	881b      	ldrh	r3, [r3, #0]
 8000802:	b2da      	uxtb	r2, r3
 8000804:	4b4f      	ldr	r3, [pc, #316]	; (8000944 <HAL_TIM_OC_DelayElapsedCallback+0x700>)
 8000806:	745a      	strb	r2, [r3, #17]
          hk_buf[18] = ((PC2 & 0xFF00) >> 8);      // 5v_mon MSB			9 5V_MON PC2
 8000808:	2116      	movs	r1, #22
 800080a:	187b      	adds	r3, r7, r1
 800080c:	881b      	ldrh	r3, [r3, #0]
 800080e:	0a1b      	lsrs	r3, r3, #8
 8000810:	b29b      	uxth	r3, r3
 8000812:	b2da      	uxtb	r2, r3
 8000814:	4b4b      	ldr	r3, [pc, #300]	; (8000944 <HAL_TIM_OC_DelayElapsedCallback+0x700>)
 8000816:	749a      	strb	r2, [r3, #18]
          hk_buf[19] = (PC2 & 0xFF);               // 5v_mon LSB
 8000818:	187b      	adds	r3, r7, r1
 800081a:	881b      	ldrh	r3, [r3, #0]
 800081c:	b2da      	uxtb	r2, r3
 800081e:	4b49      	ldr	r3, [pc, #292]	; (8000944 <HAL_TIM_OC_DelayElapsedCallback+0x700>)
 8000820:	74da      	strb	r2, [r3, #19]
          hk_buf[20] = ((PC3 & 0xFF00) >> 8);      // n3v3_mon MSB			10 N3V3_MON PC3
 8000822:	2114      	movs	r1, #20
 8000824:	187b      	adds	r3, r7, r1
 8000826:	881b      	ldrh	r3, [r3, #0]
 8000828:	0a1b      	lsrs	r3, r3, #8
 800082a:	b29b      	uxth	r3, r3
 800082c:	b2da      	uxtb	r2, r3
 800082e:	4b45      	ldr	r3, [pc, #276]	; (8000944 <HAL_TIM_OC_DelayElapsedCallback+0x700>)
 8000830:	751a      	strb	r2, [r3, #20]
          hk_buf[21] = (PC3 & 0xFF);               // n3v3_mon LSB
 8000832:	187b      	adds	r3, r7, r1
 8000834:	881b      	ldrh	r3, [r3, #0]
 8000836:	b2da      	uxtb	r2, r3
 8000838:	4b42      	ldr	r3, [pc, #264]	; (8000944 <HAL_TIM_OC_DelayElapsedCallback+0x700>)
 800083a:	755a      	strb	r2, [r3, #21]
          hk_buf[22] = ((PC4 & 0xFF00) >> 8);      // 5vref_mon MSB		11 5VREF_MON PC4
 800083c:	2112      	movs	r1, #18
 800083e:	187b      	adds	r3, r7, r1
 8000840:	881b      	ldrh	r3, [r3, #0]
 8000842:	0a1b      	lsrs	r3, r3, #8
 8000844:	b29b      	uxth	r3, r3
 8000846:	b2da      	uxtb	r2, r3
 8000848:	4b3e      	ldr	r3, [pc, #248]	; (8000944 <HAL_TIM_OC_DelayElapsedCallback+0x700>)
 800084a:	759a      	strb	r2, [r3, #22]
          hk_buf[23] = (PC4 & 0xFF);               // 5vref_mon LSB
 800084c:	187b      	adds	r3, r7, r1
 800084e:	881b      	ldrh	r3, [r3, #0]
 8000850:	b2da      	uxtb	r2, r3
 8000852:	4b3c      	ldr	r3, [pc, #240]	; (8000944 <HAL_TIM_OC_DelayElapsedCallback+0x700>)
 8000854:	75da      	strb	r2, [r3, #23]
          hk_buf[24] = ((PC5 & 0xFF00) >> 8);      // 15v_mon MSB			12 15V_MON PC5
 8000856:	2110      	movs	r1, #16
 8000858:	187b      	adds	r3, r7, r1
 800085a:	881b      	ldrh	r3, [r3, #0]
 800085c:	0a1b      	lsrs	r3, r3, #8
 800085e:	b29b      	uxth	r3, r3
 8000860:	b2da      	uxtb	r2, r3
 8000862:	4b38      	ldr	r3, [pc, #224]	; (8000944 <HAL_TIM_OC_DelayElapsedCallback+0x700>)
 8000864:	761a      	strb	r2, [r3, #24]
          hk_buf[25] = (PC5 & 0xFF);               // 15v_mon LSB
 8000866:	187b      	adds	r3, r7, r1
 8000868:	881b      	ldrh	r3, [r3, #0]
 800086a:	b2da      	uxtb	r2, r3
 800086c:	4b35      	ldr	r3, [pc, #212]	; (8000944 <HAL_TIM_OC_DelayElapsedCallback+0x700>)
 800086e:	765a      	strb	r2, [r3, #25]
          hk_buf[26] = ((MCU_TEMP & 0xFF00) >> 8); // VSENSE MSB		13 VSENSE
 8000870:	210e      	movs	r1, #14
 8000872:	187b      	adds	r3, r7, r1
 8000874:	881b      	ldrh	r3, [r3, #0]
 8000876:	0a1b      	lsrs	r3, r3, #8
 8000878:	b29b      	uxth	r3, r3
 800087a:	b2da      	uxtb	r2, r3
 800087c:	4b31      	ldr	r3, [pc, #196]	; (8000944 <HAL_TIM_OC_DelayElapsedCallback+0x700>)
 800087e:	769a      	strb	r2, [r3, #26]
          hk_buf[27] = (MCU_TEMP & 0xFF);          // VSENSE LSB
 8000880:	187b      	adds	r3, r7, r1
 8000882:	881b      	ldrh	r3, [r3, #0]
 8000884:	b2da      	uxtb	r2, r3
 8000886:	4b2f      	ldr	r3, [pc, #188]	; (8000944 <HAL_TIM_OC_DelayElapsedCallback+0x700>)
 8000888:	76da      	strb	r2, [r3, #27]

          if (HK_ON)
 800088a:	4b30      	ldr	r3, [pc, #192]	; (800094c <HAL_TIM_OC_DelayElapsedCallback+0x708>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d00c      	beq.n	80008ac <HAL_TIM_OC_DelayElapsedCallback+0x668>
          {
            HAL_UART_Transmit(&huart1, temps_buf, sizeof(temps_buf), HAL_MAX_DELAY);
 8000892:	2301      	movs	r3, #1
 8000894:	425b      	negs	r3, r3
 8000896:	492a      	ldr	r1, [pc, #168]	; (8000940 <HAL_TIM_OC_DelayElapsedCallback+0x6fc>)
 8000898:	482d      	ldr	r0, [pc, #180]	; (8000950 <HAL_TIM_OC_DelayElapsedCallback+0x70c>)
 800089a:	220c      	movs	r2, #12
 800089c:	f004 fec8 	bl	8005630 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart1, hk_buf, sizeof(hk_buf), 100);
 80008a0:	4928      	ldr	r1, [pc, #160]	; (8000944 <HAL_TIM_OC_DelayElapsedCallback+0x700>)
 80008a2:	482b      	ldr	r0, [pc, #172]	; (8000950 <HAL_TIM_OC_DelayElapsedCallback+0x70c>)
 80008a4:	2364      	movs	r3, #100	; 0x64
 80008a6:	2220      	movs	r2, #32
 80008a8:	f004 fec2 	bl	8005630 <HAL_UART_Transmit>
          }
          hk_counter = 1;
 80008ac:	4b29      	ldr	r3, [pc, #164]	; (8000954 <HAL_TIM_OC_DelayElapsedCallback+0x710>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	601a      	str	r2, [r3, #0]
          hk_seq++;
 80008b2:	4b25      	ldr	r3, [pc, #148]	; (8000948 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 80008b4:	881b      	ldrh	r3, [r3, #0]
 80008b6:	3301      	adds	r3, #1
 80008b8:	b29a      	uxth	r2, r3
 80008ba:	4b23      	ldr	r3, [pc, #140]	; (8000948 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 80008bc:	801a      	strh	r2, [r3, #0]
      }
    }
  }

  /* Timer 3 also called but doesn't need to do anything on IT */
}
 80008be:	e036      	b.n	800092e <HAL_TIM_OC_DelayElapsedCallback+0x6ea>
          hk_counter++;
 80008c0:	4b24      	ldr	r3, [pc, #144]	; (8000954 <HAL_TIM_OC_DelayElapsedCallback+0x710>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	1c5a      	adds	r2, r3, #1
 80008c6:	4b23      	ldr	r3, [pc, #140]	; (8000954 <HAL_TIM_OC_DelayElapsedCallback+0x710>)
 80008c8:	601a      	str	r2, [r3, #0]
}
 80008ca:	e030      	b.n	800092e <HAL_TIM_OC_DelayElapsedCallback+0x6ea>
  else if (htim == &htim1)
 80008cc:	687a      	ldr	r2, [r7, #4]
 80008ce:	4b22      	ldr	r3, [pc, #136]	; (8000958 <HAL_TIM_OC_DelayElapsedCallback+0x714>)
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d12c      	bne.n	800092e <HAL_TIM_OC_DelayElapsedCallback+0x6ea>
    if (PMT_ON)
 80008d4:	4b21      	ldr	r3, [pc, #132]	; (800095c <HAL_TIM_OC_DelayElapsedCallback+0x718>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d028      	beq.n	800092e <HAL_TIM_OC_DelayElapsedCallback+0x6ea>
        pmt_buf[0] = pmt_sync;
 80008dc:	22bb      	movs	r2, #187	; 0xbb
 80008de:	4b20      	ldr	r3, [pc, #128]	; (8000960 <HAL_TIM_OC_DelayElapsedCallback+0x71c>)
 80008e0:	701a      	strb	r2, [r3, #0]
        pmt_buf[1] = pmt_sync;
 80008e2:	22bb      	movs	r2, #187	; 0xbb
 80008e4:	4b1e      	ldr	r3, [pc, #120]	; (8000960 <HAL_TIM_OC_DelayElapsedCallback+0x71c>)
 80008e6:	705a      	strb	r2, [r3, #1]
        pmt_buf[2] = ((pmt_seq & 0xFF00) >> 8);
 80008e8:	4b1e      	ldr	r3, [pc, #120]	; (8000964 <HAL_TIM_OC_DelayElapsedCallback+0x720>)
 80008ea:	881b      	ldrh	r3, [r3, #0]
 80008ec:	0a1b      	lsrs	r3, r3, #8
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	b2da      	uxtb	r2, r3
 80008f2:	4b1b      	ldr	r3, [pc, #108]	; (8000960 <HAL_TIM_OC_DelayElapsedCallback+0x71c>)
 80008f4:	709a      	strb	r2, [r3, #2]
        pmt_buf[3] = (pmt_seq & 0xFF);
 80008f6:	4b1b      	ldr	r3, [pc, #108]	; (8000964 <HAL_TIM_OC_DelayElapsedCallback+0x720>)
 80008f8:	881b      	ldrh	r3, [r3, #0]
 80008fa:	b2da      	uxtb	r2, r3
 80008fc:	4b18      	ldr	r3, [pc, #96]	; (8000960 <HAL_TIM_OC_DelayElapsedCallback+0x71c>)
 80008fe:	70da      	strb	r2, [r3, #3]
        pmt_buf[4] = ((pmt_raw & 0xFF00) >> 8);
 8000900:	4b19      	ldr	r3, [pc, #100]	; (8000968 <HAL_TIM_OC_DelayElapsedCallback+0x724>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	121b      	asrs	r3, r3, #8
 8000906:	b2da      	uxtb	r2, r3
 8000908:	4b15      	ldr	r3, [pc, #84]	; (8000960 <HAL_TIM_OC_DelayElapsedCallback+0x71c>)
 800090a:	711a      	strb	r2, [r3, #4]
        pmt_buf[5] = (pmt_raw & 0xFF);
 800090c:	4b16      	ldr	r3, [pc, #88]	; (8000968 <HAL_TIM_OC_DelayElapsedCallback+0x724>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	b2da      	uxtb	r2, r3
 8000912:	4b13      	ldr	r3, [pc, #76]	; (8000960 <HAL_TIM_OC_DelayElapsedCallback+0x71c>)
 8000914:	715a      	strb	r2, [r3, #5]
        pmt_seq++;
 8000916:	4b13      	ldr	r3, [pc, #76]	; (8000964 <HAL_TIM_OC_DelayElapsedCallback+0x720>)
 8000918:	881b      	ldrh	r3, [r3, #0]
 800091a:	3301      	adds	r3, #1
 800091c:	b29a      	uxth	r2, r3
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <HAL_TIM_OC_DelayElapsedCallback+0x720>)
 8000920:	801a      	strh	r2, [r3, #0]
        HAL_UART_Transmit(&huart1, pmt_buf, sizeof(pmt_buf), 100);
 8000922:	490f      	ldr	r1, [pc, #60]	; (8000960 <HAL_TIM_OC_DelayElapsedCallback+0x71c>)
 8000924:	480a      	ldr	r0, [pc, #40]	; (8000950 <HAL_TIM_OC_DelayElapsedCallback+0x70c>)
 8000926:	2364      	movs	r3, #100	; 0x64
 8000928:	2206      	movs	r2, #6
 800092a:	f004 fe81 	bl	8005630 <HAL_UART_Transmit>
}
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	46bd      	mov	sp, r7
 8000932:	b00f      	add	sp, #60	; 0x3c
 8000934:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	20000370 	.word	0x20000370
 800093c:	20000044 	.word	0x20000044
 8000940:	200003e0 	.word	0x200003e0
 8000944:	200003b8 	.word	0x200003b8
 8000948:	200003d8 	.word	0x200003d8
 800094c:	2000001a 	.word	0x2000001a
 8000950:	20000280 	.word	0x20000280
 8000954:	200003dc 	.word	0x200003dc
 8000958:	200001f0 	.word	0x200001f0
 800095c:	20000018 	.word	0x20000018
 8000960:	200003b0 	.word	0x200003b0
 8000964:	200003b6 	.word	0x200003b6
 8000968:	20000394 	.word	0x20000394

0800096c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]

//  HAL_UART_Receive_IT(&huart1, rx_buf, 1);
  char key = rx_buf[0];
 8000974:	210f      	movs	r1, #15
 8000976:	187b      	adds	r3, r7, r1
 8000978:	4a70      	ldr	r2, [pc, #448]	; (8000b3c <HAL_UART_RxCpltCallback+0x1d0>)
 800097a:	7812      	ldrb	r2, [r2, #0]
 800097c:	701a      	strb	r2, [r3, #0]

  switch (key)
 800097e:	187b      	adds	r3, r7, r1
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	3b21      	subs	r3, #33	; 0x21
 8000984:	2b52      	cmp	r3, #82	; 0x52
 8000986:	d900      	bls.n	800098a <HAL_UART_RxCpltCallback+0x1e>
 8000988:	e0d3      	b.n	8000b32 <HAL_UART_RxCpltCallback+0x1c6>
 800098a:	009a      	lsls	r2, r3, #2
 800098c:	4b6c      	ldr	r3, [pc, #432]	; (8000b40 <HAL_UART_RxCpltCallback+0x1d4>)
 800098e:	18d3      	adds	r3, r2, r3
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	469f      	mov	pc, r3
  {

  case 'G':
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000994:	4b6b      	ldr	r3, [pc, #428]	; (8000b44 <HAL_UART_RxCpltCallback+0x1d8>)
 8000996:	2140      	movs	r1, #64	; 0x40
 8000998:	2201      	movs	r2, #1
 800099a:	0018      	movs	r0, r3
 800099c:	f002 fa96 	bl	8002ecc <HAL_GPIO_WritePin>
    break;
 80009a0:	e0c7      	b.n	8000b32 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case 'H':
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 80009a2:	4b68      	ldr	r3, [pc, #416]	; (8000b44 <HAL_UART_RxCpltCallback+0x1d8>)
 80009a4:	2140      	movs	r1, #64	; 0x40
 80009a6:	2200      	movs	r2, #0
 80009a8:	0018      	movs	r0, r3
 80009aa:	f002 fa8f 	bl	8002ecc <HAL_GPIO_WritePin>
    break;
 80009ae:	e0c0      	b.n	8000b32 <HAL_UART_RxCpltCallback+0x1c6>
  }

  case 'I':
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_SET);
 80009b0:	4b64      	ldr	r3, [pc, #400]	; (8000b44 <HAL_UART_RxCpltCallback+0x1d8>)
 80009b2:	2180      	movs	r1, #128	; 0x80
 80009b4:	2201      	movs	r2, #1
 80009b6:	0018      	movs	r0, r3
 80009b8:	f002 fa88 	bl	8002ecc <HAL_GPIO_WritePin>
    break;
 80009bc:	e0b9      	b.n	8000b32 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case 'J':
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_RESET);
 80009be:	4b61      	ldr	r3, [pc, #388]	; (8000b44 <HAL_UART_RxCpltCallback+0x1d8>)
 80009c0:	2180      	movs	r1, #128	; 0x80
 80009c2:	2200      	movs	r2, #0
 80009c4:	0018      	movs	r0, r3
 80009c6:	f002 fa81 	bl	8002ecc <HAL_GPIO_WritePin>
    break;
 80009ca:	e0b2      	b.n	8000b32 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '<':
  {
    if (step < 5)
 80009cc:	4b5e      	ldr	r3, [pc, #376]	; (8000b48 <HAL_UART_RxCpltCallback+0x1dc>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b04      	cmp	r3, #4
 80009d2:	d900      	bls.n	80009d6 <HAL_UART_RxCpltCallback+0x6a>
 80009d4:	e0aa      	b.n	8000b2c <HAL_UART_RxCpltCallback+0x1c0>
    {
      step++;
 80009d6:	4b5c      	ldr	r3, [pc, #368]	; (8000b48 <HAL_UART_RxCpltCallback+0x1dc>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	3301      	adds	r3, #1
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	4b5a      	ldr	r3, [pc, #360]	; (8000b48 <HAL_UART_RxCpltCallback+0x1dc>)
 80009e0:	701a      	strb	r2, [r3, #0]
    }
    break;
 80009e2:	e0a3      	b.n	8000b2c <HAL_UART_RxCpltCallback+0x1c0>
  }
  case '>':
  {
    if (step > 0)
 80009e4:	4b58      	ldr	r3, [pc, #352]	; (8000b48 <HAL_UART_RxCpltCallback+0x1dc>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d100      	bne.n	80009ee <HAL_UART_RxCpltCallback+0x82>
 80009ec:	e0a0      	b.n	8000b30 <HAL_UART_RxCpltCallback+0x1c4>
    {
      step--;
 80009ee:	4b56      	ldr	r3, [pc, #344]	; (8000b48 <HAL_UART_RxCpltCallback+0x1dc>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	3b01      	subs	r3, #1
 80009f4:	b2da      	uxtb	r2, r3
 80009f6:	4b54      	ldr	r3, [pc, #336]	; (8000b48 <HAL_UART_RxCpltCallback+0x1dc>)
 80009f8:	701a      	strb	r2, [r3, #0]
    }
    break;
 80009fa:	e099      	b.n	8000b30 <HAL_UART_RxCpltCallback+0x1c4>
  }
  case 'a':
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 80009fc:	4b53      	ldr	r3, [pc, #332]	; (8000b4c <HAL_UART_RxCpltCallback+0x1e0>)
 80009fe:	2120      	movs	r1, #32
 8000a00:	2201      	movs	r2, #1
 8000a02:	0018      	movs	r0, r3
 8000a04:	f002 fa62 	bl	8002ecc <HAL_GPIO_WritePin>
    break;
 8000a08:	e093      	b.n	8000b32 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '$':
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8000a0a:	4b50      	ldr	r3, [pc, #320]	; (8000b4c <HAL_UART_RxCpltCallback+0x1e0>)
 8000a0c:	2120      	movs	r1, #32
 8000a0e:	2200      	movs	r2, #0
 8000a10:	0018      	movs	r0, r3
 8000a12:	f002 fa5b 	bl	8002ecc <HAL_GPIO_WritePin>
    break;
 8000a16:	e08c      	b.n	8000b32 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case 'b':
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000a18:	4b4c      	ldr	r3, [pc, #304]	; (8000b4c <HAL_UART_RxCpltCallback+0x1e0>)
 8000a1a:	2140      	movs	r1, #64	; 0x40
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f002 fa54 	bl	8002ecc <HAL_GPIO_WritePin>
    break;
 8000a24:	e085      	b.n	8000b32 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '%':
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000a26:	4b49      	ldr	r3, [pc, #292]	; (8000b4c <HAL_UART_RxCpltCallback+0x1e0>)
 8000a28:	2140      	movs	r1, #64	; 0x40
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f002 fa4d 	bl	8002ecc <HAL_GPIO_WritePin>
    break;
 8000a32:	e07e      	b.n	8000b32 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case 'c':
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000a34:	4846      	ldr	r0, [pc, #280]	; (8000b50 <HAL_UART_RxCpltCallback+0x1e4>)
 8000a36:	2380      	movs	r3, #128	; 0x80
 8000a38:	00db      	lsls	r3, r3, #3
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	0019      	movs	r1, r3
 8000a3e:	f002 fa45 	bl	8002ecc <HAL_GPIO_WritePin>
    break;
 8000a42:	e076      	b.n	8000b32 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '^':
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000a44:	4842      	ldr	r0, [pc, #264]	; (8000b50 <HAL_UART_RxCpltCallback+0x1e4>)
 8000a46:	2380      	movs	r3, #128	; 0x80
 8000a48:	00db      	lsls	r3, r3, #3
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	0019      	movs	r1, r3
 8000a4e:	f002 fa3d 	bl	8002ecc <HAL_GPIO_WritePin>
    break;
 8000a52:	e06e      	b.n	8000b32 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case 'd':
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000a54:	483e      	ldr	r0, [pc, #248]	; (8000b50 <HAL_UART_RxCpltCallback+0x1e4>)
 8000a56:	2380      	movs	r3, #128	; 0x80
 8000a58:	019b      	lsls	r3, r3, #6
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	0019      	movs	r1, r3
 8000a5e:	f002 fa35 	bl	8002ecc <HAL_GPIO_WritePin>
    break;
 8000a62:	e066      	b.n	8000b32 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '&':
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000a64:	483a      	ldr	r0, [pc, #232]	; (8000b50 <HAL_UART_RxCpltCallback+0x1e4>)
 8000a66:	2380      	movs	r3, #128	; 0x80
 8000a68:	019b      	lsls	r3, r3, #6
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	0019      	movs	r1, r3
 8000a6e:	f002 fa2d 	bl	8002ecc <HAL_GPIO_WritePin>
    break;
 8000a72:	e05e      	b.n	8000b32 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case 'e':
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000a74:	4b36      	ldr	r3, [pc, #216]	; (8000b50 <HAL_UART_RxCpltCallback+0x1e4>)
 8000a76:	2180      	movs	r1, #128	; 0x80
 8000a78:	2201      	movs	r2, #1
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f002 fa26 	bl	8002ecc <HAL_GPIO_WritePin>
    break;
 8000a80:	e057      	b.n	8000b32 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '*':
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000a82:	4b33      	ldr	r3, [pc, #204]	; (8000b50 <HAL_UART_RxCpltCallback+0x1e4>)
 8000a84:	2180      	movs	r1, #128	; 0x80
 8000a86:	2200      	movs	r2, #0
 8000a88:	0018      	movs	r0, r3
 8000a8a:	f002 fa1f 	bl	8002ecc <HAL_GPIO_WritePin>
    break;
 8000a8e:	e050      	b.n	8000b32 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case 'f':
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000a90:	482f      	ldr	r0, [pc, #188]	; (8000b50 <HAL_UART_RxCpltCallback+0x1e4>)
 8000a92:	2380      	movs	r3, #128	; 0x80
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	2201      	movs	r2, #1
 8000a98:	0019      	movs	r1, r3
 8000a9a:	f002 fa17 	bl	8002ecc <HAL_GPIO_WritePin>
    break;
 8000a9e:	e048      	b.n	8000b32 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '(':
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000aa0:	482b      	ldr	r0, [pc, #172]	; (8000b50 <HAL_UART_RxCpltCallback+0x1e4>)
 8000aa2:	2380      	movs	r3, #128	; 0x80
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	0019      	movs	r1, r3
 8000aaa:	f002 fa0f 	bl	8002ecc <HAL_GPIO_WritePin>
    break;
 8000aae:	e040      	b.n	8000b32 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case 'g':
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000ab0:	4827      	ldr	r0, [pc, #156]	; (8000b50 <HAL_UART_RxCpltCallback+0x1e4>)
 8000ab2:	2380      	movs	r3, #128	; 0x80
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	0019      	movs	r1, r3
 8000aba:	f002 fa07 	bl	8002ecc <HAL_GPIO_WritePin>
    break;
 8000abe:	e038      	b.n	8000b32 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case ')':
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000ac0:	4823      	ldr	r0, [pc, #140]	; (8000b50 <HAL_UART_RxCpltCallback+0x1e4>)
 8000ac2:	2380      	movs	r3, #128	; 0x80
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	0019      	movs	r1, r3
 8000aca:	f002 f9ff 	bl	8002ecc <HAL_GPIO_WritePin>
    break;
 8000ace:	e030      	b.n	8000b32 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case 'h':
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000ad0:	4b1f      	ldr	r3, [pc, #124]	; (8000b50 <HAL_UART_RxCpltCallback+0x1e4>)
 8000ad2:	2140      	movs	r1, #64	; 0x40
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f002 f9f8 	bl	8002ecc <HAL_GPIO_WritePin>
    break;
 8000adc:	e029      	b.n	8000b32 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '-':
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000ade:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <HAL_UART_RxCpltCallback+0x1e4>)
 8000ae0:	2140      	movs	r1, #64	; 0x40
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f002 f9f1 	bl	8002ecc <HAL_GPIO_WritePin>
    break;
 8000aea:	e022      	b.n	8000b32 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case 's':
  {
      HAL_SuspendTick();
 8000aec:	f001 f8f2 	bl	8001cd4 <HAL_SuspendTick>
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000af0:	2101      	movs	r1, #1
 8000af2:	2001      	movs	r0, #1
 8000af4:	f002 ff3e 	bl	8003974 <HAL_PWR_EnterSTOPMode>
      NVIC_SystemReset();
 8000af8:	f7ff fb92 	bl	8000220 <__NVIC_SystemReset>
      break;
  }
  case '1':
  {
    PMT_ON = 1;
 8000afc:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <HAL_UART_RxCpltCallback+0x1e8>)
 8000afe:	2201      	movs	r2, #1
 8000b00:	701a      	strb	r2, [r3, #0]
    break;
 8000b02:	e016      	b.n	8000b32 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '!':
  {
    PMT_ON = 0;
 8000b04:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <HAL_UART_RxCpltCallback+0x1e8>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	701a      	strb	r2, [r3, #0]
    break;
 8000b0a:	e012      	b.n	8000b32 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '2':
  {
    ERPA_ON = 1;
 8000b0c:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <HAL_UART_RxCpltCallback+0x1ec>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	701a      	strb	r2, [r3, #0]
    break;
 8000b12:	e00e      	b.n	8000b32 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '@':
  {
    ERPA_ON = 0;
 8000b14:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <HAL_UART_RxCpltCallback+0x1ec>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	701a      	strb	r2, [r3, #0]
    break;
 8000b1a:	e00a      	b.n	8000b32 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '3':
  {
    HK_ON = 1;
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <HAL_UART_RxCpltCallback+0x1f0>)
 8000b1e:	2201      	movs	r2, #1
 8000b20:	701a      	strb	r2, [r3, #0]
    break;
 8000b22:	e006      	b.n	8000b32 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '#':
  {
    HK_ON = 0;
 8000b24:	4b0d      	ldr	r3, [pc, #52]	; (8000b5c <HAL_UART_RxCpltCallback+0x1f0>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	701a      	strb	r2, [r3, #0]
    break;
 8000b2a:	e002      	b.n	8000b32 <HAL_UART_RxCpltCallback+0x1c6>
    break;
 8000b2c:	46c0      	nop			; (mov r8, r8)
 8000b2e:	e000      	b.n	8000b32 <HAL_UART_RxCpltCallback+0x1c6>
    break;
 8000b30:	46c0      	nop			; (mov r8, r8)
  }
  }
}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	46bd      	mov	sp, r7
 8000b36:	b004      	add	sp, #16
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	20000304 	.word	0x20000304
 8000b40:	08006de8 	.word	0x08006de8
 8000b44:	48001400 	.word	0x48001400
 8000b48:	20000392 	.word	0x20000392
 8000b4c:	48000400 	.word	0x48000400
 8000b50:	48000800 	.word	0x48000800
 8000b54:	20000018 	.word	0x20000018
 8000b58:	20000019 	.word	0x20000019
 8000b5c:	2000001a 	.word	0x2000001a

08000b60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b66:	f001 f82d 	bl	8001bc4 <HAL_Init>
  int16_t val;
  float temp_c;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b6a:	f000 f8c3 	bl	8000cf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b6e:	f000 fc53 	bl	8001418 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b72:	f000 fc33 	bl	80013dc <MX_DMA_Init>
  MX_SPI2_Init();
 8000b76:	f000 fb05 	bl	8001184 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000b7a:	f000 fb43 	bl	8001204 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b7e:	f000 fb99 	bl	80012b4 <MX_TIM2_Init>
  MX_SPI1_Init();
 8000b82:	f000 fabf 	bl	8001104 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000b86:	f000 fbe9 	bl	800135c <MX_USART1_UART_Init>
  MX_DAC1_Init();
 8000b8a:	f000 fa49 	bl	8001020 <MX_DAC1_Init>
  MX_ADC_Init();
 8000b8e:	f000 f91b 	bl	8000dc8 <MX_ADC_Init>
  MX_I2C1_Init();
 8000b92:	f000 fa77 	bl	8001084 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000b96:	4b49      	ldr	r3, [pc, #292]	; (8000cbc <main+0x15c>)
 8000b98:	2100      	movs	r1, #0
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f001 fdd7 	bl	800274e <HAL_DAC_Start>

  /* Start Timers with OC & Interrupt */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000ba0:	4b47      	ldr	r3, [pc, #284]	; (8000cc0 <main+0x160>)
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f004 f839 	bl	8004c1c <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000baa:	4b46      	ldr	r3, [pc, #280]	; (8000cc4 <main+0x164>)
 8000bac:	210c      	movs	r1, #12
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f004 f834 	bl	8004c1c <HAL_TIM_OC_Start_IT>

  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8000bb4:	46c0      	nop			; (mov r8, r8)
 8000bb6:	4b44      	ldr	r3, [pc, #272]	; (8000cc8 <main+0x168>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	69da      	ldr	r2, [r3, #28]
 8000bbc:	2380      	movs	r3, #128	; 0x80
 8000bbe:	025b      	lsls	r3, r3, #9
 8000bc0:	401a      	ands	r2, r3
 8000bc2:	2380      	movs	r3, #128	; 0x80
 8000bc4:	025b      	lsls	r3, r3, #9
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	d0f5      	beq.n	8000bb6 <main+0x56>
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	4b3e      	ldr	r3, [pc, #248]	; (8000cc8 <main+0x168>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	69da      	ldr	r2, [r3, #28]
 8000bd2:	2380      	movs	r3, #128	; 0x80
 8000bd4:	03db      	lsls	r3, r3, #15
 8000bd6:	401a      	ands	r2, r3
 8000bd8:	2380      	movs	r3, #128	; 0x80
 8000bda:	03db      	lsls	r3, r3, #15
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d1f5      	bne.n	8000bcc <main+0x6c>

  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_ADDRESS;
 8000be0:	4b3a      	ldr	r3, [pc, #232]	; (8000ccc <main+0x16c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
  WakeUpSelection.AddressLength = UART_ADDRESS_DETECT_7B;
 8000be6:	4b39      	ldr	r3, [pc, #228]	; (8000ccc <main+0x16c>)
 8000be8:	2210      	movs	r2, #16
 8000bea:	809a      	strh	r2, [r3, #4]
  WakeUpSelection.Address = 0x23; // send "£"
 8000bec:	4b37      	ldr	r3, [pc, #220]	; (8000ccc <main+0x16c>)
 8000bee:	2223      	movs	r2, #35	; 0x23
 8000bf0:	719a      	strb	r2, [r3, #6]

  if (HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection) != HAL_OK) {
 8000bf2:	4b36      	ldr	r3, [pc, #216]	; (8000ccc <main+0x16c>)
 8000bf4:	4834      	ldr	r0, [pc, #208]	; (8000cc8 <main+0x168>)
 8000bf6:	6819      	ldr	r1, [r3, #0]
 8000bf8:	685a      	ldr	r2, [r3, #4]
 8000bfa:	f005 ffa5 	bl	8006b48 <HAL_UARTEx_StopModeWakeUpSourceConfig>
 8000bfe:	1e03      	subs	r3, r0, #0
 8000c00:	d001      	beq.n	8000c06 <main+0xa6>
      Error_Handler();
 8000c02:	f000 fcc5 	bl	8001590 <Error_Handler>
  }
  /* Enable the LPUART Wake UP from stop mode Interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8000c06:	4b30      	ldr	r3, [pc, #192]	; (8000cc8 <main+0x168>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	689a      	ldr	r2, [r3, #8]
 8000c0c:	4b2e      	ldr	r3, [pc, #184]	; (8000cc8 <main+0x168>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2180      	movs	r1, #128	; 0x80
 8000c12:	03c9      	lsls	r1, r1, #15
 8000c14:	430a      	orrs	r2, r1
 8000c16:	609a      	str	r2, [r3, #8]

  /* enable MCU wake-up by LPUART */
  HAL_UARTEx_EnableStopMode(&huart1);
 8000c18:	4b2b      	ldr	r3, [pc, #172]	; (8000cc8 <main+0x168>)
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f005 fffa 	bl	8006c14 <HAL_UARTEx_EnableStopMode>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // ERPA adc handling
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000c20:	2380      	movs	r3, #128	; 0x80
 8000c22:	0059      	lsls	r1, r3, #1
 8000c24:	2390      	movs	r3, #144	; 0x90
 8000c26:	05db      	lsls	r3, r3, #23
 8000c28:	2200      	movs	r2, #0
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f002 f94e 	bl	8002ecc <HAL_GPIO_WritePin>

      HAL_SPI_Transmit(&hspi1, (uint8_t *)&WRITE, 1, 1);
 8000c30:	4927      	ldr	r1, [pc, #156]	; (8000cd0 <main+0x170>)
 8000c32:	4828      	ldr	r0, [pc, #160]	; (8000cd4 <main+0x174>)
 8000c34:	2301      	movs	r3, #1
 8000c36:	2201      	movs	r2, #1
 8000c38:	f003 fcd2 	bl	80045e0 <HAL_SPI_Transmit>

      while (!(SPI2->SR))
 8000c3c:	46c0      	nop			; (mov r8, r8)
 8000c3e:	4b26      	ldr	r3, [pc, #152]	; (8000cd8 <main+0x178>)
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d0fb      	beq.n	8000c3e <main+0xde>
        ;

      erpa_raw = SPI2->DR;
 8000c46:	4b24      	ldr	r3, [pc, #144]	; (8000cd8 <main+0x178>)
 8000c48:	68db      	ldr	r3, [r3, #12]
 8000c4a:	001a      	movs	r2, r3
 8000c4c:	4b23      	ldr	r3, [pc, #140]	; (8000cdc <main+0x17c>)
 8000c4e:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000c50:	2380      	movs	r3, #128	; 0x80
 8000c52:	0059      	lsls	r1, r3, #1
 8000c54:	2390      	movs	r3, #144	; 0x90
 8000c56:	05db      	lsls	r3, r3, #23
 8000c58:	2201      	movs	r2, #1
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f002 f936 	bl	8002ecc <HAL_GPIO_WritePin>


      // PMT adc handling
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8000c60:	2380      	movs	r3, #128	; 0x80
 8000c62:	011b      	lsls	r3, r3, #4
 8000c64:	481e      	ldr	r0, [pc, #120]	; (8000ce0 <main+0x180>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	0019      	movs	r1, r3
 8000c6a:	f002 f92f 	bl	8002ecc <HAL_GPIO_WritePin>

	  HAL_SPI_Transmit(&hspi2, (uint8_t*) &WRITE, 1, 1);
 8000c6e:	4918      	ldr	r1, [pc, #96]	; (8000cd0 <main+0x170>)
 8000c70:	481c      	ldr	r0, [pc, #112]	; (8000ce4 <main+0x184>)
 8000c72:	2301      	movs	r3, #1
 8000c74:	2201      	movs	r2, #1
 8000c76:	f003 fcb3 	bl	80045e0 <HAL_SPI_Transmit>
	  while (!(SPI1->SR));
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ce8 <main+0x188>)
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d0fb      	beq.n	8000c7c <main+0x11c>
	  pmt_raw = SPI1->DR;
 8000c84:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <main+0x188>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	001a      	movs	r2, r3
 8000c8a:	4b18      	ldr	r3, [pc, #96]	; (8000cec <main+0x18c>)
 8000c8c:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8000c8e:	2380      	movs	r3, #128	; 0x80
 8000c90:	011b      	lsls	r3, r3, #4
 8000c92:	4813      	ldr	r0, [pc, #76]	; (8000ce0 <main+0x180>)
 8000c94:	2201      	movs	r2, #1
 8000c96:	0019      	movs	r1, r3
 8000c98:	f002 f918 	bl	8002ecc <HAL_GPIO_WritePin>

	  HAL_Delay(100);
 8000c9c:	2064      	movs	r0, #100	; 0x64
 8000c9e:	f000 fff5 	bl	8001c8c <HAL_Delay>




	HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000ca2:	4913      	ldr	r1, [pc, #76]	; (8000cf0 <main+0x190>)
 8000ca4:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <main+0x168>)
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f004 fe47 	bl	800593c <HAL_UART_Receive_IT>

    HAL_UART_Receive(&huart1, rx_buf, 1, 0);
 8000cae:	4910      	ldr	r1, [pc, #64]	; (8000cf0 <main+0x190>)
 8000cb0:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <main+0x168>)
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	f004 fd65 	bl	8005784 <HAL_UART_Receive>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000cba:	e7b1      	b.n	8000c20 <main+0xc0>
 8000cbc:	200000c8 	.word	0x200000c8
 8000cc0:	200001f0 	.word	0x200001f0
 8000cc4:	20000238 	.word	0x20000238
 8000cc8:	20000280 	.word	0x20000280
 8000ccc:	20000368 	.word	0x20000368
 8000cd0:	08006de4 	.word	0x08006de4
 8000cd4:	20000128 	.word	0x20000128
 8000cd8:	40003800 	.word	0x40003800
 8000cdc:	20000398 	.word	0x20000398
 8000ce0:	48000400 	.word	0x48000400
 8000ce4:	2000018c 	.word	0x2000018c
 8000ce8:	40013000 	.word	0x40013000
 8000cec:	20000394 	.word	0x20000394
 8000cf0:	20000304 	.word	0x20000304

08000cf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf4:	b590      	push	{r4, r7, lr}
 8000cf6:	b097      	sub	sp, #92	; 0x5c
 8000cf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cfa:	2428      	movs	r4, #40	; 0x28
 8000cfc:	193b      	adds	r3, r7, r4
 8000cfe:	0018      	movs	r0, r3
 8000d00:	2330      	movs	r3, #48	; 0x30
 8000d02:	001a      	movs	r2, r3
 8000d04:	2100      	movs	r1, #0
 8000d06:	f005 ffff 	bl	8006d08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d0a:	2318      	movs	r3, #24
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	0018      	movs	r0, r3
 8000d10:	2310      	movs	r3, #16
 8000d12:	001a      	movs	r2, r3
 8000d14:	2100      	movs	r1, #0
 8000d16:	f005 fff7 	bl	8006d08 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	2314      	movs	r3, #20
 8000d20:	001a      	movs	r2, r3
 8000d22:	2100      	movs	r1, #0
 8000d24:	f005 fff0 	bl	8006d08 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000d28:	0021      	movs	r1, r4
 8000d2a:	187b      	adds	r3, r7, r1
 8000d2c:	2212      	movs	r2, #18
 8000d2e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d30:	187b      	adds	r3, r7, r1
 8000d32:	2201      	movs	r2, #1
 8000d34:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000d36:	187b      	adds	r3, r7, r1
 8000d38:	2201      	movs	r2, #1
 8000d3a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d3c:	187b      	adds	r3, r7, r1
 8000d3e:	2210      	movs	r2, #16
 8000d40:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000d42:	187b      	adds	r3, r7, r1
 8000d44:	2210      	movs	r2, #16
 8000d46:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d48:	187b      	adds	r3, r7, r1
 8000d4a:	2202      	movs	r2, #2
 8000d4c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d4e:	187b      	adds	r3, r7, r1
 8000d50:	2200      	movs	r2, #0
 8000d52:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000d54:	187b      	adds	r3, r7, r1
 8000d56:	22a0      	movs	r2, #160	; 0xa0
 8000d58:	0392      	lsls	r2, r2, #14
 8000d5a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000d5c:	187b      	adds	r3, r7, r1
 8000d5e:	2200      	movs	r2, #0
 8000d60:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d62:	187b      	adds	r3, r7, r1
 8000d64:	0018      	movs	r0, r3
 8000d66:	f002 fe39 	bl	80039dc <HAL_RCC_OscConfig>
 8000d6a:	1e03      	subs	r3, r0, #0
 8000d6c:	d001      	beq.n	8000d72 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000d6e:	f000 fc0f 	bl	8001590 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d72:	2118      	movs	r1, #24
 8000d74:	187b      	adds	r3, r7, r1
 8000d76:	2207      	movs	r2, #7
 8000d78:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d7a:	187b      	adds	r3, r7, r1
 8000d7c:	2202      	movs	r2, #2
 8000d7e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d80:	187b      	adds	r3, r7, r1
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d86:	187b      	adds	r3, r7, r1
 8000d88:	2200      	movs	r2, #0
 8000d8a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d8c:	187b      	adds	r3, r7, r1
 8000d8e:	2101      	movs	r1, #1
 8000d90:	0018      	movs	r0, r3
 8000d92:	f003 f93d 	bl	8004010 <HAL_RCC_ClockConfig>
 8000d96:	1e03      	subs	r3, r0, #0
 8000d98:	d001      	beq.n	8000d9e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000d9a:	f000 fbf9 	bl	8001590 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	2221      	movs	r2, #33	; 0x21
 8000da2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	2203      	movs	r2, #3
 8000da8:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	2200      	movs	r2, #0
 8000dae:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	0018      	movs	r0, r3
 8000db4:	f003 fa7e 	bl	80042b4 <HAL_RCCEx_PeriphCLKConfig>
 8000db8:	1e03      	subs	r3, r0, #0
 8000dba:	d001      	beq.n	8000dc0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000dbc:	f000 fbe8 	bl	8001590 <Error_Handler>
  }
}
 8000dc0:	46c0      	nop			; (mov r8, r8)
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	b017      	add	sp, #92	; 0x5c
 8000dc6:	bd90      	pop	{r4, r7, pc}

08000dc8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	230c      	movs	r3, #12
 8000dd4:	001a      	movs	r2, r3
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	f005 ff96 	bl	8006d08 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000ddc:	4b8e      	ldr	r3, [pc, #568]	; (8001018 <MX_ADC_Init+0x250>)
 8000dde:	4a8f      	ldr	r2, [pc, #572]	; (800101c <MX_ADC_Init+0x254>)
 8000de0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000de2:	4b8d      	ldr	r3, [pc, #564]	; (8001018 <MX_ADC_Init+0x250>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000de8:	4b8b      	ldr	r3, [pc, #556]	; (8001018 <MX_ADC_Init+0x250>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dee:	4b8a      	ldr	r3, [pc, #552]	; (8001018 <MX_ADC_Init+0x250>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000df4:	4b88      	ldr	r3, [pc, #544]	; (8001018 <MX_ADC_Init+0x250>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dfa:	4b87      	ldr	r3, [pc, #540]	; (8001018 <MX_ADC_Init+0x250>)
 8000dfc:	2204      	movs	r2, #4
 8000dfe:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000e00:	4b85      	ldr	r3, [pc, #532]	; (8001018 <MX_ADC_Init+0x250>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000e06:	4b84      	ldr	r3, [pc, #528]	; (8001018 <MX_ADC_Init+0x250>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000e0c:	4b82      	ldr	r3, [pc, #520]	; (8001018 <MX_ADC_Init+0x250>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000e12:	4b81      	ldr	r3, [pc, #516]	; (8001018 <MX_ADC_Init+0x250>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e18:	4b7f      	ldr	r3, [pc, #508]	; (8001018 <MX_ADC_Init+0x250>)
 8000e1a:	22c2      	movs	r2, #194	; 0xc2
 8000e1c:	32ff      	adds	r2, #255	; 0xff
 8000e1e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e20:	4b7d      	ldr	r3, [pc, #500]	; (8001018 <MX_ADC_Init+0x250>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000e26:	4b7c      	ldr	r3, [pc, #496]	; (8001018 <MX_ADC_Init+0x250>)
 8000e28:	2224      	movs	r2, #36	; 0x24
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e2e:	4b7a      	ldr	r3, [pc, #488]	; (8001018 <MX_ADC_Init+0x250>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000e34:	4b78      	ldr	r3, [pc, #480]	; (8001018 <MX_ADC_Init+0x250>)
 8000e36:	0018      	movs	r0, r3
 8000e38:	f000 ff5a 	bl	8001cf0 <HAL_ADC_Init>
 8000e3c:	1e03      	subs	r3, r0, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000e40:	f000 fba6 	bl	8001590 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	2280      	movs	r2, #128	; 0x80
 8000e4e:	0152      	lsls	r2, r2, #5
 8000e50:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	2280      	movs	r2, #128	; 0x80
 8000e56:	0552      	lsls	r2, r2, #21
 8000e58:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e5a:	1d3a      	adds	r2, r7, #4
 8000e5c:	4b6e      	ldr	r3, [pc, #440]	; (8001018 <MX_ADC_Init+0x250>)
 8000e5e:	0011      	movs	r1, r2
 8000e60:	0018      	movs	r0, r3
 8000e62:	f001 f91f 	bl	80020a4 <HAL_ADC_ConfigChannel>
 8000e66:	1e03      	subs	r3, r0, #0
 8000e68:	d001      	beq.n	8000e6e <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000e6a:	f000 fb91 	bl	8001590 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	2201      	movs	r2, #1
 8000e72:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e74:	1d3a      	adds	r2, r7, #4
 8000e76:	4b68      	ldr	r3, [pc, #416]	; (8001018 <MX_ADC_Init+0x250>)
 8000e78:	0011      	movs	r1, r2
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	f001 f912 	bl	80020a4 <HAL_ADC_ConfigChannel>
 8000e80:	1e03      	subs	r3, r0, #0
 8000e82:	d001      	beq.n	8000e88 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8000e84:	f000 fb84 	bl	8001590 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000e88:	1d3b      	adds	r3, r7, #4
 8000e8a:	2202      	movs	r2, #2
 8000e8c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e8e:	1d3a      	adds	r2, r7, #4
 8000e90:	4b61      	ldr	r3, [pc, #388]	; (8001018 <MX_ADC_Init+0x250>)
 8000e92:	0011      	movs	r1, r2
 8000e94:	0018      	movs	r0, r3
 8000e96:	f001 f905 	bl	80020a4 <HAL_ADC_ConfigChannel>
 8000e9a:	1e03      	subs	r3, r0, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8000e9e:	f000 fb77 	bl	8001590 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000ea2:	1d3b      	adds	r3, r7, #4
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ea8:	1d3a      	adds	r2, r7, #4
 8000eaa:	4b5b      	ldr	r3, [pc, #364]	; (8001018 <MX_ADC_Init+0x250>)
 8000eac:	0011      	movs	r1, r2
 8000eae:	0018      	movs	r0, r3
 8000eb0:	f001 f8f8 	bl	80020a4 <HAL_ADC_ConfigChannel>
 8000eb4:	1e03      	subs	r3, r0, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 8000eb8:	f000 fb6a 	bl	8001590 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ebc:	1d3b      	adds	r3, r7, #4
 8000ebe:	2205      	movs	r2, #5
 8000ec0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ec2:	1d3a      	adds	r2, r7, #4
 8000ec4:	4b54      	ldr	r3, [pc, #336]	; (8001018 <MX_ADC_Init+0x250>)
 8000ec6:	0011      	movs	r1, r2
 8000ec8:	0018      	movs	r0, r3
 8000eca:	f001 f8eb 	bl	80020a4 <HAL_ADC_ConfigChannel>
 8000ece:	1e03      	subs	r3, r0, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 8000ed2:	f000 fb5d 	bl	8001590 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000ed6:	1d3b      	adds	r3, r7, #4
 8000ed8:	2206      	movs	r2, #6
 8000eda:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000edc:	1d3a      	adds	r2, r7, #4
 8000ede:	4b4e      	ldr	r3, [pc, #312]	; (8001018 <MX_ADC_Init+0x250>)
 8000ee0:	0011      	movs	r1, r2
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	f001 f8de 	bl	80020a4 <HAL_ADC_ConfigChannel>
 8000ee8:	1e03      	subs	r3, r0, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_ADC_Init+0x128>
  {
    Error_Handler();
 8000eec:	f000 fb50 	bl	8001590 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000ef0:	1d3b      	adds	r3, r7, #4
 8000ef2:	2207      	movs	r2, #7
 8000ef4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ef6:	1d3a      	adds	r2, r7, #4
 8000ef8:	4b47      	ldr	r3, [pc, #284]	; (8001018 <MX_ADC_Init+0x250>)
 8000efa:	0011      	movs	r1, r2
 8000efc:	0018      	movs	r0, r3
 8000efe:	f001 f8d1 	bl	80020a4 <HAL_ADC_ConfigChannel>
 8000f02:	1e03      	subs	r3, r0, #0
 8000f04:	d001      	beq.n	8000f0a <MX_ADC_Init+0x142>
  {
    Error_Handler();
 8000f06:	f000 fb43 	bl	8001590 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	2208      	movs	r2, #8
 8000f0e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f10:	1d3a      	adds	r2, r7, #4
 8000f12:	4b41      	ldr	r3, [pc, #260]	; (8001018 <MX_ADC_Init+0x250>)
 8000f14:	0011      	movs	r1, r2
 8000f16:	0018      	movs	r0, r3
 8000f18:	f001 f8c4 	bl	80020a4 <HAL_ADC_ConfigChannel>
 8000f1c:	1e03      	subs	r3, r0, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_ADC_Init+0x15c>
  {
    Error_Handler();
 8000f20:	f000 fb36 	bl	8001590 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f24:	1d3b      	adds	r3, r7, #4
 8000f26:	2209      	movs	r2, #9
 8000f28:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f2a:	1d3a      	adds	r2, r7, #4
 8000f2c:	4b3a      	ldr	r3, [pc, #232]	; (8001018 <MX_ADC_Init+0x250>)
 8000f2e:	0011      	movs	r1, r2
 8000f30:	0018      	movs	r0, r3
 8000f32:	f001 f8b7 	bl	80020a4 <HAL_ADC_ConfigChannel>
 8000f36:	1e03      	subs	r3, r0, #0
 8000f38:	d001      	beq.n	8000f3e <MX_ADC_Init+0x176>
  {
    Error_Handler();
 8000f3a:	f000 fb29 	bl	8001590 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	220a      	movs	r2, #10
 8000f42:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f44:	1d3a      	adds	r2, r7, #4
 8000f46:	4b34      	ldr	r3, [pc, #208]	; (8001018 <MX_ADC_Init+0x250>)
 8000f48:	0011      	movs	r1, r2
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f001 f8aa 	bl	80020a4 <HAL_ADC_ConfigChannel>
 8000f50:	1e03      	subs	r3, r0, #0
 8000f52:	d001      	beq.n	8000f58 <MX_ADC_Init+0x190>
  {
    Error_Handler();
 8000f54:	f000 fb1c 	bl	8001590 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	220b      	movs	r2, #11
 8000f5c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f5e:	1d3a      	adds	r2, r7, #4
 8000f60:	4b2d      	ldr	r3, [pc, #180]	; (8001018 <MX_ADC_Init+0x250>)
 8000f62:	0011      	movs	r1, r2
 8000f64:	0018      	movs	r0, r3
 8000f66:	f001 f89d 	bl	80020a4 <HAL_ADC_ConfigChannel>
 8000f6a:	1e03      	subs	r3, r0, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_ADC_Init+0x1aa>
  {
    Error_Handler();
 8000f6e:	f000 fb0f 	bl	8001590 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	220c      	movs	r2, #12
 8000f76:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f78:	1d3a      	adds	r2, r7, #4
 8000f7a:	4b27      	ldr	r3, [pc, #156]	; (8001018 <MX_ADC_Init+0x250>)
 8000f7c:	0011      	movs	r1, r2
 8000f7e:	0018      	movs	r0, r3
 8000f80:	f001 f890 	bl	80020a4 <HAL_ADC_ConfigChannel>
 8000f84:	1e03      	subs	r3, r0, #0
 8000f86:	d001      	beq.n	8000f8c <MX_ADC_Init+0x1c4>
  {
    Error_Handler();
 8000f88:	f000 fb02 	bl	8001590 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	220d      	movs	r2, #13
 8000f90:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f92:	1d3a      	adds	r2, r7, #4
 8000f94:	4b20      	ldr	r3, [pc, #128]	; (8001018 <MX_ADC_Init+0x250>)
 8000f96:	0011      	movs	r1, r2
 8000f98:	0018      	movs	r0, r3
 8000f9a:	f001 f883 	bl	80020a4 <HAL_ADC_ConfigChannel>
 8000f9e:	1e03      	subs	r3, r0, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_ADC_Init+0x1de>
  {
    Error_Handler();
 8000fa2:	f000 faf5 	bl	8001590 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	220e      	movs	r2, #14
 8000faa:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000fac:	1d3a      	adds	r2, r7, #4
 8000fae:	4b1a      	ldr	r3, [pc, #104]	; (8001018 <MX_ADC_Init+0x250>)
 8000fb0:	0011      	movs	r1, r2
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	f001 f876 	bl	80020a4 <HAL_ADC_ConfigChannel>
 8000fb8:	1e03      	subs	r3, r0, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_ADC_Init+0x1f8>
  {
    Error_Handler();
 8000fbc:	f000 fae8 	bl	8001590 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000fc0:	1d3b      	adds	r3, r7, #4
 8000fc2:	220f      	movs	r2, #15
 8000fc4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000fc6:	1d3a      	adds	r2, r7, #4
 8000fc8:	4b13      	ldr	r3, [pc, #76]	; (8001018 <MX_ADC_Init+0x250>)
 8000fca:	0011      	movs	r1, r2
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f001 f869 	bl	80020a4 <HAL_ADC_ConfigChannel>
 8000fd2:	1e03      	subs	r3, r0, #0
 8000fd4:	d001      	beq.n	8000fda <MX_ADC_Init+0x212>
  {
    Error_Handler();
 8000fd6:	f000 fadb 	bl	8001590 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000fda:	1d3b      	adds	r3, r7, #4
 8000fdc:	2210      	movs	r2, #16
 8000fde:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000fe0:	1d3a      	adds	r2, r7, #4
 8000fe2:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <MX_ADC_Init+0x250>)
 8000fe4:	0011      	movs	r1, r2
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	f001 f85c 	bl	80020a4 <HAL_ADC_ConfigChannel>
 8000fec:	1e03      	subs	r3, r0, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_ADC_Init+0x22c>
  {
    Error_Handler();
 8000ff0:	f000 face 	bl	8001590 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000ff4:	1d3b      	adds	r3, r7, #4
 8000ff6:	2211      	movs	r2, #17
 8000ff8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ffa:	1d3a      	adds	r2, r7, #4
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <MX_ADC_Init+0x250>)
 8000ffe:	0011      	movs	r1, r2
 8001000:	0018      	movs	r0, r3
 8001002:	f001 f84f 	bl	80020a4 <HAL_ADC_ConfigChannel>
 8001006:	1e03      	subs	r3, r0, #0
 8001008:	d001      	beq.n	800100e <MX_ADC_Init+0x246>
  {
    Error_Handler();
 800100a:	f000 fac1 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800100e:	46c0      	nop			; (mov r8, r8)
 8001010:	46bd      	mov	sp, r7
 8001012:	b004      	add	sp, #16
 8001014:	bd80      	pop	{r7, pc}
 8001016:	46c0      	nop			; (mov r8, r8)
 8001018:	20000044 	.word	0x20000044
 800101c:	40012400 	.word	0x40012400

08001020 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */
  step = 0;
 8001026:	4b14      	ldr	r3, [pc, #80]	; (8001078 <MX_DAC1_Init+0x58>)
 8001028:	2200      	movs	r2, #0
 800102a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800102c:	003b      	movs	r3, r7
 800102e:	0018      	movs	r0, r3
 8001030:	2308      	movs	r3, #8
 8001032:	001a      	movs	r2, r3
 8001034:	2100      	movs	r1, #0
 8001036:	f005 fe67 	bl	8006d08 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC;
 800103a:	4b10      	ldr	r3, [pc, #64]	; (800107c <MX_DAC1_Init+0x5c>)
 800103c:	4a10      	ldr	r2, [pc, #64]	; (8001080 <MX_DAC1_Init+0x60>)
 800103e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001040:	4b0e      	ldr	r3, [pc, #56]	; (800107c <MX_DAC1_Init+0x5c>)
 8001042:	0018      	movs	r0, r3
 8001044:	f001 fb22 	bl	800268c <HAL_DAC_Init>
 8001048:	1e03      	subs	r3, r0, #0
 800104a:	d001      	beq.n	8001050 <MX_DAC1_Init+0x30>
  {
    Error_Handler();
 800104c:	f000 faa0 	bl	8001590 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001050:	003b      	movs	r3, r7
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001056:	003b      	movs	r3, r7
 8001058:	2200      	movs	r2, #0
 800105a:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800105c:	0039      	movs	r1, r7
 800105e:	4b07      	ldr	r3, [pc, #28]	; (800107c <MX_DAC1_Init+0x5c>)
 8001060:	2200      	movs	r2, #0
 8001062:	0018      	movs	r0, r3
 8001064:	f001 fb35 	bl	80026d2 <HAL_DAC_ConfigChannel>
 8001068:	1e03      	subs	r3, r0, #0
 800106a:	d001      	beq.n	8001070 <MX_DAC1_Init+0x50>
  {
    Error_Handler();
 800106c:	f000 fa90 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001070:	46c0      	nop			; (mov r8, r8)
 8001072:	46bd      	mov	sp, r7
 8001074:	b002      	add	sp, #8
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000392 	.word	0x20000392
 800107c:	200000c8 	.word	0x200000c8
 8001080:	40007400 	.word	0x40007400

08001084 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001088:	4b1b      	ldr	r3, [pc, #108]	; (80010f8 <MX_I2C1_Init+0x74>)
 800108a:	4a1c      	ldr	r2, [pc, #112]	; (80010fc <MX_I2C1_Init+0x78>)
 800108c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800108e:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <MX_I2C1_Init+0x74>)
 8001090:	4a1b      	ldr	r2, [pc, #108]	; (8001100 <MX_I2C1_Init+0x7c>)
 8001092:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001094:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <MX_I2C1_Init+0x74>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800109a:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <MX_I2C1_Init+0x74>)
 800109c:	2201      	movs	r2, #1
 800109e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010a0:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <MX_I2C1_Init+0x74>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010a6:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <MX_I2C1_Init+0x74>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010ac:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <MX_I2C1_Init+0x74>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010b2:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <MX_I2C1_Init+0x74>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010b8:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <MX_I2C1_Init+0x74>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <MX_I2C1_Init+0x74>)
 80010c0:	0018      	movs	r0, r3
 80010c2:	f001 ff21 	bl	8002f08 <HAL_I2C_Init>
 80010c6:	1e03      	subs	r3, r0, #0
 80010c8:	d001      	beq.n	80010ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010ca:	f000 fa61 	bl	8001590 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010ce:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <MX_I2C1_Init+0x74>)
 80010d0:	2100      	movs	r1, #0
 80010d2:	0018      	movs	r0, r3
 80010d4:	f002 fbb6 	bl	8003844 <HAL_I2CEx_ConfigAnalogFilter>
 80010d8:	1e03      	subs	r3, r0, #0
 80010da:	d001      	beq.n	80010e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010dc:	f000 fa58 	bl	8001590 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <MX_I2C1_Init+0x74>)
 80010e2:	2100      	movs	r1, #0
 80010e4:	0018      	movs	r0, r3
 80010e6:	f002 fbf9 	bl	80038dc <HAL_I2CEx_ConfigDigitalFilter>
 80010ea:	1e03      	subs	r3, r0, #0
 80010ec:	d001      	beq.n	80010f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010ee:	f000 fa4f 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010f2:	46c0      	nop			; (mov r8, r8)
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	200000dc 	.word	0x200000dc
 80010fc:	40005400 	.word	0x40005400
 8001100:	2000090e 	.word	0x2000090e

08001104 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001108:	4b1c      	ldr	r3, [pc, #112]	; (800117c <MX_SPI1_Init+0x78>)
 800110a:	4a1d      	ldr	r2, [pc, #116]	; (8001180 <MX_SPI1_Init+0x7c>)
 800110c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800110e:	4b1b      	ldr	r3, [pc, #108]	; (800117c <MX_SPI1_Init+0x78>)
 8001110:	2282      	movs	r2, #130	; 0x82
 8001112:	0052      	lsls	r2, r2, #1
 8001114:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001116:	4b19      	ldr	r3, [pc, #100]	; (800117c <MX_SPI1_Init+0x78>)
 8001118:	2280      	movs	r2, #128	; 0x80
 800111a:	00d2      	lsls	r2, r2, #3
 800111c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800111e:	4b17      	ldr	r3, [pc, #92]	; (800117c <MX_SPI1_Init+0x78>)
 8001120:	22f0      	movs	r2, #240	; 0xf0
 8001122:	0112      	lsls	r2, r2, #4
 8001124:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001126:	4b15      	ldr	r3, [pc, #84]	; (800117c <MX_SPI1_Init+0x78>)
 8001128:	2200      	movs	r2, #0
 800112a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800112c:	4b13      	ldr	r3, [pc, #76]	; (800117c <MX_SPI1_Init+0x78>)
 800112e:	2200      	movs	r2, #0
 8001130:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001132:	4b12      	ldr	r3, [pc, #72]	; (800117c <MX_SPI1_Init+0x78>)
 8001134:	2280      	movs	r2, #128	; 0x80
 8001136:	0092      	lsls	r2, r2, #2
 8001138:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800113a:	4b10      	ldr	r3, [pc, #64]	; (800117c <MX_SPI1_Init+0x78>)
 800113c:	2218      	movs	r2, #24
 800113e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001140:	4b0e      	ldr	r3, [pc, #56]	; (800117c <MX_SPI1_Init+0x78>)
 8001142:	2200      	movs	r2, #0
 8001144:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001146:	4b0d      	ldr	r3, [pc, #52]	; (800117c <MX_SPI1_Init+0x78>)
 8001148:	2200      	movs	r2, #0
 800114a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800114c:	4b0b      	ldr	r3, [pc, #44]	; (800117c <MX_SPI1_Init+0x78>)
 800114e:	2200      	movs	r2, #0
 8001150:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001152:	4b0a      	ldr	r3, [pc, #40]	; (800117c <MX_SPI1_Init+0x78>)
 8001154:	2207      	movs	r2, #7
 8001156:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001158:	4b08      	ldr	r3, [pc, #32]	; (800117c <MX_SPI1_Init+0x78>)
 800115a:	2200      	movs	r2, #0
 800115c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800115e:	4b07      	ldr	r3, [pc, #28]	; (800117c <MX_SPI1_Init+0x78>)
 8001160:	2208      	movs	r2, #8
 8001162:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <MX_SPI1_Init+0x78>)
 8001166:	0018      	movs	r0, r3
 8001168:	f003 f982 	bl	8004470 <HAL_SPI_Init>
 800116c:	1e03      	subs	r3, r0, #0
 800116e:	d001      	beq.n	8001174 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8001170:	f000 fa0e 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001174:	46c0      	nop			; (mov r8, r8)
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	20000128 	.word	0x20000128
 8001180:	40013000 	.word	0x40013000

08001184 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001188:	4b1c      	ldr	r3, [pc, #112]	; (80011fc <MX_SPI2_Init+0x78>)
 800118a:	4a1d      	ldr	r2, [pc, #116]	; (8001200 <MX_SPI2_Init+0x7c>)
 800118c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800118e:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <MX_SPI2_Init+0x78>)
 8001190:	2282      	movs	r2, #130	; 0x82
 8001192:	0052      	lsls	r2, r2, #1
 8001194:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001196:	4b19      	ldr	r3, [pc, #100]	; (80011fc <MX_SPI2_Init+0x78>)
 8001198:	2280      	movs	r2, #128	; 0x80
 800119a:	00d2      	lsls	r2, r2, #3
 800119c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800119e:	4b17      	ldr	r3, [pc, #92]	; (80011fc <MX_SPI2_Init+0x78>)
 80011a0:	22f0      	movs	r2, #240	; 0xf0
 80011a2:	0112      	lsls	r2, r2, #4
 80011a4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <MX_SPI2_Init+0x78>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011ac:	4b13      	ldr	r3, [pc, #76]	; (80011fc <MX_SPI2_Init+0x78>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80011b2:	4b12      	ldr	r3, [pc, #72]	; (80011fc <MX_SPI2_Init+0x78>)
 80011b4:	2280      	movs	r2, #128	; 0x80
 80011b6:	0092      	lsls	r2, r2, #2
 80011b8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80011ba:	4b10      	ldr	r3, [pc, #64]	; (80011fc <MX_SPI2_Init+0x78>)
 80011bc:	2218      	movs	r2, #24
 80011be:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011c0:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <MX_SPI2_Init+0x78>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80011c6:	4b0d      	ldr	r3, [pc, #52]	; (80011fc <MX_SPI2_Init+0x78>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011cc:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <MX_SPI2_Init+0x78>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <MX_SPI2_Init+0x78>)
 80011d4:	2207      	movs	r2, #7
 80011d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011d8:	4b08      	ldr	r3, [pc, #32]	; (80011fc <MX_SPI2_Init+0x78>)
 80011da:	2200      	movs	r2, #0
 80011dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011de:	4b07      	ldr	r3, [pc, #28]	; (80011fc <MX_SPI2_Init+0x78>)
 80011e0:	2208      	movs	r2, #8
 80011e2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011e4:	4b05      	ldr	r3, [pc, #20]	; (80011fc <MX_SPI2_Init+0x78>)
 80011e6:	0018      	movs	r0, r3
 80011e8:	f003 f942 	bl	8004470 <HAL_SPI_Init>
 80011ec:	1e03      	subs	r3, r0, #0
 80011ee:	d001      	beq.n	80011f4 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 80011f0:	f000 f9ce 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80011f4:	46c0      	nop			; (mov r8, r8)
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	46c0      	nop			; (mov r8, r8)
 80011fc:	2000018c 	.word	0x2000018c
 8001200:	40003800 	.word	0x40003800

08001204 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800120a:	2308      	movs	r3, #8
 800120c:	18fb      	adds	r3, r7, r3
 800120e:	0018      	movs	r0, r3
 8001210:	2310      	movs	r3, #16
 8001212:	001a      	movs	r2, r3
 8001214:	2100      	movs	r1, #0
 8001216:	f005 fd77 	bl	8006d08 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800121a:	003b      	movs	r3, r7
 800121c:	0018      	movs	r0, r3
 800121e:	2308      	movs	r3, #8
 8001220:	001a      	movs	r2, r3
 8001222:	2100      	movs	r1, #0
 8001224:	f005 fd70 	bl	8006d08 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001228:	4b1f      	ldr	r3, [pc, #124]	; (80012a8 <MX_TIM1_Init+0xa4>)
 800122a:	4a20      	ldr	r2, [pc, #128]	; (80012ac <MX_TIM1_Init+0xa8>)
 800122c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100 - 1;
 800122e:	4b1e      	ldr	r3, [pc, #120]	; (80012a8 <MX_TIM1_Init+0xa4>)
 8001230:	2263      	movs	r2, #99	; 0x63
 8001232:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001234:	4b1c      	ldr	r3, [pc, #112]	; (80012a8 <MX_TIM1_Init+0xa4>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24000 - 1;
 800123a:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <MX_TIM1_Init+0xa4>)
 800123c:	4a1c      	ldr	r2, [pc, #112]	; (80012b0 <MX_TIM1_Init+0xac>)
 800123e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001240:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <MX_TIM1_Init+0xa4>)
 8001242:	2200      	movs	r2, #0
 8001244:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001246:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <MX_TIM1_Init+0xa4>)
 8001248:	2200      	movs	r2, #0
 800124a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800124c:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <MX_TIM1_Init+0xa4>)
 800124e:	2280      	movs	r2, #128	; 0x80
 8001250:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001252:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <MX_TIM1_Init+0xa4>)
 8001254:	0018      	movs	r0, r3
 8001256:	f003 fc91 	bl	8004b7c <HAL_TIM_Base_Init>
 800125a:	1e03      	subs	r3, r0, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 800125e:	f000 f997 	bl	8001590 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001262:	2108      	movs	r1, #8
 8001264:	187b      	adds	r3, r7, r1
 8001266:	2280      	movs	r2, #128	; 0x80
 8001268:	0152      	lsls	r2, r2, #5
 800126a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800126c:	187a      	adds	r2, r7, r1
 800126e:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <MX_TIM1_Init+0xa4>)
 8001270:	0011      	movs	r1, r2
 8001272:	0018      	movs	r0, r3
 8001274:	f003 fee8 	bl	8005048 <HAL_TIM_ConfigClockSource>
 8001278:	1e03      	subs	r3, r0, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800127c:	f000 f988 	bl	8001590 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001280:	003b      	movs	r3, r7
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001286:	003b      	movs	r3, r7
 8001288:	2200      	movs	r2, #0
 800128a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800128c:	003a      	movs	r2, r7
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <MX_TIM1_Init+0xa4>)
 8001290:	0011      	movs	r1, r2
 8001292:	0018      	movs	r0, r3
 8001294:	f004 f90a 	bl	80054ac <HAL_TIMEx_MasterConfigSynchronization>
 8001298:	1e03      	subs	r3, r0, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800129c:	f000 f978 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012a0:	46c0      	nop			; (mov r8, r8)
 80012a2:	46bd      	mov	sp, r7
 80012a4:	b006      	add	sp, #24
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	200001f0 	.word	0x200001f0
 80012ac:	40012c00 	.word	0x40012c00
 80012b0:	00005dbf 	.word	0x00005dbf

080012b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ba:	2308      	movs	r3, #8
 80012bc:	18fb      	adds	r3, r7, r3
 80012be:	0018      	movs	r0, r3
 80012c0:	2310      	movs	r3, #16
 80012c2:	001a      	movs	r2, r3
 80012c4:	2100      	movs	r1, #0
 80012c6:	f005 fd1f 	bl	8006d08 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ca:	003b      	movs	r3, r7
 80012cc:	0018      	movs	r0, r3
 80012ce:	2308      	movs	r3, #8
 80012d0:	001a      	movs	r2, r3
 80012d2:	2100      	movs	r1, #0
 80012d4:	f005 fd18 	bl	8006d08 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012d8:	4b1e      	ldr	r3, [pc, #120]	; (8001354 <MX_TIM2_Init+0xa0>)
 80012da:	2280      	movs	r2, #128	; 0x80
 80012dc:	05d2      	lsls	r2, r2, #23
 80012de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100 - 1;
 80012e0:	4b1c      	ldr	r3, [pc, #112]	; (8001354 <MX_TIM2_Init+0xa0>)
 80012e2:	2263      	movs	r2, #99	; 0x63
 80012e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e6:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <MX_TIM2_Init+0xa0>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 24000 - 1;
 80012ec:	4b19      	ldr	r3, [pc, #100]	; (8001354 <MX_TIM2_Init+0xa0>)
 80012ee:	4a1a      	ldr	r2, [pc, #104]	; (8001358 <MX_TIM2_Init+0xa4>)
 80012f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f2:	4b18      	ldr	r3, [pc, #96]	; (8001354 <MX_TIM2_Init+0xa0>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012f8:	4b16      	ldr	r3, [pc, #88]	; (8001354 <MX_TIM2_Init+0xa0>)
 80012fa:	2280      	movs	r2, #128	; 0x80
 80012fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012fe:	4b15      	ldr	r3, [pc, #84]	; (8001354 <MX_TIM2_Init+0xa0>)
 8001300:	0018      	movs	r0, r3
 8001302:	f003 fc3b 	bl	8004b7c <HAL_TIM_Base_Init>
 8001306:	1e03      	subs	r3, r0, #0
 8001308:	d001      	beq.n	800130e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800130a:	f000 f941 	bl	8001590 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800130e:	2108      	movs	r1, #8
 8001310:	187b      	adds	r3, r7, r1
 8001312:	2280      	movs	r2, #128	; 0x80
 8001314:	0152      	lsls	r2, r2, #5
 8001316:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001318:	187a      	adds	r2, r7, r1
 800131a:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <MX_TIM2_Init+0xa0>)
 800131c:	0011      	movs	r1, r2
 800131e:	0018      	movs	r0, r3
 8001320:	f003 fe92 	bl	8005048 <HAL_TIM_ConfigClockSource>
 8001324:	1e03      	subs	r3, r0, #0
 8001326:	d001      	beq.n	800132c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001328:	f000 f932 	bl	8001590 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800132c:	003b      	movs	r3, r7
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001332:	003b      	movs	r3, r7
 8001334:	2200      	movs	r2, #0
 8001336:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001338:	003a      	movs	r2, r7
 800133a:	4b06      	ldr	r3, [pc, #24]	; (8001354 <MX_TIM2_Init+0xa0>)
 800133c:	0011      	movs	r1, r2
 800133e:	0018      	movs	r0, r3
 8001340:	f004 f8b4 	bl	80054ac <HAL_TIMEx_MasterConfigSynchronization>
 8001344:	1e03      	subs	r3, r0, #0
 8001346:	d001      	beq.n	800134c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001348:	f000 f922 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */

}
 800134c:	46c0      	nop			; (mov r8, r8)
 800134e:	46bd      	mov	sp, r7
 8001350:	b006      	add	sp, #24
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20000238 	.word	0x20000238
 8001358:	00005dbf 	.word	0x00005dbf

0800135c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */
  erpa_seq = 0;
 8001360:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <MX_USART1_UART_Init+0x6c>)
 8001362:	2200      	movs	r2, #0
 8001364:	801a      	strh	r2, [r3, #0]
  pmt_seq = 0;
 8001366:	4b19      	ldr	r3, [pc, #100]	; (80013cc <MX_USART1_UART_Init+0x70>)
 8001368:	2200      	movs	r2, #0
 800136a:	801a      	strh	r2, [r3, #0]
  hk_seq = 0;
 800136c:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <MX_USART1_UART_Init+0x74>)
 800136e:	2200      	movs	r2, #0
 8001370:	801a      	strh	r2, [r3, #0]
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001372:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <MX_USART1_UART_Init+0x78>)
 8001374:	4a18      	ldr	r2, [pc, #96]	; (80013d8 <MX_USART1_UART_Init+0x7c>)
 8001376:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001378:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <MX_USART1_UART_Init+0x78>)
 800137a:	22e1      	movs	r2, #225	; 0xe1
 800137c:	0212      	lsls	r2, r2, #8
 800137e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001380:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <MX_USART1_UART_Init+0x78>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001386:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <MX_USART1_UART_Init+0x78>)
 8001388:	2200      	movs	r2, #0
 800138a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800138c:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <MX_USART1_UART_Init+0x78>)
 800138e:	2200      	movs	r2, #0
 8001390:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001392:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <MX_USART1_UART_Init+0x78>)
 8001394:	220c      	movs	r2, #12
 8001396:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001398:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <MX_USART1_UART_Init+0x78>)
 800139a:	2200      	movs	r2, #0
 800139c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800139e:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <MX_USART1_UART_Init+0x78>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013a4:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <MX_USART1_UART_Init+0x78>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013aa:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <MX_USART1_UART_Init+0x78>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013b0:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <MX_USART1_UART_Init+0x78>)
 80013b2:	0018      	movs	r0, r3
 80013b4:	f004 f8e8 	bl	8005588 <HAL_UART_Init>
 80013b8:	1e03      	subs	r3, r0, #0
 80013ba:	d001      	beq.n	80013c0 <MX_USART1_UART_Init+0x64>
  {
    Error_Handler();
 80013bc:	f000 f8e8 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013c0:	46c0      	nop			; (mov r8, r8)
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	46c0      	nop			; (mov r8, r8)
 80013c8:	200003ac 	.word	0x200003ac
 80013cc:	200003b6 	.word	0x200003b6
 80013d0:	200003d8 	.word	0x200003d8
 80013d4:	20000280 	.word	0x20000280
 80013d8:	40013800 	.word	0x40013800

080013dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013e2:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <MX_DMA_Init+0x38>)
 80013e4:	695a      	ldr	r2, [r3, #20]
 80013e6:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <MX_DMA_Init+0x38>)
 80013e8:	2101      	movs	r1, #1
 80013ea:	430a      	orrs	r2, r1
 80013ec:	615a      	str	r2, [r3, #20]
 80013ee:	4b09      	ldr	r3, [pc, #36]	; (8001414 <MX_DMA_Init+0x38>)
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	2201      	movs	r2, #1
 80013f4:	4013      	ands	r3, r2
 80013f6:	607b      	str	r3, [r7, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2100      	movs	r1, #0
 80013fe:	2009      	movs	r0, #9
 8001400:	f001 f912 	bl	8002628 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001404:	2009      	movs	r0, #9
 8001406:	f001 f924 	bl	8002652 <HAL_NVIC_EnableIRQ>

}
 800140a:	46c0      	nop			; (mov r8, r8)
 800140c:	46bd      	mov	sp, r7
 800140e:	b002      	add	sp, #8
 8001410:	bd80      	pop	{r7, pc}
 8001412:	46c0      	nop			; (mov r8, r8)
 8001414:	40021000 	.word	0x40021000

08001418 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001418:	b590      	push	{r4, r7, lr}
 800141a:	b08b      	sub	sp, #44	; 0x2c
 800141c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141e:	2414      	movs	r4, #20
 8001420:	193b      	adds	r3, r7, r4
 8001422:	0018      	movs	r0, r3
 8001424:	2314      	movs	r3, #20
 8001426:	001a      	movs	r2, r3
 8001428:	2100      	movs	r1, #0
 800142a:	f005 fc6d 	bl	8006d08 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800142e:	4b54      	ldr	r3, [pc, #336]	; (8001580 <MX_GPIO_Init+0x168>)
 8001430:	695a      	ldr	r2, [r3, #20]
 8001432:	4b53      	ldr	r3, [pc, #332]	; (8001580 <MX_GPIO_Init+0x168>)
 8001434:	2180      	movs	r1, #128	; 0x80
 8001436:	0309      	lsls	r1, r1, #12
 8001438:	430a      	orrs	r2, r1
 800143a:	615a      	str	r2, [r3, #20]
 800143c:	4b50      	ldr	r3, [pc, #320]	; (8001580 <MX_GPIO_Init+0x168>)
 800143e:	695a      	ldr	r2, [r3, #20]
 8001440:	2380      	movs	r3, #128	; 0x80
 8001442:	031b      	lsls	r3, r3, #12
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
 8001448:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800144a:	4b4d      	ldr	r3, [pc, #308]	; (8001580 <MX_GPIO_Init+0x168>)
 800144c:	695a      	ldr	r2, [r3, #20]
 800144e:	4b4c      	ldr	r3, [pc, #304]	; (8001580 <MX_GPIO_Init+0x168>)
 8001450:	2180      	movs	r1, #128	; 0x80
 8001452:	03c9      	lsls	r1, r1, #15
 8001454:	430a      	orrs	r2, r1
 8001456:	615a      	str	r2, [r3, #20]
 8001458:	4b49      	ldr	r3, [pc, #292]	; (8001580 <MX_GPIO_Init+0x168>)
 800145a:	695a      	ldr	r2, [r3, #20]
 800145c:	2380      	movs	r3, #128	; 0x80
 800145e:	03db      	lsls	r3, r3, #15
 8001460:	4013      	ands	r3, r2
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001466:	4b46      	ldr	r3, [pc, #280]	; (8001580 <MX_GPIO_Init+0x168>)
 8001468:	695a      	ldr	r2, [r3, #20]
 800146a:	4b45      	ldr	r3, [pc, #276]	; (8001580 <MX_GPIO_Init+0x168>)
 800146c:	2180      	movs	r1, #128	; 0x80
 800146e:	0289      	lsls	r1, r1, #10
 8001470:	430a      	orrs	r2, r1
 8001472:	615a      	str	r2, [r3, #20]
 8001474:	4b42      	ldr	r3, [pc, #264]	; (8001580 <MX_GPIO_Init+0x168>)
 8001476:	695a      	ldr	r2, [r3, #20]
 8001478:	2380      	movs	r3, #128	; 0x80
 800147a:	029b      	lsls	r3, r3, #10
 800147c:	4013      	ands	r3, r2
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001482:	4b3f      	ldr	r3, [pc, #252]	; (8001580 <MX_GPIO_Init+0x168>)
 8001484:	695a      	ldr	r2, [r3, #20]
 8001486:	4b3e      	ldr	r3, [pc, #248]	; (8001580 <MX_GPIO_Init+0x168>)
 8001488:	2180      	movs	r1, #128	; 0x80
 800148a:	02c9      	lsls	r1, r1, #11
 800148c:	430a      	orrs	r2, r1
 800148e:	615a      	str	r2, [r3, #20]
 8001490:	4b3b      	ldr	r3, [pc, #236]	; (8001580 <MX_GPIO_Init+0x168>)
 8001492:	695a      	ldr	r2, [r3, #20]
 8001494:	2380      	movs	r3, #128	; 0x80
 8001496:	02db      	lsls	r3, r3, #11
 8001498:	4013      	ands	r3, r2
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800149e:	239f      	movs	r3, #159	; 0x9f
 80014a0:	019b      	lsls	r3, r3, #6
 80014a2:	4838      	ldr	r0, [pc, #224]	; (8001584 <MX_GPIO_Init+0x16c>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	0019      	movs	r1, r3
 80014a8:	f001 fd10 	bl	8002ecc <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80014ac:	2386      	movs	r3, #134	; 0x86
 80014ae:	011b      	lsls	r3, r3, #4
 80014b0:	4835      	ldr	r0, [pc, #212]	; (8001588 <MX_GPIO_Init+0x170>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	0019      	movs	r1, r3
 80014b6:	f001 fd09 	bl	8002ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80014ba:	2380      	movs	r3, #128	; 0x80
 80014bc:	0059      	lsls	r1, r3, #1
 80014be:	2390      	movs	r3, #144	; 0x90
 80014c0:	05db      	lsls	r3, r3, #23
 80014c2:	2200      	movs	r2, #0
 80014c4:	0018      	movs	r0, r3
 80014c6:	f001 fd01 	bl	8002ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80014ca:	4b30      	ldr	r3, [pc, #192]	; (800158c <MX_GPIO_Init+0x174>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	21c0      	movs	r1, #192	; 0xc0
 80014d0:	0018      	movs	r0, r3
 80014d2:	f001 fcfb 	bl	8002ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80014d6:	193b      	adds	r3, r7, r4
 80014d8:	229f      	movs	r2, #159	; 0x9f
 80014da:	0192      	lsls	r2, r2, #6
 80014dc:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014de:	193b      	adds	r3, r7, r4
 80014e0:	2201      	movs	r2, #1
 80014e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	193b      	adds	r3, r7, r4
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ea:	193b      	adds	r3, r7, r4
 80014ec:	2200      	movs	r2, #0
 80014ee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f0:	193b      	adds	r3, r7, r4
 80014f2:	4a24      	ldr	r2, [pc, #144]	; (8001584 <MX_GPIO_Init+0x16c>)
 80014f4:	0019      	movs	r1, r3
 80014f6:	0010      	movs	r0, r2
 80014f8:	f001 fb78 	bl	8002bec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_5|GPIO_PIN_6;
 80014fc:	0021      	movs	r1, r4
 80014fe:	187b      	adds	r3, r7, r1
 8001500:	2286      	movs	r2, #134	; 0x86
 8001502:	0112      	lsls	r2, r2, #4
 8001504:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001506:	000c      	movs	r4, r1
 8001508:	193b      	adds	r3, r7, r4
 800150a:	2201      	movs	r2, #1
 800150c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	193b      	adds	r3, r7, r4
 8001510:	2200      	movs	r2, #0
 8001512:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001514:	193b      	adds	r3, r7, r4
 8001516:	2200      	movs	r2, #0
 8001518:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151a:	193b      	adds	r3, r7, r4
 800151c:	4a1a      	ldr	r2, [pc, #104]	; (8001588 <MX_GPIO_Init+0x170>)
 800151e:	0019      	movs	r1, r3
 8001520:	0010      	movs	r0, r2
 8001522:	f001 fb63 	bl	8002bec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001526:	0021      	movs	r1, r4
 8001528:	187b      	adds	r3, r7, r1
 800152a:	2280      	movs	r2, #128	; 0x80
 800152c:	0052      	lsls	r2, r2, #1
 800152e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001530:	000c      	movs	r4, r1
 8001532:	193b      	adds	r3, r7, r4
 8001534:	2201      	movs	r2, #1
 8001536:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	193b      	adds	r3, r7, r4
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153e:	193b      	adds	r3, r7, r4
 8001540:	2200      	movs	r2, #0
 8001542:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001544:	193a      	adds	r2, r7, r4
 8001546:	2390      	movs	r3, #144	; 0x90
 8001548:	05db      	lsls	r3, r3, #23
 800154a:	0011      	movs	r1, r2
 800154c:	0018      	movs	r0, r3
 800154e:	f001 fb4d 	bl	8002bec <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001552:	0021      	movs	r1, r4
 8001554:	187b      	adds	r3, r7, r1
 8001556:	22c0      	movs	r2, #192	; 0xc0
 8001558:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155a:	187b      	adds	r3, r7, r1
 800155c:	2201      	movs	r2, #1
 800155e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	187b      	adds	r3, r7, r1
 8001562:	2200      	movs	r2, #0
 8001564:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001566:	187b      	adds	r3, r7, r1
 8001568:	2200      	movs	r2, #0
 800156a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800156c:	187b      	adds	r3, r7, r1
 800156e:	4a07      	ldr	r2, [pc, #28]	; (800158c <MX_GPIO_Init+0x174>)
 8001570:	0019      	movs	r1, r3
 8001572:	0010      	movs	r0, r2
 8001574:	f001 fb3a 	bl	8002bec <HAL_GPIO_Init>

}
 8001578:	46c0      	nop			; (mov r8, r8)
 800157a:	46bd      	mov	sp, r7
 800157c:	b00b      	add	sp, #44	; 0x2c
 800157e:	bd90      	pop	{r4, r7, pc}
 8001580:	40021000 	.word	0x40021000
 8001584:	48000800 	.word	0x48000800
 8001588:	48000400 	.word	0x48000400
 800158c:	48001400 	.word	0x48001400

08001590 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001594:	b672      	cpsid	i
}
 8001596:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001598:	e7fe      	b.n	8001598 <Error_Handler+0x8>
	...

0800159c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a2:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <HAL_MspInit+0x44>)
 80015a4:	699a      	ldr	r2, [r3, #24]
 80015a6:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <HAL_MspInit+0x44>)
 80015a8:	2101      	movs	r1, #1
 80015aa:	430a      	orrs	r2, r1
 80015ac:	619a      	str	r2, [r3, #24]
 80015ae:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <HAL_MspInit+0x44>)
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	2201      	movs	r2, #1
 80015b4:	4013      	ands	r3, r2
 80015b6:	607b      	str	r3, [r7, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ba:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <HAL_MspInit+0x44>)
 80015bc:	69da      	ldr	r2, [r3, #28]
 80015be:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <HAL_MspInit+0x44>)
 80015c0:	2180      	movs	r1, #128	; 0x80
 80015c2:	0549      	lsls	r1, r1, #21
 80015c4:	430a      	orrs	r2, r1
 80015c6:	61da      	str	r2, [r3, #28]
 80015c8:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <HAL_MspInit+0x44>)
 80015ca:	69da      	ldr	r2, [r3, #28]
 80015cc:	2380      	movs	r3, #128	; 0x80
 80015ce:	055b      	lsls	r3, r3, #21
 80015d0:	4013      	ands	r3, r2
 80015d2:	603b      	str	r3, [r7, #0]
 80015d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015d6:	46c0      	nop			; (mov r8, r8)
 80015d8:	46bd      	mov	sp, r7
 80015da:	b002      	add	sp, #8
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	46c0      	nop			; (mov r8, r8)
 80015e0:	40021000 	.word	0x40021000

080015e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015e4:	b590      	push	{r4, r7, lr}
 80015e6:	b08d      	sub	sp, #52	; 0x34
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ec:	241c      	movs	r4, #28
 80015ee:	193b      	adds	r3, r7, r4
 80015f0:	0018      	movs	r0, r3
 80015f2:	2314      	movs	r3, #20
 80015f4:	001a      	movs	r2, r3
 80015f6:	2100      	movs	r1, #0
 80015f8:	f005 fb86 	bl	8006d08 <memset>
  if(hadc->Instance==ADC1)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a4a      	ldr	r2, [pc, #296]	; (800172c <HAL_ADC_MspInit+0x148>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d000      	beq.n	8001608 <HAL_ADC_MspInit+0x24>
 8001606:	e08d      	b.n	8001724 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001608:	4b49      	ldr	r3, [pc, #292]	; (8001730 <HAL_ADC_MspInit+0x14c>)
 800160a:	699a      	ldr	r2, [r3, #24]
 800160c:	4b48      	ldr	r3, [pc, #288]	; (8001730 <HAL_ADC_MspInit+0x14c>)
 800160e:	2180      	movs	r1, #128	; 0x80
 8001610:	0089      	lsls	r1, r1, #2
 8001612:	430a      	orrs	r2, r1
 8001614:	619a      	str	r2, [r3, #24]
 8001616:	4b46      	ldr	r3, [pc, #280]	; (8001730 <HAL_ADC_MspInit+0x14c>)
 8001618:	699a      	ldr	r2, [r3, #24]
 800161a:	2380      	movs	r3, #128	; 0x80
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4013      	ands	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
 8001622:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001624:	4b42      	ldr	r3, [pc, #264]	; (8001730 <HAL_ADC_MspInit+0x14c>)
 8001626:	695a      	ldr	r2, [r3, #20]
 8001628:	4b41      	ldr	r3, [pc, #260]	; (8001730 <HAL_ADC_MspInit+0x14c>)
 800162a:	2180      	movs	r1, #128	; 0x80
 800162c:	0309      	lsls	r1, r1, #12
 800162e:	430a      	orrs	r2, r1
 8001630:	615a      	str	r2, [r3, #20]
 8001632:	4b3f      	ldr	r3, [pc, #252]	; (8001730 <HAL_ADC_MspInit+0x14c>)
 8001634:	695a      	ldr	r2, [r3, #20]
 8001636:	2380      	movs	r3, #128	; 0x80
 8001638:	031b      	lsls	r3, r3, #12
 800163a:	4013      	ands	r3, r2
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001640:	4b3b      	ldr	r3, [pc, #236]	; (8001730 <HAL_ADC_MspInit+0x14c>)
 8001642:	695a      	ldr	r2, [r3, #20]
 8001644:	4b3a      	ldr	r3, [pc, #232]	; (8001730 <HAL_ADC_MspInit+0x14c>)
 8001646:	2180      	movs	r1, #128	; 0x80
 8001648:	0289      	lsls	r1, r1, #10
 800164a:	430a      	orrs	r2, r1
 800164c:	615a      	str	r2, [r3, #20]
 800164e:	4b38      	ldr	r3, [pc, #224]	; (8001730 <HAL_ADC_MspInit+0x14c>)
 8001650:	695a      	ldr	r2, [r3, #20]
 8001652:	2380      	movs	r3, #128	; 0x80
 8001654:	029b      	lsls	r3, r3, #10
 8001656:	4013      	ands	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
 800165a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800165c:	4b34      	ldr	r3, [pc, #208]	; (8001730 <HAL_ADC_MspInit+0x14c>)
 800165e:	695a      	ldr	r2, [r3, #20]
 8001660:	4b33      	ldr	r3, [pc, #204]	; (8001730 <HAL_ADC_MspInit+0x14c>)
 8001662:	2180      	movs	r1, #128	; 0x80
 8001664:	02c9      	lsls	r1, r1, #11
 8001666:	430a      	orrs	r2, r1
 8001668:	615a      	str	r2, [r3, #20]
 800166a:	4b31      	ldr	r3, [pc, #196]	; (8001730 <HAL_ADC_MspInit+0x14c>)
 800166c:	695a      	ldr	r2, [r3, #20]
 800166e:	2380      	movs	r3, #128	; 0x80
 8001670:	02db      	lsls	r3, r3, #11
 8001672:	4013      	ands	r3, r2
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001678:	193b      	adds	r3, r7, r4
 800167a:	223f      	movs	r2, #63	; 0x3f
 800167c:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800167e:	193b      	adds	r3, r7, r4
 8001680:	2203      	movs	r2, #3
 8001682:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	193b      	adds	r3, r7, r4
 8001686:	2200      	movs	r2, #0
 8001688:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800168a:	193b      	adds	r3, r7, r4
 800168c:	4a29      	ldr	r2, [pc, #164]	; (8001734 <HAL_ADC_MspInit+0x150>)
 800168e:	0019      	movs	r1, r3
 8001690:	0010      	movs	r0, r2
 8001692:	f001 faab 	bl	8002bec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001696:	193b      	adds	r3, r7, r4
 8001698:	22ef      	movs	r2, #239	; 0xef
 800169a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800169c:	193b      	adds	r3, r7, r4
 800169e:	2203      	movs	r2, #3
 80016a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	193b      	adds	r3, r7, r4
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a8:	193a      	adds	r2, r7, r4
 80016aa:	2390      	movs	r3, #144	; 0x90
 80016ac:	05db      	lsls	r3, r3, #23
 80016ae:	0011      	movs	r1, r2
 80016b0:	0018      	movs	r0, r3
 80016b2:	f001 fa9b 	bl	8002bec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016b6:	193b      	adds	r3, r7, r4
 80016b8:	2203      	movs	r2, #3
 80016ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016bc:	193b      	adds	r3, r7, r4
 80016be:	2203      	movs	r2, #3
 80016c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	193b      	adds	r3, r7, r4
 80016c4:	2200      	movs	r2, #0
 80016c6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c8:	193b      	adds	r3, r7, r4
 80016ca:	4a1b      	ldr	r2, [pc, #108]	; (8001738 <HAL_ADC_MspInit+0x154>)
 80016cc:	0019      	movs	r1, r3
 80016ce:	0010      	movs	r0, r2
 80016d0:	f001 fa8c 	bl	8002bec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80016d4:	4b19      	ldr	r3, [pc, #100]	; (800173c <HAL_ADC_MspInit+0x158>)
 80016d6:	4a1a      	ldr	r2, [pc, #104]	; (8001740 <HAL_ADC_MspInit+0x15c>)
 80016d8:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016da:	4b18      	ldr	r3, [pc, #96]	; (800173c <HAL_ADC_MspInit+0x158>)
 80016dc:	2200      	movs	r2, #0
 80016de:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80016e0:	4b16      	ldr	r3, [pc, #88]	; (800173c <HAL_ADC_MspInit+0x158>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80016e6:	4b15      	ldr	r3, [pc, #84]	; (800173c <HAL_ADC_MspInit+0x158>)
 80016e8:	2280      	movs	r2, #128	; 0x80
 80016ea:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016ec:	4b13      	ldr	r3, [pc, #76]	; (800173c <HAL_ADC_MspInit+0x158>)
 80016ee:	2280      	movs	r2, #128	; 0x80
 80016f0:	0052      	lsls	r2, r2, #1
 80016f2:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016f4:	4b11      	ldr	r3, [pc, #68]	; (800173c <HAL_ADC_MspInit+0x158>)
 80016f6:	2280      	movs	r2, #128	; 0x80
 80016f8:	00d2      	lsls	r2, r2, #3
 80016fa:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 80016fc:	4b0f      	ldr	r3, [pc, #60]	; (800173c <HAL_ADC_MspInit+0x158>)
 80016fe:	2200      	movs	r2, #0
 8001700:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8001702:	4b0e      	ldr	r3, [pc, #56]	; (800173c <HAL_ADC_MspInit+0x158>)
 8001704:	2200      	movs	r2, #0
 8001706:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001708:	4b0c      	ldr	r3, [pc, #48]	; (800173c <HAL_ADC_MspInit+0x158>)
 800170a:	0018      	movs	r0, r3
 800170c:	f001 f858 	bl	80027c0 <HAL_DMA_Init>
 8001710:	1e03      	subs	r3, r0, #0
 8001712:	d001      	beq.n	8001718 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8001714:	f7ff ff3c 	bl	8001590 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a08      	ldr	r2, [pc, #32]	; (800173c <HAL_ADC_MspInit+0x158>)
 800171c:	631a      	str	r2, [r3, #48]	; 0x30
 800171e:	4b07      	ldr	r3, [pc, #28]	; (800173c <HAL_ADC_MspInit+0x158>)
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001724:	46c0      	nop			; (mov r8, r8)
 8001726:	46bd      	mov	sp, r7
 8001728:	b00d      	add	sp, #52	; 0x34
 800172a:	bd90      	pop	{r4, r7, pc}
 800172c:	40012400 	.word	0x40012400
 8001730:	40021000 	.word	0x40021000
 8001734:	48000800 	.word	0x48000800
 8001738:	48000400 	.word	0x48000400
 800173c:	20000084 	.word	0x20000084
 8001740:	40020008 	.word	0x40020008

08001744 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001744:	b590      	push	{r4, r7, lr}
 8001746:	b08b      	sub	sp, #44	; 0x2c
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174c:	2414      	movs	r4, #20
 800174e:	193b      	adds	r3, r7, r4
 8001750:	0018      	movs	r0, r3
 8001752:	2314      	movs	r3, #20
 8001754:	001a      	movs	r2, r3
 8001756:	2100      	movs	r1, #0
 8001758:	f005 fad6 	bl	8006d08 <memset>
  if(hdac->Instance==DAC)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a19      	ldr	r2, [pc, #100]	; (80017c8 <HAL_DAC_MspInit+0x84>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d12b      	bne.n	80017be <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001766:	4b19      	ldr	r3, [pc, #100]	; (80017cc <HAL_DAC_MspInit+0x88>)
 8001768:	69da      	ldr	r2, [r3, #28]
 800176a:	4b18      	ldr	r3, [pc, #96]	; (80017cc <HAL_DAC_MspInit+0x88>)
 800176c:	2180      	movs	r1, #128	; 0x80
 800176e:	0589      	lsls	r1, r1, #22
 8001770:	430a      	orrs	r2, r1
 8001772:	61da      	str	r2, [r3, #28]
 8001774:	4b15      	ldr	r3, [pc, #84]	; (80017cc <HAL_DAC_MspInit+0x88>)
 8001776:	69da      	ldr	r2, [r3, #28]
 8001778:	2380      	movs	r3, #128	; 0x80
 800177a:	059b      	lsls	r3, r3, #22
 800177c:	4013      	ands	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
 8001780:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001782:	4b12      	ldr	r3, [pc, #72]	; (80017cc <HAL_DAC_MspInit+0x88>)
 8001784:	695a      	ldr	r2, [r3, #20]
 8001786:	4b11      	ldr	r3, [pc, #68]	; (80017cc <HAL_DAC_MspInit+0x88>)
 8001788:	2180      	movs	r1, #128	; 0x80
 800178a:	0289      	lsls	r1, r1, #10
 800178c:	430a      	orrs	r2, r1
 800178e:	615a      	str	r2, [r3, #20]
 8001790:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <HAL_DAC_MspInit+0x88>)
 8001792:	695a      	ldr	r2, [r3, #20]
 8001794:	2380      	movs	r3, #128	; 0x80
 8001796:	029b      	lsls	r3, r3, #10
 8001798:	4013      	ands	r3, r2
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800179e:	193b      	adds	r3, r7, r4
 80017a0:	2210      	movs	r2, #16
 80017a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017a4:	193b      	adds	r3, r7, r4
 80017a6:	2203      	movs	r2, #3
 80017a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	193b      	adds	r3, r7, r4
 80017ac:	2200      	movs	r2, #0
 80017ae:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b0:	193a      	adds	r2, r7, r4
 80017b2:	2390      	movs	r3, #144	; 0x90
 80017b4:	05db      	lsls	r3, r3, #23
 80017b6:	0011      	movs	r1, r2
 80017b8:	0018      	movs	r0, r3
 80017ba:	f001 fa17 	bl	8002bec <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80017be:	46c0      	nop			; (mov r8, r8)
 80017c0:	46bd      	mov	sp, r7
 80017c2:	b00b      	add	sp, #44	; 0x2c
 80017c4:	bd90      	pop	{r4, r7, pc}
 80017c6:	46c0      	nop			; (mov r8, r8)
 80017c8:	40007400 	.word	0x40007400
 80017cc:	40021000 	.word	0x40021000

080017d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017d0:	b590      	push	{r4, r7, lr}
 80017d2:	b08b      	sub	sp, #44	; 0x2c
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d8:	2414      	movs	r4, #20
 80017da:	193b      	adds	r3, r7, r4
 80017dc:	0018      	movs	r0, r3
 80017de:	2314      	movs	r3, #20
 80017e0:	001a      	movs	r2, r3
 80017e2:	2100      	movs	r1, #0
 80017e4:	f005 fa90 	bl	8006d08 <memset>
  if(hi2c->Instance==I2C1)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a1c      	ldr	r2, [pc, #112]	; (8001860 <HAL_I2C_MspInit+0x90>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d132      	bne.n	8001858 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f2:	4b1c      	ldr	r3, [pc, #112]	; (8001864 <HAL_I2C_MspInit+0x94>)
 80017f4:	695a      	ldr	r2, [r3, #20]
 80017f6:	4b1b      	ldr	r3, [pc, #108]	; (8001864 <HAL_I2C_MspInit+0x94>)
 80017f8:	2180      	movs	r1, #128	; 0x80
 80017fa:	02c9      	lsls	r1, r1, #11
 80017fc:	430a      	orrs	r2, r1
 80017fe:	615a      	str	r2, [r3, #20]
 8001800:	4b18      	ldr	r3, [pc, #96]	; (8001864 <HAL_I2C_MspInit+0x94>)
 8001802:	695a      	ldr	r2, [r3, #20]
 8001804:	2380      	movs	r3, #128	; 0x80
 8001806:	02db      	lsls	r3, r3, #11
 8001808:	4013      	ands	r3, r2
 800180a:	613b      	str	r3, [r7, #16]
 800180c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800180e:	193b      	adds	r3, r7, r4
 8001810:	22c0      	movs	r2, #192	; 0xc0
 8001812:	0092      	lsls	r2, r2, #2
 8001814:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001816:	0021      	movs	r1, r4
 8001818:	187b      	adds	r3, r7, r1
 800181a:	2212      	movs	r2, #18
 800181c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	187b      	adds	r3, r7, r1
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001824:	187b      	adds	r3, r7, r1
 8001826:	2203      	movs	r2, #3
 8001828:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800182a:	187b      	adds	r3, r7, r1
 800182c:	2201      	movs	r2, #1
 800182e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001830:	187b      	adds	r3, r7, r1
 8001832:	4a0d      	ldr	r2, [pc, #52]	; (8001868 <HAL_I2C_MspInit+0x98>)
 8001834:	0019      	movs	r1, r3
 8001836:	0010      	movs	r0, r2
 8001838:	f001 f9d8 	bl	8002bec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800183c:	4b09      	ldr	r3, [pc, #36]	; (8001864 <HAL_I2C_MspInit+0x94>)
 800183e:	69da      	ldr	r2, [r3, #28]
 8001840:	4b08      	ldr	r3, [pc, #32]	; (8001864 <HAL_I2C_MspInit+0x94>)
 8001842:	2180      	movs	r1, #128	; 0x80
 8001844:	0389      	lsls	r1, r1, #14
 8001846:	430a      	orrs	r2, r1
 8001848:	61da      	str	r2, [r3, #28]
 800184a:	4b06      	ldr	r3, [pc, #24]	; (8001864 <HAL_I2C_MspInit+0x94>)
 800184c:	69da      	ldr	r2, [r3, #28]
 800184e:	2380      	movs	r3, #128	; 0x80
 8001850:	039b      	lsls	r3, r3, #14
 8001852:	4013      	ands	r3, r2
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001858:	46c0      	nop			; (mov r8, r8)
 800185a:	46bd      	mov	sp, r7
 800185c:	b00b      	add	sp, #44	; 0x2c
 800185e:	bd90      	pop	{r4, r7, pc}
 8001860:	40005400 	.word	0x40005400
 8001864:	40021000 	.word	0x40021000
 8001868:	48000400 	.word	0x48000400

0800186c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800186c:	b590      	push	{r4, r7, lr}
 800186e:	b08d      	sub	sp, #52	; 0x34
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001874:	241c      	movs	r4, #28
 8001876:	193b      	adds	r3, r7, r4
 8001878:	0018      	movs	r0, r3
 800187a:	2314      	movs	r3, #20
 800187c:	001a      	movs	r2, r3
 800187e:	2100      	movs	r1, #0
 8001880:	f005 fa42 	bl	8006d08 <memset>
  if(hspi->Instance==SPI1)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a38      	ldr	r2, [pc, #224]	; (800196c <HAL_SPI_MspInit+0x100>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d132      	bne.n	80018f4 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800188e:	4b38      	ldr	r3, [pc, #224]	; (8001970 <HAL_SPI_MspInit+0x104>)
 8001890:	699a      	ldr	r2, [r3, #24]
 8001892:	4b37      	ldr	r3, [pc, #220]	; (8001970 <HAL_SPI_MspInit+0x104>)
 8001894:	2180      	movs	r1, #128	; 0x80
 8001896:	0149      	lsls	r1, r1, #5
 8001898:	430a      	orrs	r2, r1
 800189a:	619a      	str	r2, [r3, #24]
 800189c:	4b34      	ldr	r3, [pc, #208]	; (8001970 <HAL_SPI_MspInit+0x104>)
 800189e:	699a      	ldr	r2, [r3, #24]
 80018a0:	2380      	movs	r3, #128	; 0x80
 80018a2:	015b      	lsls	r3, r3, #5
 80018a4:	4013      	ands	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
 80018a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018aa:	4b31      	ldr	r3, [pc, #196]	; (8001970 <HAL_SPI_MspInit+0x104>)
 80018ac:	695a      	ldr	r2, [r3, #20]
 80018ae:	4b30      	ldr	r3, [pc, #192]	; (8001970 <HAL_SPI_MspInit+0x104>)
 80018b0:	2180      	movs	r1, #128	; 0x80
 80018b2:	02c9      	lsls	r1, r1, #11
 80018b4:	430a      	orrs	r2, r1
 80018b6:	615a      	str	r2, [r3, #20]
 80018b8:	4b2d      	ldr	r3, [pc, #180]	; (8001970 <HAL_SPI_MspInit+0x104>)
 80018ba:	695a      	ldr	r2, [r3, #20]
 80018bc:	2380      	movs	r3, #128	; 0x80
 80018be:	02db      	lsls	r3, r3, #11
 80018c0:	4013      	ands	r3, r2
 80018c2:	617b      	str	r3, [r7, #20]
 80018c4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80018c6:	0021      	movs	r1, r4
 80018c8:	187b      	adds	r3, r7, r1
 80018ca:	2218      	movs	r2, #24
 80018cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ce:	187b      	adds	r3, r7, r1
 80018d0:	2202      	movs	r2, #2
 80018d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	187b      	adds	r3, r7, r1
 80018d6:	2200      	movs	r2, #0
 80018d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018da:	187b      	adds	r3, r7, r1
 80018dc:	2203      	movs	r2, #3
 80018de:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80018e0:	187b      	adds	r3, r7, r1
 80018e2:	2200      	movs	r2, #0
 80018e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e6:	187b      	adds	r3, r7, r1
 80018e8:	4a22      	ldr	r2, [pc, #136]	; (8001974 <HAL_SPI_MspInit+0x108>)
 80018ea:	0019      	movs	r1, r3
 80018ec:	0010      	movs	r0, r2
 80018ee:	f001 f97d 	bl	8002bec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80018f2:	e037      	b.n	8001964 <HAL_SPI_MspInit+0xf8>
  else if(hspi->Instance==SPI2)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a1f      	ldr	r2, [pc, #124]	; (8001978 <HAL_SPI_MspInit+0x10c>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d132      	bne.n	8001964 <HAL_SPI_MspInit+0xf8>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018fe:	4b1c      	ldr	r3, [pc, #112]	; (8001970 <HAL_SPI_MspInit+0x104>)
 8001900:	69da      	ldr	r2, [r3, #28]
 8001902:	4b1b      	ldr	r3, [pc, #108]	; (8001970 <HAL_SPI_MspInit+0x104>)
 8001904:	2180      	movs	r1, #128	; 0x80
 8001906:	01c9      	lsls	r1, r1, #7
 8001908:	430a      	orrs	r2, r1
 800190a:	61da      	str	r2, [r3, #28]
 800190c:	4b18      	ldr	r3, [pc, #96]	; (8001970 <HAL_SPI_MspInit+0x104>)
 800190e:	69da      	ldr	r2, [r3, #28]
 8001910:	2380      	movs	r3, #128	; 0x80
 8001912:	01db      	lsls	r3, r3, #7
 8001914:	4013      	ands	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800191a:	4b15      	ldr	r3, [pc, #84]	; (8001970 <HAL_SPI_MspInit+0x104>)
 800191c:	695a      	ldr	r2, [r3, #20]
 800191e:	4b14      	ldr	r3, [pc, #80]	; (8001970 <HAL_SPI_MspInit+0x104>)
 8001920:	2180      	movs	r1, #128	; 0x80
 8001922:	02c9      	lsls	r1, r1, #11
 8001924:	430a      	orrs	r2, r1
 8001926:	615a      	str	r2, [r3, #20]
 8001928:	4b11      	ldr	r3, [pc, #68]	; (8001970 <HAL_SPI_MspInit+0x104>)
 800192a:	695a      	ldr	r2, [r3, #20]
 800192c:	2380      	movs	r3, #128	; 0x80
 800192e:	02db      	lsls	r3, r3, #11
 8001930:	4013      	ands	r3, r2
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001936:	211c      	movs	r1, #28
 8001938:	187b      	adds	r3, r7, r1
 800193a:	22c0      	movs	r2, #192	; 0xc0
 800193c:	01d2      	lsls	r2, r2, #7
 800193e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001940:	187b      	adds	r3, r7, r1
 8001942:	2202      	movs	r2, #2
 8001944:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	187b      	adds	r3, r7, r1
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800194c:	187b      	adds	r3, r7, r1
 800194e:	2203      	movs	r2, #3
 8001950:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8001952:	187b      	adds	r3, r7, r1
 8001954:	2200      	movs	r2, #0
 8001956:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001958:	187b      	adds	r3, r7, r1
 800195a:	4a06      	ldr	r2, [pc, #24]	; (8001974 <HAL_SPI_MspInit+0x108>)
 800195c:	0019      	movs	r1, r3
 800195e:	0010      	movs	r0, r2
 8001960:	f001 f944 	bl	8002bec <HAL_GPIO_Init>
}
 8001964:	46c0      	nop			; (mov r8, r8)
 8001966:	46bd      	mov	sp, r7
 8001968:	b00d      	add	sp, #52	; 0x34
 800196a:	bd90      	pop	{r4, r7, pc}
 800196c:	40013000 	.word	0x40013000
 8001970:	40021000 	.word	0x40021000
 8001974:	48000400 	.word	0x48000400
 8001978:	40003800 	.word	0x40003800

0800197c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a1f      	ldr	r2, [pc, #124]	; (8001a08 <HAL_TIM_Base_MspInit+0x8c>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d11e      	bne.n	80019cc <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800198e:	4b1f      	ldr	r3, [pc, #124]	; (8001a0c <HAL_TIM_Base_MspInit+0x90>)
 8001990:	699a      	ldr	r2, [r3, #24]
 8001992:	4b1e      	ldr	r3, [pc, #120]	; (8001a0c <HAL_TIM_Base_MspInit+0x90>)
 8001994:	2180      	movs	r1, #128	; 0x80
 8001996:	0109      	lsls	r1, r1, #4
 8001998:	430a      	orrs	r2, r1
 800199a:	619a      	str	r2, [r3, #24]
 800199c:	4b1b      	ldr	r3, [pc, #108]	; (8001a0c <HAL_TIM_Base_MspInit+0x90>)
 800199e:	699a      	ldr	r2, [r3, #24]
 80019a0:	2380      	movs	r3, #128	; 0x80
 80019a2:	011b      	lsls	r3, r3, #4
 80019a4:	4013      	ands	r3, r2
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 1, 0);
 80019aa:	2200      	movs	r2, #0
 80019ac:	2101      	movs	r1, #1
 80019ae:	200d      	movs	r0, #13
 80019b0:	f000 fe3a 	bl	8002628 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80019b4:	200d      	movs	r0, #13
 80019b6:	f000 fe4c 	bl	8002652 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 80019ba:	2200      	movs	r2, #0
 80019bc:	2101      	movs	r1, #1
 80019be:	200e      	movs	r0, #14
 80019c0:	f000 fe32 	bl	8002628 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80019c4:	200e      	movs	r0, #14
 80019c6:	f000 fe44 	bl	8002652 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80019ca:	e019      	b.n	8001a00 <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM2)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	2380      	movs	r3, #128	; 0x80
 80019d2:	05db      	lsls	r3, r3, #23
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d113      	bne.n	8001a00 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019d8:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <HAL_TIM_Base_MspInit+0x90>)
 80019da:	69da      	ldr	r2, [r3, #28]
 80019dc:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <HAL_TIM_Base_MspInit+0x90>)
 80019de:	2101      	movs	r1, #1
 80019e0:	430a      	orrs	r2, r1
 80019e2:	61da      	str	r2, [r3, #28]
 80019e4:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <HAL_TIM_Base_MspInit+0x90>)
 80019e6:	69db      	ldr	r3, [r3, #28]
 80019e8:	2201      	movs	r2, #1
 80019ea:	4013      	ands	r3, r2
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80019f0:	2200      	movs	r2, #0
 80019f2:	2101      	movs	r1, #1
 80019f4:	200f      	movs	r0, #15
 80019f6:	f000 fe17 	bl	8002628 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019fa:	200f      	movs	r0, #15
 80019fc:	f000 fe29 	bl	8002652 <HAL_NVIC_EnableIRQ>
}
 8001a00:	46c0      	nop			; (mov r8, r8)
 8001a02:	46bd      	mov	sp, r7
 8001a04:	b004      	add	sp, #16
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40012c00 	.word	0x40012c00
 8001a0c:	40021000 	.word	0x40021000

08001a10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a10:	b590      	push	{r4, r7, lr}
 8001a12:	b08b      	sub	sp, #44	; 0x2c
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a18:	2414      	movs	r4, #20
 8001a1a:	193b      	adds	r3, r7, r4
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	2314      	movs	r3, #20
 8001a20:	001a      	movs	r2, r3
 8001a22:	2100      	movs	r1, #0
 8001a24:	f005 f970 	bl	8006d08 <memset>
  if(huart->Instance==USART1)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a21      	ldr	r2, [pc, #132]	; (8001ab4 <HAL_UART_MspInit+0xa4>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d13b      	bne.n	8001aaa <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a32:	4b21      	ldr	r3, [pc, #132]	; (8001ab8 <HAL_UART_MspInit+0xa8>)
 8001a34:	699a      	ldr	r2, [r3, #24]
 8001a36:	4b20      	ldr	r3, [pc, #128]	; (8001ab8 <HAL_UART_MspInit+0xa8>)
 8001a38:	2180      	movs	r1, #128	; 0x80
 8001a3a:	01c9      	lsls	r1, r1, #7
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	619a      	str	r2, [r3, #24]
 8001a40:	4b1d      	ldr	r3, [pc, #116]	; (8001ab8 <HAL_UART_MspInit+0xa8>)
 8001a42:	699a      	ldr	r2, [r3, #24]
 8001a44:	2380      	movs	r3, #128	; 0x80
 8001a46:	01db      	lsls	r3, r3, #7
 8001a48:	4013      	ands	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
 8001a4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4e:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <HAL_UART_MspInit+0xa8>)
 8001a50:	695a      	ldr	r2, [r3, #20]
 8001a52:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <HAL_UART_MspInit+0xa8>)
 8001a54:	2180      	movs	r1, #128	; 0x80
 8001a56:	0289      	lsls	r1, r1, #10
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	615a      	str	r2, [r3, #20]
 8001a5c:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <HAL_UART_MspInit+0xa8>)
 8001a5e:	695a      	ldr	r2, [r3, #20]
 8001a60:	2380      	movs	r3, #128	; 0x80
 8001a62:	029b      	lsls	r3, r3, #10
 8001a64:	4013      	ands	r3, r2
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a6a:	193b      	adds	r3, r7, r4
 8001a6c:	22c0      	movs	r2, #192	; 0xc0
 8001a6e:	00d2      	lsls	r2, r2, #3
 8001a70:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a72:	0021      	movs	r1, r4
 8001a74:	187b      	adds	r3, r7, r1
 8001a76:	2202      	movs	r2, #2
 8001a78:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	187b      	adds	r3, r7, r1
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a80:	187b      	adds	r3, r7, r1
 8001a82:	2203      	movs	r2, #3
 8001a84:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001a86:	187b      	adds	r3, r7, r1
 8001a88:	2201      	movs	r2, #1
 8001a8a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8c:	187a      	adds	r2, r7, r1
 8001a8e:	2390      	movs	r3, #144	; 0x90
 8001a90:	05db      	lsls	r3, r3, #23
 8001a92:	0011      	movs	r1, r2
 8001a94:	0018      	movs	r0, r3
 8001a96:	f001 f8a9 	bl	8002bec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	201b      	movs	r0, #27
 8001aa0:	f000 fdc2 	bl	8002628 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001aa4:	201b      	movs	r0, #27
 8001aa6:	f000 fdd4 	bl	8002652 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001aaa:	46c0      	nop			; (mov r8, r8)
 8001aac:	46bd      	mov	sp, r7
 8001aae:	b00b      	add	sp, #44	; 0x2c
 8001ab0:	bd90      	pop	{r4, r7, pc}
 8001ab2:	46c0      	nop			; (mov r8, r8)
 8001ab4:	40013800 	.word	0x40013800
 8001ab8:	40021000 	.word	0x40021000

08001abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ac0:	e7fe      	b.n	8001ac0 <NMI_Handler+0x4>

08001ac2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ac6:	e7fe      	b.n	8001ac6 <HardFault_Handler+0x4>

08001ac8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001acc:	46c0      	nop			; (mov r8, r8)
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ad6:	46c0      	nop			; (mov r8, r8)
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ae0:	f000 f8b8 	bl	8001c54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ae4:	46c0      	nop			; (mov r8, r8)
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001af0:	4b03      	ldr	r3, [pc, #12]	; (8001b00 <DMA1_Channel1_IRQHandler+0x14>)
 8001af2:	0018      	movs	r0, r3
 8001af4:	f000 ff8f 	bl	8002a16 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001af8:	46c0      	nop			; (mov r8, r8)
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	46c0      	nop			; (mov r8, r8)
 8001b00:	20000084 	.word	0x20000084

08001b04 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b08:	4b03      	ldr	r3, [pc, #12]	; (8001b18 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	f003 f986 	bl	8004e1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001b10:	46c0      	nop			; (mov r8, r8)
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	46c0      	nop			; (mov r8, r8)
 8001b18:	200001f0 	.word	0x200001f0

08001b1c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b20:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <TIM1_CC_IRQHandler+0x14>)
 8001b22:	0018      	movs	r0, r3
 8001b24:	f003 f97a 	bl	8004e1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001b28:	46c0      	nop			; (mov r8, r8)
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	200001f0 	.word	0x200001f0

08001b34 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b38:	4b03      	ldr	r3, [pc, #12]	; (8001b48 <TIM2_IRQHandler+0x14>)
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	f003 f96e 	bl	8004e1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b40:	46c0      	nop			; (mov r8, r8)
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	46c0      	nop			; (mov r8, r8)
 8001b48:	20000238 	.word	0x20000238

08001b4c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b50:	4b03      	ldr	r3, [pc, #12]	; (8001b60 <USART1_IRQHandler+0x14>)
 8001b52:	0018      	movs	r0, r3
 8001b54:	f003 ff54 	bl	8005a00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b58:	46c0      	nop			; (mov r8, r8)
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	46c0      	nop			; (mov r8, r8)
 8001b60:	20000280 	.word	0x20000280

08001b64 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001b68:	46c0      	nop			; (mov r8, r8)
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
	...

08001b70 <Reset_Handler>:
 8001b70:	480d      	ldr	r0, [pc, #52]	; (8001ba8 <LoopForever+0x2>)
 8001b72:	4685      	mov	sp, r0
 8001b74:	480d      	ldr	r0, [pc, #52]	; (8001bac <LoopForever+0x6>)
 8001b76:	490e      	ldr	r1, [pc, #56]	; (8001bb0 <LoopForever+0xa>)
 8001b78:	4a0e      	ldr	r2, [pc, #56]	; (8001bb4 <LoopForever+0xe>)
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	e002      	b.n	8001b84 <LoopCopyDataInit>

08001b7e <CopyDataInit>:
 8001b7e:	58d4      	ldr	r4, [r2, r3]
 8001b80:	50c4      	str	r4, [r0, r3]
 8001b82:	3304      	adds	r3, #4

08001b84 <LoopCopyDataInit>:
 8001b84:	18c4      	adds	r4, r0, r3
 8001b86:	428c      	cmp	r4, r1
 8001b88:	d3f9      	bcc.n	8001b7e <CopyDataInit>
 8001b8a:	4a0b      	ldr	r2, [pc, #44]	; (8001bb8 <LoopForever+0x12>)
 8001b8c:	4c0b      	ldr	r4, [pc, #44]	; (8001bbc <LoopForever+0x16>)
 8001b8e:	2300      	movs	r3, #0
 8001b90:	e001      	b.n	8001b96 <LoopFillZerobss>

08001b92 <FillZerobss>:
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	3204      	adds	r2, #4

08001b96 <LoopFillZerobss>:
 8001b96:	42a2      	cmp	r2, r4
 8001b98:	d3fb      	bcc.n	8001b92 <FillZerobss>
 8001b9a:	f7ff ffe3 	bl	8001b64 <SystemInit>
 8001b9e:	f005 f88f 	bl	8006cc0 <__libc_init_array>
 8001ba2:	f7fe ffdd 	bl	8000b60 <main>

08001ba6 <LoopForever>:
 8001ba6:	e7fe      	b.n	8001ba6 <LoopForever>
 8001ba8:	20002000 	.word	0x20002000
 8001bac:	20000000 	.word	0x20000000
 8001bb0:	20000028 	.word	0x20000028
 8001bb4:	08006f54 	.word	0x08006f54
 8001bb8:	20000028 	.word	0x20000028
 8001bbc:	200003f0 	.word	0x200003f0

08001bc0 <ADC1_COMP_IRQHandler>:
 8001bc0:	e7fe      	b.n	8001bc0 <ADC1_COMP_IRQHandler>
	...

08001bc4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bc8:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <HAL_Init+0x24>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <HAL_Init+0x24>)
 8001bce:	2110      	movs	r1, #16
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001bd4:	2003      	movs	r0, #3
 8001bd6:	f000 f809 	bl	8001bec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bda:	f7ff fcdf 	bl	800159c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	0018      	movs	r0, r3
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	46c0      	nop			; (mov r8, r8)
 8001be8:	40022000 	.word	0x40022000

08001bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bec:	b590      	push	{r4, r7, lr}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bf4:	4b14      	ldr	r3, [pc, #80]	; (8001c48 <HAL_InitTick+0x5c>)
 8001bf6:	681c      	ldr	r4, [r3, #0]
 8001bf8:	4b14      	ldr	r3, [pc, #80]	; (8001c4c <HAL_InitTick+0x60>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	0019      	movs	r1, r3
 8001bfe:	23fa      	movs	r3, #250	; 0xfa
 8001c00:	0098      	lsls	r0, r3, #2
 8001c02:	f7fe fa81 	bl	8000108 <__udivsi3>
 8001c06:	0003      	movs	r3, r0
 8001c08:	0019      	movs	r1, r3
 8001c0a:	0020      	movs	r0, r4
 8001c0c:	f7fe fa7c 	bl	8000108 <__udivsi3>
 8001c10:	0003      	movs	r3, r0
 8001c12:	0018      	movs	r0, r3
 8001c14:	f000 fd2d 	bl	8002672 <HAL_SYSTICK_Config>
 8001c18:	1e03      	subs	r3, r0, #0
 8001c1a:	d001      	beq.n	8001c20 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e00f      	b.n	8001c40 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b03      	cmp	r3, #3
 8001c24:	d80b      	bhi.n	8001c3e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	2301      	movs	r3, #1
 8001c2a:	425b      	negs	r3, r3
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	0018      	movs	r0, r3
 8001c30:	f000 fcfa 	bl	8002628 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c34:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <HAL_InitTick+0x64>)
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	e000      	b.n	8001c40 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
}
 8001c40:	0018      	movs	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	b003      	add	sp, #12
 8001c46:	bd90      	pop	{r4, r7, pc}
 8001c48:	2000001c 	.word	0x2000001c
 8001c4c:	20000024 	.word	0x20000024
 8001c50:	20000020 	.word	0x20000020

08001c54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c58:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <HAL_IncTick+0x1c>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	001a      	movs	r2, r3
 8001c5e:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <HAL_IncTick+0x20>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	18d2      	adds	r2, r2, r3
 8001c64:	4b03      	ldr	r3, [pc, #12]	; (8001c74 <HAL_IncTick+0x20>)
 8001c66:	601a      	str	r2, [r3, #0]
}
 8001c68:	46c0      	nop			; (mov r8, r8)
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	46c0      	nop			; (mov r8, r8)
 8001c70:	20000024 	.word	0x20000024
 8001c74:	200003ec 	.word	0x200003ec

08001c78 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c7c:	4b02      	ldr	r3, [pc, #8]	; (8001c88 <HAL_GetTick+0x10>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
}
 8001c80:	0018      	movs	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	46c0      	nop			; (mov r8, r8)
 8001c88:	200003ec 	.word	0x200003ec

08001c8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c94:	f7ff fff0 	bl	8001c78 <HAL_GetTick>
 8001c98:	0003      	movs	r3, r0
 8001c9a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	d005      	beq.n	8001cb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	; (8001cd0 <HAL_Delay+0x44>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	001a      	movs	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	189b      	adds	r3, r3, r2
 8001cb0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001cb2:	46c0      	nop			; (mov r8, r8)
 8001cb4:	f7ff ffe0 	bl	8001c78 <HAL_GetTick>
 8001cb8:	0002      	movs	r2, r0
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d8f7      	bhi.n	8001cb4 <HAL_Delay+0x28>
  {
  }
}
 8001cc4:	46c0      	nop			; (mov r8, r8)
 8001cc6:	46c0      	nop			; (mov r8, r8)
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	b004      	add	sp, #16
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	46c0      	nop			; (mov r8, r8)
 8001cd0:	20000024 	.word	0x20000024

08001cd4 <HAL_SuspendTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)

{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8001cd8:	4b04      	ldr	r3, [pc, #16]	; (8001cec <HAL_SuspendTick+0x18>)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	4b03      	ldr	r3, [pc, #12]	; (8001cec <HAL_SuspendTick+0x18>)
 8001cde:	2102      	movs	r1, #2
 8001ce0:	438a      	bics	r2, r1
 8001ce2:	601a      	str	r2, [r3, #0]
}
 8001ce4:	46c0      	nop			; (mov r8, r8)
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	46c0      	nop			; (mov r8, r8)
 8001cec:	e000e010 	.word	0xe000e010

08001cf0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cf8:	230f      	movs	r3, #15
 8001cfa:	18fb      	adds	r3, r7, r3
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001d00:	2300      	movs	r3, #0
 8001d02:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e125      	b.n	8001f5a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d10a      	bne.n	8001d2c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2234      	movs	r2, #52	; 0x34
 8001d20:	2100      	movs	r1, #0
 8001d22:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	0018      	movs	r0, r3
 8001d28:	f7ff fc5c 	bl	80015e4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d30:	2210      	movs	r2, #16
 8001d32:	4013      	ands	r3, r2
 8001d34:	d000      	beq.n	8001d38 <HAL_ADC_Init+0x48>
 8001d36:	e103      	b.n	8001f40 <HAL_ADC_Init+0x250>
 8001d38:	230f      	movs	r3, #15
 8001d3a:	18fb      	adds	r3, r7, r3
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d000      	beq.n	8001d44 <HAL_ADC_Init+0x54>
 8001d42:	e0fd      	b.n	8001f40 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	2204      	movs	r2, #4
 8001d4c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001d4e:	d000      	beq.n	8001d52 <HAL_ADC_Init+0x62>
 8001d50:	e0f6      	b.n	8001f40 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d56:	4a83      	ldr	r2, [pc, #524]	; (8001f64 <HAL_ADC_Init+0x274>)
 8001d58:	4013      	ands	r3, r2
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	431a      	orrs	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	2203      	movs	r2, #3
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d112      	bne.n	8001d96 <HAL_ADC_Init+0xa6>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2201      	movs	r2, #1
 8001d78:	4013      	ands	r3, r2
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d009      	beq.n	8001d92 <HAL_ADC_Init+0xa2>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68da      	ldr	r2, [r3, #12]
 8001d84:	2380      	movs	r3, #128	; 0x80
 8001d86:	021b      	lsls	r3, r3, #8
 8001d88:	401a      	ands	r2, r3
 8001d8a:	2380      	movs	r3, #128	; 0x80
 8001d8c:	021b      	lsls	r3, r3, #8
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d101      	bne.n	8001d96 <HAL_ADC_Init+0xa6>
 8001d92:	2301      	movs	r3, #1
 8001d94:	e000      	b.n	8001d98 <HAL_ADC_Init+0xa8>
 8001d96:	2300      	movs	r3, #0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d116      	bne.n	8001dca <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	2218      	movs	r2, #24
 8001da4:	4393      	bics	r3, r2
 8001da6:	0019      	movs	r1, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	430a      	orrs	r2, r1
 8001db2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	0899      	lsrs	r1, r3, #2
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685a      	ldr	r2, [r3, #4]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68da      	ldr	r2, [r3, #12]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4964      	ldr	r1, [pc, #400]	; (8001f68 <HAL_ADC_Init+0x278>)
 8001dd6:	400a      	ands	r2, r1
 8001dd8:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	7e1b      	ldrb	r3, [r3, #24]
 8001dde:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	7e5b      	ldrb	r3, [r3, #25]
 8001de4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001de6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	7e9b      	ldrb	r3, [r3, #26]
 8001dec:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001dee:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d002      	beq.n	8001dfe <HAL_ADC_Init+0x10e>
 8001df8:	2380      	movs	r3, #128	; 0x80
 8001dfa:	015b      	lsls	r3, r3, #5
 8001dfc:	e000      	b.n	8001e00 <HAL_ADC_Init+0x110>
 8001dfe:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001e00:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001e06:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d101      	bne.n	8001e14 <HAL_ADC_Init+0x124>
 8001e10:	2304      	movs	r3, #4
 8001e12:	e000      	b.n	8001e16 <HAL_ADC_Init+0x126>
 8001e14:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001e16:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2124      	movs	r1, #36	; 0x24
 8001e1c:	5c5b      	ldrb	r3, [r3, r1]
 8001e1e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001e20:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e22:	68ba      	ldr	r2, [r7, #8]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	7edb      	ldrb	r3, [r3, #27]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d115      	bne.n	8001e5c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	7e9b      	ldrb	r3, [r3, #26]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d105      	bne.n	8001e44 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	2280      	movs	r2, #128	; 0x80
 8001e3c:	0252      	lsls	r2, r2, #9
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	60bb      	str	r3, [r7, #8]
 8001e42:	e00b      	b.n	8001e5c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e48:	2220      	movs	r2, #32
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e54:	2201      	movs	r2, #1
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69da      	ldr	r2, [r3, #28]
 8001e60:	23c2      	movs	r3, #194	; 0xc2
 8001e62:	33ff      	adds	r3, #255	; 0xff
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d007      	beq.n	8001e78 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001e70:	4313      	orrs	r3, r2
 8001e72:	68ba      	ldr	r2, [r7, #8]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68d9      	ldr	r1, [r3, #12]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e8c:	2380      	movs	r3, #128	; 0x80
 8001e8e:	055b      	lsls	r3, r3, #21
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d01b      	beq.n	8001ecc <HAL_ADC_Init+0x1dc>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d017      	beq.n	8001ecc <HAL_ADC_Init+0x1dc>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d013      	beq.n	8001ecc <HAL_ADC_Init+0x1dc>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea8:	2b03      	cmp	r3, #3
 8001eaa:	d00f      	beq.n	8001ecc <HAL_ADC_Init+0x1dc>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb0:	2b04      	cmp	r3, #4
 8001eb2:	d00b      	beq.n	8001ecc <HAL_ADC_Init+0x1dc>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb8:	2b05      	cmp	r3, #5
 8001eba:	d007      	beq.n	8001ecc <HAL_ADC_Init+0x1dc>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec0:	2b06      	cmp	r3, #6
 8001ec2:	d003      	beq.n	8001ecc <HAL_ADC_Init+0x1dc>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec8:	2b07      	cmp	r3, #7
 8001eca:	d112      	bne.n	8001ef2 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	695a      	ldr	r2, [r3, #20]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2107      	movs	r1, #7
 8001ed8:	438a      	bics	r2, r1
 8001eda:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6959      	ldr	r1, [r3, #20]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee6:	2207      	movs	r2, #7
 8001ee8:	401a      	ands	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	4a1c      	ldr	r2, [pc, #112]	; (8001f6c <HAL_ADC_Init+0x27c>)
 8001efa:	4013      	ands	r3, r2
 8001efc:	68ba      	ldr	r2, [r7, #8]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d10b      	bne.n	8001f1a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f0c:	2203      	movs	r2, #3
 8001f0e:	4393      	bics	r3, r2
 8001f10:	2201      	movs	r2, #1
 8001f12:	431a      	orrs	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001f18:	e01c      	b.n	8001f54 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f1e:	2212      	movs	r2, #18
 8001f20:	4393      	bics	r3, r2
 8001f22:	2210      	movs	r2, #16
 8001f24:	431a      	orrs	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f2e:	2201      	movs	r2, #1
 8001f30:	431a      	orrs	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001f36:	230f      	movs	r3, #15
 8001f38:	18fb      	adds	r3, r7, r3
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001f3e:	e009      	b.n	8001f54 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f44:	2210      	movs	r2, #16
 8001f46:	431a      	orrs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001f4c:	230f      	movs	r3, #15
 8001f4e:	18fb      	adds	r3, r7, r3
 8001f50:	2201      	movs	r2, #1
 8001f52:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f54:	230f      	movs	r3, #15
 8001f56:	18fb      	adds	r3, r7, r3
 8001f58:	781b      	ldrb	r3, [r3, #0]
}
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	b004      	add	sp, #16
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	46c0      	nop			; (mov r8, r8)
 8001f64:	fffffefd 	.word	0xfffffefd
 8001f68:	fffe0219 	.word	0xfffe0219
 8001f6c:	833fffe7 	.word	0x833fffe7

08001f70 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001f70:	b590      	push	{r4, r7, lr}
 8001f72:	b087      	sub	sp, #28
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f7c:	2317      	movs	r3, #23
 8001f7e:	18fb      	adds	r3, r7, r3
 8001f80:	2200      	movs	r2, #0
 8001f82:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	2204      	movs	r2, #4
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	d15e      	bne.n	800204e <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2234      	movs	r2, #52	; 0x34
 8001f94:	5c9b      	ldrb	r3, [r3, r2]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d101      	bne.n	8001f9e <HAL_ADC_Start_DMA+0x2e>
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	e05e      	b.n	800205c <HAL_ADC_Start_DMA+0xec>
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2234      	movs	r2, #52	; 0x34
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	7e5b      	ldrb	r3, [r3, #25]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d007      	beq.n	8001fbe <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001fae:	2317      	movs	r3, #23
 8001fb0:	18fc      	adds	r4, r7, r3
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	f000 f983 	bl	80022c0 <ADC_Enable>
 8001fba:	0003      	movs	r3, r0
 8001fbc:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001fbe:	2317      	movs	r3, #23
 8001fc0:	18fb      	adds	r3, r7, r3
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d146      	bne.n	8002056 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fcc:	4a25      	ldr	r2, [pc, #148]	; (8002064 <HAL_ADC_Start_DMA+0xf4>)
 8001fce:	4013      	ands	r3, r2
 8001fd0:	2280      	movs	r2, #128	; 0x80
 8001fd2:	0052      	lsls	r2, r2, #1
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2234      	movs	r2, #52	; 0x34
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fec:	4a1e      	ldr	r2, [pc, #120]	; (8002068 <HAL_ADC_Start_DMA+0xf8>)
 8001fee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff4:	4a1d      	ldr	r2, [pc, #116]	; (800206c <HAL_ADC_Start_DMA+0xfc>)
 8001ff6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffc:	4a1c      	ldr	r2, [pc, #112]	; (8002070 <HAL_ADC_Start_DMA+0x100>)
 8001ffe:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	221c      	movs	r2, #28
 8002006:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2110      	movs	r1, #16
 8002014:	430a      	orrs	r2, r1
 8002016:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68da      	ldr	r2, [r3, #12]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2101      	movs	r1, #1
 8002024:	430a      	orrs	r2, r1
 8002026:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	3340      	adds	r3, #64	; 0x40
 8002032:	0019      	movs	r1, r3
 8002034:	68ba      	ldr	r2, [r7, #8]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f000 fc0a 	bl	8002850 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689a      	ldr	r2, [r3, #8]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2104      	movs	r1, #4
 8002048:	430a      	orrs	r2, r1
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	e003      	b.n	8002056 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800204e:	2317      	movs	r3, #23
 8002050:	18fb      	adds	r3, r7, r3
 8002052:	2202      	movs	r2, #2
 8002054:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002056:	2317      	movs	r3, #23
 8002058:	18fb      	adds	r3, r7, r3
 800205a:	781b      	ldrb	r3, [r3, #0]
}
 800205c:	0018      	movs	r0, r3
 800205e:	46bd      	mov	sp, r7
 8002060:	b007      	add	sp, #28
 8002062:	bd90      	pop	{r4, r7, pc}
 8002064:	fffff0fe 	.word	0xfffff0fe
 8002068:	080023c9 	.word	0x080023c9
 800206c:	0800247d 	.word	0x0800247d
 8002070:	0800249b 	.word	0x0800249b

08002074 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800207c:	46c0      	nop			; (mov r8, r8)
 800207e:	46bd      	mov	sp, r7
 8002080:	b002      	add	sp, #8
 8002082:	bd80      	pop	{r7, pc}

08002084 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800208c:	46c0      	nop			; (mov r8, r8)
 800208e:	46bd      	mov	sp, r7
 8002090:	b002      	add	sp, #8
 8002092:	bd80      	pop	{r7, pc}

08002094 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800209c:	46c0      	nop			; (mov r8, r8)
 800209e:	46bd      	mov	sp, r7
 80020a0:	b002      	add	sp, #8
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020ae:	230f      	movs	r3, #15
 80020b0:	18fb      	adds	r3, r7, r3
 80020b2:	2200      	movs	r2, #0
 80020b4:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020be:	2380      	movs	r3, #128	; 0x80
 80020c0:	055b      	lsls	r3, r3, #21
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d011      	beq.n	80020ea <HAL_ADC_ConfigChannel+0x46>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d00d      	beq.n	80020ea <HAL_ADC_ConfigChannel+0x46>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d009      	beq.n	80020ea <HAL_ADC_ConfigChannel+0x46>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020da:	2b03      	cmp	r3, #3
 80020dc:	d005      	beq.n	80020ea <HAL_ADC_ConfigChannel+0x46>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e2:	2b04      	cmp	r3, #4
 80020e4:	d001      	beq.n	80020ea <HAL_ADC_ConfigChannel+0x46>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2234      	movs	r2, #52	; 0x34
 80020ee:	5c9b      	ldrb	r3, [r3, r2]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d101      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x54>
 80020f4:	2302      	movs	r3, #2
 80020f6:	e0d0      	b.n	800229a <HAL_ADC_ConfigChannel+0x1f6>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2234      	movs	r2, #52	; 0x34
 80020fc:	2101      	movs	r1, #1
 80020fe:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	2204      	movs	r2, #4
 8002108:	4013      	ands	r3, r2
 800210a:	d000      	beq.n	800210e <HAL_ADC_ConfigChannel+0x6a>
 800210c:	e0b4      	b.n	8002278 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	4a64      	ldr	r2, [pc, #400]	; (80022a4 <HAL_ADC_ConfigChannel+0x200>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d100      	bne.n	800211a <HAL_ADC_ConfigChannel+0x76>
 8002118:	e082      	b.n	8002220 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2201      	movs	r2, #1
 8002126:	409a      	lsls	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	430a      	orrs	r2, r1
 800212e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002134:	2380      	movs	r3, #128	; 0x80
 8002136:	055b      	lsls	r3, r3, #21
 8002138:	429a      	cmp	r2, r3
 800213a:	d037      	beq.n	80021ac <HAL_ADC_ConfigChannel+0x108>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002140:	2b01      	cmp	r3, #1
 8002142:	d033      	beq.n	80021ac <HAL_ADC_ConfigChannel+0x108>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002148:	2b02      	cmp	r3, #2
 800214a:	d02f      	beq.n	80021ac <HAL_ADC_ConfigChannel+0x108>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002150:	2b03      	cmp	r3, #3
 8002152:	d02b      	beq.n	80021ac <HAL_ADC_ConfigChannel+0x108>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002158:	2b04      	cmp	r3, #4
 800215a:	d027      	beq.n	80021ac <HAL_ADC_ConfigChannel+0x108>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002160:	2b05      	cmp	r3, #5
 8002162:	d023      	beq.n	80021ac <HAL_ADC_ConfigChannel+0x108>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002168:	2b06      	cmp	r3, #6
 800216a:	d01f      	beq.n	80021ac <HAL_ADC_ConfigChannel+0x108>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002170:	2b07      	cmp	r3, #7
 8002172:	d01b      	beq.n	80021ac <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	2107      	movs	r1, #7
 8002180:	400b      	ands	r3, r1
 8002182:	429a      	cmp	r2, r3
 8002184:	d012      	beq.n	80021ac <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	695a      	ldr	r2, [r3, #20]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2107      	movs	r1, #7
 8002192:	438a      	bics	r2, r1
 8002194:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6959      	ldr	r1, [r3, #20]
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	2207      	movs	r2, #7
 80021a2:	401a      	ands	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	430a      	orrs	r2, r1
 80021aa:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2b10      	cmp	r3, #16
 80021b2:	d007      	beq.n	80021c4 <HAL_ADC_ConfigChannel+0x120>
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2b11      	cmp	r3, #17
 80021ba:	d003      	beq.n	80021c4 <HAL_ADC_ConfigChannel+0x120>
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2b12      	cmp	r3, #18
 80021c2:	d163      	bne.n	800228c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80021c4:	4b38      	ldr	r3, [pc, #224]	; (80022a8 <HAL_ADC_ConfigChannel+0x204>)
 80021c6:	6819      	ldr	r1, [r3, #0]
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2b10      	cmp	r3, #16
 80021ce:	d009      	beq.n	80021e4 <HAL_ADC_ConfigChannel+0x140>
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2b11      	cmp	r3, #17
 80021d6:	d102      	bne.n	80021de <HAL_ADC_ConfigChannel+0x13a>
 80021d8:	2380      	movs	r3, #128	; 0x80
 80021da:	03db      	lsls	r3, r3, #15
 80021dc:	e004      	b.n	80021e8 <HAL_ADC_ConfigChannel+0x144>
 80021de:	2380      	movs	r3, #128	; 0x80
 80021e0:	045b      	lsls	r3, r3, #17
 80021e2:	e001      	b.n	80021e8 <HAL_ADC_ConfigChannel+0x144>
 80021e4:	2380      	movs	r3, #128	; 0x80
 80021e6:	041b      	lsls	r3, r3, #16
 80021e8:	4a2f      	ldr	r2, [pc, #188]	; (80022a8 <HAL_ADC_ConfigChannel+0x204>)
 80021ea:	430b      	orrs	r3, r1
 80021ec:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2b10      	cmp	r3, #16
 80021f4:	d14a      	bne.n	800228c <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021f6:	4b2d      	ldr	r3, [pc, #180]	; (80022ac <HAL_ADC_ConfigChannel+0x208>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	492d      	ldr	r1, [pc, #180]	; (80022b0 <HAL_ADC_ConfigChannel+0x20c>)
 80021fc:	0018      	movs	r0, r3
 80021fe:	f7fd ff83 	bl	8000108 <__udivsi3>
 8002202:	0003      	movs	r3, r0
 8002204:	001a      	movs	r2, r3
 8002206:	0013      	movs	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	189b      	adds	r3, r3, r2
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002210:	e002      	b.n	8002218 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	3b01      	subs	r3, #1
 8002216:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1f9      	bne.n	8002212 <HAL_ADC_ConfigChannel+0x16e>
 800221e:	e035      	b.n	800228c <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2101      	movs	r1, #1
 800222c:	4099      	lsls	r1, r3
 800222e:	000b      	movs	r3, r1
 8002230:	43d9      	mvns	r1, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	400a      	ands	r2, r1
 8002238:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2b10      	cmp	r3, #16
 8002240:	d007      	beq.n	8002252 <HAL_ADC_ConfigChannel+0x1ae>
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2b11      	cmp	r3, #17
 8002248:	d003      	beq.n	8002252 <HAL_ADC_ConfigChannel+0x1ae>
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2b12      	cmp	r3, #18
 8002250:	d11c      	bne.n	800228c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002252:	4b15      	ldr	r3, [pc, #84]	; (80022a8 <HAL_ADC_ConfigChannel+0x204>)
 8002254:	6819      	ldr	r1, [r3, #0]
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2b10      	cmp	r3, #16
 800225c:	d007      	beq.n	800226e <HAL_ADC_ConfigChannel+0x1ca>
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2b11      	cmp	r3, #17
 8002264:	d101      	bne.n	800226a <HAL_ADC_ConfigChannel+0x1c6>
 8002266:	4b13      	ldr	r3, [pc, #76]	; (80022b4 <HAL_ADC_ConfigChannel+0x210>)
 8002268:	e002      	b.n	8002270 <HAL_ADC_ConfigChannel+0x1cc>
 800226a:	4b13      	ldr	r3, [pc, #76]	; (80022b8 <HAL_ADC_ConfigChannel+0x214>)
 800226c:	e000      	b.n	8002270 <HAL_ADC_ConfigChannel+0x1cc>
 800226e:	4b13      	ldr	r3, [pc, #76]	; (80022bc <HAL_ADC_ConfigChannel+0x218>)
 8002270:	4a0d      	ldr	r2, [pc, #52]	; (80022a8 <HAL_ADC_ConfigChannel+0x204>)
 8002272:	400b      	ands	r3, r1
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	e009      	b.n	800228c <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227c:	2220      	movs	r2, #32
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002284:	230f      	movs	r3, #15
 8002286:	18fb      	adds	r3, r7, r3
 8002288:	2201      	movs	r2, #1
 800228a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2234      	movs	r2, #52	; 0x34
 8002290:	2100      	movs	r1, #0
 8002292:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002294:	230f      	movs	r3, #15
 8002296:	18fb      	adds	r3, r7, r3
 8002298:	781b      	ldrb	r3, [r3, #0]
}
 800229a:	0018      	movs	r0, r3
 800229c:	46bd      	mov	sp, r7
 800229e:	b004      	add	sp, #16
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	46c0      	nop			; (mov r8, r8)
 80022a4:	00001001 	.word	0x00001001
 80022a8:	40012708 	.word	0x40012708
 80022ac:	2000001c 	.word	0x2000001c
 80022b0:	000f4240 	.word	0x000f4240
 80022b4:	ffbfffff 	.word	0xffbfffff
 80022b8:	feffffff 	.word	0xfeffffff
 80022bc:	ff7fffff 	.word	0xff7fffff

080022c0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	2203      	movs	r2, #3
 80022d8:	4013      	ands	r3, r2
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d112      	bne.n	8002304 <ADC_Enable+0x44>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2201      	movs	r2, #1
 80022e6:	4013      	ands	r3, r2
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d009      	beq.n	8002300 <ADC_Enable+0x40>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68da      	ldr	r2, [r3, #12]
 80022f2:	2380      	movs	r3, #128	; 0x80
 80022f4:	021b      	lsls	r3, r3, #8
 80022f6:	401a      	ands	r2, r3
 80022f8:	2380      	movs	r3, #128	; 0x80
 80022fa:	021b      	lsls	r3, r3, #8
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d101      	bne.n	8002304 <ADC_Enable+0x44>
 8002300:	2301      	movs	r3, #1
 8002302:	e000      	b.n	8002306 <ADC_Enable+0x46>
 8002304:	2300      	movs	r3, #0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d152      	bne.n	80023b0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	4a2a      	ldr	r2, [pc, #168]	; (80023bc <ADC_Enable+0xfc>)
 8002312:	4013      	ands	r3, r2
 8002314:	d00d      	beq.n	8002332 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800231a:	2210      	movs	r2, #16
 800231c:	431a      	orrs	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002326:	2201      	movs	r2, #1
 8002328:	431a      	orrs	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e03f      	b.n	80023b2 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2101      	movs	r1, #1
 800233e:	430a      	orrs	r2, r1
 8002340:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002342:	4b1f      	ldr	r3, [pc, #124]	; (80023c0 <ADC_Enable+0x100>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	491f      	ldr	r1, [pc, #124]	; (80023c4 <ADC_Enable+0x104>)
 8002348:	0018      	movs	r0, r3
 800234a:	f7fd fedd 	bl	8000108 <__udivsi3>
 800234e:	0003      	movs	r3, r0
 8002350:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002352:	e002      	b.n	800235a <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	3b01      	subs	r3, #1
 8002358:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1f9      	bne.n	8002354 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002360:	f7ff fc8a 	bl	8001c78 <HAL_GetTick>
 8002364:	0003      	movs	r3, r0
 8002366:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002368:	e01b      	b.n	80023a2 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800236a:	f7ff fc85 	bl	8001c78 <HAL_GetTick>
 800236e:	0002      	movs	r2, r0
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d914      	bls.n	80023a2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2201      	movs	r2, #1
 8002380:	4013      	ands	r3, r2
 8002382:	2b01      	cmp	r3, #1
 8002384:	d00d      	beq.n	80023a2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800238a:	2210      	movs	r2, #16
 800238c:	431a      	orrs	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002396:	2201      	movs	r2, #1
 8002398:	431a      	orrs	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e007      	b.n	80023b2 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2201      	movs	r2, #1
 80023aa:	4013      	ands	r3, r2
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d1dc      	bne.n	800236a <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	0018      	movs	r0, r3
 80023b4:	46bd      	mov	sp, r7
 80023b6:	b004      	add	sp, #16
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	46c0      	nop			; (mov r8, r8)
 80023bc:	80000017 	.word	0x80000017
 80023c0:	2000001c 	.word	0x2000001c
 80023c4:	000f4240 	.word	0x000f4240

080023c8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023da:	2250      	movs	r2, #80	; 0x50
 80023dc:	4013      	ands	r3, r2
 80023de:	d140      	bne.n	8002462 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e4:	2280      	movs	r2, #128	; 0x80
 80023e6:	0092      	lsls	r2, r2, #2
 80023e8:	431a      	orrs	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68da      	ldr	r2, [r3, #12]
 80023f4:	23c0      	movs	r3, #192	; 0xc0
 80023f6:	011b      	lsls	r3, r3, #4
 80023f8:	4013      	ands	r3, r2
 80023fa:	d12d      	bne.n	8002458 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002400:	2b00      	cmp	r3, #0
 8002402:	d129      	bne.n	8002458 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2208      	movs	r2, #8
 800240c:	4013      	ands	r3, r2
 800240e:	2b08      	cmp	r3, #8
 8002410:	d122      	bne.n	8002458 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	2204      	movs	r2, #4
 800241a:	4013      	ands	r3, r2
 800241c:	d110      	bne.n	8002440 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	685a      	ldr	r2, [r3, #4]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	210c      	movs	r1, #12
 800242a:	438a      	bics	r2, r1
 800242c:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002432:	4a11      	ldr	r2, [pc, #68]	; (8002478 <ADC_DMAConvCplt+0xb0>)
 8002434:	4013      	ands	r3, r2
 8002436:	2201      	movs	r2, #1
 8002438:	431a      	orrs	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	639a      	str	r2, [r3, #56]	; 0x38
 800243e:	e00b      	b.n	8002458 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002444:	2220      	movs	r2, #32
 8002446:	431a      	orrs	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002450:	2201      	movs	r2, #1
 8002452:	431a      	orrs	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	0018      	movs	r0, r3
 800245c:	f7ff fe0a 	bl	8002074 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8002460:	e005      	b.n	800246e <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	0010      	movs	r0, r2
 800246c:	4798      	blx	r3
}
 800246e:	46c0      	nop			; (mov r8, r8)
 8002470:	46bd      	mov	sp, r7
 8002472:	b004      	add	sp, #16
 8002474:	bd80      	pop	{r7, pc}
 8002476:	46c0      	nop			; (mov r8, r8)
 8002478:	fffffefe 	.word	0xfffffefe

0800247c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002488:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	0018      	movs	r0, r3
 800248e:	f7ff fdf9 	bl	8002084 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002492:	46c0      	nop			; (mov r8, r8)
 8002494:	46bd      	mov	sp, r7
 8002496:	b004      	add	sp, #16
 8002498:	bd80      	pop	{r7, pc}

0800249a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b084      	sub	sp, #16
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ac:	2240      	movs	r2, #64	; 0x40
 80024ae:	431a      	orrs	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b8:	2204      	movs	r2, #4
 80024ba:	431a      	orrs	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	0018      	movs	r0, r3
 80024c4:	f7ff fde6 	bl	8002094 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024c8:	46c0      	nop			; (mov r8, r8)
 80024ca:	46bd      	mov	sp, r7
 80024cc:	b004      	add	sp, #16
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <__NVIC_EnableIRQ>:
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	0002      	movs	r2, r0
 80024d8:	1dfb      	adds	r3, r7, #7
 80024da:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80024dc:	1dfb      	adds	r3, r7, #7
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b7f      	cmp	r3, #127	; 0x7f
 80024e2:	d809      	bhi.n	80024f8 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024e4:	1dfb      	adds	r3, r7, #7
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	001a      	movs	r2, r3
 80024ea:	231f      	movs	r3, #31
 80024ec:	401a      	ands	r2, r3
 80024ee:	4b04      	ldr	r3, [pc, #16]	; (8002500 <__NVIC_EnableIRQ+0x30>)
 80024f0:	2101      	movs	r1, #1
 80024f2:	4091      	lsls	r1, r2
 80024f4:	000a      	movs	r2, r1
 80024f6:	601a      	str	r2, [r3, #0]
}
 80024f8:	46c0      	nop			; (mov r8, r8)
 80024fa:	46bd      	mov	sp, r7
 80024fc:	b002      	add	sp, #8
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	e000e100 	.word	0xe000e100

08002504 <__NVIC_SetPriority>:
{
 8002504:	b590      	push	{r4, r7, lr}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	0002      	movs	r2, r0
 800250c:	6039      	str	r1, [r7, #0]
 800250e:	1dfb      	adds	r3, r7, #7
 8002510:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002512:	1dfb      	adds	r3, r7, #7
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2b7f      	cmp	r3, #127	; 0x7f
 8002518:	d828      	bhi.n	800256c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800251a:	4a2f      	ldr	r2, [pc, #188]	; (80025d8 <__NVIC_SetPriority+0xd4>)
 800251c:	1dfb      	adds	r3, r7, #7
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	b25b      	sxtb	r3, r3
 8002522:	089b      	lsrs	r3, r3, #2
 8002524:	33c0      	adds	r3, #192	; 0xc0
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	589b      	ldr	r3, [r3, r2]
 800252a:	1dfa      	adds	r2, r7, #7
 800252c:	7812      	ldrb	r2, [r2, #0]
 800252e:	0011      	movs	r1, r2
 8002530:	2203      	movs	r2, #3
 8002532:	400a      	ands	r2, r1
 8002534:	00d2      	lsls	r2, r2, #3
 8002536:	21ff      	movs	r1, #255	; 0xff
 8002538:	4091      	lsls	r1, r2
 800253a:	000a      	movs	r2, r1
 800253c:	43d2      	mvns	r2, r2
 800253e:	401a      	ands	r2, r3
 8002540:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	019b      	lsls	r3, r3, #6
 8002546:	22ff      	movs	r2, #255	; 0xff
 8002548:	401a      	ands	r2, r3
 800254a:	1dfb      	adds	r3, r7, #7
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	0018      	movs	r0, r3
 8002550:	2303      	movs	r3, #3
 8002552:	4003      	ands	r3, r0
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002558:	481f      	ldr	r0, [pc, #124]	; (80025d8 <__NVIC_SetPriority+0xd4>)
 800255a:	1dfb      	adds	r3, r7, #7
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	b25b      	sxtb	r3, r3
 8002560:	089b      	lsrs	r3, r3, #2
 8002562:	430a      	orrs	r2, r1
 8002564:	33c0      	adds	r3, #192	; 0xc0
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	501a      	str	r2, [r3, r0]
}
 800256a:	e031      	b.n	80025d0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800256c:	4a1b      	ldr	r2, [pc, #108]	; (80025dc <__NVIC_SetPriority+0xd8>)
 800256e:	1dfb      	adds	r3, r7, #7
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	0019      	movs	r1, r3
 8002574:	230f      	movs	r3, #15
 8002576:	400b      	ands	r3, r1
 8002578:	3b08      	subs	r3, #8
 800257a:	089b      	lsrs	r3, r3, #2
 800257c:	3306      	adds	r3, #6
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	18d3      	adds	r3, r2, r3
 8002582:	3304      	adds	r3, #4
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	1dfa      	adds	r2, r7, #7
 8002588:	7812      	ldrb	r2, [r2, #0]
 800258a:	0011      	movs	r1, r2
 800258c:	2203      	movs	r2, #3
 800258e:	400a      	ands	r2, r1
 8002590:	00d2      	lsls	r2, r2, #3
 8002592:	21ff      	movs	r1, #255	; 0xff
 8002594:	4091      	lsls	r1, r2
 8002596:	000a      	movs	r2, r1
 8002598:	43d2      	mvns	r2, r2
 800259a:	401a      	ands	r2, r3
 800259c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	019b      	lsls	r3, r3, #6
 80025a2:	22ff      	movs	r2, #255	; 0xff
 80025a4:	401a      	ands	r2, r3
 80025a6:	1dfb      	adds	r3, r7, #7
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	0018      	movs	r0, r3
 80025ac:	2303      	movs	r3, #3
 80025ae:	4003      	ands	r3, r0
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025b4:	4809      	ldr	r0, [pc, #36]	; (80025dc <__NVIC_SetPriority+0xd8>)
 80025b6:	1dfb      	adds	r3, r7, #7
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	001c      	movs	r4, r3
 80025bc:	230f      	movs	r3, #15
 80025be:	4023      	ands	r3, r4
 80025c0:	3b08      	subs	r3, #8
 80025c2:	089b      	lsrs	r3, r3, #2
 80025c4:	430a      	orrs	r2, r1
 80025c6:	3306      	adds	r3, #6
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	18c3      	adds	r3, r0, r3
 80025cc:	3304      	adds	r3, #4
 80025ce:	601a      	str	r2, [r3, #0]
}
 80025d0:	46c0      	nop			; (mov r8, r8)
 80025d2:	46bd      	mov	sp, r7
 80025d4:	b003      	add	sp, #12
 80025d6:	bd90      	pop	{r4, r7, pc}
 80025d8:	e000e100 	.word	0xe000e100
 80025dc:	e000ed00 	.word	0xe000ed00

080025e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	1e5a      	subs	r2, r3, #1
 80025ec:	2380      	movs	r3, #128	; 0x80
 80025ee:	045b      	lsls	r3, r3, #17
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d301      	bcc.n	80025f8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025f4:	2301      	movs	r3, #1
 80025f6:	e010      	b.n	800261a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025f8:	4b0a      	ldr	r3, [pc, #40]	; (8002624 <SysTick_Config+0x44>)
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	3a01      	subs	r2, #1
 80025fe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002600:	2301      	movs	r3, #1
 8002602:	425b      	negs	r3, r3
 8002604:	2103      	movs	r1, #3
 8002606:	0018      	movs	r0, r3
 8002608:	f7ff ff7c 	bl	8002504 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800260c:	4b05      	ldr	r3, [pc, #20]	; (8002624 <SysTick_Config+0x44>)
 800260e:	2200      	movs	r2, #0
 8002610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002612:	4b04      	ldr	r3, [pc, #16]	; (8002624 <SysTick_Config+0x44>)
 8002614:	2207      	movs	r2, #7
 8002616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002618:	2300      	movs	r3, #0
}
 800261a:	0018      	movs	r0, r3
 800261c:	46bd      	mov	sp, r7
 800261e:	b002      	add	sp, #8
 8002620:	bd80      	pop	{r7, pc}
 8002622:	46c0      	nop			; (mov r8, r8)
 8002624:	e000e010 	.word	0xe000e010

08002628 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	60b9      	str	r1, [r7, #8]
 8002630:	607a      	str	r2, [r7, #4]
 8002632:	210f      	movs	r1, #15
 8002634:	187b      	adds	r3, r7, r1
 8002636:	1c02      	adds	r2, r0, #0
 8002638:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800263a:	68ba      	ldr	r2, [r7, #8]
 800263c:	187b      	adds	r3, r7, r1
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	b25b      	sxtb	r3, r3
 8002642:	0011      	movs	r1, r2
 8002644:	0018      	movs	r0, r3
 8002646:	f7ff ff5d 	bl	8002504 <__NVIC_SetPriority>
}
 800264a:	46c0      	nop			; (mov r8, r8)
 800264c:	46bd      	mov	sp, r7
 800264e:	b004      	add	sp, #16
 8002650:	bd80      	pop	{r7, pc}

08002652 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b082      	sub	sp, #8
 8002656:	af00      	add	r7, sp, #0
 8002658:	0002      	movs	r2, r0
 800265a:	1dfb      	adds	r3, r7, #7
 800265c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800265e:	1dfb      	adds	r3, r7, #7
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	b25b      	sxtb	r3, r3
 8002664:	0018      	movs	r0, r3
 8002666:	f7ff ff33 	bl	80024d0 <__NVIC_EnableIRQ>
}
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	46bd      	mov	sp, r7
 800266e:	b002      	add	sp, #8
 8002670:	bd80      	pop	{r7, pc}

08002672 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b082      	sub	sp, #8
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	0018      	movs	r0, r3
 800267e:	f7ff ffaf 	bl	80025e0 <SysTick_Config>
 8002682:	0003      	movs	r3, r0
}
 8002684:	0018      	movs	r0, r3
 8002686:	46bd      	mov	sp, r7
 8002688:	b002      	add	sp, #8
 800268a:	bd80      	pop	{r7, pc}

0800268c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e015      	b.n	80026ca <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if (hdac->State == HAL_DAC_STATE_RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	791b      	ldrb	r3, [r3, #4]
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d106      	bne.n	80026b6 <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	0018      	movs	r0, r3
 80026b2:	f7ff f847 	bl	8001744 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2202      	movs	r2, #2
 80026ba:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	0018      	movs	r0, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	b002      	add	sp, #8
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_DAC_ConfigChannel>:
  *          This parameter can be one of the following values:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b086      	sub	sp, #24
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	60f8      	str	r0, [r7, #12]
 80026da:	60b9      	str	r1, [r7, #8]
 80026dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80026de:	2300      	movs	r3, #0
 80026e0:	617b      	str	r3, [r7, #20]
 80026e2:	2300      	movs	r3, #0
 80026e4:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	795b      	ldrb	r3, [r3, #5]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d101      	bne.n	80026f2 <HAL_DAC_ConfigChannel+0x20>
 80026ee:	2302      	movs	r3, #2
 80026f0:	e029      	b.n	8002746 <HAL_DAC_ConfigChannel+0x74>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2201      	movs	r2, #1
 80026f6:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2202      	movs	r2, #2
 80026fc:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel); 
 8002706:	223e      	movs	r2, #62	; 0x3e
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	409a      	lsls	r2, r3
 800270c:	0013      	movs	r3, r2
 800270e:	43da      	mvns	r2, r3
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	4013      	ands	r3, r2
 8002714:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	4313      	orrs	r3, r2
 8002720:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	409a      	lsls	r2, r3
 8002728:	0013      	movs	r3, r2
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	4313      	orrs	r3, r2
 800272e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2201      	movs	r2, #1
 800273c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	0018      	movs	r0, r3
 8002748:	46bd      	mov	sp, r7
 800274a:	b006      	add	sp, #24
 800274c:	bd80      	pop	{r7, pc}

0800274e <HAL_DAC_Start>:
       /* STM32F091xC  STM32F098xx */

#if defined (STM32F051x8) || defined (STM32F058xx)

HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b082      	sub	sp, #8
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
 8002756:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	795b      	ldrb	r3, [r3, #5]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d101      	bne.n	8002764 <HAL_DAC_Start+0x16>
 8002760:	2302      	movs	r3, #2
 8002762:	e028      	b.n	80027b6 <HAL_DAC_Start+0x68>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2202      	movs	r2, #2
 800276e:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6819      	ldr	r1, [r3, #0]
 8002776:	2201      	movs	r2, #1
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	409a      	lsls	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	430a      	orrs	r2, r1
 8002782:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10e      	bne.n	80027a8 <HAL_DAC_Start+0x5a>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	223c      	movs	r2, #60	; 0x3c
 8002792:	4013      	ands	r3, r2
 8002794:	2b3c      	cmp	r3, #60	; 0x3c
 8002796:	d107      	bne.n	80027a8 <HAL_DAC_Start+0x5a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2101      	movs	r1, #1
 80027a4:	430a      	orrs	r2, r1
 80027a6:	605a      	str	r2, [r3, #4]
    }
  }
 
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	0018      	movs	r0, r3
 80027b8:	46bd      	mov	sp, r7
 80027ba:	b002      	add	sp, #8
 80027bc:	bd80      	pop	{r7, pc}
	...

080027c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027c8:	2300      	movs	r3, #0
 80027ca:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e036      	b.n	8002844 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2221      	movs	r2, #33	; 0x21
 80027da:	2102      	movs	r1, #2
 80027dc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	4a18      	ldr	r2, [pc, #96]	; (800284c <HAL_DMA_Init+0x8c>)
 80027ea:	4013      	ands	r3, r2
 80027ec:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80027f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002802:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800280e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	69db      	ldr	r3, [r3, #28]
 8002814:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	4313      	orrs	r3, r2
 800281a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	0018      	movs	r0, r3
 8002828:	f000 f9c4 	bl	8002bb4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2221      	movs	r2, #33	; 0x21
 8002836:	2101      	movs	r1, #1
 8002838:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2220      	movs	r2, #32
 800283e:	2100      	movs	r1, #0
 8002840:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002842:	2300      	movs	r3, #0
}  
 8002844:	0018      	movs	r0, r3
 8002846:	46bd      	mov	sp, r7
 8002848:	b004      	add	sp, #16
 800284a:	bd80      	pop	{r7, pc}
 800284c:	ffffc00f 	.word	0xffffc00f

08002850 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
 800285c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800285e:	2317      	movs	r3, #23
 8002860:	18fb      	adds	r3, r7, r3
 8002862:	2200      	movs	r2, #0
 8002864:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2220      	movs	r2, #32
 800286a:	5c9b      	ldrb	r3, [r3, r2]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d101      	bne.n	8002874 <HAL_DMA_Start_IT+0x24>
 8002870:	2302      	movs	r3, #2
 8002872:	e04f      	b.n	8002914 <HAL_DMA_Start_IT+0xc4>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2220      	movs	r2, #32
 8002878:	2101      	movs	r1, #1
 800287a:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2221      	movs	r2, #33	; 0x21
 8002880:	5c9b      	ldrb	r3, [r3, r2]
 8002882:	b2db      	uxtb	r3, r3
 8002884:	2b01      	cmp	r3, #1
 8002886:	d13a      	bne.n	80028fe <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2221      	movs	r2, #33	; 0x21
 800288c:	2102      	movs	r1, #2
 800288e:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2200      	movs	r2, #0
 8002894:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2101      	movs	r1, #1
 80028a2:	438a      	bics	r2, r1
 80028a4:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	68b9      	ldr	r1, [r7, #8]
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f000 f954 	bl	8002b5a <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d008      	beq.n	80028cc <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	210e      	movs	r1, #14
 80028c6:	430a      	orrs	r2, r1
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	e00f      	b.n	80028ec <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	210a      	movs	r1, #10
 80028d8:	430a      	orrs	r2, r1
 80028da:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2104      	movs	r1, #4
 80028e8:	438a      	bics	r2, r1
 80028ea:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2101      	movs	r1, #1
 80028f8:	430a      	orrs	r2, r1
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	e007      	b.n	800290e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2220      	movs	r2, #32
 8002902:	2100      	movs	r1, #0
 8002904:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002906:	2317      	movs	r3, #23
 8002908:	18fb      	adds	r3, r7, r3
 800290a:	2202      	movs	r2, #2
 800290c:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 800290e:	2317      	movs	r3, #23
 8002910:	18fb      	adds	r3, r7, r3
 8002912:	781b      	ldrb	r3, [r3, #0]
} 
 8002914:	0018      	movs	r0, r3
 8002916:	46bd      	mov	sp, r7
 8002918:	b006      	add	sp, #24
 800291a:	bd80      	pop	{r7, pc}

0800291c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2221      	movs	r2, #33	; 0x21
 8002928:	5c9b      	ldrb	r3, [r3, r2]
 800292a:	b2db      	uxtb	r3, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d008      	beq.n	8002942 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2204      	movs	r2, #4
 8002934:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2220      	movs	r2, #32
 800293a:	2100      	movs	r1, #0
 800293c:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e020      	b.n	8002984 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	210e      	movs	r1, #14
 800294e:	438a      	bics	r2, r1
 8002950:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2101      	movs	r1, #1
 800295e:	438a      	bics	r2, r1
 8002960:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296a:	2101      	movs	r1, #1
 800296c:	4091      	lsls	r1, r2
 800296e:	000a      	movs	r2, r1
 8002970:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2221      	movs	r2, #33	; 0x21
 8002976:	2101      	movs	r1, #1
 8002978:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2220      	movs	r2, #32
 800297e:	2100      	movs	r1, #0
 8002980:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	0018      	movs	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	b002      	add	sp, #8
 800298a:	bd80      	pop	{r7, pc}

0800298c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002994:	210f      	movs	r1, #15
 8002996:	187b      	adds	r3, r7, r1
 8002998:	2200      	movs	r2, #0
 800299a:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2221      	movs	r2, #33	; 0x21
 80029a0:	5c9b      	ldrb	r3, [r3, r2]
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d006      	beq.n	80029b6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2204      	movs	r2, #4
 80029ac:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80029ae:	187b      	adds	r3, r7, r1
 80029b0:	2201      	movs	r2, #1
 80029b2:	701a      	strb	r2, [r3, #0]
 80029b4:	e028      	b.n	8002a08 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	210e      	movs	r1, #14
 80029c2:	438a      	bics	r2, r1
 80029c4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2101      	movs	r1, #1
 80029d2:	438a      	bics	r2, r1
 80029d4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029de:	2101      	movs	r1, #1
 80029e0:	4091      	lsls	r1, r2
 80029e2:	000a      	movs	r2, r1
 80029e4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2221      	movs	r2, #33	; 0x21
 80029ea:	2101      	movs	r1, #1
 80029ec:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2220      	movs	r2, #32
 80029f2:	2100      	movs	r1, #0
 80029f4:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d004      	beq.n	8002a08 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	0010      	movs	r0, r2
 8002a06:	4798      	blx	r3
    } 
  }
  return status;
 8002a08:	230f      	movs	r3, #15
 8002a0a:	18fb      	adds	r3, r7, r3
 8002a0c:	781b      	ldrb	r3, [r3, #0]
}
 8002a0e:	0018      	movs	r0, r3
 8002a10:	46bd      	mov	sp, r7
 8002a12:	b004      	add	sp, #16
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b084      	sub	sp, #16
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	2204      	movs	r2, #4
 8002a34:	409a      	lsls	r2, r3
 8002a36:	0013      	movs	r3, r2
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	d024      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x72>
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	2204      	movs	r2, #4
 8002a42:	4013      	ands	r3, r2
 8002a44:	d020      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2220      	movs	r2, #32
 8002a4e:	4013      	ands	r3, r2
 8002a50:	d107      	bne.n	8002a62 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2104      	movs	r1, #4
 8002a5e:	438a      	bics	r2, r1
 8002a60:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6a:	2104      	movs	r1, #4
 8002a6c:	4091      	lsls	r1, r2
 8002a6e:	000a      	movs	r2, r1
 8002a70:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d100      	bne.n	8002a7c <HAL_DMA_IRQHandler+0x66>
 8002a7a:	e06a      	b.n	8002b52 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	0010      	movs	r0, r2
 8002a84:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002a86:	e064      	b.n	8002b52 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8c:	2202      	movs	r2, #2
 8002a8e:	409a      	lsls	r2, r3
 8002a90:	0013      	movs	r3, r2
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	4013      	ands	r3, r2
 8002a96:	d02b      	beq.n	8002af0 <HAL_DMA_IRQHandler+0xda>
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	d027      	beq.n	8002af0 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	d10b      	bne.n	8002ac4 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	210a      	movs	r1, #10
 8002ab8:	438a      	bics	r2, r1
 8002aba:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2221      	movs	r2, #33	; 0x21
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002acc:	2102      	movs	r1, #2
 8002ace:	4091      	lsls	r1, r2
 8002ad0:	000a      	movs	r2, r1
 8002ad2:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	2100      	movs	r1, #0
 8002ada:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d036      	beq.n	8002b52 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	0010      	movs	r0, r2
 8002aec:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002aee:	e030      	b.n	8002b52 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af4:	2208      	movs	r2, #8
 8002af6:	409a      	lsls	r2, r3
 8002af8:	0013      	movs	r3, r2
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	4013      	ands	r3, r2
 8002afe:	d028      	beq.n	8002b52 <HAL_DMA_IRQHandler+0x13c>
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	2208      	movs	r2, #8
 8002b04:	4013      	ands	r3, r2
 8002b06:	d024      	beq.n	8002b52 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	210e      	movs	r1, #14
 8002b14:	438a      	bics	r2, r1
 8002b16:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b20:	2101      	movs	r1, #1
 8002b22:	4091      	lsls	r1, r2
 8002b24:	000a      	movs	r2, r1
 8002b26:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2221      	movs	r2, #33	; 0x21
 8002b32:	2101      	movs	r1, #1
 8002b34:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2220      	movs	r2, #32
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d005      	beq.n	8002b52 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	0010      	movs	r0, r2
 8002b4e:	4798      	blx	r3
    }
   }
}  
 8002b50:	e7ff      	b.n	8002b52 <HAL_DMA_IRQHandler+0x13c>
 8002b52:	46c0      	nop			; (mov r8, r8)
 8002b54:	46bd      	mov	sp, r7
 8002b56:	b004      	add	sp, #16
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b084      	sub	sp, #16
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	60f8      	str	r0, [r7, #12]
 8002b62:	60b9      	str	r1, [r7, #8]
 8002b64:	607a      	str	r2, [r7, #4]
 8002b66:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b70:	2101      	movs	r1, #1
 8002b72:	4091      	lsls	r1, r2
 8002b74:	000a      	movs	r2, r1
 8002b76:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	2b10      	cmp	r3, #16
 8002b86:	d108      	bne.n	8002b9a <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68ba      	ldr	r2, [r7, #8]
 8002b96:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b98:	e007      	b.n	8002baa <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68ba      	ldr	r2, [r7, #8]
 8002ba0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	60da      	str	r2, [r3, #12]
}
 8002baa:	46c0      	nop			; (mov r8, r8)
 8002bac:	46bd      	mov	sp, r7
 8002bae:	b004      	add	sp, #16
 8002bb0:	bd80      	pop	{r7, pc}
	...

08002bb4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a08      	ldr	r2, [pc, #32]	; (8002be4 <DMA_CalcBaseAndBitshift+0x30>)
 8002bc2:	4694      	mov	ip, r2
 8002bc4:	4463      	add	r3, ip
 8002bc6:	2114      	movs	r1, #20
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f7fd fa9d 	bl	8000108 <__udivsi3>
 8002bce:	0003      	movs	r3, r0
 8002bd0:	009a      	lsls	r2, r3, #2
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a03      	ldr	r2, [pc, #12]	; (8002be8 <DMA_CalcBaseAndBitshift+0x34>)
 8002bda:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002bdc:	46c0      	nop			; (mov r8, r8)
 8002bde:	46bd      	mov	sp, r7
 8002be0:	b002      	add	sp, #8
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	bffdfff8 	.word	0xbffdfff8
 8002be8:	40020000 	.word	0x40020000

08002bec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bfa:	e14f      	b.n	8002e9c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2101      	movs	r1, #1
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	4091      	lsls	r1, r2
 8002c06:	000a      	movs	r2, r1
 8002c08:	4013      	ands	r3, r2
 8002c0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d100      	bne.n	8002c14 <HAL_GPIO_Init+0x28>
 8002c12:	e140      	b.n	8002e96 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	2203      	movs	r2, #3
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d005      	beq.n	8002c2c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2203      	movs	r2, #3
 8002c26:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d130      	bne.n	8002c8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	2203      	movs	r2, #3
 8002c38:	409a      	lsls	r2, r3
 8002c3a:	0013      	movs	r3, r2
 8002c3c:	43da      	mvns	r2, r3
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	4013      	ands	r3, r2
 8002c42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	68da      	ldr	r2, [r3, #12]
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	409a      	lsls	r2, r3
 8002c4e:	0013      	movs	r3, r2
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c62:	2201      	movs	r2, #1
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	409a      	lsls	r2, r3
 8002c68:	0013      	movs	r3, r2
 8002c6a:	43da      	mvns	r2, r3
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	091b      	lsrs	r3, r3, #4
 8002c78:	2201      	movs	r2, #1
 8002c7a:	401a      	ands	r2, r3
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	409a      	lsls	r2, r3
 8002c80:	0013      	movs	r3, r2
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2203      	movs	r2, #3
 8002c94:	4013      	ands	r3, r2
 8002c96:	2b03      	cmp	r3, #3
 8002c98:	d017      	beq.n	8002cca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	2203      	movs	r2, #3
 8002ca6:	409a      	lsls	r2, r3
 8002ca8:	0013      	movs	r3, r2
 8002caa:	43da      	mvns	r2, r3
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	689a      	ldr	r2, [r3, #8]
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	409a      	lsls	r2, r3
 8002cbc:	0013      	movs	r3, r2
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2203      	movs	r2, #3
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d123      	bne.n	8002d1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	08da      	lsrs	r2, r3, #3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	3208      	adds	r2, #8
 8002cde:	0092      	lsls	r2, r2, #2
 8002ce0:	58d3      	ldr	r3, [r2, r3]
 8002ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	2207      	movs	r2, #7
 8002ce8:	4013      	ands	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	220f      	movs	r2, #15
 8002cee:	409a      	lsls	r2, r3
 8002cf0:	0013      	movs	r3, r2
 8002cf2:	43da      	mvns	r2, r3
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	691a      	ldr	r2, [r3, #16]
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	2107      	movs	r1, #7
 8002d02:	400b      	ands	r3, r1
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	409a      	lsls	r2, r3
 8002d08:	0013      	movs	r3, r2
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	08da      	lsrs	r2, r3, #3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3208      	adds	r2, #8
 8002d18:	0092      	lsls	r2, r2, #2
 8002d1a:	6939      	ldr	r1, [r7, #16]
 8002d1c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	2203      	movs	r2, #3
 8002d2a:	409a      	lsls	r2, r3
 8002d2c:	0013      	movs	r3, r2
 8002d2e:	43da      	mvns	r2, r3
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	4013      	ands	r3, r2
 8002d34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2203      	movs	r2, #3
 8002d3c:	401a      	ands	r2, r3
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	409a      	lsls	r2, r3
 8002d44:	0013      	movs	r3, r2
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685a      	ldr	r2, [r3, #4]
 8002d56:	23c0      	movs	r3, #192	; 0xc0
 8002d58:	029b      	lsls	r3, r3, #10
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	d100      	bne.n	8002d60 <HAL_GPIO_Init+0x174>
 8002d5e:	e09a      	b.n	8002e96 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d60:	4b54      	ldr	r3, [pc, #336]	; (8002eb4 <HAL_GPIO_Init+0x2c8>)
 8002d62:	699a      	ldr	r2, [r3, #24]
 8002d64:	4b53      	ldr	r3, [pc, #332]	; (8002eb4 <HAL_GPIO_Init+0x2c8>)
 8002d66:	2101      	movs	r1, #1
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	619a      	str	r2, [r3, #24]
 8002d6c:	4b51      	ldr	r3, [pc, #324]	; (8002eb4 <HAL_GPIO_Init+0x2c8>)
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	2201      	movs	r2, #1
 8002d72:	4013      	ands	r3, r2
 8002d74:	60bb      	str	r3, [r7, #8]
 8002d76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d78:	4a4f      	ldr	r2, [pc, #316]	; (8002eb8 <HAL_GPIO_Init+0x2cc>)
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	089b      	lsrs	r3, r3, #2
 8002d7e:	3302      	adds	r3, #2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	589b      	ldr	r3, [r3, r2]
 8002d84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	2203      	movs	r2, #3
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	220f      	movs	r2, #15
 8002d90:	409a      	lsls	r2, r3
 8002d92:	0013      	movs	r3, r2
 8002d94:	43da      	mvns	r2, r3
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	2390      	movs	r3, #144	; 0x90
 8002da0:	05db      	lsls	r3, r3, #23
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d013      	beq.n	8002dce <HAL_GPIO_Init+0x1e2>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a44      	ldr	r2, [pc, #272]	; (8002ebc <HAL_GPIO_Init+0x2d0>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d00d      	beq.n	8002dca <HAL_GPIO_Init+0x1de>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a43      	ldr	r2, [pc, #268]	; (8002ec0 <HAL_GPIO_Init+0x2d4>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d007      	beq.n	8002dc6 <HAL_GPIO_Init+0x1da>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a42      	ldr	r2, [pc, #264]	; (8002ec4 <HAL_GPIO_Init+0x2d8>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d101      	bne.n	8002dc2 <HAL_GPIO_Init+0x1d6>
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e006      	b.n	8002dd0 <HAL_GPIO_Init+0x1e4>
 8002dc2:	2305      	movs	r3, #5
 8002dc4:	e004      	b.n	8002dd0 <HAL_GPIO_Init+0x1e4>
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	e002      	b.n	8002dd0 <HAL_GPIO_Init+0x1e4>
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e000      	b.n	8002dd0 <HAL_GPIO_Init+0x1e4>
 8002dce:	2300      	movs	r3, #0
 8002dd0:	697a      	ldr	r2, [r7, #20]
 8002dd2:	2103      	movs	r1, #3
 8002dd4:	400a      	ands	r2, r1
 8002dd6:	0092      	lsls	r2, r2, #2
 8002dd8:	4093      	lsls	r3, r2
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002de0:	4935      	ldr	r1, [pc, #212]	; (8002eb8 <HAL_GPIO_Init+0x2cc>)
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	089b      	lsrs	r3, r3, #2
 8002de6:	3302      	adds	r3, #2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dee:	4b36      	ldr	r3, [pc, #216]	; (8002ec8 <HAL_GPIO_Init+0x2dc>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	43da      	mvns	r2, r3
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	2380      	movs	r3, #128	; 0x80
 8002e04:	025b      	lsls	r3, r3, #9
 8002e06:	4013      	ands	r3, r2
 8002e08:	d003      	beq.n	8002e12 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002e12:	4b2d      	ldr	r3, [pc, #180]	; (8002ec8 <HAL_GPIO_Init+0x2dc>)
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002e18:	4b2b      	ldr	r3, [pc, #172]	; (8002ec8 <HAL_GPIO_Init+0x2dc>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	43da      	mvns	r2, r3
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	4013      	ands	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	2380      	movs	r3, #128	; 0x80
 8002e2e:	029b      	lsls	r3, r3, #10
 8002e30:	4013      	ands	r3, r2
 8002e32:	d003      	beq.n	8002e3c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002e3c:	4b22      	ldr	r3, [pc, #136]	; (8002ec8 <HAL_GPIO_Init+0x2dc>)
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e42:	4b21      	ldr	r3, [pc, #132]	; (8002ec8 <HAL_GPIO_Init+0x2dc>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	43da      	mvns	r2, r3
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	2380      	movs	r3, #128	; 0x80
 8002e58:	035b      	lsls	r3, r3, #13
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	d003      	beq.n	8002e66 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002e66:	4b18      	ldr	r3, [pc, #96]	; (8002ec8 <HAL_GPIO_Init+0x2dc>)
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002e6c:	4b16      	ldr	r3, [pc, #88]	; (8002ec8 <HAL_GPIO_Init+0x2dc>)
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	43da      	mvns	r2, r3
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	2380      	movs	r3, #128	; 0x80
 8002e82:	039b      	lsls	r3, r3, #14
 8002e84:	4013      	ands	r3, r2
 8002e86:	d003      	beq.n	8002e90 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002e90:	4b0d      	ldr	r3, [pc, #52]	; (8002ec8 <HAL_GPIO_Init+0x2dc>)
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	40da      	lsrs	r2, r3
 8002ea4:	1e13      	subs	r3, r2, #0
 8002ea6:	d000      	beq.n	8002eaa <HAL_GPIO_Init+0x2be>
 8002ea8:	e6a8      	b.n	8002bfc <HAL_GPIO_Init+0x10>
  } 
}
 8002eaa:	46c0      	nop			; (mov r8, r8)
 8002eac:	46c0      	nop			; (mov r8, r8)
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	b006      	add	sp, #24
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	40010000 	.word	0x40010000
 8002ebc:	48000400 	.word	0x48000400
 8002ec0:	48000800 	.word	0x48000800
 8002ec4:	48000c00 	.word	0x48000c00
 8002ec8:	40010400 	.word	0x40010400

08002ecc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	0008      	movs	r0, r1
 8002ed6:	0011      	movs	r1, r2
 8002ed8:	1cbb      	adds	r3, r7, #2
 8002eda:	1c02      	adds	r2, r0, #0
 8002edc:	801a      	strh	r2, [r3, #0]
 8002ede:	1c7b      	adds	r3, r7, #1
 8002ee0:	1c0a      	adds	r2, r1, #0
 8002ee2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ee4:	1c7b      	adds	r3, r7, #1
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d004      	beq.n	8002ef6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002eec:	1cbb      	adds	r3, r7, #2
 8002eee:	881a      	ldrh	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ef4:	e003      	b.n	8002efe <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ef6:	1cbb      	adds	r3, r7, #2
 8002ef8:	881a      	ldrh	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002efe:	46c0      	nop			; (mov r8, r8)
 8002f00:	46bd      	mov	sp, r7
 8002f02:	b002      	add	sp, #8
 8002f04:	bd80      	pop	{r7, pc}
	...

08002f08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e082      	b.n	8003020 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2241      	movs	r2, #65	; 0x41
 8002f1e:	5c9b      	ldrb	r3, [r3, r2]
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d107      	bne.n	8002f36 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2240      	movs	r2, #64	; 0x40
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	0018      	movs	r0, r3
 8002f32:	f7fe fc4d 	bl	80017d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2241      	movs	r2, #65	; 0x41
 8002f3a:	2124      	movs	r1, #36	; 0x24
 8002f3c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2101      	movs	r1, #1
 8002f4a:	438a      	bics	r2, r1
 8002f4c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685a      	ldr	r2, [r3, #4]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4934      	ldr	r1, [pc, #208]	; (8003028 <HAL_I2C_Init+0x120>)
 8002f58:	400a      	ands	r2, r1
 8002f5a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689a      	ldr	r2, [r3, #8]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4931      	ldr	r1, [pc, #196]	; (800302c <HAL_I2C_Init+0x124>)
 8002f68:	400a      	ands	r2, r1
 8002f6a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d108      	bne.n	8002f86 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2180      	movs	r1, #128	; 0x80
 8002f7e:	0209      	lsls	r1, r1, #8
 8002f80:	430a      	orrs	r2, r1
 8002f82:	609a      	str	r2, [r3, #8]
 8002f84:	e007      	b.n	8002f96 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	689a      	ldr	r2, [r3, #8]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2184      	movs	r1, #132	; 0x84
 8002f90:	0209      	lsls	r1, r1, #8
 8002f92:	430a      	orrs	r2, r1
 8002f94:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d104      	bne.n	8002fa8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2280      	movs	r2, #128	; 0x80
 8002fa4:	0112      	lsls	r2, r2, #4
 8002fa6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	491f      	ldr	r1, [pc, #124]	; (8003030 <HAL_I2C_Init+0x128>)
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68da      	ldr	r2, [r3, #12]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	491a      	ldr	r1, [pc, #104]	; (800302c <HAL_I2C_Init+0x124>)
 8002fc4:	400a      	ands	r2, r1
 8002fc6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	691a      	ldr	r2, [r3, #16]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	69d9      	ldr	r1, [r3, #28]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a1a      	ldr	r2, [r3, #32]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2101      	movs	r1, #1
 8002ffe:	430a      	orrs	r2, r1
 8003000:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2241      	movs	r2, #65	; 0x41
 800300c:	2120      	movs	r1, #32
 800300e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2242      	movs	r2, #66	; 0x42
 800301a:	2100      	movs	r1, #0
 800301c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	0018      	movs	r0, r3
 8003022:	46bd      	mov	sp, r7
 8003024:	b002      	add	sp, #8
 8003026:	bd80      	pop	{r7, pc}
 8003028:	f0ffffff 	.word	0xf0ffffff
 800302c:	ffff7fff 	.word	0xffff7fff
 8003030:	02008000 	.word	0x02008000

08003034 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003034:	b590      	push	{r4, r7, lr}
 8003036:	b089      	sub	sp, #36	; 0x24
 8003038:	af02      	add	r7, sp, #8
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	0008      	movs	r0, r1
 800303e:	607a      	str	r2, [r7, #4]
 8003040:	0019      	movs	r1, r3
 8003042:	230a      	movs	r3, #10
 8003044:	18fb      	adds	r3, r7, r3
 8003046:	1c02      	adds	r2, r0, #0
 8003048:	801a      	strh	r2, [r3, #0]
 800304a:	2308      	movs	r3, #8
 800304c:	18fb      	adds	r3, r7, r3
 800304e:	1c0a      	adds	r2, r1, #0
 8003050:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2241      	movs	r2, #65	; 0x41
 8003056:	5c9b      	ldrb	r3, [r3, r2]
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b20      	cmp	r3, #32
 800305c:	d000      	beq.n	8003060 <HAL_I2C_Master_Transmit+0x2c>
 800305e:	e0e7      	b.n	8003230 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2240      	movs	r2, #64	; 0x40
 8003064:	5c9b      	ldrb	r3, [r3, r2]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d101      	bne.n	800306e <HAL_I2C_Master_Transmit+0x3a>
 800306a:	2302      	movs	r3, #2
 800306c:	e0e1      	b.n	8003232 <HAL_I2C_Master_Transmit+0x1fe>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2240      	movs	r2, #64	; 0x40
 8003072:	2101      	movs	r1, #1
 8003074:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003076:	f7fe fdff 	bl	8001c78 <HAL_GetTick>
 800307a:	0003      	movs	r3, r0
 800307c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800307e:	2380      	movs	r3, #128	; 0x80
 8003080:	0219      	lsls	r1, r3, #8
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	2319      	movs	r3, #25
 800308a:	2201      	movs	r2, #1
 800308c:	f000 fa04 	bl	8003498 <I2C_WaitOnFlagUntilTimeout>
 8003090:	1e03      	subs	r3, r0, #0
 8003092:	d001      	beq.n	8003098 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e0cc      	b.n	8003232 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2241      	movs	r2, #65	; 0x41
 800309c:	2121      	movs	r1, #33	; 0x21
 800309e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2242      	movs	r2, #66	; 0x42
 80030a4:	2110      	movs	r1, #16
 80030a6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2208      	movs	r2, #8
 80030b8:	18ba      	adds	r2, r7, r2
 80030ba:	8812      	ldrh	r2, [r2, #0]
 80030bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	2bff      	cmp	r3, #255	; 0xff
 80030cc:	d911      	bls.n	80030f2 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	22ff      	movs	r2, #255	; 0xff
 80030d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	2380      	movs	r3, #128	; 0x80
 80030dc:	045c      	lsls	r4, r3, #17
 80030de:	230a      	movs	r3, #10
 80030e0:	18fb      	adds	r3, r7, r3
 80030e2:	8819      	ldrh	r1, [r3, #0]
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	4b55      	ldr	r3, [pc, #340]	; (800323c <HAL_I2C_Master_Transmit+0x208>)
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	0023      	movs	r3, r4
 80030ec:	f000 fb74 	bl	80037d8 <I2C_TransferConfig>
 80030f0:	e075      	b.n	80031de <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003100:	b2da      	uxtb	r2, r3
 8003102:	2380      	movs	r3, #128	; 0x80
 8003104:	049c      	lsls	r4, r3, #18
 8003106:	230a      	movs	r3, #10
 8003108:	18fb      	adds	r3, r7, r3
 800310a:	8819      	ldrh	r1, [r3, #0]
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	4b4b      	ldr	r3, [pc, #300]	; (800323c <HAL_I2C_Master_Transmit+0x208>)
 8003110:	9300      	str	r3, [sp, #0]
 8003112:	0023      	movs	r3, r4
 8003114:	f000 fb60 	bl	80037d8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003118:	e061      	b.n	80031de <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	0018      	movs	r0, r3
 8003122:	f000 f9f8 	bl	8003516 <I2C_WaitOnTXISFlagUntilTimeout>
 8003126:	1e03      	subs	r3, r0, #0
 8003128:	d001      	beq.n	800312e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e081      	b.n	8003232 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003132:	781a      	ldrb	r2, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313e:	1c5a      	adds	r2, r3, #1
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003148:	b29b      	uxth	r3, r3
 800314a:	3b01      	subs	r3, #1
 800314c:	b29a      	uxth	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003156:	3b01      	subs	r3, #1
 8003158:	b29a      	uxth	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003162:	b29b      	uxth	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	d03a      	beq.n	80031de <HAL_I2C_Master_Transmit+0x1aa>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800316c:	2b00      	cmp	r3, #0
 800316e:	d136      	bne.n	80031de <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003170:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	9300      	str	r3, [sp, #0]
 8003178:	0013      	movs	r3, r2
 800317a:	2200      	movs	r2, #0
 800317c:	2180      	movs	r1, #128	; 0x80
 800317e:	f000 f98b 	bl	8003498 <I2C_WaitOnFlagUntilTimeout>
 8003182:	1e03      	subs	r3, r0, #0
 8003184:	d001      	beq.n	800318a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e053      	b.n	8003232 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800318e:	b29b      	uxth	r3, r3
 8003190:	2bff      	cmp	r3, #255	; 0xff
 8003192:	d911      	bls.n	80031b8 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	22ff      	movs	r2, #255	; 0xff
 8003198:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800319e:	b2da      	uxtb	r2, r3
 80031a0:	2380      	movs	r3, #128	; 0x80
 80031a2:	045c      	lsls	r4, r3, #17
 80031a4:	230a      	movs	r3, #10
 80031a6:	18fb      	adds	r3, r7, r3
 80031a8:	8819      	ldrh	r1, [r3, #0]
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	2300      	movs	r3, #0
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	0023      	movs	r3, r4
 80031b2:	f000 fb11 	bl	80037d8 <I2C_TransferConfig>
 80031b6:	e012      	b.n	80031de <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031bc:	b29a      	uxth	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c6:	b2da      	uxtb	r2, r3
 80031c8:	2380      	movs	r3, #128	; 0x80
 80031ca:	049c      	lsls	r4, r3, #18
 80031cc:	230a      	movs	r3, #10
 80031ce:	18fb      	adds	r3, r7, r3
 80031d0:	8819      	ldrh	r1, [r3, #0]
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	2300      	movs	r3, #0
 80031d6:	9300      	str	r3, [sp, #0]
 80031d8:	0023      	movs	r3, r4
 80031da:	f000 fafd 	bl	80037d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d198      	bne.n	800311a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	0018      	movs	r0, r3
 80031f0:	f000 f9d0 	bl	8003594 <I2C_WaitOnSTOPFlagUntilTimeout>
 80031f4:	1e03      	subs	r3, r0, #0
 80031f6:	d001      	beq.n	80031fc <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e01a      	b.n	8003232 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2220      	movs	r2, #32
 8003202:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	685a      	ldr	r2, [r3, #4]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	490c      	ldr	r1, [pc, #48]	; (8003240 <HAL_I2C_Master_Transmit+0x20c>)
 8003210:	400a      	ands	r2, r1
 8003212:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2241      	movs	r2, #65	; 0x41
 8003218:	2120      	movs	r1, #32
 800321a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2242      	movs	r2, #66	; 0x42
 8003220:	2100      	movs	r1, #0
 8003222:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2240      	movs	r2, #64	; 0x40
 8003228:	2100      	movs	r1, #0
 800322a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800322c:	2300      	movs	r3, #0
 800322e:	e000      	b.n	8003232 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003230:	2302      	movs	r3, #2
  }
}
 8003232:	0018      	movs	r0, r3
 8003234:	46bd      	mov	sp, r7
 8003236:	b007      	add	sp, #28
 8003238:	bd90      	pop	{r4, r7, pc}
 800323a:	46c0      	nop			; (mov r8, r8)
 800323c:	80002000 	.word	0x80002000
 8003240:	fe00e800 	.word	0xfe00e800

08003244 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003244:	b590      	push	{r4, r7, lr}
 8003246:	b089      	sub	sp, #36	; 0x24
 8003248:	af02      	add	r7, sp, #8
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	0008      	movs	r0, r1
 800324e:	607a      	str	r2, [r7, #4]
 8003250:	0019      	movs	r1, r3
 8003252:	230a      	movs	r3, #10
 8003254:	18fb      	adds	r3, r7, r3
 8003256:	1c02      	adds	r2, r0, #0
 8003258:	801a      	strh	r2, [r3, #0]
 800325a:	2308      	movs	r3, #8
 800325c:	18fb      	adds	r3, r7, r3
 800325e:	1c0a      	adds	r2, r1, #0
 8003260:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2241      	movs	r2, #65	; 0x41
 8003266:	5c9b      	ldrb	r3, [r3, r2]
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b20      	cmp	r3, #32
 800326c:	d000      	beq.n	8003270 <HAL_I2C_Master_Receive+0x2c>
 800326e:	e0e8      	b.n	8003442 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2240      	movs	r2, #64	; 0x40
 8003274:	5c9b      	ldrb	r3, [r3, r2]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d101      	bne.n	800327e <HAL_I2C_Master_Receive+0x3a>
 800327a:	2302      	movs	r3, #2
 800327c:	e0e2      	b.n	8003444 <HAL_I2C_Master_Receive+0x200>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2240      	movs	r2, #64	; 0x40
 8003282:	2101      	movs	r1, #1
 8003284:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003286:	f7fe fcf7 	bl	8001c78 <HAL_GetTick>
 800328a:	0003      	movs	r3, r0
 800328c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800328e:	2380      	movs	r3, #128	; 0x80
 8003290:	0219      	lsls	r1, r3, #8
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	2319      	movs	r3, #25
 800329a:	2201      	movs	r2, #1
 800329c:	f000 f8fc 	bl	8003498 <I2C_WaitOnFlagUntilTimeout>
 80032a0:	1e03      	subs	r3, r0, #0
 80032a2:	d001      	beq.n	80032a8 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e0cd      	b.n	8003444 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2241      	movs	r2, #65	; 0x41
 80032ac:	2122      	movs	r1, #34	; 0x22
 80032ae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2242      	movs	r2, #66	; 0x42
 80032b4:	2110      	movs	r1, #16
 80032b6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2208      	movs	r2, #8
 80032c8:	18ba      	adds	r2, r7, r2
 80032ca:	8812      	ldrh	r2, [r2, #0]
 80032cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d8:	b29b      	uxth	r3, r3
 80032da:	2bff      	cmp	r3, #255	; 0xff
 80032dc:	d911      	bls.n	8003302 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	22ff      	movs	r2, #255	; 0xff
 80032e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	2380      	movs	r3, #128	; 0x80
 80032ec:	045c      	lsls	r4, r3, #17
 80032ee:	230a      	movs	r3, #10
 80032f0:	18fb      	adds	r3, r7, r3
 80032f2:	8819      	ldrh	r1, [r3, #0]
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	4b55      	ldr	r3, [pc, #340]	; (800344c <HAL_I2C_Master_Receive+0x208>)
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	0023      	movs	r3, r4
 80032fc:	f000 fa6c 	bl	80037d8 <I2C_TransferConfig>
 8003300:	e076      	b.n	80033f0 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003306:	b29a      	uxth	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003310:	b2da      	uxtb	r2, r3
 8003312:	2380      	movs	r3, #128	; 0x80
 8003314:	049c      	lsls	r4, r3, #18
 8003316:	230a      	movs	r3, #10
 8003318:	18fb      	adds	r3, r7, r3
 800331a:	8819      	ldrh	r1, [r3, #0]
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	4b4b      	ldr	r3, [pc, #300]	; (800344c <HAL_I2C_Master_Receive+0x208>)
 8003320:	9300      	str	r3, [sp, #0]
 8003322:	0023      	movs	r3, r4
 8003324:	f000 fa58 	bl	80037d8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003328:	e062      	b.n	80033f0 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	0018      	movs	r0, r3
 8003332:	f000 f96b 	bl	800360c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003336:	1e03      	subs	r3, r0, #0
 8003338:	d001      	beq.n	800333e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e082      	b.n	8003444 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003348:	b2d2      	uxtb	r2, r2
 800334a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003350:	1c5a      	adds	r2, r3, #1
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800335a:	3b01      	subs	r3, #1
 800335c:	b29a      	uxth	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003366:	b29b      	uxth	r3, r3
 8003368:	3b01      	subs	r3, #1
 800336a:	b29a      	uxth	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003374:	b29b      	uxth	r3, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d03a      	beq.n	80033f0 <HAL_I2C_Master_Receive+0x1ac>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800337e:	2b00      	cmp	r3, #0
 8003380:	d136      	bne.n	80033f0 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003382:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	0013      	movs	r3, r2
 800338c:	2200      	movs	r2, #0
 800338e:	2180      	movs	r1, #128	; 0x80
 8003390:	f000 f882 	bl	8003498 <I2C_WaitOnFlagUntilTimeout>
 8003394:	1e03      	subs	r3, r0, #0
 8003396:	d001      	beq.n	800339c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e053      	b.n	8003444 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	2bff      	cmp	r3, #255	; 0xff
 80033a4:	d911      	bls.n	80033ca <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	22ff      	movs	r2, #255	; 0xff
 80033aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b0:	b2da      	uxtb	r2, r3
 80033b2:	2380      	movs	r3, #128	; 0x80
 80033b4:	045c      	lsls	r4, r3, #17
 80033b6:	230a      	movs	r3, #10
 80033b8:	18fb      	adds	r3, r7, r3
 80033ba:	8819      	ldrh	r1, [r3, #0]
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	2300      	movs	r3, #0
 80033c0:	9300      	str	r3, [sp, #0]
 80033c2:	0023      	movs	r3, r4
 80033c4:	f000 fa08 	bl	80037d8 <I2C_TransferConfig>
 80033c8:	e012      	b.n	80033f0 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d8:	b2da      	uxtb	r2, r3
 80033da:	2380      	movs	r3, #128	; 0x80
 80033dc:	049c      	lsls	r4, r3, #18
 80033de:	230a      	movs	r3, #10
 80033e0:	18fb      	adds	r3, r7, r3
 80033e2:	8819      	ldrh	r1, [r3, #0]
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	2300      	movs	r3, #0
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	0023      	movs	r3, r4
 80033ec:	f000 f9f4 	bl	80037d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d197      	bne.n	800332a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	0018      	movs	r0, r3
 8003402:	f000 f8c7 	bl	8003594 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003406:	1e03      	subs	r3, r0, #0
 8003408:	d001      	beq.n	800340e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e01a      	b.n	8003444 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2220      	movs	r2, #32
 8003414:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	490b      	ldr	r1, [pc, #44]	; (8003450 <HAL_I2C_Master_Receive+0x20c>)
 8003422:	400a      	ands	r2, r1
 8003424:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2241      	movs	r2, #65	; 0x41
 800342a:	2120      	movs	r1, #32
 800342c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2242      	movs	r2, #66	; 0x42
 8003432:	2100      	movs	r1, #0
 8003434:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2240      	movs	r2, #64	; 0x40
 800343a:	2100      	movs	r1, #0
 800343c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800343e:	2300      	movs	r3, #0
 8003440:	e000      	b.n	8003444 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8003442:	2302      	movs	r3, #2
  }
}
 8003444:	0018      	movs	r0, r3
 8003446:	46bd      	mov	sp, r7
 8003448:	b007      	add	sp, #28
 800344a:	bd90      	pop	{r4, r7, pc}
 800344c:	80002400 	.word	0x80002400
 8003450:	fe00e800 	.word	0xfe00e800

08003454 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	2202      	movs	r2, #2
 8003464:	4013      	ands	r3, r2
 8003466:	2b02      	cmp	r3, #2
 8003468:	d103      	bne.n	8003472 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2200      	movs	r2, #0
 8003470:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	2201      	movs	r2, #1
 800347a:	4013      	ands	r3, r2
 800347c:	2b01      	cmp	r3, #1
 800347e:	d007      	beq.n	8003490 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	699a      	ldr	r2, [r3, #24]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2101      	movs	r1, #1
 800348c:	430a      	orrs	r2, r1
 800348e:	619a      	str	r2, [r3, #24]
  }
}
 8003490:	46c0      	nop			; (mov r8, r8)
 8003492:	46bd      	mov	sp, r7
 8003494:	b002      	add	sp, #8
 8003496:	bd80      	pop	{r7, pc}

08003498 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	603b      	str	r3, [r7, #0]
 80034a4:	1dfb      	adds	r3, r7, #7
 80034a6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034a8:	e021      	b.n	80034ee <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	3301      	adds	r3, #1
 80034ae:	d01e      	beq.n	80034ee <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034b0:	f7fe fbe2 	bl	8001c78 <HAL_GetTick>
 80034b4:	0002      	movs	r2, r0
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d302      	bcc.n	80034c6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d113      	bne.n	80034ee <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ca:	2220      	movs	r2, #32
 80034cc:	431a      	orrs	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2241      	movs	r2, #65	; 0x41
 80034d6:	2120      	movs	r1, #32
 80034d8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2242      	movs	r2, #66	; 0x42
 80034de:	2100      	movs	r1, #0
 80034e0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2240      	movs	r2, #64	; 0x40
 80034e6:	2100      	movs	r1, #0
 80034e8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e00f      	b.n	800350e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	68ba      	ldr	r2, [r7, #8]
 80034f6:	4013      	ands	r3, r2
 80034f8:	68ba      	ldr	r2, [r7, #8]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	425a      	negs	r2, r3
 80034fe:	4153      	adcs	r3, r2
 8003500:	b2db      	uxtb	r3, r3
 8003502:	001a      	movs	r2, r3
 8003504:	1dfb      	adds	r3, r7, #7
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	429a      	cmp	r2, r3
 800350a:	d0ce      	beq.n	80034aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	0018      	movs	r0, r3
 8003510:	46bd      	mov	sp, r7
 8003512:	b004      	add	sp, #16
 8003514:	bd80      	pop	{r7, pc}

08003516 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b084      	sub	sp, #16
 800351a:	af00      	add	r7, sp, #0
 800351c:	60f8      	str	r0, [r7, #12]
 800351e:	60b9      	str	r1, [r7, #8]
 8003520:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003522:	e02b      	b.n	800357c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	68b9      	ldr	r1, [r7, #8]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	0018      	movs	r0, r3
 800352c:	f000 f8da 	bl	80036e4 <I2C_IsAcknowledgeFailed>
 8003530:	1e03      	subs	r3, r0, #0
 8003532:	d001      	beq.n	8003538 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e029      	b.n	800358c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	3301      	adds	r3, #1
 800353c:	d01e      	beq.n	800357c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800353e:	f7fe fb9b 	bl	8001c78 <HAL_GetTick>
 8003542:	0002      	movs	r2, r0
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	68ba      	ldr	r2, [r7, #8]
 800354a:	429a      	cmp	r2, r3
 800354c:	d302      	bcc.n	8003554 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d113      	bne.n	800357c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003558:	2220      	movs	r2, #32
 800355a:	431a      	orrs	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2241      	movs	r2, #65	; 0x41
 8003564:	2120      	movs	r1, #32
 8003566:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2242      	movs	r2, #66	; 0x42
 800356c:	2100      	movs	r1, #0
 800356e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2240      	movs	r2, #64	; 0x40
 8003574:	2100      	movs	r1, #0
 8003576:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e007      	b.n	800358c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	2202      	movs	r2, #2
 8003584:	4013      	ands	r3, r2
 8003586:	2b02      	cmp	r3, #2
 8003588:	d1cc      	bne.n	8003524 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	0018      	movs	r0, r3
 800358e:	46bd      	mov	sp, r7
 8003590:	b004      	add	sp, #16
 8003592:	bd80      	pop	{r7, pc}

08003594 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035a0:	e028      	b.n	80035f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	68b9      	ldr	r1, [r7, #8]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	0018      	movs	r0, r3
 80035aa:	f000 f89b 	bl	80036e4 <I2C_IsAcknowledgeFailed>
 80035ae:	1e03      	subs	r3, r0, #0
 80035b0:	d001      	beq.n	80035b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e026      	b.n	8003604 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035b6:	f7fe fb5f 	bl	8001c78 <HAL_GetTick>
 80035ba:	0002      	movs	r2, r0
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d302      	bcc.n	80035cc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d113      	bne.n	80035f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d0:	2220      	movs	r2, #32
 80035d2:	431a      	orrs	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2241      	movs	r2, #65	; 0x41
 80035dc:	2120      	movs	r1, #32
 80035de:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2242      	movs	r2, #66	; 0x42
 80035e4:	2100      	movs	r1, #0
 80035e6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2240      	movs	r2, #64	; 0x40
 80035ec:	2100      	movs	r1, #0
 80035ee:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e007      	b.n	8003604 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	2220      	movs	r2, #32
 80035fc:	4013      	ands	r3, r2
 80035fe:	2b20      	cmp	r3, #32
 8003600:	d1cf      	bne.n	80035a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	0018      	movs	r0, r3
 8003606:	46bd      	mov	sp, r7
 8003608:	b004      	add	sp, #16
 800360a:	bd80      	pop	{r7, pc}

0800360c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003618:	e055      	b.n	80036c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	68b9      	ldr	r1, [r7, #8]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	0018      	movs	r0, r3
 8003622:	f000 f85f 	bl	80036e4 <I2C_IsAcknowledgeFailed>
 8003626:	1e03      	subs	r3, r0, #0
 8003628:	d001      	beq.n	800362e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e053      	b.n	80036d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	2220      	movs	r2, #32
 8003636:	4013      	ands	r3, r2
 8003638:	2b20      	cmp	r3, #32
 800363a:	d129      	bne.n	8003690 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	2204      	movs	r2, #4
 8003644:	4013      	ands	r3, r2
 8003646:	2b04      	cmp	r3, #4
 8003648:	d105      	bne.n	8003656 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003652:	2300      	movs	r3, #0
 8003654:	e03f      	b.n	80036d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2220      	movs	r2, #32
 800365c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	491d      	ldr	r1, [pc, #116]	; (80036e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800366a:	400a      	ands	r2, r1
 800366c:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2241      	movs	r2, #65	; 0x41
 8003678:	2120      	movs	r1, #32
 800367a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2242      	movs	r2, #66	; 0x42
 8003680:	2100      	movs	r1, #0
 8003682:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2240      	movs	r2, #64	; 0x40
 8003688:	2100      	movs	r1, #0
 800368a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e022      	b.n	80036d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003690:	f7fe faf2 	bl	8001c78 <HAL_GetTick>
 8003694:	0002      	movs	r2, r0
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	429a      	cmp	r2, r3
 800369e:	d302      	bcc.n	80036a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10f      	bne.n	80036c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036aa:	2220      	movs	r2, #32
 80036ac:	431a      	orrs	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2241      	movs	r2, #65	; 0x41
 80036b6:	2120      	movs	r1, #32
 80036b8:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2240      	movs	r2, #64	; 0x40
 80036be:	2100      	movs	r1, #0
 80036c0:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e007      	b.n	80036d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	2204      	movs	r2, #4
 80036ce:	4013      	ands	r3, r2
 80036d0:	2b04      	cmp	r3, #4
 80036d2:	d1a2      	bne.n	800361a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	0018      	movs	r0, r3
 80036d8:	46bd      	mov	sp, r7
 80036da:	b004      	add	sp, #16
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	46c0      	nop			; (mov r8, r8)
 80036e0:	fe00e800 	.word	0xfe00e800

080036e4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	2210      	movs	r2, #16
 80036f8:	4013      	ands	r3, r2
 80036fa:	2b10      	cmp	r3, #16
 80036fc:	d164      	bne.n	80037c8 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	685a      	ldr	r2, [r3, #4]
 8003704:	2380      	movs	r3, #128	; 0x80
 8003706:	049b      	lsls	r3, r3, #18
 8003708:	401a      	ands	r2, r3
 800370a:	2380      	movs	r3, #128	; 0x80
 800370c:	049b      	lsls	r3, r3, #18
 800370e:	429a      	cmp	r2, r3
 8003710:	d02b      	beq.n	800376a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2180      	movs	r1, #128	; 0x80
 800371e:	01c9      	lsls	r1, r1, #7
 8003720:	430a      	orrs	r2, r1
 8003722:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003724:	e021      	b.n	800376a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	3301      	adds	r3, #1
 800372a:	d01e      	beq.n	800376a <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800372c:	f7fe faa4 	bl	8001c78 <HAL_GetTick>
 8003730:	0002      	movs	r2, r0
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	429a      	cmp	r2, r3
 800373a:	d302      	bcc.n	8003742 <I2C_IsAcknowledgeFailed+0x5e>
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d113      	bne.n	800376a <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003746:	2220      	movs	r2, #32
 8003748:	431a      	orrs	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2241      	movs	r2, #65	; 0x41
 8003752:	2120      	movs	r1, #32
 8003754:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2242      	movs	r2, #66	; 0x42
 800375a:	2100      	movs	r1, #0
 800375c:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2240      	movs	r2, #64	; 0x40
 8003762:	2100      	movs	r1, #0
 8003764:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e02f      	b.n	80037ca <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	2220      	movs	r2, #32
 8003772:	4013      	ands	r3, r2
 8003774:	2b20      	cmp	r3, #32
 8003776:	d1d6      	bne.n	8003726 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2210      	movs	r2, #16
 800377e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2220      	movs	r2, #32
 8003786:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	0018      	movs	r0, r3
 800378c:	f7ff fe62 	bl	8003454 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	490e      	ldr	r1, [pc, #56]	; (80037d4 <I2C_IsAcknowledgeFailed+0xf0>)
 800379c:	400a      	ands	r2, r1
 800379e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a4:	2204      	movs	r2, #4
 80037a6:	431a      	orrs	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2241      	movs	r2, #65	; 0x41
 80037b0:	2120      	movs	r1, #32
 80037b2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2242      	movs	r2, #66	; 0x42
 80037b8:	2100      	movs	r1, #0
 80037ba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2240      	movs	r2, #64	; 0x40
 80037c0:	2100      	movs	r1, #0
 80037c2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e000      	b.n	80037ca <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	0018      	movs	r0, r3
 80037cc:	46bd      	mov	sp, r7
 80037ce:	b004      	add	sp, #16
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	46c0      	nop			; (mov r8, r8)
 80037d4:	fe00e800 	.word	0xfe00e800

080037d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80037d8:	b590      	push	{r4, r7, lr}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	0008      	movs	r0, r1
 80037e2:	0011      	movs	r1, r2
 80037e4:	607b      	str	r3, [r7, #4]
 80037e6:	240a      	movs	r4, #10
 80037e8:	193b      	adds	r3, r7, r4
 80037ea:	1c02      	adds	r2, r0, #0
 80037ec:	801a      	strh	r2, [r3, #0]
 80037ee:	2009      	movs	r0, #9
 80037f0:	183b      	adds	r3, r7, r0
 80037f2:	1c0a      	adds	r2, r1, #0
 80037f4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	6a3a      	ldr	r2, [r7, #32]
 80037fe:	0d51      	lsrs	r1, r2, #21
 8003800:	2280      	movs	r2, #128	; 0x80
 8003802:	00d2      	lsls	r2, r2, #3
 8003804:	400a      	ands	r2, r1
 8003806:	490e      	ldr	r1, [pc, #56]	; (8003840 <I2C_TransferConfig+0x68>)
 8003808:	430a      	orrs	r2, r1
 800380a:	43d2      	mvns	r2, r2
 800380c:	401a      	ands	r2, r3
 800380e:	0011      	movs	r1, r2
 8003810:	193b      	adds	r3, r7, r4
 8003812:	881b      	ldrh	r3, [r3, #0]
 8003814:	059b      	lsls	r3, r3, #22
 8003816:	0d9a      	lsrs	r2, r3, #22
 8003818:	183b      	adds	r3, r7, r0
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	0418      	lsls	r0, r3, #16
 800381e:	23ff      	movs	r3, #255	; 0xff
 8003820:	041b      	lsls	r3, r3, #16
 8003822:	4003      	ands	r3, r0
 8003824:	431a      	orrs	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	431a      	orrs	r2, r3
 800382a:	6a3b      	ldr	r3, [r7, #32]
 800382c:	431a      	orrs	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	430a      	orrs	r2, r1
 8003834:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8003836:	46c0      	nop			; (mov r8, r8)
 8003838:	46bd      	mov	sp, r7
 800383a:	b005      	add	sp, #20
 800383c:	bd90      	pop	{r4, r7, pc}
 800383e:	46c0      	nop			; (mov r8, r8)
 8003840:	03ff63ff 	.word	0x03ff63ff

08003844 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2241      	movs	r2, #65	; 0x41
 8003852:	5c9b      	ldrb	r3, [r3, r2]
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b20      	cmp	r3, #32
 8003858:	d138      	bne.n	80038cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2240      	movs	r2, #64	; 0x40
 800385e:	5c9b      	ldrb	r3, [r3, r2]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d101      	bne.n	8003868 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003864:	2302      	movs	r3, #2
 8003866:	e032      	b.n	80038ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2240      	movs	r2, #64	; 0x40
 800386c:	2101      	movs	r1, #1
 800386e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2241      	movs	r2, #65	; 0x41
 8003874:	2124      	movs	r1, #36	; 0x24
 8003876:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2101      	movs	r1, #1
 8003884:	438a      	bics	r2, r1
 8003886:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4911      	ldr	r1, [pc, #68]	; (80038d8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003894:	400a      	ands	r2, r1
 8003896:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6819      	ldr	r1, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2101      	movs	r1, #1
 80038b4:	430a      	orrs	r2, r1
 80038b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2241      	movs	r2, #65	; 0x41
 80038bc:	2120      	movs	r1, #32
 80038be:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2240      	movs	r2, #64	; 0x40
 80038c4:	2100      	movs	r1, #0
 80038c6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80038c8:	2300      	movs	r3, #0
 80038ca:	e000      	b.n	80038ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038cc:	2302      	movs	r3, #2
  }
}
 80038ce:	0018      	movs	r0, r3
 80038d0:	46bd      	mov	sp, r7
 80038d2:	b002      	add	sp, #8
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	46c0      	nop			; (mov r8, r8)
 80038d8:	ffffefff 	.word	0xffffefff

080038dc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2241      	movs	r2, #65	; 0x41
 80038ea:	5c9b      	ldrb	r3, [r3, r2]
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b20      	cmp	r3, #32
 80038f0:	d139      	bne.n	8003966 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2240      	movs	r2, #64	; 0x40
 80038f6:	5c9b      	ldrb	r3, [r3, r2]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d101      	bne.n	8003900 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038fc:	2302      	movs	r3, #2
 80038fe:	e033      	b.n	8003968 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2240      	movs	r2, #64	; 0x40
 8003904:	2101      	movs	r1, #1
 8003906:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2241      	movs	r2, #65	; 0x41
 800390c:	2124      	movs	r1, #36	; 0x24
 800390e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2101      	movs	r1, #1
 800391c:	438a      	bics	r2, r1
 800391e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	4a11      	ldr	r2, [pc, #68]	; (8003970 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800392c:	4013      	ands	r3, r2
 800392e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	021b      	lsls	r3, r3, #8
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	4313      	orrs	r3, r2
 8003938:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2101      	movs	r1, #1
 800394e:	430a      	orrs	r2, r1
 8003950:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2241      	movs	r2, #65	; 0x41
 8003956:	2120      	movs	r1, #32
 8003958:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2240      	movs	r2, #64	; 0x40
 800395e:	2100      	movs	r1, #0
 8003960:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003962:	2300      	movs	r3, #0
 8003964:	e000      	b.n	8003968 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003966:	2302      	movs	r3, #2
  }
}
 8003968:	0018      	movs	r0, r3
 800396a:	46bd      	mov	sp, r7
 800396c:	b004      	add	sp, #16
 800396e:	bd80      	pop	{r7, pc}
 8003970:	fffff0ff 	.word	0xfffff0ff

08003974 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI:Enter STOP mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter STOP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	000a      	movs	r2, r1
 800397e:	1cfb      	adds	r3, r7, #3
 8003980:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
 8003982:	2300      	movs	r3, #0
 8003984:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8003986:	4b13      	ldr	r3, [pc, #76]	; (80039d4 <HAL_PWR_EnterSTOPMode+0x60>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PDDS and LPDS bits */
  tmpreg &= (uint32_t)~(PWR_CR_PDDS | PWR_CR_LPDS);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2203      	movs	r2, #3
 8003990:	4393      	bics	r3, r2
 8003992:	60fb      	str	r3, [r7, #12]

  /* Set LPDS bit according to Regulator value */
  tmpreg |= Regulator;
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4313      	orrs	r3, r2
 800399a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 800399c:	4b0d      	ldr	r3, [pc, #52]	; (80039d4 <HAL_PWR_EnterSTOPMode+0x60>)
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 80039a2:	4b0d      	ldr	r3, [pc, #52]	; (80039d8 <HAL_PWR_EnterSTOPMode+0x64>)
 80039a4:	691a      	ldr	r2, [r3, #16]
 80039a6:	4b0c      	ldr	r3, [pc, #48]	; (80039d8 <HAL_PWR_EnterSTOPMode+0x64>)
 80039a8:	2104      	movs	r1, #4
 80039aa:	430a      	orrs	r2, r1
 80039ac:	611a      	str	r2, [r3, #16]

  /* Select STOP mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80039ae:	1cfb      	adds	r3, r7, #3
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d101      	bne.n	80039ba <HAL_PWR_EnterSTOPMode+0x46>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80039b6:	bf30      	wfi
 80039b8:	e002      	b.n	80039c0 <HAL_PWR_EnterSTOPMode+0x4c>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80039ba:	bf40      	sev
    __WFE();
 80039bc:	bf20      	wfe
    __WFE();
 80039be:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 80039c0:	4b05      	ldr	r3, [pc, #20]	; (80039d8 <HAL_PWR_EnterSTOPMode+0x64>)
 80039c2:	691a      	ldr	r2, [r3, #16]
 80039c4:	4b04      	ldr	r3, [pc, #16]	; (80039d8 <HAL_PWR_EnterSTOPMode+0x64>)
 80039c6:	2104      	movs	r1, #4
 80039c8:	438a      	bics	r2, r1
 80039ca:	611a      	str	r2, [r3, #16]
}
 80039cc:	46c0      	nop			; (mov r8, r8)
 80039ce:	46bd      	mov	sp, r7
 80039d0:	b004      	add	sp, #16
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	40007000 	.word	0x40007000
 80039d8:	e000ed00 	.word	0xe000ed00

080039dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b088      	sub	sp, #32
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e301      	b.n	8003ff2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2201      	movs	r2, #1
 80039f4:	4013      	ands	r3, r2
 80039f6:	d100      	bne.n	80039fa <HAL_RCC_OscConfig+0x1e>
 80039f8:	e08d      	b.n	8003b16 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80039fa:	4bc3      	ldr	r3, [pc, #780]	; (8003d08 <HAL_RCC_OscConfig+0x32c>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	220c      	movs	r2, #12
 8003a00:	4013      	ands	r3, r2
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	d00e      	beq.n	8003a24 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a06:	4bc0      	ldr	r3, [pc, #768]	; (8003d08 <HAL_RCC_OscConfig+0x32c>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	220c      	movs	r2, #12
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	2b08      	cmp	r3, #8
 8003a10:	d116      	bne.n	8003a40 <HAL_RCC_OscConfig+0x64>
 8003a12:	4bbd      	ldr	r3, [pc, #756]	; (8003d08 <HAL_RCC_OscConfig+0x32c>)
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	2380      	movs	r3, #128	; 0x80
 8003a18:	025b      	lsls	r3, r3, #9
 8003a1a:	401a      	ands	r2, r3
 8003a1c:	2380      	movs	r3, #128	; 0x80
 8003a1e:	025b      	lsls	r3, r3, #9
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d10d      	bne.n	8003a40 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a24:	4bb8      	ldr	r3, [pc, #736]	; (8003d08 <HAL_RCC_OscConfig+0x32c>)
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	2380      	movs	r3, #128	; 0x80
 8003a2a:	029b      	lsls	r3, r3, #10
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	d100      	bne.n	8003a32 <HAL_RCC_OscConfig+0x56>
 8003a30:	e070      	b.n	8003b14 <HAL_RCC_OscConfig+0x138>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d000      	beq.n	8003a3c <HAL_RCC_OscConfig+0x60>
 8003a3a:	e06b      	b.n	8003b14 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e2d8      	b.n	8003ff2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d107      	bne.n	8003a58 <HAL_RCC_OscConfig+0x7c>
 8003a48:	4baf      	ldr	r3, [pc, #700]	; (8003d08 <HAL_RCC_OscConfig+0x32c>)
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	4bae      	ldr	r3, [pc, #696]	; (8003d08 <HAL_RCC_OscConfig+0x32c>)
 8003a4e:	2180      	movs	r1, #128	; 0x80
 8003a50:	0249      	lsls	r1, r1, #9
 8003a52:	430a      	orrs	r2, r1
 8003a54:	601a      	str	r2, [r3, #0]
 8003a56:	e02f      	b.n	8003ab8 <HAL_RCC_OscConfig+0xdc>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d10c      	bne.n	8003a7a <HAL_RCC_OscConfig+0x9e>
 8003a60:	4ba9      	ldr	r3, [pc, #676]	; (8003d08 <HAL_RCC_OscConfig+0x32c>)
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	4ba8      	ldr	r3, [pc, #672]	; (8003d08 <HAL_RCC_OscConfig+0x32c>)
 8003a66:	49a9      	ldr	r1, [pc, #676]	; (8003d0c <HAL_RCC_OscConfig+0x330>)
 8003a68:	400a      	ands	r2, r1
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	4ba6      	ldr	r3, [pc, #664]	; (8003d08 <HAL_RCC_OscConfig+0x32c>)
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	4ba5      	ldr	r3, [pc, #660]	; (8003d08 <HAL_RCC_OscConfig+0x32c>)
 8003a72:	49a7      	ldr	r1, [pc, #668]	; (8003d10 <HAL_RCC_OscConfig+0x334>)
 8003a74:	400a      	ands	r2, r1
 8003a76:	601a      	str	r2, [r3, #0]
 8003a78:	e01e      	b.n	8003ab8 <HAL_RCC_OscConfig+0xdc>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	2b05      	cmp	r3, #5
 8003a80:	d10e      	bne.n	8003aa0 <HAL_RCC_OscConfig+0xc4>
 8003a82:	4ba1      	ldr	r3, [pc, #644]	; (8003d08 <HAL_RCC_OscConfig+0x32c>)
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	4ba0      	ldr	r3, [pc, #640]	; (8003d08 <HAL_RCC_OscConfig+0x32c>)
 8003a88:	2180      	movs	r1, #128	; 0x80
 8003a8a:	02c9      	lsls	r1, r1, #11
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	4b9d      	ldr	r3, [pc, #628]	; (8003d08 <HAL_RCC_OscConfig+0x32c>)
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	4b9c      	ldr	r3, [pc, #624]	; (8003d08 <HAL_RCC_OscConfig+0x32c>)
 8003a96:	2180      	movs	r1, #128	; 0x80
 8003a98:	0249      	lsls	r1, r1, #9
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	601a      	str	r2, [r3, #0]
 8003a9e:	e00b      	b.n	8003ab8 <HAL_RCC_OscConfig+0xdc>
 8003aa0:	4b99      	ldr	r3, [pc, #612]	; (8003d08 <HAL_RCC_OscConfig+0x32c>)
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	4b98      	ldr	r3, [pc, #608]	; (8003d08 <HAL_RCC_OscConfig+0x32c>)
 8003aa6:	4999      	ldr	r1, [pc, #612]	; (8003d0c <HAL_RCC_OscConfig+0x330>)
 8003aa8:	400a      	ands	r2, r1
 8003aaa:	601a      	str	r2, [r3, #0]
 8003aac:	4b96      	ldr	r3, [pc, #600]	; (8003d08 <HAL_RCC_OscConfig+0x32c>)
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	4b95      	ldr	r3, [pc, #596]	; (8003d08 <HAL_RCC_OscConfig+0x32c>)
 8003ab2:	4997      	ldr	r1, [pc, #604]	; (8003d10 <HAL_RCC_OscConfig+0x334>)
 8003ab4:	400a      	ands	r2, r1
 8003ab6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d014      	beq.n	8003aea <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac0:	f7fe f8da 	bl	8001c78 <HAL_GetTick>
 8003ac4:	0003      	movs	r3, r0
 8003ac6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ac8:	e008      	b.n	8003adc <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003aca:	f7fe f8d5 	bl	8001c78 <HAL_GetTick>
 8003ace:	0002      	movs	r2, r0
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	2b64      	cmp	r3, #100	; 0x64
 8003ad6:	d901      	bls.n	8003adc <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e28a      	b.n	8003ff2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003adc:	4b8a      	ldr	r3, [pc, #552]	; (8003d08 <HAL_RCC_OscConfig+0x32c>)
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	2380      	movs	r3, #128	; 0x80
 8003ae2:	029b      	lsls	r3, r3, #10
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	d0f0      	beq.n	8003aca <HAL_RCC_OscConfig+0xee>
 8003ae8:	e015      	b.n	8003b16 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aea:	f7fe f8c5 	bl	8001c78 <HAL_GetTick>
 8003aee:	0003      	movs	r3, r0
 8003af0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003af4:	f7fe f8c0 	bl	8001c78 <HAL_GetTick>
 8003af8:	0002      	movs	r2, r0
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b64      	cmp	r3, #100	; 0x64
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e275      	b.n	8003ff2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b06:	4b80      	ldr	r3, [pc, #512]	; (8003d08 <HAL_RCC_OscConfig+0x32c>)
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	2380      	movs	r3, #128	; 0x80
 8003b0c:	029b      	lsls	r3, r3, #10
 8003b0e:	4013      	ands	r3, r2
 8003b10:	d1f0      	bne.n	8003af4 <HAL_RCC_OscConfig+0x118>
 8003b12:	e000      	b.n	8003b16 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b14:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2202      	movs	r2, #2
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	d100      	bne.n	8003b22 <HAL_RCC_OscConfig+0x146>
 8003b20:	e069      	b.n	8003bf6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003b22:	4b79      	ldr	r3, [pc, #484]	; (8003d08 <HAL_RCC_OscConfig+0x32c>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	220c      	movs	r2, #12
 8003b28:	4013      	ands	r3, r2
 8003b2a:	d00b      	beq.n	8003b44 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003b2c:	4b76      	ldr	r3, [pc, #472]	; (8003d08 <HAL_RCC_OscConfig+0x32c>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	220c      	movs	r2, #12
 8003b32:	4013      	ands	r3, r2
 8003b34:	2b08      	cmp	r3, #8
 8003b36:	d11c      	bne.n	8003b72 <HAL_RCC_OscConfig+0x196>
 8003b38:	4b73      	ldr	r3, [pc, #460]	; (8003d08 <HAL_RCC_OscConfig+0x32c>)
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	2380      	movs	r3, #128	; 0x80
 8003b3e:	025b      	lsls	r3, r3, #9
 8003b40:	4013      	ands	r3, r2
 8003b42:	d116      	bne.n	8003b72 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b44:	4b70      	ldr	r3, [pc, #448]	; (8003d08 <HAL_RCC_OscConfig+0x32c>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2202      	movs	r2, #2
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	d005      	beq.n	8003b5a <HAL_RCC_OscConfig+0x17e>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d001      	beq.n	8003b5a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e24b      	b.n	8003ff2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b5a:	4b6b      	ldr	r3, [pc, #428]	; (8003d08 <HAL_RCC_OscConfig+0x32c>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	22f8      	movs	r2, #248	; 0xf8
 8003b60:	4393      	bics	r3, r2
 8003b62:	0019      	movs	r1, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	00da      	lsls	r2, r3, #3
 8003b6a:	4b67      	ldr	r3, [pc, #412]	; (8003d08 <HAL_RCC_OscConfig+0x32c>)
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b70:	e041      	b.n	8003bf6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d024      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b7a:	4b63      	ldr	r3, [pc, #396]	; (8003d08 <HAL_RCC_OscConfig+0x32c>)
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	4b62      	ldr	r3, [pc, #392]	; (8003d08 <HAL_RCC_OscConfig+0x32c>)
 8003b80:	2101      	movs	r1, #1
 8003b82:	430a      	orrs	r2, r1
 8003b84:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b86:	f7fe f877 	bl	8001c78 <HAL_GetTick>
 8003b8a:	0003      	movs	r3, r0
 8003b8c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b8e:	e008      	b.n	8003ba2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b90:	f7fe f872 	bl	8001c78 <HAL_GetTick>
 8003b94:	0002      	movs	r2, r0
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e227      	b.n	8003ff2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba2:	4b59      	ldr	r3, [pc, #356]	; (8003d08 <HAL_RCC_OscConfig+0x32c>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	4013      	ands	r3, r2
 8003baa:	d0f1      	beq.n	8003b90 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bac:	4b56      	ldr	r3, [pc, #344]	; (8003d08 <HAL_RCC_OscConfig+0x32c>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	22f8      	movs	r2, #248	; 0xf8
 8003bb2:	4393      	bics	r3, r2
 8003bb4:	0019      	movs	r1, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	00da      	lsls	r2, r3, #3
 8003bbc:	4b52      	ldr	r3, [pc, #328]	; (8003d08 <HAL_RCC_OscConfig+0x32c>)
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	601a      	str	r2, [r3, #0]
 8003bc2:	e018      	b.n	8003bf6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bc4:	4b50      	ldr	r3, [pc, #320]	; (8003d08 <HAL_RCC_OscConfig+0x32c>)
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	4b4f      	ldr	r3, [pc, #316]	; (8003d08 <HAL_RCC_OscConfig+0x32c>)
 8003bca:	2101      	movs	r1, #1
 8003bcc:	438a      	bics	r2, r1
 8003bce:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd0:	f7fe f852 	bl	8001c78 <HAL_GetTick>
 8003bd4:	0003      	movs	r3, r0
 8003bd6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bd8:	e008      	b.n	8003bec <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bda:	f7fe f84d 	bl	8001c78 <HAL_GetTick>
 8003bde:	0002      	movs	r2, r0
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d901      	bls.n	8003bec <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e202      	b.n	8003ff2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bec:	4b46      	ldr	r3, [pc, #280]	; (8003d08 <HAL_RCC_OscConfig+0x32c>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	d1f1      	bne.n	8003bda <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2208      	movs	r2, #8
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	d036      	beq.n	8003c6e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	69db      	ldr	r3, [r3, #28]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d019      	beq.n	8003c3c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c08:	4b3f      	ldr	r3, [pc, #252]	; (8003d08 <HAL_RCC_OscConfig+0x32c>)
 8003c0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c0c:	4b3e      	ldr	r3, [pc, #248]	; (8003d08 <HAL_RCC_OscConfig+0x32c>)
 8003c0e:	2101      	movs	r1, #1
 8003c10:	430a      	orrs	r2, r1
 8003c12:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c14:	f7fe f830 	bl	8001c78 <HAL_GetTick>
 8003c18:	0003      	movs	r3, r0
 8003c1a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c1c:	e008      	b.n	8003c30 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c1e:	f7fe f82b 	bl	8001c78 <HAL_GetTick>
 8003c22:	0002      	movs	r2, r0
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e1e0      	b.n	8003ff2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c30:	4b35      	ldr	r3, [pc, #212]	; (8003d08 <HAL_RCC_OscConfig+0x32c>)
 8003c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c34:	2202      	movs	r2, #2
 8003c36:	4013      	ands	r3, r2
 8003c38:	d0f1      	beq.n	8003c1e <HAL_RCC_OscConfig+0x242>
 8003c3a:	e018      	b.n	8003c6e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c3c:	4b32      	ldr	r3, [pc, #200]	; (8003d08 <HAL_RCC_OscConfig+0x32c>)
 8003c3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c40:	4b31      	ldr	r3, [pc, #196]	; (8003d08 <HAL_RCC_OscConfig+0x32c>)
 8003c42:	2101      	movs	r1, #1
 8003c44:	438a      	bics	r2, r1
 8003c46:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c48:	f7fe f816 	bl	8001c78 <HAL_GetTick>
 8003c4c:	0003      	movs	r3, r0
 8003c4e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c50:	e008      	b.n	8003c64 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c52:	f7fe f811 	bl	8001c78 <HAL_GetTick>
 8003c56:	0002      	movs	r2, r0
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d901      	bls.n	8003c64 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e1c6      	b.n	8003ff2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c64:	4b28      	ldr	r3, [pc, #160]	; (8003d08 <HAL_RCC_OscConfig+0x32c>)
 8003c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c68:	2202      	movs	r2, #2
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	d1f1      	bne.n	8003c52 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2204      	movs	r2, #4
 8003c74:	4013      	ands	r3, r2
 8003c76:	d100      	bne.n	8003c7a <HAL_RCC_OscConfig+0x29e>
 8003c78:	e0b4      	b.n	8003de4 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c7a:	201f      	movs	r0, #31
 8003c7c:	183b      	adds	r3, r7, r0
 8003c7e:	2200      	movs	r2, #0
 8003c80:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c82:	4b21      	ldr	r3, [pc, #132]	; (8003d08 <HAL_RCC_OscConfig+0x32c>)
 8003c84:	69da      	ldr	r2, [r3, #28]
 8003c86:	2380      	movs	r3, #128	; 0x80
 8003c88:	055b      	lsls	r3, r3, #21
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	d110      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c8e:	4b1e      	ldr	r3, [pc, #120]	; (8003d08 <HAL_RCC_OscConfig+0x32c>)
 8003c90:	69da      	ldr	r2, [r3, #28]
 8003c92:	4b1d      	ldr	r3, [pc, #116]	; (8003d08 <HAL_RCC_OscConfig+0x32c>)
 8003c94:	2180      	movs	r1, #128	; 0x80
 8003c96:	0549      	lsls	r1, r1, #21
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	61da      	str	r2, [r3, #28]
 8003c9c:	4b1a      	ldr	r3, [pc, #104]	; (8003d08 <HAL_RCC_OscConfig+0x32c>)
 8003c9e:	69da      	ldr	r2, [r3, #28]
 8003ca0:	2380      	movs	r3, #128	; 0x80
 8003ca2:	055b      	lsls	r3, r3, #21
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	60fb      	str	r3, [r7, #12]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003caa:	183b      	adds	r3, r7, r0
 8003cac:	2201      	movs	r2, #1
 8003cae:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cb0:	4b18      	ldr	r3, [pc, #96]	; (8003d14 <HAL_RCC_OscConfig+0x338>)
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	2380      	movs	r3, #128	; 0x80
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	4013      	ands	r3, r2
 8003cba:	d11a      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cbc:	4b15      	ldr	r3, [pc, #84]	; (8003d14 <HAL_RCC_OscConfig+0x338>)
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	4b14      	ldr	r3, [pc, #80]	; (8003d14 <HAL_RCC_OscConfig+0x338>)
 8003cc2:	2180      	movs	r1, #128	; 0x80
 8003cc4:	0049      	lsls	r1, r1, #1
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cca:	f7fd ffd5 	bl	8001c78 <HAL_GetTick>
 8003cce:	0003      	movs	r3, r0
 8003cd0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cd2:	e008      	b.n	8003ce6 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cd4:	f7fd ffd0 	bl	8001c78 <HAL_GetTick>
 8003cd8:	0002      	movs	r2, r0
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b64      	cmp	r3, #100	; 0x64
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e185      	b.n	8003ff2 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ce6:	4b0b      	ldr	r3, [pc, #44]	; (8003d14 <HAL_RCC_OscConfig+0x338>)
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	2380      	movs	r3, #128	; 0x80
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	4013      	ands	r3, r2
 8003cf0:	d0f0      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d10e      	bne.n	8003d18 <HAL_RCC_OscConfig+0x33c>
 8003cfa:	4b03      	ldr	r3, [pc, #12]	; (8003d08 <HAL_RCC_OscConfig+0x32c>)
 8003cfc:	6a1a      	ldr	r2, [r3, #32]
 8003cfe:	4b02      	ldr	r3, [pc, #8]	; (8003d08 <HAL_RCC_OscConfig+0x32c>)
 8003d00:	2101      	movs	r1, #1
 8003d02:	430a      	orrs	r2, r1
 8003d04:	621a      	str	r2, [r3, #32]
 8003d06:	e035      	b.n	8003d74 <HAL_RCC_OscConfig+0x398>
 8003d08:	40021000 	.word	0x40021000
 8003d0c:	fffeffff 	.word	0xfffeffff
 8003d10:	fffbffff 	.word	0xfffbffff
 8003d14:	40007000 	.word	0x40007000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d10c      	bne.n	8003d3a <HAL_RCC_OscConfig+0x35e>
 8003d20:	4bb6      	ldr	r3, [pc, #728]	; (8003ffc <HAL_RCC_OscConfig+0x620>)
 8003d22:	6a1a      	ldr	r2, [r3, #32]
 8003d24:	4bb5      	ldr	r3, [pc, #724]	; (8003ffc <HAL_RCC_OscConfig+0x620>)
 8003d26:	2101      	movs	r1, #1
 8003d28:	438a      	bics	r2, r1
 8003d2a:	621a      	str	r2, [r3, #32]
 8003d2c:	4bb3      	ldr	r3, [pc, #716]	; (8003ffc <HAL_RCC_OscConfig+0x620>)
 8003d2e:	6a1a      	ldr	r2, [r3, #32]
 8003d30:	4bb2      	ldr	r3, [pc, #712]	; (8003ffc <HAL_RCC_OscConfig+0x620>)
 8003d32:	2104      	movs	r1, #4
 8003d34:	438a      	bics	r2, r1
 8003d36:	621a      	str	r2, [r3, #32]
 8003d38:	e01c      	b.n	8003d74 <HAL_RCC_OscConfig+0x398>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	2b05      	cmp	r3, #5
 8003d40:	d10c      	bne.n	8003d5c <HAL_RCC_OscConfig+0x380>
 8003d42:	4bae      	ldr	r3, [pc, #696]	; (8003ffc <HAL_RCC_OscConfig+0x620>)
 8003d44:	6a1a      	ldr	r2, [r3, #32]
 8003d46:	4bad      	ldr	r3, [pc, #692]	; (8003ffc <HAL_RCC_OscConfig+0x620>)
 8003d48:	2104      	movs	r1, #4
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	621a      	str	r2, [r3, #32]
 8003d4e:	4bab      	ldr	r3, [pc, #684]	; (8003ffc <HAL_RCC_OscConfig+0x620>)
 8003d50:	6a1a      	ldr	r2, [r3, #32]
 8003d52:	4baa      	ldr	r3, [pc, #680]	; (8003ffc <HAL_RCC_OscConfig+0x620>)
 8003d54:	2101      	movs	r1, #1
 8003d56:	430a      	orrs	r2, r1
 8003d58:	621a      	str	r2, [r3, #32]
 8003d5a:	e00b      	b.n	8003d74 <HAL_RCC_OscConfig+0x398>
 8003d5c:	4ba7      	ldr	r3, [pc, #668]	; (8003ffc <HAL_RCC_OscConfig+0x620>)
 8003d5e:	6a1a      	ldr	r2, [r3, #32]
 8003d60:	4ba6      	ldr	r3, [pc, #664]	; (8003ffc <HAL_RCC_OscConfig+0x620>)
 8003d62:	2101      	movs	r1, #1
 8003d64:	438a      	bics	r2, r1
 8003d66:	621a      	str	r2, [r3, #32]
 8003d68:	4ba4      	ldr	r3, [pc, #656]	; (8003ffc <HAL_RCC_OscConfig+0x620>)
 8003d6a:	6a1a      	ldr	r2, [r3, #32]
 8003d6c:	4ba3      	ldr	r3, [pc, #652]	; (8003ffc <HAL_RCC_OscConfig+0x620>)
 8003d6e:	2104      	movs	r1, #4
 8003d70:	438a      	bics	r2, r1
 8003d72:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d014      	beq.n	8003da6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d7c:	f7fd ff7c 	bl	8001c78 <HAL_GetTick>
 8003d80:	0003      	movs	r3, r0
 8003d82:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d84:	e009      	b.n	8003d9a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d86:	f7fd ff77 	bl	8001c78 <HAL_GetTick>
 8003d8a:	0002      	movs	r2, r0
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	4a9b      	ldr	r2, [pc, #620]	; (8004000 <HAL_RCC_OscConfig+0x624>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e12b      	b.n	8003ff2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d9a:	4b98      	ldr	r3, [pc, #608]	; (8003ffc <HAL_RCC_OscConfig+0x620>)
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	2202      	movs	r2, #2
 8003da0:	4013      	ands	r3, r2
 8003da2:	d0f0      	beq.n	8003d86 <HAL_RCC_OscConfig+0x3aa>
 8003da4:	e013      	b.n	8003dce <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003da6:	f7fd ff67 	bl	8001c78 <HAL_GetTick>
 8003daa:	0003      	movs	r3, r0
 8003dac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dae:	e009      	b.n	8003dc4 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003db0:	f7fd ff62 	bl	8001c78 <HAL_GetTick>
 8003db4:	0002      	movs	r2, r0
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	4a91      	ldr	r2, [pc, #580]	; (8004000 <HAL_RCC_OscConfig+0x624>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e116      	b.n	8003ff2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dc4:	4b8d      	ldr	r3, [pc, #564]	; (8003ffc <HAL_RCC_OscConfig+0x620>)
 8003dc6:	6a1b      	ldr	r3, [r3, #32]
 8003dc8:	2202      	movs	r2, #2
 8003dca:	4013      	ands	r3, r2
 8003dcc:	d1f0      	bne.n	8003db0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003dce:	231f      	movs	r3, #31
 8003dd0:	18fb      	adds	r3, r7, r3
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d105      	bne.n	8003de4 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dd8:	4b88      	ldr	r3, [pc, #544]	; (8003ffc <HAL_RCC_OscConfig+0x620>)
 8003dda:	69da      	ldr	r2, [r3, #28]
 8003ddc:	4b87      	ldr	r3, [pc, #540]	; (8003ffc <HAL_RCC_OscConfig+0x620>)
 8003dde:	4989      	ldr	r1, [pc, #548]	; (8004004 <HAL_RCC_OscConfig+0x628>)
 8003de0:	400a      	ands	r2, r1
 8003de2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2210      	movs	r2, #16
 8003dea:	4013      	ands	r3, r2
 8003dec:	d063      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d12a      	bne.n	8003e4c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003df6:	4b81      	ldr	r3, [pc, #516]	; (8003ffc <HAL_RCC_OscConfig+0x620>)
 8003df8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dfa:	4b80      	ldr	r3, [pc, #512]	; (8003ffc <HAL_RCC_OscConfig+0x620>)
 8003dfc:	2104      	movs	r1, #4
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003e02:	4b7e      	ldr	r3, [pc, #504]	; (8003ffc <HAL_RCC_OscConfig+0x620>)
 8003e04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e06:	4b7d      	ldr	r3, [pc, #500]	; (8003ffc <HAL_RCC_OscConfig+0x620>)
 8003e08:	2101      	movs	r1, #1
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e0e:	f7fd ff33 	bl	8001c78 <HAL_GetTick>
 8003e12:	0003      	movs	r3, r0
 8003e14:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003e16:	e008      	b.n	8003e2a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003e18:	f7fd ff2e 	bl	8001c78 <HAL_GetTick>
 8003e1c:	0002      	movs	r2, r0
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e0e3      	b.n	8003ff2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003e2a:	4b74      	ldr	r3, [pc, #464]	; (8003ffc <HAL_RCC_OscConfig+0x620>)
 8003e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e2e:	2202      	movs	r2, #2
 8003e30:	4013      	ands	r3, r2
 8003e32:	d0f1      	beq.n	8003e18 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003e34:	4b71      	ldr	r3, [pc, #452]	; (8003ffc <HAL_RCC_OscConfig+0x620>)
 8003e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e38:	22f8      	movs	r2, #248	; 0xf8
 8003e3a:	4393      	bics	r3, r2
 8003e3c:	0019      	movs	r1, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	00da      	lsls	r2, r3, #3
 8003e44:	4b6d      	ldr	r3, [pc, #436]	; (8003ffc <HAL_RCC_OscConfig+0x620>)
 8003e46:	430a      	orrs	r2, r1
 8003e48:	635a      	str	r2, [r3, #52]	; 0x34
 8003e4a:	e034      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	3305      	adds	r3, #5
 8003e52:	d111      	bne.n	8003e78 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003e54:	4b69      	ldr	r3, [pc, #420]	; (8003ffc <HAL_RCC_OscConfig+0x620>)
 8003e56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e58:	4b68      	ldr	r3, [pc, #416]	; (8003ffc <HAL_RCC_OscConfig+0x620>)
 8003e5a:	2104      	movs	r1, #4
 8003e5c:	438a      	bics	r2, r1
 8003e5e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003e60:	4b66      	ldr	r3, [pc, #408]	; (8003ffc <HAL_RCC_OscConfig+0x620>)
 8003e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e64:	22f8      	movs	r2, #248	; 0xf8
 8003e66:	4393      	bics	r3, r2
 8003e68:	0019      	movs	r1, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	00da      	lsls	r2, r3, #3
 8003e70:	4b62      	ldr	r3, [pc, #392]	; (8003ffc <HAL_RCC_OscConfig+0x620>)
 8003e72:	430a      	orrs	r2, r1
 8003e74:	635a      	str	r2, [r3, #52]	; 0x34
 8003e76:	e01e      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003e78:	4b60      	ldr	r3, [pc, #384]	; (8003ffc <HAL_RCC_OscConfig+0x620>)
 8003e7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e7c:	4b5f      	ldr	r3, [pc, #380]	; (8003ffc <HAL_RCC_OscConfig+0x620>)
 8003e7e:	2104      	movs	r1, #4
 8003e80:	430a      	orrs	r2, r1
 8003e82:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003e84:	4b5d      	ldr	r3, [pc, #372]	; (8003ffc <HAL_RCC_OscConfig+0x620>)
 8003e86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e88:	4b5c      	ldr	r3, [pc, #368]	; (8003ffc <HAL_RCC_OscConfig+0x620>)
 8003e8a:	2101      	movs	r1, #1
 8003e8c:	438a      	bics	r2, r1
 8003e8e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e90:	f7fd fef2 	bl	8001c78 <HAL_GetTick>
 8003e94:	0003      	movs	r3, r0
 8003e96:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003e98:	e008      	b.n	8003eac <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003e9a:	f7fd feed 	bl	8001c78 <HAL_GetTick>
 8003e9e:	0002      	movs	r2, r0
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d901      	bls.n	8003eac <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e0a2      	b.n	8003ff2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003eac:	4b53      	ldr	r3, [pc, #332]	; (8003ffc <HAL_RCC_OscConfig+0x620>)
 8003eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb0:	2202      	movs	r2, #2
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	d1f1      	bne.n	8003e9a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d100      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x4e4>
 8003ebe:	e097      	b.n	8003ff0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ec0:	4b4e      	ldr	r3, [pc, #312]	; (8003ffc <HAL_RCC_OscConfig+0x620>)
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	220c      	movs	r2, #12
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	2b08      	cmp	r3, #8
 8003eca:	d100      	bne.n	8003ece <HAL_RCC_OscConfig+0x4f2>
 8003ecc:	e06b      	b.n	8003fa6 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d14c      	bne.n	8003f70 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ed6:	4b49      	ldr	r3, [pc, #292]	; (8003ffc <HAL_RCC_OscConfig+0x620>)
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	4b48      	ldr	r3, [pc, #288]	; (8003ffc <HAL_RCC_OscConfig+0x620>)
 8003edc:	494a      	ldr	r1, [pc, #296]	; (8004008 <HAL_RCC_OscConfig+0x62c>)
 8003ede:	400a      	ands	r2, r1
 8003ee0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee2:	f7fd fec9 	bl	8001c78 <HAL_GetTick>
 8003ee6:	0003      	movs	r3, r0
 8003ee8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eea:	e008      	b.n	8003efe <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eec:	f7fd fec4 	bl	8001c78 <HAL_GetTick>
 8003ef0:	0002      	movs	r2, r0
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e079      	b.n	8003ff2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003efe:	4b3f      	ldr	r3, [pc, #252]	; (8003ffc <HAL_RCC_OscConfig+0x620>)
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	2380      	movs	r3, #128	; 0x80
 8003f04:	049b      	lsls	r3, r3, #18
 8003f06:	4013      	ands	r3, r2
 8003f08:	d1f0      	bne.n	8003eec <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f0a:	4b3c      	ldr	r3, [pc, #240]	; (8003ffc <HAL_RCC_OscConfig+0x620>)
 8003f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0e:	220f      	movs	r2, #15
 8003f10:	4393      	bics	r3, r2
 8003f12:	0019      	movs	r1, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f18:	4b38      	ldr	r3, [pc, #224]	; (8003ffc <HAL_RCC_OscConfig+0x620>)
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f1e:	4b37      	ldr	r3, [pc, #220]	; (8003ffc <HAL_RCC_OscConfig+0x620>)
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	4a3a      	ldr	r2, [pc, #232]	; (800400c <HAL_RCC_OscConfig+0x630>)
 8003f24:	4013      	ands	r3, r2
 8003f26:	0019      	movs	r1, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f30:	431a      	orrs	r2, r3
 8003f32:	4b32      	ldr	r3, [pc, #200]	; (8003ffc <HAL_RCC_OscConfig+0x620>)
 8003f34:	430a      	orrs	r2, r1
 8003f36:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f38:	4b30      	ldr	r3, [pc, #192]	; (8003ffc <HAL_RCC_OscConfig+0x620>)
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	4b2f      	ldr	r3, [pc, #188]	; (8003ffc <HAL_RCC_OscConfig+0x620>)
 8003f3e:	2180      	movs	r1, #128	; 0x80
 8003f40:	0449      	lsls	r1, r1, #17
 8003f42:	430a      	orrs	r2, r1
 8003f44:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f46:	f7fd fe97 	bl	8001c78 <HAL_GetTick>
 8003f4a:	0003      	movs	r3, r0
 8003f4c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f4e:	e008      	b.n	8003f62 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f50:	f7fd fe92 	bl	8001c78 <HAL_GetTick>
 8003f54:	0002      	movs	r2, r0
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e047      	b.n	8003ff2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f62:	4b26      	ldr	r3, [pc, #152]	; (8003ffc <HAL_RCC_OscConfig+0x620>)
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	2380      	movs	r3, #128	; 0x80
 8003f68:	049b      	lsls	r3, r3, #18
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	d0f0      	beq.n	8003f50 <HAL_RCC_OscConfig+0x574>
 8003f6e:	e03f      	b.n	8003ff0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f70:	4b22      	ldr	r3, [pc, #136]	; (8003ffc <HAL_RCC_OscConfig+0x620>)
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	4b21      	ldr	r3, [pc, #132]	; (8003ffc <HAL_RCC_OscConfig+0x620>)
 8003f76:	4924      	ldr	r1, [pc, #144]	; (8004008 <HAL_RCC_OscConfig+0x62c>)
 8003f78:	400a      	ands	r2, r1
 8003f7a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f7c:	f7fd fe7c 	bl	8001c78 <HAL_GetTick>
 8003f80:	0003      	movs	r3, r0
 8003f82:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f84:	e008      	b.n	8003f98 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f86:	f7fd fe77 	bl	8001c78 <HAL_GetTick>
 8003f8a:	0002      	movs	r2, r0
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d901      	bls.n	8003f98 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e02c      	b.n	8003ff2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f98:	4b18      	ldr	r3, [pc, #96]	; (8003ffc <HAL_RCC_OscConfig+0x620>)
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	2380      	movs	r3, #128	; 0x80
 8003f9e:	049b      	lsls	r3, r3, #18
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	d1f0      	bne.n	8003f86 <HAL_RCC_OscConfig+0x5aa>
 8003fa4:	e024      	b.n	8003ff0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d101      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e01f      	b.n	8003ff2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003fb2:	4b12      	ldr	r3, [pc, #72]	; (8003ffc <HAL_RCC_OscConfig+0x620>)
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003fb8:	4b10      	ldr	r3, [pc, #64]	; (8003ffc <HAL_RCC_OscConfig+0x620>)
 8003fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbc:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	2380      	movs	r3, #128	; 0x80
 8003fc2:	025b      	lsls	r3, r3, #9
 8003fc4:	401a      	ands	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d10e      	bne.n	8003fec <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	220f      	movs	r2, #15
 8003fd2:	401a      	ands	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d107      	bne.n	8003fec <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	23f0      	movs	r3, #240	; 0xf0
 8003fe0:	039b      	lsls	r3, r3, #14
 8003fe2:	401a      	ands	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d001      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e000      	b.n	8003ff2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	0018      	movs	r0, r3
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	b008      	add	sp, #32
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	46c0      	nop			; (mov r8, r8)
 8003ffc:	40021000 	.word	0x40021000
 8004000:	00001388 	.word	0x00001388
 8004004:	efffffff 	.word	0xefffffff
 8004008:	feffffff 	.word	0xfeffffff
 800400c:	ffc2ffff 	.word	0xffc2ffff

08004010 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d101      	bne.n	8004024 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e0b3      	b.n	800418c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004024:	4b5b      	ldr	r3, [pc, #364]	; (8004194 <HAL_RCC_ClockConfig+0x184>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2201      	movs	r2, #1
 800402a:	4013      	ands	r3, r2
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	429a      	cmp	r2, r3
 8004030:	d911      	bls.n	8004056 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004032:	4b58      	ldr	r3, [pc, #352]	; (8004194 <HAL_RCC_ClockConfig+0x184>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2201      	movs	r2, #1
 8004038:	4393      	bics	r3, r2
 800403a:	0019      	movs	r1, r3
 800403c:	4b55      	ldr	r3, [pc, #340]	; (8004194 <HAL_RCC_ClockConfig+0x184>)
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	430a      	orrs	r2, r1
 8004042:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004044:	4b53      	ldr	r3, [pc, #332]	; (8004194 <HAL_RCC_ClockConfig+0x184>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2201      	movs	r2, #1
 800404a:	4013      	ands	r3, r2
 800404c:	683a      	ldr	r2, [r7, #0]
 800404e:	429a      	cmp	r2, r3
 8004050:	d001      	beq.n	8004056 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e09a      	b.n	800418c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2202      	movs	r2, #2
 800405c:	4013      	ands	r3, r2
 800405e:	d015      	beq.n	800408c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2204      	movs	r2, #4
 8004066:	4013      	ands	r3, r2
 8004068:	d006      	beq.n	8004078 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800406a:	4b4b      	ldr	r3, [pc, #300]	; (8004198 <HAL_RCC_ClockConfig+0x188>)
 800406c:	685a      	ldr	r2, [r3, #4]
 800406e:	4b4a      	ldr	r3, [pc, #296]	; (8004198 <HAL_RCC_ClockConfig+0x188>)
 8004070:	21e0      	movs	r1, #224	; 0xe0
 8004072:	00c9      	lsls	r1, r1, #3
 8004074:	430a      	orrs	r2, r1
 8004076:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004078:	4b47      	ldr	r3, [pc, #284]	; (8004198 <HAL_RCC_ClockConfig+0x188>)
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	22f0      	movs	r2, #240	; 0xf0
 800407e:	4393      	bics	r3, r2
 8004080:	0019      	movs	r1, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	689a      	ldr	r2, [r3, #8]
 8004086:	4b44      	ldr	r3, [pc, #272]	; (8004198 <HAL_RCC_ClockConfig+0x188>)
 8004088:	430a      	orrs	r2, r1
 800408a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2201      	movs	r2, #1
 8004092:	4013      	ands	r3, r2
 8004094:	d040      	beq.n	8004118 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d107      	bne.n	80040ae <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800409e:	4b3e      	ldr	r3, [pc, #248]	; (8004198 <HAL_RCC_ClockConfig+0x188>)
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	2380      	movs	r3, #128	; 0x80
 80040a4:	029b      	lsls	r3, r3, #10
 80040a6:	4013      	ands	r3, r2
 80040a8:	d114      	bne.n	80040d4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e06e      	b.n	800418c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d107      	bne.n	80040c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040b6:	4b38      	ldr	r3, [pc, #224]	; (8004198 <HAL_RCC_ClockConfig+0x188>)
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	2380      	movs	r3, #128	; 0x80
 80040bc:	049b      	lsls	r3, r3, #18
 80040be:	4013      	ands	r3, r2
 80040c0:	d108      	bne.n	80040d4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e062      	b.n	800418c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040c6:	4b34      	ldr	r3, [pc, #208]	; (8004198 <HAL_RCC_ClockConfig+0x188>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2202      	movs	r2, #2
 80040cc:	4013      	ands	r3, r2
 80040ce:	d101      	bne.n	80040d4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e05b      	b.n	800418c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040d4:	4b30      	ldr	r3, [pc, #192]	; (8004198 <HAL_RCC_ClockConfig+0x188>)
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	2203      	movs	r2, #3
 80040da:	4393      	bics	r3, r2
 80040dc:	0019      	movs	r1, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685a      	ldr	r2, [r3, #4]
 80040e2:	4b2d      	ldr	r3, [pc, #180]	; (8004198 <HAL_RCC_ClockConfig+0x188>)
 80040e4:	430a      	orrs	r2, r1
 80040e6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040e8:	f7fd fdc6 	bl	8001c78 <HAL_GetTick>
 80040ec:	0003      	movs	r3, r0
 80040ee:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040f0:	e009      	b.n	8004106 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040f2:	f7fd fdc1 	bl	8001c78 <HAL_GetTick>
 80040f6:	0002      	movs	r2, r0
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	4a27      	ldr	r2, [pc, #156]	; (800419c <HAL_RCC_ClockConfig+0x18c>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e042      	b.n	800418c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004106:	4b24      	ldr	r3, [pc, #144]	; (8004198 <HAL_RCC_ClockConfig+0x188>)
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	220c      	movs	r2, #12
 800410c:	401a      	ands	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	429a      	cmp	r2, r3
 8004116:	d1ec      	bne.n	80040f2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004118:	4b1e      	ldr	r3, [pc, #120]	; (8004194 <HAL_RCC_ClockConfig+0x184>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2201      	movs	r2, #1
 800411e:	4013      	ands	r3, r2
 8004120:	683a      	ldr	r2, [r7, #0]
 8004122:	429a      	cmp	r2, r3
 8004124:	d211      	bcs.n	800414a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004126:	4b1b      	ldr	r3, [pc, #108]	; (8004194 <HAL_RCC_ClockConfig+0x184>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2201      	movs	r2, #1
 800412c:	4393      	bics	r3, r2
 800412e:	0019      	movs	r1, r3
 8004130:	4b18      	ldr	r3, [pc, #96]	; (8004194 <HAL_RCC_ClockConfig+0x184>)
 8004132:	683a      	ldr	r2, [r7, #0]
 8004134:	430a      	orrs	r2, r1
 8004136:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004138:	4b16      	ldr	r3, [pc, #88]	; (8004194 <HAL_RCC_ClockConfig+0x184>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2201      	movs	r2, #1
 800413e:	4013      	ands	r3, r2
 8004140:	683a      	ldr	r2, [r7, #0]
 8004142:	429a      	cmp	r2, r3
 8004144:	d001      	beq.n	800414a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e020      	b.n	800418c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2204      	movs	r2, #4
 8004150:	4013      	ands	r3, r2
 8004152:	d009      	beq.n	8004168 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004154:	4b10      	ldr	r3, [pc, #64]	; (8004198 <HAL_RCC_ClockConfig+0x188>)
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	4a11      	ldr	r2, [pc, #68]	; (80041a0 <HAL_RCC_ClockConfig+0x190>)
 800415a:	4013      	ands	r3, r2
 800415c:	0019      	movs	r1, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68da      	ldr	r2, [r3, #12]
 8004162:	4b0d      	ldr	r3, [pc, #52]	; (8004198 <HAL_RCC_ClockConfig+0x188>)
 8004164:	430a      	orrs	r2, r1
 8004166:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004168:	f000 f820 	bl	80041ac <HAL_RCC_GetSysClockFreq>
 800416c:	0001      	movs	r1, r0
 800416e:	4b0a      	ldr	r3, [pc, #40]	; (8004198 <HAL_RCC_ClockConfig+0x188>)
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	091b      	lsrs	r3, r3, #4
 8004174:	220f      	movs	r2, #15
 8004176:	4013      	ands	r3, r2
 8004178:	4a0a      	ldr	r2, [pc, #40]	; (80041a4 <HAL_RCC_ClockConfig+0x194>)
 800417a:	5cd3      	ldrb	r3, [r2, r3]
 800417c:	000a      	movs	r2, r1
 800417e:	40da      	lsrs	r2, r3
 8004180:	4b09      	ldr	r3, [pc, #36]	; (80041a8 <HAL_RCC_ClockConfig+0x198>)
 8004182:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004184:	2003      	movs	r0, #3
 8004186:	f7fd fd31 	bl	8001bec <HAL_InitTick>
  
  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	0018      	movs	r0, r3
 800418e:	46bd      	mov	sp, r7
 8004190:	b004      	add	sp, #16
 8004192:	bd80      	pop	{r7, pc}
 8004194:	40022000 	.word	0x40022000
 8004198:	40021000 	.word	0x40021000
 800419c:	00001388 	.word	0x00001388
 80041a0:	fffff8ff 	.word	0xfffff8ff
 80041a4:	08006f34 	.word	0x08006f34
 80041a8:	2000001c 	.word	0x2000001c

080041ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041ac:	b590      	push	{r4, r7, lr}
 80041ae:	b08f      	sub	sp, #60	; 0x3c
 80041b0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80041b2:	2314      	movs	r3, #20
 80041b4:	18fb      	adds	r3, r7, r3
 80041b6:	4a2b      	ldr	r2, [pc, #172]	; (8004264 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041b8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80041ba:	c313      	stmia	r3!, {r0, r1, r4}
 80041bc:	6812      	ldr	r2, [r2, #0]
 80041be:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80041c0:	1d3b      	adds	r3, r7, #4
 80041c2:	4a29      	ldr	r2, [pc, #164]	; (8004268 <HAL_RCC_GetSysClockFreq+0xbc>)
 80041c4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80041c6:	c313      	stmia	r3!, {r0, r1, r4}
 80041c8:	6812      	ldr	r2, [r2, #0]
 80041ca:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80041cc:	2300      	movs	r3, #0
 80041ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041d0:	2300      	movs	r3, #0
 80041d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80041d4:	2300      	movs	r3, #0
 80041d6:	637b      	str	r3, [r7, #52]	; 0x34
 80041d8:	2300      	movs	r3, #0
 80041da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80041dc:	2300      	movs	r3, #0
 80041de:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80041e0:	4b22      	ldr	r3, [pc, #136]	; (800426c <HAL_RCC_GetSysClockFreq+0xc0>)
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80041e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e8:	220c      	movs	r2, #12
 80041ea:	4013      	ands	r3, r2
 80041ec:	2b04      	cmp	r3, #4
 80041ee:	d002      	beq.n	80041f6 <HAL_RCC_GetSysClockFreq+0x4a>
 80041f0:	2b08      	cmp	r3, #8
 80041f2:	d003      	beq.n	80041fc <HAL_RCC_GetSysClockFreq+0x50>
 80041f4:	e02d      	b.n	8004252 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80041f6:	4b1e      	ldr	r3, [pc, #120]	; (8004270 <HAL_RCC_GetSysClockFreq+0xc4>)
 80041f8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80041fa:	e02d      	b.n	8004258 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80041fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041fe:	0c9b      	lsrs	r3, r3, #18
 8004200:	220f      	movs	r2, #15
 8004202:	4013      	ands	r3, r2
 8004204:	2214      	movs	r2, #20
 8004206:	18ba      	adds	r2, r7, r2
 8004208:	5cd3      	ldrb	r3, [r2, r3]
 800420a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800420c:	4b17      	ldr	r3, [pc, #92]	; (800426c <HAL_RCC_GetSysClockFreq+0xc0>)
 800420e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004210:	220f      	movs	r2, #15
 8004212:	4013      	ands	r3, r2
 8004214:	1d3a      	adds	r2, r7, #4
 8004216:	5cd3      	ldrb	r3, [r2, r3]
 8004218:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800421a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800421c:	2380      	movs	r3, #128	; 0x80
 800421e:	025b      	lsls	r3, r3, #9
 8004220:	4013      	ands	r3, r2
 8004222:	d009      	beq.n	8004238 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004224:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004226:	4812      	ldr	r0, [pc, #72]	; (8004270 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004228:	f7fb ff6e 	bl	8000108 <__udivsi3>
 800422c:	0003      	movs	r3, r0
 800422e:	001a      	movs	r2, r3
 8004230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004232:	4353      	muls	r3, r2
 8004234:	637b      	str	r3, [r7, #52]	; 0x34
 8004236:	e009      	b.n	800424c <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004238:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800423a:	000a      	movs	r2, r1
 800423c:	0152      	lsls	r2, r2, #5
 800423e:	1a52      	subs	r2, r2, r1
 8004240:	0193      	lsls	r3, r2, #6
 8004242:	1a9b      	subs	r3, r3, r2
 8004244:	00db      	lsls	r3, r3, #3
 8004246:	185b      	adds	r3, r3, r1
 8004248:	021b      	lsls	r3, r3, #8
 800424a:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 800424c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800424e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004250:	e002      	b.n	8004258 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004252:	4b07      	ldr	r3, [pc, #28]	; (8004270 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004254:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004256:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800425a:	0018      	movs	r0, r3
 800425c:	46bd      	mov	sp, r7
 800425e:	b00f      	add	sp, #60	; 0x3c
 8004260:	bd90      	pop	{r4, r7, pc}
 8004262:	46c0      	nop			; (mov r8, r8)
 8004264:	08006dc4 	.word	0x08006dc4
 8004268:	08006dd4 	.word	0x08006dd4
 800426c:	40021000 	.word	0x40021000
 8004270:	007a1200 	.word	0x007a1200

08004274 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004278:	4b02      	ldr	r3, [pc, #8]	; (8004284 <HAL_RCC_GetHCLKFreq+0x10>)
 800427a:	681b      	ldr	r3, [r3, #0]
}
 800427c:	0018      	movs	r0, r3
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	46c0      	nop			; (mov r8, r8)
 8004284:	2000001c 	.word	0x2000001c

08004288 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800428c:	f7ff fff2 	bl	8004274 <HAL_RCC_GetHCLKFreq>
 8004290:	0001      	movs	r1, r0
 8004292:	4b06      	ldr	r3, [pc, #24]	; (80042ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	0a1b      	lsrs	r3, r3, #8
 8004298:	2207      	movs	r2, #7
 800429a:	4013      	ands	r3, r2
 800429c:	4a04      	ldr	r2, [pc, #16]	; (80042b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800429e:	5cd3      	ldrb	r3, [r2, r3]
 80042a0:	40d9      	lsrs	r1, r3
 80042a2:	000b      	movs	r3, r1
}    
 80042a4:	0018      	movs	r0, r3
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	46c0      	nop			; (mov r8, r8)
 80042ac:	40021000 	.word	0x40021000
 80042b0:	08006f44 	.word	0x08006f44

080042b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042bc:	2300      	movs	r3, #0
 80042be:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80042c0:	2300      	movs	r3, #0
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	2380      	movs	r3, #128	; 0x80
 80042ca:	025b      	lsls	r3, r3, #9
 80042cc:	4013      	ands	r3, r2
 80042ce:	d100      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80042d0:	e08e      	b.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80042d2:	2017      	movs	r0, #23
 80042d4:	183b      	adds	r3, r7, r0
 80042d6:	2200      	movs	r2, #0
 80042d8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042da:	4b5f      	ldr	r3, [pc, #380]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042dc:	69da      	ldr	r2, [r3, #28]
 80042de:	2380      	movs	r3, #128	; 0x80
 80042e0:	055b      	lsls	r3, r3, #21
 80042e2:	4013      	ands	r3, r2
 80042e4:	d110      	bne.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80042e6:	4b5c      	ldr	r3, [pc, #368]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042e8:	69da      	ldr	r2, [r3, #28]
 80042ea:	4b5b      	ldr	r3, [pc, #364]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042ec:	2180      	movs	r1, #128	; 0x80
 80042ee:	0549      	lsls	r1, r1, #21
 80042f0:	430a      	orrs	r2, r1
 80042f2:	61da      	str	r2, [r3, #28]
 80042f4:	4b58      	ldr	r3, [pc, #352]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042f6:	69da      	ldr	r2, [r3, #28]
 80042f8:	2380      	movs	r3, #128	; 0x80
 80042fa:	055b      	lsls	r3, r3, #21
 80042fc:	4013      	ands	r3, r2
 80042fe:	60bb      	str	r3, [r7, #8]
 8004300:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004302:	183b      	adds	r3, r7, r0
 8004304:	2201      	movs	r2, #1
 8004306:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004308:	4b54      	ldr	r3, [pc, #336]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	2380      	movs	r3, #128	; 0x80
 800430e:	005b      	lsls	r3, r3, #1
 8004310:	4013      	ands	r3, r2
 8004312:	d11a      	bne.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004314:	4b51      	ldr	r3, [pc, #324]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	4b50      	ldr	r3, [pc, #320]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800431a:	2180      	movs	r1, #128	; 0x80
 800431c:	0049      	lsls	r1, r1, #1
 800431e:	430a      	orrs	r2, r1
 8004320:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004322:	f7fd fca9 	bl	8001c78 <HAL_GetTick>
 8004326:	0003      	movs	r3, r0
 8004328:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800432a:	e008      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800432c:	f7fd fca4 	bl	8001c78 <HAL_GetTick>
 8004330:	0002      	movs	r2, r0
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b64      	cmp	r3, #100	; 0x64
 8004338:	d901      	bls.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e087      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800433e:	4b47      	ldr	r3, [pc, #284]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	2380      	movs	r3, #128	; 0x80
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	4013      	ands	r3, r2
 8004348:	d0f0      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800434a:	4b43      	ldr	r3, [pc, #268]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800434c:	6a1a      	ldr	r2, [r3, #32]
 800434e:	23c0      	movs	r3, #192	; 0xc0
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4013      	ands	r3, r2
 8004354:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d034      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685a      	ldr	r2, [r3, #4]
 8004360:	23c0      	movs	r3, #192	; 0xc0
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4013      	ands	r3, r2
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	429a      	cmp	r2, r3
 800436a:	d02c      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800436c:	4b3a      	ldr	r3, [pc, #232]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	4a3b      	ldr	r2, [pc, #236]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004372:	4013      	ands	r3, r2
 8004374:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004376:	4b38      	ldr	r3, [pc, #224]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004378:	6a1a      	ldr	r2, [r3, #32]
 800437a:	4b37      	ldr	r3, [pc, #220]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800437c:	2180      	movs	r1, #128	; 0x80
 800437e:	0249      	lsls	r1, r1, #9
 8004380:	430a      	orrs	r2, r1
 8004382:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004384:	4b34      	ldr	r3, [pc, #208]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004386:	6a1a      	ldr	r2, [r3, #32]
 8004388:	4b33      	ldr	r3, [pc, #204]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800438a:	4936      	ldr	r1, [pc, #216]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800438c:	400a      	ands	r2, r1
 800438e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004390:	4b31      	ldr	r3, [pc, #196]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2201      	movs	r2, #1
 800439a:	4013      	ands	r3, r2
 800439c:	d013      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800439e:	f7fd fc6b 	bl	8001c78 <HAL_GetTick>
 80043a2:	0003      	movs	r3, r0
 80043a4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043a6:	e009      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043a8:	f7fd fc66 	bl	8001c78 <HAL_GetTick>
 80043ac:	0002      	movs	r2, r0
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	4a2d      	ldr	r2, [pc, #180]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d901      	bls.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e048      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043bc:	4b26      	ldr	r3, [pc, #152]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043be:	6a1b      	ldr	r3, [r3, #32]
 80043c0:	2202      	movs	r2, #2
 80043c2:	4013      	ands	r3, r2
 80043c4:	d0f0      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043c6:	4b24      	ldr	r3, [pc, #144]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	4a25      	ldr	r2, [pc, #148]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043cc:	4013      	ands	r3, r2
 80043ce:	0019      	movs	r1, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	4b20      	ldr	r3, [pc, #128]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043d6:	430a      	orrs	r2, r1
 80043d8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80043da:	2317      	movs	r3, #23
 80043dc:	18fb      	adds	r3, r7, r3
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d105      	bne.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043e4:	4b1c      	ldr	r3, [pc, #112]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043e6:	69da      	ldr	r2, [r3, #28]
 80043e8:	4b1b      	ldr	r3, [pc, #108]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043ea:	4920      	ldr	r1, [pc, #128]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043ec:	400a      	ands	r2, r1
 80043ee:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2201      	movs	r2, #1
 80043f6:	4013      	ands	r3, r2
 80043f8:	d009      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043fa:	4b17      	ldr	r3, [pc, #92]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fe:	2203      	movs	r2, #3
 8004400:	4393      	bics	r3, r2
 8004402:	0019      	movs	r1, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689a      	ldr	r2, [r3, #8]
 8004408:	4b13      	ldr	r3, [pc, #76]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800440a:	430a      	orrs	r2, r1
 800440c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2220      	movs	r2, #32
 8004414:	4013      	ands	r3, r2
 8004416:	d009      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004418:	4b0f      	ldr	r3, [pc, #60]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800441a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441c:	2210      	movs	r2, #16
 800441e:	4393      	bics	r3, r2
 8004420:	0019      	movs	r1, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	68da      	ldr	r2, [r3, #12]
 8004426:	4b0c      	ldr	r3, [pc, #48]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004428:	430a      	orrs	r2, r1
 800442a:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	2380      	movs	r3, #128	; 0x80
 8004432:	00db      	lsls	r3, r3, #3
 8004434:	4013      	ands	r3, r2
 8004436:	d009      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004438:	4b07      	ldr	r3, [pc, #28]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800443a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443c:	2240      	movs	r2, #64	; 0x40
 800443e:	4393      	bics	r3, r2
 8004440:	0019      	movs	r1, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	691a      	ldr	r2, [r3, #16]
 8004446:	4b04      	ldr	r3, [pc, #16]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004448:	430a      	orrs	r2, r1
 800444a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	0018      	movs	r0, r3
 8004450:	46bd      	mov	sp, r7
 8004452:	b006      	add	sp, #24
 8004454:	bd80      	pop	{r7, pc}
 8004456:	46c0      	nop			; (mov r8, r8)
 8004458:	40021000 	.word	0x40021000
 800445c:	40007000 	.word	0x40007000
 8004460:	fffffcff 	.word	0xfffffcff
 8004464:	fffeffff 	.word	0xfffeffff
 8004468:	00001388 	.word	0x00001388
 800446c:	efffffff 	.word	0xefffffff

08004470 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d101      	bne.n	8004482 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e0a8      	b.n	80045d4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004486:	2b00      	cmp	r3, #0
 8004488:	d109      	bne.n	800449e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685a      	ldr	r2, [r3, #4]
 800448e:	2382      	movs	r3, #130	; 0x82
 8004490:	005b      	lsls	r3, r3, #1
 8004492:	429a      	cmp	r2, r3
 8004494:	d009      	beq.n	80044aa <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	61da      	str	r2, [r3, #28]
 800449c:	e005      	b.n	80044aa <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	225d      	movs	r2, #93	; 0x5d
 80044b4:	5c9b      	ldrb	r3, [r3, r2]
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d107      	bne.n	80044cc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	225c      	movs	r2, #92	; 0x5c
 80044c0:	2100      	movs	r1, #0
 80044c2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	0018      	movs	r0, r3
 80044c8:	f7fd f9d0 	bl	800186c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	225d      	movs	r2, #93	; 0x5d
 80044d0:	2102      	movs	r1, #2
 80044d2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2140      	movs	r1, #64	; 0x40
 80044e0:	438a      	bics	r2, r1
 80044e2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	68da      	ldr	r2, [r3, #12]
 80044e8:	23e0      	movs	r3, #224	; 0xe0
 80044ea:	00db      	lsls	r3, r3, #3
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d902      	bls.n	80044f6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80044f0:	2300      	movs	r3, #0
 80044f2:	60fb      	str	r3, [r7, #12]
 80044f4:	e002      	b.n	80044fc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80044f6:	2380      	movs	r3, #128	; 0x80
 80044f8:	015b      	lsls	r3, r3, #5
 80044fa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	68da      	ldr	r2, [r3, #12]
 8004500:	23f0      	movs	r3, #240	; 0xf0
 8004502:	011b      	lsls	r3, r3, #4
 8004504:	429a      	cmp	r2, r3
 8004506:	d008      	beq.n	800451a <HAL_SPI_Init+0xaa>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68da      	ldr	r2, [r3, #12]
 800450c:	23e0      	movs	r3, #224	; 0xe0
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	429a      	cmp	r2, r3
 8004512:	d002      	beq.n	800451a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	2382      	movs	r3, #130	; 0x82
 8004520:	005b      	lsls	r3, r3, #1
 8004522:	401a      	ands	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6899      	ldr	r1, [r3, #8]
 8004528:	2384      	movs	r3, #132	; 0x84
 800452a:	021b      	lsls	r3, r3, #8
 800452c:	400b      	ands	r3, r1
 800452e:	431a      	orrs	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	2102      	movs	r1, #2
 8004536:	400b      	ands	r3, r1
 8004538:	431a      	orrs	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	2101      	movs	r1, #1
 8004540:	400b      	ands	r3, r1
 8004542:	431a      	orrs	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6999      	ldr	r1, [r3, #24]
 8004548:	2380      	movs	r3, #128	; 0x80
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	400b      	ands	r3, r1
 800454e:	431a      	orrs	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	69db      	ldr	r3, [r3, #28]
 8004554:	2138      	movs	r1, #56	; 0x38
 8004556:	400b      	ands	r3, r1
 8004558:	431a      	orrs	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	2180      	movs	r1, #128	; 0x80
 8004560:	400b      	ands	r3, r1
 8004562:	431a      	orrs	r2, r3
 8004564:	0011      	movs	r1, r2
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800456a:	2380      	movs	r3, #128	; 0x80
 800456c:	019b      	lsls	r3, r3, #6
 800456e:	401a      	ands	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	430a      	orrs	r2, r1
 8004576:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	0c1b      	lsrs	r3, r3, #16
 800457e:	2204      	movs	r2, #4
 8004580:	401a      	ands	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004586:	2110      	movs	r1, #16
 8004588:	400b      	ands	r3, r1
 800458a:	431a      	orrs	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004590:	2108      	movs	r1, #8
 8004592:	400b      	ands	r3, r1
 8004594:	431a      	orrs	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68d9      	ldr	r1, [r3, #12]
 800459a:	23f0      	movs	r3, #240	; 0xf0
 800459c:	011b      	lsls	r3, r3, #4
 800459e:	400b      	ands	r3, r1
 80045a0:	431a      	orrs	r2, r3
 80045a2:	0011      	movs	r1, r2
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	2380      	movs	r3, #128	; 0x80
 80045a8:	015b      	lsls	r3, r3, #5
 80045aa:	401a      	ands	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	430a      	orrs	r2, r1
 80045b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	69da      	ldr	r2, [r3, #28]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4907      	ldr	r1, [pc, #28]	; (80045dc <HAL_SPI_Init+0x16c>)
 80045c0:	400a      	ands	r2, r1
 80045c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	225d      	movs	r2, #93	; 0x5d
 80045ce:	2101      	movs	r1, #1
 80045d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	0018      	movs	r0, r3
 80045d6:	46bd      	mov	sp, r7
 80045d8:	b004      	add	sp, #16
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	fffff7ff 	.word	0xfffff7ff

080045e0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b088      	sub	sp, #32
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	603b      	str	r3, [r7, #0]
 80045ec:	1dbb      	adds	r3, r7, #6
 80045ee:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80045f0:	231f      	movs	r3, #31
 80045f2:	18fb      	adds	r3, r7, r3
 80045f4:	2200      	movs	r2, #0
 80045f6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	225c      	movs	r2, #92	; 0x5c
 80045fc:	5c9b      	ldrb	r3, [r3, r2]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d101      	bne.n	8004606 <HAL_SPI_Transmit+0x26>
 8004602:	2302      	movs	r3, #2
 8004604:	e140      	b.n	8004888 <HAL_SPI_Transmit+0x2a8>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	225c      	movs	r2, #92	; 0x5c
 800460a:	2101      	movs	r1, #1
 800460c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800460e:	f7fd fb33 	bl	8001c78 <HAL_GetTick>
 8004612:	0003      	movs	r3, r0
 8004614:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004616:	2316      	movs	r3, #22
 8004618:	18fb      	adds	r3, r7, r3
 800461a:	1dba      	adds	r2, r7, #6
 800461c:	8812      	ldrh	r2, [r2, #0]
 800461e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	225d      	movs	r2, #93	; 0x5d
 8004624:	5c9b      	ldrb	r3, [r3, r2]
 8004626:	b2db      	uxtb	r3, r3
 8004628:	2b01      	cmp	r3, #1
 800462a:	d004      	beq.n	8004636 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800462c:	231f      	movs	r3, #31
 800462e:	18fb      	adds	r3, r7, r3
 8004630:	2202      	movs	r2, #2
 8004632:	701a      	strb	r2, [r3, #0]
    goto error;
 8004634:	e11d      	b.n	8004872 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d003      	beq.n	8004644 <HAL_SPI_Transmit+0x64>
 800463c:	1dbb      	adds	r3, r7, #6
 800463e:	881b      	ldrh	r3, [r3, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d104      	bne.n	800464e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8004644:	231f      	movs	r3, #31
 8004646:	18fb      	adds	r3, r7, r3
 8004648:	2201      	movs	r2, #1
 800464a:	701a      	strb	r2, [r3, #0]
    goto error;
 800464c:	e111      	b.n	8004872 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	225d      	movs	r2, #93	; 0x5d
 8004652:	2103      	movs	r1, #3
 8004654:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	68ba      	ldr	r2, [r7, #8]
 8004660:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	1dba      	adds	r2, r7, #6
 8004666:	8812      	ldrh	r2, [r2, #0]
 8004668:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	1dba      	adds	r2, r7, #6
 800466e:	8812      	ldrh	r2, [r2, #0]
 8004670:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2244      	movs	r2, #68	; 0x44
 800467c:	2100      	movs	r1, #0
 800467e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2246      	movs	r2, #70	; 0x46
 8004684:	2100      	movs	r1, #0
 8004686:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	689a      	ldr	r2, [r3, #8]
 8004698:	2380      	movs	r3, #128	; 0x80
 800469a:	021b      	lsls	r3, r3, #8
 800469c:	429a      	cmp	r2, r3
 800469e:	d110      	bne.n	80046c2 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2140      	movs	r1, #64	; 0x40
 80046ac:	438a      	bics	r2, r1
 80046ae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2180      	movs	r1, #128	; 0x80
 80046bc:	01c9      	lsls	r1, r1, #7
 80046be:	430a      	orrs	r2, r1
 80046c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2240      	movs	r2, #64	; 0x40
 80046ca:	4013      	ands	r3, r2
 80046cc:	2b40      	cmp	r3, #64	; 0x40
 80046ce:	d007      	beq.n	80046e0 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2140      	movs	r1, #64	; 0x40
 80046dc:	430a      	orrs	r2, r1
 80046de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	68da      	ldr	r2, [r3, #12]
 80046e4:	23e0      	movs	r3, #224	; 0xe0
 80046e6:	00db      	lsls	r3, r3, #3
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d94e      	bls.n	800478a <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d004      	beq.n	80046fe <HAL_SPI_Transmit+0x11e>
 80046f4:	2316      	movs	r3, #22
 80046f6:	18fb      	adds	r3, r7, r3
 80046f8:	881b      	ldrh	r3, [r3, #0]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d13f      	bne.n	800477e <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004702:	881a      	ldrh	r2, [r3, #0]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470e:	1c9a      	adds	r2, r3, #2
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004718:	b29b      	uxth	r3, r3
 800471a:	3b01      	subs	r3, #1
 800471c:	b29a      	uxth	r2, r3
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004722:	e02c      	b.n	800477e <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	2202      	movs	r2, #2
 800472c:	4013      	ands	r3, r2
 800472e:	2b02      	cmp	r3, #2
 8004730:	d112      	bne.n	8004758 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004736:	881a      	ldrh	r2, [r3, #0]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004742:	1c9a      	adds	r2, r3, #2
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800474c:	b29b      	uxth	r3, r3
 800474e:	3b01      	subs	r3, #1
 8004750:	b29a      	uxth	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004756:	e012      	b.n	800477e <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004758:	f7fd fa8e 	bl	8001c78 <HAL_GetTick>
 800475c:	0002      	movs	r2, r0
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	683a      	ldr	r2, [r7, #0]
 8004764:	429a      	cmp	r2, r3
 8004766:	d802      	bhi.n	800476e <HAL_SPI_Transmit+0x18e>
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	3301      	adds	r3, #1
 800476c:	d102      	bne.n	8004774 <HAL_SPI_Transmit+0x194>
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d104      	bne.n	800477e <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8004774:	231f      	movs	r3, #31
 8004776:	18fb      	adds	r3, r7, r3
 8004778:	2203      	movs	r2, #3
 800477a:	701a      	strb	r2, [r3, #0]
          goto error;
 800477c:	e079      	b.n	8004872 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004782:	b29b      	uxth	r3, r3
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1cd      	bne.n	8004724 <HAL_SPI_Transmit+0x144>
 8004788:	e04f      	b.n	800482a <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d004      	beq.n	800479c <HAL_SPI_Transmit+0x1bc>
 8004792:	2316      	movs	r3, #22
 8004794:	18fb      	adds	r3, r7, r3
 8004796:	881b      	ldrh	r3, [r3, #0]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d141      	bne.n	8004820 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	330c      	adds	r3, #12
 80047a6:	7812      	ldrb	r2, [r2, #0]
 80047a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ae:	1c5a      	adds	r2, r3, #1
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	3b01      	subs	r3, #1
 80047bc:	b29a      	uxth	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80047c2:	e02d      	b.n	8004820 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	2202      	movs	r2, #2
 80047cc:	4013      	ands	r3, r2
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d113      	bne.n	80047fa <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	330c      	adds	r3, #12
 80047dc:	7812      	ldrb	r2, [r2, #0]
 80047de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e4:	1c5a      	adds	r2, r3, #1
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	3b01      	subs	r3, #1
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047f8:	e012      	b.n	8004820 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047fa:	f7fd fa3d 	bl	8001c78 <HAL_GetTick>
 80047fe:	0002      	movs	r2, r0
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	429a      	cmp	r2, r3
 8004808:	d802      	bhi.n	8004810 <HAL_SPI_Transmit+0x230>
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	3301      	adds	r3, #1
 800480e:	d102      	bne.n	8004816 <HAL_SPI_Transmit+0x236>
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d104      	bne.n	8004820 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8004816:	231f      	movs	r3, #31
 8004818:	18fb      	adds	r3, r7, r3
 800481a:	2203      	movs	r2, #3
 800481c:	701a      	strb	r2, [r3, #0]
          goto error;
 800481e:	e028      	b.n	8004872 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004824:	b29b      	uxth	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1cc      	bne.n	80047c4 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800482a:	69ba      	ldr	r2, [r7, #24]
 800482c:	6839      	ldr	r1, [r7, #0]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	0018      	movs	r0, r3
 8004832:	f000 f95d 	bl	8004af0 <SPI_EndRxTxTransaction>
 8004836:	1e03      	subs	r3, r0, #0
 8004838:	d002      	beq.n	8004840 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2220      	movs	r2, #32
 800483e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d10a      	bne.n	800485e <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004848:	2300      	movs	r3, #0
 800484a:	613b      	str	r3, [r7, #16]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	613b      	str	r3, [r7, #16]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	613b      	str	r3, [r7, #16]
 800485c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004862:	2b00      	cmp	r3, #0
 8004864:	d004      	beq.n	8004870 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8004866:	231f      	movs	r3, #31
 8004868:	18fb      	adds	r3, r7, r3
 800486a:	2201      	movs	r2, #1
 800486c:	701a      	strb	r2, [r3, #0]
 800486e:	e000      	b.n	8004872 <HAL_SPI_Transmit+0x292>
  }

error:
 8004870:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	225d      	movs	r2, #93	; 0x5d
 8004876:	2101      	movs	r1, #1
 8004878:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	225c      	movs	r2, #92	; 0x5c
 800487e:	2100      	movs	r1, #0
 8004880:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004882:	231f      	movs	r3, #31
 8004884:	18fb      	adds	r3, r7, r3
 8004886:	781b      	ldrb	r3, [r3, #0]
}
 8004888:	0018      	movs	r0, r3
 800488a:	46bd      	mov	sp, r7
 800488c:	b008      	add	sp, #32
 800488e:	bd80      	pop	{r7, pc}

08004890 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b088      	sub	sp, #32
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	603b      	str	r3, [r7, #0]
 800489c:	1dfb      	adds	r3, r7, #7
 800489e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80048a0:	f7fd f9ea 	bl	8001c78 <HAL_GetTick>
 80048a4:	0002      	movs	r2, r0
 80048a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a8:	1a9b      	subs	r3, r3, r2
 80048aa:	683a      	ldr	r2, [r7, #0]
 80048ac:	18d3      	adds	r3, r2, r3
 80048ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80048b0:	f7fd f9e2 	bl	8001c78 <HAL_GetTick>
 80048b4:	0003      	movs	r3, r0
 80048b6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80048b8:	4b3a      	ldr	r3, [pc, #232]	; (80049a4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	015b      	lsls	r3, r3, #5
 80048be:	0d1b      	lsrs	r3, r3, #20
 80048c0:	69fa      	ldr	r2, [r7, #28]
 80048c2:	4353      	muls	r3, r2
 80048c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048c6:	e058      	b.n	800497a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	3301      	adds	r3, #1
 80048cc:	d055      	beq.n	800497a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80048ce:	f7fd f9d3 	bl	8001c78 <HAL_GetTick>
 80048d2:	0002      	movs	r2, r0
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	69fa      	ldr	r2, [r7, #28]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d902      	bls.n	80048e4 <SPI_WaitFlagStateUntilTimeout+0x54>
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d142      	bne.n	800496a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	685a      	ldr	r2, [r3, #4]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	21e0      	movs	r1, #224	; 0xe0
 80048f0:	438a      	bics	r2, r1
 80048f2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	685a      	ldr	r2, [r3, #4]
 80048f8:	2382      	movs	r3, #130	; 0x82
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d113      	bne.n	8004928 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	689a      	ldr	r2, [r3, #8]
 8004904:	2380      	movs	r3, #128	; 0x80
 8004906:	021b      	lsls	r3, r3, #8
 8004908:	429a      	cmp	r2, r3
 800490a:	d005      	beq.n	8004918 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	2380      	movs	r3, #128	; 0x80
 8004912:	00db      	lsls	r3, r3, #3
 8004914:	429a      	cmp	r2, r3
 8004916:	d107      	bne.n	8004928 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2140      	movs	r1, #64	; 0x40
 8004924:	438a      	bics	r2, r1
 8004926:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800492c:	2380      	movs	r3, #128	; 0x80
 800492e:	019b      	lsls	r3, r3, #6
 8004930:	429a      	cmp	r2, r3
 8004932:	d110      	bne.n	8004956 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	491a      	ldr	r1, [pc, #104]	; (80049a8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004940:	400a      	ands	r2, r1
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2180      	movs	r1, #128	; 0x80
 8004950:	0189      	lsls	r1, r1, #6
 8004952:	430a      	orrs	r2, r1
 8004954:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	225d      	movs	r2, #93	; 0x5d
 800495a:	2101      	movs	r1, #1
 800495c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	225c      	movs	r2, #92	; 0x5c
 8004962:	2100      	movs	r1, #0
 8004964:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e017      	b.n	800499a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004970:	2300      	movs	r3, #0
 8004972:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	3b01      	subs	r3, #1
 8004978:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	68ba      	ldr	r2, [r7, #8]
 8004982:	4013      	ands	r3, r2
 8004984:	68ba      	ldr	r2, [r7, #8]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	425a      	negs	r2, r3
 800498a:	4153      	adcs	r3, r2
 800498c:	b2db      	uxtb	r3, r3
 800498e:	001a      	movs	r2, r3
 8004990:	1dfb      	adds	r3, r7, #7
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	429a      	cmp	r2, r3
 8004996:	d197      	bne.n	80048c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	0018      	movs	r0, r3
 800499c:	46bd      	mov	sp, r7
 800499e:	b008      	add	sp, #32
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	46c0      	nop			; (mov r8, r8)
 80049a4:	2000001c 	.word	0x2000001c
 80049a8:	ffffdfff 	.word	0xffffdfff

080049ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b08a      	sub	sp, #40	; 0x28
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	607a      	str	r2, [r7, #4]
 80049b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80049ba:	2317      	movs	r3, #23
 80049bc:	18fb      	adds	r3, r7, r3
 80049be:	2200      	movs	r2, #0
 80049c0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80049c2:	f7fd f959 	bl	8001c78 <HAL_GetTick>
 80049c6:	0002      	movs	r2, r0
 80049c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ca:	1a9b      	subs	r3, r3, r2
 80049cc:	683a      	ldr	r2, [r7, #0]
 80049ce:	18d3      	adds	r3, r2, r3
 80049d0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80049d2:	f7fd f951 	bl	8001c78 <HAL_GetTick>
 80049d6:	0003      	movs	r3, r0
 80049d8:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	330c      	adds	r3, #12
 80049e0:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80049e2:	4b41      	ldr	r3, [pc, #260]	; (8004ae8 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	0013      	movs	r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	189b      	adds	r3, r3, r2
 80049ec:	00da      	lsls	r2, r3, #3
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	0d1b      	lsrs	r3, r3, #20
 80049f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f4:	4353      	muls	r3, r2
 80049f6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80049f8:	e068      	b.n	8004acc <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	23c0      	movs	r3, #192	; 0xc0
 80049fe:	00db      	lsls	r3, r3, #3
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d10a      	bne.n	8004a1a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d107      	bne.n	8004a1a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	2117      	movs	r1, #23
 8004a12:	187b      	adds	r3, r7, r1
 8004a14:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004a16:	187b      	adds	r3, r7, r1
 8004a18:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	d055      	beq.n	8004acc <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a20:	f7fd f92a 	bl	8001c78 <HAL_GetTick>
 8004a24:	0002      	movs	r2, r0
 8004a26:	6a3b      	ldr	r3, [r7, #32]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d902      	bls.n	8004a36 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d142      	bne.n	8004abc <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	21e0      	movs	r1, #224	; 0xe0
 8004a42:	438a      	bics	r2, r1
 8004a44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	685a      	ldr	r2, [r3, #4]
 8004a4a:	2382      	movs	r3, #130	; 0x82
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d113      	bne.n	8004a7a <SPI_WaitFifoStateUntilTimeout+0xce>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	689a      	ldr	r2, [r3, #8]
 8004a56:	2380      	movs	r3, #128	; 0x80
 8004a58:	021b      	lsls	r3, r3, #8
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d005      	beq.n	8004a6a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	689a      	ldr	r2, [r3, #8]
 8004a62:	2380      	movs	r3, #128	; 0x80
 8004a64:	00db      	lsls	r3, r3, #3
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d107      	bne.n	8004a7a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2140      	movs	r1, #64	; 0x40
 8004a76:	438a      	bics	r2, r1
 8004a78:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a7e:	2380      	movs	r3, #128	; 0x80
 8004a80:	019b      	lsls	r3, r3, #6
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d110      	bne.n	8004aa8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4916      	ldr	r1, [pc, #88]	; (8004aec <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004a92:	400a      	ands	r2, r1
 8004a94:	601a      	str	r2, [r3, #0]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2180      	movs	r1, #128	; 0x80
 8004aa2:	0189      	lsls	r1, r1, #6
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	225d      	movs	r2, #93	; 0x5d
 8004aac:	2101      	movs	r1, #1
 8004aae:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	225c      	movs	r2, #92	; 0x5c
 8004ab4:	2100      	movs	r1, #0
 8004ab6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e010      	b.n	8004ade <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d101      	bne.n	8004ac6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d18e      	bne.n	80049fa <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	0018      	movs	r0, r3
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	b00a      	add	sp, #40	; 0x28
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	46c0      	nop			; (mov r8, r8)
 8004ae8:	2000001c 	.word	0x2000001c
 8004aec:	ffffdfff 	.word	0xffffdfff

08004af0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af02      	add	r7, sp, #8
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	23c0      	movs	r3, #192	; 0xc0
 8004b00:	0159      	lsls	r1, r3, #5
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	9300      	str	r3, [sp, #0]
 8004b08:	0013      	movs	r3, r2
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f7ff ff4e 	bl	80049ac <SPI_WaitFifoStateUntilTimeout>
 8004b10:	1e03      	subs	r3, r0, #0
 8004b12:	d007      	beq.n	8004b24 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b18:	2220      	movs	r2, #32
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e027      	b.n	8004b74 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b24:	68ba      	ldr	r2, [r7, #8]
 8004b26:	68f8      	ldr	r0, [r7, #12]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	9300      	str	r3, [sp, #0]
 8004b2c:	0013      	movs	r3, r2
 8004b2e:	2200      	movs	r2, #0
 8004b30:	2180      	movs	r1, #128	; 0x80
 8004b32:	f7ff fead 	bl	8004890 <SPI_WaitFlagStateUntilTimeout>
 8004b36:	1e03      	subs	r3, r0, #0
 8004b38:	d007      	beq.n	8004b4a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b3e:	2220      	movs	r2, #32
 8004b40:	431a      	orrs	r2, r3
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e014      	b.n	8004b74 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	23c0      	movs	r3, #192	; 0xc0
 8004b4e:	00d9      	lsls	r1, r3, #3
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	9300      	str	r3, [sp, #0]
 8004b56:	0013      	movs	r3, r2
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f7ff ff27 	bl	80049ac <SPI_WaitFifoStateUntilTimeout>
 8004b5e:	1e03      	subs	r3, r0, #0
 8004b60:	d007      	beq.n	8004b72 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b66:	2220      	movs	r2, #32
 8004b68:	431a      	orrs	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e000      	b.n	8004b74 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	0018      	movs	r0, r3
 8004b76:	46bd      	mov	sp, r7
 8004b78:	b004      	add	sp, #16
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d101      	bne.n	8004b8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e042      	b.n	8004c14 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	223d      	movs	r2, #61	; 0x3d
 8004b92:	5c9b      	ldrb	r3, [r3, r2]
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d107      	bne.n	8004baa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	223c      	movs	r2, #60	; 0x3c
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	0018      	movs	r0, r3
 8004ba6:	f7fc fee9 	bl	800197c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	223d      	movs	r2, #61	; 0x3d
 8004bae:	2102      	movs	r1, #2
 8004bb0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	3304      	adds	r3, #4
 8004bba:	0019      	movs	r1, r3
 8004bbc:	0010      	movs	r0, r2
 8004bbe:	f000 fb37 	bl	8005230 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2246      	movs	r2, #70	; 0x46
 8004bc6:	2101      	movs	r1, #1
 8004bc8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	223e      	movs	r2, #62	; 0x3e
 8004bce:	2101      	movs	r1, #1
 8004bd0:	5499      	strb	r1, [r3, r2]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	223f      	movs	r2, #63	; 0x3f
 8004bd6:	2101      	movs	r1, #1
 8004bd8:	5499      	strb	r1, [r3, r2]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2240      	movs	r2, #64	; 0x40
 8004bde:	2101      	movs	r1, #1
 8004be0:	5499      	strb	r1, [r3, r2]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2241      	movs	r2, #65	; 0x41
 8004be6:	2101      	movs	r1, #1
 8004be8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2242      	movs	r2, #66	; 0x42
 8004bee:	2101      	movs	r1, #1
 8004bf0:	5499      	strb	r1, [r3, r2]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2243      	movs	r2, #67	; 0x43
 8004bf6:	2101      	movs	r1, #1
 8004bf8:	5499      	strb	r1, [r3, r2]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2244      	movs	r2, #68	; 0x44
 8004bfe:	2101      	movs	r1, #1
 8004c00:	5499      	strb	r1, [r3, r2]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2245      	movs	r2, #69	; 0x45
 8004c06:	2101      	movs	r1, #1
 8004c08:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	223d      	movs	r2, #61	; 0x3d
 8004c0e:	2101      	movs	r1, #1
 8004c10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	0018      	movs	r0, r3
 8004c16:	46bd      	mov	sp, r7
 8004c18:	b002      	add	sp, #8
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c26:	230f      	movs	r3, #15
 8004c28:	18fb      	adds	r3, r7, r3
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d108      	bne.n	8004c46 <HAL_TIM_OC_Start_IT+0x2a>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	223e      	movs	r2, #62	; 0x3e
 8004c38:	5c9b      	ldrb	r3, [r3, r2]
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	1e5a      	subs	r2, r3, #1
 8004c40:	4193      	sbcs	r3, r2
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	e01f      	b.n	8004c86 <HAL_TIM_OC_Start_IT+0x6a>
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	2b04      	cmp	r3, #4
 8004c4a:	d108      	bne.n	8004c5e <HAL_TIM_OC_Start_IT+0x42>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	223f      	movs	r2, #63	; 0x3f
 8004c50:	5c9b      	ldrb	r3, [r3, r2]
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	3b01      	subs	r3, #1
 8004c56:	1e5a      	subs	r2, r3, #1
 8004c58:	4193      	sbcs	r3, r2
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	e013      	b.n	8004c86 <HAL_TIM_OC_Start_IT+0x6a>
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	2b08      	cmp	r3, #8
 8004c62:	d108      	bne.n	8004c76 <HAL_TIM_OC_Start_IT+0x5a>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2240      	movs	r2, #64	; 0x40
 8004c68:	5c9b      	ldrb	r3, [r3, r2]
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	1e5a      	subs	r2, r3, #1
 8004c70:	4193      	sbcs	r3, r2
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	e007      	b.n	8004c86 <HAL_TIM_OC_Start_IT+0x6a>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2241      	movs	r2, #65	; 0x41
 8004c7a:	5c9b      	ldrb	r3, [r3, r2]
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	1e5a      	subs	r2, r3, #1
 8004c82:	4193      	sbcs	r3, r2
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d001      	beq.n	8004c8e <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e0b7      	b.n	8004dfe <HAL_TIM_OC_Start_IT+0x1e2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d104      	bne.n	8004c9e <HAL_TIM_OC_Start_IT+0x82>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	223e      	movs	r2, #62	; 0x3e
 8004c98:	2102      	movs	r1, #2
 8004c9a:	5499      	strb	r1, [r3, r2]
 8004c9c:	e013      	b.n	8004cc6 <HAL_TIM_OC_Start_IT+0xaa>
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	2b04      	cmp	r3, #4
 8004ca2:	d104      	bne.n	8004cae <HAL_TIM_OC_Start_IT+0x92>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	223f      	movs	r2, #63	; 0x3f
 8004ca8:	2102      	movs	r1, #2
 8004caa:	5499      	strb	r1, [r3, r2]
 8004cac:	e00b      	b.n	8004cc6 <HAL_TIM_OC_Start_IT+0xaa>
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	2b08      	cmp	r3, #8
 8004cb2:	d104      	bne.n	8004cbe <HAL_TIM_OC_Start_IT+0xa2>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2240      	movs	r2, #64	; 0x40
 8004cb8:	2102      	movs	r1, #2
 8004cba:	5499      	strb	r1, [r3, r2]
 8004cbc:	e003      	b.n	8004cc6 <HAL_TIM_OC_Start_IT+0xaa>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2241      	movs	r2, #65	; 0x41
 8004cc2:	2102      	movs	r1, #2
 8004cc4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	2b0c      	cmp	r3, #12
 8004cca:	d02a      	beq.n	8004d22 <HAL_TIM_OC_Start_IT+0x106>
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	2b0c      	cmp	r3, #12
 8004cd0:	d830      	bhi.n	8004d34 <HAL_TIM_OC_Start_IT+0x118>
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	2b08      	cmp	r3, #8
 8004cd6:	d01b      	beq.n	8004d10 <HAL_TIM_OC_Start_IT+0xf4>
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	2b08      	cmp	r3, #8
 8004cdc:	d82a      	bhi.n	8004d34 <HAL_TIM_OC_Start_IT+0x118>
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d003      	beq.n	8004cec <HAL_TIM_OC_Start_IT+0xd0>
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	2b04      	cmp	r3, #4
 8004ce8:	d009      	beq.n	8004cfe <HAL_TIM_OC_Start_IT+0xe2>
 8004cea:	e023      	b.n	8004d34 <HAL_TIM_OC_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68da      	ldr	r2, [r3, #12]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2102      	movs	r1, #2
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	60da      	str	r2, [r3, #12]
      break;
 8004cfc:	e01f      	b.n	8004d3e <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68da      	ldr	r2, [r3, #12]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2104      	movs	r1, #4
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	60da      	str	r2, [r3, #12]
      break;
 8004d0e:	e016      	b.n	8004d3e <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68da      	ldr	r2, [r3, #12]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2108      	movs	r1, #8
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	60da      	str	r2, [r3, #12]
      break;
 8004d20:	e00d      	b.n	8004d3e <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68da      	ldr	r2, [r3, #12]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2110      	movs	r1, #16
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	60da      	str	r2, [r3, #12]
      break;
 8004d32:	e004      	b.n	8004d3e <HAL_TIM_OC_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 8004d34:	230f      	movs	r3, #15
 8004d36:	18fb      	adds	r3, r7, r3
 8004d38:	2201      	movs	r2, #1
 8004d3a:	701a      	strb	r2, [r3, #0]
      break;
 8004d3c:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8004d3e:	230f      	movs	r3, #15
 8004d40:	18fb      	adds	r3, r7, r3
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d157      	bne.n	8004df8 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6839      	ldr	r1, [r7, #0]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	0018      	movs	r0, r3
 8004d52:	f000 fb87 	bl	8005464 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a2b      	ldr	r2, [pc, #172]	; (8004e08 <HAL_TIM_OC_Start_IT+0x1ec>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d00e      	beq.n	8004d7e <HAL_TIM_OC_Start_IT+0x162>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a29      	ldr	r2, [pc, #164]	; (8004e0c <HAL_TIM_OC_Start_IT+0x1f0>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d009      	beq.n	8004d7e <HAL_TIM_OC_Start_IT+0x162>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a28      	ldr	r2, [pc, #160]	; (8004e10 <HAL_TIM_OC_Start_IT+0x1f4>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d004      	beq.n	8004d7e <HAL_TIM_OC_Start_IT+0x162>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a26      	ldr	r2, [pc, #152]	; (8004e14 <HAL_TIM_OC_Start_IT+0x1f8>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d101      	bne.n	8004d82 <HAL_TIM_OC_Start_IT+0x166>
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e000      	b.n	8004d84 <HAL_TIM_OC_Start_IT+0x168>
 8004d82:	2300      	movs	r3, #0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d008      	beq.n	8004d9a <HAL_TIM_OC_Start_IT+0x17e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2180      	movs	r1, #128	; 0x80
 8004d94:	0209      	lsls	r1, r1, #8
 8004d96:	430a      	orrs	r2, r1
 8004d98:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a1a      	ldr	r2, [pc, #104]	; (8004e08 <HAL_TIM_OC_Start_IT+0x1ec>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d00f      	beq.n	8004dc4 <HAL_TIM_OC_Start_IT+0x1a8>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	2380      	movs	r3, #128	; 0x80
 8004daa:	05db      	lsls	r3, r3, #23
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d009      	beq.n	8004dc4 <HAL_TIM_OC_Start_IT+0x1a8>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a18      	ldr	r2, [pc, #96]	; (8004e18 <HAL_TIM_OC_Start_IT+0x1fc>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d004      	beq.n	8004dc4 <HAL_TIM_OC_Start_IT+0x1a8>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a13      	ldr	r2, [pc, #76]	; (8004e0c <HAL_TIM_OC_Start_IT+0x1f0>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d111      	bne.n	8004de8 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	2207      	movs	r2, #7
 8004dcc:	4013      	ands	r3, r2
 8004dce:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	2b06      	cmp	r3, #6
 8004dd4:	d010      	beq.n	8004df8 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2101      	movs	r1, #1
 8004de2:	430a      	orrs	r2, r1
 8004de4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004de6:	e007      	b.n	8004df8 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2101      	movs	r1, #1
 8004df4:	430a      	orrs	r2, r1
 8004df6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004df8:	230f      	movs	r3, #15
 8004dfa:	18fb      	adds	r3, r7, r3
 8004dfc:	781b      	ldrb	r3, [r3, #0]
}
 8004dfe:	0018      	movs	r0, r3
 8004e00:	46bd      	mov	sp, r7
 8004e02:	b004      	add	sp, #16
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	46c0      	nop			; (mov r8, r8)
 8004e08:	40012c00 	.word	0x40012c00
 8004e0c:	40014000 	.word	0x40014000
 8004e10:	40014400 	.word	0x40014400
 8004e14:	40014800 	.word	0x40014800
 8004e18:	40000400 	.word	0x40000400

08004e1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d124      	bne.n	8004e7c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	2202      	movs	r2, #2
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d11d      	bne.n	8004e7c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2203      	movs	r2, #3
 8004e46:	4252      	negs	r2, r2
 8004e48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	699b      	ldr	r3, [r3, #24]
 8004e56:	2203      	movs	r2, #3
 8004e58:	4013      	ands	r3, r2
 8004e5a:	d004      	beq.n	8004e66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	0018      	movs	r0, r3
 8004e60:	f000 f9ce 	bl	8005200 <HAL_TIM_IC_CaptureCallback>
 8004e64:	e007      	b.n	8004e76 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	0018      	movs	r0, r3
 8004e6a:	f7fb f9eb 	bl	8000244 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	0018      	movs	r0, r3
 8004e72:	f000 f9cd 	bl	8005210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	2204      	movs	r2, #4
 8004e84:	4013      	ands	r3, r2
 8004e86:	2b04      	cmp	r3, #4
 8004e88:	d125      	bne.n	8004ed6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	2204      	movs	r2, #4
 8004e92:	4013      	ands	r3, r2
 8004e94:	2b04      	cmp	r3, #4
 8004e96:	d11e      	bne.n	8004ed6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2205      	movs	r2, #5
 8004e9e:	4252      	negs	r2, r2
 8004ea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2202      	movs	r2, #2
 8004ea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	699a      	ldr	r2, [r3, #24]
 8004eae:	23c0      	movs	r3, #192	; 0xc0
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	d004      	beq.n	8004ec0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	0018      	movs	r0, r3
 8004eba:	f000 f9a1 	bl	8005200 <HAL_TIM_IC_CaptureCallback>
 8004ebe:	e007      	b.n	8004ed0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	0018      	movs	r0, r3
 8004ec4:	f7fb f9be 	bl	8000244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	0018      	movs	r0, r3
 8004ecc:	f000 f9a0 	bl	8005210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	2208      	movs	r2, #8
 8004ede:	4013      	ands	r3, r2
 8004ee0:	2b08      	cmp	r3, #8
 8004ee2:	d124      	bne.n	8004f2e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	2208      	movs	r2, #8
 8004eec:	4013      	ands	r3, r2
 8004eee:	2b08      	cmp	r3, #8
 8004ef0:	d11d      	bne.n	8004f2e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2209      	movs	r2, #9
 8004ef8:	4252      	negs	r2, r2
 8004efa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2204      	movs	r2, #4
 8004f00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	69db      	ldr	r3, [r3, #28]
 8004f08:	2203      	movs	r2, #3
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	d004      	beq.n	8004f18 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	0018      	movs	r0, r3
 8004f12:	f000 f975 	bl	8005200 <HAL_TIM_IC_CaptureCallback>
 8004f16:	e007      	b.n	8004f28 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	0018      	movs	r0, r3
 8004f1c:	f7fb f992 	bl	8000244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	0018      	movs	r0, r3
 8004f24:	f000 f974 	bl	8005210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	2210      	movs	r2, #16
 8004f36:	4013      	ands	r3, r2
 8004f38:	2b10      	cmp	r3, #16
 8004f3a:	d125      	bne.n	8004f88 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	2210      	movs	r2, #16
 8004f44:	4013      	ands	r3, r2
 8004f46:	2b10      	cmp	r3, #16
 8004f48:	d11e      	bne.n	8004f88 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2211      	movs	r2, #17
 8004f50:	4252      	negs	r2, r2
 8004f52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2208      	movs	r2, #8
 8004f58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	69da      	ldr	r2, [r3, #28]
 8004f60:	23c0      	movs	r3, #192	; 0xc0
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	4013      	ands	r3, r2
 8004f66:	d004      	beq.n	8004f72 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	0018      	movs	r0, r3
 8004f6c:	f000 f948 	bl	8005200 <HAL_TIM_IC_CaptureCallback>
 8004f70:	e007      	b.n	8004f82 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	0018      	movs	r0, r3
 8004f76:	f7fb f965 	bl	8000244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	0018      	movs	r0, r3
 8004f7e:	f000 f947 	bl	8005210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	4013      	ands	r3, r2
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d10f      	bne.n	8004fb6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d108      	bne.n	8004fb6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2202      	movs	r2, #2
 8004faa:	4252      	negs	r2, r2
 8004fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	0018      	movs	r0, r3
 8004fb2:	f000 f91d 	bl	80051f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	2280      	movs	r2, #128	; 0x80
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	2b80      	cmp	r3, #128	; 0x80
 8004fc2:	d10f      	bne.n	8004fe4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	2280      	movs	r2, #128	; 0x80
 8004fcc:	4013      	ands	r3, r2
 8004fce:	2b80      	cmp	r3, #128	; 0x80
 8004fd0:	d108      	bne.n	8004fe4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2281      	movs	r2, #129	; 0x81
 8004fd8:	4252      	negs	r2, r2
 8004fda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	0018      	movs	r0, r3
 8004fe0:	f000 faca 	bl	8005578 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	2240      	movs	r2, #64	; 0x40
 8004fec:	4013      	ands	r3, r2
 8004fee:	2b40      	cmp	r3, #64	; 0x40
 8004ff0:	d10f      	bne.n	8005012 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	2240      	movs	r2, #64	; 0x40
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	2b40      	cmp	r3, #64	; 0x40
 8004ffe:	d108      	bne.n	8005012 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2241      	movs	r2, #65	; 0x41
 8005006:	4252      	negs	r2, r2
 8005008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	0018      	movs	r0, r3
 800500e:	f000 f907 	bl	8005220 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	2220      	movs	r2, #32
 800501a:	4013      	ands	r3, r2
 800501c:	2b20      	cmp	r3, #32
 800501e:	d10f      	bne.n	8005040 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	2220      	movs	r2, #32
 8005028:	4013      	ands	r3, r2
 800502a:	2b20      	cmp	r3, #32
 800502c:	d108      	bne.n	8005040 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2221      	movs	r2, #33	; 0x21
 8005034:	4252      	negs	r2, r2
 8005036:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	0018      	movs	r0, r3
 800503c:	f000 fa94 	bl	8005568 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005040:	46c0      	nop			; (mov r8, r8)
 8005042:	46bd      	mov	sp, r7
 8005044:	b002      	add	sp, #8
 8005046:	bd80      	pop	{r7, pc}

08005048 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005052:	230f      	movs	r3, #15
 8005054:	18fb      	adds	r3, r7, r3
 8005056:	2200      	movs	r2, #0
 8005058:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	223c      	movs	r2, #60	; 0x3c
 800505e:	5c9b      	ldrb	r3, [r3, r2]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d101      	bne.n	8005068 <HAL_TIM_ConfigClockSource+0x20>
 8005064:	2302      	movs	r3, #2
 8005066:	e0bc      	b.n	80051e2 <HAL_TIM_ConfigClockSource+0x19a>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	223c      	movs	r2, #60	; 0x3c
 800506c:	2101      	movs	r1, #1
 800506e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	223d      	movs	r2, #61	; 0x3d
 8005074:	2102      	movs	r1, #2
 8005076:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	2277      	movs	r2, #119	; 0x77
 8005084:	4393      	bics	r3, r2
 8005086:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	4a58      	ldr	r2, [pc, #352]	; (80051ec <HAL_TIM_ConfigClockSource+0x1a4>)
 800508c:	4013      	ands	r3, r2
 800508e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68ba      	ldr	r2, [r7, #8]
 8005096:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2280      	movs	r2, #128	; 0x80
 800509e:	0192      	lsls	r2, r2, #6
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d040      	beq.n	8005126 <HAL_TIM_ConfigClockSource+0xde>
 80050a4:	2280      	movs	r2, #128	; 0x80
 80050a6:	0192      	lsls	r2, r2, #6
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d900      	bls.n	80050ae <HAL_TIM_ConfigClockSource+0x66>
 80050ac:	e088      	b.n	80051c0 <HAL_TIM_ConfigClockSource+0x178>
 80050ae:	2280      	movs	r2, #128	; 0x80
 80050b0:	0152      	lsls	r2, r2, #5
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d100      	bne.n	80050b8 <HAL_TIM_ConfigClockSource+0x70>
 80050b6:	e088      	b.n	80051ca <HAL_TIM_ConfigClockSource+0x182>
 80050b8:	2280      	movs	r2, #128	; 0x80
 80050ba:	0152      	lsls	r2, r2, #5
 80050bc:	4293      	cmp	r3, r2
 80050be:	d900      	bls.n	80050c2 <HAL_TIM_ConfigClockSource+0x7a>
 80050c0:	e07e      	b.n	80051c0 <HAL_TIM_ConfigClockSource+0x178>
 80050c2:	2b70      	cmp	r3, #112	; 0x70
 80050c4:	d018      	beq.n	80050f8 <HAL_TIM_ConfigClockSource+0xb0>
 80050c6:	d900      	bls.n	80050ca <HAL_TIM_ConfigClockSource+0x82>
 80050c8:	e07a      	b.n	80051c0 <HAL_TIM_ConfigClockSource+0x178>
 80050ca:	2b60      	cmp	r3, #96	; 0x60
 80050cc:	d04f      	beq.n	800516e <HAL_TIM_ConfigClockSource+0x126>
 80050ce:	d900      	bls.n	80050d2 <HAL_TIM_ConfigClockSource+0x8a>
 80050d0:	e076      	b.n	80051c0 <HAL_TIM_ConfigClockSource+0x178>
 80050d2:	2b50      	cmp	r3, #80	; 0x50
 80050d4:	d03b      	beq.n	800514e <HAL_TIM_ConfigClockSource+0x106>
 80050d6:	d900      	bls.n	80050da <HAL_TIM_ConfigClockSource+0x92>
 80050d8:	e072      	b.n	80051c0 <HAL_TIM_ConfigClockSource+0x178>
 80050da:	2b40      	cmp	r3, #64	; 0x40
 80050dc:	d057      	beq.n	800518e <HAL_TIM_ConfigClockSource+0x146>
 80050de:	d900      	bls.n	80050e2 <HAL_TIM_ConfigClockSource+0x9a>
 80050e0:	e06e      	b.n	80051c0 <HAL_TIM_ConfigClockSource+0x178>
 80050e2:	2b30      	cmp	r3, #48	; 0x30
 80050e4:	d063      	beq.n	80051ae <HAL_TIM_ConfigClockSource+0x166>
 80050e6:	d86b      	bhi.n	80051c0 <HAL_TIM_ConfigClockSource+0x178>
 80050e8:	2b20      	cmp	r3, #32
 80050ea:	d060      	beq.n	80051ae <HAL_TIM_ConfigClockSource+0x166>
 80050ec:	d868      	bhi.n	80051c0 <HAL_TIM_ConfigClockSource+0x178>
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d05d      	beq.n	80051ae <HAL_TIM_ConfigClockSource+0x166>
 80050f2:	2b10      	cmp	r3, #16
 80050f4:	d05b      	beq.n	80051ae <HAL_TIM_ConfigClockSource+0x166>
 80050f6:	e063      	b.n	80051c0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6818      	ldr	r0, [r3, #0]
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	6899      	ldr	r1, [r3, #8]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	685a      	ldr	r2, [r3, #4]
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	f000 f98c 	bl	8005424 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	2277      	movs	r2, #119	; 0x77
 8005118:	4313      	orrs	r3, r2
 800511a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68ba      	ldr	r2, [r7, #8]
 8005122:	609a      	str	r2, [r3, #8]
      break;
 8005124:	e052      	b.n	80051cc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6818      	ldr	r0, [r3, #0]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	6899      	ldr	r1, [r3, #8]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	f000 f975 	bl	8005424 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	689a      	ldr	r2, [r3, #8]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2180      	movs	r1, #128	; 0x80
 8005146:	01c9      	lsls	r1, r1, #7
 8005148:	430a      	orrs	r2, r1
 800514a:	609a      	str	r2, [r3, #8]
      break;
 800514c:	e03e      	b.n	80051cc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6818      	ldr	r0, [r3, #0]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	6859      	ldr	r1, [r3, #4]
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	001a      	movs	r2, r3
 800515c:	f000 f8e8 	bl	8005330 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2150      	movs	r1, #80	; 0x50
 8005166:	0018      	movs	r0, r3
 8005168:	f000 f942 	bl	80053f0 <TIM_ITRx_SetConfig>
      break;
 800516c:	e02e      	b.n	80051cc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6818      	ldr	r0, [r3, #0]
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	6859      	ldr	r1, [r3, #4]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	001a      	movs	r2, r3
 800517c:	f000 f906 	bl	800538c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2160      	movs	r1, #96	; 0x60
 8005186:	0018      	movs	r0, r3
 8005188:	f000 f932 	bl	80053f0 <TIM_ITRx_SetConfig>
      break;
 800518c:	e01e      	b.n	80051cc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6818      	ldr	r0, [r3, #0]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	6859      	ldr	r1, [r3, #4]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	001a      	movs	r2, r3
 800519c:	f000 f8c8 	bl	8005330 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2140      	movs	r1, #64	; 0x40
 80051a6:	0018      	movs	r0, r3
 80051a8:	f000 f922 	bl	80053f0 <TIM_ITRx_SetConfig>
      break;
 80051ac:	e00e      	b.n	80051cc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	0019      	movs	r1, r3
 80051b8:	0010      	movs	r0, r2
 80051ba:	f000 f919 	bl	80053f0 <TIM_ITRx_SetConfig>
      break;
 80051be:	e005      	b.n	80051cc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80051c0:	230f      	movs	r3, #15
 80051c2:	18fb      	adds	r3, r7, r3
 80051c4:	2201      	movs	r2, #1
 80051c6:	701a      	strb	r2, [r3, #0]
      break;
 80051c8:	e000      	b.n	80051cc <HAL_TIM_ConfigClockSource+0x184>
      break;
 80051ca:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	223d      	movs	r2, #61	; 0x3d
 80051d0:	2101      	movs	r1, #1
 80051d2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	223c      	movs	r2, #60	; 0x3c
 80051d8:	2100      	movs	r1, #0
 80051da:	5499      	strb	r1, [r3, r2]

  return status;
 80051dc:	230f      	movs	r3, #15
 80051de:	18fb      	adds	r3, r7, r3
 80051e0:	781b      	ldrb	r3, [r3, #0]
}
 80051e2:	0018      	movs	r0, r3
 80051e4:	46bd      	mov	sp, r7
 80051e6:	b004      	add	sp, #16
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	46c0      	nop			; (mov r8, r8)
 80051ec:	ffff00ff 	.word	0xffff00ff

080051f0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80051f8:	46c0      	nop			; (mov r8, r8)
 80051fa:	46bd      	mov	sp, r7
 80051fc:	b002      	add	sp, #8
 80051fe:	bd80      	pop	{r7, pc}

08005200 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005208:	46c0      	nop			; (mov r8, r8)
 800520a:	46bd      	mov	sp, r7
 800520c:	b002      	add	sp, #8
 800520e:	bd80      	pop	{r7, pc}

08005210 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005218:	46c0      	nop			; (mov r8, r8)
 800521a:	46bd      	mov	sp, r7
 800521c:	b002      	add	sp, #8
 800521e:	bd80      	pop	{r7, pc}

08005220 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005228:	46c0      	nop			; (mov r8, r8)
 800522a:	46bd      	mov	sp, r7
 800522c:	b002      	add	sp, #8
 800522e:	bd80      	pop	{r7, pc}

08005230 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a34      	ldr	r2, [pc, #208]	; (8005314 <TIM_Base_SetConfig+0xe4>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d008      	beq.n	800525a <TIM_Base_SetConfig+0x2a>
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	2380      	movs	r3, #128	; 0x80
 800524c:	05db      	lsls	r3, r3, #23
 800524e:	429a      	cmp	r2, r3
 8005250:	d003      	beq.n	800525a <TIM_Base_SetConfig+0x2a>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a30      	ldr	r2, [pc, #192]	; (8005318 <TIM_Base_SetConfig+0xe8>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d108      	bne.n	800526c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2270      	movs	r2, #112	; 0x70
 800525e:	4393      	bics	r3, r2
 8005260:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	4313      	orrs	r3, r2
 800526a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a29      	ldr	r2, [pc, #164]	; (8005314 <TIM_Base_SetConfig+0xe4>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d018      	beq.n	80052a6 <TIM_Base_SetConfig+0x76>
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	2380      	movs	r3, #128	; 0x80
 8005278:	05db      	lsls	r3, r3, #23
 800527a:	429a      	cmp	r2, r3
 800527c:	d013      	beq.n	80052a6 <TIM_Base_SetConfig+0x76>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a25      	ldr	r2, [pc, #148]	; (8005318 <TIM_Base_SetConfig+0xe8>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d00f      	beq.n	80052a6 <TIM_Base_SetConfig+0x76>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a24      	ldr	r2, [pc, #144]	; (800531c <TIM_Base_SetConfig+0xec>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d00b      	beq.n	80052a6 <TIM_Base_SetConfig+0x76>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a23      	ldr	r2, [pc, #140]	; (8005320 <TIM_Base_SetConfig+0xf0>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d007      	beq.n	80052a6 <TIM_Base_SetConfig+0x76>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a22      	ldr	r2, [pc, #136]	; (8005324 <TIM_Base_SetConfig+0xf4>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d003      	beq.n	80052a6 <TIM_Base_SetConfig+0x76>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a21      	ldr	r2, [pc, #132]	; (8005328 <TIM_Base_SetConfig+0xf8>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d108      	bne.n	80052b8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	4a20      	ldr	r2, [pc, #128]	; (800532c <TIM_Base_SetConfig+0xfc>)
 80052aa:	4013      	ands	r3, r2
 80052ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2280      	movs	r2, #128	; 0x80
 80052bc:	4393      	bics	r3, r2
 80052be:	001a      	movs	r2, r3
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	695b      	ldr	r3, [r3, #20]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	689a      	ldr	r2, [r3, #8]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a0c      	ldr	r2, [pc, #48]	; (8005314 <TIM_Base_SetConfig+0xe4>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d00b      	beq.n	80052fe <TIM_Base_SetConfig+0xce>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a0d      	ldr	r2, [pc, #52]	; (8005320 <TIM_Base_SetConfig+0xf0>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d007      	beq.n	80052fe <TIM_Base_SetConfig+0xce>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a0c      	ldr	r2, [pc, #48]	; (8005324 <TIM_Base_SetConfig+0xf4>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d003      	beq.n	80052fe <TIM_Base_SetConfig+0xce>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a0b      	ldr	r2, [pc, #44]	; (8005328 <TIM_Base_SetConfig+0xf8>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d103      	bne.n	8005306 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	691a      	ldr	r2, [r3, #16]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2201      	movs	r2, #1
 800530a:	615a      	str	r2, [r3, #20]
}
 800530c:	46c0      	nop			; (mov r8, r8)
 800530e:	46bd      	mov	sp, r7
 8005310:	b004      	add	sp, #16
 8005312:	bd80      	pop	{r7, pc}
 8005314:	40012c00 	.word	0x40012c00
 8005318:	40000400 	.word	0x40000400
 800531c:	40002000 	.word	0x40002000
 8005320:	40014000 	.word	0x40014000
 8005324:	40014400 	.word	0x40014400
 8005328:	40014800 	.word	0x40014800
 800532c:	fffffcff 	.word	0xfffffcff

08005330 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	2201      	movs	r2, #1
 8005348:	4393      	bics	r3, r2
 800534a:	001a      	movs	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	22f0      	movs	r2, #240	; 0xf0
 800535a:	4393      	bics	r3, r2
 800535c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	011b      	lsls	r3, r3, #4
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	4313      	orrs	r3, r2
 8005366:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	220a      	movs	r2, #10
 800536c:	4393      	bics	r3, r2
 800536e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	4313      	orrs	r3, r2
 8005376:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	693a      	ldr	r2, [r7, #16]
 800537c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	621a      	str	r2, [r3, #32]
}
 8005384:	46c0      	nop			; (mov r8, r8)
 8005386:	46bd      	mov	sp, r7
 8005388:	b006      	add	sp, #24
 800538a:	bd80      	pop	{r7, pc}

0800538c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6a1b      	ldr	r3, [r3, #32]
 800539c:	2210      	movs	r2, #16
 800539e:	4393      	bics	r3, r2
 80053a0:	001a      	movs	r2, r3
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6a1b      	ldr	r3, [r3, #32]
 80053b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	4a0d      	ldr	r2, [pc, #52]	; (80053ec <TIM_TI2_ConfigInputStage+0x60>)
 80053b6:	4013      	ands	r3, r2
 80053b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	031b      	lsls	r3, r3, #12
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	22a0      	movs	r2, #160	; 0xa0
 80053c8:	4393      	bics	r3, r2
 80053ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	011b      	lsls	r3, r3, #4
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	621a      	str	r2, [r3, #32]
}
 80053e2:	46c0      	nop			; (mov r8, r8)
 80053e4:	46bd      	mov	sp, r7
 80053e6:	b006      	add	sp, #24
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	46c0      	nop			; (mov r8, r8)
 80053ec:	ffff0fff 	.word	0xffff0fff

080053f0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2270      	movs	r2, #112	; 0x70
 8005404:	4393      	bics	r3, r2
 8005406:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005408:	683a      	ldr	r2, [r7, #0]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	4313      	orrs	r3, r2
 800540e:	2207      	movs	r2, #7
 8005410:	4313      	orrs	r3, r2
 8005412:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	609a      	str	r2, [r3, #8]
}
 800541a:	46c0      	nop			; (mov r8, r8)
 800541c:	46bd      	mov	sp, r7
 800541e:	b004      	add	sp, #16
 8005420:	bd80      	pop	{r7, pc}
	...

08005424 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b086      	sub	sp, #24
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	607a      	str	r2, [r7, #4]
 8005430:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	4a09      	ldr	r2, [pc, #36]	; (8005460 <TIM_ETR_SetConfig+0x3c>)
 800543c:	4013      	ands	r3, r2
 800543e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	021a      	lsls	r2, r3, #8
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	431a      	orrs	r2, r3
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	4313      	orrs	r3, r2
 800544c:	697a      	ldr	r2, [r7, #20]
 800544e:	4313      	orrs	r3, r2
 8005450:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	609a      	str	r2, [r3, #8]
}
 8005458:	46c0      	nop			; (mov r8, r8)
 800545a:	46bd      	mov	sp, r7
 800545c:	b006      	add	sp, #24
 800545e:	bd80      	pop	{r7, pc}
 8005460:	ffff00ff 	.word	0xffff00ff

08005464 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b086      	sub	sp, #24
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	221f      	movs	r2, #31
 8005474:	4013      	ands	r3, r2
 8005476:	2201      	movs	r2, #1
 8005478:	409a      	lsls	r2, r3
 800547a:	0013      	movs	r3, r2
 800547c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	43d2      	mvns	r2, r2
 8005486:	401a      	ands	r2, r3
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6a1a      	ldr	r2, [r3, #32]
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	211f      	movs	r1, #31
 8005494:	400b      	ands	r3, r1
 8005496:	6879      	ldr	r1, [r7, #4]
 8005498:	4099      	lsls	r1, r3
 800549a:	000b      	movs	r3, r1
 800549c:	431a      	orrs	r2, r3
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	621a      	str	r2, [r3, #32]
}
 80054a2:	46c0      	nop			; (mov r8, r8)
 80054a4:	46bd      	mov	sp, r7
 80054a6:	b006      	add	sp, #24
 80054a8:	bd80      	pop	{r7, pc}
	...

080054ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	223c      	movs	r2, #60	; 0x3c
 80054ba:	5c9b      	ldrb	r3, [r3, r2]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d101      	bne.n	80054c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054c0:	2302      	movs	r3, #2
 80054c2:	e047      	b.n	8005554 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	223c      	movs	r2, #60	; 0x3c
 80054c8:	2101      	movs	r1, #1
 80054ca:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	223d      	movs	r2, #61	; 0x3d
 80054d0:	2102      	movs	r1, #2
 80054d2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2270      	movs	r2, #112	; 0x70
 80054e8:	4393      	bics	r3, r2
 80054ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a16      	ldr	r2, [pc, #88]	; (800555c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d00f      	beq.n	8005528 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	2380      	movs	r3, #128	; 0x80
 800550e:	05db      	lsls	r3, r3, #23
 8005510:	429a      	cmp	r2, r3
 8005512:	d009      	beq.n	8005528 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a11      	ldr	r2, [pc, #68]	; (8005560 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d004      	beq.n	8005528 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a10      	ldr	r2, [pc, #64]	; (8005564 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d10c      	bne.n	8005542 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	2280      	movs	r2, #128	; 0x80
 800552c:	4393      	bics	r3, r2
 800552e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	4313      	orrs	r3, r2
 8005538:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	223d      	movs	r2, #61	; 0x3d
 8005546:	2101      	movs	r1, #1
 8005548:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	223c      	movs	r2, #60	; 0x3c
 800554e:	2100      	movs	r1, #0
 8005550:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	0018      	movs	r0, r3
 8005556:	46bd      	mov	sp, r7
 8005558:	b004      	add	sp, #16
 800555a:	bd80      	pop	{r7, pc}
 800555c:	40012c00 	.word	0x40012c00
 8005560:	40000400 	.word	0x40000400
 8005564:	40014000 	.word	0x40014000

08005568 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005570:	46c0      	nop			; (mov r8, r8)
 8005572:	46bd      	mov	sp, r7
 8005574:	b002      	add	sp, #8
 8005576:	bd80      	pop	{r7, pc}

08005578 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005580:	46c0      	nop			; (mov r8, r8)
 8005582:	46bd      	mov	sp, r7
 8005584:	b002      	add	sp, #8
 8005586:	bd80      	pop	{r7, pc}

08005588 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d101      	bne.n	800559a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e044      	b.n	8005624 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d107      	bne.n	80055b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2274      	movs	r2, #116	; 0x74
 80055a6:	2100      	movs	r1, #0
 80055a8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	0018      	movs	r0, r3
 80055ae:	f7fc fa2f 	bl	8001a10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2224      	movs	r2, #36	; 0x24
 80055b6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2101      	movs	r1, #1
 80055c4:	438a      	bics	r2, r1
 80055c6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	0018      	movs	r0, r3
 80055cc:	f000 fd0c 	bl	8005fe8 <UART_SetConfig>
 80055d0:	0003      	movs	r3, r0
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d101      	bne.n	80055da <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e024      	b.n	8005624 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d003      	beq.n	80055ea <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	0018      	movs	r0, r3
 80055e6:	f000 fe3f 	bl	8006268 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	685a      	ldr	r2, [r3, #4]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	490d      	ldr	r1, [pc, #52]	; (800562c <HAL_UART_Init+0xa4>)
 80055f6:	400a      	ands	r2, r1
 80055f8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	689a      	ldr	r2, [r3, #8]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	212a      	movs	r1, #42	; 0x2a
 8005606:	438a      	bics	r2, r1
 8005608:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2101      	movs	r1, #1
 8005616:	430a      	orrs	r2, r1
 8005618:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	0018      	movs	r0, r3
 800561e:	f000 fed7 	bl	80063d0 <UART_CheckIdleState>
 8005622:	0003      	movs	r3, r0
}
 8005624:	0018      	movs	r0, r3
 8005626:	46bd      	mov	sp, r7
 8005628:	b002      	add	sp, #8
 800562a:	bd80      	pop	{r7, pc}
 800562c:	ffffb7ff 	.word	0xffffb7ff

08005630 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b08a      	sub	sp, #40	; 0x28
 8005634:	af02      	add	r7, sp, #8
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	603b      	str	r3, [r7, #0]
 800563c:	1dbb      	adds	r3, r7, #6
 800563e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005644:	2b20      	cmp	r3, #32
 8005646:	d000      	beq.n	800564a <HAL_UART_Transmit+0x1a>
 8005648:	e096      	b.n	8005778 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d003      	beq.n	8005658 <HAL_UART_Transmit+0x28>
 8005650:	1dbb      	adds	r3, r7, #6
 8005652:	881b      	ldrh	r3, [r3, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d101      	bne.n	800565c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e08e      	b.n	800577a <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	689a      	ldr	r2, [r3, #8]
 8005660:	2380      	movs	r3, #128	; 0x80
 8005662:	015b      	lsls	r3, r3, #5
 8005664:	429a      	cmp	r2, r3
 8005666:	d109      	bne.n	800567c <HAL_UART_Transmit+0x4c>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d105      	bne.n	800567c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	2201      	movs	r2, #1
 8005674:	4013      	ands	r3, r2
 8005676:	d001      	beq.n	800567c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e07e      	b.n	800577a <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2274      	movs	r2, #116	; 0x74
 8005680:	5c9b      	ldrb	r3, [r3, r2]
 8005682:	2b01      	cmp	r3, #1
 8005684:	d101      	bne.n	800568a <HAL_UART_Transmit+0x5a>
 8005686:	2302      	movs	r3, #2
 8005688:	e077      	b.n	800577a <HAL_UART_Transmit+0x14a>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2274      	movs	r2, #116	; 0x74
 800568e:	2101      	movs	r1, #1
 8005690:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2280      	movs	r2, #128	; 0x80
 8005696:	2100      	movs	r1, #0
 8005698:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2221      	movs	r2, #33	; 0x21
 800569e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056a0:	f7fc faea 	bl	8001c78 <HAL_GetTick>
 80056a4:	0003      	movs	r3, r0
 80056a6:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	1dba      	adds	r2, r7, #6
 80056ac:	2150      	movs	r1, #80	; 0x50
 80056ae:	8812      	ldrh	r2, [r2, #0]
 80056b0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	1dba      	adds	r2, r7, #6
 80056b6:	2152      	movs	r1, #82	; 0x52
 80056b8:	8812      	ldrh	r2, [r2, #0]
 80056ba:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	689a      	ldr	r2, [r3, #8]
 80056c0:	2380      	movs	r3, #128	; 0x80
 80056c2:	015b      	lsls	r3, r3, #5
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d108      	bne.n	80056da <HAL_UART_Transmit+0xaa>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d104      	bne.n	80056da <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80056d0:	2300      	movs	r3, #0
 80056d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	61bb      	str	r3, [r7, #24]
 80056d8:	e003      	b.n	80056e2 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056de:	2300      	movs	r3, #0
 80056e0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2274      	movs	r2, #116	; 0x74
 80056e6:	2100      	movs	r1, #0
 80056e8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80056ea:	e02d      	b.n	8005748 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	9300      	str	r3, [sp, #0]
 80056f4:	0013      	movs	r3, r2
 80056f6:	2200      	movs	r2, #0
 80056f8:	2180      	movs	r1, #128	; 0x80
 80056fa:	f000 feb1 	bl	8006460 <UART_WaitOnFlagUntilTimeout>
 80056fe:	1e03      	subs	r3, r0, #0
 8005700:	d001      	beq.n	8005706 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e039      	b.n	800577a <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10b      	bne.n	8005724 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	881a      	ldrh	r2, [r3, #0]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	05d2      	lsls	r2, r2, #23
 8005716:	0dd2      	lsrs	r2, r2, #23
 8005718:	b292      	uxth	r2, r2
 800571a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	3302      	adds	r3, #2
 8005720:	61bb      	str	r3, [r7, #24]
 8005722:	e008      	b.n	8005736 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	781a      	ldrb	r2, [r3, #0]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	b292      	uxth	r2, r2
 800572e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	3301      	adds	r3, #1
 8005734:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2252      	movs	r2, #82	; 0x52
 800573a:	5a9b      	ldrh	r3, [r3, r2]
 800573c:	b29b      	uxth	r3, r3
 800573e:	3b01      	subs	r3, #1
 8005740:	b299      	uxth	r1, r3
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2252      	movs	r2, #82	; 0x52
 8005746:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2252      	movs	r2, #82	; 0x52
 800574c:	5a9b      	ldrh	r3, [r3, r2]
 800574e:	b29b      	uxth	r3, r3
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1cb      	bne.n	80056ec <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005754:	697a      	ldr	r2, [r7, #20]
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	9300      	str	r3, [sp, #0]
 800575c:	0013      	movs	r3, r2
 800575e:	2200      	movs	r2, #0
 8005760:	2140      	movs	r1, #64	; 0x40
 8005762:	f000 fe7d 	bl	8006460 <UART_WaitOnFlagUntilTimeout>
 8005766:	1e03      	subs	r3, r0, #0
 8005768:	d001      	beq.n	800576e <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e005      	b.n	800577a <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2220      	movs	r2, #32
 8005772:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005774:	2300      	movs	r3, #0
 8005776:	e000      	b.n	800577a <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005778:	2302      	movs	r3, #2
  }
}
 800577a:	0018      	movs	r0, r3
 800577c:	46bd      	mov	sp, r7
 800577e:	b008      	add	sp, #32
 8005780:	bd80      	pop	{r7, pc}
	...

08005784 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b08a      	sub	sp, #40	; 0x28
 8005788:	af02      	add	r7, sp, #8
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	603b      	str	r3, [r7, #0]
 8005790:	1dbb      	adds	r3, r7, #6
 8005792:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005798:	2b20      	cmp	r3, #32
 800579a:	d000      	beq.n	800579e <HAL_UART_Receive+0x1a>
 800579c:	e0c6      	b.n	800592c <HAL_UART_Receive+0x1a8>
  {
    if ((pData == NULL) || (Size == 0U))
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d003      	beq.n	80057ac <HAL_UART_Receive+0x28>
 80057a4:	1dbb      	adds	r3, r7, #6
 80057a6:	881b      	ldrh	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d101      	bne.n	80057b0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e0be      	b.n	800592e <HAL_UART_Receive+0x1aa>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	689a      	ldr	r2, [r3, #8]
 80057b4:	2380      	movs	r3, #128	; 0x80
 80057b6:	015b      	lsls	r3, r3, #5
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d109      	bne.n	80057d0 <HAL_UART_Receive+0x4c>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d105      	bne.n	80057d0 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	2201      	movs	r2, #1
 80057c8:	4013      	ands	r3, r2
 80057ca:	d001      	beq.n	80057d0 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e0ae      	b.n	800592e <HAL_UART_Receive+0x1aa>
      }
    }

    __HAL_LOCK(huart);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2274      	movs	r2, #116	; 0x74
 80057d4:	5c9b      	ldrb	r3, [r3, r2]
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d101      	bne.n	80057de <HAL_UART_Receive+0x5a>
 80057da:	2302      	movs	r3, #2
 80057dc:	e0a7      	b.n	800592e <HAL_UART_Receive+0x1aa>
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2274      	movs	r2, #116	; 0x74
 80057e2:	2101      	movs	r1, #1
 80057e4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2280      	movs	r2, #128	; 0x80
 80057ea:	2100      	movs	r1, #0
 80057ec:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2222      	movs	r2, #34	; 0x22
 80057f2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057fa:	f7fc fa3d 	bl	8001c78 <HAL_GetTick>
 80057fe:	0003      	movs	r3, r0
 8005800:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	1dba      	adds	r2, r7, #6
 8005806:	2158      	movs	r1, #88	; 0x58
 8005808:	8812      	ldrh	r2, [r2, #0]
 800580a:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	1dba      	adds	r2, r7, #6
 8005810:	215a      	movs	r1, #90	; 0x5a
 8005812:	8812      	ldrh	r2, [r2, #0]
 8005814:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	689a      	ldr	r2, [r3, #8]
 800581a:	2380      	movs	r3, #128	; 0x80
 800581c:	015b      	lsls	r3, r3, #5
 800581e:	429a      	cmp	r2, r3
 8005820:	d10d      	bne.n	800583e <HAL_UART_Receive+0xba>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d104      	bne.n	8005834 <HAL_UART_Receive+0xb0>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	225c      	movs	r2, #92	; 0x5c
 800582e:	4942      	ldr	r1, [pc, #264]	; (8005938 <HAL_UART_Receive+0x1b4>)
 8005830:	5299      	strh	r1, [r3, r2]
 8005832:	e01a      	b.n	800586a <HAL_UART_Receive+0xe6>
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	225c      	movs	r2, #92	; 0x5c
 8005838:	21ff      	movs	r1, #255	; 0xff
 800583a:	5299      	strh	r1, [r3, r2]
 800583c:	e015      	b.n	800586a <HAL_UART_Receive+0xe6>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d10d      	bne.n	8005862 <HAL_UART_Receive+0xde>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d104      	bne.n	8005858 <HAL_UART_Receive+0xd4>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	225c      	movs	r2, #92	; 0x5c
 8005852:	21ff      	movs	r1, #255	; 0xff
 8005854:	5299      	strh	r1, [r3, r2]
 8005856:	e008      	b.n	800586a <HAL_UART_Receive+0xe6>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	225c      	movs	r2, #92	; 0x5c
 800585c:	217f      	movs	r1, #127	; 0x7f
 800585e:	5299      	strh	r1, [r3, r2]
 8005860:	e003      	b.n	800586a <HAL_UART_Receive+0xe6>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	225c      	movs	r2, #92	; 0x5c
 8005866:	2100      	movs	r1, #0
 8005868:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800586a:	2312      	movs	r3, #18
 800586c:	18fb      	adds	r3, r7, r3
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	215c      	movs	r1, #92	; 0x5c
 8005872:	5a52      	ldrh	r2, [r2, r1]
 8005874:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	689a      	ldr	r2, [r3, #8]
 800587a:	2380      	movs	r3, #128	; 0x80
 800587c:	015b      	lsls	r3, r3, #5
 800587e:	429a      	cmp	r2, r3
 8005880:	d108      	bne.n	8005894 <HAL_UART_Receive+0x110>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d104      	bne.n	8005894 <HAL_UART_Receive+0x110>
    {
      pdata8bits  = NULL;
 800588a:	2300      	movs	r3, #0
 800588c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	61bb      	str	r3, [r7, #24]
 8005892:	e003      	b.n	800589c <HAL_UART_Receive+0x118>
    }
    else
    {
      pdata8bits  = pData;
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005898:	2300      	movs	r3, #0
 800589a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2274      	movs	r2, #116	; 0x74
 80058a0:	2100      	movs	r1, #0
 80058a2:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80058a4:	e037      	b.n	8005916 <HAL_UART_Receive+0x192>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80058a6:	697a      	ldr	r2, [r7, #20]
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	9300      	str	r3, [sp, #0]
 80058ae:	0013      	movs	r3, r2
 80058b0:	2200      	movs	r2, #0
 80058b2:	2120      	movs	r1, #32
 80058b4:	f000 fdd4 	bl	8006460 <UART_WaitOnFlagUntilTimeout>
 80058b8:	1e03      	subs	r3, r0, #0
 80058ba:	d001      	beq.n	80058c0 <HAL_UART_Receive+0x13c>
      {
        return HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	e036      	b.n	800592e <HAL_UART_Receive+0x1aa>
      }
      if (pdata8bits == NULL)
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d10e      	bne.n	80058e4 <HAL_UART_Receive+0x160>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	2212      	movs	r2, #18
 80058d0:	18ba      	adds	r2, r7, r2
 80058d2:	8812      	ldrh	r2, [r2, #0]
 80058d4:	4013      	ands	r3, r2
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	3302      	adds	r3, #2
 80058e0:	61bb      	str	r3, [r7, #24]
 80058e2:	e00f      	b.n	8005904 <HAL_UART_Receive+0x180>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2212      	movs	r2, #18
 80058f0:	18ba      	adds	r2, r7, r2
 80058f2:	8812      	ldrh	r2, [r2, #0]
 80058f4:	b2d2      	uxtb	r2, r2
 80058f6:	4013      	ands	r3, r2
 80058f8:	b2da      	uxtb	r2, r3
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	3301      	adds	r3, #1
 8005902:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	225a      	movs	r2, #90	; 0x5a
 8005908:	5a9b      	ldrh	r3, [r3, r2]
 800590a:	b29b      	uxth	r3, r3
 800590c:	3b01      	subs	r3, #1
 800590e:	b299      	uxth	r1, r3
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	225a      	movs	r2, #90	; 0x5a
 8005914:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	225a      	movs	r2, #90	; 0x5a
 800591a:	5a9b      	ldrh	r3, [r3, r2]
 800591c:	b29b      	uxth	r3, r3
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1c1      	bne.n	80058a6 <HAL_UART_Receive+0x122>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2220      	movs	r2, #32
 8005926:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005928:	2300      	movs	r3, #0
 800592a:	e000      	b.n	800592e <HAL_UART_Receive+0x1aa>
  }
  else
  {
    return HAL_BUSY;
 800592c:	2302      	movs	r3, #2
  }
}
 800592e:	0018      	movs	r0, r3
 8005930:	46bd      	mov	sp, r7
 8005932:	b008      	add	sp, #32
 8005934:	bd80      	pop	{r7, pc}
 8005936:	46c0      	nop			; (mov r8, r8)
 8005938:	000001ff 	.word	0x000001ff

0800593c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b088      	sub	sp, #32
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	1dbb      	adds	r3, r7, #6
 8005948:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800594e:	2b20      	cmp	r3, #32
 8005950:	d150      	bne.n	80059f4 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d003      	beq.n	8005960 <HAL_UART_Receive_IT+0x24>
 8005958:	1dbb      	adds	r3, r7, #6
 800595a:	881b      	ldrh	r3, [r3, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d101      	bne.n	8005964 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e048      	b.n	80059f6 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	689a      	ldr	r2, [r3, #8]
 8005968:	2380      	movs	r3, #128	; 0x80
 800596a:	015b      	lsls	r3, r3, #5
 800596c:	429a      	cmp	r2, r3
 800596e:	d109      	bne.n	8005984 <HAL_UART_Receive_IT+0x48>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d105      	bne.n	8005984 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	2201      	movs	r2, #1
 800597c:	4013      	ands	r3, r2
 800597e:	d001      	beq.n	8005984 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e038      	b.n	80059f6 <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2274      	movs	r2, #116	; 0x74
 8005988:	5c9b      	ldrb	r3, [r3, r2]
 800598a:	2b01      	cmp	r3, #1
 800598c:	d101      	bne.n	8005992 <HAL_UART_Receive_IT+0x56>
 800598e:	2302      	movs	r3, #2
 8005990:	e031      	b.n	80059f6 <HAL_UART_Receive_IT+0xba>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2274      	movs	r2, #116	; 0x74
 8005996:	2101      	movs	r1, #1
 8005998:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2200      	movs	r2, #0
 800599e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	685a      	ldr	r2, [r3, #4]
 80059a6:	2380      	movs	r3, #128	; 0x80
 80059a8:	041b      	lsls	r3, r3, #16
 80059aa:	4013      	ands	r3, r2
 80059ac:	d019      	beq.n	80059e2 <HAL_UART_Receive_IT+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059ae:	f3ef 8310 	mrs	r3, PRIMASK
 80059b2:	613b      	str	r3, [r7, #16]
  return(result);
 80059b4:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80059b6:	61fb      	str	r3, [r7, #28]
 80059b8:	2301      	movs	r3, #1
 80059ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	f383 8810 	msr	PRIMASK, r3
}
 80059c2:	46c0      	nop			; (mov r8, r8)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2180      	movs	r1, #128	; 0x80
 80059d0:	04c9      	lsls	r1, r1, #19
 80059d2:	430a      	orrs	r2, r1
 80059d4:	601a      	str	r2, [r3, #0]
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	f383 8810 	msr	PRIMASK, r3
}
 80059e0:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80059e2:	1dbb      	adds	r3, r7, #6
 80059e4:	881a      	ldrh	r2, [r3, #0]
 80059e6:	68b9      	ldr	r1, [r7, #8]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	0018      	movs	r0, r3
 80059ec:	f000 fdfc 	bl	80065e8 <UART_Start_Receive_IT>
 80059f0:	0003      	movs	r3, r0
 80059f2:	e000      	b.n	80059f6 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 80059f4:	2302      	movs	r3, #2
  }
}
 80059f6:	0018      	movs	r0, r3
 80059f8:	46bd      	mov	sp, r7
 80059fa:	b008      	add	sp, #32
 80059fc:	bd80      	pop	{r7, pc}
	...

08005a00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a00:	b590      	push	{r4, r7, lr}
 8005a02:	b0ab      	sub	sp, #172	; 0xac
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	22a4      	movs	r2, #164	; 0xa4
 8005a10:	18b9      	adds	r1, r7, r2
 8005a12:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	20a0      	movs	r0, #160	; 0xa0
 8005a1c:	1839      	adds	r1, r7, r0
 8005a1e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	219c      	movs	r1, #156	; 0x9c
 8005a28:	1879      	adds	r1, r7, r1
 8005a2a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005a2c:	0011      	movs	r1, r2
 8005a2e:	18bb      	adds	r3, r7, r2
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a99      	ldr	r2, [pc, #612]	; (8005c98 <HAL_UART_IRQHandler+0x298>)
 8005a34:	4013      	ands	r3, r2
 8005a36:	2298      	movs	r2, #152	; 0x98
 8005a38:	18bc      	adds	r4, r7, r2
 8005a3a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8005a3c:	18bb      	adds	r3, r7, r2
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d114      	bne.n	8005a6e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a44:	187b      	adds	r3, r7, r1
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2220      	movs	r2, #32
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	d00f      	beq.n	8005a6e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a4e:	183b      	adds	r3, r7, r0
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2220      	movs	r2, #32
 8005a54:	4013      	ands	r3, r2
 8005a56:	d00a      	beq.n	8005a6e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d100      	bne.n	8005a62 <HAL_UART_IRQHandler+0x62>
 8005a60:	e296      	b.n	8005f90 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	0010      	movs	r0, r2
 8005a6a:	4798      	blx	r3
      }
      return;
 8005a6c:	e290      	b.n	8005f90 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005a6e:	2398      	movs	r3, #152	; 0x98
 8005a70:	18fb      	adds	r3, r7, r3
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d100      	bne.n	8005a7a <HAL_UART_IRQHandler+0x7a>
 8005a78:	e114      	b.n	8005ca4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005a7a:	239c      	movs	r3, #156	; 0x9c
 8005a7c:	18fb      	adds	r3, r7, r3
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2201      	movs	r2, #1
 8005a82:	4013      	ands	r3, r2
 8005a84:	d106      	bne.n	8005a94 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005a86:	23a0      	movs	r3, #160	; 0xa0
 8005a88:	18fb      	adds	r3, r7, r3
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a83      	ldr	r2, [pc, #524]	; (8005c9c <HAL_UART_IRQHandler+0x29c>)
 8005a8e:	4013      	ands	r3, r2
 8005a90:	d100      	bne.n	8005a94 <HAL_UART_IRQHandler+0x94>
 8005a92:	e107      	b.n	8005ca4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a94:	23a4      	movs	r3, #164	; 0xa4
 8005a96:	18fb      	adds	r3, r7, r3
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	d012      	beq.n	8005ac6 <HAL_UART_IRQHandler+0xc6>
 8005aa0:	23a0      	movs	r3, #160	; 0xa0
 8005aa2:	18fb      	adds	r3, r7, r3
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	2380      	movs	r3, #128	; 0x80
 8005aa8:	005b      	lsls	r3, r3, #1
 8005aaa:	4013      	ands	r3, r2
 8005aac:	d00b      	beq.n	8005ac6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2280      	movs	r2, #128	; 0x80
 8005aba:	589b      	ldr	r3, [r3, r2]
 8005abc:	2201      	movs	r2, #1
 8005abe:	431a      	orrs	r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2180      	movs	r1, #128	; 0x80
 8005ac4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ac6:	23a4      	movs	r3, #164	; 0xa4
 8005ac8:	18fb      	adds	r3, r7, r3
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2202      	movs	r2, #2
 8005ace:	4013      	ands	r3, r2
 8005ad0:	d011      	beq.n	8005af6 <HAL_UART_IRQHandler+0xf6>
 8005ad2:	239c      	movs	r3, #156	; 0x9c
 8005ad4:	18fb      	adds	r3, r7, r3
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	4013      	ands	r3, r2
 8005adc:	d00b      	beq.n	8005af6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2202      	movs	r2, #2
 8005ae4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2280      	movs	r2, #128	; 0x80
 8005aea:	589b      	ldr	r3, [r3, r2]
 8005aec:	2204      	movs	r2, #4
 8005aee:	431a      	orrs	r2, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2180      	movs	r1, #128	; 0x80
 8005af4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005af6:	23a4      	movs	r3, #164	; 0xa4
 8005af8:	18fb      	adds	r3, r7, r3
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2204      	movs	r2, #4
 8005afe:	4013      	ands	r3, r2
 8005b00:	d011      	beq.n	8005b26 <HAL_UART_IRQHandler+0x126>
 8005b02:	239c      	movs	r3, #156	; 0x9c
 8005b04:	18fb      	adds	r3, r7, r3
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	d00b      	beq.n	8005b26 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	2204      	movs	r2, #4
 8005b14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2280      	movs	r2, #128	; 0x80
 8005b1a:	589b      	ldr	r3, [r3, r2]
 8005b1c:	2202      	movs	r2, #2
 8005b1e:	431a      	orrs	r2, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2180      	movs	r1, #128	; 0x80
 8005b24:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005b26:	23a4      	movs	r3, #164	; 0xa4
 8005b28:	18fb      	adds	r3, r7, r3
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2208      	movs	r2, #8
 8005b2e:	4013      	ands	r3, r2
 8005b30:	d017      	beq.n	8005b62 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b32:	23a0      	movs	r3, #160	; 0xa0
 8005b34:	18fb      	adds	r3, r7, r3
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2220      	movs	r2, #32
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	d105      	bne.n	8005b4a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005b3e:	239c      	movs	r3, #156	; 0x9c
 8005b40:	18fb      	adds	r3, r7, r3
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2201      	movs	r2, #1
 8005b46:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b48:	d00b      	beq.n	8005b62 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2208      	movs	r2, #8
 8005b50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2280      	movs	r2, #128	; 0x80
 8005b56:	589b      	ldr	r3, [r3, r2]
 8005b58:	2208      	movs	r2, #8
 8005b5a:	431a      	orrs	r2, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2180      	movs	r1, #128	; 0x80
 8005b60:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005b62:	23a4      	movs	r3, #164	; 0xa4
 8005b64:	18fb      	adds	r3, r7, r3
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	2380      	movs	r3, #128	; 0x80
 8005b6a:	011b      	lsls	r3, r3, #4
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	d013      	beq.n	8005b98 <HAL_UART_IRQHandler+0x198>
 8005b70:	23a0      	movs	r3, #160	; 0xa0
 8005b72:	18fb      	adds	r3, r7, r3
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	2380      	movs	r3, #128	; 0x80
 8005b78:	04db      	lsls	r3, r3, #19
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	d00c      	beq.n	8005b98 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2280      	movs	r2, #128	; 0x80
 8005b84:	0112      	lsls	r2, r2, #4
 8005b86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2280      	movs	r2, #128	; 0x80
 8005b8c:	589b      	ldr	r3, [r3, r2]
 8005b8e:	2220      	movs	r2, #32
 8005b90:	431a      	orrs	r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2180      	movs	r1, #128	; 0x80
 8005b96:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2280      	movs	r2, #128	; 0x80
 8005b9c:	589b      	ldr	r3, [r3, r2]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d100      	bne.n	8005ba4 <HAL_UART_IRQHandler+0x1a4>
 8005ba2:	e1f7      	b.n	8005f94 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ba4:	23a4      	movs	r3, #164	; 0xa4
 8005ba6:	18fb      	adds	r3, r7, r3
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2220      	movs	r2, #32
 8005bac:	4013      	ands	r3, r2
 8005bae:	d00e      	beq.n	8005bce <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005bb0:	23a0      	movs	r3, #160	; 0xa0
 8005bb2:	18fb      	adds	r3, r7, r3
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2220      	movs	r2, #32
 8005bb8:	4013      	ands	r3, r2
 8005bba:	d008      	beq.n	8005bce <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d004      	beq.n	8005bce <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	0010      	movs	r0, r2
 8005bcc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2280      	movs	r2, #128	; 0x80
 8005bd2:	589b      	ldr	r3, [r3, r2]
 8005bd4:	2194      	movs	r1, #148	; 0x94
 8005bd6:	187a      	adds	r2, r7, r1
 8005bd8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	2240      	movs	r2, #64	; 0x40
 8005be2:	4013      	ands	r3, r2
 8005be4:	2b40      	cmp	r3, #64	; 0x40
 8005be6:	d004      	beq.n	8005bf2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005be8:	187b      	adds	r3, r7, r1
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2228      	movs	r2, #40	; 0x28
 8005bee:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005bf0:	d047      	beq.n	8005c82 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	0018      	movs	r0, r3
 8005bf6:	f000 fd93 	bl	8006720 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	2240      	movs	r2, #64	; 0x40
 8005c02:	4013      	ands	r3, r2
 8005c04:	2b40      	cmp	r3, #64	; 0x40
 8005c06:	d137      	bne.n	8005c78 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c08:	f3ef 8310 	mrs	r3, PRIMASK
 8005c0c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005c0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c10:	2090      	movs	r0, #144	; 0x90
 8005c12:	183a      	adds	r2, r7, r0
 8005c14:	6013      	str	r3, [r2, #0]
 8005c16:	2301      	movs	r3, #1
 8005c18:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c1c:	f383 8810 	msr	PRIMASK, r3
}
 8005c20:	46c0      	nop			; (mov r8, r8)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	689a      	ldr	r2, [r3, #8]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2140      	movs	r1, #64	; 0x40
 8005c2e:	438a      	bics	r2, r1
 8005c30:	609a      	str	r2, [r3, #8]
 8005c32:	183b      	adds	r3, r7, r0
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c3a:	f383 8810 	msr	PRIMASK, r3
}
 8005c3e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d012      	beq.n	8005c6e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c4c:	4a14      	ldr	r2, [pc, #80]	; (8005ca0 <HAL_UART_IRQHandler+0x2a0>)
 8005c4e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c54:	0018      	movs	r0, r3
 8005c56:	f7fc fe99 	bl	800298c <HAL_DMA_Abort_IT>
 8005c5a:	1e03      	subs	r3, r0, #0
 8005c5c:	d01a      	beq.n	8005c94 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c68:	0018      	movs	r0, r3
 8005c6a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c6c:	e012      	b.n	8005c94 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	0018      	movs	r0, r3
 8005c72:	f000 f9a5 	bl	8005fc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c76:	e00d      	b.n	8005c94 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	0018      	movs	r0, r3
 8005c7c:	f000 f9a0 	bl	8005fc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c80:	e008      	b.n	8005c94 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	0018      	movs	r0, r3
 8005c86:	f000 f99b 	bl	8005fc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2280      	movs	r2, #128	; 0x80
 8005c8e:	2100      	movs	r1, #0
 8005c90:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005c92:	e17f      	b.n	8005f94 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c94:	46c0      	nop			; (mov r8, r8)
    return;
 8005c96:	e17d      	b.n	8005f94 <HAL_UART_IRQHandler+0x594>
 8005c98:	0000080f 	.word	0x0000080f
 8005c9c:	04000120 	.word	0x04000120
 8005ca0:	080067e5 	.word	0x080067e5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d000      	beq.n	8005cae <HAL_UART_IRQHandler+0x2ae>
 8005cac:	e131      	b.n	8005f12 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005cae:	23a4      	movs	r3, #164	; 0xa4
 8005cb0:	18fb      	adds	r3, r7, r3
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2210      	movs	r2, #16
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	d100      	bne.n	8005cbc <HAL_UART_IRQHandler+0x2bc>
 8005cba:	e12a      	b.n	8005f12 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005cbc:	23a0      	movs	r3, #160	; 0xa0
 8005cbe:	18fb      	adds	r3, r7, r3
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2210      	movs	r2, #16
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	d100      	bne.n	8005cca <HAL_UART_IRQHandler+0x2ca>
 8005cc8:	e123      	b.n	8005f12 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2210      	movs	r2, #16
 8005cd0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	2240      	movs	r2, #64	; 0x40
 8005cda:	4013      	ands	r3, r2
 8005cdc:	2b40      	cmp	r3, #64	; 0x40
 8005cde:	d000      	beq.n	8005ce2 <HAL_UART_IRQHandler+0x2e2>
 8005ce0:	e09b      	b.n	8005e1a <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	685a      	ldr	r2, [r3, #4]
 8005cea:	217e      	movs	r1, #126	; 0x7e
 8005cec:	187b      	adds	r3, r7, r1
 8005cee:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005cf0:	187b      	adds	r3, r7, r1
 8005cf2:	881b      	ldrh	r3, [r3, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d100      	bne.n	8005cfa <HAL_UART_IRQHandler+0x2fa>
 8005cf8:	e14e      	b.n	8005f98 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2258      	movs	r2, #88	; 0x58
 8005cfe:	5a9b      	ldrh	r3, [r3, r2]
 8005d00:	187a      	adds	r2, r7, r1
 8005d02:	8812      	ldrh	r2, [r2, #0]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d300      	bcc.n	8005d0a <HAL_UART_IRQHandler+0x30a>
 8005d08:	e146      	b.n	8005f98 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	187a      	adds	r2, r7, r1
 8005d0e:	215a      	movs	r1, #90	; 0x5a
 8005d10:	8812      	ldrh	r2, [r2, #0]
 8005d12:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	2b20      	cmp	r3, #32
 8005d1c:	d06e      	beq.n	8005dfc <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d1e:	f3ef 8310 	mrs	r3, PRIMASK
 8005d22:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d26:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d28:	2301      	movs	r3, #1
 8005d2a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d2e:	f383 8810 	msr	PRIMASK, r3
}
 8005d32:	46c0      	nop			; (mov r8, r8)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	499a      	ldr	r1, [pc, #616]	; (8005fa8 <HAL_UART_IRQHandler+0x5a8>)
 8005d40:	400a      	ands	r2, r1
 8005d42:	601a      	str	r2, [r3, #0]
 8005d44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d46:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d4a:	f383 8810 	msr	PRIMASK, r3
}
 8005d4e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d50:	f3ef 8310 	mrs	r3, PRIMASK
 8005d54:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d58:	677b      	str	r3, [r7, #116]	; 0x74
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d60:	f383 8810 	msr	PRIMASK, r3
}
 8005d64:	46c0      	nop			; (mov r8, r8)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	689a      	ldr	r2, [r3, #8]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2101      	movs	r1, #1
 8005d72:	438a      	bics	r2, r1
 8005d74:	609a      	str	r2, [r3, #8]
 8005d76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d78:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d7c:	f383 8810 	msr	PRIMASK, r3
}
 8005d80:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d82:	f3ef 8310 	mrs	r3, PRIMASK
 8005d86:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005d88:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d8a:	673b      	str	r3, [r7, #112]	; 0x70
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d92:	f383 8810 	msr	PRIMASK, r3
}
 8005d96:	46c0      	nop			; (mov r8, r8)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	689a      	ldr	r2, [r3, #8]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2140      	movs	r1, #64	; 0x40
 8005da4:	438a      	bics	r2, r1
 8005da6:	609a      	str	r2, [r3, #8]
 8005da8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005daa:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dae:	f383 8810 	msr	PRIMASK, r3
}
 8005db2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2220      	movs	r2, #32
 8005db8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dc0:	f3ef 8310 	mrs	r3, PRIMASK
 8005dc4:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005dc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dc8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005dca:	2301      	movs	r3, #1
 8005dcc:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005dd0:	f383 8810 	msr	PRIMASK, r3
}
 8005dd4:	46c0      	nop			; (mov r8, r8)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2110      	movs	r1, #16
 8005de2:	438a      	bics	r2, r1
 8005de4:	601a      	str	r2, [r3, #0]
 8005de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005de8:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dec:	f383 8810 	msr	PRIMASK, r3
}
 8005df0:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005df6:	0018      	movs	r0, r3
 8005df8:	f7fc fd90 	bl	800291c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2258      	movs	r2, #88	; 0x58
 8005e00:	5a9a      	ldrh	r2, [r3, r2]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	215a      	movs	r1, #90	; 0x5a
 8005e06:	5a5b      	ldrh	r3, [r3, r1]
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	0011      	movs	r1, r2
 8005e12:	0018      	movs	r0, r3
 8005e14:	f000 f8dc 	bl	8005fd0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e18:	e0be      	b.n	8005f98 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2258      	movs	r2, #88	; 0x58
 8005e1e:	5a99      	ldrh	r1, [r3, r2]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	225a      	movs	r2, #90	; 0x5a
 8005e24:	5a9b      	ldrh	r3, [r3, r2]
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	208e      	movs	r0, #142	; 0x8e
 8005e2a:	183b      	adds	r3, r7, r0
 8005e2c:	1a8a      	subs	r2, r1, r2
 8005e2e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	225a      	movs	r2, #90	; 0x5a
 8005e34:	5a9b      	ldrh	r3, [r3, r2]
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d100      	bne.n	8005e3e <HAL_UART_IRQHandler+0x43e>
 8005e3c:	e0ae      	b.n	8005f9c <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8005e3e:	183b      	adds	r3, r7, r0
 8005e40:	881b      	ldrh	r3, [r3, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d100      	bne.n	8005e48 <HAL_UART_IRQHandler+0x448>
 8005e46:	e0a9      	b.n	8005f9c <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e48:	f3ef 8310 	mrs	r3, PRIMASK
 8005e4c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e50:	2488      	movs	r4, #136	; 0x88
 8005e52:	193a      	adds	r2, r7, r4
 8005e54:	6013      	str	r3, [r2, #0]
 8005e56:	2301      	movs	r3, #1
 8005e58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	f383 8810 	msr	PRIMASK, r3
}
 8005e60:	46c0      	nop			; (mov r8, r8)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	494f      	ldr	r1, [pc, #316]	; (8005fac <HAL_UART_IRQHandler+0x5ac>)
 8005e6e:	400a      	ands	r2, r1
 8005e70:	601a      	str	r2, [r3, #0]
 8005e72:	193b      	adds	r3, r7, r4
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	f383 8810 	msr	PRIMASK, r3
}
 8005e7e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e80:	f3ef 8310 	mrs	r3, PRIMASK
 8005e84:	61bb      	str	r3, [r7, #24]
  return(result);
 8005e86:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e88:	2484      	movs	r4, #132	; 0x84
 8005e8a:	193a      	adds	r2, r7, r4
 8005e8c:	6013      	str	r3, [r2, #0]
 8005e8e:	2301      	movs	r3, #1
 8005e90:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	f383 8810 	msr	PRIMASK, r3
}
 8005e98:	46c0      	nop			; (mov r8, r8)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	689a      	ldr	r2, [r3, #8]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2101      	movs	r1, #1
 8005ea6:	438a      	bics	r2, r1
 8005ea8:	609a      	str	r2, [r3, #8]
 8005eaa:	193b      	adds	r3, r7, r4
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eb0:	6a3b      	ldr	r3, [r7, #32]
 8005eb2:	f383 8810 	msr	PRIMASK, r3
}
 8005eb6:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2220      	movs	r2, #32
 8005ebc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005eca:	f3ef 8310 	mrs	r3, PRIMASK
 8005ece:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ed2:	2480      	movs	r4, #128	; 0x80
 8005ed4:	193a      	adds	r2, r7, r4
 8005ed6:	6013      	str	r3, [r2, #0]
 8005ed8:	2301      	movs	r3, #1
 8005eda:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ede:	f383 8810 	msr	PRIMASK, r3
}
 8005ee2:	46c0      	nop			; (mov r8, r8)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2110      	movs	r1, #16
 8005ef0:	438a      	bics	r2, r1
 8005ef2:	601a      	str	r2, [r3, #0]
 8005ef4:	193b      	adds	r3, r7, r4
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005efc:	f383 8810 	msr	PRIMASK, r3
}
 8005f00:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f02:	183b      	adds	r3, r7, r0
 8005f04:	881a      	ldrh	r2, [r3, #0]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	0011      	movs	r1, r2
 8005f0a:	0018      	movs	r0, r3
 8005f0c:	f000 f860 	bl	8005fd0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f10:	e044      	b.n	8005f9c <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005f12:	23a4      	movs	r3, #164	; 0xa4
 8005f14:	18fb      	adds	r3, r7, r3
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	2380      	movs	r3, #128	; 0x80
 8005f1a:	035b      	lsls	r3, r3, #13
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	d010      	beq.n	8005f42 <HAL_UART_IRQHandler+0x542>
 8005f20:	239c      	movs	r3, #156	; 0x9c
 8005f22:	18fb      	adds	r3, r7, r3
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	2380      	movs	r3, #128	; 0x80
 8005f28:	03db      	lsls	r3, r3, #15
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	d009      	beq.n	8005f42 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2280      	movs	r2, #128	; 0x80
 8005f34:	0352      	lsls	r2, r2, #13
 8005f36:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	0018      	movs	r0, r3
 8005f3c:	f000 fdfc 	bl	8006b38 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f40:	e02f      	b.n	8005fa2 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005f42:	23a4      	movs	r3, #164	; 0xa4
 8005f44:	18fb      	adds	r3, r7, r3
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2280      	movs	r2, #128	; 0x80
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	d00f      	beq.n	8005f6e <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005f4e:	23a0      	movs	r3, #160	; 0xa0
 8005f50:	18fb      	adds	r3, r7, r3
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2280      	movs	r2, #128	; 0x80
 8005f56:	4013      	ands	r3, r2
 8005f58:	d009      	beq.n	8005f6e <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d01e      	beq.n	8005fa0 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	0010      	movs	r0, r2
 8005f6a:	4798      	blx	r3
    }
    return;
 8005f6c:	e018      	b.n	8005fa0 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005f6e:	23a4      	movs	r3, #164	; 0xa4
 8005f70:	18fb      	adds	r3, r7, r3
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2240      	movs	r2, #64	; 0x40
 8005f76:	4013      	ands	r3, r2
 8005f78:	d013      	beq.n	8005fa2 <HAL_UART_IRQHandler+0x5a2>
 8005f7a:	23a0      	movs	r3, #160	; 0xa0
 8005f7c:	18fb      	adds	r3, r7, r3
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2240      	movs	r2, #64	; 0x40
 8005f82:	4013      	ands	r3, r2
 8005f84:	d00d      	beq.n	8005fa2 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	0018      	movs	r0, r3
 8005f8a:	f000 fc42 	bl	8006812 <UART_EndTransmit_IT>
    return;
 8005f8e:	e008      	b.n	8005fa2 <HAL_UART_IRQHandler+0x5a2>
      return;
 8005f90:	46c0      	nop			; (mov r8, r8)
 8005f92:	e006      	b.n	8005fa2 <HAL_UART_IRQHandler+0x5a2>
    return;
 8005f94:	46c0      	nop			; (mov r8, r8)
 8005f96:	e004      	b.n	8005fa2 <HAL_UART_IRQHandler+0x5a2>
      return;
 8005f98:	46c0      	nop			; (mov r8, r8)
 8005f9a:	e002      	b.n	8005fa2 <HAL_UART_IRQHandler+0x5a2>
      return;
 8005f9c:	46c0      	nop			; (mov r8, r8)
 8005f9e:	e000      	b.n	8005fa2 <HAL_UART_IRQHandler+0x5a2>
    return;
 8005fa0:	46c0      	nop			; (mov r8, r8)
  }

}
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	b02b      	add	sp, #172	; 0xac
 8005fa6:	bd90      	pop	{r4, r7, pc}
 8005fa8:	fffffeff 	.word	0xfffffeff
 8005fac:	fffffedf 	.word	0xfffffedf

08005fb0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005fb8:	46c0      	nop			; (mov r8, r8)
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	b002      	add	sp, #8
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005fc8:	46c0      	nop			; (mov r8, r8)
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	b002      	add	sp, #8
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	000a      	movs	r2, r1
 8005fda:	1cbb      	adds	r3, r7, #2
 8005fdc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005fde:	46c0      	nop			; (mov r8, r8)
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	b002      	add	sp, #8
 8005fe4:	bd80      	pop	{r7, pc}
	...

08005fe8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b088      	sub	sp, #32
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ff0:	231e      	movs	r3, #30
 8005ff2:	18fb      	adds	r3, r7, r3
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	689a      	ldr	r2, [r3, #8]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	431a      	orrs	r2, r3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	695b      	ldr	r3, [r3, #20]
 8006006:	431a      	orrs	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	69db      	ldr	r3, [r3, #28]
 800600c:	4313      	orrs	r3, r2
 800600e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a8d      	ldr	r2, [pc, #564]	; (800624c <UART_SetConfig+0x264>)
 8006018:	4013      	ands	r3, r2
 800601a:	0019      	movs	r1, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	697a      	ldr	r2, [r7, #20]
 8006022:	430a      	orrs	r2, r1
 8006024:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	4a88      	ldr	r2, [pc, #544]	; (8006250 <UART_SetConfig+0x268>)
 800602e:	4013      	ands	r3, r2
 8006030:	0019      	movs	r1, r3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	68da      	ldr	r2, [r3, #12]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	430a      	orrs	r2, r1
 800603c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6a1b      	ldr	r3, [r3, #32]
 8006048:	697a      	ldr	r2, [r7, #20]
 800604a:	4313      	orrs	r3, r2
 800604c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	4a7f      	ldr	r2, [pc, #508]	; (8006254 <UART_SetConfig+0x26c>)
 8006056:	4013      	ands	r3, r2
 8006058:	0019      	movs	r1, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	697a      	ldr	r2, [r7, #20]
 8006060:	430a      	orrs	r2, r1
 8006062:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a7b      	ldr	r2, [pc, #492]	; (8006258 <UART_SetConfig+0x270>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d127      	bne.n	80060be <UART_SetConfig+0xd6>
 800606e:	4b7b      	ldr	r3, [pc, #492]	; (800625c <UART_SetConfig+0x274>)
 8006070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006072:	2203      	movs	r2, #3
 8006074:	4013      	ands	r3, r2
 8006076:	2b03      	cmp	r3, #3
 8006078:	d00d      	beq.n	8006096 <UART_SetConfig+0xae>
 800607a:	d81b      	bhi.n	80060b4 <UART_SetConfig+0xcc>
 800607c:	2b02      	cmp	r3, #2
 800607e:	d014      	beq.n	80060aa <UART_SetConfig+0xc2>
 8006080:	d818      	bhi.n	80060b4 <UART_SetConfig+0xcc>
 8006082:	2b00      	cmp	r3, #0
 8006084:	d002      	beq.n	800608c <UART_SetConfig+0xa4>
 8006086:	2b01      	cmp	r3, #1
 8006088:	d00a      	beq.n	80060a0 <UART_SetConfig+0xb8>
 800608a:	e013      	b.n	80060b4 <UART_SetConfig+0xcc>
 800608c:	231f      	movs	r3, #31
 800608e:	18fb      	adds	r3, r7, r3
 8006090:	2200      	movs	r2, #0
 8006092:	701a      	strb	r2, [r3, #0]
 8006094:	e021      	b.n	80060da <UART_SetConfig+0xf2>
 8006096:	231f      	movs	r3, #31
 8006098:	18fb      	adds	r3, r7, r3
 800609a:	2202      	movs	r2, #2
 800609c:	701a      	strb	r2, [r3, #0]
 800609e:	e01c      	b.n	80060da <UART_SetConfig+0xf2>
 80060a0:	231f      	movs	r3, #31
 80060a2:	18fb      	adds	r3, r7, r3
 80060a4:	2204      	movs	r2, #4
 80060a6:	701a      	strb	r2, [r3, #0]
 80060a8:	e017      	b.n	80060da <UART_SetConfig+0xf2>
 80060aa:	231f      	movs	r3, #31
 80060ac:	18fb      	adds	r3, r7, r3
 80060ae:	2208      	movs	r2, #8
 80060b0:	701a      	strb	r2, [r3, #0]
 80060b2:	e012      	b.n	80060da <UART_SetConfig+0xf2>
 80060b4:	231f      	movs	r3, #31
 80060b6:	18fb      	adds	r3, r7, r3
 80060b8:	2210      	movs	r2, #16
 80060ba:	701a      	strb	r2, [r3, #0]
 80060bc:	e00d      	b.n	80060da <UART_SetConfig+0xf2>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a67      	ldr	r2, [pc, #412]	; (8006260 <UART_SetConfig+0x278>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d104      	bne.n	80060d2 <UART_SetConfig+0xea>
 80060c8:	231f      	movs	r3, #31
 80060ca:	18fb      	adds	r3, r7, r3
 80060cc:	2200      	movs	r2, #0
 80060ce:	701a      	strb	r2, [r3, #0]
 80060d0:	e003      	b.n	80060da <UART_SetConfig+0xf2>
 80060d2:	231f      	movs	r3, #31
 80060d4:	18fb      	adds	r3, r7, r3
 80060d6:	2210      	movs	r2, #16
 80060d8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	69da      	ldr	r2, [r3, #28]
 80060de:	2380      	movs	r3, #128	; 0x80
 80060e0:	021b      	lsls	r3, r3, #8
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d15d      	bne.n	80061a2 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 80060e6:	231f      	movs	r3, #31
 80060e8:	18fb      	adds	r3, r7, r3
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	2b08      	cmp	r3, #8
 80060ee:	d015      	beq.n	800611c <UART_SetConfig+0x134>
 80060f0:	dc18      	bgt.n	8006124 <UART_SetConfig+0x13c>
 80060f2:	2b04      	cmp	r3, #4
 80060f4:	d00d      	beq.n	8006112 <UART_SetConfig+0x12a>
 80060f6:	dc15      	bgt.n	8006124 <UART_SetConfig+0x13c>
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d002      	beq.n	8006102 <UART_SetConfig+0x11a>
 80060fc:	2b02      	cmp	r3, #2
 80060fe:	d005      	beq.n	800610c <UART_SetConfig+0x124>
 8006100:	e010      	b.n	8006124 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006102:	f7fe f8c1 	bl	8004288 <HAL_RCC_GetPCLK1Freq>
 8006106:	0003      	movs	r3, r0
 8006108:	61bb      	str	r3, [r7, #24]
        break;
 800610a:	e012      	b.n	8006132 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800610c:	4b55      	ldr	r3, [pc, #340]	; (8006264 <UART_SetConfig+0x27c>)
 800610e:	61bb      	str	r3, [r7, #24]
        break;
 8006110:	e00f      	b.n	8006132 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006112:	f7fe f84b 	bl	80041ac <HAL_RCC_GetSysClockFreq>
 8006116:	0003      	movs	r3, r0
 8006118:	61bb      	str	r3, [r7, #24]
        break;
 800611a:	e00a      	b.n	8006132 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800611c:	2380      	movs	r3, #128	; 0x80
 800611e:	021b      	lsls	r3, r3, #8
 8006120:	61bb      	str	r3, [r7, #24]
        break;
 8006122:	e006      	b.n	8006132 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8006124:	2300      	movs	r3, #0
 8006126:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006128:	231e      	movs	r3, #30
 800612a:	18fb      	adds	r3, r7, r3
 800612c:	2201      	movs	r2, #1
 800612e:	701a      	strb	r2, [r3, #0]
        break;
 8006130:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d100      	bne.n	800613a <UART_SetConfig+0x152>
 8006138:	e07b      	b.n	8006232 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	005a      	lsls	r2, r3, #1
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	085b      	lsrs	r3, r3, #1
 8006144:	18d2      	adds	r2, r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	0019      	movs	r1, r3
 800614c:	0010      	movs	r0, r2
 800614e:	f7f9 ffdb 	bl	8000108 <__udivsi3>
 8006152:	0003      	movs	r3, r0
 8006154:	b29b      	uxth	r3, r3
 8006156:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	2b0f      	cmp	r3, #15
 800615c:	d91c      	bls.n	8006198 <UART_SetConfig+0x1b0>
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	2380      	movs	r3, #128	; 0x80
 8006162:	025b      	lsls	r3, r3, #9
 8006164:	429a      	cmp	r2, r3
 8006166:	d217      	bcs.n	8006198 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	b29a      	uxth	r2, r3
 800616c:	200e      	movs	r0, #14
 800616e:	183b      	adds	r3, r7, r0
 8006170:	210f      	movs	r1, #15
 8006172:	438a      	bics	r2, r1
 8006174:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	085b      	lsrs	r3, r3, #1
 800617a:	b29b      	uxth	r3, r3
 800617c:	2207      	movs	r2, #7
 800617e:	4013      	ands	r3, r2
 8006180:	b299      	uxth	r1, r3
 8006182:	183b      	adds	r3, r7, r0
 8006184:	183a      	adds	r2, r7, r0
 8006186:	8812      	ldrh	r2, [r2, #0]
 8006188:	430a      	orrs	r2, r1
 800618a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	183a      	adds	r2, r7, r0
 8006192:	8812      	ldrh	r2, [r2, #0]
 8006194:	60da      	str	r2, [r3, #12]
 8006196:	e04c      	b.n	8006232 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8006198:	231e      	movs	r3, #30
 800619a:	18fb      	adds	r3, r7, r3
 800619c:	2201      	movs	r2, #1
 800619e:	701a      	strb	r2, [r3, #0]
 80061a0:	e047      	b.n	8006232 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061a2:	231f      	movs	r3, #31
 80061a4:	18fb      	adds	r3, r7, r3
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	2b08      	cmp	r3, #8
 80061aa:	d015      	beq.n	80061d8 <UART_SetConfig+0x1f0>
 80061ac:	dc18      	bgt.n	80061e0 <UART_SetConfig+0x1f8>
 80061ae:	2b04      	cmp	r3, #4
 80061b0:	d00d      	beq.n	80061ce <UART_SetConfig+0x1e6>
 80061b2:	dc15      	bgt.n	80061e0 <UART_SetConfig+0x1f8>
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d002      	beq.n	80061be <UART_SetConfig+0x1d6>
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d005      	beq.n	80061c8 <UART_SetConfig+0x1e0>
 80061bc:	e010      	b.n	80061e0 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061be:	f7fe f863 	bl	8004288 <HAL_RCC_GetPCLK1Freq>
 80061c2:	0003      	movs	r3, r0
 80061c4:	61bb      	str	r3, [r7, #24]
        break;
 80061c6:	e012      	b.n	80061ee <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061c8:	4b26      	ldr	r3, [pc, #152]	; (8006264 <UART_SetConfig+0x27c>)
 80061ca:	61bb      	str	r3, [r7, #24]
        break;
 80061cc:	e00f      	b.n	80061ee <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061ce:	f7fd ffed 	bl	80041ac <HAL_RCC_GetSysClockFreq>
 80061d2:	0003      	movs	r3, r0
 80061d4:	61bb      	str	r3, [r7, #24]
        break;
 80061d6:	e00a      	b.n	80061ee <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061d8:	2380      	movs	r3, #128	; 0x80
 80061da:	021b      	lsls	r3, r3, #8
 80061dc:	61bb      	str	r3, [r7, #24]
        break;
 80061de:	e006      	b.n	80061ee <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 80061e0:	2300      	movs	r3, #0
 80061e2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80061e4:	231e      	movs	r3, #30
 80061e6:	18fb      	adds	r3, r7, r3
 80061e8:	2201      	movs	r2, #1
 80061ea:	701a      	strb	r2, [r3, #0]
        break;
 80061ec:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d01e      	beq.n	8006232 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	085a      	lsrs	r2, r3, #1
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	18d2      	adds	r2, r2, r3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	0019      	movs	r1, r3
 8006204:	0010      	movs	r0, r2
 8006206:	f7f9 ff7f 	bl	8000108 <__udivsi3>
 800620a:	0003      	movs	r3, r0
 800620c:	b29b      	uxth	r3, r3
 800620e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	2b0f      	cmp	r3, #15
 8006214:	d909      	bls.n	800622a <UART_SetConfig+0x242>
 8006216:	693a      	ldr	r2, [r7, #16]
 8006218:	2380      	movs	r3, #128	; 0x80
 800621a:	025b      	lsls	r3, r3, #9
 800621c:	429a      	cmp	r2, r3
 800621e:	d204      	bcs.n	800622a <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	693a      	ldr	r2, [r7, #16]
 8006226:	60da      	str	r2, [r3, #12]
 8006228:	e003      	b.n	8006232 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 800622a:	231e      	movs	r3, #30
 800622c:	18fb      	adds	r3, r7, r3
 800622e:	2201      	movs	r2, #1
 8006230:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800623e:	231e      	movs	r3, #30
 8006240:	18fb      	adds	r3, r7, r3
 8006242:	781b      	ldrb	r3, [r3, #0]
}
 8006244:	0018      	movs	r0, r3
 8006246:	46bd      	mov	sp, r7
 8006248:	b008      	add	sp, #32
 800624a:	bd80      	pop	{r7, pc}
 800624c:	ffff69f3 	.word	0xffff69f3
 8006250:	ffffcfff 	.word	0xffffcfff
 8006254:	fffff4ff 	.word	0xfffff4ff
 8006258:	40013800 	.word	0x40013800
 800625c:	40021000 	.word	0x40021000
 8006260:	40004400 	.word	0x40004400
 8006264:	007a1200 	.word	0x007a1200

08006268 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b082      	sub	sp, #8
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006274:	2201      	movs	r2, #1
 8006276:	4013      	ands	r3, r2
 8006278:	d00b      	beq.n	8006292 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	4a4a      	ldr	r2, [pc, #296]	; (80063ac <UART_AdvFeatureConfig+0x144>)
 8006282:	4013      	ands	r3, r2
 8006284:	0019      	movs	r1, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	430a      	orrs	r2, r1
 8006290:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006296:	2202      	movs	r2, #2
 8006298:	4013      	ands	r3, r2
 800629a:	d00b      	beq.n	80062b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	4a43      	ldr	r2, [pc, #268]	; (80063b0 <UART_AdvFeatureConfig+0x148>)
 80062a4:	4013      	ands	r3, r2
 80062a6:	0019      	movs	r1, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	430a      	orrs	r2, r1
 80062b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b8:	2204      	movs	r2, #4
 80062ba:	4013      	ands	r3, r2
 80062bc:	d00b      	beq.n	80062d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	4a3b      	ldr	r2, [pc, #236]	; (80063b4 <UART_AdvFeatureConfig+0x14c>)
 80062c6:	4013      	ands	r3, r2
 80062c8:	0019      	movs	r1, r3
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	430a      	orrs	r2, r1
 80062d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062da:	2208      	movs	r2, #8
 80062dc:	4013      	ands	r3, r2
 80062de:	d00b      	beq.n	80062f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	4a34      	ldr	r2, [pc, #208]	; (80063b8 <UART_AdvFeatureConfig+0x150>)
 80062e8:	4013      	ands	r3, r2
 80062ea:	0019      	movs	r1, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	430a      	orrs	r2, r1
 80062f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fc:	2210      	movs	r2, #16
 80062fe:	4013      	ands	r3, r2
 8006300:	d00b      	beq.n	800631a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	4a2c      	ldr	r2, [pc, #176]	; (80063bc <UART_AdvFeatureConfig+0x154>)
 800630a:	4013      	ands	r3, r2
 800630c:	0019      	movs	r1, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	430a      	orrs	r2, r1
 8006318:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631e:	2220      	movs	r2, #32
 8006320:	4013      	ands	r3, r2
 8006322:	d00b      	beq.n	800633c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	4a25      	ldr	r2, [pc, #148]	; (80063c0 <UART_AdvFeatureConfig+0x158>)
 800632c:	4013      	ands	r3, r2
 800632e:	0019      	movs	r1, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	430a      	orrs	r2, r1
 800633a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006340:	2240      	movs	r2, #64	; 0x40
 8006342:	4013      	ands	r3, r2
 8006344:	d01d      	beq.n	8006382 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	4a1d      	ldr	r2, [pc, #116]	; (80063c4 <UART_AdvFeatureConfig+0x15c>)
 800634e:	4013      	ands	r3, r2
 8006350:	0019      	movs	r1, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	430a      	orrs	r2, r1
 800635c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006362:	2380      	movs	r3, #128	; 0x80
 8006364:	035b      	lsls	r3, r3, #13
 8006366:	429a      	cmp	r2, r3
 8006368:	d10b      	bne.n	8006382 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	4a15      	ldr	r2, [pc, #84]	; (80063c8 <UART_AdvFeatureConfig+0x160>)
 8006372:	4013      	ands	r3, r2
 8006374:	0019      	movs	r1, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	430a      	orrs	r2, r1
 8006380:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006386:	2280      	movs	r2, #128	; 0x80
 8006388:	4013      	ands	r3, r2
 800638a:	d00b      	beq.n	80063a4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	4a0e      	ldr	r2, [pc, #56]	; (80063cc <UART_AdvFeatureConfig+0x164>)
 8006394:	4013      	ands	r3, r2
 8006396:	0019      	movs	r1, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	430a      	orrs	r2, r1
 80063a2:	605a      	str	r2, [r3, #4]
  }
}
 80063a4:	46c0      	nop			; (mov r8, r8)
 80063a6:	46bd      	mov	sp, r7
 80063a8:	b002      	add	sp, #8
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	fffdffff 	.word	0xfffdffff
 80063b0:	fffeffff 	.word	0xfffeffff
 80063b4:	fffbffff 	.word	0xfffbffff
 80063b8:	ffff7fff 	.word	0xffff7fff
 80063bc:	ffffefff 	.word	0xffffefff
 80063c0:	ffffdfff 	.word	0xffffdfff
 80063c4:	ffefffff 	.word	0xffefffff
 80063c8:	ff9fffff 	.word	0xff9fffff
 80063cc:	fff7ffff 	.word	0xfff7ffff

080063d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b086      	sub	sp, #24
 80063d4:	af02      	add	r7, sp, #8
 80063d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2280      	movs	r2, #128	; 0x80
 80063dc:	2100      	movs	r1, #0
 80063de:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063e0:	f7fb fc4a 	bl	8001c78 <HAL_GetTick>
 80063e4:	0003      	movs	r3, r0
 80063e6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2208      	movs	r2, #8
 80063f0:	4013      	ands	r3, r2
 80063f2:	2b08      	cmp	r3, #8
 80063f4:	d10c      	bne.n	8006410 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2280      	movs	r2, #128	; 0x80
 80063fa:	0391      	lsls	r1, r2, #14
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	4a17      	ldr	r2, [pc, #92]	; (800645c <UART_CheckIdleState+0x8c>)
 8006400:	9200      	str	r2, [sp, #0]
 8006402:	2200      	movs	r2, #0
 8006404:	f000 f82c 	bl	8006460 <UART_WaitOnFlagUntilTimeout>
 8006408:	1e03      	subs	r3, r0, #0
 800640a:	d001      	beq.n	8006410 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800640c:	2303      	movs	r3, #3
 800640e:	e021      	b.n	8006454 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2204      	movs	r2, #4
 8006418:	4013      	ands	r3, r2
 800641a:	2b04      	cmp	r3, #4
 800641c:	d10c      	bne.n	8006438 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2280      	movs	r2, #128	; 0x80
 8006422:	03d1      	lsls	r1, r2, #15
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	4a0d      	ldr	r2, [pc, #52]	; (800645c <UART_CheckIdleState+0x8c>)
 8006428:	9200      	str	r2, [sp, #0]
 800642a:	2200      	movs	r2, #0
 800642c:	f000 f818 	bl	8006460 <UART_WaitOnFlagUntilTimeout>
 8006430:	1e03      	subs	r3, r0, #0
 8006432:	d001      	beq.n	8006438 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006434:	2303      	movs	r3, #3
 8006436:	e00d      	b.n	8006454 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2220      	movs	r2, #32
 800643c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2220      	movs	r2, #32
 8006442:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2274      	movs	r2, #116	; 0x74
 800644e:	2100      	movs	r1, #0
 8006450:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	0018      	movs	r0, r3
 8006456:	46bd      	mov	sp, r7
 8006458:	b004      	add	sp, #16
 800645a:	bd80      	pop	{r7, pc}
 800645c:	01ffffff 	.word	0x01ffffff

08006460 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b094      	sub	sp, #80	; 0x50
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	603b      	str	r3, [r7, #0]
 800646c:	1dfb      	adds	r3, r7, #7
 800646e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006470:	e0a3      	b.n	80065ba <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006472:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006474:	3301      	adds	r3, #1
 8006476:	d100      	bne.n	800647a <UART_WaitOnFlagUntilTimeout+0x1a>
 8006478:	e09f      	b.n	80065ba <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800647a:	f7fb fbfd 	bl	8001c78 <HAL_GetTick>
 800647e:	0002      	movs	r2, r0
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006486:	429a      	cmp	r2, r3
 8006488:	d302      	bcc.n	8006490 <UART_WaitOnFlagUntilTimeout+0x30>
 800648a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800648c:	2b00      	cmp	r3, #0
 800648e:	d13d      	bne.n	800650c <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006490:	f3ef 8310 	mrs	r3, PRIMASK
 8006494:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006496:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006498:	647b      	str	r3, [r7, #68]	; 0x44
 800649a:	2301      	movs	r3, #1
 800649c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800649e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a0:	f383 8810 	msr	PRIMASK, r3
}
 80064a4:	46c0      	nop			; (mov r8, r8)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	494c      	ldr	r1, [pc, #304]	; (80065e4 <UART_WaitOnFlagUntilTimeout+0x184>)
 80064b2:	400a      	ands	r2, r1
 80064b4:	601a      	str	r2, [r3, #0]
 80064b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064b8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064bc:	f383 8810 	msr	PRIMASK, r3
}
 80064c0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064c2:	f3ef 8310 	mrs	r3, PRIMASK
 80064c6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80064c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ca:	643b      	str	r3, [r7, #64]	; 0x40
 80064cc:	2301      	movs	r3, #1
 80064ce:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d2:	f383 8810 	msr	PRIMASK, r3
}
 80064d6:	46c0      	nop			; (mov r8, r8)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	689a      	ldr	r2, [r3, #8]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2101      	movs	r1, #1
 80064e4:	438a      	bics	r2, r1
 80064e6:	609a      	str	r2, [r3, #8]
 80064e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064ee:	f383 8810 	msr	PRIMASK, r3
}
 80064f2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2220      	movs	r2, #32
 80064f8:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2220      	movs	r2, #32
 80064fe:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2274      	movs	r2, #116	; 0x74
 8006504:	2100      	movs	r1, #0
 8006506:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	e067      	b.n	80065dc <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2204      	movs	r2, #4
 8006514:	4013      	ands	r3, r2
 8006516:	d050      	beq.n	80065ba <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	69da      	ldr	r2, [r3, #28]
 800651e:	2380      	movs	r3, #128	; 0x80
 8006520:	011b      	lsls	r3, r3, #4
 8006522:	401a      	ands	r2, r3
 8006524:	2380      	movs	r3, #128	; 0x80
 8006526:	011b      	lsls	r3, r3, #4
 8006528:	429a      	cmp	r2, r3
 800652a:	d146      	bne.n	80065ba <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2280      	movs	r2, #128	; 0x80
 8006532:	0112      	lsls	r2, r2, #4
 8006534:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006536:	f3ef 8310 	mrs	r3, PRIMASK
 800653a:	613b      	str	r3, [r7, #16]
  return(result);
 800653c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800653e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006540:	2301      	movs	r3, #1
 8006542:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	f383 8810 	msr	PRIMASK, r3
}
 800654a:	46c0      	nop			; (mov r8, r8)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4923      	ldr	r1, [pc, #140]	; (80065e4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006558:	400a      	ands	r2, r1
 800655a:	601a      	str	r2, [r3, #0]
 800655c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800655e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	f383 8810 	msr	PRIMASK, r3
}
 8006566:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006568:	f3ef 8310 	mrs	r3, PRIMASK
 800656c:	61fb      	str	r3, [r7, #28]
  return(result);
 800656e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006570:	64bb      	str	r3, [r7, #72]	; 0x48
 8006572:	2301      	movs	r3, #1
 8006574:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006576:	6a3b      	ldr	r3, [r7, #32]
 8006578:	f383 8810 	msr	PRIMASK, r3
}
 800657c:	46c0      	nop			; (mov r8, r8)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	689a      	ldr	r2, [r3, #8]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2101      	movs	r1, #1
 800658a:	438a      	bics	r2, r1
 800658c:	609a      	str	r2, [r3, #8]
 800658e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006590:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006594:	f383 8810 	msr	PRIMASK, r3
}
 8006598:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2220      	movs	r2, #32
 800659e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2220      	movs	r2, #32
 80065a4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2280      	movs	r2, #128	; 0x80
 80065aa:	2120      	movs	r1, #32
 80065ac:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2274      	movs	r2, #116	; 0x74
 80065b2:	2100      	movs	r1, #0
 80065b4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80065b6:	2303      	movs	r3, #3
 80065b8:	e010      	b.n	80065dc <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	69db      	ldr	r3, [r3, #28]
 80065c0:	68ba      	ldr	r2, [r7, #8]
 80065c2:	4013      	ands	r3, r2
 80065c4:	68ba      	ldr	r2, [r7, #8]
 80065c6:	1ad3      	subs	r3, r2, r3
 80065c8:	425a      	negs	r2, r3
 80065ca:	4153      	adcs	r3, r2
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	001a      	movs	r2, r3
 80065d0:	1dfb      	adds	r3, r7, #7
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d100      	bne.n	80065da <UART_WaitOnFlagUntilTimeout+0x17a>
 80065d8:	e74b      	b.n	8006472 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	0018      	movs	r0, r3
 80065de:	46bd      	mov	sp, r7
 80065e0:	b014      	add	sp, #80	; 0x50
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	fffffe5f 	.word	0xfffffe5f

080065e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b08c      	sub	sp, #48	; 0x30
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	1dbb      	adds	r3, r7, #6
 80065f4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	68ba      	ldr	r2, [r7, #8]
 80065fa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	1dba      	adds	r2, r7, #6
 8006600:	2158      	movs	r1, #88	; 0x58
 8006602:	8812      	ldrh	r2, [r2, #0]
 8006604:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	1dba      	adds	r2, r7, #6
 800660a:	215a      	movs	r1, #90	; 0x5a
 800660c:	8812      	ldrh	r2, [r2, #0]
 800660e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	689a      	ldr	r2, [r3, #8]
 800661a:	2380      	movs	r3, #128	; 0x80
 800661c:	015b      	lsls	r3, r3, #5
 800661e:	429a      	cmp	r2, r3
 8006620:	d10d      	bne.n	800663e <UART_Start_Receive_IT+0x56>
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d104      	bne.n	8006634 <UART_Start_Receive_IT+0x4c>
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	225c      	movs	r2, #92	; 0x5c
 800662e:	4939      	ldr	r1, [pc, #228]	; (8006714 <UART_Start_Receive_IT+0x12c>)
 8006630:	5299      	strh	r1, [r3, r2]
 8006632:	e01a      	b.n	800666a <UART_Start_Receive_IT+0x82>
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	225c      	movs	r2, #92	; 0x5c
 8006638:	21ff      	movs	r1, #255	; 0xff
 800663a:	5299      	strh	r1, [r3, r2]
 800663c:	e015      	b.n	800666a <UART_Start_Receive_IT+0x82>
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d10d      	bne.n	8006662 <UART_Start_Receive_IT+0x7a>
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d104      	bne.n	8006658 <UART_Start_Receive_IT+0x70>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	225c      	movs	r2, #92	; 0x5c
 8006652:	21ff      	movs	r1, #255	; 0xff
 8006654:	5299      	strh	r1, [r3, r2]
 8006656:	e008      	b.n	800666a <UART_Start_Receive_IT+0x82>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	225c      	movs	r2, #92	; 0x5c
 800665c:	217f      	movs	r1, #127	; 0x7f
 800665e:	5299      	strh	r1, [r3, r2]
 8006660:	e003      	b.n	800666a <UART_Start_Receive_IT+0x82>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	225c      	movs	r2, #92	; 0x5c
 8006666:	2100      	movs	r1, #0
 8006668:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2280      	movs	r2, #128	; 0x80
 800666e:	2100      	movs	r1, #0
 8006670:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2222      	movs	r2, #34	; 0x22
 8006676:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006678:	f3ef 8310 	mrs	r3, PRIMASK
 800667c:	61fb      	str	r3, [r7, #28]
  return(result);
 800667e:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006680:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006682:	2301      	movs	r3, #1
 8006684:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006686:	6a3b      	ldr	r3, [r7, #32]
 8006688:	f383 8810 	msr	PRIMASK, r3
}
 800668c:	46c0      	nop			; (mov r8, r8)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	689a      	ldr	r2, [r3, #8]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2101      	movs	r1, #1
 800669a:	430a      	orrs	r2, r1
 800669c:	609a      	str	r2, [r3, #8]
 800669e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a4:	f383 8810 	msr	PRIMASK, r3
}
 80066a8:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	689a      	ldr	r2, [r3, #8]
 80066ae:	2380      	movs	r3, #128	; 0x80
 80066b0:	015b      	lsls	r3, r3, #5
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d107      	bne.n	80066c6 <UART_Start_Receive_IT+0xde>
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d103      	bne.n	80066c6 <UART_Start_Receive_IT+0xde>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	4a15      	ldr	r2, [pc, #84]	; (8006718 <UART_Start_Receive_IT+0x130>)
 80066c2:	665a      	str	r2, [r3, #100]	; 0x64
 80066c4:	e002      	b.n	80066cc <UART_Start_Receive_IT+0xe4>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	4a14      	ldr	r2, [pc, #80]	; (800671c <UART_Start_Receive_IT+0x134>)
 80066ca:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2274      	movs	r2, #116	; 0x74
 80066d0:	2100      	movs	r1, #0
 80066d2:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066d4:	f3ef 8310 	mrs	r3, PRIMASK
 80066d8:	613b      	str	r3, [r7, #16]
  return(result);
 80066da:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80066dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80066de:	2301      	movs	r3, #1
 80066e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	f383 8810 	msr	PRIMASK, r3
}
 80066e8:	46c0      	nop			; (mov r8, r8)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2190      	movs	r1, #144	; 0x90
 80066f6:	0049      	lsls	r1, r1, #1
 80066f8:	430a      	orrs	r2, r1
 80066fa:	601a      	str	r2, [r3, #0]
 80066fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	f383 8810 	msr	PRIMASK, r3
}
 8006706:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	0018      	movs	r0, r3
 800670c:	46bd      	mov	sp, r7
 800670e:	b00c      	add	sp, #48	; 0x30
 8006710:	bd80      	pop	{r7, pc}
 8006712:	46c0      	nop			; (mov r8, r8)
 8006714:	000001ff 	.word	0x000001ff
 8006718:	080069d1 	.word	0x080069d1
 800671c:	08006869 	.word	0x08006869

08006720 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b08e      	sub	sp, #56	; 0x38
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006728:	f3ef 8310 	mrs	r3, PRIMASK
 800672c:	617b      	str	r3, [r7, #20]
  return(result);
 800672e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006730:	637b      	str	r3, [r7, #52]	; 0x34
 8006732:	2301      	movs	r3, #1
 8006734:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	f383 8810 	msr	PRIMASK, r3
}
 800673c:	46c0      	nop			; (mov r8, r8)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4925      	ldr	r1, [pc, #148]	; (80067e0 <UART_EndRxTransfer+0xc0>)
 800674a:	400a      	ands	r2, r1
 800674c:	601a      	str	r2, [r3, #0]
 800674e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006750:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	f383 8810 	msr	PRIMASK, r3
}
 8006758:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800675a:	f3ef 8310 	mrs	r3, PRIMASK
 800675e:	623b      	str	r3, [r7, #32]
  return(result);
 8006760:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006762:	633b      	str	r3, [r7, #48]	; 0x30
 8006764:	2301      	movs	r3, #1
 8006766:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676a:	f383 8810 	msr	PRIMASK, r3
}
 800676e:	46c0      	nop			; (mov r8, r8)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	689a      	ldr	r2, [r3, #8]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2101      	movs	r1, #1
 800677c:	438a      	bics	r2, r1
 800677e:	609a      	str	r2, [r3, #8]
 8006780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006782:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006786:	f383 8810 	msr	PRIMASK, r3
}
 800678a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006790:	2b01      	cmp	r3, #1
 8006792:	d118      	bne.n	80067c6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006794:	f3ef 8310 	mrs	r3, PRIMASK
 8006798:	60bb      	str	r3, [r7, #8]
  return(result);
 800679a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800679c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800679e:	2301      	movs	r3, #1
 80067a0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f383 8810 	msr	PRIMASK, r3
}
 80067a8:	46c0      	nop			; (mov r8, r8)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2110      	movs	r1, #16
 80067b6:	438a      	bics	r2, r1
 80067b8:	601a      	str	r2, [r3, #0]
 80067ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	f383 8810 	msr	PRIMASK, r3
}
 80067c4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2220      	movs	r2, #32
 80067ca:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	665a      	str	r2, [r3, #100]	; 0x64
}
 80067d8:	46c0      	nop			; (mov r8, r8)
 80067da:	46bd      	mov	sp, r7
 80067dc:	b00e      	add	sp, #56	; 0x38
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	fffffedf 	.word	0xfffffedf

080067e4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	225a      	movs	r2, #90	; 0x5a
 80067f6:	2100      	movs	r1, #0
 80067f8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2252      	movs	r2, #82	; 0x52
 80067fe:	2100      	movs	r1, #0
 8006800:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	0018      	movs	r0, r3
 8006806:	f7ff fbdb 	bl	8005fc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800680a:	46c0      	nop			; (mov r8, r8)
 800680c:	46bd      	mov	sp, r7
 800680e:	b004      	add	sp, #16
 8006810:	bd80      	pop	{r7, pc}

08006812 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006812:	b580      	push	{r7, lr}
 8006814:	b086      	sub	sp, #24
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800681a:	f3ef 8310 	mrs	r3, PRIMASK
 800681e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006820:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006822:	617b      	str	r3, [r7, #20]
 8006824:	2301      	movs	r3, #1
 8006826:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f383 8810 	msr	PRIMASK, r3
}
 800682e:	46c0      	nop			; (mov r8, r8)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2140      	movs	r1, #64	; 0x40
 800683c:	438a      	bics	r2, r1
 800683e:	601a      	str	r2, [r3, #0]
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	f383 8810 	msr	PRIMASK, r3
}
 800684a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2220      	movs	r2, #32
 8006850:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	0018      	movs	r0, r3
 800685c:	f7ff fba8 	bl	8005fb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006860:	46c0      	nop			; (mov r8, r8)
 8006862:	46bd      	mov	sp, r7
 8006864:	b006      	add	sp, #24
 8006866:	bd80      	pop	{r7, pc}

08006868 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b090      	sub	sp, #64	; 0x40
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006870:	203e      	movs	r0, #62	; 0x3e
 8006872:	183b      	adds	r3, r7, r0
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	215c      	movs	r1, #92	; 0x5c
 8006878:	5a52      	ldrh	r2, [r2, r1]
 800687a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006880:	2b22      	cmp	r3, #34	; 0x22
 8006882:	d000      	beq.n	8006886 <UART_RxISR_8BIT+0x1e>
 8006884:	e095      	b.n	80069b2 <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	213c      	movs	r1, #60	; 0x3c
 800688c:	187b      	adds	r3, r7, r1
 800688e:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8006890:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006892:	187b      	adds	r3, r7, r1
 8006894:	881b      	ldrh	r3, [r3, #0]
 8006896:	b2da      	uxtb	r2, r3
 8006898:	183b      	adds	r3, r7, r0
 800689a:	881b      	ldrh	r3, [r3, #0]
 800689c:	b2d9      	uxtb	r1, r3
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068a2:	400a      	ands	r2, r1
 80068a4:	b2d2      	uxtb	r2, r2
 80068a6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ac:	1c5a      	adds	r2, r3, #1
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	225a      	movs	r2, #90	; 0x5a
 80068b6:	5a9b      	ldrh	r3, [r3, r2]
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	3b01      	subs	r3, #1
 80068bc:	b299      	uxth	r1, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	225a      	movs	r2, #90	; 0x5a
 80068c2:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	225a      	movs	r2, #90	; 0x5a
 80068c8:	5a9b      	ldrh	r3, [r3, r2]
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d178      	bne.n	80069c2 <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068d0:	f3ef 8310 	mrs	r3, PRIMASK
 80068d4:	61bb      	str	r3, [r7, #24]
  return(result);
 80068d6:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80068da:	2301      	movs	r3, #1
 80068dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068de:	69fb      	ldr	r3, [r7, #28]
 80068e0:	f383 8810 	msr	PRIMASK, r3
}
 80068e4:	46c0      	nop			; (mov r8, r8)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4936      	ldr	r1, [pc, #216]	; (80069cc <UART_RxISR_8BIT+0x164>)
 80068f2:	400a      	ands	r2, r1
 80068f4:	601a      	str	r2, [r3, #0]
 80068f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068fa:	6a3b      	ldr	r3, [r7, #32]
 80068fc:	f383 8810 	msr	PRIMASK, r3
}
 8006900:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006902:	f3ef 8310 	mrs	r3, PRIMASK
 8006906:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006908:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800690a:	637b      	str	r3, [r7, #52]	; 0x34
 800690c:	2301      	movs	r3, #1
 800690e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006912:	f383 8810 	msr	PRIMASK, r3
}
 8006916:	46c0      	nop			; (mov r8, r8)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	689a      	ldr	r2, [r3, #8]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2101      	movs	r1, #1
 8006924:	438a      	bics	r2, r1
 8006926:	609a      	str	r2, [r3, #8]
 8006928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800692a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800692c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800692e:	f383 8810 	msr	PRIMASK, r3
}
 8006932:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2220      	movs	r2, #32
 8006938:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006944:	2b01      	cmp	r3, #1
 8006946:	d12f      	bne.n	80069a8 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800694e:	f3ef 8310 	mrs	r3, PRIMASK
 8006952:	60fb      	str	r3, [r7, #12]
  return(result);
 8006954:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006956:	633b      	str	r3, [r7, #48]	; 0x30
 8006958:	2301      	movs	r3, #1
 800695a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	f383 8810 	msr	PRIMASK, r3
}
 8006962:	46c0      	nop			; (mov r8, r8)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2110      	movs	r1, #16
 8006970:	438a      	bics	r2, r1
 8006972:	601a      	str	r2, [r3, #0]
 8006974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006976:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	f383 8810 	msr	PRIMASK, r3
}
 800697e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	69db      	ldr	r3, [r3, #28]
 8006986:	2210      	movs	r2, #16
 8006988:	4013      	ands	r3, r2
 800698a:	2b10      	cmp	r3, #16
 800698c:	d103      	bne.n	8006996 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2210      	movs	r2, #16
 8006994:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2258      	movs	r2, #88	; 0x58
 800699a:	5a9a      	ldrh	r2, [r3, r2]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	0011      	movs	r1, r2
 80069a0:	0018      	movs	r0, r3
 80069a2:	f7ff fb15 	bl	8005fd0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80069a6:	e00c      	b.n	80069c2 <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	0018      	movs	r0, r3
 80069ac:	f7f9 ffde 	bl	800096c <HAL_UART_RxCpltCallback>
}
 80069b0:	e007      	b.n	80069c2 <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	699a      	ldr	r2, [r3, #24]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2108      	movs	r1, #8
 80069be:	430a      	orrs	r2, r1
 80069c0:	619a      	str	r2, [r3, #24]
}
 80069c2:	46c0      	nop			; (mov r8, r8)
 80069c4:	46bd      	mov	sp, r7
 80069c6:	b010      	add	sp, #64	; 0x40
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	46c0      	nop			; (mov r8, r8)
 80069cc:	fffffedf 	.word	0xfffffedf

080069d0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b090      	sub	sp, #64	; 0x40
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80069d8:	203e      	movs	r0, #62	; 0x3e
 80069da:	183b      	adds	r3, r7, r0
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	215c      	movs	r1, #92	; 0x5c
 80069e0:	5a52      	ldrh	r2, [r2, r1]
 80069e2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069e8:	2b22      	cmp	r3, #34	; 0x22
 80069ea:	d000      	beq.n	80069ee <UART_RxISR_16BIT+0x1e>
 80069ec:	e095      	b.n	8006b1a <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	213c      	movs	r1, #60	; 0x3c
 80069f4:	187b      	adds	r3, r7, r1
 80069f6:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80069f8:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069fe:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8006a00:	187b      	adds	r3, r7, r1
 8006a02:	183a      	adds	r2, r7, r0
 8006a04:	881b      	ldrh	r3, [r3, #0]
 8006a06:	8812      	ldrh	r2, [r2, #0]
 8006a08:	4013      	ands	r3, r2
 8006a0a:	b29a      	uxth	r2, r3
 8006a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a14:	1c9a      	adds	r2, r3, #2
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	225a      	movs	r2, #90	; 0x5a
 8006a1e:	5a9b      	ldrh	r3, [r3, r2]
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	3b01      	subs	r3, #1
 8006a24:	b299      	uxth	r1, r3
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	225a      	movs	r2, #90	; 0x5a
 8006a2a:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	225a      	movs	r2, #90	; 0x5a
 8006a30:	5a9b      	ldrh	r3, [r3, r2]
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d178      	bne.n	8006b2a <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a38:	f3ef 8310 	mrs	r3, PRIMASK
 8006a3c:	617b      	str	r3, [r7, #20]
  return(result);
 8006a3e:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a40:	637b      	str	r3, [r7, #52]	; 0x34
 8006a42:	2301      	movs	r3, #1
 8006a44:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	f383 8810 	msr	PRIMASK, r3
}
 8006a4c:	46c0      	nop			; (mov r8, r8)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4936      	ldr	r1, [pc, #216]	; (8006b34 <UART_RxISR_16BIT+0x164>)
 8006a5a:	400a      	ands	r2, r1
 8006a5c:	601a      	str	r2, [r3, #0]
 8006a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a60:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	f383 8810 	msr	PRIMASK, r3
}
 8006a68:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a6a:	f3ef 8310 	mrs	r3, PRIMASK
 8006a6e:	623b      	str	r3, [r7, #32]
  return(result);
 8006a70:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a72:	633b      	str	r3, [r7, #48]	; 0x30
 8006a74:	2301      	movs	r3, #1
 8006a76:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7a:	f383 8810 	msr	PRIMASK, r3
}
 8006a7e:	46c0      	nop			; (mov r8, r8)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	689a      	ldr	r2, [r3, #8]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2101      	movs	r1, #1
 8006a8c:	438a      	bics	r2, r1
 8006a8e:	609a      	str	r2, [r3, #8]
 8006a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a92:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a96:	f383 8810 	msr	PRIMASK, r3
}
 8006a9a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2220      	movs	r2, #32
 8006aa0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d12f      	bne.n	8006b10 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ab6:	f3ef 8310 	mrs	r3, PRIMASK
 8006aba:	60bb      	str	r3, [r7, #8]
  return(result);
 8006abc:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006abe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f383 8810 	msr	PRIMASK, r3
}
 8006aca:	46c0      	nop			; (mov r8, r8)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2110      	movs	r1, #16
 8006ad8:	438a      	bics	r2, r1
 8006ada:	601a      	str	r2, [r3, #0]
 8006adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ade:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	f383 8810 	msr	PRIMASK, r3
}
 8006ae6:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	69db      	ldr	r3, [r3, #28]
 8006aee:	2210      	movs	r2, #16
 8006af0:	4013      	ands	r3, r2
 8006af2:	2b10      	cmp	r3, #16
 8006af4:	d103      	bne.n	8006afe <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2210      	movs	r2, #16
 8006afc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2258      	movs	r2, #88	; 0x58
 8006b02:	5a9a      	ldrh	r2, [r3, r2]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	0011      	movs	r1, r2
 8006b08:	0018      	movs	r0, r3
 8006b0a:	f7ff fa61 	bl	8005fd0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b0e:	e00c      	b.n	8006b2a <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	0018      	movs	r0, r3
 8006b14:	f7f9 ff2a 	bl	800096c <HAL_UART_RxCpltCallback>
}
 8006b18:	e007      	b.n	8006b2a <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	699a      	ldr	r2, [r3, #24]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2108      	movs	r1, #8
 8006b26:	430a      	orrs	r2, r1
 8006b28:	619a      	str	r2, [r3, #24]
}
 8006b2a:	46c0      	nop			; (mov r8, r8)
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	b010      	add	sp, #64	; 0x40
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	46c0      	nop			; (mov r8, r8)
 8006b34:	fffffedf 	.word	0xfffffedf

08006b38 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006b40:	46c0      	nop			; (mov r8, r8)
 8006b42:	46bd      	mov	sp, r7
 8006b44:	b002      	add	sp, #8
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b088      	sub	sp, #32
 8006b4c:	af02      	add	r7, sp, #8
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	1d3b      	adds	r3, r7, #4
 8006b52:	6019      	str	r1, [r3, #0]
 8006b54:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b56:	2317      	movs	r3, #23
 8006b58:	18fb      	adds	r3, r7, r3
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2274      	movs	r2, #116	; 0x74
 8006b62:	5c9b      	ldrb	r3, [r3, r2]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d101      	bne.n	8006b6c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x24>
 8006b68:	2302      	movs	r3, #2
 8006b6a:	e04a      	b.n	8006c02 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xba>
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2274      	movs	r2, #116	; 0x74
 8006b70:	2101      	movs	r1, #1
 8006b72:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2224      	movs	r2, #36	; 0x24
 8006b78:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	2101      	movs	r1, #1
 8006b86:	438a      	bics	r2, r1
 8006b88:	601a      	str	r2, [r3, #0]

#if defined(USART_CR3_WUS)
  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	4a1e      	ldr	r2, [pc, #120]	; (8006c0c <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc4>)
 8006b92:	4013      	ands	r3, r2
 8006b94:	0019      	movs	r1, r3
 8006b96:	1d3b      	adds	r3, r7, #4
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	430a      	orrs	r2, r1
 8006ba0:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_WUS */

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8006ba2:	1d3b      	adds	r3, r7, #4
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d105      	bne.n	8006bb6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x6e>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8006baa:	1d3b      	adds	r3, r7, #4
 8006bac:	68f8      	ldr	r0, [r7, #12]
 8006bae:	6819      	ldr	r1, [r3, #0]
 8006bb0:	685a      	ldr	r2, [r3, #4]
 8006bb2:	f000 f860 	bl	8006c76 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2101      	movs	r1, #1
 8006bc2:	430a      	orrs	r2, r1
 8006bc4:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006bc6:	f7fb f857 	bl	8001c78 <HAL_GetTick>
 8006bca:	0003      	movs	r3, r0
 8006bcc:	613b      	str	r3, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	2280      	movs	r2, #128	; 0x80
 8006bd2:	03d1      	lsls	r1, r2, #15
 8006bd4:	68f8      	ldr	r0, [r7, #12]
 8006bd6:	4a0e      	ldr	r2, [pc, #56]	; (8006c10 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc8>)
 8006bd8:	9200      	str	r2, [sp, #0]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f7ff fc40 	bl	8006460 <UART_WaitOnFlagUntilTimeout>
 8006be0:	1e03      	subs	r3, r0, #0
 8006be2:	d004      	beq.n	8006bee <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa6>
  {
    status = HAL_TIMEOUT;
 8006be4:	2317      	movs	r3, #23
 8006be6:	18fb      	adds	r3, r7, r3
 8006be8:	2203      	movs	r2, #3
 8006bea:	701a      	strb	r2, [r3, #0]
 8006bec:	e002      	b.n	8006bf4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xac>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2220      	movs	r2, #32
 8006bf2:	679a      	str	r2, [r3, #120]	; 0x78
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2274      	movs	r2, #116	; 0x74
 8006bf8:	2100      	movs	r1, #0
 8006bfa:	5499      	strb	r1, [r3, r2]

  return status;
 8006bfc:	2317      	movs	r3, #23
 8006bfe:	18fb      	adds	r3, r7, r3
 8006c00:	781b      	ldrb	r3, [r3, #0]
}
 8006c02:	0018      	movs	r0, r3
 8006c04:	46bd      	mov	sp, r7
 8006c06:	b006      	add	sp, #24
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	46c0      	nop			; (mov r8, r8)
 8006c0c:	ffcfffff 	.word	0xffcfffff
 8006c10:	01ffffff 	.word	0x01ffffff

08006c14 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b086      	sub	sp, #24
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2274      	movs	r2, #116	; 0x74
 8006c20:	5c9b      	ldrb	r3, [r3, r2]
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d101      	bne.n	8006c2a <HAL_UARTEx_EnableStopMode+0x16>
 8006c26:	2302      	movs	r3, #2
 8006c28:	e021      	b.n	8006c6e <HAL_UARTEx_EnableStopMode+0x5a>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2274      	movs	r2, #116	; 0x74
 8006c2e:	2101      	movs	r1, #1
 8006c30:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c32:	f3ef 8310 	mrs	r3, PRIMASK
 8006c36:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c38:	68bb      	ldr	r3, [r7, #8]

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8006c3a:	617b      	str	r3, [r7, #20]
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f383 8810 	msr	PRIMASK, r3
}
 8006c46:	46c0      	nop			; (mov r8, r8)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	2102      	movs	r1, #2
 8006c54:	430a      	orrs	r2, r1
 8006c56:	601a      	str	r2, [r3, #0]
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	f383 8810 	msr	PRIMASK, r3
}
 8006c62:	46c0      	nop			; (mov r8, r8)

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2274      	movs	r2, #116	; 0x74
 8006c68:	2100      	movs	r1, #0
 8006c6a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	0018      	movs	r0, r3
 8006c70:	46bd      	mov	sp, r7
 8006c72:	b006      	add	sp, #24
 8006c74:	bd80      	pop	{r7, pc}

08006c76 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8006c76:	b580      	push	{r7, lr}
 8006c78:	b084      	sub	sp, #16
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	60f8      	str	r0, [r7, #12]
 8006c7e:	1d3b      	adds	r3, r7, #4
 8006c80:	6019      	str	r1, [r3, #0]
 8006c82:	605a      	str	r2, [r3, #4]
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	2210      	movs	r2, #16
 8006c8c:	4393      	bics	r3, r2
 8006c8e:	001a      	movs	r2, r3
 8006c90:	1d3b      	adds	r3, r7, #4
 8006c92:	889b      	ldrh	r3, [r3, #4]
 8006c94:	0019      	movs	r1, r3
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	430a      	orrs	r2, r1
 8006c9c:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	021b      	lsls	r3, r3, #8
 8006ca6:	0a19      	lsrs	r1, r3, #8
 8006ca8:	1d3b      	adds	r3, r7, #4
 8006caa:	799b      	ldrb	r3, [r3, #6]
 8006cac:	061a      	lsls	r2, r3, #24
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	430a      	orrs	r2, r1
 8006cb4:	605a      	str	r2, [r3, #4]
}
 8006cb6:	46c0      	nop			; (mov r8, r8)
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	b004      	add	sp, #16
 8006cbc:	bd80      	pop	{r7, pc}
	...

08006cc0 <__libc_init_array>:
 8006cc0:	b570      	push	{r4, r5, r6, lr}
 8006cc2:	2600      	movs	r6, #0
 8006cc4:	4d0c      	ldr	r5, [pc, #48]	; (8006cf8 <__libc_init_array+0x38>)
 8006cc6:	4c0d      	ldr	r4, [pc, #52]	; (8006cfc <__libc_init_array+0x3c>)
 8006cc8:	1b64      	subs	r4, r4, r5
 8006cca:	10a4      	asrs	r4, r4, #2
 8006ccc:	42a6      	cmp	r6, r4
 8006cce:	d109      	bne.n	8006ce4 <__libc_init_array+0x24>
 8006cd0:	2600      	movs	r6, #0
 8006cd2:	f000 f821 	bl	8006d18 <_init>
 8006cd6:	4d0a      	ldr	r5, [pc, #40]	; (8006d00 <__libc_init_array+0x40>)
 8006cd8:	4c0a      	ldr	r4, [pc, #40]	; (8006d04 <__libc_init_array+0x44>)
 8006cda:	1b64      	subs	r4, r4, r5
 8006cdc:	10a4      	asrs	r4, r4, #2
 8006cde:	42a6      	cmp	r6, r4
 8006ce0:	d105      	bne.n	8006cee <__libc_init_array+0x2e>
 8006ce2:	bd70      	pop	{r4, r5, r6, pc}
 8006ce4:	00b3      	lsls	r3, r6, #2
 8006ce6:	58eb      	ldr	r3, [r5, r3]
 8006ce8:	4798      	blx	r3
 8006cea:	3601      	adds	r6, #1
 8006cec:	e7ee      	b.n	8006ccc <__libc_init_array+0xc>
 8006cee:	00b3      	lsls	r3, r6, #2
 8006cf0:	58eb      	ldr	r3, [r5, r3]
 8006cf2:	4798      	blx	r3
 8006cf4:	3601      	adds	r6, #1
 8006cf6:	e7f2      	b.n	8006cde <__libc_init_array+0x1e>
 8006cf8:	08006f4c 	.word	0x08006f4c
 8006cfc:	08006f4c 	.word	0x08006f4c
 8006d00:	08006f4c 	.word	0x08006f4c
 8006d04:	08006f50 	.word	0x08006f50

08006d08 <memset>:
 8006d08:	0003      	movs	r3, r0
 8006d0a:	1882      	adds	r2, r0, r2
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d100      	bne.n	8006d12 <memset+0xa>
 8006d10:	4770      	bx	lr
 8006d12:	7019      	strb	r1, [r3, #0]
 8006d14:	3301      	adds	r3, #1
 8006d16:	e7f9      	b.n	8006d0c <memset+0x4>

08006d18 <_init>:
 8006d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d1a:	46c0      	nop			; (mov r8, r8)
 8006d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d1e:	bc08      	pop	{r3}
 8006d20:	469e      	mov	lr, r3
 8006d22:	4770      	bx	lr

08006d24 <_fini>:
 8006d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d26:	46c0      	nop			; (mov r8, r8)
 8006d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d2a:	bc08      	pop	{r3}
 8006d2c:	469e      	mov	lr, r3
 8006d2e:	4770      	bx	lr
