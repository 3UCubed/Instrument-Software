
Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073e4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  080074a4  080074a4  000174a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076c0  080076c0  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  080076c0  080076c0  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  080076c0  080076c0  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076c0  080076c0  000176c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076c4  080076c4  000176c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  080076c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c4  20000028  080076f0  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ec  080076f0  000203ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016490  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c74  00000000  00000000  000364e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f0  00000000  00000000  00039158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c8  00000000  00000000  0003a548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000135be  00000000  00000000  0003b810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018650  00000000  00000000  0004edce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00074e48  00000000  00000000  0006741e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dc266  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004894  00000000  00000000  000dc2b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000028 	.word	0x20000028
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800748c 	.word	0x0800748c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000002c 	.word	0x2000002c
 8000104:	0800748c 	.word	0x0800748c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000224:	f3bf 8f4f 	dsb	sy
}
 8000228:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800022a:	4b04      	ldr	r3, [pc, #16]	; (800023c <__NVIC_SystemReset+0x1c>)
 800022c:	4a04      	ldr	r2, [pc, #16]	; (8000240 <__NVIC_SystemReset+0x20>)
 800022e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000230:	f3bf 8f4f 	dsb	sy
}
 8000234:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000236:	46c0      	nop			; (mov r8, r8)
 8000238:	e7fd      	b.n	8000236 <__NVIC_SystemReset+0x16>
 800023a:	46c0      	nop			; (mov r8, r8)
 800023c:	e000ed00 	.word	0xe000ed00
 8000240:	05fa0004 	.word	0x05fa0004

08000244 <HAL_TIM_OC_DelayElapsedCallback>:
uint8_t PMT_ON = 1;
uint8_t ERPA_ON = 1;
uint8_t HK_ON = 1;

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000246:	b091      	sub	sp, #68	; 0x44
 8000248:	af02      	add	r7, sp, #8
 800024a:	6078      	str	r0, [r7, #4]
  if (htim == &htim2)
 800024c:	687a      	ldr	r2, [r7, #4]
 800024e:	4bd8      	ldr	r3, [pc, #864]	; (80005b0 <HAL_TIM_OC_DelayElapsedCallback+0x36c>)
 8000250:	429a      	cmp	r2, r3
 8000252:	d000      	beq.n	8000256 <HAL_TIM_OC_DelayElapsedCallback+0x12>
 8000254:	e370      	b.n	8000938 <HAL_TIM_OC_DelayElapsedCallback+0x6f4>
  {
    if (!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)))
 8000256:	2380      	movs	r3, #128	; 0x80
 8000258:	005a      	lsls	r2, r3, #1
 800025a:	2390      	movs	r3, #144	; 0x90
 800025c:	05db      	lsls	r3, r3, #23
 800025e:	0011      	movs	r1, r2
 8000260:	0018      	movs	r0, r3
 8000262:	f002 fec7 	bl	8002ff4 <HAL_GPIO_ReadPin>
 8000266:	1e03      	subs	r3, r0, #0
 8000268:	d001      	beq.n	800026e <HAL_TIM_OC_DelayElapsedCallback+0x2a>
 800026a:	f000 fbaf 	bl	80009cc <HAL_TIM_OC_DelayElapsedCallback+0x788>
    { // check pin state
      if (ERPA_ON)
 800026e:	4bd1      	ldr	r3, [pc, #836]	; (80005b4 <HAL_TIM_OC_DelayElapsedCallback+0x370>)
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d100      	bne.n	8000278 <HAL_TIM_OC_DelayElapsedCallback+0x34>
 8000276:	e08f      	b.n	8000398 <HAL_TIM_OC_DelayElapsedCallback+0x154>
         * Steps DAC
         * +/- 0.5v Every 100ms
         */

        /* Write to SPI (begin transfer?) */
        HAL_SPI_Transmit(&hspi1, (uint8_t *)&WRITE, 1, 1);
 8000278:	49cf      	ldr	r1, [pc, #828]	; (80005b8 <HAL_TIM_OC_DelayElapsedCallback+0x374>)
 800027a:	48d0      	ldr	r0, [pc, #832]	; (80005bc <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 800027c:	2301      	movs	r3, #1
 800027e:	2201      	movs	r2, #1
 8000280:	f004 fa5e 	bl	8004740 <HAL_SPI_Transmit>

        while (!(SPI1->SR))
 8000284:	46c0      	nop			; (mov r8, r8)
 8000286:	4bce      	ldr	r3, [pc, #824]	; (80005c0 <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 8000288:	689b      	ldr	r3, [r3, #8]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d0fb      	beq.n	8000286 <HAL_TIM_OC_DelayElapsedCallback+0x42>
          ;

        raw = SPI1->DR;
 800028e:	4bcc      	ldr	r3, [pc, #816]	; (80005c0 <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 8000290:	68db      	ldr	r3, [r3, #12]
 8000292:	001a      	movs	r2, r3
 8000294:	4bcb      	ldr	r3, [pc, #812]	; (80005c4 <HAL_TIM_OC_DelayElapsedCallback+0x380>)
 8000296:	601a      	str	r2, [r3, #0]

        DAC->DHR12R1 = DAC_OUT[step];
 8000298:	4bcb      	ldr	r3, [pc, #812]	; (80005c8 <HAL_TIM_OC_DelayElapsedCallback+0x384>)
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	0019      	movs	r1, r3
 800029e:	4bcb      	ldr	r3, [pc, #812]	; (80005cc <HAL_TIM_OC_DelayElapsedCallback+0x388>)
 80002a0:	4acb      	ldr	r2, [pc, #812]	; (80005d0 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 80002a2:	0089      	lsls	r1, r1, #2
 80002a4:	588a      	ldr	r2, [r1, r2]
 80002a6:	609a      	str	r2, [r3, #8]

        HAL_ADC_Start_DMA(&hadc, (uint32_t *)adcResultsDMA,
 80002a8:	2311      	movs	r3, #17
 80002aa:	001a      	movs	r2, r3
 80002ac:	49c9      	ldr	r1, [pc, #804]	; (80005d4 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 80002ae:	4bca      	ldr	r3, [pc, #808]	; (80005d8 <HAL_TIM_OC_DelayElapsedCallback+0x394>)
 80002b0:	0018      	movs	r0, r3
 80002b2:	f001 fef1 	bl	8002098 <HAL_ADC_Start_DMA>
                          adcChannelCount);
        uint16_t PA0 = adcResultsDMA[0]; // ADC_IN0, END_mon: entrance/collimator monitor
 80002b6:	212e      	movs	r1, #46	; 0x2e
 80002b8:	187b      	adds	r3, r7, r1
 80002ba:	4ac6      	ldr	r2, [pc, #792]	; (80005d4 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 80002bc:	8812      	ldrh	r2, [r2, #0]
 80002be:	801a      	strh	r2, [r3, #0]
        uint16_t PA7 = adcResultsDMA[6]; // ADC_IN7, SWP_mon: Sweep voltage monitor
 80002c0:	202c      	movs	r0, #44	; 0x2c
 80002c2:	183b      	adds	r3, r7, r0
 80002c4:	4ac3      	ldr	r2, [pc, #780]	; (80005d4 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 80002c6:	8992      	ldrh	r2, [r2, #12]
 80002c8:	801a      	strh	r2, [r3, #0]
        uint16_t PB0 = adcResultsDMA[7]; // ADC_IN8, TMP 1: Sweep temperature
 80002ca:	242a      	movs	r4, #42	; 0x2a
 80002cc:	193b      	adds	r3, r7, r4
 80002ce:	4ac1      	ldr	r2, [pc, #772]	; (80005d4 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 80002d0:	89d2      	ldrh	r2, [r2, #14]
 80002d2:	801a      	strh	r2, [r3, #0]
        uint16_t PB1 = adcResultsDMA[8]; // ADC_IN9, TMP 2: feedbacks
 80002d4:	2528      	movs	r5, #40	; 0x28
 80002d6:	197b      	adds	r3, r7, r5
 80002d8:	4abe      	ldr	r2, [pc, #760]	; (80005d4 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 80002da:	8a12      	ldrh	r2, [r2, #16]
 80002dc:	801a      	strh	r2, [r3, #0]

        erpa_buf[0] = erpa_sync;                  // ERPA SYNC 0xAA MSB
 80002de:	22aa      	movs	r2, #170	; 0xaa
 80002e0:	4bbe      	ldr	r3, [pc, #760]	; (80005dc <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 80002e2:	701a      	strb	r2, [r3, #0]
        erpa_buf[1] = erpa_sync;                  // ERPA SYNC 0xAA LSB
 80002e4:	22aa      	movs	r2, #170	; 0xaa
 80002e6:	4bbd      	ldr	r3, [pc, #756]	; (80005dc <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 80002e8:	705a      	strb	r2, [r3, #1]
        erpa_buf[2] = ((erpa_seq & 0xFF00) >> 8); // ERPA SEQ # MSB
 80002ea:	4bbd      	ldr	r3, [pc, #756]	; (80005e0 <HAL_TIM_OC_DelayElapsedCallback+0x39c>)
 80002ec:	881b      	ldrh	r3, [r3, #0]
 80002ee:	0a1b      	lsrs	r3, r3, #8
 80002f0:	b29b      	uxth	r3, r3
 80002f2:	b2da      	uxtb	r2, r3
 80002f4:	4bb9      	ldr	r3, [pc, #740]	; (80005dc <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 80002f6:	709a      	strb	r2, [r3, #2]
        erpa_buf[3] = (erpa_seq & 0xFF);          // ERPA SEQ # MSB
 80002f8:	4bb9      	ldr	r3, [pc, #740]	; (80005e0 <HAL_TIM_OC_DelayElapsedCallback+0x39c>)
 80002fa:	881b      	ldrh	r3, [r3, #0]
 80002fc:	b2da      	uxtb	r2, r3
 80002fe:	4bb7      	ldr	r3, [pc, #732]	; (80005dc <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 8000300:	70da      	strb	r2, [r3, #3]
        erpa_buf[4] = ((raw & 0xFF00) >> 8);      // ERPA eADC MSB
 8000302:	4bb0      	ldr	r3, [pc, #704]	; (80005c4 <HAL_TIM_OC_DelayElapsedCallback+0x380>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	121b      	asrs	r3, r3, #8
 8000308:	b2da      	uxtb	r2, r3
 800030a:	4bb4      	ldr	r3, [pc, #720]	; (80005dc <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 800030c:	711a      	strb	r2, [r3, #4]
        erpa_buf[5] = (raw & 0xFF);               // ERPA eADC LSB
 800030e:	4bad      	ldr	r3, [pc, #692]	; (80005c4 <HAL_TIM_OC_DelayElapsedCallback+0x380>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	b2da      	uxtb	r2, r3
 8000314:	4bb1      	ldr	r3, [pc, #708]	; (80005dc <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 8000316:	715a      	strb	r2, [r3, #5]
        erpa_buf[6] = ((PA0 & 0xFF00) >> 8); // ENDmon MSB
 8000318:	187b      	adds	r3, r7, r1
 800031a:	881b      	ldrh	r3, [r3, #0]
 800031c:	0a1b      	lsrs	r3, r3, #8
 800031e:	b29b      	uxth	r3, r3
 8000320:	b2da      	uxtb	r2, r3
 8000322:	4bae      	ldr	r3, [pc, #696]	; (80005dc <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 8000324:	719a      	strb	r2, [r3, #6]
        erpa_buf[7] = (PA0 & 0xFF);          // ENDmon LSB
 8000326:	187b      	adds	r3, r7, r1
 8000328:	881b      	ldrh	r3, [r3, #0]
 800032a:	b2da      	uxtb	r2, r3
 800032c:	4bab      	ldr	r3, [pc, #684]	; (80005dc <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 800032e:	71da      	strb	r2, [r3, #7]
        erpa_buf[8] = ((PB0 & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8000330:	193b      	adds	r3, r7, r4
 8000332:	881b      	ldrh	r3, [r3, #0]
 8000334:	0a1b      	lsrs	r3, r3, #8
 8000336:	b29b      	uxth	r3, r3
 8000338:	b2da      	uxtb	r2, r3
 800033a:	4ba8      	ldr	r3, [pc, #672]	; (80005dc <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 800033c:	721a      	strb	r2, [r3, #8]
        erpa_buf[9] = (PB0 & 0xFF);           // TEMPURATURE 1 LSB
 800033e:	193b      	adds	r3, r7, r4
 8000340:	881b      	ldrh	r3, [r3, #0]
 8000342:	b2da      	uxtb	r2, r3
 8000344:	4ba5      	ldr	r3, [pc, #660]	; (80005dc <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 8000346:	725a      	strb	r2, [r3, #9]
        erpa_buf[10] = ((PB1 & 0xFF00) >> 8); // TEMPURATURE 2 MSB
 8000348:	197b      	adds	r3, r7, r5
 800034a:	881b      	ldrh	r3, [r3, #0]
 800034c:	0a1b      	lsrs	r3, r3, #8
 800034e:	b29b      	uxth	r3, r3
 8000350:	b2da      	uxtb	r2, r3
 8000352:	4ba2      	ldr	r3, [pc, #648]	; (80005dc <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 8000354:	729a      	strb	r2, [r3, #10]
        erpa_buf[11] = (PB1 & 0xFF);          // TEMPURATURE 2 LSB
 8000356:	197b      	adds	r3, r7, r5
 8000358:	881b      	ldrh	r3, [r3, #0]
 800035a:	b2da      	uxtb	r2, r3
 800035c:	4b9f      	ldr	r3, [pc, #636]	; (80005dc <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 800035e:	72da      	strb	r2, [r3, #11]
        erpa_buf[12] = ((PA7 & 0xFF00) >> 8); // SWP Monitored MSB
 8000360:	183b      	adds	r3, r7, r0
 8000362:	881b      	ldrh	r3, [r3, #0]
 8000364:	0a1b      	lsrs	r3, r3, #8
 8000366:	b29b      	uxth	r3, r3
 8000368:	b2da      	uxtb	r2, r3
 800036a:	4b9c      	ldr	r3, [pc, #624]	; (80005dc <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 800036c:	731a      	strb	r2, [r3, #12]
        erpa_buf[13] = (PA7 & 0xFF);          // SWP Monitored LSB
 800036e:	183b      	adds	r3, r7, r0
 8000370:	881b      	ldrh	r3, [r3, #0]
 8000372:	b2da      	uxtb	r2, r3
 8000374:	4b99      	ldr	r3, [pc, #612]	; (80005dc <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 8000376:	735a      	strb	r2, [r3, #13]

        erpa_seq++;
 8000378:	4b99      	ldr	r3, [pc, #612]	; (80005e0 <HAL_TIM_OC_DelayElapsedCallback+0x39c>)
 800037a:	881b      	ldrh	r3, [r3, #0]
 800037c:	3301      	adds	r3, #1
 800037e:	b29a      	uxth	r2, r3
 8000380:	4b97      	ldr	r3, [pc, #604]	; (80005e0 <HAL_TIM_OC_DelayElapsedCallback+0x39c>)
 8000382:	801a      	strh	r2, [r3, #0]
        if (ERPA_ON)
 8000384:	4b8b      	ldr	r3, [pc, #556]	; (80005b4 <HAL_TIM_OC_DelayElapsedCallback+0x370>)
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d005      	beq.n	8000398 <HAL_TIM_OC_DelayElapsedCallback+0x154>
        {
          HAL_UART_Transmit(&huart1, erpa_buf, sizeof(erpa_buf), 100);
 800038c:	4993      	ldr	r1, [pc, #588]	; (80005dc <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 800038e:	4895      	ldr	r0, [pc, #596]	; (80005e4 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 8000390:	2364      	movs	r3, #100	; 0x64
 8000392:	2210      	movs	r2, #16
 8000394:	f005 fd06 	bl	8005da4 <HAL_UART_Transmit>
        }
      }
      if (HK_ON)
 8000398:	4b93      	ldr	r3, [pc, #588]	; (80005e8 <HAL_TIM_OC_DelayElapsedCallback+0x3a4>)
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d100      	bne.n	80003a2 <HAL_TIM_OC_DelayElapsedCallback+0x15e>
 80003a0:	e314      	b.n	80009cc <HAL_TIM_OC_DelayElapsedCallback+0x788>
      {
        if (hk_counter == HK_CADENCE)
 80003a2:	4b92      	ldr	r3, [pc, #584]	; (80005ec <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	2201      	movs	r2, #1
 80003a8:	4293      	cmp	r3, r2
 80003aa:	d000      	beq.n	80003ae <HAL_TIM_OC_DelayElapsedCallback+0x16a>
 80003ac:	e2aa      	b.n	8000904 <HAL_TIM_OC_DelayElapsedCallback+0x6c0>
          int16_t output1;
          int16_t output2;
          int16_t output3;
          int16_t output4;

          buf[0] = REG_TEMP;
 80003ae:	2200      	movs	r2, #0
 80003b0:	2508      	movs	r5, #8
 80003b2:	197b      	adds	r3, r7, r5
 80003b4:	701a      	strb	r2, [r3, #0]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_1, buf, 1,
 80003b6:	2390      	movs	r3, #144	; 0x90
 80003b8:	b299      	uxth	r1, r3
 80003ba:	2627      	movs	r6, #39	; 0x27
 80003bc:	19bc      	adds	r4, r7, r6
 80003be:	197a      	adds	r2, r7, r5
 80003c0:	488b      	ldr	r0, [pc, #556]	; (80005f0 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 80003c2:	23fa      	movs	r3, #250	; 0xfa
 80003c4:	009b      	lsls	r3, r3, #2
 80003c6:	9300      	str	r3, [sp, #0]
 80003c8:	2301      	movs	r3, #1
 80003ca:	f002 fee3 	bl	8003194 <HAL_I2C_Master_Transmit>
 80003ce:	0003      	movs	r3, r0
 80003d0:	7023      	strb	r3, [r4, #0]
                                        1000);
          //			I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
          if (ret != HAL_OK)
 80003d2:	19bb      	adds	r3, r7, r6
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d008      	beq.n	80003ec <HAL_TIM_OC_DelayElapsedCallback+0x1a8>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 80003da:	197b      	adds	r3, r7, r5
 80003dc:	4a85      	ldr	r2, [pc, #532]	; (80005f4 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 80003de:	ca03      	ldmia	r2!, {r0, r1}
 80003e0:	c303      	stmia	r3!, {r0, r1}
 80003e2:	8811      	ldrh	r1, [r2, #0]
 80003e4:	8019      	strh	r1, [r3, #0]
 80003e6:	7892      	ldrb	r2, [r2, #2]
 80003e8:	709a      	strb	r2, [r3, #2]
 80003ea:	e02b      	b.n	8000444 <HAL_TIM_OC_DelayElapsedCallback+0x200>
          }
          else
          {

            //				 Read 2 bytes from the temperature register
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_1, buf, 2,
 80003ec:	2390      	movs	r3, #144	; 0x90
 80003ee:	b299      	uxth	r1, r3
 80003f0:	2527      	movs	r5, #39	; 0x27
 80003f2:	197c      	adds	r4, r7, r5
 80003f4:	2608      	movs	r6, #8
 80003f6:	19ba      	adds	r2, r7, r6
 80003f8:	487d      	ldr	r0, [pc, #500]	; (80005f0 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 80003fa:	23fa      	movs	r3, #250	; 0xfa
 80003fc:	009b      	lsls	r3, r3, #2
 80003fe:	9300      	str	r3, [sp, #0]
 8000400:	2302      	movs	r3, #2
 8000402:	f002 ffcf 	bl	80033a4 <HAL_I2C_Master_Receive>
 8000406:	0003      	movs	r3, r0
 8000408:	7023      	strb	r3, [r4, #0]
                                         1000);
            if (ret != HAL_OK)
 800040a:	197b      	adds	r3, r7, r5
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	2b00      	cmp	r3, #0
 8000410:	d008      	beq.n	8000424 <HAL_TIM_OC_DelayElapsedCallback+0x1e0>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 8000412:	19bb      	adds	r3, r7, r6
 8000414:	4a78      	ldr	r2, [pc, #480]	; (80005f8 <HAL_TIM_OC_DelayElapsedCallback+0x3b4>)
 8000416:	ca03      	ldmia	r2!, {r0, r1}
 8000418:	c303      	stmia	r3!, {r0, r1}
 800041a:	8811      	ldrh	r1, [r2, #0]
 800041c:	8019      	strh	r1, [r3, #0]
 800041e:	7892      	ldrb	r2, [r2, #2]
 8000420:	709a      	strb	r2, [r3, #2]
 8000422:	e00f      	b.n	8000444 <HAL_TIM_OC_DelayElapsedCallback+0x200>
            }
            else
            {

              output1 = (int16_t)(buf[0] << 8);
 8000424:	2008      	movs	r0, #8
 8000426:	183b      	adds	r3, r7, r0
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	021a      	lsls	r2, r3, #8
 800042c:	2136      	movs	r1, #54	; 0x36
 800042e:	187b      	adds	r3, r7, r1
 8000430:	801a      	strh	r2, [r3, #0]
              output1 = (output1 | buf[1]) >> 3;
 8000432:	187b      	adds	r3, r7, r1
 8000434:	2200      	movs	r2, #0
 8000436:	5e9b      	ldrsh	r3, [r3, r2]
 8000438:	183a      	adds	r2, r7, r0
 800043a:	7852      	ldrb	r2, [r2, #1]
 800043c:	4313      	orrs	r3, r2
 800043e:	10da      	asrs	r2, r3, #3
 8000440:	187b      	adds	r3, r7, r1
 8000442:	801a      	strh	r2, [r3, #0]
            }
          }

          // Tell ADT7410_2 that we want to read from the temperature register
          buf[0] = REG_TEMP;
 8000444:	2200      	movs	r2, #0
 8000446:	2508      	movs	r5, #8
 8000448:	197b      	adds	r3, r7, r5
 800044a:	701a      	strb	r2, [r3, #0]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_2, buf, 1,
 800044c:	2394      	movs	r3, #148	; 0x94
 800044e:	b299      	uxth	r1, r3
 8000450:	2627      	movs	r6, #39	; 0x27
 8000452:	19bc      	adds	r4, r7, r6
 8000454:	197a      	adds	r2, r7, r5
 8000456:	4866      	ldr	r0, [pc, #408]	; (80005f0 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 8000458:	23fa      	movs	r3, #250	; 0xfa
 800045a:	009b      	lsls	r3, r3, #2
 800045c:	9300      	str	r3, [sp, #0]
 800045e:	2301      	movs	r3, #1
 8000460:	f002 fe98 	bl	8003194 <HAL_I2C_Master_Transmit>
 8000464:	0003      	movs	r3, r0
 8000466:	7023      	strb	r3, [r4, #0]
                                        1000);
          //			I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
          if (ret != HAL_OK)
 8000468:	19bb      	adds	r3, r7, r6
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	2b00      	cmp	r3, #0
 800046e:	d008      	beq.n	8000482 <HAL_TIM_OC_DelayElapsedCallback+0x23e>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 8000470:	197b      	adds	r3, r7, r5
 8000472:	4a60      	ldr	r2, [pc, #384]	; (80005f4 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 8000474:	ca03      	ldmia	r2!, {r0, r1}
 8000476:	c303      	stmia	r3!, {r0, r1}
 8000478:	8811      	ldrh	r1, [r2, #0]
 800047a:	8019      	strh	r1, [r3, #0]
 800047c:	7892      	ldrb	r2, [r2, #2]
 800047e:	709a      	strb	r2, [r3, #2]
 8000480:	e02b      	b.n	80004da <HAL_TIM_OC_DelayElapsedCallback+0x296>
          }
          else
          {

            //				 Read 2 bytes from the temperature register
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_2, buf, 2,
 8000482:	2394      	movs	r3, #148	; 0x94
 8000484:	b299      	uxth	r1, r3
 8000486:	2527      	movs	r5, #39	; 0x27
 8000488:	197c      	adds	r4, r7, r5
 800048a:	2608      	movs	r6, #8
 800048c:	19ba      	adds	r2, r7, r6
 800048e:	4858      	ldr	r0, [pc, #352]	; (80005f0 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 8000490:	23fa      	movs	r3, #250	; 0xfa
 8000492:	009b      	lsls	r3, r3, #2
 8000494:	9300      	str	r3, [sp, #0]
 8000496:	2302      	movs	r3, #2
 8000498:	f002 ff84 	bl	80033a4 <HAL_I2C_Master_Receive>
 800049c:	0003      	movs	r3, r0
 800049e:	7023      	strb	r3, [r4, #0]
                                         1000);
            if (ret != HAL_OK)
 80004a0:	197b      	adds	r3, r7, r5
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d008      	beq.n	80004ba <HAL_TIM_OC_DelayElapsedCallback+0x276>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 80004a8:	19bb      	adds	r3, r7, r6
 80004aa:	4a53      	ldr	r2, [pc, #332]	; (80005f8 <HAL_TIM_OC_DelayElapsedCallback+0x3b4>)
 80004ac:	ca03      	ldmia	r2!, {r0, r1}
 80004ae:	c303      	stmia	r3!, {r0, r1}
 80004b0:	8811      	ldrh	r1, [r2, #0]
 80004b2:	8019      	strh	r1, [r3, #0]
 80004b4:	7892      	ldrb	r2, [r2, #2]
 80004b6:	709a      	strb	r2, [r3, #2]
 80004b8:	e00f      	b.n	80004da <HAL_TIM_OC_DelayElapsedCallback+0x296>
            }
            else
            {

              output2 = (int16_t)(buf[0] << 8);
 80004ba:	2008      	movs	r0, #8
 80004bc:	183b      	adds	r3, r7, r0
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	021a      	lsls	r2, r3, #8
 80004c2:	2134      	movs	r1, #52	; 0x34
 80004c4:	187b      	adds	r3, r7, r1
 80004c6:	801a      	strh	r2, [r3, #0]
              output2 = (output2 | buf[1]) >> 3;
 80004c8:	187b      	adds	r3, r7, r1
 80004ca:	2200      	movs	r2, #0
 80004cc:	5e9b      	ldrsh	r3, [r3, r2]
 80004ce:	183a      	adds	r2, r7, r0
 80004d0:	7852      	ldrb	r2, [r2, #1]
 80004d2:	4313      	orrs	r3, r2
 80004d4:	10da      	asrs	r2, r3, #3
 80004d6:	187b      	adds	r3, r7, r1
 80004d8:	801a      	strh	r2, [r3, #0]
            }
          }
          // TEMP SENSOR 3
          buf[0] = REG_TEMP;
 80004da:	2200      	movs	r2, #0
 80004dc:	2508      	movs	r5, #8
 80004de:	197b      	adds	r3, r7, r5
 80004e0:	701a      	strb	r2, [r3, #0]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_3, buf, 1,
 80004e2:	2392      	movs	r3, #146	; 0x92
 80004e4:	b299      	uxth	r1, r3
 80004e6:	2627      	movs	r6, #39	; 0x27
 80004e8:	19bc      	adds	r4, r7, r6
 80004ea:	197a      	adds	r2, r7, r5
 80004ec:	4840      	ldr	r0, [pc, #256]	; (80005f0 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 80004ee:	23fa      	movs	r3, #250	; 0xfa
 80004f0:	009b      	lsls	r3, r3, #2
 80004f2:	9300      	str	r3, [sp, #0]
 80004f4:	2301      	movs	r3, #1
 80004f6:	f002 fe4d 	bl	8003194 <HAL_I2C_Master_Transmit>
 80004fa:	0003      	movs	r3, r0
 80004fc:	7023      	strb	r3, [r4, #0]
                                        1000);
          //			I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
          if (ret != HAL_OK)
 80004fe:	19bb      	adds	r3, r7, r6
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d008      	beq.n	8000518 <HAL_TIM_OC_DelayElapsedCallback+0x2d4>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 8000506:	197b      	adds	r3, r7, r5
 8000508:	4a3a      	ldr	r2, [pc, #232]	; (80005f4 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 800050a:	ca03      	ldmia	r2!, {r0, r1}
 800050c:	c303      	stmia	r3!, {r0, r1}
 800050e:	8811      	ldrh	r1, [r2, #0]
 8000510:	8019      	strh	r1, [r3, #0]
 8000512:	7892      	ldrb	r2, [r2, #2]
 8000514:	709a      	strb	r2, [r3, #2]
 8000516:	e02b      	b.n	8000570 <HAL_TIM_OC_DelayElapsedCallback+0x32c>
          }
          else
          {

            //				 Read 2 bytes from the temperature register
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_3, buf, 2,
 8000518:	2392      	movs	r3, #146	; 0x92
 800051a:	b299      	uxth	r1, r3
 800051c:	2527      	movs	r5, #39	; 0x27
 800051e:	197c      	adds	r4, r7, r5
 8000520:	2608      	movs	r6, #8
 8000522:	19ba      	adds	r2, r7, r6
 8000524:	4832      	ldr	r0, [pc, #200]	; (80005f0 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 8000526:	23fa      	movs	r3, #250	; 0xfa
 8000528:	009b      	lsls	r3, r3, #2
 800052a:	9300      	str	r3, [sp, #0]
 800052c:	2302      	movs	r3, #2
 800052e:	f002 ff39 	bl	80033a4 <HAL_I2C_Master_Receive>
 8000532:	0003      	movs	r3, r0
 8000534:	7023      	strb	r3, [r4, #0]
                                         1000);
            if (ret != HAL_OK)
 8000536:	197b      	adds	r3, r7, r5
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d008      	beq.n	8000550 <HAL_TIM_OC_DelayElapsedCallback+0x30c>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 800053e:	19bb      	adds	r3, r7, r6
 8000540:	4a2d      	ldr	r2, [pc, #180]	; (80005f8 <HAL_TIM_OC_DelayElapsedCallback+0x3b4>)
 8000542:	ca03      	ldmia	r2!, {r0, r1}
 8000544:	c303      	stmia	r3!, {r0, r1}
 8000546:	8811      	ldrh	r1, [r2, #0]
 8000548:	8019      	strh	r1, [r3, #0]
 800054a:	7892      	ldrb	r2, [r2, #2]
 800054c:	709a      	strb	r2, [r3, #2]
 800054e:	e00f      	b.n	8000570 <HAL_TIM_OC_DelayElapsedCallback+0x32c>
            }
            else
            {

              output3 = (int16_t)(buf[0] << 8);
 8000550:	2008      	movs	r0, #8
 8000552:	183b      	adds	r3, r7, r0
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	021a      	lsls	r2, r3, #8
 8000558:	2132      	movs	r1, #50	; 0x32
 800055a:	187b      	adds	r3, r7, r1
 800055c:	801a      	strh	r2, [r3, #0]
              output3 = (output3 | buf[1]) >> 3;
 800055e:	187b      	adds	r3, r7, r1
 8000560:	2200      	movs	r2, #0
 8000562:	5e9b      	ldrsh	r3, [r3, r2]
 8000564:	183a      	adds	r2, r7, r0
 8000566:	7852      	ldrb	r2, [r2, #1]
 8000568:	4313      	orrs	r3, r2
 800056a:	10da      	asrs	r2, r3, #3
 800056c:	187b      	adds	r3, r7, r1
 800056e:	801a      	strh	r2, [r3, #0]
            }
          }
          // TEMP SENSOR 4
          buf[0] = REG_TEMP;
 8000570:	2200      	movs	r2, #0
 8000572:	2508      	movs	r5, #8
 8000574:	197b      	adds	r3, r7, r5
 8000576:	701a      	strb	r2, [r3, #0]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_4, buf, 1,
 8000578:	2396      	movs	r3, #150	; 0x96
 800057a:	b299      	uxth	r1, r3
 800057c:	2627      	movs	r6, #39	; 0x27
 800057e:	19bc      	adds	r4, r7, r6
 8000580:	197a      	adds	r2, r7, r5
 8000582:	481b      	ldr	r0, [pc, #108]	; (80005f0 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 8000584:	23fa      	movs	r3, #250	; 0xfa
 8000586:	009b      	lsls	r3, r3, #2
 8000588:	9300      	str	r3, [sp, #0]
 800058a:	2301      	movs	r3, #1
 800058c:	f002 fe02 	bl	8003194 <HAL_I2C_Master_Transmit>
 8000590:	0003      	movs	r3, r0
 8000592:	7023      	strb	r3, [r4, #0]
                                        1000);
          //			I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
          if (ret != HAL_OK)
 8000594:	19bb      	adds	r3, r7, r6
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d02f      	beq.n	80005fc <HAL_TIM_OC_DelayElapsedCallback+0x3b8>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 800059c:	197b      	adds	r3, r7, r5
 800059e:	4a15      	ldr	r2, [pc, #84]	; (80005f4 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 80005a0:	ca03      	ldmia	r2!, {r0, r1}
 80005a2:	c303      	stmia	r3!, {r0, r1}
 80005a4:	8811      	ldrh	r1, [r2, #0]
 80005a6:	8019      	strh	r1, [r3, #0]
 80005a8:	7892      	ldrb	r2, [r2, #2]
 80005aa:	709a      	strb	r2, [r3, #2]
 80005ac:	e052      	b.n	8000654 <HAL_TIM_OC_DelayElapsedCallback+0x410>
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	20000238 	.word	0x20000238
 80005b4:	20000019 	.word	0x20000019
 80005b8:	08007558 	.word	0x08007558
 80005bc:	20000128 	.word	0x20000128
 80005c0:	40013000 	.word	0x40013000
 80005c4:	20000394 	.word	0x20000394
 80005c8:	20000392 	.word	0x20000392
 80005cc:	40007400 	.word	0x40007400
 80005d0:	20000000 	.word	0x20000000
 80005d4:	20000370 	.word	0x20000370
 80005d8:	20000044 	.word	0x20000044
 80005dc:	20000398 	.word	0x20000398
 80005e0:	200003a8 	.word	0x200003a8
 80005e4:	20000280 	.word	0x20000280
 80005e8:	2000001a 	.word	0x2000001a
 80005ec:	200003d8 	.word	0x200003d8
 80005f0:	200000dc 	.word	0x200000dc
 80005f4:	08007520 	.word	0x08007520
 80005f8:	0800752c 	.word	0x0800752c
          }
          else
          {

            //				 Read 2 bytes from the temperature register
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_4, buf, 2,
 80005fc:	2396      	movs	r3, #150	; 0x96
 80005fe:	b299      	uxth	r1, r3
 8000600:	2527      	movs	r5, #39	; 0x27
 8000602:	197c      	adds	r4, r7, r5
 8000604:	2608      	movs	r6, #8
 8000606:	19ba      	adds	r2, r7, r6
 8000608:	48c1      	ldr	r0, [pc, #772]	; (8000910 <HAL_TIM_OC_DelayElapsedCallback+0x6cc>)
 800060a:	23fa      	movs	r3, #250	; 0xfa
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	2302      	movs	r3, #2
 8000612:	f002 fec7 	bl	80033a4 <HAL_I2C_Master_Receive>
 8000616:	0003      	movs	r3, r0
 8000618:	7023      	strb	r3, [r4, #0]
                                         1000);
            if (ret != HAL_OK)
 800061a:	197b      	adds	r3, r7, r5
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d008      	beq.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x3f0>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 8000622:	19bb      	adds	r3, r7, r6
 8000624:	4abb      	ldr	r2, [pc, #748]	; (8000914 <HAL_TIM_OC_DelayElapsedCallback+0x6d0>)
 8000626:	ca03      	ldmia	r2!, {r0, r1}
 8000628:	c303      	stmia	r3!, {r0, r1}
 800062a:	8811      	ldrh	r1, [r2, #0]
 800062c:	8019      	strh	r1, [r3, #0]
 800062e:	7892      	ldrb	r2, [r2, #2]
 8000630:	709a      	strb	r2, [r3, #2]
 8000632:	e00f      	b.n	8000654 <HAL_TIM_OC_DelayElapsedCallback+0x410>
            }
            else
            {

              output4 = (int16_t)(buf[0] << 8);
 8000634:	2008      	movs	r0, #8
 8000636:	183b      	adds	r3, r7, r0
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	021a      	lsls	r2, r3, #8
 800063c:	2130      	movs	r1, #48	; 0x30
 800063e:	187b      	adds	r3, r7, r1
 8000640:	801a      	strh	r2, [r3, #0]
              output4 = (output4 | buf[1]) >> 3;
 8000642:	187b      	adds	r3, r7, r1
 8000644:	2200      	movs	r2, #0
 8000646:	5e9b      	ldrsh	r3, [r3, r2]
 8000648:	183a      	adds	r2, r7, r0
 800064a:	7852      	ldrb	r2, [r2, #1]
 800064c:	4313      	orrs	r3, r2
 800064e:	10da      	asrs	r2, r3, #3
 8000650:	187b      	adds	r3, r7, r1
 8000652:	801a      	strh	r2, [r3, #0]
            }
          }

          HAL_ADC_Start_DMA(&hadc, (uint32_t *)adcResultsDMA,
 8000654:	2311      	movs	r3, #17
 8000656:	001a      	movs	r2, r3
 8000658:	49af      	ldr	r1, [pc, #700]	; (8000918 <HAL_TIM_OC_DelayElapsedCallback+0x6d4>)
 800065a:	4bb0      	ldr	r3, [pc, #704]	; (800091c <HAL_TIM_OC_DelayElapsedCallback+0x6d8>)
 800065c:	0018      	movs	r0, r3
 800065e:	f001 fd1b 	bl	8002098 <HAL_ADC_Start_DMA>
                            adcChannelCount);

          uint16_t PA1 = adcResultsDMA[1];       // ADC_IN1, BUS_Imon: instrument bus current monitor
 8000662:	2124      	movs	r1, #36	; 0x24
 8000664:	187b      	adds	r3, r7, r1
 8000666:	4aac      	ldr	r2, [pc, #688]	; (8000918 <HAL_TIM_OC_DelayElapsedCallback+0x6d4>)
 8000668:	8852      	ldrh	r2, [r2, #2]
 800066a:	801a      	strh	r2, [r3, #0]
          uint16_t PA2 = adcResultsDMA[2];       // ADC_IN2, BUS_Vmon: instrument bus voltage monitor
 800066c:	2022      	movs	r0, #34	; 0x22
 800066e:	183b      	adds	r3, r7, r0
 8000670:	4aa9      	ldr	r2, [pc, #676]	; (8000918 <HAL_TIM_OC_DelayElapsedCallback+0x6d4>)
 8000672:	8892      	ldrh	r2, [r2, #4]
 8000674:	801a      	strh	r2, [r3, #0]
          uint16_t PA3 = adcResultsDMA[3];       // ADC_IN3, 3v3_mon: Accurate 5V for ADC monitor
 8000676:	2420      	movs	r4, #32
 8000678:	193b      	adds	r3, r7, r4
 800067a:	4aa7      	ldr	r2, [pc, #668]	; (8000918 <HAL_TIM_OC_DelayElapsedCallback+0x6d4>)
 800067c:	88d2      	ldrh	r2, [r2, #6]
 800067e:	801a      	strh	r2, [r3, #0]
          uint16_t PA5 = adcResultsDMA[4];       // ADC_IN5, n150v_mon: n150 voltage monitor
 8000680:	251e      	movs	r5, #30
 8000682:	197b      	adds	r3, r7, r5
 8000684:	4aa4      	ldr	r2, [pc, #656]	; (8000918 <HAL_TIM_OC_DelayElapsedCallback+0x6d4>)
 8000686:	8912      	ldrh	r2, [r2, #8]
 8000688:	801a      	strh	r2, [r3, #0]
          uint16_t PA6 = adcResultsDMA[5];       // ADC_IN6, n800v_mon: n800 voltage monitor
 800068a:	261c      	movs	r6, #28
 800068c:	19bb      	adds	r3, r7, r6
 800068e:	4aa2      	ldr	r2, [pc, #648]	; (8000918 <HAL_TIM_OC_DelayElapsedCallback+0x6d4>)
 8000690:	8952      	ldrh	r2, [r2, #10]
 8000692:	801a      	strh	r2, [r3, #0]
          uint16_t PC0 = adcResultsDMA[9];       // ADC_IN10, 2v5_mon: 2.5v voltage monitor
 8000694:	231a      	movs	r3, #26
 8000696:	18fb      	adds	r3, r7, r3
 8000698:	4a9f      	ldr	r2, [pc, #636]	; (8000918 <HAL_TIM_OC_DelayElapsedCallback+0x6d4>)
 800069a:	8a52      	ldrh	r2, [r2, #18]
 800069c:	801a      	strh	r2, [r3, #0]
          uint16_t PC1 = adcResultsDMA[10];      // ADC_IN11, n5v_mon: n5v voltage monitor
 800069e:	2218      	movs	r2, #24
 80006a0:	18bb      	adds	r3, r7, r2
 80006a2:	4a9d      	ldr	r2, [pc, #628]	; (8000918 <HAL_TIM_OC_DelayElapsedCallback+0x6d4>)
 80006a4:	8a92      	ldrh	r2, [r2, #20]
 80006a6:	801a      	strh	r2, [r3, #0]
          uint16_t PC2 = adcResultsDMA[11];      // ADC_IN12, 5v_mon: 5v voltage monitor
 80006a8:	2316      	movs	r3, #22
 80006aa:	18fb      	adds	r3, r7, r3
 80006ac:	4a9a      	ldr	r2, [pc, #616]	; (8000918 <HAL_TIM_OC_DelayElapsedCallback+0x6d4>)
 80006ae:	8ad2      	ldrh	r2, [r2, #22]
 80006b0:	801a      	strh	r2, [r3, #0]
          uint16_t PC3 = adcResultsDMA[12];      // ADC_IN13, n3v3_mon: n3v3 voltage monitor
 80006b2:	2214      	movs	r2, #20
 80006b4:	18bb      	adds	r3, r7, r2
 80006b6:	4a98      	ldr	r2, [pc, #608]	; (8000918 <HAL_TIM_OC_DelayElapsedCallback+0x6d4>)
 80006b8:	8b12      	ldrh	r2, [r2, #24]
 80006ba:	801a      	strh	r2, [r3, #0]
          uint16_t PC4 = adcResultsDMA[13];      // ADC_IN14, 5vref_mon: 5v reference voltage monitor
 80006bc:	2312      	movs	r3, #18
 80006be:	18fb      	adds	r3, r7, r3
 80006c0:	4a95      	ldr	r2, [pc, #596]	; (8000918 <HAL_TIM_OC_DelayElapsedCallback+0x6d4>)
 80006c2:	8b52      	ldrh	r2, [r2, #26]
 80006c4:	801a      	strh	r2, [r3, #0]
          uint16_t PC5 = adcResultsDMA[14];      // ADC_IN15, 15v_mon: 15v voltage monitor
 80006c6:	2210      	movs	r2, #16
 80006c8:	18bb      	adds	r3, r7, r2
 80006ca:	4a93      	ldr	r2, [pc, #588]	; (8000918 <HAL_TIM_OC_DelayElapsedCallback+0x6d4>)
 80006cc:	8b92      	ldrh	r2, [r2, #28]
 80006ce:	801a      	strh	r2, [r3, #0]
          uint16_t MCU_TEMP = adcResultsDMA[15]; //(internally connected) ADC_IN16, VSENSE
 80006d0:	230e      	movs	r3, #14
 80006d2:	18fb      	adds	r3, r7, r3
 80006d4:	4a90      	ldr	r2, [pc, #576]	; (8000918 <HAL_TIM_OC_DelayElapsedCallback+0x6d4>)
 80006d6:	8bd2      	ldrh	r2, [r2, #30]
 80006d8:	801a      	strh	r2, [r3, #0]
          uint16_t MCU_VREF = adcResultsDMA[16]; //(internally connected) ADC_IN17, VREFINT
 80006da:	220c      	movs	r2, #12
 80006dc:	18bb      	adds	r3, r7, r2
 80006de:	4a8e      	ldr	r2, [pc, #568]	; (8000918 <HAL_TIM_OC_DelayElapsedCallback+0x6d4>)
 80006e0:	8c12      	ldrh	r2, [r2, #32]
 80006e2:	801a      	strh	r2, [r3, #0]

          temps_buf[0] = temps_sync;
 80006e4:	22dd      	movs	r2, #221	; 0xdd
 80006e6:	4b8e      	ldr	r3, [pc, #568]	; (8000920 <HAL_TIM_OC_DelayElapsedCallback+0x6dc>)
 80006e8:	701a      	strb	r2, [r3, #0]
          temps_buf[1] = temps_sync;
 80006ea:	22dd      	movs	r2, #221	; 0xdd
 80006ec:	4b8c      	ldr	r3, [pc, #560]	; (8000920 <HAL_TIM_OC_DelayElapsedCallback+0x6dc>)
 80006ee:	705a      	strb	r2, [r3, #1]
          temps_buf[2] = ((MCU_VREF & 0xFF00) >> 8);
 80006f0:	220c      	movs	r2, #12
 80006f2:	18bb      	adds	r3, r7, r2
 80006f4:	881b      	ldrh	r3, [r3, #0]
 80006f6:	0a1b      	lsrs	r3, r3, #8
 80006f8:	b29b      	uxth	r3, r3
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	4b88      	ldr	r3, [pc, #544]	; (8000920 <HAL_TIM_OC_DelayElapsedCallback+0x6dc>)
 80006fe:	709a      	strb	r2, [r3, #2]
          temps_buf[3] = (MCU_VREF & 0xFF);
 8000700:	220c      	movs	r2, #12
 8000702:	18bb      	adds	r3, r7, r2
 8000704:	881b      	ldrh	r3, [r3, #0]
 8000706:	b2da      	uxtb	r2, r3
 8000708:	4b85      	ldr	r3, [pc, #532]	; (8000920 <HAL_TIM_OC_DelayElapsedCallback+0x6dc>)
 800070a:	70da      	strb	r2, [r3, #3]
          temps_buf[4] = ((output1 & 0xFF00) >> 8);
 800070c:	2236      	movs	r2, #54	; 0x36
 800070e:	18bb      	adds	r3, r7, r2
 8000710:	2200      	movs	r2, #0
 8000712:	5e9b      	ldrsh	r3, [r3, r2]
 8000714:	121b      	asrs	r3, r3, #8
 8000716:	b2da      	uxtb	r2, r3
 8000718:	4b81      	ldr	r3, [pc, #516]	; (8000920 <HAL_TIM_OC_DelayElapsedCallback+0x6dc>)
 800071a:	711a      	strb	r2, [r3, #4]
          temps_buf[5] = (output1 & 0xFF);
 800071c:	2236      	movs	r2, #54	; 0x36
 800071e:	18bb      	adds	r3, r7, r2
 8000720:	881b      	ldrh	r3, [r3, #0]
 8000722:	b2da      	uxtb	r2, r3
 8000724:	4b7e      	ldr	r3, [pc, #504]	; (8000920 <HAL_TIM_OC_DelayElapsedCallback+0x6dc>)
 8000726:	715a      	strb	r2, [r3, #5]
          temps_buf[6] = ((output2 & 0xFF00) >> 8);
 8000728:	2234      	movs	r2, #52	; 0x34
 800072a:	18bb      	adds	r3, r7, r2
 800072c:	2200      	movs	r2, #0
 800072e:	5e9b      	ldrsh	r3, [r3, r2]
 8000730:	121b      	asrs	r3, r3, #8
 8000732:	b2da      	uxtb	r2, r3
 8000734:	4b7a      	ldr	r3, [pc, #488]	; (8000920 <HAL_TIM_OC_DelayElapsedCallback+0x6dc>)
 8000736:	719a      	strb	r2, [r3, #6]
          temps_buf[7] = (output2 & 0xFF);
 8000738:	2234      	movs	r2, #52	; 0x34
 800073a:	18bb      	adds	r3, r7, r2
 800073c:	881b      	ldrh	r3, [r3, #0]
 800073e:	b2da      	uxtb	r2, r3
 8000740:	4b77      	ldr	r3, [pc, #476]	; (8000920 <HAL_TIM_OC_DelayElapsedCallback+0x6dc>)
 8000742:	71da      	strb	r2, [r3, #7]
          temps_buf[8] = ((output3 & 0xFF00) >> 8);
 8000744:	2232      	movs	r2, #50	; 0x32
 8000746:	18bb      	adds	r3, r7, r2
 8000748:	2200      	movs	r2, #0
 800074a:	5e9b      	ldrsh	r3, [r3, r2]
 800074c:	121b      	asrs	r3, r3, #8
 800074e:	b2da      	uxtb	r2, r3
 8000750:	4b73      	ldr	r3, [pc, #460]	; (8000920 <HAL_TIM_OC_DelayElapsedCallback+0x6dc>)
 8000752:	721a      	strb	r2, [r3, #8]
          temps_buf[9] = (output3 & 0xFF);
 8000754:	2232      	movs	r2, #50	; 0x32
 8000756:	18bb      	adds	r3, r7, r2
 8000758:	881b      	ldrh	r3, [r3, #0]
 800075a:	b2da      	uxtb	r2, r3
 800075c:	4b70      	ldr	r3, [pc, #448]	; (8000920 <HAL_TIM_OC_DelayElapsedCallback+0x6dc>)
 800075e:	725a      	strb	r2, [r3, #9]
          temps_buf[10] = ((output4 & 0xFF00) >> 8);
 8000760:	2230      	movs	r2, #48	; 0x30
 8000762:	18bb      	adds	r3, r7, r2
 8000764:	2200      	movs	r2, #0
 8000766:	5e9b      	ldrsh	r3, [r3, r2]
 8000768:	121b      	asrs	r3, r3, #8
 800076a:	b2da      	uxtb	r2, r3
 800076c:	4b6c      	ldr	r3, [pc, #432]	; (8000920 <HAL_TIM_OC_DelayElapsedCallback+0x6dc>)
 800076e:	729a      	strb	r2, [r3, #10]
          temps_buf[11] = (output4 & 0xFF);
 8000770:	2230      	movs	r2, #48	; 0x30
 8000772:	18bb      	adds	r3, r7, r2
 8000774:	881b      	ldrh	r3, [r3, #0]
 8000776:	b2da      	uxtb	r2, r3
 8000778:	4b69      	ldr	r3, [pc, #420]	; (8000920 <HAL_TIM_OC_DelayElapsedCallback+0x6dc>)
 800077a:	72da      	strb	r2, [r3, #11]

          hk_buf[0] = hk_sync;                     // HK SYNC 0xCC MSB					0 SYNC
 800077c:	22cc      	movs	r2, #204	; 0xcc
 800077e:	4b69      	ldr	r3, [pc, #420]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 8000780:	701a      	strb	r2, [r3, #0]
          hk_buf[1] = hk_sync;                     // HK SYNC 0xCC LSB
 8000782:	22cc      	movs	r2, #204	; 0xcc
 8000784:	4b67      	ldr	r3, [pc, #412]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 8000786:	705a      	strb	r2, [r3, #1]
          hk_buf[2] = ((hk_seq & 0xFF00) >> 8);    // HK SEQ # MSB		1 SEQUENCE
 8000788:	4b67      	ldr	r3, [pc, #412]	; (8000928 <HAL_TIM_OC_DelayElapsedCallback+0x6e4>)
 800078a:	881b      	ldrh	r3, [r3, #0]
 800078c:	0a1b      	lsrs	r3, r3, #8
 800078e:	b29b      	uxth	r3, r3
 8000790:	b2da      	uxtb	r2, r3
 8000792:	4b64      	ldr	r3, [pc, #400]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 8000794:	709a      	strb	r2, [r3, #2]
          hk_buf[3] = (hk_seq & 0xFF);             // HK SEQ # LSB
 8000796:	4b64      	ldr	r3, [pc, #400]	; (8000928 <HAL_TIM_OC_DelayElapsedCallback+0x6e4>)
 8000798:	881b      	ldrh	r3, [r3, #0]
 800079a:	b2da      	uxtb	r2, r3
 800079c:	4b61      	ldr	r3, [pc, #388]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 800079e:	70da      	strb	r2, [r3, #3]
          hk_buf[4] = ((PA1 & 0xFF00) >> 8);       // BUS_Imon MSB			2 BUS_IMON PA1
 80007a0:	187b      	adds	r3, r7, r1
 80007a2:	881b      	ldrh	r3, [r3, #0]
 80007a4:	0a1b      	lsrs	r3, r3, #8
 80007a6:	b29b      	uxth	r3, r3
 80007a8:	b2da      	uxtb	r2, r3
 80007aa:	4b5e      	ldr	r3, [pc, #376]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 80007ac:	711a      	strb	r2, [r3, #4]
          hk_buf[5] = (PA1 & 0xFF);                // BUS_Imon LSB
 80007ae:	187b      	adds	r3, r7, r1
 80007b0:	881b      	ldrh	r3, [r3, #0]
 80007b2:	b2da      	uxtb	r2, r3
 80007b4:	4b5b      	ldr	r3, [pc, #364]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 80007b6:	715a      	strb	r2, [r3, #5]
          hk_buf[6] = ((PA2 & 0xFF00) >> 8);       // BUS_Vmon MSB			3 BUS_VMON PA2
 80007b8:	183b      	adds	r3, r7, r0
 80007ba:	881b      	ldrh	r3, [r3, #0]
 80007bc:	0a1b      	lsrs	r3, r3, #8
 80007be:	b29b      	uxth	r3, r3
 80007c0:	b2da      	uxtb	r2, r3
 80007c2:	4b58      	ldr	r3, [pc, #352]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 80007c4:	719a      	strb	r2, [r3, #6]
          hk_buf[7] = (PA2 & 0xFF);                // BUS_Vmon LSB
 80007c6:	183b      	adds	r3, r7, r0
 80007c8:	881b      	ldrh	r3, [r3, #0]
 80007ca:	b2da      	uxtb	r2, r3
 80007cc:	4b55      	ldr	r3, [pc, #340]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 80007ce:	71da      	strb	r2, [r3, #7]
          hk_buf[8] = ((PA3 & 0xFF00) >> 8);       // 3v3_mon MSB			4 3v3_MON PA3
 80007d0:	193b      	adds	r3, r7, r4
 80007d2:	881b      	ldrh	r3, [r3, #0]
 80007d4:	0a1b      	lsrs	r3, r3, #8
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	4b52      	ldr	r3, [pc, #328]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 80007dc:	721a      	strb	r2, [r3, #8]
          hk_buf[9] = (PA3 & 0xFF);                // 3v3_mon LSB
 80007de:	193b      	adds	r3, r7, r4
 80007e0:	881b      	ldrh	r3, [r3, #0]
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	4b4f      	ldr	r3, [pc, #316]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 80007e6:	725a      	strb	r2, [r3, #9]
          hk_buf[10] = ((PA5 & 0xFF00) >> 8);      // n150v_mon MSB		5 N150V_MON PA5
 80007e8:	197b      	adds	r3, r7, r5
 80007ea:	881b      	ldrh	r3, [r3, #0]
 80007ec:	0a1b      	lsrs	r3, r3, #8
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	b2da      	uxtb	r2, r3
 80007f2:	4b4c      	ldr	r3, [pc, #304]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 80007f4:	729a      	strb	r2, [r3, #10]
          hk_buf[11] = (PA5 & 0xFF);               // n150v_mon LSB
 80007f6:	197b      	adds	r3, r7, r5
 80007f8:	881b      	ldrh	r3, [r3, #0]
 80007fa:	b2da      	uxtb	r2, r3
 80007fc:	4b49      	ldr	r3, [pc, #292]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 80007fe:	72da      	strb	r2, [r3, #11]
          hk_buf[12] = ((PA6 & 0xFF00) >> 8);      // n800v_mon MSB		6 N800V_MON PA6
 8000800:	19bb      	adds	r3, r7, r6
 8000802:	881b      	ldrh	r3, [r3, #0]
 8000804:	0a1b      	lsrs	r3, r3, #8
 8000806:	b29b      	uxth	r3, r3
 8000808:	b2da      	uxtb	r2, r3
 800080a:	4b46      	ldr	r3, [pc, #280]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 800080c:	731a      	strb	r2, [r3, #12]
          hk_buf[13] = (PA6 & 0xFF);               // n800v_mon LSB
 800080e:	19bb      	adds	r3, r7, r6
 8000810:	881b      	ldrh	r3, [r3, #0]
 8000812:	b2da      	uxtb	r2, r3
 8000814:	4b43      	ldr	r3, [pc, #268]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 8000816:	735a      	strb	r2, [r3, #13]
          hk_buf[14] = ((PC0 & 0xFF00) >> 8);      // 2v5_mon MSB			7 2V5_MON PC0
 8000818:	211a      	movs	r1, #26
 800081a:	187b      	adds	r3, r7, r1
 800081c:	881b      	ldrh	r3, [r3, #0]
 800081e:	0a1b      	lsrs	r3, r3, #8
 8000820:	b29b      	uxth	r3, r3
 8000822:	b2da      	uxtb	r2, r3
 8000824:	4b3f      	ldr	r3, [pc, #252]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 8000826:	739a      	strb	r2, [r3, #14]
          hk_buf[15] = (PC0 & 0xFF);               // 2v5_mon LSB
 8000828:	187b      	adds	r3, r7, r1
 800082a:	881b      	ldrh	r3, [r3, #0]
 800082c:	b2da      	uxtb	r2, r3
 800082e:	4b3d      	ldr	r3, [pc, #244]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 8000830:	73da      	strb	r2, [r3, #15]
          hk_buf[16] = ((PC1 & 0xFF00) >> 8);      // n5v_mon MSB			8 N5V_MON PC1
 8000832:	2118      	movs	r1, #24
 8000834:	187b      	adds	r3, r7, r1
 8000836:	881b      	ldrh	r3, [r3, #0]
 8000838:	0a1b      	lsrs	r3, r3, #8
 800083a:	b29b      	uxth	r3, r3
 800083c:	b2da      	uxtb	r2, r3
 800083e:	4b39      	ldr	r3, [pc, #228]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 8000840:	741a      	strb	r2, [r3, #16]
          hk_buf[17] = (PC1 & 0xFF);               // n5v_mon LSB
 8000842:	187b      	adds	r3, r7, r1
 8000844:	881b      	ldrh	r3, [r3, #0]
 8000846:	b2da      	uxtb	r2, r3
 8000848:	4b36      	ldr	r3, [pc, #216]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 800084a:	745a      	strb	r2, [r3, #17]
          hk_buf[18] = ((PC2 & 0xFF00) >> 8);      // 5v_mon MSB			9 5V_MON PC2
 800084c:	2116      	movs	r1, #22
 800084e:	187b      	adds	r3, r7, r1
 8000850:	881b      	ldrh	r3, [r3, #0]
 8000852:	0a1b      	lsrs	r3, r3, #8
 8000854:	b29b      	uxth	r3, r3
 8000856:	b2da      	uxtb	r2, r3
 8000858:	4b32      	ldr	r3, [pc, #200]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 800085a:	749a      	strb	r2, [r3, #18]
          hk_buf[19] = (PC2 & 0xFF);               // 5v_mon LSB
 800085c:	187b      	adds	r3, r7, r1
 800085e:	881b      	ldrh	r3, [r3, #0]
 8000860:	b2da      	uxtb	r2, r3
 8000862:	4b30      	ldr	r3, [pc, #192]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 8000864:	74da      	strb	r2, [r3, #19]
          hk_buf[20] = ((PC3 & 0xFF00) >> 8);      // n3v3_mon MSB			10 N3V3_MON PC3
 8000866:	2114      	movs	r1, #20
 8000868:	187b      	adds	r3, r7, r1
 800086a:	881b      	ldrh	r3, [r3, #0]
 800086c:	0a1b      	lsrs	r3, r3, #8
 800086e:	b29b      	uxth	r3, r3
 8000870:	b2da      	uxtb	r2, r3
 8000872:	4b2c      	ldr	r3, [pc, #176]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 8000874:	751a      	strb	r2, [r3, #20]
          hk_buf[21] = (PC3 & 0xFF);               // n3v3_mon LSB
 8000876:	187b      	adds	r3, r7, r1
 8000878:	881b      	ldrh	r3, [r3, #0]
 800087a:	b2da      	uxtb	r2, r3
 800087c:	4b29      	ldr	r3, [pc, #164]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 800087e:	755a      	strb	r2, [r3, #21]
          hk_buf[22] = ((PC4 & 0xFF00) >> 8);      // 5vref_mon MSB		11 5VREF_MON PC4
 8000880:	2112      	movs	r1, #18
 8000882:	187b      	adds	r3, r7, r1
 8000884:	881b      	ldrh	r3, [r3, #0]
 8000886:	0a1b      	lsrs	r3, r3, #8
 8000888:	b29b      	uxth	r3, r3
 800088a:	b2da      	uxtb	r2, r3
 800088c:	4b25      	ldr	r3, [pc, #148]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 800088e:	759a      	strb	r2, [r3, #22]
          hk_buf[23] = (PC4 & 0xFF);               // 5vref_mon LSB
 8000890:	187b      	adds	r3, r7, r1
 8000892:	881b      	ldrh	r3, [r3, #0]
 8000894:	b2da      	uxtb	r2, r3
 8000896:	4b23      	ldr	r3, [pc, #140]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 8000898:	75da      	strb	r2, [r3, #23]
          hk_buf[24] = ((PC5 & 0xFF00) >> 8);      // 15v_mon MSB			12 15V_MON PC5
 800089a:	2110      	movs	r1, #16
 800089c:	187b      	adds	r3, r7, r1
 800089e:	881b      	ldrh	r3, [r3, #0]
 80008a0:	0a1b      	lsrs	r3, r3, #8
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	b2da      	uxtb	r2, r3
 80008a6:	4b1f      	ldr	r3, [pc, #124]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 80008a8:	761a      	strb	r2, [r3, #24]
          hk_buf[25] = (PC5 & 0xFF);               // 15v_mon LSB
 80008aa:	187b      	adds	r3, r7, r1
 80008ac:	881b      	ldrh	r3, [r3, #0]
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	4b1c      	ldr	r3, [pc, #112]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 80008b2:	765a      	strb	r2, [r3, #25]
          hk_buf[26] = ((MCU_TEMP & 0xFF00) >> 8); // VSENSE MSB		13 VSENSE
 80008b4:	210e      	movs	r1, #14
 80008b6:	187b      	adds	r3, r7, r1
 80008b8:	881b      	ldrh	r3, [r3, #0]
 80008ba:	0a1b      	lsrs	r3, r3, #8
 80008bc:	b29b      	uxth	r3, r3
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	4b18      	ldr	r3, [pc, #96]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 80008c2:	769a      	strb	r2, [r3, #26]
          hk_buf[27] = (MCU_TEMP & 0xFF);          // VSENSE LSB
 80008c4:	187b      	adds	r3, r7, r1
 80008c6:	881b      	ldrh	r3, [r3, #0]
 80008c8:	b2da      	uxtb	r2, r3
 80008ca:	4b16      	ldr	r3, [pc, #88]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 80008cc:	76da      	strb	r2, [r3, #27]

          if (HK_ON)
 80008ce:	4b17      	ldr	r3, [pc, #92]	; (800092c <HAL_TIM_OC_DelayElapsedCallback+0x6e8>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d00c      	beq.n	80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x6ac>
          {
            HAL_UART_Transmit(&huart1, temps_buf, sizeof(temps_buf), HAL_MAX_DELAY);
 80008d6:	2301      	movs	r3, #1
 80008d8:	425b      	negs	r3, r3
 80008da:	4911      	ldr	r1, [pc, #68]	; (8000920 <HAL_TIM_OC_DelayElapsedCallback+0x6dc>)
 80008dc:	4814      	ldr	r0, [pc, #80]	; (8000930 <HAL_TIM_OC_DelayElapsedCallback+0x6ec>)
 80008de:	220c      	movs	r2, #12
 80008e0:	f005 fa60 	bl	8005da4 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart1, hk_buf, sizeof(hk_buf), 100);
 80008e4:	490f      	ldr	r1, [pc, #60]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 80008e6:	4812      	ldr	r0, [pc, #72]	; (8000930 <HAL_TIM_OC_DelayElapsedCallback+0x6ec>)
 80008e8:	2364      	movs	r3, #100	; 0x64
 80008ea:	2220      	movs	r2, #32
 80008ec:	f005 fa5a 	bl	8005da4 <HAL_UART_Transmit>
          }
          hk_counter = 1;
 80008f0:	4b10      	ldr	r3, [pc, #64]	; (8000934 <HAL_TIM_OC_DelayElapsedCallback+0x6f0>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	601a      	str	r2, [r3, #0]
          hk_seq++;
 80008f6:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <HAL_TIM_OC_DelayElapsedCallback+0x6e4>)
 80008f8:	881b      	ldrh	r3, [r3, #0]
 80008fa:	3301      	adds	r3, #1
 80008fc:	b29a      	uxth	r2, r3
 80008fe:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <HAL_TIM_OC_DelayElapsedCallback+0x6e4>)
 8000900:	801a      	strh	r2, [r3, #0]
      }
    }
  }

  /* Timer 3 also called but doesn't need to do anything on IT */
}
 8000902:	e063      	b.n	80009cc <HAL_TIM_OC_DelayElapsedCallback+0x788>
          hk_counter++;
 8000904:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <HAL_TIM_OC_DelayElapsedCallback+0x6f0>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	1c5a      	adds	r2, r3, #1
 800090a:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <HAL_TIM_OC_DelayElapsedCallback+0x6f0>)
 800090c:	601a      	str	r2, [r3, #0]
}
 800090e:	e05d      	b.n	80009cc <HAL_TIM_OC_DelayElapsedCallback+0x788>
 8000910:	200000dc 	.word	0x200000dc
 8000914:	0800752c 	.word	0x0800752c
 8000918:	20000370 	.word	0x20000370
 800091c:	20000044 	.word	0x20000044
 8000920:	200003dc 	.word	0x200003dc
 8000924:	200003b4 	.word	0x200003b4
 8000928:	200003d4 	.word	0x200003d4
 800092c:	2000001a 	.word	0x2000001a
 8000930:	20000280 	.word	0x20000280
 8000934:	200003d8 	.word	0x200003d8
  else if (htim == &htim1)
 8000938:	687a      	ldr	r2, [r7, #4]
 800093a:	4b26      	ldr	r3, [pc, #152]	; (80009d4 <HAL_TIM_OC_DelayElapsedCallback+0x790>)
 800093c:	429a      	cmp	r2, r3
 800093e:	d145      	bne.n	80009cc <HAL_TIM_OC_DelayElapsedCallback+0x788>
    if (PMT_ON)
 8000940:	4b25      	ldr	r3, [pc, #148]	; (80009d8 <HAL_TIM_OC_DelayElapsedCallback+0x794>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d041      	beq.n	80009cc <HAL_TIM_OC_DelayElapsedCallback+0x788>
      if (!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)))
 8000948:	2380      	movs	r3, #128	; 0x80
 800094a:	011b      	lsls	r3, r3, #4
 800094c:	4a23      	ldr	r2, [pc, #140]	; (80009dc <HAL_TIM_OC_DelayElapsedCallback+0x798>)
 800094e:	0019      	movs	r1, r3
 8000950:	0010      	movs	r0, r2
 8000952:	f002 fb4f 	bl	8002ff4 <HAL_GPIO_ReadPin>
 8000956:	1e03      	subs	r3, r0, #0
 8000958:	d138      	bne.n	80009cc <HAL_TIM_OC_DelayElapsedCallback+0x788>
        HAL_SPI_Transmit(&hspi2, (uint8_t *)&WRITE, 1, 1);
 800095a:	4921      	ldr	r1, [pc, #132]	; (80009e0 <HAL_TIM_OC_DelayElapsedCallback+0x79c>)
 800095c:	4821      	ldr	r0, [pc, #132]	; (80009e4 <HAL_TIM_OC_DelayElapsedCallback+0x7a0>)
 800095e:	2301      	movs	r3, #1
 8000960:	2201      	movs	r2, #1
 8000962:	f003 feed 	bl	8004740 <HAL_SPI_Transmit>
        while (!(SPI2->SR))
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	4b1f      	ldr	r3, [pc, #124]	; (80009e8 <HAL_TIM_OC_DelayElapsedCallback+0x7a4>)
 800096a:	689b      	ldr	r3, [r3, #8]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d0fb      	beq.n	8000968 <HAL_TIM_OC_DelayElapsedCallback+0x724>
        raw = SPI2->DR;
 8000970:	4b1d      	ldr	r3, [pc, #116]	; (80009e8 <HAL_TIM_OC_DelayElapsedCallback+0x7a4>)
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	001a      	movs	r2, r3
 8000976:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <HAL_TIM_OC_DelayElapsedCallback+0x7a8>)
 8000978:	601a      	str	r2, [r3, #0]
        pmt_buf[0] = pmt_sync;
 800097a:	22bb      	movs	r2, #187	; 0xbb
 800097c:	4b1c      	ldr	r3, [pc, #112]	; (80009f0 <HAL_TIM_OC_DelayElapsedCallback+0x7ac>)
 800097e:	701a      	strb	r2, [r3, #0]
        pmt_buf[1] = pmt_sync;
 8000980:	22bb      	movs	r2, #187	; 0xbb
 8000982:	4b1b      	ldr	r3, [pc, #108]	; (80009f0 <HAL_TIM_OC_DelayElapsedCallback+0x7ac>)
 8000984:	705a      	strb	r2, [r3, #1]
        pmt_buf[2] = ((pmt_seq & 0xFF00) >> 8);
 8000986:	4b1b      	ldr	r3, [pc, #108]	; (80009f4 <HAL_TIM_OC_DelayElapsedCallback+0x7b0>)
 8000988:	881b      	ldrh	r3, [r3, #0]
 800098a:	0a1b      	lsrs	r3, r3, #8
 800098c:	b29b      	uxth	r3, r3
 800098e:	b2da      	uxtb	r2, r3
 8000990:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <HAL_TIM_OC_DelayElapsedCallback+0x7ac>)
 8000992:	709a      	strb	r2, [r3, #2]
        pmt_buf[3] = (pmt_seq & 0xFF);
 8000994:	4b17      	ldr	r3, [pc, #92]	; (80009f4 <HAL_TIM_OC_DelayElapsedCallback+0x7b0>)
 8000996:	881b      	ldrh	r3, [r3, #0]
 8000998:	b2da      	uxtb	r2, r3
 800099a:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <HAL_TIM_OC_DelayElapsedCallback+0x7ac>)
 800099c:	70da      	strb	r2, [r3, #3]
        pmt_buf[4] = ((raw & 0xFF00) >> 8);
 800099e:	4b13      	ldr	r3, [pc, #76]	; (80009ec <HAL_TIM_OC_DelayElapsedCallback+0x7a8>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	121b      	asrs	r3, r3, #8
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <HAL_TIM_OC_DelayElapsedCallback+0x7ac>)
 80009a8:	711a      	strb	r2, [r3, #4]
        pmt_buf[5] = (raw & 0xFF);
 80009aa:	4b10      	ldr	r3, [pc, #64]	; (80009ec <HAL_TIM_OC_DelayElapsedCallback+0x7a8>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	b2da      	uxtb	r2, r3
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <HAL_TIM_OC_DelayElapsedCallback+0x7ac>)
 80009b2:	715a      	strb	r2, [r3, #5]
        pmt_seq++;
 80009b4:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <HAL_TIM_OC_DelayElapsedCallback+0x7b0>)
 80009b6:	881b      	ldrh	r3, [r3, #0]
 80009b8:	3301      	adds	r3, #1
 80009ba:	b29a      	uxth	r2, r3
 80009bc:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <HAL_TIM_OC_DelayElapsedCallback+0x7b0>)
 80009be:	801a      	strh	r2, [r3, #0]
        HAL_UART_Transmit(&huart1, pmt_buf, sizeof(pmt_buf), 100);
 80009c0:	490b      	ldr	r1, [pc, #44]	; (80009f0 <HAL_TIM_OC_DelayElapsedCallback+0x7ac>)
 80009c2:	480d      	ldr	r0, [pc, #52]	; (80009f8 <HAL_TIM_OC_DelayElapsedCallback+0x7b4>)
 80009c4:	2364      	movs	r3, #100	; 0x64
 80009c6:	2206      	movs	r2, #6
 80009c8:	f005 f9ec 	bl	8005da4 <HAL_UART_Transmit>
}
 80009cc:	46c0      	nop			; (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	b00f      	add	sp, #60	; 0x3c
 80009d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009d4:	200001f0 	.word	0x200001f0
 80009d8:	20000018 	.word	0x20000018
 80009dc:	48000400 	.word	0x48000400
 80009e0:	08007558 	.word	0x08007558
 80009e4:	2000018c 	.word	0x2000018c
 80009e8:	40003800 	.word	0x40003800
 80009ec:	20000394 	.word	0x20000394
 80009f0:	200003ac 	.word	0x200003ac
 80009f4:	200003b2 	.word	0x200003b2
 80009f8:	20000280 	.word	0x20000280

080009fc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]

//  HAL_UART_Receive_IT(&huart1, rx_buf, 1);
  char key = rx_buf[0];
 8000a04:	210f      	movs	r1, #15
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	4a70      	ldr	r2, [pc, #448]	; (8000bcc <HAL_UART_RxCpltCallback+0x1d0>)
 8000a0a:	7812      	ldrb	r2, [r2, #0]
 8000a0c:	701a      	strb	r2, [r3, #0]

  switch (key)
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	3b21      	subs	r3, #33	; 0x21
 8000a14:	2b52      	cmp	r3, #82	; 0x52
 8000a16:	d900      	bls.n	8000a1a <HAL_UART_RxCpltCallback+0x1e>
 8000a18:	e0d3      	b.n	8000bc2 <HAL_UART_RxCpltCallback+0x1c6>
 8000a1a:	009a      	lsls	r2, r3, #2
 8000a1c:	4b6c      	ldr	r3, [pc, #432]	; (8000bd0 <HAL_UART_RxCpltCallback+0x1d4>)
 8000a1e:	18d3      	adds	r3, r2, r3
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	469f      	mov	pc, r3
  {

  case 'G':
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000a24:	4b6b      	ldr	r3, [pc, #428]	; (8000bd4 <HAL_UART_RxCpltCallback+0x1d8>)
 8000a26:	2140      	movs	r1, #64	; 0x40
 8000a28:	2201      	movs	r2, #1
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f002 faff 	bl	800302e <HAL_GPIO_WritePin>
    break;
 8000a30:	e0c7      	b.n	8000bc2 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case 'H':
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000a32:	4b68      	ldr	r3, [pc, #416]	; (8000bd4 <HAL_UART_RxCpltCallback+0x1d8>)
 8000a34:	2140      	movs	r1, #64	; 0x40
 8000a36:	2200      	movs	r2, #0
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f002 faf8 	bl	800302e <HAL_GPIO_WritePin>
    break;
 8000a3e:	e0c0      	b.n	8000bc2 <HAL_UART_RxCpltCallback+0x1c6>
  }

  case 'I':
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_SET);
 8000a40:	4b64      	ldr	r3, [pc, #400]	; (8000bd4 <HAL_UART_RxCpltCallback+0x1d8>)
 8000a42:	2180      	movs	r1, #128	; 0x80
 8000a44:	2201      	movs	r2, #1
 8000a46:	0018      	movs	r0, r3
 8000a48:	f002 faf1 	bl	800302e <HAL_GPIO_WritePin>
    break;
 8000a4c:	e0b9      	b.n	8000bc2 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case 'J':
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_RESET);
 8000a4e:	4b61      	ldr	r3, [pc, #388]	; (8000bd4 <HAL_UART_RxCpltCallback+0x1d8>)
 8000a50:	2180      	movs	r1, #128	; 0x80
 8000a52:	2200      	movs	r2, #0
 8000a54:	0018      	movs	r0, r3
 8000a56:	f002 faea 	bl	800302e <HAL_GPIO_WritePin>
    break;
 8000a5a:	e0b2      	b.n	8000bc2 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '<':
  {
    if (step < 5)
 8000a5c:	4b5e      	ldr	r3, [pc, #376]	; (8000bd8 <HAL_UART_RxCpltCallback+0x1dc>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b04      	cmp	r3, #4
 8000a62:	d900      	bls.n	8000a66 <HAL_UART_RxCpltCallback+0x6a>
 8000a64:	e0aa      	b.n	8000bbc <HAL_UART_RxCpltCallback+0x1c0>
    {
      step++;
 8000a66:	4b5c      	ldr	r3, [pc, #368]	; (8000bd8 <HAL_UART_RxCpltCallback+0x1dc>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	4b5a      	ldr	r3, [pc, #360]	; (8000bd8 <HAL_UART_RxCpltCallback+0x1dc>)
 8000a70:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000a72:	e0a3      	b.n	8000bbc <HAL_UART_RxCpltCallback+0x1c0>
  }
  case '>':
  {
    if (step > 0)
 8000a74:	4b58      	ldr	r3, [pc, #352]	; (8000bd8 <HAL_UART_RxCpltCallback+0x1dc>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d100      	bne.n	8000a7e <HAL_UART_RxCpltCallback+0x82>
 8000a7c:	e0a0      	b.n	8000bc0 <HAL_UART_RxCpltCallback+0x1c4>
    {
      step--;
 8000a7e:	4b56      	ldr	r3, [pc, #344]	; (8000bd8 <HAL_UART_RxCpltCallback+0x1dc>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	3b01      	subs	r3, #1
 8000a84:	b2da      	uxtb	r2, r3
 8000a86:	4b54      	ldr	r3, [pc, #336]	; (8000bd8 <HAL_UART_RxCpltCallback+0x1dc>)
 8000a88:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000a8a:	e099      	b.n	8000bc0 <HAL_UART_RxCpltCallback+0x1c4>
  }
  case 'a':
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000a8c:	4b53      	ldr	r3, [pc, #332]	; (8000bdc <HAL_UART_RxCpltCallback+0x1e0>)
 8000a8e:	2120      	movs	r1, #32
 8000a90:	2201      	movs	r2, #1
 8000a92:	0018      	movs	r0, r3
 8000a94:	f002 facb 	bl	800302e <HAL_GPIO_WritePin>
    break;
 8000a98:	e093      	b.n	8000bc2 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '$':
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8000a9a:	4b50      	ldr	r3, [pc, #320]	; (8000bdc <HAL_UART_RxCpltCallback+0x1e0>)
 8000a9c:	2120      	movs	r1, #32
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f002 fac4 	bl	800302e <HAL_GPIO_WritePin>
    break;
 8000aa6:	e08c      	b.n	8000bc2 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case 'b':
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000aa8:	4b4c      	ldr	r3, [pc, #304]	; (8000bdc <HAL_UART_RxCpltCallback+0x1e0>)
 8000aaa:	2140      	movs	r1, #64	; 0x40
 8000aac:	2201      	movs	r2, #1
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f002 fabd 	bl	800302e <HAL_GPIO_WritePin>
    break;
 8000ab4:	e085      	b.n	8000bc2 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '%':
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000ab6:	4b49      	ldr	r3, [pc, #292]	; (8000bdc <HAL_UART_RxCpltCallback+0x1e0>)
 8000ab8:	2140      	movs	r1, #64	; 0x40
 8000aba:	2200      	movs	r2, #0
 8000abc:	0018      	movs	r0, r3
 8000abe:	f002 fab6 	bl	800302e <HAL_GPIO_WritePin>
    break;
 8000ac2:	e07e      	b.n	8000bc2 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case 'c':
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000ac4:	4846      	ldr	r0, [pc, #280]	; (8000be0 <HAL_UART_RxCpltCallback+0x1e4>)
 8000ac6:	2380      	movs	r3, #128	; 0x80
 8000ac8:	00db      	lsls	r3, r3, #3
 8000aca:	2201      	movs	r2, #1
 8000acc:	0019      	movs	r1, r3
 8000ace:	f002 faae 	bl	800302e <HAL_GPIO_WritePin>
    break;
 8000ad2:	e076      	b.n	8000bc2 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '^':
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000ad4:	4842      	ldr	r0, [pc, #264]	; (8000be0 <HAL_UART_RxCpltCallback+0x1e4>)
 8000ad6:	2380      	movs	r3, #128	; 0x80
 8000ad8:	00db      	lsls	r3, r3, #3
 8000ada:	2200      	movs	r2, #0
 8000adc:	0019      	movs	r1, r3
 8000ade:	f002 faa6 	bl	800302e <HAL_GPIO_WritePin>
    break;
 8000ae2:	e06e      	b.n	8000bc2 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case 'd':
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000ae4:	483e      	ldr	r0, [pc, #248]	; (8000be0 <HAL_UART_RxCpltCallback+0x1e4>)
 8000ae6:	2380      	movs	r3, #128	; 0x80
 8000ae8:	019b      	lsls	r3, r3, #6
 8000aea:	2201      	movs	r2, #1
 8000aec:	0019      	movs	r1, r3
 8000aee:	f002 fa9e 	bl	800302e <HAL_GPIO_WritePin>
    break;
 8000af2:	e066      	b.n	8000bc2 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '&':
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000af4:	483a      	ldr	r0, [pc, #232]	; (8000be0 <HAL_UART_RxCpltCallback+0x1e4>)
 8000af6:	2380      	movs	r3, #128	; 0x80
 8000af8:	019b      	lsls	r3, r3, #6
 8000afa:	2200      	movs	r2, #0
 8000afc:	0019      	movs	r1, r3
 8000afe:	f002 fa96 	bl	800302e <HAL_GPIO_WritePin>
    break;
 8000b02:	e05e      	b.n	8000bc2 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case 'e':
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000b04:	4b36      	ldr	r3, [pc, #216]	; (8000be0 <HAL_UART_RxCpltCallback+0x1e4>)
 8000b06:	2180      	movs	r1, #128	; 0x80
 8000b08:	2201      	movs	r2, #1
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f002 fa8f 	bl	800302e <HAL_GPIO_WritePin>
    break;
 8000b10:	e057      	b.n	8000bc2 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '*':
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000b12:	4b33      	ldr	r3, [pc, #204]	; (8000be0 <HAL_UART_RxCpltCallback+0x1e4>)
 8000b14:	2180      	movs	r1, #128	; 0x80
 8000b16:	2200      	movs	r2, #0
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f002 fa88 	bl	800302e <HAL_GPIO_WritePin>
    break;
 8000b1e:	e050      	b.n	8000bc2 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case 'f':
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000b20:	482f      	ldr	r0, [pc, #188]	; (8000be0 <HAL_UART_RxCpltCallback+0x1e4>)
 8000b22:	2380      	movs	r3, #128	; 0x80
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	2201      	movs	r2, #1
 8000b28:	0019      	movs	r1, r3
 8000b2a:	f002 fa80 	bl	800302e <HAL_GPIO_WritePin>
    break;
 8000b2e:	e048      	b.n	8000bc2 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '(':
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000b30:	482b      	ldr	r0, [pc, #172]	; (8000be0 <HAL_UART_RxCpltCallback+0x1e4>)
 8000b32:	2380      	movs	r3, #128	; 0x80
 8000b34:	005b      	lsls	r3, r3, #1
 8000b36:	2200      	movs	r2, #0
 8000b38:	0019      	movs	r1, r3
 8000b3a:	f002 fa78 	bl	800302e <HAL_GPIO_WritePin>
    break;
 8000b3e:	e040      	b.n	8000bc2 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case 'g':
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000b40:	4827      	ldr	r0, [pc, #156]	; (8000be0 <HAL_UART_RxCpltCallback+0x1e4>)
 8000b42:	2380      	movs	r3, #128	; 0x80
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	2201      	movs	r2, #1
 8000b48:	0019      	movs	r1, r3
 8000b4a:	f002 fa70 	bl	800302e <HAL_GPIO_WritePin>
    break;
 8000b4e:	e038      	b.n	8000bc2 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case ')':
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000b50:	4823      	ldr	r0, [pc, #140]	; (8000be0 <HAL_UART_RxCpltCallback+0x1e4>)
 8000b52:	2380      	movs	r3, #128	; 0x80
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	2200      	movs	r2, #0
 8000b58:	0019      	movs	r1, r3
 8000b5a:	f002 fa68 	bl	800302e <HAL_GPIO_WritePin>
    break;
 8000b5e:	e030      	b.n	8000bc2 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case 'h':
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000b60:	4b1f      	ldr	r3, [pc, #124]	; (8000be0 <HAL_UART_RxCpltCallback+0x1e4>)
 8000b62:	2140      	movs	r1, #64	; 0x40
 8000b64:	2201      	movs	r2, #1
 8000b66:	0018      	movs	r0, r3
 8000b68:	f002 fa61 	bl	800302e <HAL_GPIO_WritePin>
    break;
 8000b6c:	e029      	b.n	8000bc2 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '-':
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000b6e:	4b1c      	ldr	r3, [pc, #112]	; (8000be0 <HAL_UART_RxCpltCallback+0x1e4>)
 8000b70:	2140      	movs	r1, #64	; 0x40
 8000b72:	2200      	movs	r2, #0
 8000b74:	0018      	movs	r0, r3
 8000b76:	f002 fa5a 	bl	800302e <HAL_GPIO_WritePin>
    break;
 8000b7a:	e022      	b.n	8000bc2 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case 's':
  {
      HAL_SuspendTick();
 8000b7c:	f001 f93e 	bl	8001dfc <HAL_SuspendTick>
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000b80:	2101      	movs	r1, #1
 8000b82:	2001      	movs	r0, #1
 8000b84:	f002 ffa6 	bl	8003ad4 <HAL_PWR_EnterSTOPMode>
      NVIC_SystemReset();
 8000b88:	f7ff fb4a 	bl	8000220 <__NVIC_SystemReset>
      break;
  }
  case '1':
  {
    PMT_ON = 1;
 8000b8c:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <HAL_UART_RxCpltCallback+0x1e8>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	701a      	strb	r2, [r3, #0]
    break;
 8000b92:	e016      	b.n	8000bc2 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '!':
  {
    PMT_ON = 0;
 8000b94:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <HAL_UART_RxCpltCallback+0x1e8>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	701a      	strb	r2, [r3, #0]
    break;
 8000b9a:	e012      	b.n	8000bc2 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '2':
  {
    ERPA_ON = 1;
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <HAL_UART_RxCpltCallback+0x1ec>)
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	701a      	strb	r2, [r3, #0]
    break;
 8000ba2:	e00e      	b.n	8000bc2 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '@':
  {
    ERPA_ON = 0;
 8000ba4:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <HAL_UART_RxCpltCallback+0x1ec>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	701a      	strb	r2, [r3, #0]
    break;
 8000baa:	e00a      	b.n	8000bc2 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '3':
  {
    HK_ON = 1;
 8000bac:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <HAL_UART_RxCpltCallback+0x1f0>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	701a      	strb	r2, [r3, #0]
    break;
 8000bb2:	e006      	b.n	8000bc2 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '#':
  {
    HK_ON = 0;
 8000bb4:	4b0d      	ldr	r3, [pc, #52]	; (8000bec <HAL_UART_RxCpltCallback+0x1f0>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	701a      	strb	r2, [r3, #0]
    break;
 8000bba:	e002      	b.n	8000bc2 <HAL_UART_RxCpltCallback+0x1c6>
    break;
 8000bbc:	46c0      	nop			; (mov r8, r8)
 8000bbe:	e000      	b.n	8000bc2 <HAL_UART_RxCpltCallback+0x1c6>
    break;
 8000bc0:	46c0      	nop			; (mov r8, r8)
  }
  }
}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	b004      	add	sp, #16
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	20000304 	.word	0x20000304
 8000bd0:	0800755c 	.word	0x0800755c
 8000bd4:	48001400 	.word	0x48001400
 8000bd8:	20000392 	.word	0x20000392
 8000bdc:	48000400 	.word	0x48000400
 8000be0:	48000800 	.word	0x48000800
 8000be4:	20000018 	.word	0x20000018
 8000be8:	20000019 	.word	0x20000019
 8000bec:	2000001a 	.word	0x2000001a

08000bf0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bf6:	f001 f89d 	bl	8001d34 <HAL_Init>
  int16_t val;
  float temp_c;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bfa:	f000 f873 	bl	8000ce4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bfe:	f000 fc77 	bl	80014f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c02:	f000 fc57 	bl	80014b4 <MX_DMA_Init>
  MX_SPI2_Init();
 8000c06:	f000 fa9b 	bl	8001140 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000c0a:	f000 fad9 	bl	80011c0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c0e:	f000 fb8f 	bl	8001330 <MX_TIM2_Init>
  MX_SPI1_Init();
 8000c12:	f000 fa55 	bl	80010c0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000c16:	f000 fc0d 	bl	8001434 <MX_USART1_UART_Init>
  MX_DAC1_Init();
 8000c1a:	f000 f9df 	bl	8000fdc <MX_DAC1_Init>
  MX_ADC_Init();
 8000c1e:	f000 f8cb 	bl	8000db8 <MX_ADC_Init>
  MX_I2C1_Init();
 8000c22:	f000 fa0d 	bl	8001040 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000c26:	4b29      	ldr	r3, [pc, #164]	; (8000ccc <main+0xdc>)
 8000c28:	2100      	movs	r1, #0
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f001 fe23 	bl	8002876 <HAL_DAC_Start>

  /* Start Timers with OC & Interrupt */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000c30:	4b27      	ldr	r3, [pc, #156]	; (8000cd0 <main+0xe0>)
 8000c32:	2100      	movs	r1, #0
 8000c34:	0018      	movs	r0, r3
 8000c36:	f004 f8f9 	bl	8004e2c <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000c3a:	4b26      	ldr	r3, [pc, #152]	; (8000cd4 <main+0xe4>)
 8000c3c:	210c      	movs	r1, #12
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f004 f8f4 	bl	8004e2c <HAL_TIM_OC_Start_IT>

  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8000c44:	46c0      	nop			; (mov r8, r8)
 8000c46:	4b24      	ldr	r3, [pc, #144]	; (8000cd8 <main+0xe8>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	69da      	ldr	r2, [r3, #28]
 8000c4c:	2380      	movs	r3, #128	; 0x80
 8000c4e:	025b      	lsls	r3, r3, #9
 8000c50:	401a      	ands	r2, r3
 8000c52:	2380      	movs	r3, #128	; 0x80
 8000c54:	025b      	lsls	r3, r3, #9
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d0f5      	beq.n	8000c46 <main+0x56>
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	4b1e      	ldr	r3, [pc, #120]	; (8000cd8 <main+0xe8>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	69da      	ldr	r2, [r3, #28]
 8000c62:	2380      	movs	r3, #128	; 0x80
 8000c64:	03db      	lsls	r3, r3, #15
 8000c66:	401a      	ands	r2, r3
 8000c68:	2380      	movs	r3, #128	; 0x80
 8000c6a:	03db      	lsls	r3, r3, #15
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d1f5      	bne.n	8000c5c <main+0x6c>

  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_ADDRESS;
 8000c70:	4b1a      	ldr	r3, [pc, #104]	; (8000cdc <main+0xec>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
  WakeUpSelection.AddressLength = UART_ADDRESS_DETECT_7B;
 8000c76:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <main+0xec>)
 8000c78:	2210      	movs	r2, #16
 8000c7a:	809a      	strh	r2, [r3, #4]
  WakeUpSelection.Address = 0x23; // send "£"
 8000c7c:	4b17      	ldr	r3, [pc, #92]	; (8000cdc <main+0xec>)
 8000c7e:	2223      	movs	r2, #35	; 0x23
 8000c80:	719a      	strb	r2, [r3, #6]

  if (HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection) != HAL_OK) {
 8000c82:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <main+0xec>)
 8000c84:	4814      	ldr	r0, [pc, #80]	; (8000cd8 <main+0xe8>)
 8000c86:	6819      	ldr	r1, [r3, #0]
 8000c88:	685a      	ldr	r2, [r3, #4]
 8000c8a:	f006 fb17 	bl	80072bc <HAL_UARTEx_StopModeWakeUpSourceConfig>
 8000c8e:	1e03      	subs	r3, r0, #0
 8000c90:	d001      	beq.n	8000c96 <main+0xa6>
      Error_Handler();
 8000c92:	f000 fcc7 	bl	8001624 <Error_Handler>
  }
  /* Enable the LPUART Wake UP from stop mode Interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8000c96:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <main+0xe8>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	689a      	ldr	r2, [r3, #8]
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <main+0xe8>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2180      	movs	r1, #128	; 0x80
 8000ca2:	03c9      	lsls	r1, r1, #15
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	609a      	str	r2, [r3, #8]

  /* enable MCU wake-up by LPUART */
  HAL_UARTEx_EnableStopMode(&huart1);
 8000ca8:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <main+0xe8>)
 8000caa:	0018      	movs	r0, r3
 8000cac:	f006 fb6c 	bl	8007388 <HAL_UARTEx_EnableStopMode>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000cb0:	490b      	ldr	r1, [pc, #44]	; (8000ce0 <main+0xf0>)
 8000cb2:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <main+0xe8>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f005 f9fa 	bl	80060b0 <HAL_UART_Receive_IT>

    HAL_UART_Receive(&huart1, rx_buf, 1, 0);
 8000cbc:	4908      	ldr	r1, [pc, #32]	; (8000ce0 <main+0xf0>)
 8000cbe:	4806      	ldr	r0, [pc, #24]	; (8000cd8 <main+0xe8>)
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	f005 f918 	bl	8005ef8 <HAL_UART_Receive>
	HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000cc8:	e7f2      	b.n	8000cb0 <main+0xc0>
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	200000c8 	.word	0x200000c8
 8000cd0:	200001f0 	.word	0x200001f0
 8000cd4:	20000238 	.word	0x20000238
 8000cd8:	20000280 	.word	0x20000280
 8000cdc:	20000368 	.word	0x20000368
 8000ce0:	20000304 	.word	0x20000304

08000ce4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000ce4:	b590      	push	{r4, r7, lr}
 8000ce6:	b097      	sub	sp, #92	; 0x5c
 8000ce8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cea:	2428      	movs	r4, #40	; 0x28
 8000cec:	193b      	adds	r3, r7, r4
 8000cee:	0018      	movs	r0, r3
 8000cf0:	2330      	movs	r3, #48	; 0x30
 8000cf2:	001a      	movs	r2, r3
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	f006 fbc1 	bl	800747c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cfa:	2318      	movs	r3, #24
 8000cfc:	18fb      	adds	r3, r7, r3
 8000cfe:	0018      	movs	r0, r3
 8000d00:	2310      	movs	r3, #16
 8000d02:	001a      	movs	r2, r3
 8000d04:	2100      	movs	r1, #0
 8000d06:	f006 fbb9 	bl	800747c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d0a:	1d3b      	adds	r3, r7, #4
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	2314      	movs	r3, #20
 8000d10:	001a      	movs	r2, r3
 8000d12:	2100      	movs	r1, #0
 8000d14:	f006 fbb2 	bl	800747c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_HSI14;
 8000d18:	0021      	movs	r1, r4
 8000d1a:	187b      	adds	r3, r7, r1
 8000d1c:	2212      	movs	r2, #18
 8000d1e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d20:	187b      	adds	r3, r7, r1
 8000d22:	2201      	movs	r2, #1
 8000d24:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000d26:	187b      	adds	r3, r7, r1
 8000d28:	2201      	movs	r2, #1
 8000d2a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d2c:	187b      	adds	r3, r7, r1
 8000d2e:	2210      	movs	r2, #16
 8000d30:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000d32:	187b      	adds	r3, r7, r1
 8000d34:	2210      	movs	r2, #16
 8000d36:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	2202      	movs	r2, #2
 8000d3c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d3e:	187b      	adds	r3, r7, r1
 8000d40:	2200      	movs	r2, #0
 8000d42:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	22a0      	movs	r2, #160	; 0xa0
 8000d48:	0392      	lsls	r2, r2, #14
 8000d4a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000d4c:	187b      	adds	r3, r7, r1
 8000d4e:	2200      	movs	r2, #0
 8000d50:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d52:	187b      	adds	r3, r7, r1
 8000d54:	0018      	movs	r0, r3
 8000d56:	f002 fef1 	bl	8003b3c <HAL_RCC_OscConfig>
 8000d5a:	1e03      	subs	r3, r0, #0
 8000d5c:	d001      	beq.n	8000d62 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000d5e:	f000 fc61 	bl	8001624 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 8000d62:	2118      	movs	r1, #24
 8000d64:	187b      	adds	r3, r7, r1
 8000d66:	2207      	movs	r2, #7
 8000d68:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d6a:	187b      	adds	r3, r7, r1
 8000d6c:	2202      	movs	r2, #2
 8000d6e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d70:	187b      	adds	r3, r7, r1
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d76:	187b      	adds	r3, r7, r1
 8000d78:	2200      	movs	r2, #0
 8000d7a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d7c:	187b      	adds	r3, r7, r1
 8000d7e:	2101      	movs	r1, #1
 8000d80:	0018      	movs	r0, r3
 8000d82:	f003 f9f5 	bl	8004170 <HAL_RCC_ClockConfig>
 8000d86:	1e03      	subs	r3, r0, #0
 8000d88:	d001      	beq.n	8000d8e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000d8a:	f000 fc4b 	bl	8001624 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_I2C1;
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	2221      	movs	r2, #33	; 0x21
 8000d92:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8000d94:	1d3b      	adds	r3, r7, #4
 8000d96:	2203      	movs	r2, #3
 8000d98:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	0018      	movs	r0, r3
 8000da4:	f003 fb36 	bl	8004414 <HAL_RCCEx_PeriphCLKConfig>
 8000da8:	1e03      	subs	r3, r0, #0
 8000daa:	d001      	beq.n	8000db0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000dac:	f000 fc3a 	bl	8001624 <Error_Handler>
  }
}
 8000db0:	46c0      	nop			; (mov r8, r8)
 8000db2:	46bd      	mov	sp, r7
 8000db4:	b017      	add	sp, #92	; 0x5c
 8000db6:	bd90      	pop	{r4, r7, pc}

08000db8 <MX_ADC_Init>:
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	230c      	movs	r3, #12
 8000dc4:	001a      	movs	r2, r3
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	f006 fb58 	bl	800747c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc.Instance = ADC1;
 8000dcc:	4b81      	ldr	r3, [pc, #516]	; (8000fd4 <MX_ADC_Init+0x21c>)
 8000dce:	4a82      	ldr	r2, [pc, #520]	; (8000fd8 <MX_ADC_Init+0x220>)
 8000dd0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000dd2:	4b80      	ldr	r3, [pc, #512]	; (8000fd4 <MX_ADC_Init+0x21c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000dd8:	4b7e      	ldr	r3, [pc, #504]	; (8000fd4 <MX_ADC_Init+0x21c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dde:	4b7d      	ldr	r3, [pc, #500]	; (8000fd4 <MX_ADC_Init+0x21c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000de4:	4b7b      	ldr	r3, [pc, #492]	; (8000fd4 <MX_ADC_Init+0x21c>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dea:	4b7a      	ldr	r3, [pc, #488]	; (8000fd4 <MX_ADC_Init+0x21c>)
 8000dec:	2204      	movs	r2, #4
 8000dee:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000df0:	4b78      	ldr	r3, [pc, #480]	; (8000fd4 <MX_ADC_Init+0x21c>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000df6:	4b77      	ldr	r3, [pc, #476]	; (8000fd4 <MX_ADC_Init+0x21c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000dfc:	4b75      	ldr	r3, [pc, #468]	; (8000fd4 <MX_ADC_Init+0x21c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000e02:	4b74      	ldr	r3, [pc, #464]	; (8000fd4 <MX_ADC_Init+0x21c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e08:	4b72      	ldr	r3, [pc, #456]	; (8000fd4 <MX_ADC_Init+0x21c>)
 8000e0a:	22c2      	movs	r2, #194	; 0xc2
 8000e0c:	32ff      	adds	r2, #255	; 0xff
 8000e0e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e10:	4b70      	ldr	r3, [pc, #448]	; (8000fd4 <MX_ADC_Init+0x21c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000e16:	4b6f      	ldr	r3, [pc, #444]	; (8000fd4 <MX_ADC_Init+0x21c>)
 8000e18:	2224      	movs	r2, #36	; 0x24
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e1e:	4b6d      	ldr	r3, [pc, #436]	; (8000fd4 <MX_ADC_Init+0x21c>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000e24:	4b6b      	ldr	r3, [pc, #428]	; (8000fd4 <MX_ADC_Init+0x21c>)
 8000e26:	0018      	movs	r0, r3
 8000e28:	f000 fff6 	bl	8001e18 <HAL_ADC_Init>
 8000e2c:	1e03      	subs	r3, r0, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000e30:	f000 fbf8 	bl	8001624 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e34:	1d3b      	adds	r3, r7, #4
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	0152      	lsls	r2, r2, #5
 8000e40:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e42:	1d3b      	adds	r3, r7, #4
 8000e44:	2280      	movs	r2, #128	; 0x80
 8000e46:	0552      	lsls	r2, r2, #21
 8000e48:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e4a:	1d3a      	adds	r2, r7, #4
 8000e4c:	4b61      	ldr	r3, [pc, #388]	; (8000fd4 <MX_ADC_Init+0x21c>)
 8000e4e:	0011      	movs	r1, r2
 8000e50:	0018      	movs	r0, r3
 8000e52:	f001 f9bb 	bl	80021cc <HAL_ADC_ConfigChannel>
 8000e56:	1e03      	subs	r3, r0, #0
 8000e58:	d001      	beq.n	8000e5e <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000e5a:	f000 fbe3 	bl	8001624 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	2201      	movs	r2, #1
 8000e62:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e64:	1d3a      	adds	r2, r7, #4
 8000e66:	4b5b      	ldr	r3, [pc, #364]	; (8000fd4 <MX_ADC_Init+0x21c>)
 8000e68:	0011      	movs	r1, r2
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	f001 f9ae 	bl	80021cc <HAL_ADC_ConfigChannel>
 8000e70:	1e03      	subs	r3, r0, #0
 8000e72:	d001      	beq.n	8000e78 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8000e74:	f000 fbd6 	bl	8001624 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_2;
 8000e78:	1d3b      	adds	r3, r7, #4
 8000e7a:	2202      	movs	r2, #2
 8000e7c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e7e:	1d3a      	adds	r2, r7, #4
 8000e80:	4b54      	ldr	r3, [pc, #336]	; (8000fd4 <MX_ADC_Init+0x21c>)
 8000e82:	0011      	movs	r1, r2
 8000e84:	0018      	movs	r0, r3
 8000e86:	f001 f9a1 	bl	80021cc <HAL_ADC_ConfigChannel>
 8000e8a:	1e03      	subs	r3, r0, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8000e8e:	f000 fbc9 	bl	8001624 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_3;
 8000e92:	1d3b      	adds	r3, r7, #4
 8000e94:	2203      	movs	r2, #3
 8000e96:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e98:	1d3a      	adds	r2, r7, #4
 8000e9a:	4b4e      	ldr	r3, [pc, #312]	; (8000fd4 <MX_ADC_Init+0x21c>)
 8000e9c:	0011      	movs	r1, r2
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f001 f994 	bl	80021cc <HAL_ADC_ConfigChannel>
 8000ea4:	1e03      	subs	r3, r0, #0
 8000ea6:	d001      	beq.n	8000eac <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 8000ea8:	f000 fbbc 	bl	8001624 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_5;
 8000eac:	1d3b      	adds	r3, r7, #4
 8000eae:	2205      	movs	r2, #5
 8000eb0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000eb2:	1d3a      	adds	r2, r7, #4
 8000eb4:	4b47      	ldr	r3, [pc, #284]	; (8000fd4 <MX_ADC_Init+0x21c>)
 8000eb6:	0011      	movs	r1, r2
 8000eb8:	0018      	movs	r0, r3
 8000eba:	f001 f987 	bl	80021cc <HAL_ADC_ConfigChannel>
 8000ebe:	1e03      	subs	r3, r0, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 8000ec2:	f000 fbaf 	bl	8001624 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_6;
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	2206      	movs	r2, #6
 8000eca:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ecc:	1d3a      	adds	r2, r7, #4
 8000ece:	4b41      	ldr	r3, [pc, #260]	; (8000fd4 <MX_ADC_Init+0x21c>)
 8000ed0:	0011      	movs	r1, r2
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	f001 f97a 	bl	80021cc <HAL_ADC_ConfigChannel>
 8000ed8:	1e03      	subs	r3, r0, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_ADC_Init+0x128>
  {
    Error_Handler();
 8000edc:	f000 fba2 	bl	8001624 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_7;
 8000ee0:	1d3b      	adds	r3, r7, #4
 8000ee2:	2207      	movs	r2, #7
 8000ee4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ee6:	1d3a      	adds	r2, r7, #4
 8000ee8:	4b3a      	ldr	r3, [pc, #232]	; (8000fd4 <MX_ADC_Init+0x21c>)
 8000eea:	0011      	movs	r1, r2
 8000eec:	0018      	movs	r0, r3
 8000eee:	f001 f96d 	bl	80021cc <HAL_ADC_ConfigChannel>
 8000ef2:	1e03      	subs	r3, r0, #0
 8000ef4:	d001      	beq.n	8000efa <MX_ADC_Init+0x142>
  {
    Error_Handler();
 8000ef6:	f000 fb95 	bl	8001624 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_8;
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	2208      	movs	r2, #8
 8000efe:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f00:	1d3a      	adds	r2, r7, #4
 8000f02:	4b34      	ldr	r3, [pc, #208]	; (8000fd4 <MX_ADC_Init+0x21c>)
 8000f04:	0011      	movs	r1, r2
 8000f06:	0018      	movs	r0, r3
 8000f08:	f001 f960 	bl	80021cc <HAL_ADC_ConfigChannel>
 8000f0c:	1e03      	subs	r3, r0, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_ADC_Init+0x15c>
  {
    Error_Handler();
 8000f10:	f000 fb88 	bl	8001624 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f14:	1d3b      	adds	r3, r7, #4
 8000f16:	2209      	movs	r2, #9
 8000f18:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f1a:	1d3a      	adds	r2, r7, #4
 8000f1c:	4b2d      	ldr	r3, [pc, #180]	; (8000fd4 <MX_ADC_Init+0x21c>)
 8000f1e:	0011      	movs	r1, r2
 8000f20:	0018      	movs	r0, r3
 8000f22:	f001 f953 	bl	80021cc <HAL_ADC_ConfigChannel>
 8000f26:	1e03      	subs	r3, r0, #0
 8000f28:	d001      	beq.n	8000f2e <MX_ADC_Init+0x176>
  {
    Error_Handler();
 8000f2a:	f000 fb7b 	bl	8001624 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	220a      	movs	r2, #10
 8000f32:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f34:	1d3a      	adds	r2, r7, #4
 8000f36:	4b27      	ldr	r3, [pc, #156]	; (8000fd4 <MX_ADC_Init+0x21c>)
 8000f38:	0011      	movs	r1, r2
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	f001 f946 	bl	80021cc <HAL_ADC_ConfigChannel>
 8000f40:	1e03      	subs	r3, r0, #0
 8000f42:	d001      	beq.n	8000f48 <MX_ADC_Init+0x190>
  {
    Error_Handler();
 8000f44:	f000 fb6e 	bl	8001624 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	220b      	movs	r2, #11
 8000f4c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f4e:	1d3a      	adds	r2, r7, #4
 8000f50:	4b20      	ldr	r3, [pc, #128]	; (8000fd4 <MX_ADC_Init+0x21c>)
 8000f52:	0011      	movs	r1, r2
 8000f54:	0018      	movs	r0, r3
 8000f56:	f001 f939 	bl	80021cc <HAL_ADC_ConfigChannel>
 8000f5a:	1e03      	subs	r3, r0, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_ADC_Init+0x1aa>
  {
    Error_Handler();
 8000f5e:	f000 fb61 	bl	8001624 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_12;
 8000f62:	1d3b      	adds	r3, r7, #4
 8000f64:	220c      	movs	r2, #12
 8000f66:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f68:	1d3a      	adds	r2, r7, #4
 8000f6a:	4b1a      	ldr	r3, [pc, #104]	; (8000fd4 <MX_ADC_Init+0x21c>)
 8000f6c:	0011      	movs	r1, r2
 8000f6e:	0018      	movs	r0, r3
 8000f70:	f001 f92c 	bl	80021cc <HAL_ADC_ConfigChannel>
 8000f74:	1e03      	subs	r3, r0, #0
 8000f76:	d001      	beq.n	8000f7c <MX_ADC_Init+0x1c4>
  {
    Error_Handler();
 8000f78:	f000 fb54 	bl	8001624 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_13;
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	220d      	movs	r2, #13
 8000f80:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f82:	1d3a      	adds	r2, r7, #4
 8000f84:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <MX_ADC_Init+0x21c>)
 8000f86:	0011      	movs	r1, r2
 8000f88:	0018      	movs	r0, r3
 8000f8a:	f001 f91f 	bl	80021cc <HAL_ADC_ConfigChannel>
 8000f8e:	1e03      	subs	r3, r0, #0
 8000f90:	d001      	beq.n	8000f96 <MX_ADC_Init+0x1de>
  {
    Error_Handler();
 8000f92:	f000 fb47 	bl	8001624 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_14;
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	220e      	movs	r2, #14
 8000f9a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f9c:	1d3a      	adds	r2, r7, #4
 8000f9e:	4b0d      	ldr	r3, [pc, #52]	; (8000fd4 <MX_ADC_Init+0x21c>)
 8000fa0:	0011      	movs	r1, r2
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	f001 f912 	bl	80021cc <HAL_ADC_ConfigChannel>
 8000fa8:	1e03      	subs	r3, r0, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_ADC_Init+0x1f8>
  {
    Error_Handler();
 8000fac:	f000 fb3a 	bl	8001624 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_15;
 8000fb0:	1d3b      	adds	r3, r7, #4
 8000fb2:	220f      	movs	r2, #15
 8000fb4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000fb6:	1d3a      	adds	r2, r7, #4
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <MX_ADC_Init+0x21c>)
 8000fba:	0011      	movs	r1, r2
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	f001 f905 	bl	80021cc <HAL_ADC_ConfigChannel>
 8000fc2:	1e03      	subs	r3, r0, #0
 8000fc4:	d001      	beq.n	8000fca <MX_ADC_Init+0x212>
  {
    Error_Handler();
 8000fc6:	f000 fb2d 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */
}
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	b004      	add	sp, #16
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	20000044 	.word	0x20000044
 8000fd8:	40012400 	.word	0x40012400

08000fdc <MX_DAC1_Init>:
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC1_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */
  step = 0;
 8000fe2:	4b14      	ldr	r3, [pc, #80]	; (8001034 <MX_DAC1_Init+0x58>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000fe8:	003b      	movs	r3, r7
 8000fea:	0018      	movs	r0, r3
 8000fec:	2308      	movs	r3, #8
 8000fee:	001a      	movs	r2, r3
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	f006 fa43 	bl	800747c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
   */
  hdac1.Instance = DAC;
 8000ff6:	4b10      	ldr	r3, [pc, #64]	; (8001038 <MX_DAC1_Init+0x5c>)
 8000ff8:	4a10      	ldr	r2, [pc, #64]	; (800103c <MX_DAC1_Init+0x60>)
 8000ffa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000ffc:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <MX_DAC1_Init+0x5c>)
 8000ffe:	0018      	movs	r0, r3
 8001000:	f001 fbd8 	bl	80027b4 <HAL_DAC_Init>
 8001004:	1e03      	subs	r3, r0, #0
 8001006:	d001      	beq.n	800100c <MX_DAC1_Init+0x30>
  {
    Error_Handler();
 8001008:	f000 fb0c 	bl	8001624 <Error_Handler>
  }

  /** DAC channel OUT1 config
   */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800100c:	003b      	movs	r3, r7
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001012:	003b      	movs	r3, r7
 8001014:	2200      	movs	r2, #0
 8001016:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001018:	0039      	movs	r1, r7
 800101a:	4b07      	ldr	r3, [pc, #28]	; (8001038 <MX_DAC1_Init+0x5c>)
 800101c:	2200      	movs	r2, #0
 800101e:	0018      	movs	r0, r3
 8001020:	f001 fbeb 	bl	80027fa <HAL_DAC_ConfigChannel>
 8001024:	1e03      	subs	r3, r0, #0
 8001026:	d001      	beq.n	800102c <MX_DAC1_Init+0x50>
  {
    Error_Handler();
 8001028:	f000 fafc 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */
}
 800102c:	46c0      	nop			; (mov r8, r8)
 800102e:	46bd      	mov	sp, r7
 8001030:	b002      	add	sp, #8
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000392 	.word	0x20000392
 8001038:	200000c8 	.word	0x200000c8
 800103c:	40007400 	.word	0x40007400

08001040 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001044:	4b1b      	ldr	r3, [pc, #108]	; (80010b4 <MX_I2C1_Init+0x74>)
 8001046:	4a1c      	ldr	r2, [pc, #112]	; (80010b8 <MX_I2C1_Init+0x78>)
 8001048:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800104a:	4b1a      	ldr	r3, [pc, #104]	; (80010b4 <MX_I2C1_Init+0x74>)
 800104c:	4a1b      	ldr	r2, [pc, #108]	; (80010bc <MX_I2C1_Init+0x7c>)
 800104e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001050:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <MX_I2C1_Init+0x74>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001056:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <MX_I2C1_Init+0x74>)
 8001058:	2201      	movs	r2, #1
 800105a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800105c:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <MX_I2C1_Init+0x74>)
 800105e:	2200      	movs	r2, #0
 8001060:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001062:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <MX_I2C1_Init+0x74>)
 8001064:	2200      	movs	r2, #0
 8001066:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <MX_I2C1_Init+0x74>)
 800106a:	2200      	movs	r2, #0
 800106c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800106e:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <MX_I2C1_Init+0x74>)
 8001070:	2200      	movs	r2, #0
 8001072:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001074:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <MX_I2C1_Init+0x74>)
 8001076:	2200      	movs	r2, #0
 8001078:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800107a:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <MX_I2C1_Init+0x74>)
 800107c:	0018      	movs	r0, r3
 800107e:	f001 fff3 	bl	8003068 <HAL_I2C_Init>
 8001082:	1e03      	subs	r3, r0, #0
 8001084:	d001      	beq.n	800108a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001086:	f000 facd 	bl	8001624 <Error_Handler>
  }

  /** Configure Analogue filter
   */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800108a:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <MX_I2C1_Init+0x74>)
 800108c:	2100      	movs	r1, #0
 800108e:	0018      	movs	r0, r3
 8001090:	f002 fc88 	bl	80039a4 <HAL_I2CEx_ConfigAnalogFilter>
 8001094:	1e03      	subs	r3, r0, #0
 8001096:	d001      	beq.n	800109c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001098:	f000 fac4 	bl	8001624 <Error_Handler>
  }

  /** Configure Digital filter
   */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <MX_I2C1_Init+0x74>)
 800109e:	2100      	movs	r1, #0
 80010a0:	0018      	movs	r0, r3
 80010a2:	f002 fccb 	bl	8003a3c <HAL_I2CEx_ConfigDigitalFilter>
 80010a6:	1e03      	subs	r3, r0, #0
 80010a8:	d001      	beq.n	80010ae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010aa:	f000 fabb 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 80010ae:	46c0      	nop			; (mov r8, r8)
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	200000dc 	.word	0x200000dc
 80010b8:	40005400 	.word	0x40005400
 80010bc:	2000090e 	.word	0x2000090e

080010c0 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010c4:	4b1c      	ldr	r3, [pc, #112]	; (8001138 <MX_SPI1_Init+0x78>)
 80010c6:	4a1d      	ldr	r2, [pc, #116]	; (800113c <MX_SPI1_Init+0x7c>)
 80010c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010ca:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <MX_SPI1_Init+0x78>)
 80010cc:	2282      	movs	r2, #130	; 0x82
 80010ce:	0052      	lsls	r2, r2, #1
 80010d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80010d2:	4b19      	ldr	r3, [pc, #100]	; (8001138 <MX_SPI1_Init+0x78>)
 80010d4:	2280      	movs	r2, #128	; 0x80
 80010d6:	00d2      	lsls	r2, r2, #3
 80010d8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80010da:	4b17      	ldr	r3, [pc, #92]	; (8001138 <MX_SPI1_Init+0x78>)
 80010dc:	22f0      	movs	r2, #240	; 0xf0
 80010de:	0112      	lsls	r2, r2, #4
 80010e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010e2:	4b15      	ldr	r3, [pc, #84]	; (8001138 <MX_SPI1_Init+0x78>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010e8:	4b13      	ldr	r3, [pc, #76]	; (8001138 <MX_SPI1_Init+0x78>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010ee:	4b12      	ldr	r3, [pc, #72]	; (8001138 <MX_SPI1_Init+0x78>)
 80010f0:	2280      	movs	r2, #128	; 0x80
 80010f2:	0092      	lsls	r2, r2, #2
 80010f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80010f6:	4b10      	ldr	r3, [pc, #64]	; (8001138 <MX_SPI1_Init+0x78>)
 80010f8:	2218      	movs	r2, #24
 80010fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010fc:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <MX_SPI1_Init+0x78>)
 80010fe:	2200      	movs	r2, #0
 8001100:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001102:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <MX_SPI1_Init+0x78>)
 8001104:	2200      	movs	r2, #0
 8001106:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001108:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <MX_SPI1_Init+0x78>)
 800110a:	2200      	movs	r2, #0
 800110c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800110e:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <MX_SPI1_Init+0x78>)
 8001110:	2207      	movs	r2, #7
 8001112:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001114:	4b08      	ldr	r3, [pc, #32]	; (8001138 <MX_SPI1_Init+0x78>)
 8001116:	2200      	movs	r2, #0
 8001118:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800111a:	4b07      	ldr	r3, [pc, #28]	; (8001138 <MX_SPI1_Init+0x78>)
 800111c:	2208      	movs	r2, #8
 800111e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001120:	4b05      	ldr	r3, [pc, #20]	; (8001138 <MX_SPI1_Init+0x78>)
 8001122:	0018      	movs	r0, r3
 8001124:	f003 fa54 	bl	80045d0 <HAL_SPI_Init>
 8001128:	1e03      	subs	r3, r0, #0
 800112a:	d001      	beq.n	8001130 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 800112c:	f000 fa7a 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 8001130:	46c0      	nop			; (mov r8, r8)
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	46c0      	nop			; (mov r8, r8)
 8001138:	20000128 	.word	0x20000128
 800113c:	40013000 	.word	0x40013000

08001140 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001144:	4b1c      	ldr	r3, [pc, #112]	; (80011b8 <MX_SPI2_Init+0x78>)
 8001146:	4a1d      	ldr	r2, [pc, #116]	; (80011bc <MX_SPI2_Init+0x7c>)
 8001148:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800114a:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <MX_SPI2_Init+0x78>)
 800114c:	2282      	movs	r2, #130	; 0x82
 800114e:	0052      	lsls	r2, r2, #1
 8001150:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001152:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <MX_SPI2_Init+0x78>)
 8001154:	2280      	movs	r2, #128	; 0x80
 8001156:	00d2      	lsls	r2, r2, #3
 8001158:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800115a:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <MX_SPI2_Init+0x78>)
 800115c:	22f0      	movs	r2, #240	; 0xf0
 800115e:	0112      	lsls	r2, r2, #4
 8001160:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001162:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <MX_SPI2_Init+0x78>)
 8001164:	2200      	movs	r2, #0
 8001166:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001168:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <MX_SPI2_Init+0x78>)
 800116a:	2200      	movs	r2, #0
 800116c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800116e:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <MX_SPI2_Init+0x78>)
 8001170:	2280      	movs	r2, #128	; 0x80
 8001172:	0092      	lsls	r2, r2, #2
 8001174:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001176:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <MX_SPI2_Init+0x78>)
 8001178:	2218      	movs	r2, #24
 800117a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800117c:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <MX_SPI2_Init+0x78>)
 800117e:	2200      	movs	r2, #0
 8001180:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001182:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <MX_SPI2_Init+0x78>)
 8001184:	2200      	movs	r2, #0
 8001186:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001188:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <MX_SPI2_Init+0x78>)
 800118a:	2200      	movs	r2, #0
 800118c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800118e:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <MX_SPI2_Init+0x78>)
 8001190:	2207      	movs	r2, #7
 8001192:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001194:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <MX_SPI2_Init+0x78>)
 8001196:	2200      	movs	r2, #0
 8001198:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800119a:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <MX_SPI2_Init+0x78>)
 800119c:	2208      	movs	r2, #8
 800119e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011a0:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <MX_SPI2_Init+0x78>)
 80011a2:	0018      	movs	r0, r3
 80011a4:	f003 fa14 	bl	80045d0 <HAL_SPI_Init>
 80011a8:	1e03      	subs	r3, r0, #0
 80011aa:	d001      	beq.n	80011b0 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 80011ac:	f000 fa3a 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */
}
 80011b0:	46c0      	nop			; (mov r8, r8)
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	2000018c 	.word	0x2000018c
 80011bc:	40003800 	.word	0x40003800

080011c0 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b096      	sub	sp, #88	; 0x58
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011c6:	2348      	movs	r3, #72	; 0x48
 80011c8:	18fb      	adds	r3, r7, r3
 80011ca:	0018      	movs	r0, r3
 80011cc:	2310      	movs	r3, #16
 80011ce:	001a      	movs	r2, r3
 80011d0:	2100      	movs	r1, #0
 80011d2:	f006 f953 	bl	800747c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d6:	2340      	movs	r3, #64	; 0x40
 80011d8:	18fb      	adds	r3, r7, r3
 80011da:	0018      	movs	r0, r3
 80011dc:	2308      	movs	r3, #8
 80011de:	001a      	movs	r2, r3
 80011e0:	2100      	movs	r1, #0
 80011e2:	f006 f94b 	bl	800747c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011e6:	2324      	movs	r3, #36	; 0x24
 80011e8:	18fb      	adds	r3, r7, r3
 80011ea:	0018      	movs	r0, r3
 80011ec:	231c      	movs	r3, #28
 80011ee:	001a      	movs	r2, r3
 80011f0:	2100      	movs	r1, #0
 80011f2:	f006 f943 	bl	800747c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	0018      	movs	r0, r3
 80011fa:	2320      	movs	r3, #32
 80011fc:	001a      	movs	r2, r3
 80011fe:	2100      	movs	r1, #0
 8001200:	f006 f93c 	bl	800747c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001204:	4b46      	ldr	r3, [pc, #280]	; (8001320 <MX_TIM1_Init+0x160>)
 8001206:	4a47      	ldr	r2, [pc, #284]	; (8001324 <MX_TIM1_Init+0x164>)
 8001208:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100 - 1;
 800120a:	4b45      	ldr	r3, [pc, #276]	; (8001320 <MX_TIM1_Init+0x160>)
 800120c:	2263      	movs	r2, #99	; 0x63
 800120e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001210:	4b43      	ldr	r3, [pc, #268]	; (8001320 <MX_TIM1_Init+0x160>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 30000 - 1;
 8001216:	4b42      	ldr	r3, [pc, #264]	; (8001320 <MX_TIM1_Init+0x160>)
 8001218:	4a43      	ldr	r2, [pc, #268]	; (8001328 <MX_TIM1_Init+0x168>)
 800121a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800121c:	4b40      	ldr	r3, [pc, #256]	; (8001320 <MX_TIM1_Init+0x160>)
 800121e:	2200      	movs	r2, #0
 8001220:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001222:	4b3f      	ldr	r3, [pc, #252]	; (8001320 <MX_TIM1_Init+0x160>)
 8001224:	2200      	movs	r2, #0
 8001226:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001228:	4b3d      	ldr	r3, [pc, #244]	; (8001320 <MX_TIM1_Init+0x160>)
 800122a:	2280      	movs	r2, #128	; 0x80
 800122c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800122e:	4b3c      	ldr	r3, [pc, #240]	; (8001320 <MX_TIM1_Init+0x160>)
 8001230:	0018      	movs	r0, r3
 8001232:	f003 fd53 	bl	8004cdc <HAL_TIM_Base_Init>
 8001236:	1e03      	subs	r3, r0, #0
 8001238:	d001      	beq.n	800123e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800123a:	f000 f9f3 	bl	8001624 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800123e:	2148      	movs	r1, #72	; 0x48
 8001240:	187b      	adds	r3, r7, r1
 8001242:	2280      	movs	r2, #128	; 0x80
 8001244:	0152      	lsls	r2, r2, #5
 8001246:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001248:	187a      	adds	r2, r7, r1
 800124a:	4b35      	ldr	r3, [pc, #212]	; (8001320 <MX_TIM1_Init+0x160>)
 800124c:	0011      	movs	r1, r2
 800124e:	0018      	movs	r0, r3
 8001250:	f004 f85a 	bl	8005308 <HAL_TIM_ConfigClockSource>
 8001254:	1e03      	subs	r3, r0, #0
 8001256:	d001      	beq.n	800125c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001258:	f000 f9e4 	bl	8001624 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800125c:	4b30      	ldr	r3, [pc, #192]	; (8001320 <MX_TIM1_Init+0x160>)
 800125e:	0018      	movs	r0, r3
 8001260:	f003 fd8c 	bl	8004d7c <HAL_TIM_OC_Init>
 8001264:	1e03      	subs	r3, r0, #0
 8001266:	d001      	beq.n	800126c <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8001268:	f000 f9dc 	bl	8001624 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800126c:	2140      	movs	r1, #64	; 0x40
 800126e:	187b      	adds	r3, r7, r1
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001274:	187b      	adds	r3, r7, r1
 8001276:	2200      	movs	r2, #0
 8001278:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800127a:	187a      	adds	r2, r7, r1
 800127c:	4b28      	ldr	r3, [pc, #160]	; (8001320 <MX_TIM1_Init+0x160>)
 800127e:	0011      	movs	r1, r2
 8001280:	0018      	movs	r0, r3
 8001282:	f004 fc6f 	bl	8005b64 <HAL_TIMEx_MasterConfigSynchronization>
 8001286:	1e03      	subs	r3, r0, #0
 8001288:	d001      	beq.n	800128e <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 800128a:	f000 f9cb 	bl	8001624 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800128e:	2124      	movs	r1, #36	; 0x24
 8001290:	187b      	adds	r3, r7, r1
 8001292:	2230      	movs	r2, #48	; 0x30
 8001294:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 6000 - 1;
 8001296:	187b      	adds	r3, r7, r1
 8001298:	4a24      	ldr	r2, [pc, #144]	; (800132c <MX_TIM1_Init+0x16c>)
 800129a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800129c:	187b      	adds	r3, r7, r1
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012a2:	187b      	adds	r3, r7, r1
 80012a4:	2200      	movs	r2, #0
 80012a6:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012a8:	187b      	adds	r3, r7, r1
 80012aa:	2200      	movs	r2, #0
 80012ac:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012ae:	187b      	adds	r3, r7, r1
 80012b0:	2200      	movs	r2, #0
 80012b2:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012b4:	187b      	adds	r3, r7, r1
 80012b6:	2200      	movs	r2, #0
 80012b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012ba:	1879      	adds	r1, r7, r1
 80012bc:	4b18      	ldr	r3, [pc, #96]	; (8001320 <MX_TIM1_Init+0x160>)
 80012be:	2200      	movs	r2, #0
 80012c0:	0018      	movs	r0, r3
 80012c2:	f003 ffc9 	bl	8005258 <HAL_TIM_OC_ConfigChannel>
 80012c6:	1e03      	subs	r3, r0, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80012ca:	f000 f9ab 	bl	8001624 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	2200      	movs	r2, #0
 80012d8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012e0:	1d3b      	adds	r3, r7, #4
 80012e2:	2200      	movs	r2, #0
 80012e4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	2200      	movs	r2, #0
 80012ea:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012ec:	1d3b      	adds	r3, r7, #4
 80012ee:	2280      	movs	r2, #128	; 0x80
 80012f0:	0192      	lsls	r2, r2, #6
 80012f2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	2200      	movs	r2, #0
 80012f8:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012fa:	1d3a      	adds	r2, r7, #4
 80012fc:	4b08      	ldr	r3, [pc, #32]	; (8001320 <MX_TIM1_Init+0x160>)
 80012fe:	0011      	movs	r1, r2
 8001300:	0018      	movs	r0, r3
 8001302:	f004 fc8d 	bl	8005c20 <HAL_TIMEx_ConfigBreakDeadTime>
 8001306:	1e03      	subs	r3, r0, #0
 8001308:	d001      	beq.n	800130e <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 800130a:	f000 f98b 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800130e:	4b04      	ldr	r3, [pc, #16]	; (8001320 <MX_TIM1_Init+0x160>)
 8001310:	0018      	movs	r0, r3
 8001312:	f000 fbc7 	bl	8001aa4 <HAL_TIM_MspPostInit>
}
 8001316:	46c0      	nop			; (mov r8, r8)
 8001318:	46bd      	mov	sp, r7
 800131a:	b016      	add	sp, #88	; 0x58
 800131c:	bd80      	pop	{r7, pc}
 800131e:	46c0      	nop			; (mov r8, r8)
 8001320:	200001f0 	.word	0x200001f0
 8001324:	40012c00 	.word	0x40012c00
 8001328:	0000752f 	.word	0x0000752f
 800132c:	0000176f 	.word	0x0000176f

08001330 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08e      	sub	sp, #56	; 0x38
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001336:	2328      	movs	r3, #40	; 0x28
 8001338:	18fb      	adds	r3, r7, r3
 800133a:	0018      	movs	r0, r3
 800133c:	2310      	movs	r3, #16
 800133e:	001a      	movs	r2, r3
 8001340:	2100      	movs	r1, #0
 8001342:	f006 f89b 	bl	800747c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001346:	2320      	movs	r3, #32
 8001348:	18fb      	adds	r3, r7, r3
 800134a:	0018      	movs	r0, r3
 800134c:	2308      	movs	r3, #8
 800134e:	001a      	movs	r2, r3
 8001350:	2100      	movs	r1, #0
 8001352:	f006 f893 	bl	800747c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	0018      	movs	r0, r3
 800135a:	231c      	movs	r3, #28
 800135c:	001a      	movs	r2, r3
 800135e:	2100      	movs	r1, #0
 8001360:	f006 f88c 	bl	800747c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001364:	4b30      	ldr	r3, [pc, #192]	; (8001428 <MX_TIM2_Init+0xf8>)
 8001366:	2280      	movs	r2, #128	; 0x80
 8001368:	05d2      	lsls	r2, r2, #23
 800136a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100 - 1;
 800136c:	4b2e      	ldr	r3, [pc, #184]	; (8001428 <MX_TIM2_Init+0xf8>)
 800136e:	2263      	movs	r2, #99	; 0x63
 8001370:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001372:	4b2d      	ldr	r3, [pc, #180]	; (8001428 <MX_TIM2_Init+0xf8>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 24000 - 1;
 8001378:	4b2b      	ldr	r3, [pc, #172]	; (8001428 <MX_TIM2_Init+0xf8>)
 800137a:	4a2c      	ldr	r2, [pc, #176]	; (800142c <MX_TIM2_Init+0xfc>)
 800137c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137e:	4b2a      	ldr	r3, [pc, #168]	; (8001428 <MX_TIM2_Init+0xf8>)
 8001380:	2200      	movs	r2, #0
 8001382:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001384:	4b28      	ldr	r3, [pc, #160]	; (8001428 <MX_TIM2_Init+0xf8>)
 8001386:	2280      	movs	r2, #128	; 0x80
 8001388:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800138a:	4b27      	ldr	r3, [pc, #156]	; (8001428 <MX_TIM2_Init+0xf8>)
 800138c:	0018      	movs	r0, r3
 800138e:	f003 fca5 	bl	8004cdc <HAL_TIM_Base_Init>
 8001392:	1e03      	subs	r3, r0, #0
 8001394:	d001      	beq.n	800139a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001396:	f000 f945 	bl	8001624 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800139a:	2128      	movs	r1, #40	; 0x28
 800139c:	187b      	adds	r3, r7, r1
 800139e:	2280      	movs	r2, #128	; 0x80
 80013a0:	0152      	lsls	r2, r2, #5
 80013a2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013a4:	187a      	adds	r2, r7, r1
 80013a6:	4b20      	ldr	r3, [pc, #128]	; (8001428 <MX_TIM2_Init+0xf8>)
 80013a8:	0011      	movs	r1, r2
 80013aa:	0018      	movs	r0, r3
 80013ac:	f003 ffac 	bl	8005308 <HAL_TIM_ConfigClockSource>
 80013b0:	1e03      	subs	r3, r0, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80013b4:	f000 f936 	bl	8001624 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80013b8:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <MX_TIM2_Init+0xf8>)
 80013ba:	0018      	movs	r0, r3
 80013bc:	f003 fcde 	bl	8004d7c <HAL_TIM_OC_Init>
 80013c0:	1e03      	subs	r3, r0, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80013c4:	f000 f92e 	bl	8001624 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c8:	2120      	movs	r1, #32
 80013ca:	187b      	adds	r3, r7, r1
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d0:	187b      	adds	r3, r7, r1
 80013d2:	2200      	movs	r2, #0
 80013d4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013d6:	187a      	adds	r2, r7, r1
 80013d8:	4b13      	ldr	r3, [pc, #76]	; (8001428 <MX_TIM2_Init+0xf8>)
 80013da:	0011      	movs	r1, r2
 80013dc:	0018      	movs	r0, r3
 80013de:	f004 fbc1 	bl	8005b64 <HAL_TIMEx_MasterConfigSynchronization>
 80013e2:	1e03      	subs	r3, r0, #0
 80013e4:	d001      	beq.n	80013ea <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80013e6:	f000 f91d 	bl	8001624 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80013ea:	1d3b      	adds	r3, r7, #4
 80013ec:	2230      	movs	r2, #48	; 0x30
 80013ee:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 12000 - 1;
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	4a0f      	ldr	r2, [pc, #60]	; (8001430 <MX_TIM2_Init+0x100>)
 80013f4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013f6:	1d3b      	adds	r3, r7, #4
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013fc:	1d3b      	adds	r3, r7, #4
 80013fe:	2200      	movs	r2, #0
 8001400:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001402:	1d39      	adds	r1, r7, #4
 8001404:	4b08      	ldr	r3, [pc, #32]	; (8001428 <MX_TIM2_Init+0xf8>)
 8001406:	220c      	movs	r2, #12
 8001408:	0018      	movs	r0, r3
 800140a:	f003 ff25 	bl	8005258 <HAL_TIM_OC_ConfigChannel>
 800140e:	1e03      	subs	r3, r0, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8001412:	f000 f907 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001416:	4b04      	ldr	r3, [pc, #16]	; (8001428 <MX_TIM2_Init+0xf8>)
 8001418:	0018      	movs	r0, r3
 800141a:	f000 fb43 	bl	8001aa4 <HAL_TIM_MspPostInit>
}
 800141e:	46c0      	nop			; (mov r8, r8)
 8001420:	46bd      	mov	sp, r7
 8001422:	b00e      	add	sp, #56	; 0x38
 8001424:	bd80      	pop	{r7, pc}
 8001426:	46c0      	nop			; (mov r8, r8)
 8001428:	20000238 	.word	0x20000238
 800142c:	00005dbf 	.word	0x00005dbf
 8001430:	00002edf 	.word	0x00002edf

08001434 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */
  erpa_seq = 0;
 8001438:	4b19      	ldr	r3, [pc, #100]	; (80014a0 <MX_USART1_UART_Init+0x6c>)
 800143a:	2200      	movs	r2, #0
 800143c:	801a      	strh	r2, [r3, #0]
  pmt_seq = 0;
 800143e:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <MX_USART1_UART_Init+0x70>)
 8001440:	2200      	movs	r2, #0
 8001442:	801a      	strh	r2, [r3, #0]
  hk_seq = 0;
 8001444:	4b18      	ldr	r3, [pc, #96]	; (80014a8 <MX_USART1_UART_Init+0x74>)
 8001446:	2200      	movs	r2, #0
 8001448:	801a      	strh	r2, [r3, #0]
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800144a:	4b18      	ldr	r3, [pc, #96]	; (80014ac <MX_USART1_UART_Init+0x78>)
 800144c:	4a18      	ldr	r2, [pc, #96]	; (80014b0 <MX_USART1_UART_Init+0x7c>)
 800144e:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8001450:	4b16      	ldr	r3, [pc, #88]	; (80014ac <MX_USART1_UART_Init+0x78>)
 8001452:	2296      	movs	r2, #150	; 0x96
 8001454:	01d2      	lsls	r2, r2, #7
 8001456:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001458:	4b14      	ldr	r3, [pc, #80]	; (80014ac <MX_USART1_UART_Init+0x78>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800145e:	4b13      	ldr	r3, [pc, #76]	; (80014ac <MX_USART1_UART_Init+0x78>)
 8001460:	2200      	movs	r2, #0
 8001462:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001464:	4b11      	ldr	r3, [pc, #68]	; (80014ac <MX_USART1_UART_Init+0x78>)
 8001466:	2200      	movs	r2, #0
 8001468:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800146a:	4b10      	ldr	r3, [pc, #64]	; (80014ac <MX_USART1_UART_Init+0x78>)
 800146c:	220c      	movs	r2, #12
 800146e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001470:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <MX_USART1_UART_Init+0x78>)
 8001472:	2200      	movs	r2, #0
 8001474:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001476:	4b0d      	ldr	r3, [pc, #52]	; (80014ac <MX_USART1_UART_Init+0x78>)
 8001478:	2200      	movs	r2, #0
 800147a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800147c:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <MX_USART1_UART_Init+0x78>)
 800147e:	2200      	movs	r2, #0
 8001480:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001482:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <MX_USART1_UART_Init+0x78>)
 8001484:	2200      	movs	r2, #0
 8001486:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001488:	4b08      	ldr	r3, [pc, #32]	; (80014ac <MX_USART1_UART_Init+0x78>)
 800148a:	0018      	movs	r0, r3
 800148c:	f004 fc36 	bl	8005cfc <HAL_UART_Init>
 8001490:	1e03      	subs	r3, r0, #0
 8001492:	d001      	beq.n	8001498 <MX_USART1_UART_Init+0x64>
  {
    Error_Handler();
 8001494:	f000 f8c6 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 8001498:	46c0      	nop			; (mov r8, r8)
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	46c0      	nop			; (mov r8, r8)
 80014a0:	200003a8 	.word	0x200003a8
 80014a4:	200003b2 	.word	0x200003b2
 80014a8:	200003d4 	.word	0x200003d4
 80014ac:	20000280 	.word	0x20000280
 80014b0:	40013800 	.word	0x40013800

080014b4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014ba:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <MX_DMA_Init+0x38>)
 80014bc:	695a      	ldr	r2, [r3, #20]
 80014be:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <MX_DMA_Init+0x38>)
 80014c0:	2101      	movs	r1, #1
 80014c2:	430a      	orrs	r2, r1
 80014c4:	615a      	str	r2, [r3, #20]
 80014c6:	4b09      	ldr	r3, [pc, #36]	; (80014ec <MX_DMA_Init+0x38>)
 80014c8:	695b      	ldr	r3, [r3, #20]
 80014ca:	2201      	movs	r2, #1
 80014cc:	4013      	ands	r3, r2
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2100      	movs	r1, #0
 80014d6:	2009      	movs	r0, #9
 80014d8:	f001 f93a 	bl	8002750 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014dc:	2009      	movs	r0, #9
 80014de:	f001 f94c 	bl	800277a <HAL_NVIC_EnableIRQ>
}
 80014e2:	46c0      	nop			; (mov r8, r8)
 80014e4:	46bd      	mov	sp, r7
 80014e6:	b002      	add	sp, #8
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	40021000 	.word	0x40021000

080014f0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80014f0:	b590      	push	{r4, r7, lr}
 80014f2:	b08b      	sub	sp, #44	; 0x2c
 80014f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f6:	2414      	movs	r4, #20
 80014f8:	193b      	adds	r3, r7, r4
 80014fa:	0018      	movs	r0, r3
 80014fc:	2314      	movs	r3, #20
 80014fe:	001a      	movs	r2, r3
 8001500:	2100      	movs	r1, #0
 8001502:	f005 ffbb 	bl	800747c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001506:	4b43      	ldr	r3, [pc, #268]	; (8001614 <MX_GPIO_Init+0x124>)
 8001508:	695a      	ldr	r2, [r3, #20]
 800150a:	4b42      	ldr	r3, [pc, #264]	; (8001614 <MX_GPIO_Init+0x124>)
 800150c:	2180      	movs	r1, #128	; 0x80
 800150e:	0309      	lsls	r1, r1, #12
 8001510:	430a      	orrs	r2, r1
 8001512:	615a      	str	r2, [r3, #20]
 8001514:	4b3f      	ldr	r3, [pc, #252]	; (8001614 <MX_GPIO_Init+0x124>)
 8001516:	695a      	ldr	r2, [r3, #20]
 8001518:	2380      	movs	r3, #128	; 0x80
 800151a:	031b      	lsls	r3, r3, #12
 800151c:	4013      	ands	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
 8001520:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001522:	4b3c      	ldr	r3, [pc, #240]	; (8001614 <MX_GPIO_Init+0x124>)
 8001524:	695a      	ldr	r2, [r3, #20]
 8001526:	4b3b      	ldr	r3, [pc, #236]	; (8001614 <MX_GPIO_Init+0x124>)
 8001528:	2180      	movs	r1, #128	; 0x80
 800152a:	03c9      	lsls	r1, r1, #15
 800152c:	430a      	orrs	r2, r1
 800152e:	615a      	str	r2, [r3, #20]
 8001530:	4b38      	ldr	r3, [pc, #224]	; (8001614 <MX_GPIO_Init+0x124>)
 8001532:	695a      	ldr	r2, [r3, #20]
 8001534:	2380      	movs	r3, #128	; 0x80
 8001536:	03db      	lsls	r3, r3, #15
 8001538:	4013      	ands	r3, r2
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800153e:	4b35      	ldr	r3, [pc, #212]	; (8001614 <MX_GPIO_Init+0x124>)
 8001540:	695a      	ldr	r2, [r3, #20]
 8001542:	4b34      	ldr	r3, [pc, #208]	; (8001614 <MX_GPIO_Init+0x124>)
 8001544:	2180      	movs	r1, #128	; 0x80
 8001546:	0289      	lsls	r1, r1, #10
 8001548:	430a      	orrs	r2, r1
 800154a:	615a      	str	r2, [r3, #20]
 800154c:	4b31      	ldr	r3, [pc, #196]	; (8001614 <MX_GPIO_Init+0x124>)
 800154e:	695a      	ldr	r2, [r3, #20]
 8001550:	2380      	movs	r3, #128	; 0x80
 8001552:	029b      	lsls	r3, r3, #10
 8001554:	4013      	ands	r3, r2
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800155a:	4b2e      	ldr	r3, [pc, #184]	; (8001614 <MX_GPIO_Init+0x124>)
 800155c:	695a      	ldr	r2, [r3, #20]
 800155e:	4b2d      	ldr	r3, [pc, #180]	; (8001614 <MX_GPIO_Init+0x124>)
 8001560:	2180      	movs	r1, #128	; 0x80
 8001562:	02c9      	lsls	r1, r1, #11
 8001564:	430a      	orrs	r2, r1
 8001566:	615a      	str	r2, [r3, #20]
 8001568:	4b2a      	ldr	r3, [pc, #168]	; (8001614 <MX_GPIO_Init+0x124>)
 800156a:	695a      	ldr	r2, [r3, #20]
 800156c:	2380      	movs	r3, #128	; 0x80
 800156e:	02db      	lsls	r3, r3, #11
 8001570:	4013      	ands	r3, r2
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10, GPIO_PIN_RESET);
 8001576:	239f      	movs	r3, #159	; 0x9f
 8001578:	019b      	lsls	r3, r3, #6
 800157a:	4827      	ldr	r0, [pc, #156]	; (8001618 <MX_GPIO_Init+0x128>)
 800157c:	2200      	movs	r2, #0
 800157e:	0019      	movs	r1, r3
 8001580:	f001 fd55 	bl	800302e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6 | GPIO_PIN_7, GPIO_PIN_RESET);
 8001584:	4b25      	ldr	r3, [pc, #148]	; (800161c <MX_GPIO_Init+0x12c>)
 8001586:	2200      	movs	r2, #0
 8001588:	21c0      	movs	r1, #192	; 0xc0
 800158a:	0018      	movs	r0, r3
 800158c:	f001 fd4f 	bl	800302e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5 | GPIO_PIN_6, GPIO_PIN_RESET);
 8001590:	4b23      	ldr	r3, [pc, #140]	; (8001620 <MX_GPIO_Init+0x130>)
 8001592:	2200      	movs	r2, #0
 8001594:	2160      	movs	r1, #96	; 0x60
 8001596:	0018      	movs	r0, r3
 8001598:	f001 fd49 	bl	800302e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
 800159c:	193b      	adds	r3, r7, r4
 800159e:	229f      	movs	r2, #159	; 0x9f
 80015a0:	0192      	lsls	r2, r2, #6
 80015a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a4:	193b      	adds	r3, r7, r4
 80015a6:	2201      	movs	r2, #1
 80015a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	193b      	adds	r3, r7, r4
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b0:	193b      	adds	r3, r7, r4
 80015b2:	2200      	movs	r2, #0
 80015b4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b6:	193b      	adds	r3, r7, r4
 80015b8:	4a17      	ldr	r2, [pc, #92]	; (8001618 <MX_GPIO_Init+0x128>)
 80015ba:	0019      	movs	r1, r3
 80015bc:	0010      	movs	r0, r2
 80015be:	f001 fba9 	bl	8002d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 80015c2:	193b      	adds	r3, r7, r4
 80015c4:	22c0      	movs	r2, #192	; 0xc0
 80015c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c8:	193b      	adds	r3, r7, r4
 80015ca:	2201      	movs	r2, #1
 80015cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	193b      	adds	r3, r7, r4
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d4:	193b      	adds	r3, r7, r4
 80015d6:	2200      	movs	r2, #0
 80015d8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015da:	193b      	adds	r3, r7, r4
 80015dc:	4a0f      	ldr	r2, [pc, #60]	; (800161c <MX_GPIO_Init+0x12c>)
 80015de:	0019      	movs	r1, r3
 80015e0:	0010      	movs	r0, r2
 80015e2:	f001 fb97 	bl	8002d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80015e6:	0021      	movs	r1, r4
 80015e8:	187b      	adds	r3, r7, r1
 80015ea:	2260      	movs	r2, #96	; 0x60
 80015ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ee:	187b      	adds	r3, r7, r1
 80015f0:	2201      	movs	r2, #1
 80015f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	187b      	adds	r3, r7, r1
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fa:	187b      	adds	r3, r7, r1
 80015fc:	2200      	movs	r2, #0
 80015fe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001600:	187b      	adds	r3, r7, r1
 8001602:	4a07      	ldr	r2, [pc, #28]	; (8001620 <MX_GPIO_Init+0x130>)
 8001604:	0019      	movs	r1, r3
 8001606:	0010      	movs	r0, r2
 8001608:	f001 fb84 	bl	8002d14 <HAL_GPIO_Init>
}
 800160c:	46c0      	nop			; (mov r8, r8)
 800160e:	46bd      	mov	sp, r7
 8001610:	b00b      	add	sp, #44	; 0x2c
 8001612:	bd90      	pop	{r4, r7, pc}
 8001614:	40021000 	.word	0x40021000
 8001618:	48000800 	.word	0x48000800
 800161c:	48001400 	.word	0x48001400
 8001620:	48000400 	.word	0x48000400

08001624 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001628:	b672      	cpsid	i
}
 800162a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800162c:	e7fe      	b.n	800162c <Error_Handler+0x8>
	...

08001630 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001636:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <HAL_MspInit+0x44>)
 8001638:	699a      	ldr	r2, [r3, #24]
 800163a:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <HAL_MspInit+0x44>)
 800163c:	2101      	movs	r1, #1
 800163e:	430a      	orrs	r2, r1
 8001640:	619a      	str	r2, [r3, #24]
 8001642:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <HAL_MspInit+0x44>)
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	2201      	movs	r2, #1
 8001648:	4013      	ands	r3, r2
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800164e:	4b09      	ldr	r3, [pc, #36]	; (8001674 <HAL_MspInit+0x44>)
 8001650:	69da      	ldr	r2, [r3, #28]
 8001652:	4b08      	ldr	r3, [pc, #32]	; (8001674 <HAL_MspInit+0x44>)
 8001654:	2180      	movs	r1, #128	; 0x80
 8001656:	0549      	lsls	r1, r1, #21
 8001658:	430a      	orrs	r2, r1
 800165a:	61da      	str	r2, [r3, #28]
 800165c:	4b05      	ldr	r3, [pc, #20]	; (8001674 <HAL_MspInit+0x44>)
 800165e:	69da      	ldr	r2, [r3, #28]
 8001660:	2380      	movs	r3, #128	; 0x80
 8001662:	055b      	lsls	r3, r3, #21
 8001664:	4013      	ands	r3, r2
 8001666:	603b      	str	r3, [r7, #0]
 8001668:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800166a:	46c0      	nop			; (mov r8, r8)
 800166c:	46bd      	mov	sp, r7
 800166e:	b002      	add	sp, #8
 8001670:	bd80      	pop	{r7, pc}
 8001672:	46c0      	nop			; (mov r8, r8)
 8001674:	40021000 	.word	0x40021000

08001678 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001678:	b590      	push	{r4, r7, lr}
 800167a:	b08d      	sub	sp, #52	; 0x34
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	241c      	movs	r4, #28
 8001682:	193b      	adds	r3, r7, r4
 8001684:	0018      	movs	r0, r3
 8001686:	2314      	movs	r3, #20
 8001688:	001a      	movs	r2, r3
 800168a:	2100      	movs	r1, #0
 800168c:	f005 fef6 	bl	800747c <memset>
  if(hadc->Instance==ADC1)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a4a      	ldr	r2, [pc, #296]	; (80017c0 <HAL_ADC_MspInit+0x148>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d000      	beq.n	800169c <HAL_ADC_MspInit+0x24>
 800169a:	e08d      	b.n	80017b8 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800169c:	4b49      	ldr	r3, [pc, #292]	; (80017c4 <HAL_ADC_MspInit+0x14c>)
 800169e:	699a      	ldr	r2, [r3, #24]
 80016a0:	4b48      	ldr	r3, [pc, #288]	; (80017c4 <HAL_ADC_MspInit+0x14c>)
 80016a2:	2180      	movs	r1, #128	; 0x80
 80016a4:	0089      	lsls	r1, r1, #2
 80016a6:	430a      	orrs	r2, r1
 80016a8:	619a      	str	r2, [r3, #24]
 80016aa:	4b46      	ldr	r3, [pc, #280]	; (80017c4 <HAL_ADC_MspInit+0x14c>)
 80016ac:	699a      	ldr	r2, [r3, #24]
 80016ae:	2380      	movs	r3, #128	; 0x80
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4013      	ands	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
 80016b6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b8:	4b42      	ldr	r3, [pc, #264]	; (80017c4 <HAL_ADC_MspInit+0x14c>)
 80016ba:	695a      	ldr	r2, [r3, #20]
 80016bc:	4b41      	ldr	r3, [pc, #260]	; (80017c4 <HAL_ADC_MspInit+0x14c>)
 80016be:	2180      	movs	r1, #128	; 0x80
 80016c0:	0309      	lsls	r1, r1, #12
 80016c2:	430a      	orrs	r2, r1
 80016c4:	615a      	str	r2, [r3, #20]
 80016c6:	4b3f      	ldr	r3, [pc, #252]	; (80017c4 <HAL_ADC_MspInit+0x14c>)
 80016c8:	695a      	ldr	r2, [r3, #20]
 80016ca:	2380      	movs	r3, #128	; 0x80
 80016cc:	031b      	lsls	r3, r3, #12
 80016ce:	4013      	ands	r3, r2
 80016d0:	617b      	str	r3, [r7, #20]
 80016d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d4:	4b3b      	ldr	r3, [pc, #236]	; (80017c4 <HAL_ADC_MspInit+0x14c>)
 80016d6:	695a      	ldr	r2, [r3, #20]
 80016d8:	4b3a      	ldr	r3, [pc, #232]	; (80017c4 <HAL_ADC_MspInit+0x14c>)
 80016da:	2180      	movs	r1, #128	; 0x80
 80016dc:	0289      	lsls	r1, r1, #10
 80016de:	430a      	orrs	r2, r1
 80016e0:	615a      	str	r2, [r3, #20]
 80016e2:	4b38      	ldr	r3, [pc, #224]	; (80017c4 <HAL_ADC_MspInit+0x14c>)
 80016e4:	695a      	ldr	r2, [r3, #20]
 80016e6:	2380      	movs	r3, #128	; 0x80
 80016e8:	029b      	lsls	r3, r3, #10
 80016ea:	4013      	ands	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
 80016ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f0:	4b34      	ldr	r3, [pc, #208]	; (80017c4 <HAL_ADC_MspInit+0x14c>)
 80016f2:	695a      	ldr	r2, [r3, #20]
 80016f4:	4b33      	ldr	r3, [pc, #204]	; (80017c4 <HAL_ADC_MspInit+0x14c>)
 80016f6:	2180      	movs	r1, #128	; 0x80
 80016f8:	02c9      	lsls	r1, r1, #11
 80016fa:	430a      	orrs	r2, r1
 80016fc:	615a      	str	r2, [r3, #20]
 80016fe:	4b31      	ldr	r3, [pc, #196]	; (80017c4 <HAL_ADC_MspInit+0x14c>)
 8001700:	695a      	ldr	r2, [r3, #20]
 8001702:	2380      	movs	r3, #128	; 0x80
 8001704:	02db      	lsls	r3, r3, #11
 8001706:	4013      	ands	r3, r2
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800170c:	193b      	adds	r3, r7, r4
 800170e:	223f      	movs	r2, #63	; 0x3f
 8001710:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001712:	193b      	adds	r3, r7, r4
 8001714:	2203      	movs	r2, #3
 8001716:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	193b      	adds	r3, r7, r4
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800171e:	193b      	adds	r3, r7, r4
 8001720:	4a29      	ldr	r2, [pc, #164]	; (80017c8 <HAL_ADC_MspInit+0x150>)
 8001722:	0019      	movs	r1, r3
 8001724:	0010      	movs	r0, r2
 8001726:	f001 faf5 	bl	8002d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800172a:	193b      	adds	r3, r7, r4
 800172c:	22ef      	movs	r2, #239	; 0xef
 800172e:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001730:	193b      	adds	r3, r7, r4
 8001732:	2203      	movs	r2, #3
 8001734:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	193b      	adds	r3, r7, r4
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173c:	193a      	adds	r2, r7, r4
 800173e:	2390      	movs	r3, #144	; 0x90
 8001740:	05db      	lsls	r3, r3, #23
 8001742:	0011      	movs	r1, r2
 8001744:	0018      	movs	r0, r3
 8001746:	f001 fae5 	bl	8002d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800174a:	193b      	adds	r3, r7, r4
 800174c:	2203      	movs	r2, #3
 800174e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001750:	193b      	adds	r3, r7, r4
 8001752:	2203      	movs	r2, #3
 8001754:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	193b      	adds	r3, r7, r4
 8001758:	2200      	movs	r2, #0
 800175a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800175c:	193b      	adds	r3, r7, r4
 800175e:	4a1b      	ldr	r2, [pc, #108]	; (80017cc <HAL_ADC_MspInit+0x154>)
 8001760:	0019      	movs	r1, r3
 8001762:	0010      	movs	r0, r2
 8001764:	f001 fad6 	bl	8002d14 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001768:	4b19      	ldr	r3, [pc, #100]	; (80017d0 <HAL_ADC_MspInit+0x158>)
 800176a:	4a1a      	ldr	r2, [pc, #104]	; (80017d4 <HAL_ADC_MspInit+0x15c>)
 800176c:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800176e:	4b18      	ldr	r3, [pc, #96]	; (80017d0 <HAL_ADC_MspInit+0x158>)
 8001770:	2200      	movs	r2, #0
 8001772:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001774:	4b16      	ldr	r3, [pc, #88]	; (80017d0 <HAL_ADC_MspInit+0x158>)
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 800177a:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <HAL_ADC_MspInit+0x158>)
 800177c:	2280      	movs	r2, #128	; 0x80
 800177e:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001780:	4b13      	ldr	r3, [pc, #76]	; (80017d0 <HAL_ADC_MspInit+0x158>)
 8001782:	2280      	movs	r2, #128	; 0x80
 8001784:	0052      	lsls	r2, r2, #1
 8001786:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001788:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <HAL_ADC_MspInit+0x158>)
 800178a:	2280      	movs	r2, #128	; 0x80
 800178c:	00d2      	lsls	r2, r2, #3
 800178e:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8001790:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <HAL_ADC_MspInit+0x158>)
 8001792:	2200      	movs	r2, #0
 8001794:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8001796:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <HAL_ADC_MspInit+0x158>)
 8001798:	2200      	movs	r2, #0
 800179a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <HAL_ADC_MspInit+0x158>)
 800179e:	0018      	movs	r0, r3
 80017a0:	f001 f8a2 	bl	80028e8 <HAL_DMA_Init>
 80017a4:	1e03      	subs	r3, r0, #0
 80017a6:	d001      	beq.n	80017ac <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 80017a8:	f7ff ff3c 	bl	8001624 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4a08      	ldr	r2, [pc, #32]	; (80017d0 <HAL_ADC_MspInit+0x158>)
 80017b0:	631a      	str	r2, [r3, #48]	; 0x30
 80017b2:	4b07      	ldr	r3, [pc, #28]	; (80017d0 <HAL_ADC_MspInit+0x158>)
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017b8:	46c0      	nop			; (mov r8, r8)
 80017ba:	46bd      	mov	sp, r7
 80017bc:	b00d      	add	sp, #52	; 0x34
 80017be:	bd90      	pop	{r4, r7, pc}
 80017c0:	40012400 	.word	0x40012400
 80017c4:	40021000 	.word	0x40021000
 80017c8:	48000800 	.word	0x48000800
 80017cc:	48000400 	.word	0x48000400
 80017d0:	20000084 	.word	0x20000084
 80017d4:	40020008 	.word	0x40020008

080017d8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80017d8:	b590      	push	{r4, r7, lr}
 80017da:	b08b      	sub	sp, #44	; 0x2c
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e0:	2414      	movs	r4, #20
 80017e2:	193b      	adds	r3, r7, r4
 80017e4:	0018      	movs	r0, r3
 80017e6:	2314      	movs	r3, #20
 80017e8:	001a      	movs	r2, r3
 80017ea:	2100      	movs	r1, #0
 80017ec:	f005 fe46 	bl	800747c <memset>
  if(hdac->Instance==DAC)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a19      	ldr	r2, [pc, #100]	; (800185c <HAL_DAC_MspInit+0x84>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d12b      	bne.n	8001852 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80017fa:	4b19      	ldr	r3, [pc, #100]	; (8001860 <HAL_DAC_MspInit+0x88>)
 80017fc:	69da      	ldr	r2, [r3, #28]
 80017fe:	4b18      	ldr	r3, [pc, #96]	; (8001860 <HAL_DAC_MspInit+0x88>)
 8001800:	2180      	movs	r1, #128	; 0x80
 8001802:	0589      	lsls	r1, r1, #22
 8001804:	430a      	orrs	r2, r1
 8001806:	61da      	str	r2, [r3, #28]
 8001808:	4b15      	ldr	r3, [pc, #84]	; (8001860 <HAL_DAC_MspInit+0x88>)
 800180a:	69da      	ldr	r2, [r3, #28]
 800180c:	2380      	movs	r3, #128	; 0x80
 800180e:	059b      	lsls	r3, r3, #22
 8001810:	4013      	ands	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001816:	4b12      	ldr	r3, [pc, #72]	; (8001860 <HAL_DAC_MspInit+0x88>)
 8001818:	695a      	ldr	r2, [r3, #20]
 800181a:	4b11      	ldr	r3, [pc, #68]	; (8001860 <HAL_DAC_MspInit+0x88>)
 800181c:	2180      	movs	r1, #128	; 0x80
 800181e:	0289      	lsls	r1, r1, #10
 8001820:	430a      	orrs	r2, r1
 8001822:	615a      	str	r2, [r3, #20]
 8001824:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <HAL_DAC_MspInit+0x88>)
 8001826:	695a      	ldr	r2, [r3, #20]
 8001828:	2380      	movs	r3, #128	; 0x80
 800182a:	029b      	lsls	r3, r3, #10
 800182c:	4013      	ands	r3, r2
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001832:	193b      	adds	r3, r7, r4
 8001834:	2210      	movs	r2, #16
 8001836:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001838:	193b      	adds	r3, r7, r4
 800183a:	2203      	movs	r2, #3
 800183c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	193b      	adds	r3, r7, r4
 8001840:	2200      	movs	r2, #0
 8001842:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001844:	193a      	adds	r2, r7, r4
 8001846:	2390      	movs	r3, #144	; 0x90
 8001848:	05db      	lsls	r3, r3, #23
 800184a:	0011      	movs	r1, r2
 800184c:	0018      	movs	r0, r3
 800184e:	f001 fa61 	bl	8002d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	46bd      	mov	sp, r7
 8001856:	b00b      	add	sp, #44	; 0x2c
 8001858:	bd90      	pop	{r4, r7, pc}
 800185a:	46c0      	nop			; (mov r8, r8)
 800185c:	40007400 	.word	0x40007400
 8001860:	40021000 	.word	0x40021000

08001864 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001864:	b590      	push	{r4, r7, lr}
 8001866:	b08b      	sub	sp, #44	; 0x2c
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186c:	2414      	movs	r4, #20
 800186e:	193b      	adds	r3, r7, r4
 8001870:	0018      	movs	r0, r3
 8001872:	2314      	movs	r3, #20
 8001874:	001a      	movs	r2, r3
 8001876:	2100      	movs	r1, #0
 8001878:	f005 fe00 	bl	800747c <memset>
  if(hi2c->Instance==I2C1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a1c      	ldr	r2, [pc, #112]	; (80018f4 <HAL_I2C_MspInit+0x90>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d132      	bne.n	80018ec <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001886:	4b1c      	ldr	r3, [pc, #112]	; (80018f8 <HAL_I2C_MspInit+0x94>)
 8001888:	695a      	ldr	r2, [r3, #20]
 800188a:	4b1b      	ldr	r3, [pc, #108]	; (80018f8 <HAL_I2C_MspInit+0x94>)
 800188c:	2180      	movs	r1, #128	; 0x80
 800188e:	02c9      	lsls	r1, r1, #11
 8001890:	430a      	orrs	r2, r1
 8001892:	615a      	str	r2, [r3, #20]
 8001894:	4b18      	ldr	r3, [pc, #96]	; (80018f8 <HAL_I2C_MspInit+0x94>)
 8001896:	695a      	ldr	r2, [r3, #20]
 8001898:	2380      	movs	r3, #128	; 0x80
 800189a:	02db      	lsls	r3, r3, #11
 800189c:	4013      	ands	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
 80018a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018a2:	193b      	adds	r3, r7, r4
 80018a4:	22c0      	movs	r2, #192	; 0xc0
 80018a6:	0092      	lsls	r2, r2, #2
 80018a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018aa:	0021      	movs	r1, r4
 80018ac:	187b      	adds	r3, r7, r1
 80018ae:	2212      	movs	r2, #18
 80018b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	187b      	adds	r3, r7, r1
 80018b4:	2200      	movs	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018b8:	187b      	adds	r3, r7, r1
 80018ba:	2203      	movs	r2, #3
 80018bc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80018be:	187b      	adds	r3, r7, r1
 80018c0:	2201      	movs	r2, #1
 80018c2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c4:	187b      	adds	r3, r7, r1
 80018c6:	4a0d      	ldr	r2, [pc, #52]	; (80018fc <HAL_I2C_MspInit+0x98>)
 80018c8:	0019      	movs	r1, r3
 80018ca:	0010      	movs	r0, r2
 80018cc:	f001 fa22 	bl	8002d14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018d0:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <HAL_I2C_MspInit+0x94>)
 80018d2:	69da      	ldr	r2, [r3, #28]
 80018d4:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <HAL_I2C_MspInit+0x94>)
 80018d6:	2180      	movs	r1, #128	; 0x80
 80018d8:	0389      	lsls	r1, r1, #14
 80018da:	430a      	orrs	r2, r1
 80018dc:	61da      	str	r2, [r3, #28]
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <HAL_I2C_MspInit+0x94>)
 80018e0:	69da      	ldr	r2, [r3, #28]
 80018e2:	2380      	movs	r3, #128	; 0x80
 80018e4:	039b      	lsls	r3, r3, #14
 80018e6:	4013      	ands	r3, r2
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018ec:	46c0      	nop			; (mov r8, r8)
 80018ee:	46bd      	mov	sp, r7
 80018f0:	b00b      	add	sp, #44	; 0x2c
 80018f2:	bd90      	pop	{r4, r7, pc}
 80018f4:	40005400 	.word	0x40005400
 80018f8:	40021000 	.word	0x40021000
 80018fc:	48000400 	.word	0x48000400

08001900 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001900:	b590      	push	{r4, r7, lr}
 8001902:	b08d      	sub	sp, #52	; 0x34
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001908:	241c      	movs	r4, #28
 800190a:	193b      	adds	r3, r7, r4
 800190c:	0018      	movs	r0, r3
 800190e:	2314      	movs	r3, #20
 8001910:	001a      	movs	r2, r3
 8001912:	2100      	movs	r1, #0
 8001914:	f005 fdb2 	bl	800747c <memset>
  if(hspi->Instance==SPI1)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a38      	ldr	r2, [pc, #224]	; (8001a00 <HAL_SPI_MspInit+0x100>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d132      	bne.n	8001988 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001922:	4b38      	ldr	r3, [pc, #224]	; (8001a04 <HAL_SPI_MspInit+0x104>)
 8001924:	699a      	ldr	r2, [r3, #24]
 8001926:	4b37      	ldr	r3, [pc, #220]	; (8001a04 <HAL_SPI_MspInit+0x104>)
 8001928:	2180      	movs	r1, #128	; 0x80
 800192a:	0149      	lsls	r1, r1, #5
 800192c:	430a      	orrs	r2, r1
 800192e:	619a      	str	r2, [r3, #24]
 8001930:	4b34      	ldr	r3, [pc, #208]	; (8001a04 <HAL_SPI_MspInit+0x104>)
 8001932:	699a      	ldr	r2, [r3, #24]
 8001934:	2380      	movs	r3, #128	; 0x80
 8001936:	015b      	lsls	r3, r3, #5
 8001938:	4013      	ands	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
 800193c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800193e:	4b31      	ldr	r3, [pc, #196]	; (8001a04 <HAL_SPI_MspInit+0x104>)
 8001940:	695a      	ldr	r2, [r3, #20]
 8001942:	4b30      	ldr	r3, [pc, #192]	; (8001a04 <HAL_SPI_MspInit+0x104>)
 8001944:	2180      	movs	r1, #128	; 0x80
 8001946:	02c9      	lsls	r1, r1, #11
 8001948:	430a      	orrs	r2, r1
 800194a:	615a      	str	r2, [r3, #20]
 800194c:	4b2d      	ldr	r3, [pc, #180]	; (8001a04 <HAL_SPI_MspInit+0x104>)
 800194e:	695a      	ldr	r2, [r3, #20]
 8001950:	2380      	movs	r3, #128	; 0x80
 8001952:	02db      	lsls	r3, r3, #11
 8001954:	4013      	ands	r3, r2
 8001956:	617b      	str	r3, [r7, #20]
 8001958:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800195a:	0021      	movs	r1, r4
 800195c:	187b      	adds	r3, r7, r1
 800195e:	2218      	movs	r2, #24
 8001960:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001962:	187b      	adds	r3, r7, r1
 8001964:	2202      	movs	r2, #2
 8001966:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	187b      	adds	r3, r7, r1
 800196a:	2200      	movs	r2, #0
 800196c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800196e:	187b      	adds	r3, r7, r1
 8001970:	2203      	movs	r2, #3
 8001972:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001974:	187b      	adds	r3, r7, r1
 8001976:	2200      	movs	r2, #0
 8001978:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197a:	187b      	adds	r3, r7, r1
 800197c:	4a22      	ldr	r2, [pc, #136]	; (8001a08 <HAL_SPI_MspInit+0x108>)
 800197e:	0019      	movs	r1, r3
 8001980:	0010      	movs	r0, r2
 8001982:	f001 f9c7 	bl	8002d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001986:	e037      	b.n	80019f8 <HAL_SPI_MspInit+0xf8>
  else if(hspi->Instance==SPI2)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a1f      	ldr	r2, [pc, #124]	; (8001a0c <HAL_SPI_MspInit+0x10c>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d132      	bne.n	80019f8 <HAL_SPI_MspInit+0xf8>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001992:	4b1c      	ldr	r3, [pc, #112]	; (8001a04 <HAL_SPI_MspInit+0x104>)
 8001994:	69da      	ldr	r2, [r3, #28]
 8001996:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <HAL_SPI_MspInit+0x104>)
 8001998:	2180      	movs	r1, #128	; 0x80
 800199a:	01c9      	lsls	r1, r1, #7
 800199c:	430a      	orrs	r2, r1
 800199e:	61da      	str	r2, [r3, #28]
 80019a0:	4b18      	ldr	r3, [pc, #96]	; (8001a04 <HAL_SPI_MspInit+0x104>)
 80019a2:	69da      	ldr	r2, [r3, #28]
 80019a4:	2380      	movs	r3, #128	; 0x80
 80019a6:	01db      	lsls	r3, r3, #7
 80019a8:	4013      	ands	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
 80019ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ae:	4b15      	ldr	r3, [pc, #84]	; (8001a04 <HAL_SPI_MspInit+0x104>)
 80019b0:	695a      	ldr	r2, [r3, #20]
 80019b2:	4b14      	ldr	r3, [pc, #80]	; (8001a04 <HAL_SPI_MspInit+0x104>)
 80019b4:	2180      	movs	r1, #128	; 0x80
 80019b6:	02c9      	lsls	r1, r1, #11
 80019b8:	430a      	orrs	r2, r1
 80019ba:	615a      	str	r2, [r3, #20]
 80019bc:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <HAL_SPI_MspInit+0x104>)
 80019be:	695a      	ldr	r2, [r3, #20]
 80019c0:	2380      	movs	r3, #128	; 0x80
 80019c2:	02db      	lsls	r3, r3, #11
 80019c4:	4013      	ands	r3, r2
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80019ca:	211c      	movs	r1, #28
 80019cc:	187b      	adds	r3, r7, r1
 80019ce:	22c0      	movs	r2, #192	; 0xc0
 80019d0:	01d2      	lsls	r2, r2, #7
 80019d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d4:	187b      	adds	r3, r7, r1
 80019d6:	2202      	movs	r2, #2
 80019d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	187b      	adds	r3, r7, r1
 80019dc:	2200      	movs	r2, #0
 80019de:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019e0:	187b      	adds	r3, r7, r1
 80019e2:	2203      	movs	r2, #3
 80019e4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80019e6:	187b      	adds	r3, r7, r1
 80019e8:	2200      	movs	r2, #0
 80019ea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ec:	187b      	adds	r3, r7, r1
 80019ee:	4a06      	ldr	r2, [pc, #24]	; (8001a08 <HAL_SPI_MspInit+0x108>)
 80019f0:	0019      	movs	r1, r3
 80019f2:	0010      	movs	r0, r2
 80019f4:	f001 f98e 	bl	8002d14 <HAL_GPIO_Init>
}
 80019f8:	46c0      	nop			; (mov r8, r8)
 80019fa:	46bd      	mov	sp, r7
 80019fc:	b00d      	add	sp, #52	; 0x34
 80019fe:	bd90      	pop	{r4, r7, pc}
 8001a00:	40013000 	.word	0x40013000
 8001a04:	40021000 	.word	0x40021000
 8001a08:	48000400 	.word	0x48000400
 8001a0c:	40003800 	.word	0x40003800

08001a10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a1f      	ldr	r2, [pc, #124]	; (8001a9c <HAL_TIM_Base_MspInit+0x8c>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d11e      	bne.n	8001a60 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a22:	4b1f      	ldr	r3, [pc, #124]	; (8001aa0 <HAL_TIM_Base_MspInit+0x90>)
 8001a24:	699a      	ldr	r2, [r3, #24]
 8001a26:	4b1e      	ldr	r3, [pc, #120]	; (8001aa0 <HAL_TIM_Base_MspInit+0x90>)
 8001a28:	2180      	movs	r1, #128	; 0x80
 8001a2a:	0109      	lsls	r1, r1, #4
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	619a      	str	r2, [r3, #24]
 8001a30:	4b1b      	ldr	r3, [pc, #108]	; (8001aa0 <HAL_TIM_Base_MspInit+0x90>)
 8001a32:	699a      	ldr	r2, [r3, #24]
 8001a34:	2380      	movs	r3, #128	; 0x80
 8001a36:	011b      	lsls	r3, r3, #4
 8001a38:	4013      	ands	r3, r2
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 1, 0);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2101      	movs	r1, #1
 8001a42:	200d      	movs	r0, #13
 8001a44:	f000 fe84 	bl	8002750 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001a48:	200d      	movs	r0, #13
 8001a4a:	f000 fe96 	bl	800277a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	2101      	movs	r1, #1
 8001a52:	200e      	movs	r0, #14
 8001a54:	f000 fe7c 	bl	8002750 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001a58:	200e      	movs	r0, #14
 8001a5a:	f000 fe8e 	bl	800277a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a5e:	e019      	b.n	8001a94 <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM2)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	2380      	movs	r3, #128	; 0x80
 8001a66:	05db      	lsls	r3, r3, #23
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d113      	bne.n	8001a94 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <HAL_TIM_Base_MspInit+0x90>)
 8001a6e:	69da      	ldr	r2, [r3, #28]
 8001a70:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <HAL_TIM_Base_MspInit+0x90>)
 8001a72:	2101      	movs	r1, #1
 8001a74:	430a      	orrs	r2, r1
 8001a76:	61da      	str	r2, [r3, #28]
 8001a78:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <HAL_TIM_Base_MspInit+0x90>)
 8001a7a:	69db      	ldr	r3, [r3, #28]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	4013      	ands	r3, r2
 8001a80:	60bb      	str	r3, [r7, #8]
 8001a82:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001a84:	2200      	movs	r2, #0
 8001a86:	2101      	movs	r1, #1
 8001a88:	200f      	movs	r0, #15
 8001a8a:	f000 fe61 	bl	8002750 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a8e:	200f      	movs	r0, #15
 8001a90:	f000 fe73 	bl	800277a <HAL_NVIC_EnableIRQ>
}
 8001a94:	46c0      	nop			; (mov r8, r8)
 8001a96:	46bd      	mov	sp, r7
 8001a98:	b004      	add	sp, #16
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40012c00 	.word	0x40012c00
 8001aa0:	40021000 	.word	0x40021000

08001aa4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001aa4:	b590      	push	{r4, r7, lr}
 8001aa6:	b08b      	sub	sp, #44	; 0x2c
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aac:	2414      	movs	r4, #20
 8001aae:	193b      	adds	r3, r7, r4
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	2314      	movs	r3, #20
 8001ab4:	001a      	movs	r2, r3
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	f005 fce0 	bl	800747c <memset>
  if(htim->Instance==TIM1)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a2c      	ldr	r2, [pc, #176]	; (8001b74 <HAL_TIM_MspPostInit+0xd0>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d126      	bne.n	8001b14 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac6:	4b2c      	ldr	r3, [pc, #176]	; (8001b78 <HAL_TIM_MspPostInit+0xd4>)
 8001ac8:	695a      	ldr	r2, [r3, #20]
 8001aca:	4b2b      	ldr	r3, [pc, #172]	; (8001b78 <HAL_TIM_MspPostInit+0xd4>)
 8001acc:	2180      	movs	r1, #128	; 0x80
 8001ace:	0289      	lsls	r1, r1, #10
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	615a      	str	r2, [r3, #20]
 8001ad4:	4b28      	ldr	r3, [pc, #160]	; (8001b78 <HAL_TIM_MspPostInit+0xd4>)
 8001ad6:	695a      	ldr	r2, [r3, #20]
 8001ad8:	2380      	movs	r3, #128	; 0x80
 8001ada:	029b      	lsls	r3, r3, #10
 8001adc:	4013      	ands	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
 8001ae0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ae2:	193b      	adds	r3, r7, r4
 8001ae4:	2280      	movs	r2, #128	; 0x80
 8001ae6:	0052      	lsls	r2, r2, #1
 8001ae8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aea:	0021      	movs	r1, r4
 8001aec:	187b      	adds	r3, r7, r1
 8001aee:	2202      	movs	r2, #2
 8001af0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	187b      	adds	r3, r7, r1
 8001af4:	2200      	movs	r2, #0
 8001af6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af8:	187b      	adds	r3, r7, r1
 8001afa:	2200      	movs	r2, #0
 8001afc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001afe:	187b      	adds	r3, r7, r1
 8001b00:	2202      	movs	r2, #2
 8001b02:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b04:	187a      	adds	r2, r7, r1
 8001b06:	2390      	movs	r3, #144	; 0x90
 8001b08:	05db      	lsls	r3, r3, #23
 8001b0a:	0011      	movs	r1, r2
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	f001 f901 	bl	8002d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b12:	e02a      	b.n	8001b6a <HAL_TIM_MspPostInit+0xc6>
  else if(htim->Instance==TIM2)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	2380      	movs	r3, #128	; 0x80
 8001b1a:	05db      	lsls	r3, r3, #23
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d124      	bne.n	8001b6a <HAL_TIM_MspPostInit+0xc6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b20:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <HAL_TIM_MspPostInit+0xd4>)
 8001b22:	695a      	ldr	r2, [r3, #20]
 8001b24:	4b14      	ldr	r3, [pc, #80]	; (8001b78 <HAL_TIM_MspPostInit+0xd4>)
 8001b26:	2180      	movs	r1, #128	; 0x80
 8001b28:	02c9      	lsls	r1, r1, #11
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	615a      	str	r2, [r3, #20]
 8001b2e:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <HAL_TIM_MspPostInit+0xd4>)
 8001b30:	695a      	ldr	r2, [r3, #20]
 8001b32:	2380      	movs	r3, #128	; 0x80
 8001b34:	02db      	lsls	r3, r3, #11
 8001b36:	4013      	ands	r3, r2
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b3c:	2114      	movs	r1, #20
 8001b3e:	187b      	adds	r3, r7, r1
 8001b40:	2280      	movs	r2, #128	; 0x80
 8001b42:	0112      	lsls	r2, r2, #4
 8001b44:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b46:	187b      	adds	r3, r7, r1
 8001b48:	2202      	movs	r2, #2
 8001b4a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	187b      	adds	r3, r7, r1
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b52:	187b      	adds	r3, r7, r1
 8001b54:	2200      	movs	r2, #0
 8001b56:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001b58:	187b      	adds	r3, r7, r1
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b5e:	187b      	adds	r3, r7, r1
 8001b60:	4a06      	ldr	r2, [pc, #24]	; (8001b7c <HAL_TIM_MspPostInit+0xd8>)
 8001b62:	0019      	movs	r1, r3
 8001b64:	0010      	movs	r0, r2
 8001b66:	f001 f8d5 	bl	8002d14 <HAL_GPIO_Init>
}
 8001b6a:	46c0      	nop			; (mov r8, r8)
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	b00b      	add	sp, #44	; 0x2c
 8001b70:	bd90      	pop	{r4, r7, pc}
 8001b72:	46c0      	nop			; (mov r8, r8)
 8001b74:	40012c00 	.word	0x40012c00
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	48000400 	.word	0x48000400

08001b80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b80:	b590      	push	{r4, r7, lr}
 8001b82:	b08b      	sub	sp, #44	; 0x2c
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b88:	2414      	movs	r4, #20
 8001b8a:	193b      	adds	r3, r7, r4
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	2314      	movs	r3, #20
 8001b90:	001a      	movs	r2, r3
 8001b92:	2100      	movs	r1, #0
 8001b94:	f005 fc72 	bl	800747c <memset>
  if(huart->Instance==USART1)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a21      	ldr	r2, [pc, #132]	; (8001c24 <HAL_UART_MspInit+0xa4>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d13b      	bne.n	8001c1a <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ba2:	4b21      	ldr	r3, [pc, #132]	; (8001c28 <HAL_UART_MspInit+0xa8>)
 8001ba4:	699a      	ldr	r2, [r3, #24]
 8001ba6:	4b20      	ldr	r3, [pc, #128]	; (8001c28 <HAL_UART_MspInit+0xa8>)
 8001ba8:	2180      	movs	r1, #128	; 0x80
 8001baa:	01c9      	lsls	r1, r1, #7
 8001bac:	430a      	orrs	r2, r1
 8001bae:	619a      	str	r2, [r3, #24]
 8001bb0:	4b1d      	ldr	r3, [pc, #116]	; (8001c28 <HAL_UART_MspInit+0xa8>)
 8001bb2:	699a      	ldr	r2, [r3, #24]
 8001bb4:	2380      	movs	r3, #128	; 0x80
 8001bb6:	01db      	lsls	r3, r3, #7
 8001bb8:	4013      	ands	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
 8001bbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bbe:	4b1a      	ldr	r3, [pc, #104]	; (8001c28 <HAL_UART_MspInit+0xa8>)
 8001bc0:	695a      	ldr	r2, [r3, #20]
 8001bc2:	4b19      	ldr	r3, [pc, #100]	; (8001c28 <HAL_UART_MspInit+0xa8>)
 8001bc4:	2180      	movs	r1, #128	; 0x80
 8001bc6:	0289      	lsls	r1, r1, #10
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	615a      	str	r2, [r3, #20]
 8001bcc:	4b16      	ldr	r3, [pc, #88]	; (8001c28 <HAL_UART_MspInit+0xa8>)
 8001bce:	695a      	ldr	r2, [r3, #20]
 8001bd0:	2380      	movs	r3, #128	; 0x80
 8001bd2:	029b      	lsls	r3, r3, #10
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001bda:	193b      	adds	r3, r7, r4
 8001bdc:	22c0      	movs	r2, #192	; 0xc0
 8001bde:	00d2      	lsls	r2, r2, #3
 8001be0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be2:	0021      	movs	r1, r4
 8001be4:	187b      	adds	r3, r7, r1
 8001be6:	2202      	movs	r2, #2
 8001be8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	187b      	adds	r3, r7, r1
 8001bec:	2200      	movs	r2, #0
 8001bee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bf0:	187b      	adds	r3, r7, r1
 8001bf2:	2203      	movs	r2, #3
 8001bf4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001bf6:	187b      	adds	r3, r7, r1
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfc:	187a      	adds	r2, r7, r1
 8001bfe:	2390      	movs	r3, #144	; 0x90
 8001c00:	05db      	lsls	r3, r3, #23
 8001c02:	0011      	movs	r1, r2
 8001c04:	0018      	movs	r0, r3
 8001c06:	f001 f885 	bl	8002d14 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	201b      	movs	r0, #27
 8001c10:	f000 fd9e 	bl	8002750 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c14:	201b      	movs	r0, #27
 8001c16:	f000 fdb0 	bl	800277a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	b00b      	add	sp, #44	; 0x2c
 8001c20:	bd90      	pop	{r4, r7, pc}
 8001c22:	46c0      	nop			; (mov r8, r8)
 8001c24:	40013800 	.word	0x40013800
 8001c28:	40021000 	.word	0x40021000

08001c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c30:	e7fe      	b.n	8001c30 <NMI_Handler+0x4>

08001c32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c36:	e7fe      	b.n	8001c36 <HardFault_Handler+0x4>

08001c38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001c3c:	46c0      	nop			; (mov r8, r8)
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c46:	46c0      	nop			; (mov r8, r8)
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c50:	f000 f8b8 	bl	8001dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c54:	46c0      	nop			; (mov r8, r8)
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
	...

08001c5c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001c60:	4b03      	ldr	r3, [pc, #12]	; (8001c70 <DMA1_Channel1_IRQHandler+0x14>)
 8001c62:	0018      	movs	r0, r3
 8001c64:	f000 ff6b 	bl	8002b3e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001c68:	46c0      	nop			; (mov r8, r8)
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	46c0      	nop			; (mov r8, r8)
 8001c70:	20000084 	.word	0x20000084

08001c74 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c78:	4b03      	ldr	r3, [pc, #12]	; (8001c88 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	f003 f9d6 	bl	800502c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001c80:	46c0      	nop			; (mov r8, r8)
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	46c0      	nop			; (mov r8, r8)
 8001c88:	200001f0 	.word	0x200001f0

08001c8c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c90:	4b03      	ldr	r3, [pc, #12]	; (8001ca0 <TIM1_CC_IRQHandler+0x14>)
 8001c92:	0018      	movs	r0, r3
 8001c94:	f003 f9ca 	bl	800502c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001c98:	46c0      	nop			; (mov r8, r8)
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	46c0      	nop			; (mov r8, r8)
 8001ca0:	200001f0 	.word	0x200001f0

08001ca4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ca8:	4b03      	ldr	r3, [pc, #12]	; (8001cb8 <TIM2_IRQHandler+0x14>)
 8001caa:	0018      	movs	r0, r3
 8001cac:	f003 f9be 	bl	800502c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001cb0:	46c0      	nop			; (mov r8, r8)
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	46c0      	nop			; (mov r8, r8)
 8001cb8:	20000238 	.word	0x20000238

08001cbc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001cc0:	4b03      	ldr	r3, [pc, #12]	; (8001cd0 <USART1_IRQHandler+0x14>)
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	f004 fa56 	bl	8006174 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001cc8:	46c0      	nop			; (mov r8, r8)
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	46c0      	nop			; (mov r8, r8)
 8001cd0:	20000280 	.word	0x20000280

08001cd4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001cd8:	46c0      	nop			; (mov r8, r8)
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
	...

08001ce0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ce0:	480d      	ldr	r0, [pc, #52]	; (8001d18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ce2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ce4:	480d      	ldr	r0, [pc, #52]	; (8001d1c <LoopForever+0x6>)
  ldr r1, =_edata
 8001ce6:	490e      	ldr	r1, [pc, #56]	; (8001d20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ce8:	4a0e      	ldr	r2, [pc, #56]	; (8001d24 <LoopForever+0xe>)
  movs r3, #0
 8001cea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cec:	e002      	b.n	8001cf4 <LoopCopyDataInit>

08001cee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cf2:	3304      	adds	r3, #4

08001cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cf8:	d3f9      	bcc.n	8001cee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cfa:	4a0b      	ldr	r2, [pc, #44]	; (8001d28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cfc:	4c0b      	ldr	r4, [pc, #44]	; (8001d2c <LoopForever+0x16>)
  movs r3, #0
 8001cfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d00:	e001      	b.n	8001d06 <LoopFillZerobss>

08001d02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d04:	3204      	adds	r2, #4

08001d06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d08:	d3fb      	bcc.n	8001d02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001d0a:	f7ff ffe3 	bl	8001cd4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001d0e:	f005 fb91 	bl	8007434 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d12:	f7fe ff6d 	bl	8000bf0 <main>

08001d16 <LoopForever>:

LoopForever:
    b LoopForever
 8001d16:	e7fe      	b.n	8001d16 <LoopForever>
  ldr   r0, =_estack
 8001d18:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001d1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d20:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8001d24:	080076c8 	.word	0x080076c8
  ldr r2, =_sbss
 8001d28:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001d2c:	200003ec 	.word	0x200003ec

08001d30 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d30:	e7fe      	b.n	8001d30 <ADC1_COMP_IRQHandler>
	...

08001d34 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d38:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <HAL_Init+0x24>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <HAL_Init+0x24>)
 8001d3e:	2110      	movs	r1, #16
 8001d40:	430a      	orrs	r2, r1
 8001d42:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001d44:	2003      	movs	r0, #3
 8001d46:	f000 f809 	bl	8001d5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d4a:	f7ff fc71 	bl	8001630 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	0018      	movs	r0, r3
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	46c0      	nop			; (mov r8, r8)
 8001d58:	40022000 	.word	0x40022000

08001d5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d5c:	b590      	push	{r4, r7, lr}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d64:	4b14      	ldr	r3, [pc, #80]	; (8001db8 <HAL_InitTick+0x5c>)
 8001d66:	681c      	ldr	r4, [r3, #0]
 8001d68:	4b14      	ldr	r3, [pc, #80]	; (8001dbc <HAL_InitTick+0x60>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	0019      	movs	r1, r3
 8001d6e:	23fa      	movs	r3, #250	; 0xfa
 8001d70:	0098      	lsls	r0, r3, #2
 8001d72:	f7fe f9c9 	bl	8000108 <__udivsi3>
 8001d76:	0003      	movs	r3, r0
 8001d78:	0019      	movs	r1, r3
 8001d7a:	0020      	movs	r0, r4
 8001d7c:	f7fe f9c4 	bl	8000108 <__udivsi3>
 8001d80:	0003      	movs	r3, r0
 8001d82:	0018      	movs	r0, r3
 8001d84:	f000 fd09 	bl	800279a <HAL_SYSTICK_Config>
 8001d88:	1e03      	subs	r3, r0, #0
 8001d8a:	d001      	beq.n	8001d90 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e00f      	b.n	8001db0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b03      	cmp	r3, #3
 8001d94:	d80b      	bhi.n	8001dae <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	2301      	movs	r3, #1
 8001d9a:	425b      	negs	r3, r3
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	0018      	movs	r0, r3
 8001da0:	f000 fcd6 	bl	8002750 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001da4:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <HAL_InitTick+0x64>)
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
 8001dac:	e000      	b.n	8001db0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
}
 8001db0:	0018      	movs	r0, r3
 8001db2:	46bd      	mov	sp, r7
 8001db4:	b003      	add	sp, #12
 8001db6:	bd90      	pop	{r4, r7, pc}
 8001db8:	2000001c 	.word	0x2000001c
 8001dbc:	20000024 	.word	0x20000024
 8001dc0:	20000020 	.word	0x20000020

08001dc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dc8:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <HAL_IncTick+0x1c>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	001a      	movs	r2, r3
 8001dce:	4b05      	ldr	r3, [pc, #20]	; (8001de4 <HAL_IncTick+0x20>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	18d2      	adds	r2, r2, r3
 8001dd4:	4b03      	ldr	r3, [pc, #12]	; (8001de4 <HAL_IncTick+0x20>)
 8001dd6:	601a      	str	r2, [r3, #0]
}
 8001dd8:	46c0      	nop			; (mov r8, r8)
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	46c0      	nop			; (mov r8, r8)
 8001de0:	20000024 	.word	0x20000024
 8001de4:	200003e8 	.word	0x200003e8

08001de8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  return uwTick;
 8001dec:	4b02      	ldr	r3, [pc, #8]	; (8001df8 <HAL_GetTick+0x10>)
 8001dee:	681b      	ldr	r3, [r3, #0]
}
 8001df0:	0018      	movs	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	46c0      	nop			; (mov r8, r8)
 8001df8:	200003e8 	.word	0x200003e8

08001dfc <HAL_SuspendTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)

{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8001e00:	4b04      	ldr	r3, [pc, #16]	; (8001e14 <HAL_SuspendTick+0x18>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	4b03      	ldr	r3, [pc, #12]	; (8001e14 <HAL_SuspendTick+0x18>)
 8001e06:	2102      	movs	r1, #2
 8001e08:	438a      	bics	r2, r1
 8001e0a:	601a      	str	r2, [r3, #0]
}
 8001e0c:	46c0      	nop			; (mov r8, r8)
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	46c0      	nop			; (mov r8, r8)
 8001e14:	e000e010 	.word	0xe000e010

08001e18 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e20:	230f      	movs	r3, #15
 8001e22:	18fb      	adds	r3, r7, r3
 8001e24:	2200      	movs	r2, #0
 8001e26:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e125      	b.n	8002082 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10a      	bne.n	8001e54 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2234      	movs	r2, #52	; 0x34
 8001e48:	2100      	movs	r1, #0
 8001e4a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	0018      	movs	r0, r3
 8001e50:	f7ff fc12 	bl	8001678 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e58:	2210      	movs	r2, #16
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	d000      	beq.n	8001e60 <HAL_ADC_Init+0x48>
 8001e5e:	e103      	b.n	8002068 <HAL_ADC_Init+0x250>
 8001e60:	230f      	movs	r3, #15
 8001e62:	18fb      	adds	r3, r7, r3
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d000      	beq.n	8001e6c <HAL_ADC_Init+0x54>
 8001e6a:	e0fd      	b.n	8002068 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	2204      	movs	r2, #4
 8001e74:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001e76:	d000      	beq.n	8001e7a <HAL_ADC_Init+0x62>
 8001e78:	e0f6      	b.n	8002068 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e7e:	4a83      	ldr	r2, [pc, #524]	; (800208c <HAL_ADC_Init+0x274>)
 8001e80:	4013      	ands	r3, r2
 8001e82:	2202      	movs	r2, #2
 8001e84:	431a      	orrs	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	2203      	movs	r2, #3
 8001e92:	4013      	ands	r3, r2
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d112      	bne.n	8001ebe <HAL_ADC_Init+0xa6>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d009      	beq.n	8001eba <HAL_ADC_Init+0xa2>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68da      	ldr	r2, [r3, #12]
 8001eac:	2380      	movs	r3, #128	; 0x80
 8001eae:	021b      	lsls	r3, r3, #8
 8001eb0:	401a      	ands	r2, r3
 8001eb2:	2380      	movs	r3, #128	; 0x80
 8001eb4:	021b      	lsls	r3, r3, #8
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d101      	bne.n	8001ebe <HAL_ADC_Init+0xa6>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e000      	b.n	8001ec0 <HAL_ADC_Init+0xa8>
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d116      	bne.n	8001ef2 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	2218      	movs	r2, #24
 8001ecc:	4393      	bics	r3, r2
 8001ece:	0019      	movs	r1, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	0899      	lsrs	r1, r3, #2
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685a      	ldr	r2, [r3, #4]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68da      	ldr	r2, [r3, #12]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4964      	ldr	r1, [pc, #400]	; (8002090 <HAL_ADC_Init+0x278>)
 8001efe:	400a      	ands	r2, r1
 8001f00:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	7e1b      	ldrb	r3, [r3, #24]
 8001f06:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	7e5b      	ldrb	r3, [r3, #25]
 8001f0c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f0e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	7e9b      	ldrb	r3, [r3, #26]
 8001f14:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001f16:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d002      	beq.n	8001f26 <HAL_ADC_Init+0x10e>
 8001f20:	2380      	movs	r3, #128	; 0x80
 8001f22:	015b      	lsls	r3, r3, #5
 8001f24:	e000      	b.n	8001f28 <HAL_ADC_Init+0x110>
 8001f26:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001f28:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001f2e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d101      	bne.n	8001f3c <HAL_ADC_Init+0x124>
 8001f38:	2304      	movs	r3, #4
 8001f3a:	e000      	b.n	8001f3e <HAL_ADC_Init+0x126>
 8001f3c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001f3e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2124      	movs	r1, #36	; 0x24
 8001f44:	5c5b      	ldrb	r3, [r3, r1]
 8001f46:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001f48:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f4a:	68ba      	ldr	r2, [r7, #8]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	7edb      	ldrb	r3, [r3, #27]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d115      	bne.n	8001f84 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	7e9b      	ldrb	r3, [r3, #26]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d105      	bne.n	8001f6c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	2280      	movs	r2, #128	; 0x80
 8001f64:	0252      	lsls	r2, r2, #9
 8001f66:	4313      	orrs	r3, r2
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	e00b      	b.n	8001f84 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f70:	2220      	movs	r2, #32
 8001f72:	431a      	orrs	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	69da      	ldr	r2, [r3, #28]
 8001f88:	23c2      	movs	r3, #194	; 0xc2
 8001f8a:	33ff      	adds	r3, #255	; 0xff
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d007      	beq.n	8001fa0 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	68ba      	ldr	r2, [r7, #8]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68d9      	ldr	r1, [r3, #12]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68ba      	ldr	r2, [r7, #8]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fb4:	2380      	movs	r3, #128	; 0x80
 8001fb6:	055b      	lsls	r3, r3, #21
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d01b      	beq.n	8001ff4 <HAL_ADC_Init+0x1dc>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d017      	beq.n	8001ff4 <HAL_ADC_Init+0x1dc>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d013      	beq.n	8001ff4 <HAL_ADC_Init+0x1dc>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd0:	2b03      	cmp	r3, #3
 8001fd2:	d00f      	beq.n	8001ff4 <HAL_ADC_Init+0x1dc>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd8:	2b04      	cmp	r3, #4
 8001fda:	d00b      	beq.n	8001ff4 <HAL_ADC_Init+0x1dc>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe0:	2b05      	cmp	r3, #5
 8001fe2:	d007      	beq.n	8001ff4 <HAL_ADC_Init+0x1dc>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe8:	2b06      	cmp	r3, #6
 8001fea:	d003      	beq.n	8001ff4 <HAL_ADC_Init+0x1dc>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff0:	2b07      	cmp	r3, #7
 8001ff2:	d112      	bne.n	800201a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	695a      	ldr	r2, [r3, #20]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2107      	movs	r1, #7
 8002000:	438a      	bics	r2, r1
 8002002:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6959      	ldr	r1, [r3, #20]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200e:	2207      	movs	r2, #7
 8002010:	401a      	ands	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	430a      	orrs	r2, r1
 8002018:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	4a1c      	ldr	r2, [pc, #112]	; (8002094 <HAL_ADC_Init+0x27c>)
 8002022:	4013      	ands	r3, r2
 8002024:	68ba      	ldr	r2, [r7, #8]
 8002026:	429a      	cmp	r2, r3
 8002028:	d10b      	bne.n	8002042 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002034:	2203      	movs	r2, #3
 8002036:	4393      	bics	r3, r2
 8002038:	2201      	movs	r2, #1
 800203a:	431a      	orrs	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002040:	e01c      	b.n	800207c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002046:	2212      	movs	r2, #18
 8002048:	4393      	bics	r3, r2
 800204a:	2210      	movs	r2, #16
 800204c:	431a      	orrs	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002056:	2201      	movs	r2, #1
 8002058:	431a      	orrs	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800205e:	230f      	movs	r3, #15
 8002060:	18fb      	adds	r3, r7, r3
 8002062:	2201      	movs	r2, #1
 8002064:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002066:	e009      	b.n	800207c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800206c:	2210      	movs	r2, #16
 800206e:	431a      	orrs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002074:	230f      	movs	r3, #15
 8002076:	18fb      	adds	r3, r7, r3
 8002078:	2201      	movs	r2, #1
 800207a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800207c:	230f      	movs	r3, #15
 800207e:	18fb      	adds	r3, r7, r3
 8002080:	781b      	ldrb	r3, [r3, #0]
}
 8002082:	0018      	movs	r0, r3
 8002084:	46bd      	mov	sp, r7
 8002086:	b004      	add	sp, #16
 8002088:	bd80      	pop	{r7, pc}
 800208a:	46c0      	nop			; (mov r8, r8)
 800208c:	fffffefd 	.word	0xfffffefd
 8002090:	fffe0219 	.word	0xfffe0219
 8002094:	833fffe7 	.word	0x833fffe7

08002098 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002098:	b590      	push	{r4, r7, lr}
 800209a:	b087      	sub	sp, #28
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020a4:	2317      	movs	r3, #23
 80020a6:	18fb      	adds	r3, r7, r3
 80020a8:	2200      	movs	r2, #0
 80020aa:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	2204      	movs	r2, #4
 80020b4:	4013      	ands	r3, r2
 80020b6:	d15e      	bne.n	8002176 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2234      	movs	r2, #52	; 0x34
 80020bc:	5c9b      	ldrb	r3, [r3, r2]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d101      	bne.n	80020c6 <HAL_ADC_Start_DMA+0x2e>
 80020c2:	2302      	movs	r3, #2
 80020c4:	e05e      	b.n	8002184 <HAL_ADC_Start_DMA+0xec>
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2234      	movs	r2, #52	; 0x34
 80020ca:	2101      	movs	r1, #1
 80020cc:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	7e5b      	ldrb	r3, [r3, #25]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d007      	beq.n	80020e6 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80020d6:	2317      	movs	r3, #23
 80020d8:	18fc      	adds	r4, r7, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	0018      	movs	r0, r3
 80020de:	f000 f983 	bl	80023e8 <ADC_Enable>
 80020e2:	0003      	movs	r3, r0
 80020e4:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80020e6:	2317      	movs	r3, #23
 80020e8:	18fb      	adds	r3, r7, r3
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d146      	bne.n	800217e <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f4:	4a25      	ldr	r2, [pc, #148]	; (800218c <HAL_ADC_Start_DMA+0xf4>)
 80020f6:	4013      	ands	r3, r2
 80020f8:	2280      	movs	r2, #128	; 0x80
 80020fa:	0052      	lsls	r2, r2, #1
 80020fc:	431a      	orrs	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2234      	movs	r2, #52	; 0x34
 800210c:	2100      	movs	r1, #0
 800210e:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002114:	4a1e      	ldr	r2, [pc, #120]	; (8002190 <HAL_ADC_Start_DMA+0xf8>)
 8002116:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211c:	4a1d      	ldr	r2, [pc, #116]	; (8002194 <HAL_ADC_Start_DMA+0xfc>)
 800211e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002124:	4a1c      	ldr	r2, [pc, #112]	; (8002198 <HAL_ADC_Start_DMA+0x100>)
 8002126:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	221c      	movs	r2, #28
 800212e:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	685a      	ldr	r2, [r3, #4]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2110      	movs	r1, #16
 800213c:	430a      	orrs	r2, r1
 800213e:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68da      	ldr	r2, [r3, #12]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2101      	movs	r1, #1
 800214c:	430a      	orrs	r2, r1
 800214e:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	3340      	adds	r3, #64	; 0x40
 800215a:	0019      	movs	r1, r3
 800215c:	68ba      	ldr	r2, [r7, #8]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f000 fc0a 	bl	8002978 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	689a      	ldr	r2, [r3, #8]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2104      	movs	r1, #4
 8002170:	430a      	orrs	r2, r1
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	e003      	b.n	800217e <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002176:	2317      	movs	r3, #23
 8002178:	18fb      	adds	r3, r7, r3
 800217a:	2202      	movs	r2, #2
 800217c:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 800217e:	2317      	movs	r3, #23
 8002180:	18fb      	adds	r3, r7, r3
 8002182:	781b      	ldrb	r3, [r3, #0]
}
 8002184:	0018      	movs	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	b007      	add	sp, #28
 800218a:	bd90      	pop	{r4, r7, pc}
 800218c:	fffff0fe 	.word	0xfffff0fe
 8002190:	080024f1 	.word	0x080024f1
 8002194:	080025a5 	.word	0x080025a5
 8002198:	080025c3 	.word	0x080025c3

0800219c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80021a4:	46c0      	nop			; (mov r8, r8)
 80021a6:	46bd      	mov	sp, r7
 80021a8:	b002      	add	sp, #8
 80021aa:	bd80      	pop	{r7, pc}

080021ac <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80021b4:	46c0      	nop			; (mov r8, r8)
 80021b6:	46bd      	mov	sp, r7
 80021b8:	b002      	add	sp, #8
 80021ba:	bd80      	pop	{r7, pc}

080021bc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80021c4:	46c0      	nop			; (mov r8, r8)
 80021c6:	46bd      	mov	sp, r7
 80021c8:	b002      	add	sp, #8
 80021ca:	bd80      	pop	{r7, pc}

080021cc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021d6:	230f      	movs	r3, #15
 80021d8:	18fb      	adds	r3, r7, r3
 80021da:	2200      	movs	r2, #0
 80021dc:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80021de:	2300      	movs	r3, #0
 80021e0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021e6:	2380      	movs	r3, #128	; 0x80
 80021e8:	055b      	lsls	r3, r3, #21
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d011      	beq.n	8002212 <HAL_ADC_ConfigChannel+0x46>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d00d      	beq.n	8002212 <HAL_ADC_ConfigChannel+0x46>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d009      	beq.n	8002212 <HAL_ADC_ConfigChannel+0x46>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002202:	2b03      	cmp	r3, #3
 8002204:	d005      	beq.n	8002212 <HAL_ADC_ConfigChannel+0x46>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220a:	2b04      	cmp	r3, #4
 800220c:	d001      	beq.n	8002212 <HAL_ADC_ConfigChannel+0x46>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2234      	movs	r2, #52	; 0x34
 8002216:	5c9b      	ldrb	r3, [r3, r2]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d101      	bne.n	8002220 <HAL_ADC_ConfigChannel+0x54>
 800221c:	2302      	movs	r3, #2
 800221e:	e0d0      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x1f6>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2234      	movs	r2, #52	; 0x34
 8002224:	2101      	movs	r1, #1
 8002226:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	2204      	movs	r2, #4
 8002230:	4013      	ands	r3, r2
 8002232:	d000      	beq.n	8002236 <HAL_ADC_ConfigChannel+0x6a>
 8002234:	e0b4      	b.n	80023a0 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	4a64      	ldr	r2, [pc, #400]	; (80023cc <HAL_ADC_ConfigChannel+0x200>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d100      	bne.n	8002242 <HAL_ADC_ConfigChannel+0x76>
 8002240:	e082      	b.n	8002348 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2201      	movs	r2, #1
 800224e:	409a      	lsls	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	430a      	orrs	r2, r1
 8002256:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800225c:	2380      	movs	r3, #128	; 0x80
 800225e:	055b      	lsls	r3, r3, #21
 8002260:	429a      	cmp	r2, r3
 8002262:	d037      	beq.n	80022d4 <HAL_ADC_ConfigChannel+0x108>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002268:	2b01      	cmp	r3, #1
 800226a:	d033      	beq.n	80022d4 <HAL_ADC_ConfigChannel+0x108>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002270:	2b02      	cmp	r3, #2
 8002272:	d02f      	beq.n	80022d4 <HAL_ADC_ConfigChannel+0x108>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002278:	2b03      	cmp	r3, #3
 800227a:	d02b      	beq.n	80022d4 <HAL_ADC_ConfigChannel+0x108>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002280:	2b04      	cmp	r3, #4
 8002282:	d027      	beq.n	80022d4 <HAL_ADC_ConfigChannel+0x108>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002288:	2b05      	cmp	r3, #5
 800228a:	d023      	beq.n	80022d4 <HAL_ADC_ConfigChannel+0x108>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002290:	2b06      	cmp	r3, #6
 8002292:	d01f      	beq.n	80022d4 <HAL_ADC_ConfigChannel+0x108>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002298:	2b07      	cmp	r3, #7
 800229a:	d01b      	beq.n	80022d4 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	2107      	movs	r1, #7
 80022a8:	400b      	ands	r3, r1
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d012      	beq.n	80022d4 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	695a      	ldr	r2, [r3, #20]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2107      	movs	r1, #7
 80022ba:	438a      	bics	r2, r1
 80022bc:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6959      	ldr	r1, [r3, #20]
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	2207      	movs	r2, #7
 80022ca:	401a      	ands	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2b10      	cmp	r3, #16
 80022da:	d007      	beq.n	80022ec <HAL_ADC_ConfigChannel+0x120>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2b11      	cmp	r3, #17
 80022e2:	d003      	beq.n	80022ec <HAL_ADC_ConfigChannel+0x120>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2b12      	cmp	r3, #18
 80022ea:	d163      	bne.n	80023b4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80022ec:	4b38      	ldr	r3, [pc, #224]	; (80023d0 <HAL_ADC_ConfigChannel+0x204>)
 80022ee:	6819      	ldr	r1, [r3, #0]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2b10      	cmp	r3, #16
 80022f6:	d009      	beq.n	800230c <HAL_ADC_ConfigChannel+0x140>
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2b11      	cmp	r3, #17
 80022fe:	d102      	bne.n	8002306 <HAL_ADC_ConfigChannel+0x13a>
 8002300:	2380      	movs	r3, #128	; 0x80
 8002302:	03db      	lsls	r3, r3, #15
 8002304:	e004      	b.n	8002310 <HAL_ADC_ConfigChannel+0x144>
 8002306:	2380      	movs	r3, #128	; 0x80
 8002308:	045b      	lsls	r3, r3, #17
 800230a:	e001      	b.n	8002310 <HAL_ADC_ConfigChannel+0x144>
 800230c:	2380      	movs	r3, #128	; 0x80
 800230e:	041b      	lsls	r3, r3, #16
 8002310:	4a2f      	ldr	r2, [pc, #188]	; (80023d0 <HAL_ADC_ConfigChannel+0x204>)
 8002312:	430b      	orrs	r3, r1
 8002314:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2b10      	cmp	r3, #16
 800231c:	d14a      	bne.n	80023b4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800231e:	4b2d      	ldr	r3, [pc, #180]	; (80023d4 <HAL_ADC_ConfigChannel+0x208>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	492d      	ldr	r1, [pc, #180]	; (80023d8 <HAL_ADC_ConfigChannel+0x20c>)
 8002324:	0018      	movs	r0, r3
 8002326:	f7fd feef 	bl	8000108 <__udivsi3>
 800232a:	0003      	movs	r3, r0
 800232c:	001a      	movs	r2, r3
 800232e:	0013      	movs	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	189b      	adds	r3, r3, r2
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002338:	e002      	b.n	8002340 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	3b01      	subs	r3, #1
 800233e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1f9      	bne.n	800233a <HAL_ADC_ConfigChannel+0x16e>
 8002346:	e035      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2101      	movs	r1, #1
 8002354:	4099      	lsls	r1, r3
 8002356:	000b      	movs	r3, r1
 8002358:	43d9      	mvns	r1, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	400a      	ands	r2, r1
 8002360:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2b10      	cmp	r3, #16
 8002368:	d007      	beq.n	800237a <HAL_ADC_ConfigChannel+0x1ae>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2b11      	cmp	r3, #17
 8002370:	d003      	beq.n	800237a <HAL_ADC_ConfigChannel+0x1ae>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2b12      	cmp	r3, #18
 8002378:	d11c      	bne.n	80023b4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800237a:	4b15      	ldr	r3, [pc, #84]	; (80023d0 <HAL_ADC_ConfigChannel+0x204>)
 800237c:	6819      	ldr	r1, [r3, #0]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2b10      	cmp	r3, #16
 8002384:	d007      	beq.n	8002396 <HAL_ADC_ConfigChannel+0x1ca>
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2b11      	cmp	r3, #17
 800238c:	d101      	bne.n	8002392 <HAL_ADC_ConfigChannel+0x1c6>
 800238e:	4b13      	ldr	r3, [pc, #76]	; (80023dc <HAL_ADC_ConfigChannel+0x210>)
 8002390:	e002      	b.n	8002398 <HAL_ADC_ConfigChannel+0x1cc>
 8002392:	4b13      	ldr	r3, [pc, #76]	; (80023e0 <HAL_ADC_ConfigChannel+0x214>)
 8002394:	e000      	b.n	8002398 <HAL_ADC_ConfigChannel+0x1cc>
 8002396:	4b13      	ldr	r3, [pc, #76]	; (80023e4 <HAL_ADC_ConfigChannel+0x218>)
 8002398:	4a0d      	ldr	r2, [pc, #52]	; (80023d0 <HAL_ADC_ConfigChannel+0x204>)
 800239a:	400b      	ands	r3, r1
 800239c:	6013      	str	r3, [r2, #0]
 800239e:	e009      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a4:	2220      	movs	r2, #32
 80023a6:	431a      	orrs	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80023ac:	230f      	movs	r3, #15
 80023ae:	18fb      	adds	r3, r7, r3
 80023b0:	2201      	movs	r2, #1
 80023b2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2234      	movs	r2, #52	; 0x34
 80023b8:	2100      	movs	r1, #0
 80023ba:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80023bc:	230f      	movs	r3, #15
 80023be:	18fb      	adds	r3, r7, r3
 80023c0:	781b      	ldrb	r3, [r3, #0]
}
 80023c2:	0018      	movs	r0, r3
 80023c4:	46bd      	mov	sp, r7
 80023c6:	b004      	add	sp, #16
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	46c0      	nop			; (mov r8, r8)
 80023cc:	00001001 	.word	0x00001001
 80023d0:	40012708 	.word	0x40012708
 80023d4:	2000001c 	.word	0x2000001c
 80023d8:	000f4240 	.word	0x000f4240
 80023dc:	ffbfffff 	.word	0xffbfffff
 80023e0:	feffffff 	.word	0xfeffffff
 80023e4:	ff7fffff 	.word	0xff7fffff

080023e8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023f0:	2300      	movs	r3, #0
 80023f2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	2203      	movs	r2, #3
 8002400:	4013      	ands	r3, r2
 8002402:	2b01      	cmp	r3, #1
 8002404:	d112      	bne.n	800242c <ADC_Enable+0x44>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2201      	movs	r2, #1
 800240e:	4013      	ands	r3, r2
 8002410:	2b01      	cmp	r3, #1
 8002412:	d009      	beq.n	8002428 <ADC_Enable+0x40>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	2380      	movs	r3, #128	; 0x80
 800241c:	021b      	lsls	r3, r3, #8
 800241e:	401a      	ands	r2, r3
 8002420:	2380      	movs	r3, #128	; 0x80
 8002422:	021b      	lsls	r3, r3, #8
 8002424:	429a      	cmp	r2, r3
 8002426:	d101      	bne.n	800242c <ADC_Enable+0x44>
 8002428:	2301      	movs	r3, #1
 800242a:	e000      	b.n	800242e <ADC_Enable+0x46>
 800242c:	2300      	movs	r3, #0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d152      	bne.n	80024d8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	4a2a      	ldr	r2, [pc, #168]	; (80024e4 <ADC_Enable+0xfc>)
 800243a:	4013      	ands	r3, r2
 800243c:	d00d      	beq.n	800245a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002442:	2210      	movs	r2, #16
 8002444:	431a      	orrs	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800244e:	2201      	movs	r2, #1
 8002450:	431a      	orrs	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e03f      	b.n	80024da <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2101      	movs	r1, #1
 8002466:	430a      	orrs	r2, r1
 8002468:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800246a:	4b1f      	ldr	r3, [pc, #124]	; (80024e8 <ADC_Enable+0x100>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	491f      	ldr	r1, [pc, #124]	; (80024ec <ADC_Enable+0x104>)
 8002470:	0018      	movs	r0, r3
 8002472:	f7fd fe49 	bl	8000108 <__udivsi3>
 8002476:	0003      	movs	r3, r0
 8002478:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800247a:	e002      	b.n	8002482 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	3b01      	subs	r3, #1
 8002480:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1f9      	bne.n	800247c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002488:	f7ff fcae 	bl	8001de8 <HAL_GetTick>
 800248c:	0003      	movs	r3, r0
 800248e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002490:	e01b      	b.n	80024ca <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002492:	f7ff fca9 	bl	8001de8 <HAL_GetTick>
 8002496:	0002      	movs	r2, r0
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d914      	bls.n	80024ca <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2201      	movs	r2, #1
 80024a8:	4013      	ands	r3, r2
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d00d      	beq.n	80024ca <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b2:	2210      	movs	r2, #16
 80024b4:	431a      	orrs	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024be:	2201      	movs	r2, #1
 80024c0:	431a      	orrs	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e007      	b.n	80024da <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2201      	movs	r2, #1
 80024d2:	4013      	ands	r3, r2
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d1dc      	bne.n	8002492 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	0018      	movs	r0, r3
 80024dc:	46bd      	mov	sp, r7
 80024de:	b004      	add	sp, #16
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	46c0      	nop			; (mov r8, r8)
 80024e4:	80000017 	.word	0x80000017
 80024e8:	2000001c 	.word	0x2000001c
 80024ec:	000f4240 	.word	0x000f4240

080024f0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002502:	2250      	movs	r2, #80	; 0x50
 8002504:	4013      	ands	r3, r2
 8002506:	d140      	bne.n	800258a <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250c:	2280      	movs	r2, #128	; 0x80
 800250e:	0092      	lsls	r2, r2, #2
 8002510:	431a      	orrs	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68da      	ldr	r2, [r3, #12]
 800251c:	23c0      	movs	r3, #192	; 0xc0
 800251e:	011b      	lsls	r3, r3, #4
 8002520:	4013      	ands	r3, r2
 8002522:	d12d      	bne.n	8002580 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002528:	2b00      	cmp	r3, #0
 800252a:	d129      	bne.n	8002580 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2208      	movs	r2, #8
 8002534:	4013      	ands	r3, r2
 8002536:	2b08      	cmp	r3, #8
 8002538:	d122      	bne.n	8002580 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	2204      	movs	r2, #4
 8002542:	4013      	ands	r3, r2
 8002544:	d110      	bne.n	8002568 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	210c      	movs	r1, #12
 8002552:	438a      	bics	r2, r1
 8002554:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800255a:	4a11      	ldr	r2, [pc, #68]	; (80025a0 <ADC_DMAConvCplt+0xb0>)
 800255c:	4013      	ands	r3, r2
 800255e:	2201      	movs	r2, #1
 8002560:	431a      	orrs	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	639a      	str	r2, [r3, #56]	; 0x38
 8002566:	e00b      	b.n	8002580 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800256c:	2220      	movs	r2, #32
 800256e:	431a      	orrs	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002578:	2201      	movs	r2, #1
 800257a:	431a      	orrs	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	0018      	movs	r0, r3
 8002584:	f7ff fe0a 	bl	800219c <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8002588:	e005      	b.n	8002596 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	0010      	movs	r0, r2
 8002594:	4798      	blx	r3
}
 8002596:	46c0      	nop			; (mov r8, r8)
 8002598:	46bd      	mov	sp, r7
 800259a:	b004      	add	sp, #16
 800259c:	bd80      	pop	{r7, pc}
 800259e:	46c0      	nop			; (mov r8, r8)
 80025a0:	fffffefe 	.word	0xfffffefe

080025a4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b0:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	0018      	movs	r0, r3
 80025b6:	f7ff fdf9 	bl	80021ac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025ba:	46c0      	nop			; (mov r8, r8)
 80025bc:	46bd      	mov	sp, r7
 80025be:	b004      	add	sp, #16
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b084      	sub	sp, #16
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ce:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d4:	2240      	movs	r2, #64	; 0x40
 80025d6:	431a      	orrs	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e0:	2204      	movs	r2, #4
 80025e2:	431a      	orrs	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	0018      	movs	r0, r3
 80025ec:	f7ff fde6 	bl	80021bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025f0:	46c0      	nop			; (mov r8, r8)
 80025f2:	46bd      	mov	sp, r7
 80025f4:	b004      	add	sp, #16
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <__NVIC_EnableIRQ>:
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	0002      	movs	r2, r0
 8002600:	1dfb      	adds	r3, r7, #7
 8002602:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002604:	1dfb      	adds	r3, r7, #7
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	2b7f      	cmp	r3, #127	; 0x7f
 800260a:	d809      	bhi.n	8002620 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800260c:	1dfb      	adds	r3, r7, #7
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	001a      	movs	r2, r3
 8002612:	231f      	movs	r3, #31
 8002614:	401a      	ands	r2, r3
 8002616:	4b04      	ldr	r3, [pc, #16]	; (8002628 <__NVIC_EnableIRQ+0x30>)
 8002618:	2101      	movs	r1, #1
 800261a:	4091      	lsls	r1, r2
 800261c:	000a      	movs	r2, r1
 800261e:	601a      	str	r2, [r3, #0]
}
 8002620:	46c0      	nop			; (mov r8, r8)
 8002622:	46bd      	mov	sp, r7
 8002624:	b002      	add	sp, #8
 8002626:	bd80      	pop	{r7, pc}
 8002628:	e000e100 	.word	0xe000e100

0800262c <__NVIC_SetPriority>:
{
 800262c:	b590      	push	{r4, r7, lr}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	0002      	movs	r2, r0
 8002634:	6039      	str	r1, [r7, #0]
 8002636:	1dfb      	adds	r3, r7, #7
 8002638:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800263a:	1dfb      	adds	r3, r7, #7
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	2b7f      	cmp	r3, #127	; 0x7f
 8002640:	d828      	bhi.n	8002694 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002642:	4a2f      	ldr	r2, [pc, #188]	; (8002700 <__NVIC_SetPriority+0xd4>)
 8002644:	1dfb      	adds	r3, r7, #7
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	b25b      	sxtb	r3, r3
 800264a:	089b      	lsrs	r3, r3, #2
 800264c:	33c0      	adds	r3, #192	; 0xc0
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	589b      	ldr	r3, [r3, r2]
 8002652:	1dfa      	adds	r2, r7, #7
 8002654:	7812      	ldrb	r2, [r2, #0]
 8002656:	0011      	movs	r1, r2
 8002658:	2203      	movs	r2, #3
 800265a:	400a      	ands	r2, r1
 800265c:	00d2      	lsls	r2, r2, #3
 800265e:	21ff      	movs	r1, #255	; 0xff
 8002660:	4091      	lsls	r1, r2
 8002662:	000a      	movs	r2, r1
 8002664:	43d2      	mvns	r2, r2
 8002666:	401a      	ands	r2, r3
 8002668:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	019b      	lsls	r3, r3, #6
 800266e:	22ff      	movs	r2, #255	; 0xff
 8002670:	401a      	ands	r2, r3
 8002672:	1dfb      	adds	r3, r7, #7
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	0018      	movs	r0, r3
 8002678:	2303      	movs	r3, #3
 800267a:	4003      	ands	r3, r0
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002680:	481f      	ldr	r0, [pc, #124]	; (8002700 <__NVIC_SetPriority+0xd4>)
 8002682:	1dfb      	adds	r3, r7, #7
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	b25b      	sxtb	r3, r3
 8002688:	089b      	lsrs	r3, r3, #2
 800268a:	430a      	orrs	r2, r1
 800268c:	33c0      	adds	r3, #192	; 0xc0
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	501a      	str	r2, [r3, r0]
}
 8002692:	e031      	b.n	80026f8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002694:	4a1b      	ldr	r2, [pc, #108]	; (8002704 <__NVIC_SetPriority+0xd8>)
 8002696:	1dfb      	adds	r3, r7, #7
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	0019      	movs	r1, r3
 800269c:	230f      	movs	r3, #15
 800269e:	400b      	ands	r3, r1
 80026a0:	3b08      	subs	r3, #8
 80026a2:	089b      	lsrs	r3, r3, #2
 80026a4:	3306      	adds	r3, #6
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	18d3      	adds	r3, r2, r3
 80026aa:	3304      	adds	r3, #4
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	1dfa      	adds	r2, r7, #7
 80026b0:	7812      	ldrb	r2, [r2, #0]
 80026b2:	0011      	movs	r1, r2
 80026b4:	2203      	movs	r2, #3
 80026b6:	400a      	ands	r2, r1
 80026b8:	00d2      	lsls	r2, r2, #3
 80026ba:	21ff      	movs	r1, #255	; 0xff
 80026bc:	4091      	lsls	r1, r2
 80026be:	000a      	movs	r2, r1
 80026c0:	43d2      	mvns	r2, r2
 80026c2:	401a      	ands	r2, r3
 80026c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	019b      	lsls	r3, r3, #6
 80026ca:	22ff      	movs	r2, #255	; 0xff
 80026cc:	401a      	ands	r2, r3
 80026ce:	1dfb      	adds	r3, r7, #7
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	0018      	movs	r0, r3
 80026d4:	2303      	movs	r3, #3
 80026d6:	4003      	ands	r3, r0
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026dc:	4809      	ldr	r0, [pc, #36]	; (8002704 <__NVIC_SetPriority+0xd8>)
 80026de:	1dfb      	adds	r3, r7, #7
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	001c      	movs	r4, r3
 80026e4:	230f      	movs	r3, #15
 80026e6:	4023      	ands	r3, r4
 80026e8:	3b08      	subs	r3, #8
 80026ea:	089b      	lsrs	r3, r3, #2
 80026ec:	430a      	orrs	r2, r1
 80026ee:	3306      	adds	r3, #6
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	18c3      	adds	r3, r0, r3
 80026f4:	3304      	adds	r3, #4
 80026f6:	601a      	str	r2, [r3, #0]
}
 80026f8:	46c0      	nop			; (mov r8, r8)
 80026fa:	46bd      	mov	sp, r7
 80026fc:	b003      	add	sp, #12
 80026fe:	bd90      	pop	{r4, r7, pc}
 8002700:	e000e100 	.word	0xe000e100
 8002704:	e000ed00 	.word	0xe000ed00

08002708 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	1e5a      	subs	r2, r3, #1
 8002714:	2380      	movs	r3, #128	; 0x80
 8002716:	045b      	lsls	r3, r3, #17
 8002718:	429a      	cmp	r2, r3
 800271a:	d301      	bcc.n	8002720 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800271c:	2301      	movs	r3, #1
 800271e:	e010      	b.n	8002742 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002720:	4b0a      	ldr	r3, [pc, #40]	; (800274c <SysTick_Config+0x44>)
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	3a01      	subs	r2, #1
 8002726:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002728:	2301      	movs	r3, #1
 800272a:	425b      	negs	r3, r3
 800272c:	2103      	movs	r1, #3
 800272e:	0018      	movs	r0, r3
 8002730:	f7ff ff7c 	bl	800262c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002734:	4b05      	ldr	r3, [pc, #20]	; (800274c <SysTick_Config+0x44>)
 8002736:	2200      	movs	r2, #0
 8002738:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800273a:	4b04      	ldr	r3, [pc, #16]	; (800274c <SysTick_Config+0x44>)
 800273c:	2207      	movs	r2, #7
 800273e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002740:	2300      	movs	r3, #0
}
 8002742:	0018      	movs	r0, r3
 8002744:	46bd      	mov	sp, r7
 8002746:	b002      	add	sp, #8
 8002748:	bd80      	pop	{r7, pc}
 800274a:	46c0      	nop			; (mov r8, r8)
 800274c:	e000e010 	.word	0xe000e010

08002750 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	60b9      	str	r1, [r7, #8]
 8002758:	607a      	str	r2, [r7, #4]
 800275a:	210f      	movs	r1, #15
 800275c:	187b      	adds	r3, r7, r1
 800275e:	1c02      	adds	r2, r0, #0
 8002760:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002762:	68ba      	ldr	r2, [r7, #8]
 8002764:	187b      	adds	r3, r7, r1
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	b25b      	sxtb	r3, r3
 800276a:	0011      	movs	r1, r2
 800276c:	0018      	movs	r0, r3
 800276e:	f7ff ff5d 	bl	800262c <__NVIC_SetPriority>
}
 8002772:	46c0      	nop			; (mov r8, r8)
 8002774:	46bd      	mov	sp, r7
 8002776:	b004      	add	sp, #16
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b082      	sub	sp, #8
 800277e:	af00      	add	r7, sp, #0
 8002780:	0002      	movs	r2, r0
 8002782:	1dfb      	adds	r3, r7, #7
 8002784:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002786:	1dfb      	adds	r3, r7, #7
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	b25b      	sxtb	r3, r3
 800278c:	0018      	movs	r0, r3
 800278e:	f7ff ff33 	bl	80025f8 <__NVIC_EnableIRQ>
}
 8002792:	46c0      	nop			; (mov r8, r8)
 8002794:	46bd      	mov	sp, r7
 8002796:	b002      	add	sp, #8
 8002798:	bd80      	pop	{r7, pc}

0800279a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b082      	sub	sp, #8
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	0018      	movs	r0, r3
 80027a6:	f7ff ffaf 	bl	8002708 <SysTick_Config>
 80027aa:	0003      	movs	r3, r0
}
 80027ac:	0018      	movs	r0, r3
 80027ae:	46bd      	mov	sp, r7
 80027b0:	b002      	add	sp, #8
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e015      	b.n	80027f2 <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if (hdac->State == HAL_DAC_STATE_RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	791b      	ldrb	r3, [r3, #4]
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d106      	bne.n	80027de <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	0018      	movs	r0, r3
 80027da:	f7fe fffd 	bl	80017d8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2202      	movs	r2, #2
 80027e2:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2201      	movs	r2, #1
 80027ee:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	0018      	movs	r0, r3
 80027f4:	46bd      	mov	sp, r7
 80027f6:	b002      	add	sp, #8
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HAL_DAC_ConfigChannel>:
  *          This parameter can be one of the following values:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b086      	sub	sp, #24
 80027fe:	af00      	add	r7, sp, #0
 8002800:	60f8      	str	r0, [r7, #12]
 8002802:	60b9      	str	r1, [r7, #8]
 8002804:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002806:	2300      	movs	r3, #0
 8002808:	617b      	str	r3, [r7, #20]
 800280a:	2300      	movs	r3, #0
 800280c:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	795b      	ldrb	r3, [r3, #5]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d101      	bne.n	800281a <HAL_DAC_ConfigChannel+0x20>
 8002816:	2302      	movs	r3, #2
 8002818:	e029      	b.n	800286e <HAL_DAC_ConfigChannel+0x74>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2201      	movs	r2, #1
 800281e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2202      	movs	r2, #2
 8002824:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel); 
 800282e:	223e      	movs	r2, #62	; 0x3e
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	409a      	lsls	r2, r3
 8002834:	0013      	movs	r3, r2
 8002836:	43da      	mvns	r2, r3
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	4013      	ands	r3, r2
 800283c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	4313      	orrs	r3, r2
 8002848:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	409a      	lsls	r2, r3
 8002850:	0013      	movs	r3, r2
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	4313      	orrs	r3, r2
 8002856:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2201      	movs	r2, #1
 8002864:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	0018      	movs	r0, r3
 8002870:	46bd      	mov	sp, r7
 8002872:	b006      	add	sp, #24
 8002874:	bd80      	pop	{r7, pc}

08002876 <HAL_DAC_Start>:
       /* STM32F091xC  STM32F098xx */

#if defined (STM32F051x8) || defined (STM32F058xx)

HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b082      	sub	sp, #8
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
 800287e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	795b      	ldrb	r3, [r3, #5]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d101      	bne.n	800288c <HAL_DAC_Start+0x16>
 8002888:	2302      	movs	r3, #2
 800288a:	e028      	b.n	80028de <HAL_DAC_Start+0x68>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2202      	movs	r2, #2
 8002896:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6819      	ldr	r1, [r3, #0]
 800289e:	2201      	movs	r2, #1
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	409a      	lsls	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10e      	bne.n	80028d0 <HAL_DAC_Start+0x5a>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	223c      	movs	r2, #60	; 0x3c
 80028ba:	4013      	ands	r3, r2
 80028bc:	2b3c      	cmp	r3, #60	; 0x3c
 80028be:	d107      	bne.n	80028d0 <HAL_DAC_Start+0x5a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2101      	movs	r1, #1
 80028cc:	430a      	orrs	r2, r1
 80028ce:	605a      	str	r2, [r3, #4]
    }
  }
 
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	0018      	movs	r0, r3
 80028e0:	46bd      	mov	sp, r7
 80028e2:	b002      	add	sp, #8
 80028e4:	bd80      	pop	{r7, pc}
	...

080028e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028f0:	2300      	movs	r3, #0
 80028f2:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e036      	b.n	800296c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2221      	movs	r2, #33	; 0x21
 8002902:	2102      	movs	r1, #2
 8002904:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	4a18      	ldr	r2, [pc, #96]	; (8002974 <HAL_DMA_Init+0x8c>)
 8002912:	4013      	ands	r3, r2
 8002914:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800291e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800292a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002936:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	69db      	ldr	r3, [r3, #28]
 800293c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	4313      	orrs	r3, r2
 8002942:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	0018      	movs	r0, r3
 8002950:	f000 f9c4 	bl	8002cdc <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2221      	movs	r2, #33	; 0x21
 800295e:	2101      	movs	r1, #1
 8002960:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2220      	movs	r2, #32
 8002966:	2100      	movs	r1, #0
 8002968:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}  
 800296c:	0018      	movs	r0, r3
 800296e:	46bd      	mov	sp, r7
 8002970:	b004      	add	sp, #16
 8002972:	bd80      	pop	{r7, pc}
 8002974:	ffffc00f 	.word	0xffffc00f

08002978 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
 8002984:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002986:	2317      	movs	r3, #23
 8002988:	18fb      	adds	r3, r7, r3
 800298a:	2200      	movs	r2, #0
 800298c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2220      	movs	r2, #32
 8002992:	5c9b      	ldrb	r3, [r3, r2]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d101      	bne.n	800299c <HAL_DMA_Start_IT+0x24>
 8002998:	2302      	movs	r3, #2
 800299a:	e04f      	b.n	8002a3c <HAL_DMA_Start_IT+0xc4>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2220      	movs	r2, #32
 80029a0:	2101      	movs	r1, #1
 80029a2:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2221      	movs	r2, #33	; 0x21
 80029a8:	5c9b      	ldrb	r3, [r3, r2]
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d13a      	bne.n	8002a26 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2221      	movs	r2, #33	; 0x21
 80029b4:	2102      	movs	r1, #2
 80029b6:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2101      	movs	r1, #1
 80029ca:	438a      	bics	r2, r1
 80029cc:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	68b9      	ldr	r1, [r7, #8]
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f000 f954 	bl	8002c82 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d008      	beq.n	80029f4 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	210e      	movs	r1, #14
 80029ee:	430a      	orrs	r2, r1
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	e00f      	b.n	8002a14 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	210a      	movs	r1, #10
 8002a00:	430a      	orrs	r2, r1
 8002a02:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2104      	movs	r1, #4
 8002a10:	438a      	bics	r2, r1
 8002a12:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2101      	movs	r1, #1
 8002a20:	430a      	orrs	r2, r1
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	e007      	b.n	8002a36 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2220      	movs	r2, #32
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002a2e:	2317      	movs	r3, #23
 8002a30:	18fb      	adds	r3, r7, r3
 8002a32:	2202      	movs	r2, #2
 8002a34:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8002a36:	2317      	movs	r3, #23
 8002a38:	18fb      	adds	r3, r7, r3
 8002a3a:	781b      	ldrb	r3, [r3, #0]
} 
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	b006      	add	sp, #24
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2221      	movs	r2, #33	; 0x21
 8002a50:	5c9b      	ldrb	r3, [r3, r2]
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d008      	beq.n	8002a6a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2204      	movs	r2, #4
 8002a5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2220      	movs	r2, #32
 8002a62:	2100      	movs	r1, #0
 8002a64:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e020      	b.n	8002aac <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	210e      	movs	r1, #14
 8002a76:	438a      	bics	r2, r1
 8002a78:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2101      	movs	r1, #1
 8002a86:	438a      	bics	r2, r1
 8002a88:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a92:	2101      	movs	r1, #1
 8002a94:	4091      	lsls	r1, r2
 8002a96:	000a      	movs	r2, r1
 8002a98:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2221      	movs	r2, #33	; 0x21
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2220      	movs	r2, #32
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	0018      	movs	r0, r3
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	b002      	add	sp, #8
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002abc:	210f      	movs	r1, #15
 8002abe:	187b      	adds	r3, r7, r1
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2221      	movs	r2, #33	; 0x21
 8002ac8:	5c9b      	ldrb	r3, [r3, r2]
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d006      	beq.n	8002ade <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2204      	movs	r2, #4
 8002ad4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002ad6:	187b      	adds	r3, r7, r1
 8002ad8:	2201      	movs	r2, #1
 8002ada:	701a      	strb	r2, [r3, #0]
 8002adc:	e028      	b.n	8002b30 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	210e      	movs	r1, #14
 8002aea:	438a      	bics	r2, r1
 8002aec:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2101      	movs	r1, #1
 8002afa:	438a      	bics	r2, r1
 8002afc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b06:	2101      	movs	r1, #1
 8002b08:	4091      	lsls	r1, r2
 8002b0a:	000a      	movs	r2, r1
 8002b0c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2221      	movs	r2, #33	; 0x21
 8002b12:	2101      	movs	r1, #1
 8002b14:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2220      	movs	r2, #32
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d004      	beq.n	8002b30 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	0010      	movs	r0, r2
 8002b2e:	4798      	blx	r3
    } 
  }
  return status;
 8002b30:	230f      	movs	r3, #15
 8002b32:	18fb      	adds	r3, r7, r3
 8002b34:	781b      	ldrb	r3, [r3, #0]
}
 8002b36:	0018      	movs	r0, r3
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	b004      	add	sp, #16
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b084      	sub	sp, #16
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	2204      	movs	r2, #4
 8002b5c:	409a      	lsls	r2, r3
 8002b5e:	0013      	movs	r3, r2
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	4013      	ands	r3, r2
 8002b64:	d024      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x72>
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	2204      	movs	r2, #4
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	d020      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2220      	movs	r2, #32
 8002b76:	4013      	ands	r3, r2
 8002b78:	d107      	bne.n	8002b8a <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2104      	movs	r1, #4
 8002b86:	438a      	bics	r2, r1
 8002b88:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b92:	2104      	movs	r1, #4
 8002b94:	4091      	lsls	r1, r2
 8002b96:	000a      	movs	r2, r1
 8002b98:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d100      	bne.n	8002ba4 <HAL_DMA_IRQHandler+0x66>
 8002ba2:	e06a      	b.n	8002c7a <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	0010      	movs	r0, r2
 8002bac:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002bae:	e064      	b.n	8002c7a <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	409a      	lsls	r2, r3
 8002bb8:	0013      	movs	r3, r2
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d02b      	beq.n	8002c18 <HAL_DMA_IRQHandler+0xda>
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	d027      	beq.n	8002c18 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2220      	movs	r2, #32
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	d10b      	bne.n	8002bec <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	210a      	movs	r1, #10
 8002be0:	438a      	bics	r2, r1
 8002be2:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2221      	movs	r2, #33	; 0x21
 8002be8:	2101      	movs	r1, #1
 8002bea:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf4:	2102      	movs	r1, #2
 8002bf6:	4091      	lsls	r1, r2
 8002bf8:	000a      	movs	r2, r1
 8002bfa:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2220      	movs	r2, #32
 8002c00:	2100      	movs	r1, #0
 8002c02:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d036      	beq.n	8002c7a <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	0010      	movs	r0, r2
 8002c14:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002c16:	e030      	b.n	8002c7a <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1c:	2208      	movs	r2, #8
 8002c1e:	409a      	lsls	r2, r3
 8002c20:	0013      	movs	r3, r2
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	4013      	ands	r3, r2
 8002c26:	d028      	beq.n	8002c7a <HAL_DMA_IRQHandler+0x13c>
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	2208      	movs	r2, #8
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	d024      	beq.n	8002c7a <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	210e      	movs	r1, #14
 8002c3c:	438a      	bics	r2, r1
 8002c3e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c48:	2101      	movs	r1, #1
 8002c4a:	4091      	lsls	r1, r2
 8002c4c:	000a      	movs	r2, r1
 8002c4e:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2221      	movs	r2, #33	; 0x21
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2220      	movs	r2, #32
 8002c62:	2100      	movs	r1, #0
 8002c64:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d005      	beq.n	8002c7a <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	0010      	movs	r0, r2
 8002c76:	4798      	blx	r3
    }
   }
}  
 8002c78:	e7ff      	b.n	8002c7a <HAL_DMA_IRQHandler+0x13c>
 8002c7a:	46c0      	nop			; (mov r8, r8)
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	b004      	add	sp, #16
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b084      	sub	sp, #16
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	60f8      	str	r0, [r7, #12]
 8002c8a:	60b9      	str	r1, [r7, #8]
 8002c8c:	607a      	str	r2, [r7, #4]
 8002c8e:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c98:	2101      	movs	r1, #1
 8002c9a:	4091      	lsls	r1, r2
 8002c9c:	000a      	movs	r2, r1
 8002c9e:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	2b10      	cmp	r3, #16
 8002cae:	d108      	bne.n	8002cc2 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68ba      	ldr	r2, [r7, #8]
 8002cbe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002cc0:	e007      	b.n	8002cd2 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	60da      	str	r2, [r3, #12]
}
 8002cd2:	46c0      	nop			; (mov r8, r8)
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	b004      	add	sp, #16
 8002cd8:	bd80      	pop	{r7, pc}
	...

08002cdc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a08      	ldr	r2, [pc, #32]	; (8002d0c <DMA_CalcBaseAndBitshift+0x30>)
 8002cea:	4694      	mov	ip, r2
 8002cec:	4463      	add	r3, ip
 8002cee:	2114      	movs	r1, #20
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	f7fd fa09 	bl	8000108 <__udivsi3>
 8002cf6:	0003      	movs	r3, r0
 8002cf8:	009a      	lsls	r2, r3, #2
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a03      	ldr	r2, [pc, #12]	; (8002d10 <DMA_CalcBaseAndBitshift+0x34>)
 8002d02:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002d04:	46c0      	nop			; (mov r8, r8)
 8002d06:	46bd      	mov	sp, r7
 8002d08:	b002      	add	sp, #8
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	bffdfff8 	.word	0xbffdfff8
 8002d10:	40020000 	.word	0x40020000

08002d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d22:	e14f      	b.n	8002fc4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2101      	movs	r1, #1
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	4091      	lsls	r1, r2
 8002d2e:	000a      	movs	r2, r1
 8002d30:	4013      	ands	r3, r2
 8002d32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d100      	bne.n	8002d3c <HAL_GPIO_Init+0x28>
 8002d3a:	e140      	b.n	8002fbe <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	2203      	movs	r2, #3
 8002d42:	4013      	ands	r3, r2
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d005      	beq.n	8002d54 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	2203      	movs	r2, #3
 8002d4e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d130      	bne.n	8002db6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	2203      	movs	r2, #3
 8002d60:	409a      	lsls	r2, r3
 8002d62:	0013      	movs	r3, r2
 8002d64:	43da      	mvns	r2, r3
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	68da      	ldr	r2, [r3, #12]
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	409a      	lsls	r2, r3
 8002d76:	0013      	movs	r3, r2
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	409a      	lsls	r2, r3
 8002d90:	0013      	movs	r3, r2
 8002d92:	43da      	mvns	r2, r3
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	4013      	ands	r3, r2
 8002d98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	091b      	lsrs	r3, r3, #4
 8002da0:	2201      	movs	r2, #1
 8002da2:	401a      	ands	r2, r3
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	409a      	lsls	r2, r3
 8002da8:	0013      	movs	r3, r2
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2203      	movs	r2, #3
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	2b03      	cmp	r3, #3
 8002dc0:	d017      	beq.n	8002df2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	2203      	movs	r2, #3
 8002dce:	409a      	lsls	r2, r3
 8002dd0:	0013      	movs	r3, r2
 8002dd2:	43da      	mvns	r2, r3
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	689a      	ldr	r2, [r3, #8]
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	409a      	lsls	r2, r3
 8002de4:	0013      	movs	r3, r2
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	2203      	movs	r2, #3
 8002df8:	4013      	ands	r3, r2
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d123      	bne.n	8002e46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	08da      	lsrs	r2, r3, #3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	3208      	adds	r2, #8
 8002e06:	0092      	lsls	r2, r2, #2
 8002e08:	58d3      	ldr	r3, [r2, r3]
 8002e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	2207      	movs	r2, #7
 8002e10:	4013      	ands	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	220f      	movs	r2, #15
 8002e16:	409a      	lsls	r2, r3
 8002e18:	0013      	movs	r3, r2
 8002e1a:	43da      	mvns	r2, r3
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	691a      	ldr	r2, [r3, #16]
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	2107      	movs	r1, #7
 8002e2a:	400b      	ands	r3, r1
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	409a      	lsls	r2, r3
 8002e30:	0013      	movs	r3, r2
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	08da      	lsrs	r2, r3, #3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3208      	adds	r2, #8
 8002e40:	0092      	lsls	r2, r2, #2
 8002e42:	6939      	ldr	r1, [r7, #16]
 8002e44:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	2203      	movs	r2, #3
 8002e52:	409a      	lsls	r2, r3
 8002e54:	0013      	movs	r3, r2
 8002e56:	43da      	mvns	r2, r3
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	2203      	movs	r2, #3
 8002e64:	401a      	ands	r2, r3
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	409a      	lsls	r2, r3
 8002e6c:	0013      	movs	r3, r2
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	23c0      	movs	r3, #192	; 0xc0
 8002e80:	029b      	lsls	r3, r3, #10
 8002e82:	4013      	ands	r3, r2
 8002e84:	d100      	bne.n	8002e88 <HAL_GPIO_Init+0x174>
 8002e86:	e09a      	b.n	8002fbe <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e88:	4b54      	ldr	r3, [pc, #336]	; (8002fdc <HAL_GPIO_Init+0x2c8>)
 8002e8a:	699a      	ldr	r2, [r3, #24]
 8002e8c:	4b53      	ldr	r3, [pc, #332]	; (8002fdc <HAL_GPIO_Init+0x2c8>)
 8002e8e:	2101      	movs	r1, #1
 8002e90:	430a      	orrs	r2, r1
 8002e92:	619a      	str	r2, [r3, #24]
 8002e94:	4b51      	ldr	r3, [pc, #324]	; (8002fdc <HAL_GPIO_Init+0x2c8>)
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	60bb      	str	r3, [r7, #8]
 8002e9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ea0:	4a4f      	ldr	r2, [pc, #316]	; (8002fe0 <HAL_GPIO_Init+0x2cc>)
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	089b      	lsrs	r3, r3, #2
 8002ea6:	3302      	adds	r3, #2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	589b      	ldr	r3, [r3, r2]
 8002eac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	2203      	movs	r2, #3
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	220f      	movs	r2, #15
 8002eb8:	409a      	lsls	r2, r3
 8002eba:	0013      	movs	r3, r2
 8002ebc:	43da      	mvns	r2, r3
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	2390      	movs	r3, #144	; 0x90
 8002ec8:	05db      	lsls	r3, r3, #23
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d013      	beq.n	8002ef6 <HAL_GPIO_Init+0x1e2>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a44      	ldr	r2, [pc, #272]	; (8002fe4 <HAL_GPIO_Init+0x2d0>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d00d      	beq.n	8002ef2 <HAL_GPIO_Init+0x1de>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a43      	ldr	r2, [pc, #268]	; (8002fe8 <HAL_GPIO_Init+0x2d4>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d007      	beq.n	8002eee <HAL_GPIO_Init+0x1da>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a42      	ldr	r2, [pc, #264]	; (8002fec <HAL_GPIO_Init+0x2d8>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d101      	bne.n	8002eea <HAL_GPIO_Init+0x1d6>
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e006      	b.n	8002ef8 <HAL_GPIO_Init+0x1e4>
 8002eea:	2305      	movs	r3, #5
 8002eec:	e004      	b.n	8002ef8 <HAL_GPIO_Init+0x1e4>
 8002eee:	2302      	movs	r3, #2
 8002ef0:	e002      	b.n	8002ef8 <HAL_GPIO_Init+0x1e4>
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e000      	b.n	8002ef8 <HAL_GPIO_Init+0x1e4>
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	2103      	movs	r1, #3
 8002efc:	400a      	ands	r2, r1
 8002efe:	0092      	lsls	r2, r2, #2
 8002f00:	4093      	lsls	r3, r2
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f08:	4935      	ldr	r1, [pc, #212]	; (8002fe0 <HAL_GPIO_Init+0x2cc>)
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	089b      	lsrs	r3, r3, #2
 8002f0e:	3302      	adds	r3, #2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f16:	4b36      	ldr	r3, [pc, #216]	; (8002ff0 <HAL_GPIO_Init+0x2dc>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	43da      	mvns	r2, r3
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	4013      	ands	r3, r2
 8002f24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	2380      	movs	r3, #128	; 0x80
 8002f2c:	025b      	lsls	r3, r3, #9
 8002f2e:	4013      	ands	r3, r2
 8002f30:	d003      	beq.n	8002f3a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002f3a:	4b2d      	ldr	r3, [pc, #180]	; (8002ff0 <HAL_GPIO_Init+0x2dc>)
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002f40:	4b2b      	ldr	r3, [pc, #172]	; (8002ff0 <HAL_GPIO_Init+0x2dc>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	43da      	mvns	r2, r3
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	2380      	movs	r3, #128	; 0x80
 8002f56:	029b      	lsls	r3, r3, #10
 8002f58:	4013      	ands	r3, r2
 8002f5a:	d003      	beq.n	8002f64 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002f64:	4b22      	ldr	r3, [pc, #136]	; (8002ff0 <HAL_GPIO_Init+0x2dc>)
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f6a:	4b21      	ldr	r3, [pc, #132]	; (8002ff0 <HAL_GPIO_Init+0x2dc>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	43da      	mvns	r2, r3
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	4013      	ands	r3, r2
 8002f78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	2380      	movs	r3, #128	; 0x80
 8002f80:	035b      	lsls	r3, r3, #13
 8002f82:	4013      	ands	r3, r2
 8002f84:	d003      	beq.n	8002f8e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002f8e:	4b18      	ldr	r3, [pc, #96]	; (8002ff0 <HAL_GPIO_Init+0x2dc>)
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002f94:	4b16      	ldr	r3, [pc, #88]	; (8002ff0 <HAL_GPIO_Init+0x2dc>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	43da      	mvns	r2, r3
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685a      	ldr	r2, [r3, #4]
 8002fa8:	2380      	movs	r3, #128	; 0x80
 8002faa:	039b      	lsls	r3, r3, #14
 8002fac:	4013      	ands	r3, r2
 8002fae:	d003      	beq.n	8002fb8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002fb8:	4b0d      	ldr	r3, [pc, #52]	; (8002ff0 <HAL_GPIO_Init+0x2dc>)
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	40da      	lsrs	r2, r3
 8002fcc:	1e13      	subs	r3, r2, #0
 8002fce:	d000      	beq.n	8002fd2 <HAL_GPIO_Init+0x2be>
 8002fd0:	e6a8      	b.n	8002d24 <HAL_GPIO_Init+0x10>
  } 
}
 8002fd2:	46c0      	nop			; (mov r8, r8)
 8002fd4:	46c0      	nop			; (mov r8, r8)
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	b006      	add	sp, #24
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	40010000 	.word	0x40010000
 8002fe4:	48000400 	.word	0x48000400
 8002fe8:	48000800 	.word	0x48000800
 8002fec:	48000c00 	.word	0x48000c00
 8002ff0:	40010400 	.word	0x40010400

08002ff4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	000a      	movs	r2, r1
 8002ffe:	1cbb      	adds	r3, r7, #2
 8003000:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	1cba      	adds	r2, r7, #2
 8003008:	8812      	ldrh	r2, [r2, #0]
 800300a:	4013      	ands	r3, r2
 800300c:	d004      	beq.n	8003018 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800300e:	230f      	movs	r3, #15
 8003010:	18fb      	adds	r3, r7, r3
 8003012:	2201      	movs	r2, #1
 8003014:	701a      	strb	r2, [r3, #0]
 8003016:	e003      	b.n	8003020 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003018:	230f      	movs	r3, #15
 800301a:	18fb      	adds	r3, r7, r3
 800301c:	2200      	movs	r2, #0
 800301e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003020:	230f      	movs	r3, #15
 8003022:	18fb      	adds	r3, r7, r3
 8003024:	781b      	ldrb	r3, [r3, #0]
  }
 8003026:	0018      	movs	r0, r3
 8003028:	46bd      	mov	sp, r7
 800302a:	b004      	add	sp, #16
 800302c:	bd80      	pop	{r7, pc}

0800302e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	b082      	sub	sp, #8
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
 8003036:	0008      	movs	r0, r1
 8003038:	0011      	movs	r1, r2
 800303a:	1cbb      	adds	r3, r7, #2
 800303c:	1c02      	adds	r2, r0, #0
 800303e:	801a      	strh	r2, [r3, #0]
 8003040:	1c7b      	adds	r3, r7, #1
 8003042:	1c0a      	adds	r2, r1, #0
 8003044:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003046:	1c7b      	adds	r3, r7, #1
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d004      	beq.n	8003058 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800304e:	1cbb      	adds	r3, r7, #2
 8003050:	881a      	ldrh	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003056:	e003      	b.n	8003060 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003058:	1cbb      	adds	r3, r7, #2
 800305a:	881a      	ldrh	r2, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003060:	46c0      	nop			; (mov r8, r8)
 8003062:	46bd      	mov	sp, r7
 8003064:	b002      	add	sp, #8
 8003066:	bd80      	pop	{r7, pc}

08003068 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e082      	b.n	8003180 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2241      	movs	r2, #65	; 0x41
 800307e:	5c9b      	ldrb	r3, [r3, r2]
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d107      	bne.n	8003096 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2240      	movs	r2, #64	; 0x40
 800308a:	2100      	movs	r1, #0
 800308c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	0018      	movs	r0, r3
 8003092:	f7fe fbe7 	bl	8001864 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2241      	movs	r2, #65	; 0x41
 800309a:	2124      	movs	r1, #36	; 0x24
 800309c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2101      	movs	r1, #1
 80030aa:	438a      	bics	r2, r1
 80030ac:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4934      	ldr	r1, [pc, #208]	; (8003188 <HAL_I2C_Init+0x120>)
 80030b8:	400a      	ands	r2, r1
 80030ba:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689a      	ldr	r2, [r3, #8]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4931      	ldr	r1, [pc, #196]	; (800318c <HAL_I2C_Init+0x124>)
 80030c8:	400a      	ands	r2, r1
 80030ca:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d108      	bne.n	80030e6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2180      	movs	r1, #128	; 0x80
 80030de:	0209      	lsls	r1, r1, #8
 80030e0:	430a      	orrs	r2, r1
 80030e2:	609a      	str	r2, [r3, #8]
 80030e4:	e007      	b.n	80030f6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689a      	ldr	r2, [r3, #8]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2184      	movs	r1, #132	; 0x84
 80030f0:	0209      	lsls	r1, r1, #8
 80030f2:	430a      	orrs	r2, r1
 80030f4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d104      	bne.n	8003108 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2280      	movs	r2, #128	; 0x80
 8003104:	0112      	lsls	r2, r2, #4
 8003106:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	491f      	ldr	r1, [pc, #124]	; (8003190 <HAL_I2C_Init+0x128>)
 8003114:	430a      	orrs	r2, r1
 8003116:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68da      	ldr	r2, [r3, #12]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	491a      	ldr	r1, [pc, #104]	; (800318c <HAL_I2C_Init+0x124>)
 8003124:	400a      	ands	r2, r1
 8003126:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	691a      	ldr	r2, [r3, #16]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	431a      	orrs	r2, r3
 8003132:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	430a      	orrs	r2, r1
 8003140:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	69d9      	ldr	r1, [r3, #28]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a1a      	ldr	r2, [r3, #32]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2101      	movs	r1, #1
 800315e:	430a      	orrs	r2, r1
 8003160:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2241      	movs	r2, #65	; 0x41
 800316c:	2120      	movs	r1, #32
 800316e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2242      	movs	r2, #66	; 0x42
 800317a:	2100      	movs	r1, #0
 800317c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	0018      	movs	r0, r3
 8003182:	46bd      	mov	sp, r7
 8003184:	b002      	add	sp, #8
 8003186:	bd80      	pop	{r7, pc}
 8003188:	f0ffffff 	.word	0xf0ffffff
 800318c:	ffff7fff 	.word	0xffff7fff
 8003190:	02008000 	.word	0x02008000

08003194 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003194:	b590      	push	{r4, r7, lr}
 8003196:	b089      	sub	sp, #36	; 0x24
 8003198:	af02      	add	r7, sp, #8
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	0008      	movs	r0, r1
 800319e:	607a      	str	r2, [r7, #4]
 80031a0:	0019      	movs	r1, r3
 80031a2:	230a      	movs	r3, #10
 80031a4:	18fb      	adds	r3, r7, r3
 80031a6:	1c02      	adds	r2, r0, #0
 80031a8:	801a      	strh	r2, [r3, #0]
 80031aa:	2308      	movs	r3, #8
 80031ac:	18fb      	adds	r3, r7, r3
 80031ae:	1c0a      	adds	r2, r1, #0
 80031b0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2241      	movs	r2, #65	; 0x41
 80031b6:	5c9b      	ldrb	r3, [r3, r2]
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b20      	cmp	r3, #32
 80031bc:	d000      	beq.n	80031c0 <HAL_I2C_Master_Transmit+0x2c>
 80031be:	e0e7      	b.n	8003390 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2240      	movs	r2, #64	; 0x40
 80031c4:	5c9b      	ldrb	r3, [r3, r2]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d101      	bne.n	80031ce <HAL_I2C_Master_Transmit+0x3a>
 80031ca:	2302      	movs	r3, #2
 80031cc:	e0e1      	b.n	8003392 <HAL_I2C_Master_Transmit+0x1fe>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2240      	movs	r2, #64	; 0x40
 80031d2:	2101      	movs	r1, #1
 80031d4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031d6:	f7fe fe07 	bl	8001de8 <HAL_GetTick>
 80031da:	0003      	movs	r3, r0
 80031dc:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031de:	2380      	movs	r3, #128	; 0x80
 80031e0:	0219      	lsls	r1, r3, #8
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	2319      	movs	r3, #25
 80031ea:	2201      	movs	r2, #1
 80031ec:	f000 fa04 	bl	80035f8 <I2C_WaitOnFlagUntilTimeout>
 80031f0:	1e03      	subs	r3, r0, #0
 80031f2:	d001      	beq.n	80031f8 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e0cc      	b.n	8003392 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2241      	movs	r2, #65	; 0x41
 80031fc:	2121      	movs	r1, #33	; 0x21
 80031fe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2242      	movs	r2, #66	; 0x42
 8003204:	2110      	movs	r1, #16
 8003206:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2208      	movs	r2, #8
 8003218:	18ba      	adds	r2, r7, r2
 800321a:	8812      	ldrh	r2, [r2, #0]
 800321c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003228:	b29b      	uxth	r3, r3
 800322a:	2bff      	cmp	r3, #255	; 0xff
 800322c:	d911      	bls.n	8003252 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	22ff      	movs	r2, #255	; 0xff
 8003232:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003238:	b2da      	uxtb	r2, r3
 800323a:	2380      	movs	r3, #128	; 0x80
 800323c:	045c      	lsls	r4, r3, #17
 800323e:	230a      	movs	r3, #10
 8003240:	18fb      	adds	r3, r7, r3
 8003242:	8819      	ldrh	r1, [r3, #0]
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	4b55      	ldr	r3, [pc, #340]	; (800339c <HAL_I2C_Master_Transmit+0x208>)
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	0023      	movs	r3, r4
 800324c:	f000 fb74 	bl	8003938 <I2C_TransferConfig>
 8003250:	e075      	b.n	800333e <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003256:	b29a      	uxth	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003260:	b2da      	uxtb	r2, r3
 8003262:	2380      	movs	r3, #128	; 0x80
 8003264:	049c      	lsls	r4, r3, #18
 8003266:	230a      	movs	r3, #10
 8003268:	18fb      	adds	r3, r7, r3
 800326a:	8819      	ldrh	r1, [r3, #0]
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	4b4b      	ldr	r3, [pc, #300]	; (800339c <HAL_I2C_Master_Transmit+0x208>)
 8003270:	9300      	str	r3, [sp, #0]
 8003272:	0023      	movs	r3, r4
 8003274:	f000 fb60 	bl	8003938 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003278:	e061      	b.n	800333e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	0018      	movs	r0, r3
 8003282:	f000 f9f8 	bl	8003676 <I2C_WaitOnTXISFlagUntilTimeout>
 8003286:	1e03      	subs	r3, r0, #0
 8003288:	d001      	beq.n	800328e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e081      	b.n	8003392 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	781a      	ldrb	r2, [r3, #0]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	1c5a      	adds	r2, r3, #1
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	3b01      	subs	r3, #1
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b6:	3b01      	subs	r3, #1
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d03a      	beq.n	800333e <HAL_I2C_Master_Transmit+0x1aa>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d136      	bne.n	800333e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	9300      	str	r3, [sp, #0]
 80032d8:	0013      	movs	r3, r2
 80032da:	2200      	movs	r2, #0
 80032dc:	2180      	movs	r1, #128	; 0x80
 80032de:	f000 f98b 	bl	80035f8 <I2C_WaitOnFlagUntilTimeout>
 80032e2:	1e03      	subs	r3, r0, #0
 80032e4:	d001      	beq.n	80032ea <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e053      	b.n	8003392 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	2bff      	cmp	r3, #255	; 0xff
 80032f2:	d911      	bls.n	8003318 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	22ff      	movs	r2, #255	; 0xff
 80032f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032fe:	b2da      	uxtb	r2, r3
 8003300:	2380      	movs	r3, #128	; 0x80
 8003302:	045c      	lsls	r4, r3, #17
 8003304:	230a      	movs	r3, #10
 8003306:	18fb      	adds	r3, r7, r3
 8003308:	8819      	ldrh	r1, [r3, #0]
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	2300      	movs	r3, #0
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	0023      	movs	r3, r4
 8003312:	f000 fb11 	bl	8003938 <I2C_TransferConfig>
 8003316:	e012      	b.n	800333e <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331c:	b29a      	uxth	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003326:	b2da      	uxtb	r2, r3
 8003328:	2380      	movs	r3, #128	; 0x80
 800332a:	049c      	lsls	r4, r3, #18
 800332c:	230a      	movs	r3, #10
 800332e:	18fb      	adds	r3, r7, r3
 8003330:	8819      	ldrh	r1, [r3, #0]
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	2300      	movs	r3, #0
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	0023      	movs	r3, r4
 800333a:	f000 fafd 	bl	8003938 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003342:	b29b      	uxth	r3, r3
 8003344:	2b00      	cmp	r3, #0
 8003346:	d198      	bne.n	800327a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	0018      	movs	r0, r3
 8003350:	f000 f9d0 	bl	80036f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003354:	1e03      	subs	r3, r0, #0
 8003356:	d001      	beq.n	800335c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e01a      	b.n	8003392 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2220      	movs	r2, #32
 8003362:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	490c      	ldr	r1, [pc, #48]	; (80033a0 <HAL_I2C_Master_Transmit+0x20c>)
 8003370:	400a      	ands	r2, r1
 8003372:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2241      	movs	r2, #65	; 0x41
 8003378:	2120      	movs	r1, #32
 800337a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2242      	movs	r2, #66	; 0x42
 8003380:	2100      	movs	r1, #0
 8003382:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2240      	movs	r2, #64	; 0x40
 8003388:	2100      	movs	r1, #0
 800338a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800338c:	2300      	movs	r3, #0
 800338e:	e000      	b.n	8003392 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003390:	2302      	movs	r3, #2
  }
}
 8003392:	0018      	movs	r0, r3
 8003394:	46bd      	mov	sp, r7
 8003396:	b007      	add	sp, #28
 8003398:	bd90      	pop	{r4, r7, pc}
 800339a:	46c0      	nop			; (mov r8, r8)
 800339c:	80002000 	.word	0x80002000
 80033a0:	fe00e800 	.word	0xfe00e800

080033a4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80033a4:	b590      	push	{r4, r7, lr}
 80033a6:	b089      	sub	sp, #36	; 0x24
 80033a8:	af02      	add	r7, sp, #8
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	0008      	movs	r0, r1
 80033ae:	607a      	str	r2, [r7, #4]
 80033b0:	0019      	movs	r1, r3
 80033b2:	230a      	movs	r3, #10
 80033b4:	18fb      	adds	r3, r7, r3
 80033b6:	1c02      	adds	r2, r0, #0
 80033b8:	801a      	strh	r2, [r3, #0]
 80033ba:	2308      	movs	r3, #8
 80033bc:	18fb      	adds	r3, r7, r3
 80033be:	1c0a      	adds	r2, r1, #0
 80033c0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2241      	movs	r2, #65	; 0x41
 80033c6:	5c9b      	ldrb	r3, [r3, r2]
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b20      	cmp	r3, #32
 80033cc:	d000      	beq.n	80033d0 <HAL_I2C_Master_Receive+0x2c>
 80033ce:	e0e8      	b.n	80035a2 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2240      	movs	r2, #64	; 0x40
 80033d4:	5c9b      	ldrb	r3, [r3, r2]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d101      	bne.n	80033de <HAL_I2C_Master_Receive+0x3a>
 80033da:	2302      	movs	r3, #2
 80033dc:	e0e2      	b.n	80035a4 <HAL_I2C_Master_Receive+0x200>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2240      	movs	r2, #64	; 0x40
 80033e2:	2101      	movs	r1, #1
 80033e4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80033e6:	f7fe fcff 	bl	8001de8 <HAL_GetTick>
 80033ea:	0003      	movs	r3, r0
 80033ec:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80033ee:	2380      	movs	r3, #128	; 0x80
 80033f0:	0219      	lsls	r1, r3, #8
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	2319      	movs	r3, #25
 80033fa:	2201      	movs	r2, #1
 80033fc:	f000 f8fc 	bl	80035f8 <I2C_WaitOnFlagUntilTimeout>
 8003400:	1e03      	subs	r3, r0, #0
 8003402:	d001      	beq.n	8003408 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e0cd      	b.n	80035a4 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2241      	movs	r2, #65	; 0x41
 800340c:	2122      	movs	r1, #34	; 0x22
 800340e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2242      	movs	r2, #66	; 0x42
 8003414:	2110      	movs	r1, #16
 8003416:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2208      	movs	r2, #8
 8003428:	18ba      	adds	r2, r7, r2
 800342a:	8812      	ldrh	r2, [r2, #0]
 800342c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003438:	b29b      	uxth	r3, r3
 800343a:	2bff      	cmp	r3, #255	; 0xff
 800343c:	d911      	bls.n	8003462 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	22ff      	movs	r2, #255	; 0xff
 8003442:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003448:	b2da      	uxtb	r2, r3
 800344a:	2380      	movs	r3, #128	; 0x80
 800344c:	045c      	lsls	r4, r3, #17
 800344e:	230a      	movs	r3, #10
 8003450:	18fb      	adds	r3, r7, r3
 8003452:	8819      	ldrh	r1, [r3, #0]
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	4b55      	ldr	r3, [pc, #340]	; (80035ac <HAL_I2C_Master_Receive+0x208>)
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	0023      	movs	r3, r4
 800345c:	f000 fa6c 	bl	8003938 <I2C_TransferConfig>
 8003460:	e076      	b.n	8003550 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003466:	b29a      	uxth	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003470:	b2da      	uxtb	r2, r3
 8003472:	2380      	movs	r3, #128	; 0x80
 8003474:	049c      	lsls	r4, r3, #18
 8003476:	230a      	movs	r3, #10
 8003478:	18fb      	adds	r3, r7, r3
 800347a:	8819      	ldrh	r1, [r3, #0]
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	4b4b      	ldr	r3, [pc, #300]	; (80035ac <HAL_I2C_Master_Receive+0x208>)
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	0023      	movs	r3, r4
 8003484:	f000 fa58 	bl	8003938 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003488:	e062      	b.n	8003550 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	0018      	movs	r0, r3
 8003492:	f000 f96b 	bl	800376c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003496:	1e03      	subs	r3, r0, #0
 8003498:	d001      	beq.n	800349e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e082      	b.n	80035a4 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a8:	b2d2      	uxtb	r2, r2
 80034aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b0:	1c5a      	adds	r2, r3, #1
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ba:	3b01      	subs	r3, #1
 80034bc:	b29a      	uxth	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	3b01      	subs	r3, #1
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d03a      	beq.n	8003550 <HAL_I2C_Master_Receive+0x1ac>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d136      	bne.n	8003550 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80034e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	0013      	movs	r3, r2
 80034ec:	2200      	movs	r2, #0
 80034ee:	2180      	movs	r1, #128	; 0x80
 80034f0:	f000 f882 	bl	80035f8 <I2C_WaitOnFlagUntilTimeout>
 80034f4:	1e03      	subs	r3, r0, #0
 80034f6:	d001      	beq.n	80034fc <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e053      	b.n	80035a4 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003500:	b29b      	uxth	r3, r3
 8003502:	2bff      	cmp	r3, #255	; 0xff
 8003504:	d911      	bls.n	800352a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	22ff      	movs	r2, #255	; 0xff
 800350a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003510:	b2da      	uxtb	r2, r3
 8003512:	2380      	movs	r3, #128	; 0x80
 8003514:	045c      	lsls	r4, r3, #17
 8003516:	230a      	movs	r3, #10
 8003518:	18fb      	adds	r3, r7, r3
 800351a:	8819      	ldrh	r1, [r3, #0]
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	2300      	movs	r3, #0
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	0023      	movs	r3, r4
 8003524:	f000 fa08 	bl	8003938 <I2C_TransferConfig>
 8003528:	e012      	b.n	8003550 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800352e:	b29a      	uxth	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003538:	b2da      	uxtb	r2, r3
 800353a:	2380      	movs	r3, #128	; 0x80
 800353c:	049c      	lsls	r4, r3, #18
 800353e:	230a      	movs	r3, #10
 8003540:	18fb      	adds	r3, r7, r3
 8003542:	8819      	ldrh	r1, [r3, #0]
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	2300      	movs	r3, #0
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	0023      	movs	r3, r4
 800354c:	f000 f9f4 	bl	8003938 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003554:	b29b      	uxth	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d197      	bne.n	800348a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	0018      	movs	r0, r3
 8003562:	f000 f8c7 	bl	80036f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003566:	1e03      	subs	r3, r0, #0
 8003568:	d001      	beq.n	800356e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e01a      	b.n	80035a4 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2220      	movs	r2, #32
 8003574:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	490b      	ldr	r1, [pc, #44]	; (80035b0 <HAL_I2C_Master_Receive+0x20c>)
 8003582:	400a      	ands	r2, r1
 8003584:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2241      	movs	r2, #65	; 0x41
 800358a:	2120      	movs	r1, #32
 800358c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2242      	movs	r2, #66	; 0x42
 8003592:	2100      	movs	r1, #0
 8003594:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2240      	movs	r2, #64	; 0x40
 800359a:	2100      	movs	r1, #0
 800359c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800359e:	2300      	movs	r3, #0
 80035a0:	e000      	b.n	80035a4 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80035a2:	2302      	movs	r3, #2
  }
}
 80035a4:	0018      	movs	r0, r3
 80035a6:	46bd      	mov	sp, r7
 80035a8:	b007      	add	sp, #28
 80035aa:	bd90      	pop	{r4, r7, pc}
 80035ac:	80002400 	.word	0x80002400
 80035b0:	fe00e800 	.word	0xfe00e800

080035b4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	2202      	movs	r2, #2
 80035c4:	4013      	ands	r3, r2
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d103      	bne.n	80035d2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2200      	movs	r2, #0
 80035d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	2201      	movs	r2, #1
 80035da:	4013      	ands	r3, r2
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d007      	beq.n	80035f0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	699a      	ldr	r2, [r3, #24]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2101      	movs	r1, #1
 80035ec:	430a      	orrs	r2, r1
 80035ee:	619a      	str	r2, [r3, #24]
  }
}
 80035f0:	46c0      	nop			; (mov r8, r8)
 80035f2:	46bd      	mov	sp, r7
 80035f4:	b002      	add	sp, #8
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	603b      	str	r3, [r7, #0]
 8003604:	1dfb      	adds	r3, r7, #7
 8003606:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003608:	e021      	b.n	800364e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	3301      	adds	r3, #1
 800360e:	d01e      	beq.n	800364e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003610:	f7fe fbea 	bl	8001de8 <HAL_GetTick>
 8003614:	0002      	movs	r2, r0
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	429a      	cmp	r2, r3
 800361e:	d302      	bcc.n	8003626 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d113      	bne.n	800364e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362a:	2220      	movs	r2, #32
 800362c:	431a      	orrs	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2241      	movs	r2, #65	; 0x41
 8003636:	2120      	movs	r1, #32
 8003638:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2242      	movs	r2, #66	; 0x42
 800363e:	2100      	movs	r1, #0
 8003640:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2240      	movs	r2, #64	; 0x40
 8003646:	2100      	movs	r1, #0
 8003648:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e00f      	b.n	800366e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	4013      	ands	r3, r2
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	425a      	negs	r2, r3
 800365e:	4153      	adcs	r3, r2
 8003660:	b2db      	uxtb	r3, r3
 8003662:	001a      	movs	r2, r3
 8003664:	1dfb      	adds	r3, r7, #7
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	429a      	cmp	r2, r3
 800366a:	d0ce      	beq.n	800360a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	0018      	movs	r0, r3
 8003670:	46bd      	mov	sp, r7
 8003672:	b004      	add	sp, #16
 8003674:	bd80      	pop	{r7, pc}

08003676 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b084      	sub	sp, #16
 800367a:	af00      	add	r7, sp, #0
 800367c:	60f8      	str	r0, [r7, #12]
 800367e:	60b9      	str	r1, [r7, #8]
 8003680:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003682:	e02b      	b.n	80036dc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	68b9      	ldr	r1, [r7, #8]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	0018      	movs	r0, r3
 800368c:	f000 f8da 	bl	8003844 <I2C_IsAcknowledgeFailed>
 8003690:	1e03      	subs	r3, r0, #0
 8003692:	d001      	beq.n	8003698 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e029      	b.n	80036ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	3301      	adds	r3, #1
 800369c:	d01e      	beq.n	80036dc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800369e:	f7fe fba3 	bl	8001de8 <HAL_GetTick>
 80036a2:	0002      	movs	r2, r0
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	68ba      	ldr	r2, [r7, #8]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d302      	bcc.n	80036b4 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d113      	bne.n	80036dc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b8:	2220      	movs	r2, #32
 80036ba:	431a      	orrs	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2241      	movs	r2, #65	; 0x41
 80036c4:	2120      	movs	r1, #32
 80036c6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2242      	movs	r2, #66	; 0x42
 80036cc:	2100      	movs	r1, #0
 80036ce:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2240      	movs	r2, #64	; 0x40
 80036d4:	2100      	movs	r1, #0
 80036d6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e007      	b.n	80036ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	2202      	movs	r2, #2
 80036e4:	4013      	ands	r3, r2
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d1cc      	bne.n	8003684 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	0018      	movs	r0, r3
 80036ee:	46bd      	mov	sp, r7
 80036f0:	b004      	add	sp, #16
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003700:	e028      	b.n	8003754 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	68b9      	ldr	r1, [r7, #8]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	0018      	movs	r0, r3
 800370a:	f000 f89b 	bl	8003844 <I2C_IsAcknowledgeFailed>
 800370e:	1e03      	subs	r3, r0, #0
 8003710:	d001      	beq.n	8003716 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e026      	b.n	8003764 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003716:	f7fe fb67 	bl	8001de8 <HAL_GetTick>
 800371a:	0002      	movs	r2, r0
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	429a      	cmp	r2, r3
 8003724:	d302      	bcc.n	800372c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d113      	bne.n	8003754 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003730:	2220      	movs	r2, #32
 8003732:	431a      	orrs	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2241      	movs	r2, #65	; 0x41
 800373c:	2120      	movs	r1, #32
 800373e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2242      	movs	r2, #66	; 0x42
 8003744:	2100      	movs	r1, #0
 8003746:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2240      	movs	r2, #64	; 0x40
 800374c:	2100      	movs	r1, #0
 800374e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e007      	b.n	8003764 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	2220      	movs	r2, #32
 800375c:	4013      	ands	r3, r2
 800375e:	2b20      	cmp	r3, #32
 8003760:	d1cf      	bne.n	8003702 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	0018      	movs	r0, r3
 8003766:	46bd      	mov	sp, r7
 8003768:	b004      	add	sp, #16
 800376a:	bd80      	pop	{r7, pc}

0800376c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003778:	e055      	b.n	8003826 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	68b9      	ldr	r1, [r7, #8]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	0018      	movs	r0, r3
 8003782:	f000 f85f 	bl	8003844 <I2C_IsAcknowledgeFailed>
 8003786:	1e03      	subs	r3, r0, #0
 8003788:	d001      	beq.n	800378e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e053      	b.n	8003836 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	2220      	movs	r2, #32
 8003796:	4013      	ands	r3, r2
 8003798:	2b20      	cmp	r3, #32
 800379a:	d129      	bne.n	80037f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	2204      	movs	r2, #4
 80037a4:	4013      	ands	r3, r2
 80037a6:	2b04      	cmp	r3, #4
 80037a8:	d105      	bne.n	80037b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80037b2:	2300      	movs	r3, #0
 80037b4:	e03f      	b.n	8003836 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2220      	movs	r2, #32
 80037bc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	491d      	ldr	r1, [pc, #116]	; (8003840 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80037ca:	400a      	ands	r2, r1
 80037cc:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2241      	movs	r2, #65	; 0x41
 80037d8:	2120      	movs	r1, #32
 80037da:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2242      	movs	r2, #66	; 0x42
 80037e0:	2100      	movs	r1, #0
 80037e2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2240      	movs	r2, #64	; 0x40
 80037e8:	2100      	movs	r1, #0
 80037ea:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e022      	b.n	8003836 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037f0:	f7fe fafa 	bl	8001de8 <HAL_GetTick>
 80037f4:	0002      	movs	r2, r0
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	68ba      	ldr	r2, [r7, #8]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d302      	bcc.n	8003806 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10f      	bne.n	8003826 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380a:	2220      	movs	r2, #32
 800380c:	431a      	orrs	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2241      	movs	r2, #65	; 0x41
 8003816:	2120      	movs	r1, #32
 8003818:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2240      	movs	r2, #64	; 0x40
 800381e:	2100      	movs	r1, #0
 8003820:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e007      	b.n	8003836 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	2204      	movs	r2, #4
 800382e:	4013      	ands	r3, r2
 8003830:	2b04      	cmp	r3, #4
 8003832:	d1a2      	bne.n	800377a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	0018      	movs	r0, r3
 8003838:	46bd      	mov	sp, r7
 800383a:	b004      	add	sp, #16
 800383c:	bd80      	pop	{r7, pc}
 800383e:	46c0      	nop			; (mov r8, r8)
 8003840:	fe00e800 	.word	0xfe00e800

08003844 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	2210      	movs	r2, #16
 8003858:	4013      	ands	r3, r2
 800385a:	2b10      	cmp	r3, #16
 800385c:	d164      	bne.n	8003928 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	685a      	ldr	r2, [r3, #4]
 8003864:	2380      	movs	r3, #128	; 0x80
 8003866:	049b      	lsls	r3, r3, #18
 8003868:	401a      	ands	r2, r3
 800386a:	2380      	movs	r3, #128	; 0x80
 800386c:	049b      	lsls	r3, r3, #18
 800386e:	429a      	cmp	r2, r3
 8003870:	d02b      	beq.n	80038ca <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	685a      	ldr	r2, [r3, #4]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2180      	movs	r1, #128	; 0x80
 800387e:	01c9      	lsls	r1, r1, #7
 8003880:	430a      	orrs	r2, r1
 8003882:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003884:	e021      	b.n	80038ca <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	3301      	adds	r3, #1
 800388a:	d01e      	beq.n	80038ca <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800388c:	f7fe faac 	bl	8001de8 <HAL_GetTick>
 8003890:	0002      	movs	r2, r0
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	68ba      	ldr	r2, [r7, #8]
 8003898:	429a      	cmp	r2, r3
 800389a:	d302      	bcc.n	80038a2 <I2C_IsAcknowledgeFailed+0x5e>
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d113      	bne.n	80038ca <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a6:	2220      	movs	r2, #32
 80038a8:	431a      	orrs	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2241      	movs	r2, #65	; 0x41
 80038b2:	2120      	movs	r1, #32
 80038b4:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2242      	movs	r2, #66	; 0x42
 80038ba:	2100      	movs	r1, #0
 80038bc:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2240      	movs	r2, #64	; 0x40
 80038c2:	2100      	movs	r1, #0
 80038c4:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e02f      	b.n	800392a <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	2220      	movs	r2, #32
 80038d2:	4013      	ands	r3, r2
 80038d4:	2b20      	cmp	r3, #32
 80038d6:	d1d6      	bne.n	8003886 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2210      	movs	r2, #16
 80038de:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2220      	movs	r2, #32
 80038e6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	0018      	movs	r0, r3
 80038ec:	f7ff fe62 	bl	80035b4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	490e      	ldr	r1, [pc, #56]	; (8003934 <I2C_IsAcknowledgeFailed+0xf0>)
 80038fc:	400a      	ands	r2, r1
 80038fe:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003904:	2204      	movs	r2, #4
 8003906:	431a      	orrs	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2241      	movs	r2, #65	; 0x41
 8003910:	2120      	movs	r1, #32
 8003912:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2242      	movs	r2, #66	; 0x42
 8003918:	2100      	movs	r1, #0
 800391a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2240      	movs	r2, #64	; 0x40
 8003920:	2100      	movs	r1, #0
 8003922:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e000      	b.n	800392a <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	0018      	movs	r0, r3
 800392c:	46bd      	mov	sp, r7
 800392e:	b004      	add	sp, #16
 8003930:	bd80      	pop	{r7, pc}
 8003932:	46c0      	nop			; (mov r8, r8)
 8003934:	fe00e800 	.word	0xfe00e800

08003938 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003938:	b590      	push	{r4, r7, lr}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	0008      	movs	r0, r1
 8003942:	0011      	movs	r1, r2
 8003944:	607b      	str	r3, [r7, #4]
 8003946:	240a      	movs	r4, #10
 8003948:	193b      	adds	r3, r7, r4
 800394a:	1c02      	adds	r2, r0, #0
 800394c:	801a      	strh	r2, [r3, #0]
 800394e:	2009      	movs	r0, #9
 8003950:	183b      	adds	r3, r7, r0
 8003952:	1c0a      	adds	r2, r1, #0
 8003954:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	6a3a      	ldr	r2, [r7, #32]
 800395e:	0d51      	lsrs	r1, r2, #21
 8003960:	2280      	movs	r2, #128	; 0x80
 8003962:	00d2      	lsls	r2, r2, #3
 8003964:	400a      	ands	r2, r1
 8003966:	490e      	ldr	r1, [pc, #56]	; (80039a0 <I2C_TransferConfig+0x68>)
 8003968:	430a      	orrs	r2, r1
 800396a:	43d2      	mvns	r2, r2
 800396c:	401a      	ands	r2, r3
 800396e:	0011      	movs	r1, r2
 8003970:	193b      	adds	r3, r7, r4
 8003972:	881b      	ldrh	r3, [r3, #0]
 8003974:	059b      	lsls	r3, r3, #22
 8003976:	0d9a      	lsrs	r2, r3, #22
 8003978:	183b      	adds	r3, r7, r0
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	0418      	lsls	r0, r3, #16
 800397e:	23ff      	movs	r3, #255	; 0xff
 8003980:	041b      	lsls	r3, r3, #16
 8003982:	4003      	ands	r3, r0
 8003984:	431a      	orrs	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	431a      	orrs	r2, r3
 800398a:	6a3b      	ldr	r3, [r7, #32]
 800398c:	431a      	orrs	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	430a      	orrs	r2, r1
 8003994:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8003996:	46c0      	nop			; (mov r8, r8)
 8003998:	46bd      	mov	sp, r7
 800399a:	b005      	add	sp, #20
 800399c:	bd90      	pop	{r4, r7, pc}
 800399e:	46c0      	nop			; (mov r8, r8)
 80039a0:	03ff63ff 	.word	0x03ff63ff

080039a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2241      	movs	r2, #65	; 0x41
 80039b2:	5c9b      	ldrb	r3, [r3, r2]
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b20      	cmp	r3, #32
 80039b8:	d138      	bne.n	8003a2c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2240      	movs	r2, #64	; 0x40
 80039be:	5c9b      	ldrb	r3, [r3, r2]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d101      	bne.n	80039c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80039c4:	2302      	movs	r3, #2
 80039c6:	e032      	b.n	8003a2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2240      	movs	r2, #64	; 0x40
 80039cc:	2101      	movs	r1, #1
 80039ce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2241      	movs	r2, #65	; 0x41
 80039d4:	2124      	movs	r1, #36	; 0x24
 80039d6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2101      	movs	r1, #1
 80039e4:	438a      	bics	r2, r1
 80039e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4911      	ldr	r1, [pc, #68]	; (8003a38 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80039f4:	400a      	ands	r2, r1
 80039f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6819      	ldr	r1, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	430a      	orrs	r2, r1
 8003a06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2101      	movs	r1, #1
 8003a14:	430a      	orrs	r2, r1
 8003a16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2241      	movs	r2, #65	; 0x41
 8003a1c:	2120      	movs	r1, #32
 8003a1e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2240      	movs	r2, #64	; 0x40
 8003a24:	2100      	movs	r1, #0
 8003a26:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	e000      	b.n	8003a2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a2c:	2302      	movs	r3, #2
  }
}
 8003a2e:	0018      	movs	r0, r3
 8003a30:	46bd      	mov	sp, r7
 8003a32:	b002      	add	sp, #8
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	46c0      	nop			; (mov r8, r8)
 8003a38:	ffffefff 	.word	0xffffefff

08003a3c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2241      	movs	r2, #65	; 0x41
 8003a4a:	5c9b      	ldrb	r3, [r3, r2]
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b20      	cmp	r3, #32
 8003a50:	d139      	bne.n	8003ac6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2240      	movs	r2, #64	; 0x40
 8003a56:	5c9b      	ldrb	r3, [r3, r2]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d101      	bne.n	8003a60 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	e033      	b.n	8003ac8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2240      	movs	r2, #64	; 0x40
 8003a64:	2101      	movs	r1, #1
 8003a66:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2241      	movs	r2, #65	; 0x41
 8003a6c:	2124      	movs	r1, #36	; 0x24
 8003a6e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	438a      	bics	r2, r1
 8003a7e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	4a11      	ldr	r2, [pc, #68]	; (8003ad0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	021b      	lsls	r3, r3, #8
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2101      	movs	r1, #1
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2241      	movs	r2, #65	; 0x41
 8003ab6:	2120      	movs	r1, #32
 8003ab8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2240      	movs	r2, #64	; 0x40
 8003abe:	2100      	movs	r1, #0
 8003ac0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	e000      	b.n	8003ac8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ac6:	2302      	movs	r3, #2
  }
}
 8003ac8:	0018      	movs	r0, r3
 8003aca:	46bd      	mov	sp, r7
 8003acc:	b004      	add	sp, #16
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	fffff0ff 	.word	0xfffff0ff

08003ad4 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI:Enter STOP mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter STOP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	000a      	movs	r2, r1
 8003ade:	1cfb      	adds	r3, r7, #3
 8003ae0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8003ae6:	4b13      	ldr	r3, [pc, #76]	; (8003b34 <HAL_PWR_EnterSTOPMode+0x60>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	60fb      	str	r3, [r7, #12]
  
  /* Clear PDDS and LPDS bits */
  tmpreg &= (uint32_t)~(PWR_CR_PDDS | PWR_CR_LPDS);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2203      	movs	r2, #3
 8003af0:	4393      	bics	r3, r2
 8003af2:	60fb      	str	r3, [r7, #12]

  /* Set LPDS bit according to Regulator value */
  tmpreg |= Regulator;
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 8003afc:	4b0d      	ldr	r3, [pc, #52]	; (8003b34 <HAL_PWR_EnterSTOPMode+0x60>)
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8003b02:	4b0d      	ldr	r3, [pc, #52]	; (8003b38 <HAL_PWR_EnterSTOPMode+0x64>)
 8003b04:	691a      	ldr	r2, [r3, #16]
 8003b06:	4b0c      	ldr	r3, [pc, #48]	; (8003b38 <HAL_PWR_EnterSTOPMode+0x64>)
 8003b08:	2104      	movs	r1, #4
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	611a      	str	r2, [r3, #16]

  /* Select STOP mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8003b0e:	1cfb      	adds	r3, r7, #3
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d101      	bne.n	8003b1a <HAL_PWR_EnterSTOPMode+0x46>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003b16:	bf30      	wfi
 8003b18:	e002      	b.n	8003b20 <HAL_PWR_EnterSTOPMode+0x4c>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003b1a:	bf40      	sev
    __WFE();
 8003b1c:	bf20      	wfe
    __WFE();
 8003b1e:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 8003b20:	4b05      	ldr	r3, [pc, #20]	; (8003b38 <HAL_PWR_EnterSTOPMode+0x64>)
 8003b22:	691a      	ldr	r2, [r3, #16]
 8003b24:	4b04      	ldr	r3, [pc, #16]	; (8003b38 <HAL_PWR_EnterSTOPMode+0x64>)
 8003b26:	2104      	movs	r1, #4
 8003b28:	438a      	bics	r2, r1
 8003b2a:	611a      	str	r2, [r3, #16]
}
 8003b2c:	46c0      	nop			; (mov r8, r8)
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	b004      	add	sp, #16
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	40007000 	.word	0x40007000
 8003b38:	e000ed00 	.word	0xe000ed00

08003b3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b088      	sub	sp, #32
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e301      	b.n	8004152 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2201      	movs	r2, #1
 8003b54:	4013      	ands	r3, r2
 8003b56:	d100      	bne.n	8003b5a <HAL_RCC_OscConfig+0x1e>
 8003b58:	e08d      	b.n	8003c76 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003b5a:	4bc3      	ldr	r3, [pc, #780]	; (8003e68 <HAL_RCC_OscConfig+0x32c>)
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	220c      	movs	r2, #12
 8003b60:	4013      	ands	r3, r2
 8003b62:	2b04      	cmp	r3, #4
 8003b64:	d00e      	beq.n	8003b84 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b66:	4bc0      	ldr	r3, [pc, #768]	; (8003e68 <HAL_RCC_OscConfig+0x32c>)
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	220c      	movs	r2, #12
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	2b08      	cmp	r3, #8
 8003b70:	d116      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x64>
 8003b72:	4bbd      	ldr	r3, [pc, #756]	; (8003e68 <HAL_RCC_OscConfig+0x32c>)
 8003b74:	685a      	ldr	r2, [r3, #4]
 8003b76:	2380      	movs	r3, #128	; 0x80
 8003b78:	025b      	lsls	r3, r3, #9
 8003b7a:	401a      	ands	r2, r3
 8003b7c:	2380      	movs	r3, #128	; 0x80
 8003b7e:	025b      	lsls	r3, r3, #9
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d10d      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b84:	4bb8      	ldr	r3, [pc, #736]	; (8003e68 <HAL_RCC_OscConfig+0x32c>)
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	2380      	movs	r3, #128	; 0x80
 8003b8a:	029b      	lsls	r3, r3, #10
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	d100      	bne.n	8003b92 <HAL_RCC_OscConfig+0x56>
 8003b90:	e070      	b.n	8003c74 <HAL_RCC_OscConfig+0x138>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d000      	beq.n	8003b9c <HAL_RCC_OscConfig+0x60>
 8003b9a:	e06b      	b.n	8003c74 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e2d8      	b.n	8004152 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d107      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x7c>
 8003ba8:	4baf      	ldr	r3, [pc, #700]	; (8003e68 <HAL_RCC_OscConfig+0x32c>)
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	4bae      	ldr	r3, [pc, #696]	; (8003e68 <HAL_RCC_OscConfig+0x32c>)
 8003bae:	2180      	movs	r1, #128	; 0x80
 8003bb0:	0249      	lsls	r1, r1, #9
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	601a      	str	r2, [r3, #0]
 8003bb6:	e02f      	b.n	8003c18 <HAL_RCC_OscConfig+0xdc>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10c      	bne.n	8003bda <HAL_RCC_OscConfig+0x9e>
 8003bc0:	4ba9      	ldr	r3, [pc, #676]	; (8003e68 <HAL_RCC_OscConfig+0x32c>)
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	4ba8      	ldr	r3, [pc, #672]	; (8003e68 <HAL_RCC_OscConfig+0x32c>)
 8003bc6:	49a9      	ldr	r1, [pc, #676]	; (8003e6c <HAL_RCC_OscConfig+0x330>)
 8003bc8:	400a      	ands	r2, r1
 8003bca:	601a      	str	r2, [r3, #0]
 8003bcc:	4ba6      	ldr	r3, [pc, #664]	; (8003e68 <HAL_RCC_OscConfig+0x32c>)
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	4ba5      	ldr	r3, [pc, #660]	; (8003e68 <HAL_RCC_OscConfig+0x32c>)
 8003bd2:	49a7      	ldr	r1, [pc, #668]	; (8003e70 <HAL_RCC_OscConfig+0x334>)
 8003bd4:	400a      	ands	r2, r1
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	e01e      	b.n	8003c18 <HAL_RCC_OscConfig+0xdc>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	2b05      	cmp	r3, #5
 8003be0:	d10e      	bne.n	8003c00 <HAL_RCC_OscConfig+0xc4>
 8003be2:	4ba1      	ldr	r3, [pc, #644]	; (8003e68 <HAL_RCC_OscConfig+0x32c>)
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	4ba0      	ldr	r3, [pc, #640]	; (8003e68 <HAL_RCC_OscConfig+0x32c>)
 8003be8:	2180      	movs	r1, #128	; 0x80
 8003bea:	02c9      	lsls	r1, r1, #11
 8003bec:	430a      	orrs	r2, r1
 8003bee:	601a      	str	r2, [r3, #0]
 8003bf0:	4b9d      	ldr	r3, [pc, #628]	; (8003e68 <HAL_RCC_OscConfig+0x32c>)
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	4b9c      	ldr	r3, [pc, #624]	; (8003e68 <HAL_RCC_OscConfig+0x32c>)
 8003bf6:	2180      	movs	r1, #128	; 0x80
 8003bf8:	0249      	lsls	r1, r1, #9
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	e00b      	b.n	8003c18 <HAL_RCC_OscConfig+0xdc>
 8003c00:	4b99      	ldr	r3, [pc, #612]	; (8003e68 <HAL_RCC_OscConfig+0x32c>)
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	4b98      	ldr	r3, [pc, #608]	; (8003e68 <HAL_RCC_OscConfig+0x32c>)
 8003c06:	4999      	ldr	r1, [pc, #612]	; (8003e6c <HAL_RCC_OscConfig+0x330>)
 8003c08:	400a      	ands	r2, r1
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	4b96      	ldr	r3, [pc, #600]	; (8003e68 <HAL_RCC_OscConfig+0x32c>)
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	4b95      	ldr	r3, [pc, #596]	; (8003e68 <HAL_RCC_OscConfig+0x32c>)
 8003c12:	4997      	ldr	r1, [pc, #604]	; (8003e70 <HAL_RCC_OscConfig+0x334>)
 8003c14:	400a      	ands	r2, r1
 8003c16:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d014      	beq.n	8003c4a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c20:	f7fe f8e2 	bl	8001de8 <HAL_GetTick>
 8003c24:	0003      	movs	r3, r0
 8003c26:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c28:	e008      	b.n	8003c3c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c2a:	f7fe f8dd 	bl	8001de8 <HAL_GetTick>
 8003c2e:	0002      	movs	r2, r0
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	2b64      	cmp	r3, #100	; 0x64
 8003c36:	d901      	bls.n	8003c3c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e28a      	b.n	8004152 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c3c:	4b8a      	ldr	r3, [pc, #552]	; (8003e68 <HAL_RCC_OscConfig+0x32c>)
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	2380      	movs	r3, #128	; 0x80
 8003c42:	029b      	lsls	r3, r3, #10
 8003c44:	4013      	ands	r3, r2
 8003c46:	d0f0      	beq.n	8003c2a <HAL_RCC_OscConfig+0xee>
 8003c48:	e015      	b.n	8003c76 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c4a:	f7fe f8cd 	bl	8001de8 <HAL_GetTick>
 8003c4e:	0003      	movs	r3, r0
 8003c50:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c54:	f7fe f8c8 	bl	8001de8 <HAL_GetTick>
 8003c58:	0002      	movs	r2, r0
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b64      	cmp	r3, #100	; 0x64
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e275      	b.n	8004152 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c66:	4b80      	ldr	r3, [pc, #512]	; (8003e68 <HAL_RCC_OscConfig+0x32c>)
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	2380      	movs	r3, #128	; 0x80
 8003c6c:	029b      	lsls	r3, r3, #10
 8003c6e:	4013      	ands	r3, r2
 8003c70:	d1f0      	bne.n	8003c54 <HAL_RCC_OscConfig+0x118>
 8003c72:	e000      	b.n	8003c76 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c74:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	d100      	bne.n	8003c82 <HAL_RCC_OscConfig+0x146>
 8003c80:	e069      	b.n	8003d56 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003c82:	4b79      	ldr	r3, [pc, #484]	; (8003e68 <HAL_RCC_OscConfig+0x32c>)
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	220c      	movs	r2, #12
 8003c88:	4013      	ands	r3, r2
 8003c8a:	d00b      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003c8c:	4b76      	ldr	r3, [pc, #472]	; (8003e68 <HAL_RCC_OscConfig+0x32c>)
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	220c      	movs	r2, #12
 8003c92:	4013      	ands	r3, r2
 8003c94:	2b08      	cmp	r3, #8
 8003c96:	d11c      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x196>
 8003c98:	4b73      	ldr	r3, [pc, #460]	; (8003e68 <HAL_RCC_OscConfig+0x32c>)
 8003c9a:	685a      	ldr	r2, [r3, #4]
 8003c9c:	2380      	movs	r3, #128	; 0x80
 8003c9e:	025b      	lsls	r3, r3, #9
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	d116      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ca4:	4b70      	ldr	r3, [pc, #448]	; (8003e68 <HAL_RCC_OscConfig+0x32c>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2202      	movs	r2, #2
 8003caa:	4013      	ands	r3, r2
 8003cac:	d005      	beq.n	8003cba <HAL_RCC_OscConfig+0x17e>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d001      	beq.n	8003cba <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e24b      	b.n	8004152 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cba:	4b6b      	ldr	r3, [pc, #428]	; (8003e68 <HAL_RCC_OscConfig+0x32c>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	22f8      	movs	r2, #248	; 0xf8
 8003cc0:	4393      	bics	r3, r2
 8003cc2:	0019      	movs	r1, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	00da      	lsls	r2, r3, #3
 8003cca:	4b67      	ldr	r3, [pc, #412]	; (8003e68 <HAL_RCC_OscConfig+0x32c>)
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cd0:	e041      	b.n	8003d56 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d024      	beq.n	8003d24 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cda:	4b63      	ldr	r3, [pc, #396]	; (8003e68 <HAL_RCC_OscConfig+0x32c>)
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	4b62      	ldr	r3, [pc, #392]	; (8003e68 <HAL_RCC_OscConfig+0x32c>)
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce6:	f7fe f87f 	bl	8001de8 <HAL_GetTick>
 8003cea:	0003      	movs	r3, r0
 8003cec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cf0:	f7fe f87a 	bl	8001de8 <HAL_GetTick>
 8003cf4:	0002      	movs	r2, r0
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e227      	b.n	8004152 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d02:	4b59      	ldr	r3, [pc, #356]	; (8003e68 <HAL_RCC_OscConfig+0x32c>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2202      	movs	r2, #2
 8003d08:	4013      	ands	r3, r2
 8003d0a:	d0f1      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d0c:	4b56      	ldr	r3, [pc, #344]	; (8003e68 <HAL_RCC_OscConfig+0x32c>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	22f8      	movs	r2, #248	; 0xf8
 8003d12:	4393      	bics	r3, r2
 8003d14:	0019      	movs	r1, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	00da      	lsls	r2, r3, #3
 8003d1c:	4b52      	ldr	r3, [pc, #328]	; (8003e68 <HAL_RCC_OscConfig+0x32c>)
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	e018      	b.n	8003d56 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d24:	4b50      	ldr	r3, [pc, #320]	; (8003e68 <HAL_RCC_OscConfig+0x32c>)
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	4b4f      	ldr	r3, [pc, #316]	; (8003e68 <HAL_RCC_OscConfig+0x32c>)
 8003d2a:	2101      	movs	r1, #1
 8003d2c:	438a      	bics	r2, r1
 8003d2e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d30:	f7fe f85a 	bl	8001de8 <HAL_GetTick>
 8003d34:	0003      	movs	r3, r0
 8003d36:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d38:	e008      	b.n	8003d4c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d3a:	f7fe f855 	bl	8001de8 <HAL_GetTick>
 8003d3e:	0002      	movs	r2, r0
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d901      	bls.n	8003d4c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e202      	b.n	8004152 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d4c:	4b46      	ldr	r3, [pc, #280]	; (8003e68 <HAL_RCC_OscConfig+0x32c>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2202      	movs	r2, #2
 8003d52:	4013      	ands	r3, r2
 8003d54:	d1f1      	bne.n	8003d3a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2208      	movs	r2, #8
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	d036      	beq.n	8003dce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	69db      	ldr	r3, [r3, #28]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d019      	beq.n	8003d9c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d68:	4b3f      	ldr	r3, [pc, #252]	; (8003e68 <HAL_RCC_OscConfig+0x32c>)
 8003d6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d6c:	4b3e      	ldr	r3, [pc, #248]	; (8003e68 <HAL_RCC_OscConfig+0x32c>)
 8003d6e:	2101      	movs	r1, #1
 8003d70:	430a      	orrs	r2, r1
 8003d72:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d74:	f7fe f838 	bl	8001de8 <HAL_GetTick>
 8003d78:	0003      	movs	r3, r0
 8003d7a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d7c:	e008      	b.n	8003d90 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d7e:	f7fe f833 	bl	8001de8 <HAL_GetTick>
 8003d82:	0002      	movs	r2, r0
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d901      	bls.n	8003d90 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e1e0      	b.n	8004152 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d90:	4b35      	ldr	r3, [pc, #212]	; (8003e68 <HAL_RCC_OscConfig+0x32c>)
 8003d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d94:	2202      	movs	r2, #2
 8003d96:	4013      	ands	r3, r2
 8003d98:	d0f1      	beq.n	8003d7e <HAL_RCC_OscConfig+0x242>
 8003d9a:	e018      	b.n	8003dce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d9c:	4b32      	ldr	r3, [pc, #200]	; (8003e68 <HAL_RCC_OscConfig+0x32c>)
 8003d9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003da0:	4b31      	ldr	r3, [pc, #196]	; (8003e68 <HAL_RCC_OscConfig+0x32c>)
 8003da2:	2101      	movs	r1, #1
 8003da4:	438a      	bics	r2, r1
 8003da6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003da8:	f7fe f81e 	bl	8001de8 <HAL_GetTick>
 8003dac:	0003      	movs	r3, r0
 8003dae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003db0:	e008      	b.n	8003dc4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003db2:	f7fe f819 	bl	8001de8 <HAL_GetTick>
 8003db6:	0002      	movs	r2, r0
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e1c6      	b.n	8004152 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dc4:	4b28      	ldr	r3, [pc, #160]	; (8003e68 <HAL_RCC_OscConfig+0x32c>)
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc8:	2202      	movs	r2, #2
 8003dca:	4013      	ands	r3, r2
 8003dcc:	d1f1      	bne.n	8003db2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2204      	movs	r2, #4
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	d100      	bne.n	8003dda <HAL_RCC_OscConfig+0x29e>
 8003dd8:	e0b4      	b.n	8003f44 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dda:	201f      	movs	r0, #31
 8003ddc:	183b      	adds	r3, r7, r0
 8003dde:	2200      	movs	r2, #0
 8003de0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003de2:	4b21      	ldr	r3, [pc, #132]	; (8003e68 <HAL_RCC_OscConfig+0x32c>)
 8003de4:	69da      	ldr	r2, [r3, #28]
 8003de6:	2380      	movs	r3, #128	; 0x80
 8003de8:	055b      	lsls	r3, r3, #21
 8003dea:	4013      	ands	r3, r2
 8003dec:	d110      	bne.n	8003e10 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dee:	4b1e      	ldr	r3, [pc, #120]	; (8003e68 <HAL_RCC_OscConfig+0x32c>)
 8003df0:	69da      	ldr	r2, [r3, #28]
 8003df2:	4b1d      	ldr	r3, [pc, #116]	; (8003e68 <HAL_RCC_OscConfig+0x32c>)
 8003df4:	2180      	movs	r1, #128	; 0x80
 8003df6:	0549      	lsls	r1, r1, #21
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	61da      	str	r2, [r3, #28]
 8003dfc:	4b1a      	ldr	r3, [pc, #104]	; (8003e68 <HAL_RCC_OscConfig+0x32c>)
 8003dfe:	69da      	ldr	r2, [r3, #28]
 8003e00:	2380      	movs	r3, #128	; 0x80
 8003e02:	055b      	lsls	r3, r3, #21
 8003e04:	4013      	ands	r3, r2
 8003e06:	60fb      	str	r3, [r7, #12]
 8003e08:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003e0a:	183b      	adds	r3, r7, r0
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e10:	4b18      	ldr	r3, [pc, #96]	; (8003e74 <HAL_RCC_OscConfig+0x338>)
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	2380      	movs	r3, #128	; 0x80
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	4013      	ands	r3, r2
 8003e1a:	d11a      	bne.n	8003e52 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e1c:	4b15      	ldr	r3, [pc, #84]	; (8003e74 <HAL_RCC_OscConfig+0x338>)
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	4b14      	ldr	r3, [pc, #80]	; (8003e74 <HAL_RCC_OscConfig+0x338>)
 8003e22:	2180      	movs	r1, #128	; 0x80
 8003e24:	0049      	lsls	r1, r1, #1
 8003e26:	430a      	orrs	r2, r1
 8003e28:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e2a:	f7fd ffdd 	bl	8001de8 <HAL_GetTick>
 8003e2e:	0003      	movs	r3, r0
 8003e30:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e32:	e008      	b.n	8003e46 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e34:	f7fd ffd8 	bl	8001de8 <HAL_GetTick>
 8003e38:	0002      	movs	r2, r0
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b64      	cmp	r3, #100	; 0x64
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e185      	b.n	8004152 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e46:	4b0b      	ldr	r3, [pc, #44]	; (8003e74 <HAL_RCC_OscConfig+0x338>)
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	2380      	movs	r3, #128	; 0x80
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	4013      	ands	r3, r2
 8003e50:	d0f0      	beq.n	8003e34 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d10e      	bne.n	8003e78 <HAL_RCC_OscConfig+0x33c>
 8003e5a:	4b03      	ldr	r3, [pc, #12]	; (8003e68 <HAL_RCC_OscConfig+0x32c>)
 8003e5c:	6a1a      	ldr	r2, [r3, #32]
 8003e5e:	4b02      	ldr	r3, [pc, #8]	; (8003e68 <HAL_RCC_OscConfig+0x32c>)
 8003e60:	2101      	movs	r1, #1
 8003e62:	430a      	orrs	r2, r1
 8003e64:	621a      	str	r2, [r3, #32]
 8003e66:	e035      	b.n	8003ed4 <HAL_RCC_OscConfig+0x398>
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	fffeffff 	.word	0xfffeffff
 8003e70:	fffbffff 	.word	0xfffbffff
 8003e74:	40007000 	.word	0x40007000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d10c      	bne.n	8003e9a <HAL_RCC_OscConfig+0x35e>
 8003e80:	4bb6      	ldr	r3, [pc, #728]	; (800415c <HAL_RCC_OscConfig+0x620>)
 8003e82:	6a1a      	ldr	r2, [r3, #32]
 8003e84:	4bb5      	ldr	r3, [pc, #724]	; (800415c <HAL_RCC_OscConfig+0x620>)
 8003e86:	2101      	movs	r1, #1
 8003e88:	438a      	bics	r2, r1
 8003e8a:	621a      	str	r2, [r3, #32]
 8003e8c:	4bb3      	ldr	r3, [pc, #716]	; (800415c <HAL_RCC_OscConfig+0x620>)
 8003e8e:	6a1a      	ldr	r2, [r3, #32]
 8003e90:	4bb2      	ldr	r3, [pc, #712]	; (800415c <HAL_RCC_OscConfig+0x620>)
 8003e92:	2104      	movs	r1, #4
 8003e94:	438a      	bics	r2, r1
 8003e96:	621a      	str	r2, [r3, #32]
 8003e98:	e01c      	b.n	8003ed4 <HAL_RCC_OscConfig+0x398>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	2b05      	cmp	r3, #5
 8003ea0:	d10c      	bne.n	8003ebc <HAL_RCC_OscConfig+0x380>
 8003ea2:	4bae      	ldr	r3, [pc, #696]	; (800415c <HAL_RCC_OscConfig+0x620>)
 8003ea4:	6a1a      	ldr	r2, [r3, #32]
 8003ea6:	4bad      	ldr	r3, [pc, #692]	; (800415c <HAL_RCC_OscConfig+0x620>)
 8003ea8:	2104      	movs	r1, #4
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	621a      	str	r2, [r3, #32]
 8003eae:	4bab      	ldr	r3, [pc, #684]	; (800415c <HAL_RCC_OscConfig+0x620>)
 8003eb0:	6a1a      	ldr	r2, [r3, #32]
 8003eb2:	4baa      	ldr	r3, [pc, #680]	; (800415c <HAL_RCC_OscConfig+0x620>)
 8003eb4:	2101      	movs	r1, #1
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	621a      	str	r2, [r3, #32]
 8003eba:	e00b      	b.n	8003ed4 <HAL_RCC_OscConfig+0x398>
 8003ebc:	4ba7      	ldr	r3, [pc, #668]	; (800415c <HAL_RCC_OscConfig+0x620>)
 8003ebe:	6a1a      	ldr	r2, [r3, #32]
 8003ec0:	4ba6      	ldr	r3, [pc, #664]	; (800415c <HAL_RCC_OscConfig+0x620>)
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	438a      	bics	r2, r1
 8003ec6:	621a      	str	r2, [r3, #32]
 8003ec8:	4ba4      	ldr	r3, [pc, #656]	; (800415c <HAL_RCC_OscConfig+0x620>)
 8003eca:	6a1a      	ldr	r2, [r3, #32]
 8003ecc:	4ba3      	ldr	r3, [pc, #652]	; (800415c <HAL_RCC_OscConfig+0x620>)
 8003ece:	2104      	movs	r1, #4
 8003ed0:	438a      	bics	r2, r1
 8003ed2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d014      	beq.n	8003f06 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003edc:	f7fd ff84 	bl	8001de8 <HAL_GetTick>
 8003ee0:	0003      	movs	r3, r0
 8003ee2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee4:	e009      	b.n	8003efa <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ee6:	f7fd ff7f 	bl	8001de8 <HAL_GetTick>
 8003eea:	0002      	movs	r2, r0
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	4a9b      	ldr	r2, [pc, #620]	; (8004160 <HAL_RCC_OscConfig+0x624>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e12b      	b.n	8004152 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003efa:	4b98      	ldr	r3, [pc, #608]	; (800415c <HAL_RCC_OscConfig+0x620>)
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	2202      	movs	r2, #2
 8003f00:	4013      	ands	r3, r2
 8003f02:	d0f0      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x3aa>
 8003f04:	e013      	b.n	8003f2e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f06:	f7fd ff6f 	bl	8001de8 <HAL_GetTick>
 8003f0a:	0003      	movs	r3, r0
 8003f0c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f0e:	e009      	b.n	8003f24 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f10:	f7fd ff6a 	bl	8001de8 <HAL_GetTick>
 8003f14:	0002      	movs	r2, r0
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	4a91      	ldr	r2, [pc, #580]	; (8004160 <HAL_RCC_OscConfig+0x624>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e116      	b.n	8004152 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f24:	4b8d      	ldr	r3, [pc, #564]	; (800415c <HAL_RCC_OscConfig+0x620>)
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	2202      	movs	r2, #2
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	d1f0      	bne.n	8003f10 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f2e:	231f      	movs	r3, #31
 8003f30:	18fb      	adds	r3, r7, r3
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d105      	bne.n	8003f44 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f38:	4b88      	ldr	r3, [pc, #544]	; (800415c <HAL_RCC_OscConfig+0x620>)
 8003f3a:	69da      	ldr	r2, [r3, #28]
 8003f3c:	4b87      	ldr	r3, [pc, #540]	; (800415c <HAL_RCC_OscConfig+0x620>)
 8003f3e:	4989      	ldr	r1, [pc, #548]	; (8004164 <HAL_RCC_OscConfig+0x628>)
 8003f40:	400a      	ands	r2, r1
 8003f42:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2210      	movs	r2, #16
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	d063      	beq.n	8004016 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d12a      	bne.n	8003fac <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003f56:	4b81      	ldr	r3, [pc, #516]	; (800415c <HAL_RCC_OscConfig+0x620>)
 8003f58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f5a:	4b80      	ldr	r3, [pc, #512]	; (800415c <HAL_RCC_OscConfig+0x620>)
 8003f5c:	2104      	movs	r1, #4
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003f62:	4b7e      	ldr	r3, [pc, #504]	; (800415c <HAL_RCC_OscConfig+0x620>)
 8003f64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f66:	4b7d      	ldr	r3, [pc, #500]	; (800415c <HAL_RCC_OscConfig+0x620>)
 8003f68:	2101      	movs	r1, #1
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f6e:	f7fd ff3b 	bl	8001de8 <HAL_GetTick>
 8003f72:	0003      	movs	r3, r0
 8003f74:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003f76:	e008      	b.n	8003f8a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003f78:	f7fd ff36 	bl	8001de8 <HAL_GetTick>
 8003f7c:	0002      	movs	r2, r0
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e0e3      	b.n	8004152 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003f8a:	4b74      	ldr	r3, [pc, #464]	; (800415c <HAL_RCC_OscConfig+0x620>)
 8003f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f8e:	2202      	movs	r2, #2
 8003f90:	4013      	ands	r3, r2
 8003f92:	d0f1      	beq.n	8003f78 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003f94:	4b71      	ldr	r3, [pc, #452]	; (800415c <HAL_RCC_OscConfig+0x620>)
 8003f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f98:	22f8      	movs	r2, #248	; 0xf8
 8003f9a:	4393      	bics	r3, r2
 8003f9c:	0019      	movs	r1, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	00da      	lsls	r2, r3, #3
 8003fa4:	4b6d      	ldr	r3, [pc, #436]	; (800415c <HAL_RCC_OscConfig+0x620>)
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	635a      	str	r2, [r3, #52]	; 0x34
 8003faa:	e034      	b.n	8004016 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	695b      	ldr	r3, [r3, #20]
 8003fb0:	3305      	adds	r3, #5
 8003fb2:	d111      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003fb4:	4b69      	ldr	r3, [pc, #420]	; (800415c <HAL_RCC_OscConfig+0x620>)
 8003fb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fb8:	4b68      	ldr	r3, [pc, #416]	; (800415c <HAL_RCC_OscConfig+0x620>)
 8003fba:	2104      	movs	r1, #4
 8003fbc:	438a      	bics	r2, r1
 8003fbe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003fc0:	4b66      	ldr	r3, [pc, #408]	; (800415c <HAL_RCC_OscConfig+0x620>)
 8003fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fc4:	22f8      	movs	r2, #248	; 0xf8
 8003fc6:	4393      	bics	r3, r2
 8003fc8:	0019      	movs	r1, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	00da      	lsls	r2, r3, #3
 8003fd0:	4b62      	ldr	r3, [pc, #392]	; (800415c <HAL_RCC_OscConfig+0x620>)
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	635a      	str	r2, [r3, #52]	; 0x34
 8003fd6:	e01e      	b.n	8004016 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003fd8:	4b60      	ldr	r3, [pc, #384]	; (800415c <HAL_RCC_OscConfig+0x620>)
 8003fda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fdc:	4b5f      	ldr	r3, [pc, #380]	; (800415c <HAL_RCC_OscConfig+0x620>)
 8003fde:	2104      	movs	r1, #4
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003fe4:	4b5d      	ldr	r3, [pc, #372]	; (800415c <HAL_RCC_OscConfig+0x620>)
 8003fe6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fe8:	4b5c      	ldr	r3, [pc, #368]	; (800415c <HAL_RCC_OscConfig+0x620>)
 8003fea:	2101      	movs	r1, #1
 8003fec:	438a      	bics	r2, r1
 8003fee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ff0:	f7fd fefa 	bl	8001de8 <HAL_GetTick>
 8003ff4:	0003      	movs	r3, r0
 8003ff6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003ff8:	e008      	b.n	800400c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003ffa:	f7fd fef5 	bl	8001de8 <HAL_GetTick>
 8003ffe:	0002      	movs	r2, r0
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	2b02      	cmp	r3, #2
 8004006:	d901      	bls.n	800400c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e0a2      	b.n	8004152 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800400c:	4b53      	ldr	r3, [pc, #332]	; (800415c <HAL_RCC_OscConfig+0x620>)
 800400e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004010:	2202      	movs	r2, #2
 8004012:	4013      	ands	r3, r2
 8004014:	d1f1      	bne.n	8003ffa <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d100      	bne.n	8004020 <HAL_RCC_OscConfig+0x4e4>
 800401e:	e097      	b.n	8004150 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004020:	4b4e      	ldr	r3, [pc, #312]	; (800415c <HAL_RCC_OscConfig+0x620>)
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	220c      	movs	r2, #12
 8004026:	4013      	ands	r3, r2
 8004028:	2b08      	cmp	r3, #8
 800402a:	d100      	bne.n	800402e <HAL_RCC_OscConfig+0x4f2>
 800402c:	e06b      	b.n	8004106 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	2b02      	cmp	r3, #2
 8004034:	d14c      	bne.n	80040d0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004036:	4b49      	ldr	r3, [pc, #292]	; (800415c <HAL_RCC_OscConfig+0x620>)
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	4b48      	ldr	r3, [pc, #288]	; (800415c <HAL_RCC_OscConfig+0x620>)
 800403c:	494a      	ldr	r1, [pc, #296]	; (8004168 <HAL_RCC_OscConfig+0x62c>)
 800403e:	400a      	ands	r2, r1
 8004040:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004042:	f7fd fed1 	bl	8001de8 <HAL_GetTick>
 8004046:	0003      	movs	r3, r0
 8004048:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800404a:	e008      	b.n	800405e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800404c:	f7fd fecc 	bl	8001de8 <HAL_GetTick>
 8004050:	0002      	movs	r2, r0
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b02      	cmp	r3, #2
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e079      	b.n	8004152 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800405e:	4b3f      	ldr	r3, [pc, #252]	; (800415c <HAL_RCC_OscConfig+0x620>)
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	2380      	movs	r3, #128	; 0x80
 8004064:	049b      	lsls	r3, r3, #18
 8004066:	4013      	ands	r3, r2
 8004068:	d1f0      	bne.n	800404c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800406a:	4b3c      	ldr	r3, [pc, #240]	; (800415c <HAL_RCC_OscConfig+0x620>)
 800406c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406e:	220f      	movs	r2, #15
 8004070:	4393      	bics	r3, r2
 8004072:	0019      	movs	r1, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004078:	4b38      	ldr	r3, [pc, #224]	; (800415c <HAL_RCC_OscConfig+0x620>)
 800407a:	430a      	orrs	r2, r1
 800407c:	62da      	str	r2, [r3, #44]	; 0x2c
 800407e:	4b37      	ldr	r3, [pc, #220]	; (800415c <HAL_RCC_OscConfig+0x620>)
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	4a3a      	ldr	r2, [pc, #232]	; (800416c <HAL_RCC_OscConfig+0x630>)
 8004084:	4013      	ands	r3, r2
 8004086:	0019      	movs	r1, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004090:	431a      	orrs	r2, r3
 8004092:	4b32      	ldr	r3, [pc, #200]	; (800415c <HAL_RCC_OscConfig+0x620>)
 8004094:	430a      	orrs	r2, r1
 8004096:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004098:	4b30      	ldr	r3, [pc, #192]	; (800415c <HAL_RCC_OscConfig+0x620>)
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	4b2f      	ldr	r3, [pc, #188]	; (800415c <HAL_RCC_OscConfig+0x620>)
 800409e:	2180      	movs	r1, #128	; 0x80
 80040a0:	0449      	lsls	r1, r1, #17
 80040a2:	430a      	orrs	r2, r1
 80040a4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a6:	f7fd fe9f 	bl	8001de8 <HAL_GetTick>
 80040aa:	0003      	movs	r3, r0
 80040ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040ae:	e008      	b.n	80040c2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040b0:	f7fd fe9a 	bl	8001de8 <HAL_GetTick>
 80040b4:	0002      	movs	r2, r0
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e047      	b.n	8004152 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040c2:	4b26      	ldr	r3, [pc, #152]	; (800415c <HAL_RCC_OscConfig+0x620>)
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	2380      	movs	r3, #128	; 0x80
 80040c8:	049b      	lsls	r3, r3, #18
 80040ca:	4013      	ands	r3, r2
 80040cc:	d0f0      	beq.n	80040b0 <HAL_RCC_OscConfig+0x574>
 80040ce:	e03f      	b.n	8004150 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040d0:	4b22      	ldr	r3, [pc, #136]	; (800415c <HAL_RCC_OscConfig+0x620>)
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	4b21      	ldr	r3, [pc, #132]	; (800415c <HAL_RCC_OscConfig+0x620>)
 80040d6:	4924      	ldr	r1, [pc, #144]	; (8004168 <HAL_RCC_OscConfig+0x62c>)
 80040d8:	400a      	ands	r2, r1
 80040da:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040dc:	f7fd fe84 	bl	8001de8 <HAL_GetTick>
 80040e0:	0003      	movs	r3, r0
 80040e2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040e4:	e008      	b.n	80040f8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040e6:	f7fd fe7f 	bl	8001de8 <HAL_GetTick>
 80040ea:	0002      	movs	r2, r0
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d901      	bls.n	80040f8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e02c      	b.n	8004152 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040f8:	4b18      	ldr	r3, [pc, #96]	; (800415c <HAL_RCC_OscConfig+0x620>)
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	2380      	movs	r3, #128	; 0x80
 80040fe:	049b      	lsls	r3, r3, #18
 8004100:	4013      	ands	r3, r2
 8004102:	d1f0      	bne.n	80040e6 <HAL_RCC_OscConfig+0x5aa>
 8004104:	e024      	b.n	8004150 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d101      	bne.n	8004112 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e01f      	b.n	8004152 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004112:	4b12      	ldr	r3, [pc, #72]	; (800415c <HAL_RCC_OscConfig+0x620>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004118:	4b10      	ldr	r3, [pc, #64]	; (800415c <HAL_RCC_OscConfig+0x620>)
 800411a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	2380      	movs	r3, #128	; 0x80
 8004122:	025b      	lsls	r3, r3, #9
 8004124:	401a      	ands	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412a:	429a      	cmp	r2, r3
 800412c:	d10e      	bne.n	800414c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	220f      	movs	r2, #15
 8004132:	401a      	ands	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004138:	429a      	cmp	r2, r3
 800413a:	d107      	bne.n	800414c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	23f0      	movs	r3, #240	; 0xf0
 8004140:	039b      	lsls	r3, r3, #14
 8004142:	401a      	ands	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004148:	429a      	cmp	r2, r3
 800414a:	d001      	beq.n	8004150 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e000      	b.n	8004152 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	0018      	movs	r0, r3
 8004154:	46bd      	mov	sp, r7
 8004156:	b008      	add	sp, #32
 8004158:	bd80      	pop	{r7, pc}
 800415a:	46c0      	nop			; (mov r8, r8)
 800415c:	40021000 	.word	0x40021000
 8004160:	00001388 	.word	0x00001388
 8004164:	efffffff 	.word	0xefffffff
 8004168:	feffffff 	.word	0xfeffffff
 800416c:	ffc2ffff 	.word	0xffc2ffff

08004170 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d101      	bne.n	8004184 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e0b3      	b.n	80042ec <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004184:	4b5b      	ldr	r3, [pc, #364]	; (80042f4 <HAL_RCC_ClockConfig+0x184>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2201      	movs	r2, #1
 800418a:	4013      	ands	r3, r2
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	429a      	cmp	r2, r3
 8004190:	d911      	bls.n	80041b6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004192:	4b58      	ldr	r3, [pc, #352]	; (80042f4 <HAL_RCC_ClockConfig+0x184>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2201      	movs	r2, #1
 8004198:	4393      	bics	r3, r2
 800419a:	0019      	movs	r1, r3
 800419c:	4b55      	ldr	r3, [pc, #340]	; (80042f4 <HAL_RCC_ClockConfig+0x184>)
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	430a      	orrs	r2, r1
 80041a2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041a4:	4b53      	ldr	r3, [pc, #332]	; (80042f4 <HAL_RCC_ClockConfig+0x184>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2201      	movs	r2, #1
 80041aa:	4013      	ands	r3, r2
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d001      	beq.n	80041b6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e09a      	b.n	80042ec <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2202      	movs	r2, #2
 80041bc:	4013      	ands	r3, r2
 80041be:	d015      	beq.n	80041ec <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2204      	movs	r2, #4
 80041c6:	4013      	ands	r3, r2
 80041c8:	d006      	beq.n	80041d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80041ca:	4b4b      	ldr	r3, [pc, #300]	; (80042f8 <HAL_RCC_ClockConfig+0x188>)
 80041cc:	685a      	ldr	r2, [r3, #4]
 80041ce:	4b4a      	ldr	r3, [pc, #296]	; (80042f8 <HAL_RCC_ClockConfig+0x188>)
 80041d0:	21e0      	movs	r1, #224	; 0xe0
 80041d2:	00c9      	lsls	r1, r1, #3
 80041d4:	430a      	orrs	r2, r1
 80041d6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041d8:	4b47      	ldr	r3, [pc, #284]	; (80042f8 <HAL_RCC_ClockConfig+0x188>)
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	22f0      	movs	r2, #240	; 0xf0
 80041de:	4393      	bics	r3, r2
 80041e0:	0019      	movs	r1, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	689a      	ldr	r2, [r3, #8]
 80041e6:	4b44      	ldr	r3, [pc, #272]	; (80042f8 <HAL_RCC_ClockConfig+0x188>)
 80041e8:	430a      	orrs	r2, r1
 80041ea:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2201      	movs	r2, #1
 80041f2:	4013      	ands	r3, r2
 80041f4:	d040      	beq.n	8004278 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d107      	bne.n	800420e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041fe:	4b3e      	ldr	r3, [pc, #248]	; (80042f8 <HAL_RCC_ClockConfig+0x188>)
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	2380      	movs	r3, #128	; 0x80
 8004204:	029b      	lsls	r3, r3, #10
 8004206:	4013      	ands	r3, r2
 8004208:	d114      	bne.n	8004234 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e06e      	b.n	80042ec <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	2b02      	cmp	r3, #2
 8004214:	d107      	bne.n	8004226 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004216:	4b38      	ldr	r3, [pc, #224]	; (80042f8 <HAL_RCC_ClockConfig+0x188>)
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	2380      	movs	r3, #128	; 0x80
 800421c:	049b      	lsls	r3, r3, #18
 800421e:	4013      	ands	r3, r2
 8004220:	d108      	bne.n	8004234 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e062      	b.n	80042ec <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004226:	4b34      	ldr	r3, [pc, #208]	; (80042f8 <HAL_RCC_ClockConfig+0x188>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2202      	movs	r2, #2
 800422c:	4013      	ands	r3, r2
 800422e:	d101      	bne.n	8004234 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e05b      	b.n	80042ec <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004234:	4b30      	ldr	r3, [pc, #192]	; (80042f8 <HAL_RCC_ClockConfig+0x188>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	2203      	movs	r2, #3
 800423a:	4393      	bics	r3, r2
 800423c:	0019      	movs	r1, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685a      	ldr	r2, [r3, #4]
 8004242:	4b2d      	ldr	r3, [pc, #180]	; (80042f8 <HAL_RCC_ClockConfig+0x188>)
 8004244:	430a      	orrs	r2, r1
 8004246:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004248:	f7fd fdce 	bl	8001de8 <HAL_GetTick>
 800424c:	0003      	movs	r3, r0
 800424e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004250:	e009      	b.n	8004266 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004252:	f7fd fdc9 	bl	8001de8 <HAL_GetTick>
 8004256:	0002      	movs	r2, r0
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	4a27      	ldr	r2, [pc, #156]	; (80042fc <HAL_RCC_ClockConfig+0x18c>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d901      	bls.n	8004266 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e042      	b.n	80042ec <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004266:	4b24      	ldr	r3, [pc, #144]	; (80042f8 <HAL_RCC_ClockConfig+0x188>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	220c      	movs	r2, #12
 800426c:	401a      	ands	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	429a      	cmp	r2, r3
 8004276:	d1ec      	bne.n	8004252 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004278:	4b1e      	ldr	r3, [pc, #120]	; (80042f4 <HAL_RCC_ClockConfig+0x184>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2201      	movs	r2, #1
 800427e:	4013      	ands	r3, r2
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	429a      	cmp	r2, r3
 8004284:	d211      	bcs.n	80042aa <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004286:	4b1b      	ldr	r3, [pc, #108]	; (80042f4 <HAL_RCC_ClockConfig+0x184>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2201      	movs	r2, #1
 800428c:	4393      	bics	r3, r2
 800428e:	0019      	movs	r1, r3
 8004290:	4b18      	ldr	r3, [pc, #96]	; (80042f4 <HAL_RCC_ClockConfig+0x184>)
 8004292:	683a      	ldr	r2, [r7, #0]
 8004294:	430a      	orrs	r2, r1
 8004296:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004298:	4b16      	ldr	r3, [pc, #88]	; (80042f4 <HAL_RCC_ClockConfig+0x184>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2201      	movs	r2, #1
 800429e:	4013      	ands	r3, r2
 80042a0:	683a      	ldr	r2, [r7, #0]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d001      	beq.n	80042aa <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e020      	b.n	80042ec <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2204      	movs	r2, #4
 80042b0:	4013      	ands	r3, r2
 80042b2:	d009      	beq.n	80042c8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80042b4:	4b10      	ldr	r3, [pc, #64]	; (80042f8 <HAL_RCC_ClockConfig+0x188>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	4a11      	ldr	r2, [pc, #68]	; (8004300 <HAL_RCC_ClockConfig+0x190>)
 80042ba:	4013      	ands	r3, r2
 80042bc:	0019      	movs	r1, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68da      	ldr	r2, [r3, #12]
 80042c2:	4b0d      	ldr	r3, [pc, #52]	; (80042f8 <HAL_RCC_ClockConfig+0x188>)
 80042c4:	430a      	orrs	r2, r1
 80042c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80042c8:	f000 f820 	bl	800430c <HAL_RCC_GetSysClockFreq>
 80042cc:	0001      	movs	r1, r0
 80042ce:	4b0a      	ldr	r3, [pc, #40]	; (80042f8 <HAL_RCC_ClockConfig+0x188>)
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	091b      	lsrs	r3, r3, #4
 80042d4:	220f      	movs	r2, #15
 80042d6:	4013      	ands	r3, r2
 80042d8:	4a0a      	ldr	r2, [pc, #40]	; (8004304 <HAL_RCC_ClockConfig+0x194>)
 80042da:	5cd3      	ldrb	r3, [r2, r3]
 80042dc:	000a      	movs	r2, r1
 80042de:	40da      	lsrs	r2, r3
 80042e0:	4b09      	ldr	r3, [pc, #36]	; (8004308 <HAL_RCC_ClockConfig+0x198>)
 80042e2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80042e4:	2003      	movs	r0, #3
 80042e6:	f7fd fd39 	bl	8001d5c <HAL_InitTick>
  
  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	0018      	movs	r0, r3
 80042ee:	46bd      	mov	sp, r7
 80042f0:	b004      	add	sp, #16
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	40022000 	.word	0x40022000
 80042f8:	40021000 	.word	0x40021000
 80042fc:	00001388 	.word	0x00001388
 8004300:	fffff8ff 	.word	0xfffff8ff
 8004304:	080076a8 	.word	0x080076a8
 8004308:	2000001c 	.word	0x2000001c

0800430c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800430c:	b590      	push	{r4, r7, lr}
 800430e:	b08f      	sub	sp, #60	; 0x3c
 8004310:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004312:	2314      	movs	r3, #20
 8004314:	18fb      	adds	r3, r7, r3
 8004316:	4a2b      	ldr	r2, [pc, #172]	; (80043c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004318:	ca13      	ldmia	r2!, {r0, r1, r4}
 800431a:	c313      	stmia	r3!, {r0, r1, r4}
 800431c:	6812      	ldr	r2, [r2, #0]
 800431e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004320:	1d3b      	adds	r3, r7, #4
 8004322:	4a29      	ldr	r2, [pc, #164]	; (80043c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004324:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004326:	c313      	stmia	r3!, {r0, r1, r4}
 8004328:	6812      	ldr	r2, [r2, #0]
 800432a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800432c:	2300      	movs	r3, #0
 800432e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004330:	2300      	movs	r3, #0
 8004332:	62bb      	str	r3, [r7, #40]	; 0x28
 8004334:	2300      	movs	r3, #0
 8004336:	637b      	str	r3, [r7, #52]	; 0x34
 8004338:	2300      	movs	r3, #0
 800433a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800433c:	2300      	movs	r3, #0
 800433e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004340:	4b22      	ldr	r3, [pc, #136]	; (80043cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004348:	220c      	movs	r2, #12
 800434a:	4013      	ands	r3, r2
 800434c:	2b04      	cmp	r3, #4
 800434e:	d002      	beq.n	8004356 <HAL_RCC_GetSysClockFreq+0x4a>
 8004350:	2b08      	cmp	r3, #8
 8004352:	d003      	beq.n	800435c <HAL_RCC_GetSysClockFreq+0x50>
 8004354:	e02d      	b.n	80043b2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004356:	4b1e      	ldr	r3, [pc, #120]	; (80043d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004358:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800435a:	e02d      	b.n	80043b8 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800435c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800435e:	0c9b      	lsrs	r3, r3, #18
 8004360:	220f      	movs	r2, #15
 8004362:	4013      	ands	r3, r2
 8004364:	2214      	movs	r2, #20
 8004366:	18ba      	adds	r2, r7, r2
 8004368:	5cd3      	ldrb	r3, [r2, r3]
 800436a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800436c:	4b17      	ldr	r3, [pc, #92]	; (80043cc <HAL_RCC_GetSysClockFreq+0xc0>)
 800436e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004370:	220f      	movs	r2, #15
 8004372:	4013      	ands	r3, r2
 8004374:	1d3a      	adds	r2, r7, #4
 8004376:	5cd3      	ldrb	r3, [r2, r3]
 8004378:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800437a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800437c:	2380      	movs	r3, #128	; 0x80
 800437e:	025b      	lsls	r3, r3, #9
 8004380:	4013      	ands	r3, r2
 8004382:	d009      	beq.n	8004398 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004384:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004386:	4812      	ldr	r0, [pc, #72]	; (80043d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004388:	f7fb febe 	bl	8000108 <__udivsi3>
 800438c:	0003      	movs	r3, r0
 800438e:	001a      	movs	r2, r3
 8004390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004392:	4353      	muls	r3, r2
 8004394:	637b      	str	r3, [r7, #52]	; 0x34
 8004396:	e009      	b.n	80043ac <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004398:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800439a:	000a      	movs	r2, r1
 800439c:	0152      	lsls	r2, r2, #5
 800439e:	1a52      	subs	r2, r2, r1
 80043a0:	0193      	lsls	r3, r2, #6
 80043a2:	1a9b      	subs	r3, r3, r2
 80043a4:	00db      	lsls	r3, r3, #3
 80043a6:	185b      	adds	r3, r3, r1
 80043a8:	021b      	lsls	r3, r3, #8
 80043aa:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80043ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80043b0:	e002      	b.n	80043b8 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80043b2:	4b07      	ldr	r3, [pc, #28]	; (80043d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80043b4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80043b6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80043b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80043ba:	0018      	movs	r0, r3
 80043bc:	46bd      	mov	sp, r7
 80043be:	b00f      	add	sp, #60	; 0x3c
 80043c0:	bd90      	pop	{r4, r7, pc}
 80043c2:	46c0      	nop			; (mov r8, r8)
 80043c4:	08007538 	.word	0x08007538
 80043c8:	08007548 	.word	0x08007548
 80043cc:	40021000 	.word	0x40021000
 80043d0:	007a1200 	.word	0x007a1200

080043d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043d8:	4b02      	ldr	r3, [pc, #8]	; (80043e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80043da:	681b      	ldr	r3, [r3, #0]
}
 80043dc:	0018      	movs	r0, r3
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	46c0      	nop			; (mov r8, r8)
 80043e4:	2000001c 	.word	0x2000001c

080043e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80043ec:	f7ff fff2 	bl	80043d4 <HAL_RCC_GetHCLKFreq>
 80043f0:	0001      	movs	r1, r0
 80043f2:	4b06      	ldr	r3, [pc, #24]	; (800440c <HAL_RCC_GetPCLK1Freq+0x24>)
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	0a1b      	lsrs	r3, r3, #8
 80043f8:	2207      	movs	r2, #7
 80043fa:	4013      	ands	r3, r2
 80043fc:	4a04      	ldr	r2, [pc, #16]	; (8004410 <HAL_RCC_GetPCLK1Freq+0x28>)
 80043fe:	5cd3      	ldrb	r3, [r2, r3]
 8004400:	40d9      	lsrs	r1, r3
 8004402:	000b      	movs	r3, r1
}    
 8004404:	0018      	movs	r0, r3
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	46c0      	nop			; (mov r8, r8)
 800440c:	40021000 	.word	0x40021000
 8004410:	080076b8 	.word	0x080076b8

08004414 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b086      	sub	sp, #24
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800441c:	2300      	movs	r3, #0
 800441e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004420:	2300      	movs	r3, #0
 8004422:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	2380      	movs	r3, #128	; 0x80
 800442a:	025b      	lsls	r3, r3, #9
 800442c:	4013      	ands	r3, r2
 800442e:	d100      	bne.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004430:	e08e      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004432:	2017      	movs	r0, #23
 8004434:	183b      	adds	r3, r7, r0
 8004436:	2200      	movs	r2, #0
 8004438:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800443a:	4b5f      	ldr	r3, [pc, #380]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800443c:	69da      	ldr	r2, [r3, #28]
 800443e:	2380      	movs	r3, #128	; 0x80
 8004440:	055b      	lsls	r3, r3, #21
 8004442:	4013      	ands	r3, r2
 8004444:	d110      	bne.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004446:	4b5c      	ldr	r3, [pc, #368]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004448:	69da      	ldr	r2, [r3, #28]
 800444a:	4b5b      	ldr	r3, [pc, #364]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800444c:	2180      	movs	r1, #128	; 0x80
 800444e:	0549      	lsls	r1, r1, #21
 8004450:	430a      	orrs	r2, r1
 8004452:	61da      	str	r2, [r3, #28]
 8004454:	4b58      	ldr	r3, [pc, #352]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004456:	69da      	ldr	r2, [r3, #28]
 8004458:	2380      	movs	r3, #128	; 0x80
 800445a:	055b      	lsls	r3, r3, #21
 800445c:	4013      	ands	r3, r2
 800445e:	60bb      	str	r3, [r7, #8]
 8004460:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004462:	183b      	adds	r3, r7, r0
 8004464:	2201      	movs	r2, #1
 8004466:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004468:	4b54      	ldr	r3, [pc, #336]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	2380      	movs	r3, #128	; 0x80
 800446e:	005b      	lsls	r3, r3, #1
 8004470:	4013      	ands	r3, r2
 8004472:	d11a      	bne.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004474:	4b51      	ldr	r3, [pc, #324]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	4b50      	ldr	r3, [pc, #320]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800447a:	2180      	movs	r1, #128	; 0x80
 800447c:	0049      	lsls	r1, r1, #1
 800447e:	430a      	orrs	r2, r1
 8004480:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004482:	f7fd fcb1 	bl	8001de8 <HAL_GetTick>
 8004486:	0003      	movs	r3, r0
 8004488:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800448a:	e008      	b.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800448c:	f7fd fcac 	bl	8001de8 <HAL_GetTick>
 8004490:	0002      	movs	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b64      	cmp	r3, #100	; 0x64
 8004498:	d901      	bls.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e087      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800449e:	4b47      	ldr	r3, [pc, #284]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	2380      	movs	r3, #128	; 0x80
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	4013      	ands	r3, r2
 80044a8:	d0f0      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044aa:	4b43      	ldr	r3, [pc, #268]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80044ac:	6a1a      	ldr	r2, [r3, #32]
 80044ae:	23c0      	movs	r3, #192	; 0xc0
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	4013      	ands	r3, r2
 80044b4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d034      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685a      	ldr	r2, [r3, #4]
 80044c0:	23c0      	movs	r3, #192	; 0xc0
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	4013      	ands	r3, r2
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d02c      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044cc:	4b3a      	ldr	r3, [pc, #232]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80044ce:	6a1b      	ldr	r3, [r3, #32]
 80044d0:	4a3b      	ldr	r2, [pc, #236]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044d2:	4013      	ands	r3, r2
 80044d4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044d6:	4b38      	ldr	r3, [pc, #224]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80044d8:	6a1a      	ldr	r2, [r3, #32]
 80044da:	4b37      	ldr	r3, [pc, #220]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80044dc:	2180      	movs	r1, #128	; 0x80
 80044de:	0249      	lsls	r1, r1, #9
 80044e0:	430a      	orrs	r2, r1
 80044e2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044e4:	4b34      	ldr	r3, [pc, #208]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80044e6:	6a1a      	ldr	r2, [r3, #32]
 80044e8:	4b33      	ldr	r3, [pc, #204]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80044ea:	4936      	ldr	r1, [pc, #216]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80044ec:	400a      	ands	r2, r1
 80044ee:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80044f0:	4b31      	ldr	r3, [pc, #196]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2201      	movs	r2, #1
 80044fa:	4013      	ands	r3, r2
 80044fc:	d013      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044fe:	f7fd fc73 	bl	8001de8 <HAL_GetTick>
 8004502:	0003      	movs	r3, r0
 8004504:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004506:	e009      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004508:	f7fd fc6e 	bl	8001de8 <HAL_GetTick>
 800450c:	0002      	movs	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	4a2d      	ldr	r2, [pc, #180]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d901      	bls.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e048      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800451c:	4b26      	ldr	r3, [pc, #152]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800451e:	6a1b      	ldr	r3, [r3, #32]
 8004520:	2202      	movs	r2, #2
 8004522:	4013      	ands	r3, r2
 8004524:	d0f0      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004526:	4b24      	ldr	r3, [pc, #144]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	4a25      	ldr	r2, [pc, #148]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800452c:	4013      	ands	r3, r2
 800452e:	0019      	movs	r1, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	4b20      	ldr	r3, [pc, #128]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004536:	430a      	orrs	r2, r1
 8004538:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800453a:	2317      	movs	r3, #23
 800453c:	18fb      	adds	r3, r7, r3
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d105      	bne.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004544:	4b1c      	ldr	r3, [pc, #112]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004546:	69da      	ldr	r2, [r3, #28]
 8004548:	4b1b      	ldr	r3, [pc, #108]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800454a:	4920      	ldr	r1, [pc, #128]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800454c:	400a      	ands	r2, r1
 800454e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2201      	movs	r2, #1
 8004556:	4013      	ands	r3, r2
 8004558:	d009      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800455a:	4b17      	ldr	r3, [pc, #92]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800455c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455e:	2203      	movs	r2, #3
 8004560:	4393      	bics	r3, r2
 8004562:	0019      	movs	r1, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689a      	ldr	r2, [r3, #8]
 8004568:	4b13      	ldr	r3, [pc, #76]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800456a:	430a      	orrs	r2, r1
 800456c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2220      	movs	r2, #32
 8004574:	4013      	ands	r3, r2
 8004576:	d009      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004578:	4b0f      	ldr	r3, [pc, #60]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800457a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457c:	2210      	movs	r2, #16
 800457e:	4393      	bics	r3, r2
 8004580:	0019      	movs	r1, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	68da      	ldr	r2, [r3, #12]
 8004586:	4b0c      	ldr	r3, [pc, #48]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004588:	430a      	orrs	r2, r1
 800458a:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	2380      	movs	r3, #128	; 0x80
 8004592:	00db      	lsls	r3, r3, #3
 8004594:	4013      	ands	r3, r2
 8004596:	d009      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004598:	4b07      	ldr	r3, [pc, #28]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800459a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459c:	2240      	movs	r2, #64	; 0x40
 800459e:	4393      	bics	r3, r2
 80045a0:	0019      	movs	r1, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	691a      	ldr	r2, [r3, #16]
 80045a6:	4b04      	ldr	r3, [pc, #16]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80045a8:	430a      	orrs	r2, r1
 80045aa:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	0018      	movs	r0, r3
 80045b0:	46bd      	mov	sp, r7
 80045b2:	b006      	add	sp, #24
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	46c0      	nop			; (mov r8, r8)
 80045b8:	40021000 	.word	0x40021000
 80045bc:	40007000 	.word	0x40007000
 80045c0:	fffffcff 	.word	0xfffffcff
 80045c4:	fffeffff 	.word	0xfffeffff
 80045c8:	00001388 	.word	0x00001388
 80045cc:	efffffff 	.word	0xefffffff

080045d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e0a8      	b.n	8004734 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d109      	bne.n	80045fe <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685a      	ldr	r2, [r3, #4]
 80045ee:	2382      	movs	r3, #130	; 0x82
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d009      	beq.n	800460a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	61da      	str	r2, [r3, #28]
 80045fc:	e005      	b.n	800460a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	225d      	movs	r2, #93	; 0x5d
 8004614:	5c9b      	ldrb	r3, [r3, r2]
 8004616:	b2db      	uxtb	r3, r3
 8004618:	2b00      	cmp	r3, #0
 800461a:	d107      	bne.n	800462c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	225c      	movs	r2, #92	; 0x5c
 8004620:	2100      	movs	r1, #0
 8004622:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	0018      	movs	r0, r3
 8004628:	f7fd f96a 	bl	8001900 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	225d      	movs	r2, #93	; 0x5d
 8004630:	2102      	movs	r1, #2
 8004632:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2140      	movs	r1, #64	; 0x40
 8004640:	438a      	bics	r2, r1
 8004642:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68da      	ldr	r2, [r3, #12]
 8004648:	23e0      	movs	r3, #224	; 0xe0
 800464a:	00db      	lsls	r3, r3, #3
 800464c:	429a      	cmp	r2, r3
 800464e:	d902      	bls.n	8004656 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004650:	2300      	movs	r3, #0
 8004652:	60fb      	str	r3, [r7, #12]
 8004654:	e002      	b.n	800465c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004656:	2380      	movs	r3, #128	; 0x80
 8004658:	015b      	lsls	r3, r3, #5
 800465a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	68da      	ldr	r2, [r3, #12]
 8004660:	23f0      	movs	r3, #240	; 0xf0
 8004662:	011b      	lsls	r3, r3, #4
 8004664:	429a      	cmp	r2, r3
 8004666:	d008      	beq.n	800467a <HAL_SPI_Init+0xaa>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68da      	ldr	r2, [r3, #12]
 800466c:	23e0      	movs	r3, #224	; 0xe0
 800466e:	00db      	lsls	r3, r3, #3
 8004670:	429a      	cmp	r2, r3
 8004672:	d002      	beq.n	800467a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685a      	ldr	r2, [r3, #4]
 800467e:	2382      	movs	r3, #130	; 0x82
 8004680:	005b      	lsls	r3, r3, #1
 8004682:	401a      	ands	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6899      	ldr	r1, [r3, #8]
 8004688:	2384      	movs	r3, #132	; 0x84
 800468a:	021b      	lsls	r3, r3, #8
 800468c:	400b      	ands	r3, r1
 800468e:	431a      	orrs	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	2102      	movs	r1, #2
 8004696:	400b      	ands	r3, r1
 8004698:	431a      	orrs	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	2101      	movs	r1, #1
 80046a0:	400b      	ands	r3, r1
 80046a2:	431a      	orrs	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6999      	ldr	r1, [r3, #24]
 80046a8:	2380      	movs	r3, #128	; 0x80
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	400b      	ands	r3, r1
 80046ae:	431a      	orrs	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	69db      	ldr	r3, [r3, #28]
 80046b4:	2138      	movs	r1, #56	; 0x38
 80046b6:	400b      	ands	r3, r1
 80046b8:	431a      	orrs	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	2180      	movs	r1, #128	; 0x80
 80046c0:	400b      	ands	r3, r1
 80046c2:	431a      	orrs	r2, r3
 80046c4:	0011      	movs	r1, r2
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046ca:	2380      	movs	r3, #128	; 0x80
 80046cc:	019b      	lsls	r3, r3, #6
 80046ce:	401a      	ands	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	430a      	orrs	r2, r1
 80046d6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	0c1b      	lsrs	r3, r3, #16
 80046de:	2204      	movs	r2, #4
 80046e0:	401a      	ands	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e6:	2110      	movs	r1, #16
 80046e8:	400b      	ands	r3, r1
 80046ea:	431a      	orrs	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f0:	2108      	movs	r1, #8
 80046f2:	400b      	ands	r3, r1
 80046f4:	431a      	orrs	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68d9      	ldr	r1, [r3, #12]
 80046fa:	23f0      	movs	r3, #240	; 0xf0
 80046fc:	011b      	lsls	r3, r3, #4
 80046fe:	400b      	ands	r3, r1
 8004700:	431a      	orrs	r2, r3
 8004702:	0011      	movs	r1, r2
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	2380      	movs	r3, #128	; 0x80
 8004708:	015b      	lsls	r3, r3, #5
 800470a:	401a      	ands	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	430a      	orrs	r2, r1
 8004712:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	69da      	ldr	r2, [r3, #28]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4907      	ldr	r1, [pc, #28]	; (800473c <HAL_SPI_Init+0x16c>)
 8004720:	400a      	ands	r2, r1
 8004722:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	225d      	movs	r2, #93	; 0x5d
 800472e:	2101      	movs	r1, #1
 8004730:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	0018      	movs	r0, r3
 8004736:	46bd      	mov	sp, r7
 8004738:	b004      	add	sp, #16
 800473a:	bd80      	pop	{r7, pc}
 800473c:	fffff7ff 	.word	0xfffff7ff

08004740 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b088      	sub	sp, #32
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	603b      	str	r3, [r7, #0]
 800474c:	1dbb      	adds	r3, r7, #6
 800474e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004750:	231f      	movs	r3, #31
 8004752:	18fb      	adds	r3, r7, r3
 8004754:	2200      	movs	r2, #0
 8004756:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	225c      	movs	r2, #92	; 0x5c
 800475c:	5c9b      	ldrb	r3, [r3, r2]
 800475e:	2b01      	cmp	r3, #1
 8004760:	d101      	bne.n	8004766 <HAL_SPI_Transmit+0x26>
 8004762:	2302      	movs	r3, #2
 8004764:	e140      	b.n	80049e8 <HAL_SPI_Transmit+0x2a8>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	225c      	movs	r2, #92	; 0x5c
 800476a:	2101      	movs	r1, #1
 800476c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800476e:	f7fd fb3b 	bl	8001de8 <HAL_GetTick>
 8004772:	0003      	movs	r3, r0
 8004774:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004776:	2316      	movs	r3, #22
 8004778:	18fb      	adds	r3, r7, r3
 800477a:	1dba      	adds	r2, r7, #6
 800477c:	8812      	ldrh	r2, [r2, #0]
 800477e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	225d      	movs	r2, #93	; 0x5d
 8004784:	5c9b      	ldrb	r3, [r3, r2]
 8004786:	b2db      	uxtb	r3, r3
 8004788:	2b01      	cmp	r3, #1
 800478a:	d004      	beq.n	8004796 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800478c:	231f      	movs	r3, #31
 800478e:	18fb      	adds	r3, r7, r3
 8004790:	2202      	movs	r2, #2
 8004792:	701a      	strb	r2, [r3, #0]
    goto error;
 8004794:	e11d      	b.n	80049d2 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d003      	beq.n	80047a4 <HAL_SPI_Transmit+0x64>
 800479c:	1dbb      	adds	r3, r7, #6
 800479e:	881b      	ldrh	r3, [r3, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d104      	bne.n	80047ae <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80047a4:	231f      	movs	r3, #31
 80047a6:	18fb      	adds	r3, r7, r3
 80047a8:	2201      	movs	r2, #1
 80047aa:	701a      	strb	r2, [r3, #0]
    goto error;
 80047ac:	e111      	b.n	80049d2 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	225d      	movs	r2, #93	; 0x5d
 80047b2:	2103      	movs	r1, #3
 80047b4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	1dba      	adds	r2, r7, #6
 80047c6:	8812      	ldrh	r2, [r2, #0]
 80047c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	1dba      	adds	r2, r7, #6
 80047ce:	8812      	ldrh	r2, [r2, #0]
 80047d0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2244      	movs	r2, #68	; 0x44
 80047dc:	2100      	movs	r1, #0
 80047de:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2246      	movs	r2, #70	; 0x46
 80047e4:	2100      	movs	r1, #0
 80047e6:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	689a      	ldr	r2, [r3, #8]
 80047f8:	2380      	movs	r3, #128	; 0x80
 80047fa:	021b      	lsls	r3, r3, #8
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d110      	bne.n	8004822 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2140      	movs	r1, #64	; 0x40
 800480c:	438a      	bics	r2, r1
 800480e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2180      	movs	r1, #128	; 0x80
 800481c:	01c9      	lsls	r1, r1, #7
 800481e:	430a      	orrs	r2, r1
 8004820:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2240      	movs	r2, #64	; 0x40
 800482a:	4013      	ands	r3, r2
 800482c:	2b40      	cmp	r3, #64	; 0x40
 800482e:	d007      	beq.n	8004840 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2140      	movs	r1, #64	; 0x40
 800483c:	430a      	orrs	r2, r1
 800483e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	68da      	ldr	r2, [r3, #12]
 8004844:	23e0      	movs	r3, #224	; 0xe0
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	429a      	cmp	r2, r3
 800484a:	d94e      	bls.n	80048ea <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d004      	beq.n	800485e <HAL_SPI_Transmit+0x11e>
 8004854:	2316      	movs	r3, #22
 8004856:	18fb      	adds	r3, r7, r3
 8004858:	881b      	ldrh	r3, [r3, #0]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d13f      	bne.n	80048de <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004862:	881a      	ldrh	r2, [r3, #0]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486e:	1c9a      	adds	r2, r3, #2
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004878:	b29b      	uxth	r3, r3
 800487a:	3b01      	subs	r3, #1
 800487c:	b29a      	uxth	r2, r3
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004882:	e02c      	b.n	80048de <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	2202      	movs	r2, #2
 800488c:	4013      	ands	r3, r2
 800488e:	2b02      	cmp	r3, #2
 8004890:	d112      	bne.n	80048b8 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004896:	881a      	ldrh	r2, [r3, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a2:	1c9a      	adds	r2, r3, #2
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	3b01      	subs	r3, #1
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80048b6:	e012      	b.n	80048de <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048b8:	f7fd fa96 	bl	8001de8 <HAL_GetTick>
 80048bc:	0002      	movs	r2, r0
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	683a      	ldr	r2, [r7, #0]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d802      	bhi.n	80048ce <HAL_SPI_Transmit+0x18e>
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	3301      	adds	r3, #1
 80048cc:	d102      	bne.n	80048d4 <HAL_SPI_Transmit+0x194>
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d104      	bne.n	80048de <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80048d4:	231f      	movs	r3, #31
 80048d6:	18fb      	adds	r3, r7, r3
 80048d8:	2203      	movs	r2, #3
 80048da:	701a      	strb	r2, [r3, #0]
          goto error;
 80048dc:	e079      	b.n	80049d2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1cd      	bne.n	8004884 <HAL_SPI_Transmit+0x144>
 80048e8:	e04f      	b.n	800498a <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d004      	beq.n	80048fc <HAL_SPI_Transmit+0x1bc>
 80048f2:	2316      	movs	r3, #22
 80048f4:	18fb      	adds	r3, r7, r3
 80048f6:	881b      	ldrh	r3, [r3, #0]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d141      	bne.n	8004980 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	330c      	adds	r3, #12
 8004906:	7812      	ldrb	r2, [r2, #0]
 8004908:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490e:	1c5a      	adds	r2, r3, #1
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004918:	b29b      	uxth	r3, r3
 800491a:	3b01      	subs	r3, #1
 800491c:	b29a      	uxth	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8004922:	e02d      	b.n	8004980 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	2202      	movs	r2, #2
 800492c:	4013      	ands	r3, r2
 800492e:	2b02      	cmp	r3, #2
 8004930:	d113      	bne.n	800495a <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	330c      	adds	r3, #12
 800493c:	7812      	ldrb	r2, [r2, #0]
 800493e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004944:	1c5a      	adds	r2, r3, #1
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800494e:	b29b      	uxth	r3, r3
 8004950:	3b01      	subs	r3, #1
 8004952:	b29a      	uxth	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004958:	e012      	b.n	8004980 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800495a:	f7fd fa45 	bl	8001de8 <HAL_GetTick>
 800495e:	0002      	movs	r2, r0
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	683a      	ldr	r2, [r7, #0]
 8004966:	429a      	cmp	r2, r3
 8004968:	d802      	bhi.n	8004970 <HAL_SPI_Transmit+0x230>
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	3301      	adds	r3, #1
 800496e:	d102      	bne.n	8004976 <HAL_SPI_Transmit+0x236>
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d104      	bne.n	8004980 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8004976:	231f      	movs	r3, #31
 8004978:	18fb      	adds	r3, r7, r3
 800497a:	2203      	movs	r2, #3
 800497c:	701a      	strb	r2, [r3, #0]
          goto error;
 800497e:	e028      	b.n	80049d2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004984:	b29b      	uxth	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1cc      	bne.n	8004924 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800498a:	69ba      	ldr	r2, [r7, #24]
 800498c:	6839      	ldr	r1, [r7, #0]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	0018      	movs	r0, r3
 8004992:	f000 f95d 	bl	8004c50 <SPI_EndRxTxTransaction>
 8004996:	1e03      	subs	r3, r0, #0
 8004998:	d002      	beq.n	80049a0 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2220      	movs	r2, #32
 800499e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d10a      	bne.n	80049be <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049a8:	2300      	movs	r3, #0
 80049aa:	613b      	str	r3, [r7, #16]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	613b      	str	r3, [r7, #16]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	613b      	str	r3, [r7, #16]
 80049bc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d004      	beq.n	80049d0 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80049c6:	231f      	movs	r3, #31
 80049c8:	18fb      	adds	r3, r7, r3
 80049ca:	2201      	movs	r2, #1
 80049cc:	701a      	strb	r2, [r3, #0]
 80049ce:	e000      	b.n	80049d2 <HAL_SPI_Transmit+0x292>
  }

error:
 80049d0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	225d      	movs	r2, #93	; 0x5d
 80049d6:	2101      	movs	r1, #1
 80049d8:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	225c      	movs	r2, #92	; 0x5c
 80049de:	2100      	movs	r1, #0
 80049e0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80049e2:	231f      	movs	r3, #31
 80049e4:	18fb      	adds	r3, r7, r3
 80049e6:	781b      	ldrb	r3, [r3, #0]
}
 80049e8:	0018      	movs	r0, r3
 80049ea:	46bd      	mov	sp, r7
 80049ec:	b008      	add	sp, #32
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b088      	sub	sp, #32
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	603b      	str	r3, [r7, #0]
 80049fc:	1dfb      	adds	r3, r7, #7
 80049fe:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a00:	f7fd f9f2 	bl	8001de8 <HAL_GetTick>
 8004a04:	0002      	movs	r2, r0
 8004a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a08:	1a9b      	subs	r3, r3, r2
 8004a0a:	683a      	ldr	r2, [r7, #0]
 8004a0c:	18d3      	adds	r3, r2, r3
 8004a0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a10:	f7fd f9ea 	bl	8001de8 <HAL_GetTick>
 8004a14:	0003      	movs	r3, r0
 8004a16:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a18:	4b3a      	ldr	r3, [pc, #232]	; (8004b04 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	015b      	lsls	r3, r3, #5
 8004a1e:	0d1b      	lsrs	r3, r3, #20
 8004a20:	69fa      	ldr	r2, [r7, #28]
 8004a22:	4353      	muls	r3, r2
 8004a24:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a26:	e058      	b.n	8004ada <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	d055      	beq.n	8004ada <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a2e:	f7fd f9db 	bl	8001de8 <HAL_GetTick>
 8004a32:	0002      	movs	r2, r0
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	69fa      	ldr	r2, [r7, #28]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d902      	bls.n	8004a44 <SPI_WaitFlagStateUntilTimeout+0x54>
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d142      	bne.n	8004aca <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685a      	ldr	r2, [r3, #4]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	21e0      	movs	r1, #224	; 0xe0
 8004a50:	438a      	bics	r2, r1
 8004a52:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	685a      	ldr	r2, [r3, #4]
 8004a58:	2382      	movs	r3, #130	; 0x82
 8004a5a:	005b      	lsls	r3, r3, #1
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d113      	bne.n	8004a88 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	689a      	ldr	r2, [r3, #8]
 8004a64:	2380      	movs	r3, #128	; 0x80
 8004a66:	021b      	lsls	r3, r3, #8
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d005      	beq.n	8004a78 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	689a      	ldr	r2, [r3, #8]
 8004a70:	2380      	movs	r3, #128	; 0x80
 8004a72:	00db      	lsls	r3, r3, #3
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d107      	bne.n	8004a88 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2140      	movs	r1, #64	; 0x40
 8004a84:	438a      	bics	r2, r1
 8004a86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a8c:	2380      	movs	r3, #128	; 0x80
 8004a8e:	019b      	lsls	r3, r3, #6
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d110      	bne.n	8004ab6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	491a      	ldr	r1, [pc, #104]	; (8004b08 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004aa0:	400a      	ands	r2, r1
 8004aa2:	601a      	str	r2, [r3, #0]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2180      	movs	r1, #128	; 0x80
 8004ab0:	0189      	lsls	r1, r1, #6
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	225d      	movs	r2, #93	; 0x5d
 8004aba:	2101      	movs	r1, #1
 8004abc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	225c      	movs	r2, #92	; 0x5c
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e017      	b.n	8004afa <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d101      	bne.n	8004ad4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	68ba      	ldr	r2, [r7, #8]
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	68ba      	ldr	r2, [r7, #8]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	425a      	negs	r2, r3
 8004aea:	4153      	adcs	r3, r2
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	001a      	movs	r2, r3
 8004af0:	1dfb      	adds	r3, r7, #7
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d197      	bne.n	8004a28 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	0018      	movs	r0, r3
 8004afc:	46bd      	mov	sp, r7
 8004afe:	b008      	add	sp, #32
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	46c0      	nop			; (mov r8, r8)
 8004b04:	2000001c 	.word	0x2000001c
 8004b08:	ffffdfff 	.word	0xffffdfff

08004b0c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b08a      	sub	sp, #40	; 0x28
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
 8004b18:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004b1a:	2317      	movs	r3, #23
 8004b1c:	18fb      	adds	r3, r7, r3
 8004b1e:	2200      	movs	r2, #0
 8004b20:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004b22:	f7fd f961 	bl	8001de8 <HAL_GetTick>
 8004b26:	0002      	movs	r2, r0
 8004b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2a:	1a9b      	subs	r3, r3, r2
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	18d3      	adds	r3, r2, r3
 8004b30:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004b32:	f7fd f959 	bl	8001de8 <HAL_GetTick>
 8004b36:	0003      	movs	r3, r0
 8004b38:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	330c      	adds	r3, #12
 8004b40:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004b42:	4b41      	ldr	r3, [pc, #260]	; (8004c48 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	0013      	movs	r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	189b      	adds	r3, r3, r2
 8004b4c:	00da      	lsls	r2, r3, #3
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	0d1b      	lsrs	r3, r3, #20
 8004b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b54:	4353      	muls	r3, r2
 8004b56:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004b58:	e068      	b.n	8004c2c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004b5a:	68ba      	ldr	r2, [r7, #8]
 8004b5c:	23c0      	movs	r3, #192	; 0xc0
 8004b5e:	00db      	lsls	r3, r3, #3
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d10a      	bne.n	8004b7a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d107      	bne.n	8004b7a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	b2da      	uxtb	r2, r3
 8004b70:	2117      	movs	r1, #23
 8004b72:	187b      	adds	r3, r7, r1
 8004b74:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004b76:	187b      	adds	r3, r7, r1
 8004b78:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	d055      	beq.n	8004c2c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b80:	f7fd f932 	bl	8001de8 <HAL_GetTick>
 8004b84:	0002      	movs	r2, r0
 8004b86:	6a3b      	ldr	r3, [r7, #32]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d902      	bls.n	8004b96 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d142      	bne.n	8004c1c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	685a      	ldr	r2, [r3, #4]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	21e0      	movs	r1, #224	; 0xe0
 8004ba2:	438a      	bics	r2, r1
 8004ba4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	685a      	ldr	r2, [r3, #4]
 8004baa:	2382      	movs	r3, #130	; 0x82
 8004bac:	005b      	lsls	r3, r3, #1
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d113      	bne.n	8004bda <SPI_WaitFifoStateUntilTimeout+0xce>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	689a      	ldr	r2, [r3, #8]
 8004bb6:	2380      	movs	r3, #128	; 0x80
 8004bb8:	021b      	lsls	r3, r3, #8
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d005      	beq.n	8004bca <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	689a      	ldr	r2, [r3, #8]
 8004bc2:	2380      	movs	r3, #128	; 0x80
 8004bc4:	00db      	lsls	r3, r3, #3
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d107      	bne.n	8004bda <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2140      	movs	r1, #64	; 0x40
 8004bd6:	438a      	bics	r2, r1
 8004bd8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bde:	2380      	movs	r3, #128	; 0x80
 8004be0:	019b      	lsls	r3, r3, #6
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d110      	bne.n	8004c08 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4916      	ldr	r1, [pc, #88]	; (8004c4c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004bf2:	400a      	ands	r2, r1
 8004bf4:	601a      	str	r2, [r3, #0]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2180      	movs	r1, #128	; 0x80
 8004c02:	0189      	lsls	r1, r1, #6
 8004c04:	430a      	orrs	r2, r1
 8004c06:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	225d      	movs	r2, #93	; 0x5d
 8004c0c:	2101      	movs	r1, #1
 8004c0e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	225c      	movs	r2, #92	; 0x5c
 8004c14:	2100      	movs	r1, #0
 8004c16:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e010      	b.n	8004c3e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d101      	bne.n	8004c26 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004c22:	2300      	movs	r3, #0
 8004c24:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	3b01      	subs	r3, #1
 8004c2a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	68ba      	ldr	r2, [r7, #8]
 8004c34:	4013      	ands	r3, r2
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d18e      	bne.n	8004b5a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	0018      	movs	r0, r3
 8004c40:	46bd      	mov	sp, r7
 8004c42:	b00a      	add	sp, #40	; 0x28
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	46c0      	nop			; (mov r8, r8)
 8004c48:	2000001c 	.word	0x2000001c
 8004c4c:	ffffdfff 	.word	0xffffdfff

08004c50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b086      	sub	sp, #24
 8004c54:	af02      	add	r7, sp, #8
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c5c:	68ba      	ldr	r2, [r7, #8]
 8004c5e:	23c0      	movs	r3, #192	; 0xc0
 8004c60:	0159      	lsls	r1, r3, #5
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	9300      	str	r3, [sp, #0]
 8004c68:	0013      	movs	r3, r2
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f7ff ff4e 	bl	8004b0c <SPI_WaitFifoStateUntilTimeout>
 8004c70:	1e03      	subs	r3, r0, #0
 8004c72:	d007      	beq.n	8004c84 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c78:	2220      	movs	r2, #32
 8004c7a:	431a      	orrs	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e027      	b.n	8004cd4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c84:	68ba      	ldr	r2, [r7, #8]
 8004c86:	68f8      	ldr	r0, [r7, #12]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	9300      	str	r3, [sp, #0]
 8004c8c:	0013      	movs	r3, r2
 8004c8e:	2200      	movs	r2, #0
 8004c90:	2180      	movs	r1, #128	; 0x80
 8004c92:	f7ff fead 	bl	80049f0 <SPI_WaitFlagStateUntilTimeout>
 8004c96:	1e03      	subs	r3, r0, #0
 8004c98:	d007      	beq.n	8004caa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c9e:	2220      	movs	r2, #32
 8004ca0:	431a      	orrs	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e014      	b.n	8004cd4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	23c0      	movs	r3, #192	; 0xc0
 8004cae:	00d9      	lsls	r1, r3, #3
 8004cb0:	68f8      	ldr	r0, [r7, #12]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	0013      	movs	r3, r2
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f7ff ff27 	bl	8004b0c <SPI_WaitFifoStateUntilTimeout>
 8004cbe:	1e03      	subs	r3, r0, #0
 8004cc0:	d007      	beq.n	8004cd2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	431a      	orrs	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e000      	b.n	8004cd4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	0018      	movs	r0, r3
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	b004      	add	sp, #16
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e042      	b.n	8004d74 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	223d      	movs	r2, #61	; 0x3d
 8004cf2:	5c9b      	ldrb	r3, [r3, r2]
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d107      	bne.n	8004d0a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	223c      	movs	r2, #60	; 0x3c
 8004cfe:	2100      	movs	r1, #0
 8004d00:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	0018      	movs	r0, r3
 8004d06:	f7fc fe83 	bl	8001a10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	223d      	movs	r2, #61	; 0x3d
 8004d0e:	2102      	movs	r1, #2
 8004d10:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	3304      	adds	r3, #4
 8004d1a:	0019      	movs	r1, r3
 8004d1c:	0010      	movs	r0, r2
 8004d1e:	f000 fbe7 	bl	80054f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2246      	movs	r2, #70	; 0x46
 8004d26:	2101      	movs	r1, #1
 8004d28:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	223e      	movs	r2, #62	; 0x3e
 8004d2e:	2101      	movs	r1, #1
 8004d30:	5499      	strb	r1, [r3, r2]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	223f      	movs	r2, #63	; 0x3f
 8004d36:	2101      	movs	r1, #1
 8004d38:	5499      	strb	r1, [r3, r2]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2240      	movs	r2, #64	; 0x40
 8004d3e:	2101      	movs	r1, #1
 8004d40:	5499      	strb	r1, [r3, r2]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2241      	movs	r2, #65	; 0x41
 8004d46:	2101      	movs	r1, #1
 8004d48:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2242      	movs	r2, #66	; 0x42
 8004d4e:	2101      	movs	r1, #1
 8004d50:	5499      	strb	r1, [r3, r2]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2243      	movs	r2, #67	; 0x43
 8004d56:	2101      	movs	r1, #1
 8004d58:	5499      	strb	r1, [r3, r2]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2244      	movs	r2, #68	; 0x44
 8004d5e:	2101      	movs	r1, #1
 8004d60:	5499      	strb	r1, [r3, r2]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2245      	movs	r2, #69	; 0x45
 8004d66:	2101      	movs	r1, #1
 8004d68:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	223d      	movs	r2, #61	; 0x3d
 8004d6e:	2101      	movs	r1, #1
 8004d70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	0018      	movs	r0, r3
 8004d76:	46bd      	mov	sp, r7
 8004d78:	b002      	add	sp, #8
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d101      	bne.n	8004d8e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e042      	b.n	8004e14 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	223d      	movs	r2, #61	; 0x3d
 8004d92:	5c9b      	ldrb	r3, [r3, r2]
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d107      	bne.n	8004daa <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	223c      	movs	r2, #60	; 0x3c
 8004d9e:	2100      	movs	r1, #0
 8004da0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	0018      	movs	r0, r3
 8004da6:	f000 f839 	bl	8004e1c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	223d      	movs	r2, #61	; 0x3d
 8004dae:	2102      	movs	r1, #2
 8004db0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	3304      	adds	r3, #4
 8004dba:	0019      	movs	r1, r3
 8004dbc:	0010      	movs	r0, r2
 8004dbe:	f000 fb97 	bl	80054f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2246      	movs	r2, #70	; 0x46
 8004dc6:	2101      	movs	r1, #1
 8004dc8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	223e      	movs	r2, #62	; 0x3e
 8004dce:	2101      	movs	r1, #1
 8004dd0:	5499      	strb	r1, [r3, r2]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	223f      	movs	r2, #63	; 0x3f
 8004dd6:	2101      	movs	r1, #1
 8004dd8:	5499      	strb	r1, [r3, r2]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2240      	movs	r2, #64	; 0x40
 8004dde:	2101      	movs	r1, #1
 8004de0:	5499      	strb	r1, [r3, r2]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2241      	movs	r2, #65	; 0x41
 8004de6:	2101      	movs	r1, #1
 8004de8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2242      	movs	r2, #66	; 0x42
 8004dee:	2101      	movs	r1, #1
 8004df0:	5499      	strb	r1, [r3, r2]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2243      	movs	r2, #67	; 0x43
 8004df6:	2101      	movs	r1, #1
 8004df8:	5499      	strb	r1, [r3, r2]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2244      	movs	r2, #68	; 0x44
 8004dfe:	2101      	movs	r1, #1
 8004e00:	5499      	strb	r1, [r3, r2]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2245      	movs	r2, #69	; 0x45
 8004e06:	2101      	movs	r1, #1
 8004e08:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	223d      	movs	r2, #61	; 0x3d
 8004e0e:	2101      	movs	r1, #1
 8004e10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	0018      	movs	r0, r3
 8004e16:	46bd      	mov	sp, r7
 8004e18:	b002      	add	sp, #8
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004e24:	46c0      	nop			; (mov r8, r8)
 8004e26:	46bd      	mov	sp, r7
 8004e28:	b002      	add	sp, #8
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e36:	230f      	movs	r3, #15
 8004e38:	18fb      	adds	r3, r7, r3
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d108      	bne.n	8004e56 <HAL_TIM_OC_Start_IT+0x2a>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	223e      	movs	r2, #62	; 0x3e
 8004e48:	5c9b      	ldrb	r3, [r3, r2]
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	1e5a      	subs	r2, r3, #1
 8004e50:	4193      	sbcs	r3, r2
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	e01f      	b.n	8004e96 <HAL_TIM_OC_Start_IT+0x6a>
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	2b04      	cmp	r3, #4
 8004e5a:	d108      	bne.n	8004e6e <HAL_TIM_OC_Start_IT+0x42>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	223f      	movs	r2, #63	; 0x3f
 8004e60:	5c9b      	ldrb	r3, [r3, r2]
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	3b01      	subs	r3, #1
 8004e66:	1e5a      	subs	r2, r3, #1
 8004e68:	4193      	sbcs	r3, r2
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	e013      	b.n	8004e96 <HAL_TIM_OC_Start_IT+0x6a>
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	2b08      	cmp	r3, #8
 8004e72:	d108      	bne.n	8004e86 <HAL_TIM_OC_Start_IT+0x5a>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2240      	movs	r2, #64	; 0x40
 8004e78:	5c9b      	ldrb	r3, [r3, r2]
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	1e5a      	subs	r2, r3, #1
 8004e80:	4193      	sbcs	r3, r2
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	e007      	b.n	8004e96 <HAL_TIM_OC_Start_IT+0x6a>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2241      	movs	r2, #65	; 0x41
 8004e8a:	5c9b      	ldrb	r3, [r3, r2]
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	1e5a      	subs	r2, r3, #1
 8004e92:	4193      	sbcs	r3, r2
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e0b7      	b.n	800500e <HAL_TIM_OC_Start_IT+0x1e2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d104      	bne.n	8004eae <HAL_TIM_OC_Start_IT+0x82>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	223e      	movs	r2, #62	; 0x3e
 8004ea8:	2102      	movs	r1, #2
 8004eaa:	5499      	strb	r1, [r3, r2]
 8004eac:	e013      	b.n	8004ed6 <HAL_TIM_OC_Start_IT+0xaa>
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	2b04      	cmp	r3, #4
 8004eb2:	d104      	bne.n	8004ebe <HAL_TIM_OC_Start_IT+0x92>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	223f      	movs	r2, #63	; 0x3f
 8004eb8:	2102      	movs	r1, #2
 8004eba:	5499      	strb	r1, [r3, r2]
 8004ebc:	e00b      	b.n	8004ed6 <HAL_TIM_OC_Start_IT+0xaa>
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	2b08      	cmp	r3, #8
 8004ec2:	d104      	bne.n	8004ece <HAL_TIM_OC_Start_IT+0xa2>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2240      	movs	r2, #64	; 0x40
 8004ec8:	2102      	movs	r1, #2
 8004eca:	5499      	strb	r1, [r3, r2]
 8004ecc:	e003      	b.n	8004ed6 <HAL_TIM_OC_Start_IT+0xaa>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2241      	movs	r2, #65	; 0x41
 8004ed2:	2102      	movs	r1, #2
 8004ed4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	2b0c      	cmp	r3, #12
 8004eda:	d02a      	beq.n	8004f32 <HAL_TIM_OC_Start_IT+0x106>
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	2b0c      	cmp	r3, #12
 8004ee0:	d830      	bhi.n	8004f44 <HAL_TIM_OC_Start_IT+0x118>
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	2b08      	cmp	r3, #8
 8004ee6:	d01b      	beq.n	8004f20 <HAL_TIM_OC_Start_IT+0xf4>
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	2b08      	cmp	r3, #8
 8004eec:	d82a      	bhi.n	8004f44 <HAL_TIM_OC_Start_IT+0x118>
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d003      	beq.n	8004efc <HAL_TIM_OC_Start_IT+0xd0>
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	2b04      	cmp	r3, #4
 8004ef8:	d009      	beq.n	8004f0e <HAL_TIM_OC_Start_IT+0xe2>
 8004efa:	e023      	b.n	8004f44 <HAL_TIM_OC_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68da      	ldr	r2, [r3, #12]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2102      	movs	r1, #2
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	60da      	str	r2, [r3, #12]
      break;
 8004f0c:	e01f      	b.n	8004f4e <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68da      	ldr	r2, [r3, #12]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2104      	movs	r1, #4
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	60da      	str	r2, [r3, #12]
      break;
 8004f1e:	e016      	b.n	8004f4e <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68da      	ldr	r2, [r3, #12]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2108      	movs	r1, #8
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	60da      	str	r2, [r3, #12]
      break;
 8004f30:	e00d      	b.n	8004f4e <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68da      	ldr	r2, [r3, #12]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2110      	movs	r1, #16
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	60da      	str	r2, [r3, #12]
      break;
 8004f42:	e004      	b.n	8004f4e <HAL_TIM_OC_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 8004f44:	230f      	movs	r3, #15
 8004f46:	18fb      	adds	r3, r7, r3
 8004f48:	2201      	movs	r2, #1
 8004f4a:	701a      	strb	r2, [r3, #0]
      break;
 8004f4c:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8004f4e:	230f      	movs	r3, #15
 8004f50:	18fb      	adds	r3, r7, r3
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d157      	bne.n	8005008 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6839      	ldr	r1, [r7, #0]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	0018      	movs	r0, r3
 8004f62:	f000 fddb 	bl	8005b1c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a2b      	ldr	r2, [pc, #172]	; (8005018 <HAL_TIM_OC_Start_IT+0x1ec>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d00e      	beq.n	8004f8e <HAL_TIM_OC_Start_IT+0x162>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a29      	ldr	r2, [pc, #164]	; (800501c <HAL_TIM_OC_Start_IT+0x1f0>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d009      	beq.n	8004f8e <HAL_TIM_OC_Start_IT+0x162>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a28      	ldr	r2, [pc, #160]	; (8005020 <HAL_TIM_OC_Start_IT+0x1f4>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d004      	beq.n	8004f8e <HAL_TIM_OC_Start_IT+0x162>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a26      	ldr	r2, [pc, #152]	; (8005024 <HAL_TIM_OC_Start_IT+0x1f8>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d101      	bne.n	8004f92 <HAL_TIM_OC_Start_IT+0x166>
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e000      	b.n	8004f94 <HAL_TIM_OC_Start_IT+0x168>
 8004f92:	2300      	movs	r3, #0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d008      	beq.n	8004faa <HAL_TIM_OC_Start_IT+0x17e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2180      	movs	r1, #128	; 0x80
 8004fa4:	0209      	lsls	r1, r1, #8
 8004fa6:	430a      	orrs	r2, r1
 8004fa8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a1a      	ldr	r2, [pc, #104]	; (8005018 <HAL_TIM_OC_Start_IT+0x1ec>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d00f      	beq.n	8004fd4 <HAL_TIM_OC_Start_IT+0x1a8>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	2380      	movs	r3, #128	; 0x80
 8004fba:	05db      	lsls	r3, r3, #23
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d009      	beq.n	8004fd4 <HAL_TIM_OC_Start_IT+0x1a8>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a18      	ldr	r2, [pc, #96]	; (8005028 <HAL_TIM_OC_Start_IT+0x1fc>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d004      	beq.n	8004fd4 <HAL_TIM_OC_Start_IT+0x1a8>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a13      	ldr	r2, [pc, #76]	; (800501c <HAL_TIM_OC_Start_IT+0x1f0>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d111      	bne.n	8004ff8 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	2207      	movs	r2, #7
 8004fdc:	4013      	ands	r3, r2
 8004fde:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	2b06      	cmp	r3, #6
 8004fe4:	d010      	beq.n	8005008 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2101      	movs	r1, #1
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ff6:	e007      	b.n	8005008 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2101      	movs	r1, #1
 8005004:	430a      	orrs	r2, r1
 8005006:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005008:	230f      	movs	r3, #15
 800500a:	18fb      	adds	r3, r7, r3
 800500c:	781b      	ldrb	r3, [r3, #0]
}
 800500e:	0018      	movs	r0, r3
 8005010:	46bd      	mov	sp, r7
 8005012:	b004      	add	sp, #16
 8005014:	bd80      	pop	{r7, pc}
 8005016:	46c0      	nop			; (mov r8, r8)
 8005018:	40012c00 	.word	0x40012c00
 800501c:	40014000 	.word	0x40014000
 8005020:	40014400 	.word	0x40014400
 8005024:	40014800 	.word	0x40014800
 8005028:	40000400 	.word	0x40000400

0800502c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	2202      	movs	r2, #2
 800503c:	4013      	ands	r3, r2
 800503e:	2b02      	cmp	r3, #2
 8005040:	d124      	bne.n	800508c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	2202      	movs	r2, #2
 800504a:	4013      	ands	r3, r2
 800504c:	2b02      	cmp	r3, #2
 800504e:	d11d      	bne.n	800508c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2203      	movs	r2, #3
 8005056:	4252      	negs	r2, r2
 8005058:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2201      	movs	r2, #1
 800505e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	2203      	movs	r2, #3
 8005068:	4013      	ands	r3, r2
 800506a:	d004      	beq.n	8005076 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	0018      	movs	r0, r3
 8005070:	f000 fa26 	bl	80054c0 <HAL_TIM_IC_CaptureCallback>
 8005074:	e007      	b.n	8005086 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	0018      	movs	r0, r3
 800507a:	f7fb f8e3 	bl	8000244 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	0018      	movs	r0, r3
 8005082:	f000 fa25 	bl	80054d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	2204      	movs	r2, #4
 8005094:	4013      	ands	r3, r2
 8005096:	2b04      	cmp	r3, #4
 8005098:	d125      	bne.n	80050e6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	2204      	movs	r2, #4
 80050a2:	4013      	ands	r3, r2
 80050a4:	2b04      	cmp	r3, #4
 80050a6:	d11e      	bne.n	80050e6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2205      	movs	r2, #5
 80050ae:	4252      	negs	r2, r2
 80050b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2202      	movs	r2, #2
 80050b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	699a      	ldr	r2, [r3, #24]
 80050be:	23c0      	movs	r3, #192	; 0xc0
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4013      	ands	r3, r2
 80050c4:	d004      	beq.n	80050d0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	0018      	movs	r0, r3
 80050ca:	f000 f9f9 	bl	80054c0 <HAL_TIM_IC_CaptureCallback>
 80050ce:	e007      	b.n	80050e0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	0018      	movs	r0, r3
 80050d4:	f7fb f8b6 	bl	8000244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	0018      	movs	r0, r3
 80050dc:	f000 f9f8 	bl	80054d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	2208      	movs	r2, #8
 80050ee:	4013      	ands	r3, r2
 80050f0:	2b08      	cmp	r3, #8
 80050f2:	d124      	bne.n	800513e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	2208      	movs	r2, #8
 80050fc:	4013      	ands	r3, r2
 80050fe:	2b08      	cmp	r3, #8
 8005100:	d11d      	bne.n	800513e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2209      	movs	r2, #9
 8005108:	4252      	negs	r2, r2
 800510a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2204      	movs	r2, #4
 8005110:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	69db      	ldr	r3, [r3, #28]
 8005118:	2203      	movs	r2, #3
 800511a:	4013      	ands	r3, r2
 800511c:	d004      	beq.n	8005128 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	0018      	movs	r0, r3
 8005122:	f000 f9cd 	bl	80054c0 <HAL_TIM_IC_CaptureCallback>
 8005126:	e007      	b.n	8005138 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	0018      	movs	r0, r3
 800512c:	f7fb f88a 	bl	8000244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	0018      	movs	r0, r3
 8005134:	f000 f9cc 	bl	80054d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	2210      	movs	r2, #16
 8005146:	4013      	ands	r3, r2
 8005148:	2b10      	cmp	r3, #16
 800514a:	d125      	bne.n	8005198 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	2210      	movs	r2, #16
 8005154:	4013      	ands	r3, r2
 8005156:	2b10      	cmp	r3, #16
 8005158:	d11e      	bne.n	8005198 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2211      	movs	r2, #17
 8005160:	4252      	negs	r2, r2
 8005162:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2208      	movs	r2, #8
 8005168:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	69da      	ldr	r2, [r3, #28]
 8005170:	23c0      	movs	r3, #192	; 0xc0
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	4013      	ands	r3, r2
 8005176:	d004      	beq.n	8005182 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	0018      	movs	r0, r3
 800517c:	f000 f9a0 	bl	80054c0 <HAL_TIM_IC_CaptureCallback>
 8005180:	e007      	b.n	8005192 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	0018      	movs	r0, r3
 8005186:	f7fb f85d 	bl	8000244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	0018      	movs	r0, r3
 800518e:	f000 f99f 	bl	80054d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	2201      	movs	r2, #1
 80051a0:	4013      	ands	r3, r2
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d10f      	bne.n	80051c6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	2201      	movs	r2, #1
 80051ae:	4013      	ands	r3, r2
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d108      	bne.n	80051c6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2202      	movs	r2, #2
 80051ba:	4252      	negs	r2, r2
 80051bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	0018      	movs	r0, r3
 80051c2:	f000 f975 	bl	80054b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	2280      	movs	r2, #128	; 0x80
 80051ce:	4013      	ands	r3, r2
 80051d0:	2b80      	cmp	r3, #128	; 0x80
 80051d2:	d10f      	bne.n	80051f4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	2280      	movs	r2, #128	; 0x80
 80051dc:	4013      	ands	r3, r2
 80051de:	2b80      	cmp	r3, #128	; 0x80
 80051e0:	d108      	bne.n	80051f4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2281      	movs	r2, #129	; 0x81
 80051e8:	4252      	negs	r2, r2
 80051ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	0018      	movs	r0, r3
 80051f0:	f000 fd7c 	bl	8005cec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	2240      	movs	r2, #64	; 0x40
 80051fc:	4013      	ands	r3, r2
 80051fe:	2b40      	cmp	r3, #64	; 0x40
 8005200:	d10f      	bne.n	8005222 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	2240      	movs	r2, #64	; 0x40
 800520a:	4013      	ands	r3, r2
 800520c:	2b40      	cmp	r3, #64	; 0x40
 800520e:	d108      	bne.n	8005222 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2241      	movs	r2, #65	; 0x41
 8005216:	4252      	negs	r2, r2
 8005218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	0018      	movs	r0, r3
 800521e:	f000 f95f 	bl	80054e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	2220      	movs	r2, #32
 800522a:	4013      	ands	r3, r2
 800522c:	2b20      	cmp	r3, #32
 800522e:	d10f      	bne.n	8005250 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	2220      	movs	r2, #32
 8005238:	4013      	ands	r3, r2
 800523a:	2b20      	cmp	r3, #32
 800523c:	d108      	bne.n	8005250 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2221      	movs	r2, #33	; 0x21
 8005244:	4252      	negs	r2, r2
 8005246:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	0018      	movs	r0, r3
 800524c:	f000 fd46 	bl	8005cdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005250:	46c0      	nop			; (mov r8, r8)
 8005252:	46bd      	mov	sp, r7
 8005254:	b002      	add	sp, #8
 8005256:	bd80      	pop	{r7, pc}

08005258 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005264:	2317      	movs	r3, #23
 8005266:	18fb      	adds	r3, r7, r3
 8005268:	2200      	movs	r2, #0
 800526a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	223c      	movs	r2, #60	; 0x3c
 8005270:	5c9b      	ldrb	r3, [r3, r2]
 8005272:	2b01      	cmp	r3, #1
 8005274:	d101      	bne.n	800527a <HAL_TIM_OC_ConfigChannel+0x22>
 8005276:	2302      	movs	r3, #2
 8005278:	e042      	b.n	8005300 <HAL_TIM_OC_ConfigChannel+0xa8>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	223c      	movs	r2, #60	; 0x3c
 800527e:	2101      	movs	r1, #1
 8005280:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2b0c      	cmp	r3, #12
 8005286:	d027      	beq.n	80052d8 <HAL_TIM_OC_ConfigChannel+0x80>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b0c      	cmp	r3, #12
 800528c:	d82c      	bhi.n	80052e8 <HAL_TIM_OC_ConfigChannel+0x90>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2b08      	cmp	r3, #8
 8005292:	d019      	beq.n	80052c8 <HAL_TIM_OC_ConfigChannel+0x70>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2b08      	cmp	r3, #8
 8005298:	d826      	bhi.n	80052e8 <HAL_TIM_OC_ConfigChannel+0x90>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d003      	beq.n	80052a8 <HAL_TIM_OC_ConfigChannel+0x50>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2b04      	cmp	r3, #4
 80052a4:	d008      	beq.n	80052b8 <HAL_TIM_OC_ConfigChannel+0x60>
 80052a6:	e01f      	b.n	80052e8 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	0011      	movs	r1, r2
 80052b0:	0018      	movs	r0, r3
 80052b2:	f000 f99d 	bl	80055f0 <TIM_OC1_SetConfig>
      break;
 80052b6:	e01c      	b.n	80052f2 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68ba      	ldr	r2, [r7, #8]
 80052be:	0011      	movs	r1, r2
 80052c0:	0018      	movs	r0, r3
 80052c2:	f000 fa1d 	bl	8005700 <TIM_OC2_SetConfig>
      break;
 80052c6:	e014      	b.n	80052f2 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68ba      	ldr	r2, [r7, #8]
 80052ce:	0011      	movs	r1, r2
 80052d0:	0018      	movs	r0, r3
 80052d2:	f000 fa99 	bl	8005808 <TIM_OC3_SetConfig>
      break;
 80052d6:	e00c      	b.n	80052f2 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68ba      	ldr	r2, [r7, #8]
 80052de:	0011      	movs	r1, r2
 80052e0:	0018      	movs	r0, r3
 80052e2:	f000 fb17 	bl	8005914 <TIM_OC4_SetConfig>
      break;
 80052e6:	e004      	b.n	80052f2 <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 80052e8:	2317      	movs	r3, #23
 80052ea:	18fb      	adds	r3, r7, r3
 80052ec:	2201      	movs	r2, #1
 80052ee:	701a      	strb	r2, [r3, #0]
      break;
 80052f0:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	223c      	movs	r2, #60	; 0x3c
 80052f6:	2100      	movs	r1, #0
 80052f8:	5499      	strb	r1, [r3, r2]

  return status;
 80052fa:	2317      	movs	r3, #23
 80052fc:	18fb      	adds	r3, r7, r3
 80052fe:	781b      	ldrb	r3, [r3, #0]
}
 8005300:	0018      	movs	r0, r3
 8005302:	46bd      	mov	sp, r7
 8005304:	b006      	add	sp, #24
 8005306:	bd80      	pop	{r7, pc}

08005308 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005312:	230f      	movs	r3, #15
 8005314:	18fb      	adds	r3, r7, r3
 8005316:	2200      	movs	r2, #0
 8005318:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	223c      	movs	r2, #60	; 0x3c
 800531e:	5c9b      	ldrb	r3, [r3, r2]
 8005320:	2b01      	cmp	r3, #1
 8005322:	d101      	bne.n	8005328 <HAL_TIM_ConfigClockSource+0x20>
 8005324:	2302      	movs	r3, #2
 8005326:	e0bc      	b.n	80054a2 <HAL_TIM_ConfigClockSource+0x19a>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	223c      	movs	r2, #60	; 0x3c
 800532c:	2101      	movs	r1, #1
 800532e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	223d      	movs	r2, #61	; 0x3d
 8005334:	2102      	movs	r1, #2
 8005336:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	2277      	movs	r2, #119	; 0x77
 8005344:	4393      	bics	r3, r2
 8005346:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	4a58      	ldr	r2, [pc, #352]	; (80054ac <HAL_TIM_ConfigClockSource+0x1a4>)
 800534c:	4013      	ands	r3, r2
 800534e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68ba      	ldr	r2, [r7, #8]
 8005356:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2280      	movs	r2, #128	; 0x80
 800535e:	0192      	lsls	r2, r2, #6
 8005360:	4293      	cmp	r3, r2
 8005362:	d040      	beq.n	80053e6 <HAL_TIM_ConfigClockSource+0xde>
 8005364:	2280      	movs	r2, #128	; 0x80
 8005366:	0192      	lsls	r2, r2, #6
 8005368:	4293      	cmp	r3, r2
 800536a:	d900      	bls.n	800536e <HAL_TIM_ConfigClockSource+0x66>
 800536c:	e088      	b.n	8005480 <HAL_TIM_ConfigClockSource+0x178>
 800536e:	2280      	movs	r2, #128	; 0x80
 8005370:	0152      	lsls	r2, r2, #5
 8005372:	4293      	cmp	r3, r2
 8005374:	d100      	bne.n	8005378 <HAL_TIM_ConfigClockSource+0x70>
 8005376:	e088      	b.n	800548a <HAL_TIM_ConfigClockSource+0x182>
 8005378:	2280      	movs	r2, #128	; 0x80
 800537a:	0152      	lsls	r2, r2, #5
 800537c:	4293      	cmp	r3, r2
 800537e:	d900      	bls.n	8005382 <HAL_TIM_ConfigClockSource+0x7a>
 8005380:	e07e      	b.n	8005480 <HAL_TIM_ConfigClockSource+0x178>
 8005382:	2b70      	cmp	r3, #112	; 0x70
 8005384:	d018      	beq.n	80053b8 <HAL_TIM_ConfigClockSource+0xb0>
 8005386:	d900      	bls.n	800538a <HAL_TIM_ConfigClockSource+0x82>
 8005388:	e07a      	b.n	8005480 <HAL_TIM_ConfigClockSource+0x178>
 800538a:	2b60      	cmp	r3, #96	; 0x60
 800538c:	d04f      	beq.n	800542e <HAL_TIM_ConfigClockSource+0x126>
 800538e:	d900      	bls.n	8005392 <HAL_TIM_ConfigClockSource+0x8a>
 8005390:	e076      	b.n	8005480 <HAL_TIM_ConfigClockSource+0x178>
 8005392:	2b50      	cmp	r3, #80	; 0x50
 8005394:	d03b      	beq.n	800540e <HAL_TIM_ConfigClockSource+0x106>
 8005396:	d900      	bls.n	800539a <HAL_TIM_ConfigClockSource+0x92>
 8005398:	e072      	b.n	8005480 <HAL_TIM_ConfigClockSource+0x178>
 800539a:	2b40      	cmp	r3, #64	; 0x40
 800539c:	d057      	beq.n	800544e <HAL_TIM_ConfigClockSource+0x146>
 800539e:	d900      	bls.n	80053a2 <HAL_TIM_ConfigClockSource+0x9a>
 80053a0:	e06e      	b.n	8005480 <HAL_TIM_ConfigClockSource+0x178>
 80053a2:	2b30      	cmp	r3, #48	; 0x30
 80053a4:	d063      	beq.n	800546e <HAL_TIM_ConfigClockSource+0x166>
 80053a6:	d86b      	bhi.n	8005480 <HAL_TIM_ConfigClockSource+0x178>
 80053a8:	2b20      	cmp	r3, #32
 80053aa:	d060      	beq.n	800546e <HAL_TIM_ConfigClockSource+0x166>
 80053ac:	d868      	bhi.n	8005480 <HAL_TIM_ConfigClockSource+0x178>
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d05d      	beq.n	800546e <HAL_TIM_ConfigClockSource+0x166>
 80053b2:	2b10      	cmp	r3, #16
 80053b4:	d05b      	beq.n	800546e <HAL_TIM_ConfigClockSource+0x166>
 80053b6:	e063      	b.n	8005480 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6818      	ldr	r0, [r3, #0]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	6899      	ldr	r1, [r3, #8]
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	685a      	ldr	r2, [r3, #4]
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f000 fb88 	bl	8005adc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	2277      	movs	r2, #119	; 0x77
 80053d8:	4313      	orrs	r3, r2
 80053da:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68ba      	ldr	r2, [r7, #8]
 80053e2:	609a      	str	r2, [r3, #8]
      break;
 80053e4:	e052      	b.n	800548c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6818      	ldr	r0, [r3, #0]
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	6899      	ldr	r1, [r3, #8]
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	685a      	ldr	r2, [r3, #4]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	f000 fb71 	bl	8005adc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	689a      	ldr	r2, [r3, #8]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2180      	movs	r1, #128	; 0x80
 8005406:	01c9      	lsls	r1, r1, #7
 8005408:	430a      	orrs	r2, r1
 800540a:	609a      	str	r2, [r3, #8]
      break;
 800540c:	e03e      	b.n	800548c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6818      	ldr	r0, [r3, #0]
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	6859      	ldr	r1, [r3, #4]
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	001a      	movs	r2, r3
 800541c:	f000 fae4 	bl	80059e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2150      	movs	r1, #80	; 0x50
 8005426:	0018      	movs	r0, r3
 8005428:	f000 fb3e 	bl	8005aa8 <TIM_ITRx_SetConfig>
      break;
 800542c:	e02e      	b.n	800548c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6818      	ldr	r0, [r3, #0]
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	6859      	ldr	r1, [r3, #4]
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	001a      	movs	r2, r3
 800543c:	f000 fb02 	bl	8005a44 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2160      	movs	r1, #96	; 0x60
 8005446:	0018      	movs	r0, r3
 8005448:	f000 fb2e 	bl	8005aa8 <TIM_ITRx_SetConfig>
      break;
 800544c:	e01e      	b.n	800548c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6818      	ldr	r0, [r3, #0]
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	6859      	ldr	r1, [r3, #4]
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	001a      	movs	r2, r3
 800545c:	f000 fac4 	bl	80059e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2140      	movs	r1, #64	; 0x40
 8005466:	0018      	movs	r0, r3
 8005468:	f000 fb1e 	bl	8005aa8 <TIM_ITRx_SetConfig>
      break;
 800546c:	e00e      	b.n	800548c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	0019      	movs	r1, r3
 8005478:	0010      	movs	r0, r2
 800547a:	f000 fb15 	bl	8005aa8 <TIM_ITRx_SetConfig>
      break;
 800547e:	e005      	b.n	800548c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005480:	230f      	movs	r3, #15
 8005482:	18fb      	adds	r3, r7, r3
 8005484:	2201      	movs	r2, #1
 8005486:	701a      	strb	r2, [r3, #0]
      break;
 8005488:	e000      	b.n	800548c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800548a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	223d      	movs	r2, #61	; 0x3d
 8005490:	2101      	movs	r1, #1
 8005492:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	223c      	movs	r2, #60	; 0x3c
 8005498:	2100      	movs	r1, #0
 800549a:	5499      	strb	r1, [r3, r2]

  return status;
 800549c:	230f      	movs	r3, #15
 800549e:	18fb      	adds	r3, r7, r3
 80054a0:	781b      	ldrb	r3, [r3, #0]
}
 80054a2:	0018      	movs	r0, r3
 80054a4:	46bd      	mov	sp, r7
 80054a6:	b004      	add	sp, #16
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	46c0      	nop			; (mov r8, r8)
 80054ac:	ffff00ff 	.word	0xffff00ff

080054b0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80054b8:	46c0      	nop			; (mov r8, r8)
 80054ba:	46bd      	mov	sp, r7
 80054bc:	b002      	add	sp, #8
 80054be:	bd80      	pop	{r7, pc}

080054c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054c8:	46c0      	nop			; (mov r8, r8)
 80054ca:	46bd      	mov	sp, r7
 80054cc:	b002      	add	sp, #8
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054d8:	46c0      	nop			; (mov r8, r8)
 80054da:	46bd      	mov	sp, r7
 80054dc:	b002      	add	sp, #8
 80054de:	bd80      	pop	{r7, pc}

080054e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054e8:	46c0      	nop			; (mov r8, r8)
 80054ea:	46bd      	mov	sp, r7
 80054ec:	b002      	add	sp, #8
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a34      	ldr	r2, [pc, #208]	; (80055d4 <TIM_Base_SetConfig+0xe4>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d008      	beq.n	800551a <TIM_Base_SetConfig+0x2a>
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	2380      	movs	r3, #128	; 0x80
 800550c:	05db      	lsls	r3, r3, #23
 800550e:	429a      	cmp	r2, r3
 8005510:	d003      	beq.n	800551a <TIM_Base_SetConfig+0x2a>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a30      	ldr	r2, [pc, #192]	; (80055d8 <TIM_Base_SetConfig+0xe8>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d108      	bne.n	800552c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2270      	movs	r2, #112	; 0x70
 800551e:	4393      	bics	r3, r2
 8005520:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	4313      	orrs	r3, r2
 800552a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a29      	ldr	r2, [pc, #164]	; (80055d4 <TIM_Base_SetConfig+0xe4>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d018      	beq.n	8005566 <TIM_Base_SetConfig+0x76>
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	2380      	movs	r3, #128	; 0x80
 8005538:	05db      	lsls	r3, r3, #23
 800553a:	429a      	cmp	r2, r3
 800553c:	d013      	beq.n	8005566 <TIM_Base_SetConfig+0x76>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a25      	ldr	r2, [pc, #148]	; (80055d8 <TIM_Base_SetConfig+0xe8>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d00f      	beq.n	8005566 <TIM_Base_SetConfig+0x76>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a24      	ldr	r2, [pc, #144]	; (80055dc <TIM_Base_SetConfig+0xec>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d00b      	beq.n	8005566 <TIM_Base_SetConfig+0x76>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a23      	ldr	r2, [pc, #140]	; (80055e0 <TIM_Base_SetConfig+0xf0>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d007      	beq.n	8005566 <TIM_Base_SetConfig+0x76>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a22      	ldr	r2, [pc, #136]	; (80055e4 <TIM_Base_SetConfig+0xf4>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d003      	beq.n	8005566 <TIM_Base_SetConfig+0x76>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a21      	ldr	r2, [pc, #132]	; (80055e8 <TIM_Base_SetConfig+0xf8>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d108      	bne.n	8005578 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	4a20      	ldr	r2, [pc, #128]	; (80055ec <TIM_Base_SetConfig+0xfc>)
 800556a:	4013      	ands	r3, r2
 800556c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	4313      	orrs	r3, r2
 8005576:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2280      	movs	r2, #128	; 0x80
 800557c:	4393      	bics	r3, r2
 800557e:	001a      	movs	r2, r3
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	695b      	ldr	r3, [r3, #20]
 8005584:	4313      	orrs	r3, r2
 8005586:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	689a      	ldr	r2, [r3, #8]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a0c      	ldr	r2, [pc, #48]	; (80055d4 <TIM_Base_SetConfig+0xe4>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d00b      	beq.n	80055be <TIM_Base_SetConfig+0xce>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a0d      	ldr	r2, [pc, #52]	; (80055e0 <TIM_Base_SetConfig+0xf0>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d007      	beq.n	80055be <TIM_Base_SetConfig+0xce>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a0c      	ldr	r2, [pc, #48]	; (80055e4 <TIM_Base_SetConfig+0xf4>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d003      	beq.n	80055be <TIM_Base_SetConfig+0xce>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a0b      	ldr	r2, [pc, #44]	; (80055e8 <TIM_Base_SetConfig+0xf8>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d103      	bne.n	80055c6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	691a      	ldr	r2, [r3, #16]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2201      	movs	r2, #1
 80055ca:	615a      	str	r2, [r3, #20]
}
 80055cc:	46c0      	nop			; (mov r8, r8)
 80055ce:	46bd      	mov	sp, r7
 80055d0:	b004      	add	sp, #16
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	40012c00 	.word	0x40012c00
 80055d8:	40000400 	.word	0x40000400
 80055dc:	40002000 	.word	0x40002000
 80055e0:	40014000 	.word	0x40014000
 80055e4:	40014400 	.word	0x40014400
 80055e8:	40014800 	.word	0x40014800
 80055ec:	fffffcff 	.word	0xfffffcff

080055f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b086      	sub	sp, #24
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	2201      	movs	r2, #1
 8005600:	4393      	bics	r3, r2
 8005602:	001a      	movs	r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a1b      	ldr	r3, [r3, #32]
 800560c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2270      	movs	r2, #112	; 0x70
 800561e:	4393      	bics	r3, r2
 8005620:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2203      	movs	r2, #3
 8005626:	4393      	bics	r3, r2
 8005628:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	4313      	orrs	r3, r2
 8005632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	2202      	movs	r2, #2
 8005638:	4393      	bics	r3, r2
 800563a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	697a      	ldr	r2, [r7, #20]
 8005642:	4313      	orrs	r3, r2
 8005644:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a27      	ldr	r2, [pc, #156]	; (80056e8 <TIM_OC1_SetConfig+0xf8>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d00b      	beq.n	8005666 <TIM_OC1_SetConfig+0x76>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a26      	ldr	r2, [pc, #152]	; (80056ec <TIM_OC1_SetConfig+0xfc>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d007      	beq.n	8005666 <TIM_OC1_SetConfig+0x76>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a25      	ldr	r2, [pc, #148]	; (80056f0 <TIM_OC1_SetConfig+0x100>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d003      	beq.n	8005666 <TIM_OC1_SetConfig+0x76>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a24      	ldr	r2, [pc, #144]	; (80056f4 <TIM_OC1_SetConfig+0x104>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d10c      	bne.n	8005680 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	2208      	movs	r2, #8
 800566a:	4393      	bics	r3, r2
 800566c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	4313      	orrs	r3, r2
 8005676:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	2204      	movs	r2, #4
 800567c:	4393      	bics	r3, r2
 800567e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a19      	ldr	r2, [pc, #100]	; (80056e8 <TIM_OC1_SetConfig+0xf8>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d00b      	beq.n	80056a0 <TIM_OC1_SetConfig+0xb0>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a18      	ldr	r2, [pc, #96]	; (80056ec <TIM_OC1_SetConfig+0xfc>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d007      	beq.n	80056a0 <TIM_OC1_SetConfig+0xb0>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a17      	ldr	r2, [pc, #92]	; (80056f0 <TIM_OC1_SetConfig+0x100>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d003      	beq.n	80056a0 <TIM_OC1_SetConfig+0xb0>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a16      	ldr	r2, [pc, #88]	; (80056f4 <TIM_OC1_SetConfig+0x104>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d111      	bne.n	80056c4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	4a15      	ldr	r2, [pc, #84]	; (80056f8 <TIM_OC1_SetConfig+0x108>)
 80056a4:	4013      	ands	r3, r2
 80056a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	4a14      	ldr	r2, [pc, #80]	; (80056fc <TIM_OC1_SetConfig+0x10c>)
 80056ac:	4013      	ands	r3, r2
 80056ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	695b      	ldr	r3, [r3, #20]
 80056b4:	693a      	ldr	r2, [r7, #16]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	699b      	ldr	r3, [r3, #24]
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	685a      	ldr	r2, [r3, #4]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	621a      	str	r2, [r3, #32]
}
 80056de:	46c0      	nop			; (mov r8, r8)
 80056e0:	46bd      	mov	sp, r7
 80056e2:	b006      	add	sp, #24
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	46c0      	nop			; (mov r8, r8)
 80056e8:	40012c00 	.word	0x40012c00
 80056ec:	40014000 	.word	0x40014000
 80056f0:	40014400 	.word	0x40014400
 80056f4:	40014800 	.word	0x40014800
 80056f8:	fffffeff 	.word	0xfffffeff
 80056fc:	fffffdff 	.word	0xfffffdff

08005700 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b086      	sub	sp, #24
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	2210      	movs	r2, #16
 8005710:	4393      	bics	r3, r2
 8005712:	001a      	movs	r2, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6a1b      	ldr	r3, [r3, #32]
 800571c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	4a2e      	ldr	r2, [pc, #184]	; (80057e8 <TIM_OC2_SetConfig+0xe8>)
 800572e:	4013      	ands	r3, r2
 8005730:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	4a2d      	ldr	r2, [pc, #180]	; (80057ec <TIM_OC2_SetConfig+0xec>)
 8005736:	4013      	ands	r3, r2
 8005738:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	021b      	lsls	r3, r3, #8
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	4313      	orrs	r3, r2
 8005744:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	2220      	movs	r2, #32
 800574a:	4393      	bics	r3, r2
 800574c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	011b      	lsls	r3, r3, #4
 8005754:	697a      	ldr	r2, [r7, #20]
 8005756:	4313      	orrs	r3, r2
 8005758:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a24      	ldr	r2, [pc, #144]	; (80057f0 <TIM_OC2_SetConfig+0xf0>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d10d      	bne.n	800577e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	2280      	movs	r2, #128	; 0x80
 8005766:	4393      	bics	r3, r2
 8005768:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	011b      	lsls	r3, r3, #4
 8005770:	697a      	ldr	r2, [r7, #20]
 8005772:	4313      	orrs	r3, r2
 8005774:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	2240      	movs	r2, #64	; 0x40
 800577a:	4393      	bics	r3, r2
 800577c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a1b      	ldr	r2, [pc, #108]	; (80057f0 <TIM_OC2_SetConfig+0xf0>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d00b      	beq.n	800579e <TIM_OC2_SetConfig+0x9e>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a1a      	ldr	r2, [pc, #104]	; (80057f4 <TIM_OC2_SetConfig+0xf4>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d007      	beq.n	800579e <TIM_OC2_SetConfig+0x9e>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a19      	ldr	r2, [pc, #100]	; (80057f8 <TIM_OC2_SetConfig+0xf8>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d003      	beq.n	800579e <TIM_OC2_SetConfig+0x9e>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a18      	ldr	r2, [pc, #96]	; (80057fc <TIM_OC2_SetConfig+0xfc>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d113      	bne.n	80057c6 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	4a17      	ldr	r2, [pc, #92]	; (8005800 <TIM_OC2_SetConfig+0x100>)
 80057a2:	4013      	ands	r3, r2
 80057a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	4a16      	ldr	r2, [pc, #88]	; (8005804 <TIM_OC2_SetConfig+0x104>)
 80057aa:	4013      	ands	r3, r2
 80057ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	693a      	ldr	r2, [r7, #16]
 80057ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	685a      	ldr	r2, [r3, #4]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	697a      	ldr	r2, [r7, #20]
 80057de:	621a      	str	r2, [r3, #32]
}
 80057e0:	46c0      	nop			; (mov r8, r8)
 80057e2:	46bd      	mov	sp, r7
 80057e4:	b006      	add	sp, #24
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	ffff8fff 	.word	0xffff8fff
 80057ec:	fffffcff 	.word	0xfffffcff
 80057f0:	40012c00 	.word	0x40012c00
 80057f4:	40014000 	.word	0x40014000
 80057f8:	40014400 	.word	0x40014400
 80057fc:	40014800 	.word	0x40014800
 8005800:	fffffbff 	.word	0xfffffbff
 8005804:	fffff7ff 	.word	0xfffff7ff

08005808 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b086      	sub	sp, #24
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a1b      	ldr	r3, [r3, #32]
 8005816:	4a35      	ldr	r2, [pc, #212]	; (80058ec <TIM_OC3_SetConfig+0xe4>)
 8005818:	401a      	ands	r2, r3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	69db      	ldr	r3, [r3, #28]
 800582e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2270      	movs	r2, #112	; 0x70
 8005834:	4393      	bics	r3, r2
 8005836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2203      	movs	r2, #3
 800583c:	4393      	bics	r3, r2
 800583e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	4313      	orrs	r3, r2
 8005848:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	4a28      	ldr	r2, [pc, #160]	; (80058f0 <TIM_OC3_SetConfig+0xe8>)
 800584e:	4013      	ands	r3, r2
 8005850:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	021b      	lsls	r3, r3, #8
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	4313      	orrs	r3, r2
 800585c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a24      	ldr	r2, [pc, #144]	; (80058f4 <TIM_OC3_SetConfig+0xec>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d10d      	bne.n	8005882 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	4a23      	ldr	r2, [pc, #140]	; (80058f8 <TIM_OC3_SetConfig+0xf0>)
 800586a:	4013      	ands	r3, r2
 800586c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	021b      	lsls	r3, r3, #8
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	4313      	orrs	r3, r2
 8005878:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	4a1f      	ldr	r2, [pc, #124]	; (80058fc <TIM_OC3_SetConfig+0xf4>)
 800587e:	4013      	ands	r3, r2
 8005880:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a1b      	ldr	r2, [pc, #108]	; (80058f4 <TIM_OC3_SetConfig+0xec>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d00b      	beq.n	80058a2 <TIM_OC3_SetConfig+0x9a>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a1c      	ldr	r2, [pc, #112]	; (8005900 <TIM_OC3_SetConfig+0xf8>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d007      	beq.n	80058a2 <TIM_OC3_SetConfig+0x9a>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a1b      	ldr	r2, [pc, #108]	; (8005904 <TIM_OC3_SetConfig+0xfc>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d003      	beq.n	80058a2 <TIM_OC3_SetConfig+0x9a>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a1a      	ldr	r2, [pc, #104]	; (8005908 <TIM_OC3_SetConfig+0x100>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d113      	bne.n	80058ca <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	4a19      	ldr	r2, [pc, #100]	; (800590c <TIM_OC3_SetConfig+0x104>)
 80058a6:	4013      	ands	r3, r2
 80058a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	4a18      	ldr	r2, [pc, #96]	; (8005910 <TIM_OC3_SetConfig+0x108>)
 80058ae:	4013      	ands	r3, r2
 80058b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	011b      	lsls	r3, r3, #4
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	011b      	lsls	r3, r3, #4
 80058c4:	693a      	ldr	r2, [r7, #16]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	693a      	ldr	r2, [r7, #16]
 80058ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	685a      	ldr	r2, [r3, #4]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	697a      	ldr	r2, [r7, #20]
 80058e2:	621a      	str	r2, [r3, #32]
}
 80058e4:	46c0      	nop			; (mov r8, r8)
 80058e6:	46bd      	mov	sp, r7
 80058e8:	b006      	add	sp, #24
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	fffffeff 	.word	0xfffffeff
 80058f0:	fffffdff 	.word	0xfffffdff
 80058f4:	40012c00 	.word	0x40012c00
 80058f8:	fffff7ff 	.word	0xfffff7ff
 80058fc:	fffffbff 	.word	0xfffffbff
 8005900:	40014000 	.word	0x40014000
 8005904:	40014400 	.word	0x40014400
 8005908:	40014800 	.word	0x40014800
 800590c:	ffffefff 	.word	0xffffefff
 8005910:	ffffdfff 	.word	0xffffdfff

08005914 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b086      	sub	sp, #24
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	4a28      	ldr	r2, [pc, #160]	; (80059c4 <TIM_OC4_SetConfig+0xb0>)
 8005924:	401a      	ands	r2, r3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	69db      	ldr	r3, [r3, #28]
 800593a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	4a22      	ldr	r2, [pc, #136]	; (80059c8 <TIM_OC4_SetConfig+0xb4>)
 8005940:	4013      	ands	r3, r2
 8005942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	4a21      	ldr	r2, [pc, #132]	; (80059cc <TIM_OC4_SetConfig+0xb8>)
 8005948:	4013      	ands	r3, r2
 800594a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	021b      	lsls	r3, r3, #8
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	4313      	orrs	r3, r2
 8005956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	4a1d      	ldr	r2, [pc, #116]	; (80059d0 <TIM_OC4_SetConfig+0xbc>)
 800595c:	4013      	ands	r3, r2
 800595e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	031b      	lsls	r3, r3, #12
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	4313      	orrs	r3, r2
 800596a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a19      	ldr	r2, [pc, #100]	; (80059d4 <TIM_OC4_SetConfig+0xc0>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d00b      	beq.n	800598c <TIM_OC4_SetConfig+0x78>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a18      	ldr	r2, [pc, #96]	; (80059d8 <TIM_OC4_SetConfig+0xc4>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d007      	beq.n	800598c <TIM_OC4_SetConfig+0x78>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a17      	ldr	r2, [pc, #92]	; (80059dc <TIM_OC4_SetConfig+0xc8>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d003      	beq.n	800598c <TIM_OC4_SetConfig+0x78>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a16      	ldr	r2, [pc, #88]	; (80059e0 <TIM_OC4_SetConfig+0xcc>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d109      	bne.n	80059a0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	4a15      	ldr	r2, [pc, #84]	; (80059e4 <TIM_OC4_SetConfig+0xd0>)
 8005990:	4013      	ands	r3, r2
 8005992:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	695b      	ldr	r3, [r3, #20]
 8005998:	019b      	lsls	r3, r3, #6
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	4313      	orrs	r3, r2
 800599e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	685a      	ldr	r2, [r3, #4]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	693a      	ldr	r2, [r7, #16]
 80059b8:	621a      	str	r2, [r3, #32]
}
 80059ba:	46c0      	nop			; (mov r8, r8)
 80059bc:	46bd      	mov	sp, r7
 80059be:	b006      	add	sp, #24
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	46c0      	nop			; (mov r8, r8)
 80059c4:	ffffefff 	.word	0xffffefff
 80059c8:	ffff8fff 	.word	0xffff8fff
 80059cc:	fffffcff 	.word	0xfffffcff
 80059d0:	ffffdfff 	.word	0xffffdfff
 80059d4:	40012c00 	.word	0x40012c00
 80059d8:	40014000 	.word	0x40014000
 80059dc:	40014400 	.word	0x40014400
 80059e0:	40014800 	.word	0x40014800
 80059e4:	ffffbfff 	.word	0xffffbfff

080059e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b086      	sub	sp, #24
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6a1b      	ldr	r3, [r3, #32]
 80059f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	2201      	movs	r2, #1
 8005a00:	4393      	bics	r3, r2
 8005a02:	001a      	movs	r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	22f0      	movs	r2, #240	; 0xf0
 8005a12:	4393      	bics	r3, r2
 8005a14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	011b      	lsls	r3, r3, #4
 8005a1a:	693a      	ldr	r2, [r7, #16]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	220a      	movs	r2, #10
 8005a24:	4393      	bics	r3, r2
 8005a26:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a28:	697a      	ldr	r2, [r7, #20]
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	621a      	str	r2, [r3, #32]
}
 8005a3c:	46c0      	nop			; (mov r8, r8)
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	b006      	add	sp, #24
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b086      	sub	sp, #24
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6a1b      	ldr	r3, [r3, #32]
 8005a54:	2210      	movs	r2, #16
 8005a56:	4393      	bics	r3, r2
 8005a58:	001a      	movs	r2, r3
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6a1b      	ldr	r3, [r3, #32]
 8005a68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	4a0d      	ldr	r2, [pc, #52]	; (8005aa4 <TIM_TI2_ConfigInputStage+0x60>)
 8005a6e:	4013      	ands	r3, r2
 8005a70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	031b      	lsls	r3, r3, #12
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	22a0      	movs	r2, #160	; 0xa0
 8005a80:	4393      	bics	r3, r2
 8005a82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	011b      	lsls	r3, r3, #4
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	697a      	ldr	r2, [r7, #20]
 8005a92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	693a      	ldr	r2, [r7, #16]
 8005a98:	621a      	str	r2, [r3, #32]
}
 8005a9a:	46c0      	nop			; (mov r8, r8)
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	b006      	add	sp, #24
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	46c0      	nop			; (mov r8, r8)
 8005aa4:	ffff0fff 	.word	0xffff0fff

08005aa8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2270      	movs	r2, #112	; 0x70
 8005abc:	4393      	bics	r3, r2
 8005abe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ac0:	683a      	ldr	r2, [r7, #0]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	2207      	movs	r2, #7
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	609a      	str	r2, [r3, #8]
}
 8005ad2:	46c0      	nop			; (mov r8, r8)
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	b004      	add	sp, #16
 8005ad8:	bd80      	pop	{r7, pc}
	...

08005adc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
 8005ae8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	4a09      	ldr	r2, [pc, #36]	; (8005b18 <TIM_ETR_SetConfig+0x3c>)
 8005af4:	4013      	ands	r3, r2
 8005af6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	021a      	lsls	r2, r3, #8
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	431a      	orrs	r2, r3
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	697a      	ldr	r2, [r7, #20]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	609a      	str	r2, [r3, #8]
}
 8005b10:	46c0      	nop			; (mov r8, r8)
 8005b12:	46bd      	mov	sp, r7
 8005b14:	b006      	add	sp, #24
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	ffff00ff 	.word	0xffff00ff

08005b1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	221f      	movs	r2, #31
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	2201      	movs	r2, #1
 8005b30:	409a      	lsls	r2, r3
 8005b32:	0013      	movs	r3, r2
 8005b34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	43d2      	mvns	r2, r2
 8005b3e:	401a      	ands	r2, r3
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6a1a      	ldr	r2, [r3, #32]
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	211f      	movs	r1, #31
 8005b4c:	400b      	ands	r3, r1
 8005b4e:	6879      	ldr	r1, [r7, #4]
 8005b50:	4099      	lsls	r1, r3
 8005b52:	000b      	movs	r3, r1
 8005b54:	431a      	orrs	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	621a      	str	r2, [r3, #32]
}
 8005b5a:	46c0      	nop			; (mov r8, r8)
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	b006      	add	sp, #24
 8005b60:	bd80      	pop	{r7, pc}
	...

08005b64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	223c      	movs	r2, #60	; 0x3c
 8005b72:	5c9b      	ldrb	r3, [r3, r2]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d101      	bne.n	8005b7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b78:	2302      	movs	r3, #2
 8005b7a:	e047      	b.n	8005c0c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	223c      	movs	r2, #60	; 0x3c
 8005b80:	2101      	movs	r1, #1
 8005b82:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	223d      	movs	r2, #61	; 0x3d
 8005b88:	2102      	movs	r1, #2
 8005b8a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2270      	movs	r2, #112	; 0x70
 8005ba0:	4393      	bics	r3, r2
 8005ba2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a16      	ldr	r2, [pc, #88]	; (8005c14 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d00f      	beq.n	8005be0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	2380      	movs	r3, #128	; 0x80
 8005bc6:	05db      	lsls	r3, r3, #23
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d009      	beq.n	8005be0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a11      	ldr	r2, [pc, #68]	; (8005c18 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d004      	beq.n	8005be0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a10      	ldr	r2, [pc, #64]	; (8005c1c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d10c      	bne.n	8005bfa <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	2280      	movs	r2, #128	; 0x80
 8005be4:	4393      	bics	r3, r2
 8005be6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68ba      	ldr	r2, [r7, #8]
 8005bf8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	223d      	movs	r2, #61	; 0x3d
 8005bfe:	2101      	movs	r1, #1
 8005c00:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	223c      	movs	r2, #60	; 0x3c
 8005c06:	2100      	movs	r1, #0
 8005c08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	0018      	movs	r0, r3
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	b004      	add	sp, #16
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	40012c00 	.word	0x40012c00
 8005c18:	40000400 	.word	0x40000400
 8005c1c:	40014000 	.word	0x40014000

08005c20 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	223c      	movs	r2, #60	; 0x3c
 8005c32:	5c9b      	ldrb	r3, [r3, r2]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d101      	bne.n	8005c3c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005c38:	2302      	movs	r3, #2
 8005c3a:	e03e      	b.n	8005cba <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	223c      	movs	r2, #60	; 0x3c
 8005c40:	2101      	movs	r1, #1
 8005c42:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	22ff      	movs	r2, #255	; 0xff
 8005c48:	4393      	bics	r3, r2
 8005c4a:	001a      	movs	r2, r3
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	4a1b      	ldr	r2, [pc, #108]	; (8005cc4 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8005c58:	401a      	ands	r2, r3
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	4a18      	ldr	r2, [pc, #96]	; (8005cc8 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8005c66:	401a      	ands	r2, r3
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	4a16      	ldr	r2, [pc, #88]	; (8005ccc <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8005c74:	401a      	ands	r2, r3
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	4a13      	ldr	r2, [pc, #76]	; (8005cd0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8005c82:	401a      	ands	r2, r3
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	4a11      	ldr	r2, [pc, #68]	; (8005cd4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8005c90:	401a      	ands	r2, r3
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	4a0e      	ldr	r2, [pc, #56]	; (8005cd8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8005c9e:	401a      	ands	r2, r3
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	69db      	ldr	r3, [r3, #28]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	223c      	movs	r2, #60	; 0x3c
 8005cb4:	2100      	movs	r1, #0
 8005cb6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	0018      	movs	r0, r3
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	b004      	add	sp, #16
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	46c0      	nop			; (mov r8, r8)
 8005cc4:	fffffcff 	.word	0xfffffcff
 8005cc8:	fffffbff 	.word	0xfffffbff
 8005ccc:	fffff7ff 	.word	0xfffff7ff
 8005cd0:	ffffefff 	.word	0xffffefff
 8005cd4:	ffffdfff 	.word	0xffffdfff
 8005cd8:	ffffbfff 	.word	0xffffbfff

08005cdc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ce4:	46c0      	nop			; (mov r8, r8)
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	b002      	add	sp, #8
 8005cea:	bd80      	pop	{r7, pc}

08005cec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b082      	sub	sp, #8
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cf4:	46c0      	nop			; (mov r8, r8)
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	b002      	add	sp, #8
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d101      	bne.n	8005d0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e044      	b.n	8005d98 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d107      	bne.n	8005d26 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2274      	movs	r2, #116	; 0x74
 8005d1a:	2100      	movs	r1, #0
 8005d1c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	0018      	movs	r0, r3
 8005d22:	f7fb ff2d 	bl	8001b80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2224      	movs	r2, #36	; 0x24
 8005d2a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2101      	movs	r1, #1
 8005d38:	438a      	bics	r2, r1
 8005d3a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	0018      	movs	r0, r3
 8005d40:	f000 fd0c 	bl	800675c <UART_SetConfig>
 8005d44:	0003      	movs	r3, r0
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d101      	bne.n	8005d4e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e024      	b.n	8005d98 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d003      	beq.n	8005d5e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	0018      	movs	r0, r3
 8005d5a:	f000 fe3f 	bl	80069dc <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	685a      	ldr	r2, [r3, #4]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	490d      	ldr	r1, [pc, #52]	; (8005da0 <HAL_UART_Init+0xa4>)
 8005d6a:	400a      	ands	r2, r1
 8005d6c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	689a      	ldr	r2, [r3, #8]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	212a      	movs	r1, #42	; 0x2a
 8005d7a:	438a      	bics	r2, r1
 8005d7c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2101      	movs	r1, #1
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	0018      	movs	r0, r3
 8005d92:	f000 fed7 	bl	8006b44 <UART_CheckIdleState>
 8005d96:	0003      	movs	r3, r0
}
 8005d98:	0018      	movs	r0, r3
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	b002      	add	sp, #8
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	ffffb7ff 	.word	0xffffb7ff

08005da4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b08a      	sub	sp, #40	; 0x28
 8005da8:	af02      	add	r7, sp, #8
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	603b      	str	r3, [r7, #0]
 8005db0:	1dbb      	adds	r3, r7, #6
 8005db2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005db8:	2b20      	cmp	r3, #32
 8005dba:	d000      	beq.n	8005dbe <HAL_UART_Transmit+0x1a>
 8005dbc:	e096      	b.n	8005eec <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d003      	beq.n	8005dcc <HAL_UART_Transmit+0x28>
 8005dc4:	1dbb      	adds	r3, r7, #6
 8005dc6:	881b      	ldrh	r3, [r3, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d101      	bne.n	8005dd0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e08e      	b.n	8005eee <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	689a      	ldr	r2, [r3, #8]
 8005dd4:	2380      	movs	r3, #128	; 0x80
 8005dd6:	015b      	lsls	r3, r3, #5
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d109      	bne.n	8005df0 <HAL_UART_Transmit+0x4c>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d105      	bne.n	8005df0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	2201      	movs	r2, #1
 8005de8:	4013      	ands	r3, r2
 8005dea:	d001      	beq.n	8005df0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e07e      	b.n	8005eee <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2274      	movs	r2, #116	; 0x74
 8005df4:	5c9b      	ldrb	r3, [r3, r2]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d101      	bne.n	8005dfe <HAL_UART_Transmit+0x5a>
 8005dfa:	2302      	movs	r3, #2
 8005dfc:	e077      	b.n	8005eee <HAL_UART_Transmit+0x14a>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2274      	movs	r2, #116	; 0x74
 8005e02:	2101      	movs	r1, #1
 8005e04:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2280      	movs	r2, #128	; 0x80
 8005e0a:	2100      	movs	r1, #0
 8005e0c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2221      	movs	r2, #33	; 0x21
 8005e12:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e14:	f7fb ffe8 	bl	8001de8 <HAL_GetTick>
 8005e18:	0003      	movs	r3, r0
 8005e1a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	1dba      	adds	r2, r7, #6
 8005e20:	2150      	movs	r1, #80	; 0x50
 8005e22:	8812      	ldrh	r2, [r2, #0]
 8005e24:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	1dba      	adds	r2, r7, #6
 8005e2a:	2152      	movs	r1, #82	; 0x52
 8005e2c:	8812      	ldrh	r2, [r2, #0]
 8005e2e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	689a      	ldr	r2, [r3, #8]
 8005e34:	2380      	movs	r3, #128	; 0x80
 8005e36:	015b      	lsls	r3, r3, #5
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d108      	bne.n	8005e4e <HAL_UART_Transmit+0xaa>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d104      	bne.n	8005e4e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8005e44:	2300      	movs	r3, #0
 8005e46:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	61bb      	str	r3, [r7, #24]
 8005e4c:	e003      	b.n	8005e56 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e52:	2300      	movs	r3, #0
 8005e54:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2274      	movs	r2, #116	; 0x74
 8005e5a:	2100      	movs	r1, #0
 8005e5c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8005e5e:	e02d      	b.n	8005ebc <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e60:	697a      	ldr	r2, [r7, #20]
 8005e62:	68f8      	ldr	r0, [r7, #12]
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	9300      	str	r3, [sp, #0]
 8005e68:	0013      	movs	r3, r2
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	2180      	movs	r1, #128	; 0x80
 8005e6e:	f000 feb1 	bl	8006bd4 <UART_WaitOnFlagUntilTimeout>
 8005e72:	1e03      	subs	r3, r0, #0
 8005e74:	d001      	beq.n	8005e7a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e039      	b.n	8005eee <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d10b      	bne.n	8005e98 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	881a      	ldrh	r2, [r3, #0]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	05d2      	lsls	r2, r2, #23
 8005e8a:	0dd2      	lsrs	r2, r2, #23
 8005e8c:	b292      	uxth	r2, r2
 8005e8e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	3302      	adds	r3, #2
 8005e94:	61bb      	str	r3, [r7, #24]
 8005e96:	e008      	b.n	8005eaa <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	781a      	ldrb	r2, [r3, #0]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	b292      	uxth	r2, r2
 8005ea2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2252      	movs	r2, #82	; 0x52
 8005eae:	5a9b      	ldrh	r3, [r3, r2]
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	b299      	uxth	r1, r3
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2252      	movs	r2, #82	; 0x52
 8005eba:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2252      	movs	r2, #82	; 0x52
 8005ec0:	5a9b      	ldrh	r3, [r3, r2]
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d1cb      	bne.n	8005e60 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	68f8      	ldr	r0, [r7, #12]
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	9300      	str	r3, [sp, #0]
 8005ed0:	0013      	movs	r3, r2
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	2140      	movs	r1, #64	; 0x40
 8005ed6:	f000 fe7d 	bl	8006bd4 <UART_WaitOnFlagUntilTimeout>
 8005eda:	1e03      	subs	r3, r0, #0
 8005edc:	d001      	beq.n	8005ee2 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e005      	b.n	8005eee <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2220      	movs	r2, #32
 8005ee6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	e000      	b.n	8005eee <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005eec:	2302      	movs	r3, #2
  }
}
 8005eee:	0018      	movs	r0, r3
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	b008      	add	sp, #32
 8005ef4:	bd80      	pop	{r7, pc}
	...

08005ef8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b08a      	sub	sp, #40	; 0x28
 8005efc:	af02      	add	r7, sp, #8
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	603b      	str	r3, [r7, #0]
 8005f04:	1dbb      	adds	r3, r7, #6
 8005f06:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f0c:	2b20      	cmp	r3, #32
 8005f0e:	d000      	beq.n	8005f12 <HAL_UART_Receive+0x1a>
 8005f10:	e0c6      	b.n	80060a0 <HAL_UART_Receive+0x1a8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d003      	beq.n	8005f20 <HAL_UART_Receive+0x28>
 8005f18:	1dbb      	adds	r3, r7, #6
 8005f1a:	881b      	ldrh	r3, [r3, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d101      	bne.n	8005f24 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e0be      	b.n	80060a2 <HAL_UART_Receive+0x1aa>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	689a      	ldr	r2, [r3, #8]
 8005f28:	2380      	movs	r3, #128	; 0x80
 8005f2a:	015b      	lsls	r3, r3, #5
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d109      	bne.n	8005f44 <HAL_UART_Receive+0x4c>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d105      	bne.n	8005f44 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	d001      	beq.n	8005f44 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e0ae      	b.n	80060a2 <HAL_UART_Receive+0x1aa>
      }
    }

    __HAL_LOCK(huart);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2274      	movs	r2, #116	; 0x74
 8005f48:	5c9b      	ldrb	r3, [r3, r2]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d101      	bne.n	8005f52 <HAL_UART_Receive+0x5a>
 8005f4e:	2302      	movs	r3, #2
 8005f50:	e0a7      	b.n	80060a2 <HAL_UART_Receive+0x1aa>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2274      	movs	r2, #116	; 0x74
 8005f56:	2101      	movs	r1, #1
 8005f58:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2280      	movs	r2, #128	; 0x80
 8005f5e:	2100      	movs	r1, #0
 8005f60:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2222      	movs	r2, #34	; 0x22
 8005f66:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f6e:	f7fb ff3b 	bl	8001de8 <HAL_GetTick>
 8005f72:	0003      	movs	r3, r0
 8005f74:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	1dba      	adds	r2, r7, #6
 8005f7a:	2158      	movs	r1, #88	; 0x58
 8005f7c:	8812      	ldrh	r2, [r2, #0]
 8005f7e:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	1dba      	adds	r2, r7, #6
 8005f84:	215a      	movs	r1, #90	; 0x5a
 8005f86:	8812      	ldrh	r2, [r2, #0]
 8005f88:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	689a      	ldr	r2, [r3, #8]
 8005f8e:	2380      	movs	r3, #128	; 0x80
 8005f90:	015b      	lsls	r3, r3, #5
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d10d      	bne.n	8005fb2 <HAL_UART_Receive+0xba>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d104      	bne.n	8005fa8 <HAL_UART_Receive+0xb0>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	225c      	movs	r2, #92	; 0x5c
 8005fa2:	4942      	ldr	r1, [pc, #264]	; (80060ac <HAL_UART_Receive+0x1b4>)
 8005fa4:	5299      	strh	r1, [r3, r2]
 8005fa6:	e01a      	b.n	8005fde <HAL_UART_Receive+0xe6>
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	225c      	movs	r2, #92	; 0x5c
 8005fac:	21ff      	movs	r1, #255	; 0xff
 8005fae:	5299      	strh	r1, [r3, r2]
 8005fb0:	e015      	b.n	8005fde <HAL_UART_Receive+0xe6>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10d      	bne.n	8005fd6 <HAL_UART_Receive+0xde>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	691b      	ldr	r3, [r3, #16]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d104      	bne.n	8005fcc <HAL_UART_Receive+0xd4>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	225c      	movs	r2, #92	; 0x5c
 8005fc6:	21ff      	movs	r1, #255	; 0xff
 8005fc8:	5299      	strh	r1, [r3, r2]
 8005fca:	e008      	b.n	8005fde <HAL_UART_Receive+0xe6>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	225c      	movs	r2, #92	; 0x5c
 8005fd0:	217f      	movs	r1, #127	; 0x7f
 8005fd2:	5299      	strh	r1, [r3, r2]
 8005fd4:	e003      	b.n	8005fde <HAL_UART_Receive+0xe6>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	225c      	movs	r2, #92	; 0x5c
 8005fda:	2100      	movs	r1, #0
 8005fdc:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8005fde:	2312      	movs	r3, #18
 8005fe0:	18fb      	adds	r3, r7, r3
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	215c      	movs	r1, #92	; 0x5c
 8005fe6:	5a52      	ldrh	r2, [r2, r1]
 8005fe8:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	689a      	ldr	r2, [r3, #8]
 8005fee:	2380      	movs	r3, #128	; 0x80
 8005ff0:	015b      	lsls	r3, r3, #5
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d108      	bne.n	8006008 <HAL_UART_Receive+0x110>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d104      	bne.n	8006008 <HAL_UART_Receive+0x110>
    {
      pdata8bits  = NULL;
 8005ffe:	2300      	movs	r3, #0
 8006000:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	61bb      	str	r3, [r7, #24]
 8006006:	e003      	b.n	8006010 <HAL_UART_Receive+0x118>
    }
    else
    {
      pdata8bits  = pData;
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800600c:	2300      	movs	r3, #0
 800600e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2274      	movs	r2, #116	; 0x74
 8006014:	2100      	movs	r1, #0
 8006016:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006018:	e037      	b.n	800608a <HAL_UART_Receive+0x192>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800601a:	697a      	ldr	r2, [r7, #20]
 800601c:	68f8      	ldr	r0, [r7, #12]
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	9300      	str	r3, [sp, #0]
 8006022:	0013      	movs	r3, r2
 8006024:	2200      	movs	r2, #0
 8006026:	2120      	movs	r1, #32
 8006028:	f000 fdd4 	bl	8006bd4 <UART_WaitOnFlagUntilTimeout>
 800602c:	1e03      	subs	r3, r0, #0
 800602e:	d001      	beq.n	8006034 <HAL_UART_Receive+0x13c>
      {
        return HAL_TIMEOUT;
 8006030:	2303      	movs	r3, #3
 8006032:	e036      	b.n	80060a2 <HAL_UART_Receive+0x1aa>
      }
      if (pdata8bits == NULL)
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10e      	bne.n	8006058 <HAL_UART_Receive+0x160>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006040:	b29b      	uxth	r3, r3
 8006042:	2212      	movs	r2, #18
 8006044:	18ba      	adds	r2, r7, r2
 8006046:	8812      	ldrh	r2, [r2, #0]
 8006048:	4013      	ands	r3, r2
 800604a:	b29a      	uxth	r2, r3
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	3302      	adds	r3, #2
 8006054:	61bb      	str	r3, [r7, #24]
 8006056:	e00f      	b.n	8006078 <HAL_UART_Receive+0x180>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800605e:	b29b      	uxth	r3, r3
 8006060:	b2db      	uxtb	r3, r3
 8006062:	2212      	movs	r2, #18
 8006064:	18ba      	adds	r2, r7, r2
 8006066:	8812      	ldrh	r2, [r2, #0]
 8006068:	b2d2      	uxtb	r2, r2
 800606a:	4013      	ands	r3, r2
 800606c:	b2da      	uxtb	r2, r3
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	3301      	adds	r3, #1
 8006076:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	225a      	movs	r2, #90	; 0x5a
 800607c:	5a9b      	ldrh	r3, [r3, r2]
 800607e:	b29b      	uxth	r3, r3
 8006080:	3b01      	subs	r3, #1
 8006082:	b299      	uxth	r1, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	225a      	movs	r2, #90	; 0x5a
 8006088:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	225a      	movs	r2, #90	; 0x5a
 800608e:	5a9b      	ldrh	r3, [r3, r2]
 8006090:	b29b      	uxth	r3, r3
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1c1      	bne.n	800601a <HAL_UART_Receive+0x122>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2220      	movs	r2, #32
 800609a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800609c:	2300      	movs	r3, #0
 800609e:	e000      	b.n	80060a2 <HAL_UART_Receive+0x1aa>
  }
  else
  {
    return HAL_BUSY;
 80060a0:	2302      	movs	r3, #2
  }
}
 80060a2:	0018      	movs	r0, r3
 80060a4:	46bd      	mov	sp, r7
 80060a6:	b008      	add	sp, #32
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	46c0      	nop			; (mov r8, r8)
 80060ac:	000001ff 	.word	0x000001ff

080060b0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b088      	sub	sp, #32
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	1dbb      	adds	r3, r7, #6
 80060bc:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060c2:	2b20      	cmp	r3, #32
 80060c4:	d150      	bne.n	8006168 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d003      	beq.n	80060d4 <HAL_UART_Receive_IT+0x24>
 80060cc:	1dbb      	adds	r3, r7, #6
 80060ce:	881b      	ldrh	r3, [r3, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d101      	bne.n	80060d8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e048      	b.n	800616a <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	689a      	ldr	r2, [r3, #8]
 80060dc:	2380      	movs	r3, #128	; 0x80
 80060de:	015b      	lsls	r3, r3, #5
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d109      	bne.n	80060f8 <HAL_UART_Receive_IT+0x48>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d105      	bne.n	80060f8 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	2201      	movs	r2, #1
 80060f0:	4013      	ands	r3, r2
 80060f2:	d001      	beq.n	80060f8 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e038      	b.n	800616a <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2274      	movs	r2, #116	; 0x74
 80060fc:	5c9b      	ldrb	r3, [r3, r2]
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d101      	bne.n	8006106 <HAL_UART_Receive_IT+0x56>
 8006102:	2302      	movs	r3, #2
 8006104:	e031      	b.n	800616a <HAL_UART_Receive_IT+0xba>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2274      	movs	r2, #116	; 0x74
 800610a:	2101      	movs	r1, #1
 800610c:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	685a      	ldr	r2, [r3, #4]
 800611a:	2380      	movs	r3, #128	; 0x80
 800611c:	041b      	lsls	r3, r3, #16
 800611e:	4013      	ands	r3, r2
 8006120:	d019      	beq.n	8006156 <HAL_UART_Receive_IT+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006122:	f3ef 8310 	mrs	r3, PRIMASK
 8006126:	613b      	str	r3, [r7, #16]
  return(result);
 8006128:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800612a:	61fb      	str	r3, [r7, #28]
 800612c:	2301      	movs	r3, #1
 800612e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	f383 8810 	msr	PRIMASK, r3
}
 8006136:	46c0      	nop			; (mov r8, r8)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2180      	movs	r1, #128	; 0x80
 8006144:	04c9      	lsls	r1, r1, #19
 8006146:	430a      	orrs	r2, r1
 8006148:	601a      	str	r2, [r3, #0]
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	f383 8810 	msr	PRIMASK, r3
}
 8006154:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006156:	1dbb      	adds	r3, r7, #6
 8006158:	881a      	ldrh	r2, [r3, #0]
 800615a:	68b9      	ldr	r1, [r7, #8]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	0018      	movs	r0, r3
 8006160:	f000 fdfc 	bl	8006d5c <UART_Start_Receive_IT>
 8006164:	0003      	movs	r3, r0
 8006166:	e000      	b.n	800616a <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8006168:	2302      	movs	r3, #2
  }
}
 800616a:	0018      	movs	r0, r3
 800616c:	46bd      	mov	sp, r7
 800616e:	b008      	add	sp, #32
 8006170:	bd80      	pop	{r7, pc}
	...

08006174 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006174:	b590      	push	{r4, r7, lr}
 8006176:	b0ab      	sub	sp, #172	; 0xac
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	22a4      	movs	r2, #164	; 0xa4
 8006184:	18b9      	adds	r1, r7, r2
 8006186:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	20a0      	movs	r0, #160	; 0xa0
 8006190:	1839      	adds	r1, r7, r0
 8006192:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	219c      	movs	r1, #156	; 0x9c
 800619c:	1879      	adds	r1, r7, r1
 800619e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80061a0:	0011      	movs	r1, r2
 80061a2:	18bb      	adds	r3, r7, r2
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a99      	ldr	r2, [pc, #612]	; (800640c <HAL_UART_IRQHandler+0x298>)
 80061a8:	4013      	ands	r3, r2
 80061aa:	2298      	movs	r2, #152	; 0x98
 80061ac:	18bc      	adds	r4, r7, r2
 80061ae:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80061b0:	18bb      	adds	r3, r7, r2
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d114      	bne.n	80061e2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80061b8:	187b      	adds	r3, r7, r1
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2220      	movs	r2, #32
 80061be:	4013      	ands	r3, r2
 80061c0:	d00f      	beq.n	80061e2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80061c2:	183b      	adds	r3, r7, r0
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2220      	movs	r2, #32
 80061c8:	4013      	ands	r3, r2
 80061ca:	d00a      	beq.n	80061e2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d100      	bne.n	80061d6 <HAL_UART_IRQHandler+0x62>
 80061d4:	e296      	b.n	8006704 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	0010      	movs	r0, r2
 80061de:	4798      	blx	r3
      }
      return;
 80061e0:	e290      	b.n	8006704 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80061e2:	2398      	movs	r3, #152	; 0x98
 80061e4:	18fb      	adds	r3, r7, r3
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d100      	bne.n	80061ee <HAL_UART_IRQHandler+0x7a>
 80061ec:	e114      	b.n	8006418 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80061ee:	239c      	movs	r3, #156	; 0x9c
 80061f0:	18fb      	adds	r3, r7, r3
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2201      	movs	r2, #1
 80061f6:	4013      	ands	r3, r2
 80061f8:	d106      	bne.n	8006208 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80061fa:	23a0      	movs	r3, #160	; 0xa0
 80061fc:	18fb      	adds	r3, r7, r3
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a83      	ldr	r2, [pc, #524]	; (8006410 <HAL_UART_IRQHandler+0x29c>)
 8006202:	4013      	ands	r3, r2
 8006204:	d100      	bne.n	8006208 <HAL_UART_IRQHandler+0x94>
 8006206:	e107      	b.n	8006418 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006208:	23a4      	movs	r3, #164	; 0xa4
 800620a:	18fb      	adds	r3, r7, r3
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2201      	movs	r2, #1
 8006210:	4013      	ands	r3, r2
 8006212:	d012      	beq.n	800623a <HAL_UART_IRQHandler+0xc6>
 8006214:	23a0      	movs	r3, #160	; 0xa0
 8006216:	18fb      	adds	r3, r7, r3
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	2380      	movs	r3, #128	; 0x80
 800621c:	005b      	lsls	r3, r3, #1
 800621e:	4013      	ands	r3, r2
 8006220:	d00b      	beq.n	800623a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2201      	movs	r2, #1
 8006228:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2280      	movs	r2, #128	; 0x80
 800622e:	589b      	ldr	r3, [r3, r2]
 8006230:	2201      	movs	r2, #1
 8006232:	431a      	orrs	r2, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2180      	movs	r1, #128	; 0x80
 8006238:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800623a:	23a4      	movs	r3, #164	; 0xa4
 800623c:	18fb      	adds	r3, r7, r3
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2202      	movs	r2, #2
 8006242:	4013      	ands	r3, r2
 8006244:	d011      	beq.n	800626a <HAL_UART_IRQHandler+0xf6>
 8006246:	239c      	movs	r3, #156	; 0x9c
 8006248:	18fb      	adds	r3, r7, r3
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2201      	movs	r2, #1
 800624e:	4013      	ands	r3, r2
 8006250:	d00b      	beq.n	800626a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2202      	movs	r2, #2
 8006258:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2280      	movs	r2, #128	; 0x80
 800625e:	589b      	ldr	r3, [r3, r2]
 8006260:	2204      	movs	r2, #4
 8006262:	431a      	orrs	r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2180      	movs	r1, #128	; 0x80
 8006268:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800626a:	23a4      	movs	r3, #164	; 0xa4
 800626c:	18fb      	adds	r3, r7, r3
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2204      	movs	r2, #4
 8006272:	4013      	ands	r3, r2
 8006274:	d011      	beq.n	800629a <HAL_UART_IRQHandler+0x126>
 8006276:	239c      	movs	r3, #156	; 0x9c
 8006278:	18fb      	adds	r3, r7, r3
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2201      	movs	r2, #1
 800627e:	4013      	ands	r3, r2
 8006280:	d00b      	beq.n	800629a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2204      	movs	r2, #4
 8006288:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2280      	movs	r2, #128	; 0x80
 800628e:	589b      	ldr	r3, [r3, r2]
 8006290:	2202      	movs	r2, #2
 8006292:	431a      	orrs	r2, r3
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2180      	movs	r1, #128	; 0x80
 8006298:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800629a:	23a4      	movs	r3, #164	; 0xa4
 800629c:	18fb      	adds	r3, r7, r3
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2208      	movs	r2, #8
 80062a2:	4013      	ands	r3, r2
 80062a4:	d017      	beq.n	80062d6 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80062a6:	23a0      	movs	r3, #160	; 0xa0
 80062a8:	18fb      	adds	r3, r7, r3
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2220      	movs	r2, #32
 80062ae:	4013      	ands	r3, r2
 80062b0:	d105      	bne.n	80062be <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80062b2:	239c      	movs	r3, #156	; 0x9c
 80062b4:	18fb      	adds	r3, r7, r3
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2201      	movs	r2, #1
 80062ba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80062bc:	d00b      	beq.n	80062d6 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2208      	movs	r2, #8
 80062c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2280      	movs	r2, #128	; 0x80
 80062ca:	589b      	ldr	r3, [r3, r2]
 80062cc:	2208      	movs	r2, #8
 80062ce:	431a      	orrs	r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2180      	movs	r1, #128	; 0x80
 80062d4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80062d6:	23a4      	movs	r3, #164	; 0xa4
 80062d8:	18fb      	adds	r3, r7, r3
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	2380      	movs	r3, #128	; 0x80
 80062de:	011b      	lsls	r3, r3, #4
 80062e0:	4013      	ands	r3, r2
 80062e2:	d013      	beq.n	800630c <HAL_UART_IRQHandler+0x198>
 80062e4:	23a0      	movs	r3, #160	; 0xa0
 80062e6:	18fb      	adds	r3, r7, r3
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	2380      	movs	r3, #128	; 0x80
 80062ec:	04db      	lsls	r3, r3, #19
 80062ee:	4013      	ands	r3, r2
 80062f0:	d00c      	beq.n	800630c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2280      	movs	r2, #128	; 0x80
 80062f8:	0112      	lsls	r2, r2, #4
 80062fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2280      	movs	r2, #128	; 0x80
 8006300:	589b      	ldr	r3, [r3, r2]
 8006302:	2220      	movs	r2, #32
 8006304:	431a      	orrs	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2180      	movs	r1, #128	; 0x80
 800630a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2280      	movs	r2, #128	; 0x80
 8006310:	589b      	ldr	r3, [r3, r2]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d100      	bne.n	8006318 <HAL_UART_IRQHandler+0x1a4>
 8006316:	e1f7      	b.n	8006708 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006318:	23a4      	movs	r3, #164	; 0xa4
 800631a:	18fb      	adds	r3, r7, r3
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2220      	movs	r2, #32
 8006320:	4013      	ands	r3, r2
 8006322:	d00e      	beq.n	8006342 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006324:	23a0      	movs	r3, #160	; 0xa0
 8006326:	18fb      	adds	r3, r7, r3
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2220      	movs	r2, #32
 800632c:	4013      	ands	r3, r2
 800632e:	d008      	beq.n	8006342 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006334:	2b00      	cmp	r3, #0
 8006336:	d004      	beq.n	8006342 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	0010      	movs	r0, r2
 8006340:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2280      	movs	r2, #128	; 0x80
 8006346:	589b      	ldr	r3, [r3, r2]
 8006348:	2194      	movs	r1, #148	; 0x94
 800634a:	187a      	adds	r2, r7, r1
 800634c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	2240      	movs	r2, #64	; 0x40
 8006356:	4013      	ands	r3, r2
 8006358:	2b40      	cmp	r3, #64	; 0x40
 800635a:	d004      	beq.n	8006366 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800635c:	187b      	adds	r3, r7, r1
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2228      	movs	r2, #40	; 0x28
 8006362:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006364:	d047      	beq.n	80063f6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	0018      	movs	r0, r3
 800636a:	f000 fd93 	bl	8006e94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	2240      	movs	r2, #64	; 0x40
 8006376:	4013      	ands	r3, r2
 8006378:	2b40      	cmp	r3, #64	; 0x40
 800637a:	d137      	bne.n	80063ec <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800637c:	f3ef 8310 	mrs	r3, PRIMASK
 8006380:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8006382:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006384:	2090      	movs	r0, #144	; 0x90
 8006386:	183a      	adds	r2, r7, r0
 8006388:	6013      	str	r3, [r2, #0]
 800638a:	2301      	movs	r3, #1
 800638c:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800638e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006390:	f383 8810 	msr	PRIMASK, r3
}
 8006394:	46c0      	nop			; (mov r8, r8)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	689a      	ldr	r2, [r3, #8]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2140      	movs	r1, #64	; 0x40
 80063a2:	438a      	bics	r2, r1
 80063a4:	609a      	str	r2, [r3, #8]
 80063a6:	183b      	adds	r3, r7, r0
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063ae:	f383 8810 	msr	PRIMASK, r3
}
 80063b2:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d012      	beq.n	80063e2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063c0:	4a14      	ldr	r2, [pc, #80]	; (8006414 <HAL_UART_IRQHandler+0x2a0>)
 80063c2:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063c8:	0018      	movs	r0, r3
 80063ca:	f7fc fb73 	bl	8002ab4 <HAL_DMA_Abort_IT>
 80063ce:	1e03      	subs	r3, r0, #0
 80063d0:	d01a      	beq.n	8006408 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063dc:	0018      	movs	r0, r3
 80063de:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063e0:	e012      	b.n	8006408 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	0018      	movs	r0, r3
 80063e6:	f000 f9a5 	bl	8006734 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063ea:	e00d      	b.n	8006408 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	0018      	movs	r0, r3
 80063f0:	f000 f9a0 	bl	8006734 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063f4:	e008      	b.n	8006408 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	0018      	movs	r0, r3
 80063fa:	f000 f99b 	bl	8006734 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2280      	movs	r2, #128	; 0x80
 8006402:	2100      	movs	r1, #0
 8006404:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006406:	e17f      	b.n	8006708 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006408:	46c0      	nop			; (mov r8, r8)
    return;
 800640a:	e17d      	b.n	8006708 <HAL_UART_IRQHandler+0x594>
 800640c:	0000080f 	.word	0x0000080f
 8006410:	04000120 	.word	0x04000120
 8006414:	08006f59 	.word	0x08006f59

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800641c:	2b01      	cmp	r3, #1
 800641e:	d000      	beq.n	8006422 <HAL_UART_IRQHandler+0x2ae>
 8006420:	e131      	b.n	8006686 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006422:	23a4      	movs	r3, #164	; 0xa4
 8006424:	18fb      	adds	r3, r7, r3
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2210      	movs	r2, #16
 800642a:	4013      	ands	r3, r2
 800642c:	d100      	bne.n	8006430 <HAL_UART_IRQHandler+0x2bc>
 800642e:	e12a      	b.n	8006686 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006430:	23a0      	movs	r3, #160	; 0xa0
 8006432:	18fb      	adds	r3, r7, r3
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2210      	movs	r2, #16
 8006438:	4013      	ands	r3, r2
 800643a:	d100      	bne.n	800643e <HAL_UART_IRQHandler+0x2ca>
 800643c:	e123      	b.n	8006686 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2210      	movs	r2, #16
 8006444:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	2240      	movs	r2, #64	; 0x40
 800644e:	4013      	ands	r3, r2
 8006450:	2b40      	cmp	r3, #64	; 0x40
 8006452:	d000      	beq.n	8006456 <HAL_UART_IRQHandler+0x2e2>
 8006454:	e09b      	b.n	800658e <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	685a      	ldr	r2, [r3, #4]
 800645e:	217e      	movs	r1, #126	; 0x7e
 8006460:	187b      	adds	r3, r7, r1
 8006462:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006464:	187b      	adds	r3, r7, r1
 8006466:	881b      	ldrh	r3, [r3, #0]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d100      	bne.n	800646e <HAL_UART_IRQHandler+0x2fa>
 800646c:	e14e      	b.n	800670c <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2258      	movs	r2, #88	; 0x58
 8006472:	5a9b      	ldrh	r3, [r3, r2]
 8006474:	187a      	adds	r2, r7, r1
 8006476:	8812      	ldrh	r2, [r2, #0]
 8006478:	429a      	cmp	r2, r3
 800647a:	d300      	bcc.n	800647e <HAL_UART_IRQHandler+0x30a>
 800647c:	e146      	b.n	800670c <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	187a      	adds	r2, r7, r1
 8006482:	215a      	movs	r1, #90	; 0x5a
 8006484:	8812      	ldrh	r2, [r2, #0]
 8006486:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800648c:	699b      	ldr	r3, [r3, #24]
 800648e:	2b20      	cmp	r3, #32
 8006490:	d06e      	beq.n	8006570 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006492:	f3ef 8310 	mrs	r3, PRIMASK
 8006496:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800649a:	67bb      	str	r3, [r7, #120]	; 0x78
 800649c:	2301      	movs	r3, #1
 800649e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a2:	f383 8810 	msr	PRIMASK, r3
}
 80064a6:	46c0      	nop			; (mov r8, r8)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	499a      	ldr	r1, [pc, #616]	; (800671c <HAL_UART_IRQHandler+0x5a8>)
 80064b4:	400a      	ands	r2, r1
 80064b6:	601a      	str	r2, [r3, #0]
 80064b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064ba:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064be:	f383 8810 	msr	PRIMASK, r3
}
 80064c2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064c4:	f3ef 8310 	mrs	r3, PRIMASK
 80064c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80064ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064cc:	677b      	str	r3, [r7, #116]	; 0x74
 80064ce:	2301      	movs	r3, #1
 80064d0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064d4:	f383 8810 	msr	PRIMASK, r3
}
 80064d8:	46c0      	nop			; (mov r8, r8)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	689a      	ldr	r2, [r3, #8]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2101      	movs	r1, #1
 80064e6:	438a      	bics	r2, r1
 80064e8:	609a      	str	r2, [r3, #8]
 80064ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064ec:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064f0:	f383 8810 	msr	PRIMASK, r3
}
 80064f4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064f6:	f3ef 8310 	mrs	r3, PRIMASK
 80064fa:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80064fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064fe:	673b      	str	r3, [r7, #112]	; 0x70
 8006500:	2301      	movs	r3, #1
 8006502:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006506:	f383 8810 	msr	PRIMASK, r3
}
 800650a:	46c0      	nop			; (mov r8, r8)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	689a      	ldr	r2, [r3, #8]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2140      	movs	r1, #64	; 0x40
 8006518:	438a      	bics	r2, r1
 800651a:	609a      	str	r2, [r3, #8]
 800651c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800651e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006520:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006522:	f383 8810 	msr	PRIMASK, r3
}
 8006526:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2220      	movs	r2, #32
 800652c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006534:	f3ef 8310 	mrs	r3, PRIMASK
 8006538:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800653a:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800653c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800653e:	2301      	movs	r3, #1
 8006540:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006542:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006544:	f383 8810 	msr	PRIMASK, r3
}
 8006548:	46c0      	nop			; (mov r8, r8)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2110      	movs	r1, #16
 8006556:	438a      	bics	r2, r1
 8006558:	601a      	str	r2, [r3, #0]
 800655a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800655c:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800655e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006560:	f383 8810 	msr	PRIMASK, r3
}
 8006564:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800656a:	0018      	movs	r0, r3
 800656c:	f7fc fa6a 	bl	8002a44 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2258      	movs	r2, #88	; 0x58
 8006574:	5a9a      	ldrh	r2, [r3, r2]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	215a      	movs	r1, #90	; 0x5a
 800657a:	5a5b      	ldrh	r3, [r3, r1]
 800657c:	b29b      	uxth	r3, r3
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	b29a      	uxth	r2, r3
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	0011      	movs	r1, r2
 8006586:	0018      	movs	r0, r3
 8006588:	f000 f8dc 	bl	8006744 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800658c:	e0be      	b.n	800670c <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2258      	movs	r2, #88	; 0x58
 8006592:	5a99      	ldrh	r1, [r3, r2]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	225a      	movs	r2, #90	; 0x5a
 8006598:	5a9b      	ldrh	r3, [r3, r2]
 800659a:	b29a      	uxth	r2, r3
 800659c:	208e      	movs	r0, #142	; 0x8e
 800659e:	183b      	adds	r3, r7, r0
 80065a0:	1a8a      	subs	r2, r1, r2
 80065a2:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	225a      	movs	r2, #90	; 0x5a
 80065a8:	5a9b      	ldrh	r3, [r3, r2]
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d100      	bne.n	80065b2 <HAL_UART_IRQHandler+0x43e>
 80065b0:	e0ae      	b.n	8006710 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 80065b2:	183b      	adds	r3, r7, r0
 80065b4:	881b      	ldrh	r3, [r3, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d100      	bne.n	80065bc <HAL_UART_IRQHandler+0x448>
 80065ba:	e0a9      	b.n	8006710 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065bc:	f3ef 8310 	mrs	r3, PRIMASK
 80065c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80065c2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065c4:	2488      	movs	r4, #136	; 0x88
 80065c6:	193a      	adds	r2, r7, r4
 80065c8:	6013      	str	r3, [r2, #0]
 80065ca:	2301      	movs	r3, #1
 80065cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	f383 8810 	msr	PRIMASK, r3
}
 80065d4:	46c0      	nop			; (mov r8, r8)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	494f      	ldr	r1, [pc, #316]	; (8006720 <HAL_UART_IRQHandler+0x5ac>)
 80065e2:	400a      	ands	r2, r1
 80065e4:	601a      	str	r2, [r3, #0]
 80065e6:	193b      	adds	r3, r7, r4
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	f383 8810 	msr	PRIMASK, r3
}
 80065f2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065f4:	f3ef 8310 	mrs	r3, PRIMASK
 80065f8:	61bb      	str	r3, [r7, #24]
  return(result);
 80065fa:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065fc:	2484      	movs	r4, #132	; 0x84
 80065fe:	193a      	adds	r2, r7, r4
 8006600:	6013      	str	r3, [r2, #0]
 8006602:	2301      	movs	r3, #1
 8006604:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	f383 8810 	msr	PRIMASK, r3
}
 800660c:	46c0      	nop			; (mov r8, r8)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	689a      	ldr	r2, [r3, #8]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2101      	movs	r1, #1
 800661a:	438a      	bics	r2, r1
 800661c:	609a      	str	r2, [r3, #8]
 800661e:	193b      	adds	r3, r7, r4
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006624:	6a3b      	ldr	r3, [r7, #32]
 8006626:	f383 8810 	msr	PRIMASK, r3
}
 800662a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2220      	movs	r2, #32
 8006630:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800663e:	f3ef 8310 	mrs	r3, PRIMASK
 8006642:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006644:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006646:	2480      	movs	r4, #128	; 0x80
 8006648:	193a      	adds	r2, r7, r4
 800664a:	6013      	str	r3, [r2, #0]
 800664c:	2301      	movs	r3, #1
 800664e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006652:	f383 8810 	msr	PRIMASK, r3
}
 8006656:	46c0      	nop			; (mov r8, r8)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	2110      	movs	r1, #16
 8006664:	438a      	bics	r2, r1
 8006666:	601a      	str	r2, [r3, #0]
 8006668:	193b      	adds	r3, r7, r4
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800666e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006670:	f383 8810 	msr	PRIMASK, r3
}
 8006674:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006676:	183b      	adds	r3, r7, r0
 8006678:	881a      	ldrh	r2, [r3, #0]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	0011      	movs	r1, r2
 800667e:	0018      	movs	r0, r3
 8006680:	f000 f860 	bl	8006744 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006684:	e044      	b.n	8006710 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006686:	23a4      	movs	r3, #164	; 0xa4
 8006688:	18fb      	adds	r3, r7, r3
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	2380      	movs	r3, #128	; 0x80
 800668e:	035b      	lsls	r3, r3, #13
 8006690:	4013      	ands	r3, r2
 8006692:	d010      	beq.n	80066b6 <HAL_UART_IRQHandler+0x542>
 8006694:	239c      	movs	r3, #156	; 0x9c
 8006696:	18fb      	adds	r3, r7, r3
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	2380      	movs	r3, #128	; 0x80
 800669c:	03db      	lsls	r3, r3, #15
 800669e:	4013      	ands	r3, r2
 80066a0:	d009      	beq.n	80066b6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2280      	movs	r2, #128	; 0x80
 80066a8:	0352      	lsls	r2, r2, #13
 80066aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	0018      	movs	r0, r3
 80066b0:	f000 fdfc 	bl	80072ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80066b4:	e02f      	b.n	8006716 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80066b6:	23a4      	movs	r3, #164	; 0xa4
 80066b8:	18fb      	adds	r3, r7, r3
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2280      	movs	r2, #128	; 0x80
 80066be:	4013      	ands	r3, r2
 80066c0:	d00f      	beq.n	80066e2 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80066c2:	23a0      	movs	r3, #160	; 0xa0
 80066c4:	18fb      	adds	r3, r7, r3
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2280      	movs	r2, #128	; 0x80
 80066ca:	4013      	ands	r3, r2
 80066cc:	d009      	beq.n	80066e2 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d01e      	beq.n	8006714 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	0010      	movs	r0, r2
 80066de:	4798      	blx	r3
    }
    return;
 80066e0:	e018      	b.n	8006714 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80066e2:	23a4      	movs	r3, #164	; 0xa4
 80066e4:	18fb      	adds	r3, r7, r3
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2240      	movs	r2, #64	; 0x40
 80066ea:	4013      	ands	r3, r2
 80066ec:	d013      	beq.n	8006716 <HAL_UART_IRQHandler+0x5a2>
 80066ee:	23a0      	movs	r3, #160	; 0xa0
 80066f0:	18fb      	adds	r3, r7, r3
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2240      	movs	r2, #64	; 0x40
 80066f6:	4013      	ands	r3, r2
 80066f8:	d00d      	beq.n	8006716 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	0018      	movs	r0, r3
 80066fe:	f000 fc42 	bl	8006f86 <UART_EndTransmit_IT>
    return;
 8006702:	e008      	b.n	8006716 <HAL_UART_IRQHandler+0x5a2>
      return;
 8006704:	46c0      	nop			; (mov r8, r8)
 8006706:	e006      	b.n	8006716 <HAL_UART_IRQHandler+0x5a2>
    return;
 8006708:	46c0      	nop			; (mov r8, r8)
 800670a:	e004      	b.n	8006716 <HAL_UART_IRQHandler+0x5a2>
      return;
 800670c:	46c0      	nop			; (mov r8, r8)
 800670e:	e002      	b.n	8006716 <HAL_UART_IRQHandler+0x5a2>
      return;
 8006710:	46c0      	nop			; (mov r8, r8)
 8006712:	e000      	b.n	8006716 <HAL_UART_IRQHandler+0x5a2>
    return;
 8006714:	46c0      	nop			; (mov r8, r8)
  }

}
 8006716:	46bd      	mov	sp, r7
 8006718:	b02b      	add	sp, #172	; 0xac
 800671a:	bd90      	pop	{r4, r7, pc}
 800671c:	fffffeff 	.word	0xfffffeff
 8006720:	fffffedf 	.word	0xfffffedf

08006724 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800672c:	46c0      	nop			; (mov r8, r8)
 800672e:	46bd      	mov	sp, r7
 8006730:	b002      	add	sp, #8
 8006732:	bd80      	pop	{r7, pc}

08006734 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800673c:	46c0      	nop			; (mov r8, r8)
 800673e:	46bd      	mov	sp, r7
 8006740:	b002      	add	sp, #8
 8006742:	bd80      	pop	{r7, pc}

08006744 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	000a      	movs	r2, r1
 800674e:	1cbb      	adds	r3, r7, #2
 8006750:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006752:	46c0      	nop			; (mov r8, r8)
 8006754:	46bd      	mov	sp, r7
 8006756:	b002      	add	sp, #8
 8006758:	bd80      	pop	{r7, pc}
	...

0800675c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b088      	sub	sp, #32
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006764:	231e      	movs	r3, #30
 8006766:	18fb      	adds	r3, r7, r3
 8006768:	2200      	movs	r2, #0
 800676a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	689a      	ldr	r2, [r3, #8]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	431a      	orrs	r2, r3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	431a      	orrs	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	69db      	ldr	r3, [r3, #28]
 8006780:	4313      	orrs	r3, r2
 8006782:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a8d      	ldr	r2, [pc, #564]	; (80069c0 <UART_SetConfig+0x264>)
 800678c:	4013      	ands	r3, r2
 800678e:	0019      	movs	r1, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	697a      	ldr	r2, [r7, #20]
 8006796:	430a      	orrs	r2, r1
 8006798:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	4a88      	ldr	r2, [pc, #544]	; (80069c4 <UART_SetConfig+0x268>)
 80067a2:	4013      	ands	r3, r2
 80067a4:	0019      	movs	r1, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	68da      	ldr	r2, [r3, #12]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	430a      	orrs	r2, r1
 80067b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	699b      	ldr	r3, [r3, #24]
 80067b6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6a1b      	ldr	r3, [r3, #32]
 80067bc:	697a      	ldr	r2, [r7, #20]
 80067be:	4313      	orrs	r3, r2
 80067c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	4a7f      	ldr	r2, [pc, #508]	; (80069c8 <UART_SetConfig+0x26c>)
 80067ca:	4013      	ands	r3, r2
 80067cc:	0019      	movs	r1, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	697a      	ldr	r2, [r7, #20]
 80067d4:	430a      	orrs	r2, r1
 80067d6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a7b      	ldr	r2, [pc, #492]	; (80069cc <UART_SetConfig+0x270>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d127      	bne.n	8006832 <UART_SetConfig+0xd6>
 80067e2:	4b7b      	ldr	r3, [pc, #492]	; (80069d0 <UART_SetConfig+0x274>)
 80067e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e6:	2203      	movs	r2, #3
 80067e8:	4013      	ands	r3, r2
 80067ea:	2b03      	cmp	r3, #3
 80067ec:	d00d      	beq.n	800680a <UART_SetConfig+0xae>
 80067ee:	d81b      	bhi.n	8006828 <UART_SetConfig+0xcc>
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d014      	beq.n	800681e <UART_SetConfig+0xc2>
 80067f4:	d818      	bhi.n	8006828 <UART_SetConfig+0xcc>
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d002      	beq.n	8006800 <UART_SetConfig+0xa4>
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d00a      	beq.n	8006814 <UART_SetConfig+0xb8>
 80067fe:	e013      	b.n	8006828 <UART_SetConfig+0xcc>
 8006800:	231f      	movs	r3, #31
 8006802:	18fb      	adds	r3, r7, r3
 8006804:	2200      	movs	r2, #0
 8006806:	701a      	strb	r2, [r3, #0]
 8006808:	e021      	b.n	800684e <UART_SetConfig+0xf2>
 800680a:	231f      	movs	r3, #31
 800680c:	18fb      	adds	r3, r7, r3
 800680e:	2202      	movs	r2, #2
 8006810:	701a      	strb	r2, [r3, #0]
 8006812:	e01c      	b.n	800684e <UART_SetConfig+0xf2>
 8006814:	231f      	movs	r3, #31
 8006816:	18fb      	adds	r3, r7, r3
 8006818:	2204      	movs	r2, #4
 800681a:	701a      	strb	r2, [r3, #0]
 800681c:	e017      	b.n	800684e <UART_SetConfig+0xf2>
 800681e:	231f      	movs	r3, #31
 8006820:	18fb      	adds	r3, r7, r3
 8006822:	2208      	movs	r2, #8
 8006824:	701a      	strb	r2, [r3, #0]
 8006826:	e012      	b.n	800684e <UART_SetConfig+0xf2>
 8006828:	231f      	movs	r3, #31
 800682a:	18fb      	adds	r3, r7, r3
 800682c:	2210      	movs	r2, #16
 800682e:	701a      	strb	r2, [r3, #0]
 8006830:	e00d      	b.n	800684e <UART_SetConfig+0xf2>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a67      	ldr	r2, [pc, #412]	; (80069d4 <UART_SetConfig+0x278>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d104      	bne.n	8006846 <UART_SetConfig+0xea>
 800683c:	231f      	movs	r3, #31
 800683e:	18fb      	adds	r3, r7, r3
 8006840:	2200      	movs	r2, #0
 8006842:	701a      	strb	r2, [r3, #0]
 8006844:	e003      	b.n	800684e <UART_SetConfig+0xf2>
 8006846:	231f      	movs	r3, #31
 8006848:	18fb      	adds	r3, r7, r3
 800684a:	2210      	movs	r2, #16
 800684c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	69da      	ldr	r2, [r3, #28]
 8006852:	2380      	movs	r3, #128	; 0x80
 8006854:	021b      	lsls	r3, r3, #8
 8006856:	429a      	cmp	r2, r3
 8006858:	d15d      	bne.n	8006916 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 800685a:	231f      	movs	r3, #31
 800685c:	18fb      	adds	r3, r7, r3
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	2b08      	cmp	r3, #8
 8006862:	d015      	beq.n	8006890 <UART_SetConfig+0x134>
 8006864:	dc18      	bgt.n	8006898 <UART_SetConfig+0x13c>
 8006866:	2b04      	cmp	r3, #4
 8006868:	d00d      	beq.n	8006886 <UART_SetConfig+0x12a>
 800686a:	dc15      	bgt.n	8006898 <UART_SetConfig+0x13c>
 800686c:	2b00      	cmp	r3, #0
 800686e:	d002      	beq.n	8006876 <UART_SetConfig+0x11a>
 8006870:	2b02      	cmp	r3, #2
 8006872:	d005      	beq.n	8006880 <UART_SetConfig+0x124>
 8006874:	e010      	b.n	8006898 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006876:	f7fd fdb7 	bl	80043e8 <HAL_RCC_GetPCLK1Freq>
 800687a:	0003      	movs	r3, r0
 800687c:	61bb      	str	r3, [r7, #24]
        break;
 800687e:	e012      	b.n	80068a6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006880:	4b55      	ldr	r3, [pc, #340]	; (80069d8 <UART_SetConfig+0x27c>)
 8006882:	61bb      	str	r3, [r7, #24]
        break;
 8006884:	e00f      	b.n	80068a6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006886:	f7fd fd41 	bl	800430c <HAL_RCC_GetSysClockFreq>
 800688a:	0003      	movs	r3, r0
 800688c:	61bb      	str	r3, [r7, #24]
        break;
 800688e:	e00a      	b.n	80068a6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006890:	2380      	movs	r3, #128	; 0x80
 8006892:	021b      	lsls	r3, r3, #8
 8006894:	61bb      	str	r3, [r7, #24]
        break;
 8006896:	e006      	b.n	80068a6 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8006898:	2300      	movs	r3, #0
 800689a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800689c:	231e      	movs	r3, #30
 800689e:	18fb      	adds	r3, r7, r3
 80068a0:	2201      	movs	r2, #1
 80068a2:	701a      	strb	r2, [r3, #0]
        break;
 80068a4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d100      	bne.n	80068ae <UART_SetConfig+0x152>
 80068ac:	e07b      	b.n	80069a6 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	005a      	lsls	r2, r3, #1
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	085b      	lsrs	r3, r3, #1
 80068b8:	18d2      	adds	r2, r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	0019      	movs	r1, r3
 80068c0:	0010      	movs	r0, r2
 80068c2:	f7f9 fc21 	bl	8000108 <__udivsi3>
 80068c6:	0003      	movs	r3, r0
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	2b0f      	cmp	r3, #15
 80068d0:	d91c      	bls.n	800690c <UART_SetConfig+0x1b0>
 80068d2:	693a      	ldr	r2, [r7, #16]
 80068d4:	2380      	movs	r3, #128	; 0x80
 80068d6:	025b      	lsls	r3, r3, #9
 80068d8:	429a      	cmp	r2, r3
 80068da:	d217      	bcs.n	800690c <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	b29a      	uxth	r2, r3
 80068e0:	200e      	movs	r0, #14
 80068e2:	183b      	adds	r3, r7, r0
 80068e4:	210f      	movs	r1, #15
 80068e6:	438a      	bics	r2, r1
 80068e8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	085b      	lsrs	r3, r3, #1
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	2207      	movs	r2, #7
 80068f2:	4013      	ands	r3, r2
 80068f4:	b299      	uxth	r1, r3
 80068f6:	183b      	adds	r3, r7, r0
 80068f8:	183a      	adds	r2, r7, r0
 80068fa:	8812      	ldrh	r2, [r2, #0]
 80068fc:	430a      	orrs	r2, r1
 80068fe:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	183a      	adds	r2, r7, r0
 8006906:	8812      	ldrh	r2, [r2, #0]
 8006908:	60da      	str	r2, [r3, #12]
 800690a:	e04c      	b.n	80069a6 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 800690c:	231e      	movs	r3, #30
 800690e:	18fb      	adds	r3, r7, r3
 8006910:	2201      	movs	r2, #1
 8006912:	701a      	strb	r2, [r3, #0]
 8006914:	e047      	b.n	80069a6 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006916:	231f      	movs	r3, #31
 8006918:	18fb      	adds	r3, r7, r3
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	2b08      	cmp	r3, #8
 800691e:	d015      	beq.n	800694c <UART_SetConfig+0x1f0>
 8006920:	dc18      	bgt.n	8006954 <UART_SetConfig+0x1f8>
 8006922:	2b04      	cmp	r3, #4
 8006924:	d00d      	beq.n	8006942 <UART_SetConfig+0x1e6>
 8006926:	dc15      	bgt.n	8006954 <UART_SetConfig+0x1f8>
 8006928:	2b00      	cmp	r3, #0
 800692a:	d002      	beq.n	8006932 <UART_SetConfig+0x1d6>
 800692c:	2b02      	cmp	r3, #2
 800692e:	d005      	beq.n	800693c <UART_SetConfig+0x1e0>
 8006930:	e010      	b.n	8006954 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006932:	f7fd fd59 	bl	80043e8 <HAL_RCC_GetPCLK1Freq>
 8006936:	0003      	movs	r3, r0
 8006938:	61bb      	str	r3, [r7, #24]
        break;
 800693a:	e012      	b.n	8006962 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800693c:	4b26      	ldr	r3, [pc, #152]	; (80069d8 <UART_SetConfig+0x27c>)
 800693e:	61bb      	str	r3, [r7, #24]
        break;
 8006940:	e00f      	b.n	8006962 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006942:	f7fd fce3 	bl	800430c <HAL_RCC_GetSysClockFreq>
 8006946:	0003      	movs	r3, r0
 8006948:	61bb      	str	r3, [r7, #24]
        break;
 800694a:	e00a      	b.n	8006962 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800694c:	2380      	movs	r3, #128	; 0x80
 800694e:	021b      	lsls	r3, r3, #8
 8006950:	61bb      	str	r3, [r7, #24]
        break;
 8006952:	e006      	b.n	8006962 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8006954:	2300      	movs	r3, #0
 8006956:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006958:	231e      	movs	r3, #30
 800695a:	18fb      	adds	r3, r7, r3
 800695c:	2201      	movs	r2, #1
 800695e:	701a      	strb	r2, [r3, #0]
        break;
 8006960:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d01e      	beq.n	80069a6 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	085a      	lsrs	r2, r3, #1
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	18d2      	adds	r2, r2, r3
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	0019      	movs	r1, r3
 8006978:	0010      	movs	r0, r2
 800697a:	f7f9 fbc5 	bl	8000108 <__udivsi3>
 800697e:	0003      	movs	r3, r0
 8006980:	b29b      	uxth	r3, r3
 8006982:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	2b0f      	cmp	r3, #15
 8006988:	d909      	bls.n	800699e <UART_SetConfig+0x242>
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	2380      	movs	r3, #128	; 0x80
 800698e:	025b      	lsls	r3, r3, #9
 8006990:	429a      	cmp	r2, r3
 8006992:	d204      	bcs.n	800699e <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	693a      	ldr	r2, [r7, #16]
 800699a:	60da      	str	r2, [r3, #12]
 800699c:	e003      	b.n	80069a6 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 800699e:	231e      	movs	r3, #30
 80069a0:	18fb      	adds	r3, r7, r3
 80069a2:	2201      	movs	r2, #1
 80069a4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80069b2:	231e      	movs	r3, #30
 80069b4:	18fb      	adds	r3, r7, r3
 80069b6:	781b      	ldrb	r3, [r3, #0]
}
 80069b8:	0018      	movs	r0, r3
 80069ba:	46bd      	mov	sp, r7
 80069bc:	b008      	add	sp, #32
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	ffff69f3 	.word	0xffff69f3
 80069c4:	ffffcfff 	.word	0xffffcfff
 80069c8:	fffff4ff 	.word	0xfffff4ff
 80069cc:	40013800 	.word	0x40013800
 80069d0:	40021000 	.word	0x40021000
 80069d4:	40004400 	.word	0x40004400
 80069d8:	007a1200 	.word	0x007a1200

080069dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e8:	2201      	movs	r2, #1
 80069ea:	4013      	ands	r3, r2
 80069ec:	d00b      	beq.n	8006a06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	4a4a      	ldr	r2, [pc, #296]	; (8006b20 <UART_AdvFeatureConfig+0x144>)
 80069f6:	4013      	ands	r3, r2
 80069f8:	0019      	movs	r1, r3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	430a      	orrs	r2, r1
 8006a04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0a:	2202      	movs	r2, #2
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	d00b      	beq.n	8006a28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	4a43      	ldr	r2, [pc, #268]	; (8006b24 <UART_AdvFeatureConfig+0x148>)
 8006a18:	4013      	ands	r3, r2
 8006a1a:	0019      	movs	r1, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	430a      	orrs	r2, r1
 8006a26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2c:	2204      	movs	r2, #4
 8006a2e:	4013      	ands	r3, r2
 8006a30:	d00b      	beq.n	8006a4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	4a3b      	ldr	r2, [pc, #236]	; (8006b28 <UART_AdvFeatureConfig+0x14c>)
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	0019      	movs	r1, r3
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	430a      	orrs	r2, r1
 8006a48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4e:	2208      	movs	r2, #8
 8006a50:	4013      	ands	r3, r2
 8006a52:	d00b      	beq.n	8006a6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	4a34      	ldr	r2, [pc, #208]	; (8006b2c <UART_AdvFeatureConfig+0x150>)
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	0019      	movs	r1, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	430a      	orrs	r2, r1
 8006a6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a70:	2210      	movs	r2, #16
 8006a72:	4013      	ands	r3, r2
 8006a74:	d00b      	beq.n	8006a8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	4a2c      	ldr	r2, [pc, #176]	; (8006b30 <UART_AdvFeatureConfig+0x154>)
 8006a7e:	4013      	ands	r3, r2
 8006a80:	0019      	movs	r1, r3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	430a      	orrs	r2, r1
 8006a8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a92:	2220      	movs	r2, #32
 8006a94:	4013      	ands	r3, r2
 8006a96:	d00b      	beq.n	8006ab0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	4a25      	ldr	r2, [pc, #148]	; (8006b34 <UART_AdvFeatureConfig+0x158>)
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	0019      	movs	r1, r3
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	430a      	orrs	r2, r1
 8006aae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab4:	2240      	movs	r2, #64	; 0x40
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	d01d      	beq.n	8006af6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	4a1d      	ldr	r2, [pc, #116]	; (8006b38 <UART_AdvFeatureConfig+0x15c>)
 8006ac2:	4013      	ands	r3, r2
 8006ac4:	0019      	movs	r1, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	430a      	orrs	r2, r1
 8006ad0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ad6:	2380      	movs	r3, #128	; 0x80
 8006ad8:	035b      	lsls	r3, r3, #13
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d10b      	bne.n	8006af6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	4a15      	ldr	r2, [pc, #84]	; (8006b3c <UART_AdvFeatureConfig+0x160>)
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	0019      	movs	r1, r3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	430a      	orrs	r2, r1
 8006af4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afa:	2280      	movs	r2, #128	; 0x80
 8006afc:	4013      	ands	r3, r2
 8006afe:	d00b      	beq.n	8006b18 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	4a0e      	ldr	r2, [pc, #56]	; (8006b40 <UART_AdvFeatureConfig+0x164>)
 8006b08:	4013      	ands	r3, r2
 8006b0a:	0019      	movs	r1, r3
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	430a      	orrs	r2, r1
 8006b16:	605a      	str	r2, [r3, #4]
  }
}
 8006b18:	46c0      	nop			; (mov r8, r8)
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	b002      	add	sp, #8
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	fffdffff 	.word	0xfffdffff
 8006b24:	fffeffff 	.word	0xfffeffff
 8006b28:	fffbffff 	.word	0xfffbffff
 8006b2c:	ffff7fff 	.word	0xffff7fff
 8006b30:	ffffefff 	.word	0xffffefff
 8006b34:	ffffdfff 	.word	0xffffdfff
 8006b38:	ffefffff 	.word	0xffefffff
 8006b3c:	ff9fffff 	.word	0xff9fffff
 8006b40:	fff7ffff 	.word	0xfff7ffff

08006b44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b086      	sub	sp, #24
 8006b48:	af02      	add	r7, sp, #8
 8006b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2280      	movs	r2, #128	; 0x80
 8006b50:	2100      	movs	r1, #0
 8006b52:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b54:	f7fb f948 	bl	8001de8 <HAL_GetTick>
 8006b58:	0003      	movs	r3, r0
 8006b5a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2208      	movs	r2, #8
 8006b64:	4013      	ands	r3, r2
 8006b66:	2b08      	cmp	r3, #8
 8006b68:	d10c      	bne.n	8006b84 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2280      	movs	r2, #128	; 0x80
 8006b6e:	0391      	lsls	r1, r2, #14
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	4a17      	ldr	r2, [pc, #92]	; (8006bd0 <UART_CheckIdleState+0x8c>)
 8006b74:	9200      	str	r2, [sp, #0]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f000 f82c 	bl	8006bd4 <UART_WaitOnFlagUntilTimeout>
 8006b7c:	1e03      	subs	r3, r0, #0
 8006b7e:	d001      	beq.n	8006b84 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b80:	2303      	movs	r3, #3
 8006b82:	e021      	b.n	8006bc8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	2204      	movs	r2, #4
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	2b04      	cmp	r3, #4
 8006b90:	d10c      	bne.n	8006bac <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2280      	movs	r2, #128	; 0x80
 8006b96:	03d1      	lsls	r1, r2, #15
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	4a0d      	ldr	r2, [pc, #52]	; (8006bd0 <UART_CheckIdleState+0x8c>)
 8006b9c:	9200      	str	r2, [sp, #0]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f000 f818 	bl	8006bd4 <UART_WaitOnFlagUntilTimeout>
 8006ba4:	1e03      	subs	r3, r0, #0
 8006ba6:	d001      	beq.n	8006bac <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ba8:	2303      	movs	r3, #3
 8006baa:	e00d      	b.n	8006bc8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2220      	movs	r2, #32
 8006bb0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2220      	movs	r2, #32
 8006bb6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2274      	movs	r2, #116	; 0x74
 8006bc2:	2100      	movs	r1, #0
 8006bc4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	0018      	movs	r0, r3
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	b004      	add	sp, #16
 8006bce:	bd80      	pop	{r7, pc}
 8006bd0:	01ffffff 	.word	0x01ffffff

08006bd4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b094      	sub	sp, #80	; 0x50
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	60b9      	str	r1, [r7, #8]
 8006bde:	603b      	str	r3, [r7, #0]
 8006be0:	1dfb      	adds	r3, r7, #7
 8006be2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006be4:	e0a3      	b.n	8006d2e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006be6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006be8:	3301      	adds	r3, #1
 8006bea:	d100      	bne.n	8006bee <UART_WaitOnFlagUntilTimeout+0x1a>
 8006bec:	e09f      	b.n	8006d2e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bee:	f7fb f8fb 	bl	8001de8 <HAL_GetTick>
 8006bf2:	0002      	movs	r2, r0
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d302      	bcc.n	8006c04 <UART_WaitOnFlagUntilTimeout+0x30>
 8006bfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d13d      	bne.n	8006c80 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c04:	f3ef 8310 	mrs	r3, PRIMASK
 8006c08:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c0c:	647b      	str	r3, [r7, #68]	; 0x44
 8006c0e:	2301      	movs	r3, #1
 8006c10:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c14:	f383 8810 	msr	PRIMASK, r3
}
 8006c18:	46c0      	nop			; (mov r8, r8)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	494c      	ldr	r1, [pc, #304]	; (8006d58 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006c26:	400a      	ands	r2, r1
 8006c28:	601a      	str	r2, [r3, #0]
 8006c2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c2c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c30:	f383 8810 	msr	PRIMASK, r3
}
 8006c34:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c36:	f3ef 8310 	mrs	r3, PRIMASK
 8006c3a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c3e:	643b      	str	r3, [r7, #64]	; 0x40
 8006c40:	2301      	movs	r3, #1
 8006c42:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c46:	f383 8810 	msr	PRIMASK, r3
}
 8006c4a:	46c0      	nop			; (mov r8, r8)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	689a      	ldr	r2, [r3, #8]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	2101      	movs	r1, #1
 8006c58:	438a      	bics	r2, r1
 8006c5a:	609a      	str	r2, [r3, #8]
 8006c5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c62:	f383 8810 	msr	PRIMASK, r3
}
 8006c66:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2220      	movs	r2, #32
 8006c6c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2220      	movs	r2, #32
 8006c72:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2274      	movs	r2, #116	; 0x74
 8006c78:	2100      	movs	r1, #0
 8006c7a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006c7c:	2303      	movs	r3, #3
 8006c7e:	e067      	b.n	8006d50 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2204      	movs	r2, #4
 8006c88:	4013      	ands	r3, r2
 8006c8a:	d050      	beq.n	8006d2e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	69da      	ldr	r2, [r3, #28]
 8006c92:	2380      	movs	r3, #128	; 0x80
 8006c94:	011b      	lsls	r3, r3, #4
 8006c96:	401a      	ands	r2, r3
 8006c98:	2380      	movs	r3, #128	; 0x80
 8006c9a:	011b      	lsls	r3, r3, #4
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d146      	bne.n	8006d2e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2280      	movs	r2, #128	; 0x80
 8006ca6:	0112      	lsls	r2, r2, #4
 8006ca8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006caa:	f3ef 8310 	mrs	r3, PRIMASK
 8006cae:	613b      	str	r3, [r7, #16]
  return(result);
 8006cb0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	f383 8810 	msr	PRIMASK, r3
}
 8006cbe:	46c0      	nop			; (mov r8, r8)
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4923      	ldr	r1, [pc, #140]	; (8006d58 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006ccc:	400a      	ands	r2, r1
 8006cce:	601a      	str	r2, [r3, #0]
 8006cd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cd2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	f383 8810 	msr	PRIMASK, r3
}
 8006cda:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cdc:	f3ef 8310 	mrs	r3, PRIMASK
 8006ce0:	61fb      	str	r3, [r7, #28]
  return(result);
 8006ce2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ce4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cea:	6a3b      	ldr	r3, [r7, #32]
 8006cec:	f383 8810 	msr	PRIMASK, r3
}
 8006cf0:	46c0      	nop			; (mov r8, r8)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	689a      	ldr	r2, [r3, #8]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2101      	movs	r1, #1
 8006cfe:	438a      	bics	r2, r1
 8006d00:	609a      	str	r2, [r3, #8]
 8006d02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d04:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d08:	f383 8810 	msr	PRIMASK, r3
}
 8006d0c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2220      	movs	r2, #32
 8006d12:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2220      	movs	r2, #32
 8006d18:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2280      	movs	r2, #128	; 0x80
 8006d1e:	2120      	movs	r1, #32
 8006d20:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2274      	movs	r2, #116	; 0x74
 8006d26:	2100      	movs	r1, #0
 8006d28:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	e010      	b.n	8006d50 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	69db      	ldr	r3, [r3, #28]
 8006d34:	68ba      	ldr	r2, [r7, #8]
 8006d36:	4013      	ands	r3, r2
 8006d38:	68ba      	ldr	r2, [r7, #8]
 8006d3a:	1ad3      	subs	r3, r2, r3
 8006d3c:	425a      	negs	r2, r3
 8006d3e:	4153      	adcs	r3, r2
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	001a      	movs	r2, r3
 8006d44:	1dfb      	adds	r3, r7, #7
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d100      	bne.n	8006d4e <UART_WaitOnFlagUntilTimeout+0x17a>
 8006d4c:	e74b      	b.n	8006be6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	0018      	movs	r0, r3
 8006d52:	46bd      	mov	sp, r7
 8006d54:	b014      	add	sp, #80	; 0x50
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	fffffe5f 	.word	0xfffffe5f

08006d5c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b08c      	sub	sp, #48	; 0x30
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	60b9      	str	r1, [r7, #8]
 8006d66:	1dbb      	adds	r3, r7, #6
 8006d68:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	68ba      	ldr	r2, [r7, #8]
 8006d6e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	1dba      	adds	r2, r7, #6
 8006d74:	2158      	movs	r1, #88	; 0x58
 8006d76:	8812      	ldrh	r2, [r2, #0]
 8006d78:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	1dba      	adds	r2, r7, #6
 8006d7e:	215a      	movs	r1, #90	; 0x5a
 8006d80:	8812      	ldrh	r2, [r2, #0]
 8006d82:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2200      	movs	r2, #0
 8006d88:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	689a      	ldr	r2, [r3, #8]
 8006d8e:	2380      	movs	r3, #128	; 0x80
 8006d90:	015b      	lsls	r3, r3, #5
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d10d      	bne.n	8006db2 <UART_Start_Receive_IT+0x56>
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d104      	bne.n	8006da8 <UART_Start_Receive_IT+0x4c>
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	225c      	movs	r2, #92	; 0x5c
 8006da2:	4939      	ldr	r1, [pc, #228]	; (8006e88 <UART_Start_Receive_IT+0x12c>)
 8006da4:	5299      	strh	r1, [r3, r2]
 8006da6:	e01a      	b.n	8006dde <UART_Start_Receive_IT+0x82>
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	225c      	movs	r2, #92	; 0x5c
 8006dac:	21ff      	movs	r1, #255	; 0xff
 8006dae:	5299      	strh	r1, [r3, r2]
 8006db0:	e015      	b.n	8006dde <UART_Start_Receive_IT+0x82>
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d10d      	bne.n	8006dd6 <UART_Start_Receive_IT+0x7a>
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	691b      	ldr	r3, [r3, #16]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d104      	bne.n	8006dcc <UART_Start_Receive_IT+0x70>
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	225c      	movs	r2, #92	; 0x5c
 8006dc6:	21ff      	movs	r1, #255	; 0xff
 8006dc8:	5299      	strh	r1, [r3, r2]
 8006dca:	e008      	b.n	8006dde <UART_Start_Receive_IT+0x82>
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	225c      	movs	r2, #92	; 0x5c
 8006dd0:	217f      	movs	r1, #127	; 0x7f
 8006dd2:	5299      	strh	r1, [r3, r2]
 8006dd4:	e003      	b.n	8006dde <UART_Start_Receive_IT+0x82>
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	225c      	movs	r2, #92	; 0x5c
 8006dda:	2100      	movs	r1, #0
 8006ddc:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2280      	movs	r2, #128	; 0x80
 8006de2:	2100      	movs	r1, #0
 8006de4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2222      	movs	r2, #34	; 0x22
 8006dea:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dec:	f3ef 8310 	mrs	r3, PRIMASK
 8006df0:	61fb      	str	r3, [r7, #28]
  return(result);
 8006df2:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006df4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006df6:	2301      	movs	r3, #1
 8006df8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dfa:	6a3b      	ldr	r3, [r7, #32]
 8006dfc:	f383 8810 	msr	PRIMASK, r3
}
 8006e00:	46c0      	nop			; (mov r8, r8)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	689a      	ldr	r2, [r3, #8]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2101      	movs	r1, #1
 8006e0e:	430a      	orrs	r2, r1
 8006e10:	609a      	str	r2, [r3, #8]
 8006e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e14:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e18:	f383 8810 	msr	PRIMASK, r3
}
 8006e1c:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	689a      	ldr	r2, [r3, #8]
 8006e22:	2380      	movs	r3, #128	; 0x80
 8006e24:	015b      	lsls	r3, r3, #5
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d107      	bne.n	8006e3a <UART_Start_Receive_IT+0xde>
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d103      	bne.n	8006e3a <UART_Start_Receive_IT+0xde>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	4a15      	ldr	r2, [pc, #84]	; (8006e8c <UART_Start_Receive_IT+0x130>)
 8006e36:	665a      	str	r2, [r3, #100]	; 0x64
 8006e38:	e002      	b.n	8006e40 <UART_Start_Receive_IT+0xe4>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	4a14      	ldr	r2, [pc, #80]	; (8006e90 <UART_Start_Receive_IT+0x134>)
 8006e3e:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2274      	movs	r2, #116	; 0x74
 8006e44:	2100      	movs	r1, #0
 8006e46:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e48:	f3ef 8310 	mrs	r3, PRIMASK
 8006e4c:	613b      	str	r3, [r7, #16]
  return(result);
 8006e4e:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006e50:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e52:	2301      	movs	r3, #1
 8006e54:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	f383 8810 	msr	PRIMASK, r3
}
 8006e5c:	46c0      	nop			; (mov r8, r8)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2190      	movs	r1, #144	; 0x90
 8006e6a:	0049      	lsls	r1, r1, #1
 8006e6c:	430a      	orrs	r2, r1
 8006e6e:	601a      	str	r2, [r3, #0]
 8006e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e72:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	f383 8810 	msr	PRIMASK, r3
}
 8006e7a:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	0018      	movs	r0, r3
 8006e80:	46bd      	mov	sp, r7
 8006e82:	b00c      	add	sp, #48	; 0x30
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	46c0      	nop			; (mov r8, r8)
 8006e88:	000001ff 	.word	0x000001ff
 8006e8c:	08007145 	.word	0x08007145
 8006e90:	08006fdd 	.word	0x08006fdd

08006e94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b08e      	sub	sp, #56	; 0x38
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e9c:	f3ef 8310 	mrs	r3, PRIMASK
 8006ea0:	617b      	str	r3, [r7, #20]
  return(result);
 8006ea2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ea4:	637b      	str	r3, [r7, #52]	; 0x34
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	f383 8810 	msr	PRIMASK, r3
}
 8006eb0:	46c0      	nop			; (mov r8, r8)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4925      	ldr	r1, [pc, #148]	; (8006f54 <UART_EndRxTransfer+0xc0>)
 8006ebe:	400a      	ands	r2, r1
 8006ec0:	601a      	str	r2, [r3, #0]
 8006ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ec4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	f383 8810 	msr	PRIMASK, r3
}
 8006ecc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ece:	f3ef 8310 	mrs	r3, PRIMASK
 8006ed2:	623b      	str	r3, [r7, #32]
  return(result);
 8006ed4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ed6:	633b      	str	r3, [r7, #48]	; 0x30
 8006ed8:	2301      	movs	r3, #1
 8006eda:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ede:	f383 8810 	msr	PRIMASK, r3
}
 8006ee2:	46c0      	nop			; (mov r8, r8)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	689a      	ldr	r2, [r3, #8]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2101      	movs	r1, #1
 8006ef0:	438a      	bics	r2, r1
 8006ef2:	609a      	str	r2, [r3, #8]
 8006ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efa:	f383 8810 	msr	PRIMASK, r3
}
 8006efe:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d118      	bne.n	8006f3a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f08:	f3ef 8310 	mrs	r3, PRIMASK
 8006f0c:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f0e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f12:	2301      	movs	r3, #1
 8006f14:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f383 8810 	msr	PRIMASK, r3
}
 8006f1c:	46c0      	nop			; (mov r8, r8)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2110      	movs	r1, #16
 8006f2a:	438a      	bics	r2, r1
 8006f2c:	601a      	str	r2, [r3, #0]
 8006f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	f383 8810 	msr	PRIMASK, r3
}
 8006f38:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2220      	movs	r2, #32
 8006f3e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006f4c:	46c0      	nop			; (mov r8, r8)
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	b00e      	add	sp, #56	; 0x38
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	fffffedf 	.word	0xfffffedf

08006f58 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b084      	sub	sp, #16
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	225a      	movs	r2, #90	; 0x5a
 8006f6a:	2100      	movs	r1, #0
 8006f6c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2252      	movs	r2, #82	; 0x52
 8006f72:	2100      	movs	r1, #0
 8006f74:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	0018      	movs	r0, r3
 8006f7a:	f7ff fbdb 	bl	8006734 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f7e:	46c0      	nop			; (mov r8, r8)
 8006f80:	46bd      	mov	sp, r7
 8006f82:	b004      	add	sp, #16
 8006f84:	bd80      	pop	{r7, pc}

08006f86 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b086      	sub	sp, #24
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f8e:	f3ef 8310 	mrs	r3, PRIMASK
 8006f92:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f94:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f96:	617b      	str	r3, [r7, #20]
 8006f98:	2301      	movs	r3, #1
 8006f9a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f383 8810 	msr	PRIMASK, r3
}
 8006fa2:	46c0      	nop			; (mov r8, r8)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2140      	movs	r1, #64	; 0x40
 8006fb0:	438a      	bics	r2, r1
 8006fb2:	601a      	str	r2, [r3, #0]
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	f383 8810 	msr	PRIMASK, r3
}
 8006fbe:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2220      	movs	r2, #32
 8006fc4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	0018      	movs	r0, r3
 8006fd0:	f7ff fba8 	bl	8006724 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fd4:	46c0      	nop			; (mov r8, r8)
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	b006      	add	sp, #24
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b090      	sub	sp, #64	; 0x40
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006fe4:	203e      	movs	r0, #62	; 0x3e
 8006fe6:	183b      	adds	r3, r7, r0
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	215c      	movs	r1, #92	; 0x5c
 8006fec:	5a52      	ldrh	r2, [r2, r1]
 8006fee:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ff4:	2b22      	cmp	r3, #34	; 0x22
 8006ff6:	d000      	beq.n	8006ffa <UART_RxISR_8BIT+0x1e>
 8006ff8:	e095      	b.n	8007126 <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	213c      	movs	r1, #60	; 0x3c
 8007000:	187b      	adds	r3, r7, r1
 8007002:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8007004:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007006:	187b      	adds	r3, r7, r1
 8007008:	881b      	ldrh	r3, [r3, #0]
 800700a:	b2da      	uxtb	r2, r3
 800700c:	183b      	adds	r3, r7, r0
 800700e:	881b      	ldrh	r3, [r3, #0]
 8007010:	b2d9      	uxtb	r1, r3
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007016:	400a      	ands	r2, r1
 8007018:	b2d2      	uxtb	r2, r2
 800701a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007020:	1c5a      	adds	r2, r3, #1
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	225a      	movs	r2, #90	; 0x5a
 800702a:	5a9b      	ldrh	r3, [r3, r2]
 800702c:	b29b      	uxth	r3, r3
 800702e:	3b01      	subs	r3, #1
 8007030:	b299      	uxth	r1, r3
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	225a      	movs	r2, #90	; 0x5a
 8007036:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	225a      	movs	r2, #90	; 0x5a
 800703c:	5a9b      	ldrh	r3, [r3, r2]
 800703e:	b29b      	uxth	r3, r3
 8007040:	2b00      	cmp	r3, #0
 8007042:	d178      	bne.n	8007136 <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007044:	f3ef 8310 	mrs	r3, PRIMASK
 8007048:	61bb      	str	r3, [r7, #24]
  return(result);
 800704a:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800704c:	63bb      	str	r3, [r7, #56]	; 0x38
 800704e:	2301      	movs	r3, #1
 8007050:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	f383 8810 	msr	PRIMASK, r3
}
 8007058:	46c0      	nop			; (mov r8, r8)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4936      	ldr	r1, [pc, #216]	; (8007140 <UART_RxISR_8BIT+0x164>)
 8007066:	400a      	ands	r2, r1
 8007068:	601a      	str	r2, [r3, #0]
 800706a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800706e:	6a3b      	ldr	r3, [r7, #32]
 8007070:	f383 8810 	msr	PRIMASK, r3
}
 8007074:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007076:	f3ef 8310 	mrs	r3, PRIMASK
 800707a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800707c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800707e:	637b      	str	r3, [r7, #52]	; 0x34
 8007080:	2301      	movs	r3, #1
 8007082:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007086:	f383 8810 	msr	PRIMASK, r3
}
 800708a:	46c0      	nop			; (mov r8, r8)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	689a      	ldr	r2, [r3, #8]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2101      	movs	r1, #1
 8007098:	438a      	bics	r2, r1
 800709a:	609a      	str	r2, [r3, #8]
 800709c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800709e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a2:	f383 8810 	msr	PRIMASK, r3
}
 80070a6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2220      	movs	r2, #32
 80070ac:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d12f      	bne.n	800711c <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070c2:	f3ef 8310 	mrs	r3, PRIMASK
 80070c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80070c8:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070ca:	633b      	str	r3, [r7, #48]	; 0x30
 80070cc:	2301      	movs	r3, #1
 80070ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	f383 8810 	msr	PRIMASK, r3
}
 80070d6:	46c0      	nop			; (mov r8, r8)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	2110      	movs	r1, #16
 80070e4:	438a      	bics	r2, r1
 80070e6:	601a      	str	r2, [r3, #0]
 80070e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	f383 8810 	msr	PRIMASK, r3
}
 80070f2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	69db      	ldr	r3, [r3, #28]
 80070fa:	2210      	movs	r2, #16
 80070fc:	4013      	ands	r3, r2
 80070fe:	2b10      	cmp	r3, #16
 8007100:	d103      	bne.n	800710a <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2210      	movs	r2, #16
 8007108:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2258      	movs	r2, #88	; 0x58
 800710e:	5a9a      	ldrh	r2, [r3, r2]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	0011      	movs	r1, r2
 8007114:	0018      	movs	r0, r3
 8007116:	f7ff fb15 	bl	8006744 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800711a:	e00c      	b.n	8007136 <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	0018      	movs	r0, r3
 8007120:	f7f9 fc6c 	bl	80009fc <HAL_UART_RxCpltCallback>
}
 8007124:	e007      	b.n	8007136 <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	699a      	ldr	r2, [r3, #24]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2108      	movs	r1, #8
 8007132:	430a      	orrs	r2, r1
 8007134:	619a      	str	r2, [r3, #24]
}
 8007136:	46c0      	nop			; (mov r8, r8)
 8007138:	46bd      	mov	sp, r7
 800713a:	b010      	add	sp, #64	; 0x40
 800713c:	bd80      	pop	{r7, pc}
 800713e:	46c0      	nop			; (mov r8, r8)
 8007140:	fffffedf 	.word	0xfffffedf

08007144 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b090      	sub	sp, #64	; 0x40
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800714c:	203e      	movs	r0, #62	; 0x3e
 800714e:	183b      	adds	r3, r7, r0
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	215c      	movs	r1, #92	; 0x5c
 8007154:	5a52      	ldrh	r2, [r2, r1]
 8007156:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800715c:	2b22      	cmp	r3, #34	; 0x22
 800715e:	d000      	beq.n	8007162 <UART_RxISR_16BIT+0x1e>
 8007160:	e095      	b.n	800728e <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	213c      	movs	r1, #60	; 0x3c
 8007168:	187b      	adds	r3, r7, r1
 800716a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800716c:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007172:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8007174:	187b      	adds	r3, r7, r1
 8007176:	183a      	adds	r2, r7, r0
 8007178:	881b      	ldrh	r3, [r3, #0]
 800717a:	8812      	ldrh	r2, [r2, #0]
 800717c:	4013      	ands	r3, r2
 800717e:	b29a      	uxth	r2, r3
 8007180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007182:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007188:	1c9a      	adds	r2, r3, #2
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	225a      	movs	r2, #90	; 0x5a
 8007192:	5a9b      	ldrh	r3, [r3, r2]
 8007194:	b29b      	uxth	r3, r3
 8007196:	3b01      	subs	r3, #1
 8007198:	b299      	uxth	r1, r3
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	225a      	movs	r2, #90	; 0x5a
 800719e:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	225a      	movs	r2, #90	; 0x5a
 80071a4:	5a9b      	ldrh	r3, [r3, r2]
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d178      	bne.n	800729e <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071ac:	f3ef 8310 	mrs	r3, PRIMASK
 80071b0:	617b      	str	r3, [r7, #20]
  return(result);
 80071b2:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071b4:	637b      	str	r3, [r7, #52]	; 0x34
 80071b6:	2301      	movs	r3, #1
 80071b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	f383 8810 	msr	PRIMASK, r3
}
 80071c0:	46c0      	nop			; (mov r8, r8)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4936      	ldr	r1, [pc, #216]	; (80072a8 <UART_RxISR_16BIT+0x164>)
 80071ce:	400a      	ands	r2, r1
 80071d0:	601a      	str	r2, [r3, #0]
 80071d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	f383 8810 	msr	PRIMASK, r3
}
 80071dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071de:	f3ef 8310 	mrs	r3, PRIMASK
 80071e2:	623b      	str	r3, [r7, #32]
  return(result);
 80071e4:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071e6:	633b      	str	r3, [r7, #48]	; 0x30
 80071e8:	2301      	movs	r3, #1
 80071ea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ee:	f383 8810 	msr	PRIMASK, r3
}
 80071f2:	46c0      	nop			; (mov r8, r8)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	689a      	ldr	r2, [r3, #8]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	2101      	movs	r1, #1
 8007200:	438a      	bics	r2, r1
 8007202:	609a      	str	r2, [r3, #8]
 8007204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007206:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800720a:	f383 8810 	msr	PRIMASK, r3
}
 800720e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2220      	movs	r2, #32
 8007214:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007220:	2b01      	cmp	r3, #1
 8007222:	d12f      	bne.n	8007284 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800722a:	f3ef 8310 	mrs	r3, PRIMASK
 800722e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007230:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007232:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007234:	2301      	movs	r3, #1
 8007236:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f383 8810 	msr	PRIMASK, r3
}
 800723e:	46c0      	nop			; (mov r8, r8)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2110      	movs	r1, #16
 800724c:	438a      	bics	r2, r1
 800724e:	601a      	str	r2, [r3, #0]
 8007250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007252:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	f383 8810 	msr	PRIMASK, r3
}
 800725a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	69db      	ldr	r3, [r3, #28]
 8007262:	2210      	movs	r2, #16
 8007264:	4013      	ands	r3, r2
 8007266:	2b10      	cmp	r3, #16
 8007268:	d103      	bne.n	8007272 <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2210      	movs	r2, #16
 8007270:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2258      	movs	r2, #88	; 0x58
 8007276:	5a9a      	ldrh	r2, [r3, r2]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	0011      	movs	r1, r2
 800727c:	0018      	movs	r0, r3
 800727e:	f7ff fa61 	bl	8006744 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007282:	e00c      	b.n	800729e <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	0018      	movs	r0, r3
 8007288:	f7f9 fbb8 	bl	80009fc <HAL_UART_RxCpltCallback>
}
 800728c:	e007      	b.n	800729e <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	699a      	ldr	r2, [r3, #24]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2108      	movs	r1, #8
 800729a:	430a      	orrs	r2, r1
 800729c:	619a      	str	r2, [r3, #24]
}
 800729e:	46c0      	nop			; (mov r8, r8)
 80072a0:	46bd      	mov	sp, r7
 80072a2:	b010      	add	sp, #64	; 0x40
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	46c0      	nop			; (mov r8, r8)
 80072a8:	fffffedf 	.word	0xfffffedf

080072ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80072b4:	46c0      	nop			; (mov r8, r8)
 80072b6:	46bd      	mov	sp, r7
 80072b8:	b002      	add	sp, #8
 80072ba:	bd80      	pop	{r7, pc}

080072bc <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b088      	sub	sp, #32
 80072c0:	af02      	add	r7, sp, #8
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	1d3b      	adds	r3, r7, #4
 80072c6:	6019      	str	r1, [r3, #0]
 80072c8:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072ca:	2317      	movs	r3, #23
 80072cc:	18fb      	adds	r3, r7, r3
 80072ce:	2200      	movs	r2, #0
 80072d0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2274      	movs	r2, #116	; 0x74
 80072d6:	5c9b      	ldrb	r3, [r3, r2]
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d101      	bne.n	80072e0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x24>
 80072dc:	2302      	movs	r3, #2
 80072de:	e04a      	b.n	8007376 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xba>
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2274      	movs	r2, #116	; 0x74
 80072e4:	2101      	movs	r1, #1
 80072e6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2224      	movs	r2, #36	; 0x24
 80072ec:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2101      	movs	r1, #1
 80072fa:	438a      	bics	r2, r1
 80072fc:	601a      	str	r2, [r3, #0]

#if defined(USART_CR3_WUS)
  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	4a1e      	ldr	r2, [pc, #120]	; (8007380 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc4>)
 8007306:	4013      	ands	r3, r2
 8007308:	0019      	movs	r1, r3
 800730a:	1d3b      	adds	r3, r7, #4
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	430a      	orrs	r2, r1
 8007314:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_WUS */

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8007316:	1d3b      	adds	r3, r7, #4
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d105      	bne.n	800732a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x6e>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800731e:	1d3b      	adds	r3, r7, #4
 8007320:	68f8      	ldr	r0, [r7, #12]
 8007322:	6819      	ldr	r1, [r3, #0]
 8007324:	685a      	ldr	r2, [r3, #4]
 8007326:	f000 f860 	bl	80073ea <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	2101      	movs	r1, #1
 8007336:	430a      	orrs	r2, r1
 8007338:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800733a:	f7fa fd55 	bl	8001de8 <HAL_GetTick>
 800733e:	0003      	movs	r3, r0
 8007340:	613b      	str	r3, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	2280      	movs	r2, #128	; 0x80
 8007346:	03d1      	lsls	r1, r2, #15
 8007348:	68f8      	ldr	r0, [r7, #12]
 800734a:	4a0e      	ldr	r2, [pc, #56]	; (8007384 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc8>)
 800734c:	9200      	str	r2, [sp, #0]
 800734e:	2200      	movs	r2, #0
 8007350:	f7ff fc40 	bl	8006bd4 <UART_WaitOnFlagUntilTimeout>
 8007354:	1e03      	subs	r3, r0, #0
 8007356:	d004      	beq.n	8007362 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa6>
  {
    status = HAL_TIMEOUT;
 8007358:	2317      	movs	r3, #23
 800735a:	18fb      	adds	r3, r7, r3
 800735c:	2203      	movs	r2, #3
 800735e:	701a      	strb	r2, [r3, #0]
 8007360:	e002      	b.n	8007368 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xac>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2220      	movs	r2, #32
 8007366:	679a      	str	r2, [r3, #120]	; 0x78
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2274      	movs	r2, #116	; 0x74
 800736c:	2100      	movs	r1, #0
 800736e:	5499      	strb	r1, [r3, r2]

  return status;
 8007370:	2317      	movs	r3, #23
 8007372:	18fb      	adds	r3, r7, r3
 8007374:	781b      	ldrb	r3, [r3, #0]
}
 8007376:	0018      	movs	r0, r3
 8007378:	46bd      	mov	sp, r7
 800737a:	b006      	add	sp, #24
 800737c:	bd80      	pop	{r7, pc}
 800737e:	46c0      	nop			; (mov r8, r8)
 8007380:	ffcfffff 	.word	0xffcfffff
 8007384:	01ffffff 	.word	0x01ffffff

08007388 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b086      	sub	sp, #24
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2274      	movs	r2, #116	; 0x74
 8007394:	5c9b      	ldrb	r3, [r3, r2]
 8007396:	2b01      	cmp	r3, #1
 8007398:	d101      	bne.n	800739e <HAL_UARTEx_EnableStopMode+0x16>
 800739a:	2302      	movs	r3, #2
 800739c:	e021      	b.n	80073e2 <HAL_UARTEx_EnableStopMode+0x5a>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2274      	movs	r2, #116	; 0x74
 80073a2:	2101      	movs	r1, #1
 80073a4:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073a6:	f3ef 8310 	mrs	r3, PRIMASK
 80073aa:	60bb      	str	r3, [r7, #8]
  return(result);
 80073ac:	68bb      	ldr	r3, [r7, #8]

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 80073ae:	617b      	str	r3, [r7, #20]
 80073b0:	2301      	movs	r3, #1
 80073b2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f383 8810 	msr	PRIMASK, r3
}
 80073ba:	46c0      	nop			; (mov r8, r8)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2102      	movs	r1, #2
 80073c8:	430a      	orrs	r2, r1
 80073ca:	601a      	str	r2, [r3, #0]
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	f383 8810 	msr	PRIMASK, r3
}
 80073d6:	46c0      	nop			; (mov r8, r8)

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2274      	movs	r2, #116	; 0x74
 80073dc:	2100      	movs	r1, #0
 80073de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	0018      	movs	r0, r3
 80073e4:	46bd      	mov	sp, r7
 80073e6:	b006      	add	sp, #24
 80073e8:	bd80      	pop	{r7, pc}

080073ea <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80073ea:	b580      	push	{r7, lr}
 80073ec:	b084      	sub	sp, #16
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	60f8      	str	r0, [r7, #12]
 80073f2:	1d3b      	adds	r3, r7, #4
 80073f4:	6019      	str	r1, [r3, #0]
 80073f6:	605a      	str	r2, [r3, #4]
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	2210      	movs	r2, #16
 8007400:	4393      	bics	r3, r2
 8007402:	001a      	movs	r2, r3
 8007404:	1d3b      	adds	r3, r7, #4
 8007406:	889b      	ldrh	r3, [r3, #4]
 8007408:	0019      	movs	r1, r3
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	430a      	orrs	r2, r1
 8007410:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	021b      	lsls	r3, r3, #8
 800741a:	0a19      	lsrs	r1, r3, #8
 800741c:	1d3b      	adds	r3, r7, #4
 800741e:	799b      	ldrb	r3, [r3, #6]
 8007420:	061a      	lsls	r2, r3, #24
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	430a      	orrs	r2, r1
 8007428:	605a      	str	r2, [r3, #4]
}
 800742a:	46c0      	nop			; (mov r8, r8)
 800742c:	46bd      	mov	sp, r7
 800742e:	b004      	add	sp, #16
 8007430:	bd80      	pop	{r7, pc}
	...

08007434 <__libc_init_array>:
 8007434:	b570      	push	{r4, r5, r6, lr}
 8007436:	2600      	movs	r6, #0
 8007438:	4d0c      	ldr	r5, [pc, #48]	; (800746c <__libc_init_array+0x38>)
 800743a:	4c0d      	ldr	r4, [pc, #52]	; (8007470 <__libc_init_array+0x3c>)
 800743c:	1b64      	subs	r4, r4, r5
 800743e:	10a4      	asrs	r4, r4, #2
 8007440:	42a6      	cmp	r6, r4
 8007442:	d109      	bne.n	8007458 <__libc_init_array+0x24>
 8007444:	2600      	movs	r6, #0
 8007446:	f000 f821 	bl	800748c <_init>
 800744a:	4d0a      	ldr	r5, [pc, #40]	; (8007474 <__libc_init_array+0x40>)
 800744c:	4c0a      	ldr	r4, [pc, #40]	; (8007478 <__libc_init_array+0x44>)
 800744e:	1b64      	subs	r4, r4, r5
 8007450:	10a4      	asrs	r4, r4, #2
 8007452:	42a6      	cmp	r6, r4
 8007454:	d105      	bne.n	8007462 <__libc_init_array+0x2e>
 8007456:	bd70      	pop	{r4, r5, r6, pc}
 8007458:	00b3      	lsls	r3, r6, #2
 800745a:	58eb      	ldr	r3, [r5, r3]
 800745c:	4798      	blx	r3
 800745e:	3601      	adds	r6, #1
 8007460:	e7ee      	b.n	8007440 <__libc_init_array+0xc>
 8007462:	00b3      	lsls	r3, r6, #2
 8007464:	58eb      	ldr	r3, [r5, r3]
 8007466:	4798      	blx	r3
 8007468:	3601      	adds	r6, #1
 800746a:	e7f2      	b.n	8007452 <__libc_init_array+0x1e>
 800746c:	080076c0 	.word	0x080076c0
 8007470:	080076c0 	.word	0x080076c0
 8007474:	080076c0 	.word	0x080076c0
 8007478:	080076c4 	.word	0x080076c4

0800747c <memset>:
 800747c:	0003      	movs	r3, r0
 800747e:	1882      	adds	r2, r0, r2
 8007480:	4293      	cmp	r3, r2
 8007482:	d100      	bne.n	8007486 <memset+0xa>
 8007484:	4770      	bx	lr
 8007486:	7019      	strb	r1, [r3, #0]
 8007488:	3301      	adds	r3, #1
 800748a:	e7f9      	b.n	8007480 <memset+0x4>

0800748c <_init>:
 800748c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800748e:	46c0      	nop			; (mov r8, r8)
 8007490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007492:	bc08      	pop	{r3}
 8007494:	469e      	mov	lr, r3
 8007496:	4770      	bx	lr

08007498 <_fini>:
 8007498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800749a:	46c0      	nop			; (mov r8, r8)
 800749c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800749e:	bc08      	pop	{r3}
 80074a0:	469e      	mov	lr, r3
 80074a2:	4770      	bx	lr
