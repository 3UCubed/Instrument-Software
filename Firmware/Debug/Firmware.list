
Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070ac  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  0800716c  0800716c  0001716c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007390  08007390  00020050  2**0
                  CONTENTS
  4 .ARM          00000000  08007390  08007390  00020050  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007390  08007390  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007390  08007390  00017390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007394  08007394  00017394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  08007398  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000424  20000050  080073e8  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000474  080073e8  00020474  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b15  00000000  00000000  000360a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001378  00000000  00000000  00038bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001260  00000000  00000000  00039f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000133bf  00000000  00000000  0003b190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017d5b  00000000  00000000  0004e54f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00074d01  00000000  00000000  000662aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dafab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004754  00000000  00000000  000daffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000050 	.word	0x20000050
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007154 	.word	0x08007154

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000054 	.word	0x20000054
 8000104:	08007154 	.word	0x08007154

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <add_to_gpiobuf>:

uint8_t PMT_ON = 1;
uint8_t ERPA_ON = 1;
uint8_t HK_ON = 1;

void add_to_gpiobuf(const char *str) {
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
	int len = strlen(str);
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	0018      	movs	r0, r3
 800023c:	f7ff ff64 	bl	8000108 <strlen>
 8000240:	0003      	movs	r3, r0
 8000242:	60fb      	str	r3, [r7, #12]

	if (writeIndex + len < BUFFER_SIZE) {
 8000244:	4b0e      	ldr	r3, [pc, #56]	; (8000280 <add_to_gpiobuf+0x50>)
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	001a      	movs	r2, r3
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	18d3      	adds	r3, r2, r3
 800024e:	2b63      	cmp	r3, #99	; 0x63
 8000250:	dc11      	bgt.n	8000276 <add_to_gpiobuf+0x46>
		strncpy(&gpio_buf[writeIndex], str, len);
 8000252:	4b0b      	ldr	r3, [pc, #44]	; (8000280 <add_to_gpiobuf+0x50>)
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	001a      	movs	r2, r3
 8000258:	4b0a      	ldr	r3, [pc, #40]	; (8000284 <add_to_gpiobuf+0x54>)
 800025a:	18d3      	adds	r3, r2, r3
 800025c:	68fa      	ldr	r2, [r7, #12]
 800025e:	6879      	ldr	r1, [r7, #4]
 8000260:	0018      	movs	r0, r3
 8000262:	f006 ff63 	bl	800712c <strncpy>
		writeIndex += len;
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	b2da      	uxtb	r2, r3
 800026a:	4b05      	ldr	r3, [pc, #20]	; (8000280 <add_to_gpiobuf+0x50>)
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	18d3      	adds	r3, r2, r3
 8000270:	b2da      	uxtb	r2, r3
 8000272:	4b03      	ldr	r3, [pc, #12]	; (8000280 <add_to_gpiobuf+0x50>)
 8000274:	701a      	strb	r2, [r3, #0]
	}

}
 8000276:	46c0      	nop			; (mov r8, r8)
 8000278:	46bd      	mov	sp, r7
 800027a:	b004      	add	sp, #16
 800027c:	bd80      	pop	{r7, pc}
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	20000390 	.word	0x20000390
 8000284:	2000032c 	.word	0x2000032c

08000288 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8000288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800028a:	b091      	sub	sp, #68	; 0x44
 800028c:	af02      	add	r7, sp, #8
 800028e:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8000290:	687a      	ldr	r2, [r7, #4]
 8000292:	4bda      	ldr	r3, [pc, #872]	; (80005fc <HAL_TIM_OC_DelayElapsedCallback+0x374>)
 8000294:	429a      	cmp	r2, r3
 8000296:	d001      	beq.n	800029c <HAL_TIM_OC_DelayElapsedCallback+0x14>
 8000298:	f000 fba8 	bl	80009ec <HAL_TIM_OC_DelayElapsedCallback+0x764>
		if (!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8))) { //check pin state
 800029c:	2380      	movs	r3, #128	; 0x80
 800029e:	005a      	lsls	r2, r3, #1
 80002a0:	2390      	movs	r3, #144	; 0x90
 80002a2:	05db      	lsls	r3, r3, #23
 80002a4:	0011      	movs	r1, r2
 80002a6:	0018      	movs	r0, r3
 80002a8:	f002 fec2 	bl	8003030 <HAL_GPIO_ReadPin>
 80002ac:	1e03      	subs	r3, r0, #0
 80002ae:	d001      	beq.n	80002b4 <HAL_TIM_OC_DelayElapsedCallback+0x2c>
 80002b0:	f000 fbe6 	bl	8000a80 <HAL_TIM_OC_DelayElapsedCallback+0x7f8>
			if (ERPA_ON) {
 80002b4:	4bd2      	ldr	r3, [pc, #840]	; (8000600 <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d100      	bne.n	80002be <HAL_TIM_OC_DelayElapsedCallback+0x36>
 80002bc:	e0c2      	b.n	8000444 <HAL_TIM_OC_DelayElapsedCallback+0x1bc>
				 * Steps DAC
				 * +/- 0.5v Every 100ms
				 */

				/* Write to SPI (begin transfer?) */
				HAL_SPI_Transmit(&hspi1, (uint8_t*) &WRITE, 1, 1);
 80002be:	49d1      	ldr	r1, [pc, #836]	; (8000604 <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 80002c0:	48d1      	ldr	r0, [pc, #836]	; (8000608 <HAL_TIM_OC_DelayElapsedCallback+0x380>)
 80002c2:	2301      	movs	r3, #1
 80002c4:	2201      	movs	r2, #1
 80002c6:	f004 fa25 	bl	8004714 <HAL_SPI_Transmit>

				while (!(SPI1->SR))
 80002ca:	46c0      	nop			; (mov r8, r8)
 80002cc:	4bcf      	ldr	r3, [pc, #828]	; (800060c <HAL_TIM_OC_DelayElapsedCallback+0x384>)
 80002ce:	689b      	ldr	r3, [r3, #8]
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d0fb      	beq.n	80002cc <HAL_TIM_OC_DelayElapsedCallback+0x44>
					;

				raw = SPI1->DR;
 80002d4:	4bcd      	ldr	r3, [pc, #820]	; (800060c <HAL_TIM_OC_DelayElapsedCallback+0x384>)
 80002d6:	68db      	ldr	r3, [r3, #12]
 80002d8:	001a      	movs	r2, r3
 80002da:	4bcd      	ldr	r3, [pc, #820]	; (8000610 <HAL_TIM_OC_DelayElapsedCallback+0x388>)
 80002dc:	601a      	str	r2, [r3, #0]

				DAC->DHR12R1 = DAC_OUT[step];
 80002de:	4bcd      	ldr	r3, [pc, #820]	; (8000614 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	0019      	movs	r1, r3
 80002e4:	4bcc      	ldr	r3, [pc, #816]	; (8000618 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 80002e6:	4acd      	ldr	r2, [pc, #820]	; (800061c <HAL_TIM_OC_DelayElapsedCallback+0x394>)
 80002e8:	0089      	lsls	r1, r1, #2
 80002ea:	588a      	ldr	r2, [r1, r2]
 80002ec:	609a      	str	r2, [r3, #8]

				HAL_ADC_Start_DMA(&hadc, (uint32_t*) adcResultsDMA,
 80002ee:	2311      	movs	r3, #17
 80002f0:	001a      	movs	r2, r3
 80002f2:	49cb      	ldr	r1, [pc, #812]	; (8000620 <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 80002f4:	4bcb      	ldr	r3, [pc, #812]	; (8000624 <HAL_TIM_OC_DelayElapsedCallback+0x39c>)
 80002f6:	0018      	movs	r0, r3
 80002f8:	f001 feec 	bl	80020d4 <HAL_ADC_Start_DMA>
						adcChannelCount);
				uint16_t PA0 = adcResultsDMA[0]; //ADC_IN0, END_mon: entrance/collimator monitor
 80002fc:	212e      	movs	r1, #46	; 0x2e
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	4ac7      	ldr	r2, [pc, #796]	; (8000620 <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 8000302:	8812      	ldrh	r2, [r2, #0]
 8000304:	801a      	strh	r2, [r3, #0]
				uint16_t PA7 = adcResultsDMA[6]; //ADC_IN7, SWP_mon: Sweep voltage monitor
 8000306:	202c      	movs	r0, #44	; 0x2c
 8000308:	183b      	adds	r3, r7, r0
 800030a:	4ac5      	ldr	r2, [pc, #788]	; (8000620 <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 800030c:	8992      	ldrh	r2, [r2, #12]
 800030e:	801a      	strh	r2, [r3, #0]
				uint16_t PB0 = adcResultsDMA[7]; //ADC_IN8, TMP 1: Sweep temperature
 8000310:	242a      	movs	r4, #42	; 0x2a
 8000312:	193b      	adds	r3, r7, r4
 8000314:	4ac2      	ldr	r2, [pc, #776]	; (8000620 <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 8000316:	89d2      	ldrh	r2, [r2, #14]
 8000318:	801a      	strh	r2, [r3, #0]
				uint16_t PB1 = adcResultsDMA[8]; //ADC_IN9, TMP 2: feedbacks
 800031a:	2528      	movs	r5, #40	; 0x28
 800031c:	197b      	adds	r3, r7, r5
 800031e:	4ac0      	ldr	r2, [pc, #768]	; (8000620 <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 8000320:	8a12      	ldrh	r2, [r2, #16]
 8000322:	801a      	strh	r2, [r3, #0]

				erpa_buf[0] = erpa_sync; // ERPA SYNC 0xAA MSB
 8000324:	22aa      	movs	r2, #170	; 0xaa
 8000326:	4bc0      	ldr	r3, [pc, #768]	; (8000628 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 8000328:	701a      	strb	r2, [r3, #0]
				erpa_buf[1] = erpa_sync; // ERPA SYNC 0xAA LSB
 800032a:	22aa      	movs	r2, #170	; 0xaa
 800032c:	4bbe      	ldr	r3, [pc, #760]	; (8000628 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 800032e:	705a      	strb	r2, [r3, #1]
				erpa_buf[2] = ((erpa_seq & 0xFF00) >> 8); // ERPA SEQ # MSB
 8000330:	4bbe      	ldr	r3, [pc, #760]	; (800062c <HAL_TIM_OC_DelayElapsedCallback+0x3a4>)
 8000332:	881b      	ldrh	r3, [r3, #0]
 8000334:	0a1b      	lsrs	r3, r3, #8
 8000336:	b29b      	uxth	r3, r3
 8000338:	b2da      	uxtb	r2, r3
 800033a:	4bbb      	ldr	r3, [pc, #748]	; (8000628 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 800033c:	709a      	strb	r2, [r3, #2]
				erpa_buf[3] = (erpa_seq & 0xFF); // ERPA SEQ # MSB
 800033e:	4bbb      	ldr	r3, [pc, #748]	; (800062c <HAL_TIM_OC_DelayElapsedCallback+0x3a4>)
 8000340:	881b      	ldrh	r3, [r3, #0]
 8000342:	b2da      	uxtb	r2, r3
 8000344:	4bb8      	ldr	r3, [pc, #736]	; (8000628 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 8000346:	70da      	strb	r2, [r3, #3]
				erpa_buf[4] = ((raw & 0xFF00) >> 8); // ERPA eADC MSB
 8000348:	4bb1      	ldr	r3, [pc, #708]	; (8000610 <HAL_TIM_OC_DelayElapsedCallback+0x388>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	121b      	asrs	r3, r3, #8
 800034e:	b2da      	uxtb	r2, r3
 8000350:	4bb5      	ldr	r3, [pc, #724]	; (8000628 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 8000352:	711a      	strb	r2, [r3, #4]
				erpa_buf[5] = (raw & 0xFF); // ERPA eADC LSB
 8000354:	4bae      	ldr	r3, [pc, #696]	; (8000610 <HAL_TIM_OC_DelayElapsedCallback+0x388>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	b2da      	uxtb	r2, r3
 800035a:	4bb3      	ldr	r3, [pc, #716]	; (8000628 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 800035c:	715a      	strb	r2, [r3, #5]
				erpa_buf[6] = ((DAC_OUT[step] & 0xFF00) >> 8); //SWP Commanded MSB
 800035e:	4bad      	ldr	r3, [pc, #692]	; (8000614 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	001a      	movs	r2, r3
 8000364:	4bad      	ldr	r3, [pc, #692]	; (800061c <HAL_TIM_OC_DelayElapsedCallback+0x394>)
 8000366:	0092      	lsls	r2, r2, #2
 8000368:	58d3      	ldr	r3, [r2, r3]
 800036a:	0a1b      	lsrs	r3, r3, #8
 800036c:	b2da      	uxtb	r2, r3
 800036e:	4bae      	ldr	r3, [pc, #696]	; (8000628 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 8000370:	719a      	strb	r2, [r3, #6]
				erpa_buf[7] = (DAC_OUT[step] & 0xFF); //SWP Commanded LSB
 8000372:	4ba8      	ldr	r3, [pc, #672]	; (8000614 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	001a      	movs	r2, r3
 8000378:	4ba8      	ldr	r3, [pc, #672]	; (800061c <HAL_TIM_OC_DelayElapsedCallback+0x394>)
 800037a:	0092      	lsls	r2, r2, #2
 800037c:	58d3      	ldr	r3, [r2, r3]
 800037e:	b2da      	uxtb	r2, r3
 8000380:	4ba9      	ldr	r3, [pc, #676]	; (8000628 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 8000382:	71da      	strb	r2, [r3, #7]
				erpa_buf[8] = ((PA7 & 0xFF00) >> 8); // SWP Monitored MSB
 8000384:	183b      	adds	r3, r7, r0
 8000386:	881b      	ldrh	r3, [r3, #0]
 8000388:	0a1b      	lsrs	r3, r3, #8
 800038a:	b29b      	uxth	r3, r3
 800038c:	b2da      	uxtb	r2, r3
 800038e:	4ba6      	ldr	r3, [pc, #664]	; (8000628 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 8000390:	721a      	strb	r2, [r3, #8]
				erpa_buf[9] = (PA7 & 0xFF); // SWP Monitored LSB
 8000392:	183b      	adds	r3, r7, r0
 8000394:	881b      	ldrh	r3, [r3, #0]
 8000396:	b2da      	uxtb	r2, r3
 8000398:	4ba3      	ldr	r3, [pc, #652]	; (8000628 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 800039a:	725a      	strb	r2, [r3, #9]
				erpa_buf[10] = ((PB0 & 0xFF00) >> 8); // TEMPURATURE 1 MSB
 800039c:	193b      	adds	r3, r7, r4
 800039e:	881b      	ldrh	r3, [r3, #0]
 80003a0:	0a1b      	lsrs	r3, r3, #8
 80003a2:	b29b      	uxth	r3, r3
 80003a4:	b2da      	uxtb	r2, r3
 80003a6:	4ba0      	ldr	r3, [pc, #640]	; (8000628 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 80003a8:	729a      	strb	r2, [r3, #10]
				erpa_buf[11] = (PB0 & 0xFF); // TEMPURATURE 1 LSB
 80003aa:	193b      	adds	r3, r7, r4
 80003ac:	881b      	ldrh	r3, [r3, #0]
 80003ae:	b2da      	uxtb	r2, r3
 80003b0:	4b9d      	ldr	r3, [pc, #628]	; (8000628 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 80003b2:	72da      	strb	r2, [r3, #11]
				erpa_buf[12] = ((PB1 & 0xFF00) >> 8); // TEMPURATURE 2 MSB
 80003b4:	197b      	adds	r3, r7, r5
 80003b6:	881b      	ldrh	r3, [r3, #0]
 80003b8:	0a1b      	lsrs	r3, r3, #8
 80003ba:	b29b      	uxth	r3, r3
 80003bc:	b2da      	uxtb	r2, r3
 80003be:	4b9a      	ldr	r3, [pc, #616]	; (8000628 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 80003c0:	731a      	strb	r2, [r3, #12]
				erpa_buf[13] = (PB1 & 0xFF); // TEMPURATURE 2 LSB
 80003c2:	197b      	adds	r3, r7, r5
 80003c4:	881b      	ldrh	r3, [r3, #0]
 80003c6:	b2da      	uxtb	r2, r3
 80003c8:	4b97      	ldr	r3, [pc, #604]	; (8000628 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 80003ca:	735a      	strb	r2, [r3, #13]
				erpa_buf[14] = ((PA0 & 0xFF00) >> 8); // ENDmon MSB
 80003cc:	187b      	adds	r3, r7, r1
 80003ce:	881b      	ldrh	r3, [r3, #0]
 80003d0:	0a1b      	lsrs	r3, r3, #8
 80003d2:	b29b      	uxth	r3, r3
 80003d4:	b2da      	uxtb	r2, r3
 80003d6:	4b94      	ldr	r3, [pc, #592]	; (8000628 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 80003d8:	739a      	strb	r2, [r3, #14]
				erpa_buf[15] = (PA0 & 0xFF); // ENDmon LSB
 80003da:	187b      	adds	r3, r7, r1
 80003dc:	881b      	ldrh	r3, [r3, #0]
 80003de:	b2da      	uxtb	r2, r3
 80003e0:	4b91      	ldr	r3, [pc, #580]	; (8000628 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 80003e2:	73da      	strb	r2, [r3, #15]

				erpa_seq++;
 80003e4:	4b91      	ldr	r3, [pc, #580]	; (800062c <HAL_TIM_OC_DelayElapsedCallback+0x3a4>)
 80003e6:	881b      	ldrh	r3, [r3, #0]
 80003e8:	3301      	adds	r3, #1
 80003ea:	b29a      	uxth	r2, r3
 80003ec:	4b8f      	ldr	r3, [pc, #572]	; (800062c <HAL_TIM_OC_DelayElapsedCallback+0x3a4>)
 80003ee:	801a      	strh	r2, [r3, #0]
				if (ERPA_ON) {
 80003f0:	4b83      	ldr	r3, [pc, #524]	; (8000600 <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d005      	beq.n	8000404 <HAL_TIM_OC_DelayElapsedCallback+0x17c>
					HAL_UART_Transmit(&huart1, erpa_buf, sizeof(erpa_buf), 100);
 80003f8:	498b      	ldr	r1, [pc, #556]	; (8000628 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 80003fa:	488d      	ldr	r0, [pc, #564]	; (8000630 <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 80003fc:	2364      	movs	r3, #100	; 0x64
 80003fe:	2210      	movs	r2, #16
 8000400:	f005 fcba 	bl	8005d78 <HAL_UART_Transmit>
				}

				if (step == 5) {
 8000404:	4b83      	ldr	r3, [pc, #524]	; (8000614 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	2b05      	cmp	r3, #5
 800040a:	d103      	bne.n	8000414 <HAL_TIM_OC_DelayElapsedCallback+0x18c>
					up = 0;
 800040c:	4b89      	ldr	r3, [pc, #548]	; (8000634 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
 8000412:	e006      	b.n	8000422 <HAL_TIM_OC_DelayElapsedCallback+0x19a>
				} else if (step == 0) {
 8000414:	4b7f      	ldr	r3, [pc, #508]	; (8000614 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	2b00      	cmp	r3, #0
 800041a:	d102      	bne.n	8000422 <HAL_TIM_OC_DelayElapsedCallback+0x19a>
					up = 1;
 800041c:	4b85      	ldr	r3, [pc, #532]	; (8000634 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 800041e:	2201      	movs	r2, #1
 8000420:	601a      	str	r2, [r3, #0]
				}

				up == 1 ? step++ : step--;
 8000422:	4b84      	ldr	r3, [pc, #528]	; (8000634 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	2b01      	cmp	r3, #1
 8000428:	d106      	bne.n	8000438 <HAL_TIM_OC_DelayElapsedCallback+0x1b0>
 800042a:	4b7a      	ldr	r3, [pc, #488]	; (8000614 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	3301      	adds	r3, #1
 8000430:	b2da      	uxtb	r2, r3
 8000432:	4b78      	ldr	r3, [pc, #480]	; (8000614 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 8000434:	701a      	strb	r2, [r3, #0]
 8000436:	e005      	b.n	8000444 <HAL_TIM_OC_DelayElapsedCallback+0x1bc>
 8000438:	4b76      	ldr	r3, [pc, #472]	; (8000614 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	3b01      	subs	r3, #1
 800043e:	b2da      	uxtb	r2, r3
 8000440:	4b74      	ldr	r3, [pc, #464]	; (8000614 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 8000442:	701a      	strb	r2, [r3, #0]
			}
			if (HK_ON) {
 8000444:	4b7c      	ldr	r3, [pc, #496]	; (8000638 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d100      	bne.n	800044e <HAL_TIM_OC_DelayElapsedCallback+0x1c6>
 800044c:	e318      	b.n	8000a80 <HAL_TIM_OC_DelayElapsedCallback+0x7f8>
				if (hk_counter == 1) {
 800044e:	4b7b      	ldr	r3, [pc, #492]	; (800063c <HAL_TIM_OC_DelayElapsedCallback+0x3b4>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	2b01      	cmp	r3, #1
 8000454:	d000      	beq.n	8000458 <HAL_TIM_OC_DelayElapsedCallback+0x1d0>
 8000456:	e2ac      	b.n	80009b2 <HAL_TIM_OC_DelayElapsedCallback+0x72a>
					int16_t output2;
					int16_t output3;
					int16_t output4;


					buf[0] = REG_TEMP;
 8000458:	2200      	movs	r2, #0
 800045a:	2508      	movs	r5, #8
 800045c:	197b      	adds	r3, r7, r5
 800045e:	701a      	strb	r2, [r3, #0]
					ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_1, buf, 1,
 8000460:	2390      	movs	r3, #144	; 0x90
 8000462:	b299      	uxth	r1, r3
 8000464:	2627      	movs	r6, #39	; 0x27
 8000466:	19bc      	adds	r4, r7, r6
 8000468:	197a      	adds	r2, r7, r5
 800046a:	4875      	ldr	r0, [pc, #468]	; (8000640 <HAL_TIM_OC_DelayElapsedCallback+0x3b8>)
 800046c:	23fa      	movs	r3, #250	; 0xfa
 800046e:	009b      	lsls	r3, r3, #2
 8000470:	9300      	str	r3, [sp, #0]
 8000472:	2301      	movs	r3, #1
 8000474:	f002 feac 	bl	80031d0 <HAL_I2C_Master_Transmit>
 8000478:	0003      	movs	r3, r0
 800047a:	7023      	strb	r3, [r4, #0]
							1000);
					//			I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
					if (ret != HAL_OK) {
 800047c:	19bb      	adds	r3, r7, r6
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d008      	beq.n	8000496 <HAL_TIM_OC_DelayElapsedCallback+0x20e>
						strcpy((char*) buf, "Error Tx\r\n");
 8000484:	197b      	adds	r3, r7, r5
 8000486:	4a6f      	ldr	r2, [pc, #444]	; (8000644 <HAL_TIM_OC_DelayElapsedCallback+0x3bc>)
 8000488:	ca03      	ldmia	r2!, {r0, r1}
 800048a:	c303      	stmia	r3!, {r0, r1}
 800048c:	8811      	ldrh	r1, [r2, #0]
 800048e:	8019      	strh	r1, [r3, #0]
 8000490:	7892      	ldrb	r2, [r2, #2]
 8000492:	709a      	strb	r2, [r3, #2]
 8000494:	e02b      	b.n	80004ee <HAL_TIM_OC_DelayElapsedCallback+0x266>
					} else {

						//				 Read 2 bytes from the temperature register
						ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_1, buf, 2,
 8000496:	2390      	movs	r3, #144	; 0x90
 8000498:	b299      	uxth	r1, r3
 800049a:	2527      	movs	r5, #39	; 0x27
 800049c:	197c      	adds	r4, r7, r5
 800049e:	2608      	movs	r6, #8
 80004a0:	19ba      	adds	r2, r7, r6
 80004a2:	4867      	ldr	r0, [pc, #412]	; (8000640 <HAL_TIM_OC_DelayElapsedCallback+0x3b8>)
 80004a4:	23fa      	movs	r3, #250	; 0xfa
 80004a6:	009b      	lsls	r3, r3, #2
 80004a8:	9300      	str	r3, [sp, #0]
 80004aa:	2302      	movs	r3, #2
 80004ac:	f002 ff98 	bl	80033e0 <HAL_I2C_Master_Receive>
 80004b0:	0003      	movs	r3, r0
 80004b2:	7023      	strb	r3, [r4, #0]
								1000);
						if (ret != HAL_OK) {
 80004b4:	197b      	adds	r3, r7, r5
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d008      	beq.n	80004ce <HAL_TIM_OC_DelayElapsedCallback+0x246>
							strcpy((char*) buf, "Error Rx\r\n");
 80004bc:	19bb      	adds	r3, r7, r6
 80004be:	4a62      	ldr	r2, [pc, #392]	; (8000648 <HAL_TIM_OC_DelayElapsedCallback+0x3c0>)
 80004c0:	ca03      	ldmia	r2!, {r0, r1}
 80004c2:	c303      	stmia	r3!, {r0, r1}
 80004c4:	8811      	ldrh	r1, [r2, #0]
 80004c6:	8019      	strh	r1, [r3, #0]
 80004c8:	7892      	ldrb	r2, [r2, #2]
 80004ca:	709a      	strb	r2, [r3, #2]
 80004cc:	e00f      	b.n	80004ee <HAL_TIM_OC_DelayElapsedCallback+0x266>
						} else {

							output1 = (int16_t) (buf[0] << 8);
 80004ce:	2008      	movs	r0, #8
 80004d0:	183b      	adds	r3, r7, r0
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	021a      	lsls	r2, r3, #8
 80004d6:	2136      	movs	r1, #54	; 0x36
 80004d8:	187b      	adds	r3, r7, r1
 80004da:	801a      	strh	r2, [r3, #0]
							output1 = (output1 | buf[1]) >> 3;
 80004dc:	187b      	adds	r3, r7, r1
 80004de:	2200      	movs	r2, #0
 80004e0:	5e9b      	ldrsh	r3, [r3, r2]
 80004e2:	183a      	adds	r2, r7, r0
 80004e4:	7852      	ldrb	r2, [r2, #1]
 80004e6:	4313      	orrs	r3, r2
 80004e8:	10da      	asrs	r2, r3, #3
 80004ea:	187b      	adds	r3, r7, r1
 80004ec:	801a      	strh	r2, [r3, #0]
						}
					}

					// Tell ADT7410_2 that we want to read from the temperature register
					buf[0] = REG_TEMP;
 80004ee:	2200      	movs	r2, #0
 80004f0:	2508      	movs	r5, #8
 80004f2:	197b      	adds	r3, r7, r5
 80004f4:	701a      	strb	r2, [r3, #0]
					ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_2, buf, 1,
 80004f6:	2394      	movs	r3, #148	; 0x94
 80004f8:	b299      	uxth	r1, r3
 80004fa:	2627      	movs	r6, #39	; 0x27
 80004fc:	19bc      	adds	r4, r7, r6
 80004fe:	197a      	adds	r2, r7, r5
 8000500:	484f      	ldr	r0, [pc, #316]	; (8000640 <HAL_TIM_OC_DelayElapsedCallback+0x3b8>)
 8000502:	23fa      	movs	r3, #250	; 0xfa
 8000504:	009b      	lsls	r3, r3, #2
 8000506:	9300      	str	r3, [sp, #0]
 8000508:	2301      	movs	r3, #1
 800050a:	f002 fe61 	bl	80031d0 <HAL_I2C_Master_Transmit>
 800050e:	0003      	movs	r3, r0
 8000510:	7023      	strb	r3, [r4, #0]
							1000);
					//			I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
					if (ret != HAL_OK) {
 8000512:	19bb      	adds	r3, r7, r6
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d008      	beq.n	800052c <HAL_TIM_OC_DelayElapsedCallback+0x2a4>
						strcpy((char*) buf, "Error Tx\r\n");
 800051a:	197b      	adds	r3, r7, r5
 800051c:	4a49      	ldr	r2, [pc, #292]	; (8000644 <HAL_TIM_OC_DelayElapsedCallback+0x3bc>)
 800051e:	ca03      	ldmia	r2!, {r0, r1}
 8000520:	c303      	stmia	r3!, {r0, r1}
 8000522:	8811      	ldrh	r1, [r2, #0]
 8000524:	8019      	strh	r1, [r3, #0]
 8000526:	7892      	ldrb	r2, [r2, #2]
 8000528:	709a      	strb	r2, [r3, #2]
 800052a:	e02b      	b.n	8000584 <HAL_TIM_OC_DelayElapsedCallback+0x2fc>
					} else {

						//				 Read 2 bytes from the temperature register
						ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_2, buf, 2,
 800052c:	2394      	movs	r3, #148	; 0x94
 800052e:	b299      	uxth	r1, r3
 8000530:	2527      	movs	r5, #39	; 0x27
 8000532:	197c      	adds	r4, r7, r5
 8000534:	2608      	movs	r6, #8
 8000536:	19ba      	adds	r2, r7, r6
 8000538:	4841      	ldr	r0, [pc, #260]	; (8000640 <HAL_TIM_OC_DelayElapsedCallback+0x3b8>)
 800053a:	23fa      	movs	r3, #250	; 0xfa
 800053c:	009b      	lsls	r3, r3, #2
 800053e:	9300      	str	r3, [sp, #0]
 8000540:	2302      	movs	r3, #2
 8000542:	f002 ff4d 	bl	80033e0 <HAL_I2C_Master_Receive>
 8000546:	0003      	movs	r3, r0
 8000548:	7023      	strb	r3, [r4, #0]
								1000);
						if (ret != HAL_OK) {
 800054a:	197b      	adds	r3, r7, r5
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d008      	beq.n	8000564 <HAL_TIM_OC_DelayElapsedCallback+0x2dc>
							strcpy((char*) buf, "Error Rx\r\n");
 8000552:	19bb      	adds	r3, r7, r6
 8000554:	4a3c      	ldr	r2, [pc, #240]	; (8000648 <HAL_TIM_OC_DelayElapsedCallback+0x3c0>)
 8000556:	ca03      	ldmia	r2!, {r0, r1}
 8000558:	c303      	stmia	r3!, {r0, r1}
 800055a:	8811      	ldrh	r1, [r2, #0]
 800055c:	8019      	strh	r1, [r3, #0]
 800055e:	7892      	ldrb	r2, [r2, #2]
 8000560:	709a      	strb	r2, [r3, #2]
 8000562:	e00f      	b.n	8000584 <HAL_TIM_OC_DelayElapsedCallback+0x2fc>
						} else {

							output2 = (int16_t) (buf[0] << 8);
 8000564:	2008      	movs	r0, #8
 8000566:	183b      	adds	r3, r7, r0
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	021a      	lsls	r2, r3, #8
 800056c:	2134      	movs	r1, #52	; 0x34
 800056e:	187b      	adds	r3, r7, r1
 8000570:	801a      	strh	r2, [r3, #0]
							output2 = (output2 | buf[1]) >> 3;
 8000572:	187b      	adds	r3, r7, r1
 8000574:	2200      	movs	r2, #0
 8000576:	5e9b      	ldrsh	r3, [r3, r2]
 8000578:	183a      	adds	r2, r7, r0
 800057a:	7852      	ldrb	r2, [r2, #1]
 800057c:	4313      	orrs	r3, r2
 800057e:	10da      	asrs	r2, r3, #3
 8000580:	187b      	adds	r3, r7, r1
 8000582:	801a      	strh	r2, [r3, #0]
						}
					}
					// TEMP SENSOR 3
					buf[0] = REG_TEMP;
 8000584:	2200      	movs	r2, #0
 8000586:	2508      	movs	r5, #8
 8000588:	197b      	adds	r3, r7, r5
 800058a:	701a      	strb	r2, [r3, #0]
					ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_3, buf, 1,
 800058c:	2392      	movs	r3, #146	; 0x92
 800058e:	b299      	uxth	r1, r3
 8000590:	2627      	movs	r6, #39	; 0x27
 8000592:	19bc      	adds	r4, r7, r6
 8000594:	197a      	adds	r2, r7, r5
 8000596:	482a      	ldr	r0, [pc, #168]	; (8000640 <HAL_TIM_OC_DelayElapsedCallback+0x3b8>)
 8000598:	23fa      	movs	r3, #250	; 0xfa
 800059a:	009b      	lsls	r3, r3, #2
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	2301      	movs	r3, #1
 80005a0:	f002 fe16 	bl	80031d0 <HAL_I2C_Master_Transmit>
 80005a4:	0003      	movs	r3, r0
 80005a6:	7023      	strb	r3, [r4, #0]
							1000);
					//			I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
					if (ret != HAL_OK) {
 80005a8:	19bb      	adds	r3, r7, r6
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d008      	beq.n	80005c2 <HAL_TIM_OC_DelayElapsedCallback+0x33a>
						strcpy((char*) buf, "Error Tx\r\n");
 80005b0:	197b      	adds	r3, r7, r5
 80005b2:	4a24      	ldr	r2, [pc, #144]	; (8000644 <HAL_TIM_OC_DelayElapsedCallback+0x3bc>)
 80005b4:	ca03      	ldmia	r2!, {r0, r1}
 80005b6:	c303      	stmia	r3!, {r0, r1}
 80005b8:	8811      	ldrh	r1, [r2, #0]
 80005ba:	8019      	strh	r1, [r3, #0]
 80005bc:	7892      	ldrb	r2, [r2, #2]
 80005be:	709a      	strb	r2, [r3, #2]
 80005c0:	e054      	b.n	800066c <HAL_TIM_OC_DelayElapsedCallback+0x3e4>
					} else {

						//				 Read 2 bytes from the temperature register
						ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_3, buf, 2,
 80005c2:	2392      	movs	r3, #146	; 0x92
 80005c4:	b299      	uxth	r1, r3
 80005c6:	2527      	movs	r5, #39	; 0x27
 80005c8:	197c      	adds	r4, r7, r5
 80005ca:	2608      	movs	r6, #8
 80005cc:	19ba      	adds	r2, r7, r6
 80005ce:	481c      	ldr	r0, [pc, #112]	; (8000640 <HAL_TIM_OC_DelayElapsedCallback+0x3b8>)
 80005d0:	23fa      	movs	r3, #250	; 0xfa
 80005d2:	009b      	lsls	r3, r3, #2
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	2302      	movs	r3, #2
 80005d8:	f002 ff02 	bl	80033e0 <HAL_I2C_Master_Receive>
 80005dc:	0003      	movs	r3, r0
 80005de:	7023      	strb	r3, [r4, #0]
								1000);
						if (ret != HAL_OK) {
 80005e0:	197b      	adds	r3, r7, r5
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d031      	beq.n	800064c <HAL_TIM_OC_DelayElapsedCallback+0x3c4>
							strcpy((char*) buf, "Error Rx\r\n");
 80005e8:	19bb      	adds	r3, r7, r6
 80005ea:	4a17      	ldr	r2, [pc, #92]	; (8000648 <HAL_TIM_OC_DelayElapsedCallback+0x3c0>)
 80005ec:	ca03      	ldmia	r2!, {r0, r1}
 80005ee:	c303      	stmia	r3!, {r0, r1}
 80005f0:	8811      	ldrh	r1, [r2, #0]
 80005f2:	8019      	strh	r1, [r3, #0]
 80005f4:	7892      	ldrb	r2, [r2, #2]
 80005f6:	709a      	strb	r2, [r3, #2]
 80005f8:	e038      	b.n	800066c <HAL_TIM_OC_DelayElapsedCallback+0x3e4>
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	20000260 	.word	0x20000260
 8000600:	20000041 	.word	0x20000041
 8000604:	08007254 	.word	0x08007254
 8000608:	20000150 	.word	0x20000150
 800060c:	40013000 	.word	0x40013000
 8000610:	2000041c 	.word	0x2000041c
 8000614:	2000041a 	.word	0x2000041a
 8000618:	40007400 	.word	0x40007400
 800061c:	20000024 	.word	0x20000024
 8000620:	200003f8 	.word	0x200003f8
 8000624:	2000006c 	.word	0x2000006c
 8000628:	20000420 	.word	0x20000420
 800062c:	20000430 	.word	0x20000430
 8000630:	200002a8 	.word	0x200002a8
 8000634:	2000003c 	.word	0x2000003c
 8000638:	20000042 	.word	0x20000042
 800063c:	20000460 	.word	0x20000460
 8000640:	20000104 	.word	0x20000104
 8000644:	080071d0 	.word	0x080071d0
 8000648:	080071dc 	.word	0x080071dc
						} else {

							output3 = (int16_t) (buf[0] << 8);
 800064c:	2008      	movs	r0, #8
 800064e:	183b      	adds	r3, r7, r0
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	021a      	lsls	r2, r3, #8
 8000654:	2132      	movs	r1, #50	; 0x32
 8000656:	187b      	adds	r3, r7, r1
 8000658:	801a      	strh	r2, [r3, #0]
							output3 = (output3 | buf[1]) >> 3;
 800065a:	187b      	adds	r3, r7, r1
 800065c:	2200      	movs	r2, #0
 800065e:	5e9b      	ldrsh	r3, [r3, r2]
 8000660:	183a      	adds	r2, r7, r0
 8000662:	7852      	ldrb	r2, [r2, #1]
 8000664:	4313      	orrs	r3, r2
 8000666:	10da      	asrs	r2, r3, #3
 8000668:	187b      	adds	r3, r7, r1
 800066a:	801a      	strh	r2, [r3, #0]
						}
					}
					// TEMP SENSOR 4
					buf[0] = REG_TEMP;
 800066c:	2200      	movs	r2, #0
 800066e:	2508      	movs	r5, #8
 8000670:	197b      	adds	r3, r7, r5
 8000672:	701a      	strb	r2, [r3, #0]
					ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_4, buf, 1,
 8000674:	2396      	movs	r3, #150	; 0x96
 8000676:	b299      	uxth	r1, r3
 8000678:	2627      	movs	r6, #39	; 0x27
 800067a:	19bc      	adds	r4, r7, r6
 800067c:	197a      	adds	r2, r7, r5
 800067e:	48d0      	ldr	r0, [pc, #832]	; (80009c0 <HAL_TIM_OC_DelayElapsedCallback+0x738>)
 8000680:	23fa      	movs	r3, #250	; 0xfa
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	9300      	str	r3, [sp, #0]
 8000686:	2301      	movs	r3, #1
 8000688:	f002 fda2 	bl	80031d0 <HAL_I2C_Master_Transmit>
 800068c:	0003      	movs	r3, r0
 800068e:	7023      	strb	r3, [r4, #0]
							1000);
					//			I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
					if (ret != HAL_OK) {
 8000690:	19bb      	adds	r3, r7, r6
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d008      	beq.n	80006aa <HAL_TIM_OC_DelayElapsedCallback+0x422>
						strcpy((char*) buf, "Error Tx\r\n");
 8000698:	197b      	adds	r3, r7, r5
 800069a:	4aca      	ldr	r2, [pc, #808]	; (80009c4 <HAL_TIM_OC_DelayElapsedCallback+0x73c>)
 800069c:	ca03      	ldmia	r2!, {r0, r1}
 800069e:	c303      	stmia	r3!, {r0, r1}
 80006a0:	8811      	ldrh	r1, [r2, #0]
 80006a2:	8019      	strh	r1, [r3, #0]
 80006a4:	7892      	ldrb	r2, [r2, #2]
 80006a6:	709a      	strb	r2, [r3, #2]
 80006a8:	e02b      	b.n	8000702 <HAL_TIM_OC_DelayElapsedCallback+0x47a>
					} else {

						//				 Read 2 bytes from the temperature register
						ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_4, buf, 2,
 80006aa:	2396      	movs	r3, #150	; 0x96
 80006ac:	b299      	uxth	r1, r3
 80006ae:	2527      	movs	r5, #39	; 0x27
 80006b0:	197c      	adds	r4, r7, r5
 80006b2:	2608      	movs	r6, #8
 80006b4:	19ba      	adds	r2, r7, r6
 80006b6:	48c2      	ldr	r0, [pc, #776]	; (80009c0 <HAL_TIM_OC_DelayElapsedCallback+0x738>)
 80006b8:	23fa      	movs	r3, #250	; 0xfa
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	9300      	str	r3, [sp, #0]
 80006be:	2302      	movs	r3, #2
 80006c0:	f002 fe8e 	bl	80033e0 <HAL_I2C_Master_Receive>
 80006c4:	0003      	movs	r3, r0
 80006c6:	7023      	strb	r3, [r4, #0]
								1000);
						if (ret != HAL_OK) {
 80006c8:	197b      	adds	r3, r7, r5
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d008      	beq.n	80006e2 <HAL_TIM_OC_DelayElapsedCallback+0x45a>
							strcpy((char*) buf, "Error Rx\r\n");
 80006d0:	19bb      	adds	r3, r7, r6
 80006d2:	4abd      	ldr	r2, [pc, #756]	; (80009c8 <HAL_TIM_OC_DelayElapsedCallback+0x740>)
 80006d4:	ca03      	ldmia	r2!, {r0, r1}
 80006d6:	c303      	stmia	r3!, {r0, r1}
 80006d8:	8811      	ldrh	r1, [r2, #0]
 80006da:	8019      	strh	r1, [r3, #0]
 80006dc:	7892      	ldrb	r2, [r2, #2]
 80006de:	709a      	strb	r2, [r3, #2]
 80006e0:	e00f      	b.n	8000702 <HAL_TIM_OC_DelayElapsedCallback+0x47a>
						} else {

							output4 = (int16_t) (buf[0] << 8);
 80006e2:	2008      	movs	r0, #8
 80006e4:	183b      	adds	r3, r7, r0
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	021a      	lsls	r2, r3, #8
 80006ea:	2130      	movs	r1, #48	; 0x30
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	801a      	strh	r2, [r3, #0]
							output4 = (output4 | buf[1]) >> 3;
 80006f0:	187b      	adds	r3, r7, r1
 80006f2:	2200      	movs	r2, #0
 80006f4:	5e9b      	ldrsh	r3, [r3, r2]
 80006f6:	183a      	adds	r2, r7, r0
 80006f8:	7852      	ldrb	r2, [r2, #1]
 80006fa:	4313      	orrs	r3, r2
 80006fc:	10da      	asrs	r2, r3, #3
 80006fe:	187b      	adds	r3, r7, r1
 8000700:	801a      	strh	r2, [r3, #0]
						}
					}



					HAL_ADC_Start_DMA(&hadc, (uint32_t*) adcResultsDMA,
 8000702:	2311      	movs	r3, #17
 8000704:	001a      	movs	r2, r3
 8000706:	49b1      	ldr	r1, [pc, #708]	; (80009cc <HAL_TIM_OC_DelayElapsedCallback+0x744>)
 8000708:	4bb1      	ldr	r3, [pc, #708]	; (80009d0 <HAL_TIM_OC_DelayElapsedCallback+0x748>)
 800070a:	0018      	movs	r0, r3
 800070c:	f001 fce2 	bl	80020d4 <HAL_ADC_Start_DMA>
							adcChannelCount);

					uint16_t PA1 = adcResultsDMA[1]; //ADC_IN1, BUS_Imon: instrument bus current monitor
 8000710:	2124      	movs	r1, #36	; 0x24
 8000712:	187b      	adds	r3, r7, r1
 8000714:	4aad      	ldr	r2, [pc, #692]	; (80009cc <HAL_TIM_OC_DelayElapsedCallback+0x744>)
 8000716:	8852      	ldrh	r2, [r2, #2]
 8000718:	801a      	strh	r2, [r3, #0]
					uint16_t PA2 = adcResultsDMA[2]; //ADC_IN2, BUS_Vmon: instrument bus voltage monitor
 800071a:	2022      	movs	r0, #34	; 0x22
 800071c:	183b      	adds	r3, r7, r0
 800071e:	4aab      	ldr	r2, [pc, #684]	; (80009cc <HAL_TIM_OC_DelayElapsedCallback+0x744>)
 8000720:	8892      	ldrh	r2, [r2, #4]
 8000722:	801a      	strh	r2, [r3, #0]
					uint16_t PA3 = adcResultsDMA[3]; //ADC_IN3, 3v3_mon: Accurate 5V for ADC monitor
 8000724:	2420      	movs	r4, #32
 8000726:	193b      	adds	r3, r7, r4
 8000728:	4aa8      	ldr	r2, [pc, #672]	; (80009cc <HAL_TIM_OC_DelayElapsedCallback+0x744>)
 800072a:	88d2      	ldrh	r2, [r2, #6]
 800072c:	801a      	strh	r2, [r3, #0]
					uint16_t PA5 = adcResultsDMA[4]; //ADC_IN5, n150v_mon: n150 voltage monitor
 800072e:	251e      	movs	r5, #30
 8000730:	197b      	adds	r3, r7, r5
 8000732:	4aa6      	ldr	r2, [pc, #664]	; (80009cc <HAL_TIM_OC_DelayElapsedCallback+0x744>)
 8000734:	8912      	ldrh	r2, [r2, #8]
 8000736:	801a      	strh	r2, [r3, #0]
					uint16_t PA6 = adcResultsDMA[5]; //ADC_IN6, n800v_mon: n800 voltage monitor
 8000738:	261c      	movs	r6, #28
 800073a:	19bb      	adds	r3, r7, r6
 800073c:	4aa3      	ldr	r2, [pc, #652]	; (80009cc <HAL_TIM_OC_DelayElapsedCallback+0x744>)
 800073e:	8952      	ldrh	r2, [r2, #10]
 8000740:	801a      	strh	r2, [r3, #0]

					uint16_t PC0 = adcResultsDMA[9]; //ADC_IN10, 2v5_mon: 2.5v voltage monitor
 8000742:	231a      	movs	r3, #26
 8000744:	18fb      	adds	r3, r7, r3
 8000746:	4aa1      	ldr	r2, [pc, #644]	; (80009cc <HAL_TIM_OC_DelayElapsedCallback+0x744>)
 8000748:	8a52      	ldrh	r2, [r2, #18]
 800074a:	801a      	strh	r2, [r3, #0]
					uint16_t PC1 = adcResultsDMA[10]; //ADC_IN11, n5v_mon: n5v voltage monitor
 800074c:	2218      	movs	r2, #24
 800074e:	18bb      	adds	r3, r7, r2
 8000750:	4a9e      	ldr	r2, [pc, #632]	; (80009cc <HAL_TIM_OC_DelayElapsedCallback+0x744>)
 8000752:	8a92      	ldrh	r2, [r2, #20]
 8000754:	801a      	strh	r2, [r3, #0]
					uint16_t PC2 = adcResultsDMA[11]; //ADC_IN12, 5v_mon: 5v voltage monitor
 8000756:	2316      	movs	r3, #22
 8000758:	18fb      	adds	r3, r7, r3
 800075a:	4a9c      	ldr	r2, [pc, #624]	; (80009cc <HAL_TIM_OC_DelayElapsedCallback+0x744>)
 800075c:	8ad2      	ldrh	r2, [r2, #22]
 800075e:	801a      	strh	r2, [r3, #0]
					uint16_t PC3 = adcResultsDMA[12]; //ADC_IN13, n3v3_mon: n3v3 voltage monitor
 8000760:	2214      	movs	r2, #20
 8000762:	18bb      	adds	r3, r7, r2
 8000764:	4a99      	ldr	r2, [pc, #612]	; (80009cc <HAL_TIM_OC_DelayElapsedCallback+0x744>)
 8000766:	8b12      	ldrh	r2, [r2, #24]
 8000768:	801a      	strh	r2, [r3, #0]
					uint16_t PC4 = adcResultsDMA[13]; //ADC_IN14, 5vref_mon: 5v reference voltage monitor
 800076a:	2312      	movs	r3, #18
 800076c:	18fb      	adds	r3, r7, r3
 800076e:	4a97      	ldr	r2, [pc, #604]	; (80009cc <HAL_TIM_OC_DelayElapsedCallback+0x744>)
 8000770:	8b52      	ldrh	r2, [r2, #26]
 8000772:	801a      	strh	r2, [r3, #0]
					uint16_t PC5 = adcResultsDMA[14]; //ADC_IN15, 15v_mon: 15v voltage monitor
 8000774:	2210      	movs	r2, #16
 8000776:	18bb      	adds	r3, r7, r2
 8000778:	4a94      	ldr	r2, [pc, #592]	; (80009cc <HAL_TIM_OC_DelayElapsedCallback+0x744>)
 800077a:	8b92      	ldrh	r2, [r2, #28]
 800077c:	801a      	strh	r2, [r3, #0]
					uint16_t MCU_TEMP = adcResultsDMA[15]; //(internally connected) ADC_IN16, VSENSE
 800077e:	230e      	movs	r3, #14
 8000780:	18fb      	adds	r3, r7, r3
 8000782:	4a92      	ldr	r2, [pc, #584]	; (80009cc <HAL_TIM_OC_DelayElapsedCallback+0x744>)
 8000784:	8bd2      	ldrh	r2, [r2, #30]
 8000786:	801a      	strh	r2, [r3, #0]
					uint16_t MCU_VREF = adcResultsDMA[16]; //(internally connected) ADC_IN17, VREFINT
 8000788:	220c      	movs	r2, #12
 800078a:	18bb      	adds	r3, r7, r2
 800078c:	4a8f      	ldr	r2, [pc, #572]	; (80009cc <HAL_TIM_OC_DelayElapsedCallback+0x744>)
 800078e:	8c12      	ldrh	r2, [r2, #32]
 8000790:	801a      	strh	r2, [r3, #0]

					temps_buf[0] = temps_sync;
 8000792:	22dd      	movs	r2, #221	; 0xdd
 8000794:	4b8f      	ldr	r3, [pc, #572]	; (80009d4 <HAL_TIM_OC_DelayElapsedCallback+0x74c>)
 8000796:	701a      	strb	r2, [r3, #0]
					temps_buf[1] = temps_sync;
 8000798:	22dd      	movs	r2, #221	; 0xdd
 800079a:	4b8e      	ldr	r3, [pc, #568]	; (80009d4 <HAL_TIM_OC_DelayElapsedCallback+0x74c>)
 800079c:	705a      	strb	r2, [r3, #1]
					temps_buf[2] = ((MCU_VREF & 0xFF00) >> 8);
 800079e:	220c      	movs	r2, #12
 80007a0:	18bb      	adds	r3, r7, r2
 80007a2:	881b      	ldrh	r3, [r3, #0]
 80007a4:	0a1b      	lsrs	r3, r3, #8
 80007a6:	b29b      	uxth	r3, r3
 80007a8:	b2da      	uxtb	r2, r3
 80007aa:	4b8a      	ldr	r3, [pc, #552]	; (80009d4 <HAL_TIM_OC_DelayElapsedCallback+0x74c>)
 80007ac:	709a      	strb	r2, [r3, #2]
					temps_buf[3] = (MCU_VREF & 0xFF);
 80007ae:	220c      	movs	r2, #12
 80007b0:	18bb      	adds	r3, r7, r2
 80007b2:	881b      	ldrh	r3, [r3, #0]
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	4b87      	ldr	r3, [pc, #540]	; (80009d4 <HAL_TIM_OC_DelayElapsedCallback+0x74c>)
 80007b8:	70da      	strb	r2, [r3, #3]
					temps_buf[4] = ((output1 & 0xFF00) >> 8);
 80007ba:	2236      	movs	r2, #54	; 0x36
 80007bc:	18bb      	adds	r3, r7, r2
 80007be:	2200      	movs	r2, #0
 80007c0:	5e9b      	ldrsh	r3, [r3, r2]
 80007c2:	121b      	asrs	r3, r3, #8
 80007c4:	b2da      	uxtb	r2, r3
 80007c6:	4b83      	ldr	r3, [pc, #524]	; (80009d4 <HAL_TIM_OC_DelayElapsedCallback+0x74c>)
 80007c8:	711a      	strb	r2, [r3, #4]
					temps_buf[5] = (output1 & 0xFF);
 80007ca:	2236      	movs	r2, #54	; 0x36
 80007cc:	18bb      	adds	r3, r7, r2
 80007ce:	881b      	ldrh	r3, [r3, #0]
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	4b80      	ldr	r3, [pc, #512]	; (80009d4 <HAL_TIM_OC_DelayElapsedCallback+0x74c>)
 80007d4:	715a      	strb	r2, [r3, #5]
					temps_buf[6] = ((output2 & 0xFF00) >> 8);
 80007d6:	2234      	movs	r2, #52	; 0x34
 80007d8:	18bb      	adds	r3, r7, r2
 80007da:	2200      	movs	r2, #0
 80007dc:	5e9b      	ldrsh	r3, [r3, r2]
 80007de:	121b      	asrs	r3, r3, #8
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	4b7c      	ldr	r3, [pc, #496]	; (80009d4 <HAL_TIM_OC_DelayElapsedCallback+0x74c>)
 80007e4:	719a      	strb	r2, [r3, #6]
					temps_buf[7] = (output2 & 0xFF);
 80007e6:	2234      	movs	r2, #52	; 0x34
 80007e8:	18bb      	adds	r3, r7, r2
 80007ea:	881b      	ldrh	r3, [r3, #0]
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	4b79      	ldr	r3, [pc, #484]	; (80009d4 <HAL_TIM_OC_DelayElapsedCallback+0x74c>)
 80007f0:	71da      	strb	r2, [r3, #7]
					temps_buf[8] = ((output3 & 0xFF00) >> 8);
 80007f2:	2232      	movs	r2, #50	; 0x32
 80007f4:	18bb      	adds	r3, r7, r2
 80007f6:	2200      	movs	r2, #0
 80007f8:	5e9b      	ldrsh	r3, [r3, r2]
 80007fa:	121b      	asrs	r3, r3, #8
 80007fc:	b2da      	uxtb	r2, r3
 80007fe:	4b75      	ldr	r3, [pc, #468]	; (80009d4 <HAL_TIM_OC_DelayElapsedCallback+0x74c>)
 8000800:	721a      	strb	r2, [r3, #8]
					temps_buf[9] = (output3 & 0xFF);
 8000802:	2232      	movs	r2, #50	; 0x32
 8000804:	18bb      	adds	r3, r7, r2
 8000806:	881b      	ldrh	r3, [r3, #0]
 8000808:	b2da      	uxtb	r2, r3
 800080a:	4b72      	ldr	r3, [pc, #456]	; (80009d4 <HAL_TIM_OC_DelayElapsedCallback+0x74c>)
 800080c:	725a      	strb	r2, [r3, #9]
					temps_buf[10] = ((output4 & 0xFF00) >> 8);
 800080e:	2230      	movs	r2, #48	; 0x30
 8000810:	18bb      	adds	r3, r7, r2
 8000812:	2200      	movs	r2, #0
 8000814:	5e9b      	ldrsh	r3, [r3, r2]
 8000816:	121b      	asrs	r3, r3, #8
 8000818:	b2da      	uxtb	r2, r3
 800081a:	4b6e      	ldr	r3, [pc, #440]	; (80009d4 <HAL_TIM_OC_DelayElapsedCallback+0x74c>)
 800081c:	729a      	strb	r2, [r3, #10]
					temps_buf[11] = (output4 & 0xFF);
 800081e:	2230      	movs	r2, #48	; 0x30
 8000820:	18bb      	adds	r3, r7, r2
 8000822:	881b      	ldrh	r3, [r3, #0]
 8000824:	b2da      	uxtb	r2, r3
 8000826:	4b6b      	ldr	r3, [pc, #428]	; (80009d4 <HAL_TIM_OC_DelayElapsedCallback+0x74c>)
 8000828:	72da      	strb	r2, [r3, #11]


					hk_buf[0] = hk_sync; // HK SYNC 0xCC MSB					0 SYNC
 800082a:	22cc      	movs	r2, #204	; 0xcc
 800082c:	4b6a      	ldr	r3, [pc, #424]	; (80009d8 <HAL_TIM_OC_DelayElapsedCallback+0x750>)
 800082e:	701a      	strb	r2, [r3, #0]
					hk_buf[1] = hk_sync; // HK SYNC 0xCC LSB
 8000830:	22cc      	movs	r2, #204	; 0xcc
 8000832:	4b69      	ldr	r3, [pc, #420]	; (80009d8 <HAL_TIM_OC_DelayElapsedCallback+0x750>)
 8000834:	705a      	strb	r2, [r3, #1]
					hk_buf[2] = ((hk_seq & 0xFF00) >> 8); // HK SEQ # MSB		1 SEQUENCE
 8000836:	4b69      	ldr	r3, [pc, #420]	; (80009dc <HAL_TIM_OC_DelayElapsedCallback+0x754>)
 8000838:	881b      	ldrh	r3, [r3, #0]
 800083a:	0a1b      	lsrs	r3, r3, #8
 800083c:	b29b      	uxth	r3, r3
 800083e:	b2da      	uxtb	r2, r3
 8000840:	4b65      	ldr	r3, [pc, #404]	; (80009d8 <HAL_TIM_OC_DelayElapsedCallback+0x750>)
 8000842:	709a      	strb	r2, [r3, #2]
					hk_buf[3] = (hk_seq & 0xFF); // HK SEQ # LSB
 8000844:	4b65      	ldr	r3, [pc, #404]	; (80009dc <HAL_TIM_OC_DelayElapsedCallback+0x754>)
 8000846:	881b      	ldrh	r3, [r3, #0]
 8000848:	b2da      	uxtb	r2, r3
 800084a:	4b63      	ldr	r3, [pc, #396]	; (80009d8 <HAL_TIM_OC_DelayElapsedCallback+0x750>)
 800084c:	70da      	strb	r2, [r3, #3]
					hk_buf[4] = ((PA1 & 0xFF00) >> 8); // BUS_Imon MSB			2 BUS_IMON PA1
 800084e:	187b      	adds	r3, r7, r1
 8000850:	881b      	ldrh	r3, [r3, #0]
 8000852:	0a1b      	lsrs	r3, r3, #8
 8000854:	b29b      	uxth	r3, r3
 8000856:	b2da      	uxtb	r2, r3
 8000858:	4b5f      	ldr	r3, [pc, #380]	; (80009d8 <HAL_TIM_OC_DelayElapsedCallback+0x750>)
 800085a:	711a      	strb	r2, [r3, #4]
					hk_buf[5] = (PA1 & 0xFF); // BUS_Imon LSB
 800085c:	187b      	adds	r3, r7, r1
 800085e:	881b      	ldrh	r3, [r3, #0]
 8000860:	b2da      	uxtb	r2, r3
 8000862:	4b5d      	ldr	r3, [pc, #372]	; (80009d8 <HAL_TIM_OC_DelayElapsedCallback+0x750>)
 8000864:	715a      	strb	r2, [r3, #5]
					hk_buf[6] = ((PA2 & 0xFF00) >> 8); // BUS_Vmon MSB			3 BUS_VMON PA2
 8000866:	183b      	adds	r3, r7, r0
 8000868:	881b      	ldrh	r3, [r3, #0]
 800086a:	0a1b      	lsrs	r3, r3, #8
 800086c:	b29b      	uxth	r3, r3
 800086e:	b2da      	uxtb	r2, r3
 8000870:	4b59      	ldr	r3, [pc, #356]	; (80009d8 <HAL_TIM_OC_DelayElapsedCallback+0x750>)
 8000872:	719a      	strb	r2, [r3, #6]
					hk_buf[7] = (PA2 & 0xFF); // BUS_Vmon LSB
 8000874:	183b      	adds	r3, r7, r0
 8000876:	881b      	ldrh	r3, [r3, #0]
 8000878:	b2da      	uxtb	r2, r3
 800087a:	4b57      	ldr	r3, [pc, #348]	; (80009d8 <HAL_TIM_OC_DelayElapsedCallback+0x750>)
 800087c:	71da      	strb	r2, [r3, #7]
					hk_buf[8] = ((PA3 & 0xFF00) >> 8); // 3v3_mon MSB			4 3v3_MON PA3
 800087e:	193b      	adds	r3, r7, r4
 8000880:	881b      	ldrh	r3, [r3, #0]
 8000882:	0a1b      	lsrs	r3, r3, #8
 8000884:	b29b      	uxth	r3, r3
 8000886:	b2da      	uxtb	r2, r3
 8000888:	4b53      	ldr	r3, [pc, #332]	; (80009d8 <HAL_TIM_OC_DelayElapsedCallback+0x750>)
 800088a:	721a      	strb	r2, [r3, #8]
					hk_buf[9] = (PA3 & 0xFF); // 3v3_mon LSB
 800088c:	193b      	adds	r3, r7, r4
 800088e:	881b      	ldrh	r3, [r3, #0]
 8000890:	b2da      	uxtb	r2, r3
 8000892:	4b51      	ldr	r3, [pc, #324]	; (80009d8 <HAL_TIM_OC_DelayElapsedCallback+0x750>)
 8000894:	725a      	strb	r2, [r3, #9]
					hk_buf[10] = ((PA5 & 0xFF00) >> 8); // n150v_mon MSB		5 N150V_MON PA5
 8000896:	197b      	adds	r3, r7, r5
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	0a1b      	lsrs	r3, r3, #8
 800089c:	b29b      	uxth	r3, r3
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	4b4d      	ldr	r3, [pc, #308]	; (80009d8 <HAL_TIM_OC_DelayElapsedCallback+0x750>)
 80008a2:	729a      	strb	r2, [r3, #10]
					hk_buf[11] = (PA5 & 0xFF); // n150v_mon LSB
 80008a4:	197b      	adds	r3, r7, r5
 80008a6:	881b      	ldrh	r3, [r3, #0]
 80008a8:	b2da      	uxtb	r2, r3
 80008aa:	4b4b      	ldr	r3, [pc, #300]	; (80009d8 <HAL_TIM_OC_DelayElapsedCallback+0x750>)
 80008ac:	72da      	strb	r2, [r3, #11]
					hk_buf[12] = ((PA6 & 0xFF00) >> 8); // n800v_mon MSB		6 N800V_MON PA6
 80008ae:	19bb      	adds	r3, r7, r6
 80008b0:	881b      	ldrh	r3, [r3, #0]
 80008b2:	0a1b      	lsrs	r3, r3, #8
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	b2da      	uxtb	r2, r3
 80008b8:	4b47      	ldr	r3, [pc, #284]	; (80009d8 <HAL_TIM_OC_DelayElapsedCallback+0x750>)
 80008ba:	731a      	strb	r2, [r3, #12]
					hk_buf[13] = (PA6 & 0xFF); // n800v_mon LSB
 80008bc:	19bb      	adds	r3, r7, r6
 80008be:	881b      	ldrh	r3, [r3, #0]
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	4b45      	ldr	r3, [pc, #276]	; (80009d8 <HAL_TIM_OC_DelayElapsedCallback+0x750>)
 80008c4:	735a      	strb	r2, [r3, #13]
					hk_buf[14] = ((PC0 & 0xFF00) >> 8); // 2v5_mon MSB			7 2V5_MON PC0
 80008c6:	211a      	movs	r1, #26
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	881b      	ldrh	r3, [r3, #0]
 80008cc:	0a1b      	lsrs	r3, r3, #8
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	b2da      	uxtb	r2, r3
 80008d2:	4b41      	ldr	r3, [pc, #260]	; (80009d8 <HAL_TIM_OC_DelayElapsedCallback+0x750>)
 80008d4:	739a      	strb	r2, [r3, #14]
					hk_buf[15] = (PC0 & 0xFF); // 2v5_mon LSB
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	881b      	ldrh	r3, [r3, #0]
 80008da:	b2da      	uxtb	r2, r3
 80008dc:	4b3e      	ldr	r3, [pc, #248]	; (80009d8 <HAL_TIM_OC_DelayElapsedCallback+0x750>)
 80008de:	73da      	strb	r2, [r3, #15]
					hk_buf[16] = ((PC1 & 0xFF00) >> 8); // n5v_mon MSB			8 N5V_MON PC1
 80008e0:	2118      	movs	r1, #24
 80008e2:	187b      	adds	r3, r7, r1
 80008e4:	881b      	ldrh	r3, [r3, #0]
 80008e6:	0a1b      	lsrs	r3, r3, #8
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	4b3a      	ldr	r3, [pc, #232]	; (80009d8 <HAL_TIM_OC_DelayElapsedCallback+0x750>)
 80008ee:	741a      	strb	r2, [r3, #16]
					hk_buf[17] = (PC1 & 0xFF); // n5v_mon LSB
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	881b      	ldrh	r3, [r3, #0]
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	4b38      	ldr	r3, [pc, #224]	; (80009d8 <HAL_TIM_OC_DelayElapsedCallback+0x750>)
 80008f8:	745a      	strb	r2, [r3, #17]
					hk_buf[18] = ((PC2 & 0xFF00) >> 8); // 5v_mon MSB			9 5V_MON PC2
 80008fa:	2116      	movs	r1, #22
 80008fc:	187b      	adds	r3, r7, r1
 80008fe:	881b      	ldrh	r3, [r3, #0]
 8000900:	0a1b      	lsrs	r3, r3, #8
 8000902:	b29b      	uxth	r3, r3
 8000904:	b2da      	uxtb	r2, r3
 8000906:	4b34      	ldr	r3, [pc, #208]	; (80009d8 <HAL_TIM_OC_DelayElapsedCallback+0x750>)
 8000908:	749a      	strb	r2, [r3, #18]
					hk_buf[19] = (PC2 & 0xFF); // 5v_mon LSB
 800090a:	187b      	adds	r3, r7, r1
 800090c:	881b      	ldrh	r3, [r3, #0]
 800090e:	b2da      	uxtb	r2, r3
 8000910:	4b31      	ldr	r3, [pc, #196]	; (80009d8 <HAL_TIM_OC_DelayElapsedCallback+0x750>)
 8000912:	74da      	strb	r2, [r3, #19]
					hk_buf[20] = ((PC3 & 0xFF00) >> 8); // n3v3_mon MSB			10 N3V3_MON PC3
 8000914:	2114      	movs	r1, #20
 8000916:	187b      	adds	r3, r7, r1
 8000918:	881b      	ldrh	r3, [r3, #0]
 800091a:	0a1b      	lsrs	r3, r3, #8
 800091c:	b29b      	uxth	r3, r3
 800091e:	b2da      	uxtb	r2, r3
 8000920:	4b2d      	ldr	r3, [pc, #180]	; (80009d8 <HAL_TIM_OC_DelayElapsedCallback+0x750>)
 8000922:	751a      	strb	r2, [r3, #20]
					hk_buf[21] = (PC3 & 0xFF); // n3v3_mon LSB
 8000924:	187b      	adds	r3, r7, r1
 8000926:	881b      	ldrh	r3, [r3, #0]
 8000928:	b2da      	uxtb	r2, r3
 800092a:	4b2b      	ldr	r3, [pc, #172]	; (80009d8 <HAL_TIM_OC_DelayElapsedCallback+0x750>)
 800092c:	755a      	strb	r2, [r3, #21]
					hk_buf[22] = ((PC4 & 0xFF00) >> 8); // 5vref_mon MSB		11 5VREF_MON PC4
 800092e:	2112      	movs	r1, #18
 8000930:	187b      	adds	r3, r7, r1
 8000932:	881b      	ldrh	r3, [r3, #0]
 8000934:	0a1b      	lsrs	r3, r3, #8
 8000936:	b29b      	uxth	r3, r3
 8000938:	b2da      	uxtb	r2, r3
 800093a:	4b27      	ldr	r3, [pc, #156]	; (80009d8 <HAL_TIM_OC_DelayElapsedCallback+0x750>)
 800093c:	759a      	strb	r2, [r3, #22]
					hk_buf[23] = (PC4 & 0xFF); // 5vref_mon LSB
 800093e:	187b      	adds	r3, r7, r1
 8000940:	881b      	ldrh	r3, [r3, #0]
 8000942:	b2da      	uxtb	r2, r3
 8000944:	4b24      	ldr	r3, [pc, #144]	; (80009d8 <HAL_TIM_OC_DelayElapsedCallback+0x750>)
 8000946:	75da      	strb	r2, [r3, #23]
					hk_buf[24] = ((PC5 & 0xFF00) >> 8); // 15v_mon MSB			12 15V_MON PC5
 8000948:	2110      	movs	r1, #16
 800094a:	187b      	adds	r3, r7, r1
 800094c:	881b      	ldrh	r3, [r3, #0]
 800094e:	0a1b      	lsrs	r3, r3, #8
 8000950:	b29b      	uxth	r3, r3
 8000952:	b2da      	uxtb	r2, r3
 8000954:	4b20      	ldr	r3, [pc, #128]	; (80009d8 <HAL_TIM_OC_DelayElapsedCallback+0x750>)
 8000956:	761a      	strb	r2, [r3, #24]
					hk_buf[25] = (PC5 & 0xFF); // 15v_mon LSB
 8000958:	187b      	adds	r3, r7, r1
 800095a:	881b      	ldrh	r3, [r3, #0]
 800095c:	b2da      	uxtb	r2, r3
 800095e:	4b1e      	ldr	r3, [pc, #120]	; (80009d8 <HAL_TIM_OC_DelayElapsedCallback+0x750>)
 8000960:	765a      	strb	r2, [r3, #25]
					hk_buf[26] = ((MCU_TEMP & 0xFF00) >> 8); // VSENSE MSB		13 VSENSE
 8000962:	210e      	movs	r1, #14
 8000964:	187b      	adds	r3, r7, r1
 8000966:	881b      	ldrh	r3, [r3, #0]
 8000968:	0a1b      	lsrs	r3, r3, #8
 800096a:	b29b      	uxth	r3, r3
 800096c:	b2da      	uxtb	r2, r3
 800096e:	4b1a      	ldr	r3, [pc, #104]	; (80009d8 <HAL_TIM_OC_DelayElapsedCallback+0x750>)
 8000970:	769a      	strb	r2, [r3, #26]
					hk_buf[27] = (MCU_TEMP & 0xFF); // VSENSE LSB
 8000972:	187b      	adds	r3, r7, r1
 8000974:	881b      	ldrh	r3, [r3, #0]
 8000976:	b2da      	uxtb	r2, r3
 8000978:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <HAL_TIM_OC_DelayElapsedCallback+0x750>)
 800097a:	76da      	strb	r2, [r3, #27]


					if (HK_ON) {
 800097c:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <HAL_TIM_OC_DelayElapsedCallback+0x758>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d00c      	beq.n	800099e <HAL_TIM_OC_DelayElapsedCallback+0x716>
						HAL_UART_Transmit(&huart1, temps_buf, sizeof(temps_buf), 100);
 8000984:	4913      	ldr	r1, [pc, #76]	; (80009d4 <HAL_TIM_OC_DelayElapsedCallback+0x74c>)
 8000986:	4817      	ldr	r0, [pc, #92]	; (80009e4 <HAL_TIM_OC_DelayElapsedCallback+0x75c>)
 8000988:	2364      	movs	r3, #100	; 0x64
 800098a:	220c      	movs	r2, #12
 800098c:	f005 f9f4 	bl	8005d78 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart1, hk_buf, sizeof(hk_buf), HAL_MAX_DELAY);
 8000990:	2301      	movs	r3, #1
 8000992:	425b      	negs	r3, r3
 8000994:	4910      	ldr	r1, [pc, #64]	; (80009d8 <HAL_TIM_OC_DelayElapsedCallback+0x750>)
 8000996:	4813      	ldr	r0, [pc, #76]	; (80009e4 <HAL_TIM_OC_DelayElapsedCallback+0x75c>)
 8000998:	2220      	movs	r2, #32
 800099a:	f005 f9ed 	bl	8005d78 <HAL_UART_Transmit>

					}
					hk_counter = 1;
 800099e:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <HAL_TIM_OC_DelayElapsedCallback+0x760>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	601a      	str	r2, [r3, #0]

					hk_seq++;
 80009a4:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <HAL_TIM_OC_DelayElapsedCallback+0x754>)
 80009a6:	881b      	ldrh	r3, [r3, #0]
 80009a8:	3301      	adds	r3, #1
 80009aa:	b29a      	uxth	r2, r3
 80009ac:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <HAL_TIM_OC_DelayElapsedCallback+0x754>)
 80009ae:	801a      	strh	r2, [r3, #0]
			}
		}
	}

	/* Timer 3 also called but doesn't need to do anything on IT */
}
 80009b0:	e066      	b.n	8000a80 <HAL_TIM_OC_DelayElapsedCallback+0x7f8>
					hk_counter++;
 80009b2:	4b0d      	ldr	r3, [pc, #52]	; (80009e8 <HAL_TIM_OC_DelayElapsedCallback+0x760>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	1c5a      	adds	r2, r3, #1
 80009b8:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <HAL_TIM_OC_DelayElapsedCallback+0x760>)
 80009ba:	601a      	str	r2, [r3, #0]
}
 80009bc:	e060      	b.n	8000a80 <HAL_TIM_OC_DelayElapsedCallback+0x7f8>
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	20000104 	.word	0x20000104
 80009c4:	080071d0 	.word	0x080071d0
 80009c8:	080071dc 	.word	0x080071dc
 80009cc:	200003f8 	.word	0x200003f8
 80009d0:	2000006c 	.word	0x2000006c
 80009d4:	20000464 	.word	0x20000464
 80009d8:	2000043c 	.word	0x2000043c
 80009dc:	2000045c 	.word	0x2000045c
 80009e0:	20000042 	.word	0x20000042
 80009e4:	200002a8 	.word	0x200002a8
 80009e8:	20000460 	.word	0x20000460
	} else if (htim == &htim1) {
 80009ec:	687a      	ldr	r2, [r7, #4]
 80009ee:	4b26      	ldr	r3, [pc, #152]	; (8000a88 <HAL_TIM_OC_DelayElapsedCallback+0x800>)
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d145      	bne.n	8000a80 <HAL_TIM_OC_DelayElapsedCallback+0x7f8>
		if (PMT_ON) {
 80009f4:	4b25      	ldr	r3, [pc, #148]	; (8000a8c <HAL_TIM_OC_DelayElapsedCallback+0x804>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d041      	beq.n	8000a80 <HAL_TIM_OC_DelayElapsedCallback+0x7f8>
			if (!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11))) { //check pin state
 80009fc:	2380      	movs	r3, #128	; 0x80
 80009fe:	011b      	lsls	r3, r3, #4
 8000a00:	4a23      	ldr	r2, [pc, #140]	; (8000a90 <HAL_TIM_OC_DelayElapsedCallback+0x808>)
 8000a02:	0019      	movs	r1, r3
 8000a04:	0010      	movs	r0, r2
 8000a06:	f002 fb13 	bl	8003030 <HAL_GPIO_ReadPin>
 8000a0a:	1e03      	subs	r3, r0, #0
 8000a0c:	d138      	bne.n	8000a80 <HAL_TIM_OC_DelayElapsedCallback+0x7f8>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) &WRITE, 1, 1);
 8000a0e:	4921      	ldr	r1, [pc, #132]	; (8000a94 <HAL_TIM_OC_DelayElapsedCallback+0x80c>)
 8000a10:	4821      	ldr	r0, [pc, #132]	; (8000a98 <HAL_TIM_OC_DelayElapsedCallback+0x810>)
 8000a12:	2301      	movs	r3, #1
 8000a14:	2201      	movs	r2, #1
 8000a16:	f003 fe7d 	bl	8004714 <HAL_SPI_Transmit>
				while (!(SPI2->SR))
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	4b1f      	ldr	r3, [pc, #124]	; (8000a9c <HAL_TIM_OC_DelayElapsedCallback+0x814>)
 8000a1e:	689b      	ldr	r3, [r3, #8]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d0fb      	beq.n	8000a1c <HAL_TIM_OC_DelayElapsedCallback+0x794>
				raw = SPI2->DR;
 8000a24:	4b1d      	ldr	r3, [pc, #116]	; (8000a9c <HAL_TIM_OC_DelayElapsedCallback+0x814>)
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	001a      	movs	r2, r3
 8000a2a:	4b1d      	ldr	r3, [pc, #116]	; (8000aa0 <HAL_TIM_OC_DelayElapsedCallback+0x818>)
 8000a2c:	601a      	str	r2, [r3, #0]
				pmt_buf[0] = pmt_sync;
 8000a2e:	22bb      	movs	r2, #187	; 0xbb
 8000a30:	4b1c      	ldr	r3, [pc, #112]	; (8000aa4 <HAL_TIM_OC_DelayElapsedCallback+0x81c>)
 8000a32:	701a      	strb	r2, [r3, #0]
				pmt_buf[1] = pmt_sync;
 8000a34:	22bb      	movs	r2, #187	; 0xbb
 8000a36:	4b1b      	ldr	r3, [pc, #108]	; (8000aa4 <HAL_TIM_OC_DelayElapsedCallback+0x81c>)
 8000a38:	705a      	strb	r2, [r3, #1]
				pmt_buf[2] = ((pmt_seq & 0xFF00) >> 8);
 8000a3a:	4b1b      	ldr	r3, [pc, #108]	; (8000aa8 <HAL_TIM_OC_DelayElapsedCallback+0x820>)
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	0a1b      	lsrs	r3, r3, #8
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <HAL_TIM_OC_DelayElapsedCallback+0x81c>)
 8000a46:	709a      	strb	r2, [r3, #2]
				pmt_buf[3] = (pmt_seq & 0xFF);
 8000a48:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <HAL_TIM_OC_DelayElapsedCallback+0x820>)
 8000a4a:	881b      	ldrh	r3, [r3, #0]
 8000a4c:	b2da      	uxtb	r2, r3
 8000a4e:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <HAL_TIM_OC_DelayElapsedCallback+0x81c>)
 8000a50:	70da      	strb	r2, [r3, #3]
				pmt_buf[4] = ((raw & 0xFF00) >> 8);
 8000a52:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <HAL_TIM_OC_DelayElapsedCallback+0x818>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	121b      	asrs	r3, r3, #8
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <HAL_TIM_OC_DelayElapsedCallback+0x81c>)
 8000a5c:	711a      	strb	r2, [r3, #4]
				pmt_buf[5] = (raw & 0xFF);
 8000a5e:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <HAL_TIM_OC_DelayElapsedCallback+0x818>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <HAL_TIM_OC_DelayElapsedCallback+0x81c>)
 8000a66:	715a      	strb	r2, [r3, #5]
				pmt_seq++;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <HAL_TIM_OC_DelayElapsedCallback+0x820>)
 8000a6a:	881b      	ldrh	r3, [r3, #0]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	b29a      	uxth	r2, r3
 8000a70:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <HAL_TIM_OC_DelayElapsedCallback+0x820>)
 8000a72:	801a      	strh	r2, [r3, #0]
				HAL_UART_Transmit(&huart1, pmt_buf, sizeof(pmt_buf), 100);
 8000a74:	490b      	ldr	r1, [pc, #44]	; (8000aa4 <HAL_TIM_OC_DelayElapsedCallback+0x81c>)
 8000a76:	480d      	ldr	r0, [pc, #52]	; (8000aac <HAL_TIM_OC_DelayElapsedCallback+0x824>)
 8000a78:	2364      	movs	r3, #100	; 0x64
 8000a7a:	2206      	movs	r2, #6
 8000a7c:	f005 f97c 	bl	8005d78 <HAL_UART_Transmit>
}
 8000a80:	46c0      	nop			; (mov r8, r8)
 8000a82:	46bd      	mov	sp, r7
 8000a84:	b00f      	add	sp, #60	; 0x3c
 8000a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a88:	20000218 	.word	0x20000218
 8000a8c:	20000040 	.word	0x20000040
 8000a90:	48000400 	.word	0x48000400
 8000a94:	08007254 	.word	0x08007254
 8000a98:	200001b4 	.word	0x200001b4
 8000a9c:	40003800 	.word	0x40003800
 8000aa0:	2000041c 	.word	0x2000041c
 8000aa4:	20000434 	.word	0x20000434
 8000aa8:	2000043a 	.word	0x2000043a
 8000aac:	200002a8 	.word	0x200002a8

08000ab0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]

	HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000ab8:	4972      	ldr	r1, [pc, #456]	; (8000c84 <HAL_UART_RxCpltCallback+0x1d4>)
 8000aba:	4b73      	ldr	r3, [pc, #460]	; (8000c88 <HAL_UART_RxCpltCallback+0x1d8>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f005 fa03 	bl	8005eca <HAL_UART_Receive_IT>
	writeIndex = 0;
 8000ac4:	4b71      	ldr	r3, [pc, #452]	; (8000c8c <HAL_UART_RxCpltCallback+0x1dc>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
	char key = rx_buf[0];
 8000aca:	2113      	movs	r1, #19
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	4a6d      	ldr	r2, [pc, #436]	; (8000c84 <HAL_UART_RxCpltCallback+0x1d4>)
 8000ad0:	7812      	ldrb	r2, [r2, #0]
 8000ad2:	701a      	strb	r2, [r3, #0]

	switch (key) {
 8000ad4:	187b      	adds	r3, r7, r1
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	3b21      	subs	r3, #33	; 0x21
 8000ada:	2b47      	cmp	r3, #71	; 0x47
 8000adc:	d900      	bls.n	8000ae0 <HAL_UART_RxCpltCallback+0x30>
 8000ade:	e094      	b.n	8000c0a <HAL_UART_RxCpltCallback+0x15a>
 8000ae0:	009a      	lsls	r2, r3, #2
 8000ae2:	4b6b      	ldr	r3, [pc, #428]	; (8000c90 <HAL_UART_RxCpltCallback+0x1e0>)
 8000ae4:	18d3      	adds	r3, r2, r3
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	469f      	mov	pc, r3
	case 'a': {
	    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000aea:	4b6a      	ldr	r3, [pc, #424]	; (8000c94 <HAL_UART_RxCpltCallback+0x1e4>)
 8000aec:	2120      	movs	r1, #32
 8000aee:	2201      	movs	r2, #1
 8000af0:	0018      	movs	r0, r3
 8000af2:	f002 faba 	bl	800306a <HAL_GPIO_WritePin>
		break;
 8000af6:	e088      	b.n	8000c0a <HAL_UART_RxCpltCallback+0x15a>
	}
	case '$': {
	    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8000af8:	4b66      	ldr	r3, [pc, #408]	; (8000c94 <HAL_UART_RxCpltCallback+0x1e4>)
 8000afa:	2120      	movs	r1, #32
 8000afc:	2200      	movs	r2, #0
 8000afe:	0018      	movs	r0, r3
 8000b00:	f002 fab3 	bl	800306a <HAL_GPIO_WritePin>
		break;
 8000b04:	e081      	b.n	8000c0a <HAL_UART_RxCpltCallback+0x15a>
	}
	case 'b': {
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000b06:	4b63      	ldr	r3, [pc, #396]	; (8000c94 <HAL_UART_RxCpltCallback+0x1e4>)
 8000b08:	2140      	movs	r1, #64	; 0x40
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f002 faac 	bl	800306a <HAL_GPIO_WritePin>
		break;
 8000b12:	e07a      	b.n	8000c0a <HAL_UART_RxCpltCallback+0x15a>
	}
	case '%': {
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000b14:	4b5f      	ldr	r3, [pc, #380]	; (8000c94 <HAL_UART_RxCpltCallback+0x1e4>)
 8000b16:	2140      	movs	r1, #64	; 0x40
 8000b18:	2200      	movs	r2, #0
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f002 faa5 	bl	800306a <HAL_GPIO_WritePin>
		break;
 8000b20:	e073      	b.n	8000c0a <HAL_UART_RxCpltCallback+0x15a>
	}
	case 'c': {
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000b22:	485d      	ldr	r0, [pc, #372]	; (8000c98 <HAL_UART_RxCpltCallback+0x1e8>)
 8000b24:	2380      	movs	r3, #128	; 0x80
 8000b26:	00db      	lsls	r3, r3, #3
 8000b28:	2201      	movs	r2, #1
 8000b2a:	0019      	movs	r1, r3
 8000b2c:	f002 fa9d 	bl	800306a <HAL_GPIO_WritePin>
		break;
 8000b30:	e06b      	b.n	8000c0a <HAL_UART_RxCpltCallback+0x15a>
	}
	case '^': {
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000b32:	4859      	ldr	r0, [pc, #356]	; (8000c98 <HAL_UART_RxCpltCallback+0x1e8>)
 8000b34:	2380      	movs	r3, #128	; 0x80
 8000b36:	00db      	lsls	r3, r3, #3
 8000b38:	2200      	movs	r2, #0
 8000b3a:	0019      	movs	r1, r3
 8000b3c:	f002 fa95 	bl	800306a <HAL_GPIO_WritePin>
		break;
 8000b40:	e063      	b.n	8000c0a <HAL_UART_RxCpltCallback+0x15a>
	}
	case 'd': {
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000b42:	4855      	ldr	r0, [pc, #340]	; (8000c98 <HAL_UART_RxCpltCallback+0x1e8>)
 8000b44:	2380      	movs	r3, #128	; 0x80
 8000b46:	019b      	lsls	r3, r3, #6
 8000b48:	2201      	movs	r2, #1
 8000b4a:	0019      	movs	r1, r3
 8000b4c:	f002 fa8d 	bl	800306a <HAL_GPIO_WritePin>
		break;
 8000b50:	e05b      	b.n	8000c0a <HAL_UART_RxCpltCallback+0x15a>
	}
	case '&': {
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000b52:	4851      	ldr	r0, [pc, #324]	; (8000c98 <HAL_UART_RxCpltCallback+0x1e8>)
 8000b54:	2380      	movs	r3, #128	; 0x80
 8000b56:	019b      	lsls	r3, r3, #6
 8000b58:	2200      	movs	r2, #0
 8000b5a:	0019      	movs	r1, r3
 8000b5c:	f002 fa85 	bl	800306a <HAL_GPIO_WritePin>
		break;
 8000b60:	e053      	b.n	8000c0a <HAL_UART_RxCpltCallback+0x15a>
	}
	case 'e': {
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000b62:	4b4d      	ldr	r3, [pc, #308]	; (8000c98 <HAL_UART_RxCpltCallback+0x1e8>)
 8000b64:	2180      	movs	r1, #128	; 0x80
 8000b66:	2201      	movs	r2, #1
 8000b68:	0018      	movs	r0, r3
 8000b6a:	f002 fa7e 	bl	800306a <HAL_GPIO_WritePin>
		break;
 8000b6e:	e04c      	b.n	8000c0a <HAL_UART_RxCpltCallback+0x15a>
	}
	case '*': {
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000b70:	4b49      	ldr	r3, [pc, #292]	; (8000c98 <HAL_UART_RxCpltCallback+0x1e8>)
 8000b72:	2180      	movs	r1, #128	; 0x80
 8000b74:	2200      	movs	r2, #0
 8000b76:	0018      	movs	r0, r3
 8000b78:	f002 fa77 	bl	800306a <HAL_GPIO_WritePin>
		break;
 8000b7c:	e045      	b.n	8000c0a <HAL_UART_RxCpltCallback+0x15a>
	}
	case 'f': {
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000b7e:	4846      	ldr	r0, [pc, #280]	; (8000c98 <HAL_UART_RxCpltCallback+0x1e8>)
 8000b80:	2380      	movs	r3, #128	; 0x80
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	2201      	movs	r2, #1
 8000b86:	0019      	movs	r1, r3
 8000b88:	f002 fa6f 	bl	800306a <HAL_GPIO_WritePin>
		break;
 8000b8c:	e03d      	b.n	8000c0a <HAL_UART_RxCpltCallback+0x15a>
	}
	case '(': {
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000b8e:	4842      	ldr	r0, [pc, #264]	; (8000c98 <HAL_UART_RxCpltCallback+0x1e8>)
 8000b90:	2380      	movs	r3, #128	; 0x80
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	2200      	movs	r2, #0
 8000b96:	0019      	movs	r1, r3
 8000b98:	f002 fa67 	bl	800306a <HAL_GPIO_WritePin>
		break;
 8000b9c:	e035      	b.n	8000c0a <HAL_UART_RxCpltCallback+0x15a>
	}
	case 'g': {
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000b9e:	483e      	ldr	r0, [pc, #248]	; (8000c98 <HAL_UART_RxCpltCallback+0x1e8>)
 8000ba0:	2380      	movs	r3, #128	; 0x80
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	0019      	movs	r1, r3
 8000ba8:	f002 fa5f 	bl	800306a <HAL_GPIO_WritePin>
		break;
 8000bac:	e02d      	b.n	8000c0a <HAL_UART_RxCpltCallback+0x15a>
	}
	case ')': {
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000bae:	483a      	ldr	r0, [pc, #232]	; (8000c98 <HAL_UART_RxCpltCallback+0x1e8>)
 8000bb0:	2380      	movs	r3, #128	; 0x80
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	0019      	movs	r1, r3
 8000bb8:	f002 fa57 	bl	800306a <HAL_GPIO_WritePin>
		break;
 8000bbc:	e025      	b.n	8000c0a <HAL_UART_RxCpltCallback+0x15a>
	}
	case 'h': {
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000bbe:	4b36      	ldr	r3, [pc, #216]	; (8000c98 <HAL_UART_RxCpltCallback+0x1e8>)
 8000bc0:	2140      	movs	r1, #64	; 0x40
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	f002 fa50 	bl	800306a <HAL_GPIO_WritePin>
		break;
 8000bca:	e01e      	b.n	8000c0a <HAL_UART_RxCpltCallback+0x15a>
	}
	case '-': {
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000bcc:	4b32      	ldr	r3, [pc, #200]	; (8000c98 <HAL_UART_RxCpltCallback+0x1e8>)
 8000bce:	2140      	movs	r1, #64	; 0x40
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f002 fa49 	bl	800306a <HAL_GPIO_WritePin>
		break;
 8000bd8:	e017      	b.n	8000c0a <HAL_UART_RxCpltCallback+0x15a>
	}
	case '1': {
		PMT_ON = 1;
 8000bda:	4b30      	ldr	r3, [pc, #192]	; (8000c9c <HAL_UART_RxCpltCallback+0x1ec>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	701a      	strb	r2, [r3, #0]
		break;
 8000be0:	e013      	b.n	8000c0a <HAL_UART_RxCpltCallback+0x15a>
	}
	case '!': {
		PMT_ON = 0;
 8000be2:	4b2e      	ldr	r3, [pc, #184]	; (8000c9c <HAL_UART_RxCpltCallback+0x1ec>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	701a      	strb	r2, [r3, #0]
		break;
 8000be8:	e00f      	b.n	8000c0a <HAL_UART_RxCpltCallback+0x15a>
	}
	case '2': {
		ERPA_ON = 1;
 8000bea:	4b2d      	ldr	r3, [pc, #180]	; (8000ca0 <HAL_UART_RxCpltCallback+0x1f0>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	701a      	strb	r2, [r3, #0]
		break;
 8000bf0:	e00b      	b.n	8000c0a <HAL_UART_RxCpltCallback+0x15a>
	}
	case '@': {
		ERPA_ON = 0;
 8000bf2:	4b2b      	ldr	r3, [pc, #172]	; (8000ca0 <HAL_UART_RxCpltCallback+0x1f0>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	701a      	strb	r2, [r3, #0]
		break;
 8000bf8:	e007      	b.n	8000c0a <HAL_UART_RxCpltCallback+0x15a>
	}
	case '3': {
		HK_ON = 1;
 8000bfa:	4b2a      	ldr	r3, [pc, #168]	; (8000ca4 <HAL_UART_RxCpltCallback+0x1f4>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	701a      	strb	r2, [r3, #0]
		break;
 8000c00:	e003      	b.n	8000c0a <HAL_UART_RxCpltCallback+0x15a>
	}
	case '#': {
		HK_ON = 0;
 8000c02:	4b28      	ldr	r3, [pc, #160]	; (8000ca4 <HAL_UART_RxCpltCallback+0x1f4>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	701a      	strb	r2, [r3, #0]
		break;
 8000c08:	46c0      	nop			; (mov r8, r8)
	}
	}

	for (int i = 0; i < num_gpios; i++) {
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]
 8000c0e:	e025      	b.n	8000c5c <HAL_UART_RxCpltCallback+0x1ac>
		const char *gpioStatus =
				(HAL_GPIO_ReadPin(gpios[i].gpio, gpios[i].pin) == GPIO_PIN_SET) ?
 8000c10:	4b25      	ldr	r3, [pc, #148]	; (8000ca8 <HAL_UART_RxCpltCallback+0x1f8>)
 8000c12:	697a      	ldr	r2, [r7, #20]
 8000c14:	00d2      	lsls	r2, r2, #3
 8000c16:	58d0      	ldr	r0, [r2, r3]
 8000c18:	4a23      	ldr	r2, [pc, #140]	; (8000ca8 <HAL_UART_RxCpltCallback+0x1f8>)
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	00db      	lsls	r3, r3, #3
 8000c1e:	18d3      	adds	r3, r2, r3
 8000c20:	3304      	adds	r3, #4
 8000c22:	881b      	ldrh	r3, [r3, #0]
 8000c24:	0019      	movs	r1, r3
 8000c26:	f002 fa03 	bl	8003030 <HAL_GPIO_ReadPin>
 8000c2a:	0003      	movs	r3, r0
		const char *gpioStatus =
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d101      	bne.n	8000c34 <HAL_UART_RxCpltCallback+0x184>
 8000c30:	4b1e      	ldr	r3, [pc, #120]	; (8000cac <HAL_UART_RxCpltCallback+0x1fc>)
 8000c32:	e000      	b.n	8000c36 <HAL_UART_RxCpltCallback+0x186>
 8000c34:	4b1e      	ldr	r3, [pc, #120]	; (8000cb0 <HAL_UART_RxCpltCallback+0x200>)
 8000c36:	60fb      	str	r3, [r7, #12]
						": H" : ": L";

		// Add GPIO name and status to the output buffer
		add_to_gpiobuf(gpio_names[i]);
 8000c38:	4b1e      	ldr	r3, [pc, #120]	; (8000cb4 <HAL_UART_RxCpltCallback+0x204>)
 8000c3a:	697a      	ldr	r2, [r7, #20]
 8000c3c:	0092      	lsls	r2, r2, #2
 8000c3e:	58d3      	ldr	r3, [r2, r3]
 8000c40:	0018      	movs	r0, r3
 8000c42:	f7ff faf5 	bl	8000230 <add_to_gpiobuf>
		add_to_gpiobuf(gpioStatus);
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	0018      	movs	r0, r3
 8000c4a:	f7ff faf1 	bl	8000230 <add_to_gpiobuf>
		add_to_gpiobuf("\r\n");
 8000c4e:	4b1a      	ldr	r3, [pc, #104]	; (8000cb8 <HAL_UART_RxCpltCallback+0x208>)
 8000c50:	0018      	movs	r0, r3
 8000c52:	f7ff faed 	bl	8000230 <add_to_gpiobuf>
	for (int i = 0; i < num_gpios; i++) {
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	617b      	str	r3, [r7, #20]
 8000c5c:	4b17      	ldr	r3, [pc, #92]	; (8000cbc <HAL_UART_RxCpltCallback+0x20c>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	697a      	ldr	r2, [r7, #20]
 8000c62:	429a      	cmp	r2, r3
 8000c64:	dbd4      	blt.n	8000c10 <HAL_UART_RxCpltCallback+0x160>
	}
	add_to_gpiobuf("\r\n");
 8000c66:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <HAL_UART_RxCpltCallback+0x208>)
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f7ff fae1 	bl	8000230 <add_to_gpiobuf>
	// Proceed with sending data using RTS/CTS flow control

	// ...

	// Transmit the data
	HAL_UART_Transmit(&huart1, gpio_buf, sizeof(gpio_buf), 100);
 8000c6e:	4914      	ldr	r1, [pc, #80]	; (8000cc0 <HAL_UART_RxCpltCallback+0x210>)
 8000c70:	4805      	ldr	r0, [pc, #20]	; (8000c88 <HAL_UART_RxCpltCallback+0x1d8>)
 8000c72:	2364      	movs	r3, #100	; 0x64
 8000c74:	2264      	movs	r2, #100	; 0x64
 8000c76:	f005 f87f 	bl	8005d78 <HAL_UART_Transmit>
}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	b006      	add	sp, #24
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	20000394 	.word	0x20000394
 8000c88:	200002a8 	.word	0x200002a8
 8000c8c:	20000390 	.word	0x20000390
 8000c90:	08007258 	.word	0x08007258
 8000c94:	48000400 	.word	0x48000400
 8000c98:	48000800 	.word	0x48000800
 8000c9c:	20000040 	.word	0x20000040
 8000ca0:	20000041 	.word	0x20000041
 8000ca4:	20000042 	.word	0x20000042
 8000ca8:	08007214 	.word	0x08007214
 8000cac:	080071e8 	.word	0x080071e8
 8000cb0:	080071ec 	.word	0x080071ec
 8000cb4:	20000004 	.word	0x20000004
 8000cb8:	080071f0 	.word	0x080071f0
 8000cbc:	20000000 	.word	0x20000000
 8000cc0:	2000032c 	.word	0x2000032c

08000cc4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000cca:	f001 f85f 	bl	8001d8c <HAL_Init>
	int16_t val;
	float temp_c;
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000cce:	f000 f835 	bl	8000d3c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000cd2:	f000 fc39 	bl	8001548 <MX_GPIO_Init>
	MX_DMA_Init();
 8000cd6:	f000 fc19 	bl	800150c <MX_DMA_Init>
	MX_SPI2_Init();
 8000cda:	f000 fa5d 	bl	8001198 <MX_SPI2_Init>
	MX_TIM1_Init();
 8000cde:	f000 fa9b 	bl	8001218 <MX_TIM1_Init>
	MX_TIM2_Init();
 8000ce2:	f000 fb51 	bl	8001388 <MX_TIM2_Init>
	MX_SPI1_Init();
 8000ce6:	f000 fa17 	bl	8001118 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 8000cea:	f000 fbcf 	bl	800148c <MX_USART1_UART_Init>
	MX_DAC1_Init();
 8000cee:	f000 f9a1 	bl	8001034 <MX_DAC1_Init>
	MX_ADC_Init();
 8000cf2:	f000 f88d 	bl	8000e10 <MX_ADC_Init>
	MX_I2C1_Init();
 8000cf6:	f000 f9cf 	bl	8001098 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */

	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000cfa:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <main+0x64>)
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	0018      	movs	r0, r3
 8000d00:	f001 fdd7 	bl	80028b2 <HAL_DAC_Start>

	/* Start Timers with OC & Interrupt */
	HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000d04:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <main+0x68>)
 8000d06:	2100      	movs	r1, #0
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f004 f879 	bl	8004e00 <HAL_TIM_OC_Start_IT>
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000d0e:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <main+0x6c>)
 8000d10:	210c      	movs	r1, #12
 8000d12:	0018      	movs	r0, r3
 8000d14:	f004 f874 	bl	8004e00 <HAL_TIM_OC_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000d18:	4906      	ldr	r1, [pc, #24]	; (8000d34 <main+0x70>)
 8000d1a:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <main+0x74>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f005 f8d3 	bl	8005eca <HAL_UART_Receive_IT>
 8000d24:	e7f8      	b.n	8000d18 <main+0x54>
 8000d26:	46c0      	nop			; (mov r8, r8)
 8000d28:	200000f0 	.word	0x200000f0
 8000d2c:	20000218 	.word	0x20000218
 8000d30:	20000260 	.word	0x20000260
 8000d34:	20000394 	.word	0x20000394
 8000d38:	200002a8 	.word	0x200002a8

08000d3c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000d3c:	b590      	push	{r4, r7, lr}
 8000d3e:	b097      	sub	sp, #92	; 0x5c
 8000d40:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000d42:	2428      	movs	r4, #40	; 0x28
 8000d44:	193b      	adds	r3, r7, r4
 8000d46:	0018      	movs	r0, r3
 8000d48:	2330      	movs	r3, #48	; 0x30
 8000d4a:	001a      	movs	r2, r3
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	f006 f9e5 	bl	800711c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000d52:	2318      	movs	r3, #24
 8000d54:	18fb      	adds	r3, r7, r3
 8000d56:	0018      	movs	r0, r3
 8000d58:	2310      	movs	r3, #16
 8000d5a:	001a      	movs	r2, r3
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	f006 f9dd 	bl	800711c <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	0018      	movs	r0, r3
 8000d66:	2314      	movs	r3, #20
 8000d68:	001a      	movs	r2, r3
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	f006 f9d6 	bl	800711c <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000d70:	0021      	movs	r1, r4
 8000d72:	187b      	adds	r3, r7, r1
 8000d74:	2212      	movs	r2, #18
 8000d76:	601a      	str	r2, [r3, #0]
			| RCC_OSCILLATORTYPE_HSI14;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d78:	187b      	adds	r3, r7, r1
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000d7e:	187b      	adds	r3, r7, r1
 8000d80:	2201      	movs	r2, #1
 8000d82:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d84:	187b      	adds	r3, r7, r1
 8000d86:	2210      	movs	r2, #16
 8000d88:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000d8a:	187b      	adds	r3, r7, r1
 8000d8c:	2210      	movs	r2, #16
 8000d8e:	619a      	str	r2, [r3, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d90:	187b      	adds	r3, r7, r1
 8000d92:	2202      	movs	r2, #2
 8000d94:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d96:	187b      	adds	r3, r7, r1
 8000d98:	2200      	movs	r2, #0
 8000d9a:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000d9c:	187b      	adds	r3, r7, r1
 8000d9e:	22a0      	movs	r2, #160	; 0xa0
 8000da0:	0392      	lsls	r2, r2, #14
 8000da2:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000da4:	187b      	adds	r3, r7, r1
 8000da6:	2200      	movs	r2, #0
 8000da8:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000daa:	187b      	adds	r3, r7, r1
 8000dac:	0018      	movs	r0, r3
 8000dae:	f002 feaf 	bl	8003b10 <HAL_RCC_OscConfig>
 8000db2:	1e03      	subs	r3, r0, #0
 8000db4:	d001      	beq.n	8000dba <SystemClock_Config+0x7e>
		Error_Handler();
 8000db6:	f000 fc61 	bl	800167c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000dba:	2118      	movs	r1, #24
 8000dbc:	187b      	adds	r3, r7, r1
 8000dbe:	2207      	movs	r2, #7
 8000dc0:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dc2:	187b      	adds	r3, r7, r1
 8000dc4:	2202      	movs	r2, #2
 8000dc6:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dc8:	187b      	adds	r3, r7, r1
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000dd4:	187b      	adds	r3, r7, r1
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	0018      	movs	r0, r3
 8000dda:	f003 f9b3 	bl	8004144 <HAL_RCC_ClockConfig>
 8000dde:	1e03      	subs	r3, r0, #0
 8000de0:	d001      	beq.n	8000de6 <SystemClock_Config+0xaa>
		Error_Handler();
 8000de2:	f000 fc4b 	bl	800167c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	2221      	movs	r2, #33	; 0x21
 8000dea:	601a      	str	r2, [r3, #0]
			| RCC_PERIPHCLK_I2C1;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8000dec:	1d3b      	adds	r3, r7, #4
 8000dee:	2203      	movs	r2, #3
 8000df0:	609a      	str	r2, [r3, #8]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	2200      	movs	r2, #0
 8000df6:	60da      	str	r2, [r3, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f003 faf4 	bl	80043e8 <HAL_RCCEx_PeriphCLKConfig>
 8000e00:	1e03      	subs	r3, r0, #0
 8000e02:	d001      	beq.n	8000e08 <SystemClock_Config+0xcc>
		Error_Handler();
 8000e04:	f000 fc3a 	bl	800167c <Error_Handler>
	}
}
 8000e08:	46c0      	nop			; (mov r8, r8)
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	b017      	add	sp, #92	; 0x5c
 8000e0e:	bd90      	pop	{r4, r7, pc}

08000e10 <MX_ADC_Init>:
/**
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC_Init 0 */

	/* USER CODE END ADC_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	0018      	movs	r0, r3
 8000e1a:	230c      	movs	r3, #12
 8000e1c:	001a      	movs	r2, r3
 8000e1e:	2100      	movs	r1, #0
 8000e20:	f006 f97c 	bl	800711c <memset>

	/* USER CODE END ADC_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC1;
 8000e24:	4b81      	ldr	r3, [pc, #516]	; (800102c <MX_ADC_Init+0x21c>)
 8000e26:	4a82      	ldr	r2, [pc, #520]	; (8001030 <MX_ADC_Init+0x220>)
 8000e28:	601a      	str	r2, [r3, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e2a:	4b80      	ldr	r3, [pc, #512]	; (800102c <MX_ADC_Init+0x21c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000e30:	4b7e      	ldr	r3, [pc, #504]	; (800102c <MX_ADC_Init+0x21c>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e36:	4b7d      	ldr	r3, [pc, #500]	; (800102c <MX_ADC_Init+0x21c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	60da      	str	r2, [r3, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000e3c:	4b7b      	ldr	r3, [pc, #492]	; (800102c <MX_ADC_Init+0x21c>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	611a      	str	r2, [r3, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e42:	4b7a      	ldr	r3, [pc, #488]	; (800102c <MX_ADC_Init+0x21c>)
 8000e44:	2204      	movs	r2, #4
 8000e46:	615a      	str	r2, [r3, #20]
	hadc.Init.LowPowerAutoWait = DISABLE;
 8000e48:	4b78      	ldr	r3, [pc, #480]	; (800102c <MX_ADC_Init+0x21c>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	761a      	strb	r2, [r3, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000e4e:	4b77      	ldr	r3, [pc, #476]	; (800102c <MX_ADC_Init+0x21c>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	765a      	strb	r2, [r3, #25]
	hadc.Init.ContinuousConvMode = DISABLE;
 8000e54:	4b75      	ldr	r3, [pc, #468]	; (800102c <MX_ADC_Init+0x21c>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	769a      	strb	r2, [r3, #26]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 8000e5a:	4b74      	ldr	r3, [pc, #464]	; (800102c <MX_ADC_Init+0x21c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	76da      	strb	r2, [r3, #27]
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e60:	4b72      	ldr	r3, [pc, #456]	; (800102c <MX_ADC_Init+0x21c>)
 8000e62:	22c2      	movs	r2, #194	; 0xc2
 8000e64:	32ff      	adds	r2, #255	; 0xff
 8000e66:	61da      	str	r2, [r3, #28]
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e68:	4b70      	ldr	r3, [pc, #448]	; (800102c <MX_ADC_Init+0x21c>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	621a      	str	r2, [r3, #32]
	hadc.Init.DMAContinuousRequests = DISABLE;
 8000e6e:	4b6f      	ldr	r3, [pc, #444]	; (800102c <MX_ADC_Init+0x21c>)
 8000e70:	2224      	movs	r2, #36	; 0x24
 8000e72:	2100      	movs	r1, #0
 8000e74:	5499      	strb	r1, [r3, r2]
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e76:	4b6d      	ldr	r3, [pc, #436]	; (800102c <MX_ADC_Init+0x21c>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8000e7c:	4b6b      	ldr	r3, [pc, #428]	; (800102c <MX_ADC_Init+0x21c>)
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f000 ffe8 	bl	8001e54 <HAL_ADC_Init>
 8000e84:	1e03      	subs	r3, r0, #0
 8000e86:	d001      	beq.n	8000e8c <MX_ADC_Init+0x7c>
		Error_Handler();
 8000e88:	f000 fbf8 	bl	800167c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000e8c:	1d3b      	adds	r3, r7, #4
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000e92:	1d3b      	adds	r3, r7, #4
 8000e94:	2280      	movs	r2, #128	; 0x80
 8000e96:	0152      	lsls	r2, r2, #5
 8000e98:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	2280      	movs	r2, #128	; 0x80
 8000e9e:	0552      	lsls	r2, r2, #21
 8000ea0:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000ea2:	1d3a      	adds	r2, r7, #4
 8000ea4:	4b61      	ldr	r3, [pc, #388]	; (800102c <MX_ADC_Init+0x21c>)
 8000ea6:	0011      	movs	r1, r2
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	f001 f9ad 	bl	8002208 <HAL_ADC_ConfigChannel>
 8000eae:	1e03      	subs	r3, r0, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_ADC_Init+0xa6>
		Error_Handler();
 8000eb2:	f000 fbe3 	bl	800167c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	2201      	movs	r2, #1
 8000eba:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000ebc:	1d3a      	adds	r2, r7, #4
 8000ebe:	4b5b      	ldr	r3, [pc, #364]	; (800102c <MX_ADC_Init+0x21c>)
 8000ec0:	0011      	movs	r1, r2
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	f001 f9a0 	bl	8002208 <HAL_ADC_ConfigChannel>
 8000ec8:	1e03      	subs	r3, r0, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_ADC_Init+0xc0>
		Error_Handler();
 8000ecc:	f000 fbd6 	bl	800167c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 8000ed0:	1d3b      	adds	r3, r7, #4
 8000ed2:	2202      	movs	r2, #2
 8000ed4:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000ed6:	1d3a      	adds	r2, r7, #4
 8000ed8:	4b54      	ldr	r3, [pc, #336]	; (800102c <MX_ADC_Init+0x21c>)
 8000eda:	0011      	movs	r1, r2
 8000edc:	0018      	movs	r0, r3
 8000ede:	f001 f993 	bl	8002208 <HAL_ADC_ConfigChannel>
 8000ee2:	1e03      	subs	r3, r0, #0
 8000ee4:	d001      	beq.n	8000eea <MX_ADC_Init+0xda>
		Error_Handler();
 8000ee6:	f000 fbc9 	bl	800167c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	2203      	movs	r2, #3
 8000eee:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000ef0:	1d3a      	adds	r2, r7, #4
 8000ef2:	4b4e      	ldr	r3, [pc, #312]	; (800102c <MX_ADC_Init+0x21c>)
 8000ef4:	0011      	movs	r1, r2
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f001 f986 	bl	8002208 <HAL_ADC_ConfigChannel>
 8000efc:	1e03      	subs	r3, r0, #0
 8000efe:	d001      	beq.n	8000f04 <MX_ADC_Init+0xf4>
		Error_Handler();
 8000f00:	f000 fbbc 	bl	800167c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	2205      	movs	r2, #5
 8000f08:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000f0a:	1d3a      	adds	r2, r7, #4
 8000f0c:	4b47      	ldr	r3, [pc, #284]	; (800102c <MX_ADC_Init+0x21c>)
 8000f0e:	0011      	movs	r1, r2
 8000f10:	0018      	movs	r0, r3
 8000f12:	f001 f979 	bl	8002208 <HAL_ADC_ConfigChannel>
 8000f16:	1e03      	subs	r3, r0, #0
 8000f18:	d001      	beq.n	8000f1e <MX_ADC_Init+0x10e>
		Error_Handler();
 8000f1a:	f000 fbaf 	bl	800167c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_6;
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	2206      	movs	r2, #6
 8000f22:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000f24:	1d3a      	adds	r2, r7, #4
 8000f26:	4b41      	ldr	r3, [pc, #260]	; (800102c <MX_ADC_Init+0x21c>)
 8000f28:	0011      	movs	r1, r2
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	f001 f96c 	bl	8002208 <HAL_ADC_ConfigChannel>
 8000f30:	1e03      	subs	r3, r0, #0
 8000f32:	d001      	beq.n	8000f38 <MX_ADC_Init+0x128>
		Error_Handler();
 8000f34:	f000 fba2 	bl	800167c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_7;
 8000f38:	1d3b      	adds	r3, r7, #4
 8000f3a:	2207      	movs	r2, #7
 8000f3c:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000f3e:	1d3a      	adds	r2, r7, #4
 8000f40:	4b3a      	ldr	r3, [pc, #232]	; (800102c <MX_ADC_Init+0x21c>)
 8000f42:	0011      	movs	r1, r2
 8000f44:	0018      	movs	r0, r3
 8000f46:	f001 f95f 	bl	8002208 <HAL_ADC_ConfigChannel>
 8000f4a:	1e03      	subs	r3, r0, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_ADC_Init+0x142>
		Error_Handler();
 8000f4e:	f000 fb95 	bl	800167c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	2208      	movs	r2, #8
 8000f56:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000f58:	1d3a      	adds	r2, r7, #4
 8000f5a:	4b34      	ldr	r3, [pc, #208]	; (800102c <MX_ADC_Init+0x21c>)
 8000f5c:	0011      	movs	r1, r2
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f001 f952 	bl	8002208 <HAL_ADC_ConfigChannel>
 8000f64:	1e03      	subs	r3, r0, #0
 8000f66:	d001      	beq.n	8000f6c <MX_ADC_Init+0x15c>
		Error_Handler();
 8000f68:	f000 fb88 	bl	800167c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 8000f6c:	1d3b      	adds	r3, r7, #4
 8000f6e:	2209      	movs	r2, #9
 8000f70:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000f72:	1d3a      	adds	r2, r7, #4
 8000f74:	4b2d      	ldr	r3, [pc, #180]	; (800102c <MX_ADC_Init+0x21c>)
 8000f76:	0011      	movs	r1, r2
 8000f78:	0018      	movs	r0, r3
 8000f7a:	f001 f945 	bl	8002208 <HAL_ADC_ConfigChannel>
 8000f7e:	1e03      	subs	r3, r0, #0
 8000f80:	d001      	beq.n	8000f86 <MX_ADC_Init+0x176>
		Error_Handler();
 8000f82:	f000 fb7b 	bl	800167c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_10;
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	220a      	movs	r2, #10
 8000f8a:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000f8c:	1d3a      	adds	r2, r7, #4
 8000f8e:	4b27      	ldr	r3, [pc, #156]	; (800102c <MX_ADC_Init+0x21c>)
 8000f90:	0011      	movs	r1, r2
 8000f92:	0018      	movs	r0, r3
 8000f94:	f001 f938 	bl	8002208 <HAL_ADC_ConfigChannel>
 8000f98:	1e03      	subs	r3, r0, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_ADC_Init+0x190>
		Error_Handler();
 8000f9c:	f000 fb6e 	bl	800167c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_11;
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	220b      	movs	r2, #11
 8000fa4:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000fa6:	1d3a      	adds	r2, r7, #4
 8000fa8:	4b20      	ldr	r3, [pc, #128]	; (800102c <MX_ADC_Init+0x21c>)
 8000faa:	0011      	movs	r1, r2
 8000fac:	0018      	movs	r0, r3
 8000fae:	f001 f92b 	bl	8002208 <HAL_ADC_ConfigChannel>
 8000fb2:	1e03      	subs	r3, r0, #0
 8000fb4:	d001      	beq.n	8000fba <MX_ADC_Init+0x1aa>
		Error_Handler();
 8000fb6:	f000 fb61 	bl	800167c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_12;
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	220c      	movs	r2, #12
 8000fbe:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000fc0:	1d3a      	adds	r2, r7, #4
 8000fc2:	4b1a      	ldr	r3, [pc, #104]	; (800102c <MX_ADC_Init+0x21c>)
 8000fc4:	0011      	movs	r1, r2
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	f001 f91e 	bl	8002208 <HAL_ADC_ConfigChannel>
 8000fcc:	1e03      	subs	r3, r0, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_ADC_Init+0x1c4>
		Error_Handler();
 8000fd0:	f000 fb54 	bl	800167c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_13;
 8000fd4:	1d3b      	adds	r3, r7, #4
 8000fd6:	220d      	movs	r2, #13
 8000fd8:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000fda:	1d3a      	adds	r2, r7, #4
 8000fdc:	4b13      	ldr	r3, [pc, #76]	; (800102c <MX_ADC_Init+0x21c>)
 8000fde:	0011      	movs	r1, r2
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	f001 f911 	bl	8002208 <HAL_ADC_ConfigChannel>
 8000fe6:	1e03      	subs	r3, r0, #0
 8000fe8:	d001      	beq.n	8000fee <MX_ADC_Init+0x1de>
		Error_Handler();
 8000fea:	f000 fb47 	bl	800167c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_14;
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	220e      	movs	r2, #14
 8000ff2:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000ff4:	1d3a      	adds	r2, r7, #4
 8000ff6:	4b0d      	ldr	r3, [pc, #52]	; (800102c <MX_ADC_Init+0x21c>)
 8000ff8:	0011      	movs	r1, r2
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	f001 f904 	bl	8002208 <HAL_ADC_ConfigChannel>
 8001000:	1e03      	subs	r3, r0, #0
 8001002:	d001      	beq.n	8001008 <MX_ADC_Init+0x1f8>
		Error_Handler();
 8001004:	f000 fb3a 	bl	800167c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_15;
 8001008:	1d3b      	adds	r3, r7, #4
 800100a:	220f      	movs	r2, #15
 800100c:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800100e:	1d3a      	adds	r2, r7, #4
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <MX_ADC_Init+0x21c>)
 8001012:	0011      	movs	r1, r2
 8001014:	0018      	movs	r0, r3
 8001016:	f001 f8f7 	bl	8002208 <HAL_ADC_ConfigChannel>
 800101a:	1e03      	subs	r3, r0, #0
 800101c:	d001      	beq.n	8001022 <MX_ADC_Init+0x212>
		Error_Handler();
 800101e:	f000 fb2d 	bl	800167c <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	46bd      	mov	sp, r7
 8001026:	b004      	add	sp, #16
 8001028:	bd80      	pop	{r7, pc}
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	2000006c 	.word	0x2000006c
 8001030:	40012400 	.word	0x40012400

08001034 <MX_DAC1_Init>:
/**
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC1_Init(void) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC1_Init 0 */
	step = 0;
 800103a:	4b14      	ldr	r3, [pc, #80]	; (800108c <MX_DAC1_Init+0x58>)
 800103c:	2200      	movs	r2, #0
 800103e:	701a      	strb	r2, [r3, #0]
	/* USER CODE END DAC1_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 8001040:	003b      	movs	r3, r7
 8001042:	0018      	movs	r0, r3
 8001044:	2308      	movs	r3, #8
 8001046:	001a      	movs	r2, r3
 8001048:	2100      	movs	r1, #0
 800104a:	f006 f867 	bl	800711c <memset>

	/* USER CODE END DAC1_Init 1 */

	/** DAC Initialization
	 */
	hdac1.Instance = DAC;
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <MX_DAC1_Init+0x5c>)
 8001050:	4a10      	ldr	r2, [pc, #64]	; (8001094 <MX_DAC1_Init+0x60>)
 8001052:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK) {
 8001054:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <MX_DAC1_Init+0x5c>)
 8001056:	0018      	movs	r0, r3
 8001058:	f001 fbca 	bl	80027f0 <HAL_DAC_Init>
 800105c:	1e03      	subs	r3, r0, #0
 800105e:	d001      	beq.n	8001064 <MX_DAC1_Init+0x30>
		Error_Handler();
 8001060:	f000 fb0c 	bl	800167c <Error_Handler>
	}

	/** DAC channel OUT1 config
	 */
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001064:	003b      	movs	r3, r7
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800106a:	003b      	movs	r3, r7
 800106c:	2200      	movs	r2, #0
 800106e:	605a      	str	r2, [r3, #4]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8001070:	0039      	movs	r1, r7
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <MX_DAC1_Init+0x5c>)
 8001074:	2200      	movs	r2, #0
 8001076:	0018      	movs	r0, r3
 8001078:	f001 fbdd 	bl	8002836 <HAL_DAC_ConfigChannel>
 800107c:	1e03      	subs	r3, r0, #0
 800107e:	d001      	beq.n	8001084 <MX_DAC1_Init+0x50>
		Error_Handler();
 8001080:	f000 fafc 	bl	800167c <Error_Handler>
	}
	/* USER CODE BEGIN DAC1_Init 2 */

	/* USER CODE END DAC1_Init 2 */

}
 8001084:	46c0      	nop			; (mov r8, r8)
 8001086:	46bd      	mov	sp, r7
 8001088:	b002      	add	sp, #8
 800108a:	bd80      	pop	{r7, pc}
 800108c:	2000041a 	.word	0x2000041a
 8001090:	200000f0 	.word	0x200000f0
 8001094:	40007400 	.word	0x40007400

08001098 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800109c:	4b1b      	ldr	r3, [pc, #108]	; (800110c <MX_I2C1_Init+0x74>)
 800109e:	4a1c      	ldr	r2, [pc, #112]	; (8001110 <MX_I2C1_Init+0x78>)
 80010a0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x2000090E;
 80010a2:	4b1a      	ldr	r3, [pc, #104]	; (800110c <MX_I2C1_Init+0x74>)
 80010a4:	4a1b      	ldr	r2, [pc, #108]	; (8001114 <MX_I2C1_Init+0x7c>)
 80010a6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80010a8:	4b18      	ldr	r3, [pc, #96]	; (800110c <MX_I2C1_Init+0x74>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010ae:	4b17      	ldr	r3, [pc, #92]	; (800110c <MX_I2C1_Init+0x74>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010b4:	4b15      	ldr	r3, [pc, #84]	; (800110c <MX_I2C1_Init+0x74>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80010ba:	4b14      	ldr	r3, [pc, #80]	; (800110c <MX_I2C1_Init+0x74>)
 80010bc:	2200      	movs	r2, #0
 80010be:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010c0:	4b12      	ldr	r3, [pc, #72]	; (800110c <MX_I2C1_Init+0x74>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010c6:	4b11      	ldr	r3, [pc, #68]	; (800110c <MX_I2C1_Init+0x74>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010cc:	4b0f      	ldr	r3, [pc, #60]	; (800110c <MX_I2C1_Init+0x74>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80010d2:	4b0e      	ldr	r3, [pc, #56]	; (800110c <MX_I2C1_Init+0x74>)
 80010d4:	0018      	movs	r0, r3
 80010d6:	f001 ffe5 	bl	80030a4 <HAL_I2C_Init>
 80010da:	1e03      	subs	r3, r0, #0
 80010dc:	d001      	beq.n	80010e2 <MX_I2C1_Init+0x4a>
		Error_Handler();
 80010de:	f000 facd 	bl	800167c <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 80010e2:	4b0a      	ldr	r3, [pc, #40]	; (800110c <MX_I2C1_Init+0x74>)
 80010e4:	2100      	movs	r1, #0
 80010e6:	0018      	movs	r0, r3
 80010e8:	f002 fc7a 	bl	80039e0 <HAL_I2CEx_ConfigAnalogFilter>
 80010ec:	1e03      	subs	r3, r0, #0
 80010ee:	d001      	beq.n	80010f4 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 80010f0:	f000 fac4 	bl	800167c <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <MX_I2C1_Init+0x74>)
 80010f6:	2100      	movs	r1, #0
 80010f8:	0018      	movs	r0, r3
 80010fa:	f002 fcbd 	bl	8003a78 <HAL_I2CEx_ConfigDigitalFilter>
 80010fe:	1e03      	subs	r3, r0, #0
 8001100:	d001      	beq.n	8001106 <MX_I2C1_Init+0x6e>
		Error_Handler();
 8001102:	f000 fabb 	bl	800167c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001106:	46c0      	nop			; (mov r8, r8)
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000104 	.word	0x20000104
 8001110:	40005400 	.word	0x40005400
 8001114:	2000090e 	.word	0x2000090e

08001118 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800111c:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <MX_SPI1_Init+0x78>)
 800111e:	4a1d      	ldr	r2, [pc, #116]	; (8001194 <MX_SPI1_Init+0x7c>)
 8001120:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001122:	4b1b      	ldr	r3, [pc, #108]	; (8001190 <MX_SPI1_Init+0x78>)
 8001124:	2282      	movs	r2, #130	; 0x82
 8001126:	0052      	lsls	r2, r2, #1
 8001128:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800112a:	4b19      	ldr	r3, [pc, #100]	; (8001190 <MX_SPI1_Init+0x78>)
 800112c:	2280      	movs	r2, #128	; 0x80
 800112e:	00d2      	lsls	r2, r2, #3
 8001130:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001132:	4b17      	ldr	r3, [pc, #92]	; (8001190 <MX_SPI1_Init+0x78>)
 8001134:	22f0      	movs	r2, #240	; 0xf0
 8001136:	0112      	lsls	r2, r2, #4
 8001138:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800113a:	4b15      	ldr	r3, [pc, #84]	; (8001190 <MX_SPI1_Init+0x78>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001140:	4b13      	ldr	r3, [pc, #76]	; (8001190 <MX_SPI1_Init+0x78>)
 8001142:	2200      	movs	r2, #0
 8001144:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001146:	4b12      	ldr	r3, [pc, #72]	; (8001190 <MX_SPI1_Init+0x78>)
 8001148:	2280      	movs	r2, #128	; 0x80
 800114a:	0092      	lsls	r2, r2, #2
 800114c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800114e:	4b10      	ldr	r3, [pc, #64]	; (8001190 <MX_SPI1_Init+0x78>)
 8001150:	2218      	movs	r2, #24
 8001152:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001154:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <MX_SPI1_Init+0x78>)
 8001156:	2200      	movs	r2, #0
 8001158:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800115a:	4b0d      	ldr	r3, [pc, #52]	; (8001190 <MX_SPI1_Init+0x78>)
 800115c:	2200      	movs	r2, #0
 800115e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001160:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <MX_SPI1_Init+0x78>)
 8001162:	2200      	movs	r2, #0
 8001164:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8001166:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <MX_SPI1_Init+0x78>)
 8001168:	2207      	movs	r2, #7
 800116a:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <MX_SPI1_Init+0x78>)
 800116e:	2200      	movs	r2, #0
 8001170:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001172:	4b07      	ldr	r3, [pc, #28]	; (8001190 <MX_SPI1_Init+0x78>)
 8001174:	2208      	movs	r2, #8
 8001176:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001178:	4b05      	ldr	r3, [pc, #20]	; (8001190 <MX_SPI1_Init+0x78>)
 800117a:	0018      	movs	r0, r3
 800117c:	f003 fa12 	bl	80045a4 <HAL_SPI_Init>
 8001180:	1e03      	subs	r3, r0, #0
 8001182:	d001      	beq.n	8001188 <MX_SPI1_Init+0x70>
		Error_Handler();
 8001184:	f000 fa7a 	bl	800167c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001188:	46c0      	nop			; (mov r8, r8)
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	20000150 	.word	0x20000150
 8001194:	40013000 	.word	0x40013000

08001198 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 800119c:	4b1c      	ldr	r3, [pc, #112]	; (8001210 <MX_SPI2_Init+0x78>)
 800119e:	4a1d      	ldr	r2, [pc, #116]	; (8001214 <MX_SPI2_Init+0x7c>)
 80011a0:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80011a2:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <MX_SPI2_Init+0x78>)
 80011a4:	2282      	movs	r2, #130	; 0x82
 80011a6:	0052      	lsls	r2, r2, #1
 80011a8:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80011aa:	4b19      	ldr	r3, [pc, #100]	; (8001210 <MX_SPI2_Init+0x78>)
 80011ac:	2280      	movs	r2, #128	; 0x80
 80011ae:	00d2      	lsls	r2, r2, #3
 80011b0:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80011b2:	4b17      	ldr	r3, [pc, #92]	; (8001210 <MX_SPI2_Init+0x78>)
 80011b4:	22f0      	movs	r2, #240	; 0xf0
 80011b6:	0112      	lsls	r2, r2, #4
 80011b8:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <MX_SPI2_Init+0x78>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011c0:	4b13      	ldr	r3, [pc, #76]	; (8001210 <MX_SPI2_Init+0x78>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 80011c6:	4b12      	ldr	r3, [pc, #72]	; (8001210 <MX_SPI2_Init+0x78>)
 80011c8:	2280      	movs	r2, #128	; 0x80
 80011ca:	0092      	lsls	r2, r2, #2
 80011cc:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80011ce:	4b10      	ldr	r3, [pc, #64]	; (8001210 <MX_SPI2_Init+0x78>)
 80011d0:	2218      	movs	r2, #24
 80011d2:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011d4:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <MX_SPI2_Init+0x78>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80011da:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <MX_SPI2_Init+0x78>)
 80011dc:	2200      	movs	r2, #0
 80011de:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011e0:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <MX_SPI2_Init+0x78>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 80011e6:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <MX_SPI2_Init+0x78>)
 80011e8:	2207      	movs	r2, #7
 80011ea:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011ec:	4b08      	ldr	r3, [pc, #32]	; (8001210 <MX_SPI2_Init+0x78>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	631a      	str	r2, [r3, #48]	; 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011f2:	4b07      	ldr	r3, [pc, #28]	; (8001210 <MX_SPI2_Init+0x78>)
 80011f4:	2208      	movs	r2, #8
 80011f6:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 80011f8:	4b05      	ldr	r3, [pc, #20]	; (8001210 <MX_SPI2_Init+0x78>)
 80011fa:	0018      	movs	r0, r3
 80011fc:	f003 f9d2 	bl	80045a4 <HAL_SPI_Init>
 8001200:	1e03      	subs	r3, r0, #0
 8001202:	d001      	beq.n	8001208 <MX_SPI2_Init+0x70>
		Error_Handler();
 8001204:	f000 fa3a 	bl	800167c <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8001208:	46c0      	nop			; (mov r8, r8)
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	200001b4 	.word	0x200001b4
 8001214:	40003800 	.word	0x40003800

08001218 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b096      	sub	sp, #88	; 0x58
 800121c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800121e:	2348      	movs	r3, #72	; 0x48
 8001220:	18fb      	adds	r3, r7, r3
 8001222:	0018      	movs	r0, r3
 8001224:	2310      	movs	r3, #16
 8001226:	001a      	movs	r2, r3
 8001228:	2100      	movs	r1, #0
 800122a:	f005 ff77 	bl	800711c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800122e:	2340      	movs	r3, #64	; 0x40
 8001230:	18fb      	adds	r3, r7, r3
 8001232:	0018      	movs	r0, r3
 8001234:	2308      	movs	r3, #8
 8001236:	001a      	movs	r2, r3
 8001238:	2100      	movs	r1, #0
 800123a:	f005 ff6f 	bl	800711c <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800123e:	2324      	movs	r3, #36	; 0x24
 8001240:	18fb      	adds	r3, r7, r3
 8001242:	0018      	movs	r0, r3
 8001244:	231c      	movs	r3, #28
 8001246:	001a      	movs	r2, r3
 8001248:	2100      	movs	r1, #0
 800124a:	f005 ff67 	bl	800711c <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	0018      	movs	r0, r3
 8001252:	2320      	movs	r3, #32
 8001254:	001a      	movs	r2, r3
 8001256:	2100      	movs	r1, #0
 8001258:	f005 ff60 	bl	800711c <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800125c:	4b46      	ldr	r3, [pc, #280]	; (8001378 <MX_TIM1_Init+0x160>)
 800125e:	4a47      	ldr	r2, [pc, #284]	; (800137c <MX_TIM1_Init+0x164>)
 8001260:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 100 - 1;
 8001262:	4b45      	ldr	r3, [pc, #276]	; (8001378 <MX_TIM1_Init+0x160>)
 8001264:	2263      	movs	r2, #99	; 0x63
 8001266:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001268:	4b43      	ldr	r3, [pc, #268]	; (8001378 <MX_TIM1_Init+0x160>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 30000 - 1;
 800126e:	4b42      	ldr	r3, [pc, #264]	; (8001378 <MX_TIM1_Init+0x160>)
 8001270:	4a43      	ldr	r2, [pc, #268]	; (8001380 <MX_TIM1_Init+0x168>)
 8001272:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001274:	4b40      	ldr	r3, [pc, #256]	; (8001378 <MX_TIM1_Init+0x160>)
 8001276:	2200      	movs	r2, #0
 8001278:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800127a:	4b3f      	ldr	r3, [pc, #252]	; (8001378 <MX_TIM1_Init+0x160>)
 800127c:	2200      	movs	r2, #0
 800127e:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001280:	4b3d      	ldr	r3, [pc, #244]	; (8001378 <MX_TIM1_Init+0x160>)
 8001282:	2280      	movs	r2, #128	; 0x80
 8001284:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001286:	4b3c      	ldr	r3, [pc, #240]	; (8001378 <MX_TIM1_Init+0x160>)
 8001288:	0018      	movs	r0, r3
 800128a:	f003 fd11 	bl	8004cb0 <HAL_TIM_Base_Init>
 800128e:	1e03      	subs	r3, r0, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM1_Init+0x7e>
		Error_Handler();
 8001292:	f000 f9f3 	bl	800167c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001296:	2148      	movs	r1, #72	; 0x48
 8001298:	187b      	adds	r3, r7, r1
 800129a:	2280      	movs	r2, #128	; 0x80
 800129c:	0152      	lsls	r2, r2, #5
 800129e:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80012a0:	187a      	adds	r2, r7, r1
 80012a2:	4b35      	ldr	r3, [pc, #212]	; (8001378 <MX_TIM1_Init+0x160>)
 80012a4:	0011      	movs	r1, r2
 80012a6:	0018      	movs	r0, r3
 80012a8:	f004 f818 	bl	80052dc <HAL_TIM_ConfigClockSource>
 80012ac:	1e03      	subs	r3, r0, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM1_Init+0x9c>
		Error_Handler();
 80012b0:	f000 f9e4 	bl	800167c <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim1) != HAL_OK) {
 80012b4:	4b30      	ldr	r3, [pc, #192]	; (8001378 <MX_TIM1_Init+0x160>)
 80012b6:	0018      	movs	r0, r3
 80012b8:	f003 fd4a 	bl	8004d50 <HAL_TIM_OC_Init>
 80012bc:	1e03      	subs	r3, r0, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM1_Init+0xac>
		Error_Handler();
 80012c0:	f000 f9dc 	bl	800167c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c4:	2140      	movs	r1, #64	; 0x40
 80012c6:	187b      	adds	r3, r7, r1
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012cc:	187b      	adds	r3, r7, r1
 80012ce:	2200      	movs	r2, #0
 80012d0:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80012d2:	187a      	adds	r2, r7, r1
 80012d4:	4b28      	ldr	r3, [pc, #160]	; (8001378 <MX_TIM1_Init+0x160>)
 80012d6:	0011      	movs	r1, r2
 80012d8:	0018      	movs	r0, r3
 80012da:	f004 fc2d 	bl	8005b38 <HAL_TIMEx_MasterConfigSynchronization>
 80012de:	1e03      	subs	r3, r0, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM1_Init+0xce>
			!= HAL_OK) {
		Error_Handler();
 80012e2:	f000 f9cb 	bl	800167c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80012e6:	2124      	movs	r1, #36	; 0x24
 80012e8:	187b      	adds	r3, r7, r1
 80012ea:	2230      	movs	r2, #48	; 0x30
 80012ec:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 6000 - 1;
 80012ee:	187b      	adds	r3, r7, r1
 80012f0:	4a24      	ldr	r2, [pc, #144]	; (8001384 <MX_TIM1_Init+0x16c>)
 80012f2:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012f4:	187b      	adds	r3, r7, r1
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012fa:	187b      	adds	r3, r7, r1
 80012fc:	2200      	movs	r2, #0
 80012fe:	60da      	str	r2, [r3, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001300:	187b      	adds	r3, r7, r1
 8001302:	2200      	movs	r2, #0
 8001304:	611a      	str	r2, [r3, #16]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001306:	187b      	adds	r3, r7, r1
 8001308:	2200      	movs	r2, #0
 800130a:	615a      	str	r2, [r3, #20]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800130c:	187b      	adds	r3, r7, r1
 800130e:	2200      	movs	r2, #0
 8001310:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8001312:	1879      	adds	r1, r7, r1
 8001314:	4b18      	ldr	r3, [pc, #96]	; (8001378 <MX_TIM1_Init+0x160>)
 8001316:	2200      	movs	r2, #0
 8001318:	0018      	movs	r0, r3
 800131a:	f003 ff87 	bl	800522c <HAL_TIM_OC_ConfigChannel>
 800131e:	1e03      	subs	r3, r0, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM1_Init+0x10e>
		Error_Handler();
 8001322:	f000 f9ab 	bl	800167c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001326:	1d3b      	adds	r3, r7, #4
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800132c:	1d3b      	adds	r3, r7, #4
 800132e:	2200      	movs	r2, #0
 8001330:	605a      	str	r2, [r3, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	2200      	movs	r2, #0
 800133c:	60da      	str	r2, [r3, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	2200      	movs	r2, #0
 8001342:	611a      	str	r2, [r3, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	2280      	movs	r2, #128	; 0x80
 8001348:	0192      	lsls	r2, r2, #6
 800134a:	615a      	str	r2, [r3, #20]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	2200      	movs	r2, #0
 8001350:	61da      	str	r2, [r3, #28]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8001352:	1d3a      	adds	r2, r7, #4
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <MX_TIM1_Init+0x160>)
 8001356:	0011      	movs	r1, r2
 8001358:	0018      	movs	r0, r3
 800135a:	f004 fc4b 	bl	8005bf4 <HAL_TIMEx_ConfigBreakDeadTime>
 800135e:	1e03      	subs	r3, r0, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM1_Init+0x14e>
			!= HAL_OK) {
		Error_Handler();
 8001362:	f000 f98b 	bl	800167c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001366:	4b04      	ldr	r3, [pc, #16]	; (8001378 <MX_TIM1_Init+0x160>)
 8001368:	0018      	movs	r0, r3
 800136a:	f000 fbc7 	bl	8001afc <HAL_TIM_MspPostInit>

}
 800136e:	46c0      	nop			; (mov r8, r8)
 8001370:	46bd      	mov	sp, r7
 8001372:	b016      	add	sp, #88	; 0x58
 8001374:	bd80      	pop	{r7, pc}
 8001376:	46c0      	nop			; (mov r8, r8)
 8001378:	20000218 	.word	0x20000218
 800137c:	40012c00 	.word	0x40012c00
 8001380:	0000752f 	.word	0x0000752f
 8001384:	0000176f 	.word	0x0000176f

08001388 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b08e      	sub	sp, #56	; 0x38
 800138c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800138e:	2328      	movs	r3, #40	; 0x28
 8001390:	18fb      	adds	r3, r7, r3
 8001392:	0018      	movs	r0, r3
 8001394:	2310      	movs	r3, #16
 8001396:	001a      	movs	r2, r3
 8001398:	2100      	movs	r1, #0
 800139a:	f005 febf 	bl	800711c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800139e:	2320      	movs	r3, #32
 80013a0:	18fb      	adds	r3, r7, r3
 80013a2:	0018      	movs	r0, r3
 80013a4:	2308      	movs	r3, #8
 80013a6:	001a      	movs	r2, r3
 80013a8:	2100      	movs	r1, #0
 80013aa:	f005 feb7 	bl	800711c <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	0018      	movs	r0, r3
 80013b2:	231c      	movs	r3, #28
 80013b4:	001a      	movs	r2, r3
 80013b6:	2100      	movs	r1, #0
 80013b8:	f005 feb0 	bl	800711c <memset>

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80013bc:	4b30      	ldr	r3, [pc, #192]	; (8001480 <MX_TIM2_Init+0xf8>)
 80013be:	2280      	movs	r2, #128	; 0x80
 80013c0:	05d2      	lsls	r2, r2, #23
 80013c2:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 100 - 1;
 80013c4:	4b2e      	ldr	r3, [pc, #184]	; (8001480 <MX_TIM2_Init+0xf8>)
 80013c6:	2263      	movs	r2, #99	; 0x63
 80013c8:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ca:	4b2d      	ldr	r3, [pc, #180]	; (8001480 <MX_TIM2_Init+0xf8>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 24000 - 1;
 80013d0:	4b2b      	ldr	r3, [pc, #172]	; (8001480 <MX_TIM2_Init+0xf8>)
 80013d2:	4a2c      	ldr	r2, [pc, #176]	; (8001484 <MX_TIM2_Init+0xfc>)
 80013d4:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d6:	4b2a      	ldr	r3, [pc, #168]	; (8001480 <MX_TIM2_Init+0xf8>)
 80013d8:	2200      	movs	r2, #0
 80013da:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013dc:	4b28      	ldr	r3, [pc, #160]	; (8001480 <MX_TIM2_Init+0xf8>)
 80013de:	2280      	movs	r2, #128	; 0x80
 80013e0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80013e2:	4b27      	ldr	r3, [pc, #156]	; (8001480 <MX_TIM2_Init+0xf8>)
 80013e4:	0018      	movs	r0, r3
 80013e6:	f003 fc63 	bl	8004cb0 <HAL_TIM_Base_Init>
 80013ea:	1e03      	subs	r3, r0, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM2_Init+0x6a>
		Error_Handler();
 80013ee:	f000 f945 	bl	800167c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013f2:	2128      	movs	r1, #40	; 0x28
 80013f4:	187b      	adds	r3, r7, r1
 80013f6:	2280      	movs	r2, #128	; 0x80
 80013f8:	0152      	lsls	r2, r2, #5
 80013fa:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80013fc:	187a      	adds	r2, r7, r1
 80013fe:	4b20      	ldr	r3, [pc, #128]	; (8001480 <MX_TIM2_Init+0xf8>)
 8001400:	0011      	movs	r1, r2
 8001402:	0018      	movs	r0, r3
 8001404:	f003 ff6a 	bl	80052dc <HAL_TIM_ConfigClockSource>
 8001408:	1e03      	subs	r3, r0, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM2_Init+0x88>
		Error_Handler();
 800140c:	f000 f936 	bl	800167c <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim2) != HAL_OK) {
 8001410:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <MX_TIM2_Init+0xf8>)
 8001412:	0018      	movs	r0, r3
 8001414:	f003 fc9c 	bl	8004d50 <HAL_TIM_OC_Init>
 8001418:	1e03      	subs	r3, r0, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM2_Init+0x98>
		Error_Handler();
 800141c:	f000 f92e 	bl	800167c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001420:	2120      	movs	r1, #32
 8001422:	187b      	adds	r3, r7, r1
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001428:	187b      	adds	r3, r7, r1
 800142a:	2200      	movs	r2, #0
 800142c:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800142e:	187a      	adds	r2, r7, r1
 8001430:	4b13      	ldr	r3, [pc, #76]	; (8001480 <MX_TIM2_Init+0xf8>)
 8001432:	0011      	movs	r1, r2
 8001434:	0018      	movs	r0, r3
 8001436:	f004 fb7f 	bl	8005b38 <HAL_TIMEx_MasterConfigSynchronization>
 800143a:	1e03      	subs	r3, r0, #0
 800143c:	d001      	beq.n	8001442 <MX_TIM2_Init+0xba>
			!= HAL_OK) {
		Error_Handler();
 800143e:	f000 f91d 	bl	800167c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	2230      	movs	r2, #48	; 0x30
 8001446:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 12000 - 1;
 8001448:	1d3b      	adds	r3, r7, #4
 800144a:	4a0f      	ldr	r2, [pc, #60]	; (8001488 <MX_TIM2_Init+0x100>)
 800144c:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001454:	1d3b      	adds	r3, r7, #4
 8001456:	2200      	movs	r2, #0
 8001458:	611a      	str	r2, [r3, #16]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) {
 800145a:	1d39      	adds	r1, r7, #4
 800145c:	4b08      	ldr	r3, [pc, #32]	; (8001480 <MX_TIM2_Init+0xf8>)
 800145e:	220c      	movs	r2, #12
 8001460:	0018      	movs	r0, r3
 8001462:	f003 fee3 	bl	800522c <HAL_TIM_OC_ConfigChannel>
 8001466:	1e03      	subs	r3, r0, #0
 8001468:	d001      	beq.n	800146e <MX_TIM2_Init+0xe6>
		Error_Handler();
 800146a:	f000 f907 	bl	800167c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */
	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 800146e:	4b04      	ldr	r3, [pc, #16]	; (8001480 <MX_TIM2_Init+0xf8>)
 8001470:	0018      	movs	r0, r3
 8001472:	f000 fb43 	bl	8001afc <HAL_TIM_MspPostInit>

}
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	46bd      	mov	sp, r7
 800147a:	b00e      	add	sp, #56	; 0x38
 800147c:	bd80      	pop	{r7, pc}
 800147e:	46c0      	nop			; (mov r8, r8)
 8001480:	20000260 	.word	0x20000260
 8001484:	00005dbf 	.word	0x00005dbf
 8001488:	00002edf 	.word	0x00002edf

0800148c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN USART1_Init 0 */
	erpa_seq = 0;
 8001490:	4b19      	ldr	r3, [pc, #100]	; (80014f8 <MX_USART1_UART_Init+0x6c>)
 8001492:	2200      	movs	r2, #0
 8001494:	801a      	strh	r2, [r3, #0]
	pmt_seq = 0;
 8001496:	4b19      	ldr	r3, [pc, #100]	; (80014fc <MX_USART1_UART_Init+0x70>)
 8001498:	2200      	movs	r2, #0
 800149a:	801a      	strh	r2, [r3, #0]
	hk_seq = 0;
 800149c:	4b18      	ldr	r3, [pc, #96]	; (8001500 <MX_USART1_UART_Init+0x74>)
 800149e:	2200      	movs	r2, #0
 80014a0:	801a      	strh	r2, [r3, #0]
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80014a2:	4b18      	ldr	r3, [pc, #96]	; (8001504 <MX_USART1_UART_Init+0x78>)
 80014a4:	4a18      	ldr	r2, [pc, #96]	; (8001508 <MX_USART1_UART_Init+0x7c>)
 80014a6:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80014a8:	4b16      	ldr	r3, [pc, #88]	; (8001504 <MX_USART1_UART_Init+0x78>)
 80014aa:	22e1      	movs	r2, #225	; 0xe1
 80014ac:	0252      	lsls	r2, r2, #9
 80014ae:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014b0:	4b14      	ldr	r3, [pc, #80]	; (8001504 <MX_USART1_UART_Init+0x78>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80014b6:	4b13      	ldr	r3, [pc, #76]	; (8001504 <MX_USART1_UART_Init+0x78>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80014bc:	4b11      	ldr	r3, [pc, #68]	; (8001504 <MX_USART1_UART_Init+0x78>)
 80014be:	2200      	movs	r2, #0
 80014c0:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80014c2:	4b10      	ldr	r3, [pc, #64]	; (8001504 <MX_USART1_UART_Init+0x78>)
 80014c4:	220c      	movs	r2, #12
 80014c6:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014c8:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <MX_USART1_UART_Init+0x78>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014ce:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <MX_USART1_UART_Init+0x78>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014d4:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <MX_USART1_UART_Init+0x78>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014da:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <MX_USART1_UART_Init+0x78>)
 80014dc:	2200      	movs	r2, #0
 80014de:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80014e0:	4b08      	ldr	r3, [pc, #32]	; (8001504 <MX_USART1_UART_Init+0x78>)
 80014e2:	0018      	movs	r0, r3
 80014e4:	f004 fbf4 	bl	8005cd0 <HAL_UART_Init>
 80014e8:	1e03      	subs	r3, r0, #0
 80014ea:	d001      	beq.n	80014f0 <MX_USART1_UART_Init+0x64>
		Error_Handler();
 80014ec:	f000 f8c6 	bl	800167c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80014f0:	46c0      	nop			; (mov r8, r8)
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	20000430 	.word	0x20000430
 80014fc:	2000043a 	.word	0x2000043a
 8001500:	2000045c 	.word	0x2000045c
 8001504:	200002a8 	.word	0x200002a8
 8001508:	40013800 	.word	0x40013800

0800150c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001512:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <MX_DMA_Init+0x38>)
 8001514:	695a      	ldr	r2, [r3, #20]
 8001516:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <MX_DMA_Init+0x38>)
 8001518:	2101      	movs	r1, #1
 800151a:	430a      	orrs	r2, r1
 800151c:	615a      	str	r2, [r3, #20]
 800151e:	4b09      	ldr	r3, [pc, #36]	; (8001544 <MX_DMA_Init+0x38>)
 8001520:	695b      	ldr	r3, [r3, #20]
 8001522:	2201      	movs	r2, #1
 8001524:	4013      	ands	r3, r2
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800152a:	2200      	movs	r2, #0
 800152c:	2100      	movs	r1, #0
 800152e:	2009      	movs	r0, #9
 8001530:	f001 f92c 	bl	800278c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001534:	2009      	movs	r0, #9
 8001536:	f001 f93e 	bl	80027b6 <HAL_NVIC_EnableIRQ>

}
 800153a:	46c0      	nop			; (mov r8, r8)
 800153c:	46bd      	mov	sp, r7
 800153e:	b002      	add	sp, #8
 8001540:	bd80      	pop	{r7, pc}
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	40021000 	.word	0x40021000

08001548 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001548:	b590      	push	{r4, r7, lr}
 800154a:	b08b      	sub	sp, #44	; 0x2c
 800154c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800154e:	2414      	movs	r4, #20
 8001550:	193b      	adds	r3, r7, r4
 8001552:	0018      	movs	r0, r3
 8001554:	2314      	movs	r3, #20
 8001556:	001a      	movs	r2, r3
 8001558:	2100      	movs	r1, #0
 800155a:	f005 fddf 	bl	800711c <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800155e:	4b43      	ldr	r3, [pc, #268]	; (800166c <MX_GPIO_Init+0x124>)
 8001560:	695a      	ldr	r2, [r3, #20]
 8001562:	4b42      	ldr	r3, [pc, #264]	; (800166c <MX_GPIO_Init+0x124>)
 8001564:	2180      	movs	r1, #128	; 0x80
 8001566:	0309      	lsls	r1, r1, #12
 8001568:	430a      	orrs	r2, r1
 800156a:	615a      	str	r2, [r3, #20]
 800156c:	4b3f      	ldr	r3, [pc, #252]	; (800166c <MX_GPIO_Init+0x124>)
 800156e:	695a      	ldr	r2, [r3, #20]
 8001570:	2380      	movs	r3, #128	; 0x80
 8001572:	031b      	lsls	r3, r3, #12
 8001574:	4013      	ands	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800157a:	4b3c      	ldr	r3, [pc, #240]	; (800166c <MX_GPIO_Init+0x124>)
 800157c:	695a      	ldr	r2, [r3, #20]
 800157e:	4b3b      	ldr	r3, [pc, #236]	; (800166c <MX_GPIO_Init+0x124>)
 8001580:	2180      	movs	r1, #128	; 0x80
 8001582:	03c9      	lsls	r1, r1, #15
 8001584:	430a      	orrs	r2, r1
 8001586:	615a      	str	r2, [r3, #20]
 8001588:	4b38      	ldr	r3, [pc, #224]	; (800166c <MX_GPIO_Init+0x124>)
 800158a:	695a      	ldr	r2, [r3, #20]
 800158c:	2380      	movs	r3, #128	; 0x80
 800158e:	03db      	lsls	r3, r3, #15
 8001590:	4013      	ands	r3, r2
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001596:	4b35      	ldr	r3, [pc, #212]	; (800166c <MX_GPIO_Init+0x124>)
 8001598:	695a      	ldr	r2, [r3, #20]
 800159a:	4b34      	ldr	r3, [pc, #208]	; (800166c <MX_GPIO_Init+0x124>)
 800159c:	2180      	movs	r1, #128	; 0x80
 800159e:	0289      	lsls	r1, r1, #10
 80015a0:	430a      	orrs	r2, r1
 80015a2:	615a      	str	r2, [r3, #20]
 80015a4:	4b31      	ldr	r3, [pc, #196]	; (800166c <MX_GPIO_Init+0x124>)
 80015a6:	695a      	ldr	r2, [r3, #20]
 80015a8:	2380      	movs	r3, #128	; 0x80
 80015aa:	029b      	lsls	r3, r3, #10
 80015ac:	4013      	ands	r3, r2
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80015b2:	4b2e      	ldr	r3, [pc, #184]	; (800166c <MX_GPIO_Init+0x124>)
 80015b4:	695a      	ldr	r2, [r3, #20]
 80015b6:	4b2d      	ldr	r3, [pc, #180]	; (800166c <MX_GPIO_Init+0x124>)
 80015b8:	2180      	movs	r1, #128	; 0x80
 80015ba:	02c9      	lsls	r1, r1, #11
 80015bc:	430a      	orrs	r2, r1
 80015be:	615a      	str	r2, [r3, #20]
 80015c0:	4b2a      	ldr	r3, [pc, #168]	; (800166c <MX_GPIO_Init+0x124>)
 80015c2:	695a      	ldr	r2, [r3, #20]
 80015c4:	2380      	movs	r3, #128	; 0x80
 80015c6:	02db      	lsls	r3, r3, #11
 80015c8:	4013      	ands	r3, r2
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC,
 80015ce:	239f      	movs	r3, #159	; 0x9f
 80015d0:	019b      	lsls	r3, r3, #6
 80015d2:	4827      	ldr	r0, [pc, #156]	; (8001670 <MX_GPIO_Init+0x128>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	0019      	movs	r1, r3
 80015d8:	f001 fd47 	bl	800306a <HAL_GPIO_WritePin>
			GPIO_PIN_13 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9
					| GPIO_PIN_10, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6 | GPIO_PIN_7, GPIO_PIN_RESET);
 80015dc:	4b25      	ldr	r3, [pc, #148]	; (8001674 <MX_GPIO_Init+0x12c>)
 80015de:	2200      	movs	r2, #0
 80015e0:	21c0      	movs	r1, #192	; 0xc0
 80015e2:	0018      	movs	r0, r3
 80015e4:	f001 fd41 	bl	800306a <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5 | GPIO_PIN_6, GPIO_PIN_RESET);
 80015e8:	4b23      	ldr	r3, [pc, #140]	; (8001678 <MX_GPIO_Init+0x130>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	2160      	movs	r1, #96	; 0x60
 80015ee:	0018      	movs	r0, r3
 80015f0:	f001 fd3b 	bl	800306a <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PC13 PC6 PC7 PC8
	 PC9 PC10 */
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8
 80015f4:	193b      	adds	r3, r7, r4
 80015f6:	229f      	movs	r2, #159	; 0x9f
 80015f8:	0192      	lsls	r2, r2, #6
 80015fa:	601a      	str	r2, [r3, #0]
			| GPIO_PIN_9 | GPIO_PIN_10;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fc:	193b      	adds	r3, r7, r4
 80015fe:	2201      	movs	r2, #1
 8001600:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	193b      	adds	r3, r7, r4
 8001604:	2200      	movs	r2, #0
 8001606:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001608:	193b      	adds	r3, r7, r4
 800160a:	2200      	movs	r2, #0
 800160c:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800160e:	193b      	adds	r3, r7, r4
 8001610:	4a17      	ldr	r2, [pc, #92]	; (8001670 <MX_GPIO_Init+0x128>)
 8001612:	0019      	movs	r1, r3
 8001614:	0010      	movs	r0, r2
 8001616:	f001 fb9b 	bl	8002d50 <HAL_GPIO_Init>

	/*Configure GPIO pins : PF6 PF7 */
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 800161a:	193b      	adds	r3, r7, r4
 800161c:	22c0      	movs	r2, #192	; 0xc0
 800161e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001620:	193b      	adds	r3, r7, r4
 8001622:	2201      	movs	r2, #1
 8001624:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	193b      	adds	r3, r7, r4
 8001628:	2200      	movs	r2, #0
 800162a:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162c:	193b      	adds	r3, r7, r4
 800162e:	2200      	movs	r2, #0
 8001630:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001632:	193b      	adds	r3, r7, r4
 8001634:	4a0f      	ldr	r2, [pc, #60]	; (8001674 <MX_GPIO_Init+0x12c>)
 8001636:	0019      	movs	r1, r3
 8001638:	0010      	movs	r0, r2
 800163a:	f001 fb89 	bl	8002d50 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB5 PB6 */
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 800163e:	0021      	movs	r1, r4
 8001640:	187b      	adds	r3, r7, r1
 8001642:	2260      	movs	r2, #96	; 0x60
 8001644:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001646:	187b      	adds	r3, r7, r1
 8001648:	2201      	movs	r2, #1
 800164a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	187b      	adds	r3, r7, r1
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001652:	187b      	adds	r3, r7, r1
 8001654:	2200      	movs	r2, #0
 8001656:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001658:	187b      	adds	r3, r7, r1
 800165a:	4a07      	ldr	r2, [pc, #28]	; (8001678 <MX_GPIO_Init+0x130>)
 800165c:	0019      	movs	r1, r3
 800165e:	0010      	movs	r0, r2
 8001660:	f001 fb76 	bl	8002d50 <HAL_GPIO_Init>

}
 8001664:	46c0      	nop			; (mov r8, r8)
 8001666:	46bd      	mov	sp, r7
 8001668:	b00b      	add	sp, #44	; 0x2c
 800166a:	bd90      	pop	{r4, r7, pc}
 800166c:	40021000 	.word	0x40021000
 8001670:	48000800 	.word	0x48000800
 8001674:	48001400 	.word	0x48001400
 8001678:	48000400 	.word	0x48000400

0800167c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001680:	b672      	cpsid	i
}
 8001682:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001684:	e7fe      	b.n	8001684 <Error_Handler+0x8>
	...

08001688 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800168e:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <HAL_MspInit+0x44>)
 8001690:	699a      	ldr	r2, [r3, #24]
 8001692:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <HAL_MspInit+0x44>)
 8001694:	2101      	movs	r1, #1
 8001696:	430a      	orrs	r2, r1
 8001698:	619a      	str	r2, [r3, #24]
 800169a:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <HAL_MspInit+0x44>)
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	2201      	movs	r2, #1
 80016a0:	4013      	ands	r3, r2
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a6:	4b09      	ldr	r3, [pc, #36]	; (80016cc <HAL_MspInit+0x44>)
 80016a8:	69da      	ldr	r2, [r3, #28]
 80016aa:	4b08      	ldr	r3, [pc, #32]	; (80016cc <HAL_MspInit+0x44>)
 80016ac:	2180      	movs	r1, #128	; 0x80
 80016ae:	0549      	lsls	r1, r1, #21
 80016b0:	430a      	orrs	r2, r1
 80016b2:	61da      	str	r2, [r3, #28]
 80016b4:	4b05      	ldr	r3, [pc, #20]	; (80016cc <HAL_MspInit+0x44>)
 80016b6:	69da      	ldr	r2, [r3, #28]
 80016b8:	2380      	movs	r3, #128	; 0x80
 80016ba:	055b      	lsls	r3, r3, #21
 80016bc:	4013      	ands	r3, r2
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	46bd      	mov	sp, r7
 80016c6:	b002      	add	sp, #8
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	46c0      	nop			; (mov r8, r8)
 80016cc:	40021000 	.word	0x40021000

080016d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016d0:	b590      	push	{r4, r7, lr}
 80016d2:	b08d      	sub	sp, #52	; 0x34
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	241c      	movs	r4, #28
 80016da:	193b      	adds	r3, r7, r4
 80016dc:	0018      	movs	r0, r3
 80016de:	2314      	movs	r3, #20
 80016e0:	001a      	movs	r2, r3
 80016e2:	2100      	movs	r1, #0
 80016e4:	f005 fd1a 	bl	800711c <memset>
  if(hadc->Instance==ADC1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a4a      	ldr	r2, [pc, #296]	; (8001818 <HAL_ADC_MspInit+0x148>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d000      	beq.n	80016f4 <HAL_ADC_MspInit+0x24>
 80016f2:	e08d      	b.n	8001810 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016f4:	4b49      	ldr	r3, [pc, #292]	; (800181c <HAL_ADC_MspInit+0x14c>)
 80016f6:	699a      	ldr	r2, [r3, #24]
 80016f8:	4b48      	ldr	r3, [pc, #288]	; (800181c <HAL_ADC_MspInit+0x14c>)
 80016fa:	2180      	movs	r1, #128	; 0x80
 80016fc:	0089      	lsls	r1, r1, #2
 80016fe:	430a      	orrs	r2, r1
 8001700:	619a      	str	r2, [r3, #24]
 8001702:	4b46      	ldr	r3, [pc, #280]	; (800181c <HAL_ADC_MspInit+0x14c>)
 8001704:	699a      	ldr	r2, [r3, #24]
 8001706:	2380      	movs	r3, #128	; 0x80
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4013      	ands	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
 800170e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001710:	4b42      	ldr	r3, [pc, #264]	; (800181c <HAL_ADC_MspInit+0x14c>)
 8001712:	695a      	ldr	r2, [r3, #20]
 8001714:	4b41      	ldr	r3, [pc, #260]	; (800181c <HAL_ADC_MspInit+0x14c>)
 8001716:	2180      	movs	r1, #128	; 0x80
 8001718:	0309      	lsls	r1, r1, #12
 800171a:	430a      	orrs	r2, r1
 800171c:	615a      	str	r2, [r3, #20]
 800171e:	4b3f      	ldr	r3, [pc, #252]	; (800181c <HAL_ADC_MspInit+0x14c>)
 8001720:	695a      	ldr	r2, [r3, #20]
 8001722:	2380      	movs	r3, #128	; 0x80
 8001724:	031b      	lsls	r3, r3, #12
 8001726:	4013      	ands	r3, r2
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172c:	4b3b      	ldr	r3, [pc, #236]	; (800181c <HAL_ADC_MspInit+0x14c>)
 800172e:	695a      	ldr	r2, [r3, #20]
 8001730:	4b3a      	ldr	r3, [pc, #232]	; (800181c <HAL_ADC_MspInit+0x14c>)
 8001732:	2180      	movs	r1, #128	; 0x80
 8001734:	0289      	lsls	r1, r1, #10
 8001736:	430a      	orrs	r2, r1
 8001738:	615a      	str	r2, [r3, #20]
 800173a:	4b38      	ldr	r3, [pc, #224]	; (800181c <HAL_ADC_MspInit+0x14c>)
 800173c:	695a      	ldr	r2, [r3, #20]
 800173e:	2380      	movs	r3, #128	; 0x80
 8001740:	029b      	lsls	r3, r3, #10
 8001742:	4013      	ands	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
 8001746:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001748:	4b34      	ldr	r3, [pc, #208]	; (800181c <HAL_ADC_MspInit+0x14c>)
 800174a:	695a      	ldr	r2, [r3, #20]
 800174c:	4b33      	ldr	r3, [pc, #204]	; (800181c <HAL_ADC_MspInit+0x14c>)
 800174e:	2180      	movs	r1, #128	; 0x80
 8001750:	02c9      	lsls	r1, r1, #11
 8001752:	430a      	orrs	r2, r1
 8001754:	615a      	str	r2, [r3, #20]
 8001756:	4b31      	ldr	r3, [pc, #196]	; (800181c <HAL_ADC_MspInit+0x14c>)
 8001758:	695a      	ldr	r2, [r3, #20]
 800175a:	2380      	movs	r3, #128	; 0x80
 800175c:	02db      	lsls	r3, r3, #11
 800175e:	4013      	ands	r3, r2
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001764:	193b      	adds	r3, r7, r4
 8001766:	223f      	movs	r2, #63	; 0x3f
 8001768:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800176a:	193b      	adds	r3, r7, r4
 800176c:	2203      	movs	r2, #3
 800176e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	193b      	adds	r3, r7, r4
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001776:	193b      	adds	r3, r7, r4
 8001778:	4a29      	ldr	r2, [pc, #164]	; (8001820 <HAL_ADC_MspInit+0x150>)
 800177a:	0019      	movs	r1, r3
 800177c:	0010      	movs	r0, r2
 800177e:	f001 fae7 	bl	8002d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001782:	193b      	adds	r3, r7, r4
 8001784:	22ef      	movs	r2, #239	; 0xef
 8001786:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001788:	193b      	adds	r3, r7, r4
 800178a:	2203      	movs	r2, #3
 800178c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	193b      	adds	r3, r7, r4
 8001790:	2200      	movs	r2, #0
 8001792:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001794:	193a      	adds	r2, r7, r4
 8001796:	2390      	movs	r3, #144	; 0x90
 8001798:	05db      	lsls	r3, r3, #23
 800179a:	0011      	movs	r1, r2
 800179c:	0018      	movs	r0, r3
 800179e:	f001 fad7 	bl	8002d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017a2:	193b      	adds	r3, r7, r4
 80017a4:	2203      	movs	r2, #3
 80017a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017a8:	193b      	adds	r3, r7, r4
 80017aa:	2203      	movs	r2, #3
 80017ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	193b      	adds	r3, r7, r4
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b4:	193b      	adds	r3, r7, r4
 80017b6:	4a1b      	ldr	r2, [pc, #108]	; (8001824 <HAL_ADC_MspInit+0x154>)
 80017b8:	0019      	movs	r1, r3
 80017ba:	0010      	movs	r0, r2
 80017bc:	f001 fac8 	bl	8002d50 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80017c0:	4b19      	ldr	r3, [pc, #100]	; (8001828 <HAL_ADC_MspInit+0x158>)
 80017c2:	4a1a      	ldr	r2, [pc, #104]	; (800182c <HAL_ADC_MspInit+0x15c>)
 80017c4:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017c6:	4b18      	ldr	r3, [pc, #96]	; (8001828 <HAL_ADC_MspInit+0x158>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80017cc:	4b16      	ldr	r3, [pc, #88]	; (8001828 <HAL_ADC_MspInit+0x158>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80017d2:	4b15      	ldr	r3, [pc, #84]	; (8001828 <HAL_ADC_MspInit+0x158>)
 80017d4:	2280      	movs	r2, #128	; 0x80
 80017d6:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017d8:	4b13      	ldr	r3, [pc, #76]	; (8001828 <HAL_ADC_MspInit+0x158>)
 80017da:	2280      	movs	r2, #128	; 0x80
 80017dc:	0052      	lsls	r2, r2, #1
 80017de:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017e0:	4b11      	ldr	r3, [pc, #68]	; (8001828 <HAL_ADC_MspInit+0x158>)
 80017e2:	2280      	movs	r2, #128	; 0x80
 80017e4:	00d2      	lsls	r2, r2, #3
 80017e6:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 80017e8:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <HAL_ADC_MspInit+0x158>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80017ee:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <HAL_ADC_MspInit+0x158>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80017f4:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <HAL_ADC_MspInit+0x158>)
 80017f6:	0018      	movs	r0, r3
 80017f8:	f001 f894 	bl	8002924 <HAL_DMA_Init>
 80017fc:	1e03      	subs	r3, r0, #0
 80017fe:	d001      	beq.n	8001804 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8001800:	f7ff ff3c 	bl	800167c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4a08      	ldr	r2, [pc, #32]	; (8001828 <HAL_ADC_MspInit+0x158>)
 8001808:	631a      	str	r2, [r3, #48]	; 0x30
 800180a:	4b07      	ldr	r3, [pc, #28]	; (8001828 <HAL_ADC_MspInit+0x158>)
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001810:	46c0      	nop			; (mov r8, r8)
 8001812:	46bd      	mov	sp, r7
 8001814:	b00d      	add	sp, #52	; 0x34
 8001816:	bd90      	pop	{r4, r7, pc}
 8001818:	40012400 	.word	0x40012400
 800181c:	40021000 	.word	0x40021000
 8001820:	48000800 	.word	0x48000800
 8001824:	48000400 	.word	0x48000400
 8001828:	200000ac 	.word	0x200000ac
 800182c:	40020008 	.word	0x40020008

08001830 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001830:	b590      	push	{r4, r7, lr}
 8001832:	b08b      	sub	sp, #44	; 0x2c
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	2414      	movs	r4, #20
 800183a:	193b      	adds	r3, r7, r4
 800183c:	0018      	movs	r0, r3
 800183e:	2314      	movs	r3, #20
 8001840:	001a      	movs	r2, r3
 8001842:	2100      	movs	r1, #0
 8001844:	f005 fc6a 	bl	800711c <memset>
  if(hdac->Instance==DAC)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a19      	ldr	r2, [pc, #100]	; (80018b4 <HAL_DAC_MspInit+0x84>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d12b      	bne.n	80018aa <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001852:	4b19      	ldr	r3, [pc, #100]	; (80018b8 <HAL_DAC_MspInit+0x88>)
 8001854:	69da      	ldr	r2, [r3, #28]
 8001856:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <HAL_DAC_MspInit+0x88>)
 8001858:	2180      	movs	r1, #128	; 0x80
 800185a:	0589      	lsls	r1, r1, #22
 800185c:	430a      	orrs	r2, r1
 800185e:	61da      	str	r2, [r3, #28]
 8001860:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <HAL_DAC_MspInit+0x88>)
 8001862:	69da      	ldr	r2, [r3, #28]
 8001864:	2380      	movs	r3, #128	; 0x80
 8001866:	059b      	lsls	r3, r3, #22
 8001868:	4013      	ands	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
 800186c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186e:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <HAL_DAC_MspInit+0x88>)
 8001870:	695a      	ldr	r2, [r3, #20]
 8001872:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <HAL_DAC_MspInit+0x88>)
 8001874:	2180      	movs	r1, #128	; 0x80
 8001876:	0289      	lsls	r1, r1, #10
 8001878:	430a      	orrs	r2, r1
 800187a:	615a      	str	r2, [r3, #20]
 800187c:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <HAL_DAC_MspInit+0x88>)
 800187e:	695a      	ldr	r2, [r3, #20]
 8001880:	2380      	movs	r3, #128	; 0x80
 8001882:	029b      	lsls	r3, r3, #10
 8001884:	4013      	ands	r3, r2
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800188a:	193b      	adds	r3, r7, r4
 800188c:	2210      	movs	r2, #16
 800188e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001890:	193b      	adds	r3, r7, r4
 8001892:	2203      	movs	r2, #3
 8001894:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	193b      	adds	r3, r7, r4
 8001898:	2200      	movs	r2, #0
 800189a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189c:	193a      	adds	r2, r7, r4
 800189e:	2390      	movs	r3, #144	; 0x90
 80018a0:	05db      	lsls	r3, r3, #23
 80018a2:	0011      	movs	r1, r2
 80018a4:	0018      	movs	r0, r3
 80018a6:	f001 fa53 	bl	8002d50 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80018aa:	46c0      	nop			; (mov r8, r8)
 80018ac:	46bd      	mov	sp, r7
 80018ae:	b00b      	add	sp, #44	; 0x2c
 80018b0:	bd90      	pop	{r4, r7, pc}
 80018b2:	46c0      	nop			; (mov r8, r8)
 80018b4:	40007400 	.word	0x40007400
 80018b8:	40021000 	.word	0x40021000

080018bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018bc:	b590      	push	{r4, r7, lr}
 80018be:	b08b      	sub	sp, #44	; 0x2c
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	2414      	movs	r4, #20
 80018c6:	193b      	adds	r3, r7, r4
 80018c8:	0018      	movs	r0, r3
 80018ca:	2314      	movs	r3, #20
 80018cc:	001a      	movs	r2, r3
 80018ce:	2100      	movs	r1, #0
 80018d0:	f005 fc24 	bl	800711c <memset>
  if(hi2c->Instance==I2C1)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a1c      	ldr	r2, [pc, #112]	; (800194c <HAL_I2C_MspInit+0x90>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d132      	bne.n	8001944 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018de:	4b1c      	ldr	r3, [pc, #112]	; (8001950 <HAL_I2C_MspInit+0x94>)
 80018e0:	695a      	ldr	r2, [r3, #20]
 80018e2:	4b1b      	ldr	r3, [pc, #108]	; (8001950 <HAL_I2C_MspInit+0x94>)
 80018e4:	2180      	movs	r1, #128	; 0x80
 80018e6:	02c9      	lsls	r1, r1, #11
 80018e8:	430a      	orrs	r2, r1
 80018ea:	615a      	str	r2, [r3, #20]
 80018ec:	4b18      	ldr	r3, [pc, #96]	; (8001950 <HAL_I2C_MspInit+0x94>)
 80018ee:	695a      	ldr	r2, [r3, #20]
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	02db      	lsls	r3, r3, #11
 80018f4:	4013      	ands	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
 80018f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018fa:	193b      	adds	r3, r7, r4
 80018fc:	22c0      	movs	r2, #192	; 0xc0
 80018fe:	0092      	lsls	r2, r2, #2
 8001900:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001902:	0021      	movs	r1, r4
 8001904:	187b      	adds	r3, r7, r1
 8001906:	2212      	movs	r2, #18
 8001908:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	187b      	adds	r3, r7, r1
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001910:	187b      	adds	r3, r7, r1
 8001912:	2203      	movs	r2, #3
 8001914:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001916:	187b      	adds	r3, r7, r1
 8001918:	2201      	movs	r2, #1
 800191a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191c:	187b      	adds	r3, r7, r1
 800191e:	4a0d      	ldr	r2, [pc, #52]	; (8001954 <HAL_I2C_MspInit+0x98>)
 8001920:	0019      	movs	r1, r3
 8001922:	0010      	movs	r0, r2
 8001924:	f001 fa14 	bl	8002d50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001928:	4b09      	ldr	r3, [pc, #36]	; (8001950 <HAL_I2C_MspInit+0x94>)
 800192a:	69da      	ldr	r2, [r3, #28]
 800192c:	4b08      	ldr	r3, [pc, #32]	; (8001950 <HAL_I2C_MspInit+0x94>)
 800192e:	2180      	movs	r1, #128	; 0x80
 8001930:	0389      	lsls	r1, r1, #14
 8001932:	430a      	orrs	r2, r1
 8001934:	61da      	str	r2, [r3, #28]
 8001936:	4b06      	ldr	r3, [pc, #24]	; (8001950 <HAL_I2C_MspInit+0x94>)
 8001938:	69da      	ldr	r2, [r3, #28]
 800193a:	2380      	movs	r3, #128	; 0x80
 800193c:	039b      	lsls	r3, r3, #14
 800193e:	4013      	ands	r3, r2
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001944:	46c0      	nop			; (mov r8, r8)
 8001946:	46bd      	mov	sp, r7
 8001948:	b00b      	add	sp, #44	; 0x2c
 800194a:	bd90      	pop	{r4, r7, pc}
 800194c:	40005400 	.word	0x40005400
 8001950:	40021000 	.word	0x40021000
 8001954:	48000400 	.word	0x48000400

08001958 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001958:	b590      	push	{r4, r7, lr}
 800195a:	b08d      	sub	sp, #52	; 0x34
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001960:	241c      	movs	r4, #28
 8001962:	193b      	adds	r3, r7, r4
 8001964:	0018      	movs	r0, r3
 8001966:	2314      	movs	r3, #20
 8001968:	001a      	movs	r2, r3
 800196a:	2100      	movs	r1, #0
 800196c:	f005 fbd6 	bl	800711c <memset>
  if(hspi->Instance==SPI1)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a38      	ldr	r2, [pc, #224]	; (8001a58 <HAL_SPI_MspInit+0x100>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d132      	bne.n	80019e0 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800197a:	4b38      	ldr	r3, [pc, #224]	; (8001a5c <HAL_SPI_MspInit+0x104>)
 800197c:	699a      	ldr	r2, [r3, #24]
 800197e:	4b37      	ldr	r3, [pc, #220]	; (8001a5c <HAL_SPI_MspInit+0x104>)
 8001980:	2180      	movs	r1, #128	; 0x80
 8001982:	0149      	lsls	r1, r1, #5
 8001984:	430a      	orrs	r2, r1
 8001986:	619a      	str	r2, [r3, #24]
 8001988:	4b34      	ldr	r3, [pc, #208]	; (8001a5c <HAL_SPI_MspInit+0x104>)
 800198a:	699a      	ldr	r2, [r3, #24]
 800198c:	2380      	movs	r3, #128	; 0x80
 800198e:	015b      	lsls	r3, r3, #5
 8001990:	4013      	ands	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
 8001994:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001996:	4b31      	ldr	r3, [pc, #196]	; (8001a5c <HAL_SPI_MspInit+0x104>)
 8001998:	695a      	ldr	r2, [r3, #20]
 800199a:	4b30      	ldr	r3, [pc, #192]	; (8001a5c <HAL_SPI_MspInit+0x104>)
 800199c:	2180      	movs	r1, #128	; 0x80
 800199e:	02c9      	lsls	r1, r1, #11
 80019a0:	430a      	orrs	r2, r1
 80019a2:	615a      	str	r2, [r3, #20]
 80019a4:	4b2d      	ldr	r3, [pc, #180]	; (8001a5c <HAL_SPI_MspInit+0x104>)
 80019a6:	695a      	ldr	r2, [r3, #20]
 80019a8:	2380      	movs	r3, #128	; 0x80
 80019aa:	02db      	lsls	r3, r3, #11
 80019ac:	4013      	ands	r3, r2
 80019ae:	617b      	str	r3, [r7, #20]
 80019b0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80019b2:	0021      	movs	r1, r4
 80019b4:	187b      	adds	r3, r7, r1
 80019b6:	2218      	movs	r2, #24
 80019b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ba:	187b      	adds	r3, r7, r1
 80019bc:	2202      	movs	r2, #2
 80019be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	187b      	adds	r3, r7, r1
 80019c2:	2200      	movs	r2, #0
 80019c4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019c6:	187b      	adds	r3, r7, r1
 80019c8:	2203      	movs	r2, #3
 80019ca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80019cc:	187b      	adds	r3, r7, r1
 80019ce:	2200      	movs	r2, #0
 80019d0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d2:	187b      	adds	r3, r7, r1
 80019d4:	4a22      	ldr	r2, [pc, #136]	; (8001a60 <HAL_SPI_MspInit+0x108>)
 80019d6:	0019      	movs	r1, r3
 80019d8:	0010      	movs	r0, r2
 80019da:	f001 f9b9 	bl	8002d50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80019de:	e037      	b.n	8001a50 <HAL_SPI_MspInit+0xf8>
  else if(hspi->Instance==SPI2)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a1f      	ldr	r2, [pc, #124]	; (8001a64 <HAL_SPI_MspInit+0x10c>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d132      	bne.n	8001a50 <HAL_SPI_MspInit+0xf8>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80019ea:	4b1c      	ldr	r3, [pc, #112]	; (8001a5c <HAL_SPI_MspInit+0x104>)
 80019ec:	69da      	ldr	r2, [r3, #28]
 80019ee:	4b1b      	ldr	r3, [pc, #108]	; (8001a5c <HAL_SPI_MspInit+0x104>)
 80019f0:	2180      	movs	r1, #128	; 0x80
 80019f2:	01c9      	lsls	r1, r1, #7
 80019f4:	430a      	orrs	r2, r1
 80019f6:	61da      	str	r2, [r3, #28]
 80019f8:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <HAL_SPI_MspInit+0x104>)
 80019fa:	69da      	ldr	r2, [r3, #28]
 80019fc:	2380      	movs	r3, #128	; 0x80
 80019fe:	01db      	lsls	r3, r3, #7
 8001a00:	4013      	ands	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a06:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <HAL_SPI_MspInit+0x104>)
 8001a08:	695a      	ldr	r2, [r3, #20]
 8001a0a:	4b14      	ldr	r3, [pc, #80]	; (8001a5c <HAL_SPI_MspInit+0x104>)
 8001a0c:	2180      	movs	r1, #128	; 0x80
 8001a0e:	02c9      	lsls	r1, r1, #11
 8001a10:	430a      	orrs	r2, r1
 8001a12:	615a      	str	r2, [r3, #20]
 8001a14:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <HAL_SPI_MspInit+0x104>)
 8001a16:	695a      	ldr	r2, [r3, #20]
 8001a18:	2380      	movs	r3, #128	; 0x80
 8001a1a:	02db      	lsls	r3, r3, #11
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001a22:	211c      	movs	r1, #28
 8001a24:	187b      	adds	r3, r7, r1
 8001a26:	22c0      	movs	r2, #192	; 0xc0
 8001a28:	01d2      	lsls	r2, r2, #7
 8001a2a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2c:	187b      	adds	r3, r7, r1
 8001a2e:	2202      	movs	r2, #2
 8001a30:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	187b      	adds	r3, r7, r1
 8001a34:	2200      	movs	r2, #0
 8001a36:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a38:	187b      	adds	r3, r7, r1
 8001a3a:	2203      	movs	r2, #3
 8001a3c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8001a3e:	187b      	adds	r3, r7, r1
 8001a40:	2200      	movs	r2, #0
 8001a42:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a44:	187b      	adds	r3, r7, r1
 8001a46:	4a06      	ldr	r2, [pc, #24]	; (8001a60 <HAL_SPI_MspInit+0x108>)
 8001a48:	0019      	movs	r1, r3
 8001a4a:	0010      	movs	r0, r2
 8001a4c:	f001 f980 	bl	8002d50 <HAL_GPIO_Init>
}
 8001a50:	46c0      	nop			; (mov r8, r8)
 8001a52:	46bd      	mov	sp, r7
 8001a54:	b00d      	add	sp, #52	; 0x34
 8001a56:	bd90      	pop	{r4, r7, pc}
 8001a58:	40013000 	.word	0x40013000
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	48000400 	.word	0x48000400
 8001a64:	40003800 	.word	0x40003800

08001a68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a1f      	ldr	r2, [pc, #124]	; (8001af4 <HAL_TIM_Base_MspInit+0x8c>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d11e      	bne.n	8001ab8 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a7a:	4b1f      	ldr	r3, [pc, #124]	; (8001af8 <HAL_TIM_Base_MspInit+0x90>)
 8001a7c:	699a      	ldr	r2, [r3, #24]
 8001a7e:	4b1e      	ldr	r3, [pc, #120]	; (8001af8 <HAL_TIM_Base_MspInit+0x90>)
 8001a80:	2180      	movs	r1, #128	; 0x80
 8001a82:	0109      	lsls	r1, r1, #4
 8001a84:	430a      	orrs	r2, r1
 8001a86:	619a      	str	r2, [r3, #24]
 8001a88:	4b1b      	ldr	r3, [pc, #108]	; (8001af8 <HAL_TIM_Base_MspInit+0x90>)
 8001a8a:	699a      	ldr	r2, [r3, #24]
 8001a8c:	2380      	movs	r3, #128	; 0x80
 8001a8e:	011b      	lsls	r3, r3, #4
 8001a90:	4013      	ands	r3, r2
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 1, 0);
 8001a96:	2200      	movs	r2, #0
 8001a98:	2101      	movs	r1, #1
 8001a9a:	200d      	movs	r0, #13
 8001a9c:	f000 fe76 	bl	800278c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001aa0:	200d      	movs	r0, #13
 8001aa2:	f000 fe88 	bl	80027b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	200e      	movs	r0, #14
 8001aac:	f000 fe6e 	bl	800278c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001ab0:	200e      	movs	r0, #14
 8001ab2:	f000 fe80 	bl	80027b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ab6:	e019      	b.n	8001aec <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM2)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	2380      	movs	r3, #128	; 0x80
 8001abe:	05db      	lsls	r3, r3, #23
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d113      	bne.n	8001aec <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <HAL_TIM_Base_MspInit+0x90>)
 8001ac6:	69da      	ldr	r2, [r3, #28]
 8001ac8:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <HAL_TIM_Base_MspInit+0x90>)
 8001aca:	2101      	movs	r1, #1
 8001acc:	430a      	orrs	r2, r1
 8001ace:	61da      	str	r2, [r3, #28]
 8001ad0:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <HAL_TIM_Base_MspInit+0x90>)
 8001ad2:	69db      	ldr	r3, [r3, #28]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001adc:	2200      	movs	r2, #0
 8001ade:	2101      	movs	r1, #1
 8001ae0:	200f      	movs	r0, #15
 8001ae2:	f000 fe53 	bl	800278c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ae6:	200f      	movs	r0, #15
 8001ae8:	f000 fe65 	bl	80027b6 <HAL_NVIC_EnableIRQ>
}
 8001aec:	46c0      	nop			; (mov r8, r8)
 8001aee:	46bd      	mov	sp, r7
 8001af0:	b004      	add	sp, #16
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40012c00 	.word	0x40012c00
 8001af8:	40021000 	.word	0x40021000

08001afc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001afc:	b590      	push	{r4, r7, lr}
 8001afe:	b08b      	sub	sp, #44	; 0x2c
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b04:	2414      	movs	r4, #20
 8001b06:	193b      	adds	r3, r7, r4
 8001b08:	0018      	movs	r0, r3
 8001b0a:	2314      	movs	r3, #20
 8001b0c:	001a      	movs	r2, r3
 8001b0e:	2100      	movs	r1, #0
 8001b10:	f005 fb04 	bl	800711c <memset>
  if(htim->Instance==TIM1)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a2c      	ldr	r2, [pc, #176]	; (8001bcc <HAL_TIM_MspPostInit+0xd0>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d126      	bne.n	8001b6c <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1e:	4b2c      	ldr	r3, [pc, #176]	; (8001bd0 <HAL_TIM_MspPostInit+0xd4>)
 8001b20:	695a      	ldr	r2, [r3, #20]
 8001b22:	4b2b      	ldr	r3, [pc, #172]	; (8001bd0 <HAL_TIM_MspPostInit+0xd4>)
 8001b24:	2180      	movs	r1, #128	; 0x80
 8001b26:	0289      	lsls	r1, r1, #10
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	615a      	str	r2, [r3, #20]
 8001b2c:	4b28      	ldr	r3, [pc, #160]	; (8001bd0 <HAL_TIM_MspPostInit+0xd4>)
 8001b2e:	695a      	ldr	r2, [r3, #20]
 8001b30:	2380      	movs	r3, #128	; 0x80
 8001b32:	029b      	lsls	r3, r3, #10
 8001b34:	4013      	ands	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]
 8001b38:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b3a:	193b      	adds	r3, r7, r4
 8001b3c:	2280      	movs	r2, #128	; 0x80
 8001b3e:	0052      	lsls	r2, r2, #1
 8001b40:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b42:	0021      	movs	r1, r4
 8001b44:	187b      	adds	r3, r7, r1
 8001b46:	2202      	movs	r2, #2
 8001b48:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	187b      	adds	r3, r7, r1
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b50:	187b      	adds	r3, r7, r1
 8001b52:	2200      	movs	r2, #0
 8001b54:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001b56:	187b      	adds	r3, r7, r1
 8001b58:	2202      	movs	r2, #2
 8001b5a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5c:	187a      	adds	r2, r7, r1
 8001b5e:	2390      	movs	r3, #144	; 0x90
 8001b60:	05db      	lsls	r3, r3, #23
 8001b62:	0011      	movs	r1, r2
 8001b64:	0018      	movs	r0, r3
 8001b66:	f001 f8f3 	bl	8002d50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b6a:	e02a      	b.n	8001bc2 <HAL_TIM_MspPostInit+0xc6>
  else if(htim->Instance==TIM2)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	2380      	movs	r3, #128	; 0x80
 8001b72:	05db      	lsls	r3, r3, #23
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d124      	bne.n	8001bc2 <HAL_TIM_MspPostInit+0xc6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b78:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <HAL_TIM_MspPostInit+0xd4>)
 8001b7a:	695a      	ldr	r2, [r3, #20]
 8001b7c:	4b14      	ldr	r3, [pc, #80]	; (8001bd0 <HAL_TIM_MspPostInit+0xd4>)
 8001b7e:	2180      	movs	r1, #128	; 0x80
 8001b80:	02c9      	lsls	r1, r1, #11
 8001b82:	430a      	orrs	r2, r1
 8001b84:	615a      	str	r2, [r3, #20]
 8001b86:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <HAL_TIM_MspPostInit+0xd4>)
 8001b88:	695a      	ldr	r2, [r3, #20]
 8001b8a:	2380      	movs	r3, #128	; 0x80
 8001b8c:	02db      	lsls	r3, r3, #11
 8001b8e:	4013      	ands	r3, r2
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b94:	2114      	movs	r1, #20
 8001b96:	187b      	adds	r3, r7, r1
 8001b98:	2280      	movs	r2, #128	; 0x80
 8001b9a:	0112      	lsls	r2, r2, #4
 8001b9c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9e:	187b      	adds	r3, r7, r1
 8001ba0:	2202      	movs	r2, #2
 8001ba2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	187b      	adds	r3, r7, r1
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001baa:	187b      	adds	r3, r7, r1
 8001bac:	2200      	movs	r2, #0
 8001bae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001bb0:	187b      	adds	r3, r7, r1
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb6:	187b      	adds	r3, r7, r1
 8001bb8:	4a06      	ldr	r2, [pc, #24]	; (8001bd4 <HAL_TIM_MspPostInit+0xd8>)
 8001bba:	0019      	movs	r1, r3
 8001bbc:	0010      	movs	r0, r2
 8001bbe:	f001 f8c7 	bl	8002d50 <HAL_GPIO_Init>
}
 8001bc2:	46c0      	nop			; (mov r8, r8)
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	b00b      	add	sp, #44	; 0x2c
 8001bc8:	bd90      	pop	{r4, r7, pc}
 8001bca:	46c0      	nop			; (mov r8, r8)
 8001bcc:	40012c00 	.word	0x40012c00
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	48000400 	.word	0x48000400

08001bd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bd8:	b590      	push	{r4, r7, lr}
 8001bda:	b08b      	sub	sp, #44	; 0x2c
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be0:	2414      	movs	r4, #20
 8001be2:	193b      	adds	r3, r7, r4
 8001be4:	0018      	movs	r0, r3
 8001be6:	2314      	movs	r3, #20
 8001be8:	001a      	movs	r2, r3
 8001bea:	2100      	movs	r1, #0
 8001bec:	f005 fa96 	bl	800711c <memset>
  if(huart->Instance==USART1)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a21      	ldr	r2, [pc, #132]	; (8001c7c <HAL_UART_MspInit+0xa4>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d13b      	bne.n	8001c72 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bfa:	4b21      	ldr	r3, [pc, #132]	; (8001c80 <HAL_UART_MspInit+0xa8>)
 8001bfc:	699a      	ldr	r2, [r3, #24]
 8001bfe:	4b20      	ldr	r3, [pc, #128]	; (8001c80 <HAL_UART_MspInit+0xa8>)
 8001c00:	2180      	movs	r1, #128	; 0x80
 8001c02:	01c9      	lsls	r1, r1, #7
 8001c04:	430a      	orrs	r2, r1
 8001c06:	619a      	str	r2, [r3, #24]
 8001c08:	4b1d      	ldr	r3, [pc, #116]	; (8001c80 <HAL_UART_MspInit+0xa8>)
 8001c0a:	699a      	ldr	r2, [r3, #24]
 8001c0c:	2380      	movs	r3, #128	; 0x80
 8001c0e:	01db      	lsls	r3, r3, #7
 8001c10:	4013      	ands	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
 8001c14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c16:	4b1a      	ldr	r3, [pc, #104]	; (8001c80 <HAL_UART_MspInit+0xa8>)
 8001c18:	695a      	ldr	r2, [r3, #20]
 8001c1a:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <HAL_UART_MspInit+0xa8>)
 8001c1c:	2180      	movs	r1, #128	; 0x80
 8001c1e:	0289      	lsls	r1, r1, #10
 8001c20:	430a      	orrs	r2, r1
 8001c22:	615a      	str	r2, [r3, #20]
 8001c24:	4b16      	ldr	r3, [pc, #88]	; (8001c80 <HAL_UART_MspInit+0xa8>)
 8001c26:	695a      	ldr	r2, [r3, #20]
 8001c28:	2380      	movs	r3, #128	; 0x80
 8001c2a:	029b      	lsls	r3, r3, #10
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c32:	193b      	adds	r3, r7, r4
 8001c34:	22c0      	movs	r2, #192	; 0xc0
 8001c36:	00d2      	lsls	r2, r2, #3
 8001c38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3a:	0021      	movs	r1, r4
 8001c3c:	187b      	adds	r3, r7, r1
 8001c3e:	2202      	movs	r2, #2
 8001c40:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	187b      	adds	r3, r7, r1
 8001c44:	2200      	movs	r2, #0
 8001c46:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c48:	187b      	adds	r3, r7, r1
 8001c4a:	2203      	movs	r2, #3
 8001c4c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001c4e:	187b      	adds	r3, r7, r1
 8001c50:	2201      	movs	r2, #1
 8001c52:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c54:	187a      	adds	r2, r7, r1
 8001c56:	2390      	movs	r3, #144	; 0x90
 8001c58:	05db      	lsls	r3, r3, #23
 8001c5a:	0011      	movs	r1, r2
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	f001 f877 	bl	8002d50 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c62:	2200      	movs	r2, #0
 8001c64:	2100      	movs	r1, #0
 8001c66:	201b      	movs	r0, #27
 8001c68:	f000 fd90 	bl	800278c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c6c:	201b      	movs	r0, #27
 8001c6e:	f000 fda2 	bl	80027b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c72:	46c0      	nop			; (mov r8, r8)
 8001c74:	46bd      	mov	sp, r7
 8001c76:	b00b      	add	sp, #44	; 0x2c
 8001c78:	bd90      	pop	{r4, r7, pc}
 8001c7a:	46c0      	nop			; (mov r8, r8)
 8001c7c:	40013800 	.word	0x40013800
 8001c80:	40021000 	.word	0x40021000

08001c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c88:	e7fe      	b.n	8001c88 <NMI_Handler+0x4>

08001c8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c8e:	e7fe      	b.n	8001c8e <HardFault_Handler+0x4>

08001c90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001c94:	46c0      	nop			; (mov r8, r8)
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c9e:	46c0      	nop			; (mov r8, r8)
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ca8:	f000 f8b8 	bl	8001e1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cac:	46c0      	nop			; (mov r8, r8)
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
	...

08001cb4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001cb8:	4b03      	ldr	r3, [pc, #12]	; (8001cc8 <DMA1_Channel1_IRQHandler+0x14>)
 8001cba:	0018      	movs	r0, r3
 8001cbc:	f000 ff5d 	bl	8002b7a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001cc0:	46c0      	nop			; (mov r8, r8)
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	46c0      	nop			; (mov r8, r8)
 8001cc8:	200000ac 	.word	0x200000ac

08001ccc <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001cd0:	4b03      	ldr	r3, [pc, #12]	; (8001ce0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8001cd2:	0018      	movs	r0, r3
 8001cd4:	f003 f994 	bl	8005000 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001cd8:	46c0      	nop			; (mov r8, r8)
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	46c0      	nop			; (mov r8, r8)
 8001ce0:	20000218 	.word	0x20000218

08001ce4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ce8:	4b03      	ldr	r3, [pc, #12]	; (8001cf8 <TIM1_CC_IRQHandler+0x14>)
 8001cea:	0018      	movs	r0, r3
 8001cec:	f003 f988 	bl	8005000 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001cf0:	46c0      	nop			; (mov r8, r8)
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	46c0      	nop			; (mov r8, r8)
 8001cf8:	20000218 	.word	0x20000218

08001cfc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d00:	4b03      	ldr	r3, [pc, #12]	; (8001d10 <TIM2_IRQHandler+0x14>)
 8001d02:	0018      	movs	r0, r3
 8001d04:	f003 f97c 	bl	8005000 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d08:	46c0      	nop			; (mov r8, r8)
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	46c0      	nop			; (mov r8, r8)
 8001d10:	20000260 	.word	0x20000260

08001d14 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d18:	4b03      	ldr	r3, [pc, #12]	; (8001d28 <USART1_IRQHandler+0x14>)
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	f004 f936 	bl	8005f8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d20:	46c0      	nop			; (mov r8, r8)
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	46c0      	nop			; (mov r8, r8)
 8001d28:	200002a8 	.word	0x200002a8

08001d2c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001d30:	46c0      	nop			; (mov r8, r8)
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d38:	480d      	ldr	r0, [pc, #52]	; (8001d70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d3a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d3c:	480d      	ldr	r0, [pc, #52]	; (8001d74 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d3e:	490e      	ldr	r1, [pc, #56]	; (8001d78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d40:	4a0e      	ldr	r2, [pc, #56]	; (8001d7c <LoopForever+0xe>)
  movs r3, #0
 8001d42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d44:	e002      	b.n	8001d4c <LoopCopyDataInit>

08001d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d4a:	3304      	adds	r3, #4

08001d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d50:	d3f9      	bcc.n	8001d46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d52:	4a0b      	ldr	r2, [pc, #44]	; (8001d80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d54:	4c0b      	ldr	r4, [pc, #44]	; (8001d84 <LoopForever+0x16>)
  movs r3, #0
 8001d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d58:	e001      	b.n	8001d5e <LoopFillZerobss>

08001d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d5c:	3204      	adds	r2, #4

08001d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d60:	d3fb      	bcc.n	8001d5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001d62:	f7ff ffe3 	bl	8001d2c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001d66:	f005 f9b5 	bl	80070d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d6a:	f7fe ffab 	bl	8000cc4 <main>

08001d6e <LoopForever>:

LoopForever:
    b LoopForever
 8001d6e:	e7fe      	b.n	8001d6e <LoopForever>
  ldr   r0, =_estack
 8001d70:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d78:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8001d7c:	08007398 	.word	0x08007398
  ldr r2, =_sbss
 8001d80:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8001d84:	20000474 	.word	0x20000474

08001d88 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d88:	e7fe      	b.n	8001d88 <ADC1_COMP_IRQHandler>
	...

08001d8c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d90:	4b07      	ldr	r3, [pc, #28]	; (8001db0 <HAL_Init+0x24>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <HAL_Init+0x24>)
 8001d96:	2110      	movs	r1, #16
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001d9c:	2003      	movs	r0, #3
 8001d9e:	f000 f809 	bl	8001db4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001da2:	f7ff fc71 	bl	8001688 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001da6:	2300      	movs	r3, #0
}
 8001da8:	0018      	movs	r0, r3
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	46c0      	nop			; (mov r8, r8)
 8001db0:	40022000 	.word	0x40022000

08001db4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db4:	b590      	push	{r4, r7, lr}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dbc:	4b14      	ldr	r3, [pc, #80]	; (8001e10 <HAL_InitTick+0x5c>)
 8001dbe:	681c      	ldr	r4, [r3, #0]
 8001dc0:	4b14      	ldr	r3, [pc, #80]	; (8001e14 <HAL_InitTick+0x60>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	0019      	movs	r1, r3
 8001dc6:	23fa      	movs	r3, #250	; 0xfa
 8001dc8:	0098      	lsls	r0, r3, #2
 8001dca:	f7fe f9a5 	bl	8000118 <__udivsi3>
 8001dce:	0003      	movs	r3, r0
 8001dd0:	0019      	movs	r1, r3
 8001dd2:	0020      	movs	r0, r4
 8001dd4:	f7fe f9a0 	bl	8000118 <__udivsi3>
 8001dd8:	0003      	movs	r3, r0
 8001dda:	0018      	movs	r0, r3
 8001ddc:	f000 fcfb 	bl	80027d6 <HAL_SYSTICK_Config>
 8001de0:	1e03      	subs	r3, r0, #0
 8001de2:	d001      	beq.n	8001de8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e00f      	b.n	8001e08 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b03      	cmp	r3, #3
 8001dec:	d80b      	bhi.n	8001e06 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	2301      	movs	r3, #1
 8001df2:	425b      	negs	r3, r3
 8001df4:	2200      	movs	r2, #0
 8001df6:	0018      	movs	r0, r3
 8001df8:	f000 fcc8 	bl	800278c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dfc:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <HAL_InitTick+0x64>)
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
 8001e04:	e000      	b.n	8001e08 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
}
 8001e08:	0018      	movs	r0, r3
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	b003      	add	sp, #12
 8001e0e:	bd90      	pop	{r4, r7, pc}
 8001e10:	20000044 	.word	0x20000044
 8001e14:	2000004c 	.word	0x2000004c
 8001e18:	20000048 	.word	0x20000048

08001e1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e20:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <HAL_IncTick+0x1c>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	001a      	movs	r2, r3
 8001e26:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <HAL_IncTick+0x20>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	18d2      	adds	r2, r2, r3
 8001e2c:	4b03      	ldr	r3, [pc, #12]	; (8001e3c <HAL_IncTick+0x20>)
 8001e2e:	601a      	str	r2, [r3, #0]
}
 8001e30:	46c0      	nop			; (mov r8, r8)
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	46c0      	nop			; (mov r8, r8)
 8001e38:	2000004c 	.word	0x2000004c
 8001e3c:	20000470 	.word	0x20000470

08001e40 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  return uwTick;
 8001e44:	4b02      	ldr	r3, [pc, #8]	; (8001e50 <HAL_GetTick+0x10>)
 8001e46:	681b      	ldr	r3, [r3, #0]
}
 8001e48:	0018      	movs	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	46c0      	nop			; (mov r8, r8)
 8001e50:	20000470 	.word	0x20000470

08001e54 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e5c:	230f      	movs	r3, #15
 8001e5e:	18fb      	adds	r3, r7, r3
 8001e60:	2200      	movs	r2, #0
 8001e62:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001e64:	2300      	movs	r3, #0
 8001e66:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e125      	b.n	80020be <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10a      	bne.n	8001e90 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2234      	movs	r2, #52	; 0x34
 8001e84:	2100      	movs	r1, #0
 8001e86:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	f7ff fc20 	bl	80016d0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e94:	2210      	movs	r2, #16
 8001e96:	4013      	ands	r3, r2
 8001e98:	d000      	beq.n	8001e9c <HAL_ADC_Init+0x48>
 8001e9a:	e103      	b.n	80020a4 <HAL_ADC_Init+0x250>
 8001e9c:	230f      	movs	r3, #15
 8001e9e:	18fb      	adds	r3, r7, r3
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d000      	beq.n	8001ea8 <HAL_ADC_Init+0x54>
 8001ea6:	e0fd      	b.n	80020a4 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	2204      	movs	r2, #4
 8001eb0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001eb2:	d000      	beq.n	8001eb6 <HAL_ADC_Init+0x62>
 8001eb4:	e0f6      	b.n	80020a4 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eba:	4a83      	ldr	r2, [pc, #524]	; (80020c8 <HAL_ADC_Init+0x274>)
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	431a      	orrs	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	2203      	movs	r2, #3
 8001ece:	4013      	ands	r3, r2
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d112      	bne.n	8001efa <HAL_ADC_Init+0xa6>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2201      	movs	r2, #1
 8001edc:	4013      	ands	r3, r2
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d009      	beq.n	8001ef6 <HAL_ADC_Init+0xa2>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68da      	ldr	r2, [r3, #12]
 8001ee8:	2380      	movs	r3, #128	; 0x80
 8001eea:	021b      	lsls	r3, r3, #8
 8001eec:	401a      	ands	r2, r3
 8001eee:	2380      	movs	r3, #128	; 0x80
 8001ef0:	021b      	lsls	r3, r3, #8
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d101      	bne.n	8001efa <HAL_ADC_Init+0xa6>
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e000      	b.n	8001efc <HAL_ADC_Init+0xa8>
 8001efa:	2300      	movs	r3, #0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d116      	bne.n	8001f2e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	2218      	movs	r2, #24
 8001f08:	4393      	bics	r3, r2
 8001f0a:	0019      	movs	r1, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	430a      	orrs	r2, r1
 8001f16:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	0899      	lsrs	r1, r3, #2
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68da      	ldr	r2, [r3, #12]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4964      	ldr	r1, [pc, #400]	; (80020cc <HAL_ADC_Init+0x278>)
 8001f3a:	400a      	ands	r2, r1
 8001f3c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	7e1b      	ldrb	r3, [r3, #24]
 8001f42:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	7e5b      	ldrb	r3, [r3, #25]
 8001f48:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f4a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	7e9b      	ldrb	r3, [r3, #26]
 8001f50:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001f52:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d002      	beq.n	8001f62 <HAL_ADC_Init+0x10e>
 8001f5c:	2380      	movs	r3, #128	; 0x80
 8001f5e:	015b      	lsls	r3, r3, #5
 8001f60:	e000      	b.n	8001f64 <HAL_ADC_Init+0x110>
 8001f62:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001f64:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001f6a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d101      	bne.n	8001f78 <HAL_ADC_Init+0x124>
 8001f74:	2304      	movs	r3, #4
 8001f76:	e000      	b.n	8001f7a <HAL_ADC_Init+0x126>
 8001f78:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001f7a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2124      	movs	r1, #36	; 0x24
 8001f80:	5c5b      	ldrb	r3, [r3, r1]
 8001f82:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001f84:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f86:	68ba      	ldr	r2, [r7, #8]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	7edb      	ldrb	r3, [r3, #27]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d115      	bne.n	8001fc0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	7e9b      	ldrb	r3, [r3, #26]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d105      	bne.n	8001fa8 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	2280      	movs	r2, #128	; 0x80
 8001fa0:	0252      	lsls	r2, r2, #9
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	60bb      	str	r3, [r7, #8]
 8001fa6:	e00b      	b.n	8001fc0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fac:	2220      	movs	r2, #32
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb8:	2201      	movs	r2, #1
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69da      	ldr	r2, [r3, #28]
 8001fc4:	23c2      	movs	r3, #194	; 0xc2
 8001fc6:	33ff      	adds	r3, #255	; 0xff
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d007      	beq.n	8001fdc <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	68ba      	ldr	r2, [r7, #8]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68d9      	ldr	r1, [r3, #12]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68ba      	ldr	r2, [r7, #8]
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ff0:	2380      	movs	r3, #128	; 0x80
 8001ff2:	055b      	lsls	r3, r3, #21
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d01b      	beq.n	8002030 <HAL_ADC_Init+0x1dc>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d017      	beq.n	8002030 <HAL_ADC_Init+0x1dc>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002004:	2b02      	cmp	r3, #2
 8002006:	d013      	beq.n	8002030 <HAL_ADC_Init+0x1dc>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200c:	2b03      	cmp	r3, #3
 800200e:	d00f      	beq.n	8002030 <HAL_ADC_Init+0x1dc>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002014:	2b04      	cmp	r3, #4
 8002016:	d00b      	beq.n	8002030 <HAL_ADC_Init+0x1dc>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201c:	2b05      	cmp	r3, #5
 800201e:	d007      	beq.n	8002030 <HAL_ADC_Init+0x1dc>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002024:	2b06      	cmp	r3, #6
 8002026:	d003      	beq.n	8002030 <HAL_ADC_Init+0x1dc>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202c:	2b07      	cmp	r3, #7
 800202e:	d112      	bne.n	8002056 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	695a      	ldr	r2, [r3, #20]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2107      	movs	r1, #7
 800203c:	438a      	bics	r2, r1
 800203e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6959      	ldr	r1, [r3, #20]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204a:	2207      	movs	r2, #7
 800204c:	401a      	ands	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	430a      	orrs	r2, r1
 8002054:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	4a1c      	ldr	r2, [pc, #112]	; (80020d0 <HAL_ADC_Init+0x27c>)
 800205e:	4013      	ands	r3, r2
 8002060:	68ba      	ldr	r2, [r7, #8]
 8002062:	429a      	cmp	r2, r3
 8002064:	d10b      	bne.n	800207e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002070:	2203      	movs	r2, #3
 8002072:	4393      	bics	r3, r2
 8002074:	2201      	movs	r2, #1
 8002076:	431a      	orrs	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800207c:	e01c      	b.n	80020b8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002082:	2212      	movs	r2, #18
 8002084:	4393      	bics	r3, r2
 8002086:	2210      	movs	r2, #16
 8002088:	431a      	orrs	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002092:	2201      	movs	r2, #1
 8002094:	431a      	orrs	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800209a:	230f      	movs	r3, #15
 800209c:	18fb      	adds	r3, r7, r3
 800209e:	2201      	movs	r2, #1
 80020a0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80020a2:	e009      	b.n	80020b8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a8:	2210      	movs	r2, #16
 80020aa:	431a      	orrs	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80020b0:	230f      	movs	r3, #15
 80020b2:	18fb      	adds	r3, r7, r3
 80020b4:	2201      	movs	r2, #1
 80020b6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80020b8:	230f      	movs	r3, #15
 80020ba:	18fb      	adds	r3, r7, r3
 80020bc:	781b      	ldrb	r3, [r3, #0]
}
 80020be:	0018      	movs	r0, r3
 80020c0:	46bd      	mov	sp, r7
 80020c2:	b004      	add	sp, #16
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	46c0      	nop			; (mov r8, r8)
 80020c8:	fffffefd 	.word	0xfffffefd
 80020cc:	fffe0219 	.word	0xfffe0219
 80020d0:	833fffe7 	.word	0x833fffe7

080020d4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80020d4:	b590      	push	{r4, r7, lr}
 80020d6:	b087      	sub	sp, #28
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020e0:	2317      	movs	r3, #23
 80020e2:	18fb      	adds	r3, r7, r3
 80020e4:	2200      	movs	r2, #0
 80020e6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	2204      	movs	r2, #4
 80020f0:	4013      	ands	r3, r2
 80020f2:	d15e      	bne.n	80021b2 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2234      	movs	r2, #52	; 0x34
 80020f8:	5c9b      	ldrb	r3, [r3, r2]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d101      	bne.n	8002102 <HAL_ADC_Start_DMA+0x2e>
 80020fe:	2302      	movs	r3, #2
 8002100:	e05e      	b.n	80021c0 <HAL_ADC_Start_DMA+0xec>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2234      	movs	r2, #52	; 0x34
 8002106:	2101      	movs	r1, #1
 8002108:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	7e5b      	ldrb	r3, [r3, #25]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d007      	beq.n	8002122 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002112:	2317      	movs	r3, #23
 8002114:	18fc      	adds	r4, r7, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	0018      	movs	r0, r3
 800211a:	f000 f983 	bl	8002424 <ADC_Enable>
 800211e:	0003      	movs	r3, r0
 8002120:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002122:	2317      	movs	r3, #23
 8002124:	18fb      	adds	r3, r7, r3
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d146      	bne.n	80021ba <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002130:	4a25      	ldr	r2, [pc, #148]	; (80021c8 <HAL_ADC_Start_DMA+0xf4>)
 8002132:	4013      	ands	r3, r2
 8002134:	2280      	movs	r2, #128	; 0x80
 8002136:	0052      	lsls	r2, r2, #1
 8002138:	431a      	orrs	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2234      	movs	r2, #52	; 0x34
 8002148:	2100      	movs	r1, #0
 800214a:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002150:	4a1e      	ldr	r2, [pc, #120]	; (80021cc <HAL_ADC_Start_DMA+0xf8>)
 8002152:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002158:	4a1d      	ldr	r2, [pc, #116]	; (80021d0 <HAL_ADC_Start_DMA+0xfc>)
 800215a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002160:	4a1c      	ldr	r2, [pc, #112]	; (80021d4 <HAL_ADC_Start_DMA+0x100>)
 8002162:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	221c      	movs	r2, #28
 800216a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	685a      	ldr	r2, [r3, #4]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2110      	movs	r1, #16
 8002178:	430a      	orrs	r2, r1
 800217a:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68da      	ldr	r2, [r3, #12]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2101      	movs	r1, #1
 8002188:	430a      	orrs	r2, r1
 800218a:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	3340      	adds	r3, #64	; 0x40
 8002196:	0019      	movs	r1, r3
 8002198:	68ba      	ldr	r2, [r7, #8]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f000 fc0a 	bl	80029b4 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	689a      	ldr	r2, [r3, #8]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2104      	movs	r1, #4
 80021ac:	430a      	orrs	r2, r1
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	e003      	b.n	80021ba <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80021b2:	2317      	movs	r3, #23
 80021b4:	18fb      	adds	r3, r7, r3
 80021b6:	2202      	movs	r2, #2
 80021b8:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 80021ba:	2317      	movs	r3, #23
 80021bc:	18fb      	adds	r3, r7, r3
 80021be:	781b      	ldrb	r3, [r3, #0]
}
 80021c0:	0018      	movs	r0, r3
 80021c2:	46bd      	mov	sp, r7
 80021c4:	b007      	add	sp, #28
 80021c6:	bd90      	pop	{r4, r7, pc}
 80021c8:	fffff0fe 	.word	0xfffff0fe
 80021cc:	0800252d 	.word	0x0800252d
 80021d0:	080025e1 	.word	0x080025e1
 80021d4:	080025ff 	.word	0x080025ff

080021d8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80021e0:	46c0      	nop			; (mov r8, r8)
 80021e2:	46bd      	mov	sp, r7
 80021e4:	b002      	add	sp, #8
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80021f0:	46c0      	nop			; (mov r8, r8)
 80021f2:	46bd      	mov	sp, r7
 80021f4:	b002      	add	sp, #8
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002200:	46c0      	nop			; (mov r8, r8)
 8002202:	46bd      	mov	sp, r7
 8002204:	b002      	add	sp, #8
 8002206:	bd80      	pop	{r7, pc}

08002208 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002212:	230f      	movs	r3, #15
 8002214:	18fb      	adds	r3, r7, r3
 8002216:	2200      	movs	r2, #0
 8002218:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800221a:	2300      	movs	r3, #0
 800221c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002222:	2380      	movs	r3, #128	; 0x80
 8002224:	055b      	lsls	r3, r3, #21
 8002226:	429a      	cmp	r2, r3
 8002228:	d011      	beq.n	800224e <HAL_ADC_ConfigChannel+0x46>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222e:	2b01      	cmp	r3, #1
 8002230:	d00d      	beq.n	800224e <HAL_ADC_ConfigChannel+0x46>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002236:	2b02      	cmp	r3, #2
 8002238:	d009      	beq.n	800224e <HAL_ADC_ConfigChannel+0x46>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223e:	2b03      	cmp	r3, #3
 8002240:	d005      	beq.n	800224e <HAL_ADC_ConfigChannel+0x46>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002246:	2b04      	cmp	r3, #4
 8002248:	d001      	beq.n	800224e <HAL_ADC_ConfigChannel+0x46>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2234      	movs	r2, #52	; 0x34
 8002252:	5c9b      	ldrb	r3, [r3, r2]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d101      	bne.n	800225c <HAL_ADC_ConfigChannel+0x54>
 8002258:	2302      	movs	r3, #2
 800225a:	e0d0      	b.n	80023fe <HAL_ADC_ConfigChannel+0x1f6>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2234      	movs	r2, #52	; 0x34
 8002260:	2101      	movs	r1, #1
 8002262:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	2204      	movs	r2, #4
 800226c:	4013      	ands	r3, r2
 800226e:	d000      	beq.n	8002272 <HAL_ADC_ConfigChannel+0x6a>
 8002270:	e0b4      	b.n	80023dc <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	4a64      	ldr	r2, [pc, #400]	; (8002408 <HAL_ADC_ConfigChannel+0x200>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d100      	bne.n	800227e <HAL_ADC_ConfigChannel+0x76>
 800227c:	e082      	b.n	8002384 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2201      	movs	r2, #1
 800228a:	409a      	lsls	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	430a      	orrs	r2, r1
 8002292:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002298:	2380      	movs	r3, #128	; 0x80
 800229a:	055b      	lsls	r3, r3, #21
 800229c:	429a      	cmp	r2, r3
 800229e:	d037      	beq.n	8002310 <HAL_ADC_ConfigChannel+0x108>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d033      	beq.n	8002310 <HAL_ADC_ConfigChannel+0x108>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d02f      	beq.n	8002310 <HAL_ADC_ConfigChannel+0x108>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b4:	2b03      	cmp	r3, #3
 80022b6:	d02b      	beq.n	8002310 <HAL_ADC_ConfigChannel+0x108>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022bc:	2b04      	cmp	r3, #4
 80022be:	d027      	beq.n	8002310 <HAL_ADC_ConfigChannel+0x108>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c4:	2b05      	cmp	r3, #5
 80022c6:	d023      	beq.n	8002310 <HAL_ADC_ConfigChannel+0x108>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022cc:	2b06      	cmp	r3, #6
 80022ce:	d01f      	beq.n	8002310 <HAL_ADC_ConfigChannel+0x108>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d4:	2b07      	cmp	r3, #7
 80022d6:	d01b      	beq.n	8002310 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	2107      	movs	r1, #7
 80022e4:	400b      	ands	r3, r1
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d012      	beq.n	8002310 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	695a      	ldr	r2, [r3, #20]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2107      	movs	r1, #7
 80022f6:	438a      	bics	r2, r1
 80022f8:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6959      	ldr	r1, [r3, #20]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	2207      	movs	r2, #7
 8002306:	401a      	ands	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	430a      	orrs	r2, r1
 800230e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2b10      	cmp	r3, #16
 8002316:	d007      	beq.n	8002328 <HAL_ADC_ConfigChannel+0x120>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2b11      	cmp	r3, #17
 800231e:	d003      	beq.n	8002328 <HAL_ADC_ConfigChannel+0x120>
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2b12      	cmp	r3, #18
 8002326:	d163      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002328:	4b38      	ldr	r3, [pc, #224]	; (800240c <HAL_ADC_ConfigChannel+0x204>)
 800232a:	6819      	ldr	r1, [r3, #0]
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2b10      	cmp	r3, #16
 8002332:	d009      	beq.n	8002348 <HAL_ADC_ConfigChannel+0x140>
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2b11      	cmp	r3, #17
 800233a:	d102      	bne.n	8002342 <HAL_ADC_ConfigChannel+0x13a>
 800233c:	2380      	movs	r3, #128	; 0x80
 800233e:	03db      	lsls	r3, r3, #15
 8002340:	e004      	b.n	800234c <HAL_ADC_ConfigChannel+0x144>
 8002342:	2380      	movs	r3, #128	; 0x80
 8002344:	045b      	lsls	r3, r3, #17
 8002346:	e001      	b.n	800234c <HAL_ADC_ConfigChannel+0x144>
 8002348:	2380      	movs	r3, #128	; 0x80
 800234a:	041b      	lsls	r3, r3, #16
 800234c:	4a2f      	ldr	r2, [pc, #188]	; (800240c <HAL_ADC_ConfigChannel+0x204>)
 800234e:	430b      	orrs	r3, r1
 8002350:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2b10      	cmp	r3, #16
 8002358:	d14a      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800235a:	4b2d      	ldr	r3, [pc, #180]	; (8002410 <HAL_ADC_ConfigChannel+0x208>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	492d      	ldr	r1, [pc, #180]	; (8002414 <HAL_ADC_ConfigChannel+0x20c>)
 8002360:	0018      	movs	r0, r3
 8002362:	f7fd fed9 	bl	8000118 <__udivsi3>
 8002366:	0003      	movs	r3, r0
 8002368:	001a      	movs	r2, r3
 800236a:	0013      	movs	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	189b      	adds	r3, r3, r2
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002374:	e002      	b.n	800237c <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	3b01      	subs	r3, #1
 800237a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f9      	bne.n	8002376 <HAL_ADC_ConfigChannel+0x16e>
 8002382:	e035      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2101      	movs	r1, #1
 8002390:	4099      	lsls	r1, r3
 8002392:	000b      	movs	r3, r1
 8002394:	43d9      	mvns	r1, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	400a      	ands	r2, r1
 800239c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2b10      	cmp	r3, #16
 80023a4:	d007      	beq.n	80023b6 <HAL_ADC_ConfigChannel+0x1ae>
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2b11      	cmp	r3, #17
 80023ac:	d003      	beq.n	80023b6 <HAL_ADC_ConfigChannel+0x1ae>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2b12      	cmp	r3, #18
 80023b4:	d11c      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80023b6:	4b15      	ldr	r3, [pc, #84]	; (800240c <HAL_ADC_ConfigChannel+0x204>)
 80023b8:	6819      	ldr	r1, [r3, #0]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2b10      	cmp	r3, #16
 80023c0:	d007      	beq.n	80023d2 <HAL_ADC_ConfigChannel+0x1ca>
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2b11      	cmp	r3, #17
 80023c8:	d101      	bne.n	80023ce <HAL_ADC_ConfigChannel+0x1c6>
 80023ca:	4b13      	ldr	r3, [pc, #76]	; (8002418 <HAL_ADC_ConfigChannel+0x210>)
 80023cc:	e002      	b.n	80023d4 <HAL_ADC_ConfigChannel+0x1cc>
 80023ce:	4b13      	ldr	r3, [pc, #76]	; (800241c <HAL_ADC_ConfigChannel+0x214>)
 80023d0:	e000      	b.n	80023d4 <HAL_ADC_ConfigChannel+0x1cc>
 80023d2:	4b13      	ldr	r3, [pc, #76]	; (8002420 <HAL_ADC_ConfigChannel+0x218>)
 80023d4:	4a0d      	ldr	r2, [pc, #52]	; (800240c <HAL_ADC_ConfigChannel+0x204>)
 80023d6:	400b      	ands	r3, r1
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	e009      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e0:	2220      	movs	r2, #32
 80023e2:	431a      	orrs	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80023e8:	230f      	movs	r3, #15
 80023ea:	18fb      	adds	r3, r7, r3
 80023ec:	2201      	movs	r2, #1
 80023ee:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2234      	movs	r2, #52	; 0x34
 80023f4:	2100      	movs	r1, #0
 80023f6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80023f8:	230f      	movs	r3, #15
 80023fa:	18fb      	adds	r3, r7, r3
 80023fc:	781b      	ldrb	r3, [r3, #0]
}
 80023fe:	0018      	movs	r0, r3
 8002400:	46bd      	mov	sp, r7
 8002402:	b004      	add	sp, #16
 8002404:	bd80      	pop	{r7, pc}
 8002406:	46c0      	nop			; (mov r8, r8)
 8002408:	00001001 	.word	0x00001001
 800240c:	40012708 	.word	0x40012708
 8002410:	20000044 	.word	0x20000044
 8002414:	000f4240 	.word	0x000f4240
 8002418:	ffbfffff 	.word	0xffbfffff
 800241c:	feffffff 	.word	0xfeffffff
 8002420:	ff7fffff 	.word	0xff7fffff

08002424 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800242c:	2300      	movs	r3, #0
 800242e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002430:	2300      	movs	r3, #0
 8002432:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	2203      	movs	r2, #3
 800243c:	4013      	ands	r3, r2
 800243e:	2b01      	cmp	r3, #1
 8002440:	d112      	bne.n	8002468 <ADC_Enable+0x44>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2201      	movs	r2, #1
 800244a:	4013      	ands	r3, r2
 800244c:	2b01      	cmp	r3, #1
 800244e:	d009      	beq.n	8002464 <ADC_Enable+0x40>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68da      	ldr	r2, [r3, #12]
 8002456:	2380      	movs	r3, #128	; 0x80
 8002458:	021b      	lsls	r3, r3, #8
 800245a:	401a      	ands	r2, r3
 800245c:	2380      	movs	r3, #128	; 0x80
 800245e:	021b      	lsls	r3, r3, #8
 8002460:	429a      	cmp	r2, r3
 8002462:	d101      	bne.n	8002468 <ADC_Enable+0x44>
 8002464:	2301      	movs	r3, #1
 8002466:	e000      	b.n	800246a <ADC_Enable+0x46>
 8002468:	2300      	movs	r3, #0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d152      	bne.n	8002514 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	4a2a      	ldr	r2, [pc, #168]	; (8002520 <ADC_Enable+0xfc>)
 8002476:	4013      	ands	r3, r2
 8002478:	d00d      	beq.n	8002496 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247e:	2210      	movs	r2, #16
 8002480:	431a      	orrs	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800248a:	2201      	movs	r2, #1
 800248c:	431a      	orrs	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e03f      	b.n	8002516 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2101      	movs	r1, #1
 80024a2:	430a      	orrs	r2, r1
 80024a4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024a6:	4b1f      	ldr	r3, [pc, #124]	; (8002524 <ADC_Enable+0x100>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	491f      	ldr	r1, [pc, #124]	; (8002528 <ADC_Enable+0x104>)
 80024ac:	0018      	movs	r0, r3
 80024ae:	f7fd fe33 	bl	8000118 <__udivsi3>
 80024b2:	0003      	movs	r3, r0
 80024b4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80024b6:	e002      	b.n	80024be <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	3b01      	subs	r3, #1
 80024bc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1f9      	bne.n	80024b8 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80024c4:	f7ff fcbc 	bl	8001e40 <HAL_GetTick>
 80024c8:	0003      	movs	r3, r0
 80024ca:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80024cc:	e01b      	b.n	8002506 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024ce:	f7ff fcb7 	bl	8001e40 <HAL_GetTick>
 80024d2:	0002      	movs	r2, r0
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d914      	bls.n	8002506 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2201      	movs	r2, #1
 80024e4:	4013      	ands	r3, r2
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d00d      	beq.n	8002506 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ee:	2210      	movs	r2, #16
 80024f0:	431a      	orrs	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024fa:	2201      	movs	r2, #1
 80024fc:	431a      	orrs	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e007      	b.n	8002516 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2201      	movs	r2, #1
 800250e:	4013      	ands	r3, r2
 8002510:	2b01      	cmp	r3, #1
 8002512:	d1dc      	bne.n	80024ce <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	0018      	movs	r0, r3
 8002518:	46bd      	mov	sp, r7
 800251a:	b004      	add	sp, #16
 800251c:	bd80      	pop	{r7, pc}
 800251e:	46c0      	nop			; (mov r8, r8)
 8002520:	80000017 	.word	0x80000017
 8002524:	20000044 	.word	0x20000044
 8002528:	000f4240 	.word	0x000f4240

0800252c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002538:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800253e:	2250      	movs	r2, #80	; 0x50
 8002540:	4013      	ands	r3, r2
 8002542:	d140      	bne.n	80025c6 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002548:	2280      	movs	r2, #128	; 0x80
 800254a:	0092      	lsls	r2, r2, #2
 800254c:	431a      	orrs	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68da      	ldr	r2, [r3, #12]
 8002558:	23c0      	movs	r3, #192	; 0xc0
 800255a:	011b      	lsls	r3, r3, #4
 800255c:	4013      	ands	r3, r2
 800255e:	d12d      	bne.n	80025bc <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002564:	2b00      	cmp	r3, #0
 8002566:	d129      	bne.n	80025bc <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2208      	movs	r2, #8
 8002570:	4013      	ands	r3, r2
 8002572:	2b08      	cmp	r3, #8
 8002574:	d122      	bne.n	80025bc <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	2204      	movs	r2, #4
 800257e:	4013      	ands	r3, r2
 8002580:	d110      	bne.n	80025a4 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	210c      	movs	r1, #12
 800258e:	438a      	bics	r2, r1
 8002590:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002596:	4a11      	ldr	r2, [pc, #68]	; (80025dc <ADC_DMAConvCplt+0xb0>)
 8002598:	4013      	ands	r3, r2
 800259a:	2201      	movs	r2, #1
 800259c:	431a      	orrs	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	639a      	str	r2, [r3, #56]	; 0x38
 80025a2:	e00b      	b.n	80025bc <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a8:	2220      	movs	r2, #32
 80025aa:	431a      	orrs	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b4:	2201      	movs	r2, #1
 80025b6:	431a      	orrs	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	0018      	movs	r0, r3
 80025c0:	f7ff fe0a 	bl	80021d8 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 80025c4:	e005      	b.n	80025d2 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	0010      	movs	r0, r2
 80025d0:	4798      	blx	r3
}
 80025d2:	46c0      	nop			; (mov r8, r8)
 80025d4:	46bd      	mov	sp, r7
 80025d6:	b004      	add	sp, #16
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	46c0      	nop			; (mov r8, r8)
 80025dc:	fffffefe 	.word	0xfffffefe

080025e0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ec:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	0018      	movs	r0, r3
 80025f2:	f7ff fdf9 	bl	80021e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025f6:	46c0      	nop			; (mov r8, r8)
 80025f8:	46bd      	mov	sp, r7
 80025fa:	b004      	add	sp, #16
 80025fc:	bd80      	pop	{r7, pc}

080025fe <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b084      	sub	sp, #16
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002610:	2240      	movs	r2, #64	; 0x40
 8002612:	431a      	orrs	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800261c:	2204      	movs	r2, #4
 800261e:	431a      	orrs	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	0018      	movs	r0, r3
 8002628:	f7ff fde6 	bl	80021f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800262c:	46c0      	nop			; (mov r8, r8)
 800262e:	46bd      	mov	sp, r7
 8002630:	b004      	add	sp, #16
 8002632:	bd80      	pop	{r7, pc}

08002634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	0002      	movs	r2, r0
 800263c:	1dfb      	adds	r3, r7, #7
 800263e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002640:	1dfb      	adds	r3, r7, #7
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	2b7f      	cmp	r3, #127	; 0x7f
 8002646:	d809      	bhi.n	800265c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002648:	1dfb      	adds	r3, r7, #7
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	001a      	movs	r2, r3
 800264e:	231f      	movs	r3, #31
 8002650:	401a      	ands	r2, r3
 8002652:	4b04      	ldr	r3, [pc, #16]	; (8002664 <__NVIC_EnableIRQ+0x30>)
 8002654:	2101      	movs	r1, #1
 8002656:	4091      	lsls	r1, r2
 8002658:	000a      	movs	r2, r1
 800265a:	601a      	str	r2, [r3, #0]
  }
}
 800265c:	46c0      	nop			; (mov r8, r8)
 800265e:	46bd      	mov	sp, r7
 8002660:	b002      	add	sp, #8
 8002662:	bd80      	pop	{r7, pc}
 8002664:	e000e100 	.word	0xe000e100

08002668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002668:	b590      	push	{r4, r7, lr}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	0002      	movs	r2, r0
 8002670:	6039      	str	r1, [r7, #0]
 8002672:	1dfb      	adds	r3, r7, #7
 8002674:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002676:	1dfb      	adds	r3, r7, #7
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2b7f      	cmp	r3, #127	; 0x7f
 800267c:	d828      	bhi.n	80026d0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800267e:	4a2f      	ldr	r2, [pc, #188]	; (800273c <__NVIC_SetPriority+0xd4>)
 8002680:	1dfb      	adds	r3, r7, #7
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	b25b      	sxtb	r3, r3
 8002686:	089b      	lsrs	r3, r3, #2
 8002688:	33c0      	adds	r3, #192	; 0xc0
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	589b      	ldr	r3, [r3, r2]
 800268e:	1dfa      	adds	r2, r7, #7
 8002690:	7812      	ldrb	r2, [r2, #0]
 8002692:	0011      	movs	r1, r2
 8002694:	2203      	movs	r2, #3
 8002696:	400a      	ands	r2, r1
 8002698:	00d2      	lsls	r2, r2, #3
 800269a:	21ff      	movs	r1, #255	; 0xff
 800269c:	4091      	lsls	r1, r2
 800269e:	000a      	movs	r2, r1
 80026a0:	43d2      	mvns	r2, r2
 80026a2:	401a      	ands	r2, r3
 80026a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	019b      	lsls	r3, r3, #6
 80026aa:	22ff      	movs	r2, #255	; 0xff
 80026ac:	401a      	ands	r2, r3
 80026ae:	1dfb      	adds	r3, r7, #7
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	0018      	movs	r0, r3
 80026b4:	2303      	movs	r3, #3
 80026b6:	4003      	ands	r3, r0
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026bc:	481f      	ldr	r0, [pc, #124]	; (800273c <__NVIC_SetPriority+0xd4>)
 80026be:	1dfb      	adds	r3, r7, #7
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	b25b      	sxtb	r3, r3
 80026c4:	089b      	lsrs	r3, r3, #2
 80026c6:	430a      	orrs	r2, r1
 80026c8:	33c0      	adds	r3, #192	; 0xc0
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80026ce:	e031      	b.n	8002734 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026d0:	4a1b      	ldr	r2, [pc, #108]	; (8002740 <__NVIC_SetPriority+0xd8>)
 80026d2:	1dfb      	adds	r3, r7, #7
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	0019      	movs	r1, r3
 80026d8:	230f      	movs	r3, #15
 80026da:	400b      	ands	r3, r1
 80026dc:	3b08      	subs	r3, #8
 80026de:	089b      	lsrs	r3, r3, #2
 80026e0:	3306      	adds	r3, #6
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	18d3      	adds	r3, r2, r3
 80026e6:	3304      	adds	r3, #4
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	1dfa      	adds	r2, r7, #7
 80026ec:	7812      	ldrb	r2, [r2, #0]
 80026ee:	0011      	movs	r1, r2
 80026f0:	2203      	movs	r2, #3
 80026f2:	400a      	ands	r2, r1
 80026f4:	00d2      	lsls	r2, r2, #3
 80026f6:	21ff      	movs	r1, #255	; 0xff
 80026f8:	4091      	lsls	r1, r2
 80026fa:	000a      	movs	r2, r1
 80026fc:	43d2      	mvns	r2, r2
 80026fe:	401a      	ands	r2, r3
 8002700:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	019b      	lsls	r3, r3, #6
 8002706:	22ff      	movs	r2, #255	; 0xff
 8002708:	401a      	ands	r2, r3
 800270a:	1dfb      	adds	r3, r7, #7
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	0018      	movs	r0, r3
 8002710:	2303      	movs	r3, #3
 8002712:	4003      	ands	r3, r0
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002718:	4809      	ldr	r0, [pc, #36]	; (8002740 <__NVIC_SetPriority+0xd8>)
 800271a:	1dfb      	adds	r3, r7, #7
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	001c      	movs	r4, r3
 8002720:	230f      	movs	r3, #15
 8002722:	4023      	ands	r3, r4
 8002724:	3b08      	subs	r3, #8
 8002726:	089b      	lsrs	r3, r3, #2
 8002728:	430a      	orrs	r2, r1
 800272a:	3306      	adds	r3, #6
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	18c3      	adds	r3, r0, r3
 8002730:	3304      	adds	r3, #4
 8002732:	601a      	str	r2, [r3, #0]
}
 8002734:	46c0      	nop			; (mov r8, r8)
 8002736:	46bd      	mov	sp, r7
 8002738:	b003      	add	sp, #12
 800273a:	bd90      	pop	{r4, r7, pc}
 800273c:	e000e100 	.word	0xe000e100
 8002740:	e000ed00 	.word	0xe000ed00

08002744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	1e5a      	subs	r2, r3, #1
 8002750:	2380      	movs	r3, #128	; 0x80
 8002752:	045b      	lsls	r3, r3, #17
 8002754:	429a      	cmp	r2, r3
 8002756:	d301      	bcc.n	800275c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002758:	2301      	movs	r3, #1
 800275a:	e010      	b.n	800277e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800275c:	4b0a      	ldr	r3, [pc, #40]	; (8002788 <SysTick_Config+0x44>)
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	3a01      	subs	r2, #1
 8002762:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002764:	2301      	movs	r3, #1
 8002766:	425b      	negs	r3, r3
 8002768:	2103      	movs	r1, #3
 800276a:	0018      	movs	r0, r3
 800276c:	f7ff ff7c 	bl	8002668 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002770:	4b05      	ldr	r3, [pc, #20]	; (8002788 <SysTick_Config+0x44>)
 8002772:	2200      	movs	r2, #0
 8002774:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002776:	4b04      	ldr	r3, [pc, #16]	; (8002788 <SysTick_Config+0x44>)
 8002778:	2207      	movs	r2, #7
 800277a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800277c:	2300      	movs	r3, #0
}
 800277e:	0018      	movs	r0, r3
 8002780:	46bd      	mov	sp, r7
 8002782:	b002      	add	sp, #8
 8002784:	bd80      	pop	{r7, pc}
 8002786:	46c0      	nop			; (mov r8, r8)
 8002788:	e000e010 	.word	0xe000e010

0800278c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	60b9      	str	r1, [r7, #8]
 8002794:	607a      	str	r2, [r7, #4]
 8002796:	210f      	movs	r1, #15
 8002798:	187b      	adds	r3, r7, r1
 800279a:	1c02      	adds	r2, r0, #0
 800279c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800279e:	68ba      	ldr	r2, [r7, #8]
 80027a0:	187b      	adds	r3, r7, r1
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	b25b      	sxtb	r3, r3
 80027a6:	0011      	movs	r1, r2
 80027a8:	0018      	movs	r0, r3
 80027aa:	f7ff ff5d 	bl	8002668 <__NVIC_SetPriority>
}
 80027ae:	46c0      	nop			; (mov r8, r8)
 80027b0:	46bd      	mov	sp, r7
 80027b2:	b004      	add	sp, #16
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b082      	sub	sp, #8
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	0002      	movs	r2, r0
 80027be:	1dfb      	adds	r3, r7, #7
 80027c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027c2:	1dfb      	adds	r3, r7, #7
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	b25b      	sxtb	r3, r3
 80027c8:	0018      	movs	r0, r3
 80027ca:	f7ff ff33 	bl	8002634 <__NVIC_EnableIRQ>
}
 80027ce:	46c0      	nop			; (mov r8, r8)
 80027d0:	46bd      	mov	sp, r7
 80027d2:	b002      	add	sp, #8
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b082      	sub	sp, #8
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	0018      	movs	r0, r3
 80027e2:	f7ff ffaf 	bl	8002744 <SysTick_Config>
 80027e6:	0003      	movs	r3, r0
}
 80027e8:	0018      	movs	r0, r3
 80027ea:	46bd      	mov	sp, r7
 80027ec:	b002      	add	sp, #8
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e015      	b.n	800282e <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if (hdac->State == HAL_DAC_STATE_RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	791b      	ldrb	r3, [r3, #4]
 8002806:	b2db      	uxtb	r3, r3
 8002808:	2b00      	cmp	r3, #0
 800280a:	d106      	bne.n	800281a <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	0018      	movs	r0, r3
 8002816:	f7ff f80b 	bl	8001830 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2202      	movs	r2, #2
 800281e:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2201      	movs	r2, #1
 800282a:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	0018      	movs	r0, r3
 8002830:	46bd      	mov	sp, r7
 8002832:	b002      	add	sp, #8
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_DAC_ConfigChannel>:
  *          This parameter can be one of the following values:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b086      	sub	sp, #24
 800283a:	af00      	add	r7, sp, #0
 800283c:	60f8      	str	r0, [r7, #12]
 800283e:	60b9      	str	r1, [r7, #8]
 8002840:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002842:	2300      	movs	r3, #0
 8002844:	617b      	str	r3, [r7, #20]
 8002846:	2300      	movs	r3, #0
 8002848:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	795b      	ldrb	r3, [r3, #5]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d101      	bne.n	8002856 <HAL_DAC_ConfigChannel+0x20>
 8002852:	2302      	movs	r3, #2
 8002854:	e029      	b.n	80028aa <HAL_DAC_ConfigChannel+0x74>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2201      	movs	r2, #1
 800285a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2202      	movs	r2, #2
 8002860:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel); 
 800286a:	223e      	movs	r2, #62	; 0x3e
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	409a      	lsls	r2, r3
 8002870:	0013      	movs	r3, r2
 8002872:	43da      	mvns	r2, r3
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	4013      	ands	r3, r2
 8002878:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	4313      	orrs	r3, r2
 8002884:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	409a      	lsls	r2, r3
 800288c:	0013      	movs	r3, r2
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	4313      	orrs	r3, r2
 8002892:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2201      	movs	r2, #1
 80028a0:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	0018      	movs	r0, r3
 80028ac:	46bd      	mov	sp, r7
 80028ae:	b006      	add	sp, #24
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_DAC_Start>:
       /* STM32F091xC  STM32F098xx */

#if defined (STM32F051x8) || defined (STM32F058xx)

HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b082      	sub	sp, #8
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
 80028ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	795b      	ldrb	r3, [r3, #5]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d101      	bne.n	80028c8 <HAL_DAC_Start+0x16>
 80028c4:	2302      	movs	r3, #2
 80028c6:	e028      	b.n	800291a <HAL_DAC_Start+0x68>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2202      	movs	r2, #2
 80028d2:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6819      	ldr	r1, [r3, #0]
 80028da:	2201      	movs	r2, #1
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	409a      	lsls	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	430a      	orrs	r2, r1
 80028e6:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10e      	bne.n	800290c <HAL_DAC_Start+0x5a>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	223c      	movs	r2, #60	; 0x3c
 80028f6:	4013      	ands	r3, r2
 80028f8:	2b3c      	cmp	r3, #60	; 0x3c
 80028fa:	d107      	bne.n	800290c <HAL_DAC_Start+0x5a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685a      	ldr	r2, [r3, #4]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2101      	movs	r1, #1
 8002908:	430a      	orrs	r2, r1
 800290a:	605a      	str	r2, [r3, #4]
    }
  }
 
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	0018      	movs	r0, r3
 800291c:	46bd      	mov	sp, r7
 800291e:	b002      	add	sp, #8
 8002920:	bd80      	pop	{r7, pc}
	...

08002924 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800292c:	2300      	movs	r3, #0
 800292e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e036      	b.n	80029a8 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2221      	movs	r2, #33	; 0x21
 800293e:	2102      	movs	r1, #2
 8002940:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	4a18      	ldr	r2, [pc, #96]	; (80029b0 <HAL_DMA_Init+0x8c>)
 800294e:	4013      	ands	r3, r2
 8002950:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800295a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002966:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	695b      	ldr	r3, [r3, #20]
 800296c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002972:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	69db      	ldr	r3, [r3, #28]
 8002978:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	4313      	orrs	r3, r2
 800297e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	0018      	movs	r0, r3
 800298c:	f000 f9c4 	bl	8002d18 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2221      	movs	r2, #33	; 0x21
 800299a:	2101      	movs	r1, #1
 800299c:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2220      	movs	r2, #32
 80029a2:	2100      	movs	r1, #0
 80029a4:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}  
 80029a8:	0018      	movs	r0, r3
 80029aa:	46bd      	mov	sp, r7
 80029ac:	b004      	add	sp, #16
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	ffffc00f 	.word	0xffffc00f

080029b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
 80029c0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80029c2:	2317      	movs	r3, #23
 80029c4:	18fb      	adds	r3, r7, r3
 80029c6:	2200      	movs	r2, #0
 80029c8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2220      	movs	r2, #32
 80029ce:	5c9b      	ldrb	r3, [r3, r2]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d101      	bne.n	80029d8 <HAL_DMA_Start_IT+0x24>
 80029d4:	2302      	movs	r3, #2
 80029d6:	e04f      	b.n	8002a78 <HAL_DMA_Start_IT+0xc4>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2220      	movs	r2, #32
 80029dc:	2101      	movs	r1, #1
 80029de:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2221      	movs	r2, #33	; 0x21
 80029e4:	5c9b      	ldrb	r3, [r3, r2]
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d13a      	bne.n	8002a62 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2221      	movs	r2, #33	; 0x21
 80029f0:	2102      	movs	r1, #2
 80029f2:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2101      	movs	r1, #1
 8002a06:	438a      	bics	r2, r1
 8002a08:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	68b9      	ldr	r1, [r7, #8]
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f000 f954 	bl	8002cbe <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d008      	beq.n	8002a30 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	210e      	movs	r1, #14
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	e00f      	b.n	8002a50 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	210a      	movs	r1, #10
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2104      	movs	r1, #4
 8002a4c:	438a      	bics	r2, r1
 8002a4e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	601a      	str	r2, [r3, #0]
 8002a60:	e007      	b.n	8002a72 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2220      	movs	r2, #32
 8002a66:	2100      	movs	r1, #0
 8002a68:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002a6a:	2317      	movs	r3, #23
 8002a6c:	18fb      	adds	r3, r7, r3
 8002a6e:	2202      	movs	r2, #2
 8002a70:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8002a72:	2317      	movs	r3, #23
 8002a74:	18fb      	adds	r3, r7, r3
 8002a76:	781b      	ldrb	r3, [r3, #0]
} 
 8002a78:	0018      	movs	r0, r3
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	b006      	add	sp, #24
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2221      	movs	r2, #33	; 0x21
 8002a8c:	5c9b      	ldrb	r3, [r3, r2]
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d008      	beq.n	8002aa6 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2204      	movs	r2, #4
 8002a98:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2220      	movs	r2, #32
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e020      	b.n	8002ae8 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	210e      	movs	r1, #14
 8002ab2:	438a      	bics	r2, r1
 8002ab4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	438a      	bics	r2, r1
 8002ac4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ace:	2101      	movs	r1, #1
 8002ad0:	4091      	lsls	r1, r2
 8002ad2:	000a      	movs	r2, r1
 8002ad4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2221      	movs	r2, #33	; 0x21
 8002ada:	2101      	movs	r1, #1
 8002adc:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2220      	movs	r2, #32
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	0018      	movs	r0, r3
 8002aea:	46bd      	mov	sp, r7
 8002aec:	b002      	add	sp, #8
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002af8:	210f      	movs	r1, #15
 8002afa:	187b      	adds	r3, r7, r1
 8002afc:	2200      	movs	r2, #0
 8002afe:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2221      	movs	r2, #33	; 0x21
 8002b04:	5c9b      	ldrb	r3, [r3, r2]
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d006      	beq.n	8002b1a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2204      	movs	r2, #4
 8002b10:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002b12:	187b      	adds	r3, r7, r1
 8002b14:	2201      	movs	r2, #1
 8002b16:	701a      	strb	r2, [r3, #0]
 8002b18:	e028      	b.n	8002b6c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	210e      	movs	r1, #14
 8002b26:	438a      	bics	r2, r1
 8002b28:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2101      	movs	r1, #1
 8002b36:	438a      	bics	r2, r1
 8002b38:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b42:	2101      	movs	r1, #1
 8002b44:	4091      	lsls	r1, r2
 8002b46:	000a      	movs	r2, r1
 8002b48:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2221      	movs	r2, #33	; 0x21
 8002b4e:	2101      	movs	r1, #1
 8002b50:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2220      	movs	r2, #32
 8002b56:	2100      	movs	r1, #0
 8002b58:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d004      	beq.n	8002b6c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	0010      	movs	r0, r2
 8002b6a:	4798      	blx	r3
    } 
  }
  return status;
 8002b6c:	230f      	movs	r3, #15
 8002b6e:	18fb      	adds	r3, r7, r3
 8002b70:	781b      	ldrb	r3, [r3, #0]
}
 8002b72:	0018      	movs	r0, r3
 8002b74:	46bd      	mov	sp, r7
 8002b76:	b004      	add	sp, #16
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b084      	sub	sp, #16
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	2204      	movs	r2, #4
 8002b98:	409a      	lsls	r2, r3
 8002b9a:	0013      	movs	r3, r2
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	d024      	beq.n	8002bec <HAL_DMA_IRQHandler+0x72>
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	2204      	movs	r2, #4
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	d020      	beq.n	8002bec <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	d107      	bne.n	8002bc6 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2104      	movs	r1, #4
 8002bc2:	438a      	bics	r2, r1
 8002bc4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bce:	2104      	movs	r1, #4
 8002bd0:	4091      	lsls	r1, r2
 8002bd2:	000a      	movs	r2, r1
 8002bd4:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d100      	bne.n	8002be0 <HAL_DMA_IRQHandler+0x66>
 8002bde:	e06a      	b.n	8002cb6 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	0010      	movs	r0, r2
 8002be8:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002bea:	e064      	b.n	8002cb6 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	2202      	movs	r2, #2
 8002bf2:	409a      	lsls	r2, r3
 8002bf4:	0013      	movs	r3, r2
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	d02b      	beq.n	8002c54 <HAL_DMA_IRQHandler+0xda>
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	2202      	movs	r2, #2
 8002c00:	4013      	ands	r3, r2
 8002c02:	d027      	beq.n	8002c54 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	d10b      	bne.n	8002c28 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	210a      	movs	r1, #10
 8002c1c:	438a      	bics	r2, r1
 8002c1e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2221      	movs	r2, #33	; 0x21
 8002c24:	2101      	movs	r1, #1
 8002c26:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c30:	2102      	movs	r1, #2
 8002c32:	4091      	lsls	r1, r2
 8002c34:	000a      	movs	r2, r1
 8002c36:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d036      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	0010      	movs	r0, r2
 8002c50:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002c52:	e030      	b.n	8002cb6 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c58:	2208      	movs	r2, #8
 8002c5a:	409a      	lsls	r2, r3
 8002c5c:	0013      	movs	r3, r2
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	4013      	ands	r3, r2
 8002c62:	d028      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x13c>
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	2208      	movs	r2, #8
 8002c68:	4013      	ands	r3, r2
 8002c6a:	d024      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	210e      	movs	r1, #14
 8002c78:	438a      	bics	r2, r1
 8002c7a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c84:	2101      	movs	r1, #1
 8002c86:	4091      	lsls	r1, r2
 8002c88:	000a      	movs	r2, r1
 8002c8a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2221      	movs	r2, #33	; 0x21
 8002c96:	2101      	movs	r1, #1
 8002c98:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	2100      	movs	r1, #0
 8002ca0:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d005      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	0010      	movs	r0, r2
 8002cb2:	4798      	blx	r3
    }
   }
}  
 8002cb4:	e7ff      	b.n	8002cb6 <HAL_DMA_IRQHandler+0x13c>
 8002cb6:	46c0      	nop			; (mov r8, r8)
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	b004      	add	sp, #16
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b084      	sub	sp, #16
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	60f8      	str	r0, [r7, #12]
 8002cc6:	60b9      	str	r1, [r7, #8]
 8002cc8:	607a      	str	r2, [r7, #4]
 8002cca:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	4091      	lsls	r1, r2
 8002cd8:	000a      	movs	r2, r1
 8002cda:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	2b10      	cmp	r3, #16
 8002cea:	d108      	bne.n	8002cfe <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68ba      	ldr	r2, [r7, #8]
 8002cfa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002cfc:	e007      	b.n	8002d0e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68ba      	ldr	r2, [r7, #8]
 8002d04:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	60da      	str	r2, [r3, #12]
}
 8002d0e:	46c0      	nop			; (mov r8, r8)
 8002d10:	46bd      	mov	sp, r7
 8002d12:	b004      	add	sp, #16
 8002d14:	bd80      	pop	{r7, pc}
	...

08002d18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a08      	ldr	r2, [pc, #32]	; (8002d48 <DMA_CalcBaseAndBitshift+0x30>)
 8002d26:	4694      	mov	ip, r2
 8002d28:	4463      	add	r3, ip
 8002d2a:	2114      	movs	r1, #20
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	f7fd f9f3 	bl	8000118 <__udivsi3>
 8002d32:	0003      	movs	r3, r0
 8002d34:	009a      	lsls	r2, r3, #2
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a03      	ldr	r2, [pc, #12]	; (8002d4c <DMA_CalcBaseAndBitshift+0x34>)
 8002d3e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002d40:	46c0      	nop			; (mov r8, r8)
 8002d42:	46bd      	mov	sp, r7
 8002d44:	b002      	add	sp, #8
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	bffdfff8 	.word	0xbffdfff8
 8002d4c:	40020000 	.word	0x40020000

08002d50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d5e:	e14f      	b.n	8003000 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2101      	movs	r1, #1
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	4091      	lsls	r1, r2
 8002d6a:	000a      	movs	r2, r1
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d100      	bne.n	8002d78 <HAL_GPIO_Init+0x28>
 8002d76:	e140      	b.n	8002ffa <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	2203      	movs	r2, #3
 8002d7e:	4013      	ands	r3, r2
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d005      	beq.n	8002d90 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2203      	movs	r2, #3
 8002d8a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d130      	bne.n	8002df2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	2203      	movs	r2, #3
 8002d9c:	409a      	lsls	r2, r3
 8002d9e:	0013      	movs	r3, r2
 8002da0:	43da      	mvns	r2, r3
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	4013      	ands	r3, r2
 8002da6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	68da      	ldr	r2, [r3, #12]
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	409a      	lsls	r2, r3
 8002db2:	0013      	movs	r3, r2
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	409a      	lsls	r2, r3
 8002dcc:	0013      	movs	r3, r2
 8002dce:	43da      	mvns	r2, r3
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	091b      	lsrs	r3, r3, #4
 8002ddc:	2201      	movs	r2, #1
 8002dde:	401a      	ands	r2, r3
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	409a      	lsls	r2, r3
 8002de4:	0013      	movs	r3, r2
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	2203      	movs	r2, #3
 8002df8:	4013      	ands	r3, r2
 8002dfa:	2b03      	cmp	r3, #3
 8002dfc:	d017      	beq.n	8002e2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	2203      	movs	r2, #3
 8002e0a:	409a      	lsls	r2, r3
 8002e0c:	0013      	movs	r3, r2
 8002e0e:	43da      	mvns	r2, r3
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	4013      	ands	r3, r2
 8002e14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	409a      	lsls	r2, r3
 8002e20:	0013      	movs	r3, r2
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	2203      	movs	r2, #3
 8002e34:	4013      	ands	r3, r2
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d123      	bne.n	8002e82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	08da      	lsrs	r2, r3, #3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	3208      	adds	r2, #8
 8002e42:	0092      	lsls	r2, r2, #2
 8002e44:	58d3      	ldr	r3, [r2, r3]
 8002e46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	2207      	movs	r2, #7
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	220f      	movs	r2, #15
 8002e52:	409a      	lsls	r2, r3
 8002e54:	0013      	movs	r3, r2
 8002e56:	43da      	mvns	r2, r3
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	691a      	ldr	r2, [r3, #16]
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	2107      	movs	r1, #7
 8002e66:	400b      	ands	r3, r1
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	409a      	lsls	r2, r3
 8002e6c:	0013      	movs	r3, r2
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	08da      	lsrs	r2, r3, #3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3208      	adds	r2, #8
 8002e7c:	0092      	lsls	r2, r2, #2
 8002e7e:	6939      	ldr	r1, [r7, #16]
 8002e80:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	2203      	movs	r2, #3
 8002e8e:	409a      	lsls	r2, r3
 8002e90:	0013      	movs	r3, r2
 8002e92:	43da      	mvns	r2, r3
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	4013      	ands	r3, r2
 8002e98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2203      	movs	r2, #3
 8002ea0:	401a      	ands	r2, r3
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	409a      	lsls	r2, r3
 8002ea8:	0013      	movs	r3, r2
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	23c0      	movs	r3, #192	; 0xc0
 8002ebc:	029b      	lsls	r3, r3, #10
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	d100      	bne.n	8002ec4 <HAL_GPIO_Init+0x174>
 8002ec2:	e09a      	b.n	8002ffa <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ec4:	4b54      	ldr	r3, [pc, #336]	; (8003018 <HAL_GPIO_Init+0x2c8>)
 8002ec6:	699a      	ldr	r2, [r3, #24]
 8002ec8:	4b53      	ldr	r3, [pc, #332]	; (8003018 <HAL_GPIO_Init+0x2c8>)
 8002eca:	2101      	movs	r1, #1
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	619a      	str	r2, [r3, #24]
 8002ed0:	4b51      	ldr	r3, [pc, #324]	; (8003018 <HAL_GPIO_Init+0x2c8>)
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	60bb      	str	r3, [r7, #8]
 8002eda:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002edc:	4a4f      	ldr	r2, [pc, #316]	; (800301c <HAL_GPIO_Init+0x2cc>)
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	089b      	lsrs	r3, r3, #2
 8002ee2:	3302      	adds	r3, #2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	589b      	ldr	r3, [r3, r2]
 8002ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	2203      	movs	r2, #3
 8002eee:	4013      	ands	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	220f      	movs	r2, #15
 8002ef4:	409a      	lsls	r2, r3
 8002ef6:	0013      	movs	r3, r2
 8002ef8:	43da      	mvns	r2, r3
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	4013      	ands	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	2390      	movs	r3, #144	; 0x90
 8002f04:	05db      	lsls	r3, r3, #23
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d013      	beq.n	8002f32 <HAL_GPIO_Init+0x1e2>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a44      	ldr	r2, [pc, #272]	; (8003020 <HAL_GPIO_Init+0x2d0>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d00d      	beq.n	8002f2e <HAL_GPIO_Init+0x1de>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a43      	ldr	r2, [pc, #268]	; (8003024 <HAL_GPIO_Init+0x2d4>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d007      	beq.n	8002f2a <HAL_GPIO_Init+0x1da>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a42      	ldr	r2, [pc, #264]	; (8003028 <HAL_GPIO_Init+0x2d8>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d101      	bne.n	8002f26 <HAL_GPIO_Init+0x1d6>
 8002f22:	2303      	movs	r3, #3
 8002f24:	e006      	b.n	8002f34 <HAL_GPIO_Init+0x1e4>
 8002f26:	2305      	movs	r3, #5
 8002f28:	e004      	b.n	8002f34 <HAL_GPIO_Init+0x1e4>
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	e002      	b.n	8002f34 <HAL_GPIO_Init+0x1e4>
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e000      	b.n	8002f34 <HAL_GPIO_Init+0x1e4>
 8002f32:	2300      	movs	r3, #0
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	2103      	movs	r1, #3
 8002f38:	400a      	ands	r2, r1
 8002f3a:	0092      	lsls	r2, r2, #2
 8002f3c:	4093      	lsls	r3, r2
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f44:	4935      	ldr	r1, [pc, #212]	; (800301c <HAL_GPIO_Init+0x2cc>)
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	089b      	lsrs	r3, r3, #2
 8002f4a:	3302      	adds	r3, #2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f52:	4b36      	ldr	r3, [pc, #216]	; (800302c <HAL_GPIO_Init+0x2dc>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	43da      	mvns	r2, r3
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685a      	ldr	r2, [r3, #4]
 8002f66:	2380      	movs	r3, #128	; 0x80
 8002f68:	025b      	lsls	r3, r3, #9
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	d003      	beq.n	8002f76 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002f76:	4b2d      	ldr	r3, [pc, #180]	; (800302c <HAL_GPIO_Init+0x2dc>)
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002f7c:	4b2b      	ldr	r3, [pc, #172]	; (800302c <HAL_GPIO_Init+0x2dc>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	43da      	mvns	r2, r3
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	2380      	movs	r3, #128	; 0x80
 8002f92:	029b      	lsls	r3, r3, #10
 8002f94:	4013      	ands	r3, r2
 8002f96:	d003      	beq.n	8002fa0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002fa0:	4b22      	ldr	r3, [pc, #136]	; (800302c <HAL_GPIO_Init+0x2dc>)
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fa6:	4b21      	ldr	r3, [pc, #132]	; (800302c <HAL_GPIO_Init+0x2dc>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	43da      	mvns	r2, r3
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	2380      	movs	r3, #128	; 0x80
 8002fbc:	035b      	lsls	r3, r3, #13
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	d003      	beq.n	8002fca <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002fca:	4b18      	ldr	r3, [pc, #96]	; (800302c <HAL_GPIO_Init+0x2dc>)
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002fd0:	4b16      	ldr	r3, [pc, #88]	; (800302c <HAL_GPIO_Init+0x2dc>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	43da      	mvns	r2, r3
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	2380      	movs	r3, #128	; 0x80
 8002fe6:	039b      	lsls	r3, r3, #14
 8002fe8:	4013      	ands	r3, r2
 8002fea:	d003      	beq.n	8002ff4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002ff4:	4b0d      	ldr	r3, [pc, #52]	; (800302c <HAL_GPIO_Init+0x2dc>)
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	40da      	lsrs	r2, r3
 8003008:	1e13      	subs	r3, r2, #0
 800300a:	d000      	beq.n	800300e <HAL_GPIO_Init+0x2be>
 800300c:	e6a8      	b.n	8002d60 <HAL_GPIO_Init+0x10>
  } 
}
 800300e:	46c0      	nop			; (mov r8, r8)
 8003010:	46c0      	nop			; (mov r8, r8)
 8003012:	46bd      	mov	sp, r7
 8003014:	b006      	add	sp, #24
 8003016:	bd80      	pop	{r7, pc}
 8003018:	40021000 	.word	0x40021000
 800301c:	40010000 	.word	0x40010000
 8003020:	48000400 	.word	0x48000400
 8003024:	48000800 	.word	0x48000800
 8003028:	48000c00 	.word	0x48000c00
 800302c:	40010400 	.word	0x40010400

08003030 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	000a      	movs	r2, r1
 800303a:	1cbb      	adds	r3, r7, #2
 800303c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	1cba      	adds	r2, r7, #2
 8003044:	8812      	ldrh	r2, [r2, #0]
 8003046:	4013      	ands	r3, r2
 8003048:	d004      	beq.n	8003054 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800304a:	230f      	movs	r3, #15
 800304c:	18fb      	adds	r3, r7, r3
 800304e:	2201      	movs	r2, #1
 8003050:	701a      	strb	r2, [r3, #0]
 8003052:	e003      	b.n	800305c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003054:	230f      	movs	r3, #15
 8003056:	18fb      	adds	r3, r7, r3
 8003058:	2200      	movs	r2, #0
 800305a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800305c:	230f      	movs	r3, #15
 800305e:	18fb      	adds	r3, r7, r3
 8003060:	781b      	ldrb	r3, [r3, #0]
  }
 8003062:	0018      	movs	r0, r3
 8003064:	46bd      	mov	sp, r7
 8003066:	b004      	add	sp, #16
 8003068:	bd80      	pop	{r7, pc}

0800306a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b082      	sub	sp, #8
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
 8003072:	0008      	movs	r0, r1
 8003074:	0011      	movs	r1, r2
 8003076:	1cbb      	adds	r3, r7, #2
 8003078:	1c02      	adds	r2, r0, #0
 800307a:	801a      	strh	r2, [r3, #0]
 800307c:	1c7b      	adds	r3, r7, #1
 800307e:	1c0a      	adds	r2, r1, #0
 8003080:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003082:	1c7b      	adds	r3, r7, #1
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d004      	beq.n	8003094 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800308a:	1cbb      	adds	r3, r7, #2
 800308c:	881a      	ldrh	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003092:	e003      	b.n	800309c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003094:	1cbb      	adds	r3, r7, #2
 8003096:	881a      	ldrh	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800309c:	46c0      	nop			; (mov r8, r8)
 800309e:	46bd      	mov	sp, r7
 80030a0:	b002      	add	sp, #8
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e082      	b.n	80031bc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2241      	movs	r2, #65	; 0x41
 80030ba:	5c9b      	ldrb	r3, [r3, r2]
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d107      	bne.n	80030d2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2240      	movs	r2, #64	; 0x40
 80030c6:	2100      	movs	r1, #0
 80030c8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	0018      	movs	r0, r3
 80030ce:	f7fe fbf5 	bl	80018bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2241      	movs	r2, #65	; 0x41
 80030d6:	2124      	movs	r1, #36	; 0x24
 80030d8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2101      	movs	r1, #1
 80030e6:	438a      	bics	r2, r1
 80030e8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685a      	ldr	r2, [r3, #4]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4934      	ldr	r1, [pc, #208]	; (80031c4 <HAL_I2C_Init+0x120>)
 80030f4:	400a      	ands	r2, r1
 80030f6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689a      	ldr	r2, [r3, #8]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4931      	ldr	r1, [pc, #196]	; (80031c8 <HAL_I2C_Init+0x124>)
 8003104:	400a      	ands	r2, r1
 8003106:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d108      	bne.n	8003122 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2180      	movs	r1, #128	; 0x80
 800311a:	0209      	lsls	r1, r1, #8
 800311c:	430a      	orrs	r2, r1
 800311e:	609a      	str	r2, [r3, #8]
 8003120:	e007      	b.n	8003132 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689a      	ldr	r2, [r3, #8]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2184      	movs	r1, #132	; 0x84
 800312c:	0209      	lsls	r1, r1, #8
 800312e:	430a      	orrs	r2, r1
 8003130:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	2b02      	cmp	r3, #2
 8003138:	d104      	bne.n	8003144 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2280      	movs	r2, #128	; 0x80
 8003140:	0112      	lsls	r2, r2, #4
 8003142:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	491f      	ldr	r1, [pc, #124]	; (80031cc <HAL_I2C_Init+0x128>)
 8003150:	430a      	orrs	r2, r1
 8003152:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68da      	ldr	r2, [r3, #12]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	491a      	ldr	r1, [pc, #104]	; (80031c8 <HAL_I2C_Init+0x124>)
 8003160:	400a      	ands	r2, r1
 8003162:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	691a      	ldr	r2, [r3, #16]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	431a      	orrs	r2, r3
 800316e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69d9      	ldr	r1, [r3, #28]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a1a      	ldr	r2, [r3, #32]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2101      	movs	r1, #1
 800319a:	430a      	orrs	r2, r1
 800319c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2241      	movs	r2, #65	; 0x41
 80031a8:	2120      	movs	r1, #32
 80031aa:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2242      	movs	r2, #66	; 0x42
 80031b6:	2100      	movs	r1, #0
 80031b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	0018      	movs	r0, r3
 80031be:	46bd      	mov	sp, r7
 80031c0:	b002      	add	sp, #8
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	f0ffffff 	.word	0xf0ffffff
 80031c8:	ffff7fff 	.word	0xffff7fff
 80031cc:	02008000 	.word	0x02008000

080031d0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80031d0:	b590      	push	{r4, r7, lr}
 80031d2:	b089      	sub	sp, #36	; 0x24
 80031d4:	af02      	add	r7, sp, #8
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	0008      	movs	r0, r1
 80031da:	607a      	str	r2, [r7, #4]
 80031dc:	0019      	movs	r1, r3
 80031de:	230a      	movs	r3, #10
 80031e0:	18fb      	adds	r3, r7, r3
 80031e2:	1c02      	adds	r2, r0, #0
 80031e4:	801a      	strh	r2, [r3, #0]
 80031e6:	2308      	movs	r3, #8
 80031e8:	18fb      	adds	r3, r7, r3
 80031ea:	1c0a      	adds	r2, r1, #0
 80031ec:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2241      	movs	r2, #65	; 0x41
 80031f2:	5c9b      	ldrb	r3, [r3, r2]
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b20      	cmp	r3, #32
 80031f8:	d000      	beq.n	80031fc <HAL_I2C_Master_Transmit+0x2c>
 80031fa:	e0e7      	b.n	80033cc <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2240      	movs	r2, #64	; 0x40
 8003200:	5c9b      	ldrb	r3, [r3, r2]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d101      	bne.n	800320a <HAL_I2C_Master_Transmit+0x3a>
 8003206:	2302      	movs	r3, #2
 8003208:	e0e1      	b.n	80033ce <HAL_I2C_Master_Transmit+0x1fe>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2240      	movs	r2, #64	; 0x40
 800320e:	2101      	movs	r1, #1
 8003210:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003212:	f7fe fe15 	bl	8001e40 <HAL_GetTick>
 8003216:	0003      	movs	r3, r0
 8003218:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800321a:	2380      	movs	r3, #128	; 0x80
 800321c:	0219      	lsls	r1, r3, #8
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	2319      	movs	r3, #25
 8003226:	2201      	movs	r2, #1
 8003228:	f000 fa04 	bl	8003634 <I2C_WaitOnFlagUntilTimeout>
 800322c:	1e03      	subs	r3, r0, #0
 800322e:	d001      	beq.n	8003234 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e0cc      	b.n	80033ce <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2241      	movs	r2, #65	; 0x41
 8003238:	2121      	movs	r1, #33	; 0x21
 800323a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2242      	movs	r2, #66	; 0x42
 8003240:	2110      	movs	r1, #16
 8003242:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2208      	movs	r2, #8
 8003254:	18ba      	adds	r2, r7, r2
 8003256:	8812      	ldrh	r2, [r2, #0]
 8003258:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003264:	b29b      	uxth	r3, r3
 8003266:	2bff      	cmp	r3, #255	; 0xff
 8003268:	d911      	bls.n	800328e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	22ff      	movs	r2, #255	; 0xff
 800326e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003274:	b2da      	uxtb	r2, r3
 8003276:	2380      	movs	r3, #128	; 0x80
 8003278:	045c      	lsls	r4, r3, #17
 800327a:	230a      	movs	r3, #10
 800327c:	18fb      	adds	r3, r7, r3
 800327e:	8819      	ldrh	r1, [r3, #0]
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	4b55      	ldr	r3, [pc, #340]	; (80033d8 <HAL_I2C_Master_Transmit+0x208>)
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	0023      	movs	r3, r4
 8003288:	f000 fb74 	bl	8003974 <I2C_TransferConfig>
 800328c:	e075      	b.n	800337a <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003292:	b29a      	uxth	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800329c:	b2da      	uxtb	r2, r3
 800329e:	2380      	movs	r3, #128	; 0x80
 80032a0:	049c      	lsls	r4, r3, #18
 80032a2:	230a      	movs	r3, #10
 80032a4:	18fb      	adds	r3, r7, r3
 80032a6:	8819      	ldrh	r1, [r3, #0]
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	4b4b      	ldr	r3, [pc, #300]	; (80033d8 <HAL_I2C_Master_Transmit+0x208>)
 80032ac:	9300      	str	r3, [sp, #0]
 80032ae:	0023      	movs	r3, r4
 80032b0:	f000 fb60 	bl	8003974 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80032b4:	e061      	b.n	800337a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	0018      	movs	r0, r3
 80032be:	f000 f9f8 	bl	80036b2 <I2C_WaitOnTXISFlagUntilTimeout>
 80032c2:	1e03      	subs	r3, r0, #0
 80032c4:	d001      	beq.n	80032ca <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e081      	b.n	80033ce <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ce:	781a      	ldrb	r2, [r3, #0]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032da:	1c5a      	adds	r2, r3, #1
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	3b01      	subs	r3, #1
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f2:	3b01      	subs	r3, #1
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fe:	b29b      	uxth	r3, r3
 8003300:	2b00      	cmp	r3, #0
 8003302:	d03a      	beq.n	800337a <HAL_I2C_Master_Transmit+0x1aa>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003308:	2b00      	cmp	r3, #0
 800330a:	d136      	bne.n	800337a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800330c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	0013      	movs	r3, r2
 8003316:	2200      	movs	r2, #0
 8003318:	2180      	movs	r1, #128	; 0x80
 800331a:	f000 f98b 	bl	8003634 <I2C_WaitOnFlagUntilTimeout>
 800331e:	1e03      	subs	r3, r0, #0
 8003320:	d001      	beq.n	8003326 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e053      	b.n	80033ce <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800332a:	b29b      	uxth	r3, r3
 800332c:	2bff      	cmp	r3, #255	; 0xff
 800332e:	d911      	bls.n	8003354 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	22ff      	movs	r2, #255	; 0xff
 8003334:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800333a:	b2da      	uxtb	r2, r3
 800333c:	2380      	movs	r3, #128	; 0x80
 800333e:	045c      	lsls	r4, r3, #17
 8003340:	230a      	movs	r3, #10
 8003342:	18fb      	adds	r3, r7, r3
 8003344:	8819      	ldrh	r1, [r3, #0]
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	2300      	movs	r3, #0
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	0023      	movs	r3, r4
 800334e:	f000 fb11 	bl	8003974 <I2C_TransferConfig>
 8003352:	e012      	b.n	800337a <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003358:	b29a      	uxth	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003362:	b2da      	uxtb	r2, r3
 8003364:	2380      	movs	r3, #128	; 0x80
 8003366:	049c      	lsls	r4, r3, #18
 8003368:	230a      	movs	r3, #10
 800336a:	18fb      	adds	r3, r7, r3
 800336c:	8819      	ldrh	r1, [r3, #0]
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	2300      	movs	r3, #0
 8003372:	9300      	str	r3, [sp, #0]
 8003374:	0023      	movs	r3, r4
 8003376:	f000 fafd 	bl	8003974 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800337e:	b29b      	uxth	r3, r3
 8003380:	2b00      	cmp	r3, #0
 8003382:	d198      	bne.n	80032b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	0018      	movs	r0, r3
 800338c:	f000 f9d0 	bl	8003730 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003390:	1e03      	subs	r3, r0, #0
 8003392:	d001      	beq.n	8003398 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e01a      	b.n	80033ce <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2220      	movs	r2, #32
 800339e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	490c      	ldr	r1, [pc, #48]	; (80033dc <HAL_I2C_Master_Transmit+0x20c>)
 80033ac:	400a      	ands	r2, r1
 80033ae:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2241      	movs	r2, #65	; 0x41
 80033b4:	2120      	movs	r1, #32
 80033b6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2242      	movs	r2, #66	; 0x42
 80033bc:	2100      	movs	r1, #0
 80033be:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2240      	movs	r2, #64	; 0x40
 80033c4:	2100      	movs	r1, #0
 80033c6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80033c8:	2300      	movs	r3, #0
 80033ca:	e000      	b.n	80033ce <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80033cc:	2302      	movs	r3, #2
  }
}
 80033ce:	0018      	movs	r0, r3
 80033d0:	46bd      	mov	sp, r7
 80033d2:	b007      	add	sp, #28
 80033d4:	bd90      	pop	{r4, r7, pc}
 80033d6:	46c0      	nop			; (mov r8, r8)
 80033d8:	80002000 	.word	0x80002000
 80033dc:	fe00e800 	.word	0xfe00e800

080033e0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80033e0:	b590      	push	{r4, r7, lr}
 80033e2:	b089      	sub	sp, #36	; 0x24
 80033e4:	af02      	add	r7, sp, #8
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	0008      	movs	r0, r1
 80033ea:	607a      	str	r2, [r7, #4]
 80033ec:	0019      	movs	r1, r3
 80033ee:	230a      	movs	r3, #10
 80033f0:	18fb      	adds	r3, r7, r3
 80033f2:	1c02      	adds	r2, r0, #0
 80033f4:	801a      	strh	r2, [r3, #0]
 80033f6:	2308      	movs	r3, #8
 80033f8:	18fb      	adds	r3, r7, r3
 80033fa:	1c0a      	adds	r2, r1, #0
 80033fc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2241      	movs	r2, #65	; 0x41
 8003402:	5c9b      	ldrb	r3, [r3, r2]
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b20      	cmp	r3, #32
 8003408:	d000      	beq.n	800340c <HAL_I2C_Master_Receive+0x2c>
 800340a:	e0e8      	b.n	80035de <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2240      	movs	r2, #64	; 0x40
 8003410:	5c9b      	ldrb	r3, [r3, r2]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d101      	bne.n	800341a <HAL_I2C_Master_Receive+0x3a>
 8003416:	2302      	movs	r3, #2
 8003418:	e0e2      	b.n	80035e0 <HAL_I2C_Master_Receive+0x200>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2240      	movs	r2, #64	; 0x40
 800341e:	2101      	movs	r1, #1
 8003420:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003422:	f7fe fd0d 	bl	8001e40 <HAL_GetTick>
 8003426:	0003      	movs	r3, r0
 8003428:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800342a:	2380      	movs	r3, #128	; 0x80
 800342c:	0219      	lsls	r1, r3, #8
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	2319      	movs	r3, #25
 8003436:	2201      	movs	r2, #1
 8003438:	f000 f8fc 	bl	8003634 <I2C_WaitOnFlagUntilTimeout>
 800343c:	1e03      	subs	r3, r0, #0
 800343e:	d001      	beq.n	8003444 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e0cd      	b.n	80035e0 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2241      	movs	r2, #65	; 0x41
 8003448:	2122      	movs	r1, #34	; 0x22
 800344a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2242      	movs	r2, #66	; 0x42
 8003450:	2110      	movs	r1, #16
 8003452:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2208      	movs	r2, #8
 8003464:	18ba      	adds	r2, r7, r2
 8003466:	8812      	ldrh	r2, [r2, #0]
 8003468:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003474:	b29b      	uxth	r3, r3
 8003476:	2bff      	cmp	r3, #255	; 0xff
 8003478:	d911      	bls.n	800349e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	22ff      	movs	r2, #255	; 0xff
 800347e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003484:	b2da      	uxtb	r2, r3
 8003486:	2380      	movs	r3, #128	; 0x80
 8003488:	045c      	lsls	r4, r3, #17
 800348a:	230a      	movs	r3, #10
 800348c:	18fb      	adds	r3, r7, r3
 800348e:	8819      	ldrh	r1, [r3, #0]
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	4b55      	ldr	r3, [pc, #340]	; (80035e8 <HAL_I2C_Master_Receive+0x208>)
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	0023      	movs	r3, r4
 8003498:	f000 fa6c 	bl	8003974 <I2C_TransferConfig>
 800349c:	e076      	b.n	800358c <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ac:	b2da      	uxtb	r2, r3
 80034ae:	2380      	movs	r3, #128	; 0x80
 80034b0:	049c      	lsls	r4, r3, #18
 80034b2:	230a      	movs	r3, #10
 80034b4:	18fb      	adds	r3, r7, r3
 80034b6:	8819      	ldrh	r1, [r3, #0]
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	4b4b      	ldr	r3, [pc, #300]	; (80035e8 <HAL_I2C_Master_Receive+0x208>)
 80034bc:	9300      	str	r3, [sp, #0]
 80034be:	0023      	movs	r3, r4
 80034c0:	f000 fa58 	bl	8003974 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80034c4:	e062      	b.n	800358c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	0018      	movs	r0, r3
 80034ce:	f000 f96b 	bl	80037a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80034d2:	1e03      	subs	r3, r0, #0
 80034d4:	d001      	beq.n	80034da <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e082      	b.n	80035e0 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e4:	b2d2      	uxtb	r2, r2
 80034e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ec:	1c5a      	adds	r2, r3, #1
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f6:	3b01      	subs	r3, #1
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003502:	b29b      	uxth	r3, r3
 8003504:	3b01      	subs	r3, #1
 8003506:	b29a      	uxth	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003510:	b29b      	uxth	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d03a      	beq.n	800358c <HAL_I2C_Master_Receive+0x1ac>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800351a:	2b00      	cmp	r3, #0
 800351c:	d136      	bne.n	800358c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800351e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	0013      	movs	r3, r2
 8003528:	2200      	movs	r2, #0
 800352a:	2180      	movs	r1, #128	; 0x80
 800352c:	f000 f882 	bl	8003634 <I2C_WaitOnFlagUntilTimeout>
 8003530:	1e03      	subs	r3, r0, #0
 8003532:	d001      	beq.n	8003538 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e053      	b.n	80035e0 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353c:	b29b      	uxth	r3, r3
 800353e:	2bff      	cmp	r3, #255	; 0xff
 8003540:	d911      	bls.n	8003566 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	22ff      	movs	r2, #255	; 0xff
 8003546:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800354c:	b2da      	uxtb	r2, r3
 800354e:	2380      	movs	r3, #128	; 0x80
 8003550:	045c      	lsls	r4, r3, #17
 8003552:	230a      	movs	r3, #10
 8003554:	18fb      	adds	r3, r7, r3
 8003556:	8819      	ldrh	r1, [r3, #0]
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	2300      	movs	r3, #0
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	0023      	movs	r3, r4
 8003560:	f000 fa08 	bl	8003974 <I2C_TransferConfig>
 8003564:	e012      	b.n	800358c <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800356a:	b29a      	uxth	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003574:	b2da      	uxtb	r2, r3
 8003576:	2380      	movs	r3, #128	; 0x80
 8003578:	049c      	lsls	r4, r3, #18
 800357a:	230a      	movs	r3, #10
 800357c:	18fb      	adds	r3, r7, r3
 800357e:	8819      	ldrh	r1, [r3, #0]
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	2300      	movs	r3, #0
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	0023      	movs	r3, r4
 8003588:	f000 f9f4 	bl	8003974 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003590:	b29b      	uxth	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d197      	bne.n	80034c6 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	0018      	movs	r0, r3
 800359e:	f000 f8c7 	bl	8003730 <I2C_WaitOnSTOPFlagUntilTimeout>
 80035a2:	1e03      	subs	r3, r0, #0
 80035a4:	d001      	beq.n	80035aa <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e01a      	b.n	80035e0 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2220      	movs	r2, #32
 80035b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	490b      	ldr	r1, [pc, #44]	; (80035ec <HAL_I2C_Master_Receive+0x20c>)
 80035be:	400a      	ands	r2, r1
 80035c0:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2241      	movs	r2, #65	; 0x41
 80035c6:	2120      	movs	r1, #32
 80035c8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2242      	movs	r2, #66	; 0x42
 80035ce:	2100      	movs	r1, #0
 80035d0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2240      	movs	r2, #64	; 0x40
 80035d6:	2100      	movs	r1, #0
 80035d8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80035da:	2300      	movs	r3, #0
 80035dc:	e000      	b.n	80035e0 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80035de:	2302      	movs	r3, #2
  }
}
 80035e0:	0018      	movs	r0, r3
 80035e2:	46bd      	mov	sp, r7
 80035e4:	b007      	add	sp, #28
 80035e6:	bd90      	pop	{r4, r7, pc}
 80035e8:	80002400 	.word	0x80002400
 80035ec:	fe00e800 	.word	0xfe00e800

080035f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	2202      	movs	r2, #2
 8003600:	4013      	ands	r3, r2
 8003602:	2b02      	cmp	r3, #2
 8003604:	d103      	bne.n	800360e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2200      	movs	r2, #0
 800360c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	2201      	movs	r2, #1
 8003616:	4013      	ands	r3, r2
 8003618:	2b01      	cmp	r3, #1
 800361a:	d007      	beq.n	800362c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	699a      	ldr	r2, [r3, #24]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2101      	movs	r1, #1
 8003628:	430a      	orrs	r2, r1
 800362a:	619a      	str	r2, [r3, #24]
  }
}
 800362c:	46c0      	nop			; (mov r8, r8)
 800362e:	46bd      	mov	sp, r7
 8003630:	b002      	add	sp, #8
 8003632:	bd80      	pop	{r7, pc}

08003634 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	603b      	str	r3, [r7, #0]
 8003640:	1dfb      	adds	r3, r7, #7
 8003642:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003644:	e021      	b.n	800368a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	3301      	adds	r3, #1
 800364a:	d01e      	beq.n	800368a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800364c:	f7fe fbf8 	bl	8001e40 <HAL_GetTick>
 8003650:	0002      	movs	r2, r0
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	429a      	cmp	r2, r3
 800365a:	d302      	bcc.n	8003662 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d113      	bne.n	800368a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003666:	2220      	movs	r2, #32
 8003668:	431a      	orrs	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2241      	movs	r2, #65	; 0x41
 8003672:	2120      	movs	r1, #32
 8003674:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2242      	movs	r2, #66	; 0x42
 800367a:	2100      	movs	r1, #0
 800367c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2240      	movs	r2, #64	; 0x40
 8003682:	2100      	movs	r1, #0
 8003684:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e00f      	b.n	80036aa <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	68ba      	ldr	r2, [r7, #8]
 8003692:	4013      	ands	r3, r2
 8003694:	68ba      	ldr	r2, [r7, #8]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	425a      	negs	r2, r3
 800369a:	4153      	adcs	r3, r2
 800369c:	b2db      	uxtb	r3, r3
 800369e:	001a      	movs	r2, r3
 80036a0:	1dfb      	adds	r3, r7, #7
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d0ce      	beq.n	8003646 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	0018      	movs	r0, r3
 80036ac:	46bd      	mov	sp, r7
 80036ae:	b004      	add	sp, #16
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b084      	sub	sp, #16
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	60f8      	str	r0, [r7, #12]
 80036ba:	60b9      	str	r1, [r7, #8]
 80036bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036be:	e02b      	b.n	8003718 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	68b9      	ldr	r1, [r7, #8]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	0018      	movs	r0, r3
 80036c8:	f000 f8da 	bl	8003880 <I2C_IsAcknowledgeFailed>
 80036cc:	1e03      	subs	r3, r0, #0
 80036ce:	d001      	beq.n	80036d4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e029      	b.n	8003728 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	3301      	adds	r3, #1
 80036d8:	d01e      	beq.n	8003718 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036da:	f7fe fbb1 	bl	8001e40 <HAL_GetTick>
 80036de:	0002      	movs	r2, r0
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d302      	bcc.n	80036f0 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d113      	bne.n	8003718 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f4:	2220      	movs	r2, #32
 80036f6:	431a      	orrs	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2241      	movs	r2, #65	; 0x41
 8003700:	2120      	movs	r1, #32
 8003702:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2242      	movs	r2, #66	; 0x42
 8003708:	2100      	movs	r1, #0
 800370a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2240      	movs	r2, #64	; 0x40
 8003710:	2100      	movs	r1, #0
 8003712:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e007      	b.n	8003728 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	2202      	movs	r2, #2
 8003720:	4013      	ands	r3, r2
 8003722:	2b02      	cmp	r3, #2
 8003724:	d1cc      	bne.n	80036c0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	0018      	movs	r0, r3
 800372a:	46bd      	mov	sp, r7
 800372c:	b004      	add	sp, #16
 800372e:	bd80      	pop	{r7, pc}

08003730 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800373c:	e028      	b.n	8003790 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	68b9      	ldr	r1, [r7, #8]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	0018      	movs	r0, r3
 8003746:	f000 f89b 	bl	8003880 <I2C_IsAcknowledgeFailed>
 800374a:	1e03      	subs	r3, r0, #0
 800374c:	d001      	beq.n	8003752 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e026      	b.n	80037a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003752:	f7fe fb75 	bl	8001e40 <HAL_GetTick>
 8003756:	0002      	movs	r2, r0
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	68ba      	ldr	r2, [r7, #8]
 800375e:	429a      	cmp	r2, r3
 8003760:	d302      	bcc.n	8003768 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d113      	bne.n	8003790 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376c:	2220      	movs	r2, #32
 800376e:	431a      	orrs	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2241      	movs	r2, #65	; 0x41
 8003778:	2120      	movs	r1, #32
 800377a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2242      	movs	r2, #66	; 0x42
 8003780:	2100      	movs	r1, #0
 8003782:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2240      	movs	r2, #64	; 0x40
 8003788:	2100      	movs	r1, #0
 800378a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e007      	b.n	80037a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	2220      	movs	r2, #32
 8003798:	4013      	ands	r3, r2
 800379a:	2b20      	cmp	r3, #32
 800379c:	d1cf      	bne.n	800373e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	0018      	movs	r0, r3
 80037a2:	46bd      	mov	sp, r7
 80037a4:	b004      	add	sp, #16
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037b4:	e055      	b.n	8003862 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	68b9      	ldr	r1, [r7, #8]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	0018      	movs	r0, r3
 80037be:	f000 f85f 	bl	8003880 <I2C_IsAcknowledgeFailed>
 80037c2:	1e03      	subs	r3, r0, #0
 80037c4:	d001      	beq.n	80037ca <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e053      	b.n	8003872 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	2220      	movs	r2, #32
 80037d2:	4013      	ands	r3, r2
 80037d4:	2b20      	cmp	r3, #32
 80037d6:	d129      	bne.n	800382c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	2204      	movs	r2, #4
 80037e0:	4013      	ands	r3, r2
 80037e2:	2b04      	cmp	r3, #4
 80037e4:	d105      	bne.n	80037f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80037ee:	2300      	movs	r3, #0
 80037f0:	e03f      	b.n	8003872 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2220      	movs	r2, #32
 80037f8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	491d      	ldr	r1, [pc, #116]	; (800387c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003806:	400a      	ands	r2, r1
 8003808:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2241      	movs	r2, #65	; 0x41
 8003814:	2120      	movs	r1, #32
 8003816:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2242      	movs	r2, #66	; 0x42
 800381c:	2100      	movs	r1, #0
 800381e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2240      	movs	r2, #64	; 0x40
 8003824:	2100      	movs	r1, #0
 8003826:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e022      	b.n	8003872 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800382c:	f7fe fb08 	bl	8001e40 <HAL_GetTick>
 8003830:	0002      	movs	r2, r0
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	429a      	cmp	r2, r3
 800383a:	d302      	bcc.n	8003842 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10f      	bne.n	8003862 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003846:	2220      	movs	r2, #32
 8003848:	431a      	orrs	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2241      	movs	r2, #65	; 0x41
 8003852:	2120      	movs	r1, #32
 8003854:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2240      	movs	r2, #64	; 0x40
 800385a:	2100      	movs	r1, #0
 800385c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e007      	b.n	8003872 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	2204      	movs	r2, #4
 800386a:	4013      	ands	r3, r2
 800386c:	2b04      	cmp	r3, #4
 800386e:	d1a2      	bne.n	80037b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	0018      	movs	r0, r3
 8003874:	46bd      	mov	sp, r7
 8003876:	b004      	add	sp, #16
 8003878:	bd80      	pop	{r7, pc}
 800387a:	46c0      	nop			; (mov r8, r8)
 800387c:	fe00e800 	.word	0xfe00e800

08003880 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	2210      	movs	r2, #16
 8003894:	4013      	ands	r3, r2
 8003896:	2b10      	cmp	r3, #16
 8003898:	d164      	bne.n	8003964 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	685a      	ldr	r2, [r3, #4]
 80038a0:	2380      	movs	r3, #128	; 0x80
 80038a2:	049b      	lsls	r3, r3, #18
 80038a4:	401a      	ands	r2, r3
 80038a6:	2380      	movs	r3, #128	; 0x80
 80038a8:	049b      	lsls	r3, r3, #18
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d02b      	beq.n	8003906 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2180      	movs	r1, #128	; 0x80
 80038ba:	01c9      	lsls	r1, r1, #7
 80038bc:	430a      	orrs	r2, r1
 80038be:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038c0:	e021      	b.n	8003906 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	3301      	adds	r3, #1
 80038c6:	d01e      	beq.n	8003906 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038c8:	f7fe faba 	bl	8001e40 <HAL_GetTick>
 80038cc:	0002      	movs	r2, r0
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d302      	bcc.n	80038de <I2C_IsAcknowledgeFailed+0x5e>
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d113      	bne.n	8003906 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e2:	2220      	movs	r2, #32
 80038e4:	431a      	orrs	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2241      	movs	r2, #65	; 0x41
 80038ee:	2120      	movs	r1, #32
 80038f0:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2242      	movs	r2, #66	; 0x42
 80038f6:	2100      	movs	r1, #0
 80038f8:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2240      	movs	r2, #64	; 0x40
 80038fe:	2100      	movs	r1, #0
 8003900:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e02f      	b.n	8003966 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	2220      	movs	r2, #32
 800390e:	4013      	ands	r3, r2
 8003910:	2b20      	cmp	r3, #32
 8003912:	d1d6      	bne.n	80038c2 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2210      	movs	r2, #16
 800391a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2220      	movs	r2, #32
 8003922:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	0018      	movs	r0, r3
 8003928:	f7ff fe62 	bl	80035f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685a      	ldr	r2, [r3, #4]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	490e      	ldr	r1, [pc, #56]	; (8003970 <I2C_IsAcknowledgeFailed+0xf0>)
 8003938:	400a      	ands	r2, r1
 800393a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003940:	2204      	movs	r2, #4
 8003942:	431a      	orrs	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2241      	movs	r2, #65	; 0x41
 800394c:	2120      	movs	r1, #32
 800394e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2242      	movs	r2, #66	; 0x42
 8003954:	2100      	movs	r1, #0
 8003956:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2240      	movs	r2, #64	; 0x40
 800395c:	2100      	movs	r1, #0
 800395e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e000      	b.n	8003966 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	0018      	movs	r0, r3
 8003968:	46bd      	mov	sp, r7
 800396a:	b004      	add	sp, #16
 800396c:	bd80      	pop	{r7, pc}
 800396e:	46c0      	nop			; (mov r8, r8)
 8003970:	fe00e800 	.word	0xfe00e800

08003974 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003974:	b590      	push	{r4, r7, lr}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	0008      	movs	r0, r1
 800397e:	0011      	movs	r1, r2
 8003980:	607b      	str	r3, [r7, #4]
 8003982:	240a      	movs	r4, #10
 8003984:	193b      	adds	r3, r7, r4
 8003986:	1c02      	adds	r2, r0, #0
 8003988:	801a      	strh	r2, [r3, #0]
 800398a:	2009      	movs	r0, #9
 800398c:	183b      	adds	r3, r7, r0
 800398e:	1c0a      	adds	r2, r1, #0
 8003990:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	6a3a      	ldr	r2, [r7, #32]
 800399a:	0d51      	lsrs	r1, r2, #21
 800399c:	2280      	movs	r2, #128	; 0x80
 800399e:	00d2      	lsls	r2, r2, #3
 80039a0:	400a      	ands	r2, r1
 80039a2:	490e      	ldr	r1, [pc, #56]	; (80039dc <I2C_TransferConfig+0x68>)
 80039a4:	430a      	orrs	r2, r1
 80039a6:	43d2      	mvns	r2, r2
 80039a8:	401a      	ands	r2, r3
 80039aa:	0011      	movs	r1, r2
 80039ac:	193b      	adds	r3, r7, r4
 80039ae:	881b      	ldrh	r3, [r3, #0]
 80039b0:	059b      	lsls	r3, r3, #22
 80039b2:	0d9a      	lsrs	r2, r3, #22
 80039b4:	183b      	adds	r3, r7, r0
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	0418      	lsls	r0, r3, #16
 80039ba:	23ff      	movs	r3, #255	; 0xff
 80039bc:	041b      	lsls	r3, r3, #16
 80039be:	4003      	ands	r3, r0
 80039c0:	431a      	orrs	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	431a      	orrs	r2, r3
 80039c6:	6a3b      	ldr	r3, [r7, #32]
 80039c8:	431a      	orrs	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80039d2:	46c0      	nop			; (mov r8, r8)
 80039d4:	46bd      	mov	sp, r7
 80039d6:	b005      	add	sp, #20
 80039d8:	bd90      	pop	{r4, r7, pc}
 80039da:	46c0      	nop			; (mov r8, r8)
 80039dc:	03ff63ff 	.word	0x03ff63ff

080039e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2241      	movs	r2, #65	; 0x41
 80039ee:	5c9b      	ldrb	r3, [r3, r2]
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b20      	cmp	r3, #32
 80039f4:	d138      	bne.n	8003a68 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2240      	movs	r2, #64	; 0x40
 80039fa:	5c9b      	ldrb	r3, [r3, r2]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d101      	bne.n	8003a04 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a00:	2302      	movs	r3, #2
 8003a02:	e032      	b.n	8003a6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2240      	movs	r2, #64	; 0x40
 8003a08:	2101      	movs	r1, #1
 8003a0a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2241      	movs	r2, #65	; 0x41
 8003a10:	2124      	movs	r1, #36	; 0x24
 8003a12:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2101      	movs	r1, #1
 8003a20:	438a      	bics	r2, r1
 8003a22:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4911      	ldr	r1, [pc, #68]	; (8003a74 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003a30:	400a      	ands	r2, r1
 8003a32:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	6819      	ldr	r1, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	683a      	ldr	r2, [r7, #0]
 8003a40:	430a      	orrs	r2, r1
 8003a42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2101      	movs	r1, #1
 8003a50:	430a      	orrs	r2, r1
 8003a52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2241      	movs	r2, #65	; 0x41
 8003a58:	2120      	movs	r1, #32
 8003a5a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2240      	movs	r2, #64	; 0x40
 8003a60:	2100      	movs	r1, #0
 8003a62:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003a64:	2300      	movs	r3, #0
 8003a66:	e000      	b.n	8003a6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a68:	2302      	movs	r3, #2
  }
}
 8003a6a:	0018      	movs	r0, r3
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	b002      	add	sp, #8
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	46c0      	nop			; (mov r8, r8)
 8003a74:	ffffefff 	.word	0xffffefff

08003a78 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2241      	movs	r2, #65	; 0x41
 8003a86:	5c9b      	ldrb	r3, [r3, r2]
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b20      	cmp	r3, #32
 8003a8c:	d139      	bne.n	8003b02 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2240      	movs	r2, #64	; 0x40
 8003a92:	5c9b      	ldrb	r3, [r3, r2]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d101      	bne.n	8003a9c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a98:	2302      	movs	r3, #2
 8003a9a:	e033      	b.n	8003b04 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2240      	movs	r2, #64	; 0x40
 8003aa0:	2101      	movs	r1, #1
 8003aa2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2241      	movs	r2, #65	; 0x41
 8003aa8:	2124      	movs	r1, #36	; 0x24
 8003aaa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	438a      	bics	r2, r1
 8003aba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	4a11      	ldr	r2, [pc, #68]	; (8003b0c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003ac8:	4013      	ands	r3, r2
 8003aca:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	021b      	lsls	r3, r3, #8
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2101      	movs	r1, #1
 8003aea:	430a      	orrs	r2, r1
 8003aec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2241      	movs	r2, #65	; 0x41
 8003af2:	2120      	movs	r1, #32
 8003af4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2240      	movs	r2, #64	; 0x40
 8003afa:	2100      	movs	r1, #0
 8003afc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003afe:	2300      	movs	r3, #0
 8003b00:	e000      	b.n	8003b04 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b02:	2302      	movs	r3, #2
  }
}
 8003b04:	0018      	movs	r0, r3
 8003b06:	46bd      	mov	sp, r7
 8003b08:	b004      	add	sp, #16
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	fffff0ff 	.word	0xfffff0ff

08003b10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b088      	sub	sp, #32
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e301      	b.n	8004126 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2201      	movs	r2, #1
 8003b28:	4013      	ands	r3, r2
 8003b2a:	d100      	bne.n	8003b2e <HAL_RCC_OscConfig+0x1e>
 8003b2c:	e08d      	b.n	8003c4a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003b2e:	4bc3      	ldr	r3, [pc, #780]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	220c      	movs	r2, #12
 8003b34:	4013      	ands	r3, r2
 8003b36:	2b04      	cmp	r3, #4
 8003b38:	d00e      	beq.n	8003b58 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b3a:	4bc0      	ldr	r3, [pc, #768]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	220c      	movs	r2, #12
 8003b40:	4013      	ands	r3, r2
 8003b42:	2b08      	cmp	r3, #8
 8003b44:	d116      	bne.n	8003b74 <HAL_RCC_OscConfig+0x64>
 8003b46:	4bbd      	ldr	r3, [pc, #756]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	2380      	movs	r3, #128	; 0x80
 8003b4c:	025b      	lsls	r3, r3, #9
 8003b4e:	401a      	ands	r2, r3
 8003b50:	2380      	movs	r3, #128	; 0x80
 8003b52:	025b      	lsls	r3, r3, #9
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d10d      	bne.n	8003b74 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b58:	4bb8      	ldr	r3, [pc, #736]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	2380      	movs	r3, #128	; 0x80
 8003b5e:	029b      	lsls	r3, r3, #10
 8003b60:	4013      	ands	r3, r2
 8003b62:	d100      	bne.n	8003b66 <HAL_RCC_OscConfig+0x56>
 8003b64:	e070      	b.n	8003c48 <HAL_RCC_OscConfig+0x138>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d000      	beq.n	8003b70 <HAL_RCC_OscConfig+0x60>
 8003b6e:	e06b      	b.n	8003c48 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e2d8      	b.n	8004126 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d107      	bne.n	8003b8c <HAL_RCC_OscConfig+0x7c>
 8003b7c:	4baf      	ldr	r3, [pc, #700]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	4bae      	ldr	r3, [pc, #696]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003b82:	2180      	movs	r1, #128	; 0x80
 8003b84:	0249      	lsls	r1, r1, #9
 8003b86:	430a      	orrs	r2, r1
 8003b88:	601a      	str	r2, [r3, #0]
 8003b8a:	e02f      	b.n	8003bec <HAL_RCC_OscConfig+0xdc>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10c      	bne.n	8003bae <HAL_RCC_OscConfig+0x9e>
 8003b94:	4ba9      	ldr	r3, [pc, #676]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	4ba8      	ldr	r3, [pc, #672]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003b9a:	49a9      	ldr	r1, [pc, #676]	; (8003e40 <HAL_RCC_OscConfig+0x330>)
 8003b9c:	400a      	ands	r2, r1
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	4ba6      	ldr	r3, [pc, #664]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	4ba5      	ldr	r3, [pc, #660]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003ba6:	49a7      	ldr	r1, [pc, #668]	; (8003e44 <HAL_RCC_OscConfig+0x334>)
 8003ba8:	400a      	ands	r2, r1
 8003baa:	601a      	str	r2, [r3, #0]
 8003bac:	e01e      	b.n	8003bec <HAL_RCC_OscConfig+0xdc>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	2b05      	cmp	r3, #5
 8003bb4:	d10e      	bne.n	8003bd4 <HAL_RCC_OscConfig+0xc4>
 8003bb6:	4ba1      	ldr	r3, [pc, #644]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	4ba0      	ldr	r3, [pc, #640]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003bbc:	2180      	movs	r1, #128	; 0x80
 8003bbe:	02c9      	lsls	r1, r1, #11
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	4b9d      	ldr	r3, [pc, #628]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	4b9c      	ldr	r3, [pc, #624]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003bca:	2180      	movs	r1, #128	; 0x80
 8003bcc:	0249      	lsls	r1, r1, #9
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	601a      	str	r2, [r3, #0]
 8003bd2:	e00b      	b.n	8003bec <HAL_RCC_OscConfig+0xdc>
 8003bd4:	4b99      	ldr	r3, [pc, #612]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	4b98      	ldr	r3, [pc, #608]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003bda:	4999      	ldr	r1, [pc, #612]	; (8003e40 <HAL_RCC_OscConfig+0x330>)
 8003bdc:	400a      	ands	r2, r1
 8003bde:	601a      	str	r2, [r3, #0]
 8003be0:	4b96      	ldr	r3, [pc, #600]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	4b95      	ldr	r3, [pc, #596]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003be6:	4997      	ldr	r1, [pc, #604]	; (8003e44 <HAL_RCC_OscConfig+0x334>)
 8003be8:	400a      	ands	r2, r1
 8003bea:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d014      	beq.n	8003c1e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf4:	f7fe f924 	bl	8001e40 <HAL_GetTick>
 8003bf8:	0003      	movs	r3, r0
 8003bfa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bfc:	e008      	b.n	8003c10 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bfe:	f7fe f91f 	bl	8001e40 <HAL_GetTick>
 8003c02:	0002      	movs	r2, r0
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	2b64      	cmp	r3, #100	; 0x64
 8003c0a:	d901      	bls.n	8003c10 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e28a      	b.n	8004126 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c10:	4b8a      	ldr	r3, [pc, #552]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	2380      	movs	r3, #128	; 0x80
 8003c16:	029b      	lsls	r3, r3, #10
 8003c18:	4013      	ands	r3, r2
 8003c1a:	d0f0      	beq.n	8003bfe <HAL_RCC_OscConfig+0xee>
 8003c1c:	e015      	b.n	8003c4a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c1e:	f7fe f90f 	bl	8001e40 <HAL_GetTick>
 8003c22:	0003      	movs	r3, r0
 8003c24:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c28:	f7fe f90a 	bl	8001e40 <HAL_GetTick>
 8003c2c:	0002      	movs	r2, r0
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b64      	cmp	r3, #100	; 0x64
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e275      	b.n	8004126 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c3a:	4b80      	ldr	r3, [pc, #512]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	2380      	movs	r3, #128	; 0x80
 8003c40:	029b      	lsls	r3, r3, #10
 8003c42:	4013      	ands	r3, r2
 8003c44:	d1f0      	bne.n	8003c28 <HAL_RCC_OscConfig+0x118>
 8003c46:	e000      	b.n	8003c4a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c48:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2202      	movs	r2, #2
 8003c50:	4013      	ands	r3, r2
 8003c52:	d100      	bne.n	8003c56 <HAL_RCC_OscConfig+0x146>
 8003c54:	e069      	b.n	8003d2a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003c56:	4b79      	ldr	r3, [pc, #484]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	220c      	movs	r2, #12
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	d00b      	beq.n	8003c78 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003c60:	4b76      	ldr	r3, [pc, #472]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	220c      	movs	r2, #12
 8003c66:	4013      	ands	r3, r2
 8003c68:	2b08      	cmp	r3, #8
 8003c6a:	d11c      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x196>
 8003c6c:	4b73      	ldr	r3, [pc, #460]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	2380      	movs	r3, #128	; 0x80
 8003c72:	025b      	lsls	r3, r3, #9
 8003c74:	4013      	ands	r3, r2
 8003c76:	d116      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c78:	4b70      	ldr	r3, [pc, #448]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	4013      	ands	r3, r2
 8003c80:	d005      	beq.n	8003c8e <HAL_RCC_OscConfig+0x17e>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d001      	beq.n	8003c8e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e24b      	b.n	8004126 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c8e:	4b6b      	ldr	r3, [pc, #428]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	22f8      	movs	r2, #248	; 0xf8
 8003c94:	4393      	bics	r3, r2
 8003c96:	0019      	movs	r1, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	00da      	lsls	r2, r3, #3
 8003c9e:	4b67      	ldr	r3, [pc, #412]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ca4:	e041      	b.n	8003d2a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d024      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cae:	4b63      	ldr	r3, [pc, #396]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	4b62      	ldr	r3, [pc, #392]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003cb4:	2101      	movs	r1, #1
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cba:	f7fe f8c1 	bl	8001e40 <HAL_GetTick>
 8003cbe:	0003      	movs	r3, r0
 8003cc0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cc4:	f7fe f8bc 	bl	8001e40 <HAL_GetTick>
 8003cc8:	0002      	movs	r2, r0
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e227      	b.n	8004126 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cd6:	4b59      	ldr	r3, [pc, #356]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2202      	movs	r2, #2
 8003cdc:	4013      	ands	r3, r2
 8003cde:	d0f1      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ce0:	4b56      	ldr	r3, [pc, #344]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	22f8      	movs	r2, #248	; 0xf8
 8003ce6:	4393      	bics	r3, r2
 8003ce8:	0019      	movs	r1, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	00da      	lsls	r2, r3, #3
 8003cf0:	4b52      	ldr	r3, [pc, #328]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	601a      	str	r2, [r3, #0]
 8003cf6:	e018      	b.n	8003d2a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cf8:	4b50      	ldr	r3, [pc, #320]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	4b4f      	ldr	r3, [pc, #316]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003cfe:	2101      	movs	r1, #1
 8003d00:	438a      	bics	r2, r1
 8003d02:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d04:	f7fe f89c 	bl	8001e40 <HAL_GetTick>
 8003d08:	0003      	movs	r3, r0
 8003d0a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d0c:	e008      	b.n	8003d20 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d0e:	f7fe f897 	bl	8001e40 <HAL_GetTick>
 8003d12:	0002      	movs	r2, r0
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d901      	bls.n	8003d20 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e202      	b.n	8004126 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d20:	4b46      	ldr	r3, [pc, #280]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2202      	movs	r2, #2
 8003d26:	4013      	ands	r3, r2
 8003d28:	d1f1      	bne.n	8003d0e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2208      	movs	r2, #8
 8003d30:	4013      	ands	r3, r2
 8003d32:	d036      	beq.n	8003da2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	69db      	ldr	r3, [r3, #28]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d019      	beq.n	8003d70 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d3c:	4b3f      	ldr	r3, [pc, #252]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003d3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d40:	4b3e      	ldr	r3, [pc, #248]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003d42:	2101      	movs	r1, #1
 8003d44:	430a      	orrs	r2, r1
 8003d46:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d48:	f7fe f87a 	bl	8001e40 <HAL_GetTick>
 8003d4c:	0003      	movs	r3, r0
 8003d4e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d50:	e008      	b.n	8003d64 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d52:	f7fe f875 	bl	8001e40 <HAL_GetTick>
 8003d56:	0002      	movs	r2, r0
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d901      	bls.n	8003d64 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e1e0      	b.n	8004126 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d64:	4b35      	ldr	r3, [pc, #212]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d68:	2202      	movs	r2, #2
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	d0f1      	beq.n	8003d52 <HAL_RCC_OscConfig+0x242>
 8003d6e:	e018      	b.n	8003da2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d70:	4b32      	ldr	r3, [pc, #200]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003d72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d74:	4b31      	ldr	r3, [pc, #196]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003d76:	2101      	movs	r1, #1
 8003d78:	438a      	bics	r2, r1
 8003d7a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d7c:	f7fe f860 	bl	8001e40 <HAL_GetTick>
 8003d80:	0003      	movs	r3, r0
 8003d82:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d84:	e008      	b.n	8003d98 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d86:	f7fe f85b 	bl	8001e40 <HAL_GetTick>
 8003d8a:	0002      	movs	r2, r0
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d901      	bls.n	8003d98 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e1c6      	b.n	8004126 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d98:	4b28      	ldr	r3, [pc, #160]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9c:	2202      	movs	r2, #2
 8003d9e:	4013      	ands	r3, r2
 8003da0:	d1f1      	bne.n	8003d86 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2204      	movs	r2, #4
 8003da8:	4013      	ands	r3, r2
 8003daa:	d100      	bne.n	8003dae <HAL_RCC_OscConfig+0x29e>
 8003dac:	e0b4      	b.n	8003f18 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dae:	201f      	movs	r0, #31
 8003db0:	183b      	adds	r3, r7, r0
 8003db2:	2200      	movs	r2, #0
 8003db4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003db6:	4b21      	ldr	r3, [pc, #132]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003db8:	69da      	ldr	r2, [r3, #28]
 8003dba:	2380      	movs	r3, #128	; 0x80
 8003dbc:	055b      	lsls	r3, r3, #21
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	d110      	bne.n	8003de4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dc2:	4b1e      	ldr	r3, [pc, #120]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003dc4:	69da      	ldr	r2, [r3, #28]
 8003dc6:	4b1d      	ldr	r3, [pc, #116]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003dc8:	2180      	movs	r1, #128	; 0x80
 8003dca:	0549      	lsls	r1, r1, #21
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	61da      	str	r2, [r3, #28]
 8003dd0:	4b1a      	ldr	r3, [pc, #104]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003dd2:	69da      	ldr	r2, [r3, #28]
 8003dd4:	2380      	movs	r3, #128	; 0x80
 8003dd6:	055b      	lsls	r3, r3, #21
 8003dd8:	4013      	ands	r3, r2
 8003dda:	60fb      	str	r3, [r7, #12]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003dde:	183b      	adds	r3, r7, r0
 8003de0:	2201      	movs	r2, #1
 8003de2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de4:	4b18      	ldr	r3, [pc, #96]	; (8003e48 <HAL_RCC_OscConfig+0x338>)
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	2380      	movs	r3, #128	; 0x80
 8003dea:	005b      	lsls	r3, r3, #1
 8003dec:	4013      	ands	r3, r2
 8003dee:	d11a      	bne.n	8003e26 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003df0:	4b15      	ldr	r3, [pc, #84]	; (8003e48 <HAL_RCC_OscConfig+0x338>)
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	4b14      	ldr	r3, [pc, #80]	; (8003e48 <HAL_RCC_OscConfig+0x338>)
 8003df6:	2180      	movs	r1, #128	; 0x80
 8003df8:	0049      	lsls	r1, r1, #1
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dfe:	f7fe f81f 	bl	8001e40 <HAL_GetTick>
 8003e02:	0003      	movs	r3, r0
 8003e04:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e08:	f7fe f81a 	bl	8001e40 <HAL_GetTick>
 8003e0c:	0002      	movs	r2, r0
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b64      	cmp	r3, #100	; 0x64
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e185      	b.n	8004126 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e1a:	4b0b      	ldr	r3, [pc, #44]	; (8003e48 <HAL_RCC_OscConfig+0x338>)
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	2380      	movs	r3, #128	; 0x80
 8003e20:	005b      	lsls	r3, r3, #1
 8003e22:	4013      	ands	r3, r2
 8003e24:	d0f0      	beq.n	8003e08 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d10e      	bne.n	8003e4c <HAL_RCC_OscConfig+0x33c>
 8003e2e:	4b03      	ldr	r3, [pc, #12]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003e30:	6a1a      	ldr	r2, [r3, #32]
 8003e32:	4b02      	ldr	r3, [pc, #8]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003e34:	2101      	movs	r1, #1
 8003e36:	430a      	orrs	r2, r1
 8003e38:	621a      	str	r2, [r3, #32]
 8003e3a:	e035      	b.n	8003ea8 <HAL_RCC_OscConfig+0x398>
 8003e3c:	40021000 	.word	0x40021000
 8003e40:	fffeffff 	.word	0xfffeffff
 8003e44:	fffbffff 	.word	0xfffbffff
 8003e48:	40007000 	.word	0x40007000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10c      	bne.n	8003e6e <HAL_RCC_OscConfig+0x35e>
 8003e54:	4bb6      	ldr	r3, [pc, #728]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003e56:	6a1a      	ldr	r2, [r3, #32]
 8003e58:	4bb5      	ldr	r3, [pc, #724]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	438a      	bics	r2, r1
 8003e5e:	621a      	str	r2, [r3, #32]
 8003e60:	4bb3      	ldr	r3, [pc, #716]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003e62:	6a1a      	ldr	r2, [r3, #32]
 8003e64:	4bb2      	ldr	r3, [pc, #712]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003e66:	2104      	movs	r1, #4
 8003e68:	438a      	bics	r2, r1
 8003e6a:	621a      	str	r2, [r3, #32]
 8003e6c:	e01c      	b.n	8003ea8 <HAL_RCC_OscConfig+0x398>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	2b05      	cmp	r3, #5
 8003e74:	d10c      	bne.n	8003e90 <HAL_RCC_OscConfig+0x380>
 8003e76:	4bae      	ldr	r3, [pc, #696]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003e78:	6a1a      	ldr	r2, [r3, #32]
 8003e7a:	4bad      	ldr	r3, [pc, #692]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003e7c:	2104      	movs	r1, #4
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	621a      	str	r2, [r3, #32]
 8003e82:	4bab      	ldr	r3, [pc, #684]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003e84:	6a1a      	ldr	r2, [r3, #32]
 8003e86:	4baa      	ldr	r3, [pc, #680]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003e88:	2101      	movs	r1, #1
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	621a      	str	r2, [r3, #32]
 8003e8e:	e00b      	b.n	8003ea8 <HAL_RCC_OscConfig+0x398>
 8003e90:	4ba7      	ldr	r3, [pc, #668]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003e92:	6a1a      	ldr	r2, [r3, #32]
 8003e94:	4ba6      	ldr	r3, [pc, #664]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003e96:	2101      	movs	r1, #1
 8003e98:	438a      	bics	r2, r1
 8003e9a:	621a      	str	r2, [r3, #32]
 8003e9c:	4ba4      	ldr	r3, [pc, #656]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003e9e:	6a1a      	ldr	r2, [r3, #32]
 8003ea0:	4ba3      	ldr	r3, [pc, #652]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003ea2:	2104      	movs	r1, #4
 8003ea4:	438a      	bics	r2, r1
 8003ea6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d014      	beq.n	8003eda <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eb0:	f7fd ffc6 	bl	8001e40 <HAL_GetTick>
 8003eb4:	0003      	movs	r3, r0
 8003eb6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eb8:	e009      	b.n	8003ece <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eba:	f7fd ffc1 	bl	8001e40 <HAL_GetTick>
 8003ebe:	0002      	movs	r2, r0
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	4a9b      	ldr	r2, [pc, #620]	; (8004134 <HAL_RCC_OscConfig+0x624>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e12b      	b.n	8004126 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ece:	4b98      	ldr	r3, [pc, #608]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	d0f0      	beq.n	8003eba <HAL_RCC_OscConfig+0x3aa>
 8003ed8:	e013      	b.n	8003f02 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eda:	f7fd ffb1 	bl	8001e40 <HAL_GetTick>
 8003ede:	0003      	movs	r3, r0
 8003ee0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ee2:	e009      	b.n	8003ef8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ee4:	f7fd ffac 	bl	8001e40 <HAL_GetTick>
 8003ee8:	0002      	movs	r2, r0
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	4a91      	ldr	r2, [pc, #580]	; (8004134 <HAL_RCC_OscConfig+0x624>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e116      	b.n	8004126 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ef8:	4b8d      	ldr	r3, [pc, #564]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	2202      	movs	r2, #2
 8003efe:	4013      	ands	r3, r2
 8003f00:	d1f0      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f02:	231f      	movs	r3, #31
 8003f04:	18fb      	adds	r3, r7, r3
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d105      	bne.n	8003f18 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f0c:	4b88      	ldr	r3, [pc, #544]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003f0e:	69da      	ldr	r2, [r3, #28]
 8003f10:	4b87      	ldr	r3, [pc, #540]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003f12:	4989      	ldr	r1, [pc, #548]	; (8004138 <HAL_RCC_OscConfig+0x628>)
 8003f14:	400a      	ands	r2, r1
 8003f16:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2210      	movs	r2, #16
 8003f1e:	4013      	ands	r3, r2
 8003f20:	d063      	beq.n	8003fea <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d12a      	bne.n	8003f80 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003f2a:	4b81      	ldr	r3, [pc, #516]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003f2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f2e:	4b80      	ldr	r3, [pc, #512]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003f30:	2104      	movs	r1, #4
 8003f32:	430a      	orrs	r2, r1
 8003f34:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003f36:	4b7e      	ldr	r3, [pc, #504]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003f38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f3a:	4b7d      	ldr	r3, [pc, #500]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003f3c:	2101      	movs	r1, #1
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f42:	f7fd ff7d 	bl	8001e40 <HAL_GetTick>
 8003f46:	0003      	movs	r3, r0
 8003f48:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003f4a:	e008      	b.n	8003f5e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003f4c:	f7fd ff78 	bl	8001e40 <HAL_GetTick>
 8003f50:	0002      	movs	r2, r0
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e0e3      	b.n	8004126 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003f5e:	4b74      	ldr	r3, [pc, #464]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f62:	2202      	movs	r2, #2
 8003f64:	4013      	ands	r3, r2
 8003f66:	d0f1      	beq.n	8003f4c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003f68:	4b71      	ldr	r3, [pc, #452]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f6c:	22f8      	movs	r2, #248	; 0xf8
 8003f6e:	4393      	bics	r3, r2
 8003f70:	0019      	movs	r1, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	00da      	lsls	r2, r3, #3
 8003f78:	4b6d      	ldr	r3, [pc, #436]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	635a      	str	r2, [r3, #52]	; 0x34
 8003f7e:	e034      	b.n	8003fea <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	3305      	adds	r3, #5
 8003f86:	d111      	bne.n	8003fac <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003f88:	4b69      	ldr	r3, [pc, #420]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003f8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f8c:	4b68      	ldr	r3, [pc, #416]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003f8e:	2104      	movs	r1, #4
 8003f90:	438a      	bics	r2, r1
 8003f92:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003f94:	4b66      	ldr	r3, [pc, #408]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f98:	22f8      	movs	r2, #248	; 0xf8
 8003f9a:	4393      	bics	r3, r2
 8003f9c:	0019      	movs	r1, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	00da      	lsls	r2, r3, #3
 8003fa4:	4b62      	ldr	r3, [pc, #392]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	635a      	str	r2, [r3, #52]	; 0x34
 8003faa:	e01e      	b.n	8003fea <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003fac:	4b60      	ldr	r3, [pc, #384]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003fae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fb0:	4b5f      	ldr	r3, [pc, #380]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003fb2:	2104      	movs	r1, #4
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003fb8:	4b5d      	ldr	r3, [pc, #372]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003fba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fbc:	4b5c      	ldr	r3, [pc, #368]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	438a      	bics	r2, r1
 8003fc2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fc4:	f7fd ff3c 	bl	8001e40 <HAL_GetTick>
 8003fc8:	0003      	movs	r3, r0
 8003fca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003fcc:	e008      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003fce:	f7fd ff37 	bl	8001e40 <HAL_GetTick>
 8003fd2:	0002      	movs	r2, r0
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e0a2      	b.n	8004126 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003fe0:	4b53      	ldr	r3, [pc, #332]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fe4:	2202      	movs	r2, #2
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	d1f1      	bne.n	8003fce <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a1b      	ldr	r3, [r3, #32]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d100      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x4e4>
 8003ff2:	e097      	b.n	8004124 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ff4:	4b4e      	ldr	r3, [pc, #312]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	220c      	movs	r2, #12
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	2b08      	cmp	r3, #8
 8003ffe:	d100      	bne.n	8004002 <HAL_RCC_OscConfig+0x4f2>
 8004000:	e06b      	b.n	80040da <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	2b02      	cmp	r3, #2
 8004008:	d14c      	bne.n	80040a4 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800400a:	4b49      	ldr	r3, [pc, #292]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	4b48      	ldr	r3, [pc, #288]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8004010:	494a      	ldr	r1, [pc, #296]	; (800413c <HAL_RCC_OscConfig+0x62c>)
 8004012:	400a      	ands	r2, r1
 8004014:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004016:	f7fd ff13 	bl	8001e40 <HAL_GetTick>
 800401a:	0003      	movs	r3, r0
 800401c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004020:	f7fd ff0e 	bl	8001e40 <HAL_GetTick>
 8004024:	0002      	movs	r2, r0
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e079      	b.n	8004126 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004032:	4b3f      	ldr	r3, [pc, #252]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	2380      	movs	r3, #128	; 0x80
 8004038:	049b      	lsls	r3, r3, #18
 800403a:	4013      	ands	r3, r2
 800403c:	d1f0      	bne.n	8004020 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800403e:	4b3c      	ldr	r3, [pc, #240]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8004040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004042:	220f      	movs	r2, #15
 8004044:	4393      	bics	r3, r2
 8004046:	0019      	movs	r1, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800404c:	4b38      	ldr	r3, [pc, #224]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 800404e:	430a      	orrs	r2, r1
 8004050:	62da      	str	r2, [r3, #44]	; 0x2c
 8004052:	4b37      	ldr	r3, [pc, #220]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	4a3a      	ldr	r2, [pc, #232]	; (8004140 <HAL_RCC_OscConfig+0x630>)
 8004058:	4013      	ands	r3, r2
 800405a:	0019      	movs	r1, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004064:	431a      	orrs	r2, r3
 8004066:	4b32      	ldr	r3, [pc, #200]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8004068:	430a      	orrs	r2, r1
 800406a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800406c:	4b30      	ldr	r3, [pc, #192]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	4b2f      	ldr	r3, [pc, #188]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8004072:	2180      	movs	r1, #128	; 0x80
 8004074:	0449      	lsls	r1, r1, #17
 8004076:	430a      	orrs	r2, r1
 8004078:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800407a:	f7fd fee1 	bl	8001e40 <HAL_GetTick>
 800407e:	0003      	movs	r3, r0
 8004080:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004084:	f7fd fedc 	bl	8001e40 <HAL_GetTick>
 8004088:	0002      	movs	r2, r0
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e047      	b.n	8004126 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004096:	4b26      	ldr	r3, [pc, #152]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	2380      	movs	r3, #128	; 0x80
 800409c:	049b      	lsls	r3, r3, #18
 800409e:	4013      	ands	r3, r2
 80040a0:	d0f0      	beq.n	8004084 <HAL_RCC_OscConfig+0x574>
 80040a2:	e03f      	b.n	8004124 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040a4:	4b22      	ldr	r3, [pc, #136]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	4b21      	ldr	r3, [pc, #132]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 80040aa:	4924      	ldr	r1, [pc, #144]	; (800413c <HAL_RCC_OscConfig+0x62c>)
 80040ac:	400a      	ands	r2, r1
 80040ae:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b0:	f7fd fec6 	bl	8001e40 <HAL_GetTick>
 80040b4:	0003      	movs	r3, r0
 80040b6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040b8:	e008      	b.n	80040cc <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040ba:	f7fd fec1 	bl	8001e40 <HAL_GetTick>
 80040be:	0002      	movs	r2, r0
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d901      	bls.n	80040cc <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e02c      	b.n	8004126 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040cc:	4b18      	ldr	r3, [pc, #96]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	2380      	movs	r3, #128	; 0x80
 80040d2:	049b      	lsls	r3, r3, #18
 80040d4:	4013      	ands	r3, r2
 80040d6:	d1f0      	bne.n	80040ba <HAL_RCC_OscConfig+0x5aa>
 80040d8:	e024      	b.n	8004124 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d101      	bne.n	80040e6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e01f      	b.n	8004126 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80040e6:	4b12      	ldr	r3, [pc, #72]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80040ec:	4b10      	ldr	r3, [pc, #64]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 80040ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	2380      	movs	r3, #128	; 0x80
 80040f6:	025b      	lsls	r3, r3, #9
 80040f8:	401a      	ands	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fe:	429a      	cmp	r2, r3
 8004100:	d10e      	bne.n	8004120 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	220f      	movs	r2, #15
 8004106:	401a      	ands	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800410c:	429a      	cmp	r2, r3
 800410e:	d107      	bne.n	8004120 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	23f0      	movs	r3, #240	; 0xf0
 8004114:	039b      	lsls	r3, r3, #14
 8004116:	401a      	ands	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800411c:	429a      	cmp	r2, r3
 800411e:	d001      	beq.n	8004124 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e000      	b.n	8004126 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	0018      	movs	r0, r3
 8004128:	46bd      	mov	sp, r7
 800412a:	b008      	add	sp, #32
 800412c:	bd80      	pop	{r7, pc}
 800412e:	46c0      	nop			; (mov r8, r8)
 8004130:	40021000 	.word	0x40021000
 8004134:	00001388 	.word	0x00001388
 8004138:	efffffff 	.word	0xefffffff
 800413c:	feffffff 	.word	0xfeffffff
 8004140:	ffc2ffff 	.word	0xffc2ffff

08004144 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d101      	bne.n	8004158 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e0b3      	b.n	80042c0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004158:	4b5b      	ldr	r3, [pc, #364]	; (80042c8 <HAL_RCC_ClockConfig+0x184>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2201      	movs	r2, #1
 800415e:	4013      	ands	r3, r2
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	429a      	cmp	r2, r3
 8004164:	d911      	bls.n	800418a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004166:	4b58      	ldr	r3, [pc, #352]	; (80042c8 <HAL_RCC_ClockConfig+0x184>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2201      	movs	r2, #1
 800416c:	4393      	bics	r3, r2
 800416e:	0019      	movs	r1, r3
 8004170:	4b55      	ldr	r3, [pc, #340]	; (80042c8 <HAL_RCC_ClockConfig+0x184>)
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004178:	4b53      	ldr	r3, [pc, #332]	; (80042c8 <HAL_RCC_ClockConfig+0x184>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2201      	movs	r2, #1
 800417e:	4013      	ands	r3, r2
 8004180:	683a      	ldr	r2, [r7, #0]
 8004182:	429a      	cmp	r2, r3
 8004184:	d001      	beq.n	800418a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e09a      	b.n	80042c0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2202      	movs	r2, #2
 8004190:	4013      	ands	r3, r2
 8004192:	d015      	beq.n	80041c0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2204      	movs	r2, #4
 800419a:	4013      	ands	r3, r2
 800419c:	d006      	beq.n	80041ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800419e:	4b4b      	ldr	r3, [pc, #300]	; (80042cc <HAL_RCC_ClockConfig+0x188>)
 80041a0:	685a      	ldr	r2, [r3, #4]
 80041a2:	4b4a      	ldr	r3, [pc, #296]	; (80042cc <HAL_RCC_ClockConfig+0x188>)
 80041a4:	21e0      	movs	r1, #224	; 0xe0
 80041a6:	00c9      	lsls	r1, r1, #3
 80041a8:	430a      	orrs	r2, r1
 80041aa:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041ac:	4b47      	ldr	r3, [pc, #284]	; (80042cc <HAL_RCC_ClockConfig+0x188>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	22f0      	movs	r2, #240	; 0xf0
 80041b2:	4393      	bics	r3, r2
 80041b4:	0019      	movs	r1, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	689a      	ldr	r2, [r3, #8]
 80041ba:	4b44      	ldr	r3, [pc, #272]	; (80042cc <HAL_RCC_ClockConfig+0x188>)
 80041bc:	430a      	orrs	r2, r1
 80041be:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2201      	movs	r2, #1
 80041c6:	4013      	ands	r3, r2
 80041c8:	d040      	beq.n	800424c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d107      	bne.n	80041e2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041d2:	4b3e      	ldr	r3, [pc, #248]	; (80042cc <HAL_RCC_ClockConfig+0x188>)
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	2380      	movs	r3, #128	; 0x80
 80041d8:	029b      	lsls	r3, r3, #10
 80041da:	4013      	ands	r3, r2
 80041dc:	d114      	bne.n	8004208 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e06e      	b.n	80042c0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d107      	bne.n	80041fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ea:	4b38      	ldr	r3, [pc, #224]	; (80042cc <HAL_RCC_ClockConfig+0x188>)
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	2380      	movs	r3, #128	; 0x80
 80041f0:	049b      	lsls	r3, r3, #18
 80041f2:	4013      	ands	r3, r2
 80041f4:	d108      	bne.n	8004208 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e062      	b.n	80042c0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041fa:	4b34      	ldr	r3, [pc, #208]	; (80042cc <HAL_RCC_ClockConfig+0x188>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2202      	movs	r2, #2
 8004200:	4013      	ands	r3, r2
 8004202:	d101      	bne.n	8004208 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e05b      	b.n	80042c0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004208:	4b30      	ldr	r3, [pc, #192]	; (80042cc <HAL_RCC_ClockConfig+0x188>)
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	2203      	movs	r2, #3
 800420e:	4393      	bics	r3, r2
 8004210:	0019      	movs	r1, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	4b2d      	ldr	r3, [pc, #180]	; (80042cc <HAL_RCC_ClockConfig+0x188>)
 8004218:	430a      	orrs	r2, r1
 800421a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800421c:	f7fd fe10 	bl	8001e40 <HAL_GetTick>
 8004220:	0003      	movs	r3, r0
 8004222:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004224:	e009      	b.n	800423a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004226:	f7fd fe0b 	bl	8001e40 <HAL_GetTick>
 800422a:	0002      	movs	r2, r0
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	4a27      	ldr	r2, [pc, #156]	; (80042d0 <HAL_RCC_ClockConfig+0x18c>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d901      	bls.n	800423a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e042      	b.n	80042c0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800423a:	4b24      	ldr	r3, [pc, #144]	; (80042cc <HAL_RCC_ClockConfig+0x188>)
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	220c      	movs	r2, #12
 8004240:	401a      	ands	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	429a      	cmp	r2, r3
 800424a:	d1ec      	bne.n	8004226 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800424c:	4b1e      	ldr	r3, [pc, #120]	; (80042c8 <HAL_RCC_ClockConfig+0x184>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2201      	movs	r2, #1
 8004252:	4013      	ands	r3, r2
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	429a      	cmp	r2, r3
 8004258:	d211      	bcs.n	800427e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800425a:	4b1b      	ldr	r3, [pc, #108]	; (80042c8 <HAL_RCC_ClockConfig+0x184>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2201      	movs	r2, #1
 8004260:	4393      	bics	r3, r2
 8004262:	0019      	movs	r1, r3
 8004264:	4b18      	ldr	r3, [pc, #96]	; (80042c8 <HAL_RCC_ClockConfig+0x184>)
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	430a      	orrs	r2, r1
 800426a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800426c:	4b16      	ldr	r3, [pc, #88]	; (80042c8 <HAL_RCC_ClockConfig+0x184>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2201      	movs	r2, #1
 8004272:	4013      	ands	r3, r2
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	429a      	cmp	r2, r3
 8004278:	d001      	beq.n	800427e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e020      	b.n	80042c0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2204      	movs	r2, #4
 8004284:	4013      	ands	r3, r2
 8004286:	d009      	beq.n	800429c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004288:	4b10      	ldr	r3, [pc, #64]	; (80042cc <HAL_RCC_ClockConfig+0x188>)
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	4a11      	ldr	r2, [pc, #68]	; (80042d4 <HAL_RCC_ClockConfig+0x190>)
 800428e:	4013      	ands	r3, r2
 8004290:	0019      	movs	r1, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68da      	ldr	r2, [r3, #12]
 8004296:	4b0d      	ldr	r3, [pc, #52]	; (80042cc <HAL_RCC_ClockConfig+0x188>)
 8004298:	430a      	orrs	r2, r1
 800429a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800429c:	f000 f820 	bl	80042e0 <HAL_RCC_GetSysClockFreq>
 80042a0:	0001      	movs	r1, r0
 80042a2:	4b0a      	ldr	r3, [pc, #40]	; (80042cc <HAL_RCC_ClockConfig+0x188>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	091b      	lsrs	r3, r3, #4
 80042a8:	220f      	movs	r2, #15
 80042aa:	4013      	ands	r3, r2
 80042ac:	4a0a      	ldr	r2, [pc, #40]	; (80042d8 <HAL_RCC_ClockConfig+0x194>)
 80042ae:	5cd3      	ldrb	r3, [r2, r3]
 80042b0:	000a      	movs	r2, r1
 80042b2:	40da      	lsrs	r2, r3
 80042b4:	4b09      	ldr	r3, [pc, #36]	; (80042dc <HAL_RCC_ClockConfig+0x198>)
 80042b6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80042b8:	2003      	movs	r0, #3
 80042ba:	f7fd fd7b 	bl	8001db4 <HAL_InitTick>
  
  return HAL_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	0018      	movs	r0, r3
 80042c2:	46bd      	mov	sp, r7
 80042c4:	b004      	add	sp, #16
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	40022000 	.word	0x40022000
 80042cc:	40021000 	.word	0x40021000
 80042d0:	00001388 	.word	0x00001388
 80042d4:	fffff8ff 	.word	0xfffff8ff
 80042d8:	08007378 	.word	0x08007378
 80042dc:	20000044 	.word	0x20000044

080042e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042e0:	b590      	push	{r4, r7, lr}
 80042e2:	b08f      	sub	sp, #60	; 0x3c
 80042e4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80042e6:	2314      	movs	r3, #20
 80042e8:	18fb      	adds	r3, r7, r3
 80042ea:	4a2b      	ldr	r2, [pc, #172]	; (8004398 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042ec:	ca13      	ldmia	r2!, {r0, r1, r4}
 80042ee:	c313      	stmia	r3!, {r0, r1, r4}
 80042f0:	6812      	ldr	r2, [r2, #0]
 80042f2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80042f4:	1d3b      	adds	r3, r7, #4
 80042f6:	4a29      	ldr	r2, [pc, #164]	; (800439c <HAL_RCC_GetSysClockFreq+0xbc>)
 80042f8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80042fa:	c313      	stmia	r3!, {r0, r1, r4}
 80042fc:	6812      	ldr	r2, [r2, #0]
 80042fe:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004300:	2300      	movs	r3, #0
 8004302:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004304:	2300      	movs	r3, #0
 8004306:	62bb      	str	r3, [r7, #40]	; 0x28
 8004308:	2300      	movs	r3, #0
 800430a:	637b      	str	r3, [r7, #52]	; 0x34
 800430c:	2300      	movs	r3, #0
 800430e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004310:	2300      	movs	r3, #0
 8004312:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004314:	4b22      	ldr	r3, [pc, #136]	; (80043a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800431a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800431c:	220c      	movs	r2, #12
 800431e:	4013      	ands	r3, r2
 8004320:	2b04      	cmp	r3, #4
 8004322:	d002      	beq.n	800432a <HAL_RCC_GetSysClockFreq+0x4a>
 8004324:	2b08      	cmp	r3, #8
 8004326:	d003      	beq.n	8004330 <HAL_RCC_GetSysClockFreq+0x50>
 8004328:	e02d      	b.n	8004386 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800432a:	4b1e      	ldr	r3, [pc, #120]	; (80043a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800432c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800432e:	e02d      	b.n	800438c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004332:	0c9b      	lsrs	r3, r3, #18
 8004334:	220f      	movs	r2, #15
 8004336:	4013      	ands	r3, r2
 8004338:	2214      	movs	r2, #20
 800433a:	18ba      	adds	r2, r7, r2
 800433c:	5cd3      	ldrb	r3, [r2, r3]
 800433e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004340:	4b17      	ldr	r3, [pc, #92]	; (80043a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004344:	220f      	movs	r2, #15
 8004346:	4013      	ands	r3, r2
 8004348:	1d3a      	adds	r2, r7, #4
 800434a:	5cd3      	ldrb	r3, [r2, r3]
 800434c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800434e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004350:	2380      	movs	r3, #128	; 0x80
 8004352:	025b      	lsls	r3, r3, #9
 8004354:	4013      	ands	r3, r2
 8004356:	d009      	beq.n	800436c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004358:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800435a:	4812      	ldr	r0, [pc, #72]	; (80043a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800435c:	f7fb fedc 	bl	8000118 <__udivsi3>
 8004360:	0003      	movs	r3, r0
 8004362:	001a      	movs	r2, r3
 8004364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004366:	4353      	muls	r3, r2
 8004368:	637b      	str	r3, [r7, #52]	; 0x34
 800436a:	e009      	b.n	8004380 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800436c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800436e:	000a      	movs	r2, r1
 8004370:	0152      	lsls	r2, r2, #5
 8004372:	1a52      	subs	r2, r2, r1
 8004374:	0193      	lsls	r3, r2, #6
 8004376:	1a9b      	subs	r3, r3, r2
 8004378:	00db      	lsls	r3, r3, #3
 800437a:	185b      	adds	r3, r3, r1
 800437c:	021b      	lsls	r3, r3, #8
 800437e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8004380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004382:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004384:	e002      	b.n	800438c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004386:	4b07      	ldr	r3, [pc, #28]	; (80043a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004388:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800438a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800438c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800438e:	0018      	movs	r0, r3
 8004390:	46bd      	mov	sp, r7
 8004392:	b00f      	add	sp, #60	; 0x3c
 8004394:	bd90      	pop	{r4, r7, pc}
 8004396:	46c0      	nop			; (mov r8, r8)
 8004398:	080071f4 	.word	0x080071f4
 800439c:	08007204 	.word	0x08007204
 80043a0:	40021000 	.word	0x40021000
 80043a4:	007a1200 	.word	0x007a1200

080043a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043ac:	4b02      	ldr	r3, [pc, #8]	; (80043b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80043ae:	681b      	ldr	r3, [r3, #0]
}
 80043b0:	0018      	movs	r0, r3
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	46c0      	nop			; (mov r8, r8)
 80043b8:	20000044 	.word	0x20000044

080043bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80043c0:	f7ff fff2 	bl	80043a8 <HAL_RCC_GetHCLKFreq>
 80043c4:	0001      	movs	r1, r0
 80043c6:	4b06      	ldr	r3, [pc, #24]	; (80043e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	0a1b      	lsrs	r3, r3, #8
 80043cc:	2207      	movs	r2, #7
 80043ce:	4013      	ands	r3, r2
 80043d0:	4a04      	ldr	r2, [pc, #16]	; (80043e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80043d2:	5cd3      	ldrb	r3, [r2, r3]
 80043d4:	40d9      	lsrs	r1, r3
 80043d6:	000b      	movs	r3, r1
}    
 80043d8:	0018      	movs	r0, r3
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	46c0      	nop			; (mov r8, r8)
 80043e0:	40021000 	.word	0x40021000
 80043e4:	08007388 	.word	0x08007388

080043e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b086      	sub	sp, #24
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043f0:	2300      	movs	r3, #0
 80043f2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80043f4:	2300      	movs	r3, #0
 80043f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	2380      	movs	r3, #128	; 0x80
 80043fe:	025b      	lsls	r3, r3, #9
 8004400:	4013      	ands	r3, r2
 8004402:	d100      	bne.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004404:	e08e      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004406:	2017      	movs	r0, #23
 8004408:	183b      	adds	r3, r7, r0
 800440a:	2200      	movs	r2, #0
 800440c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800440e:	4b5f      	ldr	r3, [pc, #380]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004410:	69da      	ldr	r2, [r3, #28]
 8004412:	2380      	movs	r3, #128	; 0x80
 8004414:	055b      	lsls	r3, r3, #21
 8004416:	4013      	ands	r3, r2
 8004418:	d110      	bne.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800441a:	4b5c      	ldr	r3, [pc, #368]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800441c:	69da      	ldr	r2, [r3, #28]
 800441e:	4b5b      	ldr	r3, [pc, #364]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004420:	2180      	movs	r1, #128	; 0x80
 8004422:	0549      	lsls	r1, r1, #21
 8004424:	430a      	orrs	r2, r1
 8004426:	61da      	str	r2, [r3, #28]
 8004428:	4b58      	ldr	r3, [pc, #352]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800442a:	69da      	ldr	r2, [r3, #28]
 800442c:	2380      	movs	r3, #128	; 0x80
 800442e:	055b      	lsls	r3, r3, #21
 8004430:	4013      	ands	r3, r2
 8004432:	60bb      	str	r3, [r7, #8]
 8004434:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004436:	183b      	adds	r3, r7, r0
 8004438:	2201      	movs	r2, #1
 800443a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800443c:	4b54      	ldr	r3, [pc, #336]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	2380      	movs	r3, #128	; 0x80
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	4013      	ands	r3, r2
 8004446:	d11a      	bne.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004448:	4b51      	ldr	r3, [pc, #324]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	4b50      	ldr	r3, [pc, #320]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800444e:	2180      	movs	r1, #128	; 0x80
 8004450:	0049      	lsls	r1, r1, #1
 8004452:	430a      	orrs	r2, r1
 8004454:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004456:	f7fd fcf3 	bl	8001e40 <HAL_GetTick>
 800445a:	0003      	movs	r3, r0
 800445c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800445e:	e008      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004460:	f7fd fcee 	bl	8001e40 <HAL_GetTick>
 8004464:	0002      	movs	r2, r0
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b64      	cmp	r3, #100	; 0x64
 800446c:	d901      	bls.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e087      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004472:	4b47      	ldr	r3, [pc, #284]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	2380      	movs	r3, #128	; 0x80
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	4013      	ands	r3, r2
 800447c:	d0f0      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800447e:	4b43      	ldr	r3, [pc, #268]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004480:	6a1a      	ldr	r2, [r3, #32]
 8004482:	23c0      	movs	r3, #192	; 0xc0
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4013      	ands	r3, r2
 8004488:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d034      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685a      	ldr	r2, [r3, #4]
 8004494:	23c0      	movs	r3, #192	; 0xc0
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	4013      	ands	r3, r2
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	429a      	cmp	r2, r3
 800449e:	d02c      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044a0:	4b3a      	ldr	r3, [pc, #232]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80044a2:	6a1b      	ldr	r3, [r3, #32]
 80044a4:	4a3b      	ldr	r2, [pc, #236]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044a6:	4013      	ands	r3, r2
 80044a8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044aa:	4b38      	ldr	r3, [pc, #224]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80044ac:	6a1a      	ldr	r2, [r3, #32]
 80044ae:	4b37      	ldr	r3, [pc, #220]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80044b0:	2180      	movs	r1, #128	; 0x80
 80044b2:	0249      	lsls	r1, r1, #9
 80044b4:	430a      	orrs	r2, r1
 80044b6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044b8:	4b34      	ldr	r3, [pc, #208]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80044ba:	6a1a      	ldr	r2, [r3, #32]
 80044bc:	4b33      	ldr	r3, [pc, #204]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80044be:	4936      	ldr	r1, [pc, #216]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80044c0:	400a      	ands	r2, r1
 80044c2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80044c4:	4b31      	ldr	r3, [pc, #196]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2201      	movs	r2, #1
 80044ce:	4013      	ands	r3, r2
 80044d0:	d013      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d2:	f7fd fcb5 	bl	8001e40 <HAL_GetTick>
 80044d6:	0003      	movs	r3, r0
 80044d8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044da:	e009      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044dc:	f7fd fcb0 	bl	8001e40 <HAL_GetTick>
 80044e0:	0002      	movs	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	4a2d      	ldr	r2, [pc, #180]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d901      	bls.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e048      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044f0:	4b26      	ldr	r3, [pc, #152]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80044f2:	6a1b      	ldr	r3, [r3, #32]
 80044f4:	2202      	movs	r2, #2
 80044f6:	4013      	ands	r3, r2
 80044f8:	d0f0      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044fa:	4b24      	ldr	r3, [pc, #144]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	4a25      	ldr	r2, [pc, #148]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004500:	4013      	ands	r3, r2
 8004502:	0019      	movs	r1, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685a      	ldr	r2, [r3, #4]
 8004508:	4b20      	ldr	r3, [pc, #128]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800450a:	430a      	orrs	r2, r1
 800450c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800450e:	2317      	movs	r3, #23
 8004510:	18fb      	adds	r3, r7, r3
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d105      	bne.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004518:	4b1c      	ldr	r3, [pc, #112]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800451a:	69da      	ldr	r2, [r3, #28]
 800451c:	4b1b      	ldr	r3, [pc, #108]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800451e:	4920      	ldr	r1, [pc, #128]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004520:	400a      	ands	r2, r1
 8004522:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2201      	movs	r2, #1
 800452a:	4013      	ands	r3, r2
 800452c:	d009      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800452e:	4b17      	ldr	r3, [pc, #92]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004532:	2203      	movs	r2, #3
 8004534:	4393      	bics	r3, r2
 8004536:	0019      	movs	r1, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689a      	ldr	r2, [r3, #8]
 800453c:	4b13      	ldr	r3, [pc, #76]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800453e:	430a      	orrs	r2, r1
 8004540:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2220      	movs	r2, #32
 8004548:	4013      	ands	r3, r2
 800454a:	d009      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800454c:	4b0f      	ldr	r3, [pc, #60]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800454e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004550:	2210      	movs	r2, #16
 8004552:	4393      	bics	r3, r2
 8004554:	0019      	movs	r1, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	68da      	ldr	r2, [r3, #12]
 800455a:	4b0c      	ldr	r3, [pc, #48]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800455c:	430a      	orrs	r2, r1
 800455e:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	2380      	movs	r3, #128	; 0x80
 8004566:	00db      	lsls	r3, r3, #3
 8004568:	4013      	ands	r3, r2
 800456a:	d009      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800456c:	4b07      	ldr	r3, [pc, #28]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800456e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004570:	2240      	movs	r2, #64	; 0x40
 8004572:	4393      	bics	r3, r2
 8004574:	0019      	movs	r1, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	691a      	ldr	r2, [r3, #16]
 800457a:	4b04      	ldr	r3, [pc, #16]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800457c:	430a      	orrs	r2, r1
 800457e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	0018      	movs	r0, r3
 8004584:	46bd      	mov	sp, r7
 8004586:	b006      	add	sp, #24
 8004588:	bd80      	pop	{r7, pc}
 800458a:	46c0      	nop			; (mov r8, r8)
 800458c:	40021000 	.word	0x40021000
 8004590:	40007000 	.word	0x40007000
 8004594:	fffffcff 	.word	0xfffffcff
 8004598:	fffeffff 	.word	0xfffeffff
 800459c:	00001388 	.word	0x00001388
 80045a0:	efffffff 	.word	0xefffffff

080045a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e0a8      	b.n	8004708 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d109      	bne.n	80045d2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685a      	ldr	r2, [r3, #4]
 80045c2:	2382      	movs	r3, #130	; 0x82
 80045c4:	005b      	lsls	r3, r3, #1
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d009      	beq.n	80045de <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	61da      	str	r2, [r3, #28]
 80045d0:	e005      	b.n	80045de <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	225d      	movs	r2, #93	; 0x5d
 80045e8:	5c9b      	ldrb	r3, [r3, r2]
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d107      	bne.n	8004600 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	225c      	movs	r2, #92	; 0x5c
 80045f4:	2100      	movs	r1, #0
 80045f6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	0018      	movs	r0, r3
 80045fc:	f7fd f9ac 	bl	8001958 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	225d      	movs	r2, #93	; 0x5d
 8004604:	2102      	movs	r1, #2
 8004606:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2140      	movs	r1, #64	; 0x40
 8004614:	438a      	bics	r2, r1
 8004616:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68da      	ldr	r2, [r3, #12]
 800461c:	23e0      	movs	r3, #224	; 0xe0
 800461e:	00db      	lsls	r3, r3, #3
 8004620:	429a      	cmp	r2, r3
 8004622:	d902      	bls.n	800462a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004624:	2300      	movs	r3, #0
 8004626:	60fb      	str	r3, [r7, #12]
 8004628:	e002      	b.n	8004630 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800462a:	2380      	movs	r3, #128	; 0x80
 800462c:	015b      	lsls	r3, r3, #5
 800462e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68da      	ldr	r2, [r3, #12]
 8004634:	23f0      	movs	r3, #240	; 0xf0
 8004636:	011b      	lsls	r3, r3, #4
 8004638:	429a      	cmp	r2, r3
 800463a:	d008      	beq.n	800464e <HAL_SPI_Init+0xaa>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	68da      	ldr	r2, [r3, #12]
 8004640:	23e0      	movs	r3, #224	; 0xe0
 8004642:	00db      	lsls	r3, r3, #3
 8004644:	429a      	cmp	r2, r3
 8004646:	d002      	beq.n	800464e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685a      	ldr	r2, [r3, #4]
 8004652:	2382      	movs	r3, #130	; 0x82
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	401a      	ands	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6899      	ldr	r1, [r3, #8]
 800465c:	2384      	movs	r3, #132	; 0x84
 800465e:	021b      	lsls	r3, r3, #8
 8004660:	400b      	ands	r3, r1
 8004662:	431a      	orrs	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	2102      	movs	r1, #2
 800466a:	400b      	ands	r3, r1
 800466c:	431a      	orrs	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	2101      	movs	r1, #1
 8004674:	400b      	ands	r3, r1
 8004676:	431a      	orrs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6999      	ldr	r1, [r3, #24]
 800467c:	2380      	movs	r3, #128	; 0x80
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	400b      	ands	r3, r1
 8004682:	431a      	orrs	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	69db      	ldr	r3, [r3, #28]
 8004688:	2138      	movs	r1, #56	; 0x38
 800468a:	400b      	ands	r3, r1
 800468c:	431a      	orrs	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	2180      	movs	r1, #128	; 0x80
 8004694:	400b      	ands	r3, r1
 8004696:	431a      	orrs	r2, r3
 8004698:	0011      	movs	r1, r2
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800469e:	2380      	movs	r3, #128	; 0x80
 80046a0:	019b      	lsls	r3, r3, #6
 80046a2:	401a      	ands	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	430a      	orrs	r2, r1
 80046aa:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	0c1b      	lsrs	r3, r3, #16
 80046b2:	2204      	movs	r2, #4
 80046b4:	401a      	ands	r2, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ba:	2110      	movs	r1, #16
 80046bc:	400b      	ands	r3, r1
 80046be:	431a      	orrs	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046c4:	2108      	movs	r1, #8
 80046c6:	400b      	ands	r3, r1
 80046c8:	431a      	orrs	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	68d9      	ldr	r1, [r3, #12]
 80046ce:	23f0      	movs	r3, #240	; 0xf0
 80046d0:	011b      	lsls	r3, r3, #4
 80046d2:	400b      	ands	r3, r1
 80046d4:	431a      	orrs	r2, r3
 80046d6:	0011      	movs	r1, r2
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	2380      	movs	r3, #128	; 0x80
 80046dc:	015b      	lsls	r3, r3, #5
 80046de:	401a      	ands	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	430a      	orrs	r2, r1
 80046e6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	69da      	ldr	r2, [r3, #28]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4907      	ldr	r1, [pc, #28]	; (8004710 <HAL_SPI_Init+0x16c>)
 80046f4:	400a      	ands	r2, r1
 80046f6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	225d      	movs	r2, #93	; 0x5d
 8004702:	2101      	movs	r1, #1
 8004704:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	0018      	movs	r0, r3
 800470a:	46bd      	mov	sp, r7
 800470c:	b004      	add	sp, #16
 800470e:	bd80      	pop	{r7, pc}
 8004710:	fffff7ff 	.word	0xfffff7ff

08004714 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b088      	sub	sp, #32
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	603b      	str	r3, [r7, #0]
 8004720:	1dbb      	adds	r3, r7, #6
 8004722:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004724:	231f      	movs	r3, #31
 8004726:	18fb      	adds	r3, r7, r3
 8004728:	2200      	movs	r2, #0
 800472a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	225c      	movs	r2, #92	; 0x5c
 8004730:	5c9b      	ldrb	r3, [r3, r2]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d101      	bne.n	800473a <HAL_SPI_Transmit+0x26>
 8004736:	2302      	movs	r3, #2
 8004738:	e140      	b.n	80049bc <HAL_SPI_Transmit+0x2a8>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	225c      	movs	r2, #92	; 0x5c
 800473e:	2101      	movs	r1, #1
 8004740:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004742:	f7fd fb7d 	bl	8001e40 <HAL_GetTick>
 8004746:	0003      	movs	r3, r0
 8004748:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800474a:	2316      	movs	r3, #22
 800474c:	18fb      	adds	r3, r7, r3
 800474e:	1dba      	adds	r2, r7, #6
 8004750:	8812      	ldrh	r2, [r2, #0]
 8004752:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	225d      	movs	r2, #93	; 0x5d
 8004758:	5c9b      	ldrb	r3, [r3, r2]
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2b01      	cmp	r3, #1
 800475e:	d004      	beq.n	800476a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8004760:	231f      	movs	r3, #31
 8004762:	18fb      	adds	r3, r7, r3
 8004764:	2202      	movs	r2, #2
 8004766:	701a      	strb	r2, [r3, #0]
    goto error;
 8004768:	e11d      	b.n	80049a6 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d003      	beq.n	8004778 <HAL_SPI_Transmit+0x64>
 8004770:	1dbb      	adds	r3, r7, #6
 8004772:	881b      	ldrh	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d104      	bne.n	8004782 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8004778:	231f      	movs	r3, #31
 800477a:	18fb      	adds	r3, r7, r3
 800477c:	2201      	movs	r2, #1
 800477e:	701a      	strb	r2, [r3, #0]
    goto error;
 8004780:	e111      	b.n	80049a6 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	225d      	movs	r2, #93	; 0x5d
 8004786:	2103      	movs	r1, #3
 8004788:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	68ba      	ldr	r2, [r7, #8]
 8004794:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	1dba      	adds	r2, r7, #6
 800479a:	8812      	ldrh	r2, [r2, #0]
 800479c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	1dba      	adds	r2, r7, #6
 80047a2:	8812      	ldrh	r2, [r2, #0]
 80047a4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2244      	movs	r2, #68	; 0x44
 80047b0:	2100      	movs	r1, #0
 80047b2:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2246      	movs	r2, #70	; 0x46
 80047b8:	2100      	movs	r1, #0
 80047ba:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	2380      	movs	r3, #128	; 0x80
 80047ce:	021b      	lsls	r3, r3, #8
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d110      	bne.n	80047f6 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2140      	movs	r1, #64	; 0x40
 80047e0:	438a      	bics	r2, r1
 80047e2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2180      	movs	r1, #128	; 0x80
 80047f0:	01c9      	lsls	r1, r1, #7
 80047f2:	430a      	orrs	r2, r1
 80047f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2240      	movs	r2, #64	; 0x40
 80047fe:	4013      	ands	r3, r2
 8004800:	2b40      	cmp	r3, #64	; 0x40
 8004802:	d007      	beq.n	8004814 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2140      	movs	r1, #64	; 0x40
 8004810:	430a      	orrs	r2, r1
 8004812:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	68da      	ldr	r2, [r3, #12]
 8004818:	23e0      	movs	r3, #224	; 0xe0
 800481a:	00db      	lsls	r3, r3, #3
 800481c:	429a      	cmp	r2, r3
 800481e:	d94e      	bls.n	80048be <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d004      	beq.n	8004832 <HAL_SPI_Transmit+0x11e>
 8004828:	2316      	movs	r3, #22
 800482a:	18fb      	adds	r3, r7, r3
 800482c:	881b      	ldrh	r3, [r3, #0]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d13f      	bne.n	80048b2 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004836:	881a      	ldrh	r2, [r3, #0]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004842:	1c9a      	adds	r2, r3, #2
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800484c:	b29b      	uxth	r3, r3
 800484e:	3b01      	subs	r3, #1
 8004850:	b29a      	uxth	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004856:	e02c      	b.n	80048b2 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	2202      	movs	r2, #2
 8004860:	4013      	ands	r3, r2
 8004862:	2b02      	cmp	r3, #2
 8004864:	d112      	bne.n	800488c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486a:	881a      	ldrh	r2, [r3, #0]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004876:	1c9a      	adds	r2, r3, #2
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004880:	b29b      	uxth	r3, r3
 8004882:	3b01      	subs	r3, #1
 8004884:	b29a      	uxth	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	87da      	strh	r2, [r3, #62]	; 0x3e
 800488a:	e012      	b.n	80048b2 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800488c:	f7fd fad8 	bl	8001e40 <HAL_GetTick>
 8004890:	0002      	movs	r2, r0
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	683a      	ldr	r2, [r7, #0]
 8004898:	429a      	cmp	r2, r3
 800489a:	d802      	bhi.n	80048a2 <HAL_SPI_Transmit+0x18e>
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	3301      	adds	r3, #1
 80048a0:	d102      	bne.n	80048a8 <HAL_SPI_Transmit+0x194>
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d104      	bne.n	80048b2 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80048a8:	231f      	movs	r3, #31
 80048aa:	18fb      	adds	r3, r7, r3
 80048ac:	2203      	movs	r2, #3
 80048ae:	701a      	strb	r2, [r3, #0]
          goto error;
 80048b0:	e079      	b.n	80049a6 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1cd      	bne.n	8004858 <HAL_SPI_Transmit+0x144>
 80048bc:	e04f      	b.n	800495e <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d004      	beq.n	80048d0 <HAL_SPI_Transmit+0x1bc>
 80048c6:	2316      	movs	r3, #22
 80048c8:	18fb      	adds	r3, r7, r3
 80048ca:	881b      	ldrh	r3, [r3, #0]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d141      	bne.n	8004954 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	330c      	adds	r3, #12
 80048da:	7812      	ldrb	r2, [r2, #0]
 80048dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e2:	1c5a      	adds	r2, r3, #1
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	3b01      	subs	r3, #1
 80048f0:	b29a      	uxth	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80048f6:	e02d      	b.n	8004954 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	2202      	movs	r2, #2
 8004900:	4013      	ands	r3, r2
 8004902:	2b02      	cmp	r3, #2
 8004904:	d113      	bne.n	800492e <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	330c      	adds	r3, #12
 8004910:	7812      	ldrb	r2, [r2, #0]
 8004912:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004918:	1c5a      	adds	r2, r3, #1
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004922:	b29b      	uxth	r3, r3
 8004924:	3b01      	subs	r3, #1
 8004926:	b29a      	uxth	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800492c:	e012      	b.n	8004954 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800492e:	f7fd fa87 	bl	8001e40 <HAL_GetTick>
 8004932:	0002      	movs	r2, r0
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	683a      	ldr	r2, [r7, #0]
 800493a:	429a      	cmp	r2, r3
 800493c:	d802      	bhi.n	8004944 <HAL_SPI_Transmit+0x230>
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	3301      	adds	r3, #1
 8004942:	d102      	bne.n	800494a <HAL_SPI_Transmit+0x236>
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d104      	bne.n	8004954 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800494a:	231f      	movs	r3, #31
 800494c:	18fb      	adds	r3, r7, r3
 800494e:	2203      	movs	r2, #3
 8004950:	701a      	strb	r2, [r3, #0]
          goto error;
 8004952:	e028      	b.n	80049a6 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004958:	b29b      	uxth	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1cc      	bne.n	80048f8 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800495e:	69ba      	ldr	r2, [r7, #24]
 8004960:	6839      	ldr	r1, [r7, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	0018      	movs	r0, r3
 8004966:	f000 f95d 	bl	8004c24 <SPI_EndRxTxTransaction>
 800496a:	1e03      	subs	r3, r0, #0
 800496c:	d002      	beq.n	8004974 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2220      	movs	r2, #32
 8004972:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d10a      	bne.n	8004992 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800497c:	2300      	movs	r3, #0
 800497e:	613b      	str	r3, [r7, #16]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	613b      	str	r3, [r7, #16]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	613b      	str	r3, [r7, #16]
 8004990:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004996:	2b00      	cmp	r3, #0
 8004998:	d004      	beq.n	80049a4 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800499a:	231f      	movs	r3, #31
 800499c:	18fb      	adds	r3, r7, r3
 800499e:	2201      	movs	r2, #1
 80049a0:	701a      	strb	r2, [r3, #0]
 80049a2:	e000      	b.n	80049a6 <HAL_SPI_Transmit+0x292>
  }

error:
 80049a4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	225d      	movs	r2, #93	; 0x5d
 80049aa:	2101      	movs	r1, #1
 80049ac:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	225c      	movs	r2, #92	; 0x5c
 80049b2:	2100      	movs	r1, #0
 80049b4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80049b6:	231f      	movs	r3, #31
 80049b8:	18fb      	adds	r3, r7, r3
 80049ba:	781b      	ldrb	r3, [r3, #0]
}
 80049bc:	0018      	movs	r0, r3
 80049be:	46bd      	mov	sp, r7
 80049c0:	b008      	add	sp, #32
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b088      	sub	sp, #32
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	603b      	str	r3, [r7, #0]
 80049d0:	1dfb      	adds	r3, r7, #7
 80049d2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80049d4:	f7fd fa34 	bl	8001e40 <HAL_GetTick>
 80049d8:	0002      	movs	r2, r0
 80049da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049dc:	1a9b      	subs	r3, r3, r2
 80049de:	683a      	ldr	r2, [r7, #0]
 80049e0:	18d3      	adds	r3, r2, r3
 80049e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80049e4:	f7fd fa2c 	bl	8001e40 <HAL_GetTick>
 80049e8:	0003      	movs	r3, r0
 80049ea:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80049ec:	4b3a      	ldr	r3, [pc, #232]	; (8004ad8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	015b      	lsls	r3, r3, #5
 80049f2:	0d1b      	lsrs	r3, r3, #20
 80049f4:	69fa      	ldr	r2, [r7, #28]
 80049f6:	4353      	muls	r3, r2
 80049f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049fa:	e058      	b.n	8004aae <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	3301      	adds	r3, #1
 8004a00:	d055      	beq.n	8004aae <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a02:	f7fd fa1d 	bl	8001e40 <HAL_GetTick>
 8004a06:	0002      	movs	r2, r0
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	69fa      	ldr	r2, [r7, #28]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d902      	bls.n	8004a18 <SPI_WaitFlagStateUntilTimeout+0x54>
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d142      	bne.n	8004a9e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	685a      	ldr	r2, [r3, #4]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	21e0      	movs	r1, #224	; 0xe0
 8004a24:	438a      	bics	r2, r1
 8004a26:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	685a      	ldr	r2, [r3, #4]
 8004a2c:	2382      	movs	r3, #130	; 0x82
 8004a2e:	005b      	lsls	r3, r3, #1
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d113      	bne.n	8004a5c <SPI_WaitFlagStateUntilTimeout+0x98>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	689a      	ldr	r2, [r3, #8]
 8004a38:	2380      	movs	r3, #128	; 0x80
 8004a3a:	021b      	lsls	r3, r3, #8
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d005      	beq.n	8004a4c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	689a      	ldr	r2, [r3, #8]
 8004a44:	2380      	movs	r3, #128	; 0x80
 8004a46:	00db      	lsls	r3, r3, #3
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d107      	bne.n	8004a5c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2140      	movs	r1, #64	; 0x40
 8004a58:	438a      	bics	r2, r1
 8004a5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a60:	2380      	movs	r3, #128	; 0x80
 8004a62:	019b      	lsls	r3, r3, #6
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d110      	bne.n	8004a8a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	491a      	ldr	r1, [pc, #104]	; (8004adc <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004a74:	400a      	ands	r2, r1
 8004a76:	601a      	str	r2, [r3, #0]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2180      	movs	r1, #128	; 0x80
 8004a84:	0189      	lsls	r1, r1, #6
 8004a86:	430a      	orrs	r2, r1
 8004a88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	225d      	movs	r2, #93	; 0x5d
 8004a8e:	2101      	movs	r1, #1
 8004a90:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	225c      	movs	r2, #92	; 0x5c
 8004a96:	2100      	movs	r1, #0
 8004a98:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e017      	b.n	8004ace <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d101      	bne.n	8004aa8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	425a      	negs	r2, r3
 8004abe:	4153      	adcs	r3, r2
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	001a      	movs	r2, r3
 8004ac4:	1dfb      	adds	r3, r7, #7
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d197      	bne.n	80049fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	0018      	movs	r0, r3
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	b008      	add	sp, #32
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	46c0      	nop			; (mov r8, r8)
 8004ad8:	20000044 	.word	0x20000044
 8004adc:	ffffdfff 	.word	0xffffdfff

08004ae0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b08a      	sub	sp, #40	; 0x28
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]
 8004aec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004aee:	2317      	movs	r3, #23
 8004af0:	18fb      	adds	r3, r7, r3
 8004af2:	2200      	movs	r2, #0
 8004af4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004af6:	f7fd f9a3 	bl	8001e40 <HAL_GetTick>
 8004afa:	0002      	movs	r2, r0
 8004afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004afe:	1a9b      	subs	r3, r3, r2
 8004b00:	683a      	ldr	r2, [r7, #0]
 8004b02:	18d3      	adds	r3, r2, r3
 8004b04:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004b06:	f7fd f99b 	bl	8001e40 <HAL_GetTick>
 8004b0a:	0003      	movs	r3, r0
 8004b0c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	330c      	adds	r3, #12
 8004b14:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004b16:	4b41      	ldr	r3, [pc, #260]	; (8004c1c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	0013      	movs	r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	189b      	adds	r3, r3, r2
 8004b20:	00da      	lsls	r2, r3, #3
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	0d1b      	lsrs	r3, r3, #20
 8004b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b28:	4353      	muls	r3, r2
 8004b2a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004b2c:	e068      	b.n	8004c00 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	23c0      	movs	r3, #192	; 0xc0
 8004b32:	00db      	lsls	r3, r3, #3
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d10a      	bne.n	8004b4e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d107      	bne.n	8004b4e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	b2da      	uxtb	r2, r3
 8004b44:	2117      	movs	r1, #23
 8004b46:	187b      	adds	r3, r7, r1
 8004b48:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004b4a:	187b      	adds	r3, r7, r1
 8004b4c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	3301      	adds	r3, #1
 8004b52:	d055      	beq.n	8004c00 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b54:	f7fd f974 	bl	8001e40 <HAL_GetTick>
 8004b58:	0002      	movs	r2, r0
 8004b5a:	6a3b      	ldr	r3, [r7, #32]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d902      	bls.n	8004b6a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d142      	bne.n	8004bf0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	685a      	ldr	r2, [r3, #4]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	21e0      	movs	r1, #224	; 0xe0
 8004b76:	438a      	bics	r2, r1
 8004b78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	2382      	movs	r3, #130	; 0x82
 8004b80:	005b      	lsls	r3, r3, #1
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d113      	bne.n	8004bae <SPI_WaitFifoStateUntilTimeout+0xce>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	689a      	ldr	r2, [r3, #8]
 8004b8a:	2380      	movs	r3, #128	; 0x80
 8004b8c:	021b      	lsls	r3, r3, #8
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d005      	beq.n	8004b9e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	689a      	ldr	r2, [r3, #8]
 8004b96:	2380      	movs	r3, #128	; 0x80
 8004b98:	00db      	lsls	r3, r3, #3
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d107      	bne.n	8004bae <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2140      	movs	r1, #64	; 0x40
 8004baa:	438a      	bics	r2, r1
 8004bac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bb2:	2380      	movs	r3, #128	; 0x80
 8004bb4:	019b      	lsls	r3, r3, #6
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d110      	bne.n	8004bdc <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4916      	ldr	r1, [pc, #88]	; (8004c20 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004bc6:	400a      	ands	r2, r1
 8004bc8:	601a      	str	r2, [r3, #0]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2180      	movs	r1, #128	; 0x80
 8004bd6:	0189      	lsls	r1, r1, #6
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	225d      	movs	r2, #93	; 0x5d
 8004be0:	2101      	movs	r1, #1
 8004be2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	225c      	movs	r2, #92	; 0x5c
 8004be8:	2100      	movs	r1, #0
 8004bea:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e010      	b.n	8004c12 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d101      	bne.n	8004bfa <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	4013      	ands	r3, r2
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d18e      	bne.n	8004b2e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	0018      	movs	r0, r3
 8004c14:	46bd      	mov	sp, r7
 8004c16:	b00a      	add	sp, #40	; 0x28
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	46c0      	nop			; (mov r8, r8)
 8004c1c:	20000044 	.word	0x20000044
 8004c20:	ffffdfff 	.word	0xffffdfff

08004c24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af02      	add	r7, sp, #8
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	23c0      	movs	r3, #192	; 0xc0
 8004c34:	0159      	lsls	r1, r3, #5
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	0013      	movs	r3, r2
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f7ff ff4e 	bl	8004ae0 <SPI_WaitFifoStateUntilTimeout>
 8004c44:	1e03      	subs	r3, r0, #0
 8004c46:	d007      	beq.n	8004c58 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c4c:	2220      	movs	r2, #32
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e027      	b.n	8004ca8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	68f8      	ldr	r0, [r7, #12]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	9300      	str	r3, [sp, #0]
 8004c60:	0013      	movs	r3, r2
 8004c62:	2200      	movs	r2, #0
 8004c64:	2180      	movs	r1, #128	; 0x80
 8004c66:	f7ff fead 	bl	80049c4 <SPI_WaitFlagStateUntilTimeout>
 8004c6a:	1e03      	subs	r3, r0, #0
 8004c6c:	d007      	beq.n	8004c7e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c72:	2220      	movs	r2, #32
 8004c74:	431a      	orrs	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e014      	b.n	8004ca8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c7e:	68ba      	ldr	r2, [r7, #8]
 8004c80:	23c0      	movs	r3, #192	; 0xc0
 8004c82:	00d9      	lsls	r1, r3, #3
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	0013      	movs	r3, r2
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f7ff ff27 	bl	8004ae0 <SPI_WaitFifoStateUntilTimeout>
 8004c92:	1e03      	subs	r3, r0, #0
 8004c94:	d007      	beq.n	8004ca6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c9a:	2220      	movs	r2, #32
 8004c9c:	431a      	orrs	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e000      	b.n	8004ca8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	0018      	movs	r0, r3
 8004caa:	46bd      	mov	sp, r7
 8004cac:	b004      	add	sp, #16
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d101      	bne.n	8004cc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e042      	b.n	8004d48 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	223d      	movs	r2, #61	; 0x3d
 8004cc6:	5c9b      	ldrb	r3, [r3, r2]
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d107      	bne.n	8004cde <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	223c      	movs	r2, #60	; 0x3c
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	0018      	movs	r0, r3
 8004cda:	f7fc fec5 	bl	8001a68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	223d      	movs	r2, #61	; 0x3d
 8004ce2:	2102      	movs	r1, #2
 8004ce4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	3304      	adds	r3, #4
 8004cee:	0019      	movs	r1, r3
 8004cf0:	0010      	movs	r0, r2
 8004cf2:	f000 fbe7 	bl	80054c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2246      	movs	r2, #70	; 0x46
 8004cfa:	2101      	movs	r1, #1
 8004cfc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	223e      	movs	r2, #62	; 0x3e
 8004d02:	2101      	movs	r1, #1
 8004d04:	5499      	strb	r1, [r3, r2]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	223f      	movs	r2, #63	; 0x3f
 8004d0a:	2101      	movs	r1, #1
 8004d0c:	5499      	strb	r1, [r3, r2]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2240      	movs	r2, #64	; 0x40
 8004d12:	2101      	movs	r1, #1
 8004d14:	5499      	strb	r1, [r3, r2]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2241      	movs	r2, #65	; 0x41
 8004d1a:	2101      	movs	r1, #1
 8004d1c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2242      	movs	r2, #66	; 0x42
 8004d22:	2101      	movs	r1, #1
 8004d24:	5499      	strb	r1, [r3, r2]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2243      	movs	r2, #67	; 0x43
 8004d2a:	2101      	movs	r1, #1
 8004d2c:	5499      	strb	r1, [r3, r2]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2244      	movs	r2, #68	; 0x44
 8004d32:	2101      	movs	r1, #1
 8004d34:	5499      	strb	r1, [r3, r2]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2245      	movs	r2, #69	; 0x45
 8004d3a:	2101      	movs	r1, #1
 8004d3c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	223d      	movs	r2, #61	; 0x3d
 8004d42:	2101      	movs	r1, #1
 8004d44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	0018      	movs	r0, r3
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	b002      	add	sp, #8
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e042      	b.n	8004de8 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	223d      	movs	r2, #61	; 0x3d
 8004d66:	5c9b      	ldrb	r3, [r3, r2]
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d107      	bne.n	8004d7e <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	223c      	movs	r2, #60	; 0x3c
 8004d72:	2100      	movs	r1, #0
 8004d74:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	0018      	movs	r0, r3
 8004d7a:	f000 f839 	bl	8004df0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	223d      	movs	r2, #61	; 0x3d
 8004d82:	2102      	movs	r1, #2
 8004d84:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	3304      	adds	r3, #4
 8004d8e:	0019      	movs	r1, r3
 8004d90:	0010      	movs	r0, r2
 8004d92:	f000 fb97 	bl	80054c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2246      	movs	r2, #70	; 0x46
 8004d9a:	2101      	movs	r1, #1
 8004d9c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	223e      	movs	r2, #62	; 0x3e
 8004da2:	2101      	movs	r1, #1
 8004da4:	5499      	strb	r1, [r3, r2]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	223f      	movs	r2, #63	; 0x3f
 8004daa:	2101      	movs	r1, #1
 8004dac:	5499      	strb	r1, [r3, r2]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2240      	movs	r2, #64	; 0x40
 8004db2:	2101      	movs	r1, #1
 8004db4:	5499      	strb	r1, [r3, r2]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2241      	movs	r2, #65	; 0x41
 8004dba:	2101      	movs	r1, #1
 8004dbc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2242      	movs	r2, #66	; 0x42
 8004dc2:	2101      	movs	r1, #1
 8004dc4:	5499      	strb	r1, [r3, r2]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2243      	movs	r2, #67	; 0x43
 8004dca:	2101      	movs	r1, #1
 8004dcc:	5499      	strb	r1, [r3, r2]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2244      	movs	r2, #68	; 0x44
 8004dd2:	2101      	movs	r1, #1
 8004dd4:	5499      	strb	r1, [r3, r2]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2245      	movs	r2, #69	; 0x45
 8004dda:	2101      	movs	r1, #1
 8004ddc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	223d      	movs	r2, #61	; 0x3d
 8004de2:	2101      	movs	r1, #1
 8004de4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	0018      	movs	r0, r3
 8004dea:	46bd      	mov	sp, r7
 8004dec:	b002      	add	sp, #8
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004df8:	46c0      	nop			; (mov r8, r8)
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	b002      	add	sp, #8
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e0a:	230f      	movs	r3, #15
 8004e0c:	18fb      	adds	r3, r7, r3
 8004e0e:	2200      	movs	r2, #0
 8004e10:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d108      	bne.n	8004e2a <HAL_TIM_OC_Start_IT+0x2a>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	223e      	movs	r2, #62	; 0x3e
 8004e1c:	5c9b      	ldrb	r3, [r3, r2]
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	3b01      	subs	r3, #1
 8004e22:	1e5a      	subs	r2, r3, #1
 8004e24:	4193      	sbcs	r3, r2
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	e01f      	b.n	8004e6a <HAL_TIM_OC_Start_IT+0x6a>
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	2b04      	cmp	r3, #4
 8004e2e:	d108      	bne.n	8004e42 <HAL_TIM_OC_Start_IT+0x42>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	223f      	movs	r2, #63	; 0x3f
 8004e34:	5c9b      	ldrb	r3, [r3, r2]
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	1e5a      	subs	r2, r3, #1
 8004e3c:	4193      	sbcs	r3, r2
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	e013      	b.n	8004e6a <HAL_TIM_OC_Start_IT+0x6a>
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	2b08      	cmp	r3, #8
 8004e46:	d108      	bne.n	8004e5a <HAL_TIM_OC_Start_IT+0x5a>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2240      	movs	r2, #64	; 0x40
 8004e4c:	5c9b      	ldrb	r3, [r3, r2]
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	3b01      	subs	r3, #1
 8004e52:	1e5a      	subs	r2, r3, #1
 8004e54:	4193      	sbcs	r3, r2
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	e007      	b.n	8004e6a <HAL_TIM_OC_Start_IT+0x6a>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2241      	movs	r2, #65	; 0x41
 8004e5e:	5c9b      	ldrb	r3, [r3, r2]
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	3b01      	subs	r3, #1
 8004e64:	1e5a      	subs	r2, r3, #1
 8004e66:	4193      	sbcs	r3, r2
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e0b7      	b.n	8004fe2 <HAL_TIM_OC_Start_IT+0x1e2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d104      	bne.n	8004e82 <HAL_TIM_OC_Start_IT+0x82>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	223e      	movs	r2, #62	; 0x3e
 8004e7c:	2102      	movs	r1, #2
 8004e7e:	5499      	strb	r1, [r3, r2]
 8004e80:	e013      	b.n	8004eaa <HAL_TIM_OC_Start_IT+0xaa>
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	2b04      	cmp	r3, #4
 8004e86:	d104      	bne.n	8004e92 <HAL_TIM_OC_Start_IT+0x92>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	223f      	movs	r2, #63	; 0x3f
 8004e8c:	2102      	movs	r1, #2
 8004e8e:	5499      	strb	r1, [r3, r2]
 8004e90:	e00b      	b.n	8004eaa <HAL_TIM_OC_Start_IT+0xaa>
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	2b08      	cmp	r3, #8
 8004e96:	d104      	bne.n	8004ea2 <HAL_TIM_OC_Start_IT+0xa2>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2240      	movs	r2, #64	; 0x40
 8004e9c:	2102      	movs	r1, #2
 8004e9e:	5499      	strb	r1, [r3, r2]
 8004ea0:	e003      	b.n	8004eaa <HAL_TIM_OC_Start_IT+0xaa>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2241      	movs	r2, #65	; 0x41
 8004ea6:	2102      	movs	r1, #2
 8004ea8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	2b0c      	cmp	r3, #12
 8004eae:	d02a      	beq.n	8004f06 <HAL_TIM_OC_Start_IT+0x106>
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	2b0c      	cmp	r3, #12
 8004eb4:	d830      	bhi.n	8004f18 <HAL_TIM_OC_Start_IT+0x118>
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b08      	cmp	r3, #8
 8004eba:	d01b      	beq.n	8004ef4 <HAL_TIM_OC_Start_IT+0xf4>
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	2b08      	cmp	r3, #8
 8004ec0:	d82a      	bhi.n	8004f18 <HAL_TIM_OC_Start_IT+0x118>
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d003      	beq.n	8004ed0 <HAL_TIM_OC_Start_IT+0xd0>
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	2b04      	cmp	r3, #4
 8004ecc:	d009      	beq.n	8004ee2 <HAL_TIM_OC_Start_IT+0xe2>
 8004ece:	e023      	b.n	8004f18 <HAL_TIM_OC_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68da      	ldr	r2, [r3, #12]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2102      	movs	r1, #2
 8004edc:	430a      	orrs	r2, r1
 8004ede:	60da      	str	r2, [r3, #12]
      break;
 8004ee0:	e01f      	b.n	8004f22 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68da      	ldr	r2, [r3, #12]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2104      	movs	r1, #4
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	60da      	str	r2, [r3, #12]
      break;
 8004ef2:	e016      	b.n	8004f22 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68da      	ldr	r2, [r3, #12]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2108      	movs	r1, #8
 8004f00:	430a      	orrs	r2, r1
 8004f02:	60da      	str	r2, [r3, #12]
      break;
 8004f04:	e00d      	b.n	8004f22 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68da      	ldr	r2, [r3, #12]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2110      	movs	r1, #16
 8004f12:	430a      	orrs	r2, r1
 8004f14:	60da      	str	r2, [r3, #12]
      break;
 8004f16:	e004      	b.n	8004f22 <HAL_TIM_OC_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 8004f18:	230f      	movs	r3, #15
 8004f1a:	18fb      	adds	r3, r7, r3
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	701a      	strb	r2, [r3, #0]
      break;
 8004f20:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8004f22:	230f      	movs	r3, #15
 8004f24:	18fb      	adds	r3, r7, r3
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d157      	bne.n	8004fdc <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	6839      	ldr	r1, [r7, #0]
 8004f32:	2201      	movs	r2, #1
 8004f34:	0018      	movs	r0, r3
 8004f36:	f000 fddb 	bl	8005af0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a2b      	ldr	r2, [pc, #172]	; (8004fec <HAL_TIM_OC_Start_IT+0x1ec>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d00e      	beq.n	8004f62 <HAL_TIM_OC_Start_IT+0x162>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a29      	ldr	r2, [pc, #164]	; (8004ff0 <HAL_TIM_OC_Start_IT+0x1f0>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d009      	beq.n	8004f62 <HAL_TIM_OC_Start_IT+0x162>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a28      	ldr	r2, [pc, #160]	; (8004ff4 <HAL_TIM_OC_Start_IT+0x1f4>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d004      	beq.n	8004f62 <HAL_TIM_OC_Start_IT+0x162>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a26      	ldr	r2, [pc, #152]	; (8004ff8 <HAL_TIM_OC_Start_IT+0x1f8>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d101      	bne.n	8004f66 <HAL_TIM_OC_Start_IT+0x166>
 8004f62:	2301      	movs	r3, #1
 8004f64:	e000      	b.n	8004f68 <HAL_TIM_OC_Start_IT+0x168>
 8004f66:	2300      	movs	r3, #0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d008      	beq.n	8004f7e <HAL_TIM_OC_Start_IT+0x17e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2180      	movs	r1, #128	; 0x80
 8004f78:	0209      	lsls	r1, r1, #8
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a1a      	ldr	r2, [pc, #104]	; (8004fec <HAL_TIM_OC_Start_IT+0x1ec>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d00f      	beq.n	8004fa8 <HAL_TIM_OC_Start_IT+0x1a8>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	2380      	movs	r3, #128	; 0x80
 8004f8e:	05db      	lsls	r3, r3, #23
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d009      	beq.n	8004fa8 <HAL_TIM_OC_Start_IT+0x1a8>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a18      	ldr	r2, [pc, #96]	; (8004ffc <HAL_TIM_OC_Start_IT+0x1fc>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d004      	beq.n	8004fa8 <HAL_TIM_OC_Start_IT+0x1a8>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a13      	ldr	r2, [pc, #76]	; (8004ff0 <HAL_TIM_OC_Start_IT+0x1f0>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d111      	bne.n	8004fcc <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	2207      	movs	r2, #7
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	2b06      	cmp	r3, #6
 8004fb8:	d010      	beq.n	8004fdc <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2101      	movs	r1, #1
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fca:	e007      	b.n	8004fdc <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2101      	movs	r1, #1
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004fdc:	230f      	movs	r3, #15
 8004fde:	18fb      	adds	r3, r7, r3
 8004fe0:	781b      	ldrb	r3, [r3, #0]
}
 8004fe2:	0018      	movs	r0, r3
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	b004      	add	sp, #16
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	46c0      	nop			; (mov r8, r8)
 8004fec:	40012c00 	.word	0x40012c00
 8004ff0:	40014000 	.word	0x40014000
 8004ff4:	40014400 	.word	0x40014400
 8004ff8:	40014800 	.word	0x40014800
 8004ffc:	40000400 	.word	0x40000400

08005000 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	2202      	movs	r2, #2
 8005010:	4013      	ands	r3, r2
 8005012:	2b02      	cmp	r3, #2
 8005014:	d124      	bne.n	8005060 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	2202      	movs	r2, #2
 800501e:	4013      	ands	r3, r2
 8005020:	2b02      	cmp	r3, #2
 8005022:	d11d      	bne.n	8005060 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2203      	movs	r2, #3
 800502a:	4252      	negs	r2, r2
 800502c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2201      	movs	r2, #1
 8005032:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	2203      	movs	r2, #3
 800503c:	4013      	ands	r3, r2
 800503e:	d004      	beq.n	800504a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	0018      	movs	r0, r3
 8005044:	f000 fa26 	bl	8005494 <HAL_TIM_IC_CaptureCallback>
 8005048:	e007      	b.n	800505a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	0018      	movs	r0, r3
 800504e:	f7fb f91b 	bl	8000288 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	0018      	movs	r0, r3
 8005056:	f000 fa25 	bl	80054a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	2204      	movs	r2, #4
 8005068:	4013      	ands	r3, r2
 800506a:	2b04      	cmp	r3, #4
 800506c:	d125      	bne.n	80050ba <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	2204      	movs	r2, #4
 8005076:	4013      	ands	r3, r2
 8005078:	2b04      	cmp	r3, #4
 800507a:	d11e      	bne.n	80050ba <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2205      	movs	r2, #5
 8005082:	4252      	negs	r2, r2
 8005084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2202      	movs	r2, #2
 800508a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	699a      	ldr	r2, [r3, #24]
 8005092:	23c0      	movs	r3, #192	; 0xc0
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4013      	ands	r3, r2
 8005098:	d004      	beq.n	80050a4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	0018      	movs	r0, r3
 800509e:	f000 f9f9 	bl	8005494 <HAL_TIM_IC_CaptureCallback>
 80050a2:	e007      	b.n	80050b4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	0018      	movs	r0, r3
 80050a8:	f7fb f8ee 	bl	8000288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	0018      	movs	r0, r3
 80050b0:	f000 f9f8 	bl	80054a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	2208      	movs	r2, #8
 80050c2:	4013      	ands	r3, r2
 80050c4:	2b08      	cmp	r3, #8
 80050c6:	d124      	bne.n	8005112 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	2208      	movs	r2, #8
 80050d0:	4013      	ands	r3, r2
 80050d2:	2b08      	cmp	r3, #8
 80050d4:	d11d      	bne.n	8005112 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2209      	movs	r2, #9
 80050dc:	4252      	negs	r2, r2
 80050de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2204      	movs	r2, #4
 80050e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	69db      	ldr	r3, [r3, #28]
 80050ec:	2203      	movs	r2, #3
 80050ee:	4013      	ands	r3, r2
 80050f0:	d004      	beq.n	80050fc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	0018      	movs	r0, r3
 80050f6:	f000 f9cd 	bl	8005494 <HAL_TIM_IC_CaptureCallback>
 80050fa:	e007      	b.n	800510c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	0018      	movs	r0, r3
 8005100:	f7fb f8c2 	bl	8000288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	0018      	movs	r0, r3
 8005108:	f000 f9cc 	bl	80054a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	2210      	movs	r2, #16
 800511a:	4013      	ands	r3, r2
 800511c:	2b10      	cmp	r3, #16
 800511e:	d125      	bne.n	800516c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	2210      	movs	r2, #16
 8005128:	4013      	ands	r3, r2
 800512a:	2b10      	cmp	r3, #16
 800512c:	d11e      	bne.n	800516c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2211      	movs	r2, #17
 8005134:	4252      	negs	r2, r2
 8005136:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2208      	movs	r2, #8
 800513c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	69da      	ldr	r2, [r3, #28]
 8005144:	23c0      	movs	r3, #192	; 0xc0
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4013      	ands	r3, r2
 800514a:	d004      	beq.n	8005156 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	0018      	movs	r0, r3
 8005150:	f000 f9a0 	bl	8005494 <HAL_TIM_IC_CaptureCallback>
 8005154:	e007      	b.n	8005166 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	0018      	movs	r0, r3
 800515a:	f7fb f895 	bl	8000288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	0018      	movs	r0, r3
 8005162:	f000 f99f 	bl	80054a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	2201      	movs	r2, #1
 8005174:	4013      	ands	r3, r2
 8005176:	2b01      	cmp	r3, #1
 8005178:	d10f      	bne.n	800519a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	2201      	movs	r2, #1
 8005182:	4013      	ands	r3, r2
 8005184:	2b01      	cmp	r3, #1
 8005186:	d108      	bne.n	800519a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2202      	movs	r2, #2
 800518e:	4252      	negs	r2, r2
 8005190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	0018      	movs	r0, r3
 8005196:	f000 f975 	bl	8005484 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	2280      	movs	r2, #128	; 0x80
 80051a2:	4013      	ands	r3, r2
 80051a4:	2b80      	cmp	r3, #128	; 0x80
 80051a6:	d10f      	bne.n	80051c8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	2280      	movs	r2, #128	; 0x80
 80051b0:	4013      	ands	r3, r2
 80051b2:	2b80      	cmp	r3, #128	; 0x80
 80051b4:	d108      	bne.n	80051c8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2281      	movs	r2, #129	; 0x81
 80051bc:	4252      	negs	r2, r2
 80051be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	0018      	movs	r0, r3
 80051c4:	f000 fd7c 	bl	8005cc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	2240      	movs	r2, #64	; 0x40
 80051d0:	4013      	ands	r3, r2
 80051d2:	2b40      	cmp	r3, #64	; 0x40
 80051d4:	d10f      	bne.n	80051f6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	2240      	movs	r2, #64	; 0x40
 80051de:	4013      	ands	r3, r2
 80051e0:	2b40      	cmp	r3, #64	; 0x40
 80051e2:	d108      	bne.n	80051f6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2241      	movs	r2, #65	; 0x41
 80051ea:	4252      	negs	r2, r2
 80051ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	0018      	movs	r0, r3
 80051f2:	f000 f95f 	bl	80054b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	2220      	movs	r2, #32
 80051fe:	4013      	ands	r3, r2
 8005200:	2b20      	cmp	r3, #32
 8005202:	d10f      	bne.n	8005224 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	2220      	movs	r2, #32
 800520c:	4013      	ands	r3, r2
 800520e:	2b20      	cmp	r3, #32
 8005210:	d108      	bne.n	8005224 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2221      	movs	r2, #33	; 0x21
 8005218:	4252      	negs	r2, r2
 800521a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	0018      	movs	r0, r3
 8005220:	f000 fd46 	bl	8005cb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005224:	46c0      	nop			; (mov r8, r8)
 8005226:	46bd      	mov	sp, r7
 8005228:	b002      	add	sp, #8
 800522a:	bd80      	pop	{r7, pc}

0800522c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b086      	sub	sp, #24
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005238:	2317      	movs	r3, #23
 800523a:	18fb      	adds	r3, r7, r3
 800523c:	2200      	movs	r2, #0
 800523e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	223c      	movs	r2, #60	; 0x3c
 8005244:	5c9b      	ldrb	r3, [r3, r2]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d101      	bne.n	800524e <HAL_TIM_OC_ConfigChannel+0x22>
 800524a:	2302      	movs	r3, #2
 800524c:	e042      	b.n	80052d4 <HAL_TIM_OC_ConfigChannel+0xa8>
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	223c      	movs	r2, #60	; 0x3c
 8005252:	2101      	movs	r1, #1
 8005254:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2b0c      	cmp	r3, #12
 800525a:	d027      	beq.n	80052ac <HAL_TIM_OC_ConfigChannel+0x80>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2b0c      	cmp	r3, #12
 8005260:	d82c      	bhi.n	80052bc <HAL_TIM_OC_ConfigChannel+0x90>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2b08      	cmp	r3, #8
 8005266:	d019      	beq.n	800529c <HAL_TIM_OC_ConfigChannel+0x70>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b08      	cmp	r3, #8
 800526c:	d826      	bhi.n	80052bc <HAL_TIM_OC_ConfigChannel+0x90>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d003      	beq.n	800527c <HAL_TIM_OC_ConfigChannel+0x50>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2b04      	cmp	r3, #4
 8005278:	d008      	beq.n	800528c <HAL_TIM_OC_ConfigChannel+0x60>
 800527a:	e01f      	b.n	80052bc <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68ba      	ldr	r2, [r7, #8]
 8005282:	0011      	movs	r1, r2
 8005284:	0018      	movs	r0, r3
 8005286:	f000 f99d 	bl	80055c4 <TIM_OC1_SetConfig>
      break;
 800528a:	e01c      	b.n	80052c6 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68ba      	ldr	r2, [r7, #8]
 8005292:	0011      	movs	r1, r2
 8005294:	0018      	movs	r0, r3
 8005296:	f000 fa1d 	bl	80056d4 <TIM_OC2_SetConfig>
      break;
 800529a:	e014      	b.n	80052c6 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68ba      	ldr	r2, [r7, #8]
 80052a2:	0011      	movs	r1, r2
 80052a4:	0018      	movs	r0, r3
 80052a6:	f000 fa99 	bl	80057dc <TIM_OC3_SetConfig>
      break;
 80052aa:	e00c      	b.n	80052c6 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	0011      	movs	r1, r2
 80052b4:	0018      	movs	r0, r3
 80052b6:	f000 fb17 	bl	80058e8 <TIM_OC4_SetConfig>
      break;
 80052ba:	e004      	b.n	80052c6 <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 80052bc:	2317      	movs	r3, #23
 80052be:	18fb      	adds	r3, r7, r3
 80052c0:	2201      	movs	r2, #1
 80052c2:	701a      	strb	r2, [r3, #0]
      break;
 80052c4:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	223c      	movs	r2, #60	; 0x3c
 80052ca:	2100      	movs	r1, #0
 80052cc:	5499      	strb	r1, [r3, r2]

  return status;
 80052ce:	2317      	movs	r3, #23
 80052d0:	18fb      	adds	r3, r7, r3
 80052d2:	781b      	ldrb	r3, [r3, #0]
}
 80052d4:	0018      	movs	r0, r3
 80052d6:	46bd      	mov	sp, r7
 80052d8:	b006      	add	sp, #24
 80052da:	bd80      	pop	{r7, pc}

080052dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052e6:	230f      	movs	r3, #15
 80052e8:	18fb      	adds	r3, r7, r3
 80052ea:	2200      	movs	r2, #0
 80052ec:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	223c      	movs	r2, #60	; 0x3c
 80052f2:	5c9b      	ldrb	r3, [r3, r2]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d101      	bne.n	80052fc <HAL_TIM_ConfigClockSource+0x20>
 80052f8:	2302      	movs	r3, #2
 80052fa:	e0bc      	b.n	8005476 <HAL_TIM_ConfigClockSource+0x19a>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	223c      	movs	r2, #60	; 0x3c
 8005300:	2101      	movs	r1, #1
 8005302:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	223d      	movs	r2, #61	; 0x3d
 8005308:	2102      	movs	r1, #2
 800530a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	2277      	movs	r2, #119	; 0x77
 8005318:	4393      	bics	r3, r2
 800531a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	4a58      	ldr	r2, [pc, #352]	; (8005480 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005320:	4013      	ands	r3, r2
 8005322:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68ba      	ldr	r2, [r7, #8]
 800532a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2280      	movs	r2, #128	; 0x80
 8005332:	0192      	lsls	r2, r2, #6
 8005334:	4293      	cmp	r3, r2
 8005336:	d040      	beq.n	80053ba <HAL_TIM_ConfigClockSource+0xde>
 8005338:	2280      	movs	r2, #128	; 0x80
 800533a:	0192      	lsls	r2, r2, #6
 800533c:	4293      	cmp	r3, r2
 800533e:	d900      	bls.n	8005342 <HAL_TIM_ConfigClockSource+0x66>
 8005340:	e088      	b.n	8005454 <HAL_TIM_ConfigClockSource+0x178>
 8005342:	2280      	movs	r2, #128	; 0x80
 8005344:	0152      	lsls	r2, r2, #5
 8005346:	4293      	cmp	r3, r2
 8005348:	d100      	bne.n	800534c <HAL_TIM_ConfigClockSource+0x70>
 800534a:	e088      	b.n	800545e <HAL_TIM_ConfigClockSource+0x182>
 800534c:	2280      	movs	r2, #128	; 0x80
 800534e:	0152      	lsls	r2, r2, #5
 8005350:	4293      	cmp	r3, r2
 8005352:	d900      	bls.n	8005356 <HAL_TIM_ConfigClockSource+0x7a>
 8005354:	e07e      	b.n	8005454 <HAL_TIM_ConfigClockSource+0x178>
 8005356:	2b70      	cmp	r3, #112	; 0x70
 8005358:	d018      	beq.n	800538c <HAL_TIM_ConfigClockSource+0xb0>
 800535a:	d900      	bls.n	800535e <HAL_TIM_ConfigClockSource+0x82>
 800535c:	e07a      	b.n	8005454 <HAL_TIM_ConfigClockSource+0x178>
 800535e:	2b60      	cmp	r3, #96	; 0x60
 8005360:	d04f      	beq.n	8005402 <HAL_TIM_ConfigClockSource+0x126>
 8005362:	d900      	bls.n	8005366 <HAL_TIM_ConfigClockSource+0x8a>
 8005364:	e076      	b.n	8005454 <HAL_TIM_ConfigClockSource+0x178>
 8005366:	2b50      	cmp	r3, #80	; 0x50
 8005368:	d03b      	beq.n	80053e2 <HAL_TIM_ConfigClockSource+0x106>
 800536a:	d900      	bls.n	800536e <HAL_TIM_ConfigClockSource+0x92>
 800536c:	e072      	b.n	8005454 <HAL_TIM_ConfigClockSource+0x178>
 800536e:	2b40      	cmp	r3, #64	; 0x40
 8005370:	d057      	beq.n	8005422 <HAL_TIM_ConfigClockSource+0x146>
 8005372:	d900      	bls.n	8005376 <HAL_TIM_ConfigClockSource+0x9a>
 8005374:	e06e      	b.n	8005454 <HAL_TIM_ConfigClockSource+0x178>
 8005376:	2b30      	cmp	r3, #48	; 0x30
 8005378:	d063      	beq.n	8005442 <HAL_TIM_ConfigClockSource+0x166>
 800537a:	d86b      	bhi.n	8005454 <HAL_TIM_ConfigClockSource+0x178>
 800537c:	2b20      	cmp	r3, #32
 800537e:	d060      	beq.n	8005442 <HAL_TIM_ConfigClockSource+0x166>
 8005380:	d868      	bhi.n	8005454 <HAL_TIM_ConfigClockSource+0x178>
 8005382:	2b00      	cmp	r3, #0
 8005384:	d05d      	beq.n	8005442 <HAL_TIM_ConfigClockSource+0x166>
 8005386:	2b10      	cmp	r3, #16
 8005388:	d05b      	beq.n	8005442 <HAL_TIM_ConfigClockSource+0x166>
 800538a:	e063      	b.n	8005454 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6818      	ldr	r0, [r3, #0]
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	6899      	ldr	r1, [r3, #8]
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	685a      	ldr	r2, [r3, #4]
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	f000 fb88 	bl	8005ab0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	2277      	movs	r2, #119	; 0x77
 80053ac:	4313      	orrs	r3, r2
 80053ae:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68ba      	ldr	r2, [r7, #8]
 80053b6:	609a      	str	r2, [r3, #8]
      break;
 80053b8:	e052      	b.n	8005460 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6818      	ldr	r0, [r3, #0]
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	6899      	ldr	r1, [r3, #8]
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	f000 fb71 	bl	8005ab0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	689a      	ldr	r2, [r3, #8]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2180      	movs	r1, #128	; 0x80
 80053da:	01c9      	lsls	r1, r1, #7
 80053dc:	430a      	orrs	r2, r1
 80053de:	609a      	str	r2, [r3, #8]
      break;
 80053e0:	e03e      	b.n	8005460 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6818      	ldr	r0, [r3, #0]
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	6859      	ldr	r1, [r3, #4]
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	001a      	movs	r2, r3
 80053f0:	f000 fae4 	bl	80059bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2150      	movs	r1, #80	; 0x50
 80053fa:	0018      	movs	r0, r3
 80053fc:	f000 fb3e 	bl	8005a7c <TIM_ITRx_SetConfig>
      break;
 8005400:	e02e      	b.n	8005460 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6818      	ldr	r0, [r3, #0]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	6859      	ldr	r1, [r3, #4]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	001a      	movs	r2, r3
 8005410:	f000 fb02 	bl	8005a18 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2160      	movs	r1, #96	; 0x60
 800541a:	0018      	movs	r0, r3
 800541c:	f000 fb2e 	bl	8005a7c <TIM_ITRx_SetConfig>
      break;
 8005420:	e01e      	b.n	8005460 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6818      	ldr	r0, [r3, #0]
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	6859      	ldr	r1, [r3, #4]
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	001a      	movs	r2, r3
 8005430:	f000 fac4 	bl	80059bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2140      	movs	r1, #64	; 0x40
 800543a:	0018      	movs	r0, r3
 800543c:	f000 fb1e 	bl	8005a7c <TIM_ITRx_SetConfig>
      break;
 8005440:	e00e      	b.n	8005460 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	0019      	movs	r1, r3
 800544c:	0010      	movs	r0, r2
 800544e:	f000 fb15 	bl	8005a7c <TIM_ITRx_SetConfig>
      break;
 8005452:	e005      	b.n	8005460 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005454:	230f      	movs	r3, #15
 8005456:	18fb      	adds	r3, r7, r3
 8005458:	2201      	movs	r2, #1
 800545a:	701a      	strb	r2, [r3, #0]
      break;
 800545c:	e000      	b.n	8005460 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800545e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	223d      	movs	r2, #61	; 0x3d
 8005464:	2101      	movs	r1, #1
 8005466:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	223c      	movs	r2, #60	; 0x3c
 800546c:	2100      	movs	r1, #0
 800546e:	5499      	strb	r1, [r3, r2]

  return status;
 8005470:	230f      	movs	r3, #15
 8005472:	18fb      	adds	r3, r7, r3
 8005474:	781b      	ldrb	r3, [r3, #0]
}
 8005476:	0018      	movs	r0, r3
 8005478:	46bd      	mov	sp, r7
 800547a:	b004      	add	sp, #16
 800547c:	bd80      	pop	{r7, pc}
 800547e:	46c0      	nop			; (mov r8, r8)
 8005480:	ffff00ff 	.word	0xffff00ff

08005484 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800548c:	46c0      	nop			; (mov r8, r8)
 800548e:	46bd      	mov	sp, r7
 8005490:	b002      	add	sp, #8
 8005492:	bd80      	pop	{r7, pc}

08005494 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800549c:	46c0      	nop			; (mov r8, r8)
 800549e:	46bd      	mov	sp, r7
 80054a0:	b002      	add	sp, #8
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054ac:	46c0      	nop			; (mov r8, r8)
 80054ae:	46bd      	mov	sp, r7
 80054b0:	b002      	add	sp, #8
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054bc:	46c0      	nop			; (mov r8, r8)
 80054be:	46bd      	mov	sp, r7
 80054c0:	b002      	add	sp, #8
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a34      	ldr	r2, [pc, #208]	; (80055a8 <TIM_Base_SetConfig+0xe4>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d008      	beq.n	80054ee <TIM_Base_SetConfig+0x2a>
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	2380      	movs	r3, #128	; 0x80
 80054e0:	05db      	lsls	r3, r3, #23
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d003      	beq.n	80054ee <TIM_Base_SetConfig+0x2a>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a30      	ldr	r2, [pc, #192]	; (80055ac <TIM_Base_SetConfig+0xe8>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d108      	bne.n	8005500 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2270      	movs	r2, #112	; 0x70
 80054f2:	4393      	bics	r3, r2
 80054f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a29      	ldr	r2, [pc, #164]	; (80055a8 <TIM_Base_SetConfig+0xe4>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d018      	beq.n	800553a <TIM_Base_SetConfig+0x76>
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	2380      	movs	r3, #128	; 0x80
 800550c:	05db      	lsls	r3, r3, #23
 800550e:	429a      	cmp	r2, r3
 8005510:	d013      	beq.n	800553a <TIM_Base_SetConfig+0x76>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a25      	ldr	r2, [pc, #148]	; (80055ac <TIM_Base_SetConfig+0xe8>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d00f      	beq.n	800553a <TIM_Base_SetConfig+0x76>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a24      	ldr	r2, [pc, #144]	; (80055b0 <TIM_Base_SetConfig+0xec>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d00b      	beq.n	800553a <TIM_Base_SetConfig+0x76>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a23      	ldr	r2, [pc, #140]	; (80055b4 <TIM_Base_SetConfig+0xf0>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d007      	beq.n	800553a <TIM_Base_SetConfig+0x76>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a22      	ldr	r2, [pc, #136]	; (80055b8 <TIM_Base_SetConfig+0xf4>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d003      	beq.n	800553a <TIM_Base_SetConfig+0x76>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a21      	ldr	r2, [pc, #132]	; (80055bc <TIM_Base_SetConfig+0xf8>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d108      	bne.n	800554c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	4a20      	ldr	r2, [pc, #128]	; (80055c0 <TIM_Base_SetConfig+0xfc>)
 800553e:	4013      	ands	r3, r2
 8005540:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	4313      	orrs	r3, r2
 800554a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2280      	movs	r2, #128	; 0x80
 8005550:	4393      	bics	r3, r2
 8005552:	001a      	movs	r2, r3
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	695b      	ldr	r3, [r3, #20]
 8005558:	4313      	orrs	r3, r2
 800555a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	689a      	ldr	r2, [r3, #8]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a0c      	ldr	r2, [pc, #48]	; (80055a8 <TIM_Base_SetConfig+0xe4>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d00b      	beq.n	8005592 <TIM_Base_SetConfig+0xce>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a0d      	ldr	r2, [pc, #52]	; (80055b4 <TIM_Base_SetConfig+0xf0>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d007      	beq.n	8005592 <TIM_Base_SetConfig+0xce>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a0c      	ldr	r2, [pc, #48]	; (80055b8 <TIM_Base_SetConfig+0xf4>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d003      	beq.n	8005592 <TIM_Base_SetConfig+0xce>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a0b      	ldr	r2, [pc, #44]	; (80055bc <TIM_Base_SetConfig+0xf8>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d103      	bne.n	800559a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	691a      	ldr	r2, [r3, #16]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2201      	movs	r2, #1
 800559e:	615a      	str	r2, [r3, #20]
}
 80055a0:	46c0      	nop			; (mov r8, r8)
 80055a2:	46bd      	mov	sp, r7
 80055a4:	b004      	add	sp, #16
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	40012c00 	.word	0x40012c00
 80055ac:	40000400 	.word	0x40000400
 80055b0:	40002000 	.word	0x40002000
 80055b4:	40014000 	.word	0x40014000
 80055b8:	40014400 	.word	0x40014400
 80055bc:	40014800 	.word	0x40014800
 80055c0:	fffffcff 	.word	0xfffffcff

080055c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b086      	sub	sp, #24
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	2201      	movs	r2, #1
 80055d4:	4393      	bics	r3, r2
 80055d6:	001a      	movs	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a1b      	ldr	r3, [r3, #32]
 80055e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2270      	movs	r2, #112	; 0x70
 80055f2:	4393      	bics	r3, r2
 80055f4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2203      	movs	r2, #3
 80055fa:	4393      	bics	r3, r2
 80055fc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	4313      	orrs	r3, r2
 8005606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	2202      	movs	r2, #2
 800560c:	4393      	bics	r3, r2
 800560e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	697a      	ldr	r2, [r7, #20]
 8005616:	4313      	orrs	r3, r2
 8005618:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a27      	ldr	r2, [pc, #156]	; (80056bc <TIM_OC1_SetConfig+0xf8>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d00b      	beq.n	800563a <TIM_OC1_SetConfig+0x76>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a26      	ldr	r2, [pc, #152]	; (80056c0 <TIM_OC1_SetConfig+0xfc>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d007      	beq.n	800563a <TIM_OC1_SetConfig+0x76>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a25      	ldr	r2, [pc, #148]	; (80056c4 <TIM_OC1_SetConfig+0x100>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d003      	beq.n	800563a <TIM_OC1_SetConfig+0x76>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a24      	ldr	r2, [pc, #144]	; (80056c8 <TIM_OC1_SetConfig+0x104>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d10c      	bne.n	8005654 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	2208      	movs	r2, #8
 800563e:	4393      	bics	r3, r2
 8005640:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	4313      	orrs	r3, r2
 800564a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	2204      	movs	r2, #4
 8005650:	4393      	bics	r3, r2
 8005652:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a19      	ldr	r2, [pc, #100]	; (80056bc <TIM_OC1_SetConfig+0xf8>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d00b      	beq.n	8005674 <TIM_OC1_SetConfig+0xb0>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a18      	ldr	r2, [pc, #96]	; (80056c0 <TIM_OC1_SetConfig+0xfc>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d007      	beq.n	8005674 <TIM_OC1_SetConfig+0xb0>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a17      	ldr	r2, [pc, #92]	; (80056c4 <TIM_OC1_SetConfig+0x100>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d003      	beq.n	8005674 <TIM_OC1_SetConfig+0xb0>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a16      	ldr	r2, [pc, #88]	; (80056c8 <TIM_OC1_SetConfig+0x104>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d111      	bne.n	8005698 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	4a15      	ldr	r2, [pc, #84]	; (80056cc <TIM_OC1_SetConfig+0x108>)
 8005678:	4013      	ands	r3, r2
 800567a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	4a14      	ldr	r2, [pc, #80]	; (80056d0 <TIM_OC1_SetConfig+0x10c>)
 8005680:	4013      	ands	r3, r2
 8005682:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	4313      	orrs	r3, r2
 800568c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	699b      	ldr	r3, [r3, #24]
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	4313      	orrs	r3, r2
 8005696:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	685a      	ldr	r2, [r3, #4]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	621a      	str	r2, [r3, #32]
}
 80056b2:	46c0      	nop			; (mov r8, r8)
 80056b4:	46bd      	mov	sp, r7
 80056b6:	b006      	add	sp, #24
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	46c0      	nop			; (mov r8, r8)
 80056bc:	40012c00 	.word	0x40012c00
 80056c0:	40014000 	.word	0x40014000
 80056c4:	40014400 	.word	0x40014400
 80056c8:	40014800 	.word	0x40014800
 80056cc:	fffffeff 	.word	0xfffffeff
 80056d0:	fffffdff 	.word	0xfffffdff

080056d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b086      	sub	sp, #24
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	2210      	movs	r2, #16
 80056e4:	4393      	bics	r3, r2
 80056e6:	001a      	movs	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a1b      	ldr	r3, [r3, #32]
 80056f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	4a2e      	ldr	r2, [pc, #184]	; (80057bc <TIM_OC2_SetConfig+0xe8>)
 8005702:	4013      	ands	r3, r2
 8005704:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	4a2d      	ldr	r2, [pc, #180]	; (80057c0 <TIM_OC2_SetConfig+0xec>)
 800570a:	4013      	ands	r3, r2
 800570c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	021b      	lsls	r3, r3, #8
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	4313      	orrs	r3, r2
 8005718:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	2220      	movs	r2, #32
 800571e:	4393      	bics	r3, r2
 8005720:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	011b      	lsls	r3, r3, #4
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	4313      	orrs	r3, r2
 800572c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a24      	ldr	r2, [pc, #144]	; (80057c4 <TIM_OC2_SetConfig+0xf0>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d10d      	bne.n	8005752 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	2280      	movs	r2, #128	; 0x80
 800573a:	4393      	bics	r3, r2
 800573c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	011b      	lsls	r3, r3, #4
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	4313      	orrs	r3, r2
 8005748:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	2240      	movs	r2, #64	; 0x40
 800574e:	4393      	bics	r3, r2
 8005750:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a1b      	ldr	r2, [pc, #108]	; (80057c4 <TIM_OC2_SetConfig+0xf0>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d00b      	beq.n	8005772 <TIM_OC2_SetConfig+0x9e>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a1a      	ldr	r2, [pc, #104]	; (80057c8 <TIM_OC2_SetConfig+0xf4>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d007      	beq.n	8005772 <TIM_OC2_SetConfig+0x9e>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a19      	ldr	r2, [pc, #100]	; (80057cc <TIM_OC2_SetConfig+0xf8>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d003      	beq.n	8005772 <TIM_OC2_SetConfig+0x9e>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a18      	ldr	r2, [pc, #96]	; (80057d0 <TIM_OC2_SetConfig+0xfc>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d113      	bne.n	800579a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	4a17      	ldr	r2, [pc, #92]	; (80057d4 <TIM_OC2_SetConfig+0x100>)
 8005776:	4013      	ands	r3, r2
 8005778:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	4a16      	ldr	r2, [pc, #88]	; (80057d8 <TIM_OC2_SetConfig+0x104>)
 800577e:	4013      	ands	r3, r2
 8005780:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	4313      	orrs	r3, r2
 800578c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	4313      	orrs	r3, r2
 8005798:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	685a      	ldr	r2, [r3, #4]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	697a      	ldr	r2, [r7, #20]
 80057b2:	621a      	str	r2, [r3, #32]
}
 80057b4:	46c0      	nop			; (mov r8, r8)
 80057b6:	46bd      	mov	sp, r7
 80057b8:	b006      	add	sp, #24
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	ffff8fff 	.word	0xffff8fff
 80057c0:	fffffcff 	.word	0xfffffcff
 80057c4:	40012c00 	.word	0x40012c00
 80057c8:	40014000 	.word	0x40014000
 80057cc:	40014400 	.word	0x40014400
 80057d0:	40014800 	.word	0x40014800
 80057d4:	fffffbff 	.word	0xfffffbff
 80057d8:	fffff7ff 	.word	0xfffff7ff

080057dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b086      	sub	sp, #24
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	4a35      	ldr	r2, [pc, #212]	; (80058c0 <TIM_OC3_SetConfig+0xe4>)
 80057ec:	401a      	ands	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	69db      	ldr	r3, [r3, #28]
 8005802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2270      	movs	r2, #112	; 0x70
 8005808:	4393      	bics	r3, r2
 800580a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2203      	movs	r2, #3
 8005810:	4393      	bics	r3, r2
 8005812:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	4313      	orrs	r3, r2
 800581c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	4a28      	ldr	r2, [pc, #160]	; (80058c4 <TIM_OC3_SetConfig+0xe8>)
 8005822:	4013      	ands	r3, r2
 8005824:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	021b      	lsls	r3, r3, #8
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	4313      	orrs	r3, r2
 8005830:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a24      	ldr	r2, [pc, #144]	; (80058c8 <TIM_OC3_SetConfig+0xec>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d10d      	bne.n	8005856 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	4a23      	ldr	r2, [pc, #140]	; (80058cc <TIM_OC3_SetConfig+0xf0>)
 800583e:	4013      	ands	r3, r2
 8005840:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	021b      	lsls	r3, r3, #8
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	4313      	orrs	r3, r2
 800584c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	4a1f      	ldr	r2, [pc, #124]	; (80058d0 <TIM_OC3_SetConfig+0xf4>)
 8005852:	4013      	ands	r3, r2
 8005854:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a1b      	ldr	r2, [pc, #108]	; (80058c8 <TIM_OC3_SetConfig+0xec>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d00b      	beq.n	8005876 <TIM_OC3_SetConfig+0x9a>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a1c      	ldr	r2, [pc, #112]	; (80058d4 <TIM_OC3_SetConfig+0xf8>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d007      	beq.n	8005876 <TIM_OC3_SetConfig+0x9a>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a1b      	ldr	r2, [pc, #108]	; (80058d8 <TIM_OC3_SetConfig+0xfc>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d003      	beq.n	8005876 <TIM_OC3_SetConfig+0x9a>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a1a      	ldr	r2, [pc, #104]	; (80058dc <TIM_OC3_SetConfig+0x100>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d113      	bne.n	800589e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	4a19      	ldr	r2, [pc, #100]	; (80058e0 <TIM_OC3_SetConfig+0x104>)
 800587a:	4013      	ands	r3, r2
 800587c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	4a18      	ldr	r2, [pc, #96]	; (80058e4 <TIM_OC3_SetConfig+0x108>)
 8005882:	4013      	ands	r3, r2
 8005884:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	011b      	lsls	r3, r3, #4
 800588c:	693a      	ldr	r2, [r7, #16]
 800588e:	4313      	orrs	r3, r2
 8005890:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	011b      	lsls	r3, r3, #4
 8005898:	693a      	ldr	r2, [r7, #16]
 800589a:	4313      	orrs	r3, r2
 800589c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	685a      	ldr	r2, [r3, #4]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	697a      	ldr	r2, [r7, #20]
 80058b6:	621a      	str	r2, [r3, #32]
}
 80058b8:	46c0      	nop			; (mov r8, r8)
 80058ba:	46bd      	mov	sp, r7
 80058bc:	b006      	add	sp, #24
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	fffffeff 	.word	0xfffffeff
 80058c4:	fffffdff 	.word	0xfffffdff
 80058c8:	40012c00 	.word	0x40012c00
 80058cc:	fffff7ff 	.word	0xfffff7ff
 80058d0:	fffffbff 	.word	0xfffffbff
 80058d4:	40014000 	.word	0x40014000
 80058d8:	40014400 	.word	0x40014400
 80058dc:	40014800 	.word	0x40014800
 80058e0:	ffffefff 	.word	0xffffefff
 80058e4:	ffffdfff 	.word	0xffffdfff

080058e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b086      	sub	sp, #24
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a1b      	ldr	r3, [r3, #32]
 80058f6:	4a28      	ldr	r2, [pc, #160]	; (8005998 <TIM_OC4_SetConfig+0xb0>)
 80058f8:	401a      	ands	r2, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a1b      	ldr	r3, [r3, #32]
 8005902:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	69db      	ldr	r3, [r3, #28]
 800590e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	4a22      	ldr	r2, [pc, #136]	; (800599c <TIM_OC4_SetConfig+0xb4>)
 8005914:	4013      	ands	r3, r2
 8005916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	4a21      	ldr	r2, [pc, #132]	; (80059a0 <TIM_OC4_SetConfig+0xb8>)
 800591c:	4013      	ands	r3, r2
 800591e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	021b      	lsls	r3, r3, #8
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	4313      	orrs	r3, r2
 800592a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	4a1d      	ldr	r2, [pc, #116]	; (80059a4 <TIM_OC4_SetConfig+0xbc>)
 8005930:	4013      	ands	r3, r2
 8005932:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	031b      	lsls	r3, r3, #12
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	4313      	orrs	r3, r2
 800593e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a19      	ldr	r2, [pc, #100]	; (80059a8 <TIM_OC4_SetConfig+0xc0>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d00b      	beq.n	8005960 <TIM_OC4_SetConfig+0x78>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a18      	ldr	r2, [pc, #96]	; (80059ac <TIM_OC4_SetConfig+0xc4>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d007      	beq.n	8005960 <TIM_OC4_SetConfig+0x78>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a17      	ldr	r2, [pc, #92]	; (80059b0 <TIM_OC4_SetConfig+0xc8>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d003      	beq.n	8005960 <TIM_OC4_SetConfig+0x78>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a16      	ldr	r2, [pc, #88]	; (80059b4 <TIM_OC4_SetConfig+0xcc>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d109      	bne.n	8005974 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	4a15      	ldr	r2, [pc, #84]	; (80059b8 <TIM_OC4_SetConfig+0xd0>)
 8005964:	4013      	ands	r3, r2
 8005966:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	695b      	ldr	r3, [r3, #20]
 800596c:	019b      	lsls	r3, r3, #6
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	4313      	orrs	r3, r2
 8005972:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	685a      	ldr	r2, [r3, #4]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	621a      	str	r2, [r3, #32]
}
 800598e:	46c0      	nop			; (mov r8, r8)
 8005990:	46bd      	mov	sp, r7
 8005992:	b006      	add	sp, #24
 8005994:	bd80      	pop	{r7, pc}
 8005996:	46c0      	nop			; (mov r8, r8)
 8005998:	ffffefff 	.word	0xffffefff
 800599c:	ffff8fff 	.word	0xffff8fff
 80059a0:	fffffcff 	.word	0xfffffcff
 80059a4:	ffffdfff 	.word	0xffffdfff
 80059a8:	40012c00 	.word	0x40012c00
 80059ac:	40014000 	.word	0x40014000
 80059b0:	40014400 	.word	0x40014400
 80059b4:	40014800 	.word	0x40014800
 80059b8:	ffffbfff 	.word	0xffffbfff

080059bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b086      	sub	sp, #24
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6a1b      	ldr	r3, [r3, #32]
 80059cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	2201      	movs	r2, #1
 80059d4:	4393      	bics	r3, r2
 80059d6:	001a      	movs	r2, r3
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	699b      	ldr	r3, [r3, #24]
 80059e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	22f0      	movs	r2, #240	; 0xf0
 80059e6:	4393      	bics	r3, r2
 80059e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	011b      	lsls	r3, r3, #4
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	220a      	movs	r2, #10
 80059f8:	4393      	bics	r3, r2
 80059fa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	693a      	ldr	r2, [r7, #16]
 8005a08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	697a      	ldr	r2, [r7, #20]
 8005a0e:	621a      	str	r2, [r3, #32]
}
 8005a10:	46c0      	nop			; (mov r8, r8)
 8005a12:	46bd      	mov	sp, r7
 8005a14:	b006      	add	sp, #24
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b086      	sub	sp, #24
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6a1b      	ldr	r3, [r3, #32]
 8005a28:	2210      	movs	r2, #16
 8005a2a:	4393      	bics	r3, r2
 8005a2c:	001a      	movs	r2, r3
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6a1b      	ldr	r3, [r3, #32]
 8005a3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	4a0d      	ldr	r2, [pc, #52]	; (8005a78 <TIM_TI2_ConfigInputStage+0x60>)
 8005a42:	4013      	ands	r3, r2
 8005a44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	031b      	lsls	r3, r3, #12
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	22a0      	movs	r2, #160	; 0xa0
 8005a54:	4393      	bics	r3, r2
 8005a56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	011b      	lsls	r3, r3, #4
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	693a      	ldr	r2, [r7, #16]
 8005a6c:	621a      	str	r2, [r3, #32]
}
 8005a6e:	46c0      	nop			; (mov r8, r8)
 8005a70:	46bd      	mov	sp, r7
 8005a72:	b006      	add	sp, #24
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	46c0      	nop			; (mov r8, r8)
 8005a78:	ffff0fff 	.word	0xffff0fff

08005a7c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2270      	movs	r2, #112	; 0x70
 8005a90:	4393      	bics	r3, r2
 8005a92:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a94:	683a      	ldr	r2, [r7, #0]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	2207      	movs	r2, #7
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	609a      	str	r2, [r3, #8]
}
 8005aa6:	46c0      	nop			; (mov r8, r8)
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	b004      	add	sp, #16
 8005aac:	bd80      	pop	{r7, pc}
	...

08005ab0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b086      	sub	sp, #24
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	607a      	str	r2, [r7, #4]
 8005abc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	4a09      	ldr	r2, [pc, #36]	; (8005aec <TIM_ETR_SetConfig+0x3c>)
 8005ac8:	4013      	ands	r3, r2
 8005aca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	021a      	lsls	r2, r3, #8
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	431a      	orrs	r2, r3
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	697a      	ldr	r2, [r7, #20]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	609a      	str	r2, [r3, #8]
}
 8005ae4:	46c0      	nop			; (mov r8, r8)
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	b006      	add	sp, #24
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	ffff00ff 	.word	0xffff00ff

08005af0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b086      	sub	sp, #24
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	221f      	movs	r2, #31
 8005b00:	4013      	ands	r3, r2
 8005b02:	2201      	movs	r2, #1
 8005b04:	409a      	lsls	r2, r3
 8005b06:	0013      	movs	r3, r2
 8005b08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	43d2      	mvns	r2, r2
 8005b12:	401a      	ands	r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6a1a      	ldr	r2, [r3, #32]
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	211f      	movs	r1, #31
 8005b20:	400b      	ands	r3, r1
 8005b22:	6879      	ldr	r1, [r7, #4]
 8005b24:	4099      	lsls	r1, r3
 8005b26:	000b      	movs	r3, r1
 8005b28:	431a      	orrs	r2, r3
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	621a      	str	r2, [r3, #32]
}
 8005b2e:	46c0      	nop			; (mov r8, r8)
 8005b30:	46bd      	mov	sp, r7
 8005b32:	b006      	add	sp, #24
 8005b34:	bd80      	pop	{r7, pc}
	...

08005b38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	223c      	movs	r2, #60	; 0x3c
 8005b46:	5c9b      	ldrb	r3, [r3, r2]
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d101      	bne.n	8005b50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b4c:	2302      	movs	r3, #2
 8005b4e:	e047      	b.n	8005be0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	223c      	movs	r2, #60	; 0x3c
 8005b54:	2101      	movs	r1, #1
 8005b56:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	223d      	movs	r2, #61	; 0x3d
 8005b5c:	2102      	movs	r1, #2
 8005b5e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2270      	movs	r2, #112	; 0x70
 8005b74:	4393      	bics	r3, r2
 8005b76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a16      	ldr	r2, [pc, #88]	; (8005be8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d00f      	beq.n	8005bb4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	2380      	movs	r3, #128	; 0x80
 8005b9a:	05db      	lsls	r3, r3, #23
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d009      	beq.n	8005bb4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a11      	ldr	r2, [pc, #68]	; (8005bec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d004      	beq.n	8005bb4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a10      	ldr	r2, [pc, #64]	; (8005bf0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d10c      	bne.n	8005bce <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	2280      	movs	r2, #128	; 0x80
 8005bb8:	4393      	bics	r3, r2
 8005bba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	68ba      	ldr	r2, [r7, #8]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68ba      	ldr	r2, [r7, #8]
 8005bcc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	223d      	movs	r2, #61	; 0x3d
 8005bd2:	2101      	movs	r1, #1
 8005bd4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	223c      	movs	r2, #60	; 0x3c
 8005bda:	2100      	movs	r1, #0
 8005bdc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	0018      	movs	r0, r3
 8005be2:	46bd      	mov	sp, r7
 8005be4:	b004      	add	sp, #16
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	40012c00 	.word	0x40012c00
 8005bec:	40000400 	.word	0x40000400
 8005bf0:	40014000 	.word	0x40014000

08005bf4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	223c      	movs	r2, #60	; 0x3c
 8005c06:	5c9b      	ldrb	r3, [r3, r2]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d101      	bne.n	8005c10 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	e03e      	b.n	8005c8e <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	223c      	movs	r2, #60	; 0x3c
 8005c14:	2101      	movs	r1, #1
 8005c16:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	22ff      	movs	r2, #255	; 0xff
 8005c1c:	4393      	bics	r3, r2
 8005c1e:	001a      	movs	r2, r3
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	4a1b      	ldr	r2, [pc, #108]	; (8005c98 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8005c2c:	401a      	ands	r2, r3
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	4a18      	ldr	r2, [pc, #96]	; (8005c9c <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8005c3a:	401a      	ands	r2, r3
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	4a16      	ldr	r2, [pc, #88]	; (8005ca0 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8005c48:	401a      	ands	r2, r3
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	4a13      	ldr	r2, [pc, #76]	; (8005ca4 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8005c56:	401a      	ands	r2, r3
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	4a11      	ldr	r2, [pc, #68]	; (8005ca8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8005c64:	401a      	ands	r2, r3
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	695b      	ldr	r3, [r3, #20]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	4a0e      	ldr	r2, [pc, #56]	; (8005cac <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8005c72:	401a      	ands	r2, r3
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	69db      	ldr	r3, [r3, #28]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	223c      	movs	r2, #60	; 0x3c
 8005c88:	2100      	movs	r1, #0
 8005c8a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	0018      	movs	r0, r3
 8005c90:	46bd      	mov	sp, r7
 8005c92:	b004      	add	sp, #16
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	46c0      	nop			; (mov r8, r8)
 8005c98:	fffffcff 	.word	0xfffffcff
 8005c9c:	fffffbff 	.word	0xfffffbff
 8005ca0:	fffff7ff 	.word	0xfffff7ff
 8005ca4:	ffffefff 	.word	0xffffefff
 8005ca8:	ffffdfff 	.word	0xffffdfff
 8005cac:	ffffbfff 	.word	0xffffbfff

08005cb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cb8:	46c0      	nop			; (mov r8, r8)
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	b002      	add	sp, #8
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cc8:	46c0      	nop			; (mov r8, r8)
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	b002      	add	sp, #8
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d101      	bne.n	8005ce2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e044      	b.n	8005d6c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d107      	bne.n	8005cfa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2274      	movs	r2, #116	; 0x74
 8005cee:	2100      	movs	r1, #0
 8005cf0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	0018      	movs	r0, r3
 8005cf6:	f7fb ff6f 	bl	8001bd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2224      	movs	r2, #36	; 0x24
 8005cfe:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2101      	movs	r1, #1
 8005d0c:	438a      	bics	r2, r1
 8005d0e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	0018      	movs	r0, r3
 8005d14:	f000 fc2e 	bl	8006574 <UART_SetConfig>
 8005d18:	0003      	movs	r3, r0
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d101      	bne.n	8005d22 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e024      	b.n	8005d6c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d003      	beq.n	8005d32 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	0018      	movs	r0, r3
 8005d2e:	f000 fd61 	bl	80067f4 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	685a      	ldr	r2, [r3, #4]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	490d      	ldr	r1, [pc, #52]	; (8005d74 <HAL_UART_Init+0xa4>)
 8005d3e:	400a      	ands	r2, r1
 8005d40:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	689a      	ldr	r2, [r3, #8]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	212a      	movs	r1, #42	; 0x2a
 8005d4e:	438a      	bics	r2, r1
 8005d50:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2101      	movs	r1, #1
 8005d5e:	430a      	orrs	r2, r1
 8005d60:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	0018      	movs	r0, r3
 8005d66:	f000 fdf9 	bl	800695c <UART_CheckIdleState>
 8005d6a:	0003      	movs	r3, r0
}
 8005d6c:	0018      	movs	r0, r3
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	b002      	add	sp, #8
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	ffffb7ff 	.word	0xffffb7ff

08005d78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b08a      	sub	sp, #40	; 0x28
 8005d7c:	af02      	add	r7, sp, #8
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	603b      	str	r3, [r7, #0]
 8005d84:	1dbb      	adds	r3, r7, #6
 8005d86:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d8c:	2b20      	cmp	r3, #32
 8005d8e:	d000      	beq.n	8005d92 <HAL_UART_Transmit+0x1a>
 8005d90:	e096      	b.n	8005ec0 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d003      	beq.n	8005da0 <HAL_UART_Transmit+0x28>
 8005d98:	1dbb      	adds	r3, r7, #6
 8005d9a:	881b      	ldrh	r3, [r3, #0]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d101      	bne.n	8005da4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e08e      	b.n	8005ec2 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	689a      	ldr	r2, [r3, #8]
 8005da8:	2380      	movs	r3, #128	; 0x80
 8005daa:	015b      	lsls	r3, r3, #5
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d109      	bne.n	8005dc4 <HAL_UART_Transmit+0x4c>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d105      	bne.n	8005dc4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	d001      	beq.n	8005dc4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e07e      	b.n	8005ec2 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2274      	movs	r2, #116	; 0x74
 8005dc8:	5c9b      	ldrb	r3, [r3, r2]
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d101      	bne.n	8005dd2 <HAL_UART_Transmit+0x5a>
 8005dce:	2302      	movs	r3, #2
 8005dd0:	e077      	b.n	8005ec2 <HAL_UART_Transmit+0x14a>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2274      	movs	r2, #116	; 0x74
 8005dd6:	2101      	movs	r1, #1
 8005dd8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2280      	movs	r2, #128	; 0x80
 8005dde:	2100      	movs	r1, #0
 8005de0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2221      	movs	r2, #33	; 0x21
 8005de6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005de8:	f7fc f82a 	bl	8001e40 <HAL_GetTick>
 8005dec:	0003      	movs	r3, r0
 8005dee:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	1dba      	adds	r2, r7, #6
 8005df4:	2150      	movs	r1, #80	; 0x50
 8005df6:	8812      	ldrh	r2, [r2, #0]
 8005df8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	1dba      	adds	r2, r7, #6
 8005dfe:	2152      	movs	r1, #82	; 0x52
 8005e00:	8812      	ldrh	r2, [r2, #0]
 8005e02:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	689a      	ldr	r2, [r3, #8]
 8005e08:	2380      	movs	r3, #128	; 0x80
 8005e0a:	015b      	lsls	r3, r3, #5
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d108      	bne.n	8005e22 <HAL_UART_Transmit+0xaa>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d104      	bne.n	8005e22 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	61bb      	str	r3, [r7, #24]
 8005e20:	e003      	b.n	8005e2a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e26:	2300      	movs	r3, #0
 8005e28:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2274      	movs	r2, #116	; 0x74
 8005e2e:	2100      	movs	r1, #0
 8005e30:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8005e32:	e02d      	b.n	8005e90 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e34:	697a      	ldr	r2, [r7, #20]
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	9300      	str	r3, [sp, #0]
 8005e3c:	0013      	movs	r3, r2
 8005e3e:	2200      	movs	r2, #0
 8005e40:	2180      	movs	r1, #128	; 0x80
 8005e42:	f000 fdd3 	bl	80069ec <UART_WaitOnFlagUntilTimeout>
 8005e46:	1e03      	subs	r3, r0, #0
 8005e48:	d001      	beq.n	8005e4e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e039      	b.n	8005ec2 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10b      	bne.n	8005e6c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	881a      	ldrh	r2, [r3, #0]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	05d2      	lsls	r2, r2, #23
 8005e5e:	0dd2      	lsrs	r2, r2, #23
 8005e60:	b292      	uxth	r2, r2
 8005e62:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	3302      	adds	r3, #2
 8005e68:	61bb      	str	r3, [r7, #24]
 8005e6a:	e008      	b.n	8005e7e <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	781a      	ldrb	r2, [r3, #0]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	b292      	uxth	r2, r2
 8005e76:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2252      	movs	r2, #82	; 0x52
 8005e82:	5a9b      	ldrh	r3, [r3, r2]
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	3b01      	subs	r3, #1
 8005e88:	b299      	uxth	r1, r3
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2252      	movs	r2, #82	; 0x52
 8005e8e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2252      	movs	r2, #82	; 0x52
 8005e94:	5a9b      	ldrh	r3, [r3, r2]
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d1cb      	bne.n	8005e34 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e9c:	697a      	ldr	r2, [r7, #20]
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	9300      	str	r3, [sp, #0]
 8005ea4:	0013      	movs	r3, r2
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	2140      	movs	r1, #64	; 0x40
 8005eaa:	f000 fd9f 	bl	80069ec <UART_WaitOnFlagUntilTimeout>
 8005eae:	1e03      	subs	r3, r0, #0
 8005eb0:	d001      	beq.n	8005eb6 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	e005      	b.n	8005ec2 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2220      	movs	r2, #32
 8005eba:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	e000      	b.n	8005ec2 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005ec0:	2302      	movs	r3, #2
  }
}
 8005ec2:	0018      	movs	r0, r3
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	b008      	add	sp, #32
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b088      	sub	sp, #32
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	60f8      	str	r0, [r7, #12]
 8005ed2:	60b9      	str	r1, [r7, #8]
 8005ed4:	1dbb      	adds	r3, r7, #6
 8005ed6:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005edc:	2b20      	cmp	r3, #32
 8005ede:	d150      	bne.n	8005f82 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d003      	beq.n	8005eee <HAL_UART_Receive_IT+0x24>
 8005ee6:	1dbb      	adds	r3, r7, #6
 8005ee8:	881b      	ldrh	r3, [r3, #0]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d101      	bne.n	8005ef2 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e048      	b.n	8005f84 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	689a      	ldr	r2, [r3, #8]
 8005ef6:	2380      	movs	r3, #128	; 0x80
 8005ef8:	015b      	lsls	r3, r3, #5
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d109      	bne.n	8005f12 <HAL_UART_Receive_IT+0x48>
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d105      	bne.n	8005f12 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	d001      	beq.n	8005f12 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e038      	b.n	8005f84 <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2274      	movs	r2, #116	; 0x74
 8005f16:	5c9b      	ldrb	r3, [r3, r2]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d101      	bne.n	8005f20 <HAL_UART_Receive_IT+0x56>
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	e031      	b.n	8005f84 <HAL_UART_Receive_IT+0xba>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2274      	movs	r2, #116	; 0x74
 8005f24:	2101      	movs	r1, #1
 8005f26:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	685a      	ldr	r2, [r3, #4]
 8005f34:	2380      	movs	r3, #128	; 0x80
 8005f36:	041b      	lsls	r3, r3, #16
 8005f38:	4013      	ands	r3, r2
 8005f3a:	d019      	beq.n	8005f70 <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f3c:	f3ef 8310 	mrs	r3, PRIMASK
 8005f40:	613b      	str	r3, [r7, #16]
  return(result);
 8005f42:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f44:	61fb      	str	r3, [r7, #28]
 8005f46:	2301      	movs	r3, #1
 8005f48:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f383 8810 	msr	PRIMASK, r3
}
 8005f50:	46c0      	nop			; (mov r8, r8)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2180      	movs	r1, #128	; 0x80
 8005f5e:	04c9      	lsls	r1, r1, #19
 8005f60:	430a      	orrs	r2, r1
 8005f62:	601a      	str	r2, [r3, #0]
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	f383 8810 	msr	PRIMASK, r3
}
 8005f6e:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005f70:	1dbb      	adds	r3, r7, #6
 8005f72:	881a      	ldrh	r2, [r3, #0]
 8005f74:	68b9      	ldr	r1, [r7, #8]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	0018      	movs	r0, r3
 8005f7a:	f000 fdfb 	bl	8006b74 <UART_Start_Receive_IT>
 8005f7e:	0003      	movs	r3, r0
 8005f80:	e000      	b.n	8005f84 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8005f82:	2302      	movs	r3, #2
  }
}
 8005f84:	0018      	movs	r0, r3
 8005f86:	46bd      	mov	sp, r7
 8005f88:	b008      	add	sp, #32
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f8c:	b590      	push	{r4, r7, lr}
 8005f8e:	b0ab      	sub	sp, #172	; 0xac
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	69db      	ldr	r3, [r3, #28]
 8005f9a:	22a4      	movs	r2, #164	; 0xa4
 8005f9c:	18b9      	adds	r1, r7, r2
 8005f9e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	20a0      	movs	r0, #160	; 0xa0
 8005fa8:	1839      	adds	r1, r7, r0
 8005faa:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	219c      	movs	r1, #156	; 0x9c
 8005fb4:	1879      	adds	r1, r7, r1
 8005fb6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005fb8:	0011      	movs	r1, r2
 8005fba:	18bb      	adds	r3, r7, r2
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a99      	ldr	r2, [pc, #612]	; (8006224 <HAL_UART_IRQHandler+0x298>)
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	2298      	movs	r2, #152	; 0x98
 8005fc4:	18bc      	adds	r4, r7, r2
 8005fc6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8005fc8:	18bb      	adds	r3, r7, r2
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d114      	bne.n	8005ffa <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005fd0:	187b      	adds	r3, r7, r1
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2220      	movs	r2, #32
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	d00f      	beq.n	8005ffa <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005fda:	183b      	adds	r3, r7, r0
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2220      	movs	r2, #32
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	d00a      	beq.n	8005ffa <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d100      	bne.n	8005fee <HAL_UART_IRQHandler+0x62>
 8005fec:	e296      	b.n	800651c <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	0010      	movs	r0, r2
 8005ff6:	4798      	blx	r3
      }
      return;
 8005ff8:	e290      	b.n	800651c <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005ffa:	2398      	movs	r3, #152	; 0x98
 8005ffc:	18fb      	adds	r3, r7, r3
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d100      	bne.n	8006006 <HAL_UART_IRQHandler+0x7a>
 8006004:	e114      	b.n	8006230 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006006:	239c      	movs	r3, #156	; 0x9c
 8006008:	18fb      	adds	r3, r7, r3
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2201      	movs	r2, #1
 800600e:	4013      	ands	r3, r2
 8006010:	d106      	bne.n	8006020 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006012:	23a0      	movs	r3, #160	; 0xa0
 8006014:	18fb      	adds	r3, r7, r3
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a83      	ldr	r2, [pc, #524]	; (8006228 <HAL_UART_IRQHandler+0x29c>)
 800601a:	4013      	ands	r3, r2
 800601c:	d100      	bne.n	8006020 <HAL_UART_IRQHandler+0x94>
 800601e:	e107      	b.n	8006230 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006020:	23a4      	movs	r3, #164	; 0xa4
 8006022:	18fb      	adds	r3, r7, r3
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2201      	movs	r2, #1
 8006028:	4013      	ands	r3, r2
 800602a:	d012      	beq.n	8006052 <HAL_UART_IRQHandler+0xc6>
 800602c:	23a0      	movs	r3, #160	; 0xa0
 800602e:	18fb      	adds	r3, r7, r3
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	2380      	movs	r3, #128	; 0x80
 8006034:	005b      	lsls	r3, r3, #1
 8006036:	4013      	ands	r3, r2
 8006038:	d00b      	beq.n	8006052 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2201      	movs	r2, #1
 8006040:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2280      	movs	r2, #128	; 0x80
 8006046:	589b      	ldr	r3, [r3, r2]
 8006048:	2201      	movs	r2, #1
 800604a:	431a      	orrs	r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2180      	movs	r1, #128	; 0x80
 8006050:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006052:	23a4      	movs	r3, #164	; 0xa4
 8006054:	18fb      	adds	r3, r7, r3
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2202      	movs	r2, #2
 800605a:	4013      	ands	r3, r2
 800605c:	d011      	beq.n	8006082 <HAL_UART_IRQHandler+0xf6>
 800605e:	239c      	movs	r3, #156	; 0x9c
 8006060:	18fb      	adds	r3, r7, r3
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2201      	movs	r2, #1
 8006066:	4013      	ands	r3, r2
 8006068:	d00b      	beq.n	8006082 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2202      	movs	r2, #2
 8006070:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2280      	movs	r2, #128	; 0x80
 8006076:	589b      	ldr	r3, [r3, r2]
 8006078:	2204      	movs	r2, #4
 800607a:	431a      	orrs	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2180      	movs	r1, #128	; 0x80
 8006080:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006082:	23a4      	movs	r3, #164	; 0xa4
 8006084:	18fb      	adds	r3, r7, r3
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2204      	movs	r2, #4
 800608a:	4013      	ands	r3, r2
 800608c:	d011      	beq.n	80060b2 <HAL_UART_IRQHandler+0x126>
 800608e:	239c      	movs	r3, #156	; 0x9c
 8006090:	18fb      	adds	r3, r7, r3
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2201      	movs	r2, #1
 8006096:	4013      	ands	r3, r2
 8006098:	d00b      	beq.n	80060b2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2204      	movs	r2, #4
 80060a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2280      	movs	r2, #128	; 0x80
 80060a6:	589b      	ldr	r3, [r3, r2]
 80060a8:	2202      	movs	r2, #2
 80060aa:	431a      	orrs	r2, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2180      	movs	r1, #128	; 0x80
 80060b0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80060b2:	23a4      	movs	r3, #164	; 0xa4
 80060b4:	18fb      	adds	r3, r7, r3
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2208      	movs	r2, #8
 80060ba:	4013      	ands	r3, r2
 80060bc:	d017      	beq.n	80060ee <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80060be:	23a0      	movs	r3, #160	; 0xa0
 80060c0:	18fb      	adds	r3, r7, r3
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2220      	movs	r2, #32
 80060c6:	4013      	ands	r3, r2
 80060c8:	d105      	bne.n	80060d6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80060ca:	239c      	movs	r3, #156	; 0x9c
 80060cc:	18fb      	adds	r3, r7, r3
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2201      	movs	r2, #1
 80060d2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80060d4:	d00b      	beq.n	80060ee <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2208      	movs	r2, #8
 80060dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2280      	movs	r2, #128	; 0x80
 80060e2:	589b      	ldr	r3, [r3, r2]
 80060e4:	2208      	movs	r2, #8
 80060e6:	431a      	orrs	r2, r3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2180      	movs	r1, #128	; 0x80
 80060ec:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80060ee:	23a4      	movs	r3, #164	; 0xa4
 80060f0:	18fb      	adds	r3, r7, r3
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	2380      	movs	r3, #128	; 0x80
 80060f6:	011b      	lsls	r3, r3, #4
 80060f8:	4013      	ands	r3, r2
 80060fa:	d013      	beq.n	8006124 <HAL_UART_IRQHandler+0x198>
 80060fc:	23a0      	movs	r3, #160	; 0xa0
 80060fe:	18fb      	adds	r3, r7, r3
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	2380      	movs	r3, #128	; 0x80
 8006104:	04db      	lsls	r3, r3, #19
 8006106:	4013      	ands	r3, r2
 8006108:	d00c      	beq.n	8006124 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2280      	movs	r2, #128	; 0x80
 8006110:	0112      	lsls	r2, r2, #4
 8006112:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2280      	movs	r2, #128	; 0x80
 8006118:	589b      	ldr	r3, [r3, r2]
 800611a:	2220      	movs	r2, #32
 800611c:	431a      	orrs	r2, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2180      	movs	r1, #128	; 0x80
 8006122:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2280      	movs	r2, #128	; 0x80
 8006128:	589b      	ldr	r3, [r3, r2]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d100      	bne.n	8006130 <HAL_UART_IRQHandler+0x1a4>
 800612e:	e1f7      	b.n	8006520 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006130:	23a4      	movs	r3, #164	; 0xa4
 8006132:	18fb      	adds	r3, r7, r3
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2220      	movs	r2, #32
 8006138:	4013      	ands	r3, r2
 800613a:	d00e      	beq.n	800615a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800613c:	23a0      	movs	r3, #160	; 0xa0
 800613e:	18fb      	adds	r3, r7, r3
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2220      	movs	r2, #32
 8006144:	4013      	ands	r3, r2
 8006146:	d008      	beq.n	800615a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800614c:	2b00      	cmp	r3, #0
 800614e:	d004      	beq.n	800615a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	0010      	movs	r0, r2
 8006158:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2280      	movs	r2, #128	; 0x80
 800615e:	589b      	ldr	r3, [r3, r2]
 8006160:	2194      	movs	r1, #148	; 0x94
 8006162:	187a      	adds	r2, r7, r1
 8006164:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	2240      	movs	r2, #64	; 0x40
 800616e:	4013      	ands	r3, r2
 8006170:	2b40      	cmp	r3, #64	; 0x40
 8006172:	d004      	beq.n	800617e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006174:	187b      	adds	r3, r7, r1
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2228      	movs	r2, #40	; 0x28
 800617a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800617c:	d047      	beq.n	800620e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	0018      	movs	r0, r3
 8006182:	f000 fd93 	bl	8006cac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	2240      	movs	r2, #64	; 0x40
 800618e:	4013      	ands	r3, r2
 8006190:	2b40      	cmp	r3, #64	; 0x40
 8006192:	d137      	bne.n	8006204 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006194:	f3ef 8310 	mrs	r3, PRIMASK
 8006198:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800619a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800619c:	2090      	movs	r0, #144	; 0x90
 800619e:	183a      	adds	r2, r7, r0
 80061a0:	6013      	str	r3, [r2, #0]
 80061a2:	2301      	movs	r3, #1
 80061a4:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061a8:	f383 8810 	msr	PRIMASK, r3
}
 80061ac:	46c0      	nop			; (mov r8, r8)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	689a      	ldr	r2, [r3, #8]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2140      	movs	r1, #64	; 0x40
 80061ba:	438a      	bics	r2, r1
 80061bc:	609a      	str	r2, [r3, #8]
 80061be:	183b      	adds	r3, r7, r0
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061c6:	f383 8810 	msr	PRIMASK, r3
}
 80061ca:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d012      	beq.n	80061fa <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061d8:	4a14      	ldr	r2, [pc, #80]	; (800622c <HAL_UART_IRQHandler+0x2a0>)
 80061da:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e0:	0018      	movs	r0, r3
 80061e2:	f7fc fc85 	bl	8002af0 <HAL_DMA_Abort_IT>
 80061e6:	1e03      	subs	r3, r0, #0
 80061e8:	d01a      	beq.n	8006220 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f4:	0018      	movs	r0, r3
 80061f6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061f8:	e012      	b.n	8006220 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	0018      	movs	r0, r3
 80061fe:	f000 f9a5 	bl	800654c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006202:	e00d      	b.n	8006220 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	0018      	movs	r0, r3
 8006208:	f000 f9a0 	bl	800654c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800620c:	e008      	b.n	8006220 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	0018      	movs	r0, r3
 8006212:	f000 f99b 	bl	800654c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2280      	movs	r2, #128	; 0x80
 800621a:	2100      	movs	r1, #0
 800621c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800621e:	e17f      	b.n	8006520 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006220:	46c0      	nop			; (mov r8, r8)
    return;
 8006222:	e17d      	b.n	8006520 <HAL_UART_IRQHandler+0x594>
 8006224:	0000080f 	.word	0x0000080f
 8006228:	04000120 	.word	0x04000120
 800622c:	08006d71 	.word	0x08006d71

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006234:	2b01      	cmp	r3, #1
 8006236:	d000      	beq.n	800623a <HAL_UART_IRQHandler+0x2ae>
 8006238:	e131      	b.n	800649e <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800623a:	23a4      	movs	r3, #164	; 0xa4
 800623c:	18fb      	adds	r3, r7, r3
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2210      	movs	r2, #16
 8006242:	4013      	ands	r3, r2
 8006244:	d100      	bne.n	8006248 <HAL_UART_IRQHandler+0x2bc>
 8006246:	e12a      	b.n	800649e <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006248:	23a0      	movs	r3, #160	; 0xa0
 800624a:	18fb      	adds	r3, r7, r3
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2210      	movs	r2, #16
 8006250:	4013      	ands	r3, r2
 8006252:	d100      	bne.n	8006256 <HAL_UART_IRQHandler+0x2ca>
 8006254:	e123      	b.n	800649e <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2210      	movs	r2, #16
 800625c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	2240      	movs	r2, #64	; 0x40
 8006266:	4013      	ands	r3, r2
 8006268:	2b40      	cmp	r3, #64	; 0x40
 800626a:	d000      	beq.n	800626e <HAL_UART_IRQHandler+0x2e2>
 800626c:	e09b      	b.n	80063a6 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	685a      	ldr	r2, [r3, #4]
 8006276:	217e      	movs	r1, #126	; 0x7e
 8006278:	187b      	adds	r3, r7, r1
 800627a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800627c:	187b      	adds	r3, r7, r1
 800627e:	881b      	ldrh	r3, [r3, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d100      	bne.n	8006286 <HAL_UART_IRQHandler+0x2fa>
 8006284:	e14e      	b.n	8006524 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2258      	movs	r2, #88	; 0x58
 800628a:	5a9b      	ldrh	r3, [r3, r2]
 800628c:	187a      	adds	r2, r7, r1
 800628e:	8812      	ldrh	r2, [r2, #0]
 8006290:	429a      	cmp	r2, r3
 8006292:	d300      	bcc.n	8006296 <HAL_UART_IRQHandler+0x30a>
 8006294:	e146      	b.n	8006524 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	187a      	adds	r2, r7, r1
 800629a:	215a      	movs	r1, #90	; 0x5a
 800629c:	8812      	ldrh	r2, [r2, #0]
 800629e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	2b20      	cmp	r3, #32
 80062a8:	d06e      	beq.n	8006388 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062aa:	f3ef 8310 	mrs	r3, PRIMASK
 80062ae:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80062b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062b2:	67bb      	str	r3, [r7, #120]	; 0x78
 80062b4:	2301      	movs	r3, #1
 80062b6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ba:	f383 8810 	msr	PRIMASK, r3
}
 80062be:	46c0      	nop			; (mov r8, r8)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	499a      	ldr	r1, [pc, #616]	; (8006534 <HAL_UART_IRQHandler+0x5a8>)
 80062cc:	400a      	ands	r2, r1
 80062ce:	601a      	str	r2, [r3, #0]
 80062d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062d2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d6:	f383 8810 	msr	PRIMASK, r3
}
 80062da:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062dc:	f3ef 8310 	mrs	r3, PRIMASK
 80062e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80062e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062e4:	677b      	str	r3, [r7, #116]	; 0x74
 80062e6:	2301      	movs	r3, #1
 80062e8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062ec:	f383 8810 	msr	PRIMASK, r3
}
 80062f0:	46c0      	nop			; (mov r8, r8)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	689a      	ldr	r2, [r3, #8]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2101      	movs	r1, #1
 80062fe:	438a      	bics	r2, r1
 8006300:	609a      	str	r2, [r3, #8]
 8006302:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006304:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006306:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006308:	f383 8810 	msr	PRIMASK, r3
}
 800630c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800630e:	f3ef 8310 	mrs	r3, PRIMASK
 8006312:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006314:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006316:	673b      	str	r3, [r7, #112]	; 0x70
 8006318:	2301      	movs	r3, #1
 800631a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800631c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800631e:	f383 8810 	msr	PRIMASK, r3
}
 8006322:	46c0      	nop			; (mov r8, r8)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	689a      	ldr	r2, [r3, #8]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2140      	movs	r1, #64	; 0x40
 8006330:	438a      	bics	r2, r1
 8006332:	609a      	str	r2, [r3, #8]
 8006334:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006336:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006338:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800633a:	f383 8810 	msr	PRIMASK, r3
}
 800633e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2220      	movs	r2, #32
 8006344:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800634c:	f3ef 8310 	mrs	r3, PRIMASK
 8006350:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8006352:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006354:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006356:	2301      	movs	r3, #1
 8006358:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800635a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800635c:	f383 8810 	msr	PRIMASK, r3
}
 8006360:	46c0      	nop			; (mov r8, r8)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	2110      	movs	r1, #16
 800636e:	438a      	bics	r2, r1
 8006370:	601a      	str	r2, [r3, #0]
 8006372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006374:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006376:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006378:	f383 8810 	msr	PRIMASK, r3
}
 800637c:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006382:	0018      	movs	r0, r3
 8006384:	f7fc fb7c 	bl	8002a80 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2258      	movs	r2, #88	; 0x58
 800638c:	5a9a      	ldrh	r2, [r3, r2]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	215a      	movs	r1, #90	; 0x5a
 8006392:	5a5b      	ldrh	r3, [r3, r1]
 8006394:	b29b      	uxth	r3, r3
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	b29a      	uxth	r2, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	0011      	movs	r1, r2
 800639e:	0018      	movs	r0, r3
 80063a0:	f000 f8dc 	bl	800655c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80063a4:	e0be      	b.n	8006524 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2258      	movs	r2, #88	; 0x58
 80063aa:	5a99      	ldrh	r1, [r3, r2]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	225a      	movs	r2, #90	; 0x5a
 80063b0:	5a9b      	ldrh	r3, [r3, r2]
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	208e      	movs	r0, #142	; 0x8e
 80063b6:	183b      	adds	r3, r7, r0
 80063b8:	1a8a      	subs	r2, r1, r2
 80063ba:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	225a      	movs	r2, #90	; 0x5a
 80063c0:	5a9b      	ldrh	r3, [r3, r2]
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d100      	bne.n	80063ca <HAL_UART_IRQHandler+0x43e>
 80063c8:	e0ae      	b.n	8006528 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 80063ca:	183b      	adds	r3, r7, r0
 80063cc:	881b      	ldrh	r3, [r3, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d100      	bne.n	80063d4 <HAL_UART_IRQHandler+0x448>
 80063d2:	e0a9      	b.n	8006528 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063d4:	f3ef 8310 	mrs	r3, PRIMASK
 80063d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80063da:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063dc:	2488      	movs	r4, #136	; 0x88
 80063de:	193a      	adds	r2, r7, r4
 80063e0:	6013      	str	r3, [r2, #0]
 80063e2:	2301      	movs	r3, #1
 80063e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	f383 8810 	msr	PRIMASK, r3
}
 80063ec:	46c0      	nop			; (mov r8, r8)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	494f      	ldr	r1, [pc, #316]	; (8006538 <HAL_UART_IRQHandler+0x5ac>)
 80063fa:	400a      	ands	r2, r1
 80063fc:	601a      	str	r2, [r3, #0]
 80063fe:	193b      	adds	r3, r7, r4
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	f383 8810 	msr	PRIMASK, r3
}
 800640a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800640c:	f3ef 8310 	mrs	r3, PRIMASK
 8006410:	61bb      	str	r3, [r7, #24]
  return(result);
 8006412:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006414:	2484      	movs	r4, #132	; 0x84
 8006416:	193a      	adds	r2, r7, r4
 8006418:	6013      	str	r3, [r2, #0]
 800641a:	2301      	movs	r3, #1
 800641c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	f383 8810 	msr	PRIMASK, r3
}
 8006424:	46c0      	nop			; (mov r8, r8)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	689a      	ldr	r2, [r3, #8]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2101      	movs	r1, #1
 8006432:	438a      	bics	r2, r1
 8006434:	609a      	str	r2, [r3, #8]
 8006436:	193b      	adds	r3, r7, r4
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800643c:	6a3b      	ldr	r3, [r7, #32]
 800643e:	f383 8810 	msr	PRIMASK, r3
}
 8006442:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2220      	movs	r2, #32
 8006448:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006456:	f3ef 8310 	mrs	r3, PRIMASK
 800645a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800645c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800645e:	2480      	movs	r4, #128	; 0x80
 8006460:	193a      	adds	r2, r7, r4
 8006462:	6013      	str	r3, [r2, #0]
 8006464:	2301      	movs	r3, #1
 8006466:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646a:	f383 8810 	msr	PRIMASK, r3
}
 800646e:	46c0      	nop			; (mov r8, r8)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2110      	movs	r1, #16
 800647c:	438a      	bics	r2, r1
 800647e:	601a      	str	r2, [r3, #0]
 8006480:	193b      	adds	r3, r7, r4
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006488:	f383 8810 	msr	PRIMASK, r3
}
 800648c:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800648e:	183b      	adds	r3, r7, r0
 8006490:	881a      	ldrh	r2, [r3, #0]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	0011      	movs	r1, r2
 8006496:	0018      	movs	r0, r3
 8006498:	f000 f860 	bl	800655c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800649c:	e044      	b.n	8006528 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800649e:	23a4      	movs	r3, #164	; 0xa4
 80064a0:	18fb      	adds	r3, r7, r3
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	2380      	movs	r3, #128	; 0x80
 80064a6:	035b      	lsls	r3, r3, #13
 80064a8:	4013      	ands	r3, r2
 80064aa:	d010      	beq.n	80064ce <HAL_UART_IRQHandler+0x542>
 80064ac:	239c      	movs	r3, #156	; 0x9c
 80064ae:	18fb      	adds	r3, r7, r3
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	2380      	movs	r3, #128	; 0x80
 80064b4:	03db      	lsls	r3, r3, #15
 80064b6:	4013      	ands	r3, r2
 80064b8:	d009      	beq.n	80064ce <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2280      	movs	r2, #128	; 0x80
 80064c0:	0352      	lsls	r2, r2, #13
 80064c2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	0018      	movs	r0, r3
 80064c8:	f000 fdfc 	bl	80070c4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80064cc:	e02f      	b.n	800652e <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80064ce:	23a4      	movs	r3, #164	; 0xa4
 80064d0:	18fb      	adds	r3, r7, r3
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2280      	movs	r2, #128	; 0x80
 80064d6:	4013      	ands	r3, r2
 80064d8:	d00f      	beq.n	80064fa <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80064da:	23a0      	movs	r3, #160	; 0xa0
 80064dc:	18fb      	adds	r3, r7, r3
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2280      	movs	r2, #128	; 0x80
 80064e2:	4013      	ands	r3, r2
 80064e4:	d009      	beq.n	80064fa <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d01e      	beq.n	800652c <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	0010      	movs	r0, r2
 80064f6:	4798      	blx	r3
    }
    return;
 80064f8:	e018      	b.n	800652c <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80064fa:	23a4      	movs	r3, #164	; 0xa4
 80064fc:	18fb      	adds	r3, r7, r3
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2240      	movs	r2, #64	; 0x40
 8006502:	4013      	ands	r3, r2
 8006504:	d013      	beq.n	800652e <HAL_UART_IRQHandler+0x5a2>
 8006506:	23a0      	movs	r3, #160	; 0xa0
 8006508:	18fb      	adds	r3, r7, r3
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2240      	movs	r2, #64	; 0x40
 800650e:	4013      	ands	r3, r2
 8006510:	d00d      	beq.n	800652e <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	0018      	movs	r0, r3
 8006516:	f000 fc42 	bl	8006d9e <UART_EndTransmit_IT>
    return;
 800651a:	e008      	b.n	800652e <HAL_UART_IRQHandler+0x5a2>
      return;
 800651c:	46c0      	nop			; (mov r8, r8)
 800651e:	e006      	b.n	800652e <HAL_UART_IRQHandler+0x5a2>
    return;
 8006520:	46c0      	nop			; (mov r8, r8)
 8006522:	e004      	b.n	800652e <HAL_UART_IRQHandler+0x5a2>
      return;
 8006524:	46c0      	nop			; (mov r8, r8)
 8006526:	e002      	b.n	800652e <HAL_UART_IRQHandler+0x5a2>
      return;
 8006528:	46c0      	nop			; (mov r8, r8)
 800652a:	e000      	b.n	800652e <HAL_UART_IRQHandler+0x5a2>
    return;
 800652c:	46c0      	nop			; (mov r8, r8)
  }

}
 800652e:	46bd      	mov	sp, r7
 8006530:	b02b      	add	sp, #172	; 0xac
 8006532:	bd90      	pop	{r4, r7, pc}
 8006534:	fffffeff 	.word	0xfffffeff
 8006538:	fffffedf 	.word	0xfffffedf

0800653c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006544:	46c0      	nop			; (mov r8, r8)
 8006546:	46bd      	mov	sp, r7
 8006548:	b002      	add	sp, #8
 800654a:	bd80      	pop	{r7, pc}

0800654c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006554:	46c0      	nop			; (mov r8, r8)
 8006556:	46bd      	mov	sp, r7
 8006558:	b002      	add	sp, #8
 800655a:	bd80      	pop	{r7, pc}

0800655c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	000a      	movs	r2, r1
 8006566:	1cbb      	adds	r3, r7, #2
 8006568:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800656a:	46c0      	nop			; (mov r8, r8)
 800656c:	46bd      	mov	sp, r7
 800656e:	b002      	add	sp, #8
 8006570:	bd80      	pop	{r7, pc}
	...

08006574 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b088      	sub	sp, #32
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800657c:	231e      	movs	r3, #30
 800657e:	18fb      	adds	r3, r7, r3
 8006580:	2200      	movs	r2, #0
 8006582:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	689a      	ldr	r2, [r3, #8]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	431a      	orrs	r2, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	695b      	ldr	r3, [r3, #20]
 8006592:	431a      	orrs	r2, r3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	69db      	ldr	r3, [r3, #28]
 8006598:	4313      	orrs	r3, r2
 800659a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a8d      	ldr	r2, [pc, #564]	; (80067d8 <UART_SetConfig+0x264>)
 80065a4:	4013      	ands	r3, r2
 80065a6:	0019      	movs	r1, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	697a      	ldr	r2, [r7, #20]
 80065ae:	430a      	orrs	r2, r1
 80065b0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	4a88      	ldr	r2, [pc, #544]	; (80067dc <UART_SetConfig+0x268>)
 80065ba:	4013      	ands	r3, r2
 80065bc:	0019      	movs	r1, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	68da      	ldr	r2, [r3, #12]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	430a      	orrs	r2, r1
 80065c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	699b      	ldr	r3, [r3, #24]
 80065ce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6a1b      	ldr	r3, [r3, #32]
 80065d4:	697a      	ldr	r2, [r7, #20]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	4a7f      	ldr	r2, [pc, #508]	; (80067e0 <UART_SetConfig+0x26c>)
 80065e2:	4013      	ands	r3, r2
 80065e4:	0019      	movs	r1, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	697a      	ldr	r2, [r7, #20]
 80065ec:	430a      	orrs	r2, r1
 80065ee:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a7b      	ldr	r2, [pc, #492]	; (80067e4 <UART_SetConfig+0x270>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d127      	bne.n	800664a <UART_SetConfig+0xd6>
 80065fa:	4b7b      	ldr	r3, [pc, #492]	; (80067e8 <UART_SetConfig+0x274>)
 80065fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065fe:	2203      	movs	r2, #3
 8006600:	4013      	ands	r3, r2
 8006602:	2b03      	cmp	r3, #3
 8006604:	d00d      	beq.n	8006622 <UART_SetConfig+0xae>
 8006606:	d81b      	bhi.n	8006640 <UART_SetConfig+0xcc>
 8006608:	2b02      	cmp	r3, #2
 800660a:	d014      	beq.n	8006636 <UART_SetConfig+0xc2>
 800660c:	d818      	bhi.n	8006640 <UART_SetConfig+0xcc>
 800660e:	2b00      	cmp	r3, #0
 8006610:	d002      	beq.n	8006618 <UART_SetConfig+0xa4>
 8006612:	2b01      	cmp	r3, #1
 8006614:	d00a      	beq.n	800662c <UART_SetConfig+0xb8>
 8006616:	e013      	b.n	8006640 <UART_SetConfig+0xcc>
 8006618:	231f      	movs	r3, #31
 800661a:	18fb      	adds	r3, r7, r3
 800661c:	2200      	movs	r2, #0
 800661e:	701a      	strb	r2, [r3, #0]
 8006620:	e021      	b.n	8006666 <UART_SetConfig+0xf2>
 8006622:	231f      	movs	r3, #31
 8006624:	18fb      	adds	r3, r7, r3
 8006626:	2202      	movs	r2, #2
 8006628:	701a      	strb	r2, [r3, #0]
 800662a:	e01c      	b.n	8006666 <UART_SetConfig+0xf2>
 800662c:	231f      	movs	r3, #31
 800662e:	18fb      	adds	r3, r7, r3
 8006630:	2204      	movs	r2, #4
 8006632:	701a      	strb	r2, [r3, #0]
 8006634:	e017      	b.n	8006666 <UART_SetConfig+0xf2>
 8006636:	231f      	movs	r3, #31
 8006638:	18fb      	adds	r3, r7, r3
 800663a:	2208      	movs	r2, #8
 800663c:	701a      	strb	r2, [r3, #0]
 800663e:	e012      	b.n	8006666 <UART_SetConfig+0xf2>
 8006640:	231f      	movs	r3, #31
 8006642:	18fb      	adds	r3, r7, r3
 8006644:	2210      	movs	r2, #16
 8006646:	701a      	strb	r2, [r3, #0]
 8006648:	e00d      	b.n	8006666 <UART_SetConfig+0xf2>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a67      	ldr	r2, [pc, #412]	; (80067ec <UART_SetConfig+0x278>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d104      	bne.n	800665e <UART_SetConfig+0xea>
 8006654:	231f      	movs	r3, #31
 8006656:	18fb      	adds	r3, r7, r3
 8006658:	2200      	movs	r2, #0
 800665a:	701a      	strb	r2, [r3, #0]
 800665c:	e003      	b.n	8006666 <UART_SetConfig+0xf2>
 800665e:	231f      	movs	r3, #31
 8006660:	18fb      	adds	r3, r7, r3
 8006662:	2210      	movs	r2, #16
 8006664:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	69da      	ldr	r2, [r3, #28]
 800666a:	2380      	movs	r3, #128	; 0x80
 800666c:	021b      	lsls	r3, r3, #8
 800666e:	429a      	cmp	r2, r3
 8006670:	d15d      	bne.n	800672e <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8006672:	231f      	movs	r3, #31
 8006674:	18fb      	adds	r3, r7, r3
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	2b08      	cmp	r3, #8
 800667a:	d015      	beq.n	80066a8 <UART_SetConfig+0x134>
 800667c:	dc18      	bgt.n	80066b0 <UART_SetConfig+0x13c>
 800667e:	2b04      	cmp	r3, #4
 8006680:	d00d      	beq.n	800669e <UART_SetConfig+0x12a>
 8006682:	dc15      	bgt.n	80066b0 <UART_SetConfig+0x13c>
 8006684:	2b00      	cmp	r3, #0
 8006686:	d002      	beq.n	800668e <UART_SetConfig+0x11a>
 8006688:	2b02      	cmp	r3, #2
 800668a:	d005      	beq.n	8006698 <UART_SetConfig+0x124>
 800668c:	e010      	b.n	80066b0 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800668e:	f7fd fe95 	bl	80043bc <HAL_RCC_GetPCLK1Freq>
 8006692:	0003      	movs	r3, r0
 8006694:	61bb      	str	r3, [r7, #24]
        break;
 8006696:	e012      	b.n	80066be <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006698:	4b55      	ldr	r3, [pc, #340]	; (80067f0 <UART_SetConfig+0x27c>)
 800669a:	61bb      	str	r3, [r7, #24]
        break;
 800669c:	e00f      	b.n	80066be <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800669e:	f7fd fe1f 	bl	80042e0 <HAL_RCC_GetSysClockFreq>
 80066a2:	0003      	movs	r3, r0
 80066a4:	61bb      	str	r3, [r7, #24]
        break;
 80066a6:	e00a      	b.n	80066be <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066a8:	2380      	movs	r3, #128	; 0x80
 80066aa:	021b      	lsls	r3, r3, #8
 80066ac:	61bb      	str	r3, [r7, #24]
        break;
 80066ae:	e006      	b.n	80066be <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80066b0:	2300      	movs	r3, #0
 80066b2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80066b4:	231e      	movs	r3, #30
 80066b6:	18fb      	adds	r3, r7, r3
 80066b8:	2201      	movs	r2, #1
 80066ba:	701a      	strb	r2, [r3, #0]
        break;
 80066bc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d100      	bne.n	80066c6 <UART_SetConfig+0x152>
 80066c4:	e07b      	b.n	80067be <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	005a      	lsls	r2, r3, #1
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	085b      	lsrs	r3, r3, #1
 80066d0:	18d2      	adds	r2, r2, r3
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	0019      	movs	r1, r3
 80066d8:	0010      	movs	r0, r2
 80066da:	f7f9 fd1d 	bl	8000118 <__udivsi3>
 80066de:	0003      	movs	r3, r0
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	2b0f      	cmp	r3, #15
 80066e8:	d91c      	bls.n	8006724 <UART_SetConfig+0x1b0>
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	2380      	movs	r3, #128	; 0x80
 80066ee:	025b      	lsls	r3, r3, #9
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d217      	bcs.n	8006724 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	b29a      	uxth	r2, r3
 80066f8:	200e      	movs	r0, #14
 80066fa:	183b      	adds	r3, r7, r0
 80066fc:	210f      	movs	r1, #15
 80066fe:	438a      	bics	r2, r1
 8006700:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	085b      	lsrs	r3, r3, #1
 8006706:	b29b      	uxth	r3, r3
 8006708:	2207      	movs	r2, #7
 800670a:	4013      	ands	r3, r2
 800670c:	b299      	uxth	r1, r3
 800670e:	183b      	adds	r3, r7, r0
 8006710:	183a      	adds	r2, r7, r0
 8006712:	8812      	ldrh	r2, [r2, #0]
 8006714:	430a      	orrs	r2, r1
 8006716:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	183a      	adds	r2, r7, r0
 800671e:	8812      	ldrh	r2, [r2, #0]
 8006720:	60da      	str	r2, [r3, #12]
 8006722:	e04c      	b.n	80067be <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8006724:	231e      	movs	r3, #30
 8006726:	18fb      	adds	r3, r7, r3
 8006728:	2201      	movs	r2, #1
 800672a:	701a      	strb	r2, [r3, #0]
 800672c:	e047      	b.n	80067be <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800672e:	231f      	movs	r3, #31
 8006730:	18fb      	adds	r3, r7, r3
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	2b08      	cmp	r3, #8
 8006736:	d015      	beq.n	8006764 <UART_SetConfig+0x1f0>
 8006738:	dc18      	bgt.n	800676c <UART_SetConfig+0x1f8>
 800673a:	2b04      	cmp	r3, #4
 800673c:	d00d      	beq.n	800675a <UART_SetConfig+0x1e6>
 800673e:	dc15      	bgt.n	800676c <UART_SetConfig+0x1f8>
 8006740:	2b00      	cmp	r3, #0
 8006742:	d002      	beq.n	800674a <UART_SetConfig+0x1d6>
 8006744:	2b02      	cmp	r3, #2
 8006746:	d005      	beq.n	8006754 <UART_SetConfig+0x1e0>
 8006748:	e010      	b.n	800676c <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800674a:	f7fd fe37 	bl	80043bc <HAL_RCC_GetPCLK1Freq>
 800674e:	0003      	movs	r3, r0
 8006750:	61bb      	str	r3, [r7, #24]
        break;
 8006752:	e012      	b.n	800677a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006754:	4b26      	ldr	r3, [pc, #152]	; (80067f0 <UART_SetConfig+0x27c>)
 8006756:	61bb      	str	r3, [r7, #24]
        break;
 8006758:	e00f      	b.n	800677a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800675a:	f7fd fdc1 	bl	80042e0 <HAL_RCC_GetSysClockFreq>
 800675e:	0003      	movs	r3, r0
 8006760:	61bb      	str	r3, [r7, #24]
        break;
 8006762:	e00a      	b.n	800677a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006764:	2380      	movs	r3, #128	; 0x80
 8006766:	021b      	lsls	r3, r3, #8
 8006768:	61bb      	str	r3, [r7, #24]
        break;
 800676a:	e006      	b.n	800677a <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 800676c:	2300      	movs	r3, #0
 800676e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006770:	231e      	movs	r3, #30
 8006772:	18fb      	adds	r3, r7, r3
 8006774:	2201      	movs	r2, #1
 8006776:	701a      	strb	r2, [r3, #0]
        break;
 8006778:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d01e      	beq.n	80067be <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	085a      	lsrs	r2, r3, #1
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	18d2      	adds	r2, r2, r3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	0019      	movs	r1, r3
 8006790:	0010      	movs	r0, r2
 8006792:	f7f9 fcc1 	bl	8000118 <__udivsi3>
 8006796:	0003      	movs	r3, r0
 8006798:	b29b      	uxth	r3, r3
 800679a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	2b0f      	cmp	r3, #15
 80067a0:	d909      	bls.n	80067b6 <UART_SetConfig+0x242>
 80067a2:	693a      	ldr	r2, [r7, #16]
 80067a4:	2380      	movs	r3, #128	; 0x80
 80067a6:	025b      	lsls	r3, r3, #9
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d204      	bcs.n	80067b6 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	693a      	ldr	r2, [r7, #16]
 80067b2:	60da      	str	r2, [r3, #12]
 80067b4:	e003      	b.n	80067be <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80067b6:	231e      	movs	r3, #30
 80067b8:	18fb      	adds	r3, r7, r3
 80067ba:	2201      	movs	r2, #1
 80067bc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80067ca:	231e      	movs	r3, #30
 80067cc:	18fb      	adds	r3, r7, r3
 80067ce:	781b      	ldrb	r3, [r3, #0]
}
 80067d0:	0018      	movs	r0, r3
 80067d2:	46bd      	mov	sp, r7
 80067d4:	b008      	add	sp, #32
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	ffff69f3 	.word	0xffff69f3
 80067dc:	ffffcfff 	.word	0xffffcfff
 80067e0:	fffff4ff 	.word	0xfffff4ff
 80067e4:	40013800 	.word	0x40013800
 80067e8:	40021000 	.word	0x40021000
 80067ec:	40004400 	.word	0x40004400
 80067f0:	007a1200 	.word	0x007a1200

080067f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b082      	sub	sp, #8
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006800:	2201      	movs	r2, #1
 8006802:	4013      	ands	r3, r2
 8006804:	d00b      	beq.n	800681e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	4a4a      	ldr	r2, [pc, #296]	; (8006938 <UART_AdvFeatureConfig+0x144>)
 800680e:	4013      	ands	r3, r2
 8006810:	0019      	movs	r1, r3
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	430a      	orrs	r2, r1
 800681c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006822:	2202      	movs	r2, #2
 8006824:	4013      	ands	r3, r2
 8006826:	d00b      	beq.n	8006840 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	4a43      	ldr	r2, [pc, #268]	; (800693c <UART_AdvFeatureConfig+0x148>)
 8006830:	4013      	ands	r3, r2
 8006832:	0019      	movs	r1, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	430a      	orrs	r2, r1
 800683e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006844:	2204      	movs	r2, #4
 8006846:	4013      	ands	r3, r2
 8006848:	d00b      	beq.n	8006862 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	4a3b      	ldr	r2, [pc, #236]	; (8006940 <UART_AdvFeatureConfig+0x14c>)
 8006852:	4013      	ands	r3, r2
 8006854:	0019      	movs	r1, r3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	430a      	orrs	r2, r1
 8006860:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006866:	2208      	movs	r2, #8
 8006868:	4013      	ands	r3, r2
 800686a:	d00b      	beq.n	8006884 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	4a34      	ldr	r2, [pc, #208]	; (8006944 <UART_AdvFeatureConfig+0x150>)
 8006874:	4013      	ands	r3, r2
 8006876:	0019      	movs	r1, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	430a      	orrs	r2, r1
 8006882:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006888:	2210      	movs	r2, #16
 800688a:	4013      	ands	r3, r2
 800688c:	d00b      	beq.n	80068a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	4a2c      	ldr	r2, [pc, #176]	; (8006948 <UART_AdvFeatureConfig+0x154>)
 8006896:	4013      	ands	r3, r2
 8006898:	0019      	movs	r1, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	430a      	orrs	r2, r1
 80068a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068aa:	2220      	movs	r2, #32
 80068ac:	4013      	ands	r3, r2
 80068ae:	d00b      	beq.n	80068c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	4a25      	ldr	r2, [pc, #148]	; (800694c <UART_AdvFeatureConfig+0x158>)
 80068b8:	4013      	ands	r3, r2
 80068ba:	0019      	movs	r1, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	430a      	orrs	r2, r1
 80068c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068cc:	2240      	movs	r2, #64	; 0x40
 80068ce:	4013      	ands	r3, r2
 80068d0:	d01d      	beq.n	800690e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	4a1d      	ldr	r2, [pc, #116]	; (8006950 <UART_AdvFeatureConfig+0x15c>)
 80068da:	4013      	ands	r3, r2
 80068dc:	0019      	movs	r1, r3
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	430a      	orrs	r2, r1
 80068e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068ee:	2380      	movs	r3, #128	; 0x80
 80068f0:	035b      	lsls	r3, r3, #13
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d10b      	bne.n	800690e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	4a15      	ldr	r2, [pc, #84]	; (8006954 <UART_AdvFeatureConfig+0x160>)
 80068fe:	4013      	ands	r3, r2
 8006900:	0019      	movs	r1, r3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	430a      	orrs	r2, r1
 800690c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006912:	2280      	movs	r2, #128	; 0x80
 8006914:	4013      	ands	r3, r2
 8006916:	d00b      	beq.n	8006930 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	4a0e      	ldr	r2, [pc, #56]	; (8006958 <UART_AdvFeatureConfig+0x164>)
 8006920:	4013      	ands	r3, r2
 8006922:	0019      	movs	r1, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	430a      	orrs	r2, r1
 800692e:	605a      	str	r2, [r3, #4]
  }
}
 8006930:	46c0      	nop			; (mov r8, r8)
 8006932:	46bd      	mov	sp, r7
 8006934:	b002      	add	sp, #8
 8006936:	bd80      	pop	{r7, pc}
 8006938:	fffdffff 	.word	0xfffdffff
 800693c:	fffeffff 	.word	0xfffeffff
 8006940:	fffbffff 	.word	0xfffbffff
 8006944:	ffff7fff 	.word	0xffff7fff
 8006948:	ffffefff 	.word	0xffffefff
 800694c:	ffffdfff 	.word	0xffffdfff
 8006950:	ffefffff 	.word	0xffefffff
 8006954:	ff9fffff 	.word	0xff9fffff
 8006958:	fff7ffff 	.word	0xfff7ffff

0800695c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b086      	sub	sp, #24
 8006960:	af02      	add	r7, sp, #8
 8006962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2280      	movs	r2, #128	; 0x80
 8006968:	2100      	movs	r1, #0
 800696a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800696c:	f7fb fa68 	bl	8001e40 <HAL_GetTick>
 8006970:	0003      	movs	r3, r0
 8006972:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2208      	movs	r2, #8
 800697c:	4013      	ands	r3, r2
 800697e:	2b08      	cmp	r3, #8
 8006980:	d10c      	bne.n	800699c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2280      	movs	r2, #128	; 0x80
 8006986:	0391      	lsls	r1, r2, #14
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	4a17      	ldr	r2, [pc, #92]	; (80069e8 <UART_CheckIdleState+0x8c>)
 800698c:	9200      	str	r2, [sp, #0]
 800698e:	2200      	movs	r2, #0
 8006990:	f000 f82c 	bl	80069ec <UART_WaitOnFlagUntilTimeout>
 8006994:	1e03      	subs	r3, r0, #0
 8006996:	d001      	beq.n	800699c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	e021      	b.n	80069e0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2204      	movs	r2, #4
 80069a4:	4013      	ands	r3, r2
 80069a6:	2b04      	cmp	r3, #4
 80069a8:	d10c      	bne.n	80069c4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2280      	movs	r2, #128	; 0x80
 80069ae:	03d1      	lsls	r1, r2, #15
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	4a0d      	ldr	r2, [pc, #52]	; (80069e8 <UART_CheckIdleState+0x8c>)
 80069b4:	9200      	str	r2, [sp, #0]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f000 f818 	bl	80069ec <UART_WaitOnFlagUntilTimeout>
 80069bc:	1e03      	subs	r3, r0, #0
 80069be:	d001      	beq.n	80069c4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069c0:	2303      	movs	r3, #3
 80069c2:	e00d      	b.n	80069e0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2220      	movs	r2, #32
 80069c8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2220      	movs	r2, #32
 80069ce:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2274      	movs	r2, #116	; 0x74
 80069da:	2100      	movs	r1, #0
 80069dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	0018      	movs	r0, r3
 80069e2:	46bd      	mov	sp, r7
 80069e4:	b004      	add	sp, #16
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	01ffffff 	.word	0x01ffffff

080069ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b094      	sub	sp, #80	; 0x50
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	603b      	str	r3, [r7, #0]
 80069f8:	1dfb      	adds	r3, r7, #7
 80069fa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069fc:	e0a3      	b.n	8006b46 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a00:	3301      	adds	r3, #1
 8006a02:	d100      	bne.n	8006a06 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006a04:	e09f      	b.n	8006b46 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a06:	f7fb fa1b 	bl	8001e40 <HAL_GetTick>
 8006a0a:	0002      	movs	r2, r0
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	1ad3      	subs	r3, r2, r3
 8006a10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d302      	bcc.n	8006a1c <UART_WaitOnFlagUntilTimeout+0x30>
 8006a16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d13d      	bne.n	8006a98 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a1c:	f3ef 8310 	mrs	r3, PRIMASK
 8006a20:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a24:	647b      	str	r3, [r7, #68]	; 0x44
 8006a26:	2301      	movs	r3, #1
 8006a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a2c:	f383 8810 	msr	PRIMASK, r3
}
 8006a30:	46c0      	nop			; (mov r8, r8)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	494c      	ldr	r1, [pc, #304]	; (8006b70 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006a3e:	400a      	ands	r2, r1
 8006a40:	601a      	str	r2, [r3, #0]
 8006a42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a44:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a48:	f383 8810 	msr	PRIMASK, r3
}
 8006a4c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a4e:	f3ef 8310 	mrs	r3, PRIMASK
 8006a52:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a56:	643b      	str	r3, [r7, #64]	; 0x40
 8006a58:	2301      	movs	r3, #1
 8006a5a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a5e:	f383 8810 	msr	PRIMASK, r3
}
 8006a62:	46c0      	nop			; (mov r8, r8)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	689a      	ldr	r2, [r3, #8]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2101      	movs	r1, #1
 8006a70:	438a      	bics	r2, r1
 8006a72:	609a      	str	r2, [r3, #8]
 8006a74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a76:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a7a:	f383 8810 	msr	PRIMASK, r3
}
 8006a7e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2220      	movs	r2, #32
 8006a84:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2220      	movs	r2, #32
 8006a8a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2274      	movs	r2, #116	; 0x74
 8006a90:	2100      	movs	r1, #0
 8006a92:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006a94:	2303      	movs	r3, #3
 8006a96:	e067      	b.n	8006b68 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2204      	movs	r2, #4
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	d050      	beq.n	8006b46 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	69da      	ldr	r2, [r3, #28]
 8006aaa:	2380      	movs	r3, #128	; 0x80
 8006aac:	011b      	lsls	r3, r3, #4
 8006aae:	401a      	ands	r2, r3
 8006ab0:	2380      	movs	r3, #128	; 0x80
 8006ab2:	011b      	lsls	r3, r3, #4
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d146      	bne.n	8006b46 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	2280      	movs	r2, #128	; 0x80
 8006abe:	0112      	lsls	r2, r2, #4
 8006ac0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ac2:	f3ef 8310 	mrs	r3, PRIMASK
 8006ac6:	613b      	str	r3, [r7, #16]
  return(result);
 8006ac8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006aca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006acc:	2301      	movs	r3, #1
 8006ace:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	f383 8810 	msr	PRIMASK, r3
}
 8006ad6:	46c0      	nop			; (mov r8, r8)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4923      	ldr	r1, [pc, #140]	; (8006b70 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006ae4:	400a      	ands	r2, r1
 8006ae6:	601a      	str	r2, [r3, #0]
 8006ae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	f383 8810 	msr	PRIMASK, r3
}
 8006af2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006af4:	f3ef 8310 	mrs	r3, PRIMASK
 8006af8:	61fb      	str	r3, [r7, #28]
  return(result);
 8006afa:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006afc:	64bb      	str	r3, [r7, #72]	; 0x48
 8006afe:	2301      	movs	r3, #1
 8006b00:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b02:	6a3b      	ldr	r3, [r7, #32]
 8006b04:	f383 8810 	msr	PRIMASK, r3
}
 8006b08:	46c0      	nop			; (mov r8, r8)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	689a      	ldr	r2, [r3, #8]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	2101      	movs	r1, #1
 8006b16:	438a      	bics	r2, r1
 8006b18:	609a      	str	r2, [r3, #8]
 8006b1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b1c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b20:	f383 8810 	msr	PRIMASK, r3
}
 8006b24:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2220      	movs	r2, #32
 8006b2a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2220      	movs	r2, #32
 8006b30:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2280      	movs	r2, #128	; 0x80
 8006b36:	2120      	movs	r1, #32
 8006b38:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2274      	movs	r2, #116	; 0x74
 8006b3e:	2100      	movs	r1, #0
 8006b40:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006b42:	2303      	movs	r3, #3
 8006b44:	e010      	b.n	8006b68 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	69db      	ldr	r3, [r3, #28]
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	4013      	ands	r3, r2
 8006b50:	68ba      	ldr	r2, [r7, #8]
 8006b52:	1ad3      	subs	r3, r2, r3
 8006b54:	425a      	negs	r2, r3
 8006b56:	4153      	adcs	r3, r2
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	001a      	movs	r2, r3
 8006b5c:	1dfb      	adds	r3, r7, #7
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d100      	bne.n	8006b66 <UART_WaitOnFlagUntilTimeout+0x17a>
 8006b64:	e74b      	b.n	80069fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b66:	2300      	movs	r3, #0
}
 8006b68:	0018      	movs	r0, r3
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	b014      	add	sp, #80	; 0x50
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	fffffe5f 	.word	0xfffffe5f

08006b74 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b08c      	sub	sp, #48	; 0x30
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	60b9      	str	r1, [r7, #8]
 8006b7e:	1dbb      	adds	r3, r7, #6
 8006b80:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	68ba      	ldr	r2, [r7, #8]
 8006b86:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	1dba      	adds	r2, r7, #6
 8006b8c:	2158      	movs	r1, #88	; 0x58
 8006b8e:	8812      	ldrh	r2, [r2, #0]
 8006b90:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	1dba      	adds	r2, r7, #6
 8006b96:	215a      	movs	r1, #90	; 0x5a
 8006b98:	8812      	ldrh	r2, [r2, #0]
 8006b9a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	689a      	ldr	r2, [r3, #8]
 8006ba6:	2380      	movs	r3, #128	; 0x80
 8006ba8:	015b      	lsls	r3, r3, #5
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d10d      	bne.n	8006bca <UART_Start_Receive_IT+0x56>
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d104      	bne.n	8006bc0 <UART_Start_Receive_IT+0x4c>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	225c      	movs	r2, #92	; 0x5c
 8006bba:	4939      	ldr	r1, [pc, #228]	; (8006ca0 <UART_Start_Receive_IT+0x12c>)
 8006bbc:	5299      	strh	r1, [r3, r2]
 8006bbe:	e01a      	b.n	8006bf6 <UART_Start_Receive_IT+0x82>
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	225c      	movs	r2, #92	; 0x5c
 8006bc4:	21ff      	movs	r1, #255	; 0xff
 8006bc6:	5299      	strh	r1, [r3, r2]
 8006bc8:	e015      	b.n	8006bf6 <UART_Start_Receive_IT+0x82>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d10d      	bne.n	8006bee <UART_Start_Receive_IT+0x7a>
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d104      	bne.n	8006be4 <UART_Start_Receive_IT+0x70>
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	225c      	movs	r2, #92	; 0x5c
 8006bde:	21ff      	movs	r1, #255	; 0xff
 8006be0:	5299      	strh	r1, [r3, r2]
 8006be2:	e008      	b.n	8006bf6 <UART_Start_Receive_IT+0x82>
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	225c      	movs	r2, #92	; 0x5c
 8006be8:	217f      	movs	r1, #127	; 0x7f
 8006bea:	5299      	strh	r1, [r3, r2]
 8006bec:	e003      	b.n	8006bf6 <UART_Start_Receive_IT+0x82>
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	225c      	movs	r2, #92	; 0x5c
 8006bf2:	2100      	movs	r1, #0
 8006bf4:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2280      	movs	r2, #128	; 0x80
 8006bfa:	2100      	movs	r1, #0
 8006bfc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2222      	movs	r2, #34	; 0x22
 8006c02:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c04:	f3ef 8310 	mrs	r3, PRIMASK
 8006c08:	61fb      	str	r3, [r7, #28]
  return(result);
 8006c0a:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c0e:	2301      	movs	r3, #1
 8006c10:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c12:	6a3b      	ldr	r3, [r7, #32]
 8006c14:	f383 8810 	msr	PRIMASK, r3
}
 8006c18:	46c0      	nop			; (mov r8, r8)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	689a      	ldr	r2, [r3, #8]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2101      	movs	r1, #1
 8006c26:	430a      	orrs	r2, r1
 8006c28:	609a      	str	r2, [r3, #8]
 8006c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c2c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c30:	f383 8810 	msr	PRIMASK, r3
}
 8006c34:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	689a      	ldr	r2, [r3, #8]
 8006c3a:	2380      	movs	r3, #128	; 0x80
 8006c3c:	015b      	lsls	r3, r3, #5
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d107      	bne.n	8006c52 <UART_Start_Receive_IT+0xde>
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d103      	bne.n	8006c52 <UART_Start_Receive_IT+0xde>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	4a15      	ldr	r2, [pc, #84]	; (8006ca4 <UART_Start_Receive_IT+0x130>)
 8006c4e:	665a      	str	r2, [r3, #100]	; 0x64
 8006c50:	e002      	b.n	8006c58 <UART_Start_Receive_IT+0xe4>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	4a14      	ldr	r2, [pc, #80]	; (8006ca8 <UART_Start_Receive_IT+0x134>)
 8006c56:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2274      	movs	r2, #116	; 0x74
 8006c5c:	2100      	movs	r1, #0
 8006c5e:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c60:	f3ef 8310 	mrs	r3, PRIMASK
 8006c64:	613b      	str	r3, [r7, #16]
  return(result);
 8006c66:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006c68:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	f383 8810 	msr	PRIMASK, r3
}
 8006c74:	46c0      	nop			; (mov r8, r8)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2190      	movs	r1, #144	; 0x90
 8006c82:	0049      	lsls	r1, r1, #1
 8006c84:	430a      	orrs	r2, r1
 8006c86:	601a      	str	r2, [r3, #0]
 8006c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c8a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	f383 8810 	msr	PRIMASK, r3
}
 8006c92:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	0018      	movs	r0, r3
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	b00c      	add	sp, #48	; 0x30
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	46c0      	nop			; (mov r8, r8)
 8006ca0:	000001ff 	.word	0x000001ff
 8006ca4:	08006f5d 	.word	0x08006f5d
 8006ca8:	08006df5 	.word	0x08006df5

08006cac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b08e      	sub	sp, #56	; 0x38
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cb4:	f3ef 8310 	mrs	r3, PRIMASK
 8006cb8:	617b      	str	r3, [r7, #20]
  return(result);
 8006cba:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cbc:	637b      	str	r3, [r7, #52]	; 0x34
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	f383 8810 	msr	PRIMASK, r3
}
 8006cc8:	46c0      	nop			; (mov r8, r8)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4925      	ldr	r1, [pc, #148]	; (8006d6c <UART_EndRxTransfer+0xc0>)
 8006cd6:	400a      	ands	r2, r1
 8006cd8:	601a      	str	r2, [r3, #0]
 8006cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cdc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	f383 8810 	msr	PRIMASK, r3
}
 8006ce4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ce6:	f3ef 8310 	mrs	r3, PRIMASK
 8006cea:	623b      	str	r3, [r7, #32]
  return(result);
 8006cec:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cee:	633b      	str	r3, [r7, #48]	; 0x30
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf6:	f383 8810 	msr	PRIMASK, r3
}
 8006cfa:	46c0      	nop			; (mov r8, r8)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	689a      	ldr	r2, [r3, #8]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2101      	movs	r1, #1
 8006d08:	438a      	bics	r2, r1
 8006d0a:	609a      	str	r2, [r3, #8]
 8006d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d12:	f383 8810 	msr	PRIMASK, r3
}
 8006d16:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d118      	bne.n	8006d52 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d20:	f3ef 8310 	mrs	r3, PRIMASK
 8006d24:	60bb      	str	r3, [r7, #8]
  return(result);
 8006d26:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f383 8810 	msr	PRIMASK, r3
}
 8006d34:	46c0      	nop			; (mov r8, r8)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2110      	movs	r1, #16
 8006d42:	438a      	bics	r2, r1
 8006d44:	601a      	str	r2, [r3, #0]
 8006d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d48:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	f383 8810 	msr	PRIMASK, r3
}
 8006d50:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2220      	movs	r2, #32
 8006d56:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006d64:	46c0      	nop			; (mov r8, r8)
 8006d66:	46bd      	mov	sp, r7
 8006d68:	b00e      	add	sp, #56	; 0x38
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	fffffedf 	.word	0xfffffedf

08006d70 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	225a      	movs	r2, #90	; 0x5a
 8006d82:	2100      	movs	r1, #0
 8006d84:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2252      	movs	r2, #82	; 0x52
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	0018      	movs	r0, r3
 8006d92:	f7ff fbdb 	bl	800654c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d96:	46c0      	nop			; (mov r8, r8)
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	b004      	add	sp, #16
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b086      	sub	sp, #24
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006da6:	f3ef 8310 	mrs	r3, PRIMASK
 8006daa:	60bb      	str	r3, [r7, #8]
  return(result);
 8006dac:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006dae:	617b      	str	r3, [r7, #20]
 8006db0:	2301      	movs	r3, #1
 8006db2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f383 8810 	msr	PRIMASK, r3
}
 8006dba:	46c0      	nop			; (mov r8, r8)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2140      	movs	r1, #64	; 0x40
 8006dc8:	438a      	bics	r2, r1
 8006dca:	601a      	str	r2, [r3, #0]
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	f383 8810 	msr	PRIMASK, r3
}
 8006dd6:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2220      	movs	r2, #32
 8006ddc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	0018      	movs	r0, r3
 8006de8:	f7ff fba8 	bl	800653c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dec:	46c0      	nop			; (mov r8, r8)
 8006dee:	46bd      	mov	sp, r7
 8006df0:	b006      	add	sp, #24
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b090      	sub	sp, #64	; 0x40
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006dfc:	203e      	movs	r0, #62	; 0x3e
 8006dfe:	183b      	adds	r3, r7, r0
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	215c      	movs	r1, #92	; 0x5c
 8006e04:	5a52      	ldrh	r2, [r2, r1]
 8006e06:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e0c:	2b22      	cmp	r3, #34	; 0x22
 8006e0e:	d000      	beq.n	8006e12 <UART_RxISR_8BIT+0x1e>
 8006e10:	e095      	b.n	8006f3e <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	213c      	movs	r1, #60	; 0x3c
 8006e18:	187b      	adds	r3, r7, r1
 8006e1a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8006e1c:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006e1e:	187b      	adds	r3, r7, r1
 8006e20:	881b      	ldrh	r3, [r3, #0]
 8006e22:	b2da      	uxtb	r2, r3
 8006e24:	183b      	adds	r3, r7, r0
 8006e26:	881b      	ldrh	r3, [r3, #0]
 8006e28:	b2d9      	uxtb	r1, r3
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e2e:	400a      	ands	r2, r1
 8006e30:	b2d2      	uxtb	r2, r2
 8006e32:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e38:	1c5a      	adds	r2, r3, #1
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	225a      	movs	r2, #90	; 0x5a
 8006e42:	5a9b      	ldrh	r3, [r3, r2]
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	3b01      	subs	r3, #1
 8006e48:	b299      	uxth	r1, r3
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	225a      	movs	r2, #90	; 0x5a
 8006e4e:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	225a      	movs	r2, #90	; 0x5a
 8006e54:	5a9b      	ldrh	r3, [r3, r2]
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d178      	bne.n	8006f4e <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e5c:	f3ef 8310 	mrs	r3, PRIMASK
 8006e60:	61bb      	str	r3, [r7, #24]
  return(result);
 8006e62:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e64:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e66:	2301      	movs	r3, #1
 8006e68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	f383 8810 	msr	PRIMASK, r3
}
 8006e70:	46c0      	nop			; (mov r8, r8)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4936      	ldr	r1, [pc, #216]	; (8006f58 <UART_RxISR_8BIT+0x164>)
 8006e7e:	400a      	ands	r2, r1
 8006e80:	601a      	str	r2, [r3, #0]
 8006e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e84:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e86:	6a3b      	ldr	r3, [r7, #32]
 8006e88:	f383 8810 	msr	PRIMASK, r3
}
 8006e8c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e8e:	f3ef 8310 	mrs	r3, PRIMASK
 8006e92:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e96:	637b      	str	r3, [r7, #52]	; 0x34
 8006e98:	2301      	movs	r3, #1
 8006e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e9e:	f383 8810 	msr	PRIMASK, r3
}
 8006ea2:	46c0      	nop			; (mov r8, r8)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	689a      	ldr	r2, [r3, #8]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2101      	movs	r1, #1
 8006eb0:	438a      	bics	r2, r1
 8006eb2:	609a      	str	r2, [r3, #8]
 8006eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eba:	f383 8810 	msr	PRIMASK, r3
}
 8006ebe:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2220      	movs	r2, #32
 8006ec4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d12f      	bne.n	8006f34 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006eda:	f3ef 8310 	mrs	r3, PRIMASK
 8006ede:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ee0:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ee2:	633b      	str	r3, [r7, #48]	; 0x30
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	f383 8810 	msr	PRIMASK, r3
}
 8006eee:	46c0      	nop			; (mov r8, r8)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2110      	movs	r1, #16
 8006efc:	438a      	bics	r2, r1
 8006efe:	601a      	str	r2, [r3, #0]
 8006f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f02:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	f383 8810 	msr	PRIMASK, r3
}
 8006f0a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	69db      	ldr	r3, [r3, #28]
 8006f12:	2210      	movs	r2, #16
 8006f14:	4013      	ands	r3, r2
 8006f16:	2b10      	cmp	r3, #16
 8006f18:	d103      	bne.n	8006f22 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	2210      	movs	r2, #16
 8006f20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2258      	movs	r2, #88	; 0x58
 8006f26:	5a9a      	ldrh	r2, [r3, r2]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	0011      	movs	r1, r2
 8006f2c:	0018      	movs	r0, r3
 8006f2e:	f7ff fb15 	bl	800655c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f32:	e00c      	b.n	8006f4e <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	0018      	movs	r0, r3
 8006f38:	f7f9 fdba 	bl	8000ab0 <HAL_UART_RxCpltCallback>
}
 8006f3c:	e007      	b.n	8006f4e <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	699a      	ldr	r2, [r3, #24]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2108      	movs	r1, #8
 8006f4a:	430a      	orrs	r2, r1
 8006f4c:	619a      	str	r2, [r3, #24]
}
 8006f4e:	46c0      	nop			; (mov r8, r8)
 8006f50:	46bd      	mov	sp, r7
 8006f52:	b010      	add	sp, #64	; 0x40
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	46c0      	nop			; (mov r8, r8)
 8006f58:	fffffedf 	.word	0xfffffedf

08006f5c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b090      	sub	sp, #64	; 0x40
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006f64:	203e      	movs	r0, #62	; 0x3e
 8006f66:	183b      	adds	r3, r7, r0
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	215c      	movs	r1, #92	; 0x5c
 8006f6c:	5a52      	ldrh	r2, [r2, r1]
 8006f6e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f74:	2b22      	cmp	r3, #34	; 0x22
 8006f76:	d000      	beq.n	8006f7a <UART_RxISR_16BIT+0x1e>
 8006f78:	e095      	b.n	80070a6 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	213c      	movs	r1, #60	; 0x3c
 8006f80:	187b      	adds	r3, r7, r1
 8006f82:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8006f84:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f8a:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8006f8c:	187b      	adds	r3, r7, r1
 8006f8e:	183a      	adds	r2, r7, r0
 8006f90:	881b      	ldrh	r3, [r3, #0]
 8006f92:	8812      	ldrh	r2, [r2, #0]
 8006f94:	4013      	ands	r3, r2
 8006f96:	b29a      	uxth	r2, r3
 8006f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f9a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fa0:	1c9a      	adds	r2, r3, #2
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	225a      	movs	r2, #90	; 0x5a
 8006faa:	5a9b      	ldrh	r3, [r3, r2]
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	b299      	uxth	r1, r3
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	225a      	movs	r2, #90	; 0x5a
 8006fb6:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	225a      	movs	r2, #90	; 0x5a
 8006fbc:	5a9b      	ldrh	r3, [r3, r2]
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d178      	bne.n	80070b6 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fc4:	f3ef 8310 	mrs	r3, PRIMASK
 8006fc8:	617b      	str	r3, [r7, #20]
  return(result);
 8006fca:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fcc:	637b      	str	r3, [r7, #52]	; 0x34
 8006fce:	2301      	movs	r3, #1
 8006fd0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	f383 8810 	msr	PRIMASK, r3
}
 8006fd8:	46c0      	nop			; (mov r8, r8)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4936      	ldr	r1, [pc, #216]	; (80070c0 <UART_RxISR_16BIT+0x164>)
 8006fe6:	400a      	ands	r2, r1
 8006fe8:	601a      	str	r2, [r3, #0]
 8006fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fee:	69fb      	ldr	r3, [r7, #28]
 8006ff0:	f383 8810 	msr	PRIMASK, r3
}
 8006ff4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ff6:	f3ef 8310 	mrs	r3, PRIMASK
 8006ffa:	623b      	str	r3, [r7, #32]
  return(result);
 8006ffc:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ffe:	633b      	str	r3, [r7, #48]	; 0x30
 8007000:	2301      	movs	r3, #1
 8007002:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007006:	f383 8810 	msr	PRIMASK, r3
}
 800700a:	46c0      	nop			; (mov r8, r8)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	689a      	ldr	r2, [r3, #8]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2101      	movs	r1, #1
 8007018:	438a      	bics	r2, r1
 800701a:	609a      	str	r2, [r3, #8]
 800701c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800701e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007022:	f383 8810 	msr	PRIMASK, r3
}
 8007026:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2220      	movs	r2, #32
 800702c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007038:	2b01      	cmp	r3, #1
 800703a:	d12f      	bne.n	800709c <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007042:	f3ef 8310 	mrs	r3, PRIMASK
 8007046:	60bb      	str	r3, [r7, #8]
  return(result);
 8007048:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800704a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800704c:	2301      	movs	r3, #1
 800704e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f383 8810 	msr	PRIMASK, r3
}
 8007056:	46c0      	nop			; (mov r8, r8)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	2110      	movs	r1, #16
 8007064:	438a      	bics	r2, r1
 8007066:	601a      	str	r2, [r3, #0]
 8007068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800706a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	f383 8810 	msr	PRIMASK, r3
}
 8007072:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	69db      	ldr	r3, [r3, #28]
 800707a:	2210      	movs	r2, #16
 800707c:	4013      	ands	r3, r2
 800707e:	2b10      	cmp	r3, #16
 8007080:	d103      	bne.n	800708a <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2210      	movs	r2, #16
 8007088:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2258      	movs	r2, #88	; 0x58
 800708e:	5a9a      	ldrh	r2, [r3, r2]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	0011      	movs	r1, r2
 8007094:	0018      	movs	r0, r3
 8007096:	f7ff fa61 	bl	800655c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800709a:	e00c      	b.n	80070b6 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	0018      	movs	r0, r3
 80070a0:	f7f9 fd06 	bl	8000ab0 <HAL_UART_RxCpltCallback>
}
 80070a4:	e007      	b.n	80070b6 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	699a      	ldr	r2, [r3, #24]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2108      	movs	r1, #8
 80070b2:	430a      	orrs	r2, r1
 80070b4:	619a      	str	r2, [r3, #24]
}
 80070b6:	46c0      	nop			; (mov r8, r8)
 80070b8:	46bd      	mov	sp, r7
 80070ba:	b010      	add	sp, #64	; 0x40
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	46c0      	nop			; (mov r8, r8)
 80070c0:	fffffedf 	.word	0xfffffedf

080070c4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b082      	sub	sp, #8
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80070cc:	46c0      	nop			; (mov r8, r8)
 80070ce:	46bd      	mov	sp, r7
 80070d0:	b002      	add	sp, #8
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <__libc_init_array>:
 80070d4:	b570      	push	{r4, r5, r6, lr}
 80070d6:	2600      	movs	r6, #0
 80070d8:	4d0c      	ldr	r5, [pc, #48]	; (800710c <__libc_init_array+0x38>)
 80070da:	4c0d      	ldr	r4, [pc, #52]	; (8007110 <__libc_init_array+0x3c>)
 80070dc:	1b64      	subs	r4, r4, r5
 80070de:	10a4      	asrs	r4, r4, #2
 80070e0:	42a6      	cmp	r6, r4
 80070e2:	d109      	bne.n	80070f8 <__libc_init_array+0x24>
 80070e4:	2600      	movs	r6, #0
 80070e6:	f000 f835 	bl	8007154 <_init>
 80070ea:	4d0a      	ldr	r5, [pc, #40]	; (8007114 <__libc_init_array+0x40>)
 80070ec:	4c0a      	ldr	r4, [pc, #40]	; (8007118 <__libc_init_array+0x44>)
 80070ee:	1b64      	subs	r4, r4, r5
 80070f0:	10a4      	asrs	r4, r4, #2
 80070f2:	42a6      	cmp	r6, r4
 80070f4:	d105      	bne.n	8007102 <__libc_init_array+0x2e>
 80070f6:	bd70      	pop	{r4, r5, r6, pc}
 80070f8:	00b3      	lsls	r3, r6, #2
 80070fa:	58eb      	ldr	r3, [r5, r3]
 80070fc:	4798      	blx	r3
 80070fe:	3601      	adds	r6, #1
 8007100:	e7ee      	b.n	80070e0 <__libc_init_array+0xc>
 8007102:	00b3      	lsls	r3, r6, #2
 8007104:	58eb      	ldr	r3, [r5, r3]
 8007106:	4798      	blx	r3
 8007108:	3601      	adds	r6, #1
 800710a:	e7f2      	b.n	80070f2 <__libc_init_array+0x1e>
 800710c:	08007390 	.word	0x08007390
 8007110:	08007390 	.word	0x08007390
 8007114:	08007390 	.word	0x08007390
 8007118:	08007394 	.word	0x08007394

0800711c <memset>:
 800711c:	0003      	movs	r3, r0
 800711e:	1882      	adds	r2, r0, r2
 8007120:	4293      	cmp	r3, r2
 8007122:	d100      	bne.n	8007126 <memset+0xa>
 8007124:	4770      	bx	lr
 8007126:	7019      	strb	r1, [r3, #0]
 8007128:	3301      	adds	r3, #1
 800712a:	e7f9      	b.n	8007120 <memset+0x4>

0800712c <strncpy>:
 800712c:	0003      	movs	r3, r0
 800712e:	b530      	push	{r4, r5, lr}
 8007130:	001d      	movs	r5, r3
 8007132:	2a00      	cmp	r2, #0
 8007134:	d006      	beq.n	8007144 <strncpy+0x18>
 8007136:	780c      	ldrb	r4, [r1, #0]
 8007138:	3a01      	subs	r2, #1
 800713a:	3301      	adds	r3, #1
 800713c:	702c      	strb	r4, [r5, #0]
 800713e:	3101      	adds	r1, #1
 8007140:	2c00      	cmp	r4, #0
 8007142:	d1f5      	bne.n	8007130 <strncpy+0x4>
 8007144:	2100      	movs	r1, #0
 8007146:	189a      	adds	r2, r3, r2
 8007148:	4293      	cmp	r3, r2
 800714a:	d100      	bne.n	800714e <strncpy+0x22>
 800714c:	bd30      	pop	{r4, r5, pc}
 800714e:	7019      	strb	r1, [r3, #0]
 8007150:	3301      	adds	r3, #1
 8007152:	e7f9      	b.n	8007148 <strncpy+0x1c>

08007154 <_init>:
 8007154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007156:	46c0      	nop			; (mov r8, r8)
 8007158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800715a:	bc08      	pop	{r3}
 800715c:	469e      	mov	lr, r3
 800715e:	4770      	bx	lr

08007160 <_fini>:
 8007160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007162:	46c0      	nop			; (mov r8, r8)
 8007164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007166:	bc08      	pop	{r3}
 8007168:	469e      	mov	lr, r3
 800716a:	4770      	bx	lr
