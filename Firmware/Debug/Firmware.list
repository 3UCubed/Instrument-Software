
Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065d0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08006690  08006690  00016690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068a8  080068a8  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  080068a8  080068a8  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  080068a8  080068a8  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068a8  080068a8  000168a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068ac  080068ac  000168ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  080068b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003bc  20000028  080068d8  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003e4  080068d8  000203e4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016221  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c74  00000000  00000000  00036271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e8  00000000  00000000  00038ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c0  00000000  00000000  0003a2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000135be  00000000  00000000  0003b590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001856d  00000000  00000000  0004eb4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00074e6c  00000000  00000000  000670bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dbf27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004874  00000000  00000000  000dbf78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000028 	.word	0x20000028
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006678 	.word	0x08006678

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000002c 	.word	0x2000002c
 8000104:	08006678 	.word	0x08006678

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000224:	f3bf 8f4f 	dsb	sy
}
 8000228:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800022a:	4b04      	ldr	r3, [pc, #16]	; (800023c <__NVIC_SystemReset+0x1c>)
 800022c:	4a04      	ldr	r2, [pc, #16]	; (8000240 <__NVIC_SystemReset+0x20>)
 800022e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000230:	f3bf 8f4f 	dsb	sy
}
 8000234:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000236:	46c0      	nop			; (mov r8, r8)
 8000238:	e7fd      	b.n	8000236 <__NVIC_SystemReset+0x16>
 800023a:	46c0      	nop			; (mov r8, r8)
 800023c:	e000ed00 	.word	0xe000ed00
 8000240:	05fa0004 	.word	0x05fa0004

08000244 <HAL_TIM_OC_DelayElapsedCallback>:
 * This is where packets are sent
 * Function should be called every 125ms for PMT and 100ms for ERPA
 * HK will send every 50 ERPA packets or every 5 seconds
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000246:	b091      	sub	sp, #68	; 0x44
 8000248:	af02      	add	r7, sp, #8
 800024a:	6078      	str	r0, [r7, #4]
  if (htim == &htim2)
 800024c:	687a      	ldr	r2, [r7, #4]
 800024e:	4bd5      	ldr	r3, [pc, #852]	; (80005a4 <HAL_TIM_OC_DelayElapsedCallback+0x360>)
 8000250:	429a      	cmp	r2, r3
 8000252:	d000      	beq.n	8000256 <HAL_TIM_OC_DelayElapsedCallback+0x12>
 8000254:	e32e      	b.n	80008b4 <HAL_TIM_OC_DelayElapsedCallback+0x670>
          ;

        erpa_raw = SPI2->DR;
        */

        DAC->DHR12R1 = DAC_OUT[step];
 8000256:	4bd4      	ldr	r3, [pc, #848]	; (80005a8 <HAL_TIM_OC_DelayElapsedCallback+0x364>)
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	0019      	movs	r1, r3
 800025c:	4bd3      	ldr	r3, [pc, #844]	; (80005ac <HAL_TIM_OC_DelayElapsedCallback+0x368>)
 800025e:	4ad4      	ldr	r2, [pc, #848]	; (80005b0 <HAL_TIM_OC_DelayElapsedCallback+0x36c>)
 8000260:	0089      	lsls	r1, r1, #2
 8000262:	588a      	ldr	r2, [r1, r2]
 8000264:	609a      	str	r2, [r3, #8]

        HAL_ADC_Start_DMA(&hadc, (uint32_t *)adcResultsDMA,
 8000266:	2311      	movs	r3, #17
 8000268:	001a      	movs	r2, r3
 800026a:	49d2      	ldr	r1, [pc, #840]	; (80005b4 <HAL_TIM_OC_DelayElapsedCallback+0x370>)
 800026c:	4bd2      	ldr	r3, [pc, #840]	; (80005b8 <HAL_TIM_OC_DelayElapsedCallback+0x374>)
 800026e:	0018      	movs	r0, r3
 8000270:	f001 fdfc 	bl	8001e6c <HAL_ADC_Start_DMA>
                          adcChannelCount);
        uint16_t PA0 = adcResultsDMA[0]; 				// ADC_IN0, END_mon: entrance/collimator monitor
 8000274:	212e      	movs	r1, #46	; 0x2e
 8000276:	187b      	adds	r3, r7, r1
 8000278:	4ace      	ldr	r2, [pc, #824]	; (80005b4 <HAL_TIM_OC_DelayElapsedCallback+0x370>)
 800027a:	8812      	ldrh	r2, [r2, #0]
 800027c:	801a      	strh	r2, [r3, #0]
        uint16_t PA7 = adcResultsDMA[6]; 				// ADC_IN7, SWP_mon: Sweep voltage monitor
 800027e:	202c      	movs	r0, #44	; 0x2c
 8000280:	183b      	adds	r3, r7, r0
 8000282:	4acc      	ldr	r2, [pc, #816]	; (80005b4 <HAL_TIM_OC_DelayElapsedCallback+0x370>)
 8000284:	8992      	ldrh	r2, [r2, #12]
 8000286:	801a      	strh	r2, [r3, #0]
        uint16_t PB0 = adcResultsDMA[7]; 				// ADC_IN8, TMP 1: Sweep temperature
 8000288:	242a      	movs	r4, #42	; 0x2a
 800028a:	193b      	adds	r3, r7, r4
 800028c:	4ac9      	ldr	r2, [pc, #804]	; (80005b4 <HAL_TIM_OC_DelayElapsedCallback+0x370>)
 800028e:	89d2      	ldrh	r2, [r2, #14]
 8000290:	801a      	strh	r2, [r3, #0]
        uint16_t PB1 = adcResultsDMA[8]; 				// ADC_IN9, TMP 2: feedbacks
 8000292:	2528      	movs	r5, #40	; 0x28
 8000294:	197b      	adds	r3, r7, r5
 8000296:	4ac7      	ldr	r2, [pc, #796]	; (80005b4 <HAL_TIM_OC_DelayElapsedCallback+0x370>)
 8000298:	8a12      	ldrh	r2, [r2, #16]
 800029a:	801a      	strh	r2, [r3, #0]

        erpa_buf[0] = erpa_sync;                  		// ERPA SYNC 0xAA MSB
 800029c:	22aa      	movs	r2, #170	; 0xaa
 800029e:	4bc7      	ldr	r3, [pc, #796]	; (80005bc <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 80002a0:	701a      	strb	r2, [r3, #0]
        erpa_buf[1] = erpa_sync;                  		// ERPA SYNC 0xAA LSB
 80002a2:	22aa      	movs	r2, #170	; 0xaa
 80002a4:	4bc5      	ldr	r3, [pc, #788]	; (80005bc <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 80002a6:	705a      	strb	r2, [r3, #1]
        erpa_buf[2] = ((erpa_seq & 0xFF00) >> 8); 		// ERPA SEQ # MSB
 80002a8:	4bc5      	ldr	r3, [pc, #788]	; (80005c0 <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 80002aa:	881b      	ldrh	r3, [r3, #0]
 80002ac:	0a1b      	lsrs	r3, r3, #8
 80002ae:	b29b      	uxth	r3, r3
 80002b0:	b2da      	uxtb	r2, r3
 80002b2:	4bc2      	ldr	r3, [pc, #776]	; (80005bc <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 80002b4:	709a      	strb	r2, [r3, #2]
        erpa_buf[3] = (erpa_seq & 0xFF);          		// ERPA SEQ # MSB
 80002b6:	4bc2      	ldr	r3, [pc, #776]	; (80005c0 <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 80002b8:	881b      	ldrh	r3, [r3, #0]
 80002ba:	b2da      	uxtb	r2, r3
 80002bc:	4bbf      	ldr	r3, [pc, #764]	; (80005bc <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 80002be:	70da      	strb	r2, [r3, #3]
        erpa_buf[4] = ((PA0 & 0xFF00) >> 8); 	  		// ENDmon MSB
 80002c0:	187b      	adds	r3, r7, r1
 80002c2:	881b      	ldrh	r3, [r3, #0]
 80002c4:	0a1b      	lsrs	r3, r3, #8
 80002c6:	b29b      	uxth	r3, r3
 80002c8:	b2da      	uxtb	r2, r3
 80002ca:	4bbc      	ldr	r3, [pc, #752]	; (80005bc <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 80002cc:	711a      	strb	r2, [r3, #4]
        erpa_buf[5] = (PA0 & 0xFF);               		// ENDmon LSB
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	881b      	ldrh	r3, [r3, #0]
 80002d2:	b2da      	uxtb	r2, r3
 80002d4:	4bb9      	ldr	r3, [pc, #740]	; (80005bc <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 80002d6:	715a      	strb	r2, [r3, #5]
        erpa_buf[6] = ((PA7 & 0xFF00) >> 8);      		// SWP Monitored MSB
 80002d8:	183b      	adds	r3, r7, r0
 80002da:	881b      	ldrh	r3, [r3, #0]
 80002dc:	0a1b      	lsrs	r3, r3, #8
 80002de:	b29b      	uxth	r3, r3
 80002e0:	b2da      	uxtb	r2, r3
 80002e2:	4bb6      	ldr	r3, [pc, #728]	; (80005bc <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 80002e4:	719a      	strb	r2, [r3, #6]
        erpa_buf[7] = (PA7 & 0xFF);               		// SWP Monitored LSB
 80002e6:	183b      	adds	r3, r7, r0
 80002e8:	881b      	ldrh	r3, [r3, #0]
 80002ea:	b2da      	uxtb	r2, r3
 80002ec:	4bb3      	ldr	r3, [pc, #716]	; (80005bc <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 80002ee:	71da      	strb	r2, [r3, #7]
        erpa_buf[8] = ((PB0 & 0xFF00) >> 8);      		// TEMPURATURE 1 MSB
 80002f0:	193b      	adds	r3, r7, r4
 80002f2:	881b      	ldrh	r3, [r3, #0]
 80002f4:	0a1b      	lsrs	r3, r3, #8
 80002f6:	b29b      	uxth	r3, r3
 80002f8:	b2da      	uxtb	r2, r3
 80002fa:	4bb0      	ldr	r3, [pc, #704]	; (80005bc <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 80002fc:	721a      	strb	r2, [r3, #8]
        erpa_buf[9] = (PB0 & 0xFF);               		// TEMPURATURE 1 LSB
 80002fe:	193b      	adds	r3, r7, r4
 8000300:	881b      	ldrh	r3, [r3, #0]
 8000302:	b2da      	uxtb	r2, r3
 8000304:	4bad      	ldr	r3, [pc, #692]	; (80005bc <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 8000306:	725a      	strb	r2, [r3, #9]
        erpa_buf[10] = ((PB1 & 0xFF00) >> 8);     		// TEMPURATURE 2 MSB
 8000308:	197b      	adds	r3, r7, r5
 800030a:	881b      	ldrh	r3, [r3, #0]
 800030c:	0a1b      	lsrs	r3, r3, #8
 800030e:	b29b      	uxth	r3, r3
 8000310:	b2da      	uxtb	r2, r3
 8000312:	4baa      	ldr	r3, [pc, #680]	; (80005bc <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 8000314:	729a      	strb	r2, [r3, #10]
        erpa_buf[11] = (PB1 & 0xFF);                    // TEMPURATURE 2 LSB
 8000316:	197b      	adds	r3, r7, r5
 8000318:	881b      	ldrh	r3, [r3, #0]
 800031a:	b2da      	uxtb	r2, r3
 800031c:	4ba7      	ldr	r3, [pc, #668]	; (80005bc <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 800031e:	72da      	strb	r2, [r3, #11]
        erpa_buf[12] = ((erpa_raw & 0xFF00) >> 8);      // ERPA eADC MSB
 8000320:	4ba8      	ldr	r3, [pc, #672]	; (80005c4 <HAL_TIM_OC_DelayElapsedCallback+0x380>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	121b      	asrs	r3, r3, #8
 8000326:	b2da      	uxtb	r2, r3
 8000328:	4ba4      	ldr	r3, [pc, #656]	; (80005bc <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 800032a:	731a      	strb	r2, [r3, #12]
        erpa_buf[13] = (erpa_raw & 0xFF);               // ERPA eADC LSB
 800032c:	4ba5      	ldr	r3, [pc, #660]	; (80005c4 <HAL_TIM_OC_DelayElapsedCallback+0x380>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	b2da      	uxtb	r2, r3
 8000332:	4ba2      	ldr	r3, [pc, #648]	; (80005bc <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 8000334:	735a      	strb	r2, [r3, #13]

        erpa_seq++;
 8000336:	4ba2      	ldr	r3, [pc, #648]	; (80005c0 <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 8000338:	881b      	ldrh	r3, [r3, #0]
 800033a:	3301      	adds	r3, #1
 800033c:	b29a      	uxth	r2, r3
 800033e:	4ba0      	ldr	r3, [pc, #640]	; (80005c0 <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 8000340:	801a      	strh	r2, [r3, #0]
        if (ERPA_ON)
 8000342:	4ba1      	ldr	r3, [pc, #644]	; (80005c8 <HAL_TIM_OC_DelayElapsedCallback+0x384>)
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	2b00      	cmp	r3, #0
 8000348:	d005      	beq.n	8000356 <HAL_TIM_OC_DelayElapsedCallback+0x112>
        {
          HAL_UART_Transmit(&huart1, erpa_buf, sizeof(erpa_buf), 100);
 800034a:	499c      	ldr	r1, [pc, #624]	; (80005bc <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 800034c:	489f      	ldr	r0, [pc, #636]	; (80005cc <HAL_TIM_OC_DelayElapsedCallback+0x388>)
 800034e:	2364      	movs	r3, #100	; 0x64
 8000350:	220e      	movs	r2, #14
 8000352:	f004 fe1d 	bl	8004f90 <HAL_UART_Transmit>
        }
      }
      if (HK_ON)
 8000356:	4b9e      	ldr	r3, [pc, #632]	; (80005d0 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	2b00      	cmp	r3, #0
 800035c:	d100      	bne.n	8000360 <HAL_TIM_OC_DelayElapsedCallback+0x11c>
 800035e:	e2da      	b.n	8000916 <HAL_TIM_OC_DelayElapsedCallback+0x6d2>
      {
        if (hk_counter == HK_CADENCE)
 8000360:	4b9c      	ldr	r3, [pc, #624]	; (80005d4 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	2201      	movs	r2, #1
 8000366:	4293      	cmp	r3, r2
 8000368:	d000      	beq.n	800036c <HAL_TIM_OC_DelayElapsedCallback+0x128>
 800036a:	e29d      	b.n	80008a8 <HAL_TIM_OC_DelayElapsedCallback+0x664>
          int16_t output1;
          int16_t output2;
          int16_t output3;
          int16_t output4;

          buf[0] = REG_TEMP;
 800036c:	2200      	movs	r2, #0
 800036e:	2508      	movs	r5, #8
 8000370:	197b      	adds	r3, r7, r5
 8000372:	701a      	strb	r2, [r3, #0]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_1, buf, 1,
 8000374:	2390      	movs	r3, #144	; 0x90
 8000376:	b299      	uxth	r1, r3
 8000378:	2627      	movs	r6, #39	; 0x27
 800037a:	19bc      	adds	r4, r7, r6
 800037c:	197a      	adds	r2, r7, r5
 800037e:	4896      	ldr	r0, [pc, #600]	; (80005d8 <HAL_TIM_OC_DelayElapsedCallback+0x394>)
 8000380:	23fa      	movs	r3, #250	; 0xfa
 8000382:	009b      	lsls	r3, r3, #2
 8000384:	9300      	str	r3, [sp, #0]
 8000386:	2301      	movs	r3, #1
 8000388:	f002 fdd2 	bl	8002f30 <HAL_I2C_Master_Transmit>
 800038c:	0003      	movs	r3, r0
 800038e:	7023      	strb	r3, [r4, #0]
                                        1000);
          //			I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
          if (ret != HAL_OK)
 8000390:	19bb      	adds	r3, r7, r6
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	2b00      	cmp	r3, #0
 8000396:	d008      	beq.n	80003aa <HAL_TIM_OC_DelayElapsedCallback+0x166>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 8000398:	197b      	adds	r3, r7, r5
 800039a:	4a90      	ldr	r2, [pc, #576]	; (80005dc <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 800039c:	ca03      	ldmia	r2!, {r0, r1}
 800039e:	c303      	stmia	r3!, {r0, r1}
 80003a0:	8811      	ldrh	r1, [r2, #0]
 80003a2:	8019      	strh	r1, [r3, #0]
 80003a4:	7892      	ldrb	r2, [r2, #2]
 80003a6:	709a      	strb	r2, [r3, #2]
 80003a8:	e02b      	b.n	8000402 <HAL_TIM_OC_DelayElapsedCallback+0x1be>
          }
          else
          {

            //				 Read 2 bytes from the temperature register
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_1, buf, 2,
 80003aa:	2390      	movs	r3, #144	; 0x90
 80003ac:	b299      	uxth	r1, r3
 80003ae:	2527      	movs	r5, #39	; 0x27
 80003b0:	197c      	adds	r4, r7, r5
 80003b2:	2608      	movs	r6, #8
 80003b4:	19ba      	adds	r2, r7, r6
 80003b6:	4888      	ldr	r0, [pc, #544]	; (80005d8 <HAL_TIM_OC_DelayElapsedCallback+0x394>)
 80003b8:	23fa      	movs	r3, #250	; 0xfa
 80003ba:	009b      	lsls	r3, r3, #2
 80003bc:	9300      	str	r3, [sp, #0]
 80003be:	2302      	movs	r3, #2
 80003c0:	f002 febe 	bl	8003140 <HAL_I2C_Master_Receive>
 80003c4:	0003      	movs	r3, r0
 80003c6:	7023      	strb	r3, [r4, #0]
                                         1000);
            if (ret != HAL_OK)
 80003c8:	197b      	adds	r3, r7, r5
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d008      	beq.n	80003e2 <HAL_TIM_OC_DelayElapsedCallback+0x19e>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 80003d0:	19bb      	adds	r3, r7, r6
 80003d2:	4a83      	ldr	r2, [pc, #524]	; (80005e0 <HAL_TIM_OC_DelayElapsedCallback+0x39c>)
 80003d4:	ca03      	ldmia	r2!, {r0, r1}
 80003d6:	c303      	stmia	r3!, {r0, r1}
 80003d8:	8811      	ldrh	r1, [r2, #0]
 80003da:	8019      	strh	r1, [r3, #0]
 80003dc:	7892      	ldrb	r2, [r2, #2]
 80003de:	709a      	strb	r2, [r3, #2]
 80003e0:	e00f      	b.n	8000402 <HAL_TIM_OC_DelayElapsedCallback+0x1be>
            }
            else
            {

              output1 = (int16_t)(buf[0] << 8);
 80003e2:	2008      	movs	r0, #8
 80003e4:	183b      	adds	r3, r7, r0
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	021a      	lsls	r2, r3, #8
 80003ea:	2136      	movs	r1, #54	; 0x36
 80003ec:	187b      	adds	r3, r7, r1
 80003ee:	801a      	strh	r2, [r3, #0]
              output1 = (output1 | buf[1]) >> 3;
 80003f0:	187b      	adds	r3, r7, r1
 80003f2:	2200      	movs	r2, #0
 80003f4:	5e9b      	ldrsh	r3, [r3, r2]
 80003f6:	183a      	adds	r2, r7, r0
 80003f8:	7852      	ldrb	r2, [r2, #1]
 80003fa:	4313      	orrs	r3, r2
 80003fc:	10da      	asrs	r2, r3, #3
 80003fe:	187b      	adds	r3, r7, r1
 8000400:	801a      	strh	r2, [r3, #0]
            }
          }

          // Tell ADT7410_2 that we want to read from the temperature register
          buf[0] = REG_TEMP;
 8000402:	2200      	movs	r2, #0
 8000404:	2508      	movs	r5, #8
 8000406:	197b      	adds	r3, r7, r5
 8000408:	701a      	strb	r2, [r3, #0]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_2, buf, 1,
 800040a:	2394      	movs	r3, #148	; 0x94
 800040c:	b299      	uxth	r1, r3
 800040e:	2627      	movs	r6, #39	; 0x27
 8000410:	19bc      	adds	r4, r7, r6
 8000412:	197a      	adds	r2, r7, r5
 8000414:	4870      	ldr	r0, [pc, #448]	; (80005d8 <HAL_TIM_OC_DelayElapsedCallback+0x394>)
 8000416:	23fa      	movs	r3, #250	; 0xfa
 8000418:	009b      	lsls	r3, r3, #2
 800041a:	9300      	str	r3, [sp, #0]
 800041c:	2301      	movs	r3, #1
 800041e:	f002 fd87 	bl	8002f30 <HAL_I2C_Master_Transmit>
 8000422:	0003      	movs	r3, r0
 8000424:	7023      	strb	r3, [r4, #0]
                                        1000);
          //			I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
          if (ret != HAL_OK)
 8000426:	19bb      	adds	r3, r7, r6
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	2b00      	cmp	r3, #0
 800042c:	d008      	beq.n	8000440 <HAL_TIM_OC_DelayElapsedCallback+0x1fc>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 800042e:	197b      	adds	r3, r7, r5
 8000430:	4a6a      	ldr	r2, [pc, #424]	; (80005dc <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 8000432:	ca03      	ldmia	r2!, {r0, r1}
 8000434:	c303      	stmia	r3!, {r0, r1}
 8000436:	8811      	ldrh	r1, [r2, #0]
 8000438:	8019      	strh	r1, [r3, #0]
 800043a:	7892      	ldrb	r2, [r2, #2]
 800043c:	709a      	strb	r2, [r3, #2]
 800043e:	e02b      	b.n	8000498 <HAL_TIM_OC_DelayElapsedCallback+0x254>
          }
          else
          {

            //				 Read 2 bytes from the temperature register
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_2, buf, 2,
 8000440:	2394      	movs	r3, #148	; 0x94
 8000442:	b299      	uxth	r1, r3
 8000444:	2527      	movs	r5, #39	; 0x27
 8000446:	197c      	adds	r4, r7, r5
 8000448:	2608      	movs	r6, #8
 800044a:	19ba      	adds	r2, r7, r6
 800044c:	4862      	ldr	r0, [pc, #392]	; (80005d8 <HAL_TIM_OC_DelayElapsedCallback+0x394>)
 800044e:	23fa      	movs	r3, #250	; 0xfa
 8000450:	009b      	lsls	r3, r3, #2
 8000452:	9300      	str	r3, [sp, #0]
 8000454:	2302      	movs	r3, #2
 8000456:	f002 fe73 	bl	8003140 <HAL_I2C_Master_Receive>
 800045a:	0003      	movs	r3, r0
 800045c:	7023      	strb	r3, [r4, #0]
                                         1000);
            if (ret != HAL_OK)
 800045e:	197b      	adds	r3, r7, r5
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	2b00      	cmp	r3, #0
 8000464:	d008      	beq.n	8000478 <HAL_TIM_OC_DelayElapsedCallback+0x234>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 8000466:	19bb      	adds	r3, r7, r6
 8000468:	4a5d      	ldr	r2, [pc, #372]	; (80005e0 <HAL_TIM_OC_DelayElapsedCallback+0x39c>)
 800046a:	ca03      	ldmia	r2!, {r0, r1}
 800046c:	c303      	stmia	r3!, {r0, r1}
 800046e:	8811      	ldrh	r1, [r2, #0]
 8000470:	8019      	strh	r1, [r3, #0]
 8000472:	7892      	ldrb	r2, [r2, #2]
 8000474:	709a      	strb	r2, [r3, #2]
 8000476:	e00f      	b.n	8000498 <HAL_TIM_OC_DelayElapsedCallback+0x254>
            }
            else
            {

              output2 = (int16_t)(buf[0] << 8);
 8000478:	2008      	movs	r0, #8
 800047a:	183b      	adds	r3, r7, r0
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	021a      	lsls	r2, r3, #8
 8000480:	2134      	movs	r1, #52	; 0x34
 8000482:	187b      	adds	r3, r7, r1
 8000484:	801a      	strh	r2, [r3, #0]
              output2 = (output2 | buf[1]) >> 3;
 8000486:	187b      	adds	r3, r7, r1
 8000488:	2200      	movs	r2, #0
 800048a:	5e9b      	ldrsh	r3, [r3, r2]
 800048c:	183a      	adds	r2, r7, r0
 800048e:	7852      	ldrb	r2, [r2, #1]
 8000490:	4313      	orrs	r3, r2
 8000492:	10da      	asrs	r2, r3, #3
 8000494:	187b      	adds	r3, r7, r1
 8000496:	801a      	strh	r2, [r3, #0]
            }
          }
          // TEMP SENSOR 3
          buf[0] = REG_TEMP;
 8000498:	2200      	movs	r2, #0
 800049a:	2508      	movs	r5, #8
 800049c:	197b      	adds	r3, r7, r5
 800049e:	701a      	strb	r2, [r3, #0]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_3, buf, 1,
 80004a0:	2392      	movs	r3, #146	; 0x92
 80004a2:	b299      	uxth	r1, r3
 80004a4:	2627      	movs	r6, #39	; 0x27
 80004a6:	19bc      	adds	r4, r7, r6
 80004a8:	197a      	adds	r2, r7, r5
 80004aa:	484b      	ldr	r0, [pc, #300]	; (80005d8 <HAL_TIM_OC_DelayElapsedCallback+0x394>)
 80004ac:	23fa      	movs	r3, #250	; 0xfa
 80004ae:	009b      	lsls	r3, r3, #2
 80004b0:	9300      	str	r3, [sp, #0]
 80004b2:	2301      	movs	r3, #1
 80004b4:	f002 fd3c 	bl	8002f30 <HAL_I2C_Master_Transmit>
 80004b8:	0003      	movs	r3, r0
 80004ba:	7023      	strb	r3, [r4, #0]
                                        1000);
          //			I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
          if (ret != HAL_OK)
 80004bc:	19bb      	adds	r3, r7, r6
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d008      	beq.n	80004d6 <HAL_TIM_OC_DelayElapsedCallback+0x292>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 80004c4:	197b      	adds	r3, r7, r5
 80004c6:	4a45      	ldr	r2, [pc, #276]	; (80005dc <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 80004c8:	ca03      	ldmia	r2!, {r0, r1}
 80004ca:	c303      	stmia	r3!, {r0, r1}
 80004cc:	8811      	ldrh	r1, [r2, #0]
 80004ce:	8019      	strh	r1, [r3, #0]
 80004d0:	7892      	ldrb	r2, [r2, #2]
 80004d2:	709a      	strb	r2, [r3, #2]
 80004d4:	e02b      	b.n	800052e <HAL_TIM_OC_DelayElapsedCallback+0x2ea>
          }
          else
          {

            //				 Read 2 bytes from the temperature register
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_3, buf, 2,
 80004d6:	2392      	movs	r3, #146	; 0x92
 80004d8:	b299      	uxth	r1, r3
 80004da:	2527      	movs	r5, #39	; 0x27
 80004dc:	197c      	adds	r4, r7, r5
 80004de:	2608      	movs	r6, #8
 80004e0:	19ba      	adds	r2, r7, r6
 80004e2:	483d      	ldr	r0, [pc, #244]	; (80005d8 <HAL_TIM_OC_DelayElapsedCallback+0x394>)
 80004e4:	23fa      	movs	r3, #250	; 0xfa
 80004e6:	009b      	lsls	r3, r3, #2
 80004e8:	9300      	str	r3, [sp, #0]
 80004ea:	2302      	movs	r3, #2
 80004ec:	f002 fe28 	bl	8003140 <HAL_I2C_Master_Receive>
 80004f0:	0003      	movs	r3, r0
 80004f2:	7023      	strb	r3, [r4, #0]
                                         1000);
            if (ret != HAL_OK)
 80004f4:	197b      	adds	r3, r7, r5
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d008      	beq.n	800050e <HAL_TIM_OC_DelayElapsedCallback+0x2ca>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 80004fc:	19bb      	adds	r3, r7, r6
 80004fe:	4a38      	ldr	r2, [pc, #224]	; (80005e0 <HAL_TIM_OC_DelayElapsedCallback+0x39c>)
 8000500:	ca03      	ldmia	r2!, {r0, r1}
 8000502:	c303      	stmia	r3!, {r0, r1}
 8000504:	8811      	ldrh	r1, [r2, #0]
 8000506:	8019      	strh	r1, [r3, #0]
 8000508:	7892      	ldrb	r2, [r2, #2]
 800050a:	709a      	strb	r2, [r3, #2]
 800050c:	e00f      	b.n	800052e <HAL_TIM_OC_DelayElapsedCallback+0x2ea>
            }
            else
            {

              output3 = (int16_t)(buf[0] << 8);
 800050e:	2008      	movs	r0, #8
 8000510:	183b      	adds	r3, r7, r0
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	021a      	lsls	r2, r3, #8
 8000516:	2132      	movs	r1, #50	; 0x32
 8000518:	187b      	adds	r3, r7, r1
 800051a:	801a      	strh	r2, [r3, #0]
              output3 = (output3 | buf[1]) >> 3;
 800051c:	187b      	adds	r3, r7, r1
 800051e:	2200      	movs	r2, #0
 8000520:	5e9b      	ldrsh	r3, [r3, r2]
 8000522:	183a      	adds	r2, r7, r0
 8000524:	7852      	ldrb	r2, [r2, #1]
 8000526:	4313      	orrs	r3, r2
 8000528:	10da      	asrs	r2, r3, #3
 800052a:	187b      	adds	r3, r7, r1
 800052c:	801a      	strh	r2, [r3, #0]
            }
          }
          // TEMP SENSOR 4
          buf[0] = REG_TEMP;
 800052e:	2200      	movs	r2, #0
 8000530:	2508      	movs	r5, #8
 8000532:	197b      	adds	r3, r7, r5
 8000534:	701a      	strb	r2, [r3, #0]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_4, buf, 1,
 8000536:	2396      	movs	r3, #150	; 0x96
 8000538:	b299      	uxth	r1, r3
 800053a:	2627      	movs	r6, #39	; 0x27
 800053c:	19bc      	adds	r4, r7, r6
 800053e:	197a      	adds	r2, r7, r5
 8000540:	4825      	ldr	r0, [pc, #148]	; (80005d8 <HAL_TIM_OC_DelayElapsedCallback+0x394>)
 8000542:	23fa      	movs	r3, #250	; 0xfa
 8000544:	009b      	lsls	r3, r3, #2
 8000546:	9300      	str	r3, [sp, #0]
 8000548:	2301      	movs	r3, #1
 800054a:	f002 fcf1 	bl	8002f30 <HAL_I2C_Master_Transmit>
 800054e:	0003      	movs	r3, r0
 8000550:	7023      	strb	r3, [r4, #0]
                                        1000);
          //			I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
          if (ret != HAL_OK)
 8000552:	19bb      	adds	r3, r7, r6
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d008      	beq.n	800056c <HAL_TIM_OC_DelayElapsedCallback+0x328>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 800055a:	197b      	adds	r3, r7, r5
 800055c:	4a1f      	ldr	r2, [pc, #124]	; (80005dc <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 800055e:	ca03      	ldmia	r2!, {r0, r1}
 8000560:	c303      	stmia	r3!, {r0, r1}
 8000562:	8811      	ldrh	r1, [r2, #0]
 8000564:	8019      	strh	r1, [r3, #0]
 8000566:	7892      	ldrb	r2, [r2, #2]
 8000568:	709a      	strb	r2, [r3, #2]
 800056a:	e04b      	b.n	8000604 <HAL_TIM_OC_DelayElapsedCallback+0x3c0>
          }
          else
          {

            //				 Read 2 bytes from the temperature register
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_4, buf, 2,
 800056c:	2396      	movs	r3, #150	; 0x96
 800056e:	b299      	uxth	r1, r3
 8000570:	2527      	movs	r5, #39	; 0x27
 8000572:	197c      	adds	r4, r7, r5
 8000574:	2608      	movs	r6, #8
 8000576:	19ba      	adds	r2, r7, r6
 8000578:	4817      	ldr	r0, [pc, #92]	; (80005d8 <HAL_TIM_OC_DelayElapsedCallback+0x394>)
 800057a:	23fa      	movs	r3, #250	; 0xfa
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	9300      	str	r3, [sp, #0]
 8000580:	2302      	movs	r3, #2
 8000582:	f002 fddd 	bl	8003140 <HAL_I2C_Master_Receive>
 8000586:	0003      	movs	r3, r0
 8000588:	7023      	strb	r3, [r4, #0]
                                         1000);
            if (ret != HAL_OK)
 800058a:	197b      	adds	r3, r7, r5
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d028      	beq.n	80005e4 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 8000592:	19bb      	adds	r3, r7, r6
 8000594:	4a12      	ldr	r2, [pc, #72]	; (80005e0 <HAL_TIM_OC_DelayElapsedCallback+0x39c>)
 8000596:	ca03      	ldmia	r2!, {r0, r1}
 8000598:	c303      	stmia	r3!, {r0, r1}
 800059a:	8811      	ldrh	r1, [r2, #0]
 800059c:	8019      	strh	r1, [r3, #0]
 800059e:	7892      	ldrb	r2, [r2, #2]
 80005a0:	709a      	strb	r2, [r3, #2]
 80005a2:	e02f      	b.n	8000604 <HAL_TIM_OC_DelayElapsedCallback+0x3c0>
 80005a4:	20000238 	.word	0x20000238
 80005a8:	20000392 	.word	0x20000392
 80005ac:	40007400 	.word	0x40007400
 80005b0:	20000000 	.word	0x20000000
 80005b4:	20000370 	.word	0x20000370
 80005b8:	20000044 	.word	0x20000044
 80005bc:	2000039c 	.word	0x2000039c
 80005c0:	200003aa 	.word	0x200003aa
 80005c4:	20000398 	.word	0x20000398
 80005c8:	20000019 	.word	0x20000019
 80005cc:	20000280 	.word	0x20000280
 80005d0:	2000001a 	.word	0x2000001a
 80005d4:	200003dc 	.word	0x200003dc
 80005d8:	200000dc 	.word	0x200000dc
 80005dc:	0800670c 	.word	0x0800670c
 80005e0:	08006718 	.word	0x08006718
            }
            else
            {

              output4 = (int16_t)(buf[0] << 8);
 80005e4:	2008      	movs	r0, #8
 80005e6:	183b      	adds	r3, r7, r0
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	021a      	lsls	r2, r3, #8
 80005ec:	2130      	movs	r1, #48	; 0x30
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	801a      	strh	r2, [r3, #0]
              output4 = (output4 | buf[1]) >> 3;
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	2200      	movs	r2, #0
 80005f6:	5e9b      	ldrsh	r3, [r3, r2]
 80005f8:	183a      	adds	r2, r7, r0
 80005fa:	7852      	ldrb	r2, [r2, #1]
 80005fc:	4313      	orrs	r3, r2
 80005fe:	10da      	asrs	r2, r3, #3
 8000600:	187b      	adds	r3, r7, r1
 8000602:	801a      	strh	r2, [r3, #0]
            }
          }

          HAL_ADC_Start_DMA(&hadc, (uint32_t *)adcResultsDMA,
 8000604:	2311      	movs	r3, #17
 8000606:	001a      	movs	r2, r3
 8000608:	49c5      	ldr	r1, [pc, #788]	; (8000920 <HAL_TIM_OC_DelayElapsedCallback+0x6dc>)
 800060a:	4bc6      	ldr	r3, [pc, #792]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 800060c:	0018      	movs	r0, r3
 800060e:	f001 fc2d 	bl	8001e6c <HAL_ADC_Start_DMA>
                            adcChannelCount);

          uint16_t PA1 = adcResultsDMA[1];       // ADC_IN1, BUS_Vmon: instrument bus voltage monitor
 8000612:	2124      	movs	r1, #36	; 0x24
 8000614:	187b      	adds	r3, r7, r1
 8000616:	4ac2      	ldr	r2, [pc, #776]	; (8000920 <HAL_TIM_OC_DelayElapsedCallback+0x6dc>)
 8000618:	8852      	ldrh	r2, [r2, #2]
 800061a:	801a      	strh	r2, [r3, #0]
          uint16_t PA2 = adcResultsDMA[2];       // ADC_IN2, BUS_Imon: instrument bus current monitor
 800061c:	2022      	movs	r0, #34	; 0x22
 800061e:	183b      	adds	r3, r7, r0
 8000620:	4abf      	ldr	r2, [pc, #764]	; (8000920 <HAL_TIM_OC_DelayElapsedCallback+0x6dc>)
 8000622:	8892      	ldrh	r2, [r2, #4]
 8000624:	801a      	strh	r2, [r3, #0]
          uint16_t PA3 = adcResultsDMA[3];       // ADC_IN3, 3v3_mon: Accurate 5V for ADC monitor
 8000626:	2420      	movs	r4, #32
 8000628:	193b      	adds	r3, r7, r4
 800062a:	4abd      	ldr	r2, [pc, #756]	; (8000920 <HAL_TIM_OC_DelayElapsedCallback+0x6dc>)
 800062c:	88d2      	ldrh	r2, [r2, #6]
 800062e:	801a      	strh	r2, [r3, #0]
          uint16_t PA5 = adcResultsDMA[4];       // ADC_IN5, n150v_mon: n150 voltage monitor
 8000630:	251e      	movs	r5, #30
 8000632:	197b      	adds	r3, r7, r5
 8000634:	4aba      	ldr	r2, [pc, #744]	; (8000920 <HAL_TIM_OC_DelayElapsedCallback+0x6dc>)
 8000636:	8912      	ldrh	r2, [r2, #8]
 8000638:	801a      	strh	r2, [r3, #0]
          uint16_t PA6 = adcResultsDMA[5];       // ADC_IN6, n800v_mon: n800 voltage monitor
 800063a:	261c      	movs	r6, #28
 800063c:	19bb      	adds	r3, r7, r6
 800063e:	4ab8      	ldr	r2, [pc, #736]	; (8000920 <HAL_TIM_OC_DelayElapsedCallback+0x6dc>)
 8000640:	8952      	ldrh	r2, [r2, #10]
 8000642:	801a      	strh	r2, [r3, #0]
          uint16_t PC0 = adcResultsDMA[9];       // ADC_IN10, 2v5_mon: 2.5v voltage monitor
 8000644:	231a      	movs	r3, #26
 8000646:	18fb      	adds	r3, r7, r3
 8000648:	4ab5      	ldr	r2, [pc, #724]	; (8000920 <HAL_TIM_OC_DelayElapsedCallback+0x6dc>)
 800064a:	8a52      	ldrh	r2, [r2, #18]
 800064c:	801a      	strh	r2, [r3, #0]
          uint16_t PC1 = adcResultsDMA[10];      // ADC_IN11, n5v_mon: n5v voltage monitor
 800064e:	2218      	movs	r2, #24
 8000650:	18bb      	adds	r3, r7, r2
 8000652:	4ab3      	ldr	r2, [pc, #716]	; (8000920 <HAL_TIM_OC_DelayElapsedCallback+0x6dc>)
 8000654:	8a92      	ldrh	r2, [r2, #20]
 8000656:	801a      	strh	r2, [r3, #0]
          uint16_t PC2 = adcResultsDMA[11];      // ADC_IN12, 5v_mon: 5v voltage monitor
 8000658:	2316      	movs	r3, #22
 800065a:	18fb      	adds	r3, r7, r3
 800065c:	4ab0      	ldr	r2, [pc, #704]	; (8000920 <HAL_TIM_OC_DelayElapsedCallback+0x6dc>)
 800065e:	8ad2      	ldrh	r2, [r2, #22]
 8000660:	801a      	strh	r2, [r3, #0]
          uint16_t PC3 = adcResultsDMA[12];      // ADC_IN13, n3v3_mon: n3v3 voltage monitor
 8000662:	2214      	movs	r2, #20
 8000664:	18bb      	adds	r3, r7, r2
 8000666:	4aae      	ldr	r2, [pc, #696]	; (8000920 <HAL_TIM_OC_DelayElapsedCallback+0x6dc>)
 8000668:	8b12      	ldrh	r2, [r2, #24]
 800066a:	801a      	strh	r2, [r3, #0]
          uint16_t PC4 = adcResultsDMA[13];      // ADC_IN14, 5vref_mon: 5v reference voltage monitor
 800066c:	2312      	movs	r3, #18
 800066e:	18fb      	adds	r3, r7, r3
 8000670:	4aab      	ldr	r2, [pc, #684]	; (8000920 <HAL_TIM_OC_DelayElapsedCallback+0x6dc>)
 8000672:	8b52      	ldrh	r2, [r2, #26]
 8000674:	801a      	strh	r2, [r3, #0]
          uint16_t PC5 = adcResultsDMA[14];      // ADC_IN15, 15v_mon: 15v voltage monitor
 8000676:	2210      	movs	r2, #16
 8000678:	18bb      	adds	r3, r7, r2
 800067a:	4aa9      	ldr	r2, [pc, #676]	; (8000920 <HAL_TIM_OC_DelayElapsedCallback+0x6dc>)
 800067c:	8b92      	ldrh	r2, [r2, #28]
 800067e:	801a      	strh	r2, [r3, #0]
          uint16_t MCU_TEMP = adcResultsDMA[15]; //(internally connected) ADC_IN16, VSENSE
 8000680:	230e      	movs	r3, #14
 8000682:	18fb      	adds	r3, r7, r3
 8000684:	4aa6      	ldr	r2, [pc, #664]	; (8000920 <HAL_TIM_OC_DelayElapsedCallback+0x6dc>)
 8000686:	8bd2      	ldrh	r2, [r2, #30]
 8000688:	801a      	strh	r2, [r3, #0]
          uint16_t MCU_VREF = adcResultsDMA[16]; //(internally connected) ADC_IN17, VREFINT
 800068a:	220c      	movs	r2, #12
 800068c:	18bb      	adds	r3, r7, r2
 800068e:	4aa4      	ldr	r2, [pc, #656]	; (8000920 <HAL_TIM_OC_DelayElapsedCallback+0x6dc>)
 8000690:	8c12      	ldrh	r2, [r2, #32]
 8000692:	801a      	strh	r2, [r3, #0]


          hk_buf[0] = hk_sync;                     // HK SYNC 0xCC MSB					0 SYNC
 8000694:	22cc      	movs	r2, #204	; 0xcc
 8000696:	4ba4      	ldr	r3, [pc, #656]	; (8000928 <HAL_TIM_OC_DelayElapsedCallback+0x6e4>)
 8000698:	701a      	strb	r2, [r3, #0]
          hk_buf[1] = hk_sync;                     // HK SYNC 0xCC LSB
 800069a:	22cc      	movs	r2, #204	; 0xcc
 800069c:	4ba2      	ldr	r3, [pc, #648]	; (8000928 <HAL_TIM_OC_DelayElapsedCallback+0x6e4>)
 800069e:	705a      	strb	r2, [r3, #1]
          hk_buf[2] = ((hk_seq & 0xFF00) >> 8);    // HK SEQ # MSB		1 SEQUENCE
 80006a0:	4ba2      	ldr	r3, [pc, #648]	; (800092c <HAL_TIM_OC_DelayElapsedCallback+0x6e8>)
 80006a2:	881b      	ldrh	r3, [r3, #0]
 80006a4:	0a1b      	lsrs	r3, r3, #8
 80006a6:	b29b      	uxth	r3, r3
 80006a8:	b2da      	uxtb	r2, r3
 80006aa:	4b9f      	ldr	r3, [pc, #636]	; (8000928 <HAL_TIM_OC_DelayElapsedCallback+0x6e4>)
 80006ac:	709a      	strb	r2, [r3, #2]
          hk_buf[3] = (hk_seq & 0xFF);             // HK SEQ # LSB
 80006ae:	4b9f      	ldr	r3, [pc, #636]	; (800092c <HAL_TIM_OC_DelayElapsedCallback+0x6e8>)
 80006b0:	881b      	ldrh	r3, [r3, #0]
 80006b2:	b2da      	uxtb	r2, r3
 80006b4:	4b9c      	ldr	r3, [pc, #624]	; (8000928 <HAL_TIM_OC_DelayElapsedCallback+0x6e4>)
 80006b6:	70da      	strb	r2, [r3, #3]
          hk_buf[4] = ((MCU_TEMP & 0xFF00) >> 8); // VSENSE MSB		13 VSENSE
 80006b8:	230e      	movs	r3, #14
 80006ba:	18fb      	adds	r3, r7, r3
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	0a1b      	lsrs	r3, r3, #8
 80006c0:	b29b      	uxth	r3, r3
 80006c2:	b2da      	uxtb	r2, r3
 80006c4:	4b98      	ldr	r3, [pc, #608]	; (8000928 <HAL_TIM_OC_DelayElapsedCallback+0x6e4>)
 80006c6:	711a      	strb	r2, [r3, #4]
          hk_buf[5] = (MCU_TEMP & 0xFF);          // VSENSE LSB
 80006c8:	230e      	movs	r3, #14
 80006ca:	18fb      	adds	r3, r7, r3
 80006cc:	881b      	ldrh	r3, [r3, #0]
 80006ce:	b2da      	uxtb	r2, r3
 80006d0:	4b95      	ldr	r3, [pc, #596]	; (8000928 <HAL_TIM_OC_DelayElapsedCallback+0x6e4>)
 80006d2:	715a      	strb	r2, [r3, #5]
          hk_buf[6] = ((MCU_VREF & 0xFF00) >> 8);
 80006d4:	220c      	movs	r2, #12
 80006d6:	18bb      	adds	r3, r7, r2
 80006d8:	881b      	ldrh	r3, [r3, #0]
 80006da:	0a1b      	lsrs	r3, r3, #8
 80006dc:	b29b      	uxth	r3, r3
 80006de:	b2da      	uxtb	r2, r3
 80006e0:	4b91      	ldr	r3, [pc, #580]	; (8000928 <HAL_TIM_OC_DelayElapsedCallback+0x6e4>)
 80006e2:	719a      	strb	r2, [r3, #6]
          hk_buf[7] = (MCU_VREF & 0xFF);
 80006e4:	220c      	movs	r2, #12
 80006e6:	18bb      	adds	r3, r7, r2
 80006e8:	881b      	ldrh	r3, [r3, #0]
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	4b8e      	ldr	r3, [pc, #568]	; (8000928 <HAL_TIM_OC_DelayElapsedCallback+0x6e4>)
 80006ee:	71da      	strb	r2, [r3, #7]
          hk_buf[8] = ((output1 & 0xFF00) >> 8);
 80006f0:	2336      	movs	r3, #54	; 0x36
 80006f2:	18fb      	adds	r3, r7, r3
 80006f4:	2200      	movs	r2, #0
 80006f6:	5e9b      	ldrsh	r3, [r3, r2]
 80006f8:	121b      	asrs	r3, r3, #8
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	4b8a      	ldr	r3, [pc, #552]	; (8000928 <HAL_TIM_OC_DelayElapsedCallback+0x6e4>)
 80006fe:	721a      	strb	r2, [r3, #8]
          hk_buf[9] = (output1 & 0xFF);
 8000700:	2336      	movs	r3, #54	; 0x36
 8000702:	18fb      	adds	r3, r7, r3
 8000704:	881b      	ldrh	r3, [r3, #0]
 8000706:	b2da      	uxtb	r2, r3
 8000708:	4b87      	ldr	r3, [pc, #540]	; (8000928 <HAL_TIM_OC_DelayElapsedCallback+0x6e4>)
 800070a:	725a      	strb	r2, [r3, #9]
          hk_buf[10] = ((output2 & 0xFF00) >> 8);
 800070c:	2334      	movs	r3, #52	; 0x34
 800070e:	18fb      	adds	r3, r7, r3
 8000710:	2200      	movs	r2, #0
 8000712:	5e9b      	ldrsh	r3, [r3, r2]
 8000714:	121b      	asrs	r3, r3, #8
 8000716:	b2da      	uxtb	r2, r3
 8000718:	4b83      	ldr	r3, [pc, #524]	; (8000928 <HAL_TIM_OC_DelayElapsedCallback+0x6e4>)
 800071a:	729a      	strb	r2, [r3, #10]
          hk_buf[11] = (output2 & 0xFF);
 800071c:	2334      	movs	r3, #52	; 0x34
 800071e:	18fb      	adds	r3, r7, r3
 8000720:	881b      	ldrh	r3, [r3, #0]
 8000722:	b2da      	uxtb	r2, r3
 8000724:	4b80      	ldr	r3, [pc, #512]	; (8000928 <HAL_TIM_OC_DelayElapsedCallback+0x6e4>)
 8000726:	72da      	strb	r2, [r3, #11]
          hk_buf[12] = ((output3 & 0xFF00) >> 8);
 8000728:	2332      	movs	r3, #50	; 0x32
 800072a:	18fb      	adds	r3, r7, r3
 800072c:	2200      	movs	r2, #0
 800072e:	5e9b      	ldrsh	r3, [r3, r2]
 8000730:	121b      	asrs	r3, r3, #8
 8000732:	b2da      	uxtb	r2, r3
 8000734:	4b7c      	ldr	r3, [pc, #496]	; (8000928 <HAL_TIM_OC_DelayElapsedCallback+0x6e4>)
 8000736:	731a      	strb	r2, [r3, #12]
          hk_buf[13] = (output3 & 0xFF);
 8000738:	2332      	movs	r3, #50	; 0x32
 800073a:	18fb      	adds	r3, r7, r3
 800073c:	881b      	ldrh	r3, [r3, #0]
 800073e:	b2da      	uxtb	r2, r3
 8000740:	4b79      	ldr	r3, [pc, #484]	; (8000928 <HAL_TIM_OC_DelayElapsedCallback+0x6e4>)
 8000742:	735a      	strb	r2, [r3, #13]
          hk_buf[14] = ((output4 & 0xFF00) >> 8);
 8000744:	2330      	movs	r3, #48	; 0x30
 8000746:	18fb      	adds	r3, r7, r3
 8000748:	2200      	movs	r2, #0
 800074a:	5e9b      	ldrsh	r3, [r3, r2]
 800074c:	121b      	asrs	r3, r3, #8
 800074e:	b2da      	uxtb	r2, r3
 8000750:	4b75      	ldr	r3, [pc, #468]	; (8000928 <HAL_TIM_OC_DelayElapsedCallback+0x6e4>)
 8000752:	739a      	strb	r2, [r3, #14]
          hk_buf[15] = (output4 & 0xFF);
 8000754:	2330      	movs	r3, #48	; 0x30
 8000756:	18fb      	adds	r3, r7, r3
 8000758:	881b      	ldrh	r3, [r3, #0]
 800075a:	b2da      	uxtb	r2, r3
 800075c:	4b72      	ldr	r3, [pc, #456]	; (8000928 <HAL_TIM_OC_DelayElapsedCallback+0x6e4>)
 800075e:	73da      	strb	r2, [r3, #15]
          hk_buf[16] = ((PA1 & 0xFF00) >> 8);       // BUS_Vmon MSB			2 BUS_VMON PA1
 8000760:	187b      	adds	r3, r7, r1
 8000762:	881b      	ldrh	r3, [r3, #0]
 8000764:	0a1b      	lsrs	r3, r3, #8
 8000766:	b29b      	uxth	r3, r3
 8000768:	b2da      	uxtb	r2, r3
 800076a:	4b6f      	ldr	r3, [pc, #444]	; (8000928 <HAL_TIM_OC_DelayElapsedCallback+0x6e4>)
 800076c:	741a      	strb	r2, [r3, #16]
          hk_buf[17] = (PA1 & 0xFF);                // BUS_Vmon LSB
 800076e:	187b      	adds	r3, r7, r1
 8000770:	881b      	ldrh	r3, [r3, #0]
 8000772:	b2da      	uxtb	r2, r3
 8000774:	4b6c      	ldr	r3, [pc, #432]	; (8000928 <HAL_TIM_OC_DelayElapsedCallback+0x6e4>)
 8000776:	745a      	strb	r2, [r3, #17]
          hk_buf[18] = ((PA2 & 0xFF00) >> 8);       // BUS_Imon MSB			3 BUS_IMON PA2
 8000778:	183b      	adds	r3, r7, r0
 800077a:	881b      	ldrh	r3, [r3, #0]
 800077c:	0a1b      	lsrs	r3, r3, #8
 800077e:	b29b      	uxth	r3, r3
 8000780:	b2da      	uxtb	r2, r3
 8000782:	4b69      	ldr	r3, [pc, #420]	; (8000928 <HAL_TIM_OC_DelayElapsedCallback+0x6e4>)
 8000784:	749a      	strb	r2, [r3, #18]
          hk_buf[19] = (PA2 & 0xFF);                // BUS_Imon LSB
 8000786:	183b      	adds	r3, r7, r0
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	b2da      	uxtb	r2, r3
 800078c:	4b66      	ldr	r3, [pc, #408]	; (8000928 <HAL_TIM_OC_DelayElapsedCallback+0x6e4>)
 800078e:	74da      	strb	r2, [r3, #19]
          hk_buf[20] = ((PC0 & 0xFF00) >> 8);      	// 2v5_mon MSB			7 2V5_MON PC0
 8000790:	211a      	movs	r1, #26
 8000792:	187b      	adds	r3, r7, r1
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	0a1b      	lsrs	r3, r3, #8
 8000798:	b29b      	uxth	r3, r3
 800079a:	b2da      	uxtb	r2, r3
 800079c:	4b62      	ldr	r3, [pc, #392]	; (8000928 <HAL_TIM_OC_DelayElapsedCallback+0x6e4>)
 800079e:	751a      	strb	r2, [r3, #20]
          hk_buf[21] = (PC0 & 0xFF);               	// 2v5_mon LSB
 80007a0:	187b      	adds	r3, r7, r1
 80007a2:	881b      	ldrh	r3, [r3, #0]
 80007a4:	b2da      	uxtb	r2, r3
 80007a6:	4b60      	ldr	r3, [pc, #384]	; (8000928 <HAL_TIM_OC_DelayElapsedCallback+0x6e4>)
 80007a8:	755a      	strb	r2, [r3, #21]
          hk_buf[22] = ((PA3 & 0xFF00) >> 8);       // 3v3_mon MSB			4 3v3_MON PA3
 80007aa:	193b      	adds	r3, r7, r4
 80007ac:	881b      	ldrh	r3, [r3, #0]
 80007ae:	0a1b      	lsrs	r3, r3, #8
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	b2da      	uxtb	r2, r3
 80007b4:	4b5c      	ldr	r3, [pc, #368]	; (8000928 <HAL_TIM_OC_DelayElapsedCallback+0x6e4>)
 80007b6:	759a      	strb	r2, [r3, #22]
          hk_buf[23] = (PA3 & 0xFF);                // 3v3_mon LSB
 80007b8:	193b      	adds	r3, r7, r4
 80007ba:	881b      	ldrh	r3, [r3, #0]
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	4b5a      	ldr	r3, [pc, #360]	; (8000928 <HAL_TIM_OC_DelayElapsedCallback+0x6e4>)
 80007c0:	75da      	strb	r2, [r3, #23]
          hk_buf[24] = ((PC2 & 0xFF00) >> 8);      	// 5v_mon MSB			9 5V_MON PC2
 80007c2:	2016      	movs	r0, #22
 80007c4:	183b      	adds	r3, r7, r0
 80007c6:	881b      	ldrh	r3, [r3, #0]
 80007c8:	0a1b      	lsrs	r3, r3, #8
 80007ca:	b29b      	uxth	r3, r3
 80007cc:	b2da      	uxtb	r2, r3
 80007ce:	4b56      	ldr	r3, [pc, #344]	; (8000928 <HAL_TIM_OC_DelayElapsedCallback+0x6e4>)
 80007d0:	761a      	strb	r2, [r3, #24]
          hk_buf[25] = (PC2 & 0xFF);               	// 5v_mon LSB
 80007d2:	183b      	adds	r3, r7, r0
 80007d4:	881b      	ldrh	r3, [r3, #0]
 80007d6:	b2da      	uxtb	r2, r3
 80007d8:	4b53      	ldr	r3, [pc, #332]	; (8000928 <HAL_TIM_OC_DelayElapsedCallback+0x6e4>)
 80007da:	765a      	strb	r2, [r3, #25]
          hk_buf[26] = ((PC3 & 0xFF00) >> 8);      	// n3v3_mon MSB			10 N3V3_MON PC3
 80007dc:	2014      	movs	r0, #20
 80007de:	183b      	adds	r3, r7, r0
 80007e0:	881b      	ldrh	r3, [r3, #0]
 80007e2:	0a1b      	lsrs	r3, r3, #8
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	4b4f      	ldr	r3, [pc, #316]	; (8000928 <HAL_TIM_OC_DelayElapsedCallback+0x6e4>)
 80007ea:	769a      	strb	r2, [r3, #26]
          hk_buf[27] = (PC3 & 0xFF);               	// n3v3_mon LSB
 80007ec:	183b      	adds	r3, r7, r0
 80007ee:	881b      	ldrh	r3, [r3, #0]
 80007f0:	b2da      	uxtb	r2, r3
 80007f2:	4b4d      	ldr	r3, [pc, #308]	; (8000928 <HAL_TIM_OC_DelayElapsedCallback+0x6e4>)
 80007f4:	76da      	strb	r2, [r3, #27]
          hk_buf[28] = ((PC1 & 0xFF00) >> 8);      	// n5v_mon MSB			8 N5V_MON PC1
 80007f6:	2118      	movs	r1, #24
 80007f8:	187b      	adds	r3, r7, r1
 80007fa:	881b      	ldrh	r3, [r3, #0]
 80007fc:	0a1b      	lsrs	r3, r3, #8
 80007fe:	b29b      	uxth	r3, r3
 8000800:	b2da      	uxtb	r2, r3
 8000802:	4b49      	ldr	r3, [pc, #292]	; (8000928 <HAL_TIM_OC_DelayElapsedCallback+0x6e4>)
 8000804:	771a      	strb	r2, [r3, #28]
          hk_buf[29] = (PC1 & 0xFF);               	// n5v_mon LSB
 8000806:	187b      	adds	r3, r7, r1
 8000808:	881b      	ldrh	r3, [r3, #0]
 800080a:	b2da      	uxtb	r2, r3
 800080c:	4b46      	ldr	r3, [pc, #280]	; (8000928 <HAL_TIM_OC_DelayElapsedCallback+0x6e4>)
 800080e:	775a      	strb	r2, [r3, #29]
          hk_buf[30] = ((PC5 & 0xFF00) >> 8);      	// 15v_mon MSB			12 15V_MON PC5
 8000810:	2110      	movs	r1, #16
 8000812:	187b      	adds	r3, r7, r1
 8000814:	881b      	ldrh	r3, [r3, #0]
 8000816:	0a1b      	lsrs	r3, r3, #8
 8000818:	b29b      	uxth	r3, r3
 800081a:	b2da      	uxtb	r2, r3
 800081c:	4b42      	ldr	r3, [pc, #264]	; (8000928 <HAL_TIM_OC_DelayElapsedCallback+0x6e4>)
 800081e:	779a      	strb	r2, [r3, #30]
          hk_buf[31] = (PC5 & 0xFF);               	// 15v_mon LSB
 8000820:	187b      	adds	r3, r7, r1
 8000822:	881b      	ldrh	r3, [r3, #0]
 8000824:	b2da      	uxtb	r2, r3
 8000826:	4b40      	ldr	r3, [pc, #256]	; (8000928 <HAL_TIM_OC_DelayElapsedCallback+0x6e4>)
 8000828:	77da      	strb	r2, [r3, #31]
          hk_buf[32] = ((PC4 & 0xFF00) >> 8);      	// 5vref_mon MSB		11 5VREF_MON PC4
 800082a:	2012      	movs	r0, #18
 800082c:	183b      	adds	r3, r7, r0
 800082e:	881b      	ldrh	r3, [r3, #0]
 8000830:	0a1b      	lsrs	r3, r3, #8
 8000832:	b29b      	uxth	r3, r3
 8000834:	b2d9      	uxtb	r1, r3
 8000836:	4b3c      	ldr	r3, [pc, #240]	; (8000928 <HAL_TIM_OC_DelayElapsedCallback+0x6e4>)
 8000838:	2220      	movs	r2, #32
 800083a:	5499      	strb	r1, [r3, r2]
          hk_buf[33] = (PC4 & 0xFF);               	// 5vref_mon LSB
 800083c:	183b      	adds	r3, r7, r0
 800083e:	881b      	ldrh	r3, [r3, #0]
 8000840:	b2d9      	uxtb	r1, r3
 8000842:	4b39      	ldr	r3, [pc, #228]	; (8000928 <HAL_TIM_OC_DelayElapsedCallback+0x6e4>)
 8000844:	2221      	movs	r2, #33	; 0x21
 8000846:	5499      	strb	r1, [r3, r2]
          hk_buf[34] = ((PA5 & 0xFF00) >> 8);      	// n150v_mon MSB		5 N150V_MON PA5
 8000848:	197b      	adds	r3, r7, r5
 800084a:	881b      	ldrh	r3, [r3, #0]
 800084c:	0a1b      	lsrs	r3, r3, #8
 800084e:	b29b      	uxth	r3, r3
 8000850:	b2d9      	uxtb	r1, r3
 8000852:	4b35      	ldr	r3, [pc, #212]	; (8000928 <HAL_TIM_OC_DelayElapsedCallback+0x6e4>)
 8000854:	2222      	movs	r2, #34	; 0x22
 8000856:	5499      	strb	r1, [r3, r2]
          hk_buf[35] = (PA5 & 0xFF);               	// n150v_mon LSB
 8000858:	197b      	adds	r3, r7, r5
 800085a:	881b      	ldrh	r3, [r3, #0]
 800085c:	b2d9      	uxtb	r1, r3
 800085e:	4b32      	ldr	r3, [pc, #200]	; (8000928 <HAL_TIM_OC_DelayElapsedCallback+0x6e4>)
 8000860:	2223      	movs	r2, #35	; 0x23
 8000862:	5499      	strb	r1, [r3, r2]
          hk_buf[36] = ((PA6 & 0xFF00) >> 8);      	// n800v_mon MSB		6 N800V_MON PA6
 8000864:	19bb      	adds	r3, r7, r6
 8000866:	881b      	ldrh	r3, [r3, #0]
 8000868:	0a1b      	lsrs	r3, r3, #8
 800086a:	b29b      	uxth	r3, r3
 800086c:	b2d9      	uxtb	r1, r3
 800086e:	4b2e      	ldr	r3, [pc, #184]	; (8000928 <HAL_TIM_OC_DelayElapsedCallback+0x6e4>)
 8000870:	2224      	movs	r2, #36	; 0x24
 8000872:	5499      	strb	r1, [r3, r2]
          hk_buf[37] = (PA6 & 0xFF);               	// n800v_mon LSB
 8000874:	19bb      	adds	r3, r7, r6
 8000876:	881b      	ldrh	r3, [r3, #0]
 8000878:	b2d9      	uxtb	r1, r3
 800087a:	4b2b      	ldr	r3, [pc, #172]	; (8000928 <HAL_TIM_OC_DelayElapsedCallback+0x6e4>)
 800087c:	2225      	movs	r2, #37	; 0x25
 800087e:	5499      	strb	r1, [r3, r2]

          if (HK_ON)
 8000880:	4b2b      	ldr	r3, [pc, #172]	; (8000930 <HAL_TIM_OC_DelayElapsedCallback+0x6ec>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d005      	beq.n	8000894 <HAL_TIM_OC_DelayElapsedCallback+0x650>
          {
            HAL_UART_Transmit(&huart1, hk_buf, sizeof(hk_buf), 100);
 8000888:	4927      	ldr	r1, [pc, #156]	; (8000928 <HAL_TIM_OC_DelayElapsedCallback+0x6e4>)
 800088a:	482a      	ldr	r0, [pc, #168]	; (8000934 <HAL_TIM_OC_DelayElapsedCallback+0x6f0>)
 800088c:	2364      	movs	r3, #100	; 0x64
 800088e:	2226      	movs	r2, #38	; 0x26
 8000890:	f004 fb7e 	bl	8004f90 <HAL_UART_Transmit>
          }
          hk_counter = 1;
 8000894:	4b28      	ldr	r3, [pc, #160]	; (8000938 <HAL_TIM_OC_DelayElapsedCallback+0x6f4>)
 8000896:	2201      	movs	r2, #1
 8000898:	601a      	str	r2, [r3, #0]
          hk_seq++;
 800089a:	4b24      	ldr	r3, [pc, #144]	; (800092c <HAL_TIM_OC_DelayElapsedCallback+0x6e8>)
 800089c:	881b      	ldrh	r3, [r3, #0]
 800089e:	3301      	adds	r3, #1
 80008a0:	b29a      	uxth	r2, r3
 80008a2:	4b22      	ldr	r3, [pc, #136]	; (800092c <HAL_TIM_OC_DelayElapsedCallback+0x6e8>)
 80008a4:	801a      	strh	r2, [r3, #0]
      }
    }
  }

  /* Timer 3 also called but doesn't need to do anything on IT */
}
 80008a6:	e036      	b.n	8000916 <HAL_TIM_OC_DelayElapsedCallback+0x6d2>
          hk_counter++;
 80008a8:	4b23      	ldr	r3, [pc, #140]	; (8000938 <HAL_TIM_OC_DelayElapsedCallback+0x6f4>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	1c5a      	adds	r2, r3, #1
 80008ae:	4b22      	ldr	r3, [pc, #136]	; (8000938 <HAL_TIM_OC_DelayElapsedCallback+0x6f4>)
 80008b0:	601a      	str	r2, [r3, #0]
}
 80008b2:	e030      	b.n	8000916 <HAL_TIM_OC_DelayElapsedCallback+0x6d2>
  else if (htim == &htim1)
 80008b4:	687a      	ldr	r2, [r7, #4]
 80008b6:	4b21      	ldr	r3, [pc, #132]	; (800093c <HAL_TIM_OC_DelayElapsedCallback+0x6f8>)
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d12c      	bne.n	8000916 <HAL_TIM_OC_DelayElapsedCallback+0x6d2>
    if (PMT_ON)
 80008bc:	4b20      	ldr	r3, [pc, #128]	; (8000940 <HAL_TIM_OC_DelayElapsedCallback+0x6fc>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d028      	beq.n	8000916 <HAL_TIM_OC_DelayElapsedCallback+0x6d2>
        pmt_buf[0] = pmt_sync;
 80008c4:	22bb      	movs	r2, #187	; 0xbb
 80008c6:	4b1f      	ldr	r3, [pc, #124]	; (8000944 <HAL_TIM_OC_DelayElapsedCallback+0x700>)
 80008c8:	701a      	strb	r2, [r3, #0]
        pmt_buf[1] = pmt_sync;
 80008ca:	22bb      	movs	r2, #187	; 0xbb
 80008cc:	4b1d      	ldr	r3, [pc, #116]	; (8000944 <HAL_TIM_OC_DelayElapsedCallback+0x700>)
 80008ce:	705a      	strb	r2, [r3, #1]
        pmt_buf[2] = ((pmt_seq & 0xFF00) >> 8);
 80008d0:	4b1d      	ldr	r3, [pc, #116]	; (8000948 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 80008d2:	881b      	ldrh	r3, [r3, #0]
 80008d4:	0a1b      	lsrs	r3, r3, #8
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	b2da      	uxtb	r2, r3
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <HAL_TIM_OC_DelayElapsedCallback+0x700>)
 80008dc:	709a      	strb	r2, [r3, #2]
        pmt_buf[3] = (pmt_seq & 0xFF);
 80008de:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 80008e0:	881b      	ldrh	r3, [r3, #0]
 80008e2:	b2da      	uxtb	r2, r3
 80008e4:	4b17      	ldr	r3, [pc, #92]	; (8000944 <HAL_TIM_OC_DelayElapsedCallback+0x700>)
 80008e6:	70da      	strb	r2, [r3, #3]
        pmt_buf[4] = ((pmt_raw & 0xFF00) >> 8);
 80008e8:	4b18      	ldr	r3, [pc, #96]	; (800094c <HAL_TIM_OC_DelayElapsedCallback+0x708>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	121b      	asrs	r3, r3, #8
 80008ee:	b2da      	uxtb	r2, r3
 80008f0:	4b14      	ldr	r3, [pc, #80]	; (8000944 <HAL_TIM_OC_DelayElapsedCallback+0x700>)
 80008f2:	711a      	strb	r2, [r3, #4]
        pmt_buf[5] = (pmt_raw & 0xFF);
 80008f4:	4b15      	ldr	r3, [pc, #84]	; (800094c <HAL_TIM_OC_DelayElapsedCallback+0x708>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	b2da      	uxtb	r2, r3
 80008fa:	4b12      	ldr	r3, [pc, #72]	; (8000944 <HAL_TIM_OC_DelayElapsedCallback+0x700>)
 80008fc:	715a      	strb	r2, [r3, #5]
        pmt_seq++;
 80008fe:	4b12      	ldr	r3, [pc, #72]	; (8000948 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 8000900:	881b      	ldrh	r3, [r3, #0]
 8000902:	3301      	adds	r3, #1
 8000904:	b29a      	uxth	r2, r3
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 8000908:	801a      	strh	r2, [r3, #0]
        HAL_UART_Transmit(&huart1, pmt_buf, sizeof(pmt_buf), 100);
 800090a:	490e      	ldr	r1, [pc, #56]	; (8000944 <HAL_TIM_OC_DelayElapsedCallback+0x700>)
 800090c:	4809      	ldr	r0, [pc, #36]	; (8000934 <HAL_TIM_OC_DelayElapsedCallback+0x6f0>)
 800090e:	2364      	movs	r3, #100	; 0x64
 8000910:	2206      	movs	r2, #6
 8000912:	f004 fb3d 	bl	8004f90 <HAL_UART_Transmit>
}
 8000916:	46c0      	nop			; (mov r8, r8)
 8000918:	46bd      	mov	sp, r7
 800091a:	b00f      	add	sp, #60	; 0x3c
 800091c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	20000370 	.word	0x20000370
 8000924:	20000044 	.word	0x20000044
 8000928:	200003b4 	.word	0x200003b4
 800092c:	200003da 	.word	0x200003da
 8000930:	2000001a 	.word	0x2000001a
 8000934:	20000280 	.word	0x20000280
 8000938:	200003dc 	.word	0x200003dc
 800093c:	200001f0 	.word	0x200001f0
 8000940:	20000018 	.word	0x20000018
 8000944:	200003ac 	.word	0x200003ac
 8000948:	200003b2 	.word	0x200003b2
 800094c:	20000394 	.word	0x20000394

08000950 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]

//  HAL_UART_Receive_IT(&huart1, rx_buf, 1);
  char key = rx_buf[0];
 8000958:	210f      	movs	r1, #15
 800095a:	187b      	adds	r3, r7, r1
 800095c:	4a70      	ldr	r2, [pc, #448]	; (8000b20 <HAL_UART_RxCpltCallback+0x1d0>)
 800095e:	7812      	ldrb	r2, [r2, #0]
 8000960:	701a      	strb	r2, [r3, #0]

  switch (key)
 8000962:	187b      	adds	r3, r7, r1
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	3b21      	subs	r3, #33	; 0x21
 8000968:	2b52      	cmp	r3, #82	; 0x52
 800096a:	d900      	bls.n	800096e <HAL_UART_RxCpltCallback+0x1e>
 800096c:	e0d3      	b.n	8000b16 <HAL_UART_RxCpltCallback+0x1c6>
 800096e:	009a      	lsls	r2, r3, #2
 8000970:	4b6c      	ldr	r3, [pc, #432]	; (8000b24 <HAL_UART_RxCpltCallback+0x1d4>)
 8000972:	18d3      	adds	r3, r2, r3
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	469f      	mov	pc, r3
  {
  case 'G':
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000978:	4b6b      	ldr	r3, [pc, #428]	; (8000b28 <HAL_UART_RxCpltCallback+0x1d8>)
 800097a:	2140      	movs	r1, #64	; 0x40
 800097c:	2201      	movs	r2, #1
 800097e:	0018      	movs	r0, r3
 8000980:	f002 fa22 	bl	8002dc8 <HAL_GPIO_WritePin>
    break;
 8000984:	e0c7      	b.n	8000b16 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case 'H':
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000986:	4b68      	ldr	r3, [pc, #416]	; (8000b28 <HAL_UART_RxCpltCallback+0x1d8>)
 8000988:	2140      	movs	r1, #64	; 0x40
 800098a:	2200      	movs	r2, #0
 800098c:	0018      	movs	r0, r3
 800098e:	f002 fa1b 	bl	8002dc8 <HAL_GPIO_WritePin>
    break;
 8000992:	e0c0      	b.n	8000b16 <HAL_UART_RxCpltCallback+0x1c6>
  }

  case 'I':
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_SET);
 8000994:	4b64      	ldr	r3, [pc, #400]	; (8000b28 <HAL_UART_RxCpltCallback+0x1d8>)
 8000996:	2180      	movs	r1, #128	; 0x80
 8000998:	2201      	movs	r2, #1
 800099a:	0018      	movs	r0, r3
 800099c:	f002 fa14 	bl	8002dc8 <HAL_GPIO_WritePin>
    break;
 80009a0:	e0b9      	b.n	8000b16 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case 'J':
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_RESET);
 80009a2:	4b61      	ldr	r3, [pc, #388]	; (8000b28 <HAL_UART_RxCpltCallback+0x1d8>)
 80009a4:	2180      	movs	r1, #128	; 0x80
 80009a6:	2200      	movs	r2, #0
 80009a8:	0018      	movs	r0, r3
 80009aa:	f002 fa0d 	bl	8002dc8 <HAL_GPIO_WritePin>
    break;
 80009ae:	e0b2      	b.n	8000b16 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '<':
  {
    if (step < 5)
 80009b0:	4b5e      	ldr	r3, [pc, #376]	; (8000b2c <HAL_UART_RxCpltCallback+0x1dc>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b04      	cmp	r3, #4
 80009b6:	d900      	bls.n	80009ba <HAL_UART_RxCpltCallback+0x6a>
 80009b8:	e0aa      	b.n	8000b10 <HAL_UART_RxCpltCallback+0x1c0>
    {
      step++;
 80009ba:	4b5c      	ldr	r3, [pc, #368]	; (8000b2c <HAL_UART_RxCpltCallback+0x1dc>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	3301      	adds	r3, #1
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	4b5a      	ldr	r3, [pc, #360]	; (8000b2c <HAL_UART_RxCpltCallback+0x1dc>)
 80009c4:	701a      	strb	r2, [r3, #0]
    }
    break;
 80009c6:	e0a3      	b.n	8000b10 <HAL_UART_RxCpltCallback+0x1c0>
  }
  case '>':
  {
    if (step > 0)
 80009c8:	4b58      	ldr	r3, [pc, #352]	; (8000b2c <HAL_UART_RxCpltCallback+0x1dc>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d100      	bne.n	80009d2 <HAL_UART_RxCpltCallback+0x82>
 80009d0:	e0a0      	b.n	8000b14 <HAL_UART_RxCpltCallback+0x1c4>
    {
      step--;
 80009d2:	4b56      	ldr	r3, [pc, #344]	; (8000b2c <HAL_UART_RxCpltCallback+0x1dc>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	3b01      	subs	r3, #1
 80009d8:	b2da      	uxtb	r2, r3
 80009da:	4b54      	ldr	r3, [pc, #336]	; (8000b2c <HAL_UART_RxCpltCallback+0x1dc>)
 80009dc:	701a      	strb	r2, [r3, #0]
    }
    break;
 80009de:	e099      	b.n	8000b14 <HAL_UART_RxCpltCallback+0x1c4>
  }
  case 'a':
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 80009e0:	4b53      	ldr	r3, [pc, #332]	; (8000b30 <HAL_UART_RxCpltCallback+0x1e0>)
 80009e2:	2120      	movs	r1, #32
 80009e4:	2201      	movs	r2, #1
 80009e6:	0018      	movs	r0, r3
 80009e8:	f002 f9ee 	bl	8002dc8 <HAL_GPIO_WritePin>
    break;
 80009ec:	e093      	b.n	8000b16 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '$':
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 80009ee:	4b50      	ldr	r3, [pc, #320]	; (8000b30 <HAL_UART_RxCpltCallback+0x1e0>)
 80009f0:	2120      	movs	r1, #32
 80009f2:	2200      	movs	r2, #0
 80009f4:	0018      	movs	r0, r3
 80009f6:	f002 f9e7 	bl	8002dc8 <HAL_GPIO_WritePin>
    break;
 80009fa:	e08c      	b.n	8000b16 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case 'b':
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 80009fc:	4b4c      	ldr	r3, [pc, #304]	; (8000b30 <HAL_UART_RxCpltCallback+0x1e0>)
 80009fe:	2140      	movs	r1, #64	; 0x40
 8000a00:	2201      	movs	r2, #1
 8000a02:	0018      	movs	r0, r3
 8000a04:	f002 f9e0 	bl	8002dc8 <HAL_GPIO_WritePin>
    break;
 8000a08:	e085      	b.n	8000b16 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '%':
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000a0a:	4b49      	ldr	r3, [pc, #292]	; (8000b30 <HAL_UART_RxCpltCallback+0x1e0>)
 8000a0c:	2140      	movs	r1, #64	; 0x40
 8000a0e:	2200      	movs	r2, #0
 8000a10:	0018      	movs	r0, r3
 8000a12:	f002 f9d9 	bl	8002dc8 <HAL_GPIO_WritePin>
    break;
 8000a16:	e07e      	b.n	8000b16 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case 'c':
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000a18:	4846      	ldr	r0, [pc, #280]	; (8000b34 <HAL_UART_RxCpltCallback+0x1e4>)
 8000a1a:	2380      	movs	r3, #128	; 0x80
 8000a1c:	00db      	lsls	r3, r3, #3
 8000a1e:	2201      	movs	r2, #1
 8000a20:	0019      	movs	r1, r3
 8000a22:	f002 f9d1 	bl	8002dc8 <HAL_GPIO_WritePin>
    break;
 8000a26:	e076      	b.n	8000b16 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '^':
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000a28:	4842      	ldr	r0, [pc, #264]	; (8000b34 <HAL_UART_RxCpltCallback+0x1e4>)
 8000a2a:	2380      	movs	r3, #128	; 0x80
 8000a2c:	00db      	lsls	r3, r3, #3
 8000a2e:	2200      	movs	r2, #0
 8000a30:	0019      	movs	r1, r3
 8000a32:	f002 f9c9 	bl	8002dc8 <HAL_GPIO_WritePin>
    break;
 8000a36:	e06e      	b.n	8000b16 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case 'd':
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000a38:	483e      	ldr	r0, [pc, #248]	; (8000b34 <HAL_UART_RxCpltCallback+0x1e4>)
 8000a3a:	2380      	movs	r3, #128	; 0x80
 8000a3c:	019b      	lsls	r3, r3, #6
 8000a3e:	2201      	movs	r2, #1
 8000a40:	0019      	movs	r1, r3
 8000a42:	f002 f9c1 	bl	8002dc8 <HAL_GPIO_WritePin>
    break;
 8000a46:	e066      	b.n	8000b16 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '&':
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000a48:	483a      	ldr	r0, [pc, #232]	; (8000b34 <HAL_UART_RxCpltCallback+0x1e4>)
 8000a4a:	2380      	movs	r3, #128	; 0x80
 8000a4c:	019b      	lsls	r3, r3, #6
 8000a4e:	2200      	movs	r2, #0
 8000a50:	0019      	movs	r1, r3
 8000a52:	f002 f9b9 	bl	8002dc8 <HAL_GPIO_WritePin>
    break;
 8000a56:	e05e      	b.n	8000b16 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case 'e':
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000a58:	4b36      	ldr	r3, [pc, #216]	; (8000b34 <HAL_UART_RxCpltCallback+0x1e4>)
 8000a5a:	2180      	movs	r1, #128	; 0x80
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f002 f9b2 	bl	8002dc8 <HAL_GPIO_WritePin>
    break;
 8000a64:	e057      	b.n	8000b16 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '*':
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000a66:	4b33      	ldr	r3, [pc, #204]	; (8000b34 <HAL_UART_RxCpltCallback+0x1e4>)
 8000a68:	2180      	movs	r1, #128	; 0x80
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f002 f9ab 	bl	8002dc8 <HAL_GPIO_WritePin>
    break;
 8000a72:	e050      	b.n	8000b16 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case 'f':
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000a74:	482f      	ldr	r0, [pc, #188]	; (8000b34 <HAL_UART_RxCpltCallback+0x1e4>)
 8000a76:	2380      	movs	r3, #128	; 0x80
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	0019      	movs	r1, r3
 8000a7e:	f002 f9a3 	bl	8002dc8 <HAL_GPIO_WritePin>
    break;
 8000a82:	e048      	b.n	8000b16 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '(':
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000a84:	482b      	ldr	r0, [pc, #172]	; (8000b34 <HAL_UART_RxCpltCallback+0x1e4>)
 8000a86:	2380      	movs	r3, #128	; 0x80
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	0019      	movs	r1, r3
 8000a8e:	f002 f99b 	bl	8002dc8 <HAL_GPIO_WritePin>
    break;
 8000a92:	e040      	b.n	8000b16 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case 'g':
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000a94:	4827      	ldr	r0, [pc, #156]	; (8000b34 <HAL_UART_RxCpltCallback+0x1e4>)
 8000a96:	2380      	movs	r3, #128	; 0x80
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	0019      	movs	r1, r3
 8000a9e:	f002 f993 	bl	8002dc8 <HAL_GPIO_WritePin>
    break;
 8000aa2:	e038      	b.n	8000b16 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case ')':
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000aa4:	4823      	ldr	r0, [pc, #140]	; (8000b34 <HAL_UART_RxCpltCallback+0x1e4>)
 8000aa6:	2380      	movs	r3, #128	; 0x80
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	2200      	movs	r2, #0
 8000aac:	0019      	movs	r1, r3
 8000aae:	f002 f98b 	bl	8002dc8 <HAL_GPIO_WritePin>
    break;
 8000ab2:	e030      	b.n	8000b16 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case 'h':
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000ab4:	4b1f      	ldr	r3, [pc, #124]	; (8000b34 <HAL_UART_RxCpltCallback+0x1e4>)
 8000ab6:	2140      	movs	r1, #64	; 0x40
 8000ab8:	2201      	movs	r2, #1
 8000aba:	0018      	movs	r0, r3
 8000abc:	f002 f984 	bl	8002dc8 <HAL_GPIO_WritePin>
    break;
 8000ac0:	e029      	b.n	8000b16 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '-':
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000ac2:	4b1c      	ldr	r3, [pc, #112]	; (8000b34 <HAL_UART_RxCpltCallback+0x1e4>)
 8000ac4:	2140      	movs	r1, #64	; 0x40
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f002 f97d 	bl	8002dc8 <HAL_GPIO_WritePin>
    break;
 8000ace:	e022      	b.n	8000b16 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case 's':
  {
      HAL_SuspendTick();
 8000ad0:	f001 f87e 	bl	8001bd0 <HAL_SuspendTick>
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	f002 feca 	bl	8003870 <HAL_PWR_EnterSTOPMode>
      NVIC_SystemReset();
 8000adc:	f7ff fba0 	bl	8000220 <__NVIC_SystemReset>
      break;
  }
  case '1':
  {
    PMT_ON = 1;
 8000ae0:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <HAL_UART_RxCpltCallback+0x1e8>)
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	701a      	strb	r2, [r3, #0]
    break;
 8000ae6:	e016      	b.n	8000b16 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '!':
  {
    PMT_ON = 0;
 8000ae8:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <HAL_UART_RxCpltCallback+0x1e8>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	701a      	strb	r2, [r3, #0]
    break;
 8000aee:	e012      	b.n	8000b16 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '2':
  {
    ERPA_ON = 1;
 8000af0:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <HAL_UART_RxCpltCallback+0x1ec>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	701a      	strb	r2, [r3, #0]
    break;
 8000af6:	e00e      	b.n	8000b16 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '@':
  {
    ERPA_ON = 0;
 8000af8:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <HAL_UART_RxCpltCallback+0x1ec>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	701a      	strb	r2, [r3, #0]
    break;
 8000afe:	e00a      	b.n	8000b16 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '3':
  {
    HK_ON = 1;
 8000b00:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <HAL_UART_RxCpltCallback+0x1f0>)
 8000b02:	2201      	movs	r2, #1
 8000b04:	701a      	strb	r2, [r3, #0]
    break;
 8000b06:	e006      	b.n	8000b16 <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '#':
  {
    HK_ON = 0;
 8000b08:	4b0d      	ldr	r3, [pc, #52]	; (8000b40 <HAL_UART_RxCpltCallback+0x1f0>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	701a      	strb	r2, [r3, #0]
    break;
 8000b0e:	e002      	b.n	8000b16 <HAL_UART_RxCpltCallback+0x1c6>
    break;
 8000b10:	46c0      	nop			; (mov r8, r8)
 8000b12:	e000      	b.n	8000b16 <HAL_UART_RxCpltCallback+0x1c6>
    break;
 8000b14:	46c0      	nop			; (mov r8, r8)
  }
  }
}
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	b004      	add	sp, #16
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	20000304 	.word	0x20000304
 8000b24:	08006744 	.word	0x08006744
 8000b28:	48001400 	.word	0x48001400
 8000b2c:	20000392 	.word	0x20000392
 8000b30:	48000400 	.word	0x48000400
 8000b34:	48000800 	.word	0x48000800
 8000b38:	20000018 	.word	0x20000018
 8000b3c:	20000019 	.word	0x20000019
 8000b40:	2000001a 	.word	0x2000001a

08000b44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b4a:	f000 ffdd 	bl	8001b08 <HAL_Init>
  int16_t val;
  float temp_c;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b4e:	f000 f873 	bl	8000c38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b52:	f000 fc03 	bl	800135c <MX_GPIO_Init>
  MX_DMA_Init();
 8000b56:	f000 fbe3 	bl	8001320 <MX_DMA_Init>
  MX_SPI2_Init();
 8000b5a:	f000 fab5 	bl	80010c8 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000b5e:	f000 faf3 	bl	8001148 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b62:	f000 fb49 	bl	80011f8 <MX_TIM2_Init>
  MX_SPI1_Init();
 8000b66:	f000 fa6f 	bl	8001048 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000b6a:	f000 fb99 	bl	80012a0 <MX_USART1_UART_Init>
  MX_DAC1_Init();
 8000b6e:	f000 f9f9 	bl	8000f64 <MX_DAC1_Init>
  MX_ADC_Init();
 8000b72:	f000 f8cb 	bl	8000d0c <MX_ADC_Init>
  MX_I2C1_Init();
 8000b76:	f000 fa27 	bl	8000fc8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000b7a:	4b29      	ldr	r3, [pc, #164]	; (8000c20 <main+0xdc>)
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f001 fd63 	bl	800264a <HAL_DAC_Start>

  /* Start Timers with OC & Interrupt */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000b84:	4b27      	ldr	r3, [pc, #156]	; (8000c24 <main+0xe0>)
 8000b86:	2100      	movs	r1, #0
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f003 fcf7 	bl	800457c <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000b8e:	4b26      	ldr	r3, [pc, #152]	; (8000c28 <main+0xe4>)
 8000b90:	210c      	movs	r1, #12
 8000b92:	0018      	movs	r0, r3
 8000b94:	f003 fcf2 	bl	800457c <HAL_TIM_OC_Start_IT>

  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8000b98:	46c0      	nop			; (mov r8, r8)
 8000b9a:	4b24      	ldr	r3, [pc, #144]	; (8000c2c <main+0xe8>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	69da      	ldr	r2, [r3, #28]
 8000ba0:	2380      	movs	r3, #128	; 0x80
 8000ba2:	025b      	lsls	r3, r3, #9
 8000ba4:	401a      	ands	r2, r3
 8000ba6:	2380      	movs	r3, #128	; 0x80
 8000ba8:	025b      	lsls	r3, r3, #9
 8000baa:	429a      	cmp	r2, r3
 8000bac:	d0f5      	beq.n	8000b9a <main+0x56>
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	4b1e      	ldr	r3, [pc, #120]	; (8000c2c <main+0xe8>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	69da      	ldr	r2, [r3, #28]
 8000bb6:	2380      	movs	r3, #128	; 0x80
 8000bb8:	03db      	lsls	r3, r3, #15
 8000bba:	401a      	ands	r2, r3
 8000bbc:	2380      	movs	r3, #128	; 0x80
 8000bbe:	03db      	lsls	r3, r3, #15
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d1f5      	bne.n	8000bb0 <main+0x6c>

  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_ADDRESS;
 8000bc4:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <main+0xec>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
  WakeUpSelection.AddressLength = UART_ADDRESS_DETECT_7B;
 8000bca:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <main+0xec>)
 8000bcc:	2210      	movs	r2, #16
 8000bce:	809a      	strh	r2, [r3, #4]
  WakeUpSelection.Address = 0x23; // send "£"
 8000bd0:	4b17      	ldr	r3, [pc, #92]	; (8000c30 <main+0xec>)
 8000bd2:	2223      	movs	r2, #35	; 0x23
 8000bd4:	719a      	strb	r2, [r3, #6]

  if (HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection) != HAL_OK) {
 8000bd6:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <main+0xec>)
 8000bd8:	4814      	ldr	r0, [pc, #80]	; (8000c2c <main+0xe8>)
 8000bda:	6819      	ldr	r1, [r3, #0]
 8000bdc:	685a      	ldr	r2, [r3, #4]
 8000bde:	f005 fc63 	bl	80064a8 <HAL_UARTEx_StopModeWakeUpSourceConfig>
 8000be2:	1e03      	subs	r3, r0, #0
 8000be4:	d001      	beq.n	8000bea <main+0xa6>
      Error_Handler();
 8000be6:	f000 fc75 	bl	80014d4 <Error_Handler>
  }
  /* Enable the LPUART Wake UP from stop mode Interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8000bea:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <main+0xe8>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	689a      	ldr	r2, [r3, #8]
 8000bf0:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <main+0xe8>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2180      	movs	r1, #128	; 0x80
 8000bf6:	03c9      	lsls	r1, r1, #15
 8000bf8:	430a      	orrs	r2, r1
 8000bfa:	609a      	str	r2, [r3, #8]

  /* enable MCU wake-up by LPUART */
  HAL_UARTEx_EnableStopMode(&huart1);
 8000bfc:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <main+0xe8>)
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f005 fcb8 	bl	8006574 <HAL_UARTEx_EnableStopMode>
//	  HAL_Delay(100);
//
//
//
//
	HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000c04:	490b      	ldr	r1, [pc, #44]	; (8000c34 <main+0xf0>)
 8000c06:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <main+0xe8>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	f004 fb46 	bl	800529c <HAL_UART_Receive_IT>

    HAL_UART_Receive(&huart1, rx_buf, 1, 0);
 8000c10:	4908      	ldr	r1, [pc, #32]	; (8000c34 <main+0xf0>)
 8000c12:	4806      	ldr	r0, [pc, #24]	; (8000c2c <main+0xe8>)
 8000c14:	2300      	movs	r3, #0
 8000c16:	2201      	movs	r2, #1
 8000c18:	f004 fa64 	bl	80050e4 <HAL_UART_Receive>
	HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000c1c:	e7f2      	b.n	8000c04 <main+0xc0>
 8000c1e:	46c0      	nop			; (mov r8, r8)
 8000c20:	200000c8 	.word	0x200000c8
 8000c24:	200001f0 	.word	0x200001f0
 8000c28:	20000238 	.word	0x20000238
 8000c2c:	20000280 	.word	0x20000280
 8000c30:	20000368 	.word	0x20000368
 8000c34:	20000304 	.word	0x20000304

08000c38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c38:	b590      	push	{r4, r7, lr}
 8000c3a:	b097      	sub	sp, #92	; 0x5c
 8000c3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c3e:	2428      	movs	r4, #40	; 0x28
 8000c40:	193b      	adds	r3, r7, r4
 8000c42:	0018      	movs	r0, r3
 8000c44:	2330      	movs	r3, #48	; 0x30
 8000c46:	001a      	movs	r2, r3
 8000c48:	2100      	movs	r1, #0
 8000c4a:	f005 fd0d 	bl	8006668 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c4e:	2318      	movs	r3, #24
 8000c50:	18fb      	adds	r3, r7, r3
 8000c52:	0018      	movs	r0, r3
 8000c54:	2310      	movs	r3, #16
 8000c56:	001a      	movs	r2, r3
 8000c58:	2100      	movs	r1, #0
 8000c5a:	f005 fd05 	bl	8006668 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	0018      	movs	r0, r3
 8000c62:	2314      	movs	r3, #20
 8000c64:	001a      	movs	r2, r3
 8000c66:	2100      	movs	r1, #0
 8000c68:	f005 fcfe 	bl	8006668 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000c6c:	0021      	movs	r1, r4
 8000c6e:	187b      	adds	r3, r7, r1
 8000c70:	2212      	movs	r2, #18
 8000c72:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c74:	187b      	adds	r3, r7, r1
 8000c76:	2201      	movs	r2, #1
 8000c78:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000c7a:	187b      	adds	r3, r7, r1
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c80:	187b      	adds	r3, r7, r1
 8000c82:	2210      	movs	r2, #16
 8000c84:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000c86:	187b      	adds	r3, r7, r1
 8000c88:	2210      	movs	r2, #16
 8000c8a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c8c:	187b      	adds	r3, r7, r1
 8000c8e:	2202      	movs	r2, #2
 8000c90:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c92:	187b      	adds	r3, r7, r1
 8000c94:	2200      	movs	r2, #0
 8000c96:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000c98:	187b      	adds	r3, r7, r1
 8000c9a:	22a0      	movs	r2, #160	; 0xa0
 8000c9c:	0392      	lsls	r2, r2, #14
 8000c9e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000ca0:	187b      	adds	r3, r7, r1
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca6:	187b      	adds	r3, r7, r1
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f002 fe15 	bl	80038d8 <HAL_RCC_OscConfig>
 8000cae:	1e03      	subs	r3, r0, #0
 8000cb0:	d001      	beq.n	8000cb6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000cb2:	f000 fc0f 	bl	80014d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb6:	2118      	movs	r1, #24
 8000cb8:	187b      	adds	r3, r7, r1
 8000cba:	2207      	movs	r2, #7
 8000cbc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cbe:	187b      	adds	r3, r7, r1
 8000cc0:	2202      	movs	r2, #2
 8000cc2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cc4:	187b      	adds	r3, r7, r1
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cca:	187b      	adds	r3, r7, r1
 8000ccc:	2200      	movs	r2, #0
 8000cce:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000cd0:	187b      	adds	r3, r7, r1
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f003 f919 	bl	8003f0c <HAL_RCC_ClockConfig>
 8000cda:	1e03      	subs	r3, r0, #0
 8000cdc:	d001      	beq.n	8000ce2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000cde:	f000 fbf9 	bl	80014d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	2221      	movs	r2, #33	; 0x21
 8000ce6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8000ce8:	1d3b      	adds	r3, r7, #4
 8000cea:	2203      	movs	r2, #3
 8000cec:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f003 fa5a 	bl	80041b0 <HAL_RCCEx_PeriphCLKConfig>
 8000cfc:	1e03      	subs	r3, r0, #0
 8000cfe:	d001      	beq.n	8000d04 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000d00:	f000 fbe8 	bl	80014d4 <Error_Handler>
  }
}
 8000d04:	46c0      	nop			; (mov r8, r8)
 8000d06:	46bd      	mov	sp, r7
 8000d08:	b017      	add	sp, #92	; 0x5c
 8000d0a:	bd90      	pop	{r4, r7, pc}

08000d0c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	0018      	movs	r0, r3
 8000d16:	230c      	movs	r3, #12
 8000d18:	001a      	movs	r2, r3
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	f005 fca4 	bl	8006668 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000d20:	4b8e      	ldr	r3, [pc, #568]	; (8000f5c <MX_ADC_Init+0x250>)
 8000d22:	4a8f      	ldr	r2, [pc, #572]	; (8000f60 <MX_ADC_Init+0x254>)
 8000d24:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d26:	4b8d      	ldr	r3, [pc, #564]	; (8000f5c <MX_ADC_Init+0x250>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000d2c:	4b8b      	ldr	r3, [pc, #556]	; (8000f5c <MX_ADC_Init+0x250>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d32:	4b8a      	ldr	r3, [pc, #552]	; (8000f5c <MX_ADC_Init+0x250>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000d38:	4b88      	ldr	r3, [pc, #544]	; (8000f5c <MX_ADC_Init+0x250>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d3e:	4b87      	ldr	r3, [pc, #540]	; (8000f5c <MX_ADC_Init+0x250>)
 8000d40:	2204      	movs	r2, #4
 8000d42:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000d44:	4b85      	ldr	r3, [pc, #532]	; (8000f5c <MX_ADC_Init+0x250>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000d4a:	4b84      	ldr	r3, [pc, #528]	; (8000f5c <MX_ADC_Init+0x250>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000d50:	4b82      	ldr	r3, [pc, #520]	; (8000f5c <MX_ADC_Init+0x250>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000d56:	4b81      	ldr	r3, [pc, #516]	; (8000f5c <MX_ADC_Init+0x250>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d5c:	4b7f      	ldr	r3, [pc, #508]	; (8000f5c <MX_ADC_Init+0x250>)
 8000d5e:	22c2      	movs	r2, #194	; 0xc2
 8000d60:	32ff      	adds	r2, #255	; 0xff
 8000d62:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d64:	4b7d      	ldr	r3, [pc, #500]	; (8000f5c <MX_ADC_Init+0x250>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000d6a:	4b7c      	ldr	r3, [pc, #496]	; (8000f5c <MX_ADC_Init+0x250>)
 8000d6c:	2224      	movs	r2, #36	; 0x24
 8000d6e:	2100      	movs	r1, #0
 8000d70:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d72:	4b7a      	ldr	r3, [pc, #488]	; (8000f5c <MX_ADC_Init+0x250>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000d78:	4b78      	ldr	r3, [pc, #480]	; (8000f5c <MX_ADC_Init+0x250>)
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	f000 ff36 	bl	8001bec <HAL_ADC_Init>
 8000d80:	1e03      	subs	r3, r0, #0
 8000d82:	d001      	beq.n	8000d88 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000d84:	f000 fba6 	bl	80014d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d88:	1d3b      	adds	r3, r7, #4
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	2280      	movs	r2, #128	; 0x80
 8000d92:	0152      	lsls	r2, r2, #5
 8000d94:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	2280      	movs	r2, #128	; 0x80
 8000d9a:	0552      	lsls	r2, r2, #21
 8000d9c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000d9e:	1d3a      	adds	r2, r7, #4
 8000da0:	4b6e      	ldr	r3, [pc, #440]	; (8000f5c <MX_ADC_Init+0x250>)
 8000da2:	0011      	movs	r1, r2
 8000da4:	0018      	movs	r0, r3
 8000da6:	f001 f8fb 	bl	8001fa0 <HAL_ADC_ConfigChannel>
 8000daa:	1e03      	subs	r3, r0, #0
 8000dac:	d001      	beq.n	8000db2 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000dae:	f000 fb91 	bl	80014d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	2201      	movs	r2, #1
 8000db6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000db8:	1d3a      	adds	r2, r7, #4
 8000dba:	4b68      	ldr	r3, [pc, #416]	; (8000f5c <MX_ADC_Init+0x250>)
 8000dbc:	0011      	movs	r1, r2
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f001 f8ee 	bl	8001fa0 <HAL_ADC_ConfigChannel>
 8000dc4:	1e03      	subs	r3, r0, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8000dc8:	f000 fb84 	bl	80014d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	2202      	movs	r2, #2
 8000dd0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000dd2:	1d3a      	adds	r2, r7, #4
 8000dd4:	4b61      	ldr	r3, [pc, #388]	; (8000f5c <MX_ADC_Init+0x250>)
 8000dd6:	0011      	movs	r1, r2
 8000dd8:	0018      	movs	r0, r3
 8000dda:	f001 f8e1 	bl	8001fa0 <HAL_ADC_ConfigChannel>
 8000dde:	1e03      	subs	r3, r0, #0
 8000de0:	d001      	beq.n	8000de6 <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8000de2:	f000 fb77 	bl	80014d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	2203      	movs	r2, #3
 8000dea:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000dec:	1d3a      	adds	r2, r7, #4
 8000dee:	4b5b      	ldr	r3, [pc, #364]	; (8000f5c <MX_ADC_Init+0x250>)
 8000df0:	0011      	movs	r1, r2
 8000df2:	0018      	movs	r0, r3
 8000df4:	f001 f8d4 	bl	8001fa0 <HAL_ADC_ConfigChannel>
 8000df8:	1e03      	subs	r3, r0, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 8000dfc:	f000 fb6a 	bl	80014d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	2205      	movs	r2, #5
 8000e04:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e06:	1d3a      	adds	r2, r7, #4
 8000e08:	4b54      	ldr	r3, [pc, #336]	; (8000f5c <MX_ADC_Init+0x250>)
 8000e0a:	0011      	movs	r1, r2
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f001 f8c7 	bl	8001fa0 <HAL_ADC_ConfigChannel>
 8000e12:	1e03      	subs	r3, r0, #0
 8000e14:	d001      	beq.n	8000e1a <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 8000e16:	f000 fb5d 	bl	80014d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	2206      	movs	r2, #6
 8000e1e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e20:	1d3a      	adds	r2, r7, #4
 8000e22:	4b4e      	ldr	r3, [pc, #312]	; (8000f5c <MX_ADC_Init+0x250>)
 8000e24:	0011      	movs	r1, r2
 8000e26:	0018      	movs	r0, r3
 8000e28:	f001 f8ba 	bl	8001fa0 <HAL_ADC_ConfigChannel>
 8000e2c:	1e03      	subs	r3, r0, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_ADC_Init+0x128>
  {
    Error_Handler();
 8000e30:	f000 fb50 	bl	80014d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000e34:	1d3b      	adds	r3, r7, #4
 8000e36:	2207      	movs	r2, #7
 8000e38:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e3a:	1d3a      	adds	r2, r7, #4
 8000e3c:	4b47      	ldr	r3, [pc, #284]	; (8000f5c <MX_ADC_Init+0x250>)
 8000e3e:	0011      	movs	r1, r2
 8000e40:	0018      	movs	r0, r3
 8000e42:	f001 f8ad 	bl	8001fa0 <HAL_ADC_ConfigChannel>
 8000e46:	1e03      	subs	r3, r0, #0
 8000e48:	d001      	beq.n	8000e4e <MX_ADC_Init+0x142>
  {
    Error_Handler();
 8000e4a:	f000 fb43 	bl	80014d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	2208      	movs	r2, #8
 8000e52:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e54:	1d3a      	adds	r2, r7, #4
 8000e56:	4b41      	ldr	r3, [pc, #260]	; (8000f5c <MX_ADC_Init+0x250>)
 8000e58:	0011      	movs	r1, r2
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	f001 f8a0 	bl	8001fa0 <HAL_ADC_ConfigChannel>
 8000e60:	1e03      	subs	r3, r0, #0
 8000e62:	d001      	beq.n	8000e68 <MX_ADC_Init+0x15c>
  {
    Error_Handler();
 8000e64:	f000 fb36 	bl	80014d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000e68:	1d3b      	adds	r3, r7, #4
 8000e6a:	2209      	movs	r2, #9
 8000e6c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e6e:	1d3a      	adds	r2, r7, #4
 8000e70:	4b3a      	ldr	r3, [pc, #232]	; (8000f5c <MX_ADC_Init+0x250>)
 8000e72:	0011      	movs	r1, r2
 8000e74:	0018      	movs	r0, r3
 8000e76:	f001 f893 	bl	8001fa0 <HAL_ADC_ConfigChannel>
 8000e7a:	1e03      	subs	r3, r0, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_ADC_Init+0x176>
  {
    Error_Handler();
 8000e7e:	f000 fb29 	bl	80014d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000e82:	1d3b      	adds	r3, r7, #4
 8000e84:	220a      	movs	r2, #10
 8000e86:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e88:	1d3a      	adds	r2, r7, #4
 8000e8a:	4b34      	ldr	r3, [pc, #208]	; (8000f5c <MX_ADC_Init+0x250>)
 8000e8c:	0011      	movs	r1, r2
 8000e8e:	0018      	movs	r0, r3
 8000e90:	f001 f886 	bl	8001fa0 <HAL_ADC_ConfigChannel>
 8000e94:	1e03      	subs	r3, r0, #0
 8000e96:	d001      	beq.n	8000e9c <MX_ADC_Init+0x190>
  {
    Error_Handler();
 8000e98:	f000 fb1c 	bl	80014d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	220b      	movs	r2, #11
 8000ea0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ea2:	1d3a      	adds	r2, r7, #4
 8000ea4:	4b2d      	ldr	r3, [pc, #180]	; (8000f5c <MX_ADC_Init+0x250>)
 8000ea6:	0011      	movs	r1, r2
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	f001 f879 	bl	8001fa0 <HAL_ADC_ConfigChannel>
 8000eae:	1e03      	subs	r3, r0, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_ADC_Init+0x1aa>
  {
    Error_Handler();
 8000eb2:	f000 fb0f 	bl	80014d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	220c      	movs	r2, #12
 8000eba:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ebc:	1d3a      	adds	r2, r7, #4
 8000ebe:	4b27      	ldr	r3, [pc, #156]	; (8000f5c <MX_ADC_Init+0x250>)
 8000ec0:	0011      	movs	r1, r2
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	f001 f86c 	bl	8001fa0 <HAL_ADC_ConfigChannel>
 8000ec8:	1e03      	subs	r3, r0, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_ADC_Init+0x1c4>
  {
    Error_Handler();
 8000ecc:	f000 fb02 	bl	80014d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000ed0:	1d3b      	adds	r3, r7, #4
 8000ed2:	220d      	movs	r2, #13
 8000ed4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ed6:	1d3a      	adds	r2, r7, #4
 8000ed8:	4b20      	ldr	r3, [pc, #128]	; (8000f5c <MX_ADC_Init+0x250>)
 8000eda:	0011      	movs	r1, r2
 8000edc:	0018      	movs	r0, r3
 8000ede:	f001 f85f 	bl	8001fa0 <HAL_ADC_ConfigChannel>
 8000ee2:	1e03      	subs	r3, r0, #0
 8000ee4:	d001      	beq.n	8000eea <MX_ADC_Init+0x1de>
  {
    Error_Handler();
 8000ee6:	f000 faf5 	bl	80014d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	220e      	movs	r2, #14
 8000eee:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ef0:	1d3a      	adds	r2, r7, #4
 8000ef2:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <MX_ADC_Init+0x250>)
 8000ef4:	0011      	movs	r1, r2
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f001 f852 	bl	8001fa0 <HAL_ADC_ConfigChannel>
 8000efc:	1e03      	subs	r3, r0, #0
 8000efe:	d001      	beq.n	8000f04 <MX_ADC_Init+0x1f8>
  {
    Error_Handler();
 8000f00:	f000 fae8 	bl	80014d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	220f      	movs	r2, #15
 8000f08:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f0a:	1d3a      	adds	r2, r7, #4
 8000f0c:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <MX_ADC_Init+0x250>)
 8000f0e:	0011      	movs	r1, r2
 8000f10:	0018      	movs	r0, r3
 8000f12:	f001 f845 	bl	8001fa0 <HAL_ADC_ConfigChannel>
 8000f16:	1e03      	subs	r3, r0, #0
 8000f18:	d001      	beq.n	8000f1e <MX_ADC_Init+0x212>
  {
    Error_Handler();
 8000f1a:	f000 fadb 	bl	80014d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	2210      	movs	r2, #16
 8000f22:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f24:	1d3a      	adds	r2, r7, #4
 8000f26:	4b0d      	ldr	r3, [pc, #52]	; (8000f5c <MX_ADC_Init+0x250>)
 8000f28:	0011      	movs	r1, r2
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	f001 f838 	bl	8001fa0 <HAL_ADC_ConfigChannel>
 8000f30:	1e03      	subs	r3, r0, #0
 8000f32:	d001      	beq.n	8000f38 <MX_ADC_Init+0x22c>
  {
    Error_Handler();
 8000f34:	f000 face 	bl	80014d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000f38:	1d3b      	adds	r3, r7, #4
 8000f3a:	2211      	movs	r2, #17
 8000f3c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f3e:	1d3a      	adds	r2, r7, #4
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <MX_ADC_Init+0x250>)
 8000f42:	0011      	movs	r1, r2
 8000f44:	0018      	movs	r0, r3
 8000f46:	f001 f82b 	bl	8001fa0 <HAL_ADC_ConfigChannel>
 8000f4a:	1e03      	subs	r3, r0, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_ADC_Init+0x246>
  {
    Error_Handler();
 8000f4e:	f000 fac1 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	46bd      	mov	sp, r7
 8000f56:	b004      	add	sp, #16
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	46c0      	nop			; (mov r8, r8)
 8000f5c:	20000044 	.word	0x20000044
 8000f60:	40012400 	.word	0x40012400

08000f64 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */
  step = 0;
 8000f6a:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <MX_DAC1_Init+0x58>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000f70:	003b      	movs	r3, r7
 8000f72:	0018      	movs	r0, r3
 8000f74:	2308      	movs	r3, #8
 8000f76:	001a      	movs	r2, r3
 8000f78:	2100      	movs	r1, #0
 8000f7a:	f005 fb75 	bl	8006668 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC;
 8000f7e:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <MX_DAC1_Init+0x5c>)
 8000f80:	4a10      	ldr	r2, [pc, #64]	; (8000fc4 <MX_DAC1_Init+0x60>)
 8000f82:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000f84:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <MX_DAC1_Init+0x5c>)
 8000f86:	0018      	movs	r0, r3
 8000f88:	f001 fafe 	bl	8002588 <HAL_DAC_Init>
 8000f8c:	1e03      	subs	r3, r0, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_DAC1_Init+0x30>
  {
    Error_Handler();
 8000f90:	f000 faa0 	bl	80014d4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000f94:	003b      	movs	r3, r7
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f9a:	003b      	movs	r3, r7
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000fa0:	0039      	movs	r1, r7
 8000fa2:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <MX_DAC1_Init+0x5c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	f001 fb11 	bl	80025ce <HAL_DAC_ConfigChannel>
 8000fac:	1e03      	subs	r3, r0, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_DAC1_Init+0x50>
  {
    Error_Handler();
 8000fb0:	f000 fa90 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000fb4:	46c0      	nop			; (mov r8, r8)
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	b002      	add	sp, #8
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000392 	.word	0x20000392
 8000fc0:	200000c8 	.word	0x200000c8
 8000fc4:	40007400 	.word	0x40007400

08000fc8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fcc:	4b1b      	ldr	r3, [pc, #108]	; (800103c <MX_I2C1_Init+0x74>)
 8000fce:	4a1c      	ldr	r2, [pc, #112]	; (8001040 <MX_I2C1_Init+0x78>)
 8000fd0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000fd2:	4b1a      	ldr	r3, [pc, #104]	; (800103c <MX_I2C1_Init+0x74>)
 8000fd4:	4a1b      	ldr	r2, [pc, #108]	; (8001044 <MX_I2C1_Init+0x7c>)
 8000fd6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fd8:	4b18      	ldr	r3, [pc, #96]	; (800103c <MX_I2C1_Init+0x74>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fde:	4b17      	ldr	r3, [pc, #92]	; (800103c <MX_I2C1_Init+0x74>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fe4:	4b15      	ldr	r3, [pc, #84]	; (800103c <MX_I2C1_Init+0x74>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fea:	4b14      	ldr	r3, [pc, #80]	; (800103c <MX_I2C1_Init+0x74>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <MX_I2C1_Init+0x74>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ff6:	4b11      	ldr	r3, [pc, #68]	; (800103c <MX_I2C1_Init+0x74>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	; (800103c <MX_I2C1_Init+0x74>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <MX_I2C1_Init+0x74>)
 8001004:	0018      	movs	r0, r3
 8001006:	f001 fefd 	bl	8002e04 <HAL_I2C_Init>
 800100a:	1e03      	subs	r3, r0, #0
 800100c:	d001      	beq.n	8001012 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800100e:	f000 fa61 	bl	80014d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001012:	4b0a      	ldr	r3, [pc, #40]	; (800103c <MX_I2C1_Init+0x74>)
 8001014:	2100      	movs	r1, #0
 8001016:	0018      	movs	r0, r3
 8001018:	f002 fb92 	bl	8003740 <HAL_I2CEx_ConfigAnalogFilter>
 800101c:	1e03      	subs	r3, r0, #0
 800101e:	d001      	beq.n	8001024 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001020:	f000 fa58 	bl	80014d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001024:	4b05      	ldr	r3, [pc, #20]	; (800103c <MX_I2C1_Init+0x74>)
 8001026:	2100      	movs	r1, #0
 8001028:	0018      	movs	r0, r3
 800102a:	f002 fbd5 	bl	80037d8 <HAL_I2CEx_ConfigDigitalFilter>
 800102e:	1e03      	subs	r3, r0, #0
 8001030:	d001      	beq.n	8001036 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001032:	f000 fa4f 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	200000dc 	.word	0x200000dc
 8001040:	40005400 	.word	0x40005400
 8001044:	2000090e 	.word	0x2000090e

08001048 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800104c:	4b1c      	ldr	r3, [pc, #112]	; (80010c0 <MX_SPI1_Init+0x78>)
 800104e:	4a1d      	ldr	r2, [pc, #116]	; (80010c4 <MX_SPI1_Init+0x7c>)
 8001050:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001052:	4b1b      	ldr	r3, [pc, #108]	; (80010c0 <MX_SPI1_Init+0x78>)
 8001054:	2282      	movs	r2, #130	; 0x82
 8001056:	0052      	lsls	r2, r2, #1
 8001058:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800105a:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <MX_SPI1_Init+0x78>)
 800105c:	2280      	movs	r2, #128	; 0x80
 800105e:	00d2      	lsls	r2, r2, #3
 8001060:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001062:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <MX_SPI1_Init+0x78>)
 8001064:	22f0      	movs	r2, #240	; 0xf0
 8001066:	0112      	lsls	r2, r2, #4
 8001068:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800106a:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <MX_SPI1_Init+0x78>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001070:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <MX_SPI1_Init+0x78>)
 8001072:	2200      	movs	r2, #0
 8001074:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001076:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <MX_SPI1_Init+0x78>)
 8001078:	2280      	movs	r2, #128	; 0x80
 800107a:	0092      	lsls	r2, r2, #2
 800107c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800107e:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <MX_SPI1_Init+0x78>)
 8001080:	2218      	movs	r2, #24
 8001082:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001084:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <MX_SPI1_Init+0x78>)
 8001086:	2200      	movs	r2, #0
 8001088:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800108a:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <MX_SPI1_Init+0x78>)
 800108c:	2200      	movs	r2, #0
 800108e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001090:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <MX_SPI1_Init+0x78>)
 8001092:	2200      	movs	r2, #0
 8001094:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001096:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <MX_SPI1_Init+0x78>)
 8001098:	2207      	movs	r2, #7
 800109a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800109c:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <MX_SPI1_Init+0x78>)
 800109e:	2200      	movs	r2, #0
 80010a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010a2:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <MX_SPI1_Init+0x78>)
 80010a4:	2208      	movs	r2, #8
 80010a6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <MX_SPI1_Init+0x78>)
 80010aa:	0018      	movs	r0, r3
 80010ac:	f003 f95e 	bl	800436c <HAL_SPI_Init>
 80010b0:	1e03      	subs	r3, r0, #0
 80010b2:	d001      	beq.n	80010b8 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 80010b4:	f000 fa0e 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010b8:	46c0      	nop			; (mov r8, r8)
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	20000128 	.word	0x20000128
 80010c4:	40013000 	.word	0x40013000

080010c8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80010cc:	4b1c      	ldr	r3, [pc, #112]	; (8001140 <MX_SPI2_Init+0x78>)
 80010ce:	4a1d      	ldr	r2, [pc, #116]	; (8001144 <MX_SPI2_Init+0x7c>)
 80010d0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80010d2:	4b1b      	ldr	r3, [pc, #108]	; (8001140 <MX_SPI2_Init+0x78>)
 80010d4:	2282      	movs	r2, #130	; 0x82
 80010d6:	0052      	lsls	r2, r2, #1
 80010d8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80010da:	4b19      	ldr	r3, [pc, #100]	; (8001140 <MX_SPI2_Init+0x78>)
 80010dc:	2280      	movs	r2, #128	; 0x80
 80010de:	00d2      	lsls	r2, r2, #3
 80010e0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80010e2:	4b17      	ldr	r3, [pc, #92]	; (8001140 <MX_SPI2_Init+0x78>)
 80010e4:	22f0      	movs	r2, #240	; 0xf0
 80010e6:	0112      	lsls	r2, r2, #4
 80010e8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010ea:	4b15      	ldr	r3, [pc, #84]	; (8001140 <MX_SPI2_Init+0x78>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010f0:	4b13      	ldr	r3, [pc, #76]	; (8001140 <MX_SPI2_Init+0x78>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80010f6:	4b12      	ldr	r3, [pc, #72]	; (8001140 <MX_SPI2_Init+0x78>)
 80010f8:	2280      	movs	r2, #128	; 0x80
 80010fa:	0092      	lsls	r2, r2, #2
 80010fc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80010fe:	4b10      	ldr	r3, [pc, #64]	; (8001140 <MX_SPI2_Init+0x78>)
 8001100:	2218      	movs	r2, #24
 8001102:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001104:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <MX_SPI2_Init+0x78>)
 8001106:	2200      	movs	r2, #0
 8001108:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800110a:	4b0d      	ldr	r3, [pc, #52]	; (8001140 <MX_SPI2_Init+0x78>)
 800110c:	2200      	movs	r2, #0
 800110e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001110:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <MX_SPI2_Init+0x78>)
 8001112:	2200      	movs	r2, #0
 8001114:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001116:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <MX_SPI2_Init+0x78>)
 8001118:	2207      	movs	r2, #7
 800111a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800111c:	4b08      	ldr	r3, [pc, #32]	; (8001140 <MX_SPI2_Init+0x78>)
 800111e:	2200      	movs	r2, #0
 8001120:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001122:	4b07      	ldr	r3, [pc, #28]	; (8001140 <MX_SPI2_Init+0x78>)
 8001124:	2208      	movs	r2, #8
 8001126:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001128:	4b05      	ldr	r3, [pc, #20]	; (8001140 <MX_SPI2_Init+0x78>)
 800112a:	0018      	movs	r0, r3
 800112c:	f003 f91e 	bl	800436c <HAL_SPI_Init>
 8001130:	1e03      	subs	r3, r0, #0
 8001132:	d001      	beq.n	8001138 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8001134:	f000 f9ce 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001138:	46c0      	nop			; (mov r8, r8)
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	2000018c 	.word	0x2000018c
 8001144:	40003800 	.word	0x40003800

08001148 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800114e:	2308      	movs	r3, #8
 8001150:	18fb      	adds	r3, r7, r3
 8001152:	0018      	movs	r0, r3
 8001154:	2310      	movs	r3, #16
 8001156:	001a      	movs	r2, r3
 8001158:	2100      	movs	r1, #0
 800115a:	f005 fa85 	bl	8006668 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800115e:	003b      	movs	r3, r7
 8001160:	0018      	movs	r0, r3
 8001162:	2308      	movs	r3, #8
 8001164:	001a      	movs	r2, r3
 8001166:	2100      	movs	r1, #0
 8001168:	f005 fa7e 	bl	8006668 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800116c:	4b1f      	ldr	r3, [pc, #124]	; (80011ec <MX_TIM1_Init+0xa4>)
 800116e:	4a20      	ldr	r2, [pc, #128]	; (80011f0 <MX_TIM1_Init+0xa8>)
 8001170:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100 - 1;
 8001172:	4b1e      	ldr	r3, [pc, #120]	; (80011ec <MX_TIM1_Init+0xa4>)
 8001174:	2263      	movs	r2, #99	; 0x63
 8001176:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001178:	4b1c      	ldr	r3, [pc, #112]	; (80011ec <MX_TIM1_Init+0xa4>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24000 - 1;
 800117e:	4b1b      	ldr	r3, [pc, #108]	; (80011ec <MX_TIM1_Init+0xa4>)
 8001180:	4a1c      	ldr	r2, [pc, #112]	; (80011f4 <MX_TIM1_Init+0xac>)
 8001182:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001184:	4b19      	ldr	r3, [pc, #100]	; (80011ec <MX_TIM1_Init+0xa4>)
 8001186:	2200      	movs	r2, #0
 8001188:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800118a:	4b18      	ldr	r3, [pc, #96]	; (80011ec <MX_TIM1_Init+0xa4>)
 800118c:	2200      	movs	r2, #0
 800118e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001190:	4b16      	ldr	r3, [pc, #88]	; (80011ec <MX_TIM1_Init+0xa4>)
 8001192:	2280      	movs	r2, #128	; 0x80
 8001194:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001196:	4b15      	ldr	r3, [pc, #84]	; (80011ec <MX_TIM1_Init+0xa4>)
 8001198:	0018      	movs	r0, r3
 800119a:	f003 f99f 	bl	80044dc <HAL_TIM_Base_Init>
 800119e:	1e03      	subs	r3, r0, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 80011a2:	f000 f997 	bl	80014d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a6:	2108      	movs	r1, #8
 80011a8:	187b      	adds	r3, r7, r1
 80011aa:	2280      	movs	r2, #128	; 0x80
 80011ac:	0152      	lsls	r2, r2, #5
 80011ae:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011b0:	187a      	adds	r2, r7, r1
 80011b2:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <MX_TIM1_Init+0xa4>)
 80011b4:	0011      	movs	r1, r2
 80011b6:	0018      	movs	r0, r3
 80011b8:	f003 fbf6 	bl	80049a8 <HAL_TIM_ConfigClockSource>
 80011bc:	1e03      	subs	r3, r0, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80011c0:	f000 f988 	bl	80014d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c4:	003b      	movs	r3, r7
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ca:	003b      	movs	r3, r7
 80011cc:	2200      	movs	r2, #0
 80011ce:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011d0:	003a      	movs	r2, r7
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <MX_TIM1_Init+0xa4>)
 80011d4:	0011      	movs	r1, r2
 80011d6:	0018      	movs	r0, r3
 80011d8:	f003 fe18 	bl	8004e0c <HAL_TIMEx_MasterConfigSynchronization>
 80011dc:	1e03      	subs	r3, r0, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80011e0:	f000 f978 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80011e4:	46c0      	nop			; (mov r8, r8)
 80011e6:	46bd      	mov	sp, r7
 80011e8:	b006      	add	sp, #24
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	200001f0 	.word	0x200001f0
 80011f0:	40012c00 	.word	0x40012c00
 80011f4:	00005dbf 	.word	0x00005dbf

080011f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011fe:	2308      	movs	r3, #8
 8001200:	18fb      	adds	r3, r7, r3
 8001202:	0018      	movs	r0, r3
 8001204:	2310      	movs	r3, #16
 8001206:	001a      	movs	r2, r3
 8001208:	2100      	movs	r1, #0
 800120a:	f005 fa2d 	bl	8006668 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800120e:	003b      	movs	r3, r7
 8001210:	0018      	movs	r0, r3
 8001212:	2308      	movs	r3, #8
 8001214:	001a      	movs	r2, r3
 8001216:	2100      	movs	r1, #0
 8001218:	f005 fa26 	bl	8006668 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800121c:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <MX_TIM2_Init+0xa0>)
 800121e:	2280      	movs	r2, #128	; 0x80
 8001220:	05d2      	lsls	r2, r2, #23
 8001222:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100 - 1;
 8001224:	4b1c      	ldr	r3, [pc, #112]	; (8001298 <MX_TIM2_Init+0xa0>)
 8001226:	2263      	movs	r2, #99	; 0x63
 8001228:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800122a:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <MX_TIM2_Init+0xa0>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 24000 - 1;
 8001230:	4b19      	ldr	r3, [pc, #100]	; (8001298 <MX_TIM2_Init+0xa0>)
 8001232:	4a1a      	ldr	r2, [pc, #104]	; (800129c <MX_TIM2_Init+0xa4>)
 8001234:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001236:	4b18      	ldr	r3, [pc, #96]	; (8001298 <MX_TIM2_Init+0xa0>)
 8001238:	2200      	movs	r2, #0
 800123a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800123c:	4b16      	ldr	r3, [pc, #88]	; (8001298 <MX_TIM2_Init+0xa0>)
 800123e:	2280      	movs	r2, #128	; 0x80
 8001240:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <MX_TIM2_Init+0xa0>)
 8001244:	0018      	movs	r0, r3
 8001246:	f003 f949 	bl	80044dc <HAL_TIM_Base_Init>
 800124a:	1e03      	subs	r3, r0, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800124e:	f000 f941 	bl	80014d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001252:	2108      	movs	r1, #8
 8001254:	187b      	adds	r3, r7, r1
 8001256:	2280      	movs	r2, #128	; 0x80
 8001258:	0152      	lsls	r2, r2, #5
 800125a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800125c:	187a      	adds	r2, r7, r1
 800125e:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <MX_TIM2_Init+0xa0>)
 8001260:	0011      	movs	r1, r2
 8001262:	0018      	movs	r0, r3
 8001264:	f003 fba0 	bl	80049a8 <HAL_TIM_ConfigClockSource>
 8001268:	1e03      	subs	r3, r0, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800126c:	f000 f932 	bl	80014d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001270:	003b      	movs	r3, r7
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001276:	003b      	movs	r3, r7
 8001278:	2200      	movs	r2, #0
 800127a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800127c:	003a      	movs	r2, r7
 800127e:	4b06      	ldr	r3, [pc, #24]	; (8001298 <MX_TIM2_Init+0xa0>)
 8001280:	0011      	movs	r1, r2
 8001282:	0018      	movs	r0, r3
 8001284:	f003 fdc2 	bl	8004e0c <HAL_TIMEx_MasterConfigSynchronization>
 8001288:	1e03      	subs	r3, r0, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800128c:	f000 f922 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */

}
 8001290:	46c0      	nop			; (mov r8, r8)
 8001292:	46bd      	mov	sp, r7
 8001294:	b006      	add	sp, #24
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000238 	.word	0x20000238
 800129c:	00005dbf 	.word	0x00005dbf

080012a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */
  erpa_seq = 0;
 80012a4:	4b19      	ldr	r3, [pc, #100]	; (800130c <MX_USART1_UART_Init+0x6c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	801a      	strh	r2, [r3, #0]
  pmt_seq = 0;
 80012aa:	4b19      	ldr	r3, [pc, #100]	; (8001310 <MX_USART1_UART_Init+0x70>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	801a      	strh	r2, [r3, #0]
  hk_seq = 0;
 80012b0:	4b18      	ldr	r3, [pc, #96]	; (8001314 <MX_USART1_UART_Init+0x74>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	801a      	strh	r2, [r3, #0]
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012b6:	4b18      	ldr	r3, [pc, #96]	; (8001318 <MX_USART1_UART_Init+0x78>)
 80012b8:	4a18      	ldr	r2, [pc, #96]	; (800131c <MX_USART1_UART_Init+0x7c>)
 80012ba:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80012bc:	4b16      	ldr	r3, [pc, #88]	; (8001318 <MX_USART1_UART_Init+0x78>)
 80012be:	22e1      	movs	r2, #225	; 0xe1
 80012c0:	0212      	lsls	r2, r2, #8
 80012c2:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012c4:	4b14      	ldr	r3, [pc, #80]	; (8001318 <MX_USART1_UART_Init+0x78>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012ca:	4b13      	ldr	r3, [pc, #76]	; (8001318 <MX_USART1_UART_Init+0x78>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012d0:	4b11      	ldr	r3, [pc, #68]	; (8001318 <MX_USART1_UART_Init+0x78>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012d6:	4b10      	ldr	r3, [pc, #64]	; (8001318 <MX_USART1_UART_Init+0x78>)
 80012d8:	220c      	movs	r2, #12
 80012da:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012dc:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <MX_USART1_UART_Init+0x78>)
 80012de:	2200      	movs	r2, #0
 80012e0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e2:	4b0d      	ldr	r3, [pc, #52]	; (8001318 <MX_USART1_UART_Init+0x78>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012e8:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <MX_USART1_UART_Init+0x78>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012ee:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <MX_USART1_UART_Init+0x78>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012f4:	4b08      	ldr	r3, [pc, #32]	; (8001318 <MX_USART1_UART_Init+0x78>)
 80012f6:	0018      	movs	r0, r3
 80012f8:	f003 fdf6 	bl	8004ee8 <HAL_UART_Init>
 80012fc:	1e03      	subs	r3, r0, #0
 80012fe:	d001      	beq.n	8001304 <MX_USART1_UART_Init+0x64>
  {
    Error_Handler();
 8001300:	f000 f8e8 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001304:	46c0      	nop			; (mov r8, r8)
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	46c0      	nop			; (mov r8, r8)
 800130c:	200003aa 	.word	0x200003aa
 8001310:	200003b2 	.word	0x200003b2
 8001314:	200003da 	.word	0x200003da
 8001318:	20000280 	.word	0x20000280
 800131c:	40013800 	.word	0x40013800

08001320 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001326:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <MX_DMA_Init+0x38>)
 8001328:	695a      	ldr	r2, [r3, #20]
 800132a:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <MX_DMA_Init+0x38>)
 800132c:	2101      	movs	r1, #1
 800132e:	430a      	orrs	r2, r1
 8001330:	615a      	str	r2, [r3, #20]
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <MX_DMA_Init+0x38>)
 8001334:	695b      	ldr	r3, [r3, #20]
 8001336:	2201      	movs	r2, #1
 8001338:	4013      	ands	r3, r2
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800133e:	2200      	movs	r2, #0
 8001340:	2100      	movs	r1, #0
 8001342:	2009      	movs	r0, #9
 8001344:	f001 f8ee 	bl	8002524 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001348:	2009      	movs	r0, #9
 800134a:	f001 f900 	bl	800254e <HAL_NVIC_EnableIRQ>

}
 800134e:	46c0      	nop			; (mov r8, r8)
 8001350:	46bd      	mov	sp, r7
 8001352:	b002      	add	sp, #8
 8001354:	bd80      	pop	{r7, pc}
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	40021000 	.word	0x40021000

0800135c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800135c:	b590      	push	{r4, r7, lr}
 800135e:	b08b      	sub	sp, #44	; 0x2c
 8001360:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001362:	2414      	movs	r4, #20
 8001364:	193b      	adds	r3, r7, r4
 8001366:	0018      	movs	r0, r3
 8001368:	2314      	movs	r3, #20
 800136a:	001a      	movs	r2, r3
 800136c:	2100      	movs	r1, #0
 800136e:	f005 f97b 	bl	8006668 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001372:	4b54      	ldr	r3, [pc, #336]	; (80014c4 <MX_GPIO_Init+0x168>)
 8001374:	695a      	ldr	r2, [r3, #20]
 8001376:	4b53      	ldr	r3, [pc, #332]	; (80014c4 <MX_GPIO_Init+0x168>)
 8001378:	2180      	movs	r1, #128	; 0x80
 800137a:	0309      	lsls	r1, r1, #12
 800137c:	430a      	orrs	r2, r1
 800137e:	615a      	str	r2, [r3, #20]
 8001380:	4b50      	ldr	r3, [pc, #320]	; (80014c4 <MX_GPIO_Init+0x168>)
 8001382:	695a      	ldr	r2, [r3, #20]
 8001384:	2380      	movs	r3, #128	; 0x80
 8001386:	031b      	lsls	r3, r3, #12
 8001388:	4013      	ands	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
 800138c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800138e:	4b4d      	ldr	r3, [pc, #308]	; (80014c4 <MX_GPIO_Init+0x168>)
 8001390:	695a      	ldr	r2, [r3, #20]
 8001392:	4b4c      	ldr	r3, [pc, #304]	; (80014c4 <MX_GPIO_Init+0x168>)
 8001394:	2180      	movs	r1, #128	; 0x80
 8001396:	03c9      	lsls	r1, r1, #15
 8001398:	430a      	orrs	r2, r1
 800139a:	615a      	str	r2, [r3, #20]
 800139c:	4b49      	ldr	r3, [pc, #292]	; (80014c4 <MX_GPIO_Init+0x168>)
 800139e:	695a      	ldr	r2, [r3, #20]
 80013a0:	2380      	movs	r3, #128	; 0x80
 80013a2:	03db      	lsls	r3, r3, #15
 80013a4:	4013      	ands	r3, r2
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013aa:	4b46      	ldr	r3, [pc, #280]	; (80014c4 <MX_GPIO_Init+0x168>)
 80013ac:	695a      	ldr	r2, [r3, #20]
 80013ae:	4b45      	ldr	r3, [pc, #276]	; (80014c4 <MX_GPIO_Init+0x168>)
 80013b0:	2180      	movs	r1, #128	; 0x80
 80013b2:	0289      	lsls	r1, r1, #10
 80013b4:	430a      	orrs	r2, r1
 80013b6:	615a      	str	r2, [r3, #20]
 80013b8:	4b42      	ldr	r3, [pc, #264]	; (80014c4 <MX_GPIO_Init+0x168>)
 80013ba:	695a      	ldr	r2, [r3, #20]
 80013bc:	2380      	movs	r3, #128	; 0x80
 80013be:	029b      	lsls	r3, r3, #10
 80013c0:	4013      	ands	r3, r2
 80013c2:	60bb      	str	r3, [r7, #8]
 80013c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c6:	4b3f      	ldr	r3, [pc, #252]	; (80014c4 <MX_GPIO_Init+0x168>)
 80013c8:	695a      	ldr	r2, [r3, #20]
 80013ca:	4b3e      	ldr	r3, [pc, #248]	; (80014c4 <MX_GPIO_Init+0x168>)
 80013cc:	2180      	movs	r1, #128	; 0x80
 80013ce:	02c9      	lsls	r1, r1, #11
 80013d0:	430a      	orrs	r2, r1
 80013d2:	615a      	str	r2, [r3, #20]
 80013d4:	4b3b      	ldr	r3, [pc, #236]	; (80014c4 <MX_GPIO_Init+0x168>)
 80013d6:	695a      	ldr	r2, [r3, #20]
 80013d8:	2380      	movs	r3, #128	; 0x80
 80013da:	02db      	lsls	r3, r3, #11
 80013dc:	4013      	ands	r3, r2
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80013e2:	239f      	movs	r3, #159	; 0x9f
 80013e4:	019b      	lsls	r3, r3, #6
 80013e6:	4838      	ldr	r0, [pc, #224]	; (80014c8 <MX_GPIO_Init+0x16c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	0019      	movs	r1, r3
 80013ec:	f001 fcec 	bl	8002dc8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80013f0:	2386      	movs	r3, #134	; 0x86
 80013f2:	011b      	lsls	r3, r3, #4
 80013f4:	4835      	ldr	r0, [pc, #212]	; (80014cc <MX_GPIO_Init+0x170>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	0019      	movs	r1, r3
 80013fa:	f001 fce5 	bl	8002dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80013fe:	2380      	movs	r3, #128	; 0x80
 8001400:	0059      	lsls	r1, r3, #1
 8001402:	2390      	movs	r3, #144	; 0x90
 8001404:	05db      	lsls	r3, r3, #23
 8001406:	2200      	movs	r2, #0
 8001408:	0018      	movs	r0, r3
 800140a:	f001 fcdd 	bl	8002dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800140e:	4b30      	ldr	r3, [pc, #192]	; (80014d0 <MX_GPIO_Init+0x174>)
 8001410:	2200      	movs	r2, #0
 8001412:	21c0      	movs	r1, #192	; 0xc0
 8001414:	0018      	movs	r0, r3
 8001416:	f001 fcd7 	bl	8002dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800141a:	193b      	adds	r3, r7, r4
 800141c:	229f      	movs	r2, #159	; 0x9f
 800141e:	0192      	lsls	r2, r2, #6
 8001420:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001422:	193b      	adds	r3, r7, r4
 8001424:	2201      	movs	r2, #1
 8001426:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	193b      	adds	r3, r7, r4
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142e:	193b      	adds	r3, r7, r4
 8001430:	2200      	movs	r2, #0
 8001432:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001434:	193b      	adds	r3, r7, r4
 8001436:	4a24      	ldr	r2, [pc, #144]	; (80014c8 <MX_GPIO_Init+0x16c>)
 8001438:	0019      	movs	r1, r3
 800143a:	0010      	movs	r0, r2
 800143c:	f001 fb54 	bl	8002ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_5|GPIO_PIN_6;
 8001440:	0021      	movs	r1, r4
 8001442:	187b      	adds	r3, r7, r1
 8001444:	2286      	movs	r2, #134	; 0x86
 8001446:	0112      	lsls	r2, r2, #4
 8001448:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144a:	000c      	movs	r4, r1
 800144c:	193b      	adds	r3, r7, r4
 800144e:	2201      	movs	r2, #1
 8001450:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	193b      	adds	r3, r7, r4
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001458:	193b      	adds	r3, r7, r4
 800145a:	2200      	movs	r2, #0
 800145c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800145e:	193b      	adds	r3, r7, r4
 8001460:	4a1a      	ldr	r2, [pc, #104]	; (80014cc <MX_GPIO_Init+0x170>)
 8001462:	0019      	movs	r1, r3
 8001464:	0010      	movs	r0, r2
 8001466:	f001 fb3f 	bl	8002ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800146a:	0021      	movs	r1, r4
 800146c:	187b      	adds	r3, r7, r1
 800146e:	2280      	movs	r2, #128	; 0x80
 8001470:	0052      	lsls	r2, r2, #1
 8001472:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001474:	000c      	movs	r4, r1
 8001476:	193b      	adds	r3, r7, r4
 8001478:	2201      	movs	r2, #1
 800147a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	193b      	adds	r3, r7, r4
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001482:	193b      	adds	r3, r7, r4
 8001484:	2200      	movs	r2, #0
 8001486:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001488:	193a      	adds	r2, r7, r4
 800148a:	2390      	movs	r3, #144	; 0x90
 800148c:	05db      	lsls	r3, r3, #23
 800148e:	0011      	movs	r1, r2
 8001490:	0018      	movs	r0, r3
 8001492:	f001 fb29 	bl	8002ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001496:	0021      	movs	r1, r4
 8001498:	187b      	adds	r3, r7, r1
 800149a:	22c0      	movs	r2, #192	; 0xc0
 800149c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149e:	187b      	adds	r3, r7, r1
 80014a0:	2201      	movs	r2, #1
 80014a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	187b      	adds	r3, r7, r1
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014aa:	187b      	adds	r3, r7, r1
 80014ac:	2200      	movs	r2, #0
 80014ae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014b0:	187b      	adds	r3, r7, r1
 80014b2:	4a07      	ldr	r2, [pc, #28]	; (80014d0 <MX_GPIO_Init+0x174>)
 80014b4:	0019      	movs	r1, r3
 80014b6:	0010      	movs	r0, r2
 80014b8:	f001 fb16 	bl	8002ae8 <HAL_GPIO_Init>

}
 80014bc:	46c0      	nop			; (mov r8, r8)
 80014be:	46bd      	mov	sp, r7
 80014c0:	b00b      	add	sp, #44	; 0x2c
 80014c2:	bd90      	pop	{r4, r7, pc}
 80014c4:	40021000 	.word	0x40021000
 80014c8:	48000800 	.word	0x48000800
 80014cc:	48000400 	.word	0x48000400
 80014d0:	48001400 	.word	0x48001400

080014d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80014d8:	b672      	cpsid	i
}
 80014da:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014dc:	e7fe      	b.n	80014dc <Error_Handler+0x8>
	...

080014e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e6:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <HAL_MspInit+0x44>)
 80014e8:	699a      	ldr	r2, [r3, #24]
 80014ea:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <HAL_MspInit+0x44>)
 80014ec:	2101      	movs	r1, #1
 80014ee:	430a      	orrs	r2, r1
 80014f0:	619a      	str	r2, [r3, #24]
 80014f2:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <HAL_MspInit+0x44>)
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	2201      	movs	r2, #1
 80014f8:	4013      	ands	r3, r2
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014fe:	4b09      	ldr	r3, [pc, #36]	; (8001524 <HAL_MspInit+0x44>)
 8001500:	69da      	ldr	r2, [r3, #28]
 8001502:	4b08      	ldr	r3, [pc, #32]	; (8001524 <HAL_MspInit+0x44>)
 8001504:	2180      	movs	r1, #128	; 0x80
 8001506:	0549      	lsls	r1, r1, #21
 8001508:	430a      	orrs	r2, r1
 800150a:	61da      	str	r2, [r3, #28]
 800150c:	4b05      	ldr	r3, [pc, #20]	; (8001524 <HAL_MspInit+0x44>)
 800150e:	69da      	ldr	r2, [r3, #28]
 8001510:	2380      	movs	r3, #128	; 0x80
 8001512:	055b      	lsls	r3, r3, #21
 8001514:	4013      	ands	r3, r2
 8001516:	603b      	str	r3, [r7, #0]
 8001518:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800151a:	46c0      	nop			; (mov r8, r8)
 800151c:	46bd      	mov	sp, r7
 800151e:	b002      	add	sp, #8
 8001520:	bd80      	pop	{r7, pc}
 8001522:	46c0      	nop			; (mov r8, r8)
 8001524:	40021000 	.word	0x40021000

08001528 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001528:	b590      	push	{r4, r7, lr}
 800152a:	b08d      	sub	sp, #52	; 0x34
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	241c      	movs	r4, #28
 8001532:	193b      	adds	r3, r7, r4
 8001534:	0018      	movs	r0, r3
 8001536:	2314      	movs	r3, #20
 8001538:	001a      	movs	r2, r3
 800153a:	2100      	movs	r1, #0
 800153c:	f005 f894 	bl	8006668 <memset>
  if(hadc->Instance==ADC1)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a4a      	ldr	r2, [pc, #296]	; (8001670 <HAL_ADC_MspInit+0x148>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d000      	beq.n	800154c <HAL_ADC_MspInit+0x24>
 800154a:	e08d      	b.n	8001668 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800154c:	4b49      	ldr	r3, [pc, #292]	; (8001674 <HAL_ADC_MspInit+0x14c>)
 800154e:	699a      	ldr	r2, [r3, #24]
 8001550:	4b48      	ldr	r3, [pc, #288]	; (8001674 <HAL_ADC_MspInit+0x14c>)
 8001552:	2180      	movs	r1, #128	; 0x80
 8001554:	0089      	lsls	r1, r1, #2
 8001556:	430a      	orrs	r2, r1
 8001558:	619a      	str	r2, [r3, #24]
 800155a:	4b46      	ldr	r3, [pc, #280]	; (8001674 <HAL_ADC_MspInit+0x14c>)
 800155c:	699a      	ldr	r2, [r3, #24]
 800155e:	2380      	movs	r3, #128	; 0x80
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	4013      	ands	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
 8001566:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001568:	4b42      	ldr	r3, [pc, #264]	; (8001674 <HAL_ADC_MspInit+0x14c>)
 800156a:	695a      	ldr	r2, [r3, #20]
 800156c:	4b41      	ldr	r3, [pc, #260]	; (8001674 <HAL_ADC_MspInit+0x14c>)
 800156e:	2180      	movs	r1, #128	; 0x80
 8001570:	0309      	lsls	r1, r1, #12
 8001572:	430a      	orrs	r2, r1
 8001574:	615a      	str	r2, [r3, #20]
 8001576:	4b3f      	ldr	r3, [pc, #252]	; (8001674 <HAL_ADC_MspInit+0x14c>)
 8001578:	695a      	ldr	r2, [r3, #20]
 800157a:	2380      	movs	r3, #128	; 0x80
 800157c:	031b      	lsls	r3, r3, #12
 800157e:	4013      	ands	r3, r2
 8001580:	617b      	str	r3, [r7, #20]
 8001582:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001584:	4b3b      	ldr	r3, [pc, #236]	; (8001674 <HAL_ADC_MspInit+0x14c>)
 8001586:	695a      	ldr	r2, [r3, #20]
 8001588:	4b3a      	ldr	r3, [pc, #232]	; (8001674 <HAL_ADC_MspInit+0x14c>)
 800158a:	2180      	movs	r1, #128	; 0x80
 800158c:	0289      	lsls	r1, r1, #10
 800158e:	430a      	orrs	r2, r1
 8001590:	615a      	str	r2, [r3, #20]
 8001592:	4b38      	ldr	r3, [pc, #224]	; (8001674 <HAL_ADC_MspInit+0x14c>)
 8001594:	695a      	ldr	r2, [r3, #20]
 8001596:	2380      	movs	r3, #128	; 0x80
 8001598:	029b      	lsls	r3, r3, #10
 800159a:	4013      	ands	r3, r2
 800159c:	613b      	str	r3, [r7, #16]
 800159e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a0:	4b34      	ldr	r3, [pc, #208]	; (8001674 <HAL_ADC_MspInit+0x14c>)
 80015a2:	695a      	ldr	r2, [r3, #20]
 80015a4:	4b33      	ldr	r3, [pc, #204]	; (8001674 <HAL_ADC_MspInit+0x14c>)
 80015a6:	2180      	movs	r1, #128	; 0x80
 80015a8:	02c9      	lsls	r1, r1, #11
 80015aa:	430a      	orrs	r2, r1
 80015ac:	615a      	str	r2, [r3, #20]
 80015ae:	4b31      	ldr	r3, [pc, #196]	; (8001674 <HAL_ADC_MspInit+0x14c>)
 80015b0:	695a      	ldr	r2, [r3, #20]
 80015b2:	2380      	movs	r3, #128	; 0x80
 80015b4:	02db      	lsls	r3, r3, #11
 80015b6:	4013      	ands	r3, r2
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80015bc:	193b      	adds	r3, r7, r4
 80015be:	223f      	movs	r2, #63	; 0x3f
 80015c0:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015c2:	193b      	adds	r3, r7, r4
 80015c4:	2203      	movs	r2, #3
 80015c6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	193b      	adds	r3, r7, r4
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ce:	193b      	adds	r3, r7, r4
 80015d0:	4a29      	ldr	r2, [pc, #164]	; (8001678 <HAL_ADC_MspInit+0x150>)
 80015d2:	0019      	movs	r1, r3
 80015d4:	0010      	movs	r0, r2
 80015d6:	f001 fa87 	bl	8002ae8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80015da:	193b      	adds	r3, r7, r4
 80015dc:	22ef      	movs	r2, #239	; 0xef
 80015de:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015e0:	193b      	adds	r3, r7, r4
 80015e2:	2203      	movs	r2, #3
 80015e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	193b      	adds	r3, r7, r4
 80015e8:	2200      	movs	r2, #0
 80015ea:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ec:	193a      	adds	r2, r7, r4
 80015ee:	2390      	movs	r3, #144	; 0x90
 80015f0:	05db      	lsls	r3, r3, #23
 80015f2:	0011      	movs	r1, r2
 80015f4:	0018      	movs	r0, r3
 80015f6:	f001 fa77 	bl	8002ae8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015fa:	193b      	adds	r3, r7, r4
 80015fc:	2203      	movs	r2, #3
 80015fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001600:	193b      	adds	r3, r7, r4
 8001602:	2203      	movs	r2, #3
 8001604:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	193b      	adds	r3, r7, r4
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160c:	193b      	adds	r3, r7, r4
 800160e:	4a1b      	ldr	r2, [pc, #108]	; (800167c <HAL_ADC_MspInit+0x154>)
 8001610:	0019      	movs	r1, r3
 8001612:	0010      	movs	r0, r2
 8001614:	f001 fa68 	bl	8002ae8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001618:	4b19      	ldr	r3, [pc, #100]	; (8001680 <HAL_ADC_MspInit+0x158>)
 800161a:	4a1a      	ldr	r2, [pc, #104]	; (8001684 <HAL_ADC_MspInit+0x15c>)
 800161c:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800161e:	4b18      	ldr	r3, [pc, #96]	; (8001680 <HAL_ADC_MspInit+0x158>)
 8001620:	2200      	movs	r2, #0
 8001622:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001624:	4b16      	ldr	r3, [pc, #88]	; (8001680 <HAL_ADC_MspInit+0x158>)
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 800162a:	4b15      	ldr	r3, [pc, #84]	; (8001680 <HAL_ADC_MspInit+0x158>)
 800162c:	2280      	movs	r2, #128	; 0x80
 800162e:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001630:	4b13      	ldr	r3, [pc, #76]	; (8001680 <HAL_ADC_MspInit+0x158>)
 8001632:	2280      	movs	r2, #128	; 0x80
 8001634:	0052      	lsls	r2, r2, #1
 8001636:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001638:	4b11      	ldr	r3, [pc, #68]	; (8001680 <HAL_ADC_MspInit+0x158>)
 800163a:	2280      	movs	r2, #128	; 0x80
 800163c:	00d2      	lsls	r2, r2, #3
 800163e:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8001640:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <HAL_ADC_MspInit+0x158>)
 8001642:	2200      	movs	r2, #0
 8001644:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8001646:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <HAL_ADC_MspInit+0x158>)
 8001648:	2200      	movs	r2, #0
 800164a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800164c:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <HAL_ADC_MspInit+0x158>)
 800164e:	0018      	movs	r0, r3
 8001650:	f001 f834 	bl	80026bc <HAL_DMA_Init>
 8001654:	1e03      	subs	r3, r0, #0
 8001656:	d001      	beq.n	800165c <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8001658:	f7ff ff3c 	bl	80014d4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4a08      	ldr	r2, [pc, #32]	; (8001680 <HAL_ADC_MspInit+0x158>)
 8001660:	631a      	str	r2, [r3, #48]	; 0x30
 8001662:	4b07      	ldr	r3, [pc, #28]	; (8001680 <HAL_ADC_MspInit+0x158>)
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001668:	46c0      	nop			; (mov r8, r8)
 800166a:	46bd      	mov	sp, r7
 800166c:	b00d      	add	sp, #52	; 0x34
 800166e:	bd90      	pop	{r4, r7, pc}
 8001670:	40012400 	.word	0x40012400
 8001674:	40021000 	.word	0x40021000
 8001678:	48000800 	.word	0x48000800
 800167c:	48000400 	.word	0x48000400
 8001680:	20000084 	.word	0x20000084
 8001684:	40020008 	.word	0x40020008

08001688 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001688:	b590      	push	{r4, r7, lr}
 800168a:	b08b      	sub	sp, #44	; 0x2c
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001690:	2414      	movs	r4, #20
 8001692:	193b      	adds	r3, r7, r4
 8001694:	0018      	movs	r0, r3
 8001696:	2314      	movs	r3, #20
 8001698:	001a      	movs	r2, r3
 800169a:	2100      	movs	r1, #0
 800169c:	f004 ffe4 	bl	8006668 <memset>
  if(hdac->Instance==DAC)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a19      	ldr	r2, [pc, #100]	; (800170c <HAL_DAC_MspInit+0x84>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d12b      	bne.n	8001702 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80016aa:	4b19      	ldr	r3, [pc, #100]	; (8001710 <HAL_DAC_MspInit+0x88>)
 80016ac:	69da      	ldr	r2, [r3, #28]
 80016ae:	4b18      	ldr	r3, [pc, #96]	; (8001710 <HAL_DAC_MspInit+0x88>)
 80016b0:	2180      	movs	r1, #128	; 0x80
 80016b2:	0589      	lsls	r1, r1, #22
 80016b4:	430a      	orrs	r2, r1
 80016b6:	61da      	str	r2, [r3, #28]
 80016b8:	4b15      	ldr	r3, [pc, #84]	; (8001710 <HAL_DAC_MspInit+0x88>)
 80016ba:	69da      	ldr	r2, [r3, #28]
 80016bc:	2380      	movs	r3, #128	; 0x80
 80016be:	059b      	lsls	r3, r3, #22
 80016c0:	4013      	ands	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c6:	4b12      	ldr	r3, [pc, #72]	; (8001710 <HAL_DAC_MspInit+0x88>)
 80016c8:	695a      	ldr	r2, [r3, #20]
 80016ca:	4b11      	ldr	r3, [pc, #68]	; (8001710 <HAL_DAC_MspInit+0x88>)
 80016cc:	2180      	movs	r1, #128	; 0x80
 80016ce:	0289      	lsls	r1, r1, #10
 80016d0:	430a      	orrs	r2, r1
 80016d2:	615a      	str	r2, [r3, #20]
 80016d4:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <HAL_DAC_MspInit+0x88>)
 80016d6:	695a      	ldr	r2, [r3, #20]
 80016d8:	2380      	movs	r3, #128	; 0x80
 80016da:	029b      	lsls	r3, r3, #10
 80016dc:	4013      	ands	r3, r2
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016e2:	193b      	adds	r3, r7, r4
 80016e4:	2210      	movs	r2, #16
 80016e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016e8:	193b      	adds	r3, r7, r4
 80016ea:	2203      	movs	r2, #3
 80016ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	193b      	adds	r3, r7, r4
 80016f0:	2200      	movs	r2, #0
 80016f2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f4:	193a      	adds	r2, r7, r4
 80016f6:	2390      	movs	r3, #144	; 0x90
 80016f8:	05db      	lsls	r3, r3, #23
 80016fa:	0011      	movs	r1, r2
 80016fc:	0018      	movs	r0, r3
 80016fe:	f001 f9f3 	bl	8002ae8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001702:	46c0      	nop			; (mov r8, r8)
 8001704:	46bd      	mov	sp, r7
 8001706:	b00b      	add	sp, #44	; 0x2c
 8001708:	bd90      	pop	{r4, r7, pc}
 800170a:	46c0      	nop			; (mov r8, r8)
 800170c:	40007400 	.word	0x40007400
 8001710:	40021000 	.word	0x40021000

08001714 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001714:	b590      	push	{r4, r7, lr}
 8001716:	b08b      	sub	sp, #44	; 0x2c
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	2414      	movs	r4, #20
 800171e:	193b      	adds	r3, r7, r4
 8001720:	0018      	movs	r0, r3
 8001722:	2314      	movs	r3, #20
 8001724:	001a      	movs	r2, r3
 8001726:	2100      	movs	r1, #0
 8001728:	f004 ff9e 	bl	8006668 <memset>
  if(hi2c->Instance==I2C1)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a1c      	ldr	r2, [pc, #112]	; (80017a4 <HAL_I2C_MspInit+0x90>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d132      	bne.n	800179c <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001736:	4b1c      	ldr	r3, [pc, #112]	; (80017a8 <HAL_I2C_MspInit+0x94>)
 8001738:	695a      	ldr	r2, [r3, #20]
 800173a:	4b1b      	ldr	r3, [pc, #108]	; (80017a8 <HAL_I2C_MspInit+0x94>)
 800173c:	2180      	movs	r1, #128	; 0x80
 800173e:	02c9      	lsls	r1, r1, #11
 8001740:	430a      	orrs	r2, r1
 8001742:	615a      	str	r2, [r3, #20]
 8001744:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <HAL_I2C_MspInit+0x94>)
 8001746:	695a      	ldr	r2, [r3, #20]
 8001748:	2380      	movs	r3, #128	; 0x80
 800174a:	02db      	lsls	r3, r3, #11
 800174c:	4013      	ands	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
 8001750:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001752:	193b      	adds	r3, r7, r4
 8001754:	22c0      	movs	r2, #192	; 0xc0
 8001756:	0092      	lsls	r2, r2, #2
 8001758:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800175a:	0021      	movs	r1, r4
 800175c:	187b      	adds	r3, r7, r1
 800175e:	2212      	movs	r2, #18
 8001760:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	187b      	adds	r3, r7, r1
 8001764:	2200      	movs	r2, #0
 8001766:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001768:	187b      	adds	r3, r7, r1
 800176a:	2203      	movs	r2, #3
 800176c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800176e:	187b      	adds	r3, r7, r1
 8001770:	2201      	movs	r2, #1
 8001772:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001774:	187b      	adds	r3, r7, r1
 8001776:	4a0d      	ldr	r2, [pc, #52]	; (80017ac <HAL_I2C_MspInit+0x98>)
 8001778:	0019      	movs	r1, r3
 800177a:	0010      	movs	r0, r2
 800177c:	f001 f9b4 	bl	8002ae8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001780:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <HAL_I2C_MspInit+0x94>)
 8001782:	69da      	ldr	r2, [r3, #28]
 8001784:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <HAL_I2C_MspInit+0x94>)
 8001786:	2180      	movs	r1, #128	; 0x80
 8001788:	0389      	lsls	r1, r1, #14
 800178a:	430a      	orrs	r2, r1
 800178c:	61da      	str	r2, [r3, #28]
 800178e:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <HAL_I2C_MspInit+0x94>)
 8001790:	69da      	ldr	r2, [r3, #28]
 8001792:	2380      	movs	r3, #128	; 0x80
 8001794:	039b      	lsls	r3, r3, #14
 8001796:	4013      	ands	r3, r2
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800179c:	46c0      	nop			; (mov r8, r8)
 800179e:	46bd      	mov	sp, r7
 80017a0:	b00b      	add	sp, #44	; 0x2c
 80017a2:	bd90      	pop	{r4, r7, pc}
 80017a4:	40005400 	.word	0x40005400
 80017a8:	40021000 	.word	0x40021000
 80017ac:	48000400 	.word	0x48000400

080017b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017b0:	b590      	push	{r4, r7, lr}
 80017b2:	b08d      	sub	sp, #52	; 0x34
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b8:	241c      	movs	r4, #28
 80017ba:	193b      	adds	r3, r7, r4
 80017bc:	0018      	movs	r0, r3
 80017be:	2314      	movs	r3, #20
 80017c0:	001a      	movs	r2, r3
 80017c2:	2100      	movs	r1, #0
 80017c4:	f004 ff50 	bl	8006668 <memset>
  if(hspi->Instance==SPI1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a38      	ldr	r2, [pc, #224]	; (80018b0 <HAL_SPI_MspInit+0x100>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d132      	bne.n	8001838 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017d2:	4b38      	ldr	r3, [pc, #224]	; (80018b4 <HAL_SPI_MspInit+0x104>)
 80017d4:	699a      	ldr	r2, [r3, #24]
 80017d6:	4b37      	ldr	r3, [pc, #220]	; (80018b4 <HAL_SPI_MspInit+0x104>)
 80017d8:	2180      	movs	r1, #128	; 0x80
 80017da:	0149      	lsls	r1, r1, #5
 80017dc:	430a      	orrs	r2, r1
 80017de:	619a      	str	r2, [r3, #24]
 80017e0:	4b34      	ldr	r3, [pc, #208]	; (80018b4 <HAL_SPI_MspInit+0x104>)
 80017e2:	699a      	ldr	r2, [r3, #24]
 80017e4:	2380      	movs	r3, #128	; 0x80
 80017e6:	015b      	lsls	r3, r3, #5
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
 80017ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ee:	4b31      	ldr	r3, [pc, #196]	; (80018b4 <HAL_SPI_MspInit+0x104>)
 80017f0:	695a      	ldr	r2, [r3, #20]
 80017f2:	4b30      	ldr	r3, [pc, #192]	; (80018b4 <HAL_SPI_MspInit+0x104>)
 80017f4:	2180      	movs	r1, #128	; 0x80
 80017f6:	02c9      	lsls	r1, r1, #11
 80017f8:	430a      	orrs	r2, r1
 80017fa:	615a      	str	r2, [r3, #20]
 80017fc:	4b2d      	ldr	r3, [pc, #180]	; (80018b4 <HAL_SPI_MspInit+0x104>)
 80017fe:	695a      	ldr	r2, [r3, #20]
 8001800:	2380      	movs	r3, #128	; 0x80
 8001802:	02db      	lsls	r3, r3, #11
 8001804:	4013      	ands	r3, r2
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800180a:	0021      	movs	r1, r4
 800180c:	187b      	adds	r3, r7, r1
 800180e:	2218      	movs	r2, #24
 8001810:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001812:	187b      	adds	r3, r7, r1
 8001814:	2202      	movs	r2, #2
 8001816:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	187b      	adds	r3, r7, r1
 800181a:	2200      	movs	r2, #0
 800181c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800181e:	187b      	adds	r3, r7, r1
 8001820:	2203      	movs	r2, #3
 8001822:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001824:	187b      	adds	r3, r7, r1
 8001826:	2200      	movs	r2, #0
 8001828:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182a:	187b      	adds	r3, r7, r1
 800182c:	4a22      	ldr	r2, [pc, #136]	; (80018b8 <HAL_SPI_MspInit+0x108>)
 800182e:	0019      	movs	r1, r3
 8001830:	0010      	movs	r0, r2
 8001832:	f001 f959 	bl	8002ae8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001836:	e037      	b.n	80018a8 <HAL_SPI_MspInit+0xf8>
  else if(hspi->Instance==SPI2)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a1f      	ldr	r2, [pc, #124]	; (80018bc <HAL_SPI_MspInit+0x10c>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d132      	bne.n	80018a8 <HAL_SPI_MspInit+0xf8>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001842:	4b1c      	ldr	r3, [pc, #112]	; (80018b4 <HAL_SPI_MspInit+0x104>)
 8001844:	69da      	ldr	r2, [r3, #28]
 8001846:	4b1b      	ldr	r3, [pc, #108]	; (80018b4 <HAL_SPI_MspInit+0x104>)
 8001848:	2180      	movs	r1, #128	; 0x80
 800184a:	01c9      	lsls	r1, r1, #7
 800184c:	430a      	orrs	r2, r1
 800184e:	61da      	str	r2, [r3, #28]
 8001850:	4b18      	ldr	r3, [pc, #96]	; (80018b4 <HAL_SPI_MspInit+0x104>)
 8001852:	69da      	ldr	r2, [r3, #28]
 8001854:	2380      	movs	r3, #128	; 0x80
 8001856:	01db      	lsls	r3, r3, #7
 8001858:	4013      	ands	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800185e:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <HAL_SPI_MspInit+0x104>)
 8001860:	695a      	ldr	r2, [r3, #20]
 8001862:	4b14      	ldr	r3, [pc, #80]	; (80018b4 <HAL_SPI_MspInit+0x104>)
 8001864:	2180      	movs	r1, #128	; 0x80
 8001866:	02c9      	lsls	r1, r1, #11
 8001868:	430a      	orrs	r2, r1
 800186a:	615a      	str	r2, [r3, #20]
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <HAL_SPI_MspInit+0x104>)
 800186e:	695a      	ldr	r2, [r3, #20]
 8001870:	2380      	movs	r3, #128	; 0x80
 8001872:	02db      	lsls	r3, r3, #11
 8001874:	4013      	ands	r3, r2
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800187a:	211c      	movs	r1, #28
 800187c:	187b      	adds	r3, r7, r1
 800187e:	22c0      	movs	r2, #192	; 0xc0
 8001880:	01d2      	lsls	r2, r2, #7
 8001882:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001884:	187b      	adds	r3, r7, r1
 8001886:	2202      	movs	r2, #2
 8001888:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	187b      	adds	r3, r7, r1
 800188c:	2200      	movs	r2, #0
 800188e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001890:	187b      	adds	r3, r7, r1
 8001892:	2203      	movs	r2, #3
 8001894:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8001896:	187b      	adds	r3, r7, r1
 8001898:	2200      	movs	r2, #0
 800189a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800189c:	187b      	adds	r3, r7, r1
 800189e:	4a06      	ldr	r2, [pc, #24]	; (80018b8 <HAL_SPI_MspInit+0x108>)
 80018a0:	0019      	movs	r1, r3
 80018a2:	0010      	movs	r0, r2
 80018a4:	f001 f920 	bl	8002ae8 <HAL_GPIO_Init>
}
 80018a8:	46c0      	nop			; (mov r8, r8)
 80018aa:	46bd      	mov	sp, r7
 80018ac:	b00d      	add	sp, #52	; 0x34
 80018ae:	bd90      	pop	{r4, r7, pc}
 80018b0:	40013000 	.word	0x40013000
 80018b4:	40021000 	.word	0x40021000
 80018b8:	48000400 	.word	0x48000400
 80018bc:	40003800 	.word	0x40003800

080018c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a1f      	ldr	r2, [pc, #124]	; (800194c <HAL_TIM_Base_MspInit+0x8c>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d11e      	bne.n	8001910 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018d2:	4b1f      	ldr	r3, [pc, #124]	; (8001950 <HAL_TIM_Base_MspInit+0x90>)
 80018d4:	699a      	ldr	r2, [r3, #24]
 80018d6:	4b1e      	ldr	r3, [pc, #120]	; (8001950 <HAL_TIM_Base_MspInit+0x90>)
 80018d8:	2180      	movs	r1, #128	; 0x80
 80018da:	0109      	lsls	r1, r1, #4
 80018dc:	430a      	orrs	r2, r1
 80018de:	619a      	str	r2, [r3, #24]
 80018e0:	4b1b      	ldr	r3, [pc, #108]	; (8001950 <HAL_TIM_Base_MspInit+0x90>)
 80018e2:	699a      	ldr	r2, [r3, #24]
 80018e4:	2380      	movs	r3, #128	; 0x80
 80018e6:	011b      	lsls	r3, r3, #4
 80018e8:	4013      	ands	r3, r2
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 1, 0);
 80018ee:	2200      	movs	r2, #0
 80018f0:	2101      	movs	r1, #1
 80018f2:	200d      	movs	r0, #13
 80018f4:	f000 fe16 	bl	8002524 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80018f8:	200d      	movs	r0, #13
 80018fa:	f000 fe28 	bl	800254e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 80018fe:	2200      	movs	r2, #0
 8001900:	2101      	movs	r1, #1
 8001902:	200e      	movs	r0, #14
 8001904:	f000 fe0e 	bl	8002524 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001908:	200e      	movs	r0, #14
 800190a:	f000 fe20 	bl	800254e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800190e:	e019      	b.n	8001944 <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM2)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	2380      	movs	r3, #128	; 0x80
 8001916:	05db      	lsls	r3, r3, #23
 8001918:	429a      	cmp	r2, r3
 800191a:	d113      	bne.n	8001944 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800191c:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <HAL_TIM_Base_MspInit+0x90>)
 800191e:	69da      	ldr	r2, [r3, #28]
 8001920:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <HAL_TIM_Base_MspInit+0x90>)
 8001922:	2101      	movs	r1, #1
 8001924:	430a      	orrs	r2, r1
 8001926:	61da      	str	r2, [r3, #28]
 8001928:	4b09      	ldr	r3, [pc, #36]	; (8001950 <HAL_TIM_Base_MspInit+0x90>)
 800192a:	69db      	ldr	r3, [r3, #28]
 800192c:	2201      	movs	r2, #1
 800192e:	4013      	ands	r3, r2
 8001930:	60bb      	str	r3, [r7, #8]
 8001932:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001934:	2200      	movs	r2, #0
 8001936:	2101      	movs	r1, #1
 8001938:	200f      	movs	r0, #15
 800193a:	f000 fdf3 	bl	8002524 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800193e:	200f      	movs	r0, #15
 8001940:	f000 fe05 	bl	800254e <HAL_NVIC_EnableIRQ>
}
 8001944:	46c0      	nop			; (mov r8, r8)
 8001946:	46bd      	mov	sp, r7
 8001948:	b004      	add	sp, #16
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40012c00 	.word	0x40012c00
 8001950:	40021000 	.word	0x40021000

08001954 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001954:	b590      	push	{r4, r7, lr}
 8001956:	b08b      	sub	sp, #44	; 0x2c
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195c:	2414      	movs	r4, #20
 800195e:	193b      	adds	r3, r7, r4
 8001960:	0018      	movs	r0, r3
 8001962:	2314      	movs	r3, #20
 8001964:	001a      	movs	r2, r3
 8001966:	2100      	movs	r1, #0
 8001968:	f004 fe7e 	bl	8006668 <memset>
  if(huart->Instance==USART1)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a21      	ldr	r2, [pc, #132]	; (80019f8 <HAL_UART_MspInit+0xa4>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d13b      	bne.n	80019ee <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001976:	4b21      	ldr	r3, [pc, #132]	; (80019fc <HAL_UART_MspInit+0xa8>)
 8001978:	699a      	ldr	r2, [r3, #24]
 800197a:	4b20      	ldr	r3, [pc, #128]	; (80019fc <HAL_UART_MspInit+0xa8>)
 800197c:	2180      	movs	r1, #128	; 0x80
 800197e:	01c9      	lsls	r1, r1, #7
 8001980:	430a      	orrs	r2, r1
 8001982:	619a      	str	r2, [r3, #24]
 8001984:	4b1d      	ldr	r3, [pc, #116]	; (80019fc <HAL_UART_MspInit+0xa8>)
 8001986:	699a      	ldr	r2, [r3, #24]
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	01db      	lsls	r3, r3, #7
 800198c:	4013      	ands	r3, r2
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001992:	4b1a      	ldr	r3, [pc, #104]	; (80019fc <HAL_UART_MspInit+0xa8>)
 8001994:	695a      	ldr	r2, [r3, #20]
 8001996:	4b19      	ldr	r3, [pc, #100]	; (80019fc <HAL_UART_MspInit+0xa8>)
 8001998:	2180      	movs	r1, #128	; 0x80
 800199a:	0289      	lsls	r1, r1, #10
 800199c:	430a      	orrs	r2, r1
 800199e:	615a      	str	r2, [r3, #20]
 80019a0:	4b16      	ldr	r3, [pc, #88]	; (80019fc <HAL_UART_MspInit+0xa8>)
 80019a2:	695a      	ldr	r2, [r3, #20]
 80019a4:	2380      	movs	r3, #128	; 0x80
 80019a6:	029b      	lsls	r3, r3, #10
 80019a8:	4013      	ands	r3, r2
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019ae:	193b      	adds	r3, r7, r4
 80019b0:	22c0      	movs	r2, #192	; 0xc0
 80019b2:	00d2      	lsls	r2, r2, #3
 80019b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b6:	0021      	movs	r1, r4
 80019b8:	187b      	adds	r3, r7, r1
 80019ba:	2202      	movs	r2, #2
 80019bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	187b      	adds	r3, r7, r1
 80019c0:	2200      	movs	r2, #0
 80019c2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019c4:	187b      	adds	r3, r7, r1
 80019c6:	2203      	movs	r2, #3
 80019c8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80019ca:	187b      	adds	r3, r7, r1
 80019cc:	2201      	movs	r2, #1
 80019ce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d0:	187a      	adds	r2, r7, r1
 80019d2:	2390      	movs	r3, #144	; 0x90
 80019d4:	05db      	lsls	r3, r3, #23
 80019d6:	0011      	movs	r1, r2
 80019d8:	0018      	movs	r0, r3
 80019da:	f001 f885 	bl	8002ae8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80019de:	2200      	movs	r2, #0
 80019e0:	2100      	movs	r1, #0
 80019e2:	201b      	movs	r0, #27
 80019e4:	f000 fd9e 	bl	8002524 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019e8:	201b      	movs	r0, #27
 80019ea:	f000 fdb0 	bl	800254e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80019ee:	46c0      	nop			; (mov r8, r8)
 80019f0:	46bd      	mov	sp, r7
 80019f2:	b00b      	add	sp, #44	; 0x2c
 80019f4:	bd90      	pop	{r4, r7, pc}
 80019f6:	46c0      	nop			; (mov r8, r8)
 80019f8:	40013800 	.word	0x40013800
 80019fc:	40021000 	.word	0x40021000

08001a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a04:	e7fe      	b.n	8001a04 <NMI_Handler+0x4>

08001a06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a0a:	e7fe      	b.n	8001a0a <HardFault_Handler+0x4>

08001a0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001a10:	46c0      	nop			; (mov r8, r8)
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a1a:	46c0      	nop			; (mov r8, r8)
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a24:	f000 f8b8 	bl	8001b98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a28:	46c0      	nop			; (mov r8, r8)
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001a34:	4b03      	ldr	r3, [pc, #12]	; (8001a44 <DMA1_Channel1_IRQHandler+0x14>)
 8001a36:	0018      	movs	r0, r3
 8001a38:	f000 ff6b 	bl	8002912 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a3c:	46c0      	nop			; (mov r8, r8)
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	46c0      	nop			; (mov r8, r8)
 8001a44:	20000084 	.word	0x20000084

08001a48 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a4c:	4b03      	ldr	r3, [pc, #12]	; (8001a5c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8001a4e:	0018      	movs	r0, r3
 8001a50:	f002 fe94 	bl	800477c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001a54:	46c0      	nop			; (mov r8, r8)
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	46c0      	nop			; (mov r8, r8)
 8001a5c:	200001f0 	.word	0x200001f0

08001a60 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a64:	4b03      	ldr	r3, [pc, #12]	; (8001a74 <TIM1_CC_IRQHandler+0x14>)
 8001a66:	0018      	movs	r0, r3
 8001a68:	f002 fe88 	bl	800477c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001a6c:	46c0      	nop			; (mov r8, r8)
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	46c0      	nop			; (mov r8, r8)
 8001a74:	200001f0 	.word	0x200001f0

08001a78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a7c:	4b03      	ldr	r3, [pc, #12]	; (8001a8c <TIM2_IRQHandler+0x14>)
 8001a7e:	0018      	movs	r0, r3
 8001a80:	f002 fe7c 	bl	800477c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a84:	46c0      	nop			; (mov r8, r8)
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	46c0      	nop			; (mov r8, r8)
 8001a8c:	20000238 	.word	0x20000238

08001a90 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a94:	4b03      	ldr	r3, [pc, #12]	; (8001aa4 <USART1_IRQHandler+0x14>)
 8001a96:	0018      	movs	r0, r3
 8001a98:	f003 fc62 	bl	8005360 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a9c:	46c0      	nop			; (mov r8, r8)
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	46c0      	nop			; (mov r8, r8)
 8001aa4:	20000280 	.word	0x20000280

08001aa8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001aac:	46c0      	nop			; (mov r8, r8)
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
	...

08001ab4 <Reset_Handler>:
 8001ab4:	480d      	ldr	r0, [pc, #52]	; (8001aec <LoopForever+0x2>)
 8001ab6:	4685      	mov	sp, r0
 8001ab8:	480d      	ldr	r0, [pc, #52]	; (8001af0 <LoopForever+0x6>)
 8001aba:	490e      	ldr	r1, [pc, #56]	; (8001af4 <LoopForever+0xa>)
 8001abc:	4a0e      	ldr	r2, [pc, #56]	; (8001af8 <LoopForever+0xe>)
 8001abe:	2300      	movs	r3, #0
 8001ac0:	e002      	b.n	8001ac8 <LoopCopyDataInit>

08001ac2 <CopyDataInit>:
 8001ac2:	58d4      	ldr	r4, [r2, r3]
 8001ac4:	50c4      	str	r4, [r0, r3]
 8001ac6:	3304      	adds	r3, #4

08001ac8 <LoopCopyDataInit>:
 8001ac8:	18c4      	adds	r4, r0, r3
 8001aca:	428c      	cmp	r4, r1
 8001acc:	d3f9      	bcc.n	8001ac2 <CopyDataInit>
 8001ace:	4a0b      	ldr	r2, [pc, #44]	; (8001afc <LoopForever+0x12>)
 8001ad0:	4c0b      	ldr	r4, [pc, #44]	; (8001b00 <LoopForever+0x16>)
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	e001      	b.n	8001ada <LoopFillZerobss>

08001ad6 <FillZerobss>:
 8001ad6:	6013      	str	r3, [r2, #0]
 8001ad8:	3204      	adds	r2, #4

08001ada <LoopFillZerobss>:
 8001ada:	42a2      	cmp	r2, r4
 8001adc:	d3fb      	bcc.n	8001ad6 <FillZerobss>
 8001ade:	f7ff ffe3 	bl	8001aa8 <SystemInit>
 8001ae2:	f004 fd9d 	bl	8006620 <__libc_init_array>
 8001ae6:	f7ff f82d 	bl	8000b44 <main>

08001aea <LoopForever>:
 8001aea:	e7fe      	b.n	8001aea <LoopForever>
 8001aec:	20002000 	.word	0x20002000
 8001af0:	20000000 	.word	0x20000000
 8001af4:	20000028 	.word	0x20000028
 8001af8:	080068b0 	.word	0x080068b0
 8001afc:	20000028 	.word	0x20000028
 8001b00:	200003e4 	.word	0x200003e4

08001b04 <ADC1_COMP_IRQHandler>:
 8001b04:	e7fe      	b.n	8001b04 <ADC1_COMP_IRQHandler>
	...

08001b08 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b0c:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <HAL_Init+0x24>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <HAL_Init+0x24>)
 8001b12:	2110      	movs	r1, #16
 8001b14:	430a      	orrs	r2, r1
 8001b16:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001b18:	2003      	movs	r0, #3
 8001b1a:	f000 f809 	bl	8001b30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b1e:	f7ff fcdf 	bl	80014e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	0018      	movs	r0, r3
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	46c0      	nop			; (mov r8, r8)
 8001b2c:	40022000 	.word	0x40022000

08001b30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b30:	b590      	push	{r4, r7, lr}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b38:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <HAL_InitTick+0x5c>)
 8001b3a:	681c      	ldr	r4, [r3, #0]
 8001b3c:	4b14      	ldr	r3, [pc, #80]	; (8001b90 <HAL_InitTick+0x60>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	0019      	movs	r1, r3
 8001b42:	23fa      	movs	r3, #250	; 0xfa
 8001b44:	0098      	lsls	r0, r3, #2
 8001b46:	f7fe fadf 	bl	8000108 <__udivsi3>
 8001b4a:	0003      	movs	r3, r0
 8001b4c:	0019      	movs	r1, r3
 8001b4e:	0020      	movs	r0, r4
 8001b50:	f7fe fada 	bl	8000108 <__udivsi3>
 8001b54:	0003      	movs	r3, r0
 8001b56:	0018      	movs	r0, r3
 8001b58:	f000 fd09 	bl	800256e <HAL_SYSTICK_Config>
 8001b5c:	1e03      	subs	r3, r0, #0
 8001b5e:	d001      	beq.n	8001b64 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e00f      	b.n	8001b84 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b03      	cmp	r3, #3
 8001b68:	d80b      	bhi.n	8001b82 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b6a:	6879      	ldr	r1, [r7, #4]
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	425b      	negs	r3, r3
 8001b70:	2200      	movs	r2, #0
 8001b72:	0018      	movs	r0, r3
 8001b74:	f000 fcd6 	bl	8002524 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b78:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <HAL_InitTick+0x64>)
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	e000      	b.n	8001b84 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
}
 8001b84:	0018      	movs	r0, r3
 8001b86:	46bd      	mov	sp, r7
 8001b88:	b003      	add	sp, #12
 8001b8a:	bd90      	pop	{r4, r7, pc}
 8001b8c:	2000001c 	.word	0x2000001c
 8001b90:	20000024 	.word	0x20000024
 8001b94:	20000020 	.word	0x20000020

08001b98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b9c:	4b05      	ldr	r3, [pc, #20]	; (8001bb4 <HAL_IncTick+0x1c>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	001a      	movs	r2, r3
 8001ba2:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <HAL_IncTick+0x20>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	18d2      	adds	r2, r2, r3
 8001ba8:	4b03      	ldr	r3, [pc, #12]	; (8001bb8 <HAL_IncTick+0x20>)
 8001baa:	601a      	str	r2, [r3, #0]
}
 8001bac:	46c0      	nop			; (mov r8, r8)
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	46c0      	nop			; (mov r8, r8)
 8001bb4:	20000024 	.word	0x20000024
 8001bb8:	200003e0 	.word	0x200003e0

08001bbc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc0:	4b02      	ldr	r3, [pc, #8]	; (8001bcc <HAL_GetTick+0x10>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
}
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	46c0      	nop			; (mov r8, r8)
 8001bcc:	200003e0 	.word	0x200003e0

08001bd0 <HAL_SuspendTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)

{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8001bd4:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <HAL_SuspendTick+0x18>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	4b03      	ldr	r3, [pc, #12]	; (8001be8 <HAL_SuspendTick+0x18>)
 8001bda:	2102      	movs	r1, #2
 8001bdc:	438a      	bics	r2, r1
 8001bde:	601a      	str	r2, [r3, #0]
}
 8001be0:	46c0      	nop			; (mov r8, r8)
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	46c0      	nop			; (mov r8, r8)
 8001be8:	e000e010 	.word	0xe000e010

08001bec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bf4:	230f      	movs	r3, #15
 8001bf6:	18fb      	adds	r3, r7, r3
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e125      	b.n	8001e56 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d10a      	bne.n	8001c28 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2234      	movs	r2, #52	; 0x34
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	0018      	movs	r0, r3
 8001c24:	f7ff fc80 	bl	8001528 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c2c:	2210      	movs	r2, #16
 8001c2e:	4013      	ands	r3, r2
 8001c30:	d000      	beq.n	8001c34 <HAL_ADC_Init+0x48>
 8001c32:	e103      	b.n	8001e3c <HAL_ADC_Init+0x250>
 8001c34:	230f      	movs	r3, #15
 8001c36:	18fb      	adds	r3, r7, r3
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d000      	beq.n	8001c40 <HAL_ADC_Init+0x54>
 8001c3e:	e0fd      	b.n	8001e3c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	2204      	movs	r2, #4
 8001c48:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001c4a:	d000      	beq.n	8001c4e <HAL_ADC_Init+0x62>
 8001c4c:	e0f6      	b.n	8001e3c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c52:	4a83      	ldr	r2, [pc, #524]	; (8001e60 <HAL_ADC_Init+0x274>)
 8001c54:	4013      	ands	r3, r2
 8001c56:	2202      	movs	r2, #2
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2203      	movs	r2, #3
 8001c66:	4013      	ands	r3, r2
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d112      	bne.n	8001c92 <HAL_ADC_Init+0xa6>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2201      	movs	r2, #1
 8001c74:	4013      	ands	r3, r2
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d009      	beq.n	8001c8e <HAL_ADC_Init+0xa2>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68da      	ldr	r2, [r3, #12]
 8001c80:	2380      	movs	r3, #128	; 0x80
 8001c82:	021b      	lsls	r3, r3, #8
 8001c84:	401a      	ands	r2, r3
 8001c86:	2380      	movs	r3, #128	; 0x80
 8001c88:	021b      	lsls	r3, r3, #8
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d101      	bne.n	8001c92 <HAL_ADC_Init+0xa6>
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e000      	b.n	8001c94 <HAL_ADC_Init+0xa8>
 8001c92:	2300      	movs	r3, #0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d116      	bne.n	8001cc6 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	2218      	movs	r2, #24
 8001ca0:	4393      	bics	r3, r2
 8001ca2:	0019      	movs	r1, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	430a      	orrs	r2, r1
 8001cae:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	0899      	lsrs	r1, r3, #2
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68da      	ldr	r2, [r3, #12]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4964      	ldr	r1, [pc, #400]	; (8001e64 <HAL_ADC_Init+0x278>)
 8001cd2:	400a      	ands	r2, r1
 8001cd4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	7e1b      	ldrb	r3, [r3, #24]
 8001cda:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	7e5b      	ldrb	r3, [r3, #25]
 8001ce0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ce2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	7e9b      	ldrb	r3, [r3, #26]
 8001ce8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001cea:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d002      	beq.n	8001cfa <HAL_ADC_Init+0x10e>
 8001cf4:	2380      	movs	r3, #128	; 0x80
 8001cf6:	015b      	lsls	r3, r3, #5
 8001cf8:	e000      	b.n	8001cfc <HAL_ADC_Init+0x110>
 8001cfa:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001cfc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001d02:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d101      	bne.n	8001d10 <HAL_ADC_Init+0x124>
 8001d0c:	2304      	movs	r3, #4
 8001d0e:	e000      	b.n	8001d12 <HAL_ADC_Init+0x126>
 8001d10:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001d12:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2124      	movs	r1, #36	; 0x24
 8001d18:	5c5b      	ldrb	r3, [r3, r1]
 8001d1a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001d1c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	7edb      	ldrb	r3, [r3, #27]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d115      	bne.n	8001d58 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	7e9b      	ldrb	r3, [r3, #26]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d105      	bne.n	8001d40 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	2280      	movs	r2, #128	; 0x80
 8001d38:	0252      	lsls	r2, r2, #9
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	60bb      	str	r3, [r7, #8]
 8001d3e:	e00b      	b.n	8001d58 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d44:	2220      	movs	r2, #32
 8001d46:	431a      	orrs	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d50:	2201      	movs	r2, #1
 8001d52:	431a      	orrs	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	69da      	ldr	r2, [r3, #28]
 8001d5c:	23c2      	movs	r3, #194	; 0xc2
 8001d5e:	33ff      	adds	r3, #255	; 0xff
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d007      	beq.n	8001d74 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68d9      	ldr	r1, [r3, #12]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68ba      	ldr	r2, [r7, #8]
 8001d80:	430a      	orrs	r2, r1
 8001d82:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d88:	2380      	movs	r3, #128	; 0x80
 8001d8a:	055b      	lsls	r3, r3, #21
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d01b      	beq.n	8001dc8 <HAL_ADC_Init+0x1dc>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d017      	beq.n	8001dc8 <HAL_ADC_Init+0x1dc>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d013      	beq.n	8001dc8 <HAL_ADC_Init+0x1dc>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da4:	2b03      	cmp	r3, #3
 8001da6:	d00f      	beq.n	8001dc8 <HAL_ADC_Init+0x1dc>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dac:	2b04      	cmp	r3, #4
 8001dae:	d00b      	beq.n	8001dc8 <HAL_ADC_Init+0x1dc>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db4:	2b05      	cmp	r3, #5
 8001db6:	d007      	beq.n	8001dc8 <HAL_ADC_Init+0x1dc>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dbc:	2b06      	cmp	r3, #6
 8001dbe:	d003      	beq.n	8001dc8 <HAL_ADC_Init+0x1dc>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc4:	2b07      	cmp	r3, #7
 8001dc6:	d112      	bne.n	8001dee <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	695a      	ldr	r2, [r3, #20]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2107      	movs	r1, #7
 8001dd4:	438a      	bics	r2, r1
 8001dd6:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6959      	ldr	r1, [r3, #20]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de2:	2207      	movs	r2, #7
 8001de4:	401a      	ands	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	430a      	orrs	r2, r1
 8001dec:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	4a1c      	ldr	r2, [pc, #112]	; (8001e68 <HAL_ADC_Init+0x27c>)
 8001df6:	4013      	ands	r3, r2
 8001df8:	68ba      	ldr	r2, [r7, #8]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d10b      	bne.n	8001e16 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e08:	2203      	movs	r2, #3
 8001e0a:	4393      	bics	r3, r2
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001e14:	e01c      	b.n	8001e50 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e1a:	2212      	movs	r2, #18
 8001e1c:	4393      	bics	r3, r2
 8001e1e:	2210      	movs	r2, #16
 8001e20:	431a      	orrs	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001e32:	230f      	movs	r3, #15
 8001e34:	18fb      	adds	r3, r7, r3
 8001e36:	2201      	movs	r2, #1
 8001e38:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001e3a:	e009      	b.n	8001e50 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e40:	2210      	movs	r2, #16
 8001e42:	431a      	orrs	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001e48:	230f      	movs	r3, #15
 8001e4a:	18fb      	adds	r3, r7, r3
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e50:	230f      	movs	r3, #15
 8001e52:	18fb      	adds	r3, r7, r3
 8001e54:	781b      	ldrb	r3, [r3, #0]
}
 8001e56:	0018      	movs	r0, r3
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	b004      	add	sp, #16
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	46c0      	nop			; (mov r8, r8)
 8001e60:	fffffefd 	.word	0xfffffefd
 8001e64:	fffe0219 	.word	0xfffe0219
 8001e68:	833fffe7 	.word	0x833fffe7

08001e6c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001e6c:	b590      	push	{r4, r7, lr}
 8001e6e:	b087      	sub	sp, #28
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e78:	2317      	movs	r3, #23
 8001e7a:	18fb      	adds	r3, r7, r3
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	2204      	movs	r2, #4
 8001e88:	4013      	ands	r3, r2
 8001e8a:	d15e      	bne.n	8001f4a <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2234      	movs	r2, #52	; 0x34
 8001e90:	5c9b      	ldrb	r3, [r3, r2]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d101      	bne.n	8001e9a <HAL_ADC_Start_DMA+0x2e>
 8001e96:	2302      	movs	r3, #2
 8001e98:	e05e      	b.n	8001f58 <HAL_ADC_Start_DMA+0xec>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2234      	movs	r2, #52	; 0x34
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	7e5b      	ldrb	r3, [r3, #25]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d007      	beq.n	8001eba <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001eaa:	2317      	movs	r3, #23
 8001eac:	18fc      	adds	r4, r7, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	0018      	movs	r0, r3
 8001eb2:	f000 f983 	bl	80021bc <ADC_Enable>
 8001eb6:	0003      	movs	r3, r0
 8001eb8:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001eba:	2317      	movs	r3, #23
 8001ebc:	18fb      	adds	r3, r7, r3
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d146      	bne.n	8001f52 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec8:	4a25      	ldr	r2, [pc, #148]	; (8001f60 <HAL_ADC_Start_DMA+0xf4>)
 8001eca:	4013      	ands	r3, r2
 8001ecc:	2280      	movs	r2, #128	; 0x80
 8001ece:	0052      	lsls	r2, r2, #1
 8001ed0:	431a      	orrs	r2, r3
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2234      	movs	r2, #52	; 0x34
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee8:	4a1e      	ldr	r2, [pc, #120]	; (8001f64 <HAL_ADC_Start_DMA+0xf8>)
 8001eea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef0:	4a1d      	ldr	r2, [pc, #116]	; (8001f68 <HAL_ADC_Start_DMA+0xfc>)
 8001ef2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef8:	4a1c      	ldr	r2, [pc, #112]	; (8001f6c <HAL_ADC_Start_DMA+0x100>)
 8001efa:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	221c      	movs	r2, #28
 8001f02:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	685a      	ldr	r2, [r3, #4]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2110      	movs	r1, #16
 8001f10:	430a      	orrs	r2, r1
 8001f12:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68da      	ldr	r2, [r3, #12]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2101      	movs	r1, #1
 8001f20:	430a      	orrs	r2, r1
 8001f22:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	3340      	adds	r3, #64	; 0x40
 8001f2e:	0019      	movs	r1, r3
 8001f30:	68ba      	ldr	r2, [r7, #8]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f000 fc0a 	bl	800274c <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689a      	ldr	r2, [r3, #8]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2104      	movs	r1, #4
 8001f44:	430a      	orrs	r2, r1
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	e003      	b.n	8001f52 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f4a:	2317      	movs	r3, #23
 8001f4c:	18fb      	adds	r3, r7, r3
 8001f4e:	2202      	movs	r2, #2
 8001f50:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001f52:	2317      	movs	r3, #23
 8001f54:	18fb      	adds	r3, r7, r3
 8001f56:	781b      	ldrb	r3, [r3, #0]
}
 8001f58:	0018      	movs	r0, r3
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	b007      	add	sp, #28
 8001f5e:	bd90      	pop	{r4, r7, pc}
 8001f60:	fffff0fe 	.word	0xfffff0fe
 8001f64:	080022c5 	.word	0x080022c5
 8001f68:	08002379 	.word	0x08002379
 8001f6c:	08002397 	.word	0x08002397

08001f70 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001f78:	46c0      	nop			; (mov r8, r8)
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	b002      	add	sp, #8
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001f88:	46c0      	nop			; (mov r8, r8)
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	b002      	add	sp, #8
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001f98:	46c0      	nop			; (mov r8, r8)
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	b002      	add	sp, #8
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001faa:	230f      	movs	r3, #15
 8001fac:	18fb      	adds	r3, r7, r3
 8001fae:	2200      	movs	r2, #0
 8001fb0:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fba:	2380      	movs	r3, #128	; 0x80
 8001fbc:	055b      	lsls	r3, r3, #21
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d011      	beq.n	8001fe6 <HAL_ADC_ConfigChannel+0x46>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d00d      	beq.n	8001fe6 <HAL_ADC_ConfigChannel+0x46>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d009      	beq.n	8001fe6 <HAL_ADC_ConfigChannel+0x46>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd6:	2b03      	cmp	r3, #3
 8001fd8:	d005      	beq.n	8001fe6 <HAL_ADC_ConfigChannel+0x46>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fde:	2b04      	cmp	r3, #4
 8001fe0:	d001      	beq.n	8001fe6 <HAL_ADC_ConfigChannel+0x46>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2234      	movs	r2, #52	; 0x34
 8001fea:	5c9b      	ldrb	r3, [r3, r2]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d101      	bne.n	8001ff4 <HAL_ADC_ConfigChannel+0x54>
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	e0d0      	b.n	8002196 <HAL_ADC_ConfigChannel+0x1f6>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2234      	movs	r2, #52	; 0x34
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	2204      	movs	r2, #4
 8002004:	4013      	ands	r3, r2
 8002006:	d000      	beq.n	800200a <HAL_ADC_ConfigChannel+0x6a>
 8002008:	e0b4      	b.n	8002174 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	4a64      	ldr	r2, [pc, #400]	; (80021a0 <HAL_ADC_ConfigChannel+0x200>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d100      	bne.n	8002016 <HAL_ADC_ConfigChannel+0x76>
 8002014:	e082      	b.n	800211c <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2201      	movs	r2, #1
 8002022:	409a      	lsls	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	430a      	orrs	r2, r1
 800202a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002030:	2380      	movs	r3, #128	; 0x80
 8002032:	055b      	lsls	r3, r3, #21
 8002034:	429a      	cmp	r2, r3
 8002036:	d037      	beq.n	80020a8 <HAL_ADC_ConfigChannel+0x108>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203c:	2b01      	cmp	r3, #1
 800203e:	d033      	beq.n	80020a8 <HAL_ADC_ConfigChannel+0x108>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002044:	2b02      	cmp	r3, #2
 8002046:	d02f      	beq.n	80020a8 <HAL_ADC_ConfigChannel+0x108>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204c:	2b03      	cmp	r3, #3
 800204e:	d02b      	beq.n	80020a8 <HAL_ADC_ConfigChannel+0x108>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002054:	2b04      	cmp	r3, #4
 8002056:	d027      	beq.n	80020a8 <HAL_ADC_ConfigChannel+0x108>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205c:	2b05      	cmp	r3, #5
 800205e:	d023      	beq.n	80020a8 <HAL_ADC_ConfigChannel+0x108>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002064:	2b06      	cmp	r3, #6
 8002066:	d01f      	beq.n	80020a8 <HAL_ADC_ConfigChannel+0x108>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206c:	2b07      	cmp	r3, #7
 800206e:	d01b      	beq.n	80020a8 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	2107      	movs	r1, #7
 800207c:	400b      	ands	r3, r1
 800207e:	429a      	cmp	r2, r3
 8002080:	d012      	beq.n	80020a8 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	695a      	ldr	r2, [r3, #20]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2107      	movs	r1, #7
 800208e:	438a      	bics	r2, r1
 8002090:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6959      	ldr	r1, [r3, #20]
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	2207      	movs	r2, #7
 800209e:	401a      	ands	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	430a      	orrs	r2, r1
 80020a6:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2b10      	cmp	r3, #16
 80020ae:	d007      	beq.n	80020c0 <HAL_ADC_ConfigChannel+0x120>
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2b11      	cmp	r3, #17
 80020b6:	d003      	beq.n	80020c0 <HAL_ADC_ConfigChannel+0x120>
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2b12      	cmp	r3, #18
 80020be:	d163      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80020c0:	4b38      	ldr	r3, [pc, #224]	; (80021a4 <HAL_ADC_ConfigChannel+0x204>)
 80020c2:	6819      	ldr	r1, [r3, #0]
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2b10      	cmp	r3, #16
 80020ca:	d009      	beq.n	80020e0 <HAL_ADC_ConfigChannel+0x140>
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b11      	cmp	r3, #17
 80020d2:	d102      	bne.n	80020da <HAL_ADC_ConfigChannel+0x13a>
 80020d4:	2380      	movs	r3, #128	; 0x80
 80020d6:	03db      	lsls	r3, r3, #15
 80020d8:	e004      	b.n	80020e4 <HAL_ADC_ConfigChannel+0x144>
 80020da:	2380      	movs	r3, #128	; 0x80
 80020dc:	045b      	lsls	r3, r3, #17
 80020de:	e001      	b.n	80020e4 <HAL_ADC_ConfigChannel+0x144>
 80020e0:	2380      	movs	r3, #128	; 0x80
 80020e2:	041b      	lsls	r3, r3, #16
 80020e4:	4a2f      	ldr	r2, [pc, #188]	; (80021a4 <HAL_ADC_ConfigChannel+0x204>)
 80020e6:	430b      	orrs	r3, r1
 80020e8:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2b10      	cmp	r3, #16
 80020f0:	d14a      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020f2:	4b2d      	ldr	r3, [pc, #180]	; (80021a8 <HAL_ADC_ConfigChannel+0x208>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	492d      	ldr	r1, [pc, #180]	; (80021ac <HAL_ADC_ConfigChannel+0x20c>)
 80020f8:	0018      	movs	r0, r3
 80020fa:	f7fe f805 	bl	8000108 <__udivsi3>
 80020fe:	0003      	movs	r3, r0
 8002100:	001a      	movs	r2, r3
 8002102:	0013      	movs	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	189b      	adds	r3, r3, r2
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800210c:	e002      	b.n	8002114 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	3b01      	subs	r3, #1
 8002112:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1f9      	bne.n	800210e <HAL_ADC_ConfigChannel+0x16e>
 800211a:	e035      	b.n	8002188 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2101      	movs	r1, #1
 8002128:	4099      	lsls	r1, r3
 800212a:	000b      	movs	r3, r1
 800212c:	43d9      	mvns	r1, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	400a      	ands	r2, r1
 8002134:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2b10      	cmp	r3, #16
 800213c:	d007      	beq.n	800214e <HAL_ADC_ConfigChannel+0x1ae>
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2b11      	cmp	r3, #17
 8002144:	d003      	beq.n	800214e <HAL_ADC_ConfigChannel+0x1ae>
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2b12      	cmp	r3, #18
 800214c:	d11c      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800214e:	4b15      	ldr	r3, [pc, #84]	; (80021a4 <HAL_ADC_ConfigChannel+0x204>)
 8002150:	6819      	ldr	r1, [r3, #0]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2b10      	cmp	r3, #16
 8002158:	d007      	beq.n	800216a <HAL_ADC_ConfigChannel+0x1ca>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2b11      	cmp	r3, #17
 8002160:	d101      	bne.n	8002166 <HAL_ADC_ConfigChannel+0x1c6>
 8002162:	4b13      	ldr	r3, [pc, #76]	; (80021b0 <HAL_ADC_ConfigChannel+0x210>)
 8002164:	e002      	b.n	800216c <HAL_ADC_ConfigChannel+0x1cc>
 8002166:	4b13      	ldr	r3, [pc, #76]	; (80021b4 <HAL_ADC_ConfigChannel+0x214>)
 8002168:	e000      	b.n	800216c <HAL_ADC_ConfigChannel+0x1cc>
 800216a:	4b13      	ldr	r3, [pc, #76]	; (80021b8 <HAL_ADC_ConfigChannel+0x218>)
 800216c:	4a0d      	ldr	r2, [pc, #52]	; (80021a4 <HAL_ADC_ConfigChannel+0x204>)
 800216e:	400b      	ands	r3, r1
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	e009      	b.n	8002188 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002178:	2220      	movs	r2, #32
 800217a:	431a      	orrs	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002180:	230f      	movs	r3, #15
 8002182:	18fb      	adds	r3, r7, r3
 8002184:	2201      	movs	r2, #1
 8002186:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2234      	movs	r2, #52	; 0x34
 800218c:	2100      	movs	r1, #0
 800218e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002190:	230f      	movs	r3, #15
 8002192:	18fb      	adds	r3, r7, r3
 8002194:	781b      	ldrb	r3, [r3, #0]
}
 8002196:	0018      	movs	r0, r3
 8002198:	46bd      	mov	sp, r7
 800219a:	b004      	add	sp, #16
 800219c:	bd80      	pop	{r7, pc}
 800219e:	46c0      	nop			; (mov r8, r8)
 80021a0:	00001001 	.word	0x00001001
 80021a4:	40012708 	.word	0x40012708
 80021a8:	2000001c 	.word	0x2000001c
 80021ac:	000f4240 	.word	0x000f4240
 80021b0:	ffbfffff 	.word	0xffbfffff
 80021b4:	feffffff 	.word	0xfeffffff
 80021b8:	ff7fffff 	.word	0xff7fffff

080021bc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80021c8:	2300      	movs	r3, #0
 80021ca:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	2203      	movs	r2, #3
 80021d4:	4013      	ands	r3, r2
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d112      	bne.n	8002200 <ADC_Enable+0x44>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2201      	movs	r2, #1
 80021e2:	4013      	ands	r3, r2
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d009      	beq.n	80021fc <ADC_Enable+0x40>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68da      	ldr	r2, [r3, #12]
 80021ee:	2380      	movs	r3, #128	; 0x80
 80021f0:	021b      	lsls	r3, r3, #8
 80021f2:	401a      	ands	r2, r3
 80021f4:	2380      	movs	r3, #128	; 0x80
 80021f6:	021b      	lsls	r3, r3, #8
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d101      	bne.n	8002200 <ADC_Enable+0x44>
 80021fc:	2301      	movs	r3, #1
 80021fe:	e000      	b.n	8002202 <ADC_Enable+0x46>
 8002200:	2300      	movs	r3, #0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d152      	bne.n	80022ac <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	4a2a      	ldr	r2, [pc, #168]	; (80022b8 <ADC_Enable+0xfc>)
 800220e:	4013      	ands	r3, r2
 8002210:	d00d      	beq.n	800222e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002216:	2210      	movs	r2, #16
 8002218:	431a      	orrs	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002222:	2201      	movs	r2, #1
 8002224:	431a      	orrs	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e03f      	b.n	80022ae <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2101      	movs	r1, #1
 800223a:	430a      	orrs	r2, r1
 800223c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800223e:	4b1f      	ldr	r3, [pc, #124]	; (80022bc <ADC_Enable+0x100>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	491f      	ldr	r1, [pc, #124]	; (80022c0 <ADC_Enable+0x104>)
 8002244:	0018      	movs	r0, r3
 8002246:	f7fd ff5f 	bl	8000108 <__udivsi3>
 800224a:	0003      	movs	r3, r0
 800224c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800224e:	e002      	b.n	8002256 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	3b01      	subs	r3, #1
 8002254:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1f9      	bne.n	8002250 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 800225c:	f7ff fcae 	bl	8001bbc <HAL_GetTick>
 8002260:	0003      	movs	r3, r0
 8002262:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002264:	e01b      	b.n	800229e <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002266:	f7ff fca9 	bl	8001bbc <HAL_GetTick>
 800226a:	0002      	movs	r2, r0
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d914      	bls.n	800229e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2201      	movs	r2, #1
 800227c:	4013      	ands	r3, r2
 800227e:	2b01      	cmp	r3, #1
 8002280:	d00d      	beq.n	800229e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002286:	2210      	movs	r2, #16
 8002288:	431a      	orrs	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002292:	2201      	movs	r2, #1
 8002294:	431a      	orrs	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e007      	b.n	80022ae <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2201      	movs	r2, #1
 80022a6:	4013      	ands	r3, r2
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d1dc      	bne.n	8002266 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	0018      	movs	r0, r3
 80022b0:	46bd      	mov	sp, r7
 80022b2:	b004      	add	sp, #16
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	46c0      	nop			; (mov r8, r8)
 80022b8:	80000017 	.word	0x80000017
 80022bc:	2000001c 	.word	0x2000001c
 80022c0:	000f4240 	.word	0x000f4240

080022c4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d6:	2250      	movs	r2, #80	; 0x50
 80022d8:	4013      	ands	r3, r2
 80022da:	d140      	bne.n	800235e <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e0:	2280      	movs	r2, #128	; 0x80
 80022e2:	0092      	lsls	r2, r2, #2
 80022e4:	431a      	orrs	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68da      	ldr	r2, [r3, #12]
 80022f0:	23c0      	movs	r3, #192	; 0xc0
 80022f2:	011b      	lsls	r3, r3, #4
 80022f4:	4013      	ands	r3, r2
 80022f6:	d12d      	bne.n	8002354 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d129      	bne.n	8002354 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2208      	movs	r2, #8
 8002308:	4013      	ands	r3, r2
 800230a:	2b08      	cmp	r3, #8
 800230c:	d122      	bne.n	8002354 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	2204      	movs	r2, #4
 8002316:	4013      	ands	r3, r2
 8002318:	d110      	bne.n	800233c <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	685a      	ldr	r2, [r3, #4]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	210c      	movs	r1, #12
 8002326:	438a      	bics	r2, r1
 8002328:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232e:	4a11      	ldr	r2, [pc, #68]	; (8002374 <ADC_DMAConvCplt+0xb0>)
 8002330:	4013      	ands	r3, r2
 8002332:	2201      	movs	r2, #1
 8002334:	431a      	orrs	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	639a      	str	r2, [r3, #56]	; 0x38
 800233a:	e00b      	b.n	8002354 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002340:	2220      	movs	r2, #32
 8002342:	431a      	orrs	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800234c:	2201      	movs	r2, #1
 800234e:	431a      	orrs	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	0018      	movs	r0, r3
 8002358:	f7ff fe0a 	bl	8001f70 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 800235c:	e005      	b.n	800236a <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	0010      	movs	r0, r2
 8002368:	4798      	blx	r3
}
 800236a:	46c0      	nop			; (mov r8, r8)
 800236c:	46bd      	mov	sp, r7
 800236e:	b004      	add	sp, #16
 8002370:	bd80      	pop	{r7, pc}
 8002372:	46c0      	nop			; (mov r8, r8)
 8002374:	fffffefe 	.word	0xfffffefe

08002378 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002384:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	0018      	movs	r0, r3
 800238a:	f7ff fdf9 	bl	8001f80 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800238e:	46c0      	nop			; (mov r8, r8)
 8002390:	46bd      	mov	sp, r7
 8002392:	b004      	add	sp, #16
 8002394:	bd80      	pop	{r7, pc}

08002396 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b084      	sub	sp, #16
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a8:	2240      	movs	r2, #64	; 0x40
 80023aa:	431a      	orrs	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b4:	2204      	movs	r2, #4
 80023b6:	431a      	orrs	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	0018      	movs	r0, r3
 80023c0:	f7ff fde6 	bl	8001f90 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023c4:	46c0      	nop			; (mov r8, r8)
 80023c6:	46bd      	mov	sp, r7
 80023c8:	b004      	add	sp, #16
 80023ca:	bd80      	pop	{r7, pc}

080023cc <__NVIC_EnableIRQ>:
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	0002      	movs	r2, r0
 80023d4:	1dfb      	adds	r3, r7, #7
 80023d6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80023d8:	1dfb      	adds	r3, r7, #7
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b7f      	cmp	r3, #127	; 0x7f
 80023de:	d809      	bhi.n	80023f4 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023e0:	1dfb      	adds	r3, r7, #7
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	001a      	movs	r2, r3
 80023e6:	231f      	movs	r3, #31
 80023e8:	401a      	ands	r2, r3
 80023ea:	4b04      	ldr	r3, [pc, #16]	; (80023fc <__NVIC_EnableIRQ+0x30>)
 80023ec:	2101      	movs	r1, #1
 80023ee:	4091      	lsls	r1, r2
 80023f0:	000a      	movs	r2, r1
 80023f2:	601a      	str	r2, [r3, #0]
}
 80023f4:	46c0      	nop			; (mov r8, r8)
 80023f6:	46bd      	mov	sp, r7
 80023f8:	b002      	add	sp, #8
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	e000e100 	.word	0xe000e100

08002400 <__NVIC_SetPriority>:
{
 8002400:	b590      	push	{r4, r7, lr}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	0002      	movs	r2, r0
 8002408:	6039      	str	r1, [r7, #0]
 800240a:	1dfb      	adds	r3, r7, #7
 800240c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800240e:	1dfb      	adds	r3, r7, #7
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b7f      	cmp	r3, #127	; 0x7f
 8002414:	d828      	bhi.n	8002468 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002416:	4a2f      	ldr	r2, [pc, #188]	; (80024d4 <__NVIC_SetPriority+0xd4>)
 8002418:	1dfb      	adds	r3, r7, #7
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	b25b      	sxtb	r3, r3
 800241e:	089b      	lsrs	r3, r3, #2
 8002420:	33c0      	adds	r3, #192	; 0xc0
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	589b      	ldr	r3, [r3, r2]
 8002426:	1dfa      	adds	r2, r7, #7
 8002428:	7812      	ldrb	r2, [r2, #0]
 800242a:	0011      	movs	r1, r2
 800242c:	2203      	movs	r2, #3
 800242e:	400a      	ands	r2, r1
 8002430:	00d2      	lsls	r2, r2, #3
 8002432:	21ff      	movs	r1, #255	; 0xff
 8002434:	4091      	lsls	r1, r2
 8002436:	000a      	movs	r2, r1
 8002438:	43d2      	mvns	r2, r2
 800243a:	401a      	ands	r2, r3
 800243c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	019b      	lsls	r3, r3, #6
 8002442:	22ff      	movs	r2, #255	; 0xff
 8002444:	401a      	ands	r2, r3
 8002446:	1dfb      	adds	r3, r7, #7
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	0018      	movs	r0, r3
 800244c:	2303      	movs	r3, #3
 800244e:	4003      	ands	r3, r0
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002454:	481f      	ldr	r0, [pc, #124]	; (80024d4 <__NVIC_SetPriority+0xd4>)
 8002456:	1dfb      	adds	r3, r7, #7
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	b25b      	sxtb	r3, r3
 800245c:	089b      	lsrs	r3, r3, #2
 800245e:	430a      	orrs	r2, r1
 8002460:	33c0      	adds	r3, #192	; 0xc0
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	501a      	str	r2, [r3, r0]
}
 8002466:	e031      	b.n	80024cc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002468:	4a1b      	ldr	r2, [pc, #108]	; (80024d8 <__NVIC_SetPriority+0xd8>)
 800246a:	1dfb      	adds	r3, r7, #7
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	0019      	movs	r1, r3
 8002470:	230f      	movs	r3, #15
 8002472:	400b      	ands	r3, r1
 8002474:	3b08      	subs	r3, #8
 8002476:	089b      	lsrs	r3, r3, #2
 8002478:	3306      	adds	r3, #6
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	18d3      	adds	r3, r2, r3
 800247e:	3304      	adds	r3, #4
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	1dfa      	adds	r2, r7, #7
 8002484:	7812      	ldrb	r2, [r2, #0]
 8002486:	0011      	movs	r1, r2
 8002488:	2203      	movs	r2, #3
 800248a:	400a      	ands	r2, r1
 800248c:	00d2      	lsls	r2, r2, #3
 800248e:	21ff      	movs	r1, #255	; 0xff
 8002490:	4091      	lsls	r1, r2
 8002492:	000a      	movs	r2, r1
 8002494:	43d2      	mvns	r2, r2
 8002496:	401a      	ands	r2, r3
 8002498:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	019b      	lsls	r3, r3, #6
 800249e:	22ff      	movs	r2, #255	; 0xff
 80024a0:	401a      	ands	r2, r3
 80024a2:	1dfb      	adds	r3, r7, #7
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	0018      	movs	r0, r3
 80024a8:	2303      	movs	r3, #3
 80024aa:	4003      	ands	r3, r0
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024b0:	4809      	ldr	r0, [pc, #36]	; (80024d8 <__NVIC_SetPriority+0xd8>)
 80024b2:	1dfb      	adds	r3, r7, #7
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	001c      	movs	r4, r3
 80024b8:	230f      	movs	r3, #15
 80024ba:	4023      	ands	r3, r4
 80024bc:	3b08      	subs	r3, #8
 80024be:	089b      	lsrs	r3, r3, #2
 80024c0:	430a      	orrs	r2, r1
 80024c2:	3306      	adds	r3, #6
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	18c3      	adds	r3, r0, r3
 80024c8:	3304      	adds	r3, #4
 80024ca:	601a      	str	r2, [r3, #0]
}
 80024cc:	46c0      	nop			; (mov r8, r8)
 80024ce:	46bd      	mov	sp, r7
 80024d0:	b003      	add	sp, #12
 80024d2:	bd90      	pop	{r4, r7, pc}
 80024d4:	e000e100 	.word	0xe000e100
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	1e5a      	subs	r2, r3, #1
 80024e8:	2380      	movs	r3, #128	; 0x80
 80024ea:	045b      	lsls	r3, r3, #17
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d301      	bcc.n	80024f4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024f0:	2301      	movs	r3, #1
 80024f2:	e010      	b.n	8002516 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024f4:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <SysTick_Config+0x44>)
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	3a01      	subs	r2, #1
 80024fa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024fc:	2301      	movs	r3, #1
 80024fe:	425b      	negs	r3, r3
 8002500:	2103      	movs	r1, #3
 8002502:	0018      	movs	r0, r3
 8002504:	f7ff ff7c 	bl	8002400 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002508:	4b05      	ldr	r3, [pc, #20]	; (8002520 <SysTick_Config+0x44>)
 800250a:	2200      	movs	r2, #0
 800250c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800250e:	4b04      	ldr	r3, [pc, #16]	; (8002520 <SysTick_Config+0x44>)
 8002510:	2207      	movs	r2, #7
 8002512:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002514:	2300      	movs	r3, #0
}
 8002516:	0018      	movs	r0, r3
 8002518:	46bd      	mov	sp, r7
 800251a:	b002      	add	sp, #8
 800251c:	bd80      	pop	{r7, pc}
 800251e:	46c0      	nop			; (mov r8, r8)
 8002520:	e000e010 	.word	0xe000e010

08002524 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	60b9      	str	r1, [r7, #8]
 800252c:	607a      	str	r2, [r7, #4]
 800252e:	210f      	movs	r1, #15
 8002530:	187b      	adds	r3, r7, r1
 8002532:	1c02      	adds	r2, r0, #0
 8002534:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	187b      	adds	r3, r7, r1
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	b25b      	sxtb	r3, r3
 800253e:	0011      	movs	r1, r2
 8002540:	0018      	movs	r0, r3
 8002542:	f7ff ff5d 	bl	8002400 <__NVIC_SetPriority>
}
 8002546:	46c0      	nop			; (mov r8, r8)
 8002548:	46bd      	mov	sp, r7
 800254a:	b004      	add	sp, #16
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b082      	sub	sp, #8
 8002552:	af00      	add	r7, sp, #0
 8002554:	0002      	movs	r2, r0
 8002556:	1dfb      	adds	r3, r7, #7
 8002558:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800255a:	1dfb      	adds	r3, r7, #7
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	b25b      	sxtb	r3, r3
 8002560:	0018      	movs	r0, r3
 8002562:	f7ff ff33 	bl	80023cc <__NVIC_EnableIRQ>
}
 8002566:	46c0      	nop			; (mov r8, r8)
 8002568:	46bd      	mov	sp, r7
 800256a:	b002      	add	sp, #8
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b082      	sub	sp, #8
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	0018      	movs	r0, r3
 800257a:	f7ff ffaf 	bl	80024dc <SysTick_Config>
 800257e:	0003      	movs	r3, r0
}
 8002580:	0018      	movs	r0, r3
 8002582:	46bd      	mov	sp, r7
 8002584:	b002      	add	sp, #8
 8002586:	bd80      	pop	{r7, pc}

08002588 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e015      	b.n	80025c6 <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if (hdac->State == HAL_DAC_STATE_RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	791b      	ldrb	r3, [r3, #4]
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d106      	bne.n	80025b2 <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	0018      	movs	r0, r3
 80025ae:	f7ff f86b 	bl	8001688 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2202      	movs	r2, #2
 80025b6:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2201      	movs	r2, #1
 80025c2:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	0018      	movs	r0, r3
 80025c8:	46bd      	mov	sp, r7
 80025ca:	b002      	add	sp, #8
 80025cc:	bd80      	pop	{r7, pc}

080025ce <HAL_DAC_ConfigChannel>:
  *          This parameter can be one of the following values:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b086      	sub	sp, #24
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	60f8      	str	r0, [r7, #12]
 80025d6:	60b9      	str	r1, [r7, #8]
 80025d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80025da:	2300      	movs	r3, #0
 80025dc:	617b      	str	r3, [r7, #20]
 80025de:	2300      	movs	r3, #0
 80025e0:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	795b      	ldrb	r3, [r3, #5]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d101      	bne.n	80025ee <HAL_DAC_ConfigChannel+0x20>
 80025ea:	2302      	movs	r3, #2
 80025ec:	e029      	b.n	8002642 <HAL_DAC_ConfigChannel+0x74>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2201      	movs	r2, #1
 80025f2:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2202      	movs	r2, #2
 80025f8:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel); 
 8002602:	223e      	movs	r2, #62	; 0x3e
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	409a      	lsls	r2, r3
 8002608:	0013      	movs	r3, r2
 800260a:	43da      	mvns	r2, r3
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	4013      	ands	r3, r2
 8002610:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	4313      	orrs	r3, r2
 800261c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	409a      	lsls	r2, r3
 8002624:	0013      	movs	r3, r2
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	4313      	orrs	r3, r2
 800262a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	697a      	ldr	r2, [r7, #20]
 8002632:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2201      	movs	r2, #1
 8002638:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	0018      	movs	r0, r3
 8002644:	46bd      	mov	sp, r7
 8002646:	b006      	add	sp, #24
 8002648:	bd80      	pop	{r7, pc}

0800264a <HAL_DAC_Start>:
       /* STM32F091xC  STM32F098xx */

#if defined (STM32F051x8) || defined (STM32F058xx)

HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b082      	sub	sp, #8
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
 8002652:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	795b      	ldrb	r3, [r3, #5]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d101      	bne.n	8002660 <HAL_DAC_Start+0x16>
 800265c:	2302      	movs	r3, #2
 800265e:	e028      	b.n	80026b2 <HAL_DAC_Start+0x68>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2202      	movs	r2, #2
 800266a:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6819      	ldr	r1, [r3, #0]
 8002672:	2201      	movs	r2, #1
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	409a      	lsls	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	430a      	orrs	r2, r1
 800267e:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10e      	bne.n	80026a4 <HAL_DAC_Start+0x5a>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	223c      	movs	r2, #60	; 0x3c
 800268e:	4013      	ands	r3, r2
 8002690:	2b3c      	cmp	r3, #60	; 0x3c
 8002692:	d107      	bne.n	80026a4 <HAL_DAC_Start+0x5a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2101      	movs	r1, #1
 80026a0:	430a      	orrs	r2, r1
 80026a2:	605a      	str	r2, [r3, #4]
    }
  }
 
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	0018      	movs	r0, r3
 80026b4:	46bd      	mov	sp, r7
 80026b6:	b002      	add	sp, #8
 80026b8:	bd80      	pop	{r7, pc}
	...

080026bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026c4:	2300      	movs	r3, #0
 80026c6:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e036      	b.n	8002740 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2221      	movs	r2, #33	; 0x21
 80026d6:	2102      	movs	r1, #2
 80026d8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	4a18      	ldr	r2, [pc, #96]	; (8002748 <HAL_DMA_Init+0x8c>)
 80026e6:	4013      	ands	r3, r2
 80026e8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80026f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800270a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	69db      	ldr	r3, [r3, #28]
 8002710:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	4313      	orrs	r3, r2
 8002716:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	0018      	movs	r0, r3
 8002724:	f000 f9c4 	bl	8002ab0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2221      	movs	r2, #33	; 0x21
 8002732:	2101      	movs	r1, #1
 8002734:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2220      	movs	r2, #32
 800273a:	2100      	movs	r1, #0
 800273c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}  
 8002740:	0018      	movs	r0, r3
 8002742:	46bd      	mov	sp, r7
 8002744:	b004      	add	sp, #16
 8002746:	bd80      	pop	{r7, pc}
 8002748:	ffffc00f 	.word	0xffffc00f

0800274c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
 8002758:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800275a:	2317      	movs	r3, #23
 800275c:	18fb      	adds	r3, r7, r3
 800275e:	2200      	movs	r2, #0
 8002760:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2220      	movs	r2, #32
 8002766:	5c9b      	ldrb	r3, [r3, r2]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d101      	bne.n	8002770 <HAL_DMA_Start_IT+0x24>
 800276c:	2302      	movs	r3, #2
 800276e:	e04f      	b.n	8002810 <HAL_DMA_Start_IT+0xc4>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2220      	movs	r2, #32
 8002774:	2101      	movs	r1, #1
 8002776:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2221      	movs	r2, #33	; 0x21
 800277c:	5c9b      	ldrb	r3, [r3, r2]
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b01      	cmp	r3, #1
 8002782:	d13a      	bne.n	80027fa <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2221      	movs	r2, #33	; 0x21
 8002788:	2102      	movs	r1, #2
 800278a:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2101      	movs	r1, #1
 800279e:	438a      	bics	r2, r1
 80027a0:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	68b9      	ldr	r1, [r7, #8]
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f000 f954 	bl	8002a56 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d008      	beq.n	80027c8 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	210e      	movs	r1, #14
 80027c2:	430a      	orrs	r2, r1
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	e00f      	b.n	80027e8 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	210a      	movs	r1, #10
 80027d4:	430a      	orrs	r2, r1
 80027d6:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2104      	movs	r1, #4
 80027e4:	438a      	bics	r2, r1
 80027e6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2101      	movs	r1, #1
 80027f4:	430a      	orrs	r2, r1
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	e007      	b.n	800280a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2220      	movs	r2, #32
 80027fe:	2100      	movs	r1, #0
 8002800:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002802:	2317      	movs	r3, #23
 8002804:	18fb      	adds	r3, r7, r3
 8002806:	2202      	movs	r2, #2
 8002808:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 800280a:	2317      	movs	r3, #23
 800280c:	18fb      	adds	r3, r7, r3
 800280e:	781b      	ldrb	r3, [r3, #0]
} 
 8002810:	0018      	movs	r0, r3
 8002812:	46bd      	mov	sp, r7
 8002814:	b006      	add	sp, #24
 8002816:	bd80      	pop	{r7, pc}

08002818 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2221      	movs	r2, #33	; 0x21
 8002824:	5c9b      	ldrb	r3, [r3, r2]
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d008      	beq.n	800283e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2204      	movs	r2, #4
 8002830:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2220      	movs	r2, #32
 8002836:	2100      	movs	r1, #0
 8002838:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e020      	b.n	8002880 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	210e      	movs	r1, #14
 800284a:	438a      	bics	r2, r1
 800284c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2101      	movs	r1, #1
 800285a:	438a      	bics	r2, r1
 800285c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002866:	2101      	movs	r1, #1
 8002868:	4091      	lsls	r1, r2
 800286a:	000a      	movs	r2, r1
 800286c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2221      	movs	r2, #33	; 0x21
 8002872:	2101      	movs	r1, #1
 8002874:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2220      	movs	r2, #32
 800287a:	2100      	movs	r1, #0
 800287c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	0018      	movs	r0, r3
 8002882:	46bd      	mov	sp, r7
 8002884:	b002      	add	sp, #8
 8002886:	bd80      	pop	{r7, pc}

08002888 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002890:	210f      	movs	r1, #15
 8002892:	187b      	adds	r3, r7, r1
 8002894:	2200      	movs	r2, #0
 8002896:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2221      	movs	r2, #33	; 0x21
 800289c:	5c9b      	ldrb	r3, [r3, r2]
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d006      	beq.n	80028b2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2204      	movs	r2, #4
 80028a8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80028aa:	187b      	adds	r3, r7, r1
 80028ac:	2201      	movs	r2, #1
 80028ae:	701a      	strb	r2, [r3, #0]
 80028b0:	e028      	b.n	8002904 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	210e      	movs	r1, #14
 80028be:	438a      	bics	r2, r1
 80028c0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2101      	movs	r1, #1
 80028ce:	438a      	bics	r2, r1
 80028d0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028da:	2101      	movs	r1, #1
 80028dc:	4091      	lsls	r1, r2
 80028de:	000a      	movs	r2, r1
 80028e0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2221      	movs	r2, #33	; 0x21
 80028e6:	2101      	movs	r1, #1
 80028e8:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2220      	movs	r2, #32
 80028ee:	2100      	movs	r1, #0
 80028f0:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d004      	beq.n	8002904 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	0010      	movs	r0, r2
 8002902:	4798      	blx	r3
    } 
  }
  return status;
 8002904:	230f      	movs	r3, #15
 8002906:	18fb      	adds	r3, r7, r3
 8002908:	781b      	ldrb	r3, [r3, #0]
}
 800290a:	0018      	movs	r0, r3
 800290c:	46bd      	mov	sp, r7
 800290e:	b004      	add	sp, #16
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b084      	sub	sp, #16
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	2204      	movs	r2, #4
 8002930:	409a      	lsls	r2, r3
 8002932:	0013      	movs	r3, r2
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	4013      	ands	r3, r2
 8002938:	d024      	beq.n	8002984 <HAL_DMA_IRQHandler+0x72>
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	2204      	movs	r2, #4
 800293e:	4013      	ands	r3, r2
 8002940:	d020      	beq.n	8002984 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2220      	movs	r2, #32
 800294a:	4013      	ands	r3, r2
 800294c:	d107      	bne.n	800295e <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2104      	movs	r1, #4
 800295a:	438a      	bics	r2, r1
 800295c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002966:	2104      	movs	r1, #4
 8002968:	4091      	lsls	r1, r2
 800296a:	000a      	movs	r2, r1
 800296c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002972:	2b00      	cmp	r3, #0
 8002974:	d100      	bne.n	8002978 <HAL_DMA_IRQHandler+0x66>
 8002976:	e06a      	b.n	8002a4e <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	0010      	movs	r0, r2
 8002980:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002982:	e064      	b.n	8002a4e <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002988:	2202      	movs	r2, #2
 800298a:	409a      	lsls	r2, r3
 800298c:	0013      	movs	r3, r2
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	4013      	ands	r3, r2
 8002992:	d02b      	beq.n	80029ec <HAL_DMA_IRQHandler+0xda>
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	2202      	movs	r2, #2
 8002998:	4013      	ands	r3, r2
 800299a:	d027      	beq.n	80029ec <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2220      	movs	r2, #32
 80029a4:	4013      	ands	r3, r2
 80029a6:	d10b      	bne.n	80029c0 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	210a      	movs	r1, #10
 80029b4:	438a      	bics	r2, r1
 80029b6:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2221      	movs	r2, #33	; 0x21
 80029bc:	2101      	movs	r1, #1
 80029be:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c8:	2102      	movs	r1, #2
 80029ca:	4091      	lsls	r1, r2
 80029cc:	000a      	movs	r2, r1
 80029ce:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2220      	movs	r2, #32
 80029d4:	2100      	movs	r1, #0
 80029d6:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d036      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	0010      	movs	r0, r2
 80029e8:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80029ea:	e030      	b.n	8002a4e <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f0:	2208      	movs	r2, #8
 80029f2:	409a      	lsls	r2, r3
 80029f4:	0013      	movs	r3, r2
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	4013      	ands	r3, r2
 80029fa:	d028      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x13c>
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	2208      	movs	r2, #8
 8002a00:	4013      	ands	r3, r2
 8002a02:	d024      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	210e      	movs	r1, #14
 8002a10:	438a      	bics	r2, r1
 8002a12:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	4091      	lsls	r1, r2
 8002a20:	000a      	movs	r2, r1
 8002a22:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2221      	movs	r2, #33	; 0x21
 8002a2e:	2101      	movs	r1, #1
 8002a30:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2220      	movs	r2, #32
 8002a36:	2100      	movs	r1, #0
 8002a38:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d005      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	0010      	movs	r0, r2
 8002a4a:	4798      	blx	r3
    }
   }
}  
 8002a4c:	e7ff      	b.n	8002a4e <HAL_DMA_IRQHandler+0x13c>
 8002a4e:	46c0      	nop			; (mov r8, r8)
 8002a50:	46bd      	mov	sp, r7
 8002a52:	b004      	add	sp, #16
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b084      	sub	sp, #16
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	60f8      	str	r0, [r7, #12]
 8002a5e:	60b9      	str	r1, [r7, #8]
 8002a60:	607a      	str	r2, [r7, #4]
 8002a62:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	4091      	lsls	r1, r2
 8002a70:	000a      	movs	r2, r1
 8002a72:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	2b10      	cmp	r3, #16
 8002a82:	d108      	bne.n	8002a96 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68ba      	ldr	r2, [r7, #8]
 8002a92:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a94:	e007      	b.n	8002aa6 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	60da      	str	r2, [r3, #12]
}
 8002aa6:	46c0      	nop			; (mov r8, r8)
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	b004      	add	sp, #16
 8002aac:	bd80      	pop	{r7, pc}
	...

08002ab0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a08      	ldr	r2, [pc, #32]	; (8002ae0 <DMA_CalcBaseAndBitshift+0x30>)
 8002abe:	4694      	mov	ip, r2
 8002ac0:	4463      	add	r3, ip
 8002ac2:	2114      	movs	r1, #20
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	f7fd fb1f 	bl	8000108 <__udivsi3>
 8002aca:	0003      	movs	r3, r0
 8002acc:	009a      	lsls	r2, r3, #2
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a03      	ldr	r2, [pc, #12]	; (8002ae4 <DMA_CalcBaseAndBitshift+0x34>)
 8002ad6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002ad8:	46c0      	nop			; (mov r8, r8)
 8002ada:	46bd      	mov	sp, r7
 8002adc:	b002      	add	sp, #8
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	bffdfff8 	.word	0xbffdfff8
 8002ae4:	40020000 	.word	0x40020000

08002ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002af2:	2300      	movs	r3, #0
 8002af4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002af6:	e14f      	b.n	8002d98 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2101      	movs	r1, #1
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	4091      	lsls	r1, r2
 8002b02:	000a      	movs	r2, r1
 8002b04:	4013      	ands	r3, r2
 8002b06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d100      	bne.n	8002b10 <HAL_GPIO_Init+0x28>
 8002b0e:	e140      	b.n	8002d92 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	2203      	movs	r2, #3
 8002b16:	4013      	ands	r3, r2
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d005      	beq.n	8002b28 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	2203      	movs	r2, #3
 8002b22:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d130      	bne.n	8002b8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	2203      	movs	r2, #3
 8002b34:	409a      	lsls	r2, r3
 8002b36:	0013      	movs	r3, r2
 8002b38:	43da      	mvns	r2, r3
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	68da      	ldr	r2, [r3, #12]
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	409a      	lsls	r2, r3
 8002b4a:	0013      	movs	r3, r2
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b5e:	2201      	movs	r2, #1
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	409a      	lsls	r2, r3
 8002b64:	0013      	movs	r3, r2
 8002b66:	43da      	mvns	r2, r3
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	091b      	lsrs	r3, r3, #4
 8002b74:	2201      	movs	r2, #1
 8002b76:	401a      	ands	r2, r3
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	409a      	lsls	r2, r3
 8002b7c:	0013      	movs	r3, r2
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2203      	movs	r2, #3
 8002b90:	4013      	ands	r3, r2
 8002b92:	2b03      	cmp	r3, #3
 8002b94:	d017      	beq.n	8002bc6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	2203      	movs	r2, #3
 8002ba2:	409a      	lsls	r2, r3
 8002ba4:	0013      	movs	r3, r2
 8002ba6:	43da      	mvns	r2, r3
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	4013      	ands	r3, r2
 8002bac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	689a      	ldr	r2, [r3, #8]
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	409a      	lsls	r2, r3
 8002bb8:	0013      	movs	r3, r2
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2203      	movs	r2, #3
 8002bcc:	4013      	ands	r3, r2
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d123      	bne.n	8002c1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	08da      	lsrs	r2, r3, #3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	3208      	adds	r2, #8
 8002bda:	0092      	lsls	r2, r2, #2
 8002bdc:	58d3      	ldr	r3, [r2, r3]
 8002bde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	2207      	movs	r2, #7
 8002be4:	4013      	ands	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	220f      	movs	r2, #15
 8002bea:	409a      	lsls	r2, r3
 8002bec:	0013      	movs	r3, r2
 8002bee:	43da      	mvns	r2, r3
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	691a      	ldr	r2, [r3, #16]
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	2107      	movs	r1, #7
 8002bfe:	400b      	ands	r3, r1
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	409a      	lsls	r2, r3
 8002c04:	0013      	movs	r3, r2
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	08da      	lsrs	r2, r3, #3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	3208      	adds	r2, #8
 8002c14:	0092      	lsls	r2, r2, #2
 8002c16:	6939      	ldr	r1, [r7, #16]
 8002c18:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	2203      	movs	r2, #3
 8002c26:	409a      	lsls	r2, r3
 8002c28:	0013      	movs	r3, r2
 8002c2a:	43da      	mvns	r2, r3
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2203      	movs	r2, #3
 8002c38:	401a      	ands	r2, r3
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	409a      	lsls	r2, r3
 8002c40:	0013      	movs	r3, r2
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685a      	ldr	r2, [r3, #4]
 8002c52:	23c0      	movs	r3, #192	; 0xc0
 8002c54:	029b      	lsls	r3, r3, #10
 8002c56:	4013      	ands	r3, r2
 8002c58:	d100      	bne.n	8002c5c <HAL_GPIO_Init+0x174>
 8002c5a:	e09a      	b.n	8002d92 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c5c:	4b54      	ldr	r3, [pc, #336]	; (8002db0 <HAL_GPIO_Init+0x2c8>)
 8002c5e:	699a      	ldr	r2, [r3, #24]
 8002c60:	4b53      	ldr	r3, [pc, #332]	; (8002db0 <HAL_GPIO_Init+0x2c8>)
 8002c62:	2101      	movs	r1, #1
 8002c64:	430a      	orrs	r2, r1
 8002c66:	619a      	str	r2, [r3, #24]
 8002c68:	4b51      	ldr	r3, [pc, #324]	; (8002db0 <HAL_GPIO_Init+0x2c8>)
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	4013      	ands	r3, r2
 8002c70:	60bb      	str	r3, [r7, #8]
 8002c72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c74:	4a4f      	ldr	r2, [pc, #316]	; (8002db4 <HAL_GPIO_Init+0x2cc>)
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	089b      	lsrs	r3, r3, #2
 8002c7a:	3302      	adds	r3, #2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	589b      	ldr	r3, [r3, r2]
 8002c80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	2203      	movs	r2, #3
 8002c86:	4013      	ands	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	220f      	movs	r2, #15
 8002c8c:	409a      	lsls	r2, r3
 8002c8e:	0013      	movs	r3, r2
 8002c90:	43da      	mvns	r2, r3
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	4013      	ands	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	2390      	movs	r3, #144	; 0x90
 8002c9c:	05db      	lsls	r3, r3, #23
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d013      	beq.n	8002cca <HAL_GPIO_Init+0x1e2>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a44      	ldr	r2, [pc, #272]	; (8002db8 <HAL_GPIO_Init+0x2d0>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d00d      	beq.n	8002cc6 <HAL_GPIO_Init+0x1de>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a43      	ldr	r2, [pc, #268]	; (8002dbc <HAL_GPIO_Init+0x2d4>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d007      	beq.n	8002cc2 <HAL_GPIO_Init+0x1da>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a42      	ldr	r2, [pc, #264]	; (8002dc0 <HAL_GPIO_Init+0x2d8>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d101      	bne.n	8002cbe <HAL_GPIO_Init+0x1d6>
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e006      	b.n	8002ccc <HAL_GPIO_Init+0x1e4>
 8002cbe:	2305      	movs	r3, #5
 8002cc0:	e004      	b.n	8002ccc <HAL_GPIO_Init+0x1e4>
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	e002      	b.n	8002ccc <HAL_GPIO_Init+0x1e4>
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e000      	b.n	8002ccc <HAL_GPIO_Init+0x1e4>
 8002cca:	2300      	movs	r3, #0
 8002ccc:	697a      	ldr	r2, [r7, #20]
 8002cce:	2103      	movs	r1, #3
 8002cd0:	400a      	ands	r2, r1
 8002cd2:	0092      	lsls	r2, r2, #2
 8002cd4:	4093      	lsls	r3, r2
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002cdc:	4935      	ldr	r1, [pc, #212]	; (8002db4 <HAL_GPIO_Init+0x2cc>)
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	089b      	lsrs	r3, r3, #2
 8002ce2:	3302      	adds	r3, #2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cea:	4b36      	ldr	r3, [pc, #216]	; (8002dc4 <HAL_GPIO_Init+0x2dc>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	43da      	mvns	r2, r3
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	2380      	movs	r3, #128	; 0x80
 8002d00:	025b      	lsls	r3, r3, #9
 8002d02:	4013      	ands	r3, r2
 8002d04:	d003      	beq.n	8002d0e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002d0e:	4b2d      	ldr	r3, [pc, #180]	; (8002dc4 <HAL_GPIO_Init+0x2dc>)
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002d14:	4b2b      	ldr	r3, [pc, #172]	; (8002dc4 <HAL_GPIO_Init+0x2dc>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	43da      	mvns	r2, r3
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	4013      	ands	r3, r2
 8002d22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	2380      	movs	r3, #128	; 0x80
 8002d2a:	029b      	lsls	r3, r3, #10
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	d003      	beq.n	8002d38 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002d38:	4b22      	ldr	r3, [pc, #136]	; (8002dc4 <HAL_GPIO_Init+0x2dc>)
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d3e:	4b21      	ldr	r3, [pc, #132]	; (8002dc4 <HAL_GPIO_Init+0x2dc>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	43da      	mvns	r2, r3
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	2380      	movs	r3, #128	; 0x80
 8002d54:	035b      	lsls	r3, r3, #13
 8002d56:	4013      	ands	r3, r2
 8002d58:	d003      	beq.n	8002d62 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002d62:	4b18      	ldr	r3, [pc, #96]	; (8002dc4 <HAL_GPIO_Init+0x2dc>)
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002d68:	4b16      	ldr	r3, [pc, #88]	; (8002dc4 <HAL_GPIO_Init+0x2dc>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	43da      	mvns	r2, r3
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	4013      	ands	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	2380      	movs	r3, #128	; 0x80
 8002d7e:	039b      	lsls	r3, r3, #14
 8002d80:	4013      	ands	r3, r2
 8002d82:	d003      	beq.n	8002d8c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002d8c:	4b0d      	ldr	r3, [pc, #52]	; (8002dc4 <HAL_GPIO_Init+0x2dc>)
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	3301      	adds	r3, #1
 8002d96:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	40da      	lsrs	r2, r3
 8002da0:	1e13      	subs	r3, r2, #0
 8002da2:	d000      	beq.n	8002da6 <HAL_GPIO_Init+0x2be>
 8002da4:	e6a8      	b.n	8002af8 <HAL_GPIO_Init+0x10>
  } 
}
 8002da6:	46c0      	nop			; (mov r8, r8)
 8002da8:	46c0      	nop			; (mov r8, r8)
 8002daa:	46bd      	mov	sp, r7
 8002dac:	b006      	add	sp, #24
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40021000 	.word	0x40021000
 8002db4:	40010000 	.word	0x40010000
 8002db8:	48000400 	.word	0x48000400
 8002dbc:	48000800 	.word	0x48000800
 8002dc0:	48000c00 	.word	0x48000c00
 8002dc4:	40010400 	.word	0x40010400

08002dc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	0008      	movs	r0, r1
 8002dd2:	0011      	movs	r1, r2
 8002dd4:	1cbb      	adds	r3, r7, #2
 8002dd6:	1c02      	adds	r2, r0, #0
 8002dd8:	801a      	strh	r2, [r3, #0]
 8002dda:	1c7b      	adds	r3, r7, #1
 8002ddc:	1c0a      	adds	r2, r1, #0
 8002dde:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002de0:	1c7b      	adds	r3, r7, #1
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d004      	beq.n	8002df2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002de8:	1cbb      	adds	r3, r7, #2
 8002dea:	881a      	ldrh	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002df0:	e003      	b.n	8002dfa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002df2:	1cbb      	adds	r3, r7, #2
 8002df4:	881a      	ldrh	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002dfa:	46c0      	nop			; (mov r8, r8)
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	b002      	add	sp, #8
 8002e00:	bd80      	pop	{r7, pc}
	...

08002e04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e082      	b.n	8002f1c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2241      	movs	r2, #65	; 0x41
 8002e1a:	5c9b      	ldrb	r3, [r3, r2]
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d107      	bne.n	8002e32 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2240      	movs	r2, #64	; 0x40
 8002e26:	2100      	movs	r1, #0
 8002e28:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	f7fe fc71 	bl	8001714 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2241      	movs	r2, #65	; 0x41
 8002e36:	2124      	movs	r1, #36	; 0x24
 8002e38:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2101      	movs	r1, #1
 8002e46:	438a      	bics	r2, r1
 8002e48:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4934      	ldr	r1, [pc, #208]	; (8002f24 <HAL_I2C_Init+0x120>)
 8002e54:	400a      	ands	r2, r1
 8002e56:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4931      	ldr	r1, [pc, #196]	; (8002f28 <HAL_I2C_Init+0x124>)
 8002e64:	400a      	ands	r2, r1
 8002e66:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d108      	bne.n	8002e82 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2180      	movs	r1, #128	; 0x80
 8002e7a:	0209      	lsls	r1, r1, #8
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	609a      	str	r2, [r3, #8]
 8002e80:	e007      	b.n	8002e92 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689a      	ldr	r2, [r3, #8]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2184      	movs	r1, #132	; 0x84
 8002e8c:	0209      	lsls	r1, r1, #8
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d104      	bne.n	8002ea4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2280      	movs	r2, #128	; 0x80
 8002ea0:	0112      	lsls	r2, r2, #4
 8002ea2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	491f      	ldr	r1, [pc, #124]	; (8002f2c <HAL_I2C_Init+0x128>)
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68da      	ldr	r2, [r3, #12]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	491a      	ldr	r1, [pc, #104]	; (8002f28 <HAL_I2C_Init+0x124>)
 8002ec0:	400a      	ands	r2, r1
 8002ec2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	691a      	ldr	r2, [r3, #16]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	695b      	ldr	r3, [r3, #20]
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	69d9      	ldr	r1, [r3, #28]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a1a      	ldr	r2, [r3, #32]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2101      	movs	r1, #1
 8002efa:	430a      	orrs	r2, r1
 8002efc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2241      	movs	r2, #65	; 0x41
 8002f08:	2120      	movs	r1, #32
 8002f0a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2242      	movs	r2, #66	; 0x42
 8002f16:	2100      	movs	r1, #0
 8002f18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	b002      	add	sp, #8
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	f0ffffff 	.word	0xf0ffffff
 8002f28:	ffff7fff 	.word	0xffff7fff
 8002f2c:	02008000 	.word	0x02008000

08002f30 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002f30:	b590      	push	{r4, r7, lr}
 8002f32:	b089      	sub	sp, #36	; 0x24
 8002f34:	af02      	add	r7, sp, #8
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	0008      	movs	r0, r1
 8002f3a:	607a      	str	r2, [r7, #4]
 8002f3c:	0019      	movs	r1, r3
 8002f3e:	230a      	movs	r3, #10
 8002f40:	18fb      	adds	r3, r7, r3
 8002f42:	1c02      	adds	r2, r0, #0
 8002f44:	801a      	strh	r2, [r3, #0]
 8002f46:	2308      	movs	r3, #8
 8002f48:	18fb      	adds	r3, r7, r3
 8002f4a:	1c0a      	adds	r2, r1, #0
 8002f4c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2241      	movs	r2, #65	; 0x41
 8002f52:	5c9b      	ldrb	r3, [r3, r2]
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b20      	cmp	r3, #32
 8002f58:	d000      	beq.n	8002f5c <HAL_I2C_Master_Transmit+0x2c>
 8002f5a:	e0e7      	b.n	800312c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2240      	movs	r2, #64	; 0x40
 8002f60:	5c9b      	ldrb	r3, [r3, r2]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d101      	bne.n	8002f6a <HAL_I2C_Master_Transmit+0x3a>
 8002f66:	2302      	movs	r3, #2
 8002f68:	e0e1      	b.n	800312e <HAL_I2C_Master_Transmit+0x1fe>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2240      	movs	r2, #64	; 0x40
 8002f6e:	2101      	movs	r1, #1
 8002f70:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f72:	f7fe fe23 	bl	8001bbc <HAL_GetTick>
 8002f76:	0003      	movs	r3, r0
 8002f78:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f7a:	2380      	movs	r3, #128	; 0x80
 8002f7c:	0219      	lsls	r1, r3, #8
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	9300      	str	r3, [sp, #0]
 8002f84:	2319      	movs	r3, #25
 8002f86:	2201      	movs	r2, #1
 8002f88:	f000 fa04 	bl	8003394 <I2C_WaitOnFlagUntilTimeout>
 8002f8c:	1e03      	subs	r3, r0, #0
 8002f8e:	d001      	beq.n	8002f94 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e0cc      	b.n	800312e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2241      	movs	r2, #65	; 0x41
 8002f98:	2121      	movs	r1, #33	; 0x21
 8002f9a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2242      	movs	r2, #66	; 0x42
 8002fa0:	2110      	movs	r1, #16
 8002fa2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2208      	movs	r2, #8
 8002fb4:	18ba      	adds	r2, r7, r2
 8002fb6:	8812      	ldrh	r2, [r2, #0]
 8002fb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	2bff      	cmp	r3, #255	; 0xff
 8002fc8:	d911      	bls.n	8002fee <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	22ff      	movs	r2, #255	; 0xff
 8002fce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	2380      	movs	r3, #128	; 0x80
 8002fd8:	045c      	lsls	r4, r3, #17
 8002fda:	230a      	movs	r3, #10
 8002fdc:	18fb      	adds	r3, r7, r3
 8002fde:	8819      	ldrh	r1, [r3, #0]
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	4b55      	ldr	r3, [pc, #340]	; (8003138 <HAL_I2C_Master_Transmit+0x208>)
 8002fe4:	9300      	str	r3, [sp, #0]
 8002fe6:	0023      	movs	r3, r4
 8002fe8:	f000 fb74 	bl	80036d4 <I2C_TransferConfig>
 8002fec:	e075      	b.n	80030da <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	2380      	movs	r3, #128	; 0x80
 8003000:	049c      	lsls	r4, r3, #18
 8003002:	230a      	movs	r3, #10
 8003004:	18fb      	adds	r3, r7, r3
 8003006:	8819      	ldrh	r1, [r3, #0]
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	4b4b      	ldr	r3, [pc, #300]	; (8003138 <HAL_I2C_Master_Transmit+0x208>)
 800300c:	9300      	str	r3, [sp, #0]
 800300e:	0023      	movs	r3, r4
 8003010:	f000 fb60 	bl	80036d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003014:	e061      	b.n	80030da <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	0018      	movs	r0, r3
 800301e:	f000 f9f8 	bl	8003412 <I2C_WaitOnTXISFlagUntilTimeout>
 8003022:	1e03      	subs	r3, r0, #0
 8003024:	d001      	beq.n	800302a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e081      	b.n	800312e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302e:	781a      	ldrb	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303a:	1c5a      	adds	r2, r3, #1
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003044:	b29b      	uxth	r3, r3
 8003046:	3b01      	subs	r3, #1
 8003048:	b29a      	uxth	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003052:	3b01      	subs	r3, #1
 8003054:	b29a      	uxth	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800305e:	b29b      	uxth	r3, r3
 8003060:	2b00      	cmp	r3, #0
 8003062:	d03a      	beq.n	80030da <HAL_I2C_Master_Transmit+0x1aa>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003068:	2b00      	cmp	r3, #0
 800306a:	d136      	bne.n	80030da <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800306c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	9300      	str	r3, [sp, #0]
 8003074:	0013      	movs	r3, r2
 8003076:	2200      	movs	r2, #0
 8003078:	2180      	movs	r1, #128	; 0x80
 800307a:	f000 f98b 	bl	8003394 <I2C_WaitOnFlagUntilTimeout>
 800307e:	1e03      	subs	r3, r0, #0
 8003080:	d001      	beq.n	8003086 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e053      	b.n	800312e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800308a:	b29b      	uxth	r3, r3
 800308c:	2bff      	cmp	r3, #255	; 0xff
 800308e:	d911      	bls.n	80030b4 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	22ff      	movs	r2, #255	; 0xff
 8003094:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800309a:	b2da      	uxtb	r2, r3
 800309c:	2380      	movs	r3, #128	; 0x80
 800309e:	045c      	lsls	r4, r3, #17
 80030a0:	230a      	movs	r3, #10
 80030a2:	18fb      	adds	r3, r7, r3
 80030a4:	8819      	ldrh	r1, [r3, #0]
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	2300      	movs	r3, #0
 80030aa:	9300      	str	r3, [sp, #0]
 80030ac:	0023      	movs	r3, r4
 80030ae:	f000 fb11 	bl	80036d4 <I2C_TransferConfig>
 80030b2:	e012      	b.n	80030da <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c2:	b2da      	uxtb	r2, r3
 80030c4:	2380      	movs	r3, #128	; 0x80
 80030c6:	049c      	lsls	r4, r3, #18
 80030c8:	230a      	movs	r3, #10
 80030ca:	18fb      	adds	r3, r7, r3
 80030cc:	8819      	ldrh	r1, [r3, #0]
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	2300      	movs	r3, #0
 80030d2:	9300      	str	r3, [sp, #0]
 80030d4:	0023      	movs	r3, r4
 80030d6:	f000 fafd 	bl	80036d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030de:	b29b      	uxth	r3, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d198      	bne.n	8003016 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	0018      	movs	r0, r3
 80030ec:	f000 f9d0 	bl	8003490 <I2C_WaitOnSTOPFlagUntilTimeout>
 80030f0:	1e03      	subs	r3, r0, #0
 80030f2:	d001      	beq.n	80030f8 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e01a      	b.n	800312e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2220      	movs	r2, #32
 80030fe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	490c      	ldr	r1, [pc, #48]	; (800313c <HAL_I2C_Master_Transmit+0x20c>)
 800310c:	400a      	ands	r2, r1
 800310e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2241      	movs	r2, #65	; 0x41
 8003114:	2120      	movs	r1, #32
 8003116:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2242      	movs	r2, #66	; 0x42
 800311c:	2100      	movs	r1, #0
 800311e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2240      	movs	r2, #64	; 0x40
 8003124:	2100      	movs	r1, #0
 8003126:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003128:	2300      	movs	r3, #0
 800312a:	e000      	b.n	800312e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800312c:	2302      	movs	r3, #2
  }
}
 800312e:	0018      	movs	r0, r3
 8003130:	46bd      	mov	sp, r7
 8003132:	b007      	add	sp, #28
 8003134:	bd90      	pop	{r4, r7, pc}
 8003136:	46c0      	nop			; (mov r8, r8)
 8003138:	80002000 	.word	0x80002000
 800313c:	fe00e800 	.word	0xfe00e800

08003140 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003140:	b590      	push	{r4, r7, lr}
 8003142:	b089      	sub	sp, #36	; 0x24
 8003144:	af02      	add	r7, sp, #8
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	0008      	movs	r0, r1
 800314a:	607a      	str	r2, [r7, #4]
 800314c:	0019      	movs	r1, r3
 800314e:	230a      	movs	r3, #10
 8003150:	18fb      	adds	r3, r7, r3
 8003152:	1c02      	adds	r2, r0, #0
 8003154:	801a      	strh	r2, [r3, #0]
 8003156:	2308      	movs	r3, #8
 8003158:	18fb      	adds	r3, r7, r3
 800315a:	1c0a      	adds	r2, r1, #0
 800315c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2241      	movs	r2, #65	; 0x41
 8003162:	5c9b      	ldrb	r3, [r3, r2]
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b20      	cmp	r3, #32
 8003168:	d000      	beq.n	800316c <HAL_I2C_Master_Receive+0x2c>
 800316a:	e0e8      	b.n	800333e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2240      	movs	r2, #64	; 0x40
 8003170:	5c9b      	ldrb	r3, [r3, r2]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d101      	bne.n	800317a <HAL_I2C_Master_Receive+0x3a>
 8003176:	2302      	movs	r3, #2
 8003178:	e0e2      	b.n	8003340 <HAL_I2C_Master_Receive+0x200>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2240      	movs	r2, #64	; 0x40
 800317e:	2101      	movs	r1, #1
 8003180:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003182:	f7fe fd1b 	bl	8001bbc <HAL_GetTick>
 8003186:	0003      	movs	r3, r0
 8003188:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800318a:	2380      	movs	r3, #128	; 0x80
 800318c:	0219      	lsls	r1, r3, #8
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	2319      	movs	r3, #25
 8003196:	2201      	movs	r2, #1
 8003198:	f000 f8fc 	bl	8003394 <I2C_WaitOnFlagUntilTimeout>
 800319c:	1e03      	subs	r3, r0, #0
 800319e:	d001      	beq.n	80031a4 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e0cd      	b.n	8003340 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2241      	movs	r2, #65	; 0x41
 80031a8:	2122      	movs	r1, #34	; 0x22
 80031aa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2242      	movs	r2, #66	; 0x42
 80031b0:	2110      	movs	r1, #16
 80031b2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2208      	movs	r2, #8
 80031c4:	18ba      	adds	r2, r7, r2
 80031c6:	8812      	ldrh	r2, [r2, #0]
 80031c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	2bff      	cmp	r3, #255	; 0xff
 80031d8:	d911      	bls.n	80031fe <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	22ff      	movs	r2, #255	; 0xff
 80031de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e4:	b2da      	uxtb	r2, r3
 80031e6:	2380      	movs	r3, #128	; 0x80
 80031e8:	045c      	lsls	r4, r3, #17
 80031ea:	230a      	movs	r3, #10
 80031ec:	18fb      	adds	r3, r7, r3
 80031ee:	8819      	ldrh	r1, [r3, #0]
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	4b55      	ldr	r3, [pc, #340]	; (8003348 <HAL_I2C_Master_Receive+0x208>)
 80031f4:	9300      	str	r3, [sp, #0]
 80031f6:	0023      	movs	r3, r4
 80031f8:	f000 fa6c 	bl	80036d4 <I2C_TransferConfig>
 80031fc:	e076      	b.n	80032ec <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003202:	b29a      	uxth	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800320c:	b2da      	uxtb	r2, r3
 800320e:	2380      	movs	r3, #128	; 0x80
 8003210:	049c      	lsls	r4, r3, #18
 8003212:	230a      	movs	r3, #10
 8003214:	18fb      	adds	r3, r7, r3
 8003216:	8819      	ldrh	r1, [r3, #0]
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	4b4b      	ldr	r3, [pc, #300]	; (8003348 <HAL_I2C_Master_Receive+0x208>)
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	0023      	movs	r3, r4
 8003220:	f000 fa58 	bl	80036d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003224:	e062      	b.n	80032ec <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	0018      	movs	r0, r3
 800322e:	f000 f96b 	bl	8003508 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003232:	1e03      	subs	r3, r0, #0
 8003234:	d001      	beq.n	800323a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e082      	b.n	8003340 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	b2d2      	uxtb	r2, r2
 8003246:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324c:	1c5a      	adds	r2, r3, #1
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003256:	3b01      	subs	r3, #1
 8003258:	b29a      	uxth	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003262:	b29b      	uxth	r3, r3
 8003264:	3b01      	subs	r3, #1
 8003266:	b29a      	uxth	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003270:	b29b      	uxth	r3, r3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d03a      	beq.n	80032ec <HAL_I2C_Master_Receive+0x1ac>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800327a:	2b00      	cmp	r3, #0
 800327c:	d136      	bne.n	80032ec <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800327e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	0013      	movs	r3, r2
 8003288:	2200      	movs	r2, #0
 800328a:	2180      	movs	r1, #128	; 0x80
 800328c:	f000 f882 	bl	8003394 <I2C_WaitOnFlagUntilTimeout>
 8003290:	1e03      	subs	r3, r0, #0
 8003292:	d001      	beq.n	8003298 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e053      	b.n	8003340 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329c:	b29b      	uxth	r3, r3
 800329e:	2bff      	cmp	r3, #255	; 0xff
 80032a0:	d911      	bls.n	80032c6 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	22ff      	movs	r2, #255	; 0xff
 80032a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ac:	b2da      	uxtb	r2, r3
 80032ae:	2380      	movs	r3, #128	; 0x80
 80032b0:	045c      	lsls	r4, r3, #17
 80032b2:	230a      	movs	r3, #10
 80032b4:	18fb      	adds	r3, r7, r3
 80032b6:	8819      	ldrh	r1, [r3, #0]
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	2300      	movs	r3, #0
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	0023      	movs	r3, r4
 80032c0:	f000 fa08 	bl	80036d4 <I2C_TransferConfig>
 80032c4:	e012      	b.n	80032ec <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	2380      	movs	r3, #128	; 0x80
 80032d8:	049c      	lsls	r4, r3, #18
 80032da:	230a      	movs	r3, #10
 80032dc:	18fb      	adds	r3, r7, r3
 80032de:	8819      	ldrh	r1, [r3, #0]
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	2300      	movs	r3, #0
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	0023      	movs	r3, r4
 80032e8:	f000 f9f4 	bl	80036d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d197      	bne.n	8003226 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	0018      	movs	r0, r3
 80032fe:	f000 f8c7 	bl	8003490 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003302:	1e03      	subs	r3, r0, #0
 8003304:	d001      	beq.n	800330a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e01a      	b.n	8003340 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2220      	movs	r2, #32
 8003310:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	490b      	ldr	r1, [pc, #44]	; (800334c <HAL_I2C_Master_Receive+0x20c>)
 800331e:	400a      	ands	r2, r1
 8003320:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2241      	movs	r2, #65	; 0x41
 8003326:	2120      	movs	r1, #32
 8003328:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2242      	movs	r2, #66	; 0x42
 800332e:	2100      	movs	r1, #0
 8003330:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2240      	movs	r2, #64	; 0x40
 8003336:	2100      	movs	r1, #0
 8003338:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800333a:	2300      	movs	r3, #0
 800333c:	e000      	b.n	8003340 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800333e:	2302      	movs	r3, #2
  }
}
 8003340:	0018      	movs	r0, r3
 8003342:	46bd      	mov	sp, r7
 8003344:	b007      	add	sp, #28
 8003346:	bd90      	pop	{r4, r7, pc}
 8003348:	80002400 	.word	0x80002400
 800334c:	fe00e800 	.word	0xfe00e800

08003350 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	2202      	movs	r2, #2
 8003360:	4013      	ands	r3, r2
 8003362:	2b02      	cmp	r3, #2
 8003364:	d103      	bne.n	800336e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2200      	movs	r2, #0
 800336c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	2201      	movs	r2, #1
 8003376:	4013      	ands	r3, r2
 8003378:	2b01      	cmp	r3, #1
 800337a:	d007      	beq.n	800338c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699a      	ldr	r2, [r3, #24]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2101      	movs	r1, #1
 8003388:	430a      	orrs	r2, r1
 800338a:	619a      	str	r2, [r3, #24]
  }
}
 800338c:	46c0      	nop			; (mov r8, r8)
 800338e:	46bd      	mov	sp, r7
 8003390:	b002      	add	sp, #8
 8003392:	bd80      	pop	{r7, pc}

08003394 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	603b      	str	r3, [r7, #0]
 80033a0:	1dfb      	adds	r3, r7, #7
 80033a2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033a4:	e021      	b.n	80033ea <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	3301      	adds	r3, #1
 80033aa:	d01e      	beq.n	80033ea <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ac:	f7fe fc06 	bl	8001bbc <HAL_GetTick>
 80033b0:	0002      	movs	r2, r0
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d302      	bcc.n	80033c2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d113      	bne.n	80033ea <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c6:	2220      	movs	r2, #32
 80033c8:	431a      	orrs	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2241      	movs	r2, #65	; 0x41
 80033d2:	2120      	movs	r1, #32
 80033d4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2242      	movs	r2, #66	; 0x42
 80033da:	2100      	movs	r1, #0
 80033dc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2240      	movs	r2, #64	; 0x40
 80033e2:	2100      	movs	r1, #0
 80033e4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e00f      	b.n	800340a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	4013      	ands	r3, r2
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	425a      	negs	r2, r3
 80033fa:	4153      	adcs	r3, r2
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	001a      	movs	r2, r3
 8003400:	1dfb      	adds	r3, r7, #7
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	429a      	cmp	r2, r3
 8003406:	d0ce      	beq.n	80033a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	0018      	movs	r0, r3
 800340c:	46bd      	mov	sp, r7
 800340e:	b004      	add	sp, #16
 8003410:	bd80      	pop	{r7, pc}

08003412 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b084      	sub	sp, #16
 8003416:	af00      	add	r7, sp, #0
 8003418:	60f8      	str	r0, [r7, #12]
 800341a:	60b9      	str	r1, [r7, #8]
 800341c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800341e:	e02b      	b.n	8003478 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	68b9      	ldr	r1, [r7, #8]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	0018      	movs	r0, r3
 8003428:	f000 f8da 	bl	80035e0 <I2C_IsAcknowledgeFailed>
 800342c:	1e03      	subs	r3, r0, #0
 800342e:	d001      	beq.n	8003434 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e029      	b.n	8003488 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	3301      	adds	r3, #1
 8003438:	d01e      	beq.n	8003478 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800343a:	f7fe fbbf 	bl	8001bbc <HAL_GetTick>
 800343e:	0002      	movs	r2, r0
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	68ba      	ldr	r2, [r7, #8]
 8003446:	429a      	cmp	r2, r3
 8003448:	d302      	bcc.n	8003450 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d113      	bne.n	8003478 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003454:	2220      	movs	r2, #32
 8003456:	431a      	orrs	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2241      	movs	r2, #65	; 0x41
 8003460:	2120      	movs	r1, #32
 8003462:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2242      	movs	r2, #66	; 0x42
 8003468:	2100      	movs	r1, #0
 800346a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2240      	movs	r2, #64	; 0x40
 8003470:	2100      	movs	r1, #0
 8003472:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e007      	b.n	8003488 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	2202      	movs	r2, #2
 8003480:	4013      	ands	r3, r2
 8003482:	2b02      	cmp	r3, #2
 8003484:	d1cc      	bne.n	8003420 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	0018      	movs	r0, r3
 800348a:	46bd      	mov	sp, r7
 800348c:	b004      	add	sp, #16
 800348e:	bd80      	pop	{r7, pc}

08003490 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800349c:	e028      	b.n	80034f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	68b9      	ldr	r1, [r7, #8]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	0018      	movs	r0, r3
 80034a6:	f000 f89b 	bl	80035e0 <I2C_IsAcknowledgeFailed>
 80034aa:	1e03      	subs	r3, r0, #0
 80034ac:	d001      	beq.n	80034b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e026      	b.n	8003500 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034b2:	f7fe fb83 	bl	8001bbc <HAL_GetTick>
 80034b6:	0002      	movs	r2, r0
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	68ba      	ldr	r2, [r7, #8]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d302      	bcc.n	80034c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d113      	bne.n	80034f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034cc:	2220      	movs	r2, #32
 80034ce:	431a      	orrs	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2241      	movs	r2, #65	; 0x41
 80034d8:	2120      	movs	r1, #32
 80034da:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2242      	movs	r2, #66	; 0x42
 80034e0:	2100      	movs	r1, #0
 80034e2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2240      	movs	r2, #64	; 0x40
 80034e8:	2100      	movs	r1, #0
 80034ea:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e007      	b.n	8003500 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	2220      	movs	r2, #32
 80034f8:	4013      	ands	r3, r2
 80034fa:	2b20      	cmp	r3, #32
 80034fc:	d1cf      	bne.n	800349e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	0018      	movs	r0, r3
 8003502:	46bd      	mov	sp, r7
 8003504:	b004      	add	sp, #16
 8003506:	bd80      	pop	{r7, pc}

08003508 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003514:	e055      	b.n	80035c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	68b9      	ldr	r1, [r7, #8]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	0018      	movs	r0, r3
 800351e:	f000 f85f 	bl	80035e0 <I2C_IsAcknowledgeFailed>
 8003522:	1e03      	subs	r3, r0, #0
 8003524:	d001      	beq.n	800352a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e053      	b.n	80035d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	2220      	movs	r2, #32
 8003532:	4013      	ands	r3, r2
 8003534:	2b20      	cmp	r3, #32
 8003536:	d129      	bne.n	800358c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	2204      	movs	r2, #4
 8003540:	4013      	ands	r3, r2
 8003542:	2b04      	cmp	r3, #4
 8003544:	d105      	bne.n	8003552 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800354e:	2300      	movs	r3, #0
 8003550:	e03f      	b.n	80035d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2220      	movs	r2, #32
 8003558:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	491d      	ldr	r1, [pc, #116]	; (80035dc <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003566:	400a      	ands	r2, r1
 8003568:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2241      	movs	r2, #65	; 0x41
 8003574:	2120      	movs	r1, #32
 8003576:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2242      	movs	r2, #66	; 0x42
 800357c:	2100      	movs	r1, #0
 800357e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2240      	movs	r2, #64	; 0x40
 8003584:	2100      	movs	r1, #0
 8003586:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e022      	b.n	80035d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800358c:	f7fe fb16 	bl	8001bbc <HAL_GetTick>
 8003590:	0002      	movs	r2, r0
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	68ba      	ldr	r2, [r7, #8]
 8003598:	429a      	cmp	r2, r3
 800359a:	d302      	bcc.n	80035a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d10f      	bne.n	80035c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a6:	2220      	movs	r2, #32
 80035a8:	431a      	orrs	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2241      	movs	r2, #65	; 0x41
 80035b2:	2120      	movs	r1, #32
 80035b4:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2240      	movs	r2, #64	; 0x40
 80035ba:	2100      	movs	r1, #0
 80035bc:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e007      	b.n	80035d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	2204      	movs	r2, #4
 80035ca:	4013      	ands	r3, r2
 80035cc:	2b04      	cmp	r3, #4
 80035ce:	d1a2      	bne.n	8003516 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	0018      	movs	r0, r3
 80035d4:	46bd      	mov	sp, r7
 80035d6:	b004      	add	sp, #16
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	46c0      	nop			; (mov r8, r8)
 80035dc:	fe00e800 	.word	0xfe00e800

080035e0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	2210      	movs	r2, #16
 80035f4:	4013      	ands	r3, r2
 80035f6:	2b10      	cmp	r3, #16
 80035f8:	d164      	bne.n	80036c4 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	2380      	movs	r3, #128	; 0x80
 8003602:	049b      	lsls	r3, r3, #18
 8003604:	401a      	ands	r2, r3
 8003606:	2380      	movs	r3, #128	; 0x80
 8003608:	049b      	lsls	r3, r3, #18
 800360a:	429a      	cmp	r2, r3
 800360c:	d02b      	beq.n	8003666 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2180      	movs	r1, #128	; 0x80
 800361a:	01c9      	lsls	r1, r1, #7
 800361c:	430a      	orrs	r2, r1
 800361e:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003620:	e021      	b.n	8003666 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	3301      	adds	r3, #1
 8003626:	d01e      	beq.n	8003666 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003628:	f7fe fac8 	bl	8001bbc <HAL_GetTick>
 800362c:	0002      	movs	r2, r0
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	68ba      	ldr	r2, [r7, #8]
 8003634:	429a      	cmp	r2, r3
 8003636:	d302      	bcc.n	800363e <I2C_IsAcknowledgeFailed+0x5e>
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d113      	bne.n	8003666 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003642:	2220      	movs	r2, #32
 8003644:	431a      	orrs	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2241      	movs	r2, #65	; 0x41
 800364e:	2120      	movs	r1, #32
 8003650:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2242      	movs	r2, #66	; 0x42
 8003656:	2100      	movs	r1, #0
 8003658:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2240      	movs	r2, #64	; 0x40
 800365e:	2100      	movs	r1, #0
 8003660:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e02f      	b.n	80036c6 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	2220      	movs	r2, #32
 800366e:	4013      	ands	r3, r2
 8003670:	2b20      	cmp	r3, #32
 8003672:	d1d6      	bne.n	8003622 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2210      	movs	r2, #16
 800367a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2220      	movs	r2, #32
 8003682:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	0018      	movs	r0, r3
 8003688:	f7ff fe62 	bl	8003350 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	490e      	ldr	r1, [pc, #56]	; (80036d0 <I2C_IsAcknowledgeFailed+0xf0>)
 8003698:	400a      	ands	r2, r1
 800369a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a0:	2204      	movs	r2, #4
 80036a2:	431a      	orrs	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2241      	movs	r2, #65	; 0x41
 80036ac:	2120      	movs	r1, #32
 80036ae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2242      	movs	r2, #66	; 0x42
 80036b4:	2100      	movs	r1, #0
 80036b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2240      	movs	r2, #64	; 0x40
 80036bc:	2100      	movs	r1, #0
 80036be:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e000      	b.n	80036c6 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	0018      	movs	r0, r3
 80036c8:	46bd      	mov	sp, r7
 80036ca:	b004      	add	sp, #16
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	46c0      	nop			; (mov r8, r8)
 80036d0:	fe00e800 	.word	0xfe00e800

080036d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80036d4:	b590      	push	{r4, r7, lr}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	0008      	movs	r0, r1
 80036de:	0011      	movs	r1, r2
 80036e0:	607b      	str	r3, [r7, #4]
 80036e2:	240a      	movs	r4, #10
 80036e4:	193b      	adds	r3, r7, r4
 80036e6:	1c02      	adds	r2, r0, #0
 80036e8:	801a      	strh	r2, [r3, #0]
 80036ea:	2009      	movs	r0, #9
 80036ec:	183b      	adds	r3, r7, r0
 80036ee:	1c0a      	adds	r2, r1, #0
 80036f0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	6a3a      	ldr	r2, [r7, #32]
 80036fa:	0d51      	lsrs	r1, r2, #21
 80036fc:	2280      	movs	r2, #128	; 0x80
 80036fe:	00d2      	lsls	r2, r2, #3
 8003700:	400a      	ands	r2, r1
 8003702:	490e      	ldr	r1, [pc, #56]	; (800373c <I2C_TransferConfig+0x68>)
 8003704:	430a      	orrs	r2, r1
 8003706:	43d2      	mvns	r2, r2
 8003708:	401a      	ands	r2, r3
 800370a:	0011      	movs	r1, r2
 800370c:	193b      	adds	r3, r7, r4
 800370e:	881b      	ldrh	r3, [r3, #0]
 8003710:	059b      	lsls	r3, r3, #22
 8003712:	0d9a      	lsrs	r2, r3, #22
 8003714:	183b      	adds	r3, r7, r0
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	0418      	lsls	r0, r3, #16
 800371a:	23ff      	movs	r3, #255	; 0xff
 800371c:	041b      	lsls	r3, r3, #16
 800371e:	4003      	ands	r3, r0
 8003720:	431a      	orrs	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	431a      	orrs	r2, r3
 8003726:	6a3b      	ldr	r3, [r7, #32]
 8003728:	431a      	orrs	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8003732:	46c0      	nop			; (mov r8, r8)
 8003734:	46bd      	mov	sp, r7
 8003736:	b005      	add	sp, #20
 8003738:	bd90      	pop	{r4, r7, pc}
 800373a:	46c0      	nop			; (mov r8, r8)
 800373c:	03ff63ff 	.word	0x03ff63ff

08003740 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2241      	movs	r2, #65	; 0x41
 800374e:	5c9b      	ldrb	r3, [r3, r2]
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b20      	cmp	r3, #32
 8003754:	d138      	bne.n	80037c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2240      	movs	r2, #64	; 0x40
 800375a:	5c9b      	ldrb	r3, [r3, r2]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d101      	bne.n	8003764 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003760:	2302      	movs	r3, #2
 8003762:	e032      	b.n	80037ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2240      	movs	r2, #64	; 0x40
 8003768:	2101      	movs	r1, #1
 800376a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2241      	movs	r2, #65	; 0x41
 8003770:	2124      	movs	r1, #36	; 0x24
 8003772:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2101      	movs	r1, #1
 8003780:	438a      	bics	r2, r1
 8003782:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4911      	ldr	r1, [pc, #68]	; (80037d4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003790:	400a      	ands	r2, r1
 8003792:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6819      	ldr	r1, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2101      	movs	r1, #1
 80037b0:	430a      	orrs	r2, r1
 80037b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2241      	movs	r2, #65	; 0x41
 80037b8:	2120      	movs	r1, #32
 80037ba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2240      	movs	r2, #64	; 0x40
 80037c0:	2100      	movs	r1, #0
 80037c2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80037c4:	2300      	movs	r3, #0
 80037c6:	e000      	b.n	80037ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80037c8:	2302      	movs	r3, #2
  }
}
 80037ca:	0018      	movs	r0, r3
 80037cc:	46bd      	mov	sp, r7
 80037ce:	b002      	add	sp, #8
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	46c0      	nop			; (mov r8, r8)
 80037d4:	ffffefff 	.word	0xffffefff

080037d8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2241      	movs	r2, #65	; 0x41
 80037e6:	5c9b      	ldrb	r3, [r3, r2]
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b20      	cmp	r3, #32
 80037ec:	d139      	bne.n	8003862 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2240      	movs	r2, #64	; 0x40
 80037f2:	5c9b      	ldrb	r3, [r3, r2]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d101      	bne.n	80037fc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80037f8:	2302      	movs	r3, #2
 80037fa:	e033      	b.n	8003864 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2240      	movs	r2, #64	; 0x40
 8003800:	2101      	movs	r1, #1
 8003802:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2241      	movs	r2, #65	; 0x41
 8003808:	2124      	movs	r1, #36	; 0x24
 800380a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2101      	movs	r1, #1
 8003818:	438a      	bics	r2, r1
 800381a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	4a11      	ldr	r2, [pc, #68]	; (800386c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003828:	4013      	ands	r3, r2
 800382a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	021b      	lsls	r3, r3, #8
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	4313      	orrs	r3, r2
 8003834:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2101      	movs	r1, #1
 800384a:	430a      	orrs	r2, r1
 800384c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2241      	movs	r2, #65	; 0x41
 8003852:	2120      	movs	r1, #32
 8003854:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2240      	movs	r2, #64	; 0x40
 800385a:	2100      	movs	r1, #0
 800385c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800385e:	2300      	movs	r3, #0
 8003860:	e000      	b.n	8003864 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003862:	2302      	movs	r3, #2
  }
}
 8003864:	0018      	movs	r0, r3
 8003866:	46bd      	mov	sp, r7
 8003868:	b004      	add	sp, #16
 800386a:	bd80      	pop	{r7, pc}
 800386c:	fffff0ff 	.word	0xfffff0ff

08003870 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI:Enter STOP mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter STOP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	000a      	movs	r2, r1
 800387a:	1cfb      	adds	r3, r7, #3
 800387c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
 800387e:	2300      	movs	r3, #0
 8003880:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8003882:	4b13      	ldr	r3, [pc, #76]	; (80038d0 <HAL_PWR_EnterSTOPMode+0x60>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	60fb      	str	r3, [r7, #12]
  
  /* Clear PDDS and LPDS bits */
  tmpreg &= (uint32_t)~(PWR_CR_PDDS | PWR_CR_LPDS);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2203      	movs	r2, #3
 800388c:	4393      	bics	r3, r2
 800388e:	60fb      	str	r3, [r7, #12]

  /* Set LPDS bit according to Regulator value */
  tmpreg |= Regulator;
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4313      	orrs	r3, r2
 8003896:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 8003898:	4b0d      	ldr	r3, [pc, #52]	; (80038d0 <HAL_PWR_EnterSTOPMode+0x60>)
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 800389e:	4b0d      	ldr	r3, [pc, #52]	; (80038d4 <HAL_PWR_EnterSTOPMode+0x64>)
 80038a0:	691a      	ldr	r2, [r3, #16]
 80038a2:	4b0c      	ldr	r3, [pc, #48]	; (80038d4 <HAL_PWR_EnterSTOPMode+0x64>)
 80038a4:	2104      	movs	r1, #4
 80038a6:	430a      	orrs	r2, r1
 80038a8:	611a      	str	r2, [r3, #16]

  /* Select STOP mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80038aa:	1cfb      	adds	r3, r7, #3
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d101      	bne.n	80038b6 <HAL_PWR_EnterSTOPMode+0x46>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80038b2:	bf30      	wfi
 80038b4:	e002      	b.n	80038bc <HAL_PWR_EnterSTOPMode+0x4c>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80038b6:	bf40      	sev
    __WFE();
 80038b8:	bf20      	wfe
    __WFE();
 80038ba:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 80038bc:	4b05      	ldr	r3, [pc, #20]	; (80038d4 <HAL_PWR_EnterSTOPMode+0x64>)
 80038be:	691a      	ldr	r2, [r3, #16]
 80038c0:	4b04      	ldr	r3, [pc, #16]	; (80038d4 <HAL_PWR_EnterSTOPMode+0x64>)
 80038c2:	2104      	movs	r1, #4
 80038c4:	438a      	bics	r2, r1
 80038c6:	611a      	str	r2, [r3, #16]
}
 80038c8:	46c0      	nop			; (mov r8, r8)
 80038ca:	46bd      	mov	sp, r7
 80038cc:	b004      	add	sp, #16
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40007000 	.word	0x40007000
 80038d4:	e000ed00 	.word	0xe000ed00

080038d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b088      	sub	sp, #32
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e301      	b.n	8003eee <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2201      	movs	r2, #1
 80038f0:	4013      	ands	r3, r2
 80038f2:	d100      	bne.n	80038f6 <HAL_RCC_OscConfig+0x1e>
 80038f4:	e08d      	b.n	8003a12 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80038f6:	4bc3      	ldr	r3, [pc, #780]	; (8003c04 <HAL_RCC_OscConfig+0x32c>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	220c      	movs	r2, #12
 80038fc:	4013      	ands	r3, r2
 80038fe:	2b04      	cmp	r3, #4
 8003900:	d00e      	beq.n	8003920 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003902:	4bc0      	ldr	r3, [pc, #768]	; (8003c04 <HAL_RCC_OscConfig+0x32c>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	220c      	movs	r2, #12
 8003908:	4013      	ands	r3, r2
 800390a:	2b08      	cmp	r3, #8
 800390c:	d116      	bne.n	800393c <HAL_RCC_OscConfig+0x64>
 800390e:	4bbd      	ldr	r3, [pc, #756]	; (8003c04 <HAL_RCC_OscConfig+0x32c>)
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	2380      	movs	r3, #128	; 0x80
 8003914:	025b      	lsls	r3, r3, #9
 8003916:	401a      	ands	r2, r3
 8003918:	2380      	movs	r3, #128	; 0x80
 800391a:	025b      	lsls	r3, r3, #9
 800391c:	429a      	cmp	r2, r3
 800391e:	d10d      	bne.n	800393c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003920:	4bb8      	ldr	r3, [pc, #736]	; (8003c04 <HAL_RCC_OscConfig+0x32c>)
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	2380      	movs	r3, #128	; 0x80
 8003926:	029b      	lsls	r3, r3, #10
 8003928:	4013      	ands	r3, r2
 800392a:	d100      	bne.n	800392e <HAL_RCC_OscConfig+0x56>
 800392c:	e070      	b.n	8003a10 <HAL_RCC_OscConfig+0x138>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d000      	beq.n	8003938 <HAL_RCC_OscConfig+0x60>
 8003936:	e06b      	b.n	8003a10 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e2d8      	b.n	8003eee <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d107      	bne.n	8003954 <HAL_RCC_OscConfig+0x7c>
 8003944:	4baf      	ldr	r3, [pc, #700]	; (8003c04 <HAL_RCC_OscConfig+0x32c>)
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	4bae      	ldr	r3, [pc, #696]	; (8003c04 <HAL_RCC_OscConfig+0x32c>)
 800394a:	2180      	movs	r1, #128	; 0x80
 800394c:	0249      	lsls	r1, r1, #9
 800394e:	430a      	orrs	r2, r1
 8003950:	601a      	str	r2, [r3, #0]
 8003952:	e02f      	b.n	80039b4 <HAL_RCC_OscConfig+0xdc>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d10c      	bne.n	8003976 <HAL_RCC_OscConfig+0x9e>
 800395c:	4ba9      	ldr	r3, [pc, #676]	; (8003c04 <HAL_RCC_OscConfig+0x32c>)
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	4ba8      	ldr	r3, [pc, #672]	; (8003c04 <HAL_RCC_OscConfig+0x32c>)
 8003962:	49a9      	ldr	r1, [pc, #676]	; (8003c08 <HAL_RCC_OscConfig+0x330>)
 8003964:	400a      	ands	r2, r1
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	4ba6      	ldr	r3, [pc, #664]	; (8003c04 <HAL_RCC_OscConfig+0x32c>)
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	4ba5      	ldr	r3, [pc, #660]	; (8003c04 <HAL_RCC_OscConfig+0x32c>)
 800396e:	49a7      	ldr	r1, [pc, #668]	; (8003c0c <HAL_RCC_OscConfig+0x334>)
 8003970:	400a      	ands	r2, r1
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	e01e      	b.n	80039b4 <HAL_RCC_OscConfig+0xdc>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	2b05      	cmp	r3, #5
 800397c:	d10e      	bne.n	800399c <HAL_RCC_OscConfig+0xc4>
 800397e:	4ba1      	ldr	r3, [pc, #644]	; (8003c04 <HAL_RCC_OscConfig+0x32c>)
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	4ba0      	ldr	r3, [pc, #640]	; (8003c04 <HAL_RCC_OscConfig+0x32c>)
 8003984:	2180      	movs	r1, #128	; 0x80
 8003986:	02c9      	lsls	r1, r1, #11
 8003988:	430a      	orrs	r2, r1
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	4b9d      	ldr	r3, [pc, #628]	; (8003c04 <HAL_RCC_OscConfig+0x32c>)
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	4b9c      	ldr	r3, [pc, #624]	; (8003c04 <HAL_RCC_OscConfig+0x32c>)
 8003992:	2180      	movs	r1, #128	; 0x80
 8003994:	0249      	lsls	r1, r1, #9
 8003996:	430a      	orrs	r2, r1
 8003998:	601a      	str	r2, [r3, #0]
 800399a:	e00b      	b.n	80039b4 <HAL_RCC_OscConfig+0xdc>
 800399c:	4b99      	ldr	r3, [pc, #612]	; (8003c04 <HAL_RCC_OscConfig+0x32c>)
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	4b98      	ldr	r3, [pc, #608]	; (8003c04 <HAL_RCC_OscConfig+0x32c>)
 80039a2:	4999      	ldr	r1, [pc, #612]	; (8003c08 <HAL_RCC_OscConfig+0x330>)
 80039a4:	400a      	ands	r2, r1
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	4b96      	ldr	r3, [pc, #600]	; (8003c04 <HAL_RCC_OscConfig+0x32c>)
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	4b95      	ldr	r3, [pc, #596]	; (8003c04 <HAL_RCC_OscConfig+0x32c>)
 80039ae:	4997      	ldr	r1, [pc, #604]	; (8003c0c <HAL_RCC_OscConfig+0x334>)
 80039b0:	400a      	ands	r2, r1
 80039b2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d014      	beq.n	80039e6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039bc:	f7fe f8fe 	bl	8001bbc <HAL_GetTick>
 80039c0:	0003      	movs	r3, r0
 80039c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039c4:	e008      	b.n	80039d8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039c6:	f7fe f8f9 	bl	8001bbc <HAL_GetTick>
 80039ca:	0002      	movs	r2, r0
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	2b64      	cmp	r3, #100	; 0x64
 80039d2:	d901      	bls.n	80039d8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e28a      	b.n	8003eee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039d8:	4b8a      	ldr	r3, [pc, #552]	; (8003c04 <HAL_RCC_OscConfig+0x32c>)
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	2380      	movs	r3, #128	; 0x80
 80039de:	029b      	lsls	r3, r3, #10
 80039e0:	4013      	ands	r3, r2
 80039e2:	d0f0      	beq.n	80039c6 <HAL_RCC_OscConfig+0xee>
 80039e4:	e015      	b.n	8003a12 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e6:	f7fe f8e9 	bl	8001bbc <HAL_GetTick>
 80039ea:	0003      	movs	r3, r0
 80039ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039f0:	f7fe f8e4 	bl	8001bbc <HAL_GetTick>
 80039f4:	0002      	movs	r2, r0
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b64      	cmp	r3, #100	; 0x64
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e275      	b.n	8003eee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a02:	4b80      	ldr	r3, [pc, #512]	; (8003c04 <HAL_RCC_OscConfig+0x32c>)
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	2380      	movs	r3, #128	; 0x80
 8003a08:	029b      	lsls	r3, r3, #10
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	d1f0      	bne.n	80039f0 <HAL_RCC_OscConfig+0x118>
 8003a0e:	e000      	b.n	8003a12 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a10:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2202      	movs	r2, #2
 8003a18:	4013      	ands	r3, r2
 8003a1a:	d100      	bne.n	8003a1e <HAL_RCC_OscConfig+0x146>
 8003a1c:	e069      	b.n	8003af2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003a1e:	4b79      	ldr	r3, [pc, #484]	; (8003c04 <HAL_RCC_OscConfig+0x32c>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	220c      	movs	r2, #12
 8003a24:	4013      	ands	r3, r2
 8003a26:	d00b      	beq.n	8003a40 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003a28:	4b76      	ldr	r3, [pc, #472]	; (8003c04 <HAL_RCC_OscConfig+0x32c>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	220c      	movs	r2, #12
 8003a2e:	4013      	ands	r3, r2
 8003a30:	2b08      	cmp	r3, #8
 8003a32:	d11c      	bne.n	8003a6e <HAL_RCC_OscConfig+0x196>
 8003a34:	4b73      	ldr	r3, [pc, #460]	; (8003c04 <HAL_RCC_OscConfig+0x32c>)
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	2380      	movs	r3, #128	; 0x80
 8003a3a:	025b      	lsls	r3, r3, #9
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	d116      	bne.n	8003a6e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a40:	4b70      	ldr	r3, [pc, #448]	; (8003c04 <HAL_RCC_OscConfig+0x32c>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2202      	movs	r2, #2
 8003a46:	4013      	ands	r3, r2
 8003a48:	d005      	beq.n	8003a56 <HAL_RCC_OscConfig+0x17e>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d001      	beq.n	8003a56 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e24b      	b.n	8003eee <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a56:	4b6b      	ldr	r3, [pc, #428]	; (8003c04 <HAL_RCC_OscConfig+0x32c>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	22f8      	movs	r2, #248	; 0xf8
 8003a5c:	4393      	bics	r3, r2
 8003a5e:	0019      	movs	r1, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	00da      	lsls	r2, r3, #3
 8003a66:	4b67      	ldr	r3, [pc, #412]	; (8003c04 <HAL_RCC_OscConfig+0x32c>)
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a6c:	e041      	b.n	8003af2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d024      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a76:	4b63      	ldr	r3, [pc, #396]	; (8003c04 <HAL_RCC_OscConfig+0x32c>)
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	4b62      	ldr	r3, [pc, #392]	; (8003c04 <HAL_RCC_OscConfig+0x32c>)
 8003a7c:	2101      	movs	r1, #1
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a82:	f7fe f89b 	bl	8001bbc <HAL_GetTick>
 8003a86:	0003      	movs	r3, r0
 8003a88:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a8c:	f7fe f896 	bl	8001bbc <HAL_GetTick>
 8003a90:	0002      	movs	r2, r0
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e227      	b.n	8003eee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a9e:	4b59      	ldr	r3, [pc, #356]	; (8003c04 <HAL_RCC_OscConfig+0x32c>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	d0f1      	beq.n	8003a8c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aa8:	4b56      	ldr	r3, [pc, #344]	; (8003c04 <HAL_RCC_OscConfig+0x32c>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	22f8      	movs	r2, #248	; 0xf8
 8003aae:	4393      	bics	r3, r2
 8003ab0:	0019      	movs	r1, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	00da      	lsls	r2, r3, #3
 8003ab8:	4b52      	ldr	r3, [pc, #328]	; (8003c04 <HAL_RCC_OscConfig+0x32c>)
 8003aba:	430a      	orrs	r2, r1
 8003abc:	601a      	str	r2, [r3, #0]
 8003abe:	e018      	b.n	8003af2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ac0:	4b50      	ldr	r3, [pc, #320]	; (8003c04 <HAL_RCC_OscConfig+0x32c>)
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	4b4f      	ldr	r3, [pc, #316]	; (8003c04 <HAL_RCC_OscConfig+0x32c>)
 8003ac6:	2101      	movs	r1, #1
 8003ac8:	438a      	bics	r2, r1
 8003aca:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003acc:	f7fe f876 	bl	8001bbc <HAL_GetTick>
 8003ad0:	0003      	movs	r3, r0
 8003ad2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ad4:	e008      	b.n	8003ae8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ad6:	f7fe f871 	bl	8001bbc <HAL_GetTick>
 8003ada:	0002      	movs	r2, r0
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e202      	b.n	8003eee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ae8:	4b46      	ldr	r3, [pc, #280]	; (8003c04 <HAL_RCC_OscConfig+0x32c>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2202      	movs	r2, #2
 8003aee:	4013      	ands	r3, r2
 8003af0:	d1f1      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2208      	movs	r2, #8
 8003af8:	4013      	ands	r3, r2
 8003afa:	d036      	beq.n	8003b6a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	69db      	ldr	r3, [r3, #28]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d019      	beq.n	8003b38 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b04:	4b3f      	ldr	r3, [pc, #252]	; (8003c04 <HAL_RCC_OscConfig+0x32c>)
 8003b06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b08:	4b3e      	ldr	r3, [pc, #248]	; (8003c04 <HAL_RCC_OscConfig+0x32c>)
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b10:	f7fe f854 	bl	8001bbc <HAL_GetTick>
 8003b14:	0003      	movs	r3, r0
 8003b16:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b18:	e008      	b.n	8003b2c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b1a:	f7fe f84f 	bl	8001bbc <HAL_GetTick>
 8003b1e:	0002      	movs	r2, r0
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d901      	bls.n	8003b2c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e1e0      	b.n	8003eee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b2c:	4b35      	ldr	r3, [pc, #212]	; (8003c04 <HAL_RCC_OscConfig+0x32c>)
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	2202      	movs	r2, #2
 8003b32:	4013      	ands	r3, r2
 8003b34:	d0f1      	beq.n	8003b1a <HAL_RCC_OscConfig+0x242>
 8003b36:	e018      	b.n	8003b6a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b38:	4b32      	ldr	r3, [pc, #200]	; (8003c04 <HAL_RCC_OscConfig+0x32c>)
 8003b3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b3c:	4b31      	ldr	r3, [pc, #196]	; (8003c04 <HAL_RCC_OscConfig+0x32c>)
 8003b3e:	2101      	movs	r1, #1
 8003b40:	438a      	bics	r2, r1
 8003b42:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b44:	f7fe f83a 	bl	8001bbc <HAL_GetTick>
 8003b48:	0003      	movs	r3, r0
 8003b4a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b4c:	e008      	b.n	8003b60 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b4e:	f7fe f835 	bl	8001bbc <HAL_GetTick>
 8003b52:	0002      	movs	r2, r0
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e1c6      	b.n	8003eee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b60:	4b28      	ldr	r3, [pc, #160]	; (8003c04 <HAL_RCC_OscConfig+0x32c>)
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	2202      	movs	r2, #2
 8003b66:	4013      	ands	r3, r2
 8003b68:	d1f1      	bne.n	8003b4e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2204      	movs	r2, #4
 8003b70:	4013      	ands	r3, r2
 8003b72:	d100      	bne.n	8003b76 <HAL_RCC_OscConfig+0x29e>
 8003b74:	e0b4      	b.n	8003ce0 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b76:	201f      	movs	r0, #31
 8003b78:	183b      	adds	r3, r7, r0
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b7e:	4b21      	ldr	r3, [pc, #132]	; (8003c04 <HAL_RCC_OscConfig+0x32c>)
 8003b80:	69da      	ldr	r2, [r3, #28]
 8003b82:	2380      	movs	r3, #128	; 0x80
 8003b84:	055b      	lsls	r3, r3, #21
 8003b86:	4013      	ands	r3, r2
 8003b88:	d110      	bne.n	8003bac <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b8a:	4b1e      	ldr	r3, [pc, #120]	; (8003c04 <HAL_RCC_OscConfig+0x32c>)
 8003b8c:	69da      	ldr	r2, [r3, #28]
 8003b8e:	4b1d      	ldr	r3, [pc, #116]	; (8003c04 <HAL_RCC_OscConfig+0x32c>)
 8003b90:	2180      	movs	r1, #128	; 0x80
 8003b92:	0549      	lsls	r1, r1, #21
 8003b94:	430a      	orrs	r2, r1
 8003b96:	61da      	str	r2, [r3, #28]
 8003b98:	4b1a      	ldr	r3, [pc, #104]	; (8003c04 <HAL_RCC_OscConfig+0x32c>)
 8003b9a:	69da      	ldr	r2, [r3, #28]
 8003b9c:	2380      	movs	r3, #128	; 0x80
 8003b9e:	055b      	lsls	r3, r3, #21
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	60fb      	str	r3, [r7, #12]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003ba6:	183b      	adds	r3, r7, r0
 8003ba8:	2201      	movs	r2, #1
 8003baa:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bac:	4b18      	ldr	r3, [pc, #96]	; (8003c10 <HAL_RCC_OscConfig+0x338>)
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	2380      	movs	r3, #128	; 0x80
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	d11a      	bne.n	8003bee <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bb8:	4b15      	ldr	r3, [pc, #84]	; (8003c10 <HAL_RCC_OscConfig+0x338>)
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	4b14      	ldr	r3, [pc, #80]	; (8003c10 <HAL_RCC_OscConfig+0x338>)
 8003bbe:	2180      	movs	r1, #128	; 0x80
 8003bc0:	0049      	lsls	r1, r1, #1
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bc6:	f7fd fff9 	bl	8001bbc <HAL_GetTick>
 8003bca:	0003      	movs	r3, r0
 8003bcc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bd0:	f7fd fff4 	bl	8001bbc <HAL_GetTick>
 8003bd4:	0002      	movs	r2, r0
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b64      	cmp	r3, #100	; 0x64
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e185      	b.n	8003eee <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be2:	4b0b      	ldr	r3, [pc, #44]	; (8003c10 <HAL_RCC_OscConfig+0x338>)
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	2380      	movs	r3, #128	; 0x80
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	4013      	ands	r3, r2
 8003bec:	d0f0      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d10e      	bne.n	8003c14 <HAL_RCC_OscConfig+0x33c>
 8003bf6:	4b03      	ldr	r3, [pc, #12]	; (8003c04 <HAL_RCC_OscConfig+0x32c>)
 8003bf8:	6a1a      	ldr	r2, [r3, #32]
 8003bfa:	4b02      	ldr	r3, [pc, #8]	; (8003c04 <HAL_RCC_OscConfig+0x32c>)
 8003bfc:	2101      	movs	r1, #1
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	621a      	str	r2, [r3, #32]
 8003c02:	e035      	b.n	8003c70 <HAL_RCC_OscConfig+0x398>
 8003c04:	40021000 	.word	0x40021000
 8003c08:	fffeffff 	.word	0xfffeffff
 8003c0c:	fffbffff 	.word	0xfffbffff
 8003c10:	40007000 	.word	0x40007000
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10c      	bne.n	8003c36 <HAL_RCC_OscConfig+0x35e>
 8003c1c:	4bb6      	ldr	r3, [pc, #728]	; (8003ef8 <HAL_RCC_OscConfig+0x620>)
 8003c1e:	6a1a      	ldr	r2, [r3, #32]
 8003c20:	4bb5      	ldr	r3, [pc, #724]	; (8003ef8 <HAL_RCC_OscConfig+0x620>)
 8003c22:	2101      	movs	r1, #1
 8003c24:	438a      	bics	r2, r1
 8003c26:	621a      	str	r2, [r3, #32]
 8003c28:	4bb3      	ldr	r3, [pc, #716]	; (8003ef8 <HAL_RCC_OscConfig+0x620>)
 8003c2a:	6a1a      	ldr	r2, [r3, #32]
 8003c2c:	4bb2      	ldr	r3, [pc, #712]	; (8003ef8 <HAL_RCC_OscConfig+0x620>)
 8003c2e:	2104      	movs	r1, #4
 8003c30:	438a      	bics	r2, r1
 8003c32:	621a      	str	r2, [r3, #32]
 8003c34:	e01c      	b.n	8003c70 <HAL_RCC_OscConfig+0x398>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	2b05      	cmp	r3, #5
 8003c3c:	d10c      	bne.n	8003c58 <HAL_RCC_OscConfig+0x380>
 8003c3e:	4bae      	ldr	r3, [pc, #696]	; (8003ef8 <HAL_RCC_OscConfig+0x620>)
 8003c40:	6a1a      	ldr	r2, [r3, #32]
 8003c42:	4bad      	ldr	r3, [pc, #692]	; (8003ef8 <HAL_RCC_OscConfig+0x620>)
 8003c44:	2104      	movs	r1, #4
 8003c46:	430a      	orrs	r2, r1
 8003c48:	621a      	str	r2, [r3, #32]
 8003c4a:	4bab      	ldr	r3, [pc, #684]	; (8003ef8 <HAL_RCC_OscConfig+0x620>)
 8003c4c:	6a1a      	ldr	r2, [r3, #32]
 8003c4e:	4baa      	ldr	r3, [pc, #680]	; (8003ef8 <HAL_RCC_OscConfig+0x620>)
 8003c50:	2101      	movs	r1, #1
 8003c52:	430a      	orrs	r2, r1
 8003c54:	621a      	str	r2, [r3, #32]
 8003c56:	e00b      	b.n	8003c70 <HAL_RCC_OscConfig+0x398>
 8003c58:	4ba7      	ldr	r3, [pc, #668]	; (8003ef8 <HAL_RCC_OscConfig+0x620>)
 8003c5a:	6a1a      	ldr	r2, [r3, #32]
 8003c5c:	4ba6      	ldr	r3, [pc, #664]	; (8003ef8 <HAL_RCC_OscConfig+0x620>)
 8003c5e:	2101      	movs	r1, #1
 8003c60:	438a      	bics	r2, r1
 8003c62:	621a      	str	r2, [r3, #32]
 8003c64:	4ba4      	ldr	r3, [pc, #656]	; (8003ef8 <HAL_RCC_OscConfig+0x620>)
 8003c66:	6a1a      	ldr	r2, [r3, #32]
 8003c68:	4ba3      	ldr	r3, [pc, #652]	; (8003ef8 <HAL_RCC_OscConfig+0x620>)
 8003c6a:	2104      	movs	r1, #4
 8003c6c:	438a      	bics	r2, r1
 8003c6e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d014      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c78:	f7fd ffa0 	bl	8001bbc <HAL_GetTick>
 8003c7c:	0003      	movs	r3, r0
 8003c7e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c80:	e009      	b.n	8003c96 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c82:	f7fd ff9b 	bl	8001bbc <HAL_GetTick>
 8003c86:	0002      	movs	r2, r0
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	4a9b      	ldr	r2, [pc, #620]	; (8003efc <HAL_RCC_OscConfig+0x624>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e12b      	b.n	8003eee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c96:	4b98      	ldr	r3, [pc, #608]	; (8003ef8 <HAL_RCC_OscConfig+0x620>)
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	d0f0      	beq.n	8003c82 <HAL_RCC_OscConfig+0x3aa>
 8003ca0:	e013      	b.n	8003cca <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ca2:	f7fd ff8b 	bl	8001bbc <HAL_GetTick>
 8003ca6:	0003      	movs	r3, r0
 8003ca8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003caa:	e009      	b.n	8003cc0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cac:	f7fd ff86 	bl	8001bbc <HAL_GetTick>
 8003cb0:	0002      	movs	r2, r0
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	4a91      	ldr	r2, [pc, #580]	; (8003efc <HAL_RCC_OscConfig+0x624>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e116      	b.n	8003eee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cc0:	4b8d      	ldr	r3, [pc, #564]	; (8003ef8 <HAL_RCC_OscConfig+0x620>)
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	2202      	movs	r2, #2
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	d1f0      	bne.n	8003cac <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003cca:	231f      	movs	r3, #31
 8003ccc:	18fb      	adds	r3, r7, r3
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d105      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cd4:	4b88      	ldr	r3, [pc, #544]	; (8003ef8 <HAL_RCC_OscConfig+0x620>)
 8003cd6:	69da      	ldr	r2, [r3, #28]
 8003cd8:	4b87      	ldr	r3, [pc, #540]	; (8003ef8 <HAL_RCC_OscConfig+0x620>)
 8003cda:	4989      	ldr	r1, [pc, #548]	; (8003f00 <HAL_RCC_OscConfig+0x628>)
 8003cdc:	400a      	ands	r2, r1
 8003cde:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2210      	movs	r2, #16
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	d063      	beq.n	8003db2 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d12a      	bne.n	8003d48 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003cf2:	4b81      	ldr	r3, [pc, #516]	; (8003ef8 <HAL_RCC_OscConfig+0x620>)
 8003cf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cf6:	4b80      	ldr	r3, [pc, #512]	; (8003ef8 <HAL_RCC_OscConfig+0x620>)
 8003cf8:	2104      	movs	r1, #4
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003cfe:	4b7e      	ldr	r3, [pc, #504]	; (8003ef8 <HAL_RCC_OscConfig+0x620>)
 8003d00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d02:	4b7d      	ldr	r3, [pc, #500]	; (8003ef8 <HAL_RCC_OscConfig+0x620>)
 8003d04:	2101      	movs	r1, #1
 8003d06:	430a      	orrs	r2, r1
 8003d08:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d0a:	f7fd ff57 	bl	8001bbc <HAL_GetTick>
 8003d0e:	0003      	movs	r3, r0
 8003d10:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003d14:	f7fd ff52 	bl	8001bbc <HAL_GetTick>
 8003d18:	0002      	movs	r2, r0
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e0e3      	b.n	8003eee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003d26:	4b74      	ldr	r3, [pc, #464]	; (8003ef8 <HAL_RCC_OscConfig+0x620>)
 8003d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	d0f1      	beq.n	8003d14 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003d30:	4b71      	ldr	r3, [pc, #452]	; (8003ef8 <HAL_RCC_OscConfig+0x620>)
 8003d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d34:	22f8      	movs	r2, #248	; 0xf8
 8003d36:	4393      	bics	r3, r2
 8003d38:	0019      	movs	r1, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	00da      	lsls	r2, r3, #3
 8003d40:	4b6d      	ldr	r3, [pc, #436]	; (8003ef8 <HAL_RCC_OscConfig+0x620>)
 8003d42:	430a      	orrs	r2, r1
 8003d44:	635a      	str	r2, [r3, #52]	; 0x34
 8003d46:	e034      	b.n	8003db2 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	3305      	adds	r3, #5
 8003d4e:	d111      	bne.n	8003d74 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003d50:	4b69      	ldr	r3, [pc, #420]	; (8003ef8 <HAL_RCC_OscConfig+0x620>)
 8003d52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d54:	4b68      	ldr	r3, [pc, #416]	; (8003ef8 <HAL_RCC_OscConfig+0x620>)
 8003d56:	2104      	movs	r1, #4
 8003d58:	438a      	bics	r2, r1
 8003d5a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003d5c:	4b66      	ldr	r3, [pc, #408]	; (8003ef8 <HAL_RCC_OscConfig+0x620>)
 8003d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d60:	22f8      	movs	r2, #248	; 0xf8
 8003d62:	4393      	bics	r3, r2
 8003d64:	0019      	movs	r1, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	00da      	lsls	r2, r3, #3
 8003d6c:	4b62      	ldr	r3, [pc, #392]	; (8003ef8 <HAL_RCC_OscConfig+0x620>)
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	635a      	str	r2, [r3, #52]	; 0x34
 8003d72:	e01e      	b.n	8003db2 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003d74:	4b60      	ldr	r3, [pc, #384]	; (8003ef8 <HAL_RCC_OscConfig+0x620>)
 8003d76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d78:	4b5f      	ldr	r3, [pc, #380]	; (8003ef8 <HAL_RCC_OscConfig+0x620>)
 8003d7a:	2104      	movs	r1, #4
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003d80:	4b5d      	ldr	r3, [pc, #372]	; (8003ef8 <HAL_RCC_OscConfig+0x620>)
 8003d82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d84:	4b5c      	ldr	r3, [pc, #368]	; (8003ef8 <HAL_RCC_OscConfig+0x620>)
 8003d86:	2101      	movs	r1, #1
 8003d88:	438a      	bics	r2, r1
 8003d8a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d8c:	f7fd ff16 	bl	8001bbc <HAL_GetTick>
 8003d90:	0003      	movs	r3, r0
 8003d92:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003d94:	e008      	b.n	8003da8 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003d96:	f7fd ff11 	bl	8001bbc <HAL_GetTick>
 8003d9a:	0002      	movs	r2, r0
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d901      	bls.n	8003da8 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e0a2      	b.n	8003eee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003da8:	4b53      	ldr	r3, [pc, #332]	; (8003ef8 <HAL_RCC_OscConfig+0x620>)
 8003daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dac:	2202      	movs	r2, #2
 8003dae:	4013      	ands	r3, r2
 8003db0:	d1f1      	bne.n	8003d96 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d100      	bne.n	8003dbc <HAL_RCC_OscConfig+0x4e4>
 8003dba:	e097      	b.n	8003eec <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003dbc:	4b4e      	ldr	r3, [pc, #312]	; (8003ef8 <HAL_RCC_OscConfig+0x620>)
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	220c      	movs	r2, #12
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	2b08      	cmp	r3, #8
 8003dc6:	d100      	bne.n	8003dca <HAL_RCC_OscConfig+0x4f2>
 8003dc8:	e06b      	b.n	8003ea2 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d14c      	bne.n	8003e6c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dd2:	4b49      	ldr	r3, [pc, #292]	; (8003ef8 <HAL_RCC_OscConfig+0x620>)
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	4b48      	ldr	r3, [pc, #288]	; (8003ef8 <HAL_RCC_OscConfig+0x620>)
 8003dd8:	494a      	ldr	r1, [pc, #296]	; (8003f04 <HAL_RCC_OscConfig+0x62c>)
 8003dda:	400a      	ands	r2, r1
 8003ddc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dde:	f7fd feed 	bl	8001bbc <HAL_GetTick>
 8003de2:	0003      	movs	r3, r0
 8003de4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003de8:	f7fd fee8 	bl	8001bbc <HAL_GetTick>
 8003dec:	0002      	movs	r2, r0
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e079      	b.n	8003eee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dfa:	4b3f      	ldr	r3, [pc, #252]	; (8003ef8 <HAL_RCC_OscConfig+0x620>)
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	2380      	movs	r3, #128	; 0x80
 8003e00:	049b      	lsls	r3, r3, #18
 8003e02:	4013      	ands	r3, r2
 8003e04:	d1f0      	bne.n	8003de8 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e06:	4b3c      	ldr	r3, [pc, #240]	; (8003ef8 <HAL_RCC_OscConfig+0x620>)
 8003e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0a:	220f      	movs	r2, #15
 8003e0c:	4393      	bics	r3, r2
 8003e0e:	0019      	movs	r1, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e14:	4b38      	ldr	r3, [pc, #224]	; (8003ef8 <HAL_RCC_OscConfig+0x620>)
 8003e16:	430a      	orrs	r2, r1
 8003e18:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e1a:	4b37      	ldr	r3, [pc, #220]	; (8003ef8 <HAL_RCC_OscConfig+0x620>)
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	4a3a      	ldr	r2, [pc, #232]	; (8003f08 <HAL_RCC_OscConfig+0x630>)
 8003e20:	4013      	ands	r3, r2
 8003e22:	0019      	movs	r1, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	4b32      	ldr	r3, [pc, #200]	; (8003ef8 <HAL_RCC_OscConfig+0x620>)
 8003e30:	430a      	orrs	r2, r1
 8003e32:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e34:	4b30      	ldr	r3, [pc, #192]	; (8003ef8 <HAL_RCC_OscConfig+0x620>)
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	4b2f      	ldr	r3, [pc, #188]	; (8003ef8 <HAL_RCC_OscConfig+0x620>)
 8003e3a:	2180      	movs	r1, #128	; 0x80
 8003e3c:	0449      	lsls	r1, r1, #17
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e42:	f7fd febb 	bl	8001bbc <HAL_GetTick>
 8003e46:	0003      	movs	r3, r0
 8003e48:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e4c:	f7fd feb6 	bl	8001bbc <HAL_GetTick>
 8003e50:	0002      	movs	r2, r0
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e047      	b.n	8003eee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e5e:	4b26      	ldr	r3, [pc, #152]	; (8003ef8 <HAL_RCC_OscConfig+0x620>)
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	2380      	movs	r3, #128	; 0x80
 8003e64:	049b      	lsls	r3, r3, #18
 8003e66:	4013      	ands	r3, r2
 8003e68:	d0f0      	beq.n	8003e4c <HAL_RCC_OscConfig+0x574>
 8003e6a:	e03f      	b.n	8003eec <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e6c:	4b22      	ldr	r3, [pc, #136]	; (8003ef8 <HAL_RCC_OscConfig+0x620>)
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	4b21      	ldr	r3, [pc, #132]	; (8003ef8 <HAL_RCC_OscConfig+0x620>)
 8003e72:	4924      	ldr	r1, [pc, #144]	; (8003f04 <HAL_RCC_OscConfig+0x62c>)
 8003e74:	400a      	ands	r2, r1
 8003e76:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e78:	f7fd fea0 	bl	8001bbc <HAL_GetTick>
 8003e7c:	0003      	movs	r3, r0
 8003e7e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e80:	e008      	b.n	8003e94 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e82:	f7fd fe9b 	bl	8001bbc <HAL_GetTick>
 8003e86:	0002      	movs	r2, r0
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d901      	bls.n	8003e94 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e02c      	b.n	8003eee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e94:	4b18      	ldr	r3, [pc, #96]	; (8003ef8 <HAL_RCC_OscConfig+0x620>)
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	2380      	movs	r3, #128	; 0x80
 8003e9a:	049b      	lsls	r3, r3, #18
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	d1f0      	bne.n	8003e82 <HAL_RCC_OscConfig+0x5aa>
 8003ea0:	e024      	b.n	8003eec <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d101      	bne.n	8003eae <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e01f      	b.n	8003eee <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003eae:	4b12      	ldr	r3, [pc, #72]	; (8003ef8 <HAL_RCC_OscConfig+0x620>)
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003eb4:	4b10      	ldr	r3, [pc, #64]	; (8003ef8 <HAL_RCC_OscConfig+0x620>)
 8003eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	2380      	movs	r3, #128	; 0x80
 8003ebe:	025b      	lsls	r3, r3, #9
 8003ec0:	401a      	ands	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d10e      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	220f      	movs	r2, #15
 8003ece:	401a      	ands	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d107      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	23f0      	movs	r3, #240	; 0xf0
 8003edc:	039b      	lsls	r3, r3, #14
 8003ede:	401a      	ands	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d001      	beq.n	8003eec <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e000      	b.n	8003eee <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	0018      	movs	r0, r3
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	b008      	add	sp, #32
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	46c0      	nop			; (mov r8, r8)
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	00001388 	.word	0x00001388
 8003f00:	efffffff 	.word	0xefffffff
 8003f04:	feffffff 	.word	0xfeffffff
 8003f08:	ffc2ffff 	.word	0xffc2ffff

08003f0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d101      	bne.n	8003f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e0b3      	b.n	8004088 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f20:	4b5b      	ldr	r3, [pc, #364]	; (8004090 <HAL_RCC_ClockConfig+0x184>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2201      	movs	r2, #1
 8003f26:	4013      	ands	r3, r2
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d911      	bls.n	8003f52 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f2e:	4b58      	ldr	r3, [pc, #352]	; (8004090 <HAL_RCC_ClockConfig+0x184>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2201      	movs	r2, #1
 8003f34:	4393      	bics	r3, r2
 8003f36:	0019      	movs	r1, r3
 8003f38:	4b55      	ldr	r3, [pc, #340]	; (8004090 <HAL_RCC_ClockConfig+0x184>)
 8003f3a:	683a      	ldr	r2, [r7, #0]
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f40:	4b53      	ldr	r3, [pc, #332]	; (8004090 <HAL_RCC_ClockConfig+0x184>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2201      	movs	r2, #1
 8003f46:	4013      	ands	r3, r2
 8003f48:	683a      	ldr	r2, [r7, #0]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d001      	beq.n	8003f52 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e09a      	b.n	8004088 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2202      	movs	r2, #2
 8003f58:	4013      	ands	r3, r2
 8003f5a:	d015      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2204      	movs	r2, #4
 8003f62:	4013      	ands	r3, r2
 8003f64:	d006      	beq.n	8003f74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003f66:	4b4b      	ldr	r3, [pc, #300]	; (8004094 <HAL_RCC_ClockConfig+0x188>)
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	4b4a      	ldr	r3, [pc, #296]	; (8004094 <HAL_RCC_ClockConfig+0x188>)
 8003f6c:	21e0      	movs	r1, #224	; 0xe0
 8003f6e:	00c9      	lsls	r1, r1, #3
 8003f70:	430a      	orrs	r2, r1
 8003f72:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f74:	4b47      	ldr	r3, [pc, #284]	; (8004094 <HAL_RCC_ClockConfig+0x188>)
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	22f0      	movs	r2, #240	; 0xf0
 8003f7a:	4393      	bics	r3, r2
 8003f7c:	0019      	movs	r1, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	689a      	ldr	r2, [r3, #8]
 8003f82:	4b44      	ldr	r3, [pc, #272]	; (8004094 <HAL_RCC_ClockConfig+0x188>)
 8003f84:	430a      	orrs	r2, r1
 8003f86:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	4013      	ands	r3, r2
 8003f90:	d040      	beq.n	8004014 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d107      	bne.n	8003faa <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f9a:	4b3e      	ldr	r3, [pc, #248]	; (8004094 <HAL_RCC_ClockConfig+0x188>)
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	2380      	movs	r3, #128	; 0x80
 8003fa0:	029b      	lsls	r3, r3, #10
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	d114      	bne.n	8003fd0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e06e      	b.n	8004088 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d107      	bne.n	8003fc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fb2:	4b38      	ldr	r3, [pc, #224]	; (8004094 <HAL_RCC_ClockConfig+0x188>)
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	2380      	movs	r3, #128	; 0x80
 8003fb8:	049b      	lsls	r3, r3, #18
 8003fba:	4013      	ands	r3, r2
 8003fbc:	d108      	bne.n	8003fd0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e062      	b.n	8004088 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fc2:	4b34      	ldr	r3, [pc, #208]	; (8004094 <HAL_RCC_ClockConfig+0x188>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	4013      	ands	r3, r2
 8003fca:	d101      	bne.n	8003fd0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e05b      	b.n	8004088 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fd0:	4b30      	ldr	r3, [pc, #192]	; (8004094 <HAL_RCC_ClockConfig+0x188>)
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	2203      	movs	r2, #3
 8003fd6:	4393      	bics	r3, r2
 8003fd8:	0019      	movs	r1, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	4b2d      	ldr	r3, [pc, #180]	; (8004094 <HAL_RCC_ClockConfig+0x188>)
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fe4:	f7fd fdea 	bl	8001bbc <HAL_GetTick>
 8003fe8:	0003      	movs	r3, r0
 8003fea:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fec:	e009      	b.n	8004002 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fee:	f7fd fde5 	bl	8001bbc <HAL_GetTick>
 8003ff2:	0002      	movs	r2, r0
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	4a27      	ldr	r2, [pc, #156]	; (8004098 <HAL_RCC_ClockConfig+0x18c>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e042      	b.n	8004088 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004002:	4b24      	ldr	r3, [pc, #144]	; (8004094 <HAL_RCC_ClockConfig+0x188>)
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	220c      	movs	r2, #12
 8004008:	401a      	ands	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	429a      	cmp	r2, r3
 8004012:	d1ec      	bne.n	8003fee <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004014:	4b1e      	ldr	r3, [pc, #120]	; (8004090 <HAL_RCC_ClockConfig+0x184>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2201      	movs	r2, #1
 800401a:	4013      	ands	r3, r2
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	429a      	cmp	r2, r3
 8004020:	d211      	bcs.n	8004046 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004022:	4b1b      	ldr	r3, [pc, #108]	; (8004090 <HAL_RCC_ClockConfig+0x184>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2201      	movs	r2, #1
 8004028:	4393      	bics	r3, r2
 800402a:	0019      	movs	r1, r3
 800402c:	4b18      	ldr	r3, [pc, #96]	; (8004090 <HAL_RCC_ClockConfig+0x184>)
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	430a      	orrs	r2, r1
 8004032:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004034:	4b16      	ldr	r3, [pc, #88]	; (8004090 <HAL_RCC_ClockConfig+0x184>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2201      	movs	r2, #1
 800403a:	4013      	ands	r3, r2
 800403c:	683a      	ldr	r2, [r7, #0]
 800403e:	429a      	cmp	r2, r3
 8004040:	d001      	beq.n	8004046 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e020      	b.n	8004088 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2204      	movs	r2, #4
 800404c:	4013      	ands	r3, r2
 800404e:	d009      	beq.n	8004064 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004050:	4b10      	ldr	r3, [pc, #64]	; (8004094 <HAL_RCC_ClockConfig+0x188>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	4a11      	ldr	r2, [pc, #68]	; (800409c <HAL_RCC_ClockConfig+0x190>)
 8004056:	4013      	ands	r3, r2
 8004058:	0019      	movs	r1, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68da      	ldr	r2, [r3, #12]
 800405e:	4b0d      	ldr	r3, [pc, #52]	; (8004094 <HAL_RCC_ClockConfig+0x188>)
 8004060:	430a      	orrs	r2, r1
 8004062:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004064:	f000 f820 	bl	80040a8 <HAL_RCC_GetSysClockFreq>
 8004068:	0001      	movs	r1, r0
 800406a:	4b0a      	ldr	r3, [pc, #40]	; (8004094 <HAL_RCC_ClockConfig+0x188>)
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	091b      	lsrs	r3, r3, #4
 8004070:	220f      	movs	r2, #15
 8004072:	4013      	ands	r3, r2
 8004074:	4a0a      	ldr	r2, [pc, #40]	; (80040a0 <HAL_RCC_ClockConfig+0x194>)
 8004076:	5cd3      	ldrb	r3, [r2, r3]
 8004078:	000a      	movs	r2, r1
 800407a:	40da      	lsrs	r2, r3
 800407c:	4b09      	ldr	r3, [pc, #36]	; (80040a4 <HAL_RCC_ClockConfig+0x198>)
 800407e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004080:	2003      	movs	r0, #3
 8004082:	f7fd fd55 	bl	8001b30 <HAL_InitTick>
  
  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	0018      	movs	r0, r3
 800408a:	46bd      	mov	sp, r7
 800408c:	b004      	add	sp, #16
 800408e:	bd80      	pop	{r7, pc}
 8004090:	40022000 	.word	0x40022000
 8004094:	40021000 	.word	0x40021000
 8004098:	00001388 	.word	0x00001388
 800409c:	fffff8ff 	.word	0xfffff8ff
 80040a0:	08006890 	.word	0x08006890
 80040a4:	2000001c 	.word	0x2000001c

080040a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040a8:	b590      	push	{r4, r7, lr}
 80040aa:	b08f      	sub	sp, #60	; 0x3c
 80040ac:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80040ae:	2314      	movs	r3, #20
 80040b0:	18fb      	adds	r3, r7, r3
 80040b2:	4a2b      	ldr	r2, [pc, #172]	; (8004160 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040b4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80040b6:	c313      	stmia	r3!, {r0, r1, r4}
 80040b8:	6812      	ldr	r2, [r2, #0]
 80040ba:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80040bc:	1d3b      	adds	r3, r7, #4
 80040be:	4a29      	ldr	r2, [pc, #164]	; (8004164 <HAL_RCC_GetSysClockFreq+0xbc>)
 80040c0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80040c2:	c313      	stmia	r3!, {r0, r1, r4}
 80040c4:	6812      	ldr	r2, [r2, #0]
 80040c6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80040c8:	2300      	movs	r3, #0
 80040ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040cc:	2300      	movs	r3, #0
 80040ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80040d0:	2300      	movs	r3, #0
 80040d2:	637b      	str	r3, [r7, #52]	; 0x34
 80040d4:	2300      	movs	r3, #0
 80040d6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80040d8:	2300      	movs	r3, #0
 80040da:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80040dc:	4b22      	ldr	r3, [pc, #136]	; (8004168 <HAL_RCC_GetSysClockFreq+0xc0>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80040e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e4:	220c      	movs	r2, #12
 80040e6:	4013      	ands	r3, r2
 80040e8:	2b04      	cmp	r3, #4
 80040ea:	d002      	beq.n	80040f2 <HAL_RCC_GetSysClockFreq+0x4a>
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	d003      	beq.n	80040f8 <HAL_RCC_GetSysClockFreq+0x50>
 80040f0:	e02d      	b.n	800414e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80040f2:	4b1e      	ldr	r3, [pc, #120]	; (800416c <HAL_RCC_GetSysClockFreq+0xc4>)
 80040f4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80040f6:	e02d      	b.n	8004154 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80040f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040fa:	0c9b      	lsrs	r3, r3, #18
 80040fc:	220f      	movs	r2, #15
 80040fe:	4013      	ands	r3, r2
 8004100:	2214      	movs	r2, #20
 8004102:	18ba      	adds	r2, r7, r2
 8004104:	5cd3      	ldrb	r3, [r2, r3]
 8004106:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004108:	4b17      	ldr	r3, [pc, #92]	; (8004168 <HAL_RCC_GetSysClockFreq+0xc0>)
 800410a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410c:	220f      	movs	r2, #15
 800410e:	4013      	ands	r3, r2
 8004110:	1d3a      	adds	r2, r7, #4
 8004112:	5cd3      	ldrb	r3, [r2, r3]
 8004114:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004116:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004118:	2380      	movs	r3, #128	; 0x80
 800411a:	025b      	lsls	r3, r3, #9
 800411c:	4013      	ands	r3, r2
 800411e:	d009      	beq.n	8004134 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004120:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004122:	4812      	ldr	r0, [pc, #72]	; (800416c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004124:	f7fb fff0 	bl	8000108 <__udivsi3>
 8004128:	0003      	movs	r3, r0
 800412a:	001a      	movs	r2, r3
 800412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412e:	4353      	muls	r3, r2
 8004130:	637b      	str	r3, [r7, #52]	; 0x34
 8004132:	e009      	b.n	8004148 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004134:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004136:	000a      	movs	r2, r1
 8004138:	0152      	lsls	r2, r2, #5
 800413a:	1a52      	subs	r2, r2, r1
 800413c:	0193      	lsls	r3, r2, #6
 800413e:	1a9b      	subs	r3, r3, r2
 8004140:	00db      	lsls	r3, r3, #3
 8004142:	185b      	adds	r3, r3, r1
 8004144:	021b      	lsls	r3, r3, #8
 8004146:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8004148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800414a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800414c:	e002      	b.n	8004154 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800414e:	4b07      	ldr	r3, [pc, #28]	; (800416c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004150:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004152:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004156:	0018      	movs	r0, r3
 8004158:	46bd      	mov	sp, r7
 800415a:	b00f      	add	sp, #60	; 0x3c
 800415c:	bd90      	pop	{r4, r7, pc}
 800415e:	46c0      	nop			; (mov r8, r8)
 8004160:	08006724 	.word	0x08006724
 8004164:	08006734 	.word	0x08006734
 8004168:	40021000 	.word	0x40021000
 800416c:	007a1200 	.word	0x007a1200

08004170 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004174:	4b02      	ldr	r3, [pc, #8]	; (8004180 <HAL_RCC_GetHCLKFreq+0x10>)
 8004176:	681b      	ldr	r3, [r3, #0]
}
 8004178:	0018      	movs	r0, r3
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	46c0      	nop			; (mov r8, r8)
 8004180:	2000001c 	.word	0x2000001c

08004184 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004188:	f7ff fff2 	bl	8004170 <HAL_RCC_GetHCLKFreq>
 800418c:	0001      	movs	r1, r0
 800418e:	4b06      	ldr	r3, [pc, #24]	; (80041a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	0a1b      	lsrs	r3, r3, #8
 8004194:	2207      	movs	r2, #7
 8004196:	4013      	ands	r3, r2
 8004198:	4a04      	ldr	r2, [pc, #16]	; (80041ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800419a:	5cd3      	ldrb	r3, [r2, r3]
 800419c:	40d9      	lsrs	r1, r3
 800419e:	000b      	movs	r3, r1
}    
 80041a0:	0018      	movs	r0, r3
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	46c0      	nop			; (mov r8, r8)
 80041a8:	40021000 	.word	0x40021000
 80041ac:	080068a0 	.word	0x080068a0

080041b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041b8:	2300      	movs	r3, #0
 80041ba:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80041bc:	2300      	movs	r3, #0
 80041be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	2380      	movs	r3, #128	; 0x80
 80041c6:	025b      	lsls	r3, r3, #9
 80041c8:	4013      	ands	r3, r2
 80041ca:	d100      	bne.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80041cc:	e08e      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80041ce:	2017      	movs	r0, #23
 80041d0:	183b      	adds	r3, r7, r0
 80041d2:	2200      	movs	r2, #0
 80041d4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041d6:	4b5f      	ldr	r3, [pc, #380]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80041d8:	69da      	ldr	r2, [r3, #28]
 80041da:	2380      	movs	r3, #128	; 0x80
 80041dc:	055b      	lsls	r3, r3, #21
 80041de:	4013      	ands	r3, r2
 80041e0:	d110      	bne.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80041e2:	4b5c      	ldr	r3, [pc, #368]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80041e4:	69da      	ldr	r2, [r3, #28]
 80041e6:	4b5b      	ldr	r3, [pc, #364]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80041e8:	2180      	movs	r1, #128	; 0x80
 80041ea:	0549      	lsls	r1, r1, #21
 80041ec:	430a      	orrs	r2, r1
 80041ee:	61da      	str	r2, [r3, #28]
 80041f0:	4b58      	ldr	r3, [pc, #352]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80041f2:	69da      	ldr	r2, [r3, #28]
 80041f4:	2380      	movs	r3, #128	; 0x80
 80041f6:	055b      	lsls	r3, r3, #21
 80041f8:	4013      	ands	r3, r2
 80041fa:	60bb      	str	r3, [r7, #8]
 80041fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041fe:	183b      	adds	r3, r7, r0
 8004200:	2201      	movs	r2, #1
 8004202:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004204:	4b54      	ldr	r3, [pc, #336]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	2380      	movs	r3, #128	; 0x80
 800420a:	005b      	lsls	r3, r3, #1
 800420c:	4013      	ands	r3, r2
 800420e:	d11a      	bne.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004210:	4b51      	ldr	r3, [pc, #324]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	4b50      	ldr	r3, [pc, #320]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004216:	2180      	movs	r1, #128	; 0x80
 8004218:	0049      	lsls	r1, r1, #1
 800421a:	430a      	orrs	r2, r1
 800421c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800421e:	f7fd fccd 	bl	8001bbc <HAL_GetTick>
 8004222:	0003      	movs	r3, r0
 8004224:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004226:	e008      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004228:	f7fd fcc8 	bl	8001bbc <HAL_GetTick>
 800422c:	0002      	movs	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b64      	cmp	r3, #100	; 0x64
 8004234:	d901      	bls.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e087      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800423a:	4b47      	ldr	r3, [pc, #284]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	2380      	movs	r3, #128	; 0x80
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	4013      	ands	r3, r2
 8004244:	d0f0      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004246:	4b43      	ldr	r3, [pc, #268]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004248:	6a1a      	ldr	r2, [r3, #32]
 800424a:	23c0      	movs	r3, #192	; 0xc0
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	4013      	ands	r3, r2
 8004250:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d034      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	23c0      	movs	r3, #192	; 0xc0
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4013      	ands	r3, r2
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	429a      	cmp	r2, r3
 8004266:	d02c      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004268:	4b3a      	ldr	r3, [pc, #232]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800426a:	6a1b      	ldr	r3, [r3, #32]
 800426c:	4a3b      	ldr	r2, [pc, #236]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800426e:	4013      	ands	r3, r2
 8004270:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004272:	4b38      	ldr	r3, [pc, #224]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004274:	6a1a      	ldr	r2, [r3, #32]
 8004276:	4b37      	ldr	r3, [pc, #220]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004278:	2180      	movs	r1, #128	; 0x80
 800427a:	0249      	lsls	r1, r1, #9
 800427c:	430a      	orrs	r2, r1
 800427e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004280:	4b34      	ldr	r3, [pc, #208]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004282:	6a1a      	ldr	r2, [r3, #32]
 8004284:	4b33      	ldr	r3, [pc, #204]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004286:	4936      	ldr	r1, [pc, #216]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004288:	400a      	ands	r2, r1
 800428a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800428c:	4b31      	ldr	r3, [pc, #196]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2201      	movs	r2, #1
 8004296:	4013      	ands	r3, r2
 8004298:	d013      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800429a:	f7fd fc8f 	bl	8001bbc <HAL_GetTick>
 800429e:	0003      	movs	r3, r0
 80042a0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042a2:	e009      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042a4:	f7fd fc8a 	bl	8001bbc <HAL_GetTick>
 80042a8:	0002      	movs	r2, r0
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	4a2d      	ldr	r2, [pc, #180]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d901      	bls.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e048      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042b8:	4b26      	ldr	r3, [pc, #152]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	2202      	movs	r2, #2
 80042be:	4013      	ands	r3, r2
 80042c0:	d0f0      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042c2:	4b24      	ldr	r3, [pc, #144]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	4a25      	ldr	r2, [pc, #148]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042c8:	4013      	ands	r3, r2
 80042ca:	0019      	movs	r1, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685a      	ldr	r2, [r3, #4]
 80042d0:	4b20      	ldr	r3, [pc, #128]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042d2:	430a      	orrs	r2, r1
 80042d4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80042d6:	2317      	movs	r3, #23
 80042d8:	18fb      	adds	r3, r7, r3
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d105      	bne.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042e0:	4b1c      	ldr	r3, [pc, #112]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042e2:	69da      	ldr	r2, [r3, #28]
 80042e4:	4b1b      	ldr	r3, [pc, #108]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042e6:	4920      	ldr	r1, [pc, #128]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042e8:	400a      	ands	r2, r1
 80042ea:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2201      	movs	r2, #1
 80042f2:	4013      	ands	r3, r2
 80042f4:	d009      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042f6:	4b17      	ldr	r3, [pc, #92]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fa:	2203      	movs	r2, #3
 80042fc:	4393      	bics	r3, r2
 80042fe:	0019      	movs	r1, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689a      	ldr	r2, [r3, #8]
 8004304:	4b13      	ldr	r3, [pc, #76]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004306:	430a      	orrs	r2, r1
 8004308:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2220      	movs	r2, #32
 8004310:	4013      	ands	r3, r2
 8004312:	d009      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004314:	4b0f      	ldr	r3, [pc, #60]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004318:	2210      	movs	r2, #16
 800431a:	4393      	bics	r3, r2
 800431c:	0019      	movs	r1, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68da      	ldr	r2, [r3, #12]
 8004322:	4b0c      	ldr	r3, [pc, #48]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004324:	430a      	orrs	r2, r1
 8004326:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	2380      	movs	r3, #128	; 0x80
 800432e:	00db      	lsls	r3, r3, #3
 8004330:	4013      	ands	r3, r2
 8004332:	d009      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004334:	4b07      	ldr	r3, [pc, #28]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004338:	2240      	movs	r2, #64	; 0x40
 800433a:	4393      	bics	r3, r2
 800433c:	0019      	movs	r1, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691a      	ldr	r2, [r3, #16]
 8004342:	4b04      	ldr	r3, [pc, #16]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004344:	430a      	orrs	r2, r1
 8004346:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	0018      	movs	r0, r3
 800434c:	46bd      	mov	sp, r7
 800434e:	b006      	add	sp, #24
 8004350:	bd80      	pop	{r7, pc}
 8004352:	46c0      	nop			; (mov r8, r8)
 8004354:	40021000 	.word	0x40021000
 8004358:	40007000 	.word	0x40007000
 800435c:	fffffcff 	.word	0xfffffcff
 8004360:	fffeffff 	.word	0xfffeffff
 8004364:	00001388 	.word	0x00001388
 8004368:	efffffff 	.word	0xefffffff

0800436c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e0a8      	b.n	80044d0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004382:	2b00      	cmp	r3, #0
 8004384:	d109      	bne.n	800439a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685a      	ldr	r2, [r3, #4]
 800438a:	2382      	movs	r3, #130	; 0x82
 800438c:	005b      	lsls	r3, r3, #1
 800438e:	429a      	cmp	r2, r3
 8004390:	d009      	beq.n	80043a6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	61da      	str	r2, [r3, #28]
 8004398:	e005      	b.n	80043a6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	225d      	movs	r2, #93	; 0x5d
 80043b0:	5c9b      	ldrb	r3, [r3, r2]
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d107      	bne.n	80043c8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	225c      	movs	r2, #92	; 0x5c
 80043bc:	2100      	movs	r1, #0
 80043be:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	0018      	movs	r0, r3
 80043c4:	f7fd f9f4 	bl	80017b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	225d      	movs	r2, #93	; 0x5d
 80043cc:	2102      	movs	r1, #2
 80043ce:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2140      	movs	r1, #64	; 0x40
 80043dc:	438a      	bics	r2, r1
 80043de:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68da      	ldr	r2, [r3, #12]
 80043e4:	23e0      	movs	r3, #224	; 0xe0
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d902      	bls.n	80043f2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80043ec:	2300      	movs	r3, #0
 80043ee:	60fb      	str	r3, [r7, #12]
 80043f0:	e002      	b.n	80043f8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80043f2:	2380      	movs	r3, #128	; 0x80
 80043f4:	015b      	lsls	r3, r3, #5
 80043f6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	68da      	ldr	r2, [r3, #12]
 80043fc:	23f0      	movs	r3, #240	; 0xf0
 80043fe:	011b      	lsls	r3, r3, #4
 8004400:	429a      	cmp	r2, r3
 8004402:	d008      	beq.n	8004416 <HAL_SPI_Init+0xaa>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	68da      	ldr	r2, [r3, #12]
 8004408:	23e0      	movs	r3, #224	; 0xe0
 800440a:	00db      	lsls	r3, r3, #3
 800440c:	429a      	cmp	r2, r3
 800440e:	d002      	beq.n	8004416 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	2382      	movs	r3, #130	; 0x82
 800441c:	005b      	lsls	r3, r3, #1
 800441e:	401a      	ands	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6899      	ldr	r1, [r3, #8]
 8004424:	2384      	movs	r3, #132	; 0x84
 8004426:	021b      	lsls	r3, r3, #8
 8004428:	400b      	ands	r3, r1
 800442a:	431a      	orrs	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	2102      	movs	r1, #2
 8004432:	400b      	ands	r3, r1
 8004434:	431a      	orrs	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	2101      	movs	r1, #1
 800443c:	400b      	ands	r3, r1
 800443e:	431a      	orrs	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6999      	ldr	r1, [r3, #24]
 8004444:	2380      	movs	r3, #128	; 0x80
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	400b      	ands	r3, r1
 800444a:	431a      	orrs	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	69db      	ldr	r3, [r3, #28]
 8004450:	2138      	movs	r1, #56	; 0x38
 8004452:	400b      	ands	r3, r1
 8004454:	431a      	orrs	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a1b      	ldr	r3, [r3, #32]
 800445a:	2180      	movs	r1, #128	; 0x80
 800445c:	400b      	ands	r3, r1
 800445e:	431a      	orrs	r2, r3
 8004460:	0011      	movs	r1, r2
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004466:	2380      	movs	r3, #128	; 0x80
 8004468:	019b      	lsls	r3, r3, #6
 800446a:	401a      	ands	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	430a      	orrs	r2, r1
 8004472:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	0c1b      	lsrs	r3, r3, #16
 800447a:	2204      	movs	r2, #4
 800447c:	401a      	ands	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004482:	2110      	movs	r1, #16
 8004484:	400b      	ands	r3, r1
 8004486:	431a      	orrs	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800448c:	2108      	movs	r1, #8
 800448e:	400b      	ands	r3, r1
 8004490:	431a      	orrs	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	68d9      	ldr	r1, [r3, #12]
 8004496:	23f0      	movs	r3, #240	; 0xf0
 8004498:	011b      	lsls	r3, r3, #4
 800449a:	400b      	ands	r3, r1
 800449c:	431a      	orrs	r2, r3
 800449e:	0011      	movs	r1, r2
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	2380      	movs	r3, #128	; 0x80
 80044a4:	015b      	lsls	r3, r3, #5
 80044a6:	401a      	ands	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	430a      	orrs	r2, r1
 80044ae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	69da      	ldr	r2, [r3, #28]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4907      	ldr	r1, [pc, #28]	; (80044d8 <HAL_SPI_Init+0x16c>)
 80044bc:	400a      	ands	r2, r1
 80044be:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	225d      	movs	r2, #93	; 0x5d
 80044ca:	2101      	movs	r1, #1
 80044cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	0018      	movs	r0, r3
 80044d2:	46bd      	mov	sp, r7
 80044d4:	b004      	add	sp, #16
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	fffff7ff 	.word	0xfffff7ff

080044dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e042      	b.n	8004574 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	223d      	movs	r2, #61	; 0x3d
 80044f2:	5c9b      	ldrb	r3, [r3, r2]
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d107      	bne.n	800450a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	223c      	movs	r2, #60	; 0x3c
 80044fe:	2100      	movs	r1, #0
 8004500:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	0018      	movs	r0, r3
 8004506:	f7fd f9db 	bl	80018c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	223d      	movs	r2, #61	; 0x3d
 800450e:	2102      	movs	r1, #2
 8004510:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	3304      	adds	r3, #4
 800451a:	0019      	movs	r1, r3
 800451c:	0010      	movs	r0, r2
 800451e:	f000 fb37 	bl	8004b90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2246      	movs	r2, #70	; 0x46
 8004526:	2101      	movs	r1, #1
 8004528:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	223e      	movs	r2, #62	; 0x3e
 800452e:	2101      	movs	r1, #1
 8004530:	5499      	strb	r1, [r3, r2]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	223f      	movs	r2, #63	; 0x3f
 8004536:	2101      	movs	r1, #1
 8004538:	5499      	strb	r1, [r3, r2]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2240      	movs	r2, #64	; 0x40
 800453e:	2101      	movs	r1, #1
 8004540:	5499      	strb	r1, [r3, r2]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2241      	movs	r2, #65	; 0x41
 8004546:	2101      	movs	r1, #1
 8004548:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2242      	movs	r2, #66	; 0x42
 800454e:	2101      	movs	r1, #1
 8004550:	5499      	strb	r1, [r3, r2]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2243      	movs	r2, #67	; 0x43
 8004556:	2101      	movs	r1, #1
 8004558:	5499      	strb	r1, [r3, r2]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2244      	movs	r2, #68	; 0x44
 800455e:	2101      	movs	r1, #1
 8004560:	5499      	strb	r1, [r3, r2]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2245      	movs	r2, #69	; 0x45
 8004566:	2101      	movs	r1, #1
 8004568:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	223d      	movs	r2, #61	; 0x3d
 800456e:	2101      	movs	r1, #1
 8004570:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	0018      	movs	r0, r3
 8004576:	46bd      	mov	sp, r7
 8004578:	b002      	add	sp, #8
 800457a:	bd80      	pop	{r7, pc}

0800457c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004586:	230f      	movs	r3, #15
 8004588:	18fb      	adds	r3, r7, r3
 800458a:	2200      	movs	r2, #0
 800458c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d108      	bne.n	80045a6 <HAL_TIM_OC_Start_IT+0x2a>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	223e      	movs	r2, #62	; 0x3e
 8004598:	5c9b      	ldrb	r3, [r3, r2]
 800459a:	b2db      	uxtb	r3, r3
 800459c:	3b01      	subs	r3, #1
 800459e:	1e5a      	subs	r2, r3, #1
 80045a0:	4193      	sbcs	r3, r2
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	e01f      	b.n	80045e6 <HAL_TIM_OC_Start_IT+0x6a>
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b04      	cmp	r3, #4
 80045aa:	d108      	bne.n	80045be <HAL_TIM_OC_Start_IT+0x42>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	223f      	movs	r2, #63	; 0x3f
 80045b0:	5c9b      	ldrb	r3, [r3, r2]
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	3b01      	subs	r3, #1
 80045b6:	1e5a      	subs	r2, r3, #1
 80045b8:	4193      	sbcs	r3, r2
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	e013      	b.n	80045e6 <HAL_TIM_OC_Start_IT+0x6a>
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	2b08      	cmp	r3, #8
 80045c2:	d108      	bne.n	80045d6 <HAL_TIM_OC_Start_IT+0x5a>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2240      	movs	r2, #64	; 0x40
 80045c8:	5c9b      	ldrb	r3, [r3, r2]
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	3b01      	subs	r3, #1
 80045ce:	1e5a      	subs	r2, r3, #1
 80045d0:	4193      	sbcs	r3, r2
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	e007      	b.n	80045e6 <HAL_TIM_OC_Start_IT+0x6a>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2241      	movs	r2, #65	; 0x41
 80045da:	5c9b      	ldrb	r3, [r3, r2]
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	3b01      	subs	r3, #1
 80045e0:	1e5a      	subs	r2, r3, #1
 80045e2:	4193      	sbcs	r3, r2
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d001      	beq.n	80045ee <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e0b7      	b.n	800475e <HAL_TIM_OC_Start_IT+0x1e2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d104      	bne.n	80045fe <HAL_TIM_OC_Start_IT+0x82>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	223e      	movs	r2, #62	; 0x3e
 80045f8:	2102      	movs	r1, #2
 80045fa:	5499      	strb	r1, [r3, r2]
 80045fc:	e013      	b.n	8004626 <HAL_TIM_OC_Start_IT+0xaa>
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	2b04      	cmp	r3, #4
 8004602:	d104      	bne.n	800460e <HAL_TIM_OC_Start_IT+0x92>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	223f      	movs	r2, #63	; 0x3f
 8004608:	2102      	movs	r1, #2
 800460a:	5499      	strb	r1, [r3, r2]
 800460c:	e00b      	b.n	8004626 <HAL_TIM_OC_Start_IT+0xaa>
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	2b08      	cmp	r3, #8
 8004612:	d104      	bne.n	800461e <HAL_TIM_OC_Start_IT+0xa2>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2240      	movs	r2, #64	; 0x40
 8004618:	2102      	movs	r1, #2
 800461a:	5499      	strb	r1, [r3, r2]
 800461c:	e003      	b.n	8004626 <HAL_TIM_OC_Start_IT+0xaa>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2241      	movs	r2, #65	; 0x41
 8004622:	2102      	movs	r1, #2
 8004624:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2b0c      	cmp	r3, #12
 800462a:	d02a      	beq.n	8004682 <HAL_TIM_OC_Start_IT+0x106>
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	2b0c      	cmp	r3, #12
 8004630:	d830      	bhi.n	8004694 <HAL_TIM_OC_Start_IT+0x118>
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	2b08      	cmp	r3, #8
 8004636:	d01b      	beq.n	8004670 <HAL_TIM_OC_Start_IT+0xf4>
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	2b08      	cmp	r3, #8
 800463c:	d82a      	bhi.n	8004694 <HAL_TIM_OC_Start_IT+0x118>
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d003      	beq.n	800464c <HAL_TIM_OC_Start_IT+0xd0>
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	2b04      	cmp	r3, #4
 8004648:	d009      	beq.n	800465e <HAL_TIM_OC_Start_IT+0xe2>
 800464a:	e023      	b.n	8004694 <HAL_TIM_OC_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68da      	ldr	r2, [r3, #12]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2102      	movs	r1, #2
 8004658:	430a      	orrs	r2, r1
 800465a:	60da      	str	r2, [r3, #12]
      break;
 800465c:	e01f      	b.n	800469e <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68da      	ldr	r2, [r3, #12]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2104      	movs	r1, #4
 800466a:	430a      	orrs	r2, r1
 800466c:	60da      	str	r2, [r3, #12]
      break;
 800466e:	e016      	b.n	800469e <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68da      	ldr	r2, [r3, #12]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2108      	movs	r1, #8
 800467c:	430a      	orrs	r2, r1
 800467e:	60da      	str	r2, [r3, #12]
      break;
 8004680:	e00d      	b.n	800469e <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68da      	ldr	r2, [r3, #12]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2110      	movs	r1, #16
 800468e:	430a      	orrs	r2, r1
 8004690:	60da      	str	r2, [r3, #12]
      break;
 8004692:	e004      	b.n	800469e <HAL_TIM_OC_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 8004694:	230f      	movs	r3, #15
 8004696:	18fb      	adds	r3, r7, r3
 8004698:	2201      	movs	r2, #1
 800469a:	701a      	strb	r2, [r3, #0]
      break;
 800469c:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 800469e:	230f      	movs	r3, #15
 80046a0:	18fb      	adds	r3, r7, r3
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d157      	bne.n	8004758 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	6839      	ldr	r1, [r7, #0]
 80046ae:	2201      	movs	r2, #1
 80046b0:	0018      	movs	r0, r3
 80046b2:	f000 fb87 	bl	8004dc4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a2b      	ldr	r2, [pc, #172]	; (8004768 <HAL_TIM_OC_Start_IT+0x1ec>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d00e      	beq.n	80046de <HAL_TIM_OC_Start_IT+0x162>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a29      	ldr	r2, [pc, #164]	; (800476c <HAL_TIM_OC_Start_IT+0x1f0>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d009      	beq.n	80046de <HAL_TIM_OC_Start_IT+0x162>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a28      	ldr	r2, [pc, #160]	; (8004770 <HAL_TIM_OC_Start_IT+0x1f4>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d004      	beq.n	80046de <HAL_TIM_OC_Start_IT+0x162>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a26      	ldr	r2, [pc, #152]	; (8004774 <HAL_TIM_OC_Start_IT+0x1f8>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d101      	bne.n	80046e2 <HAL_TIM_OC_Start_IT+0x166>
 80046de:	2301      	movs	r3, #1
 80046e0:	e000      	b.n	80046e4 <HAL_TIM_OC_Start_IT+0x168>
 80046e2:	2300      	movs	r3, #0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d008      	beq.n	80046fa <HAL_TIM_OC_Start_IT+0x17e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2180      	movs	r1, #128	; 0x80
 80046f4:	0209      	lsls	r1, r1, #8
 80046f6:	430a      	orrs	r2, r1
 80046f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a1a      	ldr	r2, [pc, #104]	; (8004768 <HAL_TIM_OC_Start_IT+0x1ec>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d00f      	beq.n	8004724 <HAL_TIM_OC_Start_IT+0x1a8>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	2380      	movs	r3, #128	; 0x80
 800470a:	05db      	lsls	r3, r3, #23
 800470c:	429a      	cmp	r2, r3
 800470e:	d009      	beq.n	8004724 <HAL_TIM_OC_Start_IT+0x1a8>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a18      	ldr	r2, [pc, #96]	; (8004778 <HAL_TIM_OC_Start_IT+0x1fc>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d004      	beq.n	8004724 <HAL_TIM_OC_Start_IT+0x1a8>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a13      	ldr	r2, [pc, #76]	; (800476c <HAL_TIM_OC_Start_IT+0x1f0>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d111      	bne.n	8004748 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	2207      	movs	r2, #7
 800472c:	4013      	ands	r3, r2
 800472e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	2b06      	cmp	r3, #6
 8004734:	d010      	beq.n	8004758 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2101      	movs	r1, #1
 8004742:	430a      	orrs	r2, r1
 8004744:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004746:	e007      	b.n	8004758 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2101      	movs	r1, #1
 8004754:	430a      	orrs	r2, r1
 8004756:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004758:	230f      	movs	r3, #15
 800475a:	18fb      	adds	r3, r7, r3
 800475c:	781b      	ldrb	r3, [r3, #0]
}
 800475e:	0018      	movs	r0, r3
 8004760:	46bd      	mov	sp, r7
 8004762:	b004      	add	sp, #16
 8004764:	bd80      	pop	{r7, pc}
 8004766:	46c0      	nop			; (mov r8, r8)
 8004768:	40012c00 	.word	0x40012c00
 800476c:	40014000 	.word	0x40014000
 8004770:	40014400 	.word	0x40014400
 8004774:	40014800 	.word	0x40014800
 8004778:	40000400 	.word	0x40000400

0800477c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	2202      	movs	r2, #2
 800478c:	4013      	ands	r3, r2
 800478e:	2b02      	cmp	r3, #2
 8004790:	d124      	bne.n	80047dc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	2202      	movs	r2, #2
 800479a:	4013      	ands	r3, r2
 800479c:	2b02      	cmp	r3, #2
 800479e:	d11d      	bne.n	80047dc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2203      	movs	r2, #3
 80047a6:	4252      	negs	r2, r2
 80047a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2201      	movs	r2, #1
 80047ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	2203      	movs	r2, #3
 80047b8:	4013      	ands	r3, r2
 80047ba:	d004      	beq.n	80047c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	0018      	movs	r0, r3
 80047c0:	f000 f9ce 	bl	8004b60 <HAL_TIM_IC_CaptureCallback>
 80047c4:	e007      	b.n	80047d6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	0018      	movs	r0, r3
 80047ca:	f7fb fd3b 	bl	8000244 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	0018      	movs	r0, r3
 80047d2:	f000 f9cd 	bl	8004b70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	2204      	movs	r2, #4
 80047e4:	4013      	ands	r3, r2
 80047e6:	2b04      	cmp	r3, #4
 80047e8:	d125      	bne.n	8004836 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	2204      	movs	r2, #4
 80047f2:	4013      	ands	r3, r2
 80047f4:	2b04      	cmp	r3, #4
 80047f6:	d11e      	bne.n	8004836 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2205      	movs	r2, #5
 80047fe:	4252      	negs	r2, r2
 8004800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2202      	movs	r2, #2
 8004806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	699a      	ldr	r2, [r3, #24]
 800480e:	23c0      	movs	r3, #192	; 0xc0
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	4013      	ands	r3, r2
 8004814:	d004      	beq.n	8004820 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	0018      	movs	r0, r3
 800481a:	f000 f9a1 	bl	8004b60 <HAL_TIM_IC_CaptureCallback>
 800481e:	e007      	b.n	8004830 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	0018      	movs	r0, r3
 8004824:	f7fb fd0e 	bl	8000244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	0018      	movs	r0, r3
 800482c:	f000 f9a0 	bl	8004b70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	2208      	movs	r2, #8
 800483e:	4013      	ands	r3, r2
 8004840:	2b08      	cmp	r3, #8
 8004842:	d124      	bne.n	800488e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	2208      	movs	r2, #8
 800484c:	4013      	ands	r3, r2
 800484e:	2b08      	cmp	r3, #8
 8004850:	d11d      	bne.n	800488e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2209      	movs	r2, #9
 8004858:	4252      	negs	r2, r2
 800485a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2204      	movs	r2, #4
 8004860:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	69db      	ldr	r3, [r3, #28]
 8004868:	2203      	movs	r2, #3
 800486a:	4013      	ands	r3, r2
 800486c:	d004      	beq.n	8004878 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	0018      	movs	r0, r3
 8004872:	f000 f975 	bl	8004b60 <HAL_TIM_IC_CaptureCallback>
 8004876:	e007      	b.n	8004888 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	0018      	movs	r0, r3
 800487c:	f7fb fce2 	bl	8000244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	0018      	movs	r0, r3
 8004884:	f000 f974 	bl	8004b70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	2210      	movs	r2, #16
 8004896:	4013      	ands	r3, r2
 8004898:	2b10      	cmp	r3, #16
 800489a:	d125      	bne.n	80048e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	2210      	movs	r2, #16
 80048a4:	4013      	ands	r3, r2
 80048a6:	2b10      	cmp	r3, #16
 80048a8:	d11e      	bne.n	80048e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2211      	movs	r2, #17
 80048b0:	4252      	negs	r2, r2
 80048b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2208      	movs	r2, #8
 80048b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	69da      	ldr	r2, [r3, #28]
 80048c0:	23c0      	movs	r3, #192	; 0xc0
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	4013      	ands	r3, r2
 80048c6:	d004      	beq.n	80048d2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	0018      	movs	r0, r3
 80048cc:	f000 f948 	bl	8004b60 <HAL_TIM_IC_CaptureCallback>
 80048d0:	e007      	b.n	80048e2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	0018      	movs	r0, r3
 80048d6:	f7fb fcb5 	bl	8000244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	0018      	movs	r0, r3
 80048de:	f000 f947 	bl	8004b70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	2201      	movs	r2, #1
 80048f0:	4013      	ands	r3, r2
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d10f      	bne.n	8004916 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	2201      	movs	r2, #1
 80048fe:	4013      	ands	r3, r2
 8004900:	2b01      	cmp	r3, #1
 8004902:	d108      	bne.n	8004916 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2202      	movs	r2, #2
 800490a:	4252      	negs	r2, r2
 800490c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	0018      	movs	r0, r3
 8004912:	f000 f91d 	bl	8004b50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	2280      	movs	r2, #128	; 0x80
 800491e:	4013      	ands	r3, r2
 8004920:	2b80      	cmp	r3, #128	; 0x80
 8004922:	d10f      	bne.n	8004944 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	2280      	movs	r2, #128	; 0x80
 800492c:	4013      	ands	r3, r2
 800492e:	2b80      	cmp	r3, #128	; 0x80
 8004930:	d108      	bne.n	8004944 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2281      	movs	r2, #129	; 0x81
 8004938:	4252      	negs	r2, r2
 800493a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	0018      	movs	r0, r3
 8004940:	f000 faca 	bl	8004ed8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	2240      	movs	r2, #64	; 0x40
 800494c:	4013      	ands	r3, r2
 800494e:	2b40      	cmp	r3, #64	; 0x40
 8004950:	d10f      	bne.n	8004972 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	2240      	movs	r2, #64	; 0x40
 800495a:	4013      	ands	r3, r2
 800495c:	2b40      	cmp	r3, #64	; 0x40
 800495e:	d108      	bne.n	8004972 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2241      	movs	r2, #65	; 0x41
 8004966:	4252      	negs	r2, r2
 8004968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	0018      	movs	r0, r3
 800496e:	f000 f907 	bl	8004b80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	2220      	movs	r2, #32
 800497a:	4013      	ands	r3, r2
 800497c:	2b20      	cmp	r3, #32
 800497e:	d10f      	bne.n	80049a0 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	2220      	movs	r2, #32
 8004988:	4013      	ands	r3, r2
 800498a:	2b20      	cmp	r3, #32
 800498c:	d108      	bne.n	80049a0 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2221      	movs	r2, #33	; 0x21
 8004994:	4252      	negs	r2, r2
 8004996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	0018      	movs	r0, r3
 800499c:	f000 fa94 	bl	8004ec8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049a0:	46c0      	nop			; (mov r8, r8)
 80049a2:	46bd      	mov	sp, r7
 80049a4:	b002      	add	sp, #8
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049b2:	230f      	movs	r3, #15
 80049b4:	18fb      	adds	r3, r7, r3
 80049b6:	2200      	movs	r2, #0
 80049b8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	223c      	movs	r2, #60	; 0x3c
 80049be:	5c9b      	ldrb	r3, [r3, r2]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d101      	bne.n	80049c8 <HAL_TIM_ConfigClockSource+0x20>
 80049c4:	2302      	movs	r3, #2
 80049c6:	e0bc      	b.n	8004b42 <HAL_TIM_ConfigClockSource+0x19a>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	223c      	movs	r2, #60	; 0x3c
 80049cc:	2101      	movs	r1, #1
 80049ce:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	223d      	movs	r2, #61	; 0x3d
 80049d4:	2102      	movs	r1, #2
 80049d6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	2277      	movs	r2, #119	; 0x77
 80049e4:	4393      	bics	r3, r2
 80049e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	4a58      	ldr	r2, [pc, #352]	; (8004b4c <HAL_TIM_ConfigClockSource+0x1a4>)
 80049ec:	4013      	ands	r3, r2
 80049ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68ba      	ldr	r2, [r7, #8]
 80049f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2280      	movs	r2, #128	; 0x80
 80049fe:	0192      	lsls	r2, r2, #6
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d040      	beq.n	8004a86 <HAL_TIM_ConfigClockSource+0xde>
 8004a04:	2280      	movs	r2, #128	; 0x80
 8004a06:	0192      	lsls	r2, r2, #6
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d900      	bls.n	8004a0e <HAL_TIM_ConfigClockSource+0x66>
 8004a0c:	e088      	b.n	8004b20 <HAL_TIM_ConfigClockSource+0x178>
 8004a0e:	2280      	movs	r2, #128	; 0x80
 8004a10:	0152      	lsls	r2, r2, #5
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d100      	bne.n	8004a18 <HAL_TIM_ConfigClockSource+0x70>
 8004a16:	e088      	b.n	8004b2a <HAL_TIM_ConfigClockSource+0x182>
 8004a18:	2280      	movs	r2, #128	; 0x80
 8004a1a:	0152      	lsls	r2, r2, #5
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d900      	bls.n	8004a22 <HAL_TIM_ConfigClockSource+0x7a>
 8004a20:	e07e      	b.n	8004b20 <HAL_TIM_ConfigClockSource+0x178>
 8004a22:	2b70      	cmp	r3, #112	; 0x70
 8004a24:	d018      	beq.n	8004a58 <HAL_TIM_ConfigClockSource+0xb0>
 8004a26:	d900      	bls.n	8004a2a <HAL_TIM_ConfigClockSource+0x82>
 8004a28:	e07a      	b.n	8004b20 <HAL_TIM_ConfigClockSource+0x178>
 8004a2a:	2b60      	cmp	r3, #96	; 0x60
 8004a2c:	d04f      	beq.n	8004ace <HAL_TIM_ConfigClockSource+0x126>
 8004a2e:	d900      	bls.n	8004a32 <HAL_TIM_ConfigClockSource+0x8a>
 8004a30:	e076      	b.n	8004b20 <HAL_TIM_ConfigClockSource+0x178>
 8004a32:	2b50      	cmp	r3, #80	; 0x50
 8004a34:	d03b      	beq.n	8004aae <HAL_TIM_ConfigClockSource+0x106>
 8004a36:	d900      	bls.n	8004a3a <HAL_TIM_ConfigClockSource+0x92>
 8004a38:	e072      	b.n	8004b20 <HAL_TIM_ConfigClockSource+0x178>
 8004a3a:	2b40      	cmp	r3, #64	; 0x40
 8004a3c:	d057      	beq.n	8004aee <HAL_TIM_ConfigClockSource+0x146>
 8004a3e:	d900      	bls.n	8004a42 <HAL_TIM_ConfigClockSource+0x9a>
 8004a40:	e06e      	b.n	8004b20 <HAL_TIM_ConfigClockSource+0x178>
 8004a42:	2b30      	cmp	r3, #48	; 0x30
 8004a44:	d063      	beq.n	8004b0e <HAL_TIM_ConfigClockSource+0x166>
 8004a46:	d86b      	bhi.n	8004b20 <HAL_TIM_ConfigClockSource+0x178>
 8004a48:	2b20      	cmp	r3, #32
 8004a4a:	d060      	beq.n	8004b0e <HAL_TIM_ConfigClockSource+0x166>
 8004a4c:	d868      	bhi.n	8004b20 <HAL_TIM_ConfigClockSource+0x178>
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d05d      	beq.n	8004b0e <HAL_TIM_ConfigClockSource+0x166>
 8004a52:	2b10      	cmp	r3, #16
 8004a54:	d05b      	beq.n	8004b0e <HAL_TIM_ConfigClockSource+0x166>
 8004a56:	e063      	b.n	8004b20 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6818      	ldr	r0, [r3, #0]
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	6899      	ldr	r1, [r3, #8]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	685a      	ldr	r2, [r3, #4]
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	f000 f98c 	bl	8004d84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	2277      	movs	r2, #119	; 0x77
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	609a      	str	r2, [r3, #8]
      break;
 8004a84:	e052      	b.n	8004b2c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6818      	ldr	r0, [r3, #0]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	6899      	ldr	r1, [r3, #8]
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	685a      	ldr	r2, [r3, #4]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	f000 f975 	bl	8004d84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	689a      	ldr	r2, [r3, #8]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2180      	movs	r1, #128	; 0x80
 8004aa6:	01c9      	lsls	r1, r1, #7
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	609a      	str	r2, [r3, #8]
      break;
 8004aac:	e03e      	b.n	8004b2c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6818      	ldr	r0, [r3, #0]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	6859      	ldr	r1, [r3, #4]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	001a      	movs	r2, r3
 8004abc:	f000 f8e8 	bl	8004c90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2150      	movs	r1, #80	; 0x50
 8004ac6:	0018      	movs	r0, r3
 8004ac8:	f000 f942 	bl	8004d50 <TIM_ITRx_SetConfig>
      break;
 8004acc:	e02e      	b.n	8004b2c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6818      	ldr	r0, [r3, #0]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	6859      	ldr	r1, [r3, #4]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	001a      	movs	r2, r3
 8004adc:	f000 f906 	bl	8004cec <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2160      	movs	r1, #96	; 0x60
 8004ae6:	0018      	movs	r0, r3
 8004ae8:	f000 f932 	bl	8004d50 <TIM_ITRx_SetConfig>
      break;
 8004aec:	e01e      	b.n	8004b2c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6818      	ldr	r0, [r3, #0]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	6859      	ldr	r1, [r3, #4]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	001a      	movs	r2, r3
 8004afc:	f000 f8c8 	bl	8004c90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2140      	movs	r1, #64	; 0x40
 8004b06:	0018      	movs	r0, r3
 8004b08:	f000 f922 	bl	8004d50 <TIM_ITRx_SetConfig>
      break;
 8004b0c:	e00e      	b.n	8004b2c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	0019      	movs	r1, r3
 8004b18:	0010      	movs	r0, r2
 8004b1a:	f000 f919 	bl	8004d50 <TIM_ITRx_SetConfig>
      break;
 8004b1e:	e005      	b.n	8004b2c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004b20:	230f      	movs	r3, #15
 8004b22:	18fb      	adds	r3, r7, r3
 8004b24:	2201      	movs	r2, #1
 8004b26:	701a      	strb	r2, [r3, #0]
      break;
 8004b28:	e000      	b.n	8004b2c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004b2a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	223d      	movs	r2, #61	; 0x3d
 8004b30:	2101      	movs	r1, #1
 8004b32:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	223c      	movs	r2, #60	; 0x3c
 8004b38:	2100      	movs	r1, #0
 8004b3a:	5499      	strb	r1, [r3, r2]

  return status;
 8004b3c:	230f      	movs	r3, #15
 8004b3e:	18fb      	adds	r3, r7, r3
 8004b40:	781b      	ldrb	r3, [r3, #0]
}
 8004b42:	0018      	movs	r0, r3
 8004b44:	46bd      	mov	sp, r7
 8004b46:	b004      	add	sp, #16
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	46c0      	nop			; (mov r8, r8)
 8004b4c:	ffff00ff 	.word	0xffff00ff

08004b50 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004b58:	46c0      	nop			; (mov r8, r8)
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	b002      	add	sp, #8
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b68:	46c0      	nop			; (mov r8, r8)
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	b002      	add	sp, #8
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b78:	46c0      	nop			; (mov r8, r8)
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	b002      	add	sp, #8
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b88:	46c0      	nop			; (mov r8, r8)
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	b002      	add	sp, #8
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a34      	ldr	r2, [pc, #208]	; (8004c74 <TIM_Base_SetConfig+0xe4>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d008      	beq.n	8004bba <TIM_Base_SetConfig+0x2a>
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	2380      	movs	r3, #128	; 0x80
 8004bac:	05db      	lsls	r3, r3, #23
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d003      	beq.n	8004bba <TIM_Base_SetConfig+0x2a>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a30      	ldr	r2, [pc, #192]	; (8004c78 <TIM_Base_SetConfig+0xe8>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d108      	bne.n	8004bcc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2270      	movs	r2, #112	; 0x70
 8004bbe:	4393      	bics	r3, r2
 8004bc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a29      	ldr	r2, [pc, #164]	; (8004c74 <TIM_Base_SetConfig+0xe4>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d018      	beq.n	8004c06 <TIM_Base_SetConfig+0x76>
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	2380      	movs	r3, #128	; 0x80
 8004bd8:	05db      	lsls	r3, r3, #23
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d013      	beq.n	8004c06 <TIM_Base_SetConfig+0x76>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a25      	ldr	r2, [pc, #148]	; (8004c78 <TIM_Base_SetConfig+0xe8>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d00f      	beq.n	8004c06 <TIM_Base_SetConfig+0x76>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a24      	ldr	r2, [pc, #144]	; (8004c7c <TIM_Base_SetConfig+0xec>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d00b      	beq.n	8004c06 <TIM_Base_SetConfig+0x76>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a23      	ldr	r2, [pc, #140]	; (8004c80 <TIM_Base_SetConfig+0xf0>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d007      	beq.n	8004c06 <TIM_Base_SetConfig+0x76>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a22      	ldr	r2, [pc, #136]	; (8004c84 <TIM_Base_SetConfig+0xf4>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d003      	beq.n	8004c06 <TIM_Base_SetConfig+0x76>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a21      	ldr	r2, [pc, #132]	; (8004c88 <TIM_Base_SetConfig+0xf8>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d108      	bne.n	8004c18 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	4a20      	ldr	r2, [pc, #128]	; (8004c8c <TIM_Base_SetConfig+0xfc>)
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2280      	movs	r2, #128	; 0x80
 8004c1c:	4393      	bics	r3, r2
 8004c1e:	001a      	movs	r2, r3
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	695b      	ldr	r3, [r3, #20]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	689a      	ldr	r2, [r3, #8]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a0c      	ldr	r2, [pc, #48]	; (8004c74 <TIM_Base_SetConfig+0xe4>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d00b      	beq.n	8004c5e <TIM_Base_SetConfig+0xce>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a0d      	ldr	r2, [pc, #52]	; (8004c80 <TIM_Base_SetConfig+0xf0>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d007      	beq.n	8004c5e <TIM_Base_SetConfig+0xce>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a0c      	ldr	r2, [pc, #48]	; (8004c84 <TIM_Base_SetConfig+0xf4>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d003      	beq.n	8004c5e <TIM_Base_SetConfig+0xce>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a0b      	ldr	r2, [pc, #44]	; (8004c88 <TIM_Base_SetConfig+0xf8>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d103      	bne.n	8004c66 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	691a      	ldr	r2, [r3, #16]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	615a      	str	r2, [r3, #20]
}
 8004c6c:	46c0      	nop			; (mov r8, r8)
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	b004      	add	sp, #16
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	40012c00 	.word	0x40012c00
 8004c78:	40000400 	.word	0x40000400
 8004c7c:	40002000 	.word	0x40002000
 8004c80:	40014000 	.word	0x40014000
 8004c84:	40014400 	.word	0x40014400
 8004c88:	40014800 	.word	0x40014800
 8004c8c:	fffffcff 	.word	0xfffffcff

08004c90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6a1b      	ldr	r3, [r3, #32]
 8004ca0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	4393      	bics	r3, r2
 8004caa:	001a      	movs	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	22f0      	movs	r2, #240	; 0xf0
 8004cba:	4393      	bics	r3, r2
 8004cbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	011b      	lsls	r3, r3, #4
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	220a      	movs	r2, #10
 8004ccc:	4393      	bics	r3, r2
 8004cce:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	697a      	ldr	r2, [r7, #20]
 8004ce2:	621a      	str	r2, [r3, #32]
}
 8004ce4:	46c0      	nop			; (mov r8, r8)
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	b006      	add	sp, #24
 8004cea:	bd80      	pop	{r7, pc}

08004cec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b086      	sub	sp, #24
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6a1b      	ldr	r3, [r3, #32]
 8004cfc:	2210      	movs	r2, #16
 8004cfe:	4393      	bics	r3, r2
 8004d00:	001a      	movs	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6a1b      	ldr	r3, [r3, #32]
 8004d10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	4a0d      	ldr	r2, [pc, #52]	; (8004d4c <TIM_TI2_ConfigInputStage+0x60>)
 8004d16:	4013      	ands	r3, r2
 8004d18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	031b      	lsls	r3, r3, #12
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	22a0      	movs	r2, #160	; 0xa0
 8004d28:	4393      	bics	r3, r2
 8004d2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	011b      	lsls	r3, r3, #4
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	621a      	str	r2, [r3, #32]
}
 8004d42:	46c0      	nop			; (mov r8, r8)
 8004d44:	46bd      	mov	sp, r7
 8004d46:	b006      	add	sp, #24
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	46c0      	nop			; (mov r8, r8)
 8004d4c:	ffff0fff 	.word	0xffff0fff

08004d50 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2270      	movs	r2, #112	; 0x70
 8004d64:	4393      	bics	r3, r2
 8004d66:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d68:	683a      	ldr	r2, [r7, #0]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	2207      	movs	r2, #7
 8004d70:	4313      	orrs	r3, r2
 8004d72:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	609a      	str	r2, [r3, #8]
}
 8004d7a:	46c0      	nop			; (mov r8, r8)
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	b004      	add	sp, #16
 8004d80:	bd80      	pop	{r7, pc}
	...

08004d84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b086      	sub	sp, #24
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	607a      	str	r2, [r7, #4]
 8004d90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	4a09      	ldr	r2, [pc, #36]	; (8004dc0 <TIM_ETR_SetConfig+0x3c>)
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	021a      	lsls	r2, r3, #8
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	431a      	orrs	r2, r3
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	697a      	ldr	r2, [r7, #20]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	609a      	str	r2, [r3, #8]
}
 8004db8:	46c0      	nop			; (mov r8, r8)
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	b006      	add	sp, #24
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	ffff00ff 	.word	0xffff00ff

08004dc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b086      	sub	sp, #24
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	221f      	movs	r2, #31
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	409a      	lsls	r2, r3
 8004dda:	0013      	movs	r3, r2
 8004ddc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	43d2      	mvns	r2, r2
 8004de6:	401a      	ands	r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6a1a      	ldr	r2, [r3, #32]
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	211f      	movs	r1, #31
 8004df4:	400b      	ands	r3, r1
 8004df6:	6879      	ldr	r1, [r7, #4]
 8004df8:	4099      	lsls	r1, r3
 8004dfa:	000b      	movs	r3, r1
 8004dfc:	431a      	orrs	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	621a      	str	r2, [r3, #32]
}
 8004e02:	46c0      	nop			; (mov r8, r8)
 8004e04:	46bd      	mov	sp, r7
 8004e06:	b006      	add	sp, #24
 8004e08:	bd80      	pop	{r7, pc}
	...

08004e0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	223c      	movs	r2, #60	; 0x3c
 8004e1a:	5c9b      	ldrb	r3, [r3, r2]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d101      	bne.n	8004e24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e20:	2302      	movs	r3, #2
 8004e22:	e047      	b.n	8004eb4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	223c      	movs	r2, #60	; 0x3c
 8004e28:	2101      	movs	r1, #1
 8004e2a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	223d      	movs	r2, #61	; 0x3d
 8004e30:	2102      	movs	r1, #2
 8004e32:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2270      	movs	r2, #112	; 0x70
 8004e48:	4393      	bics	r3, r2
 8004e4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a16      	ldr	r2, [pc, #88]	; (8004ebc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d00f      	beq.n	8004e88 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	2380      	movs	r3, #128	; 0x80
 8004e6e:	05db      	lsls	r3, r3, #23
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d009      	beq.n	8004e88 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a11      	ldr	r2, [pc, #68]	; (8004ec0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d004      	beq.n	8004e88 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a10      	ldr	r2, [pc, #64]	; (8004ec4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d10c      	bne.n	8004ea2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	2280      	movs	r2, #128	; 0x80
 8004e8c:	4393      	bics	r3, r2
 8004e8e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	68ba      	ldr	r2, [r7, #8]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68ba      	ldr	r2, [r7, #8]
 8004ea0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	223d      	movs	r2, #61	; 0x3d
 8004ea6:	2101      	movs	r1, #1
 8004ea8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	223c      	movs	r2, #60	; 0x3c
 8004eae:	2100      	movs	r1, #0
 8004eb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	0018      	movs	r0, r3
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	b004      	add	sp, #16
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	40012c00 	.word	0x40012c00
 8004ec0:	40000400 	.word	0x40000400
 8004ec4:	40014000 	.word	0x40014000

08004ec8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ed0:	46c0      	nop			; (mov r8, r8)
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	b002      	add	sp, #8
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ee0:	46c0      	nop			; (mov r8, r8)
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	b002      	add	sp, #8
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d101      	bne.n	8004efa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e044      	b.n	8004f84 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d107      	bne.n	8004f12 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2274      	movs	r2, #116	; 0x74
 8004f06:	2100      	movs	r1, #0
 8004f08:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	0018      	movs	r0, r3
 8004f0e:	f7fc fd21 	bl	8001954 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2224      	movs	r2, #36	; 0x24
 8004f16:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2101      	movs	r1, #1
 8004f24:	438a      	bics	r2, r1
 8004f26:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	0018      	movs	r0, r3
 8004f2c:	f000 fd0c 	bl	8005948 <UART_SetConfig>
 8004f30:	0003      	movs	r3, r0
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d101      	bne.n	8004f3a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e024      	b.n	8004f84 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d003      	beq.n	8004f4a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	0018      	movs	r0, r3
 8004f46:	f000 fe3f 	bl	8005bc8 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	490d      	ldr	r1, [pc, #52]	; (8004f8c <HAL_UART_Init+0xa4>)
 8004f56:	400a      	ands	r2, r1
 8004f58:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689a      	ldr	r2, [r3, #8]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	212a      	movs	r1, #42	; 0x2a
 8004f66:	438a      	bics	r2, r1
 8004f68:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2101      	movs	r1, #1
 8004f76:	430a      	orrs	r2, r1
 8004f78:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	0018      	movs	r0, r3
 8004f7e:	f000 fed7 	bl	8005d30 <UART_CheckIdleState>
 8004f82:	0003      	movs	r3, r0
}
 8004f84:	0018      	movs	r0, r3
 8004f86:	46bd      	mov	sp, r7
 8004f88:	b002      	add	sp, #8
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	ffffb7ff 	.word	0xffffb7ff

08004f90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b08a      	sub	sp, #40	; 0x28
 8004f94:	af02      	add	r7, sp, #8
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	603b      	str	r3, [r7, #0]
 8004f9c:	1dbb      	adds	r3, r7, #6
 8004f9e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fa4:	2b20      	cmp	r3, #32
 8004fa6:	d000      	beq.n	8004faa <HAL_UART_Transmit+0x1a>
 8004fa8:	e096      	b.n	80050d8 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d003      	beq.n	8004fb8 <HAL_UART_Transmit+0x28>
 8004fb0:	1dbb      	adds	r3, r7, #6
 8004fb2:	881b      	ldrh	r3, [r3, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d101      	bne.n	8004fbc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e08e      	b.n	80050da <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	689a      	ldr	r2, [r3, #8]
 8004fc0:	2380      	movs	r3, #128	; 0x80
 8004fc2:	015b      	lsls	r3, r3, #5
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d109      	bne.n	8004fdc <HAL_UART_Transmit+0x4c>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d105      	bne.n	8004fdc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	d001      	beq.n	8004fdc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e07e      	b.n	80050da <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2274      	movs	r2, #116	; 0x74
 8004fe0:	5c9b      	ldrb	r3, [r3, r2]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d101      	bne.n	8004fea <HAL_UART_Transmit+0x5a>
 8004fe6:	2302      	movs	r3, #2
 8004fe8:	e077      	b.n	80050da <HAL_UART_Transmit+0x14a>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2274      	movs	r2, #116	; 0x74
 8004fee:	2101      	movs	r1, #1
 8004ff0:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2280      	movs	r2, #128	; 0x80
 8004ff6:	2100      	movs	r1, #0
 8004ff8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2221      	movs	r2, #33	; 0x21
 8004ffe:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005000:	f7fc fddc 	bl	8001bbc <HAL_GetTick>
 8005004:	0003      	movs	r3, r0
 8005006:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	1dba      	adds	r2, r7, #6
 800500c:	2150      	movs	r1, #80	; 0x50
 800500e:	8812      	ldrh	r2, [r2, #0]
 8005010:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	1dba      	adds	r2, r7, #6
 8005016:	2152      	movs	r1, #82	; 0x52
 8005018:	8812      	ldrh	r2, [r2, #0]
 800501a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	689a      	ldr	r2, [r3, #8]
 8005020:	2380      	movs	r3, #128	; 0x80
 8005022:	015b      	lsls	r3, r3, #5
 8005024:	429a      	cmp	r2, r3
 8005026:	d108      	bne.n	800503a <HAL_UART_Transmit+0xaa>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d104      	bne.n	800503a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8005030:	2300      	movs	r3, #0
 8005032:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	61bb      	str	r3, [r7, #24]
 8005038:	e003      	b.n	8005042 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800503e:	2300      	movs	r3, #0
 8005040:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2274      	movs	r2, #116	; 0x74
 8005046:	2100      	movs	r1, #0
 8005048:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800504a:	e02d      	b.n	80050a8 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800504c:	697a      	ldr	r2, [r7, #20]
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	9300      	str	r3, [sp, #0]
 8005054:	0013      	movs	r3, r2
 8005056:	2200      	movs	r2, #0
 8005058:	2180      	movs	r1, #128	; 0x80
 800505a:	f000 feb1 	bl	8005dc0 <UART_WaitOnFlagUntilTimeout>
 800505e:	1e03      	subs	r3, r0, #0
 8005060:	d001      	beq.n	8005066 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e039      	b.n	80050da <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d10b      	bne.n	8005084 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	881a      	ldrh	r2, [r3, #0]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	05d2      	lsls	r2, r2, #23
 8005076:	0dd2      	lsrs	r2, r2, #23
 8005078:	b292      	uxth	r2, r2
 800507a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	3302      	adds	r3, #2
 8005080:	61bb      	str	r3, [r7, #24]
 8005082:	e008      	b.n	8005096 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	781a      	ldrb	r2, [r3, #0]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	b292      	uxth	r2, r2
 800508e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	3301      	adds	r3, #1
 8005094:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2252      	movs	r2, #82	; 0x52
 800509a:	5a9b      	ldrh	r3, [r3, r2]
 800509c:	b29b      	uxth	r3, r3
 800509e:	3b01      	subs	r3, #1
 80050a0:	b299      	uxth	r1, r3
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2252      	movs	r2, #82	; 0x52
 80050a6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2252      	movs	r2, #82	; 0x52
 80050ac:	5a9b      	ldrh	r3, [r3, r2]
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d1cb      	bne.n	800504c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	68f8      	ldr	r0, [r7, #12]
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	9300      	str	r3, [sp, #0]
 80050bc:	0013      	movs	r3, r2
 80050be:	2200      	movs	r2, #0
 80050c0:	2140      	movs	r1, #64	; 0x40
 80050c2:	f000 fe7d 	bl	8005dc0 <UART_WaitOnFlagUntilTimeout>
 80050c6:	1e03      	subs	r3, r0, #0
 80050c8:	d001      	beq.n	80050ce <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e005      	b.n	80050da <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2220      	movs	r2, #32
 80050d2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80050d4:	2300      	movs	r3, #0
 80050d6:	e000      	b.n	80050da <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80050d8:	2302      	movs	r3, #2
  }
}
 80050da:	0018      	movs	r0, r3
 80050dc:	46bd      	mov	sp, r7
 80050de:	b008      	add	sp, #32
 80050e0:	bd80      	pop	{r7, pc}
	...

080050e4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b08a      	sub	sp, #40	; 0x28
 80050e8:	af02      	add	r7, sp, #8
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	603b      	str	r3, [r7, #0]
 80050f0:	1dbb      	adds	r3, r7, #6
 80050f2:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050f8:	2b20      	cmp	r3, #32
 80050fa:	d000      	beq.n	80050fe <HAL_UART_Receive+0x1a>
 80050fc:	e0c6      	b.n	800528c <HAL_UART_Receive+0x1a8>
  {
    if ((pData == NULL) || (Size == 0U))
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d003      	beq.n	800510c <HAL_UART_Receive+0x28>
 8005104:	1dbb      	adds	r3, r7, #6
 8005106:	881b      	ldrh	r3, [r3, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d101      	bne.n	8005110 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e0be      	b.n	800528e <HAL_UART_Receive+0x1aa>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	689a      	ldr	r2, [r3, #8]
 8005114:	2380      	movs	r3, #128	; 0x80
 8005116:	015b      	lsls	r3, r3, #5
 8005118:	429a      	cmp	r2, r3
 800511a:	d109      	bne.n	8005130 <HAL_UART_Receive+0x4c>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d105      	bne.n	8005130 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	2201      	movs	r2, #1
 8005128:	4013      	ands	r3, r2
 800512a:	d001      	beq.n	8005130 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e0ae      	b.n	800528e <HAL_UART_Receive+0x1aa>
      }
    }

    __HAL_LOCK(huart);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2274      	movs	r2, #116	; 0x74
 8005134:	5c9b      	ldrb	r3, [r3, r2]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d101      	bne.n	800513e <HAL_UART_Receive+0x5a>
 800513a:	2302      	movs	r3, #2
 800513c:	e0a7      	b.n	800528e <HAL_UART_Receive+0x1aa>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2274      	movs	r2, #116	; 0x74
 8005142:	2101      	movs	r1, #1
 8005144:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2280      	movs	r2, #128	; 0x80
 800514a:	2100      	movs	r1, #0
 800514c:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2222      	movs	r2, #34	; 0x22
 8005152:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800515a:	f7fc fd2f 	bl	8001bbc <HAL_GetTick>
 800515e:	0003      	movs	r3, r0
 8005160:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	1dba      	adds	r2, r7, #6
 8005166:	2158      	movs	r1, #88	; 0x58
 8005168:	8812      	ldrh	r2, [r2, #0]
 800516a:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	1dba      	adds	r2, r7, #6
 8005170:	215a      	movs	r1, #90	; 0x5a
 8005172:	8812      	ldrh	r2, [r2, #0]
 8005174:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	689a      	ldr	r2, [r3, #8]
 800517a:	2380      	movs	r3, #128	; 0x80
 800517c:	015b      	lsls	r3, r3, #5
 800517e:	429a      	cmp	r2, r3
 8005180:	d10d      	bne.n	800519e <HAL_UART_Receive+0xba>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d104      	bne.n	8005194 <HAL_UART_Receive+0xb0>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	225c      	movs	r2, #92	; 0x5c
 800518e:	4942      	ldr	r1, [pc, #264]	; (8005298 <HAL_UART_Receive+0x1b4>)
 8005190:	5299      	strh	r1, [r3, r2]
 8005192:	e01a      	b.n	80051ca <HAL_UART_Receive+0xe6>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	225c      	movs	r2, #92	; 0x5c
 8005198:	21ff      	movs	r1, #255	; 0xff
 800519a:	5299      	strh	r1, [r3, r2]
 800519c:	e015      	b.n	80051ca <HAL_UART_Receive+0xe6>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d10d      	bne.n	80051c2 <HAL_UART_Receive+0xde>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d104      	bne.n	80051b8 <HAL_UART_Receive+0xd4>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	225c      	movs	r2, #92	; 0x5c
 80051b2:	21ff      	movs	r1, #255	; 0xff
 80051b4:	5299      	strh	r1, [r3, r2]
 80051b6:	e008      	b.n	80051ca <HAL_UART_Receive+0xe6>
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	225c      	movs	r2, #92	; 0x5c
 80051bc:	217f      	movs	r1, #127	; 0x7f
 80051be:	5299      	strh	r1, [r3, r2]
 80051c0:	e003      	b.n	80051ca <HAL_UART_Receive+0xe6>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	225c      	movs	r2, #92	; 0x5c
 80051c6:	2100      	movs	r1, #0
 80051c8:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80051ca:	2312      	movs	r3, #18
 80051cc:	18fb      	adds	r3, r7, r3
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	215c      	movs	r1, #92	; 0x5c
 80051d2:	5a52      	ldrh	r2, [r2, r1]
 80051d4:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	689a      	ldr	r2, [r3, #8]
 80051da:	2380      	movs	r3, #128	; 0x80
 80051dc:	015b      	lsls	r3, r3, #5
 80051de:	429a      	cmp	r2, r3
 80051e0:	d108      	bne.n	80051f4 <HAL_UART_Receive+0x110>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d104      	bne.n	80051f4 <HAL_UART_Receive+0x110>
    {
      pdata8bits  = NULL;
 80051ea:	2300      	movs	r3, #0
 80051ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	61bb      	str	r3, [r7, #24]
 80051f2:	e003      	b.n	80051fc <HAL_UART_Receive+0x118>
    }
    else
    {
      pdata8bits  = pData;
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051f8:	2300      	movs	r3, #0
 80051fa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2274      	movs	r2, #116	; 0x74
 8005200:	2100      	movs	r1, #0
 8005202:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005204:	e037      	b.n	8005276 <HAL_UART_Receive+0x192>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	9300      	str	r3, [sp, #0]
 800520e:	0013      	movs	r3, r2
 8005210:	2200      	movs	r2, #0
 8005212:	2120      	movs	r1, #32
 8005214:	f000 fdd4 	bl	8005dc0 <UART_WaitOnFlagUntilTimeout>
 8005218:	1e03      	subs	r3, r0, #0
 800521a:	d001      	beq.n	8005220 <HAL_UART_Receive+0x13c>
      {
        return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e036      	b.n	800528e <HAL_UART_Receive+0x1aa>
      }
      if (pdata8bits == NULL)
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10e      	bne.n	8005244 <HAL_UART_Receive+0x160>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800522c:	b29b      	uxth	r3, r3
 800522e:	2212      	movs	r2, #18
 8005230:	18ba      	adds	r2, r7, r2
 8005232:	8812      	ldrh	r2, [r2, #0]
 8005234:	4013      	ands	r3, r2
 8005236:	b29a      	uxth	r2, r3
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	3302      	adds	r3, #2
 8005240:	61bb      	str	r3, [r7, #24]
 8005242:	e00f      	b.n	8005264 <HAL_UART_Receive+0x180>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800524a:	b29b      	uxth	r3, r3
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2212      	movs	r2, #18
 8005250:	18ba      	adds	r2, r7, r2
 8005252:	8812      	ldrh	r2, [r2, #0]
 8005254:	b2d2      	uxtb	r2, r2
 8005256:	4013      	ands	r3, r2
 8005258:	b2da      	uxtb	r2, r3
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	3301      	adds	r3, #1
 8005262:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	225a      	movs	r2, #90	; 0x5a
 8005268:	5a9b      	ldrh	r3, [r3, r2]
 800526a:	b29b      	uxth	r3, r3
 800526c:	3b01      	subs	r3, #1
 800526e:	b299      	uxth	r1, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	225a      	movs	r2, #90	; 0x5a
 8005274:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	225a      	movs	r2, #90	; 0x5a
 800527a:	5a9b      	ldrh	r3, [r3, r2]
 800527c:	b29b      	uxth	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1c1      	bne.n	8005206 <HAL_UART_Receive+0x122>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2220      	movs	r2, #32
 8005286:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005288:	2300      	movs	r3, #0
 800528a:	e000      	b.n	800528e <HAL_UART_Receive+0x1aa>
  }
  else
  {
    return HAL_BUSY;
 800528c:	2302      	movs	r3, #2
  }
}
 800528e:	0018      	movs	r0, r3
 8005290:	46bd      	mov	sp, r7
 8005292:	b008      	add	sp, #32
 8005294:	bd80      	pop	{r7, pc}
 8005296:	46c0      	nop			; (mov r8, r8)
 8005298:	000001ff 	.word	0x000001ff

0800529c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b088      	sub	sp, #32
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	1dbb      	adds	r3, r7, #6
 80052a8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052ae:	2b20      	cmp	r3, #32
 80052b0:	d150      	bne.n	8005354 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d003      	beq.n	80052c0 <HAL_UART_Receive_IT+0x24>
 80052b8:	1dbb      	adds	r3, r7, #6
 80052ba:	881b      	ldrh	r3, [r3, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d101      	bne.n	80052c4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e048      	b.n	8005356 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	689a      	ldr	r2, [r3, #8]
 80052c8:	2380      	movs	r3, #128	; 0x80
 80052ca:	015b      	lsls	r3, r3, #5
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d109      	bne.n	80052e4 <HAL_UART_Receive_IT+0x48>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d105      	bne.n	80052e4 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	2201      	movs	r2, #1
 80052dc:	4013      	ands	r3, r2
 80052de:	d001      	beq.n	80052e4 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e038      	b.n	8005356 <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2274      	movs	r2, #116	; 0x74
 80052e8:	5c9b      	ldrb	r3, [r3, r2]
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d101      	bne.n	80052f2 <HAL_UART_Receive_IT+0x56>
 80052ee:	2302      	movs	r3, #2
 80052f0:	e031      	b.n	8005356 <HAL_UART_Receive_IT+0xba>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2274      	movs	r2, #116	; 0x74
 80052f6:	2101      	movs	r1, #1
 80052f8:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	685a      	ldr	r2, [r3, #4]
 8005306:	2380      	movs	r3, #128	; 0x80
 8005308:	041b      	lsls	r3, r3, #16
 800530a:	4013      	ands	r3, r2
 800530c:	d019      	beq.n	8005342 <HAL_UART_Receive_IT+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800530e:	f3ef 8310 	mrs	r3, PRIMASK
 8005312:	613b      	str	r3, [r7, #16]
  return(result);
 8005314:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005316:	61fb      	str	r3, [r7, #28]
 8005318:	2301      	movs	r3, #1
 800531a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f383 8810 	msr	PRIMASK, r3
}
 8005322:	46c0      	nop			; (mov r8, r8)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2180      	movs	r1, #128	; 0x80
 8005330:	04c9      	lsls	r1, r1, #19
 8005332:	430a      	orrs	r2, r1
 8005334:	601a      	str	r2, [r3, #0]
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	f383 8810 	msr	PRIMASK, r3
}
 8005340:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005342:	1dbb      	adds	r3, r7, #6
 8005344:	881a      	ldrh	r2, [r3, #0]
 8005346:	68b9      	ldr	r1, [r7, #8]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	0018      	movs	r0, r3
 800534c:	f000 fdfc 	bl	8005f48 <UART_Start_Receive_IT>
 8005350:	0003      	movs	r3, r0
 8005352:	e000      	b.n	8005356 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8005354:	2302      	movs	r3, #2
  }
}
 8005356:	0018      	movs	r0, r3
 8005358:	46bd      	mov	sp, r7
 800535a:	b008      	add	sp, #32
 800535c:	bd80      	pop	{r7, pc}
	...

08005360 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005360:	b590      	push	{r4, r7, lr}
 8005362:	b0ab      	sub	sp, #172	; 0xac
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	69db      	ldr	r3, [r3, #28]
 800536e:	22a4      	movs	r2, #164	; 0xa4
 8005370:	18b9      	adds	r1, r7, r2
 8005372:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	20a0      	movs	r0, #160	; 0xa0
 800537c:	1839      	adds	r1, r7, r0
 800537e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	219c      	movs	r1, #156	; 0x9c
 8005388:	1879      	adds	r1, r7, r1
 800538a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800538c:	0011      	movs	r1, r2
 800538e:	18bb      	adds	r3, r7, r2
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a99      	ldr	r2, [pc, #612]	; (80055f8 <HAL_UART_IRQHandler+0x298>)
 8005394:	4013      	ands	r3, r2
 8005396:	2298      	movs	r2, #152	; 0x98
 8005398:	18bc      	adds	r4, r7, r2
 800539a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800539c:	18bb      	adds	r3, r7, r2
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d114      	bne.n	80053ce <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80053a4:	187b      	adds	r3, r7, r1
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2220      	movs	r2, #32
 80053aa:	4013      	ands	r3, r2
 80053ac:	d00f      	beq.n	80053ce <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80053ae:	183b      	adds	r3, r7, r0
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2220      	movs	r2, #32
 80053b4:	4013      	ands	r3, r2
 80053b6:	d00a      	beq.n	80053ce <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d100      	bne.n	80053c2 <HAL_UART_IRQHandler+0x62>
 80053c0:	e296      	b.n	80058f0 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	0010      	movs	r0, r2
 80053ca:	4798      	blx	r3
      }
      return;
 80053cc:	e290      	b.n	80058f0 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80053ce:	2398      	movs	r3, #152	; 0x98
 80053d0:	18fb      	adds	r3, r7, r3
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d100      	bne.n	80053da <HAL_UART_IRQHandler+0x7a>
 80053d8:	e114      	b.n	8005604 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80053da:	239c      	movs	r3, #156	; 0x9c
 80053dc:	18fb      	adds	r3, r7, r3
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2201      	movs	r2, #1
 80053e2:	4013      	ands	r3, r2
 80053e4:	d106      	bne.n	80053f4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80053e6:	23a0      	movs	r3, #160	; 0xa0
 80053e8:	18fb      	adds	r3, r7, r3
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a83      	ldr	r2, [pc, #524]	; (80055fc <HAL_UART_IRQHandler+0x29c>)
 80053ee:	4013      	ands	r3, r2
 80053f0:	d100      	bne.n	80053f4 <HAL_UART_IRQHandler+0x94>
 80053f2:	e107      	b.n	8005604 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80053f4:	23a4      	movs	r3, #164	; 0xa4
 80053f6:	18fb      	adds	r3, r7, r3
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2201      	movs	r2, #1
 80053fc:	4013      	ands	r3, r2
 80053fe:	d012      	beq.n	8005426 <HAL_UART_IRQHandler+0xc6>
 8005400:	23a0      	movs	r3, #160	; 0xa0
 8005402:	18fb      	adds	r3, r7, r3
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	2380      	movs	r3, #128	; 0x80
 8005408:	005b      	lsls	r3, r3, #1
 800540a:	4013      	ands	r3, r2
 800540c:	d00b      	beq.n	8005426 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2201      	movs	r2, #1
 8005414:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2280      	movs	r2, #128	; 0x80
 800541a:	589b      	ldr	r3, [r3, r2]
 800541c:	2201      	movs	r2, #1
 800541e:	431a      	orrs	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2180      	movs	r1, #128	; 0x80
 8005424:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005426:	23a4      	movs	r3, #164	; 0xa4
 8005428:	18fb      	adds	r3, r7, r3
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2202      	movs	r2, #2
 800542e:	4013      	ands	r3, r2
 8005430:	d011      	beq.n	8005456 <HAL_UART_IRQHandler+0xf6>
 8005432:	239c      	movs	r3, #156	; 0x9c
 8005434:	18fb      	adds	r3, r7, r3
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2201      	movs	r2, #1
 800543a:	4013      	ands	r3, r2
 800543c:	d00b      	beq.n	8005456 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2202      	movs	r2, #2
 8005444:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2280      	movs	r2, #128	; 0x80
 800544a:	589b      	ldr	r3, [r3, r2]
 800544c:	2204      	movs	r2, #4
 800544e:	431a      	orrs	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2180      	movs	r1, #128	; 0x80
 8005454:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005456:	23a4      	movs	r3, #164	; 0xa4
 8005458:	18fb      	adds	r3, r7, r3
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2204      	movs	r2, #4
 800545e:	4013      	ands	r3, r2
 8005460:	d011      	beq.n	8005486 <HAL_UART_IRQHandler+0x126>
 8005462:	239c      	movs	r3, #156	; 0x9c
 8005464:	18fb      	adds	r3, r7, r3
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2201      	movs	r2, #1
 800546a:	4013      	ands	r3, r2
 800546c:	d00b      	beq.n	8005486 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2204      	movs	r2, #4
 8005474:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2280      	movs	r2, #128	; 0x80
 800547a:	589b      	ldr	r3, [r3, r2]
 800547c:	2202      	movs	r2, #2
 800547e:	431a      	orrs	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2180      	movs	r1, #128	; 0x80
 8005484:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005486:	23a4      	movs	r3, #164	; 0xa4
 8005488:	18fb      	adds	r3, r7, r3
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2208      	movs	r2, #8
 800548e:	4013      	ands	r3, r2
 8005490:	d017      	beq.n	80054c2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005492:	23a0      	movs	r3, #160	; 0xa0
 8005494:	18fb      	adds	r3, r7, r3
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2220      	movs	r2, #32
 800549a:	4013      	ands	r3, r2
 800549c:	d105      	bne.n	80054aa <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800549e:	239c      	movs	r3, #156	; 0x9c
 80054a0:	18fb      	adds	r3, r7, r3
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2201      	movs	r2, #1
 80054a6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80054a8:	d00b      	beq.n	80054c2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2208      	movs	r2, #8
 80054b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2280      	movs	r2, #128	; 0x80
 80054b6:	589b      	ldr	r3, [r3, r2]
 80054b8:	2208      	movs	r2, #8
 80054ba:	431a      	orrs	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2180      	movs	r1, #128	; 0x80
 80054c0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80054c2:	23a4      	movs	r3, #164	; 0xa4
 80054c4:	18fb      	adds	r3, r7, r3
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	2380      	movs	r3, #128	; 0x80
 80054ca:	011b      	lsls	r3, r3, #4
 80054cc:	4013      	ands	r3, r2
 80054ce:	d013      	beq.n	80054f8 <HAL_UART_IRQHandler+0x198>
 80054d0:	23a0      	movs	r3, #160	; 0xa0
 80054d2:	18fb      	adds	r3, r7, r3
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	2380      	movs	r3, #128	; 0x80
 80054d8:	04db      	lsls	r3, r3, #19
 80054da:	4013      	ands	r3, r2
 80054dc:	d00c      	beq.n	80054f8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2280      	movs	r2, #128	; 0x80
 80054e4:	0112      	lsls	r2, r2, #4
 80054e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2280      	movs	r2, #128	; 0x80
 80054ec:	589b      	ldr	r3, [r3, r2]
 80054ee:	2220      	movs	r2, #32
 80054f0:	431a      	orrs	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2180      	movs	r1, #128	; 0x80
 80054f6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2280      	movs	r2, #128	; 0x80
 80054fc:	589b      	ldr	r3, [r3, r2]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d100      	bne.n	8005504 <HAL_UART_IRQHandler+0x1a4>
 8005502:	e1f7      	b.n	80058f4 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005504:	23a4      	movs	r3, #164	; 0xa4
 8005506:	18fb      	adds	r3, r7, r3
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2220      	movs	r2, #32
 800550c:	4013      	ands	r3, r2
 800550e:	d00e      	beq.n	800552e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005510:	23a0      	movs	r3, #160	; 0xa0
 8005512:	18fb      	adds	r3, r7, r3
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2220      	movs	r2, #32
 8005518:	4013      	ands	r3, r2
 800551a:	d008      	beq.n	800552e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005520:	2b00      	cmp	r3, #0
 8005522:	d004      	beq.n	800552e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	0010      	movs	r0, r2
 800552c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2280      	movs	r2, #128	; 0x80
 8005532:	589b      	ldr	r3, [r3, r2]
 8005534:	2194      	movs	r1, #148	; 0x94
 8005536:	187a      	adds	r2, r7, r1
 8005538:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	2240      	movs	r2, #64	; 0x40
 8005542:	4013      	ands	r3, r2
 8005544:	2b40      	cmp	r3, #64	; 0x40
 8005546:	d004      	beq.n	8005552 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005548:	187b      	adds	r3, r7, r1
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2228      	movs	r2, #40	; 0x28
 800554e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005550:	d047      	beq.n	80055e2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	0018      	movs	r0, r3
 8005556:	f000 fd93 	bl	8006080 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	2240      	movs	r2, #64	; 0x40
 8005562:	4013      	ands	r3, r2
 8005564:	2b40      	cmp	r3, #64	; 0x40
 8005566:	d137      	bne.n	80055d8 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005568:	f3ef 8310 	mrs	r3, PRIMASK
 800556c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800556e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005570:	2090      	movs	r0, #144	; 0x90
 8005572:	183a      	adds	r2, r7, r0
 8005574:	6013      	str	r3, [r2, #0]
 8005576:	2301      	movs	r3, #1
 8005578:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800557a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800557c:	f383 8810 	msr	PRIMASK, r3
}
 8005580:	46c0      	nop			; (mov r8, r8)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	689a      	ldr	r2, [r3, #8]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2140      	movs	r1, #64	; 0x40
 800558e:	438a      	bics	r2, r1
 8005590:	609a      	str	r2, [r3, #8]
 8005592:	183b      	adds	r3, r7, r0
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005598:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800559a:	f383 8810 	msr	PRIMASK, r3
}
 800559e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d012      	beq.n	80055ce <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ac:	4a14      	ldr	r2, [pc, #80]	; (8005600 <HAL_UART_IRQHandler+0x2a0>)
 80055ae:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055b4:	0018      	movs	r0, r3
 80055b6:	f7fd f967 	bl	8002888 <HAL_DMA_Abort_IT>
 80055ba:	1e03      	subs	r3, r0, #0
 80055bc:	d01a      	beq.n	80055f4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c8:	0018      	movs	r0, r3
 80055ca:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055cc:	e012      	b.n	80055f4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	0018      	movs	r0, r3
 80055d2:	f000 f9a5 	bl	8005920 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055d6:	e00d      	b.n	80055f4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	0018      	movs	r0, r3
 80055dc:	f000 f9a0 	bl	8005920 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055e0:	e008      	b.n	80055f4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	0018      	movs	r0, r3
 80055e6:	f000 f99b 	bl	8005920 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2280      	movs	r2, #128	; 0x80
 80055ee:	2100      	movs	r1, #0
 80055f0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80055f2:	e17f      	b.n	80058f4 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055f4:	46c0      	nop			; (mov r8, r8)
    return;
 80055f6:	e17d      	b.n	80058f4 <HAL_UART_IRQHandler+0x594>
 80055f8:	0000080f 	.word	0x0000080f
 80055fc:	04000120 	.word	0x04000120
 8005600:	08006145 	.word	0x08006145

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005608:	2b01      	cmp	r3, #1
 800560a:	d000      	beq.n	800560e <HAL_UART_IRQHandler+0x2ae>
 800560c:	e131      	b.n	8005872 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800560e:	23a4      	movs	r3, #164	; 0xa4
 8005610:	18fb      	adds	r3, r7, r3
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2210      	movs	r2, #16
 8005616:	4013      	ands	r3, r2
 8005618:	d100      	bne.n	800561c <HAL_UART_IRQHandler+0x2bc>
 800561a:	e12a      	b.n	8005872 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800561c:	23a0      	movs	r3, #160	; 0xa0
 800561e:	18fb      	adds	r3, r7, r3
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2210      	movs	r2, #16
 8005624:	4013      	ands	r3, r2
 8005626:	d100      	bne.n	800562a <HAL_UART_IRQHandler+0x2ca>
 8005628:	e123      	b.n	8005872 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2210      	movs	r2, #16
 8005630:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	2240      	movs	r2, #64	; 0x40
 800563a:	4013      	ands	r3, r2
 800563c:	2b40      	cmp	r3, #64	; 0x40
 800563e:	d000      	beq.n	8005642 <HAL_UART_IRQHandler+0x2e2>
 8005640:	e09b      	b.n	800577a <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	685a      	ldr	r2, [r3, #4]
 800564a:	217e      	movs	r1, #126	; 0x7e
 800564c:	187b      	adds	r3, r7, r1
 800564e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005650:	187b      	adds	r3, r7, r1
 8005652:	881b      	ldrh	r3, [r3, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d100      	bne.n	800565a <HAL_UART_IRQHandler+0x2fa>
 8005658:	e14e      	b.n	80058f8 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2258      	movs	r2, #88	; 0x58
 800565e:	5a9b      	ldrh	r3, [r3, r2]
 8005660:	187a      	adds	r2, r7, r1
 8005662:	8812      	ldrh	r2, [r2, #0]
 8005664:	429a      	cmp	r2, r3
 8005666:	d300      	bcc.n	800566a <HAL_UART_IRQHandler+0x30a>
 8005668:	e146      	b.n	80058f8 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	187a      	adds	r2, r7, r1
 800566e:	215a      	movs	r1, #90	; 0x5a
 8005670:	8812      	ldrh	r2, [r2, #0]
 8005672:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	2b20      	cmp	r3, #32
 800567c:	d06e      	beq.n	800575c <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800567e:	f3ef 8310 	mrs	r3, PRIMASK
 8005682:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005686:	67bb      	str	r3, [r7, #120]	; 0x78
 8005688:	2301      	movs	r3, #1
 800568a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800568c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800568e:	f383 8810 	msr	PRIMASK, r3
}
 8005692:	46c0      	nop			; (mov r8, r8)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	499a      	ldr	r1, [pc, #616]	; (8005908 <HAL_UART_IRQHandler+0x5a8>)
 80056a0:	400a      	ands	r2, r1
 80056a2:	601a      	str	r2, [r3, #0]
 80056a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056a6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056aa:	f383 8810 	msr	PRIMASK, r3
}
 80056ae:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056b0:	f3ef 8310 	mrs	r3, PRIMASK
 80056b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80056b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056b8:	677b      	str	r3, [r7, #116]	; 0x74
 80056ba:	2301      	movs	r3, #1
 80056bc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056c0:	f383 8810 	msr	PRIMASK, r3
}
 80056c4:	46c0      	nop			; (mov r8, r8)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	689a      	ldr	r2, [r3, #8]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2101      	movs	r1, #1
 80056d2:	438a      	bics	r2, r1
 80056d4:	609a      	str	r2, [r3, #8]
 80056d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056d8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056dc:	f383 8810 	msr	PRIMASK, r3
}
 80056e0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056e2:	f3ef 8310 	mrs	r3, PRIMASK
 80056e6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80056e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056ea:	673b      	str	r3, [r7, #112]	; 0x70
 80056ec:	2301      	movs	r3, #1
 80056ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056f2:	f383 8810 	msr	PRIMASK, r3
}
 80056f6:	46c0      	nop			; (mov r8, r8)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	689a      	ldr	r2, [r3, #8]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2140      	movs	r1, #64	; 0x40
 8005704:	438a      	bics	r2, r1
 8005706:	609a      	str	r2, [r3, #8]
 8005708:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800570a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800570c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800570e:	f383 8810 	msr	PRIMASK, r3
}
 8005712:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2220      	movs	r2, #32
 8005718:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005720:	f3ef 8310 	mrs	r3, PRIMASK
 8005724:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005726:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005728:	66fb      	str	r3, [r7, #108]	; 0x6c
 800572a:	2301      	movs	r3, #1
 800572c:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800572e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005730:	f383 8810 	msr	PRIMASK, r3
}
 8005734:	46c0      	nop			; (mov r8, r8)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2110      	movs	r1, #16
 8005742:	438a      	bics	r2, r1
 8005744:	601a      	str	r2, [r3, #0]
 8005746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005748:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800574a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800574c:	f383 8810 	msr	PRIMASK, r3
}
 8005750:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005756:	0018      	movs	r0, r3
 8005758:	f7fd f85e 	bl	8002818 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2258      	movs	r2, #88	; 0x58
 8005760:	5a9a      	ldrh	r2, [r3, r2]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	215a      	movs	r1, #90	; 0x5a
 8005766:	5a5b      	ldrh	r3, [r3, r1]
 8005768:	b29b      	uxth	r3, r3
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	b29a      	uxth	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	0011      	movs	r1, r2
 8005772:	0018      	movs	r0, r3
 8005774:	f000 f8dc 	bl	8005930 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005778:	e0be      	b.n	80058f8 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2258      	movs	r2, #88	; 0x58
 800577e:	5a99      	ldrh	r1, [r3, r2]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	225a      	movs	r2, #90	; 0x5a
 8005784:	5a9b      	ldrh	r3, [r3, r2]
 8005786:	b29a      	uxth	r2, r3
 8005788:	208e      	movs	r0, #142	; 0x8e
 800578a:	183b      	adds	r3, r7, r0
 800578c:	1a8a      	subs	r2, r1, r2
 800578e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	225a      	movs	r2, #90	; 0x5a
 8005794:	5a9b      	ldrh	r3, [r3, r2]
 8005796:	b29b      	uxth	r3, r3
 8005798:	2b00      	cmp	r3, #0
 800579a:	d100      	bne.n	800579e <HAL_UART_IRQHandler+0x43e>
 800579c:	e0ae      	b.n	80058fc <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 800579e:	183b      	adds	r3, r7, r0
 80057a0:	881b      	ldrh	r3, [r3, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d100      	bne.n	80057a8 <HAL_UART_IRQHandler+0x448>
 80057a6:	e0a9      	b.n	80058fc <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057a8:	f3ef 8310 	mrs	r3, PRIMASK
 80057ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80057ae:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057b0:	2488      	movs	r4, #136	; 0x88
 80057b2:	193a      	adds	r2, r7, r4
 80057b4:	6013      	str	r3, [r2, #0]
 80057b6:	2301      	movs	r3, #1
 80057b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	f383 8810 	msr	PRIMASK, r3
}
 80057c0:	46c0      	nop			; (mov r8, r8)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	494f      	ldr	r1, [pc, #316]	; (800590c <HAL_UART_IRQHandler+0x5ac>)
 80057ce:	400a      	ands	r2, r1
 80057d0:	601a      	str	r2, [r3, #0]
 80057d2:	193b      	adds	r3, r7, r4
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	f383 8810 	msr	PRIMASK, r3
}
 80057de:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057e0:	f3ef 8310 	mrs	r3, PRIMASK
 80057e4:	61bb      	str	r3, [r7, #24]
  return(result);
 80057e6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057e8:	2484      	movs	r4, #132	; 0x84
 80057ea:	193a      	adds	r2, r7, r4
 80057ec:	6013      	str	r3, [r2, #0]
 80057ee:	2301      	movs	r3, #1
 80057f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	f383 8810 	msr	PRIMASK, r3
}
 80057f8:	46c0      	nop			; (mov r8, r8)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	689a      	ldr	r2, [r3, #8]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2101      	movs	r1, #1
 8005806:	438a      	bics	r2, r1
 8005808:	609a      	str	r2, [r3, #8]
 800580a:	193b      	adds	r3, r7, r4
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005810:	6a3b      	ldr	r3, [r7, #32]
 8005812:	f383 8810 	msr	PRIMASK, r3
}
 8005816:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2220      	movs	r2, #32
 800581c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800582a:	f3ef 8310 	mrs	r3, PRIMASK
 800582e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005830:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005832:	2480      	movs	r4, #128	; 0x80
 8005834:	193a      	adds	r2, r7, r4
 8005836:	6013      	str	r3, [r2, #0]
 8005838:	2301      	movs	r3, #1
 800583a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800583c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583e:	f383 8810 	msr	PRIMASK, r3
}
 8005842:	46c0      	nop			; (mov r8, r8)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2110      	movs	r1, #16
 8005850:	438a      	bics	r2, r1
 8005852:	601a      	str	r2, [r3, #0]
 8005854:	193b      	adds	r3, r7, r4
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800585a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800585c:	f383 8810 	msr	PRIMASK, r3
}
 8005860:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005862:	183b      	adds	r3, r7, r0
 8005864:	881a      	ldrh	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	0011      	movs	r1, r2
 800586a:	0018      	movs	r0, r3
 800586c:	f000 f860 	bl	8005930 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005870:	e044      	b.n	80058fc <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005872:	23a4      	movs	r3, #164	; 0xa4
 8005874:	18fb      	adds	r3, r7, r3
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	2380      	movs	r3, #128	; 0x80
 800587a:	035b      	lsls	r3, r3, #13
 800587c:	4013      	ands	r3, r2
 800587e:	d010      	beq.n	80058a2 <HAL_UART_IRQHandler+0x542>
 8005880:	239c      	movs	r3, #156	; 0x9c
 8005882:	18fb      	adds	r3, r7, r3
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	2380      	movs	r3, #128	; 0x80
 8005888:	03db      	lsls	r3, r3, #15
 800588a:	4013      	ands	r3, r2
 800588c:	d009      	beq.n	80058a2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2280      	movs	r2, #128	; 0x80
 8005894:	0352      	lsls	r2, r2, #13
 8005896:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	0018      	movs	r0, r3
 800589c:	f000 fdfc 	bl	8006498 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80058a0:	e02f      	b.n	8005902 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80058a2:	23a4      	movs	r3, #164	; 0xa4
 80058a4:	18fb      	adds	r3, r7, r3
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2280      	movs	r2, #128	; 0x80
 80058aa:	4013      	ands	r3, r2
 80058ac:	d00f      	beq.n	80058ce <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80058ae:	23a0      	movs	r3, #160	; 0xa0
 80058b0:	18fb      	adds	r3, r7, r3
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2280      	movs	r2, #128	; 0x80
 80058b6:	4013      	ands	r3, r2
 80058b8:	d009      	beq.n	80058ce <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d01e      	beq.n	8005900 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	0010      	movs	r0, r2
 80058ca:	4798      	blx	r3
    }
    return;
 80058cc:	e018      	b.n	8005900 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80058ce:	23a4      	movs	r3, #164	; 0xa4
 80058d0:	18fb      	adds	r3, r7, r3
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2240      	movs	r2, #64	; 0x40
 80058d6:	4013      	ands	r3, r2
 80058d8:	d013      	beq.n	8005902 <HAL_UART_IRQHandler+0x5a2>
 80058da:	23a0      	movs	r3, #160	; 0xa0
 80058dc:	18fb      	adds	r3, r7, r3
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2240      	movs	r2, #64	; 0x40
 80058e2:	4013      	ands	r3, r2
 80058e4:	d00d      	beq.n	8005902 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	0018      	movs	r0, r3
 80058ea:	f000 fc42 	bl	8006172 <UART_EndTransmit_IT>
    return;
 80058ee:	e008      	b.n	8005902 <HAL_UART_IRQHandler+0x5a2>
      return;
 80058f0:	46c0      	nop			; (mov r8, r8)
 80058f2:	e006      	b.n	8005902 <HAL_UART_IRQHandler+0x5a2>
    return;
 80058f4:	46c0      	nop			; (mov r8, r8)
 80058f6:	e004      	b.n	8005902 <HAL_UART_IRQHandler+0x5a2>
      return;
 80058f8:	46c0      	nop			; (mov r8, r8)
 80058fa:	e002      	b.n	8005902 <HAL_UART_IRQHandler+0x5a2>
      return;
 80058fc:	46c0      	nop			; (mov r8, r8)
 80058fe:	e000      	b.n	8005902 <HAL_UART_IRQHandler+0x5a2>
    return;
 8005900:	46c0      	nop			; (mov r8, r8)
  }

}
 8005902:	46bd      	mov	sp, r7
 8005904:	b02b      	add	sp, #172	; 0xac
 8005906:	bd90      	pop	{r4, r7, pc}
 8005908:	fffffeff 	.word	0xfffffeff
 800590c:	fffffedf 	.word	0xfffffedf

08005910 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005918:	46c0      	nop			; (mov r8, r8)
 800591a:	46bd      	mov	sp, r7
 800591c:	b002      	add	sp, #8
 800591e:	bd80      	pop	{r7, pc}

08005920 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005928:	46c0      	nop			; (mov r8, r8)
 800592a:	46bd      	mov	sp, r7
 800592c:	b002      	add	sp, #8
 800592e:	bd80      	pop	{r7, pc}

08005930 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	000a      	movs	r2, r1
 800593a:	1cbb      	adds	r3, r7, #2
 800593c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800593e:	46c0      	nop			; (mov r8, r8)
 8005940:	46bd      	mov	sp, r7
 8005942:	b002      	add	sp, #8
 8005944:	bd80      	pop	{r7, pc}
	...

08005948 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b088      	sub	sp, #32
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005950:	231e      	movs	r3, #30
 8005952:	18fb      	adds	r3, r7, r3
 8005954:	2200      	movs	r2, #0
 8005956:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	689a      	ldr	r2, [r3, #8]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	431a      	orrs	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	431a      	orrs	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	69db      	ldr	r3, [r3, #28]
 800596c:	4313      	orrs	r3, r2
 800596e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a8d      	ldr	r2, [pc, #564]	; (8005bac <UART_SetConfig+0x264>)
 8005978:	4013      	ands	r3, r2
 800597a:	0019      	movs	r1, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	697a      	ldr	r2, [r7, #20]
 8005982:	430a      	orrs	r2, r1
 8005984:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	4a88      	ldr	r2, [pc, #544]	; (8005bb0 <UART_SetConfig+0x268>)
 800598e:	4013      	ands	r3, r2
 8005990:	0019      	movs	r1, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	68da      	ldr	r2, [r3, #12]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	430a      	orrs	r2, r1
 800599c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a1b      	ldr	r3, [r3, #32]
 80059a8:	697a      	ldr	r2, [r7, #20]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	4a7f      	ldr	r2, [pc, #508]	; (8005bb4 <UART_SetConfig+0x26c>)
 80059b6:	4013      	ands	r3, r2
 80059b8:	0019      	movs	r1, r3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	697a      	ldr	r2, [r7, #20]
 80059c0:	430a      	orrs	r2, r1
 80059c2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a7b      	ldr	r2, [pc, #492]	; (8005bb8 <UART_SetConfig+0x270>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d127      	bne.n	8005a1e <UART_SetConfig+0xd6>
 80059ce:	4b7b      	ldr	r3, [pc, #492]	; (8005bbc <UART_SetConfig+0x274>)
 80059d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d2:	2203      	movs	r2, #3
 80059d4:	4013      	ands	r3, r2
 80059d6:	2b03      	cmp	r3, #3
 80059d8:	d00d      	beq.n	80059f6 <UART_SetConfig+0xae>
 80059da:	d81b      	bhi.n	8005a14 <UART_SetConfig+0xcc>
 80059dc:	2b02      	cmp	r3, #2
 80059de:	d014      	beq.n	8005a0a <UART_SetConfig+0xc2>
 80059e0:	d818      	bhi.n	8005a14 <UART_SetConfig+0xcc>
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d002      	beq.n	80059ec <UART_SetConfig+0xa4>
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d00a      	beq.n	8005a00 <UART_SetConfig+0xb8>
 80059ea:	e013      	b.n	8005a14 <UART_SetConfig+0xcc>
 80059ec:	231f      	movs	r3, #31
 80059ee:	18fb      	adds	r3, r7, r3
 80059f0:	2200      	movs	r2, #0
 80059f2:	701a      	strb	r2, [r3, #0]
 80059f4:	e021      	b.n	8005a3a <UART_SetConfig+0xf2>
 80059f6:	231f      	movs	r3, #31
 80059f8:	18fb      	adds	r3, r7, r3
 80059fa:	2202      	movs	r2, #2
 80059fc:	701a      	strb	r2, [r3, #0]
 80059fe:	e01c      	b.n	8005a3a <UART_SetConfig+0xf2>
 8005a00:	231f      	movs	r3, #31
 8005a02:	18fb      	adds	r3, r7, r3
 8005a04:	2204      	movs	r2, #4
 8005a06:	701a      	strb	r2, [r3, #0]
 8005a08:	e017      	b.n	8005a3a <UART_SetConfig+0xf2>
 8005a0a:	231f      	movs	r3, #31
 8005a0c:	18fb      	adds	r3, r7, r3
 8005a0e:	2208      	movs	r2, #8
 8005a10:	701a      	strb	r2, [r3, #0]
 8005a12:	e012      	b.n	8005a3a <UART_SetConfig+0xf2>
 8005a14:	231f      	movs	r3, #31
 8005a16:	18fb      	adds	r3, r7, r3
 8005a18:	2210      	movs	r2, #16
 8005a1a:	701a      	strb	r2, [r3, #0]
 8005a1c:	e00d      	b.n	8005a3a <UART_SetConfig+0xf2>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a67      	ldr	r2, [pc, #412]	; (8005bc0 <UART_SetConfig+0x278>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d104      	bne.n	8005a32 <UART_SetConfig+0xea>
 8005a28:	231f      	movs	r3, #31
 8005a2a:	18fb      	adds	r3, r7, r3
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	701a      	strb	r2, [r3, #0]
 8005a30:	e003      	b.n	8005a3a <UART_SetConfig+0xf2>
 8005a32:	231f      	movs	r3, #31
 8005a34:	18fb      	adds	r3, r7, r3
 8005a36:	2210      	movs	r2, #16
 8005a38:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	69da      	ldr	r2, [r3, #28]
 8005a3e:	2380      	movs	r3, #128	; 0x80
 8005a40:	021b      	lsls	r3, r3, #8
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d15d      	bne.n	8005b02 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8005a46:	231f      	movs	r3, #31
 8005a48:	18fb      	adds	r3, r7, r3
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	2b08      	cmp	r3, #8
 8005a4e:	d015      	beq.n	8005a7c <UART_SetConfig+0x134>
 8005a50:	dc18      	bgt.n	8005a84 <UART_SetConfig+0x13c>
 8005a52:	2b04      	cmp	r3, #4
 8005a54:	d00d      	beq.n	8005a72 <UART_SetConfig+0x12a>
 8005a56:	dc15      	bgt.n	8005a84 <UART_SetConfig+0x13c>
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d002      	beq.n	8005a62 <UART_SetConfig+0x11a>
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d005      	beq.n	8005a6c <UART_SetConfig+0x124>
 8005a60:	e010      	b.n	8005a84 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a62:	f7fe fb8f 	bl	8004184 <HAL_RCC_GetPCLK1Freq>
 8005a66:	0003      	movs	r3, r0
 8005a68:	61bb      	str	r3, [r7, #24]
        break;
 8005a6a:	e012      	b.n	8005a92 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a6c:	4b55      	ldr	r3, [pc, #340]	; (8005bc4 <UART_SetConfig+0x27c>)
 8005a6e:	61bb      	str	r3, [r7, #24]
        break;
 8005a70:	e00f      	b.n	8005a92 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a72:	f7fe fb19 	bl	80040a8 <HAL_RCC_GetSysClockFreq>
 8005a76:	0003      	movs	r3, r0
 8005a78:	61bb      	str	r3, [r7, #24]
        break;
 8005a7a:	e00a      	b.n	8005a92 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a7c:	2380      	movs	r3, #128	; 0x80
 8005a7e:	021b      	lsls	r3, r3, #8
 8005a80:	61bb      	str	r3, [r7, #24]
        break;
 8005a82:	e006      	b.n	8005a92 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8005a84:	2300      	movs	r3, #0
 8005a86:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005a88:	231e      	movs	r3, #30
 8005a8a:	18fb      	adds	r3, r7, r3
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	701a      	strb	r2, [r3, #0]
        break;
 8005a90:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d100      	bne.n	8005a9a <UART_SetConfig+0x152>
 8005a98:	e07b      	b.n	8005b92 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	005a      	lsls	r2, r3, #1
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	085b      	lsrs	r3, r3, #1
 8005aa4:	18d2      	adds	r2, r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	0019      	movs	r1, r3
 8005aac:	0010      	movs	r0, r2
 8005aae:	f7fa fb2b 	bl	8000108 <__udivsi3>
 8005ab2:	0003      	movs	r3, r0
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	2b0f      	cmp	r3, #15
 8005abc:	d91c      	bls.n	8005af8 <UART_SetConfig+0x1b0>
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	2380      	movs	r3, #128	; 0x80
 8005ac2:	025b      	lsls	r3, r3, #9
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d217      	bcs.n	8005af8 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	200e      	movs	r0, #14
 8005ace:	183b      	adds	r3, r7, r0
 8005ad0:	210f      	movs	r1, #15
 8005ad2:	438a      	bics	r2, r1
 8005ad4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	085b      	lsrs	r3, r3, #1
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	2207      	movs	r2, #7
 8005ade:	4013      	ands	r3, r2
 8005ae0:	b299      	uxth	r1, r3
 8005ae2:	183b      	adds	r3, r7, r0
 8005ae4:	183a      	adds	r2, r7, r0
 8005ae6:	8812      	ldrh	r2, [r2, #0]
 8005ae8:	430a      	orrs	r2, r1
 8005aea:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	183a      	adds	r2, r7, r0
 8005af2:	8812      	ldrh	r2, [r2, #0]
 8005af4:	60da      	str	r2, [r3, #12]
 8005af6:	e04c      	b.n	8005b92 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8005af8:	231e      	movs	r3, #30
 8005afa:	18fb      	adds	r3, r7, r3
 8005afc:	2201      	movs	r2, #1
 8005afe:	701a      	strb	r2, [r3, #0]
 8005b00:	e047      	b.n	8005b92 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b02:	231f      	movs	r3, #31
 8005b04:	18fb      	adds	r3, r7, r3
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	2b08      	cmp	r3, #8
 8005b0a:	d015      	beq.n	8005b38 <UART_SetConfig+0x1f0>
 8005b0c:	dc18      	bgt.n	8005b40 <UART_SetConfig+0x1f8>
 8005b0e:	2b04      	cmp	r3, #4
 8005b10:	d00d      	beq.n	8005b2e <UART_SetConfig+0x1e6>
 8005b12:	dc15      	bgt.n	8005b40 <UART_SetConfig+0x1f8>
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d002      	beq.n	8005b1e <UART_SetConfig+0x1d6>
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d005      	beq.n	8005b28 <UART_SetConfig+0x1e0>
 8005b1c:	e010      	b.n	8005b40 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b1e:	f7fe fb31 	bl	8004184 <HAL_RCC_GetPCLK1Freq>
 8005b22:	0003      	movs	r3, r0
 8005b24:	61bb      	str	r3, [r7, #24]
        break;
 8005b26:	e012      	b.n	8005b4e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b28:	4b26      	ldr	r3, [pc, #152]	; (8005bc4 <UART_SetConfig+0x27c>)
 8005b2a:	61bb      	str	r3, [r7, #24]
        break;
 8005b2c:	e00f      	b.n	8005b4e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b2e:	f7fe fabb 	bl	80040a8 <HAL_RCC_GetSysClockFreq>
 8005b32:	0003      	movs	r3, r0
 8005b34:	61bb      	str	r3, [r7, #24]
        break;
 8005b36:	e00a      	b.n	8005b4e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b38:	2380      	movs	r3, #128	; 0x80
 8005b3a:	021b      	lsls	r3, r3, #8
 8005b3c:	61bb      	str	r3, [r7, #24]
        break;
 8005b3e:	e006      	b.n	8005b4e <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8005b40:	2300      	movs	r3, #0
 8005b42:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b44:	231e      	movs	r3, #30
 8005b46:	18fb      	adds	r3, r7, r3
 8005b48:	2201      	movs	r2, #1
 8005b4a:	701a      	strb	r2, [r3, #0]
        break;
 8005b4c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d01e      	beq.n	8005b92 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	085a      	lsrs	r2, r3, #1
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	18d2      	adds	r2, r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	0019      	movs	r1, r3
 8005b64:	0010      	movs	r0, r2
 8005b66:	f7fa facf 	bl	8000108 <__udivsi3>
 8005b6a:	0003      	movs	r3, r0
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	2b0f      	cmp	r3, #15
 8005b74:	d909      	bls.n	8005b8a <UART_SetConfig+0x242>
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	2380      	movs	r3, #128	; 0x80
 8005b7a:	025b      	lsls	r3, r3, #9
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d204      	bcs.n	8005b8a <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	693a      	ldr	r2, [r7, #16]
 8005b86:	60da      	str	r2, [r3, #12]
 8005b88:	e003      	b.n	8005b92 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8005b8a:	231e      	movs	r3, #30
 8005b8c:	18fb      	adds	r3, r7, r3
 8005b8e:	2201      	movs	r2, #1
 8005b90:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005b9e:	231e      	movs	r3, #30
 8005ba0:	18fb      	adds	r3, r7, r3
 8005ba2:	781b      	ldrb	r3, [r3, #0]
}
 8005ba4:	0018      	movs	r0, r3
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	b008      	add	sp, #32
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	ffff69f3 	.word	0xffff69f3
 8005bb0:	ffffcfff 	.word	0xffffcfff
 8005bb4:	fffff4ff 	.word	0xfffff4ff
 8005bb8:	40013800 	.word	0x40013800
 8005bbc:	40021000 	.word	0x40021000
 8005bc0:	40004400 	.word	0x40004400
 8005bc4:	007a1200 	.word	0x007a1200

08005bc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	d00b      	beq.n	8005bf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	4a4a      	ldr	r2, [pc, #296]	; (8005d0c <UART_AdvFeatureConfig+0x144>)
 8005be2:	4013      	ands	r3, r2
 8005be4:	0019      	movs	r1, r3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	430a      	orrs	r2, r1
 8005bf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	d00b      	beq.n	8005c14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	4a43      	ldr	r2, [pc, #268]	; (8005d10 <UART_AdvFeatureConfig+0x148>)
 8005c04:	4013      	ands	r3, r2
 8005c06:	0019      	movs	r1, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	430a      	orrs	r2, r1
 8005c12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c18:	2204      	movs	r2, #4
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	d00b      	beq.n	8005c36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	4a3b      	ldr	r2, [pc, #236]	; (8005d14 <UART_AdvFeatureConfig+0x14c>)
 8005c26:	4013      	ands	r3, r2
 8005c28:	0019      	movs	r1, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	430a      	orrs	r2, r1
 8005c34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3a:	2208      	movs	r2, #8
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	d00b      	beq.n	8005c58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	4a34      	ldr	r2, [pc, #208]	; (8005d18 <UART_AdvFeatureConfig+0x150>)
 8005c48:	4013      	ands	r3, r2
 8005c4a:	0019      	movs	r1, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	430a      	orrs	r2, r1
 8005c56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5c:	2210      	movs	r2, #16
 8005c5e:	4013      	ands	r3, r2
 8005c60:	d00b      	beq.n	8005c7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	4a2c      	ldr	r2, [pc, #176]	; (8005d1c <UART_AdvFeatureConfig+0x154>)
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	0019      	movs	r1, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	430a      	orrs	r2, r1
 8005c78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7e:	2220      	movs	r2, #32
 8005c80:	4013      	ands	r3, r2
 8005c82:	d00b      	beq.n	8005c9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	4a25      	ldr	r2, [pc, #148]	; (8005d20 <UART_AdvFeatureConfig+0x158>)
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	0019      	movs	r1, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca0:	2240      	movs	r2, #64	; 0x40
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	d01d      	beq.n	8005ce2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	4a1d      	ldr	r2, [pc, #116]	; (8005d24 <UART_AdvFeatureConfig+0x15c>)
 8005cae:	4013      	ands	r3, r2
 8005cb0:	0019      	movs	r1, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	430a      	orrs	r2, r1
 8005cbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cc2:	2380      	movs	r3, #128	; 0x80
 8005cc4:	035b      	lsls	r3, r3, #13
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d10b      	bne.n	8005ce2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	4a15      	ldr	r2, [pc, #84]	; (8005d28 <UART_AdvFeatureConfig+0x160>)
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	0019      	movs	r1, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	430a      	orrs	r2, r1
 8005ce0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce6:	2280      	movs	r2, #128	; 0x80
 8005ce8:	4013      	ands	r3, r2
 8005cea:	d00b      	beq.n	8005d04 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	4a0e      	ldr	r2, [pc, #56]	; (8005d2c <UART_AdvFeatureConfig+0x164>)
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	0019      	movs	r1, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	430a      	orrs	r2, r1
 8005d02:	605a      	str	r2, [r3, #4]
  }
}
 8005d04:	46c0      	nop			; (mov r8, r8)
 8005d06:	46bd      	mov	sp, r7
 8005d08:	b002      	add	sp, #8
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	fffdffff 	.word	0xfffdffff
 8005d10:	fffeffff 	.word	0xfffeffff
 8005d14:	fffbffff 	.word	0xfffbffff
 8005d18:	ffff7fff 	.word	0xffff7fff
 8005d1c:	ffffefff 	.word	0xffffefff
 8005d20:	ffffdfff 	.word	0xffffdfff
 8005d24:	ffefffff 	.word	0xffefffff
 8005d28:	ff9fffff 	.word	0xff9fffff
 8005d2c:	fff7ffff 	.word	0xfff7ffff

08005d30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b086      	sub	sp, #24
 8005d34:	af02      	add	r7, sp, #8
 8005d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2280      	movs	r2, #128	; 0x80
 8005d3c:	2100      	movs	r1, #0
 8005d3e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d40:	f7fb ff3c 	bl	8001bbc <HAL_GetTick>
 8005d44:	0003      	movs	r3, r0
 8005d46:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2208      	movs	r2, #8
 8005d50:	4013      	ands	r3, r2
 8005d52:	2b08      	cmp	r3, #8
 8005d54:	d10c      	bne.n	8005d70 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2280      	movs	r2, #128	; 0x80
 8005d5a:	0391      	lsls	r1, r2, #14
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	4a17      	ldr	r2, [pc, #92]	; (8005dbc <UART_CheckIdleState+0x8c>)
 8005d60:	9200      	str	r2, [sp, #0]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f000 f82c 	bl	8005dc0 <UART_WaitOnFlagUntilTimeout>
 8005d68:	1e03      	subs	r3, r0, #0
 8005d6a:	d001      	beq.n	8005d70 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	e021      	b.n	8005db4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2204      	movs	r2, #4
 8005d78:	4013      	ands	r3, r2
 8005d7a:	2b04      	cmp	r3, #4
 8005d7c:	d10c      	bne.n	8005d98 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2280      	movs	r2, #128	; 0x80
 8005d82:	03d1      	lsls	r1, r2, #15
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	4a0d      	ldr	r2, [pc, #52]	; (8005dbc <UART_CheckIdleState+0x8c>)
 8005d88:	9200      	str	r2, [sp, #0]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f000 f818 	bl	8005dc0 <UART_WaitOnFlagUntilTimeout>
 8005d90:	1e03      	subs	r3, r0, #0
 8005d92:	d001      	beq.n	8005d98 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e00d      	b.n	8005db4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2220      	movs	r2, #32
 8005da2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2274      	movs	r2, #116	; 0x74
 8005dae:	2100      	movs	r1, #0
 8005db0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	0018      	movs	r0, r3
 8005db6:	46bd      	mov	sp, r7
 8005db8:	b004      	add	sp, #16
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	01ffffff 	.word	0x01ffffff

08005dc0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b094      	sub	sp, #80	; 0x50
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	603b      	str	r3, [r7, #0]
 8005dcc:	1dfb      	adds	r3, r7, #7
 8005dce:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dd0:	e0a3      	b.n	8005f1a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	d100      	bne.n	8005dda <UART_WaitOnFlagUntilTimeout+0x1a>
 8005dd8:	e09f      	b.n	8005f1a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dda:	f7fb feef 	bl	8001bbc <HAL_GetTick>
 8005dde:	0002      	movs	r2, r0
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d302      	bcc.n	8005df0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005dea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d13d      	bne.n	8005e6c <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005df0:	f3ef 8310 	mrs	r3, PRIMASK
 8005df4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005df8:	647b      	str	r3, [r7, #68]	; 0x44
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e00:	f383 8810 	msr	PRIMASK, r3
}
 8005e04:	46c0      	nop			; (mov r8, r8)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	494c      	ldr	r1, [pc, #304]	; (8005f44 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005e12:	400a      	ands	r2, r1
 8005e14:	601a      	str	r2, [r3, #0]
 8005e16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e18:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1c:	f383 8810 	msr	PRIMASK, r3
}
 8005e20:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e22:	f3ef 8310 	mrs	r3, PRIMASK
 8005e26:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e2a:	643b      	str	r3, [r7, #64]	; 0x40
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e32:	f383 8810 	msr	PRIMASK, r3
}
 8005e36:	46c0      	nop			; (mov r8, r8)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	689a      	ldr	r2, [r3, #8]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2101      	movs	r1, #1
 8005e44:	438a      	bics	r2, r1
 8005e46:	609a      	str	r2, [r3, #8]
 8005e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e4e:	f383 8810 	msr	PRIMASK, r3
}
 8005e52:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2220      	movs	r2, #32
 8005e58:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2220      	movs	r2, #32
 8005e5e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2274      	movs	r2, #116	; 0x74
 8005e64:	2100      	movs	r1, #0
 8005e66:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e067      	b.n	8005f3c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2204      	movs	r2, #4
 8005e74:	4013      	ands	r3, r2
 8005e76:	d050      	beq.n	8005f1a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	69da      	ldr	r2, [r3, #28]
 8005e7e:	2380      	movs	r3, #128	; 0x80
 8005e80:	011b      	lsls	r3, r3, #4
 8005e82:	401a      	ands	r2, r3
 8005e84:	2380      	movs	r3, #128	; 0x80
 8005e86:	011b      	lsls	r3, r3, #4
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d146      	bne.n	8005f1a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2280      	movs	r2, #128	; 0x80
 8005e92:	0112      	lsls	r2, r2, #4
 8005e94:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e96:	f3ef 8310 	mrs	r3, PRIMASK
 8005e9a:	613b      	str	r3, [r7, #16]
  return(result);
 8005e9c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	f383 8810 	msr	PRIMASK, r3
}
 8005eaa:	46c0      	nop			; (mov r8, r8)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4923      	ldr	r1, [pc, #140]	; (8005f44 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005eb8:	400a      	ands	r2, r1
 8005eba:	601a      	str	r2, [r3, #0]
 8005ebc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ebe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	f383 8810 	msr	PRIMASK, r3
}
 8005ec6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ec8:	f3ef 8310 	mrs	r3, PRIMASK
 8005ecc:	61fb      	str	r3, [r7, #28]
  return(result);
 8005ece:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ed0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ed6:	6a3b      	ldr	r3, [r7, #32]
 8005ed8:	f383 8810 	msr	PRIMASK, r3
}
 8005edc:	46c0      	nop			; (mov r8, r8)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	689a      	ldr	r2, [r3, #8]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2101      	movs	r1, #1
 8005eea:	438a      	bics	r2, r1
 8005eec:	609a      	str	r2, [r3, #8]
 8005eee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ef0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef4:	f383 8810 	msr	PRIMASK, r3
}
 8005ef8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2220      	movs	r2, #32
 8005efe:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2220      	movs	r2, #32
 8005f04:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2280      	movs	r2, #128	; 0x80
 8005f0a:	2120      	movs	r1, #32
 8005f0c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2274      	movs	r2, #116	; 0x74
 8005f12:	2100      	movs	r1, #0
 8005f14:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e010      	b.n	8005f3c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	69db      	ldr	r3, [r3, #28]
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	4013      	ands	r3, r2
 8005f24:	68ba      	ldr	r2, [r7, #8]
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	425a      	negs	r2, r3
 8005f2a:	4153      	adcs	r3, r2
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	001a      	movs	r2, r3
 8005f30:	1dfb      	adds	r3, r7, #7
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d100      	bne.n	8005f3a <UART_WaitOnFlagUntilTimeout+0x17a>
 8005f38:	e74b      	b.n	8005dd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f3a:	2300      	movs	r3, #0
}
 8005f3c:	0018      	movs	r0, r3
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	b014      	add	sp, #80	; 0x50
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	fffffe5f 	.word	0xfffffe5f

08005f48 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b08c      	sub	sp, #48	; 0x30
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	1dbb      	adds	r3, r7, #6
 8005f54:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	68ba      	ldr	r2, [r7, #8]
 8005f5a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	1dba      	adds	r2, r7, #6
 8005f60:	2158      	movs	r1, #88	; 0x58
 8005f62:	8812      	ldrh	r2, [r2, #0]
 8005f64:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	1dba      	adds	r2, r7, #6
 8005f6a:	215a      	movs	r1, #90	; 0x5a
 8005f6c:	8812      	ldrh	r2, [r2, #0]
 8005f6e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2200      	movs	r2, #0
 8005f74:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	689a      	ldr	r2, [r3, #8]
 8005f7a:	2380      	movs	r3, #128	; 0x80
 8005f7c:	015b      	lsls	r3, r3, #5
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d10d      	bne.n	8005f9e <UART_Start_Receive_IT+0x56>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d104      	bne.n	8005f94 <UART_Start_Receive_IT+0x4c>
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	225c      	movs	r2, #92	; 0x5c
 8005f8e:	4939      	ldr	r1, [pc, #228]	; (8006074 <UART_Start_Receive_IT+0x12c>)
 8005f90:	5299      	strh	r1, [r3, r2]
 8005f92:	e01a      	b.n	8005fca <UART_Start_Receive_IT+0x82>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	225c      	movs	r2, #92	; 0x5c
 8005f98:	21ff      	movs	r1, #255	; 0xff
 8005f9a:	5299      	strh	r1, [r3, r2]
 8005f9c:	e015      	b.n	8005fca <UART_Start_Receive_IT+0x82>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d10d      	bne.n	8005fc2 <UART_Start_Receive_IT+0x7a>
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d104      	bne.n	8005fb8 <UART_Start_Receive_IT+0x70>
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	225c      	movs	r2, #92	; 0x5c
 8005fb2:	21ff      	movs	r1, #255	; 0xff
 8005fb4:	5299      	strh	r1, [r3, r2]
 8005fb6:	e008      	b.n	8005fca <UART_Start_Receive_IT+0x82>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	225c      	movs	r2, #92	; 0x5c
 8005fbc:	217f      	movs	r1, #127	; 0x7f
 8005fbe:	5299      	strh	r1, [r3, r2]
 8005fc0:	e003      	b.n	8005fca <UART_Start_Receive_IT+0x82>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	225c      	movs	r2, #92	; 0x5c
 8005fc6:	2100      	movs	r1, #0
 8005fc8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2280      	movs	r2, #128	; 0x80
 8005fce:	2100      	movs	r1, #0
 8005fd0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2222      	movs	r2, #34	; 0x22
 8005fd6:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fd8:	f3ef 8310 	mrs	r3, PRIMASK
 8005fdc:	61fb      	str	r3, [r7, #28]
  return(result);
 8005fde:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fe6:	6a3b      	ldr	r3, [r7, #32]
 8005fe8:	f383 8810 	msr	PRIMASK, r3
}
 8005fec:	46c0      	nop			; (mov r8, r8)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	689a      	ldr	r2, [r3, #8]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2101      	movs	r1, #1
 8005ffa:	430a      	orrs	r2, r1
 8005ffc:	609a      	str	r2, [r3, #8]
 8005ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006000:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006004:	f383 8810 	msr	PRIMASK, r3
}
 8006008:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	689a      	ldr	r2, [r3, #8]
 800600e:	2380      	movs	r3, #128	; 0x80
 8006010:	015b      	lsls	r3, r3, #5
 8006012:	429a      	cmp	r2, r3
 8006014:	d107      	bne.n	8006026 <UART_Start_Receive_IT+0xde>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d103      	bne.n	8006026 <UART_Start_Receive_IT+0xde>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	4a15      	ldr	r2, [pc, #84]	; (8006078 <UART_Start_Receive_IT+0x130>)
 8006022:	665a      	str	r2, [r3, #100]	; 0x64
 8006024:	e002      	b.n	800602c <UART_Start_Receive_IT+0xe4>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	4a14      	ldr	r2, [pc, #80]	; (800607c <UART_Start_Receive_IT+0x134>)
 800602a:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2274      	movs	r2, #116	; 0x74
 8006030:	2100      	movs	r1, #0
 8006032:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006034:	f3ef 8310 	mrs	r3, PRIMASK
 8006038:	613b      	str	r3, [r7, #16]
  return(result);
 800603a:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800603c:	62bb      	str	r3, [r7, #40]	; 0x28
 800603e:	2301      	movs	r3, #1
 8006040:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	f383 8810 	msr	PRIMASK, r3
}
 8006048:	46c0      	nop			; (mov r8, r8)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2190      	movs	r1, #144	; 0x90
 8006056:	0049      	lsls	r1, r1, #1
 8006058:	430a      	orrs	r2, r1
 800605a:	601a      	str	r2, [r3, #0]
 800605c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	f383 8810 	msr	PRIMASK, r3
}
 8006066:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	0018      	movs	r0, r3
 800606c:	46bd      	mov	sp, r7
 800606e:	b00c      	add	sp, #48	; 0x30
 8006070:	bd80      	pop	{r7, pc}
 8006072:	46c0      	nop			; (mov r8, r8)
 8006074:	000001ff 	.word	0x000001ff
 8006078:	08006331 	.word	0x08006331
 800607c:	080061c9 	.word	0x080061c9

08006080 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b08e      	sub	sp, #56	; 0x38
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006088:	f3ef 8310 	mrs	r3, PRIMASK
 800608c:	617b      	str	r3, [r7, #20]
  return(result);
 800608e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006090:	637b      	str	r3, [r7, #52]	; 0x34
 8006092:	2301      	movs	r3, #1
 8006094:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	f383 8810 	msr	PRIMASK, r3
}
 800609c:	46c0      	nop			; (mov r8, r8)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4925      	ldr	r1, [pc, #148]	; (8006140 <UART_EndRxTransfer+0xc0>)
 80060aa:	400a      	ands	r2, r1
 80060ac:	601a      	str	r2, [r3, #0]
 80060ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	f383 8810 	msr	PRIMASK, r3
}
 80060b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060ba:	f3ef 8310 	mrs	r3, PRIMASK
 80060be:	623b      	str	r3, [r7, #32]
  return(result);
 80060c0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060c2:	633b      	str	r3, [r7, #48]	; 0x30
 80060c4:	2301      	movs	r3, #1
 80060c6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ca:	f383 8810 	msr	PRIMASK, r3
}
 80060ce:	46c0      	nop			; (mov r8, r8)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	689a      	ldr	r2, [r3, #8]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2101      	movs	r1, #1
 80060dc:	438a      	bics	r2, r1
 80060de:	609a      	str	r2, [r3, #8]
 80060e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e6:	f383 8810 	msr	PRIMASK, r3
}
 80060ea:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d118      	bne.n	8006126 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060f4:	f3ef 8310 	mrs	r3, PRIMASK
 80060f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80060fa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060fe:	2301      	movs	r3, #1
 8006100:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f383 8810 	msr	PRIMASK, r3
}
 8006108:	46c0      	nop			; (mov r8, r8)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2110      	movs	r1, #16
 8006116:	438a      	bics	r2, r1
 8006118:	601a      	str	r2, [r3, #0]
 800611a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800611c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	f383 8810 	msr	PRIMASK, r3
}
 8006124:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2220      	movs	r2, #32
 800612a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006138:	46c0      	nop			; (mov r8, r8)
 800613a:	46bd      	mov	sp, r7
 800613c:	b00e      	add	sp, #56	; 0x38
 800613e:	bd80      	pop	{r7, pc}
 8006140:	fffffedf 	.word	0xfffffedf

08006144 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006150:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	225a      	movs	r2, #90	; 0x5a
 8006156:	2100      	movs	r1, #0
 8006158:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2252      	movs	r2, #82	; 0x52
 800615e:	2100      	movs	r1, #0
 8006160:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	0018      	movs	r0, r3
 8006166:	f7ff fbdb 	bl	8005920 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800616a:	46c0      	nop			; (mov r8, r8)
 800616c:	46bd      	mov	sp, r7
 800616e:	b004      	add	sp, #16
 8006170:	bd80      	pop	{r7, pc}

08006172 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006172:	b580      	push	{r7, lr}
 8006174:	b086      	sub	sp, #24
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800617a:	f3ef 8310 	mrs	r3, PRIMASK
 800617e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006180:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006182:	617b      	str	r3, [r7, #20]
 8006184:	2301      	movs	r3, #1
 8006186:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f383 8810 	msr	PRIMASK, r3
}
 800618e:	46c0      	nop			; (mov r8, r8)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	2140      	movs	r1, #64	; 0x40
 800619c:	438a      	bics	r2, r1
 800619e:	601a      	str	r2, [r3, #0]
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	f383 8810 	msr	PRIMASK, r3
}
 80061aa:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2220      	movs	r2, #32
 80061b0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	0018      	movs	r0, r3
 80061bc:	f7ff fba8 	bl	8005910 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061c0:	46c0      	nop			; (mov r8, r8)
 80061c2:	46bd      	mov	sp, r7
 80061c4:	b006      	add	sp, #24
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b090      	sub	sp, #64	; 0x40
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80061d0:	203e      	movs	r0, #62	; 0x3e
 80061d2:	183b      	adds	r3, r7, r0
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	215c      	movs	r1, #92	; 0x5c
 80061d8:	5a52      	ldrh	r2, [r2, r1]
 80061da:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061e0:	2b22      	cmp	r3, #34	; 0x22
 80061e2:	d000      	beq.n	80061e6 <UART_RxISR_8BIT+0x1e>
 80061e4:	e095      	b.n	8006312 <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	213c      	movs	r1, #60	; 0x3c
 80061ec:	187b      	adds	r3, r7, r1
 80061ee:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80061f0:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80061f2:	187b      	adds	r3, r7, r1
 80061f4:	881b      	ldrh	r3, [r3, #0]
 80061f6:	b2da      	uxtb	r2, r3
 80061f8:	183b      	adds	r3, r7, r0
 80061fa:	881b      	ldrh	r3, [r3, #0]
 80061fc:	b2d9      	uxtb	r1, r3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006202:	400a      	ands	r2, r1
 8006204:	b2d2      	uxtb	r2, r2
 8006206:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800620c:	1c5a      	adds	r2, r3, #1
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	225a      	movs	r2, #90	; 0x5a
 8006216:	5a9b      	ldrh	r3, [r3, r2]
 8006218:	b29b      	uxth	r3, r3
 800621a:	3b01      	subs	r3, #1
 800621c:	b299      	uxth	r1, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	225a      	movs	r2, #90	; 0x5a
 8006222:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	225a      	movs	r2, #90	; 0x5a
 8006228:	5a9b      	ldrh	r3, [r3, r2]
 800622a:	b29b      	uxth	r3, r3
 800622c:	2b00      	cmp	r3, #0
 800622e:	d178      	bne.n	8006322 <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006230:	f3ef 8310 	mrs	r3, PRIMASK
 8006234:	61bb      	str	r3, [r7, #24]
  return(result);
 8006236:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006238:	63bb      	str	r3, [r7, #56]	; 0x38
 800623a:	2301      	movs	r3, #1
 800623c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	f383 8810 	msr	PRIMASK, r3
}
 8006244:	46c0      	nop			; (mov r8, r8)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4936      	ldr	r1, [pc, #216]	; (800632c <UART_RxISR_8BIT+0x164>)
 8006252:	400a      	ands	r2, r1
 8006254:	601a      	str	r2, [r3, #0]
 8006256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006258:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800625a:	6a3b      	ldr	r3, [r7, #32]
 800625c:	f383 8810 	msr	PRIMASK, r3
}
 8006260:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006262:	f3ef 8310 	mrs	r3, PRIMASK
 8006266:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006268:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800626a:	637b      	str	r3, [r7, #52]	; 0x34
 800626c:	2301      	movs	r3, #1
 800626e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006272:	f383 8810 	msr	PRIMASK, r3
}
 8006276:	46c0      	nop			; (mov r8, r8)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	689a      	ldr	r2, [r3, #8]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2101      	movs	r1, #1
 8006284:	438a      	bics	r2, r1
 8006286:	609a      	str	r2, [r3, #8]
 8006288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800628a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800628c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628e:	f383 8810 	msr	PRIMASK, r3
}
 8006292:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2220      	movs	r2, #32
 8006298:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d12f      	bne.n	8006308 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062ae:	f3ef 8310 	mrs	r3, PRIMASK
 80062b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80062b4:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062b6:	633b      	str	r3, [r7, #48]	; 0x30
 80062b8:	2301      	movs	r3, #1
 80062ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	f383 8810 	msr	PRIMASK, r3
}
 80062c2:	46c0      	nop			; (mov r8, r8)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2110      	movs	r1, #16
 80062d0:	438a      	bics	r2, r1
 80062d2:	601a      	str	r2, [r3, #0]
 80062d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	f383 8810 	msr	PRIMASK, r3
}
 80062de:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	69db      	ldr	r3, [r3, #28]
 80062e6:	2210      	movs	r2, #16
 80062e8:	4013      	ands	r3, r2
 80062ea:	2b10      	cmp	r3, #16
 80062ec:	d103      	bne.n	80062f6 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2210      	movs	r2, #16
 80062f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2258      	movs	r2, #88	; 0x58
 80062fa:	5a9a      	ldrh	r2, [r3, r2]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	0011      	movs	r1, r2
 8006300:	0018      	movs	r0, r3
 8006302:	f7ff fb15 	bl	8005930 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006306:	e00c      	b.n	8006322 <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	0018      	movs	r0, r3
 800630c:	f7fa fb20 	bl	8000950 <HAL_UART_RxCpltCallback>
}
 8006310:	e007      	b.n	8006322 <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	699a      	ldr	r2, [r3, #24]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2108      	movs	r1, #8
 800631e:	430a      	orrs	r2, r1
 8006320:	619a      	str	r2, [r3, #24]
}
 8006322:	46c0      	nop			; (mov r8, r8)
 8006324:	46bd      	mov	sp, r7
 8006326:	b010      	add	sp, #64	; 0x40
 8006328:	bd80      	pop	{r7, pc}
 800632a:	46c0      	nop			; (mov r8, r8)
 800632c:	fffffedf 	.word	0xfffffedf

08006330 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b090      	sub	sp, #64	; 0x40
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006338:	203e      	movs	r0, #62	; 0x3e
 800633a:	183b      	adds	r3, r7, r0
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	215c      	movs	r1, #92	; 0x5c
 8006340:	5a52      	ldrh	r2, [r2, r1]
 8006342:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006348:	2b22      	cmp	r3, #34	; 0x22
 800634a:	d000      	beq.n	800634e <UART_RxISR_16BIT+0x1e>
 800634c:	e095      	b.n	800647a <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	213c      	movs	r1, #60	; 0x3c
 8006354:	187b      	adds	r3, r7, r1
 8006356:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8006358:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800635e:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8006360:	187b      	adds	r3, r7, r1
 8006362:	183a      	adds	r2, r7, r0
 8006364:	881b      	ldrh	r3, [r3, #0]
 8006366:	8812      	ldrh	r2, [r2, #0]
 8006368:	4013      	ands	r3, r2
 800636a:	b29a      	uxth	r2, r3
 800636c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006374:	1c9a      	adds	r2, r3, #2
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	225a      	movs	r2, #90	; 0x5a
 800637e:	5a9b      	ldrh	r3, [r3, r2]
 8006380:	b29b      	uxth	r3, r3
 8006382:	3b01      	subs	r3, #1
 8006384:	b299      	uxth	r1, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	225a      	movs	r2, #90	; 0x5a
 800638a:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	225a      	movs	r2, #90	; 0x5a
 8006390:	5a9b      	ldrh	r3, [r3, r2]
 8006392:	b29b      	uxth	r3, r3
 8006394:	2b00      	cmp	r3, #0
 8006396:	d178      	bne.n	800648a <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006398:	f3ef 8310 	mrs	r3, PRIMASK
 800639c:	617b      	str	r3, [r7, #20]
  return(result);
 800639e:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063a0:	637b      	str	r3, [r7, #52]	; 0x34
 80063a2:	2301      	movs	r3, #1
 80063a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	f383 8810 	msr	PRIMASK, r3
}
 80063ac:	46c0      	nop			; (mov r8, r8)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4936      	ldr	r1, [pc, #216]	; (8006494 <UART_RxISR_16BIT+0x164>)
 80063ba:	400a      	ands	r2, r1
 80063bc:	601a      	str	r2, [r3, #0]
 80063be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063c2:	69fb      	ldr	r3, [r7, #28]
 80063c4:	f383 8810 	msr	PRIMASK, r3
}
 80063c8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063ca:	f3ef 8310 	mrs	r3, PRIMASK
 80063ce:	623b      	str	r3, [r7, #32]
  return(result);
 80063d0:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063d2:	633b      	str	r3, [r7, #48]	; 0x30
 80063d4:	2301      	movs	r3, #1
 80063d6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063da:	f383 8810 	msr	PRIMASK, r3
}
 80063de:	46c0      	nop			; (mov r8, r8)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	689a      	ldr	r2, [r3, #8]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2101      	movs	r1, #1
 80063ec:	438a      	bics	r2, r1
 80063ee:	609a      	str	r2, [r3, #8]
 80063f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f6:	f383 8810 	msr	PRIMASK, r3
}
 80063fa:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2220      	movs	r2, #32
 8006400:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800640c:	2b01      	cmp	r3, #1
 800640e:	d12f      	bne.n	8006470 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006416:	f3ef 8310 	mrs	r3, PRIMASK
 800641a:	60bb      	str	r3, [r7, #8]
  return(result);
 800641c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800641e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006420:	2301      	movs	r3, #1
 8006422:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f383 8810 	msr	PRIMASK, r3
}
 800642a:	46c0      	nop			; (mov r8, r8)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2110      	movs	r1, #16
 8006438:	438a      	bics	r2, r1
 800643a:	601a      	str	r2, [r3, #0]
 800643c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	f383 8810 	msr	PRIMASK, r3
}
 8006446:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	69db      	ldr	r3, [r3, #28]
 800644e:	2210      	movs	r2, #16
 8006450:	4013      	ands	r3, r2
 8006452:	2b10      	cmp	r3, #16
 8006454:	d103      	bne.n	800645e <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2210      	movs	r2, #16
 800645c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2258      	movs	r2, #88	; 0x58
 8006462:	5a9a      	ldrh	r2, [r3, r2]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	0011      	movs	r1, r2
 8006468:	0018      	movs	r0, r3
 800646a:	f7ff fa61 	bl	8005930 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800646e:	e00c      	b.n	800648a <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	0018      	movs	r0, r3
 8006474:	f7fa fa6c 	bl	8000950 <HAL_UART_RxCpltCallback>
}
 8006478:	e007      	b.n	800648a <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	699a      	ldr	r2, [r3, #24]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2108      	movs	r1, #8
 8006486:	430a      	orrs	r2, r1
 8006488:	619a      	str	r2, [r3, #24]
}
 800648a:	46c0      	nop			; (mov r8, r8)
 800648c:	46bd      	mov	sp, r7
 800648e:	b010      	add	sp, #64	; 0x40
 8006490:	bd80      	pop	{r7, pc}
 8006492:	46c0      	nop			; (mov r8, r8)
 8006494:	fffffedf 	.word	0xfffffedf

08006498 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80064a0:	46c0      	nop			; (mov r8, r8)
 80064a2:	46bd      	mov	sp, r7
 80064a4:	b002      	add	sp, #8
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b088      	sub	sp, #32
 80064ac:	af02      	add	r7, sp, #8
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	1d3b      	adds	r3, r7, #4
 80064b2:	6019      	str	r1, [r3, #0]
 80064b4:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064b6:	2317      	movs	r3, #23
 80064b8:	18fb      	adds	r3, r7, r3
 80064ba:	2200      	movs	r2, #0
 80064bc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2274      	movs	r2, #116	; 0x74
 80064c2:	5c9b      	ldrb	r3, [r3, r2]
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d101      	bne.n	80064cc <HAL_UARTEx_StopModeWakeUpSourceConfig+0x24>
 80064c8:	2302      	movs	r3, #2
 80064ca:	e04a      	b.n	8006562 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xba>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2274      	movs	r2, #116	; 0x74
 80064d0:	2101      	movs	r1, #1
 80064d2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2224      	movs	r2, #36	; 0x24
 80064d8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2101      	movs	r1, #1
 80064e6:	438a      	bics	r2, r1
 80064e8:	601a      	str	r2, [r3, #0]

#if defined(USART_CR3_WUS)
  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	4a1e      	ldr	r2, [pc, #120]	; (800656c <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc4>)
 80064f2:	4013      	ands	r3, r2
 80064f4:	0019      	movs	r1, r3
 80064f6:	1d3b      	adds	r3, r7, #4
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	430a      	orrs	r2, r1
 8006500:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_WUS */

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8006502:	1d3b      	adds	r3, r7, #4
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d105      	bne.n	8006516 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x6e>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800650a:	1d3b      	adds	r3, r7, #4
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	6819      	ldr	r1, [r3, #0]
 8006510:	685a      	ldr	r2, [r3, #4]
 8006512:	f000 f860 	bl	80065d6 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2101      	movs	r1, #1
 8006522:	430a      	orrs	r2, r1
 8006524:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006526:	f7fb fb49 	bl	8001bbc <HAL_GetTick>
 800652a:	0003      	movs	r3, r0
 800652c:	613b      	str	r3, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	2280      	movs	r2, #128	; 0x80
 8006532:	03d1      	lsls	r1, r2, #15
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	4a0e      	ldr	r2, [pc, #56]	; (8006570 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc8>)
 8006538:	9200      	str	r2, [sp, #0]
 800653a:	2200      	movs	r2, #0
 800653c:	f7ff fc40 	bl	8005dc0 <UART_WaitOnFlagUntilTimeout>
 8006540:	1e03      	subs	r3, r0, #0
 8006542:	d004      	beq.n	800654e <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa6>
  {
    status = HAL_TIMEOUT;
 8006544:	2317      	movs	r3, #23
 8006546:	18fb      	adds	r3, r7, r3
 8006548:	2203      	movs	r2, #3
 800654a:	701a      	strb	r2, [r3, #0]
 800654c:	e002      	b.n	8006554 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xac>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2220      	movs	r2, #32
 8006552:	679a      	str	r2, [r3, #120]	; 0x78
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2274      	movs	r2, #116	; 0x74
 8006558:	2100      	movs	r1, #0
 800655a:	5499      	strb	r1, [r3, r2]

  return status;
 800655c:	2317      	movs	r3, #23
 800655e:	18fb      	adds	r3, r7, r3
 8006560:	781b      	ldrb	r3, [r3, #0]
}
 8006562:	0018      	movs	r0, r3
 8006564:	46bd      	mov	sp, r7
 8006566:	b006      	add	sp, #24
 8006568:	bd80      	pop	{r7, pc}
 800656a:	46c0      	nop			; (mov r8, r8)
 800656c:	ffcfffff 	.word	0xffcfffff
 8006570:	01ffffff 	.word	0x01ffffff

08006574 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b086      	sub	sp, #24
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2274      	movs	r2, #116	; 0x74
 8006580:	5c9b      	ldrb	r3, [r3, r2]
 8006582:	2b01      	cmp	r3, #1
 8006584:	d101      	bne.n	800658a <HAL_UARTEx_EnableStopMode+0x16>
 8006586:	2302      	movs	r3, #2
 8006588:	e021      	b.n	80065ce <HAL_UARTEx_EnableStopMode+0x5a>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2274      	movs	r2, #116	; 0x74
 800658e:	2101      	movs	r1, #1
 8006590:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006592:	f3ef 8310 	mrs	r3, PRIMASK
 8006596:	60bb      	str	r3, [r7, #8]
  return(result);
 8006598:	68bb      	ldr	r3, [r7, #8]

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800659a:	617b      	str	r3, [r7, #20]
 800659c:	2301      	movs	r3, #1
 800659e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f383 8810 	msr	PRIMASK, r3
}
 80065a6:	46c0      	nop			; (mov r8, r8)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	2102      	movs	r1, #2
 80065b4:	430a      	orrs	r2, r1
 80065b6:	601a      	str	r2, [r3, #0]
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	f383 8810 	msr	PRIMASK, r3
}
 80065c2:	46c0      	nop			; (mov r8, r8)

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2274      	movs	r2, #116	; 0x74
 80065c8:	2100      	movs	r1, #0
 80065ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	0018      	movs	r0, r3
 80065d0:	46bd      	mov	sp, r7
 80065d2:	b006      	add	sp, #24
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b084      	sub	sp, #16
 80065da:	af00      	add	r7, sp, #0
 80065dc:	60f8      	str	r0, [r7, #12]
 80065de:	1d3b      	adds	r3, r7, #4
 80065e0:	6019      	str	r1, [r3, #0]
 80065e2:	605a      	str	r2, [r3, #4]
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	2210      	movs	r2, #16
 80065ec:	4393      	bics	r3, r2
 80065ee:	001a      	movs	r2, r3
 80065f0:	1d3b      	adds	r3, r7, #4
 80065f2:	889b      	ldrh	r3, [r3, #4]
 80065f4:	0019      	movs	r1, r3
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	430a      	orrs	r2, r1
 80065fc:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	021b      	lsls	r3, r3, #8
 8006606:	0a19      	lsrs	r1, r3, #8
 8006608:	1d3b      	adds	r3, r7, #4
 800660a:	799b      	ldrb	r3, [r3, #6]
 800660c:	061a      	lsls	r2, r3, #24
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	430a      	orrs	r2, r1
 8006614:	605a      	str	r2, [r3, #4]
}
 8006616:	46c0      	nop			; (mov r8, r8)
 8006618:	46bd      	mov	sp, r7
 800661a:	b004      	add	sp, #16
 800661c:	bd80      	pop	{r7, pc}
	...

08006620 <__libc_init_array>:
 8006620:	b570      	push	{r4, r5, r6, lr}
 8006622:	2600      	movs	r6, #0
 8006624:	4d0c      	ldr	r5, [pc, #48]	; (8006658 <__libc_init_array+0x38>)
 8006626:	4c0d      	ldr	r4, [pc, #52]	; (800665c <__libc_init_array+0x3c>)
 8006628:	1b64      	subs	r4, r4, r5
 800662a:	10a4      	asrs	r4, r4, #2
 800662c:	42a6      	cmp	r6, r4
 800662e:	d109      	bne.n	8006644 <__libc_init_array+0x24>
 8006630:	2600      	movs	r6, #0
 8006632:	f000 f821 	bl	8006678 <_init>
 8006636:	4d0a      	ldr	r5, [pc, #40]	; (8006660 <__libc_init_array+0x40>)
 8006638:	4c0a      	ldr	r4, [pc, #40]	; (8006664 <__libc_init_array+0x44>)
 800663a:	1b64      	subs	r4, r4, r5
 800663c:	10a4      	asrs	r4, r4, #2
 800663e:	42a6      	cmp	r6, r4
 8006640:	d105      	bne.n	800664e <__libc_init_array+0x2e>
 8006642:	bd70      	pop	{r4, r5, r6, pc}
 8006644:	00b3      	lsls	r3, r6, #2
 8006646:	58eb      	ldr	r3, [r5, r3]
 8006648:	4798      	blx	r3
 800664a:	3601      	adds	r6, #1
 800664c:	e7ee      	b.n	800662c <__libc_init_array+0xc>
 800664e:	00b3      	lsls	r3, r6, #2
 8006650:	58eb      	ldr	r3, [r5, r3]
 8006652:	4798      	blx	r3
 8006654:	3601      	adds	r6, #1
 8006656:	e7f2      	b.n	800663e <__libc_init_array+0x1e>
 8006658:	080068a8 	.word	0x080068a8
 800665c:	080068a8 	.word	0x080068a8
 8006660:	080068a8 	.word	0x080068a8
 8006664:	080068ac 	.word	0x080068ac

08006668 <memset>:
 8006668:	0003      	movs	r3, r0
 800666a:	1882      	adds	r2, r0, r2
 800666c:	4293      	cmp	r3, r2
 800666e:	d100      	bne.n	8006672 <memset+0xa>
 8006670:	4770      	bx	lr
 8006672:	7019      	strb	r1, [r3, #0]
 8006674:	3301      	adds	r3, #1
 8006676:	e7f9      	b.n	800666c <memset+0x4>

08006678 <_init>:
 8006678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800667a:	46c0      	nop			; (mov r8, r8)
 800667c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800667e:	bc08      	pop	{r3}
 8006680:	469e      	mov	lr, r3
 8006682:	4770      	bx	lr

08006684 <_fini>:
 8006684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006686:	46c0      	nop			; (mov r8, r8)
 8006688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800668a:	bc08      	pop	{r3}
 800668c:	469e      	mov	lr, r3
 800668e:	4770      	bx	lr
