
Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085cc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  0800868c  0800868c  0001868c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087a0  080087a0  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  080087a0  080087a0  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080087a0  080087a0  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087a0  080087a0  000187a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080087a4  080087a4  000187a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080087a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  2000008c  08008834  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f0  08008834  000203f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001631d  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d14  00000000  00000000  000363d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001410  00000000  00000000  000390e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012f0  00000000  00000000  0003a4f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001391d  00000000  00000000  0003b7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001899a  00000000  00000000  0004f105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00076c4a  00000000  00000000  00067a9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000de6e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e70  00000000  00000000  000de73c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000008c 	.word	0x2000008c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008674 	.word	0x08008674

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000090 	.word	0x20000090
 8000104:	08008674 	.word	0x08008674

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_f2uiz>:
 8000244:	219e      	movs	r1, #158	; 0x9e
 8000246:	b510      	push	{r4, lr}
 8000248:	05c9      	lsls	r1, r1, #23
 800024a:	1c04      	adds	r4, r0, #0
 800024c:	f000 fe5a 	bl	8000f04 <__aeabi_fcmpge>
 8000250:	2800      	cmp	r0, #0
 8000252:	d103      	bne.n	800025c <__aeabi_f2uiz+0x18>
 8000254:	1c20      	adds	r0, r4, #0
 8000256:	f000 fae1 	bl	800081c <__aeabi_f2iz>
 800025a:	bd10      	pop	{r4, pc}
 800025c:	219e      	movs	r1, #158	; 0x9e
 800025e:	1c20      	adds	r0, r4, #0
 8000260:	05c9      	lsls	r1, r1, #23
 8000262:	f000 f92d 	bl	80004c0 <__aeabi_fsub>
 8000266:	f000 fad9 	bl	800081c <__aeabi_f2iz>
 800026a:	2380      	movs	r3, #128	; 0x80
 800026c:	061b      	lsls	r3, r3, #24
 800026e:	469c      	mov	ip, r3
 8000270:	4460      	add	r0, ip
 8000272:	e7f2      	b.n	800025a <__aeabi_f2uiz+0x16>

08000274 <__aeabi_fmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	464f      	mov	r7, r9
 8000278:	4646      	mov	r6, r8
 800027a:	46d6      	mov	lr, sl
 800027c:	0244      	lsls	r4, r0, #9
 800027e:	0045      	lsls	r5, r0, #1
 8000280:	b5c0      	push	{r6, r7, lr}
 8000282:	0a64      	lsrs	r4, r4, #9
 8000284:	1c0f      	adds	r7, r1, #0
 8000286:	0e2d      	lsrs	r5, r5, #24
 8000288:	0fc6      	lsrs	r6, r0, #31
 800028a:	2d00      	cmp	r5, #0
 800028c:	d100      	bne.n	8000290 <__aeabi_fmul+0x1c>
 800028e:	e08d      	b.n	80003ac <__aeabi_fmul+0x138>
 8000290:	2dff      	cmp	r5, #255	; 0xff
 8000292:	d100      	bne.n	8000296 <__aeabi_fmul+0x22>
 8000294:	e092      	b.n	80003bc <__aeabi_fmul+0x148>
 8000296:	2300      	movs	r3, #0
 8000298:	2080      	movs	r0, #128	; 0x80
 800029a:	4699      	mov	r9, r3
 800029c:	469a      	mov	sl, r3
 800029e:	00e4      	lsls	r4, r4, #3
 80002a0:	04c0      	lsls	r0, r0, #19
 80002a2:	4304      	orrs	r4, r0
 80002a4:	3d7f      	subs	r5, #127	; 0x7f
 80002a6:	0278      	lsls	r0, r7, #9
 80002a8:	0a43      	lsrs	r3, r0, #9
 80002aa:	4698      	mov	r8, r3
 80002ac:	007b      	lsls	r3, r7, #1
 80002ae:	0e1b      	lsrs	r3, r3, #24
 80002b0:	0fff      	lsrs	r7, r7, #31
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d100      	bne.n	80002b8 <__aeabi_fmul+0x44>
 80002b6:	e070      	b.n	800039a <__aeabi_fmul+0x126>
 80002b8:	2bff      	cmp	r3, #255	; 0xff
 80002ba:	d100      	bne.n	80002be <__aeabi_fmul+0x4a>
 80002bc:	e086      	b.n	80003cc <__aeabi_fmul+0x158>
 80002be:	4642      	mov	r2, r8
 80002c0:	00d0      	lsls	r0, r2, #3
 80002c2:	2280      	movs	r2, #128	; 0x80
 80002c4:	3b7f      	subs	r3, #127	; 0x7f
 80002c6:	18ed      	adds	r5, r5, r3
 80002c8:	2300      	movs	r3, #0
 80002ca:	04d2      	lsls	r2, r2, #19
 80002cc:	4302      	orrs	r2, r0
 80002ce:	4690      	mov	r8, r2
 80002d0:	469c      	mov	ip, r3
 80002d2:	0031      	movs	r1, r6
 80002d4:	464b      	mov	r3, r9
 80002d6:	4079      	eors	r1, r7
 80002d8:	1c68      	adds	r0, r5, #1
 80002da:	2b0f      	cmp	r3, #15
 80002dc:	d81c      	bhi.n	8000318 <__aeabi_fmul+0xa4>
 80002de:	4a76      	ldr	r2, [pc, #472]	; (80004b8 <__aeabi_fmul+0x244>)
 80002e0:	009b      	lsls	r3, r3, #2
 80002e2:	58d3      	ldr	r3, [r2, r3]
 80002e4:	469f      	mov	pc, r3
 80002e6:	0039      	movs	r1, r7
 80002e8:	4644      	mov	r4, r8
 80002ea:	46e2      	mov	sl, ip
 80002ec:	4653      	mov	r3, sl
 80002ee:	2b02      	cmp	r3, #2
 80002f0:	d00f      	beq.n	8000312 <__aeabi_fmul+0x9e>
 80002f2:	2b03      	cmp	r3, #3
 80002f4:	d100      	bne.n	80002f8 <__aeabi_fmul+0x84>
 80002f6:	e0d7      	b.n	80004a8 <__aeabi_fmul+0x234>
 80002f8:	2b01      	cmp	r3, #1
 80002fa:	d137      	bne.n	800036c <__aeabi_fmul+0xf8>
 80002fc:	2000      	movs	r0, #0
 80002fe:	2400      	movs	r4, #0
 8000300:	05c0      	lsls	r0, r0, #23
 8000302:	4320      	orrs	r0, r4
 8000304:	07c9      	lsls	r1, r1, #31
 8000306:	4308      	orrs	r0, r1
 8000308:	bce0      	pop	{r5, r6, r7}
 800030a:	46ba      	mov	sl, r7
 800030c:	46b1      	mov	r9, r6
 800030e:	46a8      	mov	r8, r5
 8000310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000312:	20ff      	movs	r0, #255	; 0xff
 8000314:	2400      	movs	r4, #0
 8000316:	e7f3      	b.n	8000300 <__aeabi_fmul+0x8c>
 8000318:	0c26      	lsrs	r6, r4, #16
 800031a:	0424      	lsls	r4, r4, #16
 800031c:	0c22      	lsrs	r2, r4, #16
 800031e:	4644      	mov	r4, r8
 8000320:	0424      	lsls	r4, r4, #16
 8000322:	0c24      	lsrs	r4, r4, #16
 8000324:	4643      	mov	r3, r8
 8000326:	0027      	movs	r7, r4
 8000328:	0c1b      	lsrs	r3, r3, #16
 800032a:	4357      	muls	r7, r2
 800032c:	4374      	muls	r4, r6
 800032e:	435a      	muls	r2, r3
 8000330:	435e      	muls	r6, r3
 8000332:	1912      	adds	r2, r2, r4
 8000334:	0c3b      	lsrs	r3, r7, #16
 8000336:	189b      	adds	r3, r3, r2
 8000338:	429c      	cmp	r4, r3
 800033a:	d903      	bls.n	8000344 <__aeabi_fmul+0xd0>
 800033c:	2280      	movs	r2, #128	; 0x80
 800033e:	0252      	lsls	r2, r2, #9
 8000340:	4694      	mov	ip, r2
 8000342:	4466      	add	r6, ip
 8000344:	043f      	lsls	r7, r7, #16
 8000346:	041a      	lsls	r2, r3, #16
 8000348:	0c3f      	lsrs	r7, r7, #16
 800034a:	19d2      	adds	r2, r2, r7
 800034c:	0194      	lsls	r4, r2, #6
 800034e:	1e67      	subs	r7, r4, #1
 8000350:	41bc      	sbcs	r4, r7
 8000352:	0c1b      	lsrs	r3, r3, #16
 8000354:	0e92      	lsrs	r2, r2, #26
 8000356:	199b      	adds	r3, r3, r6
 8000358:	4314      	orrs	r4, r2
 800035a:	019b      	lsls	r3, r3, #6
 800035c:	431c      	orrs	r4, r3
 800035e:	011b      	lsls	r3, r3, #4
 8000360:	d400      	bmi.n	8000364 <__aeabi_fmul+0xf0>
 8000362:	e09b      	b.n	800049c <__aeabi_fmul+0x228>
 8000364:	2301      	movs	r3, #1
 8000366:	0862      	lsrs	r2, r4, #1
 8000368:	401c      	ands	r4, r3
 800036a:	4314      	orrs	r4, r2
 800036c:	0002      	movs	r2, r0
 800036e:	327f      	adds	r2, #127	; 0x7f
 8000370:	2a00      	cmp	r2, #0
 8000372:	dd64      	ble.n	800043e <__aeabi_fmul+0x1ca>
 8000374:	0763      	lsls	r3, r4, #29
 8000376:	d004      	beq.n	8000382 <__aeabi_fmul+0x10e>
 8000378:	230f      	movs	r3, #15
 800037a:	4023      	ands	r3, r4
 800037c:	2b04      	cmp	r3, #4
 800037e:	d000      	beq.n	8000382 <__aeabi_fmul+0x10e>
 8000380:	3404      	adds	r4, #4
 8000382:	0123      	lsls	r3, r4, #4
 8000384:	d503      	bpl.n	800038e <__aeabi_fmul+0x11a>
 8000386:	0002      	movs	r2, r0
 8000388:	4b4c      	ldr	r3, [pc, #304]	; (80004bc <__aeabi_fmul+0x248>)
 800038a:	3280      	adds	r2, #128	; 0x80
 800038c:	401c      	ands	r4, r3
 800038e:	2afe      	cmp	r2, #254	; 0xfe
 8000390:	dcbf      	bgt.n	8000312 <__aeabi_fmul+0x9e>
 8000392:	01a4      	lsls	r4, r4, #6
 8000394:	0a64      	lsrs	r4, r4, #9
 8000396:	b2d0      	uxtb	r0, r2
 8000398:	e7b2      	b.n	8000300 <__aeabi_fmul+0x8c>
 800039a:	4643      	mov	r3, r8
 800039c:	2b00      	cmp	r3, #0
 800039e:	d13d      	bne.n	800041c <__aeabi_fmul+0x1a8>
 80003a0:	464a      	mov	r2, r9
 80003a2:	3301      	adds	r3, #1
 80003a4:	431a      	orrs	r2, r3
 80003a6:	4691      	mov	r9, r2
 80003a8:	469c      	mov	ip, r3
 80003aa:	e792      	b.n	80002d2 <__aeabi_fmul+0x5e>
 80003ac:	2c00      	cmp	r4, #0
 80003ae:	d129      	bne.n	8000404 <__aeabi_fmul+0x190>
 80003b0:	2304      	movs	r3, #4
 80003b2:	4699      	mov	r9, r3
 80003b4:	3b03      	subs	r3, #3
 80003b6:	2500      	movs	r5, #0
 80003b8:	469a      	mov	sl, r3
 80003ba:	e774      	b.n	80002a6 <__aeabi_fmul+0x32>
 80003bc:	2c00      	cmp	r4, #0
 80003be:	d11b      	bne.n	80003f8 <__aeabi_fmul+0x184>
 80003c0:	2308      	movs	r3, #8
 80003c2:	4699      	mov	r9, r3
 80003c4:	3b06      	subs	r3, #6
 80003c6:	25ff      	movs	r5, #255	; 0xff
 80003c8:	469a      	mov	sl, r3
 80003ca:	e76c      	b.n	80002a6 <__aeabi_fmul+0x32>
 80003cc:	4643      	mov	r3, r8
 80003ce:	35ff      	adds	r5, #255	; 0xff
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d10b      	bne.n	80003ec <__aeabi_fmul+0x178>
 80003d4:	2302      	movs	r3, #2
 80003d6:	464a      	mov	r2, r9
 80003d8:	431a      	orrs	r2, r3
 80003da:	4691      	mov	r9, r2
 80003dc:	469c      	mov	ip, r3
 80003de:	e778      	b.n	80002d2 <__aeabi_fmul+0x5e>
 80003e0:	4653      	mov	r3, sl
 80003e2:	0031      	movs	r1, r6
 80003e4:	2b02      	cmp	r3, #2
 80003e6:	d000      	beq.n	80003ea <__aeabi_fmul+0x176>
 80003e8:	e783      	b.n	80002f2 <__aeabi_fmul+0x7e>
 80003ea:	e792      	b.n	8000312 <__aeabi_fmul+0x9e>
 80003ec:	2303      	movs	r3, #3
 80003ee:	464a      	mov	r2, r9
 80003f0:	431a      	orrs	r2, r3
 80003f2:	4691      	mov	r9, r2
 80003f4:	469c      	mov	ip, r3
 80003f6:	e76c      	b.n	80002d2 <__aeabi_fmul+0x5e>
 80003f8:	230c      	movs	r3, #12
 80003fa:	4699      	mov	r9, r3
 80003fc:	3b09      	subs	r3, #9
 80003fe:	25ff      	movs	r5, #255	; 0xff
 8000400:	469a      	mov	sl, r3
 8000402:	e750      	b.n	80002a6 <__aeabi_fmul+0x32>
 8000404:	0020      	movs	r0, r4
 8000406:	f000 fd87 	bl	8000f18 <__clzsi2>
 800040a:	2576      	movs	r5, #118	; 0x76
 800040c:	1f43      	subs	r3, r0, #5
 800040e:	409c      	lsls	r4, r3
 8000410:	2300      	movs	r3, #0
 8000412:	426d      	negs	r5, r5
 8000414:	4699      	mov	r9, r3
 8000416:	469a      	mov	sl, r3
 8000418:	1a2d      	subs	r5, r5, r0
 800041a:	e744      	b.n	80002a6 <__aeabi_fmul+0x32>
 800041c:	4640      	mov	r0, r8
 800041e:	f000 fd7b 	bl	8000f18 <__clzsi2>
 8000422:	4642      	mov	r2, r8
 8000424:	1f43      	subs	r3, r0, #5
 8000426:	409a      	lsls	r2, r3
 8000428:	2300      	movs	r3, #0
 800042a:	1a2d      	subs	r5, r5, r0
 800042c:	4690      	mov	r8, r2
 800042e:	469c      	mov	ip, r3
 8000430:	3d76      	subs	r5, #118	; 0x76
 8000432:	e74e      	b.n	80002d2 <__aeabi_fmul+0x5e>
 8000434:	2480      	movs	r4, #128	; 0x80
 8000436:	2100      	movs	r1, #0
 8000438:	20ff      	movs	r0, #255	; 0xff
 800043a:	03e4      	lsls	r4, r4, #15
 800043c:	e760      	b.n	8000300 <__aeabi_fmul+0x8c>
 800043e:	2301      	movs	r3, #1
 8000440:	1a9b      	subs	r3, r3, r2
 8000442:	2b1b      	cmp	r3, #27
 8000444:	dd00      	ble.n	8000448 <__aeabi_fmul+0x1d4>
 8000446:	e759      	b.n	80002fc <__aeabi_fmul+0x88>
 8000448:	0022      	movs	r2, r4
 800044a:	309e      	adds	r0, #158	; 0x9e
 800044c:	40da      	lsrs	r2, r3
 800044e:	4084      	lsls	r4, r0
 8000450:	0013      	movs	r3, r2
 8000452:	1e62      	subs	r2, r4, #1
 8000454:	4194      	sbcs	r4, r2
 8000456:	431c      	orrs	r4, r3
 8000458:	0763      	lsls	r3, r4, #29
 800045a:	d004      	beq.n	8000466 <__aeabi_fmul+0x1f2>
 800045c:	230f      	movs	r3, #15
 800045e:	4023      	ands	r3, r4
 8000460:	2b04      	cmp	r3, #4
 8000462:	d000      	beq.n	8000466 <__aeabi_fmul+0x1f2>
 8000464:	3404      	adds	r4, #4
 8000466:	0163      	lsls	r3, r4, #5
 8000468:	d51a      	bpl.n	80004a0 <__aeabi_fmul+0x22c>
 800046a:	2001      	movs	r0, #1
 800046c:	2400      	movs	r4, #0
 800046e:	e747      	b.n	8000300 <__aeabi_fmul+0x8c>
 8000470:	2080      	movs	r0, #128	; 0x80
 8000472:	03c0      	lsls	r0, r0, #15
 8000474:	4204      	tst	r4, r0
 8000476:	d009      	beq.n	800048c <__aeabi_fmul+0x218>
 8000478:	4643      	mov	r3, r8
 800047a:	4203      	tst	r3, r0
 800047c:	d106      	bne.n	800048c <__aeabi_fmul+0x218>
 800047e:	4644      	mov	r4, r8
 8000480:	4304      	orrs	r4, r0
 8000482:	0264      	lsls	r4, r4, #9
 8000484:	0039      	movs	r1, r7
 8000486:	20ff      	movs	r0, #255	; 0xff
 8000488:	0a64      	lsrs	r4, r4, #9
 800048a:	e739      	b.n	8000300 <__aeabi_fmul+0x8c>
 800048c:	2080      	movs	r0, #128	; 0x80
 800048e:	03c0      	lsls	r0, r0, #15
 8000490:	4304      	orrs	r4, r0
 8000492:	0264      	lsls	r4, r4, #9
 8000494:	0031      	movs	r1, r6
 8000496:	20ff      	movs	r0, #255	; 0xff
 8000498:	0a64      	lsrs	r4, r4, #9
 800049a:	e731      	b.n	8000300 <__aeabi_fmul+0x8c>
 800049c:	0028      	movs	r0, r5
 800049e:	e765      	b.n	800036c <__aeabi_fmul+0xf8>
 80004a0:	01a4      	lsls	r4, r4, #6
 80004a2:	2000      	movs	r0, #0
 80004a4:	0a64      	lsrs	r4, r4, #9
 80004a6:	e72b      	b.n	8000300 <__aeabi_fmul+0x8c>
 80004a8:	2080      	movs	r0, #128	; 0x80
 80004aa:	03c0      	lsls	r0, r0, #15
 80004ac:	4304      	orrs	r4, r0
 80004ae:	0264      	lsls	r4, r4, #9
 80004b0:	20ff      	movs	r0, #255	; 0xff
 80004b2:	0a64      	lsrs	r4, r4, #9
 80004b4:	e724      	b.n	8000300 <__aeabi_fmul+0x8c>
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	080086d0 	.word	0x080086d0
 80004bc:	f7ffffff 	.word	0xf7ffffff

080004c0 <__aeabi_fsub>:
 80004c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004c2:	46ce      	mov	lr, r9
 80004c4:	4647      	mov	r7, r8
 80004c6:	0243      	lsls	r3, r0, #9
 80004c8:	0a5b      	lsrs	r3, r3, #9
 80004ca:	024e      	lsls	r6, r1, #9
 80004cc:	00da      	lsls	r2, r3, #3
 80004ce:	4694      	mov	ip, r2
 80004d0:	0a72      	lsrs	r2, r6, #9
 80004d2:	4691      	mov	r9, r2
 80004d4:	0045      	lsls	r5, r0, #1
 80004d6:	004a      	lsls	r2, r1, #1
 80004d8:	b580      	push	{r7, lr}
 80004da:	0e2d      	lsrs	r5, r5, #24
 80004dc:	001f      	movs	r7, r3
 80004de:	0fc4      	lsrs	r4, r0, #31
 80004e0:	0e12      	lsrs	r2, r2, #24
 80004e2:	0fc9      	lsrs	r1, r1, #31
 80004e4:	09b6      	lsrs	r6, r6, #6
 80004e6:	2aff      	cmp	r2, #255	; 0xff
 80004e8:	d05b      	beq.n	80005a2 <__aeabi_fsub+0xe2>
 80004ea:	2001      	movs	r0, #1
 80004ec:	4041      	eors	r1, r0
 80004ee:	428c      	cmp	r4, r1
 80004f0:	d039      	beq.n	8000566 <__aeabi_fsub+0xa6>
 80004f2:	1aa8      	subs	r0, r5, r2
 80004f4:	2800      	cmp	r0, #0
 80004f6:	dd5a      	ble.n	80005ae <__aeabi_fsub+0xee>
 80004f8:	2a00      	cmp	r2, #0
 80004fa:	d06a      	beq.n	80005d2 <__aeabi_fsub+0x112>
 80004fc:	2dff      	cmp	r5, #255	; 0xff
 80004fe:	d100      	bne.n	8000502 <__aeabi_fsub+0x42>
 8000500:	e0d9      	b.n	80006b6 <__aeabi_fsub+0x1f6>
 8000502:	2280      	movs	r2, #128	; 0x80
 8000504:	04d2      	lsls	r2, r2, #19
 8000506:	4316      	orrs	r6, r2
 8000508:	281b      	cmp	r0, #27
 800050a:	dc00      	bgt.n	800050e <__aeabi_fsub+0x4e>
 800050c:	e0e9      	b.n	80006e2 <__aeabi_fsub+0x222>
 800050e:	2001      	movs	r0, #1
 8000510:	4663      	mov	r3, ip
 8000512:	1a18      	subs	r0, r3, r0
 8000514:	0143      	lsls	r3, r0, #5
 8000516:	d400      	bmi.n	800051a <__aeabi_fsub+0x5a>
 8000518:	e0b4      	b.n	8000684 <__aeabi_fsub+0x1c4>
 800051a:	0180      	lsls	r0, r0, #6
 800051c:	0987      	lsrs	r7, r0, #6
 800051e:	0038      	movs	r0, r7
 8000520:	f000 fcfa 	bl	8000f18 <__clzsi2>
 8000524:	3805      	subs	r0, #5
 8000526:	4087      	lsls	r7, r0
 8000528:	4285      	cmp	r5, r0
 800052a:	dc00      	bgt.n	800052e <__aeabi_fsub+0x6e>
 800052c:	e0cc      	b.n	80006c8 <__aeabi_fsub+0x208>
 800052e:	1a2d      	subs	r5, r5, r0
 8000530:	48b5      	ldr	r0, [pc, #724]	; (8000808 <__aeabi_fsub+0x348>)
 8000532:	4038      	ands	r0, r7
 8000534:	0743      	lsls	r3, r0, #29
 8000536:	d004      	beq.n	8000542 <__aeabi_fsub+0x82>
 8000538:	230f      	movs	r3, #15
 800053a:	4003      	ands	r3, r0
 800053c:	2b04      	cmp	r3, #4
 800053e:	d000      	beq.n	8000542 <__aeabi_fsub+0x82>
 8000540:	3004      	adds	r0, #4
 8000542:	0143      	lsls	r3, r0, #5
 8000544:	d400      	bmi.n	8000548 <__aeabi_fsub+0x88>
 8000546:	e0a0      	b.n	800068a <__aeabi_fsub+0x1ca>
 8000548:	1c6a      	adds	r2, r5, #1
 800054a:	2dfe      	cmp	r5, #254	; 0xfe
 800054c:	d100      	bne.n	8000550 <__aeabi_fsub+0x90>
 800054e:	e08d      	b.n	800066c <__aeabi_fsub+0x1ac>
 8000550:	0180      	lsls	r0, r0, #6
 8000552:	0a47      	lsrs	r7, r0, #9
 8000554:	b2d2      	uxtb	r2, r2
 8000556:	05d0      	lsls	r0, r2, #23
 8000558:	4338      	orrs	r0, r7
 800055a:	07e4      	lsls	r4, r4, #31
 800055c:	4320      	orrs	r0, r4
 800055e:	bcc0      	pop	{r6, r7}
 8000560:	46b9      	mov	r9, r7
 8000562:	46b0      	mov	r8, r6
 8000564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000566:	1aa8      	subs	r0, r5, r2
 8000568:	4680      	mov	r8, r0
 800056a:	2800      	cmp	r0, #0
 800056c:	dd45      	ble.n	80005fa <__aeabi_fsub+0x13a>
 800056e:	2a00      	cmp	r2, #0
 8000570:	d070      	beq.n	8000654 <__aeabi_fsub+0x194>
 8000572:	2dff      	cmp	r5, #255	; 0xff
 8000574:	d100      	bne.n	8000578 <__aeabi_fsub+0xb8>
 8000576:	e09e      	b.n	80006b6 <__aeabi_fsub+0x1f6>
 8000578:	2380      	movs	r3, #128	; 0x80
 800057a:	04db      	lsls	r3, r3, #19
 800057c:	431e      	orrs	r6, r3
 800057e:	4643      	mov	r3, r8
 8000580:	2b1b      	cmp	r3, #27
 8000582:	dc00      	bgt.n	8000586 <__aeabi_fsub+0xc6>
 8000584:	e0d2      	b.n	800072c <__aeabi_fsub+0x26c>
 8000586:	2001      	movs	r0, #1
 8000588:	4460      	add	r0, ip
 800058a:	0143      	lsls	r3, r0, #5
 800058c:	d57a      	bpl.n	8000684 <__aeabi_fsub+0x1c4>
 800058e:	3501      	adds	r5, #1
 8000590:	2dff      	cmp	r5, #255	; 0xff
 8000592:	d06b      	beq.n	800066c <__aeabi_fsub+0x1ac>
 8000594:	2301      	movs	r3, #1
 8000596:	4a9d      	ldr	r2, [pc, #628]	; (800080c <__aeabi_fsub+0x34c>)
 8000598:	4003      	ands	r3, r0
 800059a:	0840      	lsrs	r0, r0, #1
 800059c:	4010      	ands	r0, r2
 800059e:	4318      	orrs	r0, r3
 80005a0:	e7c8      	b.n	8000534 <__aeabi_fsub+0x74>
 80005a2:	2e00      	cmp	r6, #0
 80005a4:	d020      	beq.n	80005e8 <__aeabi_fsub+0x128>
 80005a6:	428c      	cmp	r4, r1
 80005a8:	d023      	beq.n	80005f2 <__aeabi_fsub+0x132>
 80005aa:	0028      	movs	r0, r5
 80005ac:	38ff      	subs	r0, #255	; 0xff
 80005ae:	2800      	cmp	r0, #0
 80005b0:	d039      	beq.n	8000626 <__aeabi_fsub+0x166>
 80005b2:	1b57      	subs	r7, r2, r5
 80005b4:	2d00      	cmp	r5, #0
 80005b6:	d000      	beq.n	80005ba <__aeabi_fsub+0xfa>
 80005b8:	e09d      	b.n	80006f6 <__aeabi_fsub+0x236>
 80005ba:	4663      	mov	r3, ip
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d100      	bne.n	80005c2 <__aeabi_fsub+0x102>
 80005c0:	e0db      	b.n	800077a <__aeabi_fsub+0x2ba>
 80005c2:	1e7b      	subs	r3, r7, #1
 80005c4:	2f01      	cmp	r7, #1
 80005c6:	d100      	bne.n	80005ca <__aeabi_fsub+0x10a>
 80005c8:	e10d      	b.n	80007e6 <__aeabi_fsub+0x326>
 80005ca:	2fff      	cmp	r7, #255	; 0xff
 80005cc:	d071      	beq.n	80006b2 <__aeabi_fsub+0x1f2>
 80005ce:	001f      	movs	r7, r3
 80005d0:	e098      	b.n	8000704 <__aeabi_fsub+0x244>
 80005d2:	2e00      	cmp	r6, #0
 80005d4:	d100      	bne.n	80005d8 <__aeabi_fsub+0x118>
 80005d6:	e0a7      	b.n	8000728 <__aeabi_fsub+0x268>
 80005d8:	1e42      	subs	r2, r0, #1
 80005da:	2801      	cmp	r0, #1
 80005dc:	d100      	bne.n	80005e0 <__aeabi_fsub+0x120>
 80005de:	e0e6      	b.n	80007ae <__aeabi_fsub+0x2ee>
 80005e0:	28ff      	cmp	r0, #255	; 0xff
 80005e2:	d068      	beq.n	80006b6 <__aeabi_fsub+0x1f6>
 80005e4:	0010      	movs	r0, r2
 80005e6:	e78f      	b.n	8000508 <__aeabi_fsub+0x48>
 80005e8:	2001      	movs	r0, #1
 80005ea:	4041      	eors	r1, r0
 80005ec:	42a1      	cmp	r1, r4
 80005ee:	d000      	beq.n	80005f2 <__aeabi_fsub+0x132>
 80005f0:	e77f      	b.n	80004f2 <__aeabi_fsub+0x32>
 80005f2:	20ff      	movs	r0, #255	; 0xff
 80005f4:	4240      	negs	r0, r0
 80005f6:	4680      	mov	r8, r0
 80005f8:	44a8      	add	r8, r5
 80005fa:	4640      	mov	r0, r8
 80005fc:	2800      	cmp	r0, #0
 80005fe:	d038      	beq.n	8000672 <__aeabi_fsub+0x1b2>
 8000600:	1b51      	subs	r1, r2, r5
 8000602:	2d00      	cmp	r5, #0
 8000604:	d100      	bne.n	8000608 <__aeabi_fsub+0x148>
 8000606:	e0ae      	b.n	8000766 <__aeabi_fsub+0x2a6>
 8000608:	2aff      	cmp	r2, #255	; 0xff
 800060a:	d100      	bne.n	800060e <__aeabi_fsub+0x14e>
 800060c:	e0df      	b.n	80007ce <__aeabi_fsub+0x30e>
 800060e:	2380      	movs	r3, #128	; 0x80
 8000610:	4660      	mov	r0, ip
 8000612:	04db      	lsls	r3, r3, #19
 8000614:	4318      	orrs	r0, r3
 8000616:	4684      	mov	ip, r0
 8000618:	291b      	cmp	r1, #27
 800061a:	dc00      	bgt.n	800061e <__aeabi_fsub+0x15e>
 800061c:	e0d9      	b.n	80007d2 <__aeabi_fsub+0x312>
 800061e:	2001      	movs	r0, #1
 8000620:	0015      	movs	r5, r2
 8000622:	1980      	adds	r0, r0, r6
 8000624:	e7b1      	b.n	800058a <__aeabi_fsub+0xca>
 8000626:	20fe      	movs	r0, #254	; 0xfe
 8000628:	1c6a      	adds	r2, r5, #1
 800062a:	4210      	tst	r0, r2
 800062c:	d171      	bne.n	8000712 <__aeabi_fsub+0x252>
 800062e:	2d00      	cmp	r5, #0
 8000630:	d000      	beq.n	8000634 <__aeabi_fsub+0x174>
 8000632:	e0a6      	b.n	8000782 <__aeabi_fsub+0x2c2>
 8000634:	4663      	mov	r3, ip
 8000636:	2b00      	cmp	r3, #0
 8000638:	d100      	bne.n	800063c <__aeabi_fsub+0x17c>
 800063a:	e0d9      	b.n	80007f0 <__aeabi_fsub+0x330>
 800063c:	2200      	movs	r2, #0
 800063e:	2e00      	cmp	r6, #0
 8000640:	d100      	bne.n	8000644 <__aeabi_fsub+0x184>
 8000642:	e788      	b.n	8000556 <__aeabi_fsub+0x96>
 8000644:	1b98      	subs	r0, r3, r6
 8000646:	0143      	lsls	r3, r0, #5
 8000648:	d400      	bmi.n	800064c <__aeabi_fsub+0x18c>
 800064a:	e0e1      	b.n	8000810 <__aeabi_fsub+0x350>
 800064c:	4663      	mov	r3, ip
 800064e:	000c      	movs	r4, r1
 8000650:	1af0      	subs	r0, r6, r3
 8000652:	e76f      	b.n	8000534 <__aeabi_fsub+0x74>
 8000654:	2e00      	cmp	r6, #0
 8000656:	d100      	bne.n	800065a <__aeabi_fsub+0x19a>
 8000658:	e0b7      	b.n	80007ca <__aeabi_fsub+0x30a>
 800065a:	0002      	movs	r2, r0
 800065c:	3a01      	subs	r2, #1
 800065e:	2801      	cmp	r0, #1
 8000660:	d100      	bne.n	8000664 <__aeabi_fsub+0x1a4>
 8000662:	e09c      	b.n	800079e <__aeabi_fsub+0x2de>
 8000664:	28ff      	cmp	r0, #255	; 0xff
 8000666:	d026      	beq.n	80006b6 <__aeabi_fsub+0x1f6>
 8000668:	4690      	mov	r8, r2
 800066a:	e788      	b.n	800057e <__aeabi_fsub+0xbe>
 800066c:	22ff      	movs	r2, #255	; 0xff
 800066e:	2700      	movs	r7, #0
 8000670:	e771      	b.n	8000556 <__aeabi_fsub+0x96>
 8000672:	20fe      	movs	r0, #254	; 0xfe
 8000674:	1c6a      	adds	r2, r5, #1
 8000676:	4210      	tst	r0, r2
 8000678:	d064      	beq.n	8000744 <__aeabi_fsub+0x284>
 800067a:	2aff      	cmp	r2, #255	; 0xff
 800067c:	d0f6      	beq.n	800066c <__aeabi_fsub+0x1ac>
 800067e:	0015      	movs	r5, r2
 8000680:	4466      	add	r6, ip
 8000682:	0870      	lsrs	r0, r6, #1
 8000684:	0743      	lsls	r3, r0, #29
 8000686:	d000      	beq.n	800068a <__aeabi_fsub+0x1ca>
 8000688:	e756      	b.n	8000538 <__aeabi_fsub+0x78>
 800068a:	08c3      	lsrs	r3, r0, #3
 800068c:	2dff      	cmp	r5, #255	; 0xff
 800068e:	d012      	beq.n	80006b6 <__aeabi_fsub+0x1f6>
 8000690:	025b      	lsls	r3, r3, #9
 8000692:	0a5f      	lsrs	r7, r3, #9
 8000694:	b2ea      	uxtb	r2, r5
 8000696:	e75e      	b.n	8000556 <__aeabi_fsub+0x96>
 8000698:	4662      	mov	r2, ip
 800069a:	2a00      	cmp	r2, #0
 800069c:	d100      	bne.n	80006a0 <__aeabi_fsub+0x1e0>
 800069e:	e096      	b.n	80007ce <__aeabi_fsub+0x30e>
 80006a0:	2e00      	cmp	r6, #0
 80006a2:	d008      	beq.n	80006b6 <__aeabi_fsub+0x1f6>
 80006a4:	2280      	movs	r2, #128	; 0x80
 80006a6:	03d2      	lsls	r2, r2, #15
 80006a8:	4213      	tst	r3, r2
 80006aa:	d004      	beq.n	80006b6 <__aeabi_fsub+0x1f6>
 80006ac:	4648      	mov	r0, r9
 80006ae:	4210      	tst	r0, r2
 80006b0:	d101      	bne.n	80006b6 <__aeabi_fsub+0x1f6>
 80006b2:	000c      	movs	r4, r1
 80006b4:	464b      	mov	r3, r9
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d0d8      	beq.n	800066c <__aeabi_fsub+0x1ac>
 80006ba:	2780      	movs	r7, #128	; 0x80
 80006bc:	03ff      	lsls	r7, r7, #15
 80006be:	431f      	orrs	r7, r3
 80006c0:	027f      	lsls	r7, r7, #9
 80006c2:	22ff      	movs	r2, #255	; 0xff
 80006c4:	0a7f      	lsrs	r7, r7, #9
 80006c6:	e746      	b.n	8000556 <__aeabi_fsub+0x96>
 80006c8:	2320      	movs	r3, #32
 80006ca:	003a      	movs	r2, r7
 80006cc:	1b45      	subs	r5, r0, r5
 80006ce:	0038      	movs	r0, r7
 80006d0:	3501      	adds	r5, #1
 80006d2:	40ea      	lsrs	r2, r5
 80006d4:	1b5d      	subs	r5, r3, r5
 80006d6:	40a8      	lsls	r0, r5
 80006d8:	1e43      	subs	r3, r0, #1
 80006da:	4198      	sbcs	r0, r3
 80006dc:	2500      	movs	r5, #0
 80006de:	4310      	orrs	r0, r2
 80006e0:	e728      	b.n	8000534 <__aeabi_fsub+0x74>
 80006e2:	2320      	movs	r3, #32
 80006e4:	1a1b      	subs	r3, r3, r0
 80006e6:	0032      	movs	r2, r6
 80006e8:	409e      	lsls	r6, r3
 80006ea:	40c2      	lsrs	r2, r0
 80006ec:	0030      	movs	r0, r6
 80006ee:	1e43      	subs	r3, r0, #1
 80006f0:	4198      	sbcs	r0, r3
 80006f2:	4310      	orrs	r0, r2
 80006f4:	e70c      	b.n	8000510 <__aeabi_fsub+0x50>
 80006f6:	2aff      	cmp	r2, #255	; 0xff
 80006f8:	d0db      	beq.n	80006b2 <__aeabi_fsub+0x1f2>
 80006fa:	2380      	movs	r3, #128	; 0x80
 80006fc:	4660      	mov	r0, ip
 80006fe:	04db      	lsls	r3, r3, #19
 8000700:	4318      	orrs	r0, r3
 8000702:	4684      	mov	ip, r0
 8000704:	2f1b      	cmp	r7, #27
 8000706:	dd56      	ble.n	80007b6 <__aeabi_fsub+0x2f6>
 8000708:	2001      	movs	r0, #1
 800070a:	000c      	movs	r4, r1
 800070c:	0015      	movs	r5, r2
 800070e:	1a30      	subs	r0, r6, r0
 8000710:	e700      	b.n	8000514 <__aeabi_fsub+0x54>
 8000712:	4663      	mov	r3, ip
 8000714:	1b9f      	subs	r7, r3, r6
 8000716:	017b      	lsls	r3, r7, #5
 8000718:	d43d      	bmi.n	8000796 <__aeabi_fsub+0x2d6>
 800071a:	2f00      	cmp	r7, #0
 800071c:	d000      	beq.n	8000720 <__aeabi_fsub+0x260>
 800071e:	e6fe      	b.n	800051e <__aeabi_fsub+0x5e>
 8000720:	2400      	movs	r4, #0
 8000722:	2200      	movs	r2, #0
 8000724:	2700      	movs	r7, #0
 8000726:	e716      	b.n	8000556 <__aeabi_fsub+0x96>
 8000728:	0005      	movs	r5, r0
 800072a:	e7af      	b.n	800068c <__aeabi_fsub+0x1cc>
 800072c:	0032      	movs	r2, r6
 800072e:	4643      	mov	r3, r8
 8000730:	4641      	mov	r1, r8
 8000732:	40da      	lsrs	r2, r3
 8000734:	2320      	movs	r3, #32
 8000736:	1a5b      	subs	r3, r3, r1
 8000738:	409e      	lsls	r6, r3
 800073a:	0030      	movs	r0, r6
 800073c:	1e43      	subs	r3, r0, #1
 800073e:	4198      	sbcs	r0, r3
 8000740:	4310      	orrs	r0, r2
 8000742:	e721      	b.n	8000588 <__aeabi_fsub+0xc8>
 8000744:	2d00      	cmp	r5, #0
 8000746:	d1a7      	bne.n	8000698 <__aeabi_fsub+0x1d8>
 8000748:	4663      	mov	r3, ip
 800074a:	2b00      	cmp	r3, #0
 800074c:	d059      	beq.n	8000802 <__aeabi_fsub+0x342>
 800074e:	2200      	movs	r2, #0
 8000750:	2e00      	cmp	r6, #0
 8000752:	d100      	bne.n	8000756 <__aeabi_fsub+0x296>
 8000754:	e6ff      	b.n	8000556 <__aeabi_fsub+0x96>
 8000756:	0030      	movs	r0, r6
 8000758:	4460      	add	r0, ip
 800075a:	0143      	lsls	r3, r0, #5
 800075c:	d592      	bpl.n	8000684 <__aeabi_fsub+0x1c4>
 800075e:	4b2a      	ldr	r3, [pc, #168]	; (8000808 <__aeabi_fsub+0x348>)
 8000760:	3501      	adds	r5, #1
 8000762:	4018      	ands	r0, r3
 8000764:	e78e      	b.n	8000684 <__aeabi_fsub+0x1c4>
 8000766:	4663      	mov	r3, ip
 8000768:	2b00      	cmp	r3, #0
 800076a:	d047      	beq.n	80007fc <__aeabi_fsub+0x33c>
 800076c:	1e4b      	subs	r3, r1, #1
 800076e:	2901      	cmp	r1, #1
 8000770:	d015      	beq.n	800079e <__aeabi_fsub+0x2de>
 8000772:	29ff      	cmp	r1, #255	; 0xff
 8000774:	d02b      	beq.n	80007ce <__aeabi_fsub+0x30e>
 8000776:	0019      	movs	r1, r3
 8000778:	e74e      	b.n	8000618 <__aeabi_fsub+0x158>
 800077a:	000c      	movs	r4, r1
 800077c:	464b      	mov	r3, r9
 800077e:	003d      	movs	r5, r7
 8000780:	e784      	b.n	800068c <__aeabi_fsub+0x1cc>
 8000782:	4662      	mov	r2, ip
 8000784:	2a00      	cmp	r2, #0
 8000786:	d18b      	bne.n	80006a0 <__aeabi_fsub+0x1e0>
 8000788:	2e00      	cmp	r6, #0
 800078a:	d192      	bne.n	80006b2 <__aeabi_fsub+0x1f2>
 800078c:	2780      	movs	r7, #128	; 0x80
 800078e:	2400      	movs	r4, #0
 8000790:	22ff      	movs	r2, #255	; 0xff
 8000792:	03ff      	lsls	r7, r7, #15
 8000794:	e6df      	b.n	8000556 <__aeabi_fsub+0x96>
 8000796:	4663      	mov	r3, ip
 8000798:	000c      	movs	r4, r1
 800079a:	1af7      	subs	r7, r6, r3
 800079c:	e6bf      	b.n	800051e <__aeabi_fsub+0x5e>
 800079e:	0030      	movs	r0, r6
 80007a0:	4460      	add	r0, ip
 80007a2:	2501      	movs	r5, #1
 80007a4:	0143      	lsls	r3, r0, #5
 80007a6:	d400      	bmi.n	80007aa <__aeabi_fsub+0x2ea>
 80007a8:	e76c      	b.n	8000684 <__aeabi_fsub+0x1c4>
 80007aa:	2502      	movs	r5, #2
 80007ac:	e6f2      	b.n	8000594 <__aeabi_fsub+0xd4>
 80007ae:	4663      	mov	r3, ip
 80007b0:	2501      	movs	r5, #1
 80007b2:	1b98      	subs	r0, r3, r6
 80007b4:	e6ae      	b.n	8000514 <__aeabi_fsub+0x54>
 80007b6:	2320      	movs	r3, #32
 80007b8:	4664      	mov	r4, ip
 80007ba:	4660      	mov	r0, ip
 80007bc:	40fc      	lsrs	r4, r7
 80007be:	1bdf      	subs	r7, r3, r7
 80007c0:	40b8      	lsls	r0, r7
 80007c2:	1e43      	subs	r3, r0, #1
 80007c4:	4198      	sbcs	r0, r3
 80007c6:	4320      	orrs	r0, r4
 80007c8:	e79f      	b.n	800070a <__aeabi_fsub+0x24a>
 80007ca:	0005      	movs	r5, r0
 80007cc:	e75e      	b.n	800068c <__aeabi_fsub+0x1cc>
 80007ce:	464b      	mov	r3, r9
 80007d0:	e771      	b.n	80006b6 <__aeabi_fsub+0x1f6>
 80007d2:	2320      	movs	r3, #32
 80007d4:	4665      	mov	r5, ip
 80007d6:	4660      	mov	r0, ip
 80007d8:	40cd      	lsrs	r5, r1
 80007da:	1a59      	subs	r1, r3, r1
 80007dc:	4088      	lsls	r0, r1
 80007de:	1e43      	subs	r3, r0, #1
 80007e0:	4198      	sbcs	r0, r3
 80007e2:	4328      	orrs	r0, r5
 80007e4:	e71c      	b.n	8000620 <__aeabi_fsub+0x160>
 80007e6:	4663      	mov	r3, ip
 80007e8:	000c      	movs	r4, r1
 80007ea:	2501      	movs	r5, #1
 80007ec:	1af0      	subs	r0, r6, r3
 80007ee:	e691      	b.n	8000514 <__aeabi_fsub+0x54>
 80007f0:	2e00      	cmp	r6, #0
 80007f2:	d095      	beq.n	8000720 <__aeabi_fsub+0x260>
 80007f4:	000c      	movs	r4, r1
 80007f6:	464f      	mov	r7, r9
 80007f8:	2200      	movs	r2, #0
 80007fa:	e6ac      	b.n	8000556 <__aeabi_fsub+0x96>
 80007fc:	464b      	mov	r3, r9
 80007fe:	000d      	movs	r5, r1
 8000800:	e744      	b.n	800068c <__aeabi_fsub+0x1cc>
 8000802:	464f      	mov	r7, r9
 8000804:	2200      	movs	r2, #0
 8000806:	e6a6      	b.n	8000556 <__aeabi_fsub+0x96>
 8000808:	fbffffff 	.word	0xfbffffff
 800080c:	7dffffff 	.word	0x7dffffff
 8000810:	2800      	cmp	r0, #0
 8000812:	d000      	beq.n	8000816 <__aeabi_fsub+0x356>
 8000814:	e736      	b.n	8000684 <__aeabi_fsub+0x1c4>
 8000816:	2400      	movs	r4, #0
 8000818:	2700      	movs	r7, #0
 800081a:	e69c      	b.n	8000556 <__aeabi_fsub+0x96>

0800081c <__aeabi_f2iz>:
 800081c:	0241      	lsls	r1, r0, #9
 800081e:	0042      	lsls	r2, r0, #1
 8000820:	0fc3      	lsrs	r3, r0, #31
 8000822:	0a49      	lsrs	r1, r1, #9
 8000824:	2000      	movs	r0, #0
 8000826:	0e12      	lsrs	r2, r2, #24
 8000828:	2a7e      	cmp	r2, #126	; 0x7e
 800082a:	dd03      	ble.n	8000834 <__aeabi_f2iz+0x18>
 800082c:	2a9d      	cmp	r2, #157	; 0x9d
 800082e:	dd02      	ble.n	8000836 <__aeabi_f2iz+0x1a>
 8000830:	4a09      	ldr	r2, [pc, #36]	; (8000858 <__aeabi_f2iz+0x3c>)
 8000832:	1898      	adds	r0, r3, r2
 8000834:	4770      	bx	lr
 8000836:	2080      	movs	r0, #128	; 0x80
 8000838:	0400      	lsls	r0, r0, #16
 800083a:	4301      	orrs	r1, r0
 800083c:	2a95      	cmp	r2, #149	; 0x95
 800083e:	dc07      	bgt.n	8000850 <__aeabi_f2iz+0x34>
 8000840:	2096      	movs	r0, #150	; 0x96
 8000842:	1a82      	subs	r2, r0, r2
 8000844:	40d1      	lsrs	r1, r2
 8000846:	4248      	negs	r0, r1
 8000848:	2b00      	cmp	r3, #0
 800084a:	d1f3      	bne.n	8000834 <__aeabi_f2iz+0x18>
 800084c:	0008      	movs	r0, r1
 800084e:	e7f1      	b.n	8000834 <__aeabi_f2iz+0x18>
 8000850:	3a96      	subs	r2, #150	; 0x96
 8000852:	4091      	lsls	r1, r2
 8000854:	e7f7      	b.n	8000846 <__aeabi_f2iz+0x2a>
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	7fffffff 	.word	0x7fffffff

0800085c <__aeabi_dmul>:
 800085c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800085e:	4657      	mov	r7, sl
 8000860:	464e      	mov	r6, r9
 8000862:	4645      	mov	r5, r8
 8000864:	46de      	mov	lr, fp
 8000866:	b5e0      	push	{r5, r6, r7, lr}
 8000868:	4698      	mov	r8, r3
 800086a:	030c      	lsls	r4, r1, #12
 800086c:	004b      	lsls	r3, r1, #1
 800086e:	0006      	movs	r6, r0
 8000870:	4692      	mov	sl, r2
 8000872:	b087      	sub	sp, #28
 8000874:	0b24      	lsrs	r4, r4, #12
 8000876:	0d5b      	lsrs	r3, r3, #21
 8000878:	0fcf      	lsrs	r7, r1, #31
 800087a:	2b00      	cmp	r3, #0
 800087c:	d100      	bne.n	8000880 <__aeabi_dmul+0x24>
 800087e:	e15c      	b.n	8000b3a <__aeabi_dmul+0x2de>
 8000880:	4ad9      	ldr	r2, [pc, #868]	; (8000be8 <__aeabi_dmul+0x38c>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d100      	bne.n	8000888 <__aeabi_dmul+0x2c>
 8000886:	e175      	b.n	8000b74 <__aeabi_dmul+0x318>
 8000888:	0f42      	lsrs	r2, r0, #29
 800088a:	00e4      	lsls	r4, r4, #3
 800088c:	4314      	orrs	r4, r2
 800088e:	2280      	movs	r2, #128	; 0x80
 8000890:	0412      	lsls	r2, r2, #16
 8000892:	4314      	orrs	r4, r2
 8000894:	4ad5      	ldr	r2, [pc, #852]	; (8000bec <__aeabi_dmul+0x390>)
 8000896:	00c5      	lsls	r5, r0, #3
 8000898:	4694      	mov	ip, r2
 800089a:	4463      	add	r3, ip
 800089c:	9300      	str	r3, [sp, #0]
 800089e:	2300      	movs	r3, #0
 80008a0:	4699      	mov	r9, r3
 80008a2:	469b      	mov	fp, r3
 80008a4:	4643      	mov	r3, r8
 80008a6:	4642      	mov	r2, r8
 80008a8:	031e      	lsls	r6, r3, #12
 80008aa:	0fd2      	lsrs	r2, r2, #31
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	4650      	mov	r0, sl
 80008b0:	4690      	mov	r8, r2
 80008b2:	0b36      	lsrs	r6, r6, #12
 80008b4:	0d5b      	lsrs	r3, r3, #21
 80008b6:	d100      	bne.n	80008ba <__aeabi_dmul+0x5e>
 80008b8:	e120      	b.n	8000afc <__aeabi_dmul+0x2a0>
 80008ba:	4acb      	ldr	r2, [pc, #812]	; (8000be8 <__aeabi_dmul+0x38c>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d100      	bne.n	80008c2 <__aeabi_dmul+0x66>
 80008c0:	e162      	b.n	8000b88 <__aeabi_dmul+0x32c>
 80008c2:	49ca      	ldr	r1, [pc, #808]	; (8000bec <__aeabi_dmul+0x390>)
 80008c4:	0f42      	lsrs	r2, r0, #29
 80008c6:	468c      	mov	ip, r1
 80008c8:	9900      	ldr	r1, [sp, #0]
 80008ca:	4463      	add	r3, ip
 80008cc:	00f6      	lsls	r6, r6, #3
 80008ce:	468c      	mov	ip, r1
 80008d0:	4316      	orrs	r6, r2
 80008d2:	2280      	movs	r2, #128	; 0x80
 80008d4:	449c      	add	ip, r3
 80008d6:	0412      	lsls	r2, r2, #16
 80008d8:	4663      	mov	r3, ip
 80008da:	4316      	orrs	r6, r2
 80008dc:	00c2      	lsls	r2, r0, #3
 80008de:	2000      	movs	r0, #0
 80008e0:	9300      	str	r3, [sp, #0]
 80008e2:	9900      	ldr	r1, [sp, #0]
 80008e4:	4643      	mov	r3, r8
 80008e6:	3101      	adds	r1, #1
 80008e8:	468c      	mov	ip, r1
 80008ea:	4649      	mov	r1, r9
 80008ec:	407b      	eors	r3, r7
 80008ee:	9301      	str	r3, [sp, #4]
 80008f0:	290f      	cmp	r1, #15
 80008f2:	d826      	bhi.n	8000942 <__aeabi_dmul+0xe6>
 80008f4:	4bbe      	ldr	r3, [pc, #760]	; (8000bf0 <__aeabi_dmul+0x394>)
 80008f6:	0089      	lsls	r1, r1, #2
 80008f8:	5859      	ldr	r1, [r3, r1]
 80008fa:	468f      	mov	pc, r1
 80008fc:	4643      	mov	r3, r8
 80008fe:	9301      	str	r3, [sp, #4]
 8000900:	0034      	movs	r4, r6
 8000902:	0015      	movs	r5, r2
 8000904:	4683      	mov	fp, r0
 8000906:	465b      	mov	r3, fp
 8000908:	2b02      	cmp	r3, #2
 800090a:	d016      	beq.n	800093a <__aeabi_dmul+0xde>
 800090c:	2b03      	cmp	r3, #3
 800090e:	d100      	bne.n	8000912 <__aeabi_dmul+0xb6>
 8000910:	e203      	b.n	8000d1a <__aeabi_dmul+0x4be>
 8000912:	2b01      	cmp	r3, #1
 8000914:	d000      	beq.n	8000918 <__aeabi_dmul+0xbc>
 8000916:	e0cd      	b.n	8000ab4 <__aeabi_dmul+0x258>
 8000918:	2200      	movs	r2, #0
 800091a:	2400      	movs	r4, #0
 800091c:	2500      	movs	r5, #0
 800091e:	9b01      	ldr	r3, [sp, #4]
 8000920:	0512      	lsls	r2, r2, #20
 8000922:	4322      	orrs	r2, r4
 8000924:	07db      	lsls	r3, r3, #31
 8000926:	431a      	orrs	r2, r3
 8000928:	0028      	movs	r0, r5
 800092a:	0011      	movs	r1, r2
 800092c:	b007      	add	sp, #28
 800092e:	bcf0      	pop	{r4, r5, r6, r7}
 8000930:	46bb      	mov	fp, r7
 8000932:	46b2      	mov	sl, r6
 8000934:	46a9      	mov	r9, r5
 8000936:	46a0      	mov	r8, r4
 8000938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800093a:	2400      	movs	r4, #0
 800093c:	2500      	movs	r5, #0
 800093e:	4aaa      	ldr	r2, [pc, #680]	; (8000be8 <__aeabi_dmul+0x38c>)
 8000940:	e7ed      	b.n	800091e <__aeabi_dmul+0xc2>
 8000942:	0c28      	lsrs	r0, r5, #16
 8000944:	042d      	lsls	r5, r5, #16
 8000946:	0c2d      	lsrs	r5, r5, #16
 8000948:	002b      	movs	r3, r5
 800094a:	0c11      	lsrs	r1, r2, #16
 800094c:	0412      	lsls	r2, r2, #16
 800094e:	0c12      	lsrs	r2, r2, #16
 8000950:	4353      	muls	r3, r2
 8000952:	4698      	mov	r8, r3
 8000954:	0013      	movs	r3, r2
 8000956:	002f      	movs	r7, r5
 8000958:	4343      	muls	r3, r0
 800095a:	4699      	mov	r9, r3
 800095c:	434f      	muls	r7, r1
 800095e:	444f      	add	r7, r9
 8000960:	46bb      	mov	fp, r7
 8000962:	4647      	mov	r7, r8
 8000964:	000b      	movs	r3, r1
 8000966:	0c3f      	lsrs	r7, r7, #16
 8000968:	46ba      	mov	sl, r7
 800096a:	4343      	muls	r3, r0
 800096c:	44da      	add	sl, fp
 800096e:	9302      	str	r3, [sp, #8]
 8000970:	45d1      	cmp	r9, sl
 8000972:	d904      	bls.n	800097e <__aeabi_dmul+0x122>
 8000974:	2780      	movs	r7, #128	; 0x80
 8000976:	027f      	lsls	r7, r7, #9
 8000978:	46b9      	mov	r9, r7
 800097a:	444b      	add	r3, r9
 800097c:	9302      	str	r3, [sp, #8]
 800097e:	4653      	mov	r3, sl
 8000980:	0c1b      	lsrs	r3, r3, #16
 8000982:	469b      	mov	fp, r3
 8000984:	4653      	mov	r3, sl
 8000986:	041f      	lsls	r7, r3, #16
 8000988:	4643      	mov	r3, r8
 800098a:	041b      	lsls	r3, r3, #16
 800098c:	0c1b      	lsrs	r3, r3, #16
 800098e:	4698      	mov	r8, r3
 8000990:	003b      	movs	r3, r7
 8000992:	4443      	add	r3, r8
 8000994:	9304      	str	r3, [sp, #16]
 8000996:	0c33      	lsrs	r3, r6, #16
 8000998:	0436      	lsls	r6, r6, #16
 800099a:	0c36      	lsrs	r6, r6, #16
 800099c:	4698      	mov	r8, r3
 800099e:	0033      	movs	r3, r6
 80009a0:	4343      	muls	r3, r0
 80009a2:	4699      	mov	r9, r3
 80009a4:	4643      	mov	r3, r8
 80009a6:	4343      	muls	r3, r0
 80009a8:	002f      	movs	r7, r5
 80009aa:	469a      	mov	sl, r3
 80009ac:	4643      	mov	r3, r8
 80009ae:	4377      	muls	r7, r6
 80009b0:	435d      	muls	r5, r3
 80009b2:	0c38      	lsrs	r0, r7, #16
 80009b4:	444d      	add	r5, r9
 80009b6:	1945      	adds	r5, r0, r5
 80009b8:	45a9      	cmp	r9, r5
 80009ba:	d903      	bls.n	80009c4 <__aeabi_dmul+0x168>
 80009bc:	2380      	movs	r3, #128	; 0x80
 80009be:	025b      	lsls	r3, r3, #9
 80009c0:	4699      	mov	r9, r3
 80009c2:	44ca      	add	sl, r9
 80009c4:	043f      	lsls	r7, r7, #16
 80009c6:	0c28      	lsrs	r0, r5, #16
 80009c8:	0c3f      	lsrs	r7, r7, #16
 80009ca:	042d      	lsls	r5, r5, #16
 80009cc:	19ed      	adds	r5, r5, r7
 80009ce:	0c27      	lsrs	r7, r4, #16
 80009d0:	0424      	lsls	r4, r4, #16
 80009d2:	0c24      	lsrs	r4, r4, #16
 80009d4:	0003      	movs	r3, r0
 80009d6:	0020      	movs	r0, r4
 80009d8:	4350      	muls	r0, r2
 80009da:	437a      	muls	r2, r7
 80009dc:	4691      	mov	r9, r2
 80009de:	003a      	movs	r2, r7
 80009e0:	4453      	add	r3, sl
 80009e2:	9305      	str	r3, [sp, #20]
 80009e4:	0c03      	lsrs	r3, r0, #16
 80009e6:	469a      	mov	sl, r3
 80009e8:	434a      	muls	r2, r1
 80009ea:	4361      	muls	r1, r4
 80009ec:	4449      	add	r1, r9
 80009ee:	4451      	add	r1, sl
 80009f0:	44ab      	add	fp, r5
 80009f2:	4589      	cmp	r9, r1
 80009f4:	d903      	bls.n	80009fe <__aeabi_dmul+0x1a2>
 80009f6:	2380      	movs	r3, #128	; 0x80
 80009f8:	025b      	lsls	r3, r3, #9
 80009fa:	4699      	mov	r9, r3
 80009fc:	444a      	add	r2, r9
 80009fe:	0400      	lsls	r0, r0, #16
 8000a00:	0c0b      	lsrs	r3, r1, #16
 8000a02:	0c00      	lsrs	r0, r0, #16
 8000a04:	0409      	lsls	r1, r1, #16
 8000a06:	1809      	adds	r1, r1, r0
 8000a08:	0020      	movs	r0, r4
 8000a0a:	4699      	mov	r9, r3
 8000a0c:	4643      	mov	r3, r8
 8000a0e:	4370      	muls	r0, r6
 8000a10:	435c      	muls	r4, r3
 8000a12:	437e      	muls	r6, r7
 8000a14:	435f      	muls	r7, r3
 8000a16:	0c03      	lsrs	r3, r0, #16
 8000a18:	4698      	mov	r8, r3
 8000a1a:	19a4      	adds	r4, r4, r6
 8000a1c:	4444      	add	r4, r8
 8000a1e:	444a      	add	r2, r9
 8000a20:	9703      	str	r7, [sp, #12]
 8000a22:	42a6      	cmp	r6, r4
 8000a24:	d904      	bls.n	8000a30 <__aeabi_dmul+0x1d4>
 8000a26:	2380      	movs	r3, #128	; 0x80
 8000a28:	025b      	lsls	r3, r3, #9
 8000a2a:	4698      	mov	r8, r3
 8000a2c:	4447      	add	r7, r8
 8000a2e:	9703      	str	r7, [sp, #12]
 8000a30:	0423      	lsls	r3, r4, #16
 8000a32:	9e02      	ldr	r6, [sp, #8]
 8000a34:	469a      	mov	sl, r3
 8000a36:	9b05      	ldr	r3, [sp, #20]
 8000a38:	445e      	add	r6, fp
 8000a3a:	4698      	mov	r8, r3
 8000a3c:	42ae      	cmp	r6, r5
 8000a3e:	41ad      	sbcs	r5, r5
 8000a40:	1876      	adds	r6, r6, r1
 8000a42:	428e      	cmp	r6, r1
 8000a44:	4189      	sbcs	r1, r1
 8000a46:	0400      	lsls	r0, r0, #16
 8000a48:	0c00      	lsrs	r0, r0, #16
 8000a4a:	4450      	add	r0, sl
 8000a4c:	4440      	add	r0, r8
 8000a4e:	426d      	negs	r5, r5
 8000a50:	1947      	adds	r7, r0, r5
 8000a52:	46b8      	mov	r8, r7
 8000a54:	4693      	mov	fp, r2
 8000a56:	4249      	negs	r1, r1
 8000a58:	4689      	mov	r9, r1
 8000a5a:	44c3      	add	fp, r8
 8000a5c:	44d9      	add	r9, fp
 8000a5e:	4298      	cmp	r0, r3
 8000a60:	4180      	sbcs	r0, r0
 8000a62:	45a8      	cmp	r8, r5
 8000a64:	41ad      	sbcs	r5, r5
 8000a66:	4593      	cmp	fp, r2
 8000a68:	4192      	sbcs	r2, r2
 8000a6a:	4589      	cmp	r9, r1
 8000a6c:	4189      	sbcs	r1, r1
 8000a6e:	426d      	negs	r5, r5
 8000a70:	4240      	negs	r0, r0
 8000a72:	4328      	orrs	r0, r5
 8000a74:	0c24      	lsrs	r4, r4, #16
 8000a76:	4252      	negs	r2, r2
 8000a78:	4249      	negs	r1, r1
 8000a7a:	430a      	orrs	r2, r1
 8000a7c:	9b03      	ldr	r3, [sp, #12]
 8000a7e:	1900      	adds	r0, r0, r4
 8000a80:	1880      	adds	r0, r0, r2
 8000a82:	18c7      	adds	r7, r0, r3
 8000a84:	464b      	mov	r3, r9
 8000a86:	0ddc      	lsrs	r4, r3, #23
 8000a88:	9b04      	ldr	r3, [sp, #16]
 8000a8a:	0275      	lsls	r5, r6, #9
 8000a8c:	431d      	orrs	r5, r3
 8000a8e:	1e6a      	subs	r2, r5, #1
 8000a90:	4195      	sbcs	r5, r2
 8000a92:	464b      	mov	r3, r9
 8000a94:	0df6      	lsrs	r6, r6, #23
 8000a96:	027f      	lsls	r7, r7, #9
 8000a98:	4335      	orrs	r5, r6
 8000a9a:	025a      	lsls	r2, r3, #9
 8000a9c:	433c      	orrs	r4, r7
 8000a9e:	4315      	orrs	r5, r2
 8000aa0:	01fb      	lsls	r3, r7, #7
 8000aa2:	d400      	bmi.n	8000aa6 <__aeabi_dmul+0x24a>
 8000aa4:	e11c      	b.n	8000ce0 <__aeabi_dmul+0x484>
 8000aa6:	2101      	movs	r1, #1
 8000aa8:	086a      	lsrs	r2, r5, #1
 8000aaa:	400d      	ands	r5, r1
 8000aac:	4315      	orrs	r5, r2
 8000aae:	07e2      	lsls	r2, r4, #31
 8000ab0:	4315      	orrs	r5, r2
 8000ab2:	0864      	lsrs	r4, r4, #1
 8000ab4:	494f      	ldr	r1, [pc, #316]	; (8000bf4 <__aeabi_dmul+0x398>)
 8000ab6:	4461      	add	r1, ip
 8000ab8:	2900      	cmp	r1, #0
 8000aba:	dc00      	bgt.n	8000abe <__aeabi_dmul+0x262>
 8000abc:	e0b0      	b.n	8000c20 <__aeabi_dmul+0x3c4>
 8000abe:	076b      	lsls	r3, r5, #29
 8000ac0:	d009      	beq.n	8000ad6 <__aeabi_dmul+0x27a>
 8000ac2:	220f      	movs	r2, #15
 8000ac4:	402a      	ands	r2, r5
 8000ac6:	2a04      	cmp	r2, #4
 8000ac8:	d005      	beq.n	8000ad6 <__aeabi_dmul+0x27a>
 8000aca:	1d2a      	adds	r2, r5, #4
 8000acc:	42aa      	cmp	r2, r5
 8000ace:	41ad      	sbcs	r5, r5
 8000ad0:	426d      	negs	r5, r5
 8000ad2:	1964      	adds	r4, r4, r5
 8000ad4:	0015      	movs	r5, r2
 8000ad6:	01e3      	lsls	r3, r4, #7
 8000ad8:	d504      	bpl.n	8000ae4 <__aeabi_dmul+0x288>
 8000ada:	2180      	movs	r1, #128	; 0x80
 8000adc:	4a46      	ldr	r2, [pc, #280]	; (8000bf8 <__aeabi_dmul+0x39c>)
 8000ade:	00c9      	lsls	r1, r1, #3
 8000ae0:	4014      	ands	r4, r2
 8000ae2:	4461      	add	r1, ip
 8000ae4:	4a45      	ldr	r2, [pc, #276]	; (8000bfc <__aeabi_dmul+0x3a0>)
 8000ae6:	4291      	cmp	r1, r2
 8000ae8:	dd00      	ble.n	8000aec <__aeabi_dmul+0x290>
 8000aea:	e726      	b.n	800093a <__aeabi_dmul+0xde>
 8000aec:	0762      	lsls	r2, r4, #29
 8000aee:	08ed      	lsrs	r5, r5, #3
 8000af0:	0264      	lsls	r4, r4, #9
 8000af2:	0549      	lsls	r1, r1, #21
 8000af4:	4315      	orrs	r5, r2
 8000af6:	0b24      	lsrs	r4, r4, #12
 8000af8:	0d4a      	lsrs	r2, r1, #21
 8000afa:	e710      	b.n	800091e <__aeabi_dmul+0xc2>
 8000afc:	4652      	mov	r2, sl
 8000afe:	4332      	orrs	r2, r6
 8000b00:	d100      	bne.n	8000b04 <__aeabi_dmul+0x2a8>
 8000b02:	e07f      	b.n	8000c04 <__aeabi_dmul+0x3a8>
 8000b04:	2e00      	cmp	r6, #0
 8000b06:	d100      	bne.n	8000b0a <__aeabi_dmul+0x2ae>
 8000b08:	e0dc      	b.n	8000cc4 <__aeabi_dmul+0x468>
 8000b0a:	0030      	movs	r0, r6
 8000b0c:	f000 fa04 	bl	8000f18 <__clzsi2>
 8000b10:	0002      	movs	r2, r0
 8000b12:	3a0b      	subs	r2, #11
 8000b14:	231d      	movs	r3, #29
 8000b16:	0001      	movs	r1, r0
 8000b18:	1a9b      	subs	r3, r3, r2
 8000b1a:	4652      	mov	r2, sl
 8000b1c:	3908      	subs	r1, #8
 8000b1e:	40da      	lsrs	r2, r3
 8000b20:	408e      	lsls	r6, r1
 8000b22:	4316      	orrs	r6, r2
 8000b24:	4652      	mov	r2, sl
 8000b26:	408a      	lsls	r2, r1
 8000b28:	9b00      	ldr	r3, [sp, #0]
 8000b2a:	4935      	ldr	r1, [pc, #212]	; (8000c00 <__aeabi_dmul+0x3a4>)
 8000b2c:	1a18      	subs	r0, r3, r0
 8000b2e:	0003      	movs	r3, r0
 8000b30:	468c      	mov	ip, r1
 8000b32:	4463      	add	r3, ip
 8000b34:	2000      	movs	r0, #0
 8000b36:	9300      	str	r3, [sp, #0]
 8000b38:	e6d3      	b.n	80008e2 <__aeabi_dmul+0x86>
 8000b3a:	0025      	movs	r5, r4
 8000b3c:	4305      	orrs	r5, r0
 8000b3e:	d04a      	beq.n	8000bd6 <__aeabi_dmul+0x37a>
 8000b40:	2c00      	cmp	r4, #0
 8000b42:	d100      	bne.n	8000b46 <__aeabi_dmul+0x2ea>
 8000b44:	e0b0      	b.n	8000ca8 <__aeabi_dmul+0x44c>
 8000b46:	0020      	movs	r0, r4
 8000b48:	f000 f9e6 	bl	8000f18 <__clzsi2>
 8000b4c:	0001      	movs	r1, r0
 8000b4e:	0002      	movs	r2, r0
 8000b50:	390b      	subs	r1, #11
 8000b52:	231d      	movs	r3, #29
 8000b54:	0010      	movs	r0, r2
 8000b56:	1a5b      	subs	r3, r3, r1
 8000b58:	0031      	movs	r1, r6
 8000b5a:	0035      	movs	r5, r6
 8000b5c:	3808      	subs	r0, #8
 8000b5e:	4084      	lsls	r4, r0
 8000b60:	40d9      	lsrs	r1, r3
 8000b62:	4085      	lsls	r5, r0
 8000b64:	430c      	orrs	r4, r1
 8000b66:	4826      	ldr	r0, [pc, #152]	; (8000c00 <__aeabi_dmul+0x3a4>)
 8000b68:	1a83      	subs	r3, r0, r2
 8000b6a:	9300      	str	r3, [sp, #0]
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4699      	mov	r9, r3
 8000b70:	469b      	mov	fp, r3
 8000b72:	e697      	b.n	80008a4 <__aeabi_dmul+0x48>
 8000b74:	0005      	movs	r5, r0
 8000b76:	4325      	orrs	r5, r4
 8000b78:	d126      	bne.n	8000bc8 <__aeabi_dmul+0x36c>
 8000b7a:	2208      	movs	r2, #8
 8000b7c:	9300      	str	r3, [sp, #0]
 8000b7e:	2302      	movs	r3, #2
 8000b80:	2400      	movs	r4, #0
 8000b82:	4691      	mov	r9, r2
 8000b84:	469b      	mov	fp, r3
 8000b86:	e68d      	b.n	80008a4 <__aeabi_dmul+0x48>
 8000b88:	4652      	mov	r2, sl
 8000b8a:	9b00      	ldr	r3, [sp, #0]
 8000b8c:	4332      	orrs	r2, r6
 8000b8e:	d110      	bne.n	8000bb2 <__aeabi_dmul+0x356>
 8000b90:	4915      	ldr	r1, [pc, #84]	; (8000be8 <__aeabi_dmul+0x38c>)
 8000b92:	2600      	movs	r6, #0
 8000b94:	468c      	mov	ip, r1
 8000b96:	4463      	add	r3, ip
 8000b98:	4649      	mov	r1, r9
 8000b9a:	9300      	str	r3, [sp, #0]
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	4319      	orrs	r1, r3
 8000ba0:	4689      	mov	r9, r1
 8000ba2:	2002      	movs	r0, #2
 8000ba4:	e69d      	b.n	80008e2 <__aeabi_dmul+0x86>
 8000ba6:	465b      	mov	r3, fp
 8000ba8:	9701      	str	r7, [sp, #4]
 8000baa:	2b02      	cmp	r3, #2
 8000bac:	d000      	beq.n	8000bb0 <__aeabi_dmul+0x354>
 8000bae:	e6ad      	b.n	800090c <__aeabi_dmul+0xb0>
 8000bb0:	e6c3      	b.n	800093a <__aeabi_dmul+0xde>
 8000bb2:	4a0d      	ldr	r2, [pc, #52]	; (8000be8 <__aeabi_dmul+0x38c>)
 8000bb4:	2003      	movs	r0, #3
 8000bb6:	4694      	mov	ip, r2
 8000bb8:	4463      	add	r3, ip
 8000bba:	464a      	mov	r2, r9
 8000bbc:	9300      	str	r3, [sp, #0]
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	431a      	orrs	r2, r3
 8000bc2:	4691      	mov	r9, r2
 8000bc4:	4652      	mov	r2, sl
 8000bc6:	e68c      	b.n	80008e2 <__aeabi_dmul+0x86>
 8000bc8:	220c      	movs	r2, #12
 8000bca:	9300      	str	r3, [sp, #0]
 8000bcc:	2303      	movs	r3, #3
 8000bce:	0005      	movs	r5, r0
 8000bd0:	4691      	mov	r9, r2
 8000bd2:	469b      	mov	fp, r3
 8000bd4:	e666      	b.n	80008a4 <__aeabi_dmul+0x48>
 8000bd6:	2304      	movs	r3, #4
 8000bd8:	4699      	mov	r9, r3
 8000bda:	2300      	movs	r3, #0
 8000bdc:	9300      	str	r3, [sp, #0]
 8000bde:	3301      	adds	r3, #1
 8000be0:	2400      	movs	r4, #0
 8000be2:	469b      	mov	fp, r3
 8000be4:	e65e      	b.n	80008a4 <__aeabi_dmul+0x48>
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	000007ff 	.word	0x000007ff
 8000bec:	fffffc01 	.word	0xfffffc01
 8000bf0:	08008710 	.word	0x08008710
 8000bf4:	000003ff 	.word	0x000003ff
 8000bf8:	feffffff 	.word	0xfeffffff
 8000bfc:	000007fe 	.word	0x000007fe
 8000c00:	fffffc0d 	.word	0xfffffc0d
 8000c04:	4649      	mov	r1, r9
 8000c06:	2301      	movs	r3, #1
 8000c08:	4319      	orrs	r1, r3
 8000c0a:	4689      	mov	r9, r1
 8000c0c:	2600      	movs	r6, #0
 8000c0e:	2001      	movs	r0, #1
 8000c10:	e667      	b.n	80008e2 <__aeabi_dmul+0x86>
 8000c12:	2300      	movs	r3, #0
 8000c14:	2480      	movs	r4, #128	; 0x80
 8000c16:	2500      	movs	r5, #0
 8000c18:	4a43      	ldr	r2, [pc, #268]	; (8000d28 <__aeabi_dmul+0x4cc>)
 8000c1a:	9301      	str	r3, [sp, #4]
 8000c1c:	0324      	lsls	r4, r4, #12
 8000c1e:	e67e      	b.n	800091e <__aeabi_dmul+0xc2>
 8000c20:	2001      	movs	r0, #1
 8000c22:	1a40      	subs	r0, r0, r1
 8000c24:	2838      	cmp	r0, #56	; 0x38
 8000c26:	dd00      	ble.n	8000c2a <__aeabi_dmul+0x3ce>
 8000c28:	e676      	b.n	8000918 <__aeabi_dmul+0xbc>
 8000c2a:	281f      	cmp	r0, #31
 8000c2c:	dd5b      	ble.n	8000ce6 <__aeabi_dmul+0x48a>
 8000c2e:	221f      	movs	r2, #31
 8000c30:	0023      	movs	r3, r4
 8000c32:	4252      	negs	r2, r2
 8000c34:	1a51      	subs	r1, r2, r1
 8000c36:	40cb      	lsrs	r3, r1
 8000c38:	0019      	movs	r1, r3
 8000c3a:	2820      	cmp	r0, #32
 8000c3c:	d003      	beq.n	8000c46 <__aeabi_dmul+0x3ea>
 8000c3e:	4a3b      	ldr	r2, [pc, #236]	; (8000d2c <__aeabi_dmul+0x4d0>)
 8000c40:	4462      	add	r2, ip
 8000c42:	4094      	lsls	r4, r2
 8000c44:	4325      	orrs	r5, r4
 8000c46:	1e6a      	subs	r2, r5, #1
 8000c48:	4195      	sbcs	r5, r2
 8000c4a:	002a      	movs	r2, r5
 8000c4c:	430a      	orrs	r2, r1
 8000c4e:	2107      	movs	r1, #7
 8000c50:	000d      	movs	r5, r1
 8000c52:	2400      	movs	r4, #0
 8000c54:	4015      	ands	r5, r2
 8000c56:	4211      	tst	r1, r2
 8000c58:	d05b      	beq.n	8000d12 <__aeabi_dmul+0x4b6>
 8000c5a:	210f      	movs	r1, #15
 8000c5c:	2400      	movs	r4, #0
 8000c5e:	4011      	ands	r1, r2
 8000c60:	2904      	cmp	r1, #4
 8000c62:	d053      	beq.n	8000d0c <__aeabi_dmul+0x4b0>
 8000c64:	1d11      	adds	r1, r2, #4
 8000c66:	4291      	cmp	r1, r2
 8000c68:	4192      	sbcs	r2, r2
 8000c6a:	4252      	negs	r2, r2
 8000c6c:	18a4      	adds	r4, r4, r2
 8000c6e:	000a      	movs	r2, r1
 8000c70:	0223      	lsls	r3, r4, #8
 8000c72:	d54b      	bpl.n	8000d0c <__aeabi_dmul+0x4b0>
 8000c74:	2201      	movs	r2, #1
 8000c76:	2400      	movs	r4, #0
 8000c78:	2500      	movs	r5, #0
 8000c7a:	e650      	b.n	800091e <__aeabi_dmul+0xc2>
 8000c7c:	2380      	movs	r3, #128	; 0x80
 8000c7e:	031b      	lsls	r3, r3, #12
 8000c80:	421c      	tst	r4, r3
 8000c82:	d009      	beq.n	8000c98 <__aeabi_dmul+0x43c>
 8000c84:	421e      	tst	r6, r3
 8000c86:	d107      	bne.n	8000c98 <__aeabi_dmul+0x43c>
 8000c88:	4333      	orrs	r3, r6
 8000c8a:	031c      	lsls	r4, r3, #12
 8000c8c:	4643      	mov	r3, r8
 8000c8e:	0015      	movs	r5, r2
 8000c90:	0b24      	lsrs	r4, r4, #12
 8000c92:	4a25      	ldr	r2, [pc, #148]	; (8000d28 <__aeabi_dmul+0x4cc>)
 8000c94:	9301      	str	r3, [sp, #4]
 8000c96:	e642      	b.n	800091e <__aeabi_dmul+0xc2>
 8000c98:	2280      	movs	r2, #128	; 0x80
 8000c9a:	0312      	lsls	r2, r2, #12
 8000c9c:	4314      	orrs	r4, r2
 8000c9e:	0324      	lsls	r4, r4, #12
 8000ca0:	4a21      	ldr	r2, [pc, #132]	; (8000d28 <__aeabi_dmul+0x4cc>)
 8000ca2:	0b24      	lsrs	r4, r4, #12
 8000ca4:	9701      	str	r7, [sp, #4]
 8000ca6:	e63a      	b.n	800091e <__aeabi_dmul+0xc2>
 8000ca8:	f000 f936 	bl	8000f18 <__clzsi2>
 8000cac:	0001      	movs	r1, r0
 8000cae:	0002      	movs	r2, r0
 8000cb0:	3115      	adds	r1, #21
 8000cb2:	3220      	adds	r2, #32
 8000cb4:	291c      	cmp	r1, #28
 8000cb6:	dc00      	bgt.n	8000cba <__aeabi_dmul+0x45e>
 8000cb8:	e74b      	b.n	8000b52 <__aeabi_dmul+0x2f6>
 8000cba:	0034      	movs	r4, r6
 8000cbc:	3808      	subs	r0, #8
 8000cbe:	2500      	movs	r5, #0
 8000cc0:	4084      	lsls	r4, r0
 8000cc2:	e750      	b.n	8000b66 <__aeabi_dmul+0x30a>
 8000cc4:	f000 f928 	bl	8000f18 <__clzsi2>
 8000cc8:	0003      	movs	r3, r0
 8000cca:	001a      	movs	r2, r3
 8000ccc:	3215      	adds	r2, #21
 8000cce:	3020      	adds	r0, #32
 8000cd0:	2a1c      	cmp	r2, #28
 8000cd2:	dc00      	bgt.n	8000cd6 <__aeabi_dmul+0x47a>
 8000cd4:	e71e      	b.n	8000b14 <__aeabi_dmul+0x2b8>
 8000cd6:	4656      	mov	r6, sl
 8000cd8:	3b08      	subs	r3, #8
 8000cda:	2200      	movs	r2, #0
 8000cdc:	409e      	lsls	r6, r3
 8000cde:	e723      	b.n	8000b28 <__aeabi_dmul+0x2cc>
 8000ce0:	9b00      	ldr	r3, [sp, #0]
 8000ce2:	469c      	mov	ip, r3
 8000ce4:	e6e6      	b.n	8000ab4 <__aeabi_dmul+0x258>
 8000ce6:	4912      	ldr	r1, [pc, #72]	; (8000d30 <__aeabi_dmul+0x4d4>)
 8000ce8:	0022      	movs	r2, r4
 8000cea:	4461      	add	r1, ip
 8000cec:	002e      	movs	r6, r5
 8000cee:	408d      	lsls	r5, r1
 8000cf0:	408a      	lsls	r2, r1
 8000cf2:	40c6      	lsrs	r6, r0
 8000cf4:	1e69      	subs	r1, r5, #1
 8000cf6:	418d      	sbcs	r5, r1
 8000cf8:	4332      	orrs	r2, r6
 8000cfa:	432a      	orrs	r2, r5
 8000cfc:	40c4      	lsrs	r4, r0
 8000cfe:	0753      	lsls	r3, r2, #29
 8000d00:	d0b6      	beq.n	8000c70 <__aeabi_dmul+0x414>
 8000d02:	210f      	movs	r1, #15
 8000d04:	4011      	ands	r1, r2
 8000d06:	2904      	cmp	r1, #4
 8000d08:	d1ac      	bne.n	8000c64 <__aeabi_dmul+0x408>
 8000d0a:	e7b1      	b.n	8000c70 <__aeabi_dmul+0x414>
 8000d0c:	0765      	lsls	r5, r4, #29
 8000d0e:	0264      	lsls	r4, r4, #9
 8000d10:	0b24      	lsrs	r4, r4, #12
 8000d12:	08d2      	lsrs	r2, r2, #3
 8000d14:	4315      	orrs	r5, r2
 8000d16:	2200      	movs	r2, #0
 8000d18:	e601      	b.n	800091e <__aeabi_dmul+0xc2>
 8000d1a:	2280      	movs	r2, #128	; 0x80
 8000d1c:	0312      	lsls	r2, r2, #12
 8000d1e:	4314      	orrs	r4, r2
 8000d20:	0324      	lsls	r4, r4, #12
 8000d22:	4a01      	ldr	r2, [pc, #4]	; (8000d28 <__aeabi_dmul+0x4cc>)
 8000d24:	0b24      	lsrs	r4, r4, #12
 8000d26:	e5fa      	b.n	800091e <__aeabi_dmul+0xc2>
 8000d28:	000007ff 	.word	0x000007ff
 8000d2c:	0000043e 	.word	0x0000043e
 8000d30:	0000041e 	.word	0x0000041e

08000d34 <__aeabi_i2d>:
 8000d34:	b570      	push	{r4, r5, r6, lr}
 8000d36:	2800      	cmp	r0, #0
 8000d38:	d016      	beq.n	8000d68 <__aeabi_i2d+0x34>
 8000d3a:	17c3      	asrs	r3, r0, #31
 8000d3c:	18c5      	adds	r5, r0, r3
 8000d3e:	405d      	eors	r5, r3
 8000d40:	0fc4      	lsrs	r4, r0, #31
 8000d42:	0028      	movs	r0, r5
 8000d44:	f000 f8e8 	bl	8000f18 <__clzsi2>
 8000d48:	4a11      	ldr	r2, [pc, #68]	; (8000d90 <__aeabi_i2d+0x5c>)
 8000d4a:	1a12      	subs	r2, r2, r0
 8000d4c:	280a      	cmp	r0, #10
 8000d4e:	dc16      	bgt.n	8000d7e <__aeabi_i2d+0x4a>
 8000d50:	0003      	movs	r3, r0
 8000d52:	002e      	movs	r6, r5
 8000d54:	3315      	adds	r3, #21
 8000d56:	409e      	lsls	r6, r3
 8000d58:	230b      	movs	r3, #11
 8000d5a:	1a18      	subs	r0, r3, r0
 8000d5c:	40c5      	lsrs	r5, r0
 8000d5e:	0552      	lsls	r2, r2, #21
 8000d60:	032d      	lsls	r5, r5, #12
 8000d62:	0b2d      	lsrs	r5, r5, #12
 8000d64:	0d53      	lsrs	r3, r2, #21
 8000d66:	e003      	b.n	8000d70 <__aeabi_i2d+0x3c>
 8000d68:	2400      	movs	r4, #0
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	2500      	movs	r5, #0
 8000d6e:	2600      	movs	r6, #0
 8000d70:	051b      	lsls	r3, r3, #20
 8000d72:	432b      	orrs	r3, r5
 8000d74:	07e4      	lsls	r4, r4, #31
 8000d76:	4323      	orrs	r3, r4
 8000d78:	0030      	movs	r0, r6
 8000d7a:	0019      	movs	r1, r3
 8000d7c:	bd70      	pop	{r4, r5, r6, pc}
 8000d7e:	380b      	subs	r0, #11
 8000d80:	4085      	lsls	r5, r0
 8000d82:	0552      	lsls	r2, r2, #21
 8000d84:	032d      	lsls	r5, r5, #12
 8000d86:	2600      	movs	r6, #0
 8000d88:	0b2d      	lsrs	r5, r5, #12
 8000d8a:	0d53      	lsrs	r3, r2, #21
 8000d8c:	e7f0      	b.n	8000d70 <__aeabi_i2d+0x3c>
 8000d8e:	46c0      	nop			; (mov r8, r8)
 8000d90:	0000041e 	.word	0x0000041e

08000d94 <__aeabi_d2f>:
 8000d94:	0002      	movs	r2, r0
 8000d96:	004b      	lsls	r3, r1, #1
 8000d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d9a:	0d5b      	lsrs	r3, r3, #21
 8000d9c:	030c      	lsls	r4, r1, #12
 8000d9e:	4e3d      	ldr	r6, [pc, #244]	; (8000e94 <__aeabi_d2f+0x100>)
 8000da0:	0a64      	lsrs	r4, r4, #9
 8000da2:	0f40      	lsrs	r0, r0, #29
 8000da4:	1c5f      	adds	r7, r3, #1
 8000da6:	0fc9      	lsrs	r1, r1, #31
 8000da8:	4304      	orrs	r4, r0
 8000daa:	00d5      	lsls	r5, r2, #3
 8000dac:	4237      	tst	r7, r6
 8000dae:	d00a      	beq.n	8000dc6 <__aeabi_d2f+0x32>
 8000db0:	4839      	ldr	r0, [pc, #228]	; (8000e98 <__aeabi_d2f+0x104>)
 8000db2:	181e      	adds	r6, r3, r0
 8000db4:	2efe      	cmp	r6, #254	; 0xfe
 8000db6:	dd16      	ble.n	8000de6 <__aeabi_d2f+0x52>
 8000db8:	20ff      	movs	r0, #255	; 0xff
 8000dba:	2400      	movs	r4, #0
 8000dbc:	05c0      	lsls	r0, r0, #23
 8000dbe:	4320      	orrs	r0, r4
 8000dc0:	07c9      	lsls	r1, r1, #31
 8000dc2:	4308      	orrs	r0, r1
 8000dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d106      	bne.n	8000dd8 <__aeabi_d2f+0x44>
 8000dca:	432c      	orrs	r4, r5
 8000dcc:	d026      	beq.n	8000e1c <__aeabi_d2f+0x88>
 8000dce:	2205      	movs	r2, #5
 8000dd0:	0192      	lsls	r2, r2, #6
 8000dd2:	0a54      	lsrs	r4, r2, #9
 8000dd4:	b2d8      	uxtb	r0, r3
 8000dd6:	e7f1      	b.n	8000dbc <__aeabi_d2f+0x28>
 8000dd8:	4325      	orrs	r5, r4
 8000dda:	d0ed      	beq.n	8000db8 <__aeabi_d2f+0x24>
 8000ddc:	2080      	movs	r0, #128	; 0x80
 8000dde:	03c0      	lsls	r0, r0, #15
 8000de0:	4304      	orrs	r4, r0
 8000de2:	20ff      	movs	r0, #255	; 0xff
 8000de4:	e7ea      	b.n	8000dbc <__aeabi_d2f+0x28>
 8000de6:	2e00      	cmp	r6, #0
 8000de8:	dd1b      	ble.n	8000e22 <__aeabi_d2f+0x8e>
 8000dea:	0192      	lsls	r2, r2, #6
 8000dec:	1e53      	subs	r3, r2, #1
 8000dee:	419a      	sbcs	r2, r3
 8000df0:	00e4      	lsls	r4, r4, #3
 8000df2:	0f6d      	lsrs	r5, r5, #29
 8000df4:	4322      	orrs	r2, r4
 8000df6:	432a      	orrs	r2, r5
 8000df8:	0753      	lsls	r3, r2, #29
 8000dfa:	d048      	beq.n	8000e8e <__aeabi_d2f+0xfa>
 8000dfc:	230f      	movs	r3, #15
 8000dfe:	4013      	ands	r3, r2
 8000e00:	2b04      	cmp	r3, #4
 8000e02:	d000      	beq.n	8000e06 <__aeabi_d2f+0x72>
 8000e04:	3204      	adds	r2, #4
 8000e06:	2380      	movs	r3, #128	; 0x80
 8000e08:	04db      	lsls	r3, r3, #19
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	d03f      	beq.n	8000e8e <__aeabi_d2f+0xfa>
 8000e0e:	1c70      	adds	r0, r6, #1
 8000e10:	2efe      	cmp	r6, #254	; 0xfe
 8000e12:	d0d1      	beq.n	8000db8 <__aeabi_d2f+0x24>
 8000e14:	0192      	lsls	r2, r2, #6
 8000e16:	0a54      	lsrs	r4, r2, #9
 8000e18:	b2c0      	uxtb	r0, r0
 8000e1a:	e7cf      	b.n	8000dbc <__aeabi_d2f+0x28>
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	2400      	movs	r4, #0
 8000e20:	e7cc      	b.n	8000dbc <__aeabi_d2f+0x28>
 8000e22:	0032      	movs	r2, r6
 8000e24:	3217      	adds	r2, #23
 8000e26:	db22      	blt.n	8000e6e <__aeabi_d2f+0xda>
 8000e28:	2080      	movs	r0, #128	; 0x80
 8000e2a:	0400      	lsls	r0, r0, #16
 8000e2c:	4320      	orrs	r0, r4
 8000e2e:	241e      	movs	r4, #30
 8000e30:	1ba4      	subs	r4, r4, r6
 8000e32:	2c1f      	cmp	r4, #31
 8000e34:	dd1d      	ble.n	8000e72 <__aeabi_d2f+0xde>
 8000e36:	2202      	movs	r2, #2
 8000e38:	4252      	negs	r2, r2
 8000e3a:	1b96      	subs	r6, r2, r6
 8000e3c:	0002      	movs	r2, r0
 8000e3e:	40f2      	lsrs	r2, r6
 8000e40:	0016      	movs	r6, r2
 8000e42:	2c20      	cmp	r4, #32
 8000e44:	d004      	beq.n	8000e50 <__aeabi_d2f+0xbc>
 8000e46:	4a15      	ldr	r2, [pc, #84]	; (8000e9c <__aeabi_d2f+0x108>)
 8000e48:	4694      	mov	ip, r2
 8000e4a:	4463      	add	r3, ip
 8000e4c:	4098      	lsls	r0, r3
 8000e4e:	4305      	orrs	r5, r0
 8000e50:	002a      	movs	r2, r5
 8000e52:	1e53      	subs	r3, r2, #1
 8000e54:	419a      	sbcs	r2, r3
 8000e56:	4332      	orrs	r2, r6
 8000e58:	2600      	movs	r6, #0
 8000e5a:	0753      	lsls	r3, r2, #29
 8000e5c:	d1ce      	bne.n	8000dfc <__aeabi_d2f+0x68>
 8000e5e:	2480      	movs	r4, #128	; 0x80
 8000e60:	0013      	movs	r3, r2
 8000e62:	04e4      	lsls	r4, r4, #19
 8000e64:	2001      	movs	r0, #1
 8000e66:	4023      	ands	r3, r4
 8000e68:	4222      	tst	r2, r4
 8000e6a:	d1d3      	bne.n	8000e14 <__aeabi_d2f+0x80>
 8000e6c:	e7b0      	b.n	8000dd0 <__aeabi_d2f+0x3c>
 8000e6e:	2300      	movs	r3, #0
 8000e70:	e7ad      	b.n	8000dce <__aeabi_d2f+0x3a>
 8000e72:	4a0b      	ldr	r2, [pc, #44]	; (8000ea0 <__aeabi_d2f+0x10c>)
 8000e74:	4694      	mov	ip, r2
 8000e76:	002a      	movs	r2, r5
 8000e78:	40e2      	lsrs	r2, r4
 8000e7a:	0014      	movs	r4, r2
 8000e7c:	002a      	movs	r2, r5
 8000e7e:	4463      	add	r3, ip
 8000e80:	409a      	lsls	r2, r3
 8000e82:	4098      	lsls	r0, r3
 8000e84:	1e55      	subs	r5, r2, #1
 8000e86:	41aa      	sbcs	r2, r5
 8000e88:	4302      	orrs	r2, r0
 8000e8a:	4322      	orrs	r2, r4
 8000e8c:	e7e4      	b.n	8000e58 <__aeabi_d2f+0xc4>
 8000e8e:	0033      	movs	r3, r6
 8000e90:	e79e      	b.n	8000dd0 <__aeabi_d2f+0x3c>
 8000e92:	46c0      	nop			; (mov r8, r8)
 8000e94:	000007fe 	.word	0x000007fe
 8000e98:	fffffc80 	.word	0xfffffc80
 8000e9c:	fffffca2 	.word	0xfffffca2
 8000ea0:	fffffc82 	.word	0xfffffc82

08000ea4 <__aeabi_cfrcmple>:
 8000ea4:	4684      	mov	ip, r0
 8000ea6:	0008      	movs	r0, r1
 8000ea8:	4661      	mov	r1, ip
 8000eaa:	e7ff      	b.n	8000eac <__aeabi_cfcmpeq>

08000eac <__aeabi_cfcmpeq>:
 8000eac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000eae:	f000 f8bd 	bl	800102c <__lesf2>
 8000eb2:	2800      	cmp	r0, #0
 8000eb4:	d401      	bmi.n	8000eba <__aeabi_cfcmpeq+0xe>
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	42c8      	cmn	r0, r1
 8000eba:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000ebc <__aeabi_fcmpeq>:
 8000ebc:	b510      	push	{r4, lr}
 8000ebe:	f000 f849 	bl	8000f54 <__eqsf2>
 8000ec2:	4240      	negs	r0, r0
 8000ec4:	3001      	adds	r0, #1
 8000ec6:	bd10      	pop	{r4, pc}

08000ec8 <__aeabi_fcmplt>:
 8000ec8:	b510      	push	{r4, lr}
 8000eca:	f000 f8af 	bl	800102c <__lesf2>
 8000ece:	2800      	cmp	r0, #0
 8000ed0:	db01      	blt.n	8000ed6 <__aeabi_fcmplt+0xe>
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	bd10      	pop	{r4, pc}
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	bd10      	pop	{r4, pc}
 8000eda:	46c0      	nop			; (mov r8, r8)

08000edc <__aeabi_fcmple>:
 8000edc:	b510      	push	{r4, lr}
 8000ede:	f000 f8a5 	bl	800102c <__lesf2>
 8000ee2:	2800      	cmp	r0, #0
 8000ee4:	dd01      	ble.n	8000eea <__aeabi_fcmple+0xe>
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	bd10      	pop	{r4, pc}
 8000eea:	2001      	movs	r0, #1
 8000eec:	bd10      	pop	{r4, pc}
 8000eee:	46c0      	nop			; (mov r8, r8)

08000ef0 <__aeabi_fcmpgt>:
 8000ef0:	b510      	push	{r4, lr}
 8000ef2:	f000 f855 	bl	8000fa0 <__gesf2>
 8000ef6:	2800      	cmp	r0, #0
 8000ef8:	dc01      	bgt.n	8000efe <__aeabi_fcmpgt+0xe>
 8000efa:	2000      	movs	r0, #0
 8000efc:	bd10      	pop	{r4, pc}
 8000efe:	2001      	movs	r0, #1
 8000f00:	bd10      	pop	{r4, pc}
 8000f02:	46c0      	nop			; (mov r8, r8)

08000f04 <__aeabi_fcmpge>:
 8000f04:	b510      	push	{r4, lr}
 8000f06:	f000 f84b 	bl	8000fa0 <__gesf2>
 8000f0a:	2800      	cmp	r0, #0
 8000f0c:	da01      	bge.n	8000f12 <__aeabi_fcmpge+0xe>
 8000f0e:	2000      	movs	r0, #0
 8000f10:	bd10      	pop	{r4, pc}
 8000f12:	2001      	movs	r0, #1
 8000f14:	bd10      	pop	{r4, pc}
 8000f16:	46c0      	nop			; (mov r8, r8)

08000f18 <__clzsi2>:
 8000f18:	211c      	movs	r1, #28
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	041b      	lsls	r3, r3, #16
 8000f1e:	4298      	cmp	r0, r3
 8000f20:	d301      	bcc.n	8000f26 <__clzsi2+0xe>
 8000f22:	0c00      	lsrs	r0, r0, #16
 8000f24:	3910      	subs	r1, #16
 8000f26:	0a1b      	lsrs	r3, r3, #8
 8000f28:	4298      	cmp	r0, r3
 8000f2a:	d301      	bcc.n	8000f30 <__clzsi2+0x18>
 8000f2c:	0a00      	lsrs	r0, r0, #8
 8000f2e:	3908      	subs	r1, #8
 8000f30:	091b      	lsrs	r3, r3, #4
 8000f32:	4298      	cmp	r0, r3
 8000f34:	d301      	bcc.n	8000f3a <__clzsi2+0x22>
 8000f36:	0900      	lsrs	r0, r0, #4
 8000f38:	3904      	subs	r1, #4
 8000f3a:	a202      	add	r2, pc, #8	; (adr r2, 8000f44 <__clzsi2+0x2c>)
 8000f3c:	5c10      	ldrb	r0, [r2, r0]
 8000f3e:	1840      	adds	r0, r0, r1
 8000f40:	4770      	bx	lr
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	02020304 	.word	0x02020304
 8000f48:	01010101 	.word	0x01010101
	...

08000f54 <__eqsf2>:
 8000f54:	b570      	push	{r4, r5, r6, lr}
 8000f56:	0042      	lsls	r2, r0, #1
 8000f58:	0245      	lsls	r5, r0, #9
 8000f5a:	024e      	lsls	r6, r1, #9
 8000f5c:	004c      	lsls	r4, r1, #1
 8000f5e:	0fc3      	lsrs	r3, r0, #31
 8000f60:	0a6d      	lsrs	r5, r5, #9
 8000f62:	2001      	movs	r0, #1
 8000f64:	0e12      	lsrs	r2, r2, #24
 8000f66:	0a76      	lsrs	r6, r6, #9
 8000f68:	0e24      	lsrs	r4, r4, #24
 8000f6a:	0fc9      	lsrs	r1, r1, #31
 8000f6c:	2aff      	cmp	r2, #255	; 0xff
 8000f6e:	d006      	beq.n	8000f7e <__eqsf2+0x2a>
 8000f70:	2cff      	cmp	r4, #255	; 0xff
 8000f72:	d003      	beq.n	8000f7c <__eqsf2+0x28>
 8000f74:	42a2      	cmp	r2, r4
 8000f76:	d101      	bne.n	8000f7c <__eqsf2+0x28>
 8000f78:	42b5      	cmp	r5, r6
 8000f7a:	d006      	beq.n	8000f8a <__eqsf2+0x36>
 8000f7c:	bd70      	pop	{r4, r5, r6, pc}
 8000f7e:	2d00      	cmp	r5, #0
 8000f80:	d1fc      	bne.n	8000f7c <__eqsf2+0x28>
 8000f82:	2cff      	cmp	r4, #255	; 0xff
 8000f84:	d1fa      	bne.n	8000f7c <__eqsf2+0x28>
 8000f86:	2e00      	cmp	r6, #0
 8000f88:	d1f8      	bne.n	8000f7c <__eqsf2+0x28>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d006      	beq.n	8000f9c <__eqsf2+0x48>
 8000f8e:	2001      	movs	r0, #1
 8000f90:	2a00      	cmp	r2, #0
 8000f92:	d1f3      	bne.n	8000f7c <__eqsf2+0x28>
 8000f94:	0028      	movs	r0, r5
 8000f96:	1e43      	subs	r3, r0, #1
 8000f98:	4198      	sbcs	r0, r3
 8000f9a:	e7ef      	b.n	8000f7c <__eqsf2+0x28>
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	e7ed      	b.n	8000f7c <__eqsf2+0x28>

08000fa0 <__gesf2>:
 8000fa0:	b570      	push	{r4, r5, r6, lr}
 8000fa2:	0042      	lsls	r2, r0, #1
 8000fa4:	0245      	lsls	r5, r0, #9
 8000fa6:	024e      	lsls	r6, r1, #9
 8000fa8:	004c      	lsls	r4, r1, #1
 8000faa:	0fc3      	lsrs	r3, r0, #31
 8000fac:	0a6d      	lsrs	r5, r5, #9
 8000fae:	0e12      	lsrs	r2, r2, #24
 8000fb0:	0a76      	lsrs	r6, r6, #9
 8000fb2:	0e24      	lsrs	r4, r4, #24
 8000fb4:	0fc8      	lsrs	r0, r1, #31
 8000fb6:	2aff      	cmp	r2, #255	; 0xff
 8000fb8:	d01b      	beq.n	8000ff2 <__gesf2+0x52>
 8000fba:	2cff      	cmp	r4, #255	; 0xff
 8000fbc:	d00e      	beq.n	8000fdc <__gesf2+0x3c>
 8000fbe:	2a00      	cmp	r2, #0
 8000fc0:	d11b      	bne.n	8000ffa <__gesf2+0x5a>
 8000fc2:	2c00      	cmp	r4, #0
 8000fc4:	d101      	bne.n	8000fca <__gesf2+0x2a>
 8000fc6:	2e00      	cmp	r6, #0
 8000fc8:	d01c      	beq.n	8001004 <__gesf2+0x64>
 8000fca:	2d00      	cmp	r5, #0
 8000fcc:	d00c      	beq.n	8000fe8 <__gesf2+0x48>
 8000fce:	4283      	cmp	r3, r0
 8000fd0:	d01c      	beq.n	800100c <__gesf2+0x6c>
 8000fd2:	2102      	movs	r1, #2
 8000fd4:	1e58      	subs	r0, r3, #1
 8000fd6:	4008      	ands	r0, r1
 8000fd8:	3801      	subs	r0, #1
 8000fda:	bd70      	pop	{r4, r5, r6, pc}
 8000fdc:	2e00      	cmp	r6, #0
 8000fde:	d122      	bne.n	8001026 <__gesf2+0x86>
 8000fe0:	2a00      	cmp	r2, #0
 8000fe2:	d1f4      	bne.n	8000fce <__gesf2+0x2e>
 8000fe4:	2d00      	cmp	r5, #0
 8000fe6:	d1f2      	bne.n	8000fce <__gesf2+0x2e>
 8000fe8:	2800      	cmp	r0, #0
 8000fea:	d1f6      	bne.n	8000fda <__gesf2+0x3a>
 8000fec:	2001      	movs	r0, #1
 8000fee:	4240      	negs	r0, r0
 8000ff0:	e7f3      	b.n	8000fda <__gesf2+0x3a>
 8000ff2:	2d00      	cmp	r5, #0
 8000ff4:	d117      	bne.n	8001026 <__gesf2+0x86>
 8000ff6:	2cff      	cmp	r4, #255	; 0xff
 8000ff8:	d0f0      	beq.n	8000fdc <__gesf2+0x3c>
 8000ffa:	2c00      	cmp	r4, #0
 8000ffc:	d1e7      	bne.n	8000fce <__gesf2+0x2e>
 8000ffe:	2e00      	cmp	r6, #0
 8001000:	d1e5      	bne.n	8000fce <__gesf2+0x2e>
 8001002:	e7e6      	b.n	8000fd2 <__gesf2+0x32>
 8001004:	2000      	movs	r0, #0
 8001006:	2d00      	cmp	r5, #0
 8001008:	d0e7      	beq.n	8000fda <__gesf2+0x3a>
 800100a:	e7e2      	b.n	8000fd2 <__gesf2+0x32>
 800100c:	42a2      	cmp	r2, r4
 800100e:	dc05      	bgt.n	800101c <__gesf2+0x7c>
 8001010:	dbea      	blt.n	8000fe8 <__gesf2+0x48>
 8001012:	42b5      	cmp	r5, r6
 8001014:	d802      	bhi.n	800101c <__gesf2+0x7c>
 8001016:	d3e7      	bcc.n	8000fe8 <__gesf2+0x48>
 8001018:	2000      	movs	r0, #0
 800101a:	e7de      	b.n	8000fda <__gesf2+0x3a>
 800101c:	4243      	negs	r3, r0
 800101e:	4158      	adcs	r0, r3
 8001020:	0040      	lsls	r0, r0, #1
 8001022:	3801      	subs	r0, #1
 8001024:	e7d9      	b.n	8000fda <__gesf2+0x3a>
 8001026:	2002      	movs	r0, #2
 8001028:	4240      	negs	r0, r0
 800102a:	e7d6      	b.n	8000fda <__gesf2+0x3a>

0800102c <__lesf2>:
 800102c:	b570      	push	{r4, r5, r6, lr}
 800102e:	0042      	lsls	r2, r0, #1
 8001030:	0245      	lsls	r5, r0, #9
 8001032:	024e      	lsls	r6, r1, #9
 8001034:	004c      	lsls	r4, r1, #1
 8001036:	0fc3      	lsrs	r3, r0, #31
 8001038:	0a6d      	lsrs	r5, r5, #9
 800103a:	0e12      	lsrs	r2, r2, #24
 800103c:	0a76      	lsrs	r6, r6, #9
 800103e:	0e24      	lsrs	r4, r4, #24
 8001040:	0fc8      	lsrs	r0, r1, #31
 8001042:	2aff      	cmp	r2, #255	; 0xff
 8001044:	d00b      	beq.n	800105e <__lesf2+0x32>
 8001046:	2cff      	cmp	r4, #255	; 0xff
 8001048:	d00d      	beq.n	8001066 <__lesf2+0x3a>
 800104a:	2a00      	cmp	r2, #0
 800104c:	d11f      	bne.n	800108e <__lesf2+0x62>
 800104e:	2c00      	cmp	r4, #0
 8001050:	d116      	bne.n	8001080 <__lesf2+0x54>
 8001052:	2e00      	cmp	r6, #0
 8001054:	d114      	bne.n	8001080 <__lesf2+0x54>
 8001056:	2000      	movs	r0, #0
 8001058:	2d00      	cmp	r5, #0
 800105a:	d010      	beq.n	800107e <__lesf2+0x52>
 800105c:	e009      	b.n	8001072 <__lesf2+0x46>
 800105e:	2d00      	cmp	r5, #0
 8001060:	d10c      	bne.n	800107c <__lesf2+0x50>
 8001062:	2cff      	cmp	r4, #255	; 0xff
 8001064:	d113      	bne.n	800108e <__lesf2+0x62>
 8001066:	2e00      	cmp	r6, #0
 8001068:	d108      	bne.n	800107c <__lesf2+0x50>
 800106a:	2a00      	cmp	r2, #0
 800106c:	d008      	beq.n	8001080 <__lesf2+0x54>
 800106e:	4283      	cmp	r3, r0
 8001070:	d012      	beq.n	8001098 <__lesf2+0x6c>
 8001072:	2102      	movs	r1, #2
 8001074:	1e58      	subs	r0, r3, #1
 8001076:	4008      	ands	r0, r1
 8001078:	3801      	subs	r0, #1
 800107a:	e000      	b.n	800107e <__lesf2+0x52>
 800107c:	2002      	movs	r0, #2
 800107e:	bd70      	pop	{r4, r5, r6, pc}
 8001080:	2d00      	cmp	r5, #0
 8001082:	d1f4      	bne.n	800106e <__lesf2+0x42>
 8001084:	2800      	cmp	r0, #0
 8001086:	d1fa      	bne.n	800107e <__lesf2+0x52>
 8001088:	2001      	movs	r0, #1
 800108a:	4240      	negs	r0, r0
 800108c:	e7f7      	b.n	800107e <__lesf2+0x52>
 800108e:	2c00      	cmp	r4, #0
 8001090:	d1ed      	bne.n	800106e <__lesf2+0x42>
 8001092:	2e00      	cmp	r6, #0
 8001094:	d1eb      	bne.n	800106e <__lesf2+0x42>
 8001096:	e7ec      	b.n	8001072 <__lesf2+0x46>
 8001098:	42a2      	cmp	r2, r4
 800109a:	dc05      	bgt.n	80010a8 <__lesf2+0x7c>
 800109c:	dbf2      	blt.n	8001084 <__lesf2+0x58>
 800109e:	42b5      	cmp	r5, r6
 80010a0:	d802      	bhi.n	80010a8 <__lesf2+0x7c>
 80010a2:	d3ef      	bcc.n	8001084 <__lesf2+0x58>
 80010a4:	2000      	movs	r0, #0
 80010a6:	e7ea      	b.n	800107e <__lesf2+0x52>
 80010a8:	4243      	negs	r3, r0
 80010aa:	4158      	adcs	r0, r3
 80010ac:	0040      	lsls	r0, r0, #1
 80010ae:	3801      	subs	r0, #1
 80010b0:	e7e5      	b.n	800107e <__lesf2+0x52>
 80010b2:	46c0      	nop			; (mov r8, r8)

080010b4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80010b8:	f3bf 8f4f 	dsb	sy
}
 80010bc:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010be:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <__NVIC_SystemReset+0x1c>)
 80010c0:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <__NVIC_SystemReset+0x20>)
 80010c2:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80010c4:	f3bf 8f4f 	dsb	sy
}
 80010c8:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	e7fd      	b.n	80010ca <__NVIC_SystemReset+0x16>
 80010ce:	46c0      	nop			; (mov r8, r8)
 80010d0:	e000ed00 	.word	0xe000ed00
 80010d4:	05fa0004 	.word	0x05fa0004

080010d8 <HAL_TIM_OC_DelayElapsedCallback>:

int startupTimer = 0;



void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 80010d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010da:	b08b      	sub	sp, #44	; 0x2c
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	4bdb      	ldr	r3, [pc, #876]	; (8001450 <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d000      	beq.n	80010ea <HAL_TIM_OC_DelayElapsedCallback+0x12>
 80010e8:	e1d2      	b.n	8001490 <HAL_TIM_OC_DelayElapsedCallback+0x3b8>
        if (!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8))) { //check pin state
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	005a      	lsls	r2, r3, #1
 80010ee:	2390      	movs	r3, #144	; 0x90
 80010f0:	05db      	lsls	r3, r3, #23
 80010f2:	0011      	movs	r1, r2
 80010f4:	0018      	movs	r0, r3
 80010f6:	f002 fcdf 	bl	8003ab8 <HAL_GPIO_ReadPin>
 80010fa:	1e03      	subs	r3, r0, #0
 80010fc:	d000      	beq.n	8001100 <HAL_TIM_OC_DelayElapsedCallback+0x28>
 80010fe:	e207      	b.n	8001510 <HAL_TIM_OC_DelayElapsedCallback+0x438>
             * Steps DAC
             * +/- 0.5v Every 100ms
             */

            /* Write to SPI (begin transfer?) */
            HAL_SPI_Transmit(&hspi1, (uint8_t * ) & WRITE, 1, 1);
 8001100:	49d4      	ldr	r1, [pc, #848]	; (8001454 <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 8001102:	48d5      	ldr	r0, [pc, #852]	; (8001458 <HAL_TIM_OC_DelayElapsedCallback+0x380>)
 8001104:	2301      	movs	r3, #1
 8001106:	2201      	movs	r2, #1
 8001108:	f004 f87c 	bl	8005204 <HAL_SPI_Transmit>

            while (!(SPI1->SR));
 800110c:	46c0      	nop			; (mov r8, r8)
 800110e:	4bd3      	ldr	r3, [pc, #844]	; (800145c <HAL_TIM_OC_DelayElapsedCallback+0x384>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d0fb      	beq.n	800110e <HAL_TIM_OC_DelayElapsedCallback+0x36>

            raw = SPI1->DR;
 8001116:	4bd1      	ldr	r3, [pc, #836]	; (800145c <HAL_TIM_OC_DelayElapsedCallback+0x384>)
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	001a      	movs	r2, r3
 800111c:	4bd0      	ldr	r3, [pc, #832]	; (8001460 <HAL_TIM_OC_DelayElapsedCallback+0x388>)
 800111e:	601a      	str	r2, [r3, #0]

            DAC->DHR12R1 = DAC_OUT[step];
 8001120:	4bd0      	ldr	r3, [pc, #832]	; (8001464 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	0019      	movs	r1, r3
 8001126:	4bd0      	ldr	r3, [pc, #832]	; (8001468 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 8001128:	4ad0      	ldr	r2, [pc, #832]	; (800146c <HAL_TIM_OC_DelayElapsedCallback+0x394>)
 800112a:	0089      	lsls	r1, r1, #2
 800112c:	588a      	ldr	r2, [r1, r2]
 800112e:	609a      	str	r2, [r3, #8]

            HAL_ADC_Start_DMA(&hadc, (uint32_t *) adcResultsDMA, adcChannelCount);
 8001130:	2310      	movs	r3, #16
 8001132:	001a      	movs	r2, r3
 8001134:	49ce      	ldr	r1, [pc, #824]	; (8001470 <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 8001136:	4bcf      	ldr	r3, [pc, #828]	; (8001474 <HAL_TIM_OC_DelayElapsedCallback+0x39c>)
 8001138:	0018      	movs	r0, r3
 800113a:	f001 fd0f 	bl	8002b5c <HAL_ADC_Start_DMA>
            uint16_t PA0 = adcResultsDMA[0]; //ADC_IN0, END_mon: entrance/collimator monitor
 800113e:	2126      	movs	r1, #38	; 0x26
 8001140:	187b      	adds	r3, r7, r1
 8001142:	4acb      	ldr	r2, [pc, #812]	; (8001470 <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 8001144:	8812      	ldrh	r2, [r2, #0]
 8001146:	801a      	strh	r2, [r3, #0]
            uint16_t PA7 = adcResultsDMA[4]; //ADC_IN7, SWP_mon: Sweep voltage monitor
 8001148:	2024      	movs	r0, #36	; 0x24
 800114a:	183b      	adds	r3, r7, r0
 800114c:	4ac8      	ldr	r2, [pc, #800]	; (8001470 <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 800114e:	8912      	ldrh	r2, [r2, #8]
 8001150:	801a      	strh	r2, [r3, #0]
            uint16_t PB0 = adcResultsDMA[5]; //ADC_IN8, TMP 1: Sweep temperature
 8001152:	2422      	movs	r4, #34	; 0x22
 8001154:	193b      	adds	r3, r7, r4
 8001156:	4ac6      	ldr	r2, [pc, #792]	; (8001470 <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 8001158:	8952      	ldrh	r2, [r2, #10]
 800115a:	801a      	strh	r2, [r3, #0]
            uint16_t PB1 = adcResultsDMA[6]; //ADC_IN9, TMP 2: feedbacks
 800115c:	2520      	movs	r5, #32
 800115e:	197b      	adds	r3, r7, r5
 8001160:	4ac3      	ldr	r2, [pc, #780]	; (8001470 <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 8001162:	8992      	ldrh	r2, [r2, #12]
 8001164:	801a      	strh	r2, [r3, #0]

            erpa_buf[0] = erpa_sync; // ERPA SYNC 0xAA MSB
 8001166:	22aa      	movs	r2, #170	; 0xaa
 8001168:	4bc3      	ldr	r3, [pc, #780]	; (8001478 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 800116a:	701a      	strb	r2, [r3, #0]
            erpa_buf[1] = erpa_sync; // ERPA SYNC 0xAA LSB
 800116c:	22aa      	movs	r2, #170	; 0xaa
 800116e:	4bc2      	ldr	r3, [pc, #776]	; (8001478 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 8001170:	705a      	strb	r2, [r3, #1]
            erpa_buf[2] = ((erpa_seq & 0xFF00) >> 8); // ERPA SEQ # MSB
 8001172:	4bc2      	ldr	r3, [pc, #776]	; (800147c <HAL_TIM_OC_DelayElapsedCallback+0x3a4>)
 8001174:	881b      	ldrh	r3, [r3, #0]
 8001176:	0a1b      	lsrs	r3, r3, #8
 8001178:	b29b      	uxth	r3, r3
 800117a:	b2da      	uxtb	r2, r3
 800117c:	4bbe      	ldr	r3, [pc, #760]	; (8001478 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 800117e:	709a      	strb	r2, [r3, #2]
            erpa_buf[3] = (erpa_seq & 0xFF); // ERPA SEQ # MSB
 8001180:	4bbe      	ldr	r3, [pc, #760]	; (800147c <HAL_TIM_OC_DelayElapsedCallback+0x3a4>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	b2da      	uxtb	r2, r3
 8001186:	4bbc      	ldr	r3, [pc, #752]	; (8001478 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 8001188:	70da      	strb	r2, [r3, #3]
            erpa_buf[4] = ((raw & 0xFF00) >> 8); // ERPA eADC MSB
 800118a:	4bb5      	ldr	r3, [pc, #724]	; (8001460 <HAL_TIM_OC_DelayElapsedCallback+0x388>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	121b      	asrs	r3, r3, #8
 8001190:	b2da      	uxtb	r2, r3
 8001192:	4bb9      	ldr	r3, [pc, #740]	; (8001478 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 8001194:	711a      	strb	r2, [r3, #4]
            erpa_buf[5] = (raw & 0xFF); // ERPA eADC LSB
 8001196:	4bb2      	ldr	r3, [pc, #712]	; (8001460 <HAL_TIM_OC_DelayElapsedCallback+0x388>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	b2da      	uxtb	r2, r3
 800119c:	4bb6      	ldr	r3, [pc, #728]	; (8001478 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 800119e:	715a      	strb	r2, [r3, #5]
            erpa_buf[6] = ((DAC_OUT[step] & 0xFF00) >> 8); //SWP Commanded MSB
 80011a0:	4bb0      	ldr	r3, [pc, #704]	; (8001464 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	001a      	movs	r2, r3
 80011a6:	4bb1      	ldr	r3, [pc, #708]	; (800146c <HAL_TIM_OC_DelayElapsedCallback+0x394>)
 80011a8:	0092      	lsls	r2, r2, #2
 80011aa:	58d3      	ldr	r3, [r2, r3]
 80011ac:	0a1b      	lsrs	r3, r3, #8
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	4bb1      	ldr	r3, [pc, #708]	; (8001478 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 80011b2:	719a      	strb	r2, [r3, #6]
            erpa_buf[7] = (DAC_OUT[step] & 0xFF); //SWP Commanded LSB
 80011b4:	4bab      	ldr	r3, [pc, #684]	; (8001464 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	001a      	movs	r2, r3
 80011ba:	4bac      	ldr	r3, [pc, #688]	; (800146c <HAL_TIM_OC_DelayElapsedCallback+0x394>)
 80011bc:	0092      	lsls	r2, r2, #2
 80011be:	58d3      	ldr	r3, [r2, r3]
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	4bad      	ldr	r3, [pc, #692]	; (8001478 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 80011c4:	71da      	strb	r2, [r3, #7]
            erpa_buf[8] = ((PA7 & 0xFF00) >> 8); // SWP Monitored MSB
 80011c6:	183b      	adds	r3, r7, r0
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	0a1b      	lsrs	r3, r3, #8
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	4ba9      	ldr	r3, [pc, #676]	; (8001478 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 80011d2:	721a      	strb	r2, [r3, #8]
            erpa_buf[9] = (PA7 & 0xFF); // SWP Monitored LSB
 80011d4:	183b      	adds	r3, r7, r0
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	4ba7      	ldr	r3, [pc, #668]	; (8001478 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 80011dc:	725a      	strb	r2, [r3, #9]
            erpa_buf[10] = ((PB0 & 0xFF00) >> 8); // TEMPURATURE 1 MSB
 80011de:	193b      	adds	r3, r7, r4
 80011e0:	881b      	ldrh	r3, [r3, #0]
 80011e2:	0a1b      	lsrs	r3, r3, #8
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	4ba3      	ldr	r3, [pc, #652]	; (8001478 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 80011ea:	729a      	strb	r2, [r3, #10]
            erpa_buf[11] = (PB0 & 0xFF); // TEMPURATURE 1 LSB
 80011ec:	193b      	adds	r3, r7, r4
 80011ee:	881b      	ldrh	r3, [r3, #0]
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	4ba1      	ldr	r3, [pc, #644]	; (8001478 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 80011f4:	72da      	strb	r2, [r3, #11]
            erpa_buf[12] = ((PB1 & 0xFF00) >> 8); // TEMPURATURE 2 MSB
 80011f6:	197b      	adds	r3, r7, r5
 80011f8:	881b      	ldrh	r3, [r3, #0]
 80011fa:	0a1b      	lsrs	r3, r3, #8
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	4b9d      	ldr	r3, [pc, #628]	; (8001478 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 8001202:	731a      	strb	r2, [r3, #12]
            erpa_buf[13] = (PB1 & 0xFF); // TEMPURATURE 2 LSB
 8001204:	197b      	adds	r3, r7, r5
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	b2da      	uxtb	r2, r3
 800120a:	4b9b      	ldr	r3, [pc, #620]	; (8001478 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 800120c:	735a      	strb	r2, [r3, #13]
            erpa_buf[14] = ((PA0 & 0xFF00) >> 8); // ENDmon MSB
 800120e:	187b      	adds	r3, r7, r1
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	0a1b      	lsrs	r3, r3, #8
 8001214:	b29b      	uxth	r3, r3
 8001216:	b2da      	uxtb	r2, r3
 8001218:	4b97      	ldr	r3, [pc, #604]	; (8001478 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 800121a:	739a      	strb	r2, [r3, #14]
            erpa_buf[15] = (PA0 & 0xFF); // ENDmon LSB
 800121c:	187b      	adds	r3, r7, r1
 800121e:	881b      	ldrh	r3, [r3, #0]
 8001220:	b2da      	uxtb	r2, r3
 8001222:	4b95      	ldr	r3, [pc, #596]	; (8001478 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 8001224:	73da      	strb	r2, [r3, #15]

            erpa_seq++;
 8001226:	4b95      	ldr	r3, [pc, #596]	; (800147c <HAL_TIM_OC_DelayElapsedCallback+0x3a4>)
 8001228:	881b      	ldrh	r3, [r3, #0]
 800122a:	3301      	adds	r3, #1
 800122c:	b29a      	uxth	r2, r3
 800122e:	4b93      	ldr	r3, [pc, #588]	; (800147c <HAL_TIM_OC_DelayElapsedCallback+0x3a4>)
 8001230:	801a      	strh	r2, [r3, #0]

            //HAL_UART_Transmit(&huart1, erpa_buf, sizeof(erpa_buf), 100);

            if (step == 5) {
 8001232:	4b8c      	ldr	r3, [pc, #560]	; (8001464 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b05      	cmp	r3, #5
 8001238:	d103      	bne.n	8001242 <HAL_TIM_OC_DelayElapsedCallback+0x16a>
                up = 0;
 800123a:	4b91      	ldr	r3, [pc, #580]	; (8001480 <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	e006      	b.n	8001250 <HAL_TIM_OC_DelayElapsedCallback+0x178>
            } else if (step == 0) {
 8001242:	4b88      	ldr	r3, [pc, #544]	; (8001464 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d102      	bne.n	8001250 <HAL_TIM_OC_DelayElapsedCallback+0x178>
                up = 1;
 800124a:	4b8d      	ldr	r3, [pc, #564]	; (8001480 <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 800124c:	2201      	movs	r2, #1
 800124e:	601a      	str	r2, [r3, #0]
            }

            up == 1 ? step++ : step--;
 8001250:	4b8b      	ldr	r3, [pc, #556]	; (8001480 <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d106      	bne.n	8001266 <HAL_TIM_OC_DelayElapsedCallback+0x18e>
 8001258:	4b82      	ldr	r3, [pc, #520]	; (8001464 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	3301      	adds	r3, #1
 800125e:	b2da      	uxtb	r2, r3
 8001260:	4b80      	ldr	r3, [pc, #512]	; (8001464 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 8001262:	701a      	strb	r2, [r3, #0]
 8001264:	e005      	b.n	8001272 <HAL_TIM_OC_DelayElapsedCallback+0x19a>
 8001266:	4b7f      	ldr	r3, [pc, #508]	; (8001464 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	3b01      	subs	r3, #1
 800126c:	b2da      	uxtb	r2, r3
 800126e:	4b7d      	ldr	r3, [pc, #500]	; (8001464 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 8001270:	701a      	strb	r2, [r3, #0]

            if (hk_counter == 50) {
 8001272:	4b84      	ldr	r3, [pc, #528]	; (8001484 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2b32      	cmp	r3, #50	; 0x32
 8001278:	d000      	beq.n	800127c <HAL_TIM_OC_DelayElapsedCallback+0x1a4>
 800127a:	e0e3      	b.n	8001444 <HAL_TIM_OC_DelayElapsedCallback+0x36c>
                HAL_ADC_Start_DMA(&hadc, (uint32_t *) adcResultsDMA, adcChannelCount);
 800127c:	2310      	movs	r3, #16
 800127e:	001a      	movs	r2, r3
 8001280:	497b      	ldr	r1, [pc, #492]	; (8001470 <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 8001282:	4b7c      	ldr	r3, [pc, #496]	; (8001474 <HAL_TIM_OC_DelayElapsedCallback+0x39c>)
 8001284:	0018      	movs	r0, r3
 8001286:	f001 fc69 	bl	8002b5c <HAL_ADC_Start_DMA>

                uint16_t PA1 = adcResultsDMA[1]; //ADC_IN1, BUS_Vmon: instrument bus voltage monitor
 800128a:	211e      	movs	r1, #30
 800128c:	187b      	adds	r3, r7, r1
 800128e:	4a78      	ldr	r2, [pc, #480]	; (8001470 <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 8001290:	8852      	ldrh	r2, [r2, #2]
 8001292:	801a      	strh	r2, [r3, #0]
                uint16_t PA2 = adcResultsDMA[2]; //ADC_IN2, BUS_Imon: instrument bus current monitor
 8001294:	201c      	movs	r0, #28
 8001296:	183b      	adds	r3, r7, r0
 8001298:	4a75      	ldr	r2, [pc, #468]	; (8001470 <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 800129a:	8892      	ldrh	r2, [r2, #4]
 800129c:	801a      	strh	r2, [r3, #0]
                uint16_t PA3 = adcResultsDMA[3]; //ADC_IN3, 5vref_mon: Accurate 5V for ADC monitor
 800129e:	241a      	movs	r4, #26
 80012a0:	193b      	adds	r3, r7, r4
 80012a2:	4a73      	ldr	r2, [pc, #460]	; (8001470 <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 80012a4:	88d2      	ldrh	r2, [r2, #6]
 80012a6:	801a      	strh	r2, [r3, #0]
                uint16_t PC0 = adcResultsDMA[7]; //ADC_IN10, 2v5_mon: power monitor
 80012a8:	2518      	movs	r5, #24
 80012aa:	197b      	adds	r3, r7, r5
 80012ac:	4a70      	ldr	r2, [pc, #448]	; (8001470 <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 80012ae:	89d2      	ldrh	r2, [r2, #14]
 80012b0:	801a      	strh	r2, [r3, #0]
                uint16_t PC1 = adcResultsDMA[8]; //ADC_IN11, 3v3_mon: power monitor
 80012b2:	2616      	movs	r6, #22
 80012b4:	19bb      	adds	r3, r7, r6
 80012b6:	4a6e      	ldr	r2, [pc, #440]	; (8001470 <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 80012b8:	8a12      	ldrh	r2, [r2, #16]
 80012ba:	801a      	strh	r2, [r3, #0]
                uint16_t PC2 = adcResultsDMA[9]; //ADC_IN12, 5v_mon: power monitor
 80012bc:	2314      	movs	r3, #20
 80012be:	18fb      	adds	r3, r7, r3
 80012c0:	4a6b      	ldr	r2, [pc, #428]	; (8001470 <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 80012c2:	8a52      	ldrh	r2, [r2, #18]
 80012c4:	801a      	strh	r2, [r3, #0]
                uint16_t PC3 = adcResultsDMA[10]; //ADC_IN13, n3v3_mon: power monitor
 80012c6:	2212      	movs	r2, #18
 80012c8:	18bb      	adds	r3, r7, r2
 80012ca:	4a69      	ldr	r2, [pc, #420]	; (8001470 <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 80012cc:	8a92      	ldrh	r2, [r2, #20]
 80012ce:	801a      	strh	r2, [r3, #0]
                uint16_t PC4 = adcResultsDMA[11]; //ADC_IN14, n5v_mon: power monitor
 80012d0:	2310      	movs	r3, #16
 80012d2:	18fb      	adds	r3, r7, r3
 80012d4:	4a66      	ldr	r2, [pc, #408]	; (8001470 <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 80012d6:	8ad2      	ldrh	r2, [r2, #22]
 80012d8:	801a      	strh	r2, [r3, #0]
                uint16_t PC5 = adcResultsDMA[12]; //ADC_IN15, 15v_mon: power monitor
 80012da:	220e      	movs	r2, #14
 80012dc:	18bb      	adds	r3, r7, r2
 80012de:	4a64      	ldr	r2, [pc, #400]	; (8001470 <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 80012e0:	8b12      	ldrh	r2, [r2, #24]
 80012e2:	801a      	strh	r2, [r3, #0]
                uint16_t MCU_TEMP = adcResultsDMA[13]; //(internally connected) ADC_IN16, VSENSE
 80012e4:	230c      	movs	r3, #12
 80012e6:	18fb      	adds	r3, r7, r3
 80012e8:	4a61      	ldr	r2, [pc, #388]	; (8001470 <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 80012ea:	8b52      	ldrh	r2, [r2, #26]
 80012ec:	801a      	strh	r2, [r3, #0]
                uint16_t MCU_VREF = adcResultsDMA[14]; //(internally connected) ADC_IN17, VREFINT
 80012ee:	220a      	movs	r2, #10
 80012f0:	18bb      	adds	r3, r7, r2
 80012f2:	4a5f      	ldr	r2, [pc, #380]	; (8001470 <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 80012f4:	8b92      	ldrh	r2, [r2, #28]
 80012f6:	801a      	strh	r2, [r3, #0]

                hk_buf[0] = hk_sync; // HK SYNC 0xCC MSB
 80012f8:	22cc      	movs	r2, #204	; 0xcc
 80012fa:	4b63      	ldr	r3, [pc, #396]	; (8001488 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 80012fc:	701a      	strb	r2, [r3, #0]
                hk_buf[1] = hk_sync; // HK SYNC 0xCC LSB
 80012fe:	22cc      	movs	r2, #204	; 0xcc
 8001300:	4b61      	ldr	r3, [pc, #388]	; (8001488 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 8001302:	705a      	strb	r2, [r3, #1]
                hk_buf[2] = ((hk_seq & 0xFF00) >> 8); // HK SEQ # MSB
 8001304:	4b61      	ldr	r3, [pc, #388]	; (800148c <HAL_TIM_OC_DelayElapsedCallback+0x3b4>)
 8001306:	881b      	ldrh	r3, [r3, #0]
 8001308:	0a1b      	lsrs	r3, r3, #8
 800130a:	b29b      	uxth	r3, r3
 800130c:	b2da      	uxtb	r2, r3
 800130e:	4b5e      	ldr	r3, [pc, #376]	; (8001488 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 8001310:	709a      	strb	r2, [r3, #2]
                hk_buf[3] = (hk_seq & 0xFF); // HK SEQ # LSB
 8001312:	4b5e      	ldr	r3, [pc, #376]	; (800148c <HAL_TIM_OC_DelayElapsedCallback+0x3b4>)
 8001314:	881b      	ldrh	r3, [r3, #0]
 8001316:	b2da      	uxtb	r2, r3
 8001318:	4b5b      	ldr	r3, [pc, #364]	; (8001488 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 800131a:	70da      	strb	r2, [r3, #3]
                hk_buf[4] = ((PA1 & 0xFF00) >> 8); // BUS_Vmon MSB
 800131c:	187b      	adds	r3, r7, r1
 800131e:	881b      	ldrh	r3, [r3, #0]
 8001320:	0a1b      	lsrs	r3, r3, #8
 8001322:	b29b      	uxth	r3, r3
 8001324:	b2da      	uxtb	r2, r3
 8001326:	4b58      	ldr	r3, [pc, #352]	; (8001488 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 8001328:	711a      	strb	r2, [r3, #4]
                hk_buf[5] = (PA1 & 0xFF); // BUS_Vmon LSB
 800132a:	187b      	adds	r3, r7, r1
 800132c:	881b      	ldrh	r3, [r3, #0]
 800132e:	b2da      	uxtb	r2, r3
 8001330:	4b55      	ldr	r3, [pc, #340]	; (8001488 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 8001332:	715a      	strb	r2, [r3, #5]
                hk_buf[6] = ((PA2 & 0xFF00) >> 8); // BUS_Imon MSB
 8001334:	183b      	adds	r3, r7, r0
 8001336:	881b      	ldrh	r3, [r3, #0]
 8001338:	0a1b      	lsrs	r3, r3, #8
 800133a:	b29b      	uxth	r3, r3
 800133c:	b2da      	uxtb	r2, r3
 800133e:	4b52      	ldr	r3, [pc, #328]	; (8001488 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 8001340:	719a      	strb	r2, [r3, #6]
                hk_buf[7] = (PA2 & 0xFF); // BUS_Imon LSB
 8001342:	183b      	adds	r3, r7, r0
 8001344:	881b      	ldrh	r3, [r3, #0]
 8001346:	b2da      	uxtb	r2, r3
 8001348:	4b4f      	ldr	r3, [pc, #316]	; (8001488 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 800134a:	71da      	strb	r2, [r3, #7]
                hk_buf[8] = ((PC0 & 0xFF00) >> 8); // 2.5v_mon MSB
 800134c:	197b      	adds	r3, r7, r5
 800134e:	881b      	ldrh	r3, [r3, #0]
 8001350:	0a1b      	lsrs	r3, r3, #8
 8001352:	b29b      	uxth	r3, r3
 8001354:	b2da      	uxtb	r2, r3
 8001356:	4b4c      	ldr	r3, [pc, #304]	; (8001488 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 8001358:	721a      	strb	r2, [r3, #8]
                hk_buf[9] = (PC0 & 0xFF); // 2.5v_mon LSB
 800135a:	197b      	adds	r3, r7, r5
 800135c:	881b      	ldrh	r3, [r3, #0]
 800135e:	b2da      	uxtb	r2, r3
 8001360:	4b49      	ldr	r3, [pc, #292]	; (8001488 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 8001362:	725a      	strb	r2, [r3, #9]
                hk_buf[10] = ((PC1 & 0xFF00) >> 8); // 3v3_mon MSB
 8001364:	19bb      	adds	r3, r7, r6
 8001366:	881b      	ldrh	r3, [r3, #0]
 8001368:	0a1b      	lsrs	r3, r3, #8
 800136a:	b29b      	uxth	r3, r3
 800136c:	b2da      	uxtb	r2, r3
 800136e:	4b46      	ldr	r3, [pc, #280]	; (8001488 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 8001370:	729a      	strb	r2, [r3, #10]
                hk_buf[11] = (PC1 & 0xFF); // 3v3_mon LSB
 8001372:	19bb      	adds	r3, r7, r6
 8001374:	881b      	ldrh	r3, [r3, #0]
 8001376:	b2da      	uxtb	r2, r3
 8001378:	4b43      	ldr	r3, [pc, #268]	; (8001488 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 800137a:	72da      	strb	r2, [r3, #11]
                hk_buf[12] = ((PC2 & 0xFF00) >> 8); // 5v_mon MSB
 800137c:	2114      	movs	r1, #20
 800137e:	187b      	adds	r3, r7, r1
 8001380:	881b      	ldrh	r3, [r3, #0]
 8001382:	0a1b      	lsrs	r3, r3, #8
 8001384:	b29b      	uxth	r3, r3
 8001386:	b2da      	uxtb	r2, r3
 8001388:	4b3f      	ldr	r3, [pc, #252]	; (8001488 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 800138a:	731a      	strb	r2, [r3, #12]
                hk_buf[13] = (PC2 & 0xFF); // 5v_mon LSB
 800138c:	187b      	adds	r3, r7, r1
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	b2da      	uxtb	r2, r3
 8001392:	4b3d      	ldr	r3, [pc, #244]	; (8001488 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 8001394:	735a      	strb	r2, [r3, #13]
                hk_buf[14] = ((PA3 & 0xFF00) >> 8); // 5vref_mon MSB
 8001396:	193b      	adds	r3, r7, r4
 8001398:	881b      	ldrh	r3, [r3, #0]
 800139a:	0a1b      	lsrs	r3, r3, #8
 800139c:	b29b      	uxth	r3, r3
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	4b39      	ldr	r3, [pc, #228]	; (8001488 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 80013a2:	739a      	strb	r2, [r3, #14]
                hk_buf[15] = (PA3 & 0xFF); // 5vref_mon LSB
 80013a4:	193b      	adds	r3, r7, r4
 80013a6:	881b      	ldrh	r3, [r3, #0]
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	4b37      	ldr	r3, [pc, #220]	; (8001488 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 80013ac:	73da      	strb	r2, [r3, #15]
                hk_buf[16] = ((PC5 & 0xFF00) >> 8); // 15v_mon MSB
 80013ae:	200e      	movs	r0, #14
 80013b0:	183b      	adds	r3, r7, r0
 80013b2:	881b      	ldrh	r3, [r3, #0]
 80013b4:	0a1b      	lsrs	r3, r3, #8
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	4b33      	ldr	r3, [pc, #204]	; (8001488 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 80013bc:	741a      	strb	r2, [r3, #16]
                hk_buf[17] = (PC5 & 0xFF); // 15v_mon LSB
 80013be:	183b      	adds	r3, r7, r0
 80013c0:	881b      	ldrh	r3, [r3, #0]
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	4b30      	ldr	r3, [pc, #192]	; (8001488 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 80013c6:	745a      	strb	r2, [r3, #17]
                hk_buf[18] = ((PC3 & 0xFF00) >> 8); // n3v3_mon MSB
 80013c8:	2112      	movs	r1, #18
 80013ca:	187b      	adds	r3, r7, r1
 80013cc:	881b      	ldrh	r3, [r3, #0]
 80013ce:	0a1b      	lsrs	r3, r3, #8
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	4b2c      	ldr	r3, [pc, #176]	; (8001488 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 80013d6:	749a      	strb	r2, [r3, #18]
                hk_buf[19] = (PC3 & 0xFF); // n3v3_mon LSB
 80013d8:	187b      	adds	r3, r7, r1
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	4b2a      	ldr	r3, [pc, #168]	; (8001488 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 80013e0:	74da      	strb	r2, [r3, #19]
                hk_buf[20] = ((PC4 & 0xFF00) >> 8); // n5v_mon MSB
 80013e2:	2110      	movs	r1, #16
 80013e4:	187b      	adds	r3, r7, r1
 80013e6:	881b      	ldrh	r3, [r3, #0]
 80013e8:	0a1b      	lsrs	r3, r3, #8
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	4b26      	ldr	r3, [pc, #152]	; (8001488 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 80013f0:	751a      	strb	r2, [r3, #20]
                hk_buf[21] = (PC4 & 0xFF); // n5v_mon LSB
 80013f2:	187b      	adds	r3, r7, r1
 80013f4:	881b      	ldrh	r3, [r3, #0]
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	4b23      	ldr	r3, [pc, #140]	; (8001488 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 80013fa:	755a      	strb	r2, [r3, #21]
                hk_buf[22] = ((MCU_TEMP & 0xFF00) >> 8); // VSENSE MSB
 80013fc:	210c      	movs	r1, #12
 80013fe:	187b      	adds	r3, r7, r1
 8001400:	881b      	ldrh	r3, [r3, #0]
 8001402:	0a1b      	lsrs	r3, r3, #8
 8001404:	b29b      	uxth	r3, r3
 8001406:	b2da      	uxtb	r2, r3
 8001408:	4b1f      	ldr	r3, [pc, #124]	; (8001488 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 800140a:	759a      	strb	r2, [r3, #22]
                hk_buf[23] = (MCU_TEMP & 0xFF); // VSENSE LSB
 800140c:	187b      	adds	r3, r7, r1
 800140e:	881b      	ldrh	r3, [r3, #0]
 8001410:	b2da      	uxtb	r2, r3
 8001412:	4b1d      	ldr	r3, [pc, #116]	; (8001488 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 8001414:	75da      	strb	r2, [r3, #23]
                hk_buf[24] = ((MCU_VREF & 0xFF00) >> 8); // VREFINT MSB
 8001416:	210a      	movs	r1, #10
 8001418:	187b      	adds	r3, r7, r1
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	0a1b      	lsrs	r3, r3, #8
 800141e:	b29b      	uxth	r3, r3
 8001420:	b2da      	uxtb	r2, r3
 8001422:	4b19      	ldr	r3, [pc, #100]	; (8001488 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 8001424:	761a      	strb	r2, [r3, #24]
                hk_buf[25] = (MCU_VREF & 0xFF); // VREFINT LSB
 8001426:	187b      	adds	r3, r7, r1
 8001428:	881b      	ldrh	r3, [r3, #0]
 800142a:	b2da      	uxtb	r2, r3
 800142c:	4b16      	ldr	r3, [pc, #88]	; (8001488 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 800142e:	765a      	strb	r2, [r3, #25]

                //HAL_UART_Transmit(&huart1, hk_buf, sizeof(hk_buf), 100);

                hk_counter = 1;
 8001430:	4b14      	ldr	r3, [pc, #80]	; (8001484 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 8001432:	2201      	movs	r2, #1
 8001434:	601a      	str	r2, [r3, #0]

                hk_seq++;
 8001436:	4b15      	ldr	r3, [pc, #84]	; (800148c <HAL_TIM_OC_DelayElapsedCallback+0x3b4>)
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	3301      	adds	r3, #1
 800143c:	b29a      	uxth	r2, r3
 800143e:	4b13      	ldr	r3, [pc, #76]	; (800148c <HAL_TIM_OC_DelayElapsedCallback+0x3b4>)
 8001440:	801a      	strh	r2, [r3, #0]
        }
    }


    /* Timer 3 also called but doesn't need to do anything on IT */
}
 8001442:	e065      	b.n	8001510 <HAL_TIM_OC_DelayElapsedCallback+0x438>
                hk_counter++;
 8001444:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	1c5a      	adds	r2, r3, #1
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 800144c:	601a      	str	r2, [r3, #0]
}
 800144e:	e05f      	b.n	8001510 <HAL_TIM_OC_DelayElapsedCallback+0x438>
 8001450:	20000254 	.word	0x20000254
 8001454:	08008750 	.word	0x08008750
 8001458:	2000018c 	.word	0x2000018c
 800145c:	40013000 	.word	0x40013000
 8001460:	20000398 	.word	0x20000398
 8001464:	20000394 	.word	0x20000394
 8001468:	40007400 	.word	0x40007400
 800146c:	20000000 	.word	0x20000000
 8001470:	20000374 	.word	0x20000374
 8001474:	200000a8 	.word	0x200000a8
 8001478:	2000039c 	.word	0x2000039c
 800147c:	200003ac 	.word	0x200003ac
 8001480:	20000018 	.word	0x20000018
 8001484:	200003d4 	.word	0x200003d4
 8001488:	200003b8 	.word	0x200003b8
 800148c:	200003d2 	.word	0x200003d2
    } else if (htim == &htim2) {
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	4b21      	ldr	r3, [pc, #132]	; (8001518 <HAL_TIM_OC_DelayElapsedCallback+0x440>)
 8001494:	429a      	cmp	r2, r3
 8001496:	d13b      	bne.n	8001510 <HAL_TIM_OC_DelayElapsedCallback+0x438>
        if (!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11))) { //check pin state
 8001498:	2380      	movs	r3, #128	; 0x80
 800149a:	011b      	lsls	r3, r3, #4
 800149c:	4a1f      	ldr	r2, [pc, #124]	; (800151c <HAL_TIM_OC_DelayElapsedCallback+0x444>)
 800149e:	0019      	movs	r1, r3
 80014a0:	0010      	movs	r0, r2
 80014a2:	f002 fb09 	bl	8003ab8 <HAL_GPIO_ReadPin>
 80014a6:	1e03      	subs	r3, r0, #0
 80014a8:	d132      	bne.n	8001510 <HAL_TIM_OC_DelayElapsedCallback+0x438>
            HAL_SPI_Transmit(&hspi2, (uint8_t * ) & WRITE, 1, 1);
 80014aa:	491d      	ldr	r1, [pc, #116]	; (8001520 <HAL_TIM_OC_DelayElapsedCallback+0x448>)
 80014ac:	481d      	ldr	r0, [pc, #116]	; (8001524 <HAL_TIM_OC_DelayElapsedCallback+0x44c>)
 80014ae:	2301      	movs	r3, #1
 80014b0:	2201      	movs	r2, #1
 80014b2:	f003 fea7 	bl	8005204 <HAL_SPI_Transmit>
            while (!(SPI2->SR));
 80014b6:	46c0      	nop			; (mov r8, r8)
 80014b8:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <HAL_TIM_OC_DelayElapsedCallback+0x450>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d0fb      	beq.n	80014b8 <HAL_TIM_OC_DelayElapsedCallback+0x3e0>
            raw = SPI2->DR;
 80014c0:	4b19      	ldr	r3, [pc, #100]	; (8001528 <HAL_TIM_OC_DelayElapsedCallback+0x450>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	001a      	movs	r2, r3
 80014c6:	4b19      	ldr	r3, [pc, #100]	; (800152c <HAL_TIM_OC_DelayElapsedCallback+0x454>)
 80014c8:	601a      	str	r2, [r3, #0]
            pmt_buf[0] = pmt_sync;
 80014ca:	22bb      	movs	r2, #187	; 0xbb
 80014cc:	4b18      	ldr	r3, [pc, #96]	; (8001530 <HAL_TIM_OC_DelayElapsedCallback+0x458>)
 80014ce:	701a      	strb	r2, [r3, #0]
            pmt_buf[1] = pmt_sync;
 80014d0:	22bb      	movs	r2, #187	; 0xbb
 80014d2:	4b17      	ldr	r3, [pc, #92]	; (8001530 <HAL_TIM_OC_DelayElapsedCallback+0x458>)
 80014d4:	705a      	strb	r2, [r3, #1]
            pmt_buf[2] = ((pmt_seq & 0xFF00) >> 8);
 80014d6:	4b17      	ldr	r3, [pc, #92]	; (8001534 <HAL_TIM_OC_DelayElapsedCallback+0x45c>)
 80014d8:	881b      	ldrh	r3, [r3, #0]
 80014da:	0a1b      	lsrs	r3, r3, #8
 80014dc:	b29b      	uxth	r3, r3
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	4b13      	ldr	r3, [pc, #76]	; (8001530 <HAL_TIM_OC_DelayElapsedCallback+0x458>)
 80014e2:	709a      	strb	r2, [r3, #2]
            pmt_buf[3] = (pmt_seq & 0xFF);;
 80014e4:	4b13      	ldr	r3, [pc, #76]	; (8001534 <HAL_TIM_OC_DelayElapsedCallback+0x45c>)
 80014e6:	881b      	ldrh	r3, [r3, #0]
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	4b11      	ldr	r3, [pc, #68]	; (8001530 <HAL_TIM_OC_DelayElapsedCallback+0x458>)
 80014ec:	70da      	strb	r2, [r3, #3]
            pmt_buf[4] = ((raw & 0xFF00) >> 8);
 80014ee:	4b0f      	ldr	r3, [pc, #60]	; (800152c <HAL_TIM_OC_DelayElapsedCallback+0x454>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	121b      	asrs	r3, r3, #8
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <HAL_TIM_OC_DelayElapsedCallback+0x458>)
 80014f8:	711a      	strb	r2, [r3, #4]
            pmt_buf[5] = (raw & 0xFF);
 80014fa:	4b0c      	ldr	r3, [pc, #48]	; (800152c <HAL_TIM_OC_DelayElapsedCallback+0x454>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <HAL_TIM_OC_DelayElapsedCallback+0x458>)
 8001502:	715a      	strb	r2, [r3, #5]
            pmt_seq++;
 8001504:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <HAL_TIM_OC_DelayElapsedCallback+0x45c>)
 8001506:	881b      	ldrh	r3, [r3, #0]
 8001508:	3301      	adds	r3, #1
 800150a:	b29a      	uxth	r2, r3
 800150c:	4b09      	ldr	r3, [pc, #36]	; (8001534 <HAL_TIM_OC_DelayElapsedCallback+0x45c>)
 800150e:	801a      	strh	r2, [r3, #0]
}
 8001510:	46c0      	nop			; (mov r8, r8)
 8001512:	46bd      	mov	sp, r7
 8001514:	b00b      	add	sp, #44	; 0x2c
 8001516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001518:	2000029c 	.word	0x2000029c
 800151c:	48000400 	.word	0x48000400
 8001520:	08008750 	.word	0x08008750
 8001524:	200001f0 	.word	0x200001f0
 8001528:	40003800 	.word	0x40003800
 800152c:	20000398 	.word	0x20000398
 8001530:	200003b0 	.word	0x200003b0
 8001534:	200003b6 	.word	0x200003b6

08001538 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
	char sleepChar = Rx_data;
 8001540:	4a0c      	ldr	r2, [pc, #48]	; (8001574 <HAL_UART_RxCpltCallback+0x3c>)
 8001542:	230f      	movs	r3, #15
 8001544:	18fb      	adds	r3, r7, r3
 8001546:	701a      	strb	r2, [r3, #0]
	if (Rx_data[0] == 's') { // should be "¶" in the future
 8001548:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <HAL_UART_RxCpltCallback+0x3c>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b73      	cmp	r3, #115	; 0x73
 800154e:	d107      	bne.n	8001560 <HAL_UART_RxCpltCallback+0x28>
		HAL_SuspendTick();
 8001550:	f001 f9b6 	bl	80028c0 <HAL_SuspendTick>
		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8001554:	2101      	movs	r1, #1
 8001556:	2001      	movs	r0, #1
 8001558:	f003 f81e 	bl	8004598 <HAL_PWR_EnterSTOPMode>
		NVIC_SystemReset();
 800155c:	f7ff fdaa 	bl	80010b4 <__NVIC_SystemReset>
	}
	HAL_UART_Receive_IT(&huart1, Rx_data, 1);
 8001560:	4904      	ldr	r1, [pc, #16]	; (8001574 <HAL_UART_RxCpltCallback+0x3c>)
 8001562:	4b05      	ldr	r3, [pc, #20]	; (8001578 <HAL_UART_RxCpltCallback+0x40>)
 8001564:	2201      	movs	r2, #1
 8001566:	0018      	movs	r0, r3
 8001568:	f005 fa27 	bl	80069ba <HAL_UART_Receive_IT>
}
 800156c:	46c0      	nop			; (mov r8, r8)
 800156e:	46bd      	mov	sp, r7
 8001570:	b004      	add	sp, #16
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20000370 	.word	0x20000370
 8001578:	200002e4 	.word	0x200002e4

0800157c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800157c:	b5b0      	push	{r4, r5, r7, lr}
 800157e:	b088      	sub	sp, #32
 8001580:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001582:	f001 f939 	bl	80027f8 <HAL_Init>
  float temp_c;

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001586:	f000 f90b 	bl	80017a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800158a:	f000 fcf5 	bl	8001f78 <MX_GPIO_Init>
  MX_DMA_Init();
 800158e:	f000 fcd5 	bl	8001f3c <MX_DMA_Init>
  MX_SPI2_Init();
 8001592:	f000 fb19 	bl	8001bc8 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001596:	f000 fb57 	bl	8001c48 <MX_TIM1_Init>
  MX_TIM2_Init();
 800159a:	f000 fc0d 	bl	8001db8 <MX_TIM2_Init>
  MX_SPI1_Init();
 800159e:	f000 fad3 	bl	8001b48 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80015a2:	f000 fc8b 	bl	8001ebc <MX_USART1_UART_Init>
  MX_DAC1_Init();
 80015a6:	f000 fa5d 	bl	8001a64 <MX_DAC1_Init>
  MX_ADC_Init();
 80015aa:	f000 f963 	bl	8001874 <MX_ADC_Init>
  MX_I2C1_Init();
 80015ae:	f000 fa8b 	bl	8001ac8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

    HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80015b2:	4b6e      	ldr	r3, [pc, #440]	; (800176c <main+0x1f0>)
 80015b4:	2100      	movs	r1, #0
 80015b6:	0018      	movs	r0, r3
 80015b8:	f001 febf 	bl	800333a <HAL_DAC_Start>


    /* Start Timers with OC & Interrupt */
    HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 80015bc:	4b6c      	ldr	r3, [pc, #432]	; (8001770 <main+0x1f4>)
 80015be:	2100      	movs	r1, #0
 80015c0:	0018      	movs	r0, r3
 80015c2:	f004 f995 	bl	80058f0 <HAL_TIM_OC_Start_IT>
    HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 80015c6:	4b6b      	ldr	r3, [pc, #428]	; (8001774 <main+0x1f8>)
 80015c8:	210c      	movs	r1, #12
 80015ca:	0018      	movs	r0, r3
 80015cc:	f004 f990 	bl	80058f0 <HAL_TIM_OC_Start_IT>


    while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 80015d0:	46c0      	nop			; (mov r8, r8)
 80015d2:	4b69      	ldr	r3, [pc, #420]	; (8001778 <main+0x1fc>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	69da      	ldr	r2, [r3, #28]
 80015d8:	2380      	movs	r3, #128	; 0x80
 80015da:	025b      	lsls	r3, r3, #9
 80015dc:	401a      	ands	r2, r3
 80015de:	2380      	movs	r3, #128	; 0x80
 80015e0:	025b      	lsls	r3, r3, #9
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d0f5      	beq.n	80015d2 <main+0x56>
    while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 80015e6:	46c0      	nop			; (mov r8, r8)
 80015e8:	4b63      	ldr	r3, [pc, #396]	; (8001778 <main+0x1fc>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	69da      	ldr	r2, [r3, #28]
 80015ee:	2380      	movs	r3, #128	; 0x80
 80015f0:	03db      	lsls	r3, r3, #15
 80015f2:	401a      	ands	r2, r3
 80015f4:	2380      	movs	r3, #128	; 0x80
 80015f6:	03db      	lsls	r3, r3, #15
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d1f5      	bne.n	80015e8 <main+0x6c>

    WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_ADDRESS;
 80015fc:	4b5f      	ldr	r3, [pc, #380]	; (800177c <main+0x200>)
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
    WakeUpSelection.AddressLength = UART_ADDRESS_DETECT_7B;
 8001602:	4b5e      	ldr	r3, [pc, #376]	; (800177c <main+0x200>)
 8001604:	2210      	movs	r2, #16
 8001606:	809a      	strh	r2, [r3, #4]
    WakeUpSelection.Address = 0x23; // send "£"
 8001608:	4b5c      	ldr	r3, [pc, #368]	; (800177c <main+0x200>)
 800160a:	2223      	movs	r2, #35	; 0x23
 800160c:	719a      	strb	r2, [r3, #6]

    if (HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection) != HAL_OK) {
 800160e:	4b5b      	ldr	r3, [pc, #364]	; (800177c <main+0x200>)
 8001610:	4859      	ldr	r0, [pc, #356]	; (8001778 <main+0x1fc>)
 8001612:	6819      	ldr	r1, [r3, #0]
 8001614:	685a      	ldr	r2, [r3, #4]
 8001616:	f006 fad5 	bl	8007bc4 <HAL_UARTEx_StopModeWakeUpSourceConfig>
 800161a:	1e03      	subs	r3, r0, #0
 800161c:	d001      	beq.n	8001622 <main+0xa6>
        Error_Handler();
 800161e:	f000 fd2b 	bl	8002078 <Error_Handler>
    }
    /* Enable the LPUART Wake UP from stop mode Interrupt */
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8001622:	4b55      	ldr	r3, [pc, #340]	; (8001778 <main+0x1fc>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	689a      	ldr	r2, [r3, #8]
 8001628:	4b53      	ldr	r3, [pc, #332]	; (8001778 <main+0x1fc>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2180      	movs	r1, #128	; 0x80
 800162e:	03c9      	lsls	r1, r1, #15
 8001630:	430a      	orrs	r2, r1
 8001632:	609a      	str	r2, [r3, #8]
    /* enable MCU wake-up by LPUART */
    HAL_UARTEx_EnableStopMode(&huart1);
 8001634:	4b50      	ldr	r3, [pc, #320]	; (8001778 <main+0x1fc>)
 8001636:	0018      	movs	r0, r3
 8001638:	f006 fb2a 	bl	8007c90 <HAL_UARTEx_EnableStopMode>
    HAL_UART_Receive_IT(&huart1, Rx_data, 1);
 800163c:	4950      	ldr	r1, [pc, #320]	; (8001780 <main+0x204>)
 800163e:	4b4e      	ldr	r3, [pc, #312]	; (8001778 <main+0x1fc>)
 8001640:	2201      	movs	r2, #1
 8001642:	0018      	movs	r0, r3
 8001644:	f005 f9b9 	bl	80069ba <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1) {

    	// Tell TMP102 that we want to read from the temperature register
		buf[0] = REG_TEMP;
 8001648:	2200      	movs	r2, #0
 800164a:	1d3b      	adds	r3, r7, #4
 800164c:	701a      	strb	r2, [r3, #0]
		ret = HAL_I2C_Master_Transmit(&hi2c1, TMP102_ADDR, buf, 1, HAL_MAX_DELAY);
 800164e:	2390      	movs	r3, #144	; 0x90
 8001650:	b299      	uxth	r1, r3
 8001652:	2515      	movs	r5, #21
 8001654:	197c      	adds	r4, r7, r5
 8001656:	1d3a      	adds	r2, r7, #4
 8001658:	484a      	ldr	r0, [pc, #296]	; (8001784 <main+0x208>)
 800165a:	2301      	movs	r3, #1
 800165c:	425b      	negs	r3, r3
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	2301      	movs	r3, #1
 8001662:	f002 faf9 	bl	8003c58 <HAL_I2C_Master_Transmit>
 8001666:	0003      	movs	r3, r0
 8001668:	7023      	strb	r3, [r4, #0]
		if ( ret != HAL_OK ) {
 800166a:	197b      	adds	r3, r7, r5
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d008      	beq.n	8001684 <main+0x108>
		  strcpy((char*)buf, "Error Tx\r\n");
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	4a44      	ldr	r2, [pc, #272]	; (8001788 <main+0x20c>)
 8001676:	ca03      	ldmia	r2!, {r0, r1}
 8001678:	c303      	stmia	r3!, {r0, r1}
 800167a:	8811      	ldrh	r1, [r2, #0]
 800167c:	8019      	strh	r1, [r3, #0]
 800167e:	7892      	ldrb	r2, [r2, #2]
 8001680:	709a      	strb	r2, [r3, #2]
 8001682:	e066      	b.n	8001752 <main+0x1d6>
		} else {

		  // Read 2 bytes from the temperature register
		  ret = HAL_I2C_Master_Receive(&hi2c1, TMP102_ADDR, buf, 2, HAL_MAX_DELAY);
 8001684:	2390      	movs	r3, #144	; 0x90
 8001686:	b299      	uxth	r1, r3
 8001688:	2515      	movs	r5, #21
 800168a:	197c      	adds	r4, r7, r5
 800168c:	1d3a      	adds	r2, r7, #4
 800168e:	483d      	ldr	r0, [pc, #244]	; (8001784 <main+0x208>)
 8001690:	2301      	movs	r3, #1
 8001692:	425b      	negs	r3, r3
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	2302      	movs	r3, #2
 8001698:	f002 fbe6 	bl	8003e68 <HAL_I2C_Master_Receive>
 800169c:	0003      	movs	r3, r0
 800169e:	7023      	strb	r3, [r4, #0]
		  if ( ret != HAL_OK ) {
 80016a0:	197b      	adds	r3, r7, r5
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d008      	beq.n	80016ba <main+0x13e>
			strcpy((char*)buf, "Error Rx\r\n");
 80016a8:	1d3b      	adds	r3, r7, #4
 80016aa:	4a38      	ldr	r2, [pc, #224]	; (800178c <main+0x210>)
 80016ac:	ca03      	ldmia	r2!, {r0, r1}
 80016ae:	c303      	stmia	r3!, {r0, r1}
 80016b0:	8811      	ldrh	r1, [r2, #0]
 80016b2:	8019      	strh	r1, [r3, #0]
 80016b4:	7892      	ldrb	r2, [r2, #2]
 80016b6:	709a      	strb	r2, [r3, #2]
 80016b8:	e04b      	b.n	8001752 <main+0x1d6>
		  } else {

			//Combine the bytes
			val = ((int16_t)buf[0] << 4) | (buf[1] >> 4);
 80016ba:	1d3b      	adds	r3, r7, #4
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	011b      	lsls	r3, r3, #4
 80016c0:	b219      	sxth	r1, r3
 80016c2:	1d3b      	adds	r3, r7, #4
 80016c4:	785b      	ldrb	r3, [r3, #1]
 80016c6:	091b      	lsrs	r3, r3, #4
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	b21a      	sxth	r2, r3
 80016cc:	2016      	movs	r0, #22
 80016ce:	183b      	adds	r3, r7, r0
 80016d0:	430a      	orrs	r2, r1
 80016d2:	801a      	strh	r2, [r3, #0]

			// Convert to 2's complement, since temperature can be negative
			if ( val > 0x7FF ) {
 80016d4:	0001      	movs	r1, r0
 80016d6:	187b      	adds	r3, r7, r1
 80016d8:	2200      	movs	r2, #0
 80016da:	5e9a      	ldrsh	r2, [r3, r2]
 80016dc:	2380      	movs	r3, #128	; 0x80
 80016de:	011b      	lsls	r3, r3, #4
 80016e0:	429a      	cmp	r2, r3
 80016e2:	db05      	blt.n	80016f0 <main+0x174>
			  val |= 0xF000;
 80016e4:	187b      	adds	r3, r7, r1
 80016e6:	187a      	adds	r2, r7, r1
 80016e8:	8812      	ldrh	r2, [r2, #0]
 80016ea:	4929      	ldr	r1, [pc, #164]	; (8001790 <main+0x214>)
 80016ec:	430a      	orrs	r2, r1
 80016ee:	801a      	strh	r2, [r3, #0]
			}

			// Convert to float temperature value (Celsius)
			temp_c = val * 0.0625;
 80016f0:	2316      	movs	r3, #22
 80016f2:	18fb      	adds	r3, r7, r3
 80016f4:	2200      	movs	r2, #0
 80016f6:	5e9b      	ldrsh	r3, [r3, r2]
 80016f8:	0018      	movs	r0, r3
 80016fa:	f7ff fb1b 	bl	8000d34 <__aeabi_i2d>
 80016fe:	2200      	movs	r2, #0
 8001700:	4b24      	ldr	r3, [pc, #144]	; (8001794 <main+0x218>)
 8001702:	f7ff f8ab 	bl	800085c <__aeabi_dmul>
 8001706:	0002      	movs	r2, r0
 8001708:	000b      	movs	r3, r1
 800170a:	0010      	movs	r0, r2
 800170c:	0019      	movs	r1, r3
 800170e:	f7ff fb41 	bl	8000d94 <__aeabi_d2f>
 8001712:	1c03      	adds	r3, r0, #0
 8001714:	613b      	str	r3, [r7, #16]

			// Convert temperature to decimal value
			temp_c *= 100;
 8001716:	4920      	ldr	r1, [pc, #128]	; (8001798 <main+0x21c>)
 8001718:	6938      	ldr	r0, [r7, #16]
 800171a:	f7fe fdab 	bl	8000274 <__aeabi_fmul>
 800171e:	1c03      	adds	r3, r0, #0
 8001720:	613b      	str	r3, [r7, #16]

			sprintf((char*)buf,
						  "%u.%u C\r\n",
						  ((unsigned int)temp_c / 100),
 8001722:	6938      	ldr	r0, [r7, #16]
 8001724:	f7fe fd8e 	bl	8000244 <__aeabi_f2uiz>
 8001728:	0003      	movs	r3, r0
			sprintf((char*)buf,
 800172a:	2164      	movs	r1, #100	; 0x64
 800172c:	0018      	movs	r0, r3
 800172e:	f7fe fcfd 	bl	800012c <__udivsi3>
 8001732:	0003      	movs	r3, r0
 8001734:	001c      	movs	r4, r3
						  ((unsigned int)temp_c % 100));
 8001736:	6938      	ldr	r0, [r7, #16]
 8001738:	f7fe fd84 	bl	8000244 <__aeabi_f2uiz>
 800173c:	0003      	movs	r3, r0
			sprintf((char*)buf,
 800173e:	2164      	movs	r1, #100	; 0x64
 8001740:	0018      	movs	r0, r3
 8001742:	f7fe fd79 	bl	8000238 <__aeabi_uidivmod>
 8001746:	000b      	movs	r3, r1
 8001748:	4914      	ldr	r1, [pc, #80]	; (800179c <main+0x220>)
 800174a:	1d38      	adds	r0, r7, #4
 800174c:	0022      	movs	r2, r4
 800174e:	f006 fb27 	bl	8007da0 <siprintf>
		  }
	   }

	HAL_UART_Transmit(&huart1, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8001752:	1d3b      	adds	r3, r7, #4
 8001754:	0018      	movs	r0, r3
 8001756:	f7fe fcd7 	bl	8000108 <strlen>
 800175a:	0003      	movs	r3, r0
 800175c:	b29a      	uxth	r2, r3
 800175e:	2301      	movs	r3, #1
 8001760:	425b      	negs	r3, r3
 8001762:	1d39      	adds	r1, r7, #4
 8001764:	4804      	ldr	r0, [pc, #16]	; (8001778 <main+0x1fc>)
 8001766:	f005 f87f 	bl	8006868 <HAL_UART_Transmit>
    while (1) {
 800176a:	e76d      	b.n	8001648 <main+0xcc>
 800176c:	2000012c 	.word	0x2000012c
 8001770:	20000254 	.word	0x20000254
 8001774:	2000029c 	.word	0x2000029c
 8001778:	200002e4 	.word	0x200002e4
 800177c:	20000368 	.word	0x20000368
 8001780:	20000370 	.word	0x20000370
 8001784:	20000140 	.word	0x20000140
 8001788:	0800868c 	.word	0x0800868c
 800178c:	08008698 	.word	0x08008698
 8001790:	fffff000 	.word	0xfffff000
 8001794:	3fb00000 	.word	0x3fb00000
 8001798:	42c80000 	.word	0x42c80000
 800179c:	080086a4 	.word	0x080086a4

080017a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017a0:	b590      	push	{r4, r7, lr}
 80017a2:	b097      	sub	sp, #92	; 0x5c
 80017a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017a6:	2428      	movs	r4, #40	; 0x28
 80017a8:	193b      	adds	r3, r7, r4
 80017aa:	0018      	movs	r0, r3
 80017ac:	2330      	movs	r3, #48	; 0x30
 80017ae:	001a      	movs	r2, r3
 80017b0:	2100      	movs	r1, #0
 80017b2:	f006 faed 	bl	8007d90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017b6:	2318      	movs	r3, #24
 80017b8:	18fb      	adds	r3, r7, r3
 80017ba:	0018      	movs	r0, r3
 80017bc:	2310      	movs	r3, #16
 80017be:	001a      	movs	r2, r3
 80017c0:	2100      	movs	r1, #0
 80017c2:	f006 fae5 	bl	8007d90 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017c6:	1d3b      	adds	r3, r7, #4
 80017c8:	0018      	movs	r0, r3
 80017ca:	2314      	movs	r3, #20
 80017cc:	001a      	movs	r2, r3
 80017ce:	2100      	movs	r1, #0
 80017d0:	f006 fade 	bl	8007d90 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80017d4:	0021      	movs	r1, r4
 80017d6:	187b      	adds	r3, r7, r1
 80017d8:	2212      	movs	r2, #18
 80017da:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017dc:	187b      	adds	r3, r7, r1
 80017de:	2201      	movs	r2, #1
 80017e0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80017e2:	187b      	adds	r3, r7, r1
 80017e4:	2201      	movs	r2, #1
 80017e6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017e8:	187b      	adds	r3, r7, r1
 80017ea:	2210      	movs	r2, #16
 80017ec:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80017ee:	187b      	adds	r3, r7, r1
 80017f0:	2210      	movs	r2, #16
 80017f2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017f4:	187b      	adds	r3, r7, r1
 80017f6:	2202      	movs	r2, #2
 80017f8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017fa:	187b      	adds	r3, r7, r1
 80017fc:	2200      	movs	r2, #0
 80017fe:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001800:	187b      	adds	r3, r7, r1
 8001802:	22a0      	movs	r2, #160	; 0xa0
 8001804:	0392      	lsls	r2, r2, #14
 8001806:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001808:	187b      	adds	r3, r7, r1
 800180a:	2200      	movs	r2, #0
 800180c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800180e:	187b      	adds	r3, r7, r1
 8001810:	0018      	movs	r0, r3
 8001812:	f002 fef5 	bl	8004600 <HAL_RCC_OscConfig>
 8001816:	1e03      	subs	r3, r0, #0
 8001818:	d001      	beq.n	800181e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800181a:	f000 fc2d 	bl	8002078 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800181e:	2118      	movs	r1, #24
 8001820:	187b      	adds	r3, r7, r1
 8001822:	2207      	movs	r2, #7
 8001824:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001826:	187b      	adds	r3, r7, r1
 8001828:	2202      	movs	r2, #2
 800182a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800182c:	187b      	adds	r3, r7, r1
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001832:	187b      	adds	r3, r7, r1
 8001834:	2200      	movs	r2, #0
 8001836:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001838:	187b      	adds	r3, r7, r1
 800183a:	2101      	movs	r1, #1
 800183c:	0018      	movs	r0, r3
 800183e:	f003 f9f9 	bl	8004c34 <HAL_RCC_ClockConfig>
 8001842:	1e03      	subs	r3, r0, #0
 8001844:	d001      	beq.n	800184a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001846:	f000 fc17 	bl	8002078 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 800184a:	1d3b      	adds	r3, r7, #4
 800184c:	2221      	movs	r2, #33	; 0x21
 800184e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	2203      	movs	r2, #3
 8001854:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001856:	1d3b      	adds	r3, r7, #4
 8001858:	2200      	movs	r2, #0
 800185a:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800185c:	1d3b      	adds	r3, r7, #4
 800185e:	0018      	movs	r0, r3
 8001860:	f003 fb3a 	bl	8004ed8 <HAL_RCCEx_PeriphCLKConfig>
 8001864:	1e03      	subs	r3, r0, #0
 8001866:	d001      	beq.n	800186c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001868:	f000 fc06 	bl	8002078 <Error_Handler>
  }
}
 800186c:	46c0      	nop			; (mov r8, r8)
 800186e:	46bd      	mov	sp, r7
 8001870:	b017      	add	sp, #92	; 0x5c
 8001872:	bd90      	pop	{r4, r7, pc}

08001874 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800187a:	1d3b      	adds	r3, r7, #4
 800187c:	0018      	movs	r0, r3
 800187e:	230c      	movs	r3, #12
 8001880:	001a      	movs	r2, r3
 8001882:	2100      	movs	r1, #0
 8001884:	f006 fa84 	bl	8007d90 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001888:	4b74      	ldr	r3, [pc, #464]	; (8001a5c <MX_ADC_Init+0x1e8>)
 800188a:	4a75      	ldr	r2, [pc, #468]	; (8001a60 <MX_ADC_Init+0x1ec>)
 800188c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800188e:	4b73      	ldr	r3, [pc, #460]	; (8001a5c <MX_ADC_Init+0x1e8>)
 8001890:	2200      	movs	r2, #0
 8001892:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001894:	4b71      	ldr	r3, [pc, #452]	; (8001a5c <MX_ADC_Init+0x1e8>)
 8001896:	2200      	movs	r2, #0
 8001898:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800189a:	4b70      	ldr	r3, [pc, #448]	; (8001a5c <MX_ADC_Init+0x1e8>)
 800189c:	2200      	movs	r2, #0
 800189e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80018a0:	4b6e      	ldr	r3, [pc, #440]	; (8001a5c <MX_ADC_Init+0x1e8>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018a6:	4b6d      	ldr	r3, [pc, #436]	; (8001a5c <MX_ADC_Init+0x1e8>)
 80018a8:	2204      	movs	r2, #4
 80018aa:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80018ac:	4b6b      	ldr	r3, [pc, #428]	; (8001a5c <MX_ADC_Init+0x1e8>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80018b2:	4b6a      	ldr	r3, [pc, #424]	; (8001a5c <MX_ADC_Init+0x1e8>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80018b8:	4b68      	ldr	r3, [pc, #416]	; (8001a5c <MX_ADC_Init+0x1e8>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80018be:	4b67      	ldr	r3, [pc, #412]	; (8001a5c <MX_ADC_Init+0x1e8>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018c4:	4b65      	ldr	r3, [pc, #404]	; (8001a5c <MX_ADC_Init+0x1e8>)
 80018c6:	22c2      	movs	r2, #194	; 0xc2
 80018c8:	32ff      	adds	r2, #255	; 0xff
 80018ca:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018cc:	4b63      	ldr	r3, [pc, #396]	; (8001a5c <MX_ADC_Init+0x1e8>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80018d2:	4b62      	ldr	r3, [pc, #392]	; (8001a5c <MX_ADC_Init+0x1e8>)
 80018d4:	2224      	movs	r2, #36	; 0x24
 80018d6:	2100      	movs	r1, #0
 80018d8:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80018da:	4b60      	ldr	r3, [pc, #384]	; (8001a5c <MX_ADC_Init+0x1e8>)
 80018dc:	2201      	movs	r2, #1
 80018de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80018e0:	4b5e      	ldr	r3, [pc, #376]	; (8001a5c <MX_ADC_Init+0x1e8>)
 80018e2:	0018      	movs	r0, r3
 80018e4:	f000 fffa 	bl	80028dc <HAL_ADC_Init>
 80018e8:	1e03      	subs	r3, r0, #0
 80018ea:	d001      	beq.n	80018f0 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80018ec:	f000 fbc4 	bl	8002078 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80018f0:	1d3b      	adds	r3, r7, #4
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80018f6:	1d3b      	adds	r3, r7, #4
 80018f8:	2280      	movs	r2, #128	; 0x80
 80018fa:	0152      	lsls	r2, r2, #5
 80018fc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80018fe:	1d3b      	adds	r3, r7, #4
 8001900:	2280      	movs	r2, #128	; 0x80
 8001902:	0552      	lsls	r2, r2, #21
 8001904:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001906:	1d3a      	adds	r2, r7, #4
 8001908:	4b54      	ldr	r3, [pc, #336]	; (8001a5c <MX_ADC_Init+0x1e8>)
 800190a:	0011      	movs	r1, r2
 800190c:	0018      	movs	r0, r3
 800190e:	f001 f9bf 	bl	8002c90 <HAL_ADC_ConfigChannel>
 8001912:	1e03      	subs	r3, r0, #0
 8001914:	d001      	beq.n	800191a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8001916:	f000 fbaf 	bl	8002078 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	2201      	movs	r2, #1
 800191e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001920:	1d3a      	adds	r2, r7, #4
 8001922:	4b4e      	ldr	r3, [pc, #312]	; (8001a5c <MX_ADC_Init+0x1e8>)
 8001924:	0011      	movs	r1, r2
 8001926:	0018      	movs	r0, r3
 8001928:	f001 f9b2 	bl	8002c90 <HAL_ADC_ConfigChannel>
 800192c:	1e03      	subs	r3, r0, #0
 800192e:	d001      	beq.n	8001934 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8001930:	f000 fba2 	bl	8002078 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001934:	1d3b      	adds	r3, r7, #4
 8001936:	2202      	movs	r2, #2
 8001938:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800193a:	1d3a      	adds	r2, r7, #4
 800193c:	4b47      	ldr	r3, [pc, #284]	; (8001a5c <MX_ADC_Init+0x1e8>)
 800193e:	0011      	movs	r1, r2
 8001940:	0018      	movs	r0, r3
 8001942:	f001 f9a5 	bl	8002c90 <HAL_ADC_ConfigChannel>
 8001946:	1e03      	subs	r3, r0, #0
 8001948:	d001      	beq.n	800194e <MX_ADC_Init+0xda>
  {
    Error_Handler();
 800194a:	f000 fb95 	bl	8002078 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800194e:	1d3b      	adds	r3, r7, #4
 8001950:	2203      	movs	r2, #3
 8001952:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001954:	1d3a      	adds	r2, r7, #4
 8001956:	4b41      	ldr	r3, [pc, #260]	; (8001a5c <MX_ADC_Init+0x1e8>)
 8001958:	0011      	movs	r1, r2
 800195a:	0018      	movs	r0, r3
 800195c:	f001 f998 	bl	8002c90 <HAL_ADC_ConfigChannel>
 8001960:	1e03      	subs	r3, r0, #0
 8001962:	d001      	beq.n	8001968 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 8001964:	f000 fb88 	bl	8002078 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001968:	1d3b      	adds	r3, r7, #4
 800196a:	2207      	movs	r2, #7
 800196c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800196e:	1d3a      	adds	r2, r7, #4
 8001970:	4b3a      	ldr	r3, [pc, #232]	; (8001a5c <MX_ADC_Init+0x1e8>)
 8001972:	0011      	movs	r1, r2
 8001974:	0018      	movs	r0, r3
 8001976:	f001 f98b 	bl	8002c90 <HAL_ADC_ConfigChannel>
 800197a:	1e03      	subs	r3, r0, #0
 800197c:	d001      	beq.n	8001982 <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 800197e:	f000 fb7b 	bl	8002078 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001982:	1d3b      	adds	r3, r7, #4
 8001984:	2208      	movs	r2, #8
 8001986:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001988:	1d3a      	adds	r2, r7, #4
 800198a:	4b34      	ldr	r3, [pc, #208]	; (8001a5c <MX_ADC_Init+0x1e8>)
 800198c:	0011      	movs	r1, r2
 800198e:	0018      	movs	r0, r3
 8001990:	f001 f97e 	bl	8002c90 <HAL_ADC_ConfigChannel>
 8001994:	1e03      	subs	r3, r0, #0
 8001996:	d001      	beq.n	800199c <MX_ADC_Init+0x128>
  {
    Error_Handler();
 8001998:	f000 fb6e 	bl	8002078 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800199c:	1d3b      	adds	r3, r7, #4
 800199e:	2209      	movs	r2, #9
 80019a0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80019a2:	1d3a      	adds	r2, r7, #4
 80019a4:	4b2d      	ldr	r3, [pc, #180]	; (8001a5c <MX_ADC_Init+0x1e8>)
 80019a6:	0011      	movs	r1, r2
 80019a8:	0018      	movs	r0, r3
 80019aa:	f001 f971 	bl	8002c90 <HAL_ADC_ConfigChannel>
 80019ae:	1e03      	subs	r3, r0, #0
 80019b0:	d001      	beq.n	80019b6 <MX_ADC_Init+0x142>
  {
    Error_Handler();
 80019b2:	f000 fb61 	bl	8002078 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80019b6:	1d3b      	adds	r3, r7, #4
 80019b8:	220a      	movs	r2, #10
 80019ba:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80019bc:	1d3a      	adds	r2, r7, #4
 80019be:	4b27      	ldr	r3, [pc, #156]	; (8001a5c <MX_ADC_Init+0x1e8>)
 80019c0:	0011      	movs	r1, r2
 80019c2:	0018      	movs	r0, r3
 80019c4:	f001 f964 	bl	8002c90 <HAL_ADC_ConfigChannel>
 80019c8:	1e03      	subs	r3, r0, #0
 80019ca:	d001      	beq.n	80019d0 <MX_ADC_Init+0x15c>
  {
    Error_Handler();
 80019cc:	f000 fb54 	bl	8002078 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80019d0:	1d3b      	adds	r3, r7, #4
 80019d2:	220b      	movs	r2, #11
 80019d4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80019d6:	1d3a      	adds	r2, r7, #4
 80019d8:	4b20      	ldr	r3, [pc, #128]	; (8001a5c <MX_ADC_Init+0x1e8>)
 80019da:	0011      	movs	r1, r2
 80019dc:	0018      	movs	r0, r3
 80019de:	f001 f957 	bl	8002c90 <HAL_ADC_ConfigChannel>
 80019e2:	1e03      	subs	r3, r0, #0
 80019e4:	d001      	beq.n	80019ea <MX_ADC_Init+0x176>
  {
    Error_Handler();
 80019e6:	f000 fb47 	bl	8002078 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80019ea:	1d3b      	adds	r3, r7, #4
 80019ec:	220c      	movs	r2, #12
 80019ee:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80019f0:	1d3a      	adds	r2, r7, #4
 80019f2:	4b1a      	ldr	r3, [pc, #104]	; (8001a5c <MX_ADC_Init+0x1e8>)
 80019f4:	0011      	movs	r1, r2
 80019f6:	0018      	movs	r0, r3
 80019f8:	f001 f94a 	bl	8002c90 <HAL_ADC_ConfigChannel>
 80019fc:	1e03      	subs	r3, r0, #0
 80019fe:	d001      	beq.n	8001a04 <MX_ADC_Init+0x190>
  {
    Error_Handler();
 8001a00:	f000 fb3a 	bl	8002078 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001a04:	1d3b      	adds	r3, r7, #4
 8001a06:	220d      	movs	r2, #13
 8001a08:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001a0a:	1d3a      	adds	r2, r7, #4
 8001a0c:	4b13      	ldr	r3, [pc, #76]	; (8001a5c <MX_ADC_Init+0x1e8>)
 8001a0e:	0011      	movs	r1, r2
 8001a10:	0018      	movs	r0, r3
 8001a12:	f001 f93d 	bl	8002c90 <HAL_ADC_ConfigChannel>
 8001a16:	1e03      	subs	r3, r0, #0
 8001a18:	d001      	beq.n	8001a1e <MX_ADC_Init+0x1aa>
  {
    Error_Handler();
 8001a1a:	f000 fb2d 	bl	8002078 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001a1e:	1d3b      	adds	r3, r7, #4
 8001a20:	220e      	movs	r2, #14
 8001a22:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001a24:	1d3a      	adds	r2, r7, #4
 8001a26:	4b0d      	ldr	r3, [pc, #52]	; (8001a5c <MX_ADC_Init+0x1e8>)
 8001a28:	0011      	movs	r1, r2
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	f001 f930 	bl	8002c90 <HAL_ADC_ConfigChannel>
 8001a30:	1e03      	subs	r3, r0, #0
 8001a32:	d001      	beq.n	8001a38 <MX_ADC_Init+0x1c4>
  {
    Error_Handler();
 8001a34:	f000 fb20 	bl	8002078 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001a38:	1d3b      	adds	r3, r7, #4
 8001a3a:	220f      	movs	r2, #15
 8001a3c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001a3e:	1d3a      	adds	r2, r7, #4
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <MX_ADC_Init+0x1e8>)
 8001a42:	0011      	movs	r1, r2
 8001a44:	0018      	movs	r0, r3
 8001a46:	f001 f923 	bl	8002c90 <HAL_ADC_ConfigChannel>
 8001a4a:	1e03      	subs	r3, r0, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_ADC_Init+0x1de>
  {
    Error_Handler();
 8001a4e:	f000 fb13 	bl	8002078 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001a52:	46c0      	nop			; (mov r8, r8)
 8001a54:	46bd      	mov	sp, r7
 8001a56:	b004      	add	sp, #16
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	46c0      	nop			; (mov r8, r8)
 8001a5c:	200000a8 	.word	0x200000a8
 8001a60:	40012400 	.word	0x40012400

08001a64 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */
    step = 0;
 8001a6a:	4b14      	ldr	r3, [pc, #80]	; (8001abc <MX_DAC1_Init+0x58>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001a70:	003b      	movs	r3, r7
 8001a72:	0018      	movs	r0, r3
 8001a74:	2308      	movs	r3, #8
 8001a76:	001a      	movs	r2, r3
 8001a78:	2100      	movs	r1, #0
 8001a7a:	f006 f989 	bl	8007d90 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC;
 8001a7e:	4b10      	ldr	r3, [pc, #64]	; (8001ac0 <MX_DAC1_Init+0x5c>)
 8001a80:	4a10      	ldr	r2, [pc, #64]	; (8001ac4 <MX_DAC1_Init+0x60>)
 8001a82:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001a84:	4b0e      	ldr	r3, [pc, #56]	; (8001ac0 <MX_DAC1_Init+0x5c>)
 8001a86:	0018      	movs	r0, r3
 8001a88:	f001 fbf6 	bl	8003278 <HAL_DAC_Init>
 8001a8c:	1e03      	subs	r3, r0, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_DAC1_Init+0x30>
  {
    Error_Handler();
 8001a90:	f000 faf2 	bl	8002078 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001a94:	003b      	movs	r3, r7
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001a9a:	003b      	movs	r3, r7
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001aa0:	0039      	movs	r1, r7
 8001aa2:	4b07      	ldr	r3, [pc, #28]	; (8001ac0 <MX_DAC1_Init+0x5c>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	f001 fc09 	bl	80032be <HAL_DAC_ConfigChannel>
 8001aac:	1e03      	subs	r3, r0, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_DAC1_Init+0x50>
  {
    Error_Handler();
 8001ab0:	f000 fae2 	bl	8002078 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001ab4:	46c0      	nop			; (mov r8, r8)
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	b002      	add	sp, #8
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20000394 	.word	0x20000394
 8001ac0:	2000012c 	.word	0x2000012c
 8001ac4:	40007400 	.word	0x40007400

08001ac8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001acc:	4b1b      	ldr	r3, [pc, #108]	; (8001b3c <MX_I2C1_Init+0x74>)
 8001ace:	4a1c      	ldr	r2, [pc, #112]	; (8001b40 <MX_I2C1_Init+0x78>)
 8001ad0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001ad2:	4b1a      	ldr	r3, [pc, #104]	; (8001b3c <MX_I2C1_Init+0x74>)
 8001ad4:	4a1b      	ldr	r2, [pc, #108]	; (8001b44 <MX_I2C1_Init+0x7c>)
 8001ad6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001ad8:	4b18      	ldr	r3, [pc, #96]	; (8001b3c <MX_I2C1_Init+0x74>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ade:	4b17      	ldr	r3, [pc, #92]	; (8001b3c <MX_I2C1_Init+0x74>)
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ae4:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <MX_I2C1_Init+0x74>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001aea:	4b14      	ldr	r3, [pc, #80]	; (8001b3c <MX_I2C1_Init+0x74>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001af0:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <MX_I2C1_Init+0x74>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001af6:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <MX_I2C1_Init+0x74>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001afc:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <MX_I2C1_Init+0x74>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b02:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <MX_I2C1_Init+0x74>)
 8001b04:	0018      	movs	r0, r3
 8001b06:	f002 f811 	bl	8003b2c <HAL_I2C_Init>
 8001b0a:	1e03      	subs	r3, r0, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001b0e:	f000 fab3 	bl	8002078 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b12:	4b0a      	ldr	r3, [pc, #40]	; (8001b3c <MX_I2C1_Init+0x74>)
 8001b14:	2100      	movs	r1, #0
 8001b16:	0018      	movs	r0, r3
 8001b18:	f002 fca6 	bl	8004468 <HAL_I2CEx_ConfigAnalogFilter>
 8001b1c:	1e03      	subs	r3, r0, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b20:	f000 faaa 	bl	8002078 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b24:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <MX_I2C1_Init+0x74>)
 8001b26:	2100      	movs	r1, #0
 8001b28:	0018      	movs	r0, r3
 8001b2a:	f002 fce9 	bl	8004500 <HAL_I2CEx_ConfigDigitalFilter>
 8001b2e:	1e03      	subs	r3, r0, #0
 8001b30:	d001      	beq.n	8001b36 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001b32:	f000 faa1 	bl	8002078 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b36:	46c0      	nop			; (mov r8, r8)
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20000140 	.word	0x20000140
 8001b40:	40005400 	.word	0x40005400
 8001b44:	2000090e 	.word	0x2000090e

08001b48 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b4c:	4b1c      	ldr	r3, [pc, #112]	; (8001bc0 <MX_SPI1_Init+0x78>)
 8001b4e:	4a1d      	ldr	r2, [pc, #116]	; (8001bc4 <MX_SPI1_Init+0x7c>)
 8001b50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b52:	4b1b      	ldr	r3, [pc, #108]	; (8001bc0 <MX_SPI1_Init+0x78>)
 8001b54:	2282      	movs	r2, #130	; 0x82
 8001b56:	0052      	lsls	r2, r2, #1
 8001b58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001b5a:	4b19      	ldr	r3, [pc, #100]	; (8001bc0 <MX_SPI1_Init+0x78>)
 8001b5c:	2280      	movs	r2, #128	; 0x80
 8001b5e:	00d2      	lsls	r2, r2, #3
 8001b60:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001b62:	4b17      	ldr	r3, [pc, #92]	; (8001bc0 <MX_SPI1_Init+0x78>)
 8001b64:	22f0      	movs	r2, #240	; 0xf0
 8001b66:	0112      	lsls	r2, r2, #4
 8001b68:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b6a:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <MX_SPI1_Init+0x78>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b70:	4b13      	ldr	r3, [pc, #76]	; (8001bc0 <MX_SPI1_Init+0x78>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b76:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <MX_SPI1_Init+0x78>)
 8001b78:	2280      	movs	r2, #128	; 0x80
 8001b7a:	0092      	lsls	r2, r2, #2
 8001b7c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001b7e:	4b10      	ldr	r3, [pc, #64]	; (8001bc0 <MX_SPI1_Init+0x78>)
 8001b80:	2218      	movs	r2, #24
 8001b82:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b84:	4b0e      	ldr	r3, [pc, #56]	; (8001bc0 <MX_SPI1_Init+0x78>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b8a:	4b0d      	ldr	r3, [pc, #52]	; (8001bc0 <MX_SPI1_Init+0x78>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b90:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <MX_SPI1_Init+0x78>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001b96:	4b0a      	ldr	r3, [pc, #40]	; (8001bc0 <MX_SPI1_Init+0x78>)
 8001b98:	2207      	movs	r2, #7
 8001b9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b9c:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <MX_SPI1_Init+0x78>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ba2:	4b07      	ldr	r3, [pc, #28]	; (8001bc0 <MX_SPI1_Init+0x78>)
 8001ba4:	2208      	movs	r2, #8
 8001ba6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ba8:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <MX_SPI1_Init+0x78>)
 8001baa:	0018      	movs	r0, r3
 8001bac:	f003 fa72 	bl	8005094 <HAL_SPI_Init>
 8001bb0:	1e03      	subs	r3, r0, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8001bb4:	f000 fa60 	bl	8002078 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001bb8:	46c0      	nop			; (mov r8, r8)
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	2000018c 	.word	0x2000018c
 8001bc4:	40013000 	.word	0x40013000

08001bc8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001bcc:	4b1c      	ldr	r3, [pc, #112]	; (8001c40 <MX_SPI2_Init+0x78>)
 8001bce:	4a1d      	ldr	r2, [pc, #116]	; (8001c44 <MX_SPI2_Init+0x7c>)
 8001bd0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001bd2:	4b1b      	ldr	r3, [pc, #108]	; (8001c40 <MX_SPI2_Init+0x78>)
 8001bd4:	2282      	movs	r2, #130	; 0x82
 8001bd6:	0052      	lsls	r2, r2, #1
 8001bd8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001bda:	4b19      	ldr	r3, [pc, #100]	; (8001c40 <MX_SPI2_Init+0x78>)
 8001bdc:	2280      	movs	r2, #128	; 0x80
 8001bde:	00d2      	lsls	r2, r2, #3
 8001be0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001be2:	4b17      	ldr	r3, [pc, #92]	; (8001c40 <MX_SPI2_Init+0x78>)
 8001be4:	22f0      	movs	r2, #240	; 0xf0
 8001be6:	0112      	lsls	r2, r2, #4
 8001be8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bea:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <MX_SPI2_Init+0x78>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bf0:	4b13      	ldr	r3, [pc, #76]	; (8001c40 <MX_SPI2_Init+0x78>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001bf6:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <MX_SPI2_Init+0x78>)
 8001bf8:	2280      	movs	r2, #128	; 0x80
 8001bfa:	0092      	lsls	r2, r2, #2
 8001bfc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001bfe:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <MX_SPI2_Init+0x78>)
 8001c00:	2218      	movs	r2, #24
 8001c02:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c04:	4b0e      	ldr	r3, [pc, #56]	; (8001c40 <MX_SPI2_Init+0x78>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c0a:	4b0d      	ldr	r3, [pc, #52]	; (8001c40 <MX_SPI2_Init+0x78>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c10:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <MX_SPI2_Init+0x78>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001c16:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <MX_SPI2_Init+0x78>)
 8001c18:	2207      	movs	r2, #7
 8001c1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c1c:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <MX_SPI2_Init+0x78>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c22:	4b07      	ldr	r3, [pc, #28]	; (8001c40 <MX_SPI2_Init+0x78>)
 8001c24:	2208      	movs	r2, #8
 8001c26:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001c28:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <MX_SPI2_Init+0x78>)
 8001c2a:	0018      	movs	r0, r3
 8001c2c:	f003 fa32 	bl	8005094 <HAL_SPI_Init>
 8001c30:	1e03      	subs	r3, r0, #0
 8001c32:	d001      	beq.n	8001c38 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8001c34:	f000 fa20 	bl	8002078 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001c38:	46c0      	nop			; (mov r8, r8)
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	46c0      	nop			; (mov r8, r8)
 8001c40:	200001f0 	.word	0x200001f0
 8001c44:	40003800 	.word	0x40003800

08001c48 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b096      	sub	sp, #88	; 0x58
 8001c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c4e:	2348      	movs	r3, #72	; 0x48
 8001c50:	18fb      	adds	r3, r7, r3
 8001c52:	0018      	movs	r0, r3
 8001c54:	2310      	movs	r3, #16
 8001c56:	001a      	movs	r2, r3
 8001c58:	2100      	movs	r1, #0
 8001c5a:	f006 f899 	bl	8007d90 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c5e:	2340      	movs	r3, #64	; 0x40
 8001c60:	18fb      	adds	r3, r7, r3
 8001c62:	0018      	movs	r0, r3
 8001c64:	2308      	movs	r3, #8
 8001c66:	001a      	movs	r2, r3
 8001c68:	2100      	movs	r1, #0
 8001c6a:	f006 f891 	bl	8007d90 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c6e:	2324      	movs	r3, #36	; 0x24
 8001c70:	18fb      	adds	r3, r7, r3
 8001c72:	0018      	movs	r0, r3
 8001c74:	231c      	movs	r3, #28
 8001c76:	001a      	movs	r2, r3
 8001c78:	2100      	movs	r1, #0
 8001c7a:	f006 f889 	bl	8007d90 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c7e:	1d3b      	adds	r3, r7, #4
 8001c80:	0018      	movs	r0, r3
 8001c82:	2320      	movs	r3, #32
 8001c84:	001a      	movs	r2, r3
 8001c86:	2100      	movs	r1, #0
 8001c88:	f006 f882 	bl	8007d90 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c8c:	4b46      	ldr	r3, [pc, #280]	; (8001da8 <MX_TIM1_Init+0x160>)
 8001c8e:	4a47      	ldr	r2, [pc, #284]	; (8001dac <MX_TIM1_Init+0x164>)
 8001c90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100 - 1;
 8001c92:	4b45      	ldr	r3, [pc, #276]	; (8001da8 <MX_TIM1_Init+0x160>)
 8001c94:	2263      	movs	r2, #99	; 0x63
 8001c96:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c98:	4b43      	ldr	r3, [pc, #268]	; (8001da8 <MX_TIM1_Init+0x160>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24000;
 8001c9e:	4b42      	ldr	r3, [pc, #264]	; (8001da8 <MX_TIM1_Init+0x160>)
 8001ca0:	4a43      	ldr	r2, [pc, #268]	; (8001db0 <MX_TIM1_Init+0x168>)
 8001ca2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca4:	4b40      	ldr	r3, [pc, #256]	; (8001da8 <MX_TIM1_Init+0x160>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001caa:	4b3f      	ldr	r3, [pc, #252]	; (8001da8 <MX_TIM1_Init+0x160>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001cb0:	4b3d      	ldr	r3, [pc, #244]	; (8001da8 <MX_TIM1_Init+0x160>)
 8001cb2:	2280      	movs	r2, #128	; 0x80
 8001cb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001cb6:	4b3c      	ldr	r3, [pc, #240]	; (8001da8 <MX_TIM1_Init+0x160>)
 8001cb8:	0018      	movs	r0, r3
 8001cba:	f003 fd71 	bl	80057a0 <HAL_TIM_Base_Init>
 8001cbe:	1e03      	subs	r3, r0, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8001cc2:	f000 f9d9 	bl	8002078 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cc6:	2148      	movs	r1, #72	; 0x48
 8001cc8:	187b      	adds	r3, r7, r1
 8001cca:	2280      	movs	r2, #128	; 0x80
 8001ccc:	0152      	lsls	r2, r2, #5
 8001cce:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001cd0:	187a      	adds	r2, r7, r1
 8001cd2:	4b35      	ldr	r3, [pc, #212]	; (8001da8 <MX_TIM1_Init+0x160>)
 8001cd4:	0011      	movs	r1, r2
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	f004 f878 	bl	8005dcc <HAL_TIM_ConfigClockSource>
 8001cdc:	1e03      	subs	r3, r0, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001ce0:	f000 f9ca 	bl	8002078 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001ce4:	4b30      	ldr	r3, [pc, #192]	; (8001da8 <MX_TIM1_Init+0x160>)
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	f003 fdaa 	bl	8005840 <HAL_TIM_OC_Init>
 8001cec:	1e03      	subs	r3, r0, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8001cf0:	f000 f9c2 	bl	8002078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cf4:	2140      	movs	r1, #64	; 0x40
 8001cf6:	187b      	adds	r3, r7, r1
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cfc:	187b      	adds	r3, r7, r1
 8001cfe:	2200      	movs	r2, #0
 8001d00:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d02:	187a      	adds	r2, r7, r1
 8001d04:	4b28      	ldr	r3, [pc, #160]	; (8001da8 <MX_TIM1_Init+0x160>)
 8001d06:	0011      	movs	r1, r2
 8001d08:	0018      	movs	r0, r3
 8001d0a:	f004 fc8d 	bl	8006628 <HAL_TIMEx_MasterConfigSynchronization>
 8001d0e:	1e03      	subs	r3, r0, #0
 8001d10:	d001      	beq.n	8001d16 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8001d12:	f000 f9b1 	bl	8002078 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001d16:	2124      	movs	r1, #36	; 0x24
 8001d18:	187b      	adds	r3, r7, r1
 8001d1a:	2230      	movs	r2, #48	; 0x30
 8001d1c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 12000 - 1;
 8001d1e:	187b      	adds	r3, r7, r1
 8001d20:	4a24      	ldr	r2, [pc, #144]	; (8001db4 <MX_TIM1_Init+0x16c>)
 8001d22:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d24:	187b      	adds	r3, r7, r1
 8001d26:	2200      	movs	r2, #0
 8001d28:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d2a:	187b      	adds	r3, r7, r1
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d30:	187b      	adds	r3, r7, r1
 8001d32:	2200      	movs	r2, #0
 8001d34:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d36:	187b      	adds	r3, r7, r1
 8001d38:	2200      	movs	r2, #0
 8001d3a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d3c:	187b      	adds	r3, r7, r1
 8001d3e:	2200      	movs	r2, #0
 8001d40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d42:	1879      	adds	r1, r7, r1
 8001d44:	4b18      	ldr	r3, [pc, #96]	; (8001da8 <MX_TIM1_Init+0x160>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	0018      	movs	r0, r3
 8001d4a:	f003 ffe7 	bl	8005d1c <HAL_TIM_OC_ConfigChannel>
 8001d4e:	1e03      	subs	r3, r0, #0
 8001d50:	d001      	beq.n	8001d56 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8001d52:	f000 f991 	bl	8002078 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d56:	1d3b      	adds	r3, r7, #4
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d5c:	1d3b      	adds	r3, r7, #4
 8001d5e:	2200      	movs	r2, #0
 8001d60:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d62:	1d3b      	adds	r3, r7, #4
 8001d64:	2200      	movs	r2, #0
 8001d66:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d68:	1d3b      	adds	r3, r7, #4
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d6e:	1d3b      	adds	r3, r7, #4
 8001d70:	2200      	movs	r2, #0
 8001d72:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d74:	1d3b      	adds	r3, r7, #4
 8001d76:	2280      	movs	r2, #128	; 0x80
 8001d78:	0192      	lsls	r2, r2, #6
 8001d7a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d7c:	1d3b      	adds	r3, r7, #4
 8001d7e:	2200      	movs	r2, #0
 8001d80:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d82:	1d3a      	adds	r2, r7, #4
 8001d84:	4b08      	ldr	r3, [pc, #32]	; (8001da8 <MX_TIM1_Init+0x160>)
 8001d86:	0011      	movs	r1, r2
 8001d88:	0018      	movs	r0, r3
 8001d8a:	f004 fcab 	bl	80066e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d8e:	1e03      	subs	r3, r0, #0
 8001d90:	d001      	beq.n	8001d96 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8001d92:	f000 f971 	bl	8002078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d96:	4b04      	ldr	r3, [pc, #16]	; (8001da8 <MX_TIM1_Init+0x160>)
 8001d98:	0018      	movs	r0, r3
 8001d9a:	f000 fbaf 	bl	80024fc <HAL_TIM_MspPostInit>

}
 8001d9e:	46c0      	nop			; (mov r8, r8)
 8001da0:	46bd      	mov	sp, r7
 8001da2:	b016      	add	sp, #88	; 0x58
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	46c0      	nop			; (mov r8, r8)
 8001da8:	20000254 	.word	0x20000254
 8001dac:	40012c00 	.word	0x40012c00
 8001db0:	00005dc0 	.word	0x00005dc0
 8001db4:	00002edf 	.word	0x00002edf

08001db8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08e      	sub	sp, #56	; 0x38
 8001dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dbe:	2328      	movs	r3, #40	; 0x28
 8001dc0:	18fb      	adds	r3, r7, r3
 8001dc2:	0018      	movs	r0, r3
 8001dc4:	2310      	movs	r3, #16
 8001dc6:	001a      	movs	r2, r3
 8001dc8:	2100      	movs	r1, #0
 8001dca:	f005 ffe1 	bl	8007d90 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dce:	2320      	movs	r3, #32
 8001dd0:	18fb      	adds	r3, r7, r3
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	2308      	movs	r3, #8
 8001dd6:	001a      	movs	r2, r3
 8001dd8:	2100      	movs	r1, #0
 8001dda:	f005 ffd9 	bl	8007d90 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dde:	1d3b      	adds	r3, r7, #4
 8001de0:	0018      	movs	r0, r3
 8001de2:	231c      	movs	r3, #28
 8001de4:	001a      	movs	r2, r3
 8001de6:	2100      	movs	r1, #0
 8001de8:	f005 ffd2 	bl	8007d90 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001dec:	4b30      	ldr	r3, [pc, #192]	; (8001eb0 <MX_TIM2_Init+0xf8>)
 8001dee:	2280      	movs	r2, #128	; 0x80
 8001df0:	05d2      	lsls	r2, r2, #23
 8001df2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100 - 1;
 8001df4:	4b2e      	ldr	r3, [pc, #184]	; (8001eb0 <MX_TIM2_Init+0xf8>)
 8001df6:	2263      	movs	r2, #99	; 0x63
 8001df8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dfa:	4b2d      	ldr	r3, [pc, #180]	; (8001eb0 <MX_TIM2_Init+0xf8>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 30000 - 1;
 8001e00:	4b2b      	ldr	r3, [pc, #172]	; (8001eb0 <MX_TIM2_Init+0xf8>)
 8001e02:	4a2c      	ldr	r2, [pc, #176]	; (8001eb4 <MX_TIM2_Init+0xfc>)
 8001e04:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e06:	4b2a      	ldr	r3, [pc, #168]	; (8001eb0 <MX_TIM2_Init+0xf8>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e0c:	4b28      	ldr	r3, [pc, #160]	; (8001eb0 <MX_TIM2_Init+0xf8>)
 8001e0e:	2280      	movs	r2, #128	; 0x80
 8001e10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e12:	4b27      	ldr	r3, [pc, #156]	; (8001eb0 <MX_TIM2_Init+0xf8>)
 8001e14:	0018      	movs	r0, r3
 8001e16:	f003 fcc3 	bl	80057a0 <HAL_TIM_Base_Init>
 8001e1a:	1e03      	subs	r3, r0, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001e1e:	f000 f92b 	bl	8002078 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e22:	2128      	movs	r1, #40	; 0x28
 8001e24:	187b      	adds	r3, r7, r1
 8001e26:	2280      	movs	r2, #128	; 0x80
 8001e28:	0152      	lsls	r2, r2, #5
 8001e2a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e2c:	187a      	adds	r2, r7, r1
 8001e2e:	4b20      	ldr	r3, [pc, #128]	; (8001eb0 <MX_TIM2_Init+0xf8>)
 8001e30:	0011      	movs	r1, r2
 8001e32:	0018      	movs	r0, r3
 8001e34:	f003 ffca 	bl	8005dcc <HAL_TIM_ConfigClockSource>
 8001e38:	1e03      	subs	r3, r0, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001e3c:	f000 f91c 	bl	8002078 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001e40:	4b1b      	ldr	r3, [pc, #108]	; (8001eb0 <MX_TIM2_Init+0xf8>)
 8001e42:	0018      	movs	r0, r3
 8001e44:	f003 fcfc 	bl	8005840 <HAL_TIM_OC_Init>
 8001e48:	1e03      	subs	r3, r0, #0
 8001e4a:	d001      	beq.n	8001e50 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001e4c:	f000 f914 	bl	8002078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e50:	2120      	movs	r1, #32
 8001e52:	187b      	adds	r3, r7, r1
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e58:	187b      	adds	r3, r7, r1
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e5e:	187a      	adds	r2, r7, r1
 8001e60:	4b13      	ldr	r3, [pc, #76]	; (8001eb0 <MX_TIM2_Init+0xf8>)
 8001e62:	0011      	movs	r1, r2
 8001e64:	0018      	movs	r0, r3
 8001e66:	f004 fbdf 	bl	8006628 <HAL_TIMEx_MasterConfigSynchronization>
 8001e6a:	1e03      	subs	r3, r0, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8001e6e:	f000 f903 	bl	8002078 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001e72:	1d3b      	adds	r3, r7, #4
 8001e74:	2230      	movs	r2, #48	; 0x30
 8001e76:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 6000 - 1;
 8001e78:	1d3b      	adds	r3, r7, #4
 8001e7a:	4a0f      	ldr	r2, [pc, #60]	; (8001eb8 <MX_TIM2_Init+0x100>)
 8001e7c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e7e:	1d3b      	adds	r3, r7, #4
 8001e80:	2200      	movs	r2, #0
 8001e82:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e84:	1d3b      	adds	r3, r7, #4
 8001e86:	2200      	movs	r2, #0
 8001e88:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e8a:	1d39      	adds	r1, r7, #4
 8001e8c:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <MX_TIM2_Init+0xf8>)
 8001e8e:	220c      	movs	r2, #12
 8001e90:	0018      	movs	r0, r3
 8001e92:	f003 ff43 	bl	8005d1c <HAL_TIM_OC_ConfigChannel>
 8001e96:	1e03      	subs	r3, r0, #0
 8001e98:	d001      	beq.n	8001e9e <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8001e9a:	f000 f8ed 	bl	8002078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e9e:	4b04      	ldr	r3, [pc, #16]	; (8001eb0 <MX_TIM2_Init+0xf8>)
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	f000 fb2b 	bl	80024fc <HAL_TIM_MspPostInit>

}
 8001ea6:	46c0      	nop			; (mov r8, r8)
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	b00e      	add	sp, #56	; 0x38
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	46c0      	nop			; (mov r8, r8)
 8001eb0:	2000029c 	.word	0x2000029c
 8001eb4:	0000752f 	.word	0x0000752f
 8001eb8:	0000176f 	.word	0x0000176f

08001ebc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */
    erpa_seq = 0;
 8001ec0:	4b19      	ldr	r3, [pc, #100]	; (8001f28 <MX_USART1_UART_Init+0x6c>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	801a      	strh	r2, [r3, #0]
    pmt_seq = 0;
 8001ec6:	4b19      	ldr	r3, [pc, #100]	; (8001f2c <MX_USART1_UART_Init+0x70>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	801a      	strh	r2, [r3, #0]
    hk_seq = 0;
 8001ecc:	4b18      	ldr	r3, [pc, #96]	; (8001f30 <MX_USART1_UART_Init+0x74>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	801a      	strh	r2, [r3, #0]
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ed2:	4b18      	ldr	r3, [pc, #96]	; (8001f34 <MX_USART1_UART_Init+0x78>)
 8001ed4:	4a18      	ldr	r2, [pc, #96]	; (8001f38 <MX_USART1_UART_Init+0x7c>)
 8001ed6:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ed8:	4b16      	ldr	r3, [pc, #88]	; (8001f34 <MX_USART1_UART_Init+0x78>)
 8001eda:	22e1      	movs	r2, #225	; 0xe1
 8001edc:	0252      	lsls	r2, r2, #9
 8001ede:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ee0:	4b14      	ldr	r3, [pc, #80]	; (8001f34 <MX_USART1_UART_Init+0x78>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ee6:	4b13      	ldr	r3, [pc, #76]	; (8001f34 <MX_USART1_UART_Init+0x78>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001eec:	4b11      	ldr	r3, [pc, #68]	; (8001f34 <MX_USART1_UART_Init+0x78>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ef2:	4b10      	ldr	r3, [pc, #64]	; (8001f34 <MX_USART1_UART_Init+0x78>)
 8001ef4:	220c      	movs	r2, #12
 8001ef6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ef8:	4b0e      	ldr	r3, [pc, #56]	; (8001f34 <MX_USART1_UART_Init+0x78>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001efe:	4b0d      	ldr	r3, [pc, #52]	; (8001f34 <MX_USART1_UART_Init+0x78>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f04:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <MX_USART1_UART_Init+0x78>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <MX_USART1_UART_Init+0x78>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f10:	4b08      	ldr	r3, [pc, #32]	; (8001f34 <MX_USART1_UART_Init+0x78>)
 8001f12:	0018      	movs	r0, r3
 8001f14:	f004 fc54 	bl	80067c0 <HAL_UART_Init>
 8001f18:	1e03      	subs	r3, r0, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_USART1_UART_Init+0x64>
  {
    Error_Handler();
 8001f1c:	f000 f8ac 	bl	8002078 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f20:	46c0      	nop			; (mov r8, r8)
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	46c0      	nop			; (mov r8, r8)
 8001f28:	200003ac 	.word	0x200003ac
 8001f2c:	200003b6 	.word	0x200003b6
 8001f30:	200003d2 	.word	0x200003d2
 8001f34:	200002e4 	.word	0x200002e4
 8001f38:	40013800 	.word	0x40013800

08001f3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f42:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <MX_DMA_Init+0x38>)
 8001f44:	695a      	ldr	r2, [r3, #20]
 8001f46:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <MX_DMA_Init+0x38>)
 8001f48:	2101      	movs	r1, #1
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	615a      	str	r2, [r3, #20]
 8001f4e:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <MX_DMA_Init+0x38>)
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	2201      	movs	r2, #1
 8001f54:	4013      	ands	r3, r2
 8001f56:	607b      	str	r3, [r7, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	2009      	movs	r0, #9
 8001f60:	f001 f958 	bl	8003214 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f64:	2009      	movs	r0, #9
 8001f66:	f001 f96a 	bl	800323e <HAL_NVIC_EnableIRQ>

}
 8001f6a:	46c0      	nop			; (mov r8, r8)
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	b002      	add	sp, #8
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	46c0      	nop			; (mov r8, r8)
 8001f74:	40021000 	.word	0x40021000

08001f78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f78:	b590      	push	{r4, r7, lr}
 8001f7a:	b08b      	sub	sp, #44	; 0x2c
 8001f7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7e:	2414      	movs	r4, #20
 8001f80:	193b      	adds	r3, r7, r4
 8001f82:	0018      	movs	r0, r3
 8001f84:	2314      	movs	r3, #20
 8001f86:	001a      	movs	r2, r3
 8001f88:	2100      	movs	r1, #0
 8001f8a:	f005 ff01 	bl	8007d90 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f8e:	4b37      	ldr	r3, [pc, #220]	; (800206c <MX_GPIO_Init+0xf4>)
 8001f90:	695a      	ldr	r2, [r3, #20]
 8001f92:	4b36      	ldr	r3, [pc, #216]	; (800206c <MX_GPIO_Init+0xf4>)
 8001f94:	2180      	movs	r1, #128	; 0x80
 8001f96:	0309      	lsls	r1, r1, #12
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	615a      	str	r2, [r3, #20]
 8001f9c:	4b33      	ldr	r3, [pc, #204]	; (800206c <MX_GPIO_Init+0xf4>)
 8001f9e:	695a      	ldr	r2, [r3, #20]
 8001fa0:	2380      	movs	r3, #128	; 0x80
 8001fa2:	031b      	lsls	r3, r3, #12
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	613b      	str	r3, [r7, #16]
 8001fa8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001faa:	4b30      	ldr	r3, [pc, #192]	; (800206c <MX_GPIO_Init+0xf4>)
 8001fac:	695a      	ldr	r2, [r3, #20]
 8001fae:	4b2f      	ldr	r3, [pc, #188]	; (800206c <MX_GPIO_Init+0xf4>)
 8001fb0:	2180      	movs	r1, #128	; 0x80
 8001fb2:	03c9      	lsls	r1, r1, #15
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	615a      	str	r2, [r3, #20]
 8001fb8:	4b2c      	ldr	r3, [pc, #176]	; (800206c <MX_GPIO_Init+0xf4>)
 8001fba:	695a      	ldr	r2, [r3, #20]
 8001fbc:	2380      	movs	r3, #128	; 0x80
 8001fbe:	03db      	lsls	r3, r3, #15
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc6:	4b29      	ldr	r3, [pc, #164]	; (800206c <MX_GPIO_Init+0xf4>)
 8001fc8:	695a      	ldr	r2, [r3, #20]
 8001fca:	4b28      	ldr	r3, [pc, #160]	; (800206c <MX_GPIO_Init+0xf4>)
 8001fcc:	2180      	movs	r1, #128	; 0x80
 8001fce:	0289      	lsls	r1, r1, #10
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	615a      	str	r2, [r3, #20]
 8001fd4:	4b25      	ldr	r3, [pc, #148]	; (800206c <MX_GPIO_Init+0xf4>)
 8001fd6:	695a      	ldr	r2, [r3, #20]
 8001fd8:	2380      	movs	r3, #128	; 0x80
 8001fda:	029b      	lsls	r3, r3, #10
 8001fdc:	4013      	ands	r3, r2
 8001fde:	60bb      	str	r3, [r7, #8]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe2:	4b22      	ldr	r3, [pc, #136]	; (800206c <MX_GPIO_Init+0xf4>)
 8001fe4:	695a      	ldr	r2, [r3, #20]
 8001fe6:	4b21      	ldr	r3, [pc, #132]	; (800206c <MX_GPIO_Init+0xf4>)
 8001fe8:	2180      	movs	r1, #128	; 0x80
 8001fea:	02c9      	lsls	r1, r1, #11
 8001fec:	430a      	orrs	r2, r1
 8001fee:	615a      	str	r2, [r3, #20]
 8001ff0:	4b1e      	ldr	r3, [pc, #120]	; (800206c <MX_GPIO_Init+0xf4>)
 8001ff2:	695a      	ldr	r2, [r3, #20]
 8001ff4:	2380      	movs	r3, #128	; 0x80
 8001ff6:	02db      	lsls	r3, r3, #11
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	607b      	str	r3, [r7, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|BLUE_LED_Pin
 8001ffe:	239f      	movs	r3, #159	; 0x9f
 8002000:	019b      	lsls	r3, r3, #6
 8002002:	481b      	ldr	r0, [pc, #108]	; (8002070 <MX_GPIO_Init+0xf8>)
 8002004:	2200      	movs	r2, #0
 8002006:	0019      	movs	r1, r3
 8002008:	f001 fd73 	bl	8003af2 <HAL_GPIO_WritePin>
                          |GREEN_LED_Pin|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800200c:	4b19      	ldr	r3, [pc, #100]	; (8002074 <MX_GPIO_Init+0xfc>)
 800200e:	2200      	movs	r2, #0
 8002010:	21c0      	movs	r1, #192	; 0xc0
 8002012:	0018      	movs	r0, r3
 8002014:	f001 fd6d 	bl	8003af2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 BLUE_LED_Pin
                           GREEN_LED_Pin PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|BLUE_LED_Pin
 8002018:	193b      	adds	r3, r7, r4
 800201a:	229f      	movs	r2, #159	; 0x9f
 800201c:	0192      	lsls	r2, r2, #6
 800201e:	601a      	str	r2, [r3, #0]
                          |GREEN_LED_Pin|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002020:	193b      	adds	r3, r7, r4
 8002022:	2201      	movs	r2, #1
 8002024:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002026:	193b      	adds	r3, r7, r4
 8002028:	2200      	movs	r2, #0
 800202a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202c:	193b      	adds	r3, r7, r4
 800202e:	2200      	movs	r2, #0
 8002030:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002032:	193b      	adds	r3, r7, r4
 8002034:	4a0e      	ldr	r2, [pc, #56]	; (8002070 <MX_GPIO_Init+0xf8>)
 8002036:	0019      	movs	r1, r3
 8002038:	0010      	movs	r0, r2
 800203a:	f001 fbcd 	bl	80037d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800203e:	0021      	movs	r1, r4
 8002040:	187b      	adds	r3, r7, r1
 8002042:	22c0      	movs	r2, #192	; 0xc0
 8002044:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002046:	187b      	adds	r3, r7, r1
 8002048:	2201      	movs	r2, #1
 800204a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204c:	187b      	adds	r3, r7, r1
 800204e:	2200      	movs	r2, #0
 8002050:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002052:	187b      	adds	r3, r7, r1
 8002054:	2200      	movs	r2, #0
 8002056:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002058:	187b      	adds	r3, r7, r1
 800205a:	4a06      	ldr	r2, [pc, #24]	; (8002074 <MX_GPIO_Init+0xfc>)
 800205c:	0019      	movs	r1, r3
 800205e:	0010      	movs	r0, r2
 8002060:	f001 fbba 	bl	80037d8 <HAL_GPIO_Init>

}
 8002064:	46c0      	nop			; (mov r8, r8)
 8002066:	46bd      	mov	sp, r7
 8002068:	b00b      	add	sp, #44	; 0x2c
 800206a:	bd90      	pop	{r4, r7, pc}
 800206c:	40021000 	.word	0x40021000
 8002070:	48000800 	.word	0x48000800
 8002074:	48001400 	.word	0x48001400

08002078 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800207c:	b672      	cpsid	i
}
 800207e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8002080:	e7fe      	b.n	8002080 <Error_Handler+0x8>
	...

08002084 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800208a:	4b0f      	ldr	r3, [pc, #60]	; (80020c8 <HAL_MspInit+0x44>)
 800208c:	699a      	ldr	r2, [r3, #24]
 800208e:	4b0e      	ldr	r3, [pc, #56]	; (80020c8 <HAL_MspInit+0x44>)
 8002090:	2101      	movs	r1, #1
 8002092:	430a      	orrs	r2, r1
 8002094:	619a      	str	r2, [r3, #24]
 8002096:	4b0c      	ldr	r3, [pc, #48]	; (80020c8 <HAL_MspInit+0x44>)
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	2201      	movs	r2, #1
 800209c:	4013      	ands	r3, r2
 800209e:	607b      	str	r3, [r7, #4]
 80020a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020a2:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <HAL_MspInit+0x44>)
 80020a4:	69da      	ldr	r2, [r3, #28]
 80020a6:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <HAL_MspInit+0x44>)
 80020a8:	2180      	movs	r1, #128	; 0x80
 80020aa:	0549      	lsls	r1, r1, #21
 80020ac:	430a      	orrs	r2, r1
 80020ae:	61da      	str	r2, [r3, #28]
 80020b0:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <HAL_MspInit+0x44>)
 80020b2:	69da      	ldr	r2, [r3, #28]
 80020b4:	2380      	movs	r3, #128	; 0x80
 80020b6:	055b      	lsls	r3, r3, #21
 80020b8:	4013      	ands	r3, r2
 80020ba:	603b      	str	r3, [r7, #0]
 80020bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020be:	46c0      	nop			; (mov r8, r8)
 80020c0:	46bd      	mov	sp, r7
 80020c2:	b002      	add	sp, #8
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	46c0      	nop			; (mov r8, r8)
 80020c8:	40021000 	.word	0x40021000

080020cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020cc:	b590      	push	{r4, r7, lr}
 80020ce:	b08d      	sub	sp, #52	; 0x34
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d4:	241c      	movs	r4, #28
 80020d6:	193b      	adds	r3, r7, r4
 80020d8:	0018      	movs	r0, r3
 80020da:	2314      	movs	r3, #20
 80020dc:	001a      	movs	r2, r3
 80020de:	2100      	movs	r1, #0
 80020e0:	f005 fe56 	bl	8007d90 <memset>
  if(hadc->Instance==ADC1)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a4a      	ldr	r2, [pc, #296]	; (8002214 <HAL_ADC_MspInit+0x148>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d000      	beq.n	80020f0 <HAL_ADC_MspInit+0x24>
 80020ee:	e08d      	b.n	800220c <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020f0:	4b49      	ldr	r3, [pc, #292]	; (8002218 <HAL_ADC_MspInit+0x14c>)
 80020f2:	699a      	ldr	r2, [r3, #24]
 80020f4:	4b48      	ldr	r3, [pc, #288]	; (8002218 <HAL_ADC_MspInit+0x14c>)
 80020f6:	2180      	movs	r1, #128	; 0x80
 80020f8:	0089      	lsls	r1, r1, #2
 80020fa:	430a      	orrs	r2, r1
 80020fc:	619a      	str	r2, [r3, #24]
 80020fe:	4b46      	ldr	r3, [pc, #280]	; (8002218 <HAL_ADC_MspInit+0x14c>)
 8002100:	699a      	ldr	r2, [r3, #24]
 8002102:	2380      	movs	r3, #128	; 0x80
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4013      	ands	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
 800210a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800210c:	4b42      	ldr	r3, [pc, #264]	; (8002218 <HAL_ADC_MspInit+0x14c>)
 800210e:	695a      	ldr	r2, [r3, #20]
 8002110:	4b41      	ldr	r3, [pc, #260]	; (8002218 <HAL_ADC_MspInit+0x14c>)
 8002112:	2180      	movs	r1, #128	; 0x80
 8002114:	0309      	lsls	r1, r1, #12
 8002116:	430a      	orrs	r2, r1
 8002118:	615a      	str	r2, [r3, #20]
 800211a:	4b3f      	ldr	r3, [pc, #252]	; (8002218 <HAL_ADC_MspInit+0x14c>)
 800211c:	695a      	ldr	r2, [r3, #20]
 800211e:	2380      	movs	r3, #128	; 0x80
 8002120:	031b      	lsls	r3, r3, #12
 8002122:	4013      	ands	r3, r2
 8002124:	617b      	str	r3, [r7, #20]
 8002126:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002128:	4b3b      	ldr	r3, [pc, #236]	; (8002218 <HAL_ADC_MspInit+0x14c>)
 800212a:	695a      	ldr	r2, [r3, #20]
 800212c:	4b3a      	ldr	r3, [pc, #232]	; (8002218 <HAL_ADC_MspInit+0x14c>)
 800212e:	2180      	movs	r1, #128	; 0x80
 8002130:	0289      	lsls	r1, r1, #10
 8002132:	430a      	orrs	r2, r1
 8002134:	615a      	str	r2, [r3, #20]
 8002136:	4b38      	ldr	r3, [pc, #224]	; (8002218 <HAL_ADC_MspInit+0x14c>)
 8002138:	695a      	ldr	r2, [r3, #20]
 800213a:	2380      	movs	r3, #128	; 0x80
 800213c:	029b      	lsls	r3, r3, #10
 800213e:	4013      	ands	r3, r2
 8002140:	613b      	str	r3, [r7, #16]
 8002142:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002144:	4b34      	ldr	r3, [pc, #208]	; (8002218 <HAL_ADC_MspInit+0x14c>)
 8002146:	695a      	ldr	r2, [r3, #20]
 8002148:	4b33      	ldr	r3, [pc, #204]	; (8002218 <HAL_ADC_MspInit+0x14c>)
 800214a:	2180      	movs	r1, #128	; 0x80
 800214c:	02c9      	lsls	r1, r1, #11
 800214e:	430a      	orrs	r2, r1
 8002150:	615a      	str	r2, [r3, #20]
 8002152:	4b31      	ldr	r3, [pc, #196]	; (8002218 <HAL_ADC_MspInit+0x14c>)
 8002154:	695a      	ldr	r2, [r3, #20]
 8002156:	2380      	movs	r3, #128	; 0x80
 8002158:	02db      	lsls	r3, r3, #11
 800215a:	4013      	ands	r3, r2
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002160:	193b      	adds	r3, r7, r4
 8002162:	223f      	movs	r2, #63	; 0x3f
 8002164:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002166:	193b      	adds	r3, r7, r4
 8002168:	2203      	movs	r2, #3
 800216a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	193b      	adds	r3, r7, r4
 800216e:	2200      	movs	r2, #0
 8002170:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002172:	193b      	adds	r3, r7, r4
 8002174:	4a29      	ldr	r2, [pc, #164]	; (800221c <HAL_ADC_MspInit+0x150>)
 8002176:	0019      	movs	r1, r3
 8002178:	0010      	movs	r0, r2
 800217a:	f001 fb2d 	bl	80037d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800217e:	193b      	adds	r3, r7, r4
 8002180:	228f      	movs	r2, #143	; 0x8f
 8002182:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002184:	193b      	adds	r3, r7, r4
 8002186:	2203      	movs	r2, #3
 8002188:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218a:	193b      	adds	r3, r7, r4
 800218c:	2200      	movs	r2, #0
 800218e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002190:	193a      	adds	r2, r7, r4
 8002192:	2390      	movs	r3, #144	; 0x90
 8002194:	05db      	lsls	r3, r3, #23
 8002196:	0011      	movs	r1, r2
 8002198:	0018      	movs	r0, r3
 800219a:	f001 fb1d 	bl	80037d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800219e:	193b      	adds	r3, r7, r4
 80021a0:	2203      	movs	r2, #3
 80021a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021a4:	193b      	adds	r3, r7, r4
 80021a6:	2203      	movs	r2, #3
 80021a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021aa:	193b      	adds	r3, r7, r4
 80021ac:	2200      	movs	r2, #0
 80021ae:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b0:	193b      	adds	r3, r7, r4
 80021b2:	4a1b      	ldr	r2, [pc, #108]	; (8002220 <HAL_ADC_MspInit+0x154>)
 80021b4:	0019      	movs	r1, r3
 80021b6:	0010      	movs	r0, r2
 80021b8:	f001 fb0e 	bl	80037d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80021bc:	4b19      	ldr	r3, [pc, #100]	; (8002224 <HAL_ADC_MspInit+0x158>)
 80021be:	4a1a      	ldr	r2, [pc, #104]	; (8002228 <HAL_ADC_MspInit+0x15c>)
 80021c0:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021c2:	4b18      	ldr	r3, [pc, #96]	; (8002224 <HAL_ADC_MspInit+0x158>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80021c8:	4b16      	ldr	r3, [pc, #88]	; (8002224 <HAL_ADC_MspInit+0x158>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80021ce:	4b15      	ldr	r3, [pc, #84]	; (8002224 <HAL_ADC_MspInit+0x158>)
 80021d0:	2280      	movs	r2, #128	; 0x80
 80021d2:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80021d4:	4b13      	ldr	r3, [pc, #76]	; (8002224 <HAL_ADC_MspInit+0x158>)
 80021d6:	2280      	movs	r2, #128	; 0x80
 80021d8:	0052      	lsls	r2, r2, #1
 80021da:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80021dc:	4b11      	ldr	r3, [pc, #68]	; (8002224 <HAL_ADC_MspInit+0x158>)
 80021de:	2280      	movs	r2, #128	; 0x80
 80021e0:	00d2      	lsls	r2, r2, #3
 80021e2:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 80021e4:	4b0f      	ldr	r3, [pc, #60]	; (8002224 <HAL_ADC_MspInit+0x158>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80021ea:	4b0e      	ldr	r3, [pc, #56]	; (8002224 <HAL_ADC_MspInit+0x158>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80021f0:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <HAL_ADC_MspInit+0x158>)
 80021f2:	0018      	movs	r0, r3
 80021f4:	f001 f8da 	bl	80033ac <HAL_DMA_Init>
 80021f8:	1e03      	subs	r3, r0, #0
 80021fa:	d001      	beq.n	8002200 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 80021fc:	f7ff ff3c 	bl	8002078 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a08      	ldr	r2, [pc, #32]	; (8002224 <HAL_ADC_MspInit+0x158>)
 8002204:	631a      	str	r2, [r3, #48]	; 0x30
 8002206:	4b07      	ldr	r3, [pc, #28]	; (8002224 <HAL_ADC_MspInit+0x158>)
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800220c:	46c0      	nop			; (mov r8, r8)
 800220e:	46bd      	mov	sp, r7
 8002210:	b00d      	add	sp, #52	; 0x34
 8002212:	bd90      	pop	{r4, r7, pc}
 8002214:	40012400 	.word	0x40012400
 8002218:	40021000 	.word	0x40021000
 800221c:	48000800 	.word	0x48000800
 8002220:	48000400 	.word	0x48000400
 8002224:	200000e8 	.word	0x200000e8
 8002228:	40020008 	.word	0x40020008

0800222c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800222c:	b590      	push	{r4, r7, lr}
 800222e:	b08b      	sub	sp, #44	; 0x2c
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002234:	2414      	movs	r4, #20
 8002236:	193b      	adds	r3, r7, r4
 8002238:	0018      	movs	r0, r3
 800223a:	2314      	movs	r3, #20
 800223c:	001a      	movs	r2, r3
 800223e:	2100      	movs	r1, #0
 8002240:	f005 fda6 	bl	8007d90 <memset>
  if(hdac->Instance==DAC)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a19      	ldr	r2, [pc, #100]	; (80022b0 <HAL_DAC_MspInit+0x84>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d12b      	bne.n	80022a6 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800224e:	4b19      	ldr	r3, [pc, #100]	; (80022b4 <HAL_DAC_MspInit+0x88>)
 8002250:	69da      	ldr	r2, [r3, #28]
 8002252:	4b18      	ldr	r3, [pc, #96]	; (80022b4 <HAL_DAC_MspInit+0x88>)
 8002254:	2180      	movs	r1, #128	; 0x80
 8002256:	0589      	lsls	r1, r1, #22
 8002258:	430a      	orrs	r2, r1
 800225a:	61da      	str	r2, [r3, #28]
 800225c:	4b15      	ldr	r3, [pc, #84]	; (80022b4 <HAL_DAC_MspInit+0x88>)
 800225e:	69da      	ldr	r2, [r3, #28]
 8002260:	2380      	movs	r3, #128	; 0x80
 8002262:	059b      	lsls	r3, r3, #22
 8002264:	4013      	ands	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
 8002268:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800226a:	4b12      	ldr	r3, [pc, #72]	; (80022b4 <HAL_DAC_MspInit+0x88>)
 800226c:	695a      	ldr	r2, [r3, #20]
 800226e:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <HAL_DAC_MspInit+0x88>)
 8002270:	2180      	movs	r1, #128	; 0x80
 8002272:	0289      	lsls	r1, r1, #10
 8002274:	430a      	orrs	r2, r1
 8002276:	615a      	str	r2, [r3, #20]
 8002278:	4b0e      	ldr	r3, [pc, #56]	; (80022b4 <HAL_DAC_MspInit+0x88>)
 800227a:	695a      	ldr	r2, [r3, #20]
 800227c:	2380      	movs	r3, #128	; 0x80
 800227e:	029b      	lsls	r3, r3, #10
 8002280:	4013      	ands	r3, r2
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002286:	193b      	adds	r3, r7, r4
 8002288:	2210      	movs	r2, #16
 800228a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800228c:	193b      	adds	r3, r7, r4
 800228e:	2203      	movs	r2, #3
 8002290:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002292:	193b      	adds	r3, r7, r4
 8002294:	2200      	movs	r2, #0
 8002296:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002298:	193a      	adds	r2, r7, r4
 800229a:	2390      	movs	r3, #144	; 0x90
 800229c:	05db      	lsls	r3, r3, #23
 800229e:	0011      	movs	r1, r2
 80022a0:	0018      	movs	r0, r3
 80022a2:	f001 fa99 	bl	80037d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80022a6:	46c0      	nop			; (mov r8, r8)
 80022a8:	46bd      	mov	sp, r7
 80022aa:	b00b      	add	sp, #44	; 0x2c
 80022ac:	bd90      	pop	{r4, r7, pc}
 80022ae:	46c0      	nop			; (mov r8, r8)
 80022b0:	40007400 	.word	0x40007400
 80022b4:	40021000 	.word	0x40021000

080022b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022b8:	b590      	push	{r4, r7, lr}
 80022ba:	b08b      	sub	sp, #44	; 0x2c
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c0:	2414      	movs	r4, #20
 80022c2:	193b      	adds	r3, r7, r4
 80022c4:	0018      	movs	r0, r3
 80022c6:	2314      	movs	r3, #20
 80022c8:	001a      	movs	r2, r3
 80022ca:	2100      	movs	r1, #0
 80022cc:	f005 fd60 	bl	8007d90 <memset>
  if(hi2c->Instance==I2C1)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a1c      	ldr	r2, [pc, #112]	; (8002348 <HAL_I2C_MspInit+0x90>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d132      	bne.n	8002340 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022da:	4b1c      	ldr	r3, [pc, #112]	; (800234c <HAL_I2C_MspInit+0x94>)
 80022dc:	695a      	ldr	r2, [r3, #20]
 80022de:	4b1b      	ldr	r3, [pc, #108]	; (800234c <HAL_I2C_MspInit+0x94>)
 80022e0:	2180      	movs	r1, #128	; 0x80
 80022e2:	02c9      	lsls	r1, r1, #11
 80022e4:	430a      	orrs	r2, r1
 80022e6:	615a      	str	r2, [r3, #20]
 80022e8:	4b18      	ldr	r3, [pc, #96]	; (800234c <HAL_I2C_MspInit+0x94>)
 80022ea:	695a      	ldr	r2, [r3, #20]
 80022ec:	2380      	movs	r3, #128	; 0x80
 80022ee:	02db      	lsls	r3, r3, #11
 80022f0:	4013      	ands	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
 80022f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80022f6:	193b      	adds	r3, r7, r4
 80022f8:	22c0      	movs	r2, #192	; 0xc0
 80022fa:	0092      	lsls	r2, r2, #2
 80022fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022fe:	0021      	movs	r1, r4
 8002300:	187b      	adds	r3, r7, r1
 8002302:	2212      	movs	r2, #18
 8002304:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	187b      	adds	r3, r7, r1
 8002308:	2200      	movs	r2, #0
 800230a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800230c:	187b      	adds	r3, r7, r1
 800230e:	2203      	movs	r2, #3
 8002310:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002312:	187b      	adds	r3, r7, r1
 8002314:	2201      	movs	r2, #1
 8002316:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002318:	187b      	adds	r3, r7, r1
 800231a:	4a0d      	ldr	r2, [pc, #52]	; (8002350 <HAL_I2C_MspInit+0x98>)
 800231c:	0019      	movs	r1, r3
 800231e:	0010      	movs	r0, r2
 8002320:	f001 fa5a 	bl	80037d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002324:	4b09      	ldr	r3, [pc, #36]	; (800234c <HAL_I2C_MspInit+0x94>)
 8002326:	69da      	ldr	r2, [r3, #28]
 8002328:	4b08      	ldr	r3, [pc, #32]	; (800234c <HAL_I2C_MspInit+0x94>)
 800232a:	2180      	movs	r1, #128	; 0x80
 800232c:	0389      	lsls	r1, r1, #14
 800232e:	430a      	orrs	r2, r1
 8002330:	61da      	str	r2, [r3, #28]
 8002332:	4b06      	ldr	r3, [pc, #24]	; (800234c <HAL_I2C_MspInit+0x94>)
 8002334:	69da      	ldr	r2, [r3, #28]
 8002336:	2380      	movs	r3, #128	; 0x80
 8002338:	039b      	lsls	r3, r3, #14
 800233a:	4013      	ands	r3, r2
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002340:	46c0      	nop			; (mov r8, r8)
 8002342:	46bd      	mov	sp, r7
 8002344:	b00b      	add	sp, #44	; 0x2c
 8002346:	bd90      	pop	{r4, r7, pc}
 8002348:	40005400 	.word	0x40005400
 800234c:	40021000 	.word	0x40021000
 8002350:	48000400 	.word	0x48000400

08002354 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002354:	b590      	push	{r4, r7, lr}
 8002356:	b08d      	sub	sp, #52	; 0x34
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800235c:	241c      	movs	r4, #28
 800235e:	193b      	adds	r3, r7, r4
 8002360:	0018      	movs	r0, r3
 8002362:	2314      	movs	r3, #20
 8002364:	001a      	movs	r2, r3
 8002366:	2100      	movs	r1, #0
 8002368:	f005 fd12 	bl	8007d90 <memset>
  if(hspi->Instance==SPI1)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a39      	ldr	r2, [pc, #228]	; (8002458 <HAL_SPI_MspInit+0x104>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d133      	bne.n	80023de <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002376:	4b39      	ldr	r3, [pc, #228]	; (800245c <HAL_SPI_MspInit+0x108>)
 8002378:	699a      	ldr	r2, [r3, #24]
 800237a:	4b38      	ldr	r3, [pc, #224]	; (800245c <HAL_SPI_MspInit+0x108>)
 800237c:	2180      	movs	r1, #128	; 0x80
 800237e:	0149      	lsls	r1, r1, #5
 8002380:	430a      	orrs	r2, r1
 8002382:	619a      	str	r2, [r3, #24]
 8002384:	4b35      	ldr	r3, [pc, #212]	; (800245c <HAL_SPI_MspInit+0x108>)
 8002386:	699a      	ldr	r2, [r3, #24]
 8002388:	2380      	movs	r3, #128	; 0x80
 800238a:	015b      	lsls	r3, r3, #5
 800238c:	4013      	ands	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
 8002390:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002392:	4b32      	ldr	r3, [pc, #200]	; (800245c <HAL_SPI_MspInit+0x108>)
 8002394:	695a      	ldr	r2, [r3, #20]
 8002396:	4b31      	ldr	r3, [pc, #196]	; (800245c <HAL_SPI_MspInit+0x108>)
 8002398:	2180      	movs	r1, #128	; 0x80
 800239a:	0289      	lsls	r1, r1, #10
 800239c:	430a      	orrs	r2, r1
 800239e:	615a      	str	r2, [r3, #20]
 80023a0:	4b2e      	ldr	r3, [pc, #184]	; (800245c <HAL_SPI_MspInit+0x108>)
 80023a2:	695a      	ldr	r2, [r3, #20]
 80023a4:	2380      	movs	r3, #128	; 0x80
 80023a6:	029b      	lsls	r3, r3, #10
 80023a8:	4013      	ands	r3, r2
 80023aa:	617b      	str	r3, [r7, #20]
 80023ac:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80023ae:	0021      	movs	r1, r4
 80023b0:	187b      	adds	r3, r7, r1
 80023b2:	2260      	movs	r2, #96	; 0x60
 80023b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b6:	187b      	adds	r3, r7, r1
 80023b8:	2202      	movs	r2, #2
 80023ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023bc:	187b      	adds	r3, r7, r1
 80023be:	2200      	movs	r2, #0
 80023c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023c2:	187b      	adds	r3, r7, r1
 80023c4:	2203      	movs	r2, #3
 80023c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80023c8:	187b      	adds	r3, r7, r1
 80023ca:	2200      	movs	r2, #0
 80023cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ce:	187a      	adds	r2, r7, r1
 80023d0:	2390      	movs	r3, #144	; 0x90
 80023d2:	05db      	lsls	r3, r3, #23
 80023d4:	0011      	movs	r1, r2
 80023d6:	0018      	movs	r0, r3
 80023d8:	f001 f9fe 	bl	80037d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80023dc:	e037      	b.n	800244e <HAL_SPI_MspInit+0xfa>
  else if(hspi->Instance==SPI2)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a1f      	ldr	r2, [pc, #124]	; (8002460 <HAL_SPI_MspInit+0x10c>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d132      	bne.n	800244e <HAL_SPI_MspInit+0xfa>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80023e8:	4b1c      	ldr	r3, [pc, #112]	; (800245c <HAL_SPI_MspInit+0x108>)
 80023ea:	69da      	ldr	r2, [r3, #28]
 80023ec:	4b1b      	ldr	r3, [pc, #108]	; (800245c <HAL_SPI_MspInit+0x108>)
 80023ee:	2180      	movs	r1, #128	; 0x80
 80023f0:	01c9      	lsls	r1, r1, #7
 80023f2:	430a      	orrs	r2, r1
 80023f4:	61da      	str	r2, [r3, #28]
 80023f6:	4b19      	ldr	r3, [pc, #100]	; (800245c <HAL_SPI_MspInit+0x108>)
 80023f8:	69da      	ldr	r2, [r3, #28]
 80023fa:	2380      	movs	r3, #128	; 0x80
 80023fc:	01db      	lsls	r3, r3, #7
 80023fe:	4013      	ands	r3, r2
 8002400:	613b      	str	r3, [r7, #16]
 8002402:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002404:	4b15      	ldr	r3, [pc, #84]	; (800245c <HAL_SPI_MspInit+0x108>)
 8002406:	695a      	ldr	r2, [r3, #20]
 8002408:	4b14      	ldr	r3, [pc, #80]	; (800245c <HAL_SPI_MspInit+0x108>)
 800240a:	2180      	movs	r1, #128	; 0x80
 800240c:	02c9      	lsls	r1, r1, #11
 800240e:	430a      	orrs	r2, r1
 8002410:	615a      	str	r2, [r3, #20]
 8002412:	4b12      	ldr	r3, [pc, #72]	; (800245c <HAL_SPI_MspInit+0x108>)
 8002414:	695a      	ldr	r2, [r3, #20]
 8002416:	2380      	movs	r3, #128	; 0x80
 8002418:	02db      	lsls	r3, r3, #11
 800241a:	4013      	ands	r3, r2
 800241c:	60fb      	str	r3, [r7, #12]
 800241e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002420:	211c      	movs	r1, #28
 8002422:	187b      	adds	r3, r7, r1
 8002424:	22c0      	movs	r2, #192	; 0xc0
 8002426:	01d2      	lsls	r2, r2, #7
 8002428:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242a:	187b      	adds	r3, r7, r1
 800242c:	2202      	movs	r2, #2
 800242e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002430:	187b      	adds	r3, r7, r1
 8002432:	2200      	movs	r2, #0
 8002434:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002436:	187b      	adds	r3, r7, r1
 8002438:	2203      	movs	r2, #3
 800243a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800243c:	187b      	adds	r3, r7, r1
 800243e:	2200      	movs	r2, #0
 8002440:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002442:	187b      	adds	r3, r7, r1
 8002444:	4a07      	ldr	r2, [pc, #28]	; (8002464 <HAL_SPI_MspInit+0x110>)
 8002446:	0019      	movs	r1, r3
 8002448:	0010      	movs	r0, r2
 800244a:	f001 f9c5 	bl	80037d8 <HAL_GPIO_Init>
}
 800244e:	46c0      	nop			; (mov r8, r8)
 8002450:	46bd      	mov	sp, r7
 8002452:	b00d      	add	sp, #52	; 0x34
 8002454:	bd90      	pop	{r4, r7, pc}
 8002456:	46c0      	nop			; (mov r8, r8)
 8002458:	40013000 	.word	0x40013000
 800245c:	40021000 	.word	0x40021000
 8002460:	40003800 	.word	0x40003800
 8002464:	48000400 	.word	0x48000400

08002468 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a1f      	ldr	r2, [pc, #124]	; (80024f4 <HAL_TIM_Base_MspInit+0x8c>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d11e      	bne.n	80024b8 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800247a:	4b1f      	ldr	r3, [pc, #124]	; (80024f8 <HAL_TIM_Base_MspInit+0x90>)
 800247c:	699a      	ldr	r2, [r3, #24]
 800247e:	4b1e      	ldr	r3, [pc, #120]	; (80024f8 <HAL_TIM_Base_MspInit+0x90>)
 8002480:	2180      	movs	r1, #128	; 0x80
 8002482:	0109      	lsls	r1, r1, #4
 8002484:	430a      	orrs	r2, r1
 8002486:	619a      	str	r2, [r3, #24]
 8002488:	4b1b      	ldr	r3, [pc, #108]	; (80024f8 <HAL_TIM_Base_MspInit+0x90>)
 800248a:	699a      	ldr	r2, [r3, #24]
 800248c:	2380      	movs	r3, #128	; 0x80
 800248e:	011b      	lsls	r3, r3, #4
 8002490:	4013      	ands	r3, r2
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 1, 0);
 8002496:	2200      	movs	r2, #0
 8002498:	2101      	movs	r1, #1
 800249a:	200d      	movs	r0, #13
 800249c:	f000 feba 	bl	8003214 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80024a0:	200d      	movs	r0, #13
 80024a2:	f000 fecc 	bl	800323e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 80024a6:	2200      	movs	r2, #0
 80024a8:	2101      	movs	r1, #1
 80024aa:	200e      	movs	r0, #14
 80024ac:	f000 feb2 	bl	8003214 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80024b0:	200e      	movs	r0, #14
 80024b2:	f000 fec4 	bl	800323e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80024b6:	e019      	b.n	80024ec <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM2)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	2380      	movs	r3, #128	; 0x80
 80024be:	05db      	lsls	r3, r3, #23
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d113      	bne.n	80024ec <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024c4:	4b0c      	ldr	r3, [pc, #48]	; (80024f8 <HAL_TIM_Base_MspInit+0x90>)
 80024c6:	69da      	ldr	r2, [r3, #28]
 80024c8:	4b0b      	ldr	r3, [pc, #44]	; (80024f8 <HAL_TIM_Base_MspInit+0x90>)
 80024ca:	2101      	movs	r1, #1
 80024cc:	430a      	orrs	r2, r1
 80024ce:	61da      	str	r2, [r3, #28]
 80024d0:	4b09      	ldr	r3, [pc, #36]	; (80024f8 <HAL_TIM_Base_MspInit+0x90>)
 80024d2:	69db      	ldr	r3, [r3, #28]
 80024d4:	2201      	movs	r2, #1
 80024d6:	4013      	ands	r3, r2
 80024d8:	60bb      	str	r3, [r7, #8]
 80024da:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80024dc:	2200      	movs	r2, #0
 80024de:	2101      	movs	r1, #1
 80024e0:	200f      	movs	r0, #15
 80024e2:	f000 fe97 	bl	8003214 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80024e6:	200f      	movs	r0, #15
 80024e8:	f000 fea9 	bl	800323e <HAL_NVIC_EnableIRQ>
}
 80024ec:	46c0      	nop			; (mov r8, r8)
 80024ee:	46bd      	mov	sp, r7
 80024f0:	b004      	add	sp, #16
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40012c00 	.word	0x40012c00
 80024f8:	40021000 	.word	0x40021000

080024fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024fc:	b590      	push	{r4, r7, lr}
 80024fe:	b08b      	sub	sp, #44	; 0x2c
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002504:	2414      	movs	r4, #20
 8002506:	193b      	adds	r3, r7, r4
 8002508:	0018      	movs	r0, r3
 800250a:	2314      	movs	r3, #20
 800250c:	001a      	movs	r2, r3
 800250e:	2100      	movs	r1, #0
 8002510:	f005 fc3e 	bl	8007d90 <memset>
  if(htim->Instance==TIM1)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a2c      	ldr	r2, [pc, #176]	; (80025cc <HAL_TIM_MspPostInit+0xd0>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d126      	bne.n	800256c <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800251e:	4b2c      	ldr	r3, [pc, #176]	; (80025d0 <HAL_TIM_MspPostInit+0xd4>)
 8002520:	695a      	ldr	r2, [r3, #20]
 8002522:	4b2b      	ldr	r3, [pc, #172]	; (80025d0 <HAL_TIM_MspPostInit+0xd4>)
 8002524:	2180      	movs	r1, #128	; 0x80
 8002526:	0289      	lsls	r1, r1, #10
 8002528:	430a      	orrs	r2, r1
 800252a:	615a      	str	r2, [r3, #20]
 800252c:	4b28      	ldr	r3, [pc, #160]	; (80025d0 <HAL_TIM_MspPostInit+0xd4>)
 800252e:	695a      	ldr	r2, [r3, #20]
 8002530:	2380      	movs	r3, #128	; 0x80
 8002532:	029b      	lsls	r3, r3, #10
 8002534:	4013      	ands	r3, r2
 8002536:	613b      	str	r3, [r7, #16]
 8002538:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800253a:	193b      	adds	r3, r7, r4
 800253c:	2280      	movs	r2, #128	; 0x80
 800253e:	0052      	lsls	r2, r2, #1
 8002540:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002542:	0021      	movs	r1, r4
 8002544:	187b      	adds	r3, r7, r1
 8002546:	2202      	movs	r2, #2
 8002548:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254a:	187b      	adds	r3, r7, r1
 800254c:	2200      	movs	r2, #0
 800254e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002550:	187b      	adds	r3, r7, r1
 8002552:	2200      	movs	r2, #0
 8002554:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002556:	187b      	adds	r3, r7, r1
 8002558:	2202      	movs	r2, #2
 800255a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800255c:	187a      	adds	r2, r7, r1
 800255e:	2390      	movs	r3, #144	; 0x90
 8002560:	05db      	lsls	r3, r3, #23
 8002562:	0011      	movs	r1, r2
 8002564:	0018      	movs	r0, r3
 8002566:	f001 f937 	bl	80037d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800256a:	e02a      	b.n	80025c2 <HAL_TIM_MspPostInit+0xc6>
  else if(htim->Instance==TIM2)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	2380      	movs	r3, #128	; 0x80
 8002572:	05db      	lsls	r3, r3, #23
 8002574:	429a      	cmp	r2, r3
 8002576:	d124      	bne.n	80025c2 <HAL_TIM_MspPostInit+0xc6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002578:	4b15      	ldr	r3, [pc, #84]	; (80025d0 <HAL_TIM_MspPostInit+0xd4>)
 800257a:	695a      	ldr	r2, [r3, #20]
 800257c:	4b14      	ldr	r3, [pc, #80]	; (80025d0 <HAL_TIM_MspPostInit+0xd4>)
 800257e:	2180      	movs	r1, #128	; 0x80
 8002580:	02c9      	lsls	r1, r1, #11
 8002582:	430a      	orrs	r2, r1
 8002584:	615a      	str	r2, [r3, #20]
 8002586:	4b12      	ldr	r3, [pc, #72]	; (80025d0 <HAL_TIM_MspPostInit+0xd4>)
 8002588:	695a      	ldr	r2, [r3, #20]
 800258a:	2380      	movs	r3, #128	; 0x80
 800258c:	02db      	lsls	r3, r3, #11
 800258e:	4013      	ands	r3, r2
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002594:	2114      	movs	r1, #20
 8002596:	187b      	adds	r3, r7, r1
 8002598:	2280      	movs	r2, #128	; 0x80
 800259a:	0112      	lsls	r2, r2, #4
 800259c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259e:	187b      	adds	r3, r7, r1
 80025a0:	2202      	movs	r2, #2
 80025a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a4:	187b      	adds	r3, r7, r1
 80025a6:	2200      	movs	r2, #0
 80025a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025aa:	187b      	adds	r3, r7, r1
 80025ac:	2200      	movs	r2, #0
 80025ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80025b0:	187b      	adds	r3, r7, r1
 80025b2:	2202      	movs	r2, #2
 80025b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025b6:	187b      	adds	r3, r7, r1
 80025b8:	4a06      	ldr	r2, [pc, #24]	; (80025d4 <HAL_TIM_MspPostInit+0xd8>)
 80025ba:	0019      	movs	r1, r3
 80025bc:	0010      	movs	r0, r2
 80025be:	f001 f90b 	bl	80037d8 <HAL_GPIO_Init>
}
 80025c2:	46c0      	nop			; (mov r8, r8)
 80025c4:	46bd      	mov	sp, r7
 80025c6:	b00b      	add	sp, #44	; 0x2c
 80025c8:	bd90      	pop	{r4, r7, pc}
 80025ca:	46c0      	nop			; (mov r8, r8)
 80025cc:	40012c00 	.word	0x40012c00
 80025d0:	40021000 	.word	0x40021000
 80025d4:	48000400 	.word	0x48000400

080025d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025d8:	b590      	push	{r4, r7, lr}
 80025da:	b08b      	sub	sp, #44	; 0x2c
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e0:	2414      	movs	r4, #20
 80025e2:	193b      	adds	r3, r7, r4
 80025e4:	0018      	movs	r0, r3
 80025e6:	2314      	movs	r3, #20
 80025e8:	001a      	movs	r2, r3
 80025ea:	2100      	movs	r1, #0
 80025ec:	f005 fbd0 	bl	8007d90 <memset>
  if(huart->Instance==USART1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a21      	ldr	r2, [pc, #132]	; (800267c <HAL_UART_MspInit+0xa4>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d13b      	bne.n	8002672 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025fa:	4b21      	ldr	r3, [pc, #132]	; (8002680 <HAL_UART_MspInit+0xa8>)
 80025fc:	699a      	ldr	r2, [r3, #24]
 80025fe:	4b20      	ldr	r3, [pc, #128]	; (8002680 <HAL_UART_MspInit+0xa8>)
 8002600:	2180      	movs	r1, #128	; 0x80
 8002602:	01c9      	lsls	r1, r1, #7
 8002604:	430a      	orrs	r2, r1
 8002606:	619a      	str	r2, [r3, #24]
 8002608:	4b1d      	ldr	r3, [pc, #116]	; (8002680 <HAL_UART_MspInit+0xa8>)
 800260a:	699a      	ldr	r2, [r3, #24]
 800260c:	2380      	movs	r3, #128	; 0x80
 800260e:	01db      	lsls	r3, r3, #7
 8002610:	4013      	ands	r3, r2
 8002612:	613b      	str	r3, [r7, #16]
 8002614:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002616:	4b1a      	ldr	r3, [pc, #104]	; (8002680 <HAL_UART_MspInit+0xa8>)
 8002618:	695a      	ldr	r2, [r3, #20]
 800261a:	4b19      	ldr	r3, [pc, #100]	; (8002680 <HAL_UART_MspInit+0xa8>)
 800261c:	2180      	movs	r1, #128	; 0x80
 800261e:	0289      	lsls	r1, r1, #10
 8002620:	430a      	orrs	r2, r1
 8002622:	615a      	str	r2, [r3, #20]
 8002624:	4b16      	ldr	r3, [pc, #88]	; (8002680 <HAL_UART_MspInit+0xa8>)
 8002626:	695a      	ldr	r2, [r3, #20]
 8002628:	2380      	movs	r3, #128	; 0x80
 800262a:	029b      	lsls	r3, r3, #10
 800262c:	4013      	ands	r3, r2
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002632:	193b      	adds	r3, r7, r4
 8002634:	22c0      	movs	r2, #192	; 0xc0
 8002636:	00d2      	lsls	r2, r2, #3
 8002638:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263a:	0021      	movs	r1, r4
 800263c:	187b      	adds	r3, r7, r1
 800263e:	2202      	movs	r2, #2
 8002640:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002642:	187b      	adds	r3, r7, r1
 8002644:	2200      	movs	r2, #0
 8002646:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002648:	187b      	adds	r3, r7, r1
 800264a:	2203      	movs	r2, #3
 800264c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800264e:	187b      	adds	r3, r7, r1
 8002650:	2201      	movs	r2, #1
 8002652:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002654:	187a      	adds	r2, r7, r1
 8002656:	2390      	movs	r3, #144	; 0x90
 8002658:	05db      	lsls	r3, r3, #23
 800265a:	0011      	movs	r1, r2
 800265c:	0018      	movs	r0, r3
 800265e:	f001 f8bb 	bl	80037d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002662:	2200      	movs	r2, #0
 8002664:	2100      	movs	r1, #0
 8002666:	201b      	movs	r0, #27
 8002668:	f000 fdd4 	bl	8003214 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800266c:	201b      	movs	r0, #27
 800266e:	f000 fde6 	bl	800323e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	46bd      	mov	sp, r7
 8002676:	b00b      	add	sp, #44	; 0x2c
 8002678:	bd90      	pop	{r4, r7, pc}
 800267a:	46c0      	nop			; (mov r8, r8)
 800267c:	40013800 	.word	0x40013800
 8002680:	40021000 	.word	0x40021000

08002684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002688:	e7fe      	b.n	8002688 <NMI_Handler+0x4>

0800268a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800268e:	e7fe      	b.n	800268e <HardFault_Handler+0x4>

08002690 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002694:	46c0      	nop			; (mov r8, r8)
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800269e:	46c0      	nop			; (mov r8, r8)
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026a8:	f000 f8ee 	bl	8002888 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026ac:	46c0      	nop			; (mov r8, r8)
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
	...

080026b4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80026b8:	4b03      	ldr	r3, [pc, #12]	; (80026c8 <DMA1_Channel1_IRQHandler+0x14>)
 80026ba:	0018      	movs	r0, r3
 80026bc:	f000 ffa1 	bl	8003602 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80026c0:	46c0      	nop			; (mov r8, r8)
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	46c0      	nop			; (mov r8, r8)
 80026c8:	200000e8 	.word	0x200000e8

080026cc <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80026d0:	4b03      	ldr	r3, [pc, #12]	; (80026e0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80026d2:	0018      	movs	r0, r3
 80026d4:	f003 fa0c 	bl	8005af0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80026d8:	46c0      	nop			; (mov r8, r8)
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	46c0      	nop			; (mov r8, r8)
 80026e0:	20000254 	.word	0x20000254

080026e4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80026e8:	4b03      	ldr	r3, [pc, #12]	; (80026f8 <TIM1_CC_IRQHandler+0x14>)
 80026ea:	0018      	movs	r0, r3
 80026ec:	f003 fa00 	bl	8005af0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80026f0:	46c0      	nop			; (mov r8, r8)
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	46c0      	nop			; (mov r8, r8)
 80026f8:	20000254 	.word	0x20000254

080026fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002700:	4b03      	ldr	r3, [pc, #12]	; (8002710 <TIM2_IRQHandler+0x14>)
 8002702:	0018      	movs	r0, r3
 8002704:	f003 f9f4 	bl	8005af0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002708:	46c0      	nop			; (mov r8, r8)
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	46c0      	nop			; (mov r8, r8)
 8002710:	2000029c 	.word	0x2000029c

08002714 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002718:	4b03      	ldr	r3, [pc, #12]	; (8002728 <USART1_IRQHandler+0x14>)
 800271a:	0018      	movs	r0, r3
 800271c:	f004 f9ae 	bl	8006a7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002720:	46c0      	nop			; (mov r8, r8)
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	46c0      	nop			; (mov r8, r8)
 8002728:	200002e4 	.word	0x200002e4

0800272c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002734:	4a14      	ldr	r2, [pc, #80]	; (8002788 <_sbrk+0x5c>)
 8002736:	4b15      	ldr	r3, [pc, #84]	; (800278c <_sbrk+0x60>)
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002740:	4b13      	ldr	r3, [pc, #76]	; (8002790 <_sbrk+0x64>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d102      	bne.n	800274e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002748:	4b11      	ldr	r3, [pc, #68]	; (8002790 <_sbrk+0x64>)
 800274a:	4a12      	ldr	r2, [pc, #72]	; (8002794 <_sbrk+0x68>)
 800274c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800274e:	4b10      	ldr	r3, [pc, #64]	; (8002790 <_sbrk+0x64>)
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	18d3      	adds	r3, r2, r3
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	429a      	cmp	r2, r3
 800275a:	d207      	bcs.n	800276c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800275c:	f005 faee 	bl	8007d3c <__errno>
 8002760:	0003      	movs	r3, r0
 8002762:	220c      	movs	r2, #12
 8002764:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002766:	2301      	movs	r3, #1
 8002768:	425b      	negs	r3, r3
 800276a:	e009      	b.n	8002780 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800276c:	4b08      	ldr	r3, [pc, #32]	; (8002790 <_sbrk+0x64>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002772:	4b07      	ldr	r3, [pc, #28]	; (8002790 <_sbrk+0x64>)
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	18d2      	adds	r2, r2, r3
 800277a:	4b05      	ldr	r3, [pc, #20]	; (8002790 <_sbrk+0x64>)
 800277c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800277e:	68fb      	ldr	r3, [r7, #12]
}
 8002780:	0018      	movs	r0, r3
 8002782:	46bd      	mov	sp, r7
 8002784:	b006      	add	sp, #24
 8002786:	bd80      	pop	{r7, pc}
 8002788:	20002000 	.word	0x20002000
 800278c:	00000400 	.word	0x00000400
 8002790:	200003d8 	.word	0x200003d8
 8002794:	200003f0 	.word	0x200003f0

08002798 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800279c:	46c0      	nop			; (mov r8, r8)
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
	...

080027a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80027a4:	480d      	ldr	r0, [pc, #52]	; (80027dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80027a6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027a8:	480d      	ldr	r0, [pc, #52]	; (80027e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80027aa:	490e      	ldr	r1, [pc, #56]	; (80027e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80027ac:	4a0e      	ldr	r2, [pc, #56]	; (80027e8 <LoopForever+0xe>)
  movs r3, #0
 80027ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027b0:	e002      	b.n	80027b8 <LoopCopyDataInit>

080027b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027b6:	3304      	adds	r3, #4

080027b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027bc:	d3f9      	bcc.n	80027b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027be:	4a0b      	ldr	r2, [pc, #44]	; (80027ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80027c0:	4c0b      	ldr	r4, [pc, #44]	; (80027f0 <LoopForever+0x16>)
  movs r3, #0
 80027c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027c4:	e001      	b.n	80027ca <LoopFillZerobss>

080027c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027c8:	3204      	adds	r2, #4

080027ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027cc:	d3fb      	bcc.n	80027c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80027ce:	f7ff ffe3 	bl	8002798 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80027d2:	f005 fab9 	bl	8007d48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027d6:	f7fe fed1 	bl	800157c <main>

080027da <LoopForever>:

LoopForever:
    b LoopForever
 80027da:	e7fe      	b.n	80027da <LoopForever>
  ldr   r0, =_estack
 80027dc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80027e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027e4:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80027e8:	080087a8 	.word	0x080087a8
  ldr r2, =_sbss
 80027ec:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80027f0:	200003f0 	.word	0x200003f0

080027f4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027f4:	e7fe      	b.n	80027f4 <ADC1_COMP_IRQHandler>
	...

080027f8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027fc:	4b07      	ldr	r3, [pc, #28]	; (800281c <HAL_Init+0x24>)
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	4b06      	ldr	r3, [pc, #24]	; (800281c <HAL_Init+0x24>)
 8002802:	2110      	movs	r1, #16
 8002804:	430a      	orrs	r2, r1
 8002806:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002808:	2003      	movs	r0, #3
 800280a:	f000 f809 	bl	8002820 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800280e:	f7ff fc39 	bl	8002084 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	0018      	movs	r0, r3
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	46c0      	nop			; (mov r8, r8)
 800281c:	40022000 	.word	0x40022000

08002820 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002820:	b590      	push	{r4, r7, lr}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002828:	4b14      	ldr	r3, [pc, #80]	; (800287c <HAL_InitTick+0x5c>)
 800282a:	681c      	ldr	r4, [r3, #0]
 800282c:	4b14      	ldr	r3, [pc, #80]	; (8002880 <HAL_InitTick+0x60>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	0019      	movs	r1, r3
 8002832:	23fa      	movs	r3, #250	; 0xfa
 8002834:	0098      	lsls	r0, r3, #2
 8002836:	f7fd fc79 	bl	800012c <__udivsi3>
 800283a:	0003      	movs	r3, r0
 800283c:	0019      	movs	r1, r3
 800283e:	0020      	movs	r0, r4
 8002840:	f7fd fc74 	bl	800012c <__udivsi3>
 8002844:	0003      	movs	r3, r0
 8002846:	0018      	movs	r0, r3
 8002848:	f000 fd09 	bl	800325e <HAL_SYSTICK_Config>
 800284c:	1e03      	subs	r3, r0, #0
 800284e:	d001      	beq.n	8002854 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e00f      	b.n	8002874 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b03      	cmp	r3, #3
 8002858:	d80b      	bhi.n	8002872 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	2301      	movs	r3, #1
 800285e:	425b      	negs	r3, r3
 8002860:	2200      	movs	r2, #0
 8002862:	0018      	movs	r0, r3
 8002864:	f000 fcd6 	bl	8003214 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002868:	4b06      	ldr	r3, [pc, #24]	; (8002884 <HAL_InitTick+0x64>)
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800286e:	2300      	movs	r3, #0
 8002870:	e000      	b.n	8002874 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
}
 8002874:	0018      	movs	r0, r3
 8002876:	46bd      	mov	sp, r7
 8002878:	b003      	add	sp, #12
 800287a:	bd90      	pop	{r4, r7, pc}
 800287c:	2000001c 	.word	0x2000001c
 8002880:	20000024 	.word	0x20000024
 8002884:	20000020 	.word	0x20000020

08002888 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800288c:	4b05      	ldr	r3, [pc, #20]	; (80028a4 <HAL_IncTick+0x1c>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	001a      	movs	r2, r3
 8002892:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <HAL_IncTick+0x20>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	18d2      	adds	r2, r2, r3
 8002898:	4b03      	ldr	r3, [pc, #12]	; (80028a8 <HAL_IncTick+0x20>)
 800289a:	601a      	str	r2, [r3, #0]
}
 800289c:	46c0      	nop			; (mov r8, r8)
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	46c0      	nop			; (mov r8, r8)
 80028a4:	20000024 	.word	0x20000024
 80028a8:	200003dc 	.word	0x200003dc

080028ac <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  return uwTick;
 80028b0:	4b02      	ldr	r3, [pc, #8]	; (80028bc <HAL_GetTick+0x10>)
 80028b2:	681b      	ldr	r3, [r3, #0]
}
 80028b4:	0018      	movs	r0, r3
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	46c0      	nop			; (mov r8, r8)
 80028bc:	200003dc 	.word	0x200003dc

080028c0 <HAL_SuspendTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)

{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 80028c4:	4b04      	ldr	r3, [pc, #16]	; (80028d8 <HAL_SuspendTick+0x18>)
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	4b03      	ldr	r3, [pc, #12]	; (80028d8 <HAL_SuspendTick+0x18>)
 80028ca:	2102      	movs	r1, #2
 80028cc:	438a      	bics	r2, r1
 80028ce:	601a      	str	r2, [r3, #0]
}
 80028d0:	46c0      	nop			; (mov r8, r8)
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	46c0      	nop			; (mov r8, r8)
 80028d8:	e000e010 	.word	0xe000e010

080028dc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028e4:	230f      	movs	r3, #15
 80028e6:	18fb      	adds	r3, r7, r3
 80028e8:	2200      	movs	r2, #0
 80028ea:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e125      	b.n	8002b46 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10a      	bne.n	8002918 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2234      	movs	r2, #52	; 0x34
 800290c:	2100      	movs	r1, #0
 800290e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	0018      	movs	r0, r3
 8002914:	f7ff fbda 	bl	80020cc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291c:	2210      	movs	r2, #16
 800291e:	4013      	ands	r3, r2
 8002920:	d000      	beq.n	8002924 <HAL_ADC_Init+0x48>
 8002922:	e103      	b.n	8002b2c <HAL_ADC_Init+0x250>
 8002924:	230f      	movs	r3, #15
 8002926:	18fb      	adds	r3, r7, r3
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d000      	beq.n	8002930 <HAL_ADC_Init+0x54>
 800292e:	e0fd      	b.n	8002b2c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	2204      	movs	r2, #4
 8002938:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800293a:	d000      	beq.n	800293e <HAL_ADC_Init+0x62>
 800293c:	e0f6      	b.n	8002b2c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002942:	4a83      	ldr	r2, [pc, #524]	; (8002b50 <HAL_ADC_Init+0x274>)
 8002944:	4013      	ands	r3, r2
 8002946:	2202      	movs	r2, #2
 8002948:	431a      	orrs	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	2203      	movs	r2, #3
 8002956:	4013      	ands	r3, r2
 8002958:	2b01      	cmp	r3, #1
 800295a:	d112      	bne.n	8002982 <HAL_ADC_Init+0xa6>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2201      	movs	r2, #1
 8002964:	4013      	ands	r3, r2
 8002966:	2b01      	cmp	r3, #1
 8002968:	d009      	beq.n	800297e <HAL_ADC_Init+0xa2>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68da      	ldr	r2, [r3, #12]
 8002970:	2380      	movs	r3, #128	; 0x80
 8002972:	021b      	lsls	r3, r3, #8
 8002974:	401a      	ands	r2, r3
 8002976:	2380      	movs	r3, #128	; 0x80
 8002978:	021b      	lsls	r3, r3, #8
 800297a:	429a      	cmp	r2, r3
 800297c:	d101      	bne.n	8002982 <HAL_ADC_Init+0xa6>
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <HAL_ADC_Init+0xa8>
 8002982:	2300      	movs	r3, #0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d116      	bne.n	80029b6 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	2218      	movs	r2, #24
 8002990:	4393      	bics	r3, r2
 8002992:	0019      	movs	r1, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	430a      	orrs	r2, r1
 800299e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	0899      	lsrs	r1, r3, #2
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685a      	ldr	r2, [r3, #4]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68da      	ldr	r2, [r3, #12]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4964      	ldr	r1, [pc, #400]	; (8002b54 <HAL_ADC_Init+0x278>)
 80029c2:	400a      	ands	r2, r1
 80029c4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	7e1b      	ldrb	r3, [r3, #24]
 80029ca:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	7e5b      	ldrb	r3, [r3, #25]
 80029d0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80029d2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	7e9b      	ldrb	r3, [r3, #26]
 80029d8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80029da:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d002      	beq.n	80029ea <HAL_ADC_Init+0x10e>
 80029e4:	2380      	movs	r3, #128	; 0x80
 80029e6:	015b      	lsls	r3, r3, #5
 80029e8:	e000      	b.n	80029ec <HAL_ADC_Init+0x110>
 80029ea:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80029ec:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80029f2:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d101      	bne.n	8002a00 <HAL_ADC_Init+0x124>
 80029fc:	2304      	movs	r3, #4
 80029fe:	e000      	b.n	8002a02 <HAL_ADC_Init+0x126>
 8002a00:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002a02:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2124      	movs	r1, #36	; 0x24
 8002a08:	5c5b      	ldrb	r3, [r3, r1]
 8002a0a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002a0c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a0e:	68ba      	ldr	r2, [r7, #8]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	7edb      	ldrb	r3, [r3, #27]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d115      	bne.n	8002a48 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	7e9b      	ldrb	r3, [r3, #26]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d105      	bne.n	8002a30 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	2280      	movs	r2, #128	; 0x80
 8002a28:	0252      	lsls	r2, r2, #9
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	60bb      	str	r3, [r7, #8]
 8002a2e:	e00b      	b.n	8002a48 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a34:	2220      	movs	r2, #32
 8002a36:	431a      	orrs	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a40:	2201      	movs	r2, #1
 8002a42:	431a      	orrs	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	69da      	ldr	r2, [r3, #28]
 8002a4c:	23c2      	movs	r3, #194	; 0xc2
 8002a4e:	33ff      	adds	r3, #255	; 0xff
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d007      	beq.n	8002a64 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	68ba      	ldr	r2, [r7, #8]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68d9      	ldr	r1, [r3, #12]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68ba      	ldr	r2, [r7, #8]
 8002a70:	430a      	orrs	r2, r1
 8002a72:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a78:	2380      	movs	r3, #128	; 0x80
 8002a7a:	055b      	lsls	r3, r3, #21
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d01b      	beq.n	8002ab8 <HAL_ADC_Init+0x1dc>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d017      	beq.n	8002ab8 <HAL_ADC_Init+0x1dc>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d013      	beq.n	8002ab8 <HAL_ADC_Init+0x1dc>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a94:	2b03      	cmp	r3, #3
 8002a96:	d00f      	beq.n	8002ab8 <HAL_ADC_Init+0x1dc>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9c:	2b04      	cmp	r3, #4
 8002a9e:	d00b      	beq.n	8002ab8 <HAL_ADC_Init+0x1dc>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa4:	2b05      	cmp	r3, #5
 8002aa6:	d007      	beq.n	8002ab8 <HAL_ADC_Init+0x1dc>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aac:	2b06      	cmp	r3, #6
 8002aae:	d003      	beq.n	8002ab8 <HAL_ADC_Init+0x1dc>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab4:	2b07      	cmp	r3, #7
 8002ab6:	d112      	bne.n	8002ade <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	695a      	ldr	r2, [r3, #20]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2107      	movs	r1, #7
 8002ac4:	438a      	bics	r2, r1
 8002ac6:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6959      	ldr	r1, [r3, #20]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad2:	2207      	movs	r2, #7
 8002ad4:	401a      	ands	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	430a      	orrs	r2, r1
 8002adc:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	4a1c      	ldr	r2, [pc, #112]	; (8002b58 <HAL_ADC_Init+0x27c>)
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	68ba      	ldr	r2, [r7, #8]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d10b      	bne.n	8002b06 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af8:	2203      	movs	r2, #3
 8002afa:	4393      	bics	r3, r2
 8002afc:	2201      	movs	r2, #1
 8002afe:	431a      	orrs	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002b04:	e01c      	b.n	8002b40 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b0a:	2212      	movs	r2, #18
 8002b0c:	4393      	bics	r3, r2
 8002b0e:	2210      	movs	r2, #16
 8002b10:	431a      	orrs	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002b22:	230f      	movs	r3, #15
 8002b24:	18fb      	adds	r3, r7, r3
 8002b26:	2201      	movs	r2, #1
 8002b28:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002b2a:	e009      	b.n	8002b40 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b30:	2210      	movs	r2, #16
 8002b32:	431a      	orrs	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002b38:	230f      	movs	r3, #15
 8002b3a:	18fb      	adds	r3, r7, r3
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002b40:	230f      	movs	r3, #15
 8002b42:	18fb      	adds	r3, r7, r3
 8002b44:	781b      	ldrb	r3, [r3, #0]
}
 8002b46:	0018      	movs	r0, r3
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	b004      	add	sp, #16
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	46c0      	nop			; (mov r8, r8)
 8002b50:	fffffefd 	.word	0xfffffefd
 8002b54:	fffe0219 	.word	0xfffe0219
 8002b58:	833fffe7 	.word	0x833fffe7

08002b5c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002b5c:	b590      	push	{r4, r7, lr}
 8002b5e:	b087      	sub	sp, #28
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b68:	2317      	movs	r3, #23
 8002b6a:	18fb      	adds	r3, r7, r3
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	2204      	movs	r2, #4
 8002b78:	4013      	ands	r3, r2
 8002b7a:	d15e      	bne.n	8002c3a <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2234      	movs	r2, #52	; 0x34
 8002b80:	5c9b      	ldrb	r3, [r3, r2]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d101      	bne.n	8002b8a <HAL_ADC_Start_DMA+0x2e>
 8002b86:	2302      	movs	r3, #2
 8002b88:	e05e      	b.n	8002c48 <HAL_ADC_Start_DMA+0xec>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2234      	movs	r2, #52	; 0x34
 8002b8e:	2101      	movs	r1, #1
 8002b90:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	7e5b      	ldrb	r3, [r3, #25]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d007      	beq.n	8002baa <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002b9a:	2317      	movs	r3, #23
 8002b9c:	18fc      	adds	r4, r7, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	f000 f983 	bl	8002eac <ADC_Enable>
 8002ba6:	0003      	movs	r3, r0
 8002ba8:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002baa:	2317      	movs	r3, #23
 8002bac:	18fb      	adds	r3, r7, r3
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d146      	bne.n	8002c42 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb8:	4a25      	ldr	r2, [pc, #148]	; (8002c50 <HAL_ADC_Start_DMA+0xf4>)
 8002bba:	4013      	ands	r3, r2
 8002bbc:	2280      	movs	r2, #128	; 0x80
 8002bbe:	0052      	lsls	r2, r2, #1
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2234      	movs	r2, #52	; 0x34
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd8:	4a1e      	ldr	r2, [pc, #120]	; (8002c54 <HAL_ADC_Start_DMA+0xf8>)
 8002bda:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be0:	4a1d      	ldr	r2, [pc, #116]	; (8002c58 <HAL_ADC_Start_DMA+0xfc>)
 8002be2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be8:	4a1c      	ldr	r2, [pc, #112]	; (8002c5c <HAL_ADC_Start_DMA+0x100>)
 8002bea:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	221c      	movs	r2, #28
 8002bf2:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2110      	movs	r1, #16
 8002c00:	430a      	orrs	r2, r1
 8002c02:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68da      	ldr	r2, [r3, #12]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2101      	movs	r1, #1
 8002c10:	430a      	orrs	r2, r1
 8002c12:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	3340      	adds	r3, #64	; 0x40
 8002c1e:	0019      	movs	r1, r3
 8002c20:	68ba      	ldr	r2, [r7, #8]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f000 fc0a 	bl	800343c <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2104      	movs	r1, #4
 8002c34:	430a      	orrs	r2, r1
 8002c36:	609a      	str	r2, [r3, #8]
 8002c38:	e003      	b.n	8002c42 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002c3a:	2317      	movs	r3, #23
 8002c3c:	18fb      	adds	r3, r7, r3
 8002c3e:	2202      	movs	r2, #2
 8002c40:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002c42:	2317      	movs	r3, #23
 8002c44:	18fb      	adds	r3, r7, r3
 8002c46:	781b      	ldrb	r3, [r3, #0]
}
 8002c48:	0018      	movs	r0, r3
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	b007      	add	sp, #28
 8002c4e:	bd90      	pop	{r4, r7, pc}
 8002c50:	fffff0fe 	.word	0xfffff0fe
 8002c54:	08002fb5 	.word	0x08002fb5
 8002c58:	08003069 	.word	0x08003069
 8002c5c:	08003087 	.word	0x08003087

08002c60 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002c68:	46c0      	nop			; (mov r8, r8)
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	b002      	add	sp, #8
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002c78:	46c0      	nop			; (mov r8, r8)
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	b002      	add	sp, #8
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002c88:	46c0      	nop			; (mov r8, r8)
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	b002      	add	sp, #8
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c9a:	230f      	movs	r3, #15
 8002c9c:	18fb      	adds	r3, r7, r3
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002caa:	2380      	movs	r3, #128	; 0x80
 8002cac:	055b      	lsls	r3, r3, #21
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d011      	beq.n	8002cd6 <HAL_ADC_ConfigChannel+0x46>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d00d      	beq.n	8002cd6 <HAL_ADC_ConfigChannel+0x46>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d009      	beq.n	8002cd6 <HAL_ADC_ConfigChannel+0x46>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc6:	2b03      	cmp	r3, #3
 8002cc8:	d005      	beq.n	8002cd6 <HAL_ADC_ConfigChannel+0x46>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	d001      	beq.n	8002cd6 <HAL_ADC_ConfigChannel+0x46>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2234      	movs	r2, #52	; 0x34
 8002cda:	5c9b      	ldrb	r3, [r3, r2]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d101      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x54>
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	e0d0      	b.n	8002e86 <HAL_ADC_ConfigChannel+0x1f6>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2234      	movs	r2, #52	; 0x34
 8002ce8:	2101      	movs	r1, #1
 8002cea:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	2204      	movs	r2, #4
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	d000      	beq.n	8002cfa <HAL_ADC_ConfigChannel+0x6a>
 8002cf8:	e0b4      	b.n	8002e64 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	4a64      	ldr	r2, [pc, #400]	; (8002e90 <HAL_ADC_ConfigChannel+0x200>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d100      	bne.n	8002d06 <HAL_ADC_ConfigChannel+0x76>
 8002d04:	e082      	b.n	8002e0c <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2201      	movs	r2, #1
 8002d12:	409a      	lsls	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d20:	2380      	movs	r3, #128	; 0x80
 8002d22:	055b      	lsls	r3, r3, #21
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d037      	beq.n	8002d98 <HAL_ADC_ConfigChannel+0x108>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d033      	beq.n	8002d98 <HAL_ADC_ConfigChannel+0x108>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d02f      	beq.n	8002d98 <HAL_ADC_ConfigChannel+0x108>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3c:	2b03      	cmp	r3, #3
 8002d3e:	d02b      	beq.n	8002d98 <HAL_ADC_ConfigChannel+0x108>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d44:	2b04      	cmp	r3, #4
 8002d46:	d027      	beq.n	8002d98 <HAL_ADC_ConfigChannel+0x108>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4c:	2b05      	cmp	r3, #5
 8002d4e:	d023      	beq.n	8002d98 <HAL_ADC_ConfigChannel+0x108>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d54:	2b06      	cmp	r3, #6
 8002d56:	d01f      	beq.n	8002d98 <HAL_ADC_ConfigChannel+0x108>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5c:	2b07      	cmp	r3, #7
 8002d5e:	d01b      	beq.n	8002d98 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	2107      	movs	r1, #7
 8002d6c:	400b      	ands	r3, r1
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d012      	beq.n	8002d98 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	695a      	ldr	r2, [r3, #20]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2107      	movs	r1, #7
 8002d7e:	438a      	bics	r2, r1
 8002d80:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6959      	ldr	r1, [r3, #20]
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	2207      	movs	r2, #7
 8002d8e:	401a      	ands	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	430a      	orrs	r2, r1
 8002d96:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2b10      	cmp	r3, #16
 8002d9e:	d007      	beq.n	8002db0 <HAL_ADC_ConfigChannel+0x120>
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b11      	cmp	r3, #17
 8002da6:	d003      	beq.n	8002db0 <HAL_ADC_ConfigChannel+0x120>
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2b12      	cmp	r3, #18
 8002dae:	d163      	bne.n	8002e78 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002db0:	4b38      	ldr	r3, [pc, #224]	; (8002e94 <HAL_ADC_ConfigChannel+0x204>)
 8002db2:	6819      	ldr	r1, [r3, #0]
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2b10      	cmp	r3, #16
 8002dba:	d009      	beq.n	8002dd0 <HAL_ADC_ConfigChannel+0x140>
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2b11      	cmp	r3, #17
 8002dc2:	d102      	bne.n	8002dca <HAL_ADC_ConfigChannel+0x13a>
 8002dc4:	2380      	movs	r3, #128	; 0x80
 8002dc6:	03db      	lsls	r3, r3, #15
 8002dc8:	e004      	b.n	8002dd4 <HAL_ADC_ConfigChannel+0x144>
 8002dca:	2380      	movs	r3, #128	; 0x80
 8002dcc:	045b      	lsls	r3, r3, #17
 8002dce:	e001      	b.n	8002dd4 <HAL_ADC_ConfigChannel+0x144>
 8002dd0:	2380      	movs	r3, #128	; 0x80
 8002dd2:	041b      	lsls	r3, r3, #16
 8002dd4:	4a2f      	ldr	r2, [pc, #188]	; (8002e94 <HAL_ADC_ConfigChannel+0x204>)
 8002dd6:	430b      	orrs	r3, r1
 8002dd8:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2b10      	cmp	r3, #16
 8002de0:	d14a      	bne.n	8002e78 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002de2:	4b2d      	ldr	r3, [pc, #180]	; (8002e98 <HAL_ADC_ConfigChannel+0x208>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	492d      	ldr	r1, [pc, #180]	; (8002e9c <HAL_ADC_ConfigChannel+0x20c>)
 8002de8:	0018      	movs	r0, r3
 8002dea:	f7fd f99f 	bl	800012c <__udivsi3>
 8002dee:	0003      	movs	r3, r0
 8002df0:	001a      	movs	r2, r3
 8002df2:	0013      	movs	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	189b      	adds	r3, r3, r2
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002dfc:	e002      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	3b01      	subs	r3, #1
 8002e02:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1f9      	bne.n	8002dfe <HAL_ADC_ConfigChannel+0x16e>
 8002e0a:	e035      	b.n	8002e78 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2101      	movs	r1, #1
 8002e18:	4099      	lsls	r1, r3
 8002e1a:	000b      	movs	r3, r1
 8002e1c:	43d9      	mvns	r1, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	400a      	ands	r2, r1
 8002e24:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2b10      	cmp	r3, #16
 8002e2c:	d007      	beq.n	8002e3e <HAL_ADC_ConfigChannel+0x1ae>
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2b11      	cmp	r3, #17
 8002e34:	d003      	beq.n	8002e3e <HAL_ADC_ConfigChannel+0x1ae>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2b12      	cmp	r3, #18
 8002e3c:	d11c      	bne.n	8002e78 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002e3e:	4b15      	ldr	r3, [pc, #84]	; (8002e94 <HAL_ADC_ConfigChannel+0x204>)
 8002e40:	6819      	ldr	r1, [r3, #0]
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2b10      	cmp	r3, #16
 8002e48:	d007      	beq.n	8002e5a <HAL_ADC_ConfigChannel+0x1ca>
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2b11      	cmp	r3, #17
 8002e50:	d101      	bne.n	8002e56 <HAL_ADC_ConfigChannel+0x1c6>
 8002e52:	4b13      	ldr	r3, [pc, #76]	; (8002ea0 <HAL_ADC_ConfigChannel+0x210>)
 8002e54:	e002      	b.n	8002e5c <HAL_ADC_ConfigChannel+0x1cc>
 8002e56:	4b13      	ldr	r3, [pc, #76]	; (8002ea4 <HAL_ADC_ConfigChannel+0x214>)
 8002e58:	e000      	b.n	8002e5c <HAL_ADC_ConfigChannel+0x1cc>
 8002e5a:	4b13      	ldr	r3, [pc, #76]	; (8002ea8 <HAL_ADC_ConfigChannel+0x218>)
 8002e5c:	4a0d      	ldr	r2, [pc, #52]	; (8002e94 <HAL_ADC_ConfigChannel+0x204>)
 8002e5e:	400b      	ands	r3, r1
 8002e60:	6013      	str	r3, [r2, #0]
 8002e62:	e009      	b.n	8002e78 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e68:	2220      	movs	r2, #32
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002e70:	230f      	movs	r3, #15
 8002e72:	18fb      	adds	r3, r7, r3
 8002e74:	2201      	movs	r2, #1
 8002e76:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2234      	movs	r2, #52	; 0x34
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002e80:	230f      	movs	r3, #15
 8002e82:	18fb      	adds	r3, r7, r3
 8002e84:	781b      	ldrb	r3, [r3, #0]
}
 8002e86:	0018      	movs	r0, r3
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	b004      	add	sp, #16
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	00001001 	.word	0x00001001
 8002e94:	40012708 	.word	0x40012708
 8002e98:	2000001c 	.word	0x2000001c
 8002e9c:	000f4240 	.word	0x000f4240
 8002ea0:	ffbfffff 	.word	0xffbfffff
 8002ea4:	feffffff 	.word	0xfeffffff
 8002ea8:	ff7fffff 	.word	0xff7fffff

08002eac <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	2203      	movs	r2, #3
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d112      	bne.n	8002ef0 <ADC_Enable+0x44>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d009      	beq.n	8002eec <ADC_Enable+0x40>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68da      	ldr	r2, [r3, #12]
 8002ede:	2380      	movs	r3, #128	; 0x80
 8002ee0:	021b      	lsls	r3, r3, #8
 8002ee2:	401a      	ands	r2, r3
 8002ee4:	2380      	movs	r3, #128	; 0x80
 8002ee6:	021b      	lsls	r3, r3, #8
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d101      	bne.n	8002ef0 <ADC_Enable+0x44>
 8002eec:	2301      	movs	r3, #1
 8002eee:	e000      	b.n	8002ef2 <ADC_Enable+0x46>
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d152      	bne.n	8002f9c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	4a2a      	ldr	r2, [pc, #168]	; (8002fa8 <ADC_Enable+0xfc>)
 8002efe:	4013      	ands	r3, r2
 8002f00:	d00d      	beq.n	8002f1e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f06:	2210      	movs	r2, #16
 8002f08:	431a      	orrs	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f12:	2201      	movs	r2, #1
 8002f14:	431a      	orrs	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e03f      	b.n	8002f9e <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689a      	ldr	r2, [r3, #8]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2101      	movs	r1, #1
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f2e:	4b1f      	ldr	r3, [pc, #124]	; (8002fac <ADC_Enable+0x100>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	491f      	ldr	r1, [pc, #124]	; (8002fb0 <ADC_Enable+0x104>)
 8002f34:	0018      	movs	r0, r3
 8002f36:	f7fd f8f9 	bl	800012c <__udivsi3>
 8002f3a:	0003      	movs	r3, r0
 8002f3c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002f3e:	e002      	b.n	8002f46 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	3b01      	subs	r3, #1
 8002f44:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1f9      	bne.n	8002f40 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f4c:	f7ff fcae 	bl	80028ac <HAL_GetTick>
 8002f50:	0003      	movs	r3, r0
 8002f52:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002f54:	e01b      	b.n	8002f8e <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f56:	f7ff fca9 	bl	80028ac <HAL_GetTick>
 8002f5a:	0002      	movs	r2, r0
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d914      	bls.n	8002f8e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d00d      	beq.n	8002f8e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f76:	2210      	movs	r2, #16
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f82:	2201      	movs	r2, #1
 8002f84:	431a      	orrs	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e007      	b.n	8002f9e <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2201      	movs	r2, #1
 8002f96:	4013      	ands	r3, r2
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d1dc      	bne.n	8002f56 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	0018      	movs	r0, r3
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	b004      	add	sp, #16
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	46c0      	nop			; (mov r8, r8)
 8002fa8:	80000017 	.word	0x80000017
 8002fac:	2000001c 	.word	0x2000001c
 8002fb0:	000f4240 	.word	0x000f4240

08002fb4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc6:	2250      	movs	r2, #80	; 0x50
 8002fc8:	4013      	ands	r3, r2
 8002fca:	d140      	bne.n	800304e <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd0:	2280      	movs	r2, #128	; 0x80
 8002fd2:	0092      	lsls	r2, r2, #2
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	23c0      	movs	r3, #192	; 0xc0
 8002fe2:	011b      	lsls	r3, r3, #4
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	d12d      	bne.n	8003044 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d129      	bne.n	8003044 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2208      	movs	r2, #8
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	2b08      	cmp	r3, #8
 8002ffc:	d122      	bne.n	8003044 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	2204      	movs	r2, #4
 8003006:	4013      	ands	r3, r2
 8003008:	d110      	bne.n	800302c <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	210c      	movs	r1, #12
 8003016:	438a      	bics	r2, r1
 8003018:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301e:	4a11      	ldr	r2, [pc, #68]	; (8003064 <ADC_DMAConvCplt+0xb0>)
 8003020:	4013      	ands	r3, r2
 8003022:	2201      	movs	r2, #1
 8003024:	431a      	orrs	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	639a      	str	r2, [r3, #56]	; 0x38
 800302a:	e00b      	b.n	8003044 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003030:	2220      	movs	r2, #32
 8003032:	431a      	orrs	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800303c:	2201      	movs	r2, #1
 800303e:	431a      	orrs	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	0018      	movs	r0, r3
 8003048:	f7ff fe0a 	bl	8002c60 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 800304c:	e005      	b.n	800305a <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	0010      	movs	r0, r2
 8003058:	4798      	blx	r3
}
 800305a:	46c0      	nop			; (mov r8, r8)
 800305c:	46bd      	mov	sp, r7
 800305e:	b004      	add	sp, #16
 8003060:	bd80      	pop	{r7, pc}
 8003062:	46c0      	nop			; (mov r8, r8)
 8003064:	fffffefe 	.word	0xfffffefe

08003068 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003074:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	0018      	movs	r0, r3
 800307a:	f7ff fdf9 	bl	8002c70 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800307e:	46c0      	nop			; (mov r8, r8)
 8003080:	46bd      	mov	sp, r7
 8003082:	b004      	add	sp, #16
 8003084:	bd80      	pop	{r7, pc}

08003086 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b084      	sub	sp, #16
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003092:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003098:	2240      	movs	r2, #64	; 0x40
 800309a:	431a      	orrs	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a4:	2204      	movs	r2, #4
 80030a6:	431a      	orrs	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	0018      	movs	r0, r3
 80030b0:	f7ff fde6 	bl	8002c80 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80030b4:	46c0      	nop			; (mov r8, r8)
 80030b6:	46bd      	mov	sp, r7
 80030b8:	b004      	add	sp, #16
 80030ba:	bd80      	pop	{r7, pc}

080030bc <__NVIC_EnableIRQ>:
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	0002      	movs	r2, r0
 80030c4:	1dfb      	adds	r3, r7, #7
 80030c6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80030c8:	1dfb      	adds	r3, r7, #7
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	2b7f      	cmp	r3, #127	; 0x7f
 80030ce:	d809      	bhi.n	80030e4 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030d0:	1dfb      	adds	r3, r7, #7
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	001a      	movs	r2, r3
 80030d6:	231f      	movs	r3, #31
 80030d8:	401a      	ands	r2, r3
 80030da:	4b04      	ldr	r3, [pc, #16]	; (80030ec <__NVIC_EnableIRQ+0x30>)
 80030dc:	2101      	movs	r1, #1
 80030de:	4091      	lsls	r1, r2
 80030e0:	000a      	movs	r2, r1
 80030e2:	601a      	str	r2, [r3, #0]
}
 80030e4:	46c0      	nop			; (mov r8, r8)
 80030e6:	46bd      	mov	sp, r7
 80030e8:	b002      	add	sp, #8
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	e000e100 	.word	0xe000e100

080030f0 <__NVIC_SetPriority>:
{
 80030f0:	b590      	push	{r4, r7, lr}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	0002      	movs	r2, r0
 80030f8:	6039      	str	r1, [r7, #0]
 80030fa:	1dfb      	adds	r3, r7, #7
 80030fc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80030fe:	1dfb      	adds	r3, r7, #7
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	2b7f      	cmp	r3, #127	; 0x7f
 8003104:	d828      	bhi.n	8003158 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003106:	4a2f      	ldr	r2, [pc, #188]	; (80031c4 <__NVIC_SetPriority+0xd4>)
 8003108:	1dfb      	adds	r3, r7, #7
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	b25b      	sxtb	r3, r3
 800310e:	089b      	lsrs	r3, r3, #2
 8003110:	33c0      	adds	r3, #192	; 0xc0
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	589b      	ldr	r3, [r3, r2]
 8003116:	1dfa      	adds	r2, r7, #7
 8003118:	7812      	ldrb	r2, [r2, #0]
 800311a:	0011      	movs	r1, r2
 800311c:	2203      	movs	r2, #3
 800311e:	400a      	ands	r2, r1
 8003120:	00d2      	lsls	r2, r2, #3
 8003122:	21ff      	movs	r1, #255	; 0xff
 8003124:	4091      	lsls	r1, r2
 8003126:	000a      	movs	r2, r1
 8003128:	43d2      	mvns	r2, r2
 800312a:	401a      	ands	r2, r3
 800312c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	019b      	lsls	r3, r3, #6
 8003132:	22ff      	movs	r2, #255	; 0xff
 8003134:	401a      	ands	r2, r3
 8003136:	1dfb      	adds	r3, r7, #7
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	0018      	movs	r0, r3
 800313c:	2303      	movs	r3, #3
 800313e:	4003      	ands	r3, r0
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003144:	481f      	ldr	r0, [pc, #124]	; (80031c4 <__NVIC_SetPriority+0xd4>)
 8003146:	1dfb      	adds	r3, r7, #7
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	b25b      	sxtb	r3, r3
 800314c:	089b      	lsrs	r3, r3, #2
 800314e:	430a      	orrs	r2, r1
 8003150:	33c0      	adds	r3, #192	; 0xc0
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	501a      	str	r2, [r3, r0]
}
 8003156:	e031      	b.n	80031bc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003158:	4a1b      	ldr	r2, [pc, #108]	; (80031c8 <__NVIC_SetPriority+0xd8>)
 800315a:	1dfb      	adds	r3, r7, #7
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	0019      	movs	r1, r3
 8003160:	230f      	movs	r3, #15
 8003162:	400b      	ands	r3, r1
 8003164:	3b08      	subs	r3, #8
 8003166:	089b      	lsrs	r3, r3, #2
 8003168:	3306      	adds	r3, #6
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	18d3      	adds	r3, r2, r3
 800316e:	3304      	adds	r3, #4
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	1dfa      	adds	r2, r7, #7
 8003174:	7812      	ldrb	r2, [r2, #0]
 8003176:	0011      	movs	r1, r2
 8003178:	2203      	movs	r2, #3
 800317a:	400a      	ands	r2, r1
 800317c:	00d2      	lsls	r2, r2, #3
 800317e:	21ff      	movs	r1, #255	; 0xff
 8003180:	4091      	lsls	r1, r2
 8003182:	000a      	movs	r2, r1
 8003184:	43d2      	mvns	r2, r2
 8003186:	401a      	ands	r2, r3
 8003188:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	019b      	lsls	r3, r3, #6
 800318e:	22ff      	movs	r2, #255	; 0xff
 8003190:	401a      	ands	r2, r3
 8003192:	1dfb      	adds	r3, r7, #7
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	0018      	movs	r0, r3
 8003198:	2303      	movs	r3, #3
 800319a:	4003      	ands	r3, r0
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031a0:	4809      	ldr	r0, [pc, #36]	; (80031c8 <__NVIC_SetPriority+0xd8>)
 80031a2:	1dfb      	adds	r3, r7, #7
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	001c      	movs	r4, r3
 80031a8:	230f      	movs	r3, #15
 80031aa:	4023      	ands	r3, r4
 80031ac:	3b08      	subs	r3, #8
 80031ae:	089b      	lsrs	r3, r3, #2
 80031b0:	430a      	orrs	r2, r1
 80031b2:	3306      	adds	r3, #6
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	18c3      	adds	r3, r0, r3
 80031b8:	3304      	adds	r3, #4
 80031ba:	601a      	str	r2, [r3, #0]
}
 80031bc:	46c0      	nop			; (mov r8, r8)
 80031be:	46bd      	mov	sp, r7
 80031c0:	b003      	add	sp, #12
 80031c2:	bd90      	pop	{r4, r7, pc}
 80031c4:	e000e100 	.word	0xe000e100
 80031c8:	e000ed00 	.word	0xe000ed00

080031cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	1e5a      	subs	r2, r3, #1
 80031d8:	2380      	movs	r3, #128	; 0x80
 80031da:	045b      	lsls	r3, r3, #17
 80031dc:	429a      	cmp	r2, r3
 80031de:	d301      	bcc.n	80031e4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031e0:	2301      	movs	r3, #1
 80031e2:	e010      	b.n	8003206 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031e4:	4b0a      	ldr	r3, [pc, #40]	; (8003210 <SysTick_Config+0x44>)
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	3a01      	subs	r2, #1
 80031ea:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031ec:	2301      	movs	r3, #1
 80031ee:	425b      	negs	r3, r3
 80031f0:	2103      	movs	r1, #3
 80031f2:	0018      	movs	r0, r3
 80031f4:	f7ff ff7c 	bl	80030f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031f8:	4b05      	ldr	r3, [pc, #20]	; (8003210 <SysTick_Config+0x44>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031fe:	4b04      	ldr	r3, [pc, #16]	; (8003210 <SysTick_Config+0x44>)
 8003200:	2207      	movs	r2, #7
 8003202:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003204:	2300      	movs	r3, #0
}
 8003206:	0018      	movs	r0, r3
 8003208:	46bd      	mov	sp, r7
 800320a:	b002      	add	sp, #8
 800320c:	bd80      	pop	{r7, pc}
 800320e:	46c0      	nop			; (mov r8, r8)
 8003210:	e000e010 	.word	0xe000e010

08003214 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	60b9      	str	r1, [r7, #8]
 800321c:	607a      	str	r2, [r7, #4]
 800321e:	210f      	movs	r1, #15
 8003220:	187b      	adds	r3, r7, r1
 8003222:	1c02      	adds	r2, r0, #0
 8003224:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003226:	68ba      	ldr	r2, [r7, #8]
 8003228:	187b      	adds	r3, r7, r1
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	b25b      	sxtb	r3, r3
 800322e:	0011      	movs	r1, r2
 8003230:	0018      	movs	r0, r3
 8003232:	f7ff ff5d 	bl	80030f0 <__NVIC_SetPriority>
}
 8003236:	46c0      	nop			; (mov r8, r8)
 8003238:	46bd      	mov	sp, r7
 800323a:	b004      	add	sp, #16
 800323c:	bd80      	pop	{r7, pc}

0800323e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b082      	sub	sp, #8
 8003242:	af00      	add	r7, sp, #0
 8003244:	0002      	movs	r2, r0
 8003246:	1dfb      	adds	r3, r7, #7
 8003248:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800324a:	1dfb      	adds	r3, r7, #7
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	b25b      	sxtb	r3, r3
 8003250:	0018      	movs	r0, r3
 8003252:	f7ff ff33 	bl	80030bc <__NVIC_EnableIRQ>
}
 8003256:	46c0      	nop			; (mov r8, r8)
 8003258:	46bd      	mov	sp, r7
 800325a:	b002      	add	sp, #8
 800325c:	bd80      	pop	{r7, pc}

0800325e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b082      	sub	sp, #8
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	0018      	movs	r0, r3
 800326a:	f7ff ffaf 	bl	80031cc <SysTick_Config>
 800326e:	0003      	movs	r3, r0
}
 8003270:	0018      	movs	r0, r3
 8003272:	46bd      	mov	sp, r7
 8003274:	b002      	add	sp, #8
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e015      	b.n	80032b6 <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if (hdac->State == HAL_DAC_STATE_RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	791b      	ldrb	r3, [r3, #4]
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b00      	cmp	r3, #0
 8003292:	d106      	bne.n	80032a2 <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	0018      	movs	r0, r3
 800329e:	f7fe ffc5 	bl	800222c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2202      	movs	r2, #2
 80032a6:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	0018      	movs	r0, r3
 80032b8:	46bd      	mov	sp, r7
 80032ba:	b002      	add	sp, #8
 80032bc:	bd80      	pop	{r7, pc}

080032be <HAL_DAC_ConfigChannel>:
  *          This parameter can be one of the following values:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b086      	sub	sp, #24
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	60f8      	str	r0, [r7, #12]
 80032c6:	60b9      	str	r1, [r7, #8]
 80032c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80032ca:	2300      	movs	r3, #0
 80032cc:	617b      	str	r3, [r7, #20]
 80032ce:	2300      	movs	r3, #0
 80032d0:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	795b      	ldrb	r3, [r3, #5]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d101      	bne.n	80032de <HAL_DAC_ConfigChannel+0x20>
 80032da:	2302      	movs	r3, #2
 80032dc:	e029      	b.n	8003332 <HAL_DAC_ConfigChannel+0x74>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2201      	movs	r2, #1
 80032e2:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2202      	movs	r2, #2
 80032e8:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel); 
 80032f2:	223e      	movs	r2, #62	; 0x3e
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	409a      	lsls	r2, r3
 80032f8:	0013      	movs	r3, r2
 80032fa:	43da      	mvns	r2, r3
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	4013      	ands	r3, r2
 8003300:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	4313      	orrs	r3, r2
 800330c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	409a      	lsls	r2, r3
 8003314:	0013      	movs	r3, r2
 8003316:	697a      	ldr	r2, [r7, #20]
 8003318:	4313      	orrs	r3, r2
 800331a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2201      	movs	r2, #1
 8003328:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	0018      	movs	r0, r3
 8003334:	46bd      	mov	sp, r7
 8003336:	b006      	add	sp, #24
 8003338:	bd80      	pop	{r7, pc}

0800333a <HAL_DAC_Start>:
       /* STM32F091xC  STM32F098xx */

#if defined (STM32F051x8) || defined (STM32F058xx)

HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b082      	sub	sp, #8
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
 8003342:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	795b      	ldrb	r3, [r3, #5]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d101      	bne.n	8003350 <HAL_DAC_Start+0x16>
 800334c:	2302      	movs	r3, #2
 800334e:	e028      	b.n	80033a2 <HAL_DAC_Start+0x68>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2202      	movs	r2, #2
 800335a:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6819      	ldr	r1, [r3, #0]
 8003362:	2201      	movs	r2, #1
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	409a      	lsls	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	430a      	orrs	r2, r1
 800336e:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10e      	bne.n	8003394 <HAL_DAC_Start+0x5a>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	223c      	movs	r2, #60	; 0x3c
 800337e:	4013      	ands	r3, r2
 8003380:	2b3c      	cmp	r3, #60	; 0x3c
 8003382:	d107      	bne.n	8003394 <HAL_DAC_Start+0x5a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	685a      	ldr	r2, [r3, #4]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2101      	movs	r1, #1
 8003390:	430a      	orrs	r2, r1
 8003392:	605a      	str	r2, [r3, #4]
    }
  }
 
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	0018      	movs	r0, r3
 80033a4:	46bd      	mov	sp, r7
 80033a6:	b002      	add	sp, #8
 80033a8:	bd80      	pop	{r7, pc}
	...

080033ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80033b4:	2300      	movs	r3, #0
 80033b6:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e036      	b.n	8003430 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2221      	movs	r2, #33	; 0x21
 80033c6:	2102      	movs	r1, #2
 80033c8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	4a18      	ldr	r2, [pc, #96]	; (8003438 <HAL_DMA_Init+0x8c>)
 80033d6:	4013      	ands	r3, r2
 80033d8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80033e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	69db      	ldr	r3, [r3, #28]
 8003400:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	4313      	orrs	r3, r2
 8003406:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	0018      	movs	r0, r3
 8003414:	f000 f9c4 	bl	80037a0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2221      	movs	r2, #33	; 0x21
 8003422:	2101      	movs	r1, #1
 8003424:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2220      	movs	r2, #32
 800342a:	2100      	movs	r1, #0
 800342c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}  
 8003430:	0018      	movs	r0, r3
 8003432:	46bd      	mov	sp, r7
 8003434:	b004      	add	sp, #16
 8003436:	bd80      	pop	{r7, pc}
 8003438:	ffffc00f 	.word	0xffffc00f

0800343c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
 8003448:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800344a:	2317      	movs	r3, #23
 800344c:	18fb      	adds	r3, r7, r3
 800344e:	2200      	movs	r2, #0
 8003450:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2220      	movs	r2, #32
 8003456:	5c9b      	ldrb	r3, [r3, r2]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d101      	bne.n	8003460 <HAL_DMA_Start_IT+0x24>
 800345c:	2302      	movs	r3, #2
 800345e:	e04f      	b.n	8003500 <HAL_DMA_Start_IT+0xc4>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2220      	movs	r2, #32
 8003464:	2101      	movs	r1, #1
 8003466:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2221      	movs	r2, #33	; 0x21
 800346c:	5c9b      	ldrb	r3, [r3, r2]
 800346e:	b2db      	uxtb	r3, r3
 8003470:	2b01      	cmp	r3, #1
 8003472:	d13a      	bne.n	80034ea <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2221      	movs	r2, #33	; 0x21
 8003478:	2102      	movs	r1, #2
 800347a:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2101      	movs	r1, #1
 800348e:	438a      	bics	r2, r1
 8003490:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	68b9      	ldr	r1, [r7, #8]
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f000 f954 	bl	8003746 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d008      	beq.n	80034b8 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	210e      	movs	r1, #14
 80034b2:	430a      	orrs	r2, r1
 80034b4:	601a      	str	r2, [r3, #0]
 80034b6:	e00f      	b.n	80034d8 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	210a      	movs	r1, #10
 80034c4:	430a      	orrs	r2, r1
 80034c6:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2104      	movs	r1, #4
 80034d4:	438a      	bics	r2, r1
 80034d6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2101      	movs	r1, #1
 80034e4:	430a      	orrs	r2, r1
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	e007      	b.n	80034fa <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2220      	movs	r2, #32
 80034ee:	2100      	movs	r1, #0
 80034f0:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80034f2:	2317      	movs	r3, #23
 80034f4:	18fb      	adds	r3, r7, r3
 80034f6:	2202      	movs	r2, #2
 80034f8:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 80034fa:	2317      	movs	r3, #23
 80034fc:	18fb      	adds	r3, r7, r3
 80034fe:	781b      	ldrb	r3, [r3, #0]
} 
 8003500:	0018      	movs	r0, r3
 8003502:	46bd      	mov	sp, r7
 8003504:	b006      	add	sp, #24
 8003506:	bd80      	pop	{r7, pc}

08003508 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2221      	movs	r2, #33	; 0x21
 8003514:	5c9b      	ldrb	r3, [r3, r2]
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d008      	beq.n	800352e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2204      	movs	r2, #4
 8003520:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2220      	movs	r2, #32
 8003526:	2100      	movs	r1, #0
 8003528:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e020      	b.n	8003570 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	210e      	movs	r1, #14
 800353a:	438a      	bics	r2, r1
 800353c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2101      	movs	r1, #1
 800354a:	438a      	bics	r2, r1
 800354c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003556:	2101      	movs	r1, #1
 8003558:	4091      	lsls	r1, r2
 800355a:	000a      	movs	r2, r1
 800355c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2221      	movs	r2, #33	; 0x21
 8003562:	2101      	movs	r1, #1
 8003564:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2220      	movs	r2, #32
 800356a:	2100      	movs	r1, #0
 800356c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	0018      	movs	r0, r3
 8003572:	46bd      	mov	sp, r7
 8003574:	b002      	add	sp, #8
 8003576:	bd80      	pop	{r7, pc}

08003578 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003580:	210f      	movs	r1, #15
 8003582:	187b      	adds	r3, r7, r1
 8003584:	2200      	movs	r2, #0
 8003586:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2221      	movs	r2, #33	; 0x21
 800358c:	5c9b      	ldrb	r3, [r3, r2]
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d006      	beq.n	80035a2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2204      	movs	r2, #4
 8003598:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800359a:	187b      	adds	r3, r7, r1
 800359c:	2201      	movs	r2, #1
 800359e:	701a      	strb	r2, [r3, #0]
 80035a0:	e028      	b.n	80035f4 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	210e      	movs	r1, #14
 80035ae:	438a      	bics	r2, r1
 80035b0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2101      	movs	r1, #1
 80035be:	438a      	bics	r2, r1
 80035c0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ca:	2101      	movs	r1, #1
 80035cc:	4091      	lsls	r1, r2
 80035ce:	000a      	movs	r2, r1
 80035d0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2221      	movs	r2, #33	; 0x21
 80035d6:	2101      	movs	r1, #1
 80035d8:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2220      	movs	r2, #32
 80035de:	2100      	movs	r1, #0
 80035e0:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d004      	beq.n	80035f4 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	0010      	movs	r0, r2
 80035f2:	4798      	blx	r3
    } 
  }
  return status;
 80035f4:	230f      	movs	r3, #15
 80035f6:	18fb      	adds	r3, r7, r3
 80035f8:	781b      	ldrb	r3, [r3, #0]
}
 80035fa:	0018      	movs	r0, r3
 80035fc:	46bd      	mov	sp, r7
 80035fe:	b004      	add	sp, #16
 8003600:	bd80      	pop	{r7, pc}

08003602 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b084      	sub	sp, #16
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361e:	2204      	movs	r2, #4
 8003620:	409a      	lsls	r2, r3
 8003622:	0013      	movs	r3, r2
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	4013      	ands	r3, r2
 8003628:	d024      	beq.n	8003674 <HAL_DMA_IRQHandler+0x72>
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	2204      	movs	r2, #4
 800362e:	4013      	ands	r3, r2
 8003630:	d020      	beq.n	8003674 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2220      	movs	r2, #32
 800363a:	4013      	ands	r3, r2
 800363c:	d107      	bne.n	800364e <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2104      	movs	r1, #4
 800364a:	438a      	bics	r2, r1
 800364c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003656:	2104      	movs	r1, #4
 8003658:	4091      	lsls	r1, r2
 800365a:	000a      	movs	r2, r1
 800365c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003662:	2b00      	cmp	r3, #0
 8003664:	d100      	bne.n	8003668 <HAL_DMA_IRQHandler+0x66>
 8003666:	e06a      	b.n	800373e <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	0010      	movs	r0, r2
 8003670:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003672:	e064      	b.n	800373e <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003678:	2202      	movs	r2, #2
 800367a:	409a      	lsls	r2, r3
 800367c:	0013      	movs	r3, r2
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	4013      	ands	r3, r2
 8003682:	d02b      	beq.n	80036dc <HAL_DMA_IRQHandler+0xda>
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	2202      	movs	r2, #2
 8003688:	4013      	ands	r3, r2
 800368a:	d027      	beq.n	80036dc <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2220      	movs	r2, #32
 8003694:	4013      	ands	r3, r2
 8003696:	d10b      	bne.n	80036b0 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	210a      	movs	r1, #10
 80036a4:	438a      	bics	r2, r1
 80036a6:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2221      	movs	r2, #33	; 0x21
 80036ac:	2101      	movs	r1, #1
 80036ae:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b8:	2102      	movs	r1, #2
 80036ba:	4091      	lsls	r1, r2
 80036bc:	000a      	movs	r2, r1
 80036be:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2220      	movs	r2, #32
 80036c4:	2100      	movs	r1, #0
 80036c6:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d036      	beq.n	800373e <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	0010      	movs	r0, r2
 80036d8:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80036da:	e030      	b.n	800373e <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e0:	2208      	movs	r2, #8
 80036e2:	409a      	lsls	r2, r3
 80036e4:	0013      	movs	r3, r2
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	4013      	ands	r3, r2
 80036ea:	d028      	beq.n	800373e <HAL_DMA_IRQHandler+0x13c>
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	2208      	movs	r2, #8
 80036f0:	4013      	ands	r3, r2
 80036f2:	d024      	beq.n	800373e <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	210e      	movs	r1, #14
 8003700:	438a      	bics	r2, r1
 8003702:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800370c:	2101      	movs	r1, #1
 800370e:	4091      	lsls	r1, r2
 8003710:	000a      	movs	r2, r1
 8003712:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2221      	movs	r2, #33	; 0x21
 800371e:	2101      	movs	r1, #1
 8003720:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2220      	movs	r2, #32
 8003726:	2100      	movs	r1, #0
 8003728:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372e:	2b00      	cmp	r3, #0
 8003730:	d005      	beq.n	800373e <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	0010      	movs	r0, r2
 800373a:	4798      	blx	r3
    }
   }
}  
 800373c:	e7ff      	b.n	800373e <HAL_DMA_IRQHandler+0x13c>
 800373e:	46c0      	nop			; (mov r8, r8)
 8003740:	46bd      	mov	sp, r7
 8003742:	b004      	add	sp, #16
 8003744:	bd80      	pop	{r7, pc}

08003746 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b084      	sub	sp, #16
 800374a:	af00      	add	r7, sp, #0
 800374c:	60f8      	str	r0, [r7, #12]
 800374e:	60b9      	str	r1, [r7, #8]
 8003750:	607a      	str	r2, [r7, #4]
 8003752:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800375c:	2101      	movs	r1, #1
 800375e:	4091      	lsls	r1, r2
 8003760:	000a      	movs	r2, r1
 8003762:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	2b10      	cmp	r3, #16
 8003772:	d108      	bne.n	8003786 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68ba      	ldr	r2, [r7, #8]
 8003782:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003784:	e007      	b.n	8003796 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68ba      	ldr	r2, [r7, #8]
 800378c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	60da      	str	r2, [r3, #12]
}
 8003796:	46c0      	nop			; (mov r8, r8)
 8003798:	46bd      	mov	sp, r7
 800379a:	b004      	add	sp, #16
 800379c:	bd80      	pop	{r7, pc}
	...

080037a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a08      	ldr	r2, [pc, #32]	; (80037d0 <DMA_CalcBaseAndBitshift+0x30>)
 80037ae:	4694      	mov	ip, r2
 80037b0:	4463      	add	r3, ip
 80037b2:	2114      	movs	r1, #20
 80037b4:	0018      	movs	r0, r3
 80037b6:	f7fc fcb9 	bl	800012c <__udivsi3>
 80037ba:	0003      	movs	r3, r0
 80037bc:	009a      	lsls	r2, r3, #2
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a03      	ldr	r2, [pc, #12]	; (80037d4 <DMA_CalcBaseAndBitshift+0x34>)
 80037c6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80037c8:	46c0      	nop			; (mov r8, r8)
 80037ca:	46bd      	mov	sp, r7
 80037cc:	b002      	add	sp, #8
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	bffdfff8 	.word	0xbffdfff8
 80037d4:	40020000 	.word	0x40020000

080037d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037e2:	2300      	movs	r3, #0
 80037e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037e6:	e14f      	b.n	8003a88 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2101      	movs	r1, #1
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	4091      	lsls	r1, r2
 80037f2:	000a      	movs	r2, r1
 80037f4:	4013      	ands	r3, r2
 80037f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d100      	bne.n	8003800 <HAL_GPIO_Init+0x28>
 80037fe:	e140      	b.n	8003a82 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	2203      	movs	r2, #3
 8003806:	4013      	ands	r3, r2
 8003808:	2b01      	cmp	r3, #1
 800380a:	d005      	beq.n	8003818 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	2203      	movs	r2, #3
 8003812:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003814:	2b02      	cmp	r3, #2
 8003816:	d130      	bne.n	800387a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	2203      	movs	r2, #3
 8003824:	409a      	lsls	r2, r3
 8003826:	0013      	movs	r3, r2
 8003828:	43da      	mvns	r2, r3
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	4013      	ands	r3, r2
 800382e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	68da      	ldr	r2, [r3, #12]
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	409a      	lsls	r2, r3
 800383a:	0013      	movs	r3, r2
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	4313      	orrs	r3, r2
 8003840:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800384e:	2201      	movs	r2, #1
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	409a      	lsls	r2, r3
 8003854:	0013      	movs	r3, r2
 8003856:	43da      	mvns	r2, r3
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	4013      	ands	r3, r2
 800385c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	091b      	lsrs	r3, r3, #4
 8003864:	2201      	movs	r2, #1
 8003866:	401a      	ands	r2, r3
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	409a      	lsls	r2, r3
 800386c:	0013      	movs	r3, r2
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	4313      	orrs	r3, r2
 8003872:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2203      	movs	r2, #3
 8003880:	4013      	ands	r3, r2
 8003882:	2b03      	cmp	r3, #3
 8003884:	d017      	beq.n	80038b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	2203      	movs	r2, #3
 8003892:	409a      	lsls	r2, r3
 8003894:	0013      	movs	r3, r2
 8003896:	43da      	mvns	r2, r3
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	4013      	ands	r3, r2
 800389c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	689a      	ldr	r2, [r3, #8]
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	409a      	lsls	r2, r3
 80038a8:	0013      	movs	r3, r2
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	2203      	movs	r2, #3
 80038bc:	4013      	ands	r3, r2
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d123      	bne.n	800390a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	08da      	lsrs	r2, r3, #3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	3208      	adds	r2, #8
 80038ca:	0092      	lsls	r2, r2, #2
 80038cc:	58d3      	ldr	r3, [r2, r3]
 80038ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	2207      	movs	r2, #7
 80038d4:	4013      	ands	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	220f      	movs	r2, #15
 80038da:	409a      	lsls	r2, r3
 80038dc:	0013      	movs	r3, r2
 80038de:	43da      	mvns	r2, r3
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	4013      	ands	r3, r2
 80038e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	691a      	ldr	r2, [r3, #16]
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2107      	movs	r1, #7
 80038ee:	400b      	ands	r3, r1
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	409a      	lsls	r2, r3
 80038f4:	0013      	movs	r3, r2
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	08da      	lsrs	r2, r3, #3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	3208      	adds	r2, #8
 8003904:	0092      	lsls	r2, r2, #2
 8003906:	6939      	ldr	r1, [r7, #16]
 8003908:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	2203      	movs	r2, #3
 8003916:	409a      	lsls	r2, r3
 8003918:	0013      	movs	r3, r2
 800391a:	43da      	mvns	r2, r3
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	4013      	ands	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	2203      	movs	r2, #3
 8003928:	401a      	ands	r2, r3
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	409a      	lsls	r2, r3
 8003930:	0013      	movs	r3, r2
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	4313      	orrs	r3, r2
 8003936:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	23c0      	movs	r3, #192	; 0xc0
 8003944:	029b      	lsls	r3, r3, #10
 8003946:	4013      	ands	r3, r2
 8003948:	d100      	bne.n	800394c <HAL_GPIO_Init+0x174>
 800394a:	e09a      	b.n	8003a82 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800394c:	4b54      	ldr	r3, [pc, #336]	; (8003aa0 <HAL_GPIO_Init+0x2c8>)
 800394e:	699a      	ldr	r2, [r3, #24]
 8003950:	4b53      	ldr	r3, [pc, #332]	; (8003aa0 <HAL_GPIO_Init+0x2c8>)
 8003952:	2101      	movs	r1, #1
 8003954:	430a      	orrs	r2, r1
 8003956:	619a      	str	r2, [r3, #24]
 8003958:	4b51      	ldr	r3, [pc, #324]	; (8003aa0 <HAL_GPIO_Init+0x2c8>)
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	2201      	movs	r2, #1
 800395e:	4013      	ands	r3, r2
 8003960:	60bb      	str	r3, [r7, #8]
 8003962:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003964:	4a4f      	ldr	r2, [pc, #316]	; (8003aa4 <HAL_GPIO_Init+0x2cc>)
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	089b      	lsrs	r3, r3, #2
 800396a:	3302      	adds	r3, #2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	589b      	ldr	r3, [r3, r2]
 8003970:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	2203      	movs	r2, #3
 8003976:	4013      	ands	r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	220f      	movs	r2, #15
 800397c:	409a      	lsls	r2, r3
 800397e:	0013      	movs	r3, r2
 8003980:	43da      	mvns	r2, r3
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	4013      	ands	r3, r2
 8003986:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	2390      	movs	r3, #144	; 0x90
 800398c:	05db      	lsls	r3, r3, #23
 800398e:	429a      	cmp	r2, r3
 8003990:	d013      	beq.n	80039ba <HAL_GPIO_Init+0x1e2>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a44      	ldr	r2, [pc, #272]	; (8003aa8 <HAL_GPIO_Init+0x2d0>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d00d      	beq.n	80039b6 <HAL_GPIO_Init+0x1de>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a43      	ldr	r2, [pc, #268]	; (8003aac <HAL_GPIO_Init+0x2d4>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d007      	beq.n	80039b2 <HAL_GPIO_Init+0x1da>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a42      	ldr	r2, [pc, #264]	; (8003ab0 <HAL_GPIO_Init+0x2d8>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d101      	bne.n	80039ae <HAL_GPIO_Init+0x1d6>
 80039aa:	2303      	movs	r3, #3
 80039ac:	e006      	b.n	80039bc <HAL_GPIO_Init+0x1e4>
 80039ae:	2305      	movs	r3, #5
 80039b0:	e004      	b.n	80039bc <HAL_GPIO_Init+0x1e4>
 80039b2:	2302      	movs	r3, #2
 80039b4:	e002      	b.n	80039bc <HAL_GPIO_Init+0x1e4>
 80039b6:	2301      	movs	r3, #1
 80039b8:	e000      	b.n	80039bc <HAL_GPIO_Init+0x1e4>
 80039ba:	2300      	movs	r3, #0
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	2103      	movs	r1, #3
 80039c0:	400a      	ands	r2, r1
 80039c2:	0092      	lsls	r2, r2, #2
 80039c4:	4093      	lsls	r3, r2
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80039cc:	4935      	ldr	r1, [pc, #212]	; (8003aa4 <HAL_GPIO_Init+0x2cc>)
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	089b      	lsrs	r3, r3, #2
 80039d2:	3302      	adds	r3, #2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039da:	4b36      	ldr	r3, [pc, #216]	; (8003ab4 <HAL_GPIO_Init+0x2dc>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	43da      	mvns	r2, r3
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	4013      	ands	r3, r2
 80039e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685a      	ldr	r2, [r3, #4]
 80039ee:	2380      	movs	r3, #128	; 0x80
 80039f0:	025b      	lsls	r3, r3, #9
 80039f2:	4013      	ands	r3, r2
 80039f4:	d003      	beq.n	80039fe <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80039fe:	4b2d      	ldr	r3, [pc, #180]	; (8003ab4 <HAL_GPIO_Init+0x2dc>)
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003a04:	4b2b      	ldr	r3, [pc, #172]	; (8003ab4 <HAL_GPIO_Init+0x2dc>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	43da      	mvns	r2, r3
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	4013      	ands	r3, r2
 8003a12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685a      	ldr	r2, [r3, #4]
 8003a18:	2380      	movs	r3, #128	; 0x80
 8003a1a:	029b      	lsls	r3, r3, #10
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	d003      	beq.n	8003a28 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003a28:	4b22      	ldr	r3, [pc, #136]	; (8003ab4 <HAL_GPIO_Init+0x2dc>)
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a2e:	4b21      	ldr	r3, [pc, #132]	; (8003ab4 <HAL_GPIO_Init+0x2dc>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	43da      	mvns	r2, r3
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	685a      	ldr	r2, [r3, #4]
 8003a42:	2380      	movs	r3, #128	; 0x80
 8003a44:	035b      	lsls	r3, r3, #13
 8003a46:	4013      	ands	r3, r2
 8003a48:	d003      	beq.n	8003a52 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003a52:	4b18      	ldr	r3, [pc, #96]	; (8003ab4 <HAL_GPIO_Init+0x2dc>)
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003a58:	4b16      	ldr	r3, [pc, #88]	; (8003ab4 <HAL_GPIO_Init+0x2dc>)
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	43da      	mvns	r2, r3
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	4013      	ands	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	2380      	movs	r3, #128	; 0x80
 8003a6e:	039b      	lsls	r3, r3, #14
 8003a70:	4013      	ands	r3, r2
 8003a72:	d003      	beq.n	8003a7c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003a7c:	4b0d      	ldr	r3, [pc, #52]	; (8003ab4 <HAL_GPIO_Init+0x2dc>)
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	3301      	adds	r3, #1
 8003a86:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	40da      	lsrs	r2, r3
 8003a90:	1e13      	subs	r3, r2, #0
 8003a92:	d000      	beq.n	8003a96 <HAL_GPIO_Init+0x2be>
 8003a94:	e6a8      	b.n	80037e8 <HAL_GPIO_Init+0x10>
  } 
}
 8003a96:	46c0      	nop			; (mov r8, r8)
 8003a98:	46c0      	nop			; (mov r8, r8)
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	b006      	add	sp, #24
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	40010000 	.word	0x40010000
 8003aa8:	48000400 	.word	0x48000400
 8003aac:	48000800 	.word	0x48000800
 8003ab0:	48000c00 	.word	0x48000c00
 8003ab4:	40010400 	.word	0x40010400

08003ab8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	000a      	movs	r2, r1
 8003ac2:	1cbb      	adds	r3, r7, #2
 8003ac4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	1cba      	adds	r2, r7, #2
 8003acc:	8812      	ldrh	r2, [r2, #0]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	d004      	beq.n	8003adc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003ad2:	230f      	movs	r3, #15
 8003ad4:	18fb      	adds	r3, r7, r3
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	701a      	strb	r2, [r3, #0]
 8003ada:	e003      	b.n	8003ae4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003adc:	230f      	movs	r3, #15
 8003ade:	18fb      	adds	r3, r7, r3
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003ae4:	230f      	movs	r3, #15
 8003ae6:	18fb      	adds	r3, r7, r3
 8003ae8:	781b      	ldrb	r3, [r3, #0]
  }
 8003aea:	0018      	movs	r0, r3
 8003aec:	46bd      	mov	sp, r7
 8003aee:	b004      	add	sp, #16
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b082      	sub	sp, #8
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
 8003afa:	0008      	movs	r0, r1
 8003afc:	0011      	movs	r1, r2
 8003afe:	1cbb      	adds	r3, r7, #2
 8003b00:	1c02      	adds	r2, r0, #0
 8003b02:	801a      	strh	r2, [r3, #0]
 8003b04:	1c7b      	adds	r3, r7, #1
 8003b06:	1c0a      	adds	r2, r1, #0
 8003b08:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b0a:	1c7b      	adds	r3, r7, #1
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d004      	beq.n	8003b1c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b12:	1cbb      	adds	r3, r7, #2
 8003b14:	881a      	ldrh	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b1a:	e003      	b.n	8003b24 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b1c:	1cbb      	adds	r3, r7, #2
 8003b1e:	881a      	ldrh	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b24:	46c0      	nop			; (mov r8, r8)
 8003b26:	46bd      	mov	sp, r7
 8003b28:	b002      	add	sp, #8
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e082      	b.n	8003c44 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2241      	movs	r2, #65	; 0x41
 8003b42:	5c9b      	ldrb	r3, [r3, r2]
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d107      	bne.n	8003b5a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2240      	movs	r2, #64	; 0x40
 8003b4e:	2100      	movs	r1, #0
 8003b50:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	0018      	movs	r0, r3
 8003b56:	f7fe fbaf 	bl	80022b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2241      	movs	r2, #65	; 0x41
 8003b5e:	2124      	movs	r1, #36	; 0x24
 8003b60:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	438a      	bics	r2, r1
 8003b70:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685a      	ldr	r2, [r3, #4]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4934      	ldr	r1, [pc, #208]	; (8003c4c <HAL_I2C_Init+0x120>)
 8003b7c:	400a      	ands	r2, r1
 8003b7e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689a      	ldr	r2, [r3, #8]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4931      	ldr	r1, [pc, #196]	; (8003c50 <HAL_I2C_Init+0x124>)
 8003b8c:	400a      	ands	r2, r1
 8003b8e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d108      	bne.n	8003baa <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689a      	ldr	r2, [r3, #8]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2180      	movs	r1, #128	; 0x80
 8003ba2:	0209      	lsls	r1, r1, #8
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	609a      	str	r2, [r3, #8]
 8003ba8:	e007      	b.n	8003bba <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	689a      	ldr	r2, [r3, #8]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2184      	movs	r1, #132	; 0x84
 8003bb4:	0209      	lsls	r1, r1, #8
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d104      	bne.n	8003bcc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2280      	movs	r2, #128	; 0x80
 8003bc8:	0112      	lsls	r2, r2, #4
 8003bca:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	491f      	ldr	r1, [pc, #124]	; (8003c54 <HAL_I2C_Init+0x128>)
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68da      	ldr	r2, [r3, #12]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	491a      	ldr	r1, [pc, #104]	; (8003c50 <HAL_I2C_Init+0x124>)
 8003be8:	400a      	ands	r2, r1
 8003bea:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	691a      	ldr	r2, [r3, #16]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	69d9      	ldr	r1, [r3, #28]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a1a      	ldr	r2, [r3, #32]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2101      	movs	r1, #1
 8003c22:	430a      	orrs	r2, r1
 8003c24:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2241      	movs	r2, #65	; 0x41
 8003c30:	2120      	movs	r1, #32
 8003c32:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2242      	movs	r2, #66	; 0x42
 8003c3e:	2100      	movs	r1, #0
 8003c40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	0018      	movs	r0, r3
 8003c46:	46bd      	mov	sp, r7
 8003c48:	b002      	add	sp, #8
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	f0ffffff 	.word	0xf0ffffff
 8003c50:	ffff7fff 	.word	0xffff7fff
 8003c54:	02008000 	.word	0x02008000

08003c58 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003c58:	b590      	push	{r4, r7, lr}
 8003c5a:	b089      	sub	sp, #36	; 0x24
 8003c5c:	af02      	add	r7, sp, #8
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	0008      	movs	r0, r1
 8003c62:	607a      	str	r2, [r7, #4]
 8003c64:	0019      	movs	r1, r3
 8003c66:	230a      	movs	r3, #10
 8003c68:	18fb      	adds	r3, r7, r3
 8003c6a:	1c02      	adds	r2, r0, #0
 8003c6c:	801a      	strh	r2, [r3, #0]
 8003c6e:	2308      	movs	r3, #8
 8003c70:	18fb      	adds	r3, r7, r3
 8003c72:	1c0a      	adds	r2, r1, #0
 8003c74:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2241      	movs	r2, #65	; 0x41
 8003c7a:	5c9b      	ldrb	r3, [r3, r2]
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b20      	cmp	r3, #32
 8003c80:	d000      	beq.n	8003c84 <HAL_I2C_Master_Transmit+0x2c>
 8003c82:	e0e7      	b.n	8003e54 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2240      	movs	r2, #64	; 0x40
 8003c88:	5c9b      	ldrb	r3, [r3, r2]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d101      	bne.n	8003c92 <HAL_I2C_Master_Transmit+0x3a>
 8003c8e:	2302      	movs	r3, #2
 8003c90:	e0e1      	b.n	8003e56 <HAL_I2C_Master_Transmit+0x1fe>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2240      	movs	r2, #64	; 0x40
 8003c96:	2101      	movs	r1, #1
 8003c98:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c9a:	f7fe fe07 	bl	80028ac <HAL_GetTick>
 8003c9e:	0003      	movs	r3, r0
 8003ca0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ca2:	2380      	movs	r3, #128	; 0x80
 8003ca4:	0219      	lsls	r1, r3, #8
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	9300      	str	r3, [sp, #0]
 8003cac:	2319      	movs	r3, #25
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f000 fa04 	bl	80040bc <I2C_WaitOnFlagUntilTimeout>
 8003cb4:	1e03      	subs	r3, r0, #0
 8003cb6:	d001      	beq.n	8003cbc <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e0cc      	b.n	8003e56 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2241      	movs	r2, #65	; 0x41
 8003cc0:	2121      	movs	r1, #33	; 0x21
 8003cc2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2242      	movs	r2, #66	; 0x42
 8003cc8:	2110      	movs	r1, #16
 8003cca:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2208      	movs	r2, #8
 8003cdc:	18ba      	adds	r2, r7, r2
 8003cde:	8812      	ldrh	r2, [r2, #0]
 8003ce0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	2bff      	cmp	r3, #255	; 0xff
 8003cf0:	d911      	bls.n	8003d16 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	22ff      	movs	r2, #255	; 0xff
 8003cf6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cfc:	b2da      	uxtb	r2, r3
 8003cfe:	2380      	movs	r3, #128	; 0x80
 8003d00:	045c      	lsls	r4, r3, #17
 8003d02:	230a      	movs	r3, #10
 8003d04:	18fb      	adds	r3, r7, r3
 8003d06:	8819      	ldrh	r1, [r3, #0]
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	4b55      	ldr	r3, [pc, #340]	; (8003e60 <HAL_I2C_Master_Transmit+0x208>)
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	0023      	movs	r3, r4
 8003d10:	f000 fb74 	bl	80043fc <I2C_TransferConfig>
 8003d14:	e075      	b.n	8003e02 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d24:	b2da      	uxtb	r2, r3
 8003d26:	2380      	movs	r3, #128	; 0x80
 8003d28:	049c      	lsls	r4, r3, #18
 8003d2a:	230a      	movs	r3, #10
 8003d2c:	18fb      	adds	r3, r7, r3
 8003d2e:	8819      	ldrh	r1, [r3, #0]
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	4b4b      	ldr	r3, [pc, #300]	; (8003e60 <HAL_I2C_Master_Transmit+0x208>)
 8003d34:	9300      	str	r3, [sp, #0]
 8003d36:	0023      	movs	r3, r4
 8003d38:	f000 fb60 	bl	80043fc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003d3c:	e061      	b.n	8003e02 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	0018      	movs	r0, r3
 8003d46:	f000 f9f8 	bl	800413a <I2C_WaitOnTXISFlagUntilTimeout>
 8003d4a:	1e03      	subs	r3, r0, #0
 8003d4c:	d001      	beq.n	8003d52 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e081      	b.n	8003e56 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d56:	781a      	ldrb	r2, [r3, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	1c5a      	adds	r2, r3, #1
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	b29a      	uxth	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d03a      	beq.n	8003e02 <HAL_I2C_Master_Transmit+0x1aa>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d136      	bne.n	8003e02 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	0013      	movs	r3, r2
 8003d9e:	2200      	movs	r2, #0
 8003da0:	2180      	movs	r1, #128	; 0x80
 8003da2:	f000 f98b 	bl	80040bc <I2C_WaitOnFlagUntilTimeout>
 8003da6:	1e03      	subs	r3, r0, #0
 8003da8:	d001      	beq.n	8003dae <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e053      	b.n	8003e56 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	2bff      	cmp	r3, #255	; 0xff
 8003db6:	d911      	bls.n	8003ddc <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	22ff      	movs	r2, #255	; 0xff
 8003dbc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc2:	b2da      	uxtb	r2, r3
 8003dc4:	2380      	movs	r3, #128	; 0x80
 8003dc6:	045c      	lsls	r4, r3, #17
 8003dc8:	230a      	movs	r3, #10
 8003dca:	18fb      	adds	r3, r7, r3
 8003dcc:	8819      	ldrh	r1, [r3, #0]
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	0023      	movs	r3, r4
 8003dd6:	f000 fb11 	bl	80043fc <I2C_TransferConfig>
 8003dda:	e012      	b.n	8003e02 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dea:	b2da      	uxtb	r2, r3
 8003dec:	2380      	movs	r3, #128	; 0x80
 8003dee:	049c      	lsls	r4, r3, #18
 8003df0:	230a      	movs	r3, #10
 8003df2:	18fb      	adds	r3, r7, r3
 8003df4:	8819      	ldrh	r1, [r3, #0]
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	2300      	movs	r3, #0
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	0023      	movs	r3, r4
 8003dfe:	f000 fafd 	bl	80043fc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d198      	bne.n	8003d3e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	0018      	movs	r0, r3
 8003e14:	f000 f9d0 	bl	80041b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e18:	1e03      	subs	r3, r0, #0
 8003e1a:	d001      	beq.n	8003e20 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e01a      	b.n	8003e56 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2220      	movs	r2, #32
 8003e26:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	490c      	ldr	r1, [pc, #48]	; (8003e64 <HAL_I2C_Master_Transmit+0x20c>)
 8003e34:	400a      	ands	r2, r1
 8003e36:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2241      	movs	r2, #65	; 0x41
 8003e3c:	2120      	movs	r1, #32
 8003e3e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2242      	movs	r2, #66	; 0x42
 8003e44:	2100      	movs	r1, #0
 8003e46:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2240      	movs	r2, #64	; 0x40
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003e50:	2300      	movs	r3, #0
 8003e52:	e000      	b.n	8003e56 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003e54:	2302      	movs	r3, #2
  }
}
 8003e56:	0018      	movs	r0, r3
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	b007      	add	sp, #28
 8003e5c:	bd90      	pop	{r4, r7, pc}
 8003e5e:	46c0      	nop			; (mov r8, r8)
 8003e60:	80002000 	.word	0x80002000
 8003e64:	fe00e800 	.word	0xfe00e800

08003e68 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003e68:	b590      	push	{r4, r7, lr}
 8003e6a:	b089      	sub	sp, #36	; 0x24
 8003e6c:	af02      	add	r7, sp, #8
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	0008      	movs	r0, r1
 8003e72:	607a      	str	r2, [r7, #4]
 8003e74:	0019      	movs	r1, r3
 8003e76:	230a      	movs	r3, #10
 8003e78:	18fb      	adds	r3, r7, r3
 8003e7a:	1c02      	adds	r2, r0, #0
 8003e7c:	801a      	strh	r2, [r3, #0]
 8003e7e:	2308      	movs	r3, #8
 8003e80:	18fb      	adds	r3, r7, r3
 8003e82:	1c0a      	adds	r2, r1, #0
 8003e84:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2241      	movs	r2, #65	; 0x41
 8003e8a:	5c9b      	ldrb	r3, [r3, r2]
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b20      	cmp	r3, #32
 8003e90:	d000      	beq.n	8003e94 <HAL_I2C_Master_Receive+0x2c>
 8003e92:	e0e8      	b.n	8004066 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2240      	movs	r2, #64	; 0x40
 8003e98:	5c9b      	ldrb	r3, [r3, r2]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d101      	bne.n	8003ea2 <HAL_I2C_Master_Receive+0x3a>
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	e0e2      	b.n	8004068 <HAL_I2C_Master_Receive+0x200>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2240      	movs	r2, #64	; 0x40
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003eaa:	f7fe fcff 	bl	80028ac <HAL_GetTick>
 8003eae:	0003      	movs	r3, r0
 8003eb0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003eb2:	2380      	movs	r3, #128	; 0x80
 8003eb4:	0219      	lsls	r1, r3, #8
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	2319      	movs	r3, #25
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f000 f8fc 	bl	80040bc <I2C_WaitOnFlagUntilTimeout>
 8003ec4:	1e03      	subs	r3, r0, #0
 8003ec6:	d001      	beq.n	8003ecc <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e0cd      	b.n	8004068 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2241      	movs	r2, #65	; 0x41
 8003ed0:	2122      	movs	r1, #34	; 0x22
 8003ed2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2242      	movs	r2, #66	; 0x42
 8003ed8:	2110      	movs	r1, #16
 8003eda:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2208      	movs	r2, #8
 8003eec:	18ba      	adds	r2, r7, r2
 8003eee:	8812      	ldrh	r2, [r2, #0]
 8003ef0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	2bff      	cmp	r3, #255	; 0xff
 8003f00:	d911      	bls.n	8003f26 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	22ff      	movs	r2, #255	; 0xff
 8003f06:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	2380      	movs	r3, #128	; 0x80
 8003f10:	045c      	lsls	r4, r3, #17
 8003f12:	230a      	movs	r3, #10
 8003f14:	18fb      	adds	r3, r7, r3
 8003f16:	8819      	ldrh	r1, [r3, #0]
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	4b55      	ldr	r3, [pc, #340]	; (8004070 <HAL_I2C_Master_Receive+0x208>)
 8003f1c:	9300      	str	r3, [sp, #0]
 8003f1e:	0023      	movs	r3, r4
 8003f20:	f000 fa6c 	bl	80043fc <I2C_TransferConfig>
 8003f24:	e076      	b.n	8004014 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f34:	b2da      	uxtb	r2, r3
 8003f36:	2380      	movs	r3, #128	; 0x80
 8003f38:	049c      	lsls	r4, r3, #18
 8003f3a:	230a      	movs	r3, #10
 8003f3c:	18fb      	adds	r3, r7, r3
 8003f3e:	8819      	ldrh	r1, [r3, #0]
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	4b4b      	ldr	r3, [pc, #300]	; (8004070 <HAL_I2C_Master_Receive+0x208>)
 8003f44:	9300      	str	r3, [sp, #0]
 8003f46:	0023      	movs	r3, r4
 8003f48:	f000 fa58 	bl	80043fc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003f4c:	e062      	b.n	8004014 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	0018      	movs	r0, r3
 8003f56:	f000 f96b 	bl	8004230 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f5a:	1e03      	subs	r3, r0, #0
 8003f5c:	d001      	beq.n	8003f62 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e082      	b.n	8004068 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6c:	b2d2      	uxtb	r2, r2
 8003f6e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f74:	1c5a      	adds	r2, r3, #1
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d03a      	beq.n	8004014 <HAL_I2C_Master_Receive+0x1ac>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d136      	bne.n	8004014 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003fa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	9300      	str	r3, [sp, #0]
 8003fae:	0013      	movs	r3, r2
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	2180      	movs	r1, #128	; 0x80
 8003fb4:	f000 f882 	bl	80040bc <I2C_WaitOnFlagUntilTimeout>
 8003fb8:	1e03      	subs	r3, r0, #0
 8003fba:	d001      	beq.n	8003fc0 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e053      	b.n	8004068 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	2bff      	cmp	r3, #255	; 0xff
 8003fc8:	d911      	bls.n	8003fee <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	22ff      	movs	r2, #255	; 0xff
 8003fce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd4:	b2da      	uxtb	r2, r3
 8003fd6:	2380      	movs	r3, #128	; 0x80
 8003fd8:	045c      	lsls	r4, r3, #17
 8003fda:	230a      	movs	r3, #10
 8003fdc:	18fb      	adds	r3, r7, r3
 8003fde:	8819      	ldrh	r1, [r3, #0]
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	0023      	movs	r3, r4
 8003fe8:	f000 fa08 	bl	80043fc <I2C_TransferConfig>
 8003fec:	e012      	b.n	8004014 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ffc:	b2da      	uxtb	r2, r3
 8003ffe:	2380      	movs	r3, #128	; 0x80
 8004000:	049c      	lsls	r4, r3, #18
 8004002:	230a      	movs	r3, #10
 8004004:	18fb      	adds	r3, r7, r3
 8004006:	8819      	ldrh	r1, [r3, #0]
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	2300      	movs	r3, #0
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	0023      	movs	r3, r4
 8004010:	f000 f9f4 	bl	80043fc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004018:	b29b      	uxth	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d197      	bne.n	8003f4e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	0018      	movs	r0, r3
 8004026:	f000 f8c7 	bl	80041b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800402a:	1e03      	subs	r3, r0, #0
 800402c:	d001      	beq.n	8004032 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e01a      	b.n	8004068 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2220      	movs	r2, #32
 8004038:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	685a      	ldr	r2, [r3, #4]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	490b      	ldr	r1, [pc, #44]	; (8004074 <HAL_I2C_Master_Receive+0x20c>)
 8004046:	400a      	ands	r2, r1
 8004048:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2241      	movs	r2, #65	; 0x41
 800404e:	2120      	movs	r1, #32
 8004050:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2242      	movs	r2, #66	; 0x42
 8004056:	2100      	movs	r1, #0
 8004058:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2240      	movs	r2, #64	; 0x40
 800405e:	2100      	movs	r1, #0
 8004060:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004062:	2300      	movs	r3, #0
 8004064:	e000      	b.n	8004068 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8004066:	2302      	movs	r3, #2
  }
}
 8004068:	0018      	movs	r0, r3
 800406a:	46bd      	mov	sp, r7
 800406c:	b007      	add	sp, #28
 800406e:	bd90      	pop	{r4, r7, pc}
 8004070:	80002400 	.word	0x80002400
 8004074:	fe00e800 	.word	0xfe00e800

08004078 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	2202      	movs	r2, #2
 8004088:	4013      	ands	r3, r2
 800408a:	2b02      	cmp	r3, #2
 800408c:	d103      	bne.n	8004096 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2200      	movs	r2, #0
 8004094:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	2201      	movs	r2, #1
 800409e:	4013      	ands	r3, r2
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d007      	beq.n	80040b4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	699a      	ldr	r2, [r3, #24]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2101      	movs	r1, #1
 80040b0:	430a      	orrs	r2, r1
 80040b2:	619a      	str	r2, [r3, #24]
  }
}
 80040b4:	46c0      	nop			; (mov r8, r8)
 80040b6:	46bd      	mov	sp, r7
 80040b8:	b002      	add	sp, #8
 80040ba:	bd80      	pop	{r7, pc}

080040bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	603b      	str	r3, [r7, #0]
 80040c8:	1dfb      	adds	r3, r7, #7
 80040ca:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040cc:	e021      	b.n	8004112 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	3301      	adds	r3, #1
 80040d2:	d01e      	beq.n	8004112 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040d4:	f7fe fbea 	bl	80028ac <HAL_GetTick>
 80040d8:	0002      	movs	r2, r0
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	683a      	ldr	r2, [r7, #0]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d302      	bcc.n	80040ea <I2C_WaitOnFlagUntilTimeout+0x2e>
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d113      	bne.n	8004112 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ee:	2220      	movs	r2, #32
 80040f0:	431a      	orrs	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2241      	movs	r2, #65	; 0x41
 80040fa:	2120      	movs	r1, #32
 80040fc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2242      	movs	r2, #66	; 0x42
 8004102:	2100      	movs	r1, #0
 8004104:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2240      	movs	r2, #64	; 0x40
 800410a:	2100      	movs	r1, #0
 800410c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e00f      	b.n	8004132 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	68ba      	ldr	r2, [r7, #8]
 800411a:	4013      	ands	r3, r2
 800411c:	68ba      	ldr	r2, [r7, #8]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	425a      	negs	r2, r3
 8004122:	4153      	adcs	r3, r2
 8004124:	b2db      	uxtb	r3, r3
 8004126:	001a      	movs	r2, r3
 8004128:	1dfb      	adds	r3, r7, #7
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	429a      	cmp	r2, r3
 800412e:	d0ce      	beq.n	80040ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	0018      	movs	r0, r3
 8004134:	46bd      	mov	sp, r7
 8004136:	b004      	add	sp, #16
 8004138:	bd80      	pop	{r7, pc}

0800413a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800413a:	b580      	push	{r7, lr}
 800413c:	b084      	sub	sp, #16
 800413e:	af00      	add	r7, sp, #0
 8004140:	60f8      	str	r0, [r7, #12]
 8004142:	60b9      	str	r1, [r7, #8]
 8004144:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004146:	e02b      	b.n	80041a0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	68b9      	ldr	r1, [r7, #8]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	0018      	movs	r0, r3
 8004150:	f000 f8da 	bl	8004308 <I2C_IsAcknowledgeFailed>
 8004154:	1e03      	subs	r3, r0, #0
 8004156:	d001      	beq.n	800415c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e029      	b.n	80041b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	3301      	adds	r3, #1
 8004160:	d01e      	beq.n	80041a0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004162:	f7fe fba3 	bl	80028ac <HAL_GetTick>
 8004166:	0002      	movs	r2, r0
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	68ba      	ldr	r2, [r7, #8]
 800416e:	429a      	cmp	r2, r3
 8004170:	d302      	bcc.n	8004178 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d113      	bne.n	80041a0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417c:	2220      	movs	r2, #32
 800417e:	431a      	orrs	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2241      	movs	r2, #65	; 0x41
 8004188:	2120      	movs	r1, #32
 800418a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2242      	movs	r2, #66	; 0x42
 8004190:	2100      	movs	r1, #0
 8004192:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2240      	movs	r2, #64	; 0x40
 8004198:	2100      	movs	r1, #0
 800419a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e007      	b.n	80041b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	2202      	movs	r2, #2
 80041a8:	4013      	ands	r3, r2
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d1cc      	bne.n	8004148 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	0018      	movs	r0, r3
 80041b2:	46bd      	mov	sp, r7
 80041b4:	b004      	add	sp, #16
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041c4:	e028      	b.n	8004218 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	68b9      	ldr	r1, [r7, #8]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	0018      	movs	r0, r3
 80041ce:	f000 f89b 	bl	8004308 <I2C_IsAcknowledgeFailed>
 80041d2:	1e03      	subs	r3, r0, #0
 80041d4:	d001      	beq.n	80041da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e026      	b.n	8004228 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041da:	f7fe fb67 	bl	80028ac <HAL_GetTick>
 80041de:	0002      	movs	r2, r0
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	68ba      	ldr	r2, [r7, #8]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d302      	bcc.n	80041f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d113      	bne.n	8004218 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f4:	2220      	movs	r2, #32
 80041f6:	431a      	orrs	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2241      	movs	r2, #65	; 0x41
 8004200:	2120      	movs	r1, #32
 8004202:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2242      	movs	r2, #66	; 0x42
 8004208:	2100      	movs	r1, #0
 800420a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2240      	movs	r2, #64	; 0x40
 8004210:	2100      	movs	r1, #0
 8004212:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e007      	b.n	8004228 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	2220      	movs	r2, #32
 8004220:	4013      	ands	r3, r2
 8004222:	2b20      	cmp	r3, #32
 8004224:	d1cf      	bne.n	80041c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	0018      	movs	r0, r3
 800422a:	46bd      	mov	sp, r7
 800422c:	b004      	add	sp, #16
 800422e:	bd80      	pop	{r7, pc}

08004230 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800423c:	e055      	b.n	80042ea <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	68b9      	ldr	r1, [r7, #8]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	0018      	movs	r0, r3
 8004246:	f000 f85f 	bl	8004308 <I2C_IsAcknowledgeFailed>
 800424a:	1e03      	subs	r3, r0, #0
 800424c:	d001      	beq.n	8004252 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e053      	b.n	80042fa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	2220      	movs	r2, #32
 800425a:	4013      	ands	r3, r2
 800425c:	2b20      	cmp	r3, #32
 800425e:	d129      	bne.n	80042b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	2204      	movs	r2, #4
 8004268:	4013      	ands	r3, r2
 800426a:	2b04      	cmp	r3, #4
 800426c:	d105      	bne.n	800427a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004276:	2300      	movs	r3, #0
 8004278:	e03f      	b.n	80042fa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2220      	movs	r2, #32
 8004280:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	685a      	ldr	r2, [r3, #4]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	491d      	ldr	r1, [pc, #116]	; (8004304 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800428e:	400a      	ands	r2, r1
 8004290:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2241      	movs	r2, #65	; 0x41
 800429c:	2120      	movs	r1, #32
 800429e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2242      	movs	r2, #66	; 0x42
 80042a4:	2100      	movs	r1, #0
 80042a6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2240      	movs	r2, #64	; 0x40
 80042ac:	2100      	movs	r1, #0
 80042ae:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e022      	b.n	80042fa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042b4:	f7fe fafa 	bl	80028ac <HAL_GetTick>
 80042b8:	0002      	movs	r2, r0
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	68ba      	ldr	r2, [r7, #8]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d302      	bcc.n	80042ca <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10f      	bne.n	80042ea <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ce:	2220      	movs	r2, #32
 80042d0:	431a      	orrs	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2241      	movs	r2, #65	; 0x41
 80042da:	2120      	movs	r1, #32
 80042dc:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2240      	movs	r2, #64	; 0x40
 80042e2:	2100      	movs	r1, #0
 80042e4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e007      	b.n	80042fa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	2204      	movs	r2, #4
 80042f2:	4013      	ands	r3, r2
 80042f4:	2b04      	cmp	r3, #4
 80042f6:	d1a2      	bne.n	800423e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	0018      	movs	r0, r3
 80042fc:	46bd      	mov	sp, r7
 80042fe:	b004      	add	sp, #16
 8004300:	bd80      	pop	{r7, pc}
 8004302:	46c0      	nop			; (mov r8, r8)
 8004304:	fe00e800 	.word	0xfe00e800

08004308 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	2210      	movs	r2, #16
 800431c:	4013      	ands	r3, r2
 800431e:	2b10      	cmp	r3, #16
 8004320:	d164      	bne.n	80043ec <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	685a      	ldr	r2, [r3, #4]
 8004328:	2380      	movs	r3, #128	; 0x80
 800432a:	049b      	lsls	r3, r3, #18
 800432c:	401a      	ands	r2, r3
 800432e:	2380      	movs	r3, #128	; 0x80
 8004330:	049b      	lsls	r3, r3, #18
 8004332:	429a      	cmp	r2, r3
 8004334:	d02b      	beq.n	800438e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2180      	movs	r1, #128	; 0x80
 8004342:	01c9      	lsls	r1, r1, #7
 8004344:	430a      	orrs	r2, r1
 8004346:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004348:	e021      	b.n	800438e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	3301      	adds	r3, #1
 800434e:	d01e      	beq.n	800438e <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004350:	f7fe faac 	bl	80028ac <HAL_GetTick>
 8004354:	0002      	movs	r2, r0
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	68ba      	ldr	r2, [r7, #8]
 800435c:	429a      	cmp	r2, r3
 800435e:	d302      	bcc.n	8004366 <I2C_IsAcknowledgeFailed+0x5e>
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d113      	bne.n	800438e <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436a:	2220      	movs	r2, #32
 800436c:	431a      	orrs	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2241      	movs	r2, #65	; 0x41
 8004376:	2120      	movs	r1, #32
 8004378:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2242      	movs	r2, #66	; 0x42
 800437e:	2100      	movs	r1, #0
 8004380:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2240      	movs	r2, #64	; 0x40
 8004386:	2100      	movs	r1, #0
 8004388:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e02f      	b.n	80043ee <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	2220      	movs	r2, #32
 8004396:	4013      	ands	r3, r2
 8004398:	2b20      	cmp	r3, #32
 800439a:	d1d6      	bne.n	800434a <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2210      	movs	r2, #16
 80043a2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2220      	movs	r2, #32
 80043aa:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	0018      	movs	r0, r3
 80043b0:	f7ff fe62 	bl	8004078 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685a      	ldr	r2, [r3, #4]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	490e      	ldr	r1, [pc, #56]	; (80043f8 <I2C_IsAcknowledgeFailed+0xf0>)
 80043c0:	400a      	ands	r2, r1
 80043c2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c8:	2204      	movs	r2, #4
 80043ca:	431a      	orrs	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2241      	movs	r2, #65	; 0x41
 80043d4:	2120      	movs	r1, #32
 80043d6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2242      	movs	r2, #66	; 0x42
 80043dc:	2100      	movs	r1, #0
 80043de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2240      	movs	r2, #64	; 0x40
 80043e4:	2100      	movs	r1, #0
 80043e6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e000      	b.n	80043ee <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	0018      	movs	r0, r3
 80043f0:	46bd      	mov	sp, r7
 80043f2:	b004      	add	sp, #16
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	46c0      	nop			; (mov r8, r8)
 80043f8:	fe00e800 	.word	0xfe00e800

080043fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80043fc:	b590      	push	{r4, r7, lr}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	0008      	movs	r0, r1
 8004406:	0011      	movs	r1, r2
 8004408:	607b      	str	r3, [r7, #4]
 800440a:	240a      	movs	r4, #10
 800440c:	193b      	adds	r3, r7, r4
 800440e:	1c02      	adds	r2, r0, #0
 8004410:	801a      	strh	r2, [r3, #0]
 8004412:	2009      	movs	r0, #9
 8004414:	183b      	adds	r3, r7, r0
 8004416:	1c0a      	adds	r2, r1, #0
 8004418:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	6a3a      	ldr	r2, [r7, #32]
 8004422:	0d51      	lsrs	r1, r2, #21
 8004424:	2280      	movs	r2, #128	; 0x80
 8004426:	00d2      	lsls	r2, r2, #3
 8004428:	400a      	ands	r2, r1
 800442a:	490e      	ldr	r1, [pc, #56]	; (8004464 <I2C_TransferConfig+0x68>)
 800442c:	430a      	orrs	r2, r1
 800442e:	43d2      	mvns	r2, r2
 8004430:	401a      	ands	r2, r3
 8004432:	0011      	movs	r1, r2
 8004434:	193b      	adds	r3, r7, r4
 8004436:	881b      	ldrh	r3, [r3, #0]
 8004438:	059b      	lsls	r3, r3, #22
 800443a:	0d9a      	lsrs	r2, r3, #22
 800443c:	183b      	adds	r3, r7, r0
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	0418      	lsls	r0, r3, #16
 8004442:	23ff      	movs	r3, #255	; 0xff
 8004444:	041b      	lsls	r3, r3, #16
 8004446:	4003      	ands	r3, r0
 8004448:	431a      	orrs	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	431a      	orrs	r2, r3
 800444e:	6a3b      	ldr	r3, [r7, #32]
 8004450:	431a      	orrs	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800445a:	46c0      	nop			; (mov r8, r8)
 800445c:	46bd      	mov	sp, r7
 800445e:	b005      	add	sp, #20
 8004460:	bd90      	pop	{r4, r7, pc}
 8004462:	46c0      	nop			; (mov r8, r8)
 8004464:	03ff63ff 	.word	0x03ff63ff

08004468 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2241      	movs	r2, #65	; 0x41
 8004476:	5c9b      	ldrb	r3, [r3, r2]
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b20      	cmp	r3, #32
 800447c:	d138      	bne.n	80044f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2240      	movs	r2, #64	; 0x40
 8004482:	5c9b      	ldrb	r3, [r3, r2]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d101      	bne.n	800448c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004488:	2302      	movs	r3, #2
 800448a:	e032      	b.n	80044f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2240      	movs	r2, #64	; 0x40
 8004490:	2101      	movs	r1, #1
 8004492:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2241      	movs	r2, #65	; 0x41
 8004498:	2124      	movs	r1, #36	; 0x24
 800449a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2101      	movs	r1, #1
 80044a8:	438a      	bics	r2, r1
 80044aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4911      	ldr	r1, [pc, #68]	; (80044fc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80044b8:	400a      	ands	r2, r1
 80044ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6819      	ldr	r1, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	430a      	orrs	r2, r1
 80044ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2101      	movs	r1, #1
 80044d8:	430a      	orrs	r2, r1
 80044da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2241      	movs	r2, #65	; 0x41
 80044e0:	2120      	movs	r1, #32
 80044e2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2240      	movs	r2, #64	; 0x40
 80044e8:	2100      	movs	r1, #0
 80044ea:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80044ec:	2300      	movs	r3, #0
 80044ee:	e000      	b.n	80044f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80044f0:	2302      	movs	r3, #2
  }
}
 80044f2:	0018      	movs	r0, r3
 80044f4:	46bd      	mov	sp, r7
 80044f6:	b002      	add	sp, #8
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	46c0      	nop			; (mov r8, r8)
 80044fc:	ffffefff 	.word	0xffffefff

08004500 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2241      	movs	r2, #65	; 0x41
 800450e:	5c9b      	ldrb	r3, [r3, r2]
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b20      	cmp	r3, #32
 8004514:	d139      	bne.n	800458a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2240      	movs	r2, #64	; 0x40
 800451a:	5c9b      	ldrb	r3, [r3, r2]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d101      	bne.n	8004524 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004520:	2302      	movs	r3, #2
 8004522:	e033      	b.n	800458c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2240      	movs	r2, #64	; 0x40
 8004528:	2101      	movs	r1, #1
 800452a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2241      	movs	r2, #65	; 0x41
 8004530:	2124      	movs	r1, #36	; 0x24
 8004532:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2101      	movs	r1, #1
 8004540:	438a      	bics	r2, r1
 8004542:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	4a11      	ldr	r2, [pc, #68]	; (8004594 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004550:	4013      	ands	r3, r2
 8004552:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	021b      	lsls	r3, r3, #8
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	4313      	orrs	r3, r2
 800455c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2101      	movs	r1, #1
 8004572:	430a      	orrs	r2, r1
 8004574:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2241      	movs	r2, #65	; 0x41
 800457a:	2120      	movs	r1, #32
 800457c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2240      	movs	r2, #64	; 0x40
 8004582:	2100      	movs	r1, #0
 8004584:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004586:	2300      	movs	r3, #0
 8004588:	e000      	b.n	800458c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800458a:	2302      	movs	r3, #2
  }
}
 800458c:	0018      	movs	r0, r3
 800458e:	46bd      	mov	sp, r7
 8004590:	b004      	add	sp, #16
 8004592:	bd80      	pop	{r7, pc}
 8004594:	fffff0ff 	.word	0xfffff0ff

08004598 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI:Enter STOP mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter STOP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	000a      	movs	r2, r1
 80045a2:	1cfb      	adds	r3, r7, #3
 80045a4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
 80045a6:	2300      	movs	r3, #0
 80045a8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 80045aa:	4b13      	ldr	r3, [pc, #76]	; (80045f8 <HAL_PWR_EnterSTOPMode+0x60>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear PDDS and LPDS bits */
  tmpreg &= (uint32_t)~(PWR_CR_PDDS | PWR_CR_LPDS);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2203      	movs	r2, #3
 80045b4:	4393      	bics	r3, r2
 80045b6:	60fb      	str	r3, [r7, #12]

  /* Set LPDS bit according to Regulator value */
  tmpreg |= Regulator;
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4313      	orrs	r3, r2
 80045be:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 80045c0:	4b0d      	ldr	r3, [pc, #52]	; (80045f8 <HAL_PWR_EnterSTOPMode+0x60>)
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 80045c6:	4b0d      	ldr	r3, [pc, #52]	; (80045fc <HAL_PWR_EnterSTOPMode+0x64>)
 80045c8:	691a      	ldr	r2, [r3, #16]
 80045ca:	4b0c      	ldr	r3, [pc, #48]	; (80045fc <HAL_PWR_EnterSTOPMode+0x64>)
 80045cc:	2104      	movs	r1, #4
 80045ce:	430a      	orrs	r2, r1
 80045d0:	611a      	str	r2, [r3, #16]

  /* Select STOP mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80045d2:	1cfb      	adds	r3, r7, #3
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d101      	bne.n	80045de <HAL_PWR_EnterSTOPMode+0x46>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80045da:	bf30      	wfi
 80045dc:	e002      	b.n	80045e4 <HAL_PWR_EnterSTOPMode+0x4c>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80045de:	bf40      	sev
    __WFE();
 80045e0:	bf20      	wfe
    __WFE();
 80045e2:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 80045e4:	4b05      	ldr	r3, [pc, #20]	; (80045fc <HAL_PWR_EnterSTOPMode+0x64>)
 80045e6:	691a      	ldr	r2, [r3, #16]
 80045e8:	4b04      	ldr	r3, [pc, #16]	; (80045fc <HAL_PWR_EnterSTOPMode+0x64>)
 80045ea:	2104      	movs	r1, #4
 80045ec:	438a      	bics	r2, r1
 80045ee:	611a      	str	r2, [r3, #16]
}
 80045f0:	46c0      	nop			; (mov r8, r8)
 80045f2:	46bd      	mov	sp, r7
 80045f4:	b004      	add	sp, #16
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	40007000 	.word	0x40007000
 80045fc:	e000ed00 	.word	0xe000ed00

08004600 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b088      	sub	sp, #32
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d101      	bne.n	8004612 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e301      	b.n	8004c16 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2201      	movs	r2, #1
 8004618:	4013      	ands	r3, r2
 800461a:	d100      	bne.n	800461e <HAL_RCC_OscConfig+0x1e>
 800461c:	e08d      	b.n	800473a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800461e:	4bc3      	ldr	r3, [pc, #780]	; (800492c <HAL_RCC_OscConfig+0x32c>)
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	220c      	movs	r2, #12
 8004624:	4013      	ands	r3, r2
 8004626:	2b04      	cmp	r3, #4
 8004628:	d00e      	beq.n	8004648 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800462a:	4bc0      	ldr	r3, [pc, #768]	; (800492c <HAL_RCC_OscConfig+0x32c>)
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	220c      	movs	r2, #12
 8004630:	4013      	ands	r3, r2
 8004632:	2b08      	cmp	r3, #8
 8004634:	d116      	bne.n	8004664 <HAL_RCC_OscConfig+0x64>
 8004636:	4bbd      	ldr	r3, [pc, #756]	; (800492c <HAL_RCC_OscConfig+0x32c>)
 8004638:	685a      	ldr	r2, [r3, #4]
 800463a:	2380      	movs	r3, #128	; 0x80
 800463c:	025b      	lsls	r3, r3, #9
 800463e:	401a      	ands	r2, r3
 8004640:	2380      	movs	r3, #128	; 0x80
 8004642:	025b      	lsls	r3, r3, #9
 8004644:	429a      	cmp	r2, r3
 8004646:	d10d      	bne.n	8004664 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004648:	4bb8      	ldr	r3, [pc, #736]	; (800492c <HAL_RCC_OscConfig+0x32c>)
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	2380      	movs	r3, #128	; 0x80
 800464e:	029b      	lsls	r3, r3, #10
 8004650:	4013      	ands	r3, r2
 8004652:	d100      	bne.n	8004656 <HAL_RCC_OscConfig+0x56>
 8004654:	e070      	b.n	8004738 <HAL_RCC_OscConfig+0x138>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d000      	beq.n	8004660 <HAL_RCC_OscConfig+0x60>
 800465e:	e06b      	b.n	8004738 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e2d8      	b.n	8004c16 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d107      	bne.n	800467c <HAL_RCC_OscConfig+0x7c>
 800466c:	4baf      	ldr	r3, [pc, #700]	; (800492c <HAL_RCC_OscConfig+0x32c>)
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	4bae      	ldr	r3, [pc, #696]	; (800492c <HAL_RCC_OscConfig+0x32c>)
 8004672:	2180      	movs	r1, #128	; 0x80
 8004674:	0249      	lsls	r1, r1, #9
 8004676:	430a      	orrs	r2, r1
 8004678:	601a      	str	r2, [r3, #0]
 800467a:	e02f      	b.n	80046dc <HAL_RCC_OscConfig+0xdc>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10c      	bne.n	800469e <HAL_RCC_OscConfig+0x9e>
 8004684:	4ba9      	ldr	r3, [pc, #676]	; (800492c <HAL_RCC_OscConfig+0x32c>)
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	4ba8      	ldr	r3, [pc, #672]	; (800492c <HAL_RCC_OscConfig+0x32c>)
 800468a:	49a9      	ldr	r1, [pc, #676]	; (8004930 <HAL_RCC_OscConfig+0x330>)
 800468c:	400a      	ands	r2, r1
 800468e:	601a      	str	r2, [r3, #0]
 8004690:	4ba6      	ldr	r3, [pc, #664]	; (800492c <HAL_RCC_OscConfig+0x32c>)
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	4ba5      	ldr	r3, [pc, #660]	; (800492c <HAL_RCC_OscConfig+0x32c>)
 8004696:	49a7      	ldr	r1, [pc, #668]	; (8004934 <HAL_RCC_OscConfig+0x334>)
 8004698:	400a      	ands	r2, r1
 800469a:	601a      	str	r2, [r3, #0]
 800469c:	e01e      	b.n	80046dc <HAL_RCC_OscConfig+0xdc>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	2b05      	cmp	r3, #5
 80046a4:	d10e      	bne.n	80046c4 <HAL_RCC_OscConfig+0xc4>
 80046a6:	4ba1      	ldr	r3, [pc, #644]	; (800492c <HAL_RCC_OscConfig+0x32c>)
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	4ba0      	ldr	r3, [pc, #640]	; (800492c <HAL_RCC_OscConfig+0x32c>)
 80046ac:	2180      	movs	r1, #128	; 0x80
 80046ae:	02c9      	lsls	r1, r1, #11
 80046b0:	430a      	orrs	r2, r1
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	4b9d      	ldr	r3, [pc, #628]	; (800492c <HAL_RCC_OscConfig+0x32c>)
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	4b9c      	ldr	r3, [pc, #624]	; (800492c <HAL_RCC_OscConfig+0x32c>)
 80046ba:	2180      	movs	r1, #128	; 0x80
 80046bc:	0249      	lsls	r1, r1, #9
 80046be:	430a      	orrs	r2, r1
 80046c0:	601a      	str	r2, [r3, #0]
 80046c2:	e00b      	b.n	80046dc <HAL_RCC_OscConfig+0xdc>
 80046c4:	4b99      	ldr	r3, [pc, #612]	; (800492c <HAL_RCC_OscConfig+0x32c>)
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	4b98      	ldr	r3, [pc, #608]	; (800492c <HAL_RCC_OscConfig+0x32c>)
 80046ca:	4999      	ldr	r1, [pc, #612]	; (8004930 <HAL_RCC_OscConfig+0x330>)
 80046cc:	400a      	ands	r2, r1
 80046ce:	601a      	str	r2, [r3, #0]
 80046d0:	4b96      	ldr	r3, [pc, #600]	; (800492c <HAL_RCC_OscConfig+0x32c>)
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	4b95      	ldr	r3, [pc, #596]	; (800492c <HAL_RCC_OscConfig+0x32c>)
 80046d6:	4997      	ldr	r1, [pc, #604]	; (8004934 <HAL_RCC_OscConfig+0x334>)
 80046d8:	400a      	ands	r2, r1
 80046da:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d014      	beq.n	800470e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e4:	f7fe f8e2 	bl	80028ac <HAL_GetTick>
 80046e8:	0003      	movs	r3, r0
 80046ea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ec:	e008      	b.n	8004700 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046ee:	f7fe f8dd 	bl	80028ac <HAL_GetTick>
 80046f2:	0002      	movs	r2, r0
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	2b64      	cmp	r3, #100	; 0x64
 80046fa:	d901      	bls.n	8004700 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e28a      	b.n	8004c16 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004700:	4b8a      	ldr	r3, [pc, #552]	; (800492c <HAL_RCC_OscConfig+0x32c>)
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	2380      	movs	r3, #128	; 0x80
 8004706:	029b      	lsls	r3, r3, #10
 8004708:	4013      	ands	r3, r2
 800470a:	d0f0      	beq.n	80046ee <HAL_RCC_OscConfig+0xee>
 800470c:	e015      	b.n	800473a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800470e:	f7fe f8cd 	bl	80028ac <HAL_GetTick>
 8004712:	0003      	movs	r3, r0
 8004714:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004716:	e008      	b.n	800472a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004718:	f7fe f8c8 	bl	80028ac <HAL_GetTick>
 800471c:	0002      	movs	r2, r0
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b64      	cmp	r3, #100	; 0x64
 8004724:	d901      	bls.n	800472a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e275      	b.n	8004c16 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800472a:	4b80      	ldr	r3, [pc, #512]	; (800492c <HAL_RCC_OscConfig+0x32c>)
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	2380      	movs	r3, #128	; 0x80
 8004730:	029b      	lsls	r3, r3, #10
 8004732:	4013      	ands	r3, r2
 8004734:	d1f0      	bne.n	8004718 <HAL_RCC_OscConfig+0x118>
 8004736:	e000      	b.n	800473a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004738:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2202      	movs	r2, #2
 8004740:	4013      	ands	r3, r2
 8004742:	d100      	bne.n	8004746 <HAL_RCC_OscConfig+0x146>
 8004744:	e069      	b.n	800481a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004746:	4b79      	ldr	r3, [pc, #484]	; (800492c <HAL_RCC_OscConfig+0x32c>)
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	220c      	movs	r2, #12
 800474c:	4013      	ands	r3, r2
 800474e:	d00b      	beq.n	8004768 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004750:	4b76      	ldr	r3, [pc, #472]	; (800492c <HAL_RCC_OscConfig+0x32c>)
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	220c      	movs	r2, #12
 8004756:	4013      	ands	r3, r2
 8004758:	2b08      	cmp	r3, #8
 800475a:	d11c      	bne.n	8004796 <HAL_RCC_OscConfig+0x196>
 800475c:	4b73      	ldr	r3, [pc, #460]	; (800492c <HAL_RCC_OscConfig+0x32c>)
 800475e:	685a      	ldr	r2, [r3, #4]
 8004760:	2380      	movs	r3, #128	; 0x80
 8004762:	025b      	lsls	r3, r3, #9
 8004764:	4013      	ands	r3, r2
 8004766:	d116      	bne.n	8004796 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004768:	4b70      	ldr	r3, [pc, #448]	; (800492c <HAL_RCC_OscConfig+0x32c>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2202      	movs	r2, #2
 800476e:	4013      	ands	r3, r2
 8004770:	d005      	beq.n	800477e <HAL_RCC_OscConfig+0x17e>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d001      	beq.n	800477e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e24b      	b.n	8004c16 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800477e:	4b6b      	ldr	r3, [pc, #428]	; (800492c <HAL_RCC_OscConfig+0x32c>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	22f8      	movs	r2, #248	; 0xf8
 8004784:	4393      	bics	r3, r2
 8004786:	0019      	movs	r1, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	00da      	lsls	r2, r3, #3
 800478e:	4b67      	ldr	r3, [pc, #412]	; (800492c <HAL_RCC_OscConfig+0x32c>)
 8004790:	430a      	orrs	r2, r1
 8004792:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004794:	e041      	b.n	800481a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d024      	beq.n	80047e8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800479e:	4b63      	ldr	r3, [pc, #396]	; (800492c <HAL_RCC_OscConfig+0x32c>)
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	4b62      	ldr	r3, [pc, #392]	; (800492c <HAL_RCC_OscConfig+0x32c>)
 80047a4:	2101      	movs	r1, #1
 80047a6:	430a      	orrs	r2, r1
 80047a8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047aa:	f7fe f87f 	bl	80028ac <HAL_GetTick>
 80047ae:	0003      	movs	r3, r0
 80047b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047b4:	f7fe f87a 	bl	80028ac <HAL_GetTick>
 80047b8:	0002      	movs	r2, r0
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e227      	b.n	8004c16 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047c6:	4b59      	ldr	r3, [pc, #356]	; (800492c <HAL_RCC_OscConfig+0x32c>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2202      	movs	r2, #2
 80047cc:	4013      	ands	r3, r2
 80047ce:	d0f1      	beq.n	80047b4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047d0:	4b56      	ldr	r3, [pc, #344]	; (800492c <HAL_RCC_OscConfig+0x32c>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	22f8      	movs	r2, #248	; 0xf8
 80047d6:	4393      	bics	r3, r2
 80047d8:	0019      	movs	r1, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	00da      	lsls	r2, r3, #3
 80047e0:	4b52      	ldr	r3, [pc, #328]	; (800492c <HAL_RCC_OscConfig+0x32c>)
 80047e2:	430a      	orrs	r2, r1
 80047e4:	601a      	str	r2, [r3, #0]
 80047e6:	e018      	b.n	800481a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047e8:	4b50      	ldr	r3, [pc, #320]	; (800492c <HAL_RCC_OscConfig+0x32c>)
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	4b4f      	ldr	r3, [pc, #316]	; (800492c <HAL_RCC_OscConfig+0x32c>)
 80047ee:	2101      	movs	r1, #1
 80047f0:	438a      	bics	r2, r1
 80047f2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f4:	f7fe f85a 	bl	80028ac <HAL_GetTick>
 80047f8:	0003      	movs	r3, r0
 80047fa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047fc:	e008      	b.n	8004810 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047fe:	f7fe f855 	bl	80028ac <HAL_GetTick>
 8004802:	0002      	movs	r2, r0
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	2b02      	cmp	r3, #2
 800480a:	d901      	bls.n	8004810 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e202      	b.n	8004c16 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004810:	4b46      	ldr	r3, [pc, #280]	; (800492c <HAL_RCC_OscConfig+0x32c>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2202      	movs	r2, #2
 8004816:	4013      	ands	r3, r2
 8004818:	d1f1      	bne.n	80047fe <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2208      	movs	r2, #8
 8004820:	4013      	ands	r3, r2
 8004822:	d036      	beq.n	8004892 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	69db      	ldr	r3, [r3, #28]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d019      	beq.n	8004860 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800482c:	4b3f      	ldr	r3, [pc, #252]	; (800492c <HAL_RCC_OscConfig+0x32c>)
 800482e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004830:	4b3e      	ldr	r3, [pc, #248]	; (800492c <HAL_RCC_OscConfig+0x32c>)
 8004832:	2101      	movs	r1, #1
 8004834:	430a      	orrs	r2, r1
 8004836:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004838:	f7fe f838 	bl	80028ac <HAL_GetTick>
 800483c:	0003      	movs	r3, r0
 800483e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004840:	e008      	b.n	8004854 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004842:	f7fe f833 	bl	80028ac <HAL_GetTick>
 8004846:	0002      	movs	r2, r0
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	2b02      	cmp	r3, #2
 800484e:	d901      	bls.n	8004854 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e1e0      	b.n	8004c16 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004854:	4b35      	ldr	r3, [pc, #212]	; (800492c <HAL_RCC_OscConfig+0x32c>)
 8004856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004858:	2202      	movs	r2, #2
 800485a:	4013      	ands	r3, r2
 800485c:	d0f1      	beq.n	8004842 <HAL_RCC_OscConfig+0x242>
 800485e:	e018      	b.n	8004892 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004860:	4b32      	ldr	r3, [pc, #200]	; (800492c <HAL_RCC_OscConfig+0x32c>)
 8004862:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004864:	4b31      	ldr	r3, [pc, #196]	; (800492c <HAL_RCC_OscConfig+0x32c>)
 8004866:	2101      	movs	r1, #1
 8004868:	438a      	bics	r2, r1
 800486a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800486c:	f7fe f81e 	bl	80028ac <HAL_GetTick>
 8004870:	0003      	movs	r3, r0
 8004872:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004874:	e008      	b.n	8004888 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004876:	f7fe f819 	bl	80028ac <HAL_GetTick>
 800487a:	0002      	movs	r2, r0
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b02      	cmp	r3, #2
 8004882:	d901      	bls.n	8004888 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e1c6      	b.n	8004c16 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004888:	4b28      	ldr	r3, [pc, #160]	; (800492c <HAL_RCC_OscConfig+0x32c>)
 800488a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488c:	2202      	movs	r2, #2
 800488e:	4013      	ands	r3, r2
 8004890:	d1f1      	bne.n	8004876 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2204      	movs	r2, #4
 8004898:	4013      	ands	r3, r2
 800489a:	d100      	bne.n	800489e <HAL_RCC_OscConfig+0x29e>
 800489c:	e0b4      	b.n	8004a08 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800489e:	201f      	movs	r0, #31
 80048a0:	183b      	adds	r3, r7, r0
 80048a2:	2200      	movs	r2, #0
 80048a4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048a6:	4b21      	ldr	r3, [pc, #132]	; (800492c <HAL_RCC_OscConfig+0x32c>)
 80048a8:	69da      	ldr	r2, [r3, #28]
 80048aa:	2380      	movs	r3, #128	; 0x80
 80048ac:	055b      	lsls	r3, r3, #21
 80048ae:	4013      	ands	r3, r2
 80048b0:	d110      	bne.n	80048d4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048b2:	4b1e      	ldr	r3, [pc, #120]	; (800492c <HAL_RCC_OscConfig+0x32c>)
 80048b4:	69da      	ldr	r2, [r3, #28]
 80048b6:	4b1d      	ldr	r3, [pc, #116]	; (800492c <HAL_RCC_OscConfig+0x32c>)
 80048b8:	2180      	movs	r1, #128	; 0x80
 80048ba:	0549      	lsls	r1, r1, #21
 80048bc:	430a      	orrs	r2, r1
 80048be:	61da      	str	r2, [r3, #28]
 80048c0:	4b1a      	ldr	r3, [pc, #104]	; (800492c <HAL_RCC_OscConfig+0x32c>)
 80048c2:	69da      	ldr	r2, [r3, #28]
 80048c4:	2380      	movs	r3, #128	; 0x80
 80048c6:	055b      	lsls	r3, r3, #21
 80048c8:	4013      	ands	r3, r2
 80048ca:	60fb      	str	r3, [r7, #12]
 80048cc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80048ce:	183b      	adds	r3, r7, r0
 80048d0:	2201      	movs	r2, #1
 80048d2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048d4:	4b18      	ldr	r3, [pc, #96]	; (8004938 <HAL_RCC_OscConfig+0x338>)
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	2380      	movs	r3, #128	; 0x80
 80048da:	005b      	lsls	r3, r3, #1
 80048dc:	4013      	ands	r3, r2
 80048de:	d11a      	bne.n	8004916 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048e0:	4b15      	ldr	r3, [pc, #84]	; (8004938 <HAL_RCC_OscConfig+0x338>)
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	4b14      	ldr	r3, [pc, #80]	; (8004938 <HAL_RCC_OscConfig+0x338>)
 80048e6:	2180      	movs	r1, #128	; 0x80
 80048e8:	0049      	lsls	r1, r1, #1
 80048ea:	430a      	orrs	r2, r1
 80048ec:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048ee:	f7fd ffdd 	bl	80028ac <HAL_GetTick>
 80048f2:	0003      	movs	r3, r0
 80048f4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048f6:	e008      	b.n	800490a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048f8:	f7fd ffd8 	bl	80028ac <HAL_GetTick>
 80048fc:	0002      	movs	r2, r0
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	2b64      	cmp	r3, #100	; 0x64
 8004904:	d901      	bls.n	800490a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e185      	b.n	8004c16 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800490a:	4b0b      	ldr	r3, [pc, #44]	; (8004938 <HAL_RCC_OscConfig+0x338>)
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	2380      	movs	r3, #128	; 0x80
 8004910:	005b      	lsls	r3, r3, #1
 8004912:	4013      	ands	r3, r2
 8004914:	d0f0      	beq.n	80048f8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	2b01      	cmp	r3, #1
 800491c:	d10e      	bne.n	800493c <HAL_RCC_OscConfig+0x33c>
 800491e:	4b03      	ldr	r3, [pc, #12]	; (800492c <HAL_RCC_OscConfig+0x32c>)
 8004920:	6a1a      	ldr	r2, [r3, #32]
 8004922:	4b02      	ldr	r3, [pc, #8]	; (800492c <HAL_RCC_OscConfig+0x32c>)
 8004924:	2101      	movs	r1, #1
 8004926:	430a      	orrs	r2, r1
 8004928:	621a      	str	r2, [r3, #32]
 800492a:	e035      	b.n	8004998 <HAL_RCC_OscConfig+0x398>
 800492c:	40021000 	.word	0x40021000
 8004930:	fffeffff 	.word	0xfffeffff
 8004934:	fffbffff 	.word	0xfffbffff
 8004938:	40007000 	.word	0x40007000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10c      	bne.n	800495e <HAL_RCC_OscConfig+0x35e>
 8004944:	4bb6      	ldr	r3, [pc, #728]	; (8004c20 <HAL_RCC_OscConfig+0x620>)
 8004946:	6a1a      	ldr	r2, [r3, #32]
 8004948:	4bb5      	ldr	r3, [pc, #724]	; (8004c20 <HAL_RCC_OscConfig+0x620>)
 800494a:	2101      	movs	r1, #1
 800494c:	438a      	bics	r2, r1
 800494e:	621a      	str	r2, [r3, #32]
 8004950:	4bb3      	ldr	r3, [pc, #716]	; (8004c20 <HAL_RCC_OscConfig+0x620>)
 8004952:	6a1a      	ldr	r2, [r3, #32]
 8004954:	4bb2      	ldr	r3, [pc, #712]	; (8004c20 <HAL_RCC_OscConfig+0x620>)
 8004956:	2104      	movs	r1, #4
 8004958:	438a      	bics	r2, r1
 800495a:	621a      	str	r2, [r3, #32]
 800495c:	e01c      	b.n	8004998 <HAL_RCC_OscConfig+0x398>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	2b05      	cmp	r3, #5
 8004964:	d10c      	bne.n	8004980 <HAL_RCC_OscConfig+0x380>
 8004966:	4bae      	ldr	r3, [pc, #696]	; (8004c20 <HAL_RCC_OscConfig+0x620>)
 8004968:	6a1a      	ldr	r2, [r3, #32]
 800496a:	4bad      	ldr	r3, [pc, #692]	; (8004c20 <HAL_RCC_OscConfig+0x620>)
 800496c:	2104      	movs	r1, #4
 800496e:	430a      	orrs	r2, r1
 8004970:	621a      	str	r2, [r3, #32]
 8004972:	4bab      	ldr	r3, [pc, #684]	; (8004c20 <HAL_RCC_OscConfig+0x620>)
 8004974:	6a1a      	ldr	r2, [r3, #32]
 8004976:	4baa      	ldr	r3, [pc, #680]	; (8004c20 <HAL_RCC_OscConfig+0x620>)
 8004978:	2101      	movs	r1, #1
 800497a:	430a      	orrs	r2, r1
 800497c:	621a      	str	r2, [r3, #32]
 800497e:	e00b      	b.n	8004998 <HAL_RCC_OscConfig+0x398>
 8004980:	4ba7      	ldr	r3, [pc, #668]	; (8004c20 <HAL_RCC_OscConfig+0x620>)
 8004982:	6a1a      	ldr	r2, [r3, #32]
 8004984:	4ba6      	ldr	r3, [pc, #664]	; (8004c20 <HAL_RCC_OscConfig+0x620>)
 8004986:	2101      	movs	r1, #1
 8004988:	438a      	bics	r2, r1
 800498a:	621a      	str	r2, [r3, #32]
 800498c:	4ba4      	ldr	r3, [pc, #656]	; (8004c20 <HAL_RCC_OscConfig+0x620>)
 800498e:	6a1a      	ldr	r2, [r3, #32]
 8004990:	4ba3      	ldr	r3, [pc, #652]	; (8004c20 <HAL_RCC_OscConfig+0x620>)
 8004992:	2104      	movs	r1, #4
 8004994:	438a      	bics	r2, r1
 8004996:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d014      	beq.n	80049ca <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049a0:	f7fd ff84 	bl	80028ac <HAL_GetTick>
 80049a4:	0003      	movs	r3, r0
 80049a6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049a8:	e009      	b.n	80049be <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049aa:	f7fd ff7f 	bl	80028ac <HAL_GetTick>
 80049ae:	0002      	movs	r2, r0
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	4a9b      	ldr	r2, [pc, #620]	; (8004c24 <HAL_RCC_OscConfig+0x624>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d901      	bls.n	80049be <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e12b      	b.n	8004c16 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049be:	4b98      	ldr	r3, [pc, #608]	; (8004c20 <HAL_RCC_OscConfig+0x620>)
 80049c0:	6a1b      	ldr	r3, [r3, #32]
 80049c2:	2202      	movs	r2, #2
 80049c4:	4013      	ands	r3, r2
 80049c6:	d0f0      	beq.n	80049aa <HAL_RCC_OscConfig+0x3aa>
 80049c8:	e013      	b.n	80049f2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049ca:	f7fd ff6f 	bl	80028ac <HAL_GetTick>
 80049ce:	0003      	movs	r3, r0
 80049d0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049d2:	e009      	b.n	80049e8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049d4:	f7fd ff6a 	bl	80028ac <HAL_GetTick>
 80049d8:	0002      	movs	r2, r0
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	4a91      	ldr	r2, [pc, #580]	; (8004c24 <HAL_RCC_OscConfig+0x624>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d901      	bls.n	80049e8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e116      	b.n	8004c16 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049e8:	4b8d      	ldr	r3, [pc, #564]	; (8004c20 <HAL_RCC_OscConfig+0x620>)
 80049ea:	6a1b      	ldr	r3, [r3, #32]
 80049ec:	2202      	movs	r2, #2
 80049ee:	4013      	ands	r3, r2
 80049f0:	d1f0      	bne.n	80049d4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80049f2:	231f      	movs	r3, #31
 80049f4:	18fb      	adds	r3, r7, r3
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d105      	bne.n	8004a08 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049fc:	4b88      	ldr	r3, [pc, #544]	; (8004c20 <HAL_RCC_OscConfig+0x620>)
 80049fe:	69da      	ldr	r2, [r3, #28]
 8004a00:	4b87      	ldr	r3, [pc, #540]	; (8004c20 <HAL_RCC_OscConfig+0x620>)
 8004a02:	4989      	ldr	r1, [pc, #548]	; (8004c28 <HAL_RCC_OscConfig+0x628>)
 8004a04:	400a      	ands	r2, r1
 8004a06:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2210      	movs	r2, #16
 8004a0e:	4013      	ands	r3, r2
 8004a10:	d063      	beq.n	8004ada <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d12a      	bne.n	8004a70 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004a1a:	4b81      	ldr	r3, [pc, #516]	; (8004c20 <HAL_RCC_OscConfig+0x620>)
 8004a1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a1e:	4b80      	ldr	r3, [pc, #512]	; (8004c20 <HAL_RCC_OscConfig+0x620>)
 8004a20:	2104      	movs	r1, #4
 8004a22:	430a      	orrs	r2, r1
 8004a24:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004a26:	4b7e      	ldr	r3, [pc, #504]	; (8004c20 <HAL_RCC_OscConfig+0x620>)
 8004a28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a2a:	4b7d      	ldr	r3, [pc, #500]	; (8004c20 <HAL_RCC_OscConfig+0x620>)
 8004a2c:	2101      	movs	r1, #1
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a32:	f7fd ff3b 	bl	80028ac <HAL_GetTick>
 8004a36:	0003      	movs	r3, r0
 8004a38:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004a3a:	e008      	b.n	8004a4e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004a3c:	f7fd ff36 	bl	80028ac <HAL_GetTick>
 8004a40:	0002      	movs	r2, r0
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e0e3      	b.n	8004c16 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004a4e:	4b74      	ldr	r3, [pc, #464]	; (8004c20 <HAL_RCC_OscConfig+0x620>)
 8004a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a52:	2202      	movs	r2, #2
 8004a54:	4013      	ands	r3, r2
 8004a56:	d0f1      	beq.n	8004a3c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004a58:	4b71      	ldr	r3, [pc, #452]	; (8004c20 <HAL_RCC_OscConfig+0x620>)
 8004a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a5c:	22f8      	movs	r2, #248	; 0xf8
 8004a5e:	4393      	bics	r3, r2
 8004a60:	0019      	movs	r1, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	00da      	lsls	r2, r3, #3
 8004a68:	4b6d      	ldr	r3, [pc, #436]	; (8004c20 <HAL_RCC_OscConfig+0x620>)
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	635a      	str	r2, [r3, #52]	; 0x34
 8004a6e:	e034      	b.n	8004ada <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	695b      	ldr	r3, [r3, #20]
 8004a74:	3305      	adds	r3, #5
 8004a76:	d111      	bne.n	8004a9c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004a78:	4b69      	ldr	r3, [pc, #420]	; (8004c20 <HAL_RCC_OscConfig+0x620>)
 8004a7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a7c:	4b68      	ldr	r3, [pc, #416]	; (8004c20 <HAL_RCC_OscConfig+0x620>)
 8004a7e:	2104      	movs	r1, #4
 8004a80:	438a      	bics	r2, r1
 8004a82:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004a84:	4b66      	ldr	r3, [pc, #408]	; (8004c20 <HAL_RCC_OscConfig+0x620>)
 8004a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a88:	22f8      	movs	r2, #248	; 0xf8
 8004a8a:	4393      	bics	r3, r2
 8004a8c:	0019      	movs	r1, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	00da      	lsls	r2, r3, #3
 8004a94:	4b62      	ldr	r3, [pc, #392]	; (8004c20 <HAL_RCC_OscConfig+0x620>)
 8004a96:	430a      	orrs	r2, r1
 8004a98:	635a      	str	r2, [r3, #52]	; 0x34
 8004a9a:	e01e      	b.n	8004ada <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004a9c:	4b60      	ldr	r3, [pc, #384]	; (8004c20 <HAL_RCC_OscConfig+0x620>)
 8004a9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004aa0:	4b5f      	ldr	r3, [pc, #380]	; (8004c20 <HAL_RCC_OscConfig+0x620>)
 8004aa2:	2104      	movs	r1, #4
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004aa8:	4b5d      	ldr	r3, [pc, #372]	; (8004c20 <HAL_RCC_OscConfig+0x620>)
 8004aaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004aac:	4b5c      	ldr	r3, [pc, #368]	; (8004c20 <HAL_RCC_OscConfig+0x620>)
 8004aae:	2101      	movs	r1, #1
 8004ab0:	438a      	bics	r2, r1
 8004ab2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ab4:	f7fd fefa 	bl	80028ac <HAL_GetTick>
 8004ab8:	0003      	movs	r3, r0
 8004aba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004abc:	e008      	b.n	8004ad0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004abe:	f7fd fef5 	bl	80028ac <HAL_GetTick>
 8004ac2:	0002      	movs	r2, r0
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d901      	bls.n	8004ad0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e0a2      	b.n	8004c16 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004ad0:	4b53      	ldr	r3, [pc, #332]	; (8004c20 <HAL_RCC_OscConfig+0x620>)
 8004ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ad4:	2202      	movs	r2, #2
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	d1f1      	bne.n	8004abe <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d100      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x4e4>
 8004ae2:	e097      	b.n	8004c14 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ae4:	4b4e      	ldr	r3, [pc, #312]	; (8004c20 <HAL_RCC_OscConfig+0x620>)
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	220c      	movs	r2, #12
 8004aea:	4013      	ands	r3, r2
 8004aec:	2b08      	cmp	r3, #8
 8004aee:	d100      	bne.n	8004af2 <HAL_RCC_OscConfig+0x4f2>
 8004af0:	e06b      	b.n	8004bca <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a1b      	ldr	r3, [r3, #32]
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d14c      	bne.n	8004b94 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004afa:	4b49      	ldr	r3, [pc, #292]	; (8004c20 <HAL_RCC_OscConfig+0x620>)
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	4b48      	ldr	r3, [pc, #288]	; (8004c20 <HAL_RCC_OscConfig+0x620>)
 8004b00:	494a      	ldr	r1, [pc, #296]	; (8004c2c <HAL_RCC_OscConfig+0x62c>)
 8004b02:	400a      	ands	r2, r1
 8004b04:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b06:	f7fd fed1 	bl	80028ac <HAL_GetTick>
 8004b0a:	0003      	movs	r3, r0
 8004b0c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b0e:	e008      	b.n	8004b22 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b10:	f7fd fecc 	bl	80028ac <HAL_GetTick>
 8004b14:	0002      	movs	r2, r0
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e079      	b.n	8004c16 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b22:	4b3f      	ldr	r3, [pc, #252]	; (8004c20 <HAL_RCC_OscConfig+0x620>)
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	2380      	movs	r3, #128	; 0x80
 8004b28:	049b      	lsls	r3, r3, #18
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	d1f0      	bne.n	8004b10 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b2e:	4b3c      	ldr	r3, [pc, #240]	; (8004c20 <HAL_RCC_OscConfig+0x620>)
 8004b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b32:	220f      	movs	r2, #15
 8004b34:	4393      	bics	r3, r2
 8004b36:	0019      	movs	r1, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b3c:	4b38      	ldr	r3, [pc, #224]	; (8004c20 <HAL_RCC_OscConfig+0x620>)
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	62da      	str	r2, [r3, #44]	; 0x2c
 8004b42:	4b37      	ldr	r3, [pc, #220]	; (8004c20 <HAL_RCC_OscConfig+0x620>)
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	4a3a      	ldr	r2, [pc, #232]	; (8004c30 <HAL_RCC_OscConfig+0x630>)
 8004b48:	4013      	ands	r3, r2
 8004b4a:	0019      	movs	r1, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b54:	431a      	orrs	r2, r3
 8004b56:	4b32      	ldr	r3, [pc, #200]	; (8004c20 <HAL_RCC_OscConfig+0x620>)
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b5c:	4b30      	ldr	r3, [pc, #192]	; (8004c20 <HAL_RCC_OscConfig+0x620>)
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	4b2f      	ldr	r3, [pc, #188]	; (8004c20 <HAL_RCC_OscConfig+0x620>)
 8004b62:	2180      	movs	r1, #128	; 0x80
 8004b64:	0449      	lsls	r1, r1, #17
 8004b66:	430a      	orrs	r2, r1
 8004b68:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b6a:	f7fd fe9f 	bl	80028ac <HAL_GetTick>
 8004b6e:	0003      	movs	r3, r0
 8004b70:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b72:	e008      	b.n	8004b86 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b74:	f7fd fe9a 	bl	80028ac <HAL_GetTick>
 8004b78:	0002      	movs	r2, r0
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e047      	b.n	8004c16 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b86:	4b26      	ldr	r3, [pc, #152]	; (8004c20 <HAL_RCC_OscConfig+0x620>)
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	2380      	movs	r3, #128	; 0x80
 8004b8c:	049b      	lsls	r3, r3, #18
 8004b8e:	4013      	ands	r3, r2
 8004b90:	d0f0      	beq.n	8004b74 <HAL_RCC_OscConfig+0x574>
 8004b92:	e03f      	b.n	8004c14 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b94:	4b22      	ldr	r3, [pc, #136]	; (8004c20 <HAL_RCC_OscConfig+0x620>)
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	4b21      	ldr	r3, [pc, #132]	; (8004c20 <HAL_RCC_OscConfig+0x620>)
 8004b9a:	4924      	ldr	r1, [pc, #144]	; (8004c2c <HAL_RCC_OscConfig+0x62c>)
 8004b9c:	400a      	ands	r2, r1
 8004b9e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba0:	f7fd fe84 	bl	80028ac <HAL_GetTick>
 8004ba4:	0003      	movs	r3, r0
 8004ba6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ba8:	e008      	b.n	8004bbc <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004baa:	f7fd fe7f 	bl	80028ac <HAL_GetTick>
 8004bae:	0002      	movs	r2, r0
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d901      	bls.n	8004bbc <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e02c      	b.n	8004c16 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bbc:	4b18      	ldr	r3, [pc, #96]	; (8004c20 <HAL_RCC_OscConfig+0x620>)
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	2380      	movs	r3, #128	; 0x80
 8004bc2:	049b      	lsls	r3, r3, #18
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	d1f0      	bne.n	8004baa <HAL_RCC_OscConfig+0x5aa>
 8004bc8:	e024      	b.n	8004c14 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d101      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e01f      	b.n	8004c16 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004bd6:	4b12      	ldr	r3, [pc, #72]	; (8004c20 <HAL_RCC_OscConfig+0x620>)
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004bdc:	4b10      	ldr	r3, [pc, #64]	; (8004c20 <HAL_RCC_OscConfig+0x620>)
 8004bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	2380      	movs	r3, #128	; 0x80
 8004be6:	025b      	lsls	r3, r3, #9
 8004be8:	401a      	ands	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d10e      	bne.n	8004c10 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	220f      	movs	r2, #15
 8004bf6:	401a      	ands	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d107      	bne.n	8004c10 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004c00:	697a      	ldr	r2, [r7, #20]
 8004c02:	23f0      	movs	r3, #240	; 0xf0
 8004c04:	039b      	lsls	r3, r3, #14
 8004c06:	401a      	ands	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d001      	beq.n	8004c14 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e000      	b.n	8004c16 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	0018      	movs	r0, r3
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	b008      	add	sp, #32
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	46c0      	nop			; (mov r8, r8)
 8004c20:	40021000 	.word	0x40021000
 8004c24:	00001388 	.word	0x00001388
 8004c28:	efffffff 	.word	0xefffffff
 8004c2c:	feffffff 	.word	0xfeffffff
 8004c30:	ffc2ffff 	.word	0xffc2ffff

08004c34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d101      	bne.n	8004c48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e0b3      	b.n	8004db0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c48:	4b5b      	ldr	r3, [pc, #364]	; (8004db8 <HAL_RCC_ClockConfig+0x184>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	4013      	ands	r3, r2
 8004c50:	683a      	ldr	r2, [r7, #0]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d911      	bls.n	8004c7a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c56:	4b58      	ldr	r3, [pc, #352]	; (8004db8 <HAL_RCC_ClockConfig+0x184>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	4393      	bics	r3, r2
 8004c5e:	0019      	movs	r1, r3
 8004c60:	4b55      	ldr	r3, [pc, #340]	; (8004db8 <HAL_RCC_ClockConfig+0x184>)
 8004c62:	683a      	ldr	r2, [r7, #0]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c68:	4b53      	ldr	r3, [pc, #332]	; (8004db8 <HAL_RCC_ClockConfig+0x184>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	4013      	ands	r3, r2
 8004c70:	683a      	ldr	r2, [r7, #0]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d001      	beq.n	8004c7a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e09a      	b.n	8004db0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2202      	movs	r2, #2
 8004c80:	4013      	ands	r3, r2
 8004c82:	d015      	beq.n	8004cb0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2204      	movs	r2, #4
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	d006      	beq.n	8004c9c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004c8e:	4b4b      	ldr	r3, [pc, #300]	; (8004dbc <HAL_RCC_ClockConfig+0x188>)
 8004c90:	685a      	ldr	r2, [r3, #4]
 8004c92:	4b4a      	ldr	r3, [pc, #296]	; (8004dbc <HAL_RCC_ClockConfig+0x188>)
 8004c94:	21e0      	movs	r1, #224	; 0xe0
 8004c96:	00c9      	lsls	r1, r1, #3
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c9c:	4b47      	ldr	r3, [pc, #284]	; (8004dbc <HAL_RCC_ClockConfig+0x188>)
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	22f0      	movs	r2, #240	; 0xf0
 8004ca2:	4393      	bics	r3, r2
 8004ca4:	0019      	movs	r1, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	689a      	ldr	r2, [r3, #8]
 8004caa:	4b44      	ldr	r3, [pc, #272]	; (8004dbc <HAL_RCC_ClockConfig+0x188>)
 8004cac:	430a      	orrs	r2, r1
 8004cae:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	d040      	beq.n	8004d3c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d107      	bne.n	8004cd2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cc2:	4b3e      	ldr	r3, [pc, #248]	; (8004dbc <HAL_RCC_ClockConfig+0x188>)
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	2380      	movs	r3, #128	; 0x80
 8004cc8:	029b      	lsls	r3, r3, #10
 8004cca:	4013      	ands	r3, r2
 8004ccc:	d114      	bne.n	8004cf8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e06e      	b.n	8004db0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d107      	bne.n	8004cea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cda:	4b38      	ldr	r3, [pc, #224]	; (8004dbc <HAL_RCC_ClockConfig+0x188>)
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	2380      	movs	r3, #128	; 0x80
 8004ce0:	049b      	lsls	r3, r3, #18
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	d108      	bne.n	8004cf8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e062      	b.n	8004db0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cea:	4b34      	ldr	r3, [pc, #208]	; (8004dbc <HAL_RCC_ClockConfig+0x188>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2202      	movs	r2, #2
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	d101      	bne.n	8004cf8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e05b      	b.n	8004db0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cf8:	4b30      	ldr	r3, [pc, #192]	; (8004dbc <HAL_RCC_ClockConfig+0x188>)
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	2203      	movs	r2, #3
 8004cfe:	4393      	bics	r3, r2
 8004d00:	0019      	movs	r1, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685a      	ldr	r2, [r3, #4]
 8004d06:	4b2d      	ldr	r3, [pc, #180]	; (8004dbc <HAL_RCC_ClockConfig+0x188>)
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d0c:	f7fd fdce 	bl	80028ac <HAL_GetTick>
 8004d10:	0003      	movs	r3, r0
 8004d12:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d14:	e009      	b.n	8004d2a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d16:	f7fd fdc9 	bl	80028ac <HAL_GetTick>
 8004d1a:	0002      	movs	r2, r0
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	4a27      	ldr	r2, [pc, #156]	; (8004dc0 <HAL_RCC_ClockConfig+0x18c>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e042      	b.n	8004db0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d2a:	4b24      	ldr	r3, [pc, #144]	; (8004dbc <HAL_RCC_ClockConfig+0x188>)
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	220c      	movs	r2, #12
 8004d30:	401a      	ands	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d1ec      	bne.n	8004d16 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d3c:	4b1e      	ldr	r3, [pc, #120]	; (8004db8 <HAL_RCC_ClockConfig+0x184>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2201      	movs	r2, #1
 8004d42:	4013      	ands	r3, r2
 8004d44:	683a      	ldr	r2, [r7, #0]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d211      	bcs.n	8004d6e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d4a:	4b1b      	ldr	r3, [pc, #108]	; (8004db8 <HAL_RCC_ClockConfig+0x184>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	4393      	bics	r3, r2
 8004d52:	0019      	movs	r1, r3
 8004d54:	4b18      	ldr	r3, [pc, #96]	; (8004db8 <HAL_RCC_ClockConfig+0x184>)
 8004d56:	683a      	ldr	r2, [r7, #0]
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d5c:	4b16      	ldr	r3, [pc, #88]	; (8004db8 <HAL_RCC_ClockConfig+0x184>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2201      	movs	r2, #1
 8004d62:	4013      	ands	r3, r2
 8004d64:	683a      	ldr	r2, [r7, #0]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d001      	beq.n	8004d6e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e020      	b.n	8004db0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2204      	movs	r2, #4
 8004d74:	4013      	ands	r3, r2
 8004d76:	d009      	beq.n	8004d8c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004d78:	4b10      	ldr	r3, [pc, #64]	; (8004dbc <HAL_RCC_ClockConfig+0x188>)
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	4a11      	ldr	r2, [pc, #68]	; (8004dc4 <HAL_RCC_ClockConfig+0x190>)
 8004d7e:	4013      	ands	r3, r2
 8004d80:	0019      	movs	r1, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	68da      	ldr	r2, [r3, #12]
 8004d86:	4b0d      	ldr	r3, [pc, #52]	; (8004dbc <HAL_RCC_ClockConfig+0x188>)
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004d8c:	f000 f820 	bl	8004dd0 <HAL_RCC_GetSysClockFreq>
 8004d90:	0001      	movs	r1, r0
 8004d92:	4b0a      	ldr	r3, [pc, #40]	; (8004dbc <HAL_RCC_ClockConfig+0x188>)
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	091b      	lsrs	r3, r3, #4
 8004d98:	220f      	movs	r2, #15
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	4a0a      	ldr	r2, [pc, #40]	; (8004dc8 <HAL_RCC_ClockConfig+0x194>)
 8004d9e:	5cd3      	ldrb	r3, [r2, r3]
 8004da0:	000a      	movs	r2, r1
 8004da2:	40da      	lsrs	r2, r3
 8004da4:	4b09      	ldr	r3, [pc, #36]	; (8004dcc <HAL_RCC_ClockConfig+0x198>)
 8004da6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004da8:	2003      	movs	r0, #3
 8004daa:	f7fd fd39 	bl	8002820 <HAL_InitTick>
  
  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	0018      	movs	r0, r3
 8004db2:	46bd      	mov	sp, r7
 8004db4:	b004      	add	sp, #16
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	40022000 	.word	0x40022000
 8004dbc:	40021000 	.word	0x40021000
 8004dc0:	00001388 	.word	0x00001388
 8004dc4:	fffff8ff 	.word	0xfffff8ff
 8004dc8:	08008754 	.word	0x08008754
 8004dcc:	2000001c 	.word	0x2000001c

08004dd0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dd0:	b590      	push	{r4, r7, lr}
 8004dd2:	b08f      	sub	sp, #60	; 0x3c
 8004dd4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004dd6:	2314      	movs	r3, #20
 8004dd8:	18fb      	adds	r3, r7, r3
 8004dda:	4a2b      	ldr	r2, [pc, #172]	; (8004e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ddc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004dde:	c313      	stmia	r3!, {r0, r1, r4}
 8004de0:	6812      	ldr	r2, [r2, #0]
 8004de2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004de4:	1d3b      	adds	r3, r7, #4
 8004de6:	4a29      	ldr	r2, [pc, #164]	; (8004e8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004de8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004dea:	c313      	stmia	r3!, {r0, r1, r4}
 8004dec:	6812      	ldr	r2, [r2, #0]
 8004dee:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004df0:	2300      	movs	r3, #0
 8004df2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004df4:	2300      	movs	r3, #0
 8004df6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004df8:	2300      	movs	r3, #0
 8004dfa:	637b      	str	r3, [r7, #52]	; 0x34
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004e00:	2300      	movs	r3, #0
 8004e02:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004e04:	4b22      	ldr	r3, [pc, #136]	; (8004e90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e0c:	220c      	movs	r2, #12
 8004e0e:	4013      	ands	r3, r2
 8004e10:	2b04      	cmp	r3, #4
 8004e12:	d002      	beq.n	8004e1a <HAL_RCC_GetSysClockFreq+0x4a>
 8004e14:	2b08      	cmp	r3, #8
 8004e16:	d003      	beq.n	8004e20 <HAL_RCC_GetSysClockFreq+0x50>
 8004e18:	e02d      	b.n	8004e76 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004e1a:	4b1e      	ldr	r3, [pc, #120]	; (8004e94 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004e1c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004e1e:	e02d      	b.n	8004e7c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e22:	0c9b      	lsrs	r3, r3, #18
 8004e24:	220f      	movs	r2, #15
 8004e26:	4013      	ands	r3, r2
 8004e28:	2214      	movs	r2, #20
 8004e2a:	18ba      	adds	r2, r7, r2
 8004e2c:	5cd3      	ldrb	r3, [r2, r3]
 8004e2e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004e30:	4b17      	ldr	r3, [pc, #92]	; (8004e90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e34:	220f      	movs	r2, #15
 8004e36:	4013      	ands	r3, r2
 8004e38:	1d3a      	adds	r2, r7, #4
 8004e3a:	5cd3      	ldrb	r3, [r2, r3]
 8004e3c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004e3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e40:	2380      	movs	r3, #128	; 0x80
 8004e42:	025b      	lsls	r3, r3, #9
 8004e44:	4013      	ands	r3, r2
 8004e46:	d009      	beq.n	8004e5c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004e48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e4a:	4812      	ldr	r0, [pc, #72]	; (8004e94 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004e4c:	f7fb f96e 	bl	800012c <__udivsi3>
 8004e50:	0003      	movs	r3, r0
 8004e52:	001a      	movs	r2, r3
 8004e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e56:	4353      	muls	r3, r2
 8004e58:	637b      	str	r3, [r7, #52]	; 0x34
 8004e5a:	e009      	b.n	8004e70 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004e5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e5e:	000a      	movs	r2, r1
 8004e60:	0152      	lsls	r2, r2, #5
 8004e62:	1a52      	subs	r2, r2, r1
 8004e64:	0193      	lsls	r3, r2, #6
 8004e66:	1a9b      	subs	r3, r3, r2
 8004e68:	00db      	lsls	r3, r3, #3
 8004e6a:	185b      	adds	r3, r3, r1
 8004e6c:	021b      	lsls	r3, r3, #8
 8004e6e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8004e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e72:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004e74:	e002      	b.n	8004e7c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004e76:	4b07      	ldr	r3, [pc, #28]	; (8004e94 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004e78:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004e7a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004e7e:	0018      	movs	r0, r3
 8004e80:	46bd      	mov	sp, r7
 8004e82:	b00f      	add	sp, #60	; 0x3c
 8004e84:	bd90      	pop	{r4, r7, pc}
 8004e86:	46c0      	nop			; (mov r8, r8)
 8004e88:	080086b0 	.word	0x080086b0
 8004e8c:	080086c0 	.word	0x080086c0
 8004e90:	40021000 	.word	0x40021000
 8004e94:	007a1200 	.word	0x007a1200

08004e98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e9c:	4b02      	ldr	r3, [pc, #8]	; (8004ea8 <HAL_RCC_GetHCLKFreq+0x10>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
}
 8004ea0:	0018      	movs	r0, r3
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	46c0      	nop			; (mov r8, r8)
 8004ea8:	2000001c 	.word	0x2000001c

08004eac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004eb0:	f7ff fff2 	bl	8004e98 <HAL_RCC_GetHCLKFreq>
 8004eb4:	0001      	movs	r1, r0
 8004eb6:	4b06      	ldr	r3, [pc, #24]	; (8004ed0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	0a1b      	lsrs	r3, r3, #8
 8004ebc:	2207      	movs	r2, #7
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	4a04      	ldr	r2, [pc, #16]	; (8004ed4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ec2:	5cd3      	ldrb	r3, [r2, r3]
 8004ec4:	40d9      	lsrs	r1, r3
 8004ec6:	000b      	movs	r3, r1
}    
 8004ec8:	0018      	movs	r0, r3
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	46c0      	nop			; (mov r8, r8)
 8004ed0:	40021000 	.word	0x40021000
 8004ed4:	08008764 	.word	0x08008764

08004ed8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b086      	sub	sp, #24
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	2380      	movs	r3, #128	; 0x80
 8004eee:	025b      	lsls	r3, r3, #9
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	d100      	bne.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004ef4:	e08e      	b.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004ef6:	2017      	movs	r0, #23
 8004ef8:	183b      	adds	r3, r7, r0
 8004efa:	2200      	movs	r2, #0
 8004efc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004efe:	4b5f      	ldr	r3, [pc, #380]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004f00:	69da      	ldr	r2, [r3, #28]
 8004f02:	2380      	movs	r3, #128	; 0x80
 8004f04:	055b      	lsls	r3, r3, #21
 8004f06:	4013      	ands	r3, r2
 8004f08:	d110      	bne.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f0a:	4b5c      	ldr	r3, [pc, #368]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004f0c:	69da      	ldr	r2, [r3, #28]
 8004f0e:	4b5b      	ldr	r3, [pc, #364]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004f10:	2180      	movs	r1, #128	; 0x80
 8004f12:	0549      	lsls	r1, r1, #21
 8004f14:	430a      	orrs	r2, r1
 8004f16:	61da      	str	r2, [r3, #28]
 8004f18:	4b58      	ldr	r3, [pc, #352]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004f1a:	69da      	ldr	r2, [r3, #28]
 8004f1c:	2380      	movs	r3, #128	; 0x80
 8004f1e:	055b      	lsls	r3, r3, #21
 8004f20:	4013      	ands	r3, r2
 8004f22:	60bb      	str	r3, [r7, #8]
 8004f24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f26:	183b      	adds	r3, r7, r0
 8004f28:	2201      	movs	r2, #1
 8004f2a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f2c:	4b54      	ldr	r3, [pc, #336]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	2380      	movs	r3, #128	; 0x80
 8004f32:	005b      	lsls	r3, r3, #1
 8004f34:	4013      	ands	r3, r2
 8004f36:	d11a      	bne.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f38:	4b51      	ldr	r3, [pc, #324]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	4b50      	ldr	r3, [pc, #320]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004f3e:	2180      	movs	r1, #128	; 0x80
 8004f40:	0049      	lsls	r1, r1, #1
 8004f42:	430a      	orrs	r2, r1
 8004f44:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f46:	f7fd fcb1 	bl	80028ac <HAL_GetTick>
 8004f4a:	0003      	movs	r3, r0
 8004f4c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f4e:	e008      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f50:	f7fd fcac 	bl	80028ac <HAL_GetTick>
 8004f54:	0002      	movs	r2, r0
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b64      	cmp	r3, #100	; 0x64
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e087      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f62:	4b47      	ldr	r3, [pc, #284]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	2380      	movs	r3, #128	; 0x80
 8004f68:	005b      	lsls	r3, r3, #1
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	d0f0      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f6e:	4b43      	ldr	r3, [pc, #268]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004f70:	6a1a      	ldr	r2, [r3, #32]
 8004f72:	23c0      	movs	r3, #192	; 0xc0
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	4013      	ands	r3, r2
 8004f78:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d034      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685a      	ldr	r2, [r3, #4]
 8004f84:	23c0      	movs	r3, #192	; 0xc0
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	4013      	ands	r3, r2
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d02c      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f90:	4b3a      	ldr	r3, [pc, #232]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004f92:	6a1b      	ldr	r3, [r3, #32]
 8004f94:	4a3b      	ldr	r2, [pc, #236]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f96:	4013      	ands	r3, r2
 8004f98:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f9a:	4b38      	ldr	r3, [pc, #224]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004f9c:	6a1a      	ldr	r2, [r3, #32]
 8004f9e:	4b37      	ldr	r3, [pc, #220]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004fa0:	2180      	movs	r1, #128	; 0x80
 8004fa2:	0249      	lsls	r1, r1, #9
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004fa8:	4b34      	ldr	r3, [pc, #208]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004faa:	6a1a      	ldr	r2, [r3, #32]
 8004fac:	4b33      	ldr	r3, [pc, #204]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004fae:	4936      	ldr	r1, [pc, #216]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004fb0:	400a      	ands	r2, r1
 8004fb2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004fb4:	4b31      	ldr	r3, [pc, #196]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	d013      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc2:	f7fd fc73 	bl	80028ac <HAL_GetTick>
 8004fc6:	0003      	movs	r3, r0
 8004fc8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fca:	e009      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fcc:	f7fd fc6e 	bl	80028ac <HAL_GetTick>
 8004fd0:	0002      	movs	r2, r0
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	4a2d      	ldr	r2, [pc, #180]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d901      	bls.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e048      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fe0:	4b26      	ldr	r3, [pc, #152]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004fe2:	6a1b      	ldr	r3, [r3, #32]
 8004fe4:	2202      	movs	r2, #2
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	d0f0      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fea:	4b24      	ldr	r3, [pc, #144]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004fec:	6a1b      	ldr	r3, [r3, #32]
 8004fee:	4a25      	ldr	r2, [pc, #148]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	0019      	movs	r1, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685a      	ldr	r2, [r3, #4]
 8004ff8:	4b20      	ldr	r3, [pc, #128]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004ffe:	2317      	movs	r3, #23
 8005000:	18fb      	adds	r3, r7, r3
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	2b01      	cmp	r3, #1
 8005006:	d105      	bne.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005008:	4b1c      	ldr	r3, [pc, #112]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800500a:	69da      	ldr	r2, [r3, #28]
 800500c:	4b1b      	ldr	r3, [pc, #108]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800500e:	4920      	ldr	r1, [pc, #128]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005010:	400a      	ands	r2, r1
 8005012:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2201      	movs	r2, #1
 800501a:	4013      	ands	r3, r2
 800501c:	d009      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800501e:	4b17      	ldr	r3, [pc, #92]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005022:	2203      	movs	r2, #3
 8005024:	4393      	bics	r3, r2
 8005026:	0019      	movs	r1, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	689a      	ldr	r2, [r3, #8]
 800502c:	4b13      	ldr	r3, [pc, #76]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800502e:	430a      	orrs	r2, r1
 8005030:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2220      	movs	r2, #32
 8005038:	4013      	ands	r3, r2
 800503a:	d009      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800503c:	4b0f      	ldr	r3, [pc, #60]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800503e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005040:	2210      	movs	r2, #16
 8005042:	4393      	bics	r3, r2
 8005044:	0019      	movs	r1, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	68da      	ldr	r2, [r3, #12]
 800504a:	4b0c      	ldr	r3, [pc, #48]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800504c:	430a      	orrs	r2, r1
 800504e:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	2380      	movs	r3, #128	; 0x80
 8005056:	00db      	lsls	r3, r3, #3
 8005058:	4013      	ands	r3, r2
 800505a:	d009      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800505c:	4b07      	ldr	r3, [pc, #28]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800505e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005060:	2240      	movs	r2, #64	; 0x40
 8005062:	4393      	bics	r3, r2
 8005064:	0019      	movs	r1, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	691a      	ldr	r2, [r3, #16]
 800506a:	4b04      	ldr	r3, [pc, #16]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800506c:	430a      	orrs	r2, r1
 800506e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	0018      	movs	r0, r3
 8005074:	46bd      	mov	sp, r7
 8005076:	b006      	add	sp, #24
 8005078:	bd80      	pop	{r7, pc}
 800507a:	46c0      	nop			; (mov r8, r8)
 800507c:	40021000 	.word	0x40021000
 8005080:	40007000 	.word	0x40007000
 8005084:	fffffcff 	.word	0xfffffcff
 8005088:	fffeffff 	.word	0xfffeffff
 800508c:	00001388 	.word	0x00001388
 8005090:	efffffff 	.word	0xefffffff

08005094 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d101      	bne.n	80050a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e0a8      	b.n	80051f8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d109      	bne.n	80050c2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685a      	ldr	r2, [r3, #4]
 80050b2:	2382      	movs	r3, #130	; 0x82
 80050b4:	005b      	lsls	r3, r3, #1
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d009      	beq.n	80050ce <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	61da      	str	r2, [r3, #28]
 80050c0:	e005      	b.n	80050ce <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	225d      	movs	r2, #93	; 0x5d
 80050d8:	5c9b      	ldrb	r3, [r3, r2]
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d107      	bne.n	80050f0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	225c      	movs	r2, #92	; 0x5c
 80050e4:	2100      	movs	r1, #0
 80050e6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	0018      	movs	r0, r3
 80050ec:	f7fd f932 	bl	8002354 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	225d      	movs	r2, #93	; 0x5d
 80050f4:	2102      	movs	r1, #2
 80050f6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2140      	movs	r1, #64	; 0x40
 8005104:	438a      	bics	r2, r1
 8005106:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	68da      	ldr	r2, [r3, #12]
 800510c:	23e0      	movs	r3, #224	; 0xe0
 800510e:	00db      	lsls	r3, r3, #3
 8005110:	429a      	cmp	r2, r3
 8005112:	d902      	bls.n	800511a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005114:	2300      	movs	r3, #0
 8005116:	60fb      	str	r3, [r7, #12]
 8005118:	e002      	b.n	8005120 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800511a:	2380      	movs	r3, #128	; 0x80
 800511c:	015b      	lsls	r3, r3, #5
 800511e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	68da      	ldr	r2, [r3, #12]
 8005124:	23f0      	movs	r3, #240	; 0xf0
 8005126:	011b      	lsls	r3, r3, #4
 8005128:	429a      	cmp	r2, r3
 800512a:	d008      	beq.n	800513e <HAL_SPI_Init+0xaa>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	68da      	ldr	r2, [r3, #12]
 8005130:	23e0      	movs	r3, #224	; 0xe0
 8005132:	00db      	lsls	r3, r3, #3
 8005134:	429a      	cmp	r2, r3
 8005136:	d002      	beq.n	800513e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	2382      	movs	r3, #130	; 0x82
 8005144:	005b      	lsls	r3, r3, #1
 8005146:	401a      	ands	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6899      	ldr	r1, [r3, #8]
 800514c:	2384      	movs	r3, #132	; 0x84
 800514e:	021b      	lsls	r3, r3, #8
 8005150:	400b      	ands	r3, r1
 8005152:	431a      	orrs	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	2102      	movs	r1, #2
 800515a:	400b      	ands	r3, r1
 800515c:	431a      	orrs	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	2101      	movs	r1, #1
 8005164:	400b      	ands	r3, r1
 8005166:	431a      	orrs	r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6999      	ldr	r1, [r3, #24]
 800516c:	2380      	movs	r3, #128	; 0x80
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	400b      	ands	r3, r1
 8005172:	431a      	orrs	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	69db      	ldr	r3, [r3, #28]
 8005178:	2138      	movs	r1, #56	; 0x38
 800517a:	400b      	ands	r3, r1
 800517c:	431a      	orrs	r2, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	2180      	movs	r1, #128	; 0x80
 8005184:	400b      	ands	r3, r1
 8005186:	431a      	orrs	r2, r3
 8005188:	0011      	movs	r1, r2
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800518e:	2380      	movs	r3, #128	; 0x80
 8005190:	019b      	lsls	r3, r3, #6
 8005192:	401a      	ands	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	430a      	orrs	r2, r1
 800519a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	0c1b      	lsrs	r3, r3, #16
 80051a2:	2204      	movs	r2, #4
 80051a4:	401a      	ands	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051aa:	2110      	movs	r1, #16
 80051ac:	400b      	ands	r3, r1
 80051ae:	431a      	orrs	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051b4:	2108      	movs	r1, #8
 80051b6:	400b      	ands	r3, r1
 80051b8:	431a      	orrs	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68d9      	ldr	r1, [r3, #12]
 80051be:	23f0      	movs	r3, #240	; 0xf0
 80051c0:	011b      	lsls	r3, r3, #4
 80051c2:	400b      	ands	r3, r1
 80051c4:	431a      	orrs	r2, r3
 80051c6:	0011      	movs	r1, r2
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	2380      	movs	r3, #128	; 0x80
 80051cc:	015b      	lsls	r3, r3, #5
 80051ce:	401a      	ands	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	430a      	orrs	r2, r1
 80051d6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	69da      	ldr	r2, [r3, #28]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4907      	ldr	r1, [pc, #28]	; (8005200 <HAL_SPI_Init+0x16c>)
 80051e4:	400a      	ands	r2, r1
 80051e6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	225d      	movs	r2, #93	; 0x5d
 80051f2:	2101      	movs	r1, #1
 80051f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	0018      	movs	r0, r3
 80051fa:	46bd      	mov	sp, r7
 80051fc:	b004      	add	sp, #16
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	fffff7ff 	.word	0xfffff7ff

08005204 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b088      	sub	sp, #32
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	603b      	str	r3, [r7, #0]
 8005210:	1dbb      	adds	r3, r7, #6
 8005212:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005214:	231f      	movs	r3, #31
 8005216:	18fb      	adds	r3, r7, r3
 8005218:	2200      	movs	r2, #0
 800521a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	225c      	movs	r2, #92	; 0x5c
 8005220:	5c9b      	ldrb	r3, [r3, r2]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d101      	bne.n	800522a <HAL_SPI_Transmit+0x26>
 8005226:	2302      	movs	r3, #2
 8005228:	e140      	b.n	80054ac <HAL_SPI_Transmit+0x2a8>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	225c      	movs	r2, #92	; 0x5c
 800522e:	2101      	movs	r1, #1
 8005230:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005232:	f7fd fb3b 	bl	80028ac <HAL_GetTick>
 8005236:	0003      	movs	r3, r0
 8005238:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800523a:	2316      	movs	r3, #22
 800523c:	18fb      	adds	r3, r7, r3
 800523e:	1dba      	adds	r2, r7, #6
 8005240:	8812      	ldrh	r2, [r2, #0]
 8005242:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	225d      	movs	r2, #93	; 0x5d
 8005248:	5c9b      	ldrb	r3, [r3, r2]
 800524a:	b2db      	uxtb	r3, r3
 800524c:	2b01      	cmp	r3, #1
 800524e:	d004      	beq.n	800525a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005250:	231f      	movs	r3, #31
 8005252:	18fb      	adds	r3, r7, r3
 8005254:	2202      	movs	r2, #2
 8005256:	701a      	strb	r2, [r3, #0]
    goto error;
 8005258:	e11d      	b.n	8005496 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d003      	beq.n	8005268 <HAL_SPI_Transmit+0x64>
 8005260:	1dbb      	adds	r3, r7, #6
 8005262:	881b      	ldrh	r3, [r3, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d104      	bne.n	8005272 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005268:	231f      	movs	r3, #31
 800526a:	18fb      	adds	r3, r7, r3
 800526c:	2201      	movs	r2, #1
 800526e:	701a      	strb	r2, [r3, #0]
    goto error;
 8005270:	e111      	b.n	8005496 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	225d      	movs	r2, #93	; 0x5d
 8005276:	2103      	movs	r1, #3
 8005278:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	68ba      	ldr	r2, [r7, #8]
 8005284:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	1dba      	adds	r2, r7, #6
 800528a:	8812      	ldrh	r2, [r2, #0]
 800528c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	1dba      	adds	r2, r7, #6
 8005292:	8812      	ldrh	r2, [r2, #0]
 8005294:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2244      	movs	r2, #68	; 0x44
 80052a0:	2100      	movs	r1, #0
 80052a2:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2246      	movs	r2, #70	; 0x46
 80052a8:	2100      	movs	r1, #0
 80052aa:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	689a      	ldr	r2, [r3, #8]
 80052bc:	2380      	movs	r3, #128	; 0x80
 80052be:	021b      	lsls	r3, r3, #8
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d110      	bne.n	80052e6 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2140      	movs	r1, #64	; 0x40
 80052d0:	438a      	bics	r2, r1
 80052d2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2180      	movs	r1, #128	; 0x80
 80052e0:	01c9      	lsls	r1, r1, #7
 80052e2:	430a      	orrs	r2, r1
 80052e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2240      	movs	r2, #64	; 0x40
 80052ee:	4013      	ands	r3, r2
 80052f0:	2b40      	cmp	r3, #64	; 0x40
 80052f2:	d007      	beq.n	8005304 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2140      	movs	r1, #64	; 0x40
 8005300:	430a      	orrs	r2, r1
 8005302:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	68da      	ldr	r2, [r3, #12]
 8005308:	23e0      	movs	r3, #224	; 0xe0
 800530a:	00db      	lsls	r3, r3, #3
 800530c:	429a      	cmp	r2, r3
 800530e:	d94e      	bls.n	80053ae <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d004      	beq.n	8005322 <HAL_SPI_Transmit+0x11e>
 8005318:	2316      	movs	r3, #22
 800531a:	18fb      	adds	r3, r7, r3
 800531c:	881b      	ldrh	r3, [r3, #0]
 800531e:	2b01      	cmp	r3, #1
 8005320:	d13f      	bne.n	80053a2 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005326:	881a      	ldrh	r2, [r3, #0]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005332:	1c9a      	adds	r2, r3, #2
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800533c:	b29b      	uxth	r3, r3
 800533e:	3b01      	subs	r3, #1
 8005340:	b29a      	uxth	r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005346:	e02c      	b.n	80053a2 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	2202      	movs	r2, #2
 8005350:	4013      	ands	r3, r2
 8005352:	2b02      	cmp	r3, #2
 8005354:	d112      	bne.n	800537c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535a:	881a      	ldrh	r2, [r3, #0]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005366:	1c9a      	adds	r2, r3, #2
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005370:	b29b      	uxth	r3, r3
 8005372:	3b01      	subs	r3, #1
 8005374:	b29a      	uxth	r2, r3
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	87da      	strh	r2, [r3, #62]	; 0x3e
 800537a:	e012      	b.n	80053a2 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800537c:	f7fd fa96 	bl	80028ac <HAL_GetTick>
 8005380:	0002      	movs	r2, r0
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	683a      	ldr	r2, [r7, #0]
 8005388:	429a      	cmp	r2, r3
 800538a:	d802      	bhi.n	8005392 <HAL_SPI_Transmit+0x18e>
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	3301      	adds	r3, #1
 8005390:	d102      	bne.n	8005398 <HAL_SPI_Transmit+0x194>
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d104      	bne.n	80053a2 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8005398:	231f      	movs	r3, #31
 800539a:	18fb      	adds	r3, r7, r3
 800539c:	2203      	movs	r2, #3
 800539e:	701a      	strb	r2, [r3, #0]
          goto error;
 80053a0:	e079      	b.n	8005496 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d1cd      	bne.n	8005348 <HAL_SPI_Transmit+0x144>
 80053ac:	e04f      	b.n	800544e <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d004      	beq.n	80053c0 <HAL_SPI_Transmit+0x1bc>
 80053b6:	2316      	movs	r3, #22
 80053b8:	18fb      	adds	r3, r7, r3
 80053ba:	881b      	ldrh	r3, [r3, #0]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d141      	bne.n	8005444 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	330c      	adds	r3, #12
 80053ca:	7812      	ldrb	r2, [r2, #0]
 80053cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d2:	1c5a      	adds	r2, r3, #1
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053dc:	b29b      	uxth	r3, r3
 80053de:	3b01      	subs	r3, #1
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80053e6:	e02d      	b.n	8005444 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	2202      	movs	r2, #2
 80053f0:	4013      	ands	r3, r2
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d113      	bne.n	800541e <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	330c      	adds	r3, #12
 8005400:	7812      	ldrb	r2, [r2, #0]
 8005402:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005408:	1c5a      	adds	r2, r3, #1
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005412:	b29b      	uxth	r3, r3
 8005414:	3b01      	subs	r3, #1
 8005416:	b29a      	uxth	r2, r3
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800541c:	e012      	b.n	8005444 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800541e:	f7fd fa45 	bl	80028ac <HAL_GetTick>
 8005422:	0002      	movs	r2, r0
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	683a      	ldr	r2, [r7, #0]
 800542a:	429a      	cmp	r2, r3
 800542c:	d802      	bhi.n	8005434 <HAL_SPI_Transmit+0x230>
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	3301      	adds	r3, #1
 8005432:	d102      	bne.n	800543a <HAL_SPI_Transmit+0x236>
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d104      	bne.n	8005444 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800543a:	231f      	movs	r3, #31
 800543c:	18fb      	adds	r3, r7, r3
 800543e:	2203      	movs	r2, #3
 8005440:	701a      	strb	r2, [r3, #0]
          goto error;
 8005442:	e028      	b.n	8005496 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005448:	b29b      	uxth	r3, r3
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1cc      	bne.n	80053e8 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800544e:	69ba      	ldr	r2, [r7, #24]
 8005450:	6839      	ldr	r1, [r7, #0]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	0018      	movs	r0, r3
 8005456:	f000 f95d 	bl	8005714 <SPI_EndRxTxTransaction>
 800545a:	1e03      	subs	r3, r0, #0
 800545c:	d002      	beq.n	8005464 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2220      	movs	r2, #32
 8005462:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d10a      	bne.n	8005482 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800546c:	2300      	movs	r3, #0
 800546e:	613b      	str	r3, [r7, #16]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	613b      	str	r3, [r7, #16]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	613b      	str	r3, [r7, #16]
 8005480:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005486:	2b00      	cmp	r3, #0
 8005488:	d004      	beq.n	8005494 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800548a:	231f      	movs	r3, #31
 800548c:	18fb      	adds	r3, r7, r3
 800548e:	2201      	movs	r2, #1
 8005490:	701a      	strb	r2, [r3, #0]
 8005492:	e000      	b.n	8005496 <HAL_SPI_Transmit+0x292>
  }

error:
 8005494:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	225d      	movs	r2, #93	; 0x5d
 800549a:	2101      	movs	r1, #1
 800549c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	225c      	movs	r2, #92	; 0x5c
 80054a2:	2100      	movs	r1, #0
 80054a4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80054a6:	231f      	movs	r3, #31
 80054a8:	18fb      	adds	r3, r7, r3
 80054aa:	781b      	ldrb	r3, [r3, #0]
}
 80054ac:	0018      	movs	r0, r3
 80054ae:	46bd      	mov	sp, r7
 80054b0:	b008      	add	sp, #32
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b088      	sub	sp, #32
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	603b      	str	r3, [r7, #0]
 80054c0:	1dfb      	adds	r3, r7, #7
 80054c2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80054c4:	f7fd f9f2 	bl	80028ac <HAL_GetTick>
 80054c8:	0002      	movs	r2, r0
 80054ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054cc:	1a9b      	subs	r3, r3, r2
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	18d3      	adds	r3, r2, r3
 80054d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80054d4:	f7fd f9ea 	bl	80028ac <HAL_GetTick>
 80054d8:	0003      	movs	r3, r0
 80054da:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80054dc:	4b3a      	ldr	r3, [pc, #232]	; (80055c8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	015b      	lsls	r3, r3, #5
 80054e2:	0d1b      	lsrs	r3, r3, #20
 80054e4:	69fa      	ldr	r2, [r7, #28]
 80054e6:	4353      	muls	r3, r2
 80054e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054ea:	e058      	b.n	800559e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	3301      	adds	r3, #1
 80054f0:	d055      	beq.n	800559e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80054f2:	f7fd f9db 	bl	80028ac <HAL_GetTick>
 80054f6:	0002      	movs	r2, r0
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	69fa      	ldr	r2, [r7, #28]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d902      	bls.n	8005508 <SPI_WaitFlagStateUntilTimeout+0x54>
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d142      	bne.n	800558e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	685a      	ldr	r2, [r3, #4]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	21e0      	movs	r1, #224	; 0xe0
 8005514:	438a      	bics	r2, r1
 8005516:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	685a      	ldr	r2, [r3, #4]
 800551c:	2382      	movs	r3, #130	; 0x82
 800551e:	005b      	lsls	r3, r3, #1
 8005520:	429a      	cmp	r2, r3
 8005522:	d113      	bne.n	800554c <SPI_WaitFlagStateUntilTimeout+0x98>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	689a      	ldr	r2, [r3, #8]
 8005528:	2380      	movs	r3, #128	; 0x80
 800552a:	021b      	lsls	r3, r3, #8
 800552c:	429a      	cmp	r2, r3
 800552e:	d005      	beq.n	800553c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	689a      	ldr	r2, [r3, #8]
 8005534:	2380      	movs	r3, #128	; 0x80
 8005536:	00db      	lsls	r3, r3, #3
 8005538:	429a      	cmp	r2, r3
 800553a:	d107      	bne.n	800554c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2140      	movs	r1, #64	; 0x40
 8005548:	438a      	bics	r2, r1
 800554a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005550:	2380      	movs	r3, #128	; 0x80
 8005552:	019b      	lsls	r3, r3, #6
 8005554:	429a      	cmp	r2, r3
 8005556:	d110      	bne.n	800557a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	491a      	ldr	r1, [pc, #104]	; (80055cc <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005564:	400a      	ands	r2, r1
 8005566:	601a      	str	r2, [r3, #0]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2180      	movs	r1, #128	; 0x80
 8005574:	0189      	lsls	r1, r1, #6
 8005576:	430a      	orrs	r2, r1
 8005578:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	225d      	movs	r2, #93	; 0x5d
 800557e:	2101      	movs	r1, #1
 8005580:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	225c      	movs	r2, #92	; 0x5c
 8005586:	2100      	movs	r1, #0
 8005588:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e017      	b.n	80055be <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d101      	bne.n	8005598 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005594:	2300      	movs	r3, #0
 8005596:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	3b01      	subs	r3, #1
 800559c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	4013      	ands	r3, r2
 80055a8:	68ba      	ldr	r2, [r7, #8]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	425a      	negs	r2, r3
 80055ae:	4153      	adcs	r3, r2
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	001a      	movs	r2, r3
 80055b4:	1dfb      	adds	r3, r7, #7
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d197      	bne.n	80054ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	0018      	movs	r0, r3
 80055c0:	46bd      	mov	sp, r7
 80055c2:	b008      	add	sp, #32
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	46c0      	nop			; (mov r8, r8)
 80055c8:	2000001c 	.word	0x2000001c
 80055cc:	ffffdfff 	.word	0xffffdfff

080055d0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b08a      	sub	sp, #40	; 0x28
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
 80055dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80055de:	2317      	movs	r3, #23
 80055e0:	18fb      	adds	r3, r7, r3
 80055e2:	2200      	movs	r2, #0
 80055e4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80055e6:	f7fd f961 	bl	80028ac <HAL_GetTick>
 80055ea:	0002      	movs	r2, r0
 80055ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ee:	1a9b      	subs	r3, r3, r2
 80055f0:	683a      	ldr	r2, [r7, #0]
 80055f2:	18d3      	adds	r3, r2, r3
 80055f4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80055f6:	f7fd f959 	bl	80028ac <HAL_GetTick>
 80055fa:	0003      	movs	r3, r0
 80055fc:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	330c      	adds	r3, #12
 8005604:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005606:	4b41      	ldr	r3, [pc, #260]	; (800570c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	0013      	movs	r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	189b      	adds	r3, r3, r2
 8005610:	00da      	lsls	r2, r3, #3
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	0d1b      	lsrs	r3, r3, #20
 8005616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005618:	4353      	muls	r3, r2
 800561a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800561c:	e068      	b.n	80056f0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800561e:	68ba      	ldr	r2, [r7, #8]
 8005620:	23c0      	movs	r3, #192	; 0xc0
 8005622:	00db      	lsls	r3, r3, #3
 8005624:	429a      	cmp	r2, r3
 8005626:	d10a      	bne.n	800563e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d107      	bne.n	800563e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	b2da      	uxtb	r2, r3
 8005634:	2117      	movs	r1, #23
 8005636:	187b      	adds	r3, r7, r1
 8005638:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800563a:	187b      	adds	r3, r7, r1
 800563c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	3301      	adds	r3, #1
 8005642:	d055      	beq.n	80056f0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005644:	f7fd f932 	bl	80028ac <HAL_GetTick>
 8005648:	0002      	movs	r2, r0
 800564a:	6a3b      	ldr	r3, [r7, #32]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005650:	429a      	cmp	r2, r3
 8005652:	d902      	bls.n	800565a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8005654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005656:	2b00      	cmp	r3, #0
 8005658:	d142      	bne.n	80056e0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	21e0      	movs	r1, #224	; 0xe0
 8005666:	438a      	bics	r2, r1
 8005668:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	685a      	ldr	r2, [r3, #4]
 800566e:	2382      	movs	r3, #130	; 0x82
 8005670:	005b      	lsls	r3, r3, #1
 8005672:	429a      	cmp	r2, r3
 8005674:	d113      	bne.n	800569e <SPI_WaitFifoStateUntilTimeout+0xce>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	689a      	ldr	r2, [r3, #8]
 800567a:	2380      	movs	r3, #128	; 0x80
 800567c:	021b      	lsls	r3, r3, #8
 800567e:	429a      	cmp	r2, r3
 8005680:	d005      	beq.n	800568e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	689a      	ldr	r2, [r3, #8]
 8005686:	2380      	movs	r3, #128	; 0x80
 8005688:	00db      	lsls	r3, r3, #3
 800568a:	429a      	cmp	r2, r3
 800568c:	d107      	bne.n	800569e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2140      	movs	r1, #64	; 0x40
 800569a:	438a      	bics	r2, r1
 800569c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056a2:	2380      	movs	r3, #128	; 0x80
 80056a4:	019b      	lsls	r3, r3, #6
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d110      	bne.n	80056cc <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4916      	ldr	r1, [pc, #88]	; (8005710 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80056b6:	400a      	ands	r2, r1
 80056b8:	601a      	str	r2, [r3, #0]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2180      	movs	r1, #128	; 0x80
 80056c6:	0189      	lsls	r1, r1, #6
 80056c8:	430a      	orrs	r2, r1
 80056ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	225d      	movs	r2, #93	; 0x5d
 80056d0:	2101      	movs	r1, #1
 80056d2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	225c      	movs	r2, #92	; 0x5c
 80056d8:	2100      	movs	r1, #0
 80056da:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e010      	b.n	8005702 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d101      	bne.n	80056ea <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80056e6:	2300      	movs	r3, #0
 80056e8:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	3b01      	subs	r3, #1
 80056ee:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	68ba      	ldr	r2, [r7, #8]
 80056f8:	4013      	ands	r3, r2
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d18e      	bne.n	800561e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8005700:	2300      	movs	r3, #0
}
 8005702:	0018      	movs	r0, r3
 8005704:	46bd      	mov	sp, r7
 8005706:	b00a      	add	sp, #40	; 0x28
 8005708:	bd80      	pop	{r7, pc}
 800570a:	46c0      	nop			; (mov r8, r8)
 800570c:	2000001c 	.word	0x2000001c
 8005710:	ffffdfff 	.word	0xffffdfff

08005714 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b086      	sub	sp, #24
 8005718:	af02      	add	r7, sp, #8
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	23c0      	movs	r3, #192	; 0xc0
 8005724:	0159      	lsls	r1, r3, #5
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	9300      	str	r3, [sp, #0]
 800572c:	0013      	movs	r3, r2
 800572e:	2200      	movs	r2, #0
 8005730:	f7ff ff4e 	bl	80055d0 <SPI_WaitFifoStateUntilTimeout>
 8005734:	1e03      	subs	r3, r0, #0
 8005736:	d007      	beq.n	8005748 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800573c:	2220      	movs	r2, #32
 800573e:	431a      	orrs	r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e027      	b.n	8005798 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005748:	68ba      	ldr	r2, [r7, #8]
 800574a:	68f8      	ldr	r0, [r7, #12]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	9300      	str	r3, [sp, #0]
 8005750:	0013      	movs	r3, r2
 8005752:	2200      	movs	r2, #0
 8005754:	2180      	movs	r1, #128	; 0x80
 8005756:	f7ff fead 	bl	80054b4 <SPI_WaitFlagStateUntilTimeout>
 800575a:	1e03      	subs	r3, r0, #0
 800575c:	d007      	beq.n	800576e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005762:	2220      	movs	r2, #32
 8005764:	431a      	orrs	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e014      	b.n	8005798 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800576e:	68ba      	ldr	r2, [r7, #8]
 8005770:	23c0      	movs	r3, #192	; 0xc0
 8005772:	00d9      	lsls	r1, r3, #3
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	9300      	str	r3, [sp, #0]
 800577a:	0013      	movs	r3, r2
 800577c:	2200      	movs	r2, #0
 800577e:	f7ff ff27 	bl	80055d0 <SPI_WaitFifoStateUntilTimeout>
 8005782:	1e03      	subs	r3, r0, #0
 8005784:	d007      	beq.n	8005796 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800578a:	2220      	movs	r2, #32
 800578c:	431a      	orrs	r2, r3
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e000      	b.n	8005798 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	0018      	movs	r0, r3
 800579a:	46bd      	mov	sp, r7
 800579c:	b004      	add	sp, #16
 800579e:	bd80      	pop	{r7, pc}

080057a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d101      	bne.n	80057b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e042      	b.n	8005838 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	223d      	movs	r2, #61	; 0x3d
 80057b6:	5c9b      	ldrb	r3, [r3, r2]
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d107      	bne.n	80057ce <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	223c      	movs	r2, #60	; 0x3c
 80057c2:	2100      	movs	r1, #0
 80057c4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	0018      	movs	r0, r3
 80057ca:	f7fc fe4d 	bl	8002468 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	223d      	movs	r2, #61	; 0x3d
 80057d2:	2102      	movs	r1, #2
 80057d4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	3304      	adds	r3, #4
 80057de:	0019      	movs	r1, r3
 80057e0:	0010      	movs	r0, r2
 80057e2:	f000 fbe7 	bl	8005fb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2246      	movs	r2, #70	; 0x46
 80057ea:	2101      	movs	r1, #1
 80057ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	223e      	movs	r2, #62	; 0x3e
 80057f2:	2101      	movs	r1, #1
 80057f4:	5499      	strb	r1, [r3, r2]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	223f      	movs	r2, #63	; 0x3f
 80057fa:	2101      	movs	r1, #1
 80057fc:	5499      	strb	r1, [r3, r2]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2240      	movs	r2, #64	; 0x40
 8005802:	2101      	movs	r1, #1
 8005804:	5499      	strb	r1, [r3, r2]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2241      	movs	r2, #65	; 0x41
 800580a:	2101      	movs	r1, #1
 800580c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2242      	movs	r2, #66	; 0x42
 8005812:	2101      	movs	r1, #1
 8005814:	5499      	strb	r1, [r3, r2]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2243      	movs	r2, #67	; 0x43
 800581a:	2101      	movs	r1, #1
 800581c:	5499      	strb	r1, [r3, r2]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2244      	movs	r2, #68	; 0x44
 8005822:	2101      	movs	r1, #1
 8005824:	5499      	strb	r1, [r3, r2]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2245      	movs	r2, #69	; 0x45
 800582a:	2101      	movs	r1, #1
 800582c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	223d      	movs	r2, #61	; 0x3d
 8005832:	2101      	movs	r1, #1
 8005834:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	0018      	movs	r0, r3
 800583a:	46bd      	mov	sp, r7
 800583c:	b002      	add	sp, #8
 800583e:	bd80      	pop	{r7, pc}

08005840 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d101      	bne.n	8005852 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e042      	b.n	80058d8 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	223d      	movs	r2, #61	; 0x3d
 8005856:	5c9b      	ldrb	r3, [r3, r2]
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2b00      	cmp	r3, #0
 800585c:	d107      	bne.n	800586e <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	223c      	movs	r2, #60	; 0x3c
 8005862:	2100      	movs	r1, #0
 8005864:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	0018      	movs	r0, r3
 800586a:	f000 f839 	bl	80058e0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	223d      	movs	r2, #61	; 0x3d
 8005872:	2102      	movs	r1, #2
 8005874:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	3304      	adds	r3, #4
 800587e:	0019      	movs	r1, r3
 8005880:	0010      	movs	r0, r2
 8005882:	f000 fb97 	bl	8005fb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2246      	movs	r2, #70	; 0x46
 800588a:	2101      	movs	r1, #1
 800588c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	223e      	movs	r2, #62	; 0x3e
 8005892:	2101      	movs	r1, #1
 8005894:	5499      	strb	r1, [r3, r2]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	223f      	movs	r2, #63	; 0x3f
 800589a:	2101      	movs	r1, #1
 800589c:	5499      	strb	r1, [r3, r2]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2240      	movs	r2, #64	; 0x40
 80058a2:	2101      	movs	r1, #1
 80058a4:	5499      	strb	r1, [r3, r2]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2241      	movs	r2, #65	; 0x41
 80058aa:	2101      	movs	r1, #1
 80058ac:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2242      	movs	r2, #66	; 0x42
 80058b2:	2101      	movs	r1, #1
 80058b4:	5499      	strb	r1, [r3, r2]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2243      	movs	r2, #67	; 0x43
 80058ba:	2101      	movs	r1, #1
 80058bc:	5499      	strb	r1, [r3, r2]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2244      	movs	r2, #68	; 0x44
 80058c2:	2101      	movs	r1, #1
 80058c4:	5499      	strb	r1, [r3, r2]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2245      	movs	r2, #69	; 0x45
 80058ca:	2101      	movs	r1, #1
 80058cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	223d      	movs	r2, #61	; 0x3d
 80058d2:	2101      	movs	r1, #1
 80058d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	0018      	movs	r0, r3
 80058da:	46bd      	mov	sp, r7
 80058dc:	b002      	add	sp, #8
 80058de:	bd80      	pop	{r7, pc}

080058e0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80058e8:	46c0      	nop			; (mov r8, r8)
 80058ea:	46bd      	mov	sp, r7
 80058ec:	b002      	add	sp, #8
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058fa:	230f      	movs	r3, #15
 80058fc:	18fb      	adds	r3, r7, r3
 80058fe:	2200      	movs	r2, #0
 8005900:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d108      	bne.n	800591a <HAL_TIM_OC_Start_IT+0x2a>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	223e      	movs	r2, #62	; 0x3e
 800590c:	5c9b      	ldrb	r3, [r3, r2]
 800590e:	b2db      	uxtb	r3, r3
 8005910:	3b01      	subs	r3, #1
 8005912:	1e5a      	subs	r2, r3, #1
 8005914:	4193      	sbcs	r3, r2
 8005916:	b2db      	uxtb	r3, r3
 8005918:	e01f      	b.n	800595a <HAL_TIM_OC_Start_IT+0x6a>
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	2b04      	cmp	r3, #4
 800591e:	d108      	bne.n	8005932 <HAL_TIM_OC_Start_IT+0x42>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	223f      	movs	r2, #63	; 0x3f
 8005924:	5c9b      	ldrb	r3, [r3, r2]
 8005926:	b2db      	uxtb	r3, r3
 8005928:	3b01      	subs	r3, #1
 800592a:	1e5a      	subs	r2, r3, #1
 800592c:	4193      	sbcs	r3, r2
 800592e:	b2db      	uxtb	r3, r3
 8005930:	e013      	b.n	800595a <HAL_TIM_OC_Start_IT+0x6a>
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	2b08      	cmp	r3, #8
 8005936:	d108      	bne.n	800594a <HAL_TIM_OC_Start_IT+0x5a>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2240      	movs	r2, #64	; 0x40
 800593c:	5c9b      	ldrb	r3, [r3, r2]
 800593e:	b2db      	uxtb	r3, r3
 8005940:	3b01      	subs	r3, #1
 8005942:	1e5a      	subs	r2, r3, #1
 8005944:	4193      	sbcs	r3, r2
 8005946:	b2db      	uxtb	r3, r3
 8005948:	e007      	b.n	800595a <HAL_TIM_OC_Start_IT+0x6a>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2241      	movs	r2, #65	; 0x41
 800594e:	5c9b      	ldrb	r3, [r3, r2]
 8005950:	b2db      	uxtb	r3, r3
 8005952:	3b01      	subs	r3, #1
 8005954:	1e5a      	subs	r2, r3, #1
 8005956:	4193      	sbcs	r3, r2
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d001      	beq.n	8005962 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e0b7      	b.n	8005ad2 <HAL_TIM_OC_Start_IT+0x1e2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d104      	bne.n	8005972 <HAL_TIM_OC_Start_IT+0x82>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	223e      	movs	r2, #62	; 0x3e
 800596c:	2102      	movs	r1, #2
 800596e:	5499      	strb	r1, [r3, r2]
 8005970:	e013      	b.n	800599a <HAL_TIM_OC_Start_IT+0xaa>
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	2b04      	cmp	r3, #4
 8005976:	d104      	bne.n	8005982 <HAL_TIM_OC_Start_IT+0x92>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	223f      	movs	r2, #63	; 0x3f
 800597c:	2102      	movs	r1, #2
 800597e:	5499      	strb	r1, [r3, r2]
 8005980:	e00b      	b.n	800599a <HAL_TIM_OC_Start_IT+0xaa>
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	2b08      	cmp	r3, #8
 8005986:	d104      	bne.n	8005992 <HAL_TIM_OC_Start_IT+0xa2>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2240      	movs	r2, #64	; 0x40
 800598c:	2102      	movs	r1, #2
 800598e:	5499      	strb	r1, [r3, r2]
 8005990:	e003      	b.n	800599a <HAL_TIM_OC_Start_IT+0xaa>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2241      	movs	r2, #65	; 0x41
 8005996:	2102      	movs	r1, #2
 8005998:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	2b0c      	cmp	r3, #12
 800599e:	d02a      	beq.n	80059f6 <HAL_TIM_OC_Start_IT+0x106>
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	2b0c      	cmp	r3, #12
 80059a4:	d830      	bhi.n	8005a08 <HAL_TIM_OC_Start_IT+0x118>
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	2b08      	cmp	r3, #8
 80059aa:	d01b      	beq.n	80059e4 <HAL_TIM_OC_Start_IT+0xf4>
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	2b08      	cmp	r3, #8
 80059b0:	d82a      	bhi.n	8005a08 <HAL_TIM_OC_Start_IT+0x118>
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d003      	beq.n	80059c0 <HAL_TIM_OC_Start_IT+0xd0>
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	2b04      	cmp	r3, #4
 80059bc:	d009      	beq.n	80059d2 <HAL_TIM_OC_Start_IT+0xe2>
 80059be:	e023      	b.n	8005a08 <HAL_TIM_OC_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68da      	ldr	r2, [r3, #12]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2102      	movs	r1, #2
 80059cc:	430a      	orrs	r2, r1
 80059ce:	60da      	str	r2, [r3, #12]
      break;
 80059d0:	e01f      	b.n	8005a12 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68da      	ldr	r2, [r3, #12]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2104      	movs	r1, #4
 80059de:	430a      	orrs	r2, r1
 80059e0:	60da      	str	r2, [r3, #12]
      break;
 80059e2:	e016      	b.n	8005a12 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68da      	ldr	r2, [r3, #12]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2108      	movs	r1, #8
 80059f0:	430a      	orrs	r2, r1
 80059f2:	60da      	str	r2, [r3, #12]
      break;
 80059f4:	e00d      	b.n	8005a12 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68da      	ldr	r2, [r3, #12]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2110      	movs	r1, #16
 8005a02:	430a      	orrs	r2, r1
 8005a04:	60da      	str	r2, [r3, #12]
      break;
 8005a06:	e004      	b.n	8005a12 <HAL_TIM_OC_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 8005a08:	230f      	movs	r3, #15
 8005a0a:	18fb      	adds	r3, r7, r3
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	701a      	strb	r2, [r3, #0]
      break;
 8005a10:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8005a12:	230f      	movs	r3, #15
 8005a14:	18fb      	adds	r3, r7, r3
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d157      	bne.n	8005acc <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	6839      	ldr	r1, [r7, #0]
 8005a22:	2201      	movs	r2, #1
 8005a24:	0018      	movs	r0, r3
 8005a26:	f000 fddb 	bl	80065e0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a2b      	ldr	r2, [pc, #172]	; (8005adc <HAL_TIM_OC_Start_IT+0x1ec>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d00e      	beq.n	8005a52 <HAL_TIM_OC_Start_IT+0x162>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a29      	ldr	r2, [pc, #164]	; (8005ae0 <HAL_TIM_OC_Start_IT+0x1f0>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d009      	beq.n	8005a52 <HAL_TIM_OC_Start_IT+0x162>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a28      	ldr	r2, [pc, #160]	; (8005ae4 <HAL_TIM_OC_Start_IT+0x1f4>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d004      	beq.n	8005a52 <HAL_TIM_OC_Start_IT+0x162>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a26      	ldr	r2, [pc, #152]	; (8005ae8 <HAL_TIM_OC_Start_IT+0x1f8>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d101      	bne.n	8005a56 <HAL_TIM_OC_Start_IT+0x166>
 8005a52:	2301      	movs	r3, #1
 8005a54:	e000      	b.n	8005a58 <HAL_TIM_OC_Start_IT+0x168>
 8005a56:	2300      	movs	r3, #0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d008      	beq.n	8005a6e <HAL_TIM_OC_Start_IT+0x17e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2180      	movs	r1, #128	; 0x80
 8005a68:	0209      	lsls	r1, r1, #8
 8005a6a:	430a      	orrs	r2, r1
 8005a6c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a1a      	ldr	r2, [pc, #104]	; (8005adc <HAL_TIM_OC_Start_IT+0x1ec>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d00f      	beq.n	8005a98 <HAL_TIM_OC_Start_IT+0x1a8>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	2380      	movs	r3, #128	; 0x80
 8005a7e:	05db      	lsls	r3, r3, #23
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d009      	beq.n	8005a98 <HAL_TIM_OC_Start_IT+0x1a8>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a18      	ldr	r2, [pc, #96]	; (8005aec <HAL_TIM_OC_Start_IT+0x1fc>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d004      	beq.n	8005a98 <HAL_TIM_OC_Start_IT+0x1a8>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a13      	ldr	r2, [pc, #76]	; (8005ae0 <HAL_TIM_OC_Start_IT+0x1f0>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d111      	bne.n	8005abc <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	2207      	movs	r2, #7
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	2b06      	cmp	r3, #6
 8005aa8:	d010      	beq.n	8005acc <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2101      	movs	r1, #1
 8005ab6:	430a      	orrs	r2, r1
 8005ab8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aba:	e007      	b.n	8005acc <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2101      	movs	r1, #1
 8005ac8:	430a      	orrs	r2, r1
 8005aca:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005acc:	230f      	movs	r3, #15
 8005ace:	18fb      	adds	r3, r7, r3
 8005ad0:	781b      	ldrb	r3, [r3, #0]
}
 8005ad2:	0018      	movs	r0, r3
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	b004      	add	sp, #16
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	46c0      	nop			; (mov r8, r8)
 8005adc:	40012c00 	.word	0x40012c00
 8005ae0:	40014000 	.word	0x40014000
 8005ae4:	40014400 	.word	0x40014400
 8005ae8:	40014800 	.word	0x40014800
 8005aec:	40000400 	.word	0x40000400

08005af0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b082      	sub	sp, #8
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	2202      	movs	r2, #2
 8005b00:	4013      	ands	r3, r2
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	d124      	bne.n	8005b50 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	2202      	movs	r2, #2
 8005b0e:	4013      	ands	r3, r2
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d11d      	bne.n	8005b50 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2203      	movs	r2, #3
 8005b1a:	4252      	negs	r2, r2
 8005b1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2201      	movs	r2, #1
 8005b22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	699b      	ldr	r3, [r3, #24]
 8005b2a:	2203      	movs	r2, #3
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	d004      	beq.n	8005b3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	0018      	movs	r0, r3
 8005b34:	f000 fa26 	bl	8005f84 <HAL_TIM_IC_CaptureCallback>
 8005b38:	e007      	b.n	8005b4a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	0018      	movs	r0, r3
 8005b3e:	f7fb facb 	bl	80010d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	0018      	movs	r0, r3
 8005b46:	f000 fa25 	bl	8005f94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	2204      	movs	r2, #4
 8005b58:	4013      	ands	r3, r2
 8005b5a:	2b04      	cmp	r3, #4
 8005b5c:	d125      	bne.n	8005baa <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	2204      	movs	r2, #4
 8005b66:	4013      	ands	r3, r2
 8005b68:	2b04      	cmp	r3, #4
 8005b6a:	d11e      	bne.n	8005baa <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2205      	movs	r2, #5
 8005b72:	4252      	negs	r2, r2
 8005b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2202      	movs	r2, #2
 8005b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	699a      	ldr	r2, [r3, #24]
 8005b82:	23c0      	movs	r3, #192	; 0xc0
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	4013      	ands	r3, r2
 8005b88:	d004      	beq.n	8005b94 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	0018      	movs	r0, r3
 8005b8e:	f000 f9f9 	bl	8005f84 <HAL_TIM_IC_CaptureCallback>
 8005b92:	e007      	b.n	8005ba4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	0018      	movs	r0, r3
 8005b98:	f7fb fa9e 	bl	80010d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	0018      	movs	r0, r3
 8005ba0:	f000 f9f8 	bl	8005f94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	2208      	movs	r2, #8
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	2b08      	cmp	r3, #8
 8005bb6:	d124      	bne.n	8005c02 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	2208      	movs	r2, #8
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	2b08      	cmp	r3, #8
 8005bc4:	d11d      	bne.n	8005c02 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2209      	movs	r2, #9
 8005bcc:	4252      	negs	r2, r2
 8005bce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2204      	movs	r2, #4
 8005bd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	69db      	ldr	r3, [r3, #28]
 8005bdc:	2203      	movs	r2, #3
 8005bde:	4013      	ands	r3, r2
 8005be0:	d004      	beq.n	8005bec <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	0018      	movs	r0, r3
 8005be6:	f000 f9cd 	bl	8005f84 <HAL_TIM_IC_CaptureCallback>
 8005bea:	e007      	b.n	8005bfc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	0018      	movs	r0, r3
 8005bf0:	f7fb fa72 	bl	80010d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	0018      	movs	r0, r3
 8005bf8:	f000 f9cc 	bl	8005f94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	2210      	movs	r2, #16
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	2b10      	cmp	r3, #16
 8005c0e:	d125      	bne.n	8005c5c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	2210      	movs	r2, #16
 8005c18:	4013      	ands	r3, r2
 8005c1a:	2b10      	cmp	r3, #16
 8005c1c:	d11e      	bne.n	8005c5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2211      	movs	r2, #17
 8005c24:	4252      	negs	r2, r2
 8005c26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2208      	movs	r2, #8
 8005c2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	69da      	ldr	r2, [r3, #28]
 8005c34:	23c0      	movs	r3, #192	; 0xc0
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	4013      	ands	r3, r2
 8005c3a:	d004      	beq.n	8005c46 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	0018      	movs	r0, r3
 8005c40:	f000 f9a0 	bl	8005f84 <HAL_TIM_IC_CaptureCallback>
 8005c44:	e007      	b.n	8005c56 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	0018      	movs	r0, r3
 8005c4a:	f7fb fa45 	bl	80010d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	0018      	movs	r0, r3
 8005c52:	f000 f99f 	bl	8005f94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	2201      	movs	r2, #1
 8005c64:	4013      	ands	r3, r2
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d10f      	bne.n	8005c8a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	2201      	movs	r2, #1
 8005c72:	4013      	ands	r3, r2
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d108      	bne.n	8005c8a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2202      	movs	r2, #2
 8005c7e:	4252      	negs	r2, r2
 8005c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	0018      	movs	r0, r3
 8005c86:	f000 f975 	bl	8005f74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	2280      	movs	r2, #128	; 0x80
 8005c92:	4013      	ands	r3, r2
 8005c94:	2b80      	cmp	r3, #128	; 0x80
 8005c96:	d10f      	bne.n	8005cb8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	2280      	movs	r2, #128	; 0x80
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	2b80      	cmp	r3, #128	; 0x80
 8005ca4:	d108      	bne.n	8005cb8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2281      	movs	r2, #129	; 0x81
 8005cac:	4252      	negs	r2, r2
 8005cae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	0018      	movs	r0, r3
 8005cb4:	f000 fd7c 	bl	80067b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	2240      	movs	r2, #64	; 0x40
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	2b40      	cmp	r3, #64	; 0x40
 8005cc4:	d10f      	bne.n	8005ce6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	2240      	movs	r2, #64	; 0x40
 8005cce:	4013      	ands	r3, r2
 8005cd0:	2b40      	cmp	r3, #64	; 0x40
 8005cd2:	d108      	bne.n	8005ce6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2241      	movs	r2, #65	; 0x41
 8005cda:	4252      	negs	r2, r2
 8005cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	0018      	movs	r0, r3
 8005ce2:	f000 f95f 	bl	8005fa4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	2220      	movs	r2, #32
 8005cee:	4013      	ands	r3, r2
 8005cf0:	2b20      	cmp	r3, #32
 8005cf2:	d10f      	bne.n	8005d14 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	2220      	movs	r2, #32
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	2b20      	cmp	r3, #32
 8005d00:	d108      	bne.n	8005d14 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2221      	movs	r2, #33	; 0x21
 8005d08:	4252      	negs	r2, r2
 8005d0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	0018      	movs	r0, r3
 8005d10:	f000 fd46 	bl	80067a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d14:	46c0      	nop			; (mov r8, r8)
 8005d16:	46bd      	mov	sp, r7
 8005d18:	b002      	add	sp, #8
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b086      	sub	sp, #24
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d28:	2317      	movs	r3, #23
 8005d2a:	18fb      	adds	r3, r7, r3
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	223c      	movs	r2, #60	; 0x3c
 8005d34:	5c9b      	ldrb	r3, [r3, r2]
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d101      	bne.n	8005d3e <HAL_TIM_OC_ConfigChannel+0x22>
 8005d3a:	2302      	movs	r3, #2
 8005d3c:	e042      	b.n	8005dc4 <HAL_TIM_OC_ConfigChannel+0xa8>
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	223c      	movs	r2, #60	; 0x3c
 8005d42:	2101      	movs	r1, #1
 8005d44:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2b0c      	cmp	r3, #12
 8005d4a:	d027      	beq.n	8005d9c <HAL_TIM_OC_ConfigChannel+0x80>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2b0c      	cmp	r3, #12
 8005d50:	d82c      	bhi.n	8005dac <HAL_TIM_OC_ConfigChannel+0x90>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2b08      	cmp	r3, #8
 8005d56:	d019      	beq.n	8005d8c <HAL_TIM_OC_ConfigChannel+0x70>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2b08      	cmp	r3, #8
 8005d5c:	d826      	bhi.n	8005dac <HAL_TIM_OC_ConfigChannel+0x90>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d003      	beq.n	8005d6c <HAL_TIM_OC_ConfigChannel+0x50>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2b04      	cmp	r3, #4
 8005d68:	d008      	beq.n	8005d7c <HAL_TIM_OC_ConfigChannel+0x60>
 8005d6a:	e01f      	b.n	8005dac <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68ba      	ldr	r2, [r7, #8]
 8005d72:	0011      	movs	r1, r2
 8005d74:	0018      	movs	r0, r3
 8005d76:	f000 f99d 	bl	80060b4 <TIM_OC1_SetConfig>
      break;
 8005d7a:	e01c      	b.n	8005db6 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68ba      	ldr	r2, [r7, #8]
 8005d82:	0011      	movs	r1, r2
 8005d84:	0018      	movs	r0, r3
 8005d86:	f000 fa1d 	bl	80061c4 <TIM_OC2_SetConfig>
      break;
 8005d8a:	e014      	b.n	8005db6 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68ba      	ldr	r2, [r7, #8]
 8005d92:	0011      	movs	r1, r2
 8005d94:	0018      	movs	r0, r3
 8005d96:	f000 fa99 	bl	80062cc <TIM_OC3_SetConfig>
      break;
 8005d9a:	e00c      	b.n	8005db6 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68ba      	ldr	r2, [r7, #8]
 8005da2:	0011      	movs	r1, r2
 8005da4:	0018      	movs	r0, r3
 8005da6:	f000 fb17 	bl	80063d8 <TIM_OC4_SetConfig>
      break;
 8005daa:	e004      	b.n	8005db6 <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8005dac:	2317      	movs	r3, #23
 8005dae:	18fb      	adds	r3, r7, r3
 8005db0:	2201      	movs	r2, #1
 8005db2:	701a      	strb	r2, [r3, #0]
      break;
 8005db4:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	223c      	movs	r2, #60	; 0x3c
 8005dba:	2100      	movs	r1, #0
 8005dbc:	5499      	strb	r1, [r3, r2]

  return status;
 8005dbe:	2317      	movs	r3, #23
 8005dc0:	18fb      	adds	r3, r7, r3
 8005dc2:	781b      	ldrb	r3, [r3, #0]
}
 8005dc4:	0018      	movs	r0, r3
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	b006      	add	sp, #24
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dd6:	230f      	movs	r3, #15
 8005dd8:	18fb      	adds	r3, r7, r3
 8005dda:	2200      	movs	r2, #0
 8005ddc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	223c      	movs	r2, #60	; 0x3c
 8005de2:	5c9b      	ldrb	r3, [r3, r2]
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d101      	bne.n	8005dec <HAL_TIM_ConfigClockSource+0x20>
 8005de8:	2302      	movs	r3, #2
 8005dea:	e0bc      	b.n	8005f66 <HAL_TIM_ConfigClockSource+0x19a>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	223c      	movs	r2, #60	; 0x3c
 8005df0:	2101      	movs	r1, #1
 8005df2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	223d      	movs	r2, #61	; 0x3d
 8005df8:	2102      	movs	r1, #2
 8005dfa:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	2277      	movs	r2, #119	; 0x77
 8005e08:	4393      	bics	r3, r2
 8005e0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	4a58      	ldr	r2, [pc, #352]	; (8005f70 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005e10:	4013      	ands	r3, r2
 8005e12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68ba      	ldr	r2, [r7, #8]
 8005e1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2280      	movs	r2, #128	; 0x80
 8005e22:	0192      	lsls	r2, r2, #6
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d040      	beq.n	8005eaa <HAL_TIM_ConfigClockSource+0xde>
 8005e28:	2280      	movs	r2, #128	; 0x80
 8005e2a:	0192      	lsls	r2, r2, #6
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d900      	bls.n	8005e32 <HAL_TIM_ConfigClockSource+0x66>
 8005e30:	e088      	b.n	8005f44 <HAL_TIM_ConfigClockSource+0x178>
 8005e32:	2280      	movs	r2, #128	; 0x80
 8005e34:	0152      	lsls	r2, r2, #5
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d100      	bne.n	8005e3c <HAL_TIM_ConfigClockSource+0x70>
 8005e3a:	e088      	b.n	8005f4e <HAL_TIM_ConfigClockSource+0x182>
 8005e3c:	2280      	movs	r2, #128	; 0x80
 8005e3e:	0152      	lsls	r2, r2, #5
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d900      	bls.n	8005e46 <HAL_TIM_ConfigClockSource+0x7a>
 8005e44:	e07e      	b.n	8005f44 <HAL_TIM_ConfigClockSource+0x178>
 8005e46:	2b70      	cmp	r3, #112	; 0x70
 8005e48:	d018      	beq.n	8005e7c <HAL_TIM_ConfigClockSource+0xb0>
 8005e4a:	d900      	bls.n	8005e4e <HAL_TIM_ConfigClockSource+0x82>
 8005e4c:	e07a      	b.n	8005f44 <HAL_TIM_ConfigClockSource+0x178>
 8005e4e:	2b60      	cmp	r3, #96	; 0x60
 8005e50:	d04f      	beq.n	8005ef2 <HAL_TIM_ConfigClockSource+0x126>
 8005e52:	d900      	bls.n	8005e56 <HAL_TIM_ConfigClockSource+0x8a>
 8005e54:	e076      	b.n	8005f44 <HAL_TIM_ConfigClockSource+0x178>
 8005e56:	2b50      	cmp	r3, #80	; 0x50
 8005e58:	d03b      	beq.n	8005ed2 <HAL_TIM_ConfigClockSource+0x106>
 8005e5a:	d900      	bls.n	8005e5e <HAL_TIM_ConfigClockSource+0x92>
 8005e5c:	e072      	b.n	8005f44 <HAL_TIM_ConfigClockSource+0x178>
 8005e5e:	2b40      	cmp	r3, #64	; 0x40
 8005e60:	d057      	beq.n	8005f12 <HAL_TIM_ConfigClockSource+0x146>
 8005e62:	d900      	bls.n	8005e66 <HAL_TIM_ConfigClockSource+0x9a>
 8005e64:	e06e      	b.n	8005f44 <HAL_TIM_ConfigClockSource+0x178>
 8005e66:	2b30      	cmp	r3, #48	; 0x30
 8005e68:	d063      	beq.n	8005f32 <HAL_TIM_ConfigClockSource+0x166>
 8005e6a:	d86b      	bhi.n	8005f44 <HAL_TIM_ConfigClockSource+0x178>
 8005e6c:	2b20      	cmp	r3, #32
 8005e6e:	d060      	beq.n	8005f32 <HAL_TIM_ConfigClockSource+0x166>
 8005e70:	d868      	bhi.n	8005f44 <HAL_TIM_ConfigClockSource+0x178>
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d05d      	beq.n	8005f32 <HAL_TIM_ConfigClockSource+0x166>
 8005e76:	2b10      	cmp	r3, #16
 8005e78:	d05b      	beq.n	8005f32 <HAL_TIM_ConfigClockSource+0x166>
 8005e7a:	e063      	b.n	8005f44 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6818      	ldr	r0, [r3, #0]
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	6899      	ldr	r1, [r3, #8]
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	685a      	ldr	r2, [r3, #4]
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	f000 fb88 	bl	80065a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	2277      	movs	r2, #119	; 0x77
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68ba      	ldr	r2, [r7, #8]
 8005ea6:	609a      	str	r2, [r3, #8]
      break;
 8005ea8:	e052      	b.n	8005f50 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6818      	ldr	r0, [r3, #0]
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	6899      	ldr	r1, [r3, #8]
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	685a      	ldr	r2, [r3, #4]
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	f000 fb71 	bl	80065a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	689a      	ldr	r2, [r3, #8]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2180      	movs	r1, #128	; 0x80
 8005eca:	01c9      	lsls	r1, r1, #7
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	609a      	str	r2, [r3, #8]
      break;
 8005ed0:	e03e      	b.n	8005f50 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6818      	ldr	r0, [r3, #0]
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	6859      	ldr	r1, [r3, #4]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	001a      	movs	r2, r3
 8005ee0:	f000 fae4 	bl	80064ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2150      	movs	r1, #80	; 0x50
 8005eea:	0018      	movs	r0, r3
 8005eec:	f000 fb3e 	bl	800656c <TIM_ITRx_SetConfig>
      break;
 8005ef0:	e02e      	b.n	8005f50 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6818      	ldr	r0, [r3, #0]
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	6859      	ldr	r1, [r3, #4]
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	001a      	movs	r2, r3
 8005f00:	f000 fb02 	bl	8006508 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2160      	movs	r1, #96	; 0x60
 8005f0a:	0018      	movs	r0, r3
 8005f0c:	f000 fb2e 	bl	800656c <TIM_ITRx_SetConfig>
      break;
 8005f10:	e01e      	b.n	8005f50 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6818      	ldr	r0, [r3, #0]
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	6859      	ldr	r1, [r3, #4]
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	001a      	movs	r2, r3
 8005f20:	f000 fac4 	bl	80064ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2140      	movs	r1, #64	; 0x40
 8005f2a:	0018      	movs	r0, r3
 8005f2c:	f000 fb1e 	bl	800656c <TIM_ITRx_SetConfig>
      break;
 8005f30:	e00e      	b.n	8005f50 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	0019      	movs	r1, r3
 8005f3c:	0010      	movs	r0, r2
 8005f3e:	f000 fb15 	bl	800656c <TIM_ITRx_SetConfig>
      break;
 8005f42:	e005      	b.n	8005f50 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005f44:	230f      	movs	r3, #15
 8005f46:	18fb      	adds	r3, r7, r3
 8005f48:	2201      	movs	r2, #1
 8005f4a:	701a      	strb	r2, [r3, #0]
      break;
 8005f4c:	e000      	b.n	8005f50 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8005f4e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	223d      	movs	r2, #61	; 0x3d
 8005f54:	2101      	movs	r1, #1
 8005f56:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	223c      	movs	r2, #60	; 0x3c
 8005f5c:	2100      	movs	r1, #0
 8005f5e:	5499      	strb	r1, [r3, r2]

  return status;
 8005f60:	230f      	movs	r3, #15
 8005f62:	18fb      	adds	r3, r7, r3
 8005f64:	781b      	ldrb	r3, [r3, #0]
}
 8005f66:	0018      	movs	r0, r3
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	b004      	add	sp, #16
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	46c0      	nop			; (mov r8, r8)
 8005f70:	ffff00ff 	.word	0xffff00ff

08005f74 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005f7c:	46c0      	nop			; (mov r8, r8)
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	b002      	add	sp, #8
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f8c:	46c0      	nop			; (mov r8, r8)
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	b002      	add	sp, #8
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f9c:	46c0      	nop			; (mov r8, r8)
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	b002      	add	sp, #8
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fac:	46c0      	nop			; (mov r8, r8)
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	b002      	add	sp, #8
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a34      	ldr	r2, [pc, #208]	; (8006098 <TIM_Base_SetConfig+0xe4>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d008      	beq.n	8005fde <TIM_Base_SetConfig+0x2a>
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	2380      	movs	r3, #128	; 0x80
 8005fd0:	05db      	lsls	r3, r3, #23
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d003      	beq.n	8005fde <TIM_Base_SetConfig+0x2a>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a30      	ldr	r2, [pc, #192]	; (800609c <TIM_Base_SetConfig+0xe8>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d108      	bne.n	8005ff0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2270      	movs	r2, #112	; 0x70
 8005fe2:	4393      	bics	r3, r2
 8005fe4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a29      	ldr	r2, [pc, #164]	; (8006098 <TIM_Base_SetConfig+0xe4>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d018      	beq.n	800602a <TIM_Base_SetConfig+0x76>
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	2380      	movs	r3, #128	; 0x80
 8005ffc:	05db      	lsls	r3, r3, #23
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d013      	beq.n	800602a <TIM_Base_SetConfig+0x76>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a25      	ldr	r2, [pc, #148]	; (800609c <TIM_Base_SetConfig+0xe8>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d00f      	beq.n	800602a <TIM_Base_SetConfig+0x76>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a24      	ldr	r2, [pc, #144]	; (80060a0 <TIM_Base_SetConfig+0xec>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d00b      	beq.n	800602a <TIM_Base_SetConfig+0x76>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a23      	ldr	r2, [pc, #140]	; (80060a4 <TIM_Base_SetConfig+0xf0>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d007      	beq.n	800602a <TIM_Base_SetConfig+0x76>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a22      	ldr	r2, [pc, #136]	; (80060a8 <TIM_Base_SetConfig+0xf4>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d003      	beq.n	800602a <TIM_Base_SetConfig+0x76>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a21      	ldr	r2, [pc, #132]	; (80060ac <TIM_Base_SetConfig+0xf8>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d108      	bne.n	800603c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	4a20      	ldr	r2, [pc, #128]	; (80060b0 <TIM_Base_SetConfig+0xfc>)
 800602e:	4013      	ands	r3, r2
 8006030:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	68fa      	ldr	r2, [r7, #12]
 8006038:	4313      	orrs	r3, r2
 800603a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2280      	movs	r2, #128	; 0x80
 8006040:	4393      	bics	r3, r2
 8006042:	001a      	movs	r2, r3
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	695b      	ldr	r3, [r3, #20]
 8006048:	4313      	orrs	r3, r2
 800604a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	689a      	ldr	r2, [r3, #8]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a0c      	ldr	r2, [pc, #48]	; (8006098 <TIM_Base_SetConfig+0xe4>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d00b      	beq.n	8006082 <TIM_Base_SetConfig+0xce>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a0d      	ldr	r2, [pc, #52]	; (80060a4 <TIM_Base_SetConfig+0xf0>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d007      	beq.n	8006082 <TIM_Base_SetConfig+0xce>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a0c      	ldr	r2, [pc, #48]	; (80060a8 <TIM_Base_SetConfig+0xf4>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d003      	beq.n	8006082 <TIM_Base_SetConfig+0xce>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a0b      	ldr	r2, [pc, #44]	; (80060ac <TIM_Base_SetConfig+0xf8>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d103      	bne.n	800608a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	691a      	ldr	r2, [r3, #16]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	615a      	str	r2, [r3, #20]
}
 8006090:	46c0      	nop			; (mov r8, r8)
 8006092:	46bd      	mov	sp, r7
 8006094:	b004      	add	sp, #16
 8006096:	bd80      	pop	{r7, pc}
 8006098:	40012c00 	.word	0x40012c00
 800609c:	40000400 	.word	0x40000400
 80060a0:	40002000 	.word	0x40002000
 80060a4:	40014000 	.word	0x40014000
 80060a8:	40014400 	.word	0x40014400
 80060ac:	40014800 	.word	0x40014800
 80060b0:	fffffcff 	.word	0xfffffcff

080060b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b086      	sub	sp, #24
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	2201      	movs	r2, #1
 80060c4:	4393      	bics	r3, r2
 80060c6:	001a      	movs	r2, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6a1b      	ldr	r3, [r3, #32]
 80060d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	699b      	ldr	r3, [r3, #24]
 80060dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2270      	movs	r2, #112	; 0x70
 80060e2:	4393      	bics	r3, r2
 80060e4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2203      	movs	r2, #3
 80060ea:	4393      	bics	r3, r2
 80060ec:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	2202      	movs	r2, #2
 80060fc:	4393      	bics	r3, r2
 80060fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	697a      	ldr	r2, [r7, #20]
 8006106:	4313      	orrs	r3, r2
 8006108:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a27      	ldr	r2, [pc, #156]	; (80061ac <TIM_OC1_SetConfig+0xf8>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d00b      	beq.n	800612a <TIM_OC1_SetConfig+0x76>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a26      	ldr	r2, [pc, #152]	; (80061b0 <TIM_OC1_SetConfig+0xfc>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d007      	beq.n	800612a <TIM_OC1_SetConfig+0x76>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a25      	ldr	r2, [pc, #148]	; (80061b4 <TIM_OC1_SetConfig+0x100>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d003      	beq.n	800612a <TIM_OC1_SetConfig+0x76>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a24      	ldr	r2, [pc, #144]	; (80061b8 <TIM_OC1_SetConfig+0x104>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d10c      	bne.n	8006144 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	2208      	movs	r2, #8
 800612e:	4393      	bics	r3, r2
 8006130:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	4313      	orrs	r3, r2
 800613a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	2204      	movs	r2, #4
 8006140:	4393      	bics	r3, r2
 8006142:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a19      	ldr	r2, [pc, #100]	; (80061ac <TIM_OC1_SetConfig+0xf8>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d00b      	beq.n	8006164 <TIM_OC1_SetConfig+0xb0>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a18      	ldr	r2, [pc, #96]	; (80061b0 <TIM_OC1_SetConfig+0xfc>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d007      	beq.n	8006164 <TIM_OC1_SetConfig+0xb0>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a17      	ldr	r2, [pc, #92]	; (80061b4 <TIM_OC1_SetConfig+0x100>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d003      	beq.n	8006164 <TIM_OC1_SetConfig+0xb0>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a16      	ldr	r2, [pc, #88]	; (80061b8 <TIM_OC1_SetConfig+0x104>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d111      	bne.n	8006188 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	4a15      	ldr	r2, [pc, #84]	; (80061bc <TIM_OC1_SetConfig+0x108>)
 8006168:	4013      	ands	r3, r2
 800616a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	4a14      	ldr	r2, [pc, #80]	; (80061c0 <TIM_OC1_SetConfig+0x10c>)
 8006170:	4013      	ands	r3, r2
 8006172:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	695b      	ldr	r3, [r3, #20]
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	4313      	orrs	r3, r2
 800617c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	693a      	ldr	r2, [r7, #16]
 8006184:	4313      	orrs	r3, r2
 8006186:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	693a      	ldr	r2, [r7, #16]
 800618c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	685a      	ldr	r2, [r3, #4]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	697a      	ldr	r2, [r7, #20]
 80061a0:	621a      	str	r2, [r3, #32]
}
 80061a2:	46c0      	nop			; (mov r8, r8)
 80061a4:	46bd      	mov	sp, r7
 80061a6:	b006      	add	sp, #24
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	46c0      	nop			; (mov r8, r8)
 80061ac:	40012c00 	.word	0x40012c00
 80061b0:	40014000 	.word	0x40014000
 80061b4:	40014400 	.word	0x40014400
 80061b8:	40014800 	.word	0x40014800
 80061bc:	fffffeff 	.word	0xfffffeff
 80061c0:	fffffdff 	.word	0xfffffdff

080061c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b086      	sub	sp, #24
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	2210      	movs	r2, #16
 80061d4:	4393      	bics	r3, r2
 80061d6:	001a      	movs	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a1b      	ldr	r3, [r3, #32]
 80061e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	699b      	ldr	r3, [r3, #24]
 80061ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	4a2e      	ldr	r2, [pc, #184]	; (80062ac <TIM_OC2_SetConfig+0xe8>)
 80061f2:	4013      	ands	r3, r2
 80061f4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	4a2d      	ldr	r2, [pc, #180]	; (80062b0 <TIM_OC2_SetConfig+0xec>)
 80061fa:	4013      	ands	r3, r2
 80061fc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	021b      	lsls	r3, r3, #8
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	4313      	orrs	r3, r2
 8006208:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	2220      	movs	r2, #32
 800620e:	4393      	bics	r3, r2
 8006210:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	011b      	lsls	r3, r3, #4
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	4313      	orrs	r3, r2
 800621c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a24      	ldr	r2, [pc, #144]	; (80062b4 <TIM_OC2_SetConfig+0xf0>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d10d      	bne.n	8006242 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	2280      	movs	r2, #128	; 0x80
 800622a:	4393      	bics	r3, r2
 800622c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	011b      	lsls	r3, r3, #4
 8006234:	697a      	ldr	r2, [r7, #20]
 8006236:	4313      	orrs	r3, r2
 8006238:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	2240      	movs	r2, #64	; 0x40
 800623e:	4393      	bics	r3, r2
 8006240:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a1b      	ldr	r2, [pc, #108]	; (80062b4 <TIM_OC2_SetConfig+0xf0>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d00b      	beq.n	8006262 <TIM_OC2_SetConfig+0x9e>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a1a      	ldr	r2, [pc, #104]	; (80062b8 <TIM_OC2_SetConfig+0xf4>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d007      	beq.n	8006262 <TIM_OC2_SetConfig+0x9e>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a19      	ldr	r2, [pc, #100]	; (80062bc <TIM_OC2_SetConfig+0xf8>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d003      	beq.n	8006262 <TIM_OC2_SetConfig+0x9e>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a18      	ldr	r2, [pc, #96]	; (80062c0 <TIM_OC2_SetConfig+0xfc>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d113      	bne.n	800628a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	4a17      	ldr	r2, [pc, #92]	; (80062c4 <TIM_OC2_SetConfig+0x100>)
 8006266:	4013      	ands	r3, r2
 8006268:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	4a16      	ldr	r2, [pc, #88]	; (80062c8 <TIM_OC2_SetConfig+0x104>)
 800626e:	4013      	ands	r3, r2
 8006270:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	695b      	ldr	r3, [r3, #20]
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	693a      	ldr	r2, [r7, #16]
 800627a:	4313      	orrs	r3, r2
 800627c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	699b      	ldr	r3, [r3, #24]
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	4313      	orrs	r3, r2
 8006288:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	685a      	ldr	r2, [r3, #4]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	697a      	ldr	r2, [r7, #20]
 80062a2:	621a      	str	r2, [r3, #32]
}
 80062a4:	46c0      	nop			; (mov r8, r8)
 80062a6:	46bd      	mov	sp, r7
 80062a8:	b006      	add	sp, #24
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	ffff8fff 	.word	0xffff8fff
 80062b0:	fffffcff 	.word	0xfffffcff
 80062b4:	40012c00 	.word	0x40012c00
 80062b8:	40014000 	.word	0x40014000
 80062bc:	40014400 	.word	0x40014400
 80062c0:	40014800 	.word	0x40014800
 80062c4:	fffffbff 	.word	0xfffffbff
 80062c8:	fffff7ff 	.word	0xfffff7ff

080062cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b086      	sub	sp, #24
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a1b      	ldr	r3, [r3, #32]
 80062da:	4a35      	ldr	r2, [pc, #212]	; (80063b0 <TIM_OC3_SetConfig+0xe4>)
 80062dc:	401a      	ands	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a1b      	ldr	r3, [r3, #32]
 80062e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	69db      	ldr	r3, [r3, #28]
 80062f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2270      	movs	r2, #112	; 0x70
 80062f8:	4393      	bics	r3, r2
 80062fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2203      	movs	r2, #3
 8006300:	4393      	bics	r3, r2
 8006302:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68fa      	ldr	r2, [r7, #12]
 800630a:	4313      	orrs	r3, r2
 800630c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	4a28      	ldr	r2, [pc, #160]	; (80063b4 <TIM_OC3_SetConfig+0xe8>)
 8006312:	4013      	ands	r3, r2
 8006314:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	021b      	lsls	r3, r3, #8
 800631c:	697a      	ldr	r2, [r7, #20]
 800631e:	4313      	orrs	r3, r2
 8006320:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a24      	ldr	r2, [pc, #144]	; (80063b8 <TIM_OC3_SetConfig+0xec>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d10d      	bne.n	8006346 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	4a23      	ldr	r2, [pc, #140]	; (80063bc <TIM_OC3_SetConfig+0xf0>)
 800632e:	4013      	ands	r3, r2
 8006330:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	021b      	lsls	r3, r3, #8
 8006338:	697a      	ldr	r2, [r7, #20]
 800633a:	4313      	orrs	r3, r2
 800633c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	4a1f      	ldr	r2, [pc, #124]	; (80063c0 <TIM_OC3_SetConfig+0xf4>)
 8006342:	4013      	ands	r3, r2
 8006344:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a1b      	ldr	r2, [pc, #108]	; (80063b8 <TIM_OC3_SetConfig+0xec>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d00b      	beq.n	8006366 <TIM_OC3_SetConfig+0x9a>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a1c      	ldr	r2, [pc, #112]	; (80063c4 <TIM_OC3_SetConfig+0xf8>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d007      	beq.n	8006366 <TIM_OC3_SetConfig+0x9a>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a1b      	ldr	r2, [pc, #108]	; (80063c8 <TIM_OC3_SetConfig+0xfc>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d003      	beq.n	8006366 <TIM_OC3_SetConfig+0x9a>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a1a      	ldr	r2, [pc, #104]	; (80063cc <TIM_OC3_SetConfig+0x100>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d113      	bne.n	800638e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	4a19      	ldr	r2, [pc, #100]	; (80063d0 <TIM_OC3_SetConfig+0x104>)
 800636a:	4013      	ands	r3, r2
 800636c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	4a18      	ldr	r2, [pc, #96]	; (80063d4 <TIM_OC3_SetConfig+0x108>)
 8006372:	4013      	ands	r3, r2
 8006374:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	695b      	ldr	r3, [r3, #20]
 800637a:	011b      	lsls	r3, r3, #4
 800637c:	693a      	ldr	r2, [r7, #16]
 800637e:	4313      	orrs	r3, r2
 8006380:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	011b      	lsls	r3, r3, #4
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	4313      	orrs	r3, r2
 800638c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	693a      	ldr	r2, [r7, #16]
 8006392:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	685a      	ldr	r2, [r3, #4]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	697a      	ldr	r2, [r7, #20]
 80063a6:	621a      	str	r2, [r3, #32]
}
 80063a8:	46c0      	nop			; (mov r8, r8)
 80063aa:	46bd      	mov	sp, r7
 80063ac:	b006      	add	sp, #24
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	fffffeff 	.word	0xfffffeff
 80063b4:	fffffdff 	.word	0xfffffdff
 80063b8:	40012c00 	.word	0x40012c00
 80063bc:	fffff7ff 	.word	0xfffff7ff
 80063c0:	fffffbff 	.word	0xfffffbff
 80063c4:	40014000 	.word	0x40014000
 80063c8:	40014400 	.word	0x40014400
 80063cc:	40014800 	.word	0x40014800
 80063d0:	ffffefff 	.word	0xffffefff
 80063d4:	ffffdfff 	.word	0xffffdfff

080063d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b086      	sub	sp, #24
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a1b      	ldr	r3, [r3, #32]
 80063e6:	4a28      	ldr	r2, [pc, #160]	; (8006488 <TIM_OC4_SetConfig+0xb0>)
 80063e8:	401a      	ands	r2, r3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a1b      	ldr	r3, [r3, #32]
 80063f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	69db      	ldr	r3, [r3, #28]
 80063fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	4a22      	ldr	r2, [pc, #136]	; (800648c <TIM_OC4_SetConfig+0xb4>)
 8006404:	4013      	ands	r3, r2
 8006406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	4a21      	ldr	r2, [pc, #132]	; (8006490 <TIM_OC4_SetConfig+0xb8>)
 800640c:	4013      	ands	r3, r2
 800640e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	021b      	lsls	r3, r3, #8
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	4313      	orrs	r3, r2
 800641a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	4a1d      	ldr	r2, [pc, #116]	; (8006494 <TIM_OC4_SetConfig+0xbc>)
 8006420:	4013      	ands	r3, r2
 8006422:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	031b      	lsls	r3, r3, #12
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	4313      	orrs	r3, r2
 800642e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a19      	ldr	r2, [pc, #100]	; (8006498 <TIM_OC4_SetConfig+0xc0>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d00b      	beq.n	8006450 <TIM_OC4_SetConfig+0x78>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	4a18      	ldr	r2, [pc, #96]	; (800649c <TIM_OC4_SetConfig+0xc4>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d007      	beq.n	8006450 <TIM_OC4_SetConfig+0x78>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4a17      	ldr	r2, [pc, #92]	; (80064a0 <TIM_OC4_SetConfig+0xc8>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d003      	beq.n	8006450 <TIM_OC4_SetConfig+0x78>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a16      	ldr	r2, [pc, #88]	; (80064a4 <TIM_OC4_SetConfig+0xcc>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d109      	bne.n	8006464 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	4a15      	ldr	r2, [pc, #84]	; (80064a8 <TIM_OC4_SetConfig+0xd0>)
 8006454:	4013      	ands	r3, r2
 8006456:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	695b      	ldr	r3, [r3, #20]
 800645c:	019b      	lsls	r3, r3, #6
 800645e:	697a      	ldr	r2, [r7, #20]
 8006460:	4313      	orrs	r3, r2
 8006462:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	685a      	ldr	r2, [r3, #4]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	693a      	ldr	r2, [r7, #16]
 800647c:	621a      	str	r2, [r3, #32]
}
 800647e:	46c0      	nop			; (mov r8, r8)
 8006480:	46bd      	mov	sp, r7
 8006482:	b006      	add	sp, #24
 8006484:	bd80      	pop	{r7, pc}
 8006486:	46c0      	nop			; (mov r8, r8)
 8006488:	ffffefff 	.word	0xffffefff
 800648c:	ffff8fff 	.word	0xffff8fff
 8006490:	fffffcff 	.word	0xfffffcff
 8006494:	ffffdfff 	.word	0xffffdfff
 8006498:	40012c00 	.word	0x40012c00
 800649c:	40014000 	.word	0x40014000
 80064a0:	40014400 	.word	0x40014400
 80064a4:	40014800 	.word	0x40014800
 80064a8:	ffffbfff 	.word	0xffffbfff

080064ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b086      	sub	sp, #24
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6a1b      	ldr	r3, [r3, #32]
 80064bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6a1b      	ldr	r3, [r3, #32]
 80064c2:	2201      	movs	r2, #1
 80064c4:	4393      	bics	r3, r2
 80064c6:	001a      	movs	r2, r3
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	699b      	ldr	r3, [r3, #24]
 80064d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	22f0      	movs	r2, #240	; 0xf0
 80064d6:	4393      	bics	r3, r2
 80064d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	011b      	lsls	r3, r3, #4
 80064de:	693a      	ldr	r2, [r7, #16]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	220a      	movs	r2, #10
 80064e8:	4393      	bics	r3, r2
 80064ea:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	693a      	ldr	r2, [r7, #16]
 80064f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	697a      	ldr	r2, [r7, #20]
 80064fe:	621a      	str	r2, [r3, #32]
}
 8006500:	46c0      	nop			; (mov r8, r8)
 8006502:	46bd      	mov	sp, r7
 8006504:	b006      	add	sp, #24
 8006506:	bd80      	pop	{r7, pc}

08006508 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b086      	sub	sp, #24
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6a1b      	ldr	r3, [r3, #32]
 8006518:	2210      	movs	r2, #16
 800651a:	4393      	bics	r3, r2
 800651c:	001a      	movs	r2, r3
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	699b      	ldr	r3, [r3, #24]
 8006526:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6a1b      	ldr	r3, [r3, #32]
 800652c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	4a0d      	ldr	r2, [pc, #52]	; (8006568 <TIM_TI2_ConfigInputStage+0x60>)
 8006532:	4013      	ands	r3, r2
 8006534:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	031b      	lsls	r3, r3, #12
 800653a:	697a      	ldr	r2, [r7, #20]
 800653c:	4313      	orrs	r3, r2
 800653e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	22a0      	movs	r2, #160	; 0xa0
 8006544:	4393      	bics	r3, r2
 8006546:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	011b      	lsls	r3, r3, #4
 800654c:	693a      	ldr	r2, [r7, #16]
 800654e:	4313      	orrs	r3, r2
 8006550:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	697a      	ldr	r2, [r7, #20]
 8006556:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	693a      	ldr	r2, [r7, #16]
 800655c:	621a      	str	r2, [r3, #32]
}
 800655e:	46c0      	nop			; (mov r8, r8)
 8006560:	46bd      	mov	sp, r7
 8006562:	b006      	add	sp, #24
 8006564:	bd80      	pop	{r7, pc}
 8006566:	46c0      	nop			; (mov r8, r8)
 8006568:	ffff0fff 	.word	0xffff0fff

0800656c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2270      	movs	r2, #112	; 0x70
 8006580:	4393      	bics	r3, r2
 8006582:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006584:	683a      	ldr	r2, [r7, #0]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	4313      	orrs	r3, r2
 800658a:	2207      	movs	r2, #7
 800658c:	4313      	orrs	r3, r2
 800658e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	609a      	str	r2, [r3, #8]
}
 8006596:	46c0      	nop			; (mov r8, r8)
 8006598:	46bd      	mov	sp, r7
 800659a:	b004      	add	sp, #16
 800659c:	bd80      	pop	{r7, pc}
	...

080065a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b086      	sub	sp, #24
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	607a      	str	r2, [r7, #4]
 80065ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	4a09      	ldr	r2, [pc, #36]	; (80065dc <TIM_ETR_SetConfig+0x3c>)
 80065b8:	4013      	ands	r3, r2
 80065ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	021a      	lsls	r2, r3, #8
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	431a      	orrs	r2, r3
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	697a      	ldr	r2, [r7, #20]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	697a      	ldr	r2, [r7, #20]
 80065d2:	609a      	str	r2, [r3, #8]
}
 80065d4:	46c0      	nop			; (mov r8, r8)
 80065d6:	46bd      	mov	sp, r7
 80065d8:	b006      	add	sp, #24
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	ffff00ff 	.word	0xffff00ff

080065e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b086      	sub	sp, #24
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	221f      	movs	r2, #31
 80065f0:	4013      	ands	r3, r2
 80065f2:	2201      	movs	r2, #1
 80065f4:	409a      	lsls	r2, r3
 80065f6:	0013      	movs	r3, r2
 80065f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6a1b      	ldr	r3, [r3, #32]
 80065fe:	697a      	ldr	r2, [r7, #20]
 8006600:	43d2      	mvns	r2, r2
 8006602:	401a      	ands	r2, r3
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6a1a      	ldr	r2, [r3, #32]
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	211f      	movs	r1, #31
 8006610:	400b      	ands	r3, r1
 8006612:	6879      	ldr	r1, [r7, #4]
 8006614:	4099      	lsls	r1, r3
 8006616:	000b      	movs	r3, r1
 8006618:	431a      	orrs	r2, r3
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	621a      	str	r2, [r3, #32]
}
 800661e:	46c0      	nop			; (mov r8, r8)
 8006620:	46bd      	mov	sp, r7
 8006622:	b006      	add	sp, #24
 8006624:	bd80      	pop	{r7, pc}
	...

08006628 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	223c      	movs	r2, #60	; 0x3c
 8006636:	5c9b      	ldrb	r3, [r3, r2]
 8006638:	2b01      	cmp	r3, #1
 800663a:	d101      	bne.n	8006640 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800663c:	2302      	movs	r3, #2
 800663e:	e047      	b.n	80066d0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	223c      	movs	r2, #60	; 0x3c
 8006644:	2101      	movs	r1, #1
 8006646:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	223d      	movs	r2, #61	; 0x3d
 800664c:	2102      	movs	r1, #2
 800664e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2270      	movs	r2, #112	; 0x70
 8006664:	4393      	bics	r3, r2
 8006666:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	4313      	orrs	r3, r2
 8006670:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a16      	ldr	r2, [pc, #88]	; (80066d8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d00f      	beq.n	80066a4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	2380      	movs	r3, #128	; 0x80
 800668a:	05db      	lsls	r3, r3, #23
 800668c:	429a      	cmp	r2, r3
 800668e:	d009      	beq.n	80066a4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a11      	ldr	r2, [pc, #68]	; (80066dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d004      	beq.n	80066a4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a10      	ldr	r2, [pc, #64]	; (80066e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d10c      	bne.n	80066be <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	2280      	movs	r2, #128	; 0x80
 80066a8:	4393      	bics	r3, r2
 80066aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	68ba      	ldr	r2, [r7, #8]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68ba      	ldr	r2, [r7, #8]
 80066bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	223d      	movs	r2, #61	; 0x3d
 80066c2:	2101      	movs	r1, #1
 80066c4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	223c      	movs	r2, #60	; 0x3c
 80066ca:	2100      	movs	r1, #0
 80066cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	0018      	movs	r0, r3
 80066d2:	46bd      	mov	sp, r7
 80066d4:	b004      	add	sp, #16
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	40012c00 	.word	0x40012c00
 80066dc:	40000400 	.word	0x40000400
 80066e0:	40014000 	.word	0x40014000

080066e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80066ee:	2300      	movs	r3, #0
 80066f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	223c      	movs	r2, #60	; 0x3c
 80066f6:	5c9b      	ldrb	r3, [r3, r2]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d101      	bne.n	8006700 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80066fc:	2302      	movs	r3, #2
 80066fe:	e03e      	b.n	800677e <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	223c      	movs	r2, #60	; 0x3c
 8006704:	2101      	movs	r1, #1
 8006706:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	22ff      	movs	r2, #255	; 0xff
 800670c:	4393      	bics	r3, r2
 800670e:	001a      	movs	r2, r3
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	4313      	orrs	r3, r2
 8006716:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	4a1b      	ldr	r2, [pc, #108]	; (8006788 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 800671c:	401a      	ands	r2, r3
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	4313      	orrs	r3, r2
 8006724:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	4a18      	ldr	r2, [pc, #96]	; (800678c <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800672a:	401a      	ands	r2, r3
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	4313      	orrs	r3, r2
 8006732:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	4a16      	ldr	r2, [pc, #88]	; (8006790 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8006738:	401a      	ands	r2, r3
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4313      	orrs	r3, r2
 8006740:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	4a13      	ldr	r2, [pc, #76]	; (8006794 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8006746:	401a      	ands	r2, r3
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	4313      	orrs	r3, r2
 800674e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	4a11      	ldr	r2, [pc, #68]	; (8006798 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8006754:	401a      	ands	r2, r3
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	4313      	orrs	r3, r2
 800675c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	4a0e      	ldr	r2, [pc, #56]	; (800679c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8006762:	401a      	ands	r2, r3
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	69db      	ldr	r3, [r3, #28]
 8006768:	4313      	orrs	r3, r2
 800676a:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	223c      	movs	r2, #60	; 0x3c
 8006778:	2100      	movs	r1, #0
 800677a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	0018      	movs	r0, r3
 8006780:	46bd      	mov	sp, r7
 8006782:	b004      	add	sp, #16
 8006784:	bd80      	pop	{r7, pc}
 8006786:	46c0      	nop			; (mov r8, r8)
 8006788:	fffffcff 	.word	0xfffffcff
 800678c:	fffffbff 	.word	0xfffffbff
 8006790:	fffff7ff 	.word	0xfffff7ff
 8006794:	ffffefff 	.word	0xffffefff
 8006798:	ffffdfff 	.word	0xffffdfff
 800679c:	ffffbfff 	.word	0xffffbfff

080067a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067a8:	46c0      	nop			; (mov r8, r8)
 80067aa:	46bd      	mov	sp, r7
 80067ac:	b002      	add	sp, #8
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80067b8:	46c0      	nop			; (mov r8, r8)
 80067ba:	46bd      	mov	sp, r7
 80067bc:	b002      	add	sp, #8
 80067be:	bd80      	pop	{r7, pc}

080067c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d101      	bne.n	80067d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e044      	b.n	800685c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d107      	bne.n	80067ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2274      	movs	r2, #116	; 0x74
 80067de:	2100      	movs	r1, #0
 80067e0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	0018      	movs	r0, r3
 80067e6:	f7fb fef7 	bl	80025d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2224      	movs	r2, #36	; 0x24
 80067ee:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2101      	movs	r1, #1
 80067fc:	438a      	bics	r2, r1
 80067fe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	0018      	movs	r0, r3
 8006804:	f000 fc2e 	bl	8007064 <UART_SetConfig>
 8006808:	0003      	movs	r3, r0
 800680a:	2b01      	cmp	r3, #1
 800680c:	d101      	bne.n	8006812 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e024      	b.n	800685c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006816:	2b00      	cmp	r3, #0
 8006818:	d003      	beq.n	8006822 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	0018      	movs	r0, r3
 800681e:	f000 fd61 	bl	80072e4 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	685a      	ldr	r2, [r3, #4]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	490d      	ldr	r1, [pc, #52]	; (8006864 <HAL_UART_Init+0xa4>)
 800682e:	400a      	ands	r2, r1
 8006830:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	689a      	ldr	r2, [r3, #8]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	212a      	movs	r1, #42	; 0x2a
 800683e:	438a      	bics	r2, r1
 8006840:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2101      	movs	r1, #1
 800684e:	430a      	orrs	r2, r1
 8006850:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	0018      	movs	r0, r3
 8006856:	f000 fdf9 	bl	800744c <UART_CheckIdleState>
 800685a:	0003      	movs	r3, r0
}
 800685c:	0018      	movs	r0, r3
 800685e:	46bd      	mov	sp, r7
 8006860:	b002      	add	sp, #8
 8006862:	bd80      	pop	{r7, pc}
 8006864:	ffffb7ff 	.word	0xffffb7ff

08006868 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b08a      	sub	sp, #40	; 0x28
 800686c:	af02      	add	r7, sp, #8
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	603b      	str	r3, [r7, #0]
 8006874:	1dbb      	adds	r3, r7, #6
 8006876:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800687c:	2b20      	cmp	r3, #32
 800687e:	d000      	beq.n	8006882 <HAL_UART_Transmit+0x1a>
 8006880:	e096      	b.n	80069b0 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d003      	beq.n	8006890 <HAL_UART_Transmit+0x28>
 8006888:	1dbb      	adds	r3, r7, #6
 800688a:	881b      	ldrh	r3, [r3, #0]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d101      	bne.n	8006894 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	e08e      	b.n	80069b2 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	689a      	ldr	r2, [r3, #8]
 8006898:	2380      	movs	r3, #128	; 0x80
 800689a:	015b      	lsls	r3, r3, #5
 800689c:	429a      	cmp	r2, r3
 800689e:	d109      	bne.n	80068b4 <HAL_UART_Transmit+0x4c>
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d105      	bne.n	80068b4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	2201      	movs	r2, #1
 80068ac:	4013      	ands	r3, r2
 80068ae:	d001      	beq.n	80068b4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e07e      	b.n	80069b2 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2274      	movs	r2, #116	; 0x74
 80068b8:	5c9b      	ldrb	r3, [r3, r2]
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d101      	bne.n	80068c2 <HAL_UART_Transmit+0x5a>
 80068be:	2302      	movs	r3, #2
 80068c0:	e077      	b.n	80069b2 <HAL_UART_Transmit+0x14a>
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2274      	movs	r2, #116	; 0x74
 80068c6:	2101      	movs	r1, #1
 80068c8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2280      	movs	r2, #128	; 0x80
 80068ce:	2100      	movs	r1, #0
 80068d0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2221      	movs	r2, #33	; 0x21
 80068d6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068d8:	f7fb ffe8 	bl	80028ac <HAL_GetTick>
 80068dc:	0003      	movs	r3, r0
 80068de:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	1dba      	adds	r2, r7, #6
 80068e4:	2150      	movs	r1, #80	; 0x50
 80068e6:	8812      	ldrh	r2, [r2, #0]
 80068e8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	1dba      	adds	r2, r7, #6
 80068ee:	2152      	movs	r1, #82	; 0x52
 80068f0:	8812      	ldrh	r2, [r2, #0]
 80068f2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	689a      	ldr	r2, [r3, #8]
 80068f8:	2380      	movs	r3, #128	; 0x80
 80068fa:	015b      	lsls	r3, r3, #5
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d108      	bne.n	8006912 <HAL_UART_Transmit+0xaa>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d104      	bne.n	8006912 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8006908:	2300      	movs	r3, #0
 800690a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	61bb      	str	r3, [r7, #24]
 8006910:	e003      	b.n	800691a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006916:	2300      	movs	r3, #0
 8006918:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2274      	movs	r2, #116	; 0x74
 800691e:	2100      	movs	r1, #0
 8006920:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8006922:	e02d      	b.n	8006980 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006924:	697a      	ldr	r2, [r7, #20]
 8006926:	68f8      	ldr	r0, [r7, #12]
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	9300      	str	r3, [sp, #0]
 800692c:	0013      	movs	r3, r2
 800692e:	2200      	movs	r2, #0
 8006930:	2180      	movs	r1, #128	; 0x80
 8006932:	f000 fdd3 	bl	80074dc <UART_WaitOnFlagUntilTimeout>
 8006936:	1e03      	subs	r3, r0, #0
 8006938:	d001      	beq.n	800693e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800693a:	2303      	movs	r3, #3
 800693c:	e039      	b.n	80069b2 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d10b      	bne.n	800695c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	881a      	ldrh	r2, [r3, #0]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	05d2      	lsls	r2, r2, #23
 800694e:	0dd2      	lsrs	r2, r2, #23
 8006950:	b292      	uxth	r2, r2
 8006952:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006954:	69bb      	ldr	r3, [r7, #24]
 8006956:	3302      	adds	r3, #2
 8006958:	61bb      	str	r3, [r7, #24]
 800695a:	e008      	b.n	800696e <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	781a      	ldrb	r2, [r3, #0]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	b292      	uxth	r2, r2
 8006966:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	3301      	adds	r3, #1
 800696c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2252      	movs	r2, #82	; 0x52
 8006972:	5a9b      	ldrh	r3, [r3, r2]
 8006974:	b29b      	uxth	r3, r3
 8006976:	3b01      	subs	r3, #1
 8006978:	b299      	uxth	r1, r3
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2252      	movs	r2, #82	; 0x52
 800697e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2252      	movs	r2, #82	; 0x52
 8006984:	5a9b      	ldrh	r3, [r3, r2]
 8006986:	b29b      	uxth	r3, r3
 8006988:	2b00      	cmp	r3, #0
 800698a:	d1cb      	bne.n	8006924 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800698c:	697a      	ldr	r2, [r7, #20]
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	9300      	str	r3, [sp, #0]
 8006994:	0013      	movs	r3, r2
 8006996:	2200      	movs	r2, #0
 8006998:	2140      	movs	r1, #64	; 0x40
 800699a:	f000 fd9f 	bl	80074dc <UART_WaitOnFlagUntilTimeout>
 800699e:	1e03      	subs	r3, r0, #0
 80069a0:	d001      	beq.n	80069a6 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e005      	b.n	80069b2 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2220      	movs	r2, #32
 80069aa:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80069ac:	2300      	movs	r3, #0
 80069ae:	e000      	b.n	80069b2 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80069b0:	2302      	movs	r3, #2
  }
}
 80069b2:	0018      	movs	r0, r3
 80069b4:	46bd      	mov	sp, r7
 80069b6:	b008      	add	sp, #32
 80069b8:	bd80      	pop	{r7, pc}

080069ba <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069ba:	b580      	push	{r7, lr}
 80069bc:	b088      	sub	sp, #32
 80069be:	af00      	add	r7, sp, #0
 80069c0:	60f8      	str	r0, [r7, #12]
 80069c2:	60b9      	str	r1, [r7, #8]
 80069c4:	1dbb      	adds	r3, r7, #6
 80069c6:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069cc:	2b20      	cmp	r3, #32
 80069ce:	d150      	bne.n	8006a72 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d003      	beq.n	80069de <HAL_UART_Receive_IT+0x24>
 80069d6:	1dbb      	adds	r3, r7, #6
 80069d8:	881b      	ldrh	r3, [r3, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d101      	bne.n	80069e2 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e048      	b.n	8006a74 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	689a      	ldr	r2, [r3, #8]
 80069e6:	2380      	movs	r3, #128	; 0x80
 80069e8:	015b      	lsls	r3, r3, #5
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d109      	bne.n	8006a02 <HAL_UART_Receive_IT+0x48>
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d105      	bne.n	8006a02 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	2201      	movs	r2, #1
 80069fa:	4013      	ands	r3, r2
 80069fc:	d001      	beq.n	8006a02 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e038      	b.n	8006a74 <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2274      	movs	r2, #116	; 0x74
 8006a06:	5c9b      	ldrb	r3, [r3, r2]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d101      	bne.n	8006a10 <HAL_UART_Receive_IT+0x56>
 8006a0c:	2302      	movs	r3, #2
 8006a0e:	e031      	b.n	8006a74 <HAL_UART_Receive_IT+0xba>
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2274      	movs	r2, #116	; 0x74
 8006a14:	2101      	movs	r1, #1
 8006a16:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	685a      	ldr	r2, [r3, #4]
 8006a24:	2380      	movs	r3, #128	; 0x80
 8006a26:	041b      	lsls	r3, r3, #16
 8006a28:	4013      	ands	r3, r2
 8006a2a:	d019      	beq.n	8006a60 <HAL_UART_Receive_IT+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a2c:	f3ef 8310 	mrs	r3, PRIMASK
 8006a30:	613b      	str	r3, [r7, #16]
  return(result);
 8006a32:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a34:	61fb      	str	r3, [r7, #28]
 8006a36:	2301      	movs	r3, #1
 8006a38:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	f383 8810 	msr	PRIMASK, r3
}
 8006a40:	46c0      	nop			; (mov r8, r8)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2180      	movs	r1, #128	; 0x80
 8006a4e:	04c9      	lsls	r1, r1, #19
 8006a50:	430a      	orrs	r2, r1
 8006a52:	601a      	str	r2, [r3, #0]
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	f383 8810 	msr	PRIMASK, r3
}
 8006a5e:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006a60:	1dbb      	adds	r3, r7, #6
 8006a62:	881a      	ldrh	r2, [r3, #0]
 8006a64:	68b9      	ldr	r1, [r7, #8]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	0018      	movs	r0, r3
 8006a6a:	f000 fdfb 	bl	8007664 <UART_Start_Receive_IT>
 8006a6e:	0003      	movs	r3, r0
 8006a70:	e000      	b.n	8006a74 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8006a72:	2302      	movs	r3, #2
  }
}
 8006a74:	0018      	movs	r0, r3
 8006a76:	46bd      	mov	sp, r7
 8006a78:	b008      	add	sp, #32
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a7c:	b590      	push	{r4, r7, lr}
 8006a7e:	b0ab      	sub	sp, #172	; 0xac
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	69db      	ldr	r3, [r3, #28]
 8006a8a:	22a4      	movs	r2, #164	; 0xa4
 8006a8c:	18b9      	adds	r1, r7, r2
 8006a8e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	20a0      	movs	r0, #160	; 0xa0
 8006a98:	1839      	adds	r1, r7, r0
 8006a9a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	219c      	movs	r1, #156	; 0x9c
 8006aa4:	1879      	adds	r1, r7, r1
 8006aa6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006aa8:	0011      	movs	r1, r2
 8006aaa:	18bb      	adds	r3, r7, r2
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a99      	ldr	r2, [pc, #612]	; (8006d14 <HAL_UART_IRQHandler+0x298>)
 8006ab0:	4013      	ands	r3, r2
 8006ab2:	2298      	movs	r2, #152	; 0x98
 8006ab4:	18bc      	adds	r4, r7, r2
 8006ab6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8006ab8:	18bb      	adds	r3, r7, r2
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d114      	bne.n	8006aea <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006ac0:	187b      	adds	r3, r7, r1
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2220      	movs	r2, #32
 8006ac6:	4013      	ands	r3, r2
 8006ac8:	d00f      	beq.n	8006aea <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006aca:	183b      	adds	r3, r7, r0
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2220      	movs	r2, #32
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	d00a      	beq.n	8006aea <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d100      	bne.n	8006ade <HAL_UART_IRQHandler+0x62>
 8006adc:	e296      	b.n	800700c <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	0010      	movs	r0, r2
 8006ae6:	4798      	blx	r3
      }
      return;
 8006ae8:	e290      	b.n	800700c <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006aea:	2398      	movs	r3, #152	; 0x98
 8006aec:	18fb      	adds	r3, r7, r3
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d100      	bne.n	8006af6 <HAL_UART_IRQHandler+0x7a>
 8006af4:	e114      	b.n	8006d20 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006af6:	239c      	movs	r3, #156	; 0x9c
 8006af8:	18fb      	adds	r3, r7, r3
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2201      	movs	r2, #1
 8006afe:	4013      	ands	r3, r2
 8006b00:	d106      	bne.n	8006b10 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006b02:	23a0      	movs	r3, #160	; 0xa0
 8006b04:	18fb      	adds	r3, r7, r3
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a83      	ldr	r2, [pc, #524]	; (8006d18 <HAL_UART_IRQHandler+0x29c>)
 8006b0a:	4013      	ands	r3, r2
 8006b0c:	d100      	bne.n	8006b10 <HAL_UART_IRQHandler+0x94>
 8006b0e:	e107      	b.n	8006d20 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b10:	23a4      	movs	r3, #164	; 0xa4
 8006b12:	18fb      	adds	r3, r7, r3
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2201      	movs	r2, #1
 8006b18:	4013      	ands	r3, r2
 8006b1a:	d012      	beq.n	8006b42 <HAL_UART_IRQHandler+0xc6>
 8006b1c:	23a0      	movs	r3, #160	; 0xa0
 8006b1e:	18fb      	adds	r3, r7, r3
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	2380      	movs	r3, #128	; 0x80
 8006b24:	005b      	lsls	r3, r3, #1
 8006b26:	4013      	ands	r3, r2
 8006b28:	d00b      	beq.n	8006b42 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2280      	movs	r2, #128	; 0x80
 8006b36:	589b      	ldr	r3, [r3, r2]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	431a      	orrs	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2180      	movs	r1, #128	; 0x80
 8006b40:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b42:	23a4      	movs	r3, #164	; 0xa4
 8006b44:	18fb      	adds	r3, r7, r3
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2202      	movs	r2, #2
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	d011      	beq.n	8006b72 <HAL_UART_IRQHandler+0xf6>
 8006b4e:	239c      	movs	r3, #156	; 0x9c
 8006b50:	18fb      	adds	r3, r7, r3
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2201      	movs	r2, #1
 8006b56:	4013      	ands	r3, r2
 8006b58:	d00b      	beq.n	8006b72 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2202      	movs	r2, #2
 8006b60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2280      	movs	r2, #128	; 0x80
 8006b66:	589b      	ldr	r3, [r3, r2]
 8006b68:	2204      	movs	r2, #4
 8006b6a:	431a      	orrs	r2, r3
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2180      	movs	r1, #128	; 0x80
 8006b70:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b72:	23a4      	movs	r3, #164	; 0xa4
 8006b74:	18fb      	adds	r3, r7, r3
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2204      	movs	r2, #4
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	d011      	beq.n	8006ba2 <HAL_UART_IRQHandler+0x126>
 8006b7e:	239c      	movs	r3, #156	; 0x9c
 8006b80:	18fb      	adds	r3, r7, r3
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	2201      	movs	r2, #1
 8006b86:	4013      	ands	r3, r2
 8006b88:	d00b      	beq.n	8006ba2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2204      	movs	r2, #4
 8006b90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2280      	movs	r2, #128	; 0x80
 8006b96:	589b      	ldr	r3, [r3, r2]
 8006b98:	2202      	movs	r2, #2
 8006b9a:	431a      	orrs	r2, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2180      	movs	r1, #128	; 0x80
 8006ba0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006ba2:	23a4      	movs	r3, #164	; 0xa4
 8006ba4:	18fb      	adds	r3, r7, r3
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2208      	movs	r2, #8
 8006baa:	4013      	ands	r3, r2
 8006bac:	d017      	beq.n	8006bde <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006bae:	23a0      	movs	r3, #160	; 0xa0
 8006bb0:	18fb      	adds	r3, r7, r3
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2220      	movs	r2, #32
 8006bb6:	4013      	ands	r3, r2
 8006bb8:	d105      	bne.n	8006bc6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006bba:	239c      	movs	r3, #156	; 0x9c
 8006bbc:	18fb      	adds	r3, r7, r3
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006bc4:	d00b      	beq.n	8006bde <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2208      	movs	r2, #8
 8006bcc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2280      	movs	r2, #128	; 0x80
 8006bd2:	589b      	ldr	r3, [r3, r2]
 8006bd4:	2208      	movs	r2, #8
 8006bd6:	431a      	orrs	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2180      	movs	r1, #128	; 0x80
 8006bdc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006bde:	23a4      	movs	r3, #164	; 0xa4
 8006be0:	18fb      	adds	r3, r7, r3
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	2380      	movs	r3, #128	; 0x80
 8006be6:	011b      	lsls	r3, r3, #4
 8006be8:	4013      	ands	r3, r2
 8006bea:	d013      	beq.n	8006c14 <HAL_UART_IRQHandler+0x198>
 8006bec:	23a0      	movs	r3, #160	; 0xa0
 8006bee:	18fb      	adds	r3, r7, r3
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	2380      	movs	r3, #128	; 0x80
 8006bf4:	04db      	lsls	r3, r3, #19
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	d00c      	beq.n	8006c14 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2280      	movs	r2, #128	; 0x80
 8006c00:	0112      	lsls	r2, r2, #4
 8006c02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2280      	movs	r2, #128	; 0x80
 8006c08:	589b      	ldr	r3, [r3, r2]
 8006c0a:	2220      	movs	r2, #32
 8006c0c:	431a      	orrs	r2, r3
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2180      	movs	r1, #128	; 0x80
 8006c12:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2280      	movs	r2, #128	; 0x80
 8006c18:	589b      	ldr	r3, [r3, r2]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d100      	bne.n	8006c20 <HAL_UART_IRQHandler+0x1a4>
 8006c1e:	e1f7      	b.n	8007010 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006c20:	23a4      	movs	r3, #164	; 0xa4
 8006c22:	18fb      	adds	r3, r7, r3
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2220      	movs	r2, #32
 8006c28:	4013      	ands	r3, r2
 8006c2a:	d00e      	beq.n	8006c4a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006c2c:	23a0      	movs	r3, #160	; 0xa0
 8006c2e:	18fb      	adds	r3, r7, r3
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	2220      	movs	r2, #32
 8006c34:	4013      	ands	r3, r2
 8006c36:	d008      	beq.n	8006c4a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d004      	beq.n	8006c4a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	0010      	movs	r0, r2
 8006c48:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2280      	movs	r2, #128	; 0x80
 8006c4e:	589b      	ldr	r3, [r3, r2]
 8006c50:	2194      	movs	r1, #148	; 0x94
 8006c52:	187a      	adds	r2, r7, r1
 8006c54:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	2240      	movs	r2, #64	; 0x40
 8006c5e:	4013      	ands	r3, r2
 8006c60:	2b40      	cmp	r3, #64	; 0x40
 8006c62:	d004      	beq.n	8006c6e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006c64:	187b      	adds	r3, r7, r1
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2228      	movs	r2, #40	; 0x28
 8006c6a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c6c:	d047      	beq.n	8006cfe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	0018      	movs	r0, r3
 8006c72:	f000 fd93 	bl	800779c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	2240      	movs	r2, #64	; 0x40
 8006c7e:	4013      	ands	r3, r2
 8006c80:	2b40      	cmp	r3, #64	; 0x40
 8006c82:	d137      	bne.n	8006cf4 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c84:	f3ef 8310 	mrs	r3, PRIMASK
 8006c88:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8006c8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c8c:	2090      	movs	r0, #144	; 0x90
 8006c8e:	183a      	adds	r2, r7, r0
 8006c90:	6013      	str	r3, [r2, #0]
 8006c92:	2301      	movs	r3, #1
 8006c94:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c98:	f383 8810 	msr	PRIMASK, r3
}
 8006c9c:	46c0      	nop			; (mov r8, r8)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	689a      	ldr	r2, [r3, #8]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2140      	movs	r1, #64	; 0x40
 8006caa:	438a      	bics	r2, r1
 8006cac:	609a      	str	r2, [r3, #8]
 8006cae:	183b      	adds	r3, r7, r0
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006cb6:	f383 8810 	msr	PRIMASK, r3
}
 8006cba:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d012      	beq.n	8006cea <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cc8:	4a14      	ldr	r2, [pc, #80]	; (8006d1c <HAL_UART_IRQHandler+0x2a0>)
 8006cca:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cd0:	0018      	movs	r0, r3
 8006cd2:	f7fc fc51 	bl	8003578 <HAL_DMA_Abort_IT>
 8006cd6:	1e03      	subs	r3, r0, #0
 8006cd8:	d01a      	beq.n	8006d10 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ce4:	0018      	movs	r0, r3
 8006ce6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ce8:	e012      	b.n	8006d10 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	0018      	movs	r0, r3
 8006cee:	f000 f9a5 	bl	800703c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cf2:	e00d      	b.n	8006d10 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	0018      	movs	r0, r3
 8006cf8:	f000 f9a0 	bl	800703c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cfc:	e008      	b.n	8006d10 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	0018      	movs	r0, r3
 8006d02:	f000 f99b 	bl	800703c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2280      	movs	r2, #128	; 0x80
 8006d0a:	2100      	movs	r1, #0
 8006d0c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006d0e:	e17f      	b.n	8007010 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d10:	46c0      	nop			; (mov r8, r8)
    return;
 8006d12:	e17d      	b.n	8007010 <HAL_UART_IRQHandler+0x594>
 8006d14:	0000080f 	.word	0x0000080f
 8006d18:	04000120 	.word	0x04000120
 8006d1c:	08007861 	.word	0x08007861

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d000      	beq.n	8006d2a <HAL_UART_IRQHandler+0x2ae>
 8006d28:	e131      	b.n	8006f8e <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006d2a:	23a4      	movs	r3, #164	; 0xa4
 8006d2c:	18fb      	adds	r3, r7, r3
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2210      	movs	r2, #16
 8006d32:	4013      	ands	r3, r2
 8006d34:	d100      	bne.n	8006d38 <HAL_UART_IRQHandler+0x2bc>
 8006d36:	e12a      	b.n	8006f8e <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006d38:	23a0      	movs	r3, #160	; 0xa0
 8006d3a:	18fb      	adds	r3, r7, r3
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2210      	movs	r2, #16
 8006d40:	4013      	ands	r3, r2
 8006d42:	d100      	bne.n	8006d46 <HAL_UART_IRQHandler+0x2ca>
 8006d44:	e123      	b.n	8006f8e <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	2210      	movs	r2, #16
 8006d4c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	2240      	movs	r2, #64	; 0x40
 8006d56:	4013      	ands	r3, r2
 8006d58:	2b40      	cmp	r3, #64	; 0x40
 8006d5a:	d000      	beq.n	8006d5e <HAL_UART_IRQHandler+0x2e2>
 8006d5c:	e09b      	b.n	8006e96 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	685a      	ldr	r2, [r3, #4]
 8006d66:	217e      	movs	r1, #126	; 0x7e
 8006d68:	187b      	adds	r3, r7, r1
 8006d6a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006d6c:	187b      	adds	r3, r7, r1
 8006d6e:	881b      	ldrh	r3, [r3, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d100      	bne.n	8006d76 <HAL_UART_IRQHandler+0x2fa>
 8006d74:	e14e      	b.n	8007014 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2258      	movs	r2, #88	; 0x58
 8006d7a:	5a9b      	ldrh	r3, [r3, r2]
 8006d7c:	187a      	adds	r2, r7, r1
 8006d7e:	8812      	ldrh	r2, [r2, #0]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d300      	bcc.n	8006d86 <HAL_UART_IRQHandler+0x30a>
 8006d84:	e146      	b.n	8007014 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	187a      	adds	r2, r7, r1
 8006d8a:	215a      	movs	r1, #90	; 0x5a
 8006d8c:	8812      	ldrh	r2, [r2, #0]
 8006d8e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d94:	699b      	ldr	r3, [r3, #24]
 8006d96:	2b20      	cmp	r3, #32
 8006d98:	d06e      	beq.n	8006e78 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d9a:	f3ef 8310 	mrs	r3, PRIMASK
 8006d9e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006da2:	67bb      	str	r3, [r7, #120]	; 0x78
 8006da4:	2301      	movs	r3, #1
 8006da6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006daa:	f383 8810 	msr	PRIMASK, r3
}
 8006dae:	46c0      	nop			; (mov r8, r8)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	499a      	ldr	r1, [pc, #616]	; (8007024 <HAL_UART_IRQHandler+0x5a8>)
 8006dbc:	400a      	ands	r2, r1
 8006dbe:	601a      	str	r2, [r3, #0]
 8006dc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006dc2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc6:	f383 8810 	msr	PRIMASK, r3
}
 8006dca:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dcc:	f3ef 8310 	mrs	r3, PRIMASK
 8006dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8006dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dd4:	677b      	str	r3, [r7, #116]	; 0x74
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ddc:	f383 8810 	msr	PRIMASK, r3
}
 8006de0:	46c0      	nop			; (mov r8, r8)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	689a      	ldr	r2, [r3, #8]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2101      	movs	r1, #1
 8006dee:	438a      	bics	r2, r1
 8006df0:	609a      	str	r2, [r3, #8]
 8006df2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006df4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006df6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006df8:	f383 8810 	msr	PRIMASK, r3
}
 8006dfc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dfe:	f3ef 8310 	mrs	r3, PRIMASK
 8006e02:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006e04:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e06:	673b      	str	r3, [r7, #112]	; 0x70
 8006e08:	2301      	movs	r3, #1
 8006e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e0e:	f383 8810 	msr	PRIMASK, r3
}
 8006e12:	46c0      	nop			; (mov r8, r8)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	689a      	ldr	r2, [r3, #8]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2140      	movs	r1, #64	; 0x40
 8006e20:	438a      	bics	r2, r1
 8006e22:	609a      	str	r2, [r3, #8]
 8006e24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e26:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e2a:	f383 8810 	msr	PRIMASK, r3
}
 8006e2e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2220      	movs	r2, #32
 8006e34:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e3c:	f3ef 8310 	mrs	r3, PRIMASK
 8006e40:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8006e42:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e44:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e46:	2301      	movs	r3, #1
 8006e48:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e4c:	f383 8810 	msr	PRIMASK, r3
}
 8006e50:	46c0      	nop			; (mov r8, r8)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2110      	movs	r1, #16
 8006e5e:	438a      	bics	r2, r1
 8006e60:	601a      	str	r2, [r3, #0]
 8006e62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e64:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e68:	f383 8810 	msr	PRIMASK, r3
}
 8006e6c:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e72:	0018      	movs	r0, r3
 8006e74:	f7fc fb48 	bl	8003508 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2258      	movs	r2, #88	; 0x58
 8006e7c:	5a9a      	ldrh	r2, [r3, r2]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	215a      	movs	r1, #90	; 0x5a
 8006e82:	5a5b      	ldrh	r3, [r3, r1]
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	1ad3      	subs	r3, r2, r3
 8006e88:	b29a      	uxth	r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	0011      	movs	r1, r2
 8006e8e:	0018      	movs	r0, r3
 8006e90:	f000 f8dc 	bl	800704c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e94:	e0be      	b.n	8007014 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2258      	movs	r2, #88	; 0x58
 8006e9a:	5a99      	ldrh	r1, [r3, r2]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	225a      	movs	r2, #90	; 0x5a
 8006ea0:	5a9b      	ldrh	r3, [r3, r2]
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	208e      	movs	r0, #142	; 0x8e
 8006ea6:	183b      	adds	r3, r7, r0
 8006ea8:	1a8a      	subs	r2, r1, r2
 8006eaa:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	225a      	movs	r2, #90	; 0x5a
 8006eb0:	5a9b      	ldrh	r3, [r3, r2]
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d100      	bne.n	8006eba <HAL_UART_IRQHandler+0x43e>
 8006eb8:	e0ae      	b.n	8007018 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8006eba:	183b      	adds	r3, r7, r0
 8006ebc:	881b      	ldrh	r3, [r3, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d100      	bne.n	8006ec4 <HAL_UART_IRQHandler+0x448>
 8006ec2:	e0a9      	b.n	8007018 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ec4:	f3ef 8310 	mrs	r3, PRIMASK
 8006ec8:	60fb      	str	r3, [r7, #12]
  return(result);
 8006eca:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ecc:	2488      	movs	r4, #136	; 0x88
 8006ece:	193a      	adds	r2, r7, r4
 8006ed0:	6013      	str	r3, [r2, #0]
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	f383 8810 	msr	PRIMASK, r3
}
 8006edc:	46c0      	nop			; (mov r8, r8)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	494f      	ldr	r1, [pc, #316]	; (8007028 <HAL_UART_IRQHandler+0x5ac>)
 8006eea:	400a      	ands	r2, r1
 8006eec:	601a      	str	r2, [r3, #0]
 8006eee:	193b      	adds	r3, r7, r4
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	f383 8810 	msr	PRIMASK, r3
}
 8006efa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006efc:	f3ef 8310 	mrs	r3, PRIMASK
 8006f00:	61bb      	str	r3, [r7, #24]
  return(result);
 8006f02:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f04:	2484      	movs	r4, #132	; 0x84
 8006f06:	193a      	adds	r2, r7, r4
 8006f08:	6013      	str	r3, [r2, #0]
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	f383 8810 	msr	PRIMASK, r3
}
 8006f14:	46c0      	nop			; (mov r8, r8)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	689a      	ldr	r2, [r3, #8]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2101      	movs	r1, #1
 8006f22:	438a      	bics	r2, r1
 8006f24:	609a      	str	r2, [r3, #8]
 8006f26:	193b      	adds	r3, r7, r4
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f2c:	6a3b      	ldr	r3, [r7, #32]
 8006f2e:	f383 8810 	msr	PRIMASK, r3
}
 8006f32:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2220      	movs	r2, #32
 8006f38:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f46:	f3ef 8310 	mrs	r3, PRIMASK
 8006f4a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f4e:	2480      	movs	r4, #128	; 0x80
 8006f50:	193a      	adds	r2, r7, r4
 8006f52:	6013      	str	r3, [r2, #0]
 8006f54:	2301      	movs	r3, #1
 8006f56:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f5a:	f383 8810 	msr	PRIMASK, r3
}
 8006f5e:	46c0      	nop			; (mov r8, r8)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2110      	movs	r1, #16
 8006f6c:	438a      	bics	r2, r1
 8006f6e:	601a      	str	r2, [r3, #0]
 8006f70:	193b      	adds	r3, r7, r4
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f78:	f383 8810 	msr	PRIMASK, r3
}
 8006f7c:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f7e:	183b      	adds	r3, r7, r0
 8006f80:	881a      	ldrh	r2, [r3, #0]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	0011      	movs	r1, r2
 8006f86:	0018      	movs	r0, r3
 8006f88:	f000 f860 	bl	800704c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f8c:	e044      	b.n	8007018 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006f8e:	23a4      	movs	r3, #164	; 0xa4
 8006f90:	18fb      	adds	r3, r7, r3
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	2380      	movs	r3, #128	; 0x80
 8006f96:	035b      	lsls	r3, r3, #13
 8006f98:	4013      	ands	r3, r2
 8006f9a:	d010      	beq.n	8006fbe <HAL_UART_IRQHandler+0x542>
 8006f9c:	239c      	movs	r3, #156	; 0x9c
 8006f9e:	18fb      	adds	r3, r7, r3
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	2380      	movs	r3, #128	; 0x80
 8006fa4:	03db      	lsls	r3, r3, #15
 8006fa6:	4013      	ands	r3, r2
 8006fa8:	d009      	beq.n	8006fbe <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2280      	movs	r2, #128	; 0x80
 8006fb0:	0352      	lsls	r2, r2, #13
 8006fb2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	0018      	movs	r0, r3
 8006fb8:	f000 fdfc 	bl	8007bb4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006fbc:	e02f      	b.n	800701e <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006fbe:	23a4      	movs	r3, #164	; 0xa4
 8006fc0:	18fb      	adds	r3, r7, r3
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2280      	movs	r2, #128	; 0x80
 8006fc6:	4013      	ands	r3, r2
 8006fc8:	d00f      	beq.n	8006fea <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006fca:	23a0      	movs	r3, #160	; 0xa0
 8006fcc:	18fb      	adds	r3, r7, r3
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2280      	movs	r2, #128	; 0x80
 8006fd2:	4013      	ands	r3, r2
 8006fd4:	d009      	beq.n	8006fea <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d01e      	beq.n	800701c <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	0010      	movs	r0, r2
 8006fe6:	4798      	blx	r3
    }
    return;
 8006fe8:	e018      	b.n	800701c <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006fea:	23a4      	movs	r3, #164	; 0xa4
 8006fec:	18fb      	adds	r3, r7, r3
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2240      	movs	r2, #64	; 0x40
 8006ff2:	4013      	ands	r3, r2
 8006ff4:	d013      	beq.n	800701e <HAL_UART_IRQHandler+0x5a2>
 8006ff6:	23a0      	movs	r3, #160	; 0xa0
 8006ff8:	18fb      	adds	r3, r7, r3
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2240      	movs	r2, #64	; 0x40
 8006ffe:	4013      	ands	r3, r2
 8007000:	d00d      	beq.n	800701e <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	0018      	movs	r0, r3
 8007006:	f000 fc42 	bl	800788e <UART_EndTransmit_IT>
    return;
 800700a:	e008      	b.n	800701e <HAL_UART_IRQHandler+0x5a2>
      return;
 800700c:	46c0      	nop			; (mov r8, r8)
 800700e:	e006      	b.n	800701e <HAL_UART_IRQHandler+0x5a2>
    return;
 8007010:	46c0      	nop			; (mov r8, r8)
 8007012:	e004      	b.n	800701e <HAL_UART_IRQHandler+0x5a2>
      return;
 8007014:	46c0      	nop			; (mov r8, r8)
 8007016:	e002      	b.n	800701e <HAL_UART_IRQHandler+0x5a2>
      return;
 8007018:	46c0      	nop			; (mov r8, r8)
 800701a:	e000      	b.n	800701e <HAL_UART_IRQHandler+0x5a2>
    return;
 800701c:	46c0      	nop			; (mov r8, r8)
  }

}
 800701e:	46bd      	mov	sp, r7
 8007020:	b02b      	add	sp, #172	; 0xac
 8007022:	bd90      	pop	{r4, r7, pc}
 8007024:	fffffeff 	.word	0xfffffeff
 8007028:	fffffedf 	.word	0xfffffedf

0800702c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007034:	46c0      	nop			; (mov r8, r8)
 8007036:	46bd      	mov	sp, r7
 8007038:	b002      	add	sp, #8
 800703a:	bd80      	pop	{r7, pc}

0800703c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007044:	46c0      	nop			; (mov r8, r8)
 8007046:	46bd      	mov	sp, r7
 8007048:	b002      	add	sp, #8
 800704a:	bd80      	pop	{r7, pc}

0800704c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	000a      	movs	r2, r1
 8007056:	1cbb      	adds	r3, r7, #2
 8007058:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800705a:	46c0      	nop			; (mov r8, r8)
 800705c:	46bd      	mov	sp, r7
 800705e:	b002      	add	sp, #8
 8007060:	bd80      	pop	{r7, pc}
	...

08007064 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b088      	sub	sp, #32
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800706c:	231e      	movs	r3, #30
 800706e:	18fb      	adds	r3, r7, r3
 8007070:	2200      	movs	r2, #0
 8007072:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	689a      	ldr	r2, [r3, #8]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	431a      	orrs	r2, r3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	695b      	ldr	r3, [r3, #20]
 8007082:	431a      	orrs	r2, r3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	69db      	ldr	r3, [r3, #28]
 8007088:	4313      	orrs	r3, r2
 800708a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a8d      	ldr	r2, [pc, #564]	; (80072c8 <UART_SetConfig+0x264>)
 8007094:	4013      	ands	r3, r2
 8007096:	0019      	movs	r1, r3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	697a      	ldr	r2, [r7, #20]
 800709e:	430a      	orrs	r2, r1
 80070a0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	4a88      	ldr	r2, [pc, #544]	; (80072cc <UART_SetConfig+0x268>)
 80070aa:	4013      	ands	r3, r2
 80070ac:	0019      	movs	r1, r3
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	68da      	ldr	r2, [r3, #12]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	430a      	orrs	r2, r1
 80070b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	699b      	ldr	r3, [r3, #24]
 80070be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6a1b      	ldr	r3, [r3, #32]
 80070c4:	697a      	ldr	r2, [r7, #20]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	4a7f      	ldr	r2, [pc, #508]	; (80072d0 <UART_SetConfig+0x26c>)
 80070d2:	4013      	ands	r3, r2
 80070d4:	0019      	movs	r1, r3
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	697a      	ldr	r2, [r7, #20]
 80070dc:	430a      	orrs	r2, r1
 80070de:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a7b      	ldr	r2, [pc, #492]	; (80072d4 <UART_SetConfig+0x270>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d127      	bne.n	800713a <UART_SetConfig+0xd6>
 80070ea:	4b7b      	ldr	r3, [pc, #492]	; (80072d8 <UART_SetConfig+0x274>)
 80070ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ee:	2203      	movs	r2, #3
 80070f0:	4013      	ands	r3, r2
 80070f2:	2b03      	cmp	r3, #3
 80070f4:	d00d      	beq.n	8007112 <UART_SetConfig+0xae>
 80070f6:	d81b      	bhi.n	8007130 <UART_SetConfig+0xcc>
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	d014      	beq.n	8007126 <UART_SetConfig+0xc2>
 80070fc:	d818      	bhi.n	8007130 <UART_SetConfig+0xcc>
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d002      	beq.n	8007108 <UART_SetConfig+0xa4>
 8007102:	2b01      	cmp	r3, #1
 8007104:	d00a      	beq.n	800711c <UART_SetConfig+0xb8>
 8007106:	e013      	b.n	8007130 <UART_SetConfig+0xcc>
 8007108:	231f      	movs	r3, #31
 800710a:	18fb      	adds	r3, r7, r3
 800710c:	2200      	movs	r2, #0
 800710e:	701a      	strb	r2, [r3, #0]
 8007110:	e021      	b.n	8007156 <UART_SetConfig+0xf2>
 8007112:	231f      	movs	r3, #31
 8007114:	18fb      	adds	r3, r7, r3
 8007116:	2202      	movs	r2, #2
 8007118:	701a      	strb	r2, [r3, #0]
 800711a:	e01c      	b.n	8007156 <UART_SetConfig+0xf2>
 800711c:	231f      	movs	r3, #31
 800711e:	18fb      	adds	r3, r7, r3
 8007120:	2204      	movs	r2, #4
 8007122:	701a      	strb	r2, [r3, #0]
 8007124:	e017      	b.n	8007156 <UART_SetConfig+0xf2>
 8007126:	231f      	movs	r3, #31
 8007128:	18fb      	adds	r3, r7, r3
 800712a:	2208      	movs	r2, #8
 800712c:	701a      	strb	r2, [r3, #0]
 800712e:	e012      	b.n	8007156 <UART_SetConfig+0xf2>
 8007130:	231f      	movs	r3, #31
 8007132:	18fb      	adds	r3, r7, r3
 8007134:	2210      	movs	r2, #16
 8007136:	701a      	strb	r2, [r3, #0]
 8007138:	e00d      	b.n	8007156 <UART_SetConfig+0xf2>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a67      	ldr	r2, [pc, #412]	; (80072dc <UART_SetConfig+0x278>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d104      	bne.n	800714e <UART_SetConfig+0xea>
 8007144:	231f      	movs	r3, #31
 8007146:	18fb      	adds	r3, r7, r3
 8007148:	2200      	movs	r2, #0
 800714a:	701a      	strb	r2, [r3, #0]
 800714c:	e003      	b.n	8007156 <UART_SetConfig+0xf2>
 800714e:	231f      	movs	r3, #31
 8007150:	18fb      	adds	r3, r7, r3
 8007152:	2210      	movs	r2, #16
 8007154:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	69da      	ldr	r2, [r3, #28]
 800715a:	2380      	movs	r3, #128	; 0x80
 800715c:	021b      	lsls	r3, r3, #8
 800715e:	429a      	cmp	r2, r3
 8007160:	d15d      	bne.n	800721e <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8007162:	231f      	movs	r3, #31
 8007164:	18fb      	adds	r3, r7, r3
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	2b08      	cmp	r3, #8
 800716a:	d015      	beq.n	8007198 <UART_SetConfig+0x134>
 800716c:	dc18      	bgt.n	80071a0 <UART_SetConfig+0x13c>
 800716e:	2b04      	cmp	r3, #4
 8007170:	d00d      	beq.n	800718e <UART_SetConfig+0x12a>
 8007172:	dc15      	bgt.n	80071a0 <UART_SetConfig+0x13c>
 8007174:	2b00      	cmp	r3, #0
 8007176:	d002      	beq.n	800717e <UART_SetConfig+0x11a>
 8007178:	2b02      	cmp	r3, #2
 800717a:	d005      	beq.n	8007188 <UART_SetConfig+0x124>
 800717c:	e010      	b.n	80071a0 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800717e:	f7fd fe95 	bl	8004eac <HAL_RCC_GetPCLK1Freq>
 8007182:	0003      	movs	r3, r0
 8007184:	61bb      	str	r3, [r7, #24]
        break;
 8007186:	e012      	b.n	80071ae <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007188:	4b55      	ldr	r3, [pc, #340]	; (80072e0 <UART_SetConfig+0x27c>)
 800718a:	61bb      	str	r3, [r7, #24]
        break;
 800718c:	e00f      	b.n	80071ae <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800718e:	f7fd fe1f 	bl	8004dd0 <HAL_RCC_GetSysClockFreq>
 8007192:	0003      	movs	r3, r0
 8007194:	61bb      	str	r3, [r7, #24]
        break;
 8007196:	e00a      	b.n	80071ae <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007198:	2380      	movs	r3, #128	; 0x80
 800719a:	021b      	lsls	r3, r3, #8
 800719c:	61bb      	str	r3, [r7, #24]
        break;
 800719e:	e006      	b.n	80071ae <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80071a0:	2300      	movs	r3, #0
 80071a2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80071a4:	231e      	movs	r3, #30
 80071a6:	18fb      	adds	r3, r7, r3
 80071a8:	2201      	movs	r2, #1
 80071aa:	701a      	strb	r2, [r3, #0]
        break;
 80071ac:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d100      	bne.n	80071b6 <UART_SetConfig+0x152>
 80071b4:	e07b      	b.n	80072ae <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80071b6:	69bb      	ldr	r3, [r7, #24]
 80071b8:	005a      	lsls	r2, r3, #1
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	085b      	lsrs	r3, r3, #1
 80071c0:	18d2      	adds	r2, r2, r3
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	0019      	movs	r1, r3
 80071c8:	0010      	movs	r0, r2
 80071ca:	f7f8 ffaf 	bl	800012c <__udivsi3>
 80071ce:	0003      	movs	r3, r0
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	2b0f      	cmp	r3, #15
 80071d8:	d91c      	bls.n	8007214 <UART_SetConfig+0x1b0>
 80071da:	693a      	ldr	r2, [r7, #16]
 80071dc:	2380      	movs	r3, #128	; 0x80
 80071de:	025b      	lsls	r3, r3, #9
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d217      	bcs.n	8007214 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	b29a      	uxth	r2, r3
 80071e8:	200e      	movs	r0, #14
 80071ea:	183b      	adds	r3, r7, r0
 80071ec:	210f      	movs	r1, #15
 80071ee:	438a      	bics	r2, r1
 80071f0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	085b      	lsrs	r3, r3, #1
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	2207      	movs	r2, #7
 80071fa:	4013      	ands	r3, r2
 80071fc:	b299      	uxth	r1, r3
 80071fe:	183b      	adds	r3, r7, r0
 8007200:	183a      	adds	r2, r7, r0
 8007202:	8812      	ldrh	r2, [r2, #0]
 8007204:	430a      	orrs	r2, r1
 8007206:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	183a      	adds	r2, r7, r0
 800720e:	8812      	ldrh	r2, [r2, #0]
 8007210:	60da      	str	r2, [r3, #12]
 8007212:	e04c      	b.n	80072ae <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8007214:	231e      	movs	r3, #30
 8007216:	18fb      	adds	r3, r7, r3
 8007218:	2201      	movs	r2, #1
 800721a:	701a      	strb	r2, [r3, #0]
 800721c:	e047      	b.n	80072ae <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800721e:	231f      	movs	r3, #31
 8007220:	18fb      	adds	r3, r7, r3
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	2b08      	cmp	r3, #8
 8007226:	d015      	beq.n	8007254 <UART_SetConfig+0x1f0>
 8007228:	dc18      	bgt.n	800725c <UART_SetConfig+0x1f8>
 800722a:	2b04      	cmp	r3, #4
 800722c:	d00d      	beq.n	800724a <UART_SetConfig+0x1e6>
 800722e:	dc15      	bgt.n	800725c <UART_SetConfig+0x1f8>
 8007230:	2b00      	cmp	r3, #0
 8007232:	d002      	beq.n	800723a <UART_SetConfig+0x1d6>
 8007234:	2b02      	cmp	r3, #2
 8007236:	d005      	beq.n	8007244 <UART_SetConfig+0x1e0>
 8007238:	e010      	b.n	800725c <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800723a:	f7fd fe37 	bl	8004eac <HAL_RCC_GetPCLK1Freq>
 800723e:	0003      	movs	r3, r0
 8007240:	61bb      	str	r3, [r7, #24]
        break;
 8007242:	e012      	b.n	800726a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007244:	4b26      	ldr	r3, [pc, #152]	; (80072e0 <UART_SetConfig+0x27c>)
 8007246:	61bb      	str	r3, [r7, #24]
        break;
 8007248:	e00f      	b.n	800726a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800724a:	f7fd fdc1 	bl	8004dd0 <HAL_RCC_GetSysClockFreq>
 800724e:	0003      	movs	r3, r0
 8007250:	61bb      	str	r3, [r7, #24]
        break;
 8007252:	e00a      	b.n	800726a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007254:	2380      	movs	r3, #128	; 0x80
 8007256:	021b      	lsls	r3, r3, #8
 8007258:	61bb      	str	r3, [r7, #24]
        break;
 800725a:	e006      	b.n	800726a <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 800725c:	2300      	movs	r3, #0
 800725e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007260:	231e      	movs	r3, #30
 8007262:	18fb      	adds	r3, r7, r3
 8007264:	2201      	movs	r2, #1
 8007266:	701a      	strb	r2, [r3, #0]
        break;
 8007268:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d01e      	beq.n	80072ae <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	085a      	lsrs	r2, r3, #1
 8007276:	69bb      	ldr	r3, [r7, #24]
 8007278:	18d2      	adds	r2, r2, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	0019      	movs	r1, r3
 8007280:	0010      	movs	r0, r2
 8007282:	f7f8 ff53 	bl	800012c <__udivsi3>
 8007286:	0003      	movs	r3, r0
 8007288:	b29b      	uxth	r3, r3
 800728a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	2b0f      	cmp	r3, #15
 8007290:	d909      	bls.n	80072a6 <UART_SetConfig+0x242>
 8007292:	693a      	ldr	r2, [r7, #16]
 8007294:	2380      	movs	r3, #128	; 0x80
 8007296:	025b      	lsls	r3, r3, #9
 8007298:	429a      	cmp	r2, r3
 800729a:	d204      	bcs.n	80072a6 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	693a      	ldr	r2, [r7, #16]
 80072a2:	60da      	str	r2, [r3, #12]
 80072a4:	e003      	b.n	80072ae <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80072a6:	231e      	movs	r3, #30
 80072a8:	18fb      	adds	r3, r7, r3
 80072aa:	2201      	movs	r2, #1
 80072ac:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80072ba:	231e      	movs	r3, #30
 80072bc:	18fb      	adds	r3, r7, r3
 80072be:	781b      	ldrb	r3, [r3, #0]
}
 80072c0:	0018      	movs	r0, r3
 80072c2:	46bd      	mov	sp, r7
 80072c4:	b008      	add	sp, #32
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	ffff69f3 	.word	0xffff69f3
 80072cc:	ffffcfff 	.word	0xffffcfff
 80072d0:	fffff4ff 	.word	0xfffff4ff
 80072d4:	40013800 	.word	0x40013800
 80072d8:	40021000 	.word	0x40021000
 80072dc:	40004400 	.word	0x40004400
 80072e0:	007a1200 	.word	0x007a1200

080072e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f0:	2201      	movs	r2, #1
 80072f2:	4013      	ands	r3, r2
 80072f4:	d00b      	beq.n	800730e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	4a4a      	ldr	r2, [pc, #296]	; (8007428 <UART_AdvFeatureConfig+0x144>)
 80072fe:	4013      	ands	r3, r2
 8007300:	0019      	movs	r1, r3
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	430a      	orrs	r2, r1
 800730c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007312:	2202      	movs	r2, #2
 8007314:	4013      	ands	r3, r2
 8007316:	d00b      	beq.n	8007330 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	4a43      	ldr	r2, [pc, #268]	; (800742c <UART_AdvFeatureConfig+0x148>)
 8007320:	4013      	ands	r3, r2
 8007322:	0019      	movs	r1, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	430a      	orrs	r2, r1
 800732e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007334:	2204      	movs	r2, #4
 8007336:	4013      	ands	r3, r2
 8007338:	d00b      	beq.n	8007352 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	4a3b      	ldr	r2, [pc, #236]	; (8007430 <UART_AdvFeatureConfig+0x14c>)
 8007342:	4013      	ands	r3, r2
 8007344:	0019      	movs	r1, r3
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	430a      	orrs	r2, r1
 8007350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007356:	2208      	movs	r2, #8
 8007358:	4013      	ands	r3, r2
 800735a:	d00b      	beq.n	8007374 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	4a34      	ldr	r2, [pc, #208]	; (8007434 <UART_AdvFeatureConfig+0x150>)
 8007364:	4013      	ands	r3, r2
 8007366:	0019      	movs	r1, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	430a      	orrs	r2, r1
 8007372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007378:	2210      	movs	r2, #16
 800737a:	4013      	ands	r3, r2
 800737c:	d00b      	beq.n	8007396 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	4a2c      	ldr	r2, [pc, #176]	; (8007438 <UART_AdvFeatureConfig+0x154>)
 8007386:	4013      	ands	r3, r2
 8007388:	0019      	movs	r1, r3
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	430a      	orrs	r2, r1
 8007394:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739a:	2220      	movs	r2, #32
 800739c:	4013      	ands	r3, r2
 800739e:	d00b      	beq.n	80073b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	4a25      	ldr	r2, [pc, #148]	; (800743c <UART_AdvFeatureConfig+0x158>)
 80073a8:	4013      	ands	r3, r2
 80073aa:	0019      	movs	r1, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	430a      	orrs	r2, r1
 80073b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073bc:	2240      	movs	r2, #64	; 0x40
 80073be:	4013      	ands	r3, r2
 80073c0:	d01d      	beq.n	80073fe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	4a1d      	ldr	r2, [pc, #116]	; (8007440 <UART_AdvFeatureConfig+0x15c>)
 80073ca:	4013      	ands	r3, r2
 80073cc:	0019      	movs	r1, r3
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	430a      	orrs	r2, r1
 80073d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073de:	2380      	movs	r3, #128	; 0x80
 80073e0:	035b      	lsls	r3, r3, #13
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d10b      	bne.n	80073fe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	4a15      	ldr	r2, [pc, #84]	; (8007444 <UART_AdvFeatureConfig+0x160>)
 80073ee:	4013      	ands	r3, r2
 80073f0:	0019      	movs	r1, r3
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	430a      	orrs	r2, r1
 80073fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007402:	2280      	movs	r2, #128	; 0x80
 8007404:	4013      	ands	r3, r2
 8007406:	d00b      	beq.n	8007420 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	4a0e      	ldr	r2, [pc, #56]	; (8007448 <UART_AdvFeatureConfig+0x164>)
 8007410:	4013      	ands	r3, r2
 8007412:	0019      	movs	r1, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	430a      	orrs	r2, r1
 800741e:	605a      	str	r2, [r3, #4]
  }
}
 8007420:	46c0      	nop			; (mov r8, r8)
 8007422:	46bd      	mov	sp, r7
 8007424:	b002      	add	sp, #8
 8007426:	bd80      	pop	{r7, pc}
 8007428:	fffdffff 	.word	0xfffdffff
 800742c:	fffeffff 	.word	0xfffeffff
 8007430:	fffbffff 	.word	0xfffbffff
 8007434:	ffff7fff 	.word	0xffff7fff
 8007438:	ffffefff 	.word	0xffffefff
 800743c:	ffffdfff 	.word	0xffffdfff
 8007440:	ffefffff 	.word	0xffefffff
 8007444:	ff9fffff 	.word	0xff9fffff
 8007448:	fff7ffff 	.word	0xfff7ffff

0800744c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b086      	sub	sp, #24
 8007450:	af02      	add	r7, sp, #8
 8007452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2280      	movs	r2, #128	; 0x80
 8007458:	2100      	movs	r1, #0
 800745a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800745c:	f7fb fa26 	bl	80028ac <HAL_GetTick>
 8007460:	0003      	movs	r3, r0
 8007462:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2208      	movs	r2, #8
 800746c:	4013      	ands	r3, r2
 800746e:	2b08      	cmp	r3, #8
 8007470:	d10c      	bne.n	800748c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2280      	movs	r2, #128	; 0x80
 8007476:	0391      	lsls	r1, r2, #14
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	4a17      	ldr	r2, [pc, #92]	; (80074d8 <UART_CheckIdleState+0x8c>)
 800747c:	9200      	str	r2, [sp, #0]
 800747e:	2200      	movs	r2, #0
 8007480:	f000 f82c 	bl	80074dc <UART_WaitOnFlagUntilTimeout>
 8007484:	1e03      	subs	r3, r0, #0
 8007486:	d001      	beq.n	800748c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007488:	2303      	movs	r3, #3
 800748a:	e021      	b.n	80074d0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	2204      	movs	r2, #4
 8007494:	4013      	ands	r3, r2
 8007496:	2b04      	cmp	r3, #4
 8007498:	d10c      	bne.n	80074b4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2280      	movs	r2, #128	; 0x80
 800749e:	03d1      	lsls	r1, r2, #15
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	4a0d      	ldr	r2, [pc, #52]	; (80074d8 <UART_CheckIdleState+0x8c>)
 80074a4:	9200      	str	r2, [sp, #0]
 80074a6:	2200      	movs	r2, #0
 80074a8:	f000 f818 	bl	80074dc <UART_WaitOnFlagUntilTimeout>
 80074ac:	1e03      	subs	r3, r0, #0
 80074ae:	d001      	beq.n	80074b4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074b0:	2303      	movs	r3, #3
 80074b2:	e00d      	b.n	80074d0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2220      	movs	r2, #32
 80074b8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2220      	movs	r2, #32
 80074be:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2274      	movs	r2, #116	; 0x74
 80074ca:	2100      	movs	r1, #0
 80074cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	0018      	movs	r0, r3
 80074d2:	46bd      	mov	sp, r7
 80074d4:	b004      	add	sp, #16
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	01ffffff 	.word	0x01ffffff

080074dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b094      	sub	sp, #80	; 0x50
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	60b9      	str	r1, [r7, #8]
 80074e6:	603b      	str	r3, [r7, #0]
 80074e8:	1dfb      	adds	r3, r7, #7
 80074ea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074ec:	e0a3      	b.n	8007636 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80074f0:	3301      	adds	r3, #1
 80074f2:	d100      	bne.n	80074f6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80074f4:	e09f      	b.n	8007636 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074f6:	f7fb f9d9 	bl	80028ac <HAL_GetTick>
 80074fa:	0002      	movs	r2, r0
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	1ad3      	subs	r3, r2, r3
 8007500:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007502:	429a      	cmp	r2, r3
 8007504:	d302      	bcc.n	800750c <UART_WaitOnFlagUntilTimeout+0x30>
 8007506:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007508:	2b00      	cmp	r3, #0
 800750a:	d13d      	bne.n	8007588 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800750c:	f3ef 8310 	mrs	r3, PRIMASK
 8007510:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007512:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007514:	647b      	str	r3, [r7, #68]	; 0x44
 8007516:	2301      	movs	r3, #1
 8007518:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800751a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800751c:	f383 8810 	msr	PRIMASK, r3
}
 8007520:	46c0      	nop			; (mov r8, r8)
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	494c      	ldr	r1, [pc, #304]	; (8007660 <UART_WaitOnFlagUntilTimeout+0x184>)
 800752e:	400a      	ands	r2, r1
 8007530:	601a      	str	r2, [r3, #0]
 8007532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007534:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007538:	f383 8810 	msr	PRIMASK, r3
}
 800753c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800753e:	f3ef 8310 	mrs	r3, PRIMASK
 8007542:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007546:	643b      	str	r3, [r7, #64]	; 0x40
 8007548:	2301      	movs	r3, #1
 800754a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800754c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800754e:	f383 8810 	msr	PRIMASK, r3
}
 8007552:	46c0      	nop			; (mov r8, r8)
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	689a      	ldr	r2, [r3, #8]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2101      	movs	r1, #1
 8007560:	438a      	bics	r2, r1
 8007562:	609a      	str	r2, [r3, #8]
 8007564:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007566:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800756a:	f383 8810 	msr	PRIMASK, r3
}
 800756e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2220      	movs	r2, #32
 8007574:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2220      	movs	r2, #32
 800757a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2274      	movs	r2, #116	; 0x74
 8007580:	2100      	movs	r1, #0
 8007582:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007584:	2303      	movs	r3, #3
 8007586:	e067      	b.n	8007658 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2204      	movs	r2, #4
 8007590:	4013      	ands	r3, r2
 8007592:	d050      	beq.n	8007636 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	69da      	ldr	r2, [r3, #28]
 800759a:	2380      	movs	r3, #128	; 0x80
 800759c:	011b      	lsls	r3, r3, #4
 800759e:	401a      	ands	r2, r3
 80075a0:	2380      	movs	r3, #128	; 0x80
 80075a2:	011b      	lsls	r3, r3, #4
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d146      	bne.n	8007636 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2280      	movs	r2, #128	; 0x80
 80075ae:	0112      	lsls	r2, r2, #4
 80075b0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075b2:	f3ef 8310 	mrs	r3, PRIMASK
 80075b6:	613b      	str	r3, [r7, #16]
  return(result);
 80075b8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80075ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075bc:	2301      	movs	r3, #1
 80075be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	f383 8810 	msr	PRIMASK, r3
}
 80075c6:	46c0      	nop			; (mov r8, r8)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4923      	ldr	r1, [pc, #140]	; (8007660 <UART_WaitOnFlagUntilTimeout+0x184>)
 80075d4:	400a      	ands	r2, r1
 80075d6:	601a      	str	r2, [r3, #0]
 80075d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075da:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	f383 8810 	msr	PRIMASK, r3
}
 80075e2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075e4:	f3ef 8310 	mrs	r3, PRIMASK
 80075e8:	61fb      	str	r3, [r7, #28]
  return(result);
 80075ea:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80075ee:	2301      	movs	r3, #1
 80075f0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075f2:	6a3b      	ldr	r3, [r7, #32]
 80075f4:	f383 8810 	msr	PRIMASK, r3
}
 80075f8:	46c0      	nop			; (mov r8, r8)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	689a      	ldr	r2, [r3, #8]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2101      	movs	r1, #1
 8007606:	438a      	bics	r2, r1
 8007608:	609a      	str	r2, [r3, #8]
 800760a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800760c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800760e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007610:	f383 8810 	msr	PRIMASK, r3
}
 8007614:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2220      	movs	r2, #32
 800761a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2220      	movs	r2, #32
 8007620:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2280      	movs	r2, #128	; 0x80
 8007626:	2120      	movs	r1, #32
 8007628:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2274      	movs	r2, #116	; 0x74
 800762e:	2100      	movs	r1, #0
 8007630:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007632:	2303      	movs	r3, #3
 8007634:	e010      	b.n	8007658 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	69db      	ldr	r3, [r3, #28]
 800763c:	68ba      	ldr	r2, [r7, #8]
 800763e:	4013      	ands	r3, r2
 8007640:	68ba      	ldr	r2, [r7, #8]
 8007642:	1ad3      	subs	r3, r2, r3
 8007644:	425a      	negs	r2, r3
 8007646:	4153      	adcs	r3, r2
 8007648:	b2db      	uxtb	r3, r3
 800764a:	001a      	movs	r2, r3
 800764c:	1dfb      	adds	r3, r7, #7
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	429a      	cmp	r2, r3
 8007652:	d100      	bne.n	8007656 <UART_WaitOnFlagUntilTimeout+0x17a>
 8007654:	e74b      	b.n	80074ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007656:	2300      	movs	r3, #0
}
 8007658:	0018      	movs	r0, r3
 800765a:	46bd      	mov	sp, r7
 800765c:	b014      	add	sp, #80	; 0x50
 800765e:	bd80      	pop	{r7, pc}
 8007660:	fffffe5f 	.word	0xfffffe5f

08007664 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b08c      	sub	sp, #48	; 0x30
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	1dbb      	adds	r3, r7, #6
 8007670:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	68ba      	ldr	r2, [r7, #8]
 8007676:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	1dba      	adds	r2, r7, #6
 800767c:	2158      	movs	r1, #88	; 0x58
 800767e:	8812      	ldrh	r2, [r2, #0]
 8007680:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	1dba      	adds	r2, r7, #6
 8007686:	215a      	movs	r1, #90	; 0x5a
 8007688:	8812      	ldrh	r2, [r2, #0]
 800768a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2200      	movs	r2, #0
 8007690:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	689a      	ldr	r2, [r3, #8]
 8007696:	2380      	movs	r3, #128	; 0x80
 8007698:	015b      	lsls	r3, r3, #5
 800769a:	429a      	cmp	r2, r3
 800769c:	d10d      	bne.n	80076ba <UART_Start_Receive_IT+0x56>
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	691b      	ldr	r3, [r3, #16]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d104      	bne.n	80076b0 <UART_Start_Receive_IT+0x4c>
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	225c      	movs	r2, #92	; 0x5c
 80076aa:	4939      	ldr	r1, [pc, #228]	; (8007790 <UART_Start_Receive_IT+0x12c>)
 80076ac:	5299      	strh	r1, [r3, r2]
 80076ae:	e01a      	b.n	80076e6 <UART_Start_Receive_IT+0x82>
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	225c      	movs	r2, #92	; 0x5c
 80076b4:	21ff      	movs	r1, #255	; 0xff
 80076b6:	5299      	strh	r1, [r3, r2]
 80076b8:	e015      	b.n	80076e6 <UART_Start_Receive_IT+0x82>
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d10d      	bne.n	80076de <UART_Start_Receive_IT+0x7a>
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	691b      	ldr	r3, [r3, #16]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d104      	bne.n	80076d4 <UART_Start_Receive_IT+0x70>
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	225c      	movs	r2, #92	; 0x5c
 80076ce:	21ff      	movs	r1, #255	; 0xff
 80076d0:	5299      	strh	r1, [r3, r2]
 80076d2:	e008      	b.n	80076e6 <UART_Start_Receive_IT+0x82>
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	225c      	movs	r2, #92	; 0x5c
 80076d8:	217f      	movs	r1, #127	; 0x7f
 80076da:	5299      	strh	r1, [r3, r2]
 80076dc:	e003      	b.n	80076e6 <UART_Start_Receive_IT+0x82>
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	225c      	movs	r2, #92	; 0x5c
 80076e2:	2100      	movs	r1, #0
 80076e4:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2280      	movs	r2, #128	; 0x80
 80076ea:	2100      	movs	r1, #0
 80076ec:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2222      	movs	r2, #34	; 0x22
 80076f2:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076f4:	f3ef 8310 	mrs	r3, PRIMASK
 80076f8:	61fb      	str	r3, [r7, #28]
  return(result);
 80076fa:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076fe:	2301      	movs	r3, #1
 8007700:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007702:	6a3b      	ldr	r3, [r7, #32]
 8007704:	f383 8810 	msr	PRIMASK, r3
}
 8007708:	46c0      	nop			; (mov r8, r8)
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	689a      	ldr	r2, [r3, #8]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2101      	movs	r1, #1
 8007716:	430a      	orrs	r2, r1
 8007718:	609a      	str	r2, [r3, #8]
 800771a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800771c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800771e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007720:	f383 8810 	msr	PRIMASK, r3
}
 8007724:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	689a      	ldr	r2, [r3, #8]
 800772a:	2380      	movs	r3, #128	; 0x80
 800772c:	015b      	lsls	r3, r3, #5
 800772e:	429a      	cmp	r2, r3
 8007730:	d107      	bne.n	8007742 <UART_Start_Receive_IT+0xde>
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d103      	bne.n	8007742 <UART_Start_Receive_IT+0xde>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	4a15      	ldr	r2, [pc, #84]	; (8007794 <UART_Start_Receive_IT+0x130>)
 800773e:	665a      	str	r2, [r3, #100]	; 0x64
 8007740:	e002      	b.n	8007748 <UART_Start_Receive_IT+0xe4>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	4a14      	ldr	r2, [pc, #80]	; (8007798 <UART_Start_Receive_IT+0x134>)
 8007746:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2274      	movs	r2, #116	; 0x74
 800774c:	2100      	movs	r1, #0
 800774e:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007750:	f3ef 8310 	mrs	r3, PRIMASK
 8007754:	613b      	str	r3, [r7, #16]
  return(result);
 8007756:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007758:	62bb      	str	r3, [r7, #40]	; 0x28
 800775a:	2301      	movs	r3, #1
 800775c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	f383 8810 	msr	PRIMASK, r3
}
 8007764:	46c0      	nop			; (mov r8, r8)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	2190      	movs	r1, #144	; 0x90
 8007772:	0049      	lsls	r1, r1, #1
 8007774:	430a      	orrs	r2, r1
 8007776:	601a      	str	r2, [r3, #0]
 8007778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800777a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800777c:	69bb      	ldr	r3, [r7, #24]
 800777e:	f383 8810 	msr	PRIMASK, r3
}
 8007782:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	0018      	movs	r0, r3
 8007788:	46bd      	mov	sp, r7
 800778a:	b00c      	add	sp, #48	; 0x30
 800778c:	bd80      	pop	{r7, pc}
 800778e:	46c0      	nop			; (mov r8, r8)
 8007790:	000001ff 	.word	0x000001ff
 8007794:	08007a4d 	.word	0x08007a4d
 8007798:	080078e5 	.word	0x080078e5

0800779c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b08e      	sub	sp, #56	; 0x38
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077a4:	f3ef 8310 	mrs	r3, PRIMASK
 80077a8:	617b      	str	r3, [r7, #20]
  return(result);
 80077aa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077ac:	637b      	str	r3, [r7, #52]	; 0x34
 80077ae:	2301      	movs	r3, #1
 80077b0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	f383 8810 	msr	PRIMASK, r3
}
 80077b8:	46c0      	nop			; (mov r8, r8)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4925      	ldr	r1, [pc, #148]	; (800785c <UART_EndRxTransfer+0xc0>)
 80077c6:	400a      	ands	r2, r1
 80077c8:	601a      	str	r2, [r3, #0]
 80077ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077ce:	69fb      	ldr	r3, [r7, #28]
 80077d0:	f383 8810 	msr	PRIMASK, r3
}
 80077d4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077d6:	f3ef 8310 	mrs	r3, PRIMASK
 80077da:	623b      	str	r3, [r7, #32]
  return(result);
 80077dc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077de:	633b      	str	r3, [r7, #48]	; 0x30
 80077e0:	2301      	movs	r3, #1
 80077e2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e6:	f383 8810 	msr	PRIMASK, r3
}
 80077ea:	46c0      	nop			; (mov r8, r8)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	689a      	ldr	r2, [r3, #8]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2101      	movs	r1, #1
 80077f8:	438a      	bics	r2, r1
 80077fa:	609a      	str	r2, [r3, #8]
 80077fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077fe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007802:	f383 8810 	msr	PRIMASK, r3
}
 8007806:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800780c:	2b01      	cmp	r3, #1
 800780e:	d118      	bne.n	8007842 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007810:	f3ef 8310 	mrs	r3, PRIMASK
 8007814:	60bb      	str	r3, [r7, #8]
  return(result);
 8007816:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007818:	62fb      	str	r3, [r7, #44]	; 0x2c
 800781a:	2301      	movs	r3, #1
 800781c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f383 8810 	msr	PRIMASK, r3
}
 8007824:	46c0      	nop			; (mov r8, r8)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2110      	movs	r1, #16
 8007832:	438a      	bics	r2, r1
 8007834:	601a      	str	r2, [r3, #0]
 8007836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007838:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	f383 8810 	msr	PRIMASK, r3
}
 8007840:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2220      	movs	r2, #32
 8007846:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007854:	46c0      	nop			; (mov r8, r8)
 8007856:	46bd      	mov	sp, r7
 8007858:	b00e      	add	sp, #56	; 0x38
 800785a:	bd80      	pop	{r7, pc}
 800785c:	fffffedf 	.word	0xfffffedf

08007860 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	225a      	movs	r2, #90	; 0x5a
 8007872:	2100      	movs	r1, #0
 8007874:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2252      	movs	r2, #82	; 0x52
 800787a:	2100      	movs	r1, #0
 800787c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	0018      	movs	r0, r3
 8007882:	f7ff fbdb 	bl	800703c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007886:	46c0      	nop			; (mov r8, r8)
 8007888:	46bd      	mov	sp, r7
 800788a:	b004      	add	sp, #16
 800788c:	bd80      	pop	{r7, pc}

0800788e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800788e:	b580      	push	{r7, lr}
 8007890:	b086      	sub	sp, #24
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007896:	f3ef 8310 	mrs	r3, PRIMASK
 800789a:	60bb      	str	r3, [r7, #8]
  return(result);
 800789c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800789e:	617b      	str	r3, [r7, #20]
 80078a0:	2301      	movs	r3, #1
 80078a2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f383 8810 	msr	PRIMASK, r3
}
 80078aa:	46c0      	nop			; (mov r8, r8)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2140      	movs	r1, #64	; 0x40
 80078b8:	438a      	bics	r2, r1
 80078ba:	601a      	str	r2, [r3, #0]
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	f383 8810 	msr	PRIMASK, r3
}
 80078c6:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2220      	movs	r2, #32
 80078cc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	0018      	movs	r0, r3
 80078d8:	f7ff fba8 	bl	800702c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078dc:	46c0      	nop			; (mov r8, r8)
 80078de:	46bd      	mov	sp, r7
 80078e0:	b006      	add	sp, #24
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b090      	sub	sp, #64	; 0x40
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80078ec:	203e      	movs	r0, #62	; 0x3e
 80078ee:	183b      	adds	r3, r7, r0
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	215c      	movs	r1, #92	; 0x5c
 80078f4:	5a52      	ldrh	r2, [r2, r1]
 80078f6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078fc:	2b22      	cmp	r3, #34	; 0x22
 80078fe:	d000      	beq.n	8007902 <UART_RxISR_8BIT+0x1e>
 8007900:	e095      	b.n	8007a2e <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	213c      	movs	r1, #60	; 0x3c
 8007908:	187b      	adds	r3, r7, r1
 800790a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800790c:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800790e:	187b      	adds	r3, r7, r1
 8007910:	881b      	ldrh	r3, [r3, #0]
 8007912:	b2da      	uxtb	r2, r3
 8007914:	183b      	adds	r3, r7, r0
 8007916:	881b      	ldrh	r3, [r3, #0]
 8007918:	b2d9      	uxtb	r1, r3
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800791e:	400a      	ands	r2, r1
 8007920:	b2d2      	uxtb	r2, r2
 8007922:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007928:	1c5a      	adds	r2, r3, #1
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	225a      	movs	r2, #90	; 0x5a
 8007932:	5a9b      	ldrh	r3, [r3, r2]
 8007934:	b29b      	uxth	r3, r3
 8007936:	3b01      	subs	r3, #1
 8007938:	b299      	uxth	r1, r3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	225a      	movs	r2, #90	; 0x5a
 800793e:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	225a      	movs	r2, #90	; 0x5a
 8007944:	5a9b      	ldrh	r3, [r3, r2]
 8007946:	b29b      	uxth	r3, r3
 8007948:	2b00      	cmp	r3, #0
 800794a:	d178      	bne.n	8007a3e <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800794c:	f3ef 8310 	mrs	r3, PRIMASK
 8007950:	61bb      	str	r3, [r7, #24]
  return(result);
 8007952:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007954:	63bb      	str	r3, [r7, #56]	; 0x38
 8007956:	2301      	movs	r3, #1
 8007958:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	f383 8810 	msr	PRIMASK, r3
}
 8007960:	46c0      	nop			; (mov r8, r8)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4936      	ldr	r1, [pc, #216]	; (8007a48 <UART_RxISR_8BIT+0x164>)
 800796e:	400a      	ands	r2, r1
 8007970:	601a      	str	r2, [r3, #0]
 8007972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007974:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007976:	6a3b      	ldr	r3, [r7, #32]
 8007978:	f383 8810 	msr	PRIMASK, r3
}
 800797c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800797e:	f3ef 8310 	mrs	r3, PRIMASK
 8007982:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007984:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007986:	637b      	str	r3, [r7, #52]	; 0x34
 8007988:	2301      	movs	r3, #1
 800798a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800798c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800798e:	f383 8810 	msr	PRIMASK, r3
}
 8007992:	46c0      	nop			; (mov r8, r8)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	689a      	ldr	r2, [r3, #8]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2101      	movs	r1, #1
 80079a0:	438a      	bics	r2, r1
 80079a2:	609a      	str	r2, [r3, #8]
 80079a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079aa:	f383 8810 	msr	PRIMASK, r3
}
 80079ae:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2220      	movs	r2, #32
 80079b4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d12f      	bne.n	8007a24 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079ca:	f3ef 8310 	mrs	r3, PRIMASK
 80079ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80079d0:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079d2:	633b      	str	r3, [r7, #48]	; 0x30
 80079d4:	2301      	movs	r3, #1
 80079d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	f383 8810 	msr	PRIMASK, r3
}
 80079de:	46c0      	nop			; (mov r8, r8)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	2110      	movs	r1, #16
 80079ec:	438a      	bics	r2, r1
 80079ee:	601a      	str	r2, [r3, #0]
 80079f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	f383 8810 	msr	PRIMASK, r3
}
 80079fa:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	69db      	ldr	r3, [r3, #28]
 8007a02:	2210      	movs	r2, #16
 8007a04:	4013      	ands	r3, r2
 8007a06:	2b10      	cmp	r3, #16
 8007a08:	d103      	bne.n	8007a12 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	2210      	movs	r2, #16
 8007a10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2258      	movs	r2, #88	; 0x58
 8007a16:	5a9a      	ldrh	r2, [r3, r2]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	0011      	movs	r1, r2
 8007a1c:	0018      	movs	r0, r3
 8007a1e:	f7ff fb15 	bl	800704c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a22:	e00c      	b.n	8007a3e <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	0018      	movs	r0, r3
 8007a28:	f7f9 fd86 	bl	8001538 <HAL_UART_RxCpltCallback>
}
 8007a2c:	e007      	b.n	8007a3e <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	699a      	ldr	r2, [r3, #24]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	2108      	movs	r1, #8
 8007a3a:	430a      	orrs	r2, r1
 8007a3c:	619a      	str	r2, [r3, #24]
}
 8007a3e:	46c0      	nop			; (mov r8, r8)
 8007a40:	46bd      	mov	sp, r7
 8007a42:	b010      	add	sp, #64	; 0x40
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	46c0      	nop			; (mov r8, r8)
 8007a48:	fffffedf 	.word	0xfffffedf

08007a4c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b090      	sub	sp, #64	; 0x40
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007a54:	203e      	movs	r0, #62	; 0x3e
 8007a56:	183b      	adds	r3, r7, r0
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	215c      	movs	r1, #92	; 0x5c
 8007a5c:	5a52      	ldrh	r2, [r2, r1]
 8007a5e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a64:	2b22      	cmp	r3, #34	; 0x22
 8007a66:	d000      	beq.n	8007a6a <UART_RxISR_16BIT+0x1e>
 8007a68:	e095      	b.n	8007b96 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	213c      	movs	r1, #60	; 0x3c
 8007a70:	187b      	adds	r3, r7, r1
 8007a72:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8007a74:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a7a:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8007a7c:	187b      	adds	r3, r7, r1
 8007a7e:	183a      	adds	r2, r7, r0
 8007a80:	881b      	ldrh	r3, [r3, #0]
 8007a82:	8812      	ldrh	r2, [r2, #0]
 8007a84:	4013      	ands	r3, r2
 8007a86:	b29a      	uxth	r2, r3
 8007a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a8a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a90:	1c9a      	adds	r2, r3, #2
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	225a      	movs	r2, #90	; 0x5a
 8007a9a:	5a9b      	ldrh	r3, [r3, r2]
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	3b01      	subs	r3, #1
 8007aa0:	b299      	uxth	r1, r3
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	225a      	movs	r2, #90	; 0x5a
 8007aa6:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	225a      	movs	r2, #90	; 0x5a
 8007aac:	5a9b      	ldrh	r3, [r3, r2]
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d178      	bne.n	8007ba6 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ab4:	f3ef 8310 	mrs	r3, PRIMASK
 8007ab8:	617b      	str	r3, [r7, #20]
  return(result);
 8007aba:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007abc:	637b      	str	r3, [r7, #52]	; 0x34
 8007abe:	2301      	movs	r3, #1
 8007ac0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ac2:	69bb      	ldr	r3, [r7, #24]
 8007ac4:	f383 8810 	msr	PRIMASK, r3
}
 8007ac8:	46c0      	nop			; (mov r8, r8)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4936      	ldr	r1, [pc, #216]	; (8007bb0 <UART_RxISR_16BIT+0x164>)
 8007ad6:	400a      	ands	r2, r1
 8007ad8:	601a      	str	r2, [r3, #0]
 8007ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007adc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ade:	69fb      	ldr	r3, [r7, #28]
 8007ae0:	f383 8810 	msr	PRIMASK, r3
}
 8007ae4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ae6:	f3ef 8310 	mrs	r3, PRIMASK
 8007aea:	623b      	str	r3, [r7, #32]
  return(result);
 8007aec:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aee:	633b      	str	r3, [r7, #48]	; 0x30
 8007af0:	2301      	movs	r3, #1
 8007af2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af6:	f383 8810 	msr	PRIMASK, r3
}
 8007afa:	46c0      	nop			; (mov r8, r8)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	689a      	ldr	r2, [r3, #8]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	2101      	movs	r1, #1
 8007b08:	438a      	bics	r2, r1
 8007b0a:	609a      	str	r2, [r3, #8]
 8007b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b12:	f383 8810 	msr	PRIMASK, r3
}
 8007b16:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2220      	movs	r2, #32
 8007b1c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d12f      	bne.n	8007b8c <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b32:	f3ef 8310 	mrs	r3, PRIMASK
 8007b36:	60bb      	str	r3, [r7, #8]
  return(result);
 8007b38:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f383 8810 	msr	PRIMASK, r3
}
 8007b46:	46c0      	nop			; (mov r8, r8)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	2110      	movs	r1, #16
 8007b54:	438a      	bics	r2, r1
 8007b56:	601a      	str	r2, [r3, #0]
 8007b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	f383 8810 	msr	PRIMASK, r3
}
 8007b62:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	69db      	ldr	r3, [r3, #28]
 8007b6a:	2210      	movs	r2, #16
 8007b6c:	4013      	ands	r3, r2
 8007b6e:	2b10      	cmp	r3, #16
 8007b70:	d103      	bne.n	8007b7a <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	2210      	movs	r2, #16
 8007b78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2258      	movs	r2, #88	; 0x58
 8007b7e:	5a9a      	ldrh	r2, [r3, r2]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	0011      	movs	r1, r2
 8007b84:	0018      	movs	r0, r3
 8007b86:	f7ff fa61 	bl	800704c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007b8a:	e00c      	b.n	8007ba6 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	0018      	movs	r0, r3
 8007b90:	f7f9 fcd2 	bl	8001538 <HAL_UART_RxCpltCallback>
}
 8007b94:	e007      	b.n	8007ba6 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	699a      	ldr	r2, [r3, #24]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	2108      	movs	r1, #8
 8007ba2:	430a      	orrs	r2, r1
 8007ba4:	619a      	str	r2, [r3, #24]
}
 8007ba6:	46c0      	nop			; (mov r8, r8)
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	b010      	add	sp, #64	; 0x40
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	46c0      	nop			; (mov r8, r8)
 8007bb0:	fffffedf 	.word	0xfffffedf

08007bb4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007bbc:	46c0      	nop			; (mov r8, r8)
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	b002      	add	sp, #8
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b088      	sub	sp, #32
 8007bc8:	af02      	add	r7, sp, #8
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	1d3b      	adds	r3, r7, #4
 8007bce:	6019      	str	r1, [r3, #0]
 8007bd0:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007bd2:	2317      	movs	r3, #23
 8007bd4:	18fb      	adds	r3, r7, r3
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2274      	movs	r2, #116	; 0x74
 8007bde:	5c9b      	ldrb	r3, [r3, r2]
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d101      	bne.n	8007be8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x24>
 8007be4:	2302      	movs	r3, #2
 8007be6:	e04a      	b.n	8007c7e <HAL_UARTEx_StopModeWakeUpSourceConfig+0xba>
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2274      	movs	r2, #116	; 0x74
 8007bec:	2101      	movs	r1, #1
 8007bee:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2224      	movs	r2, #36	; 0x24
 8007bf4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2101      	movs	r1, #1
 8007c02:	438a      	bics	r2, r1
 8007c04:	601a      	str	r2, [r3, #0]

#if defined(USART_CR3_WUS)
  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	4a1e      	ldr	r2, [pc, #120]	; (8007c88 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc4>)
 8007c0e:	4013      	ands	r3, r2
 8007c10:	0019      	movs	r1, r3
 8007c12:	1d3b      	adds	r3, r7, #4
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	430a      	orrs	r2, r1
 8007c1c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_WUS */

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8007c1e:	1d3b      	adds	r3, r7, #4
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d105      	bne.n	8007c32 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x6e>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8007c26:	1d3b      	adds	r3, r7, #4
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	6819      	ldr	r1, [r3, #0]
 8007c2c:	685a      	ldr	r2, [r3, #4]
 8007c2e:	f000 f860 	bl	8007cf2 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	2101      	movs	r1, #1
 8007c3e:	430a      	orrs	r2, r1
 8007c40:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c42:	f7fa fe33 	bl	80028ac <HAL_GetTick>
 8007c46:	0003      	movs	r3, r0
 8007c48:	613b      	str	r3, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	2280      	movs	r2, #128	; 0x80
 8007c4e:	03d1      	lsls	r1, r2, #15
 8007c50:	68f8      	ldr	r0, [r7, #12]
 8007c52:	4a0e      	ldr	r2, [pc, #56]	; (8007c8c <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc8>)
 8007c54:	9200      	str	r2, [sp, #0]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f7ff fc40 	bl	80074dc <UART_WaitOnFlagUntilTimeout>
 8007c5c:	1e03      	subs	r3, r0, #0
 8007c5e:	d004      	beq.n	8007c6a <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa6>
  {
    status = HAL_TIMEOUT;
 8007c60:	2317      	movs	r3, #23
 8007c62:	18fb      	adds	r3, r7, r3
 8007c64:	2203      	movs	r2, #3
 8007c66:	701a      	strb	r2, [r3, #0]
 8007c68:	e002      	b.n	8007c70 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xac>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2220      	movs	r2, #32
 8007c6e:	679a      	str	r2, [r3, #120]	; 0x78
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2274      	movs	r2, #116	; 0x74
 8007c74:	2100      	movs	r1, #0
 8007c76:	5499      	strb	r1, [r3, r2]

  return status;
 8007c78:	2317      	movs	r3, #23
 8007c7a:	18fb      	adds	r3, r7, r3
 8007c7c:	781b      	ldrb	r3, [r3, #0]
}
 8007c7e:	0018      	movs	r0, r3
 8007c80:	46bd      	mov	sp, r7
 8007c82:	b006      	add	sp, #24
 8007c84:	bd80      	pop	{r7, pc}
 8007c86:	46c0      	nop			; (mov r8, r8)
 8007c88:	ffcfffff 	.word	0xffcfffff
 8007c8c:	01ffffff 	.word	0x01ffffff

08007c90 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b086      	sub	sp, #24
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2274      	movs	r2, #116	; 0x74
 8007c9c:	5c9b      	ldrb	r3, [r3, r2]
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d101      	bne.n	8007ca6 <HAL_UARTEx_EnableStopMode+0x16>
 8007ca2:	2302      	movs	r3, #2
 8007ca4:	e021      	b.n	8007cea <HAL_UARTEx_EnableStopMode+0x5a>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2274      	movs	r2, #116	; 0x74
 8007caa:	2101      	movs	r1, #1
 8007cac:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cae:	f3ef 8310 	mrs	r3, PRIMASK
 8007cb2:	60bb      	str	r3, [r7, #8]
  return(result);
 8007cb4:	68bb      	ldr	r3, [r7, #8]

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8007cb6:	617b      	str	r3, [r7, #20]
 8007cb8:	2301      	movs	r3, #1
 8007cba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f383 8810 	msr	PRIMASK, r3
}
 8007cc2:	46c0      	nop			; (mov r8, r8)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	2102      	movs	r1, #2
 8007cd0:	430a      	orrs	r2, r1
 8007cd2:	601a      	str	r2, [r3, #0]
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	f383 8810 	msr	PRIMASK, r3
}
 8007cde:	46c0      	nop			; (mov r8, r8)

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2274      	movs	r2, #116	; 0x74
 8007ce4:	2100      	movs	r1, #0
 8007ce6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007ce8:	2300      	movs	r3, #0
}
 8007cea:	0018      	movs	r0, r3
 8007cec:	46bd      	mov	sp, r7
 8007cee:	b006      	add	sp, #24
 8007cf0:	bd80      	pop	{r7, pc}

08007cf2 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8007cf2:	b580      	push	{r7, lr}
 8007cf4:	b084      	sub	sp, #16
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	60f8      	str	r0, [r7, #12]
 8007cfa:	1d3b      	adds	r3, r7, #4
 8007cfc:	6019      	str	r1, [r3, #0]
 8007cfe:	605a      	str	r2, [r3, #4]
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	2210      	movs	r2, #16
 8007d08:	4393      	bics	r3, r2
 8007d0a:	001a      	movs	r2, r3
 8007d0c:	1d3b      	adds	r3, r7, #4
 8007d0e:	889b      	ldrh	r3, [r3, #4]
 8007d10:	0019      	movs	r1, r3
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	430a      	orrs	r2, r1
 8007d18:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	021b      	lsls	r3, r3, #8
 8007d22:	0a19      	lsrs	r1, r3, #8
 8007d24:	1d3b      	adds	r3, r7, #4
 8007d26:	799b      	ldrb	r3, [r3, #6]
 8007d28:	061a      	lsls	r2, r3, #24
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	430a      	orrs	r2, r1
 8007d30:	605a      	str	r2, [r3, #4]
}
 8007d32:	46c0      	nop			; (mov r8, r8)
 8007d34:	46bd      	mov	sp, r7
 8007d36:	b004      	add	sp, #16
 8007d38:	bd80      	pop	{r7, pc}
	...

08007d3c <__errno>:
 8007d3c:	4b01      	ldr	r3, [pc, #4]	; (8007d44 <__errno+0x8>)
 8007d3e:	6818      	ldr	r0, [r3, #0]
 8007d40:	4770      	bx	lr
 8007d42:	46c0      	nop			; (mov r8, r8)
 8007d44:	20000028 	.word	0x20000028

08007d48 <__libc_init_array>:
 8007d48:	b570      	push	{r4, r5, r6, lr}
 8007d4a:	2600      	movs	r6, #0
 8007d4c:	4d0c      	ldr	r5, [pc, #48]	; (8007d80 <__libc_init_array+0x38>)
 8007d4e:	4c0d      	ldr	r4, [pc, #52]	; (8007d84 <__libc_init_array+0x3c>)
 8007d50:	1b64      	subs	r4, r4, r5
 8007d52:	10a4      	asrs	r4, r4, #2
 8007d54:	42a6      	cmp	r6, r4
 8007d56:	d109      	bne.n	8007d6c <__libc_init_array+0x24>
 8007d58:	2600      	movs	r6, #0
 8007d5a:	f000 fc8b 	bl	8008674 <_init>
 8007d5e:	4d0a      	ldr	r5, [pc, #40]	; (8007d88 <__libc_init_array+0x40>)
 8007d60:	4c0a      	ldr	r4, [pc, #40]	; (8007d8c <__libc_init_array+0x44>)
 8007d62:	1b64      	subs	r4, r4, r5
 8007d64:	10a4      	asrs	r4, r4, #2
 8007d66:	42a6      	cmp	r6, r4
 8007d68:	d105      	bne.n	8007d76 <__libc_init_array+0x2e>
 8007d6a:	bd70      	pop	{r4, r5, r6, pc}
 8007d6c:	00b3      	lsls	r3, r6, #2
 8007d6e:	58eb      	ldr	r3, [r5, r3]
 8007d70:	4798      	blx	r3
 8007d72:	3601      	adds	r6, #1
 8007d74:	e7ee      	b.n	8007d54 <__libc_init_array+0xc>
 8007d76:	00b3      	lsls	r3, r6, #2
 8007d78:	58eb      	ldr	r3, [r5, r3]
 8007d7a:	4798      	blx	r3
 8007d7c:	3601      	adds	r6, #1
 8007d7e:	e7f2      	b.n	8007d66 <__libc_init_array+0x1e>
 8007d80:	080087a0 	.word	0x080087a0
 8007d84:	080087a0 	.word	0x080087a0
 8007d88:	080087a0 	.word	0x080087a0
 8007d8c:	080087a4 	.word	0x080087a4

08007d90 <memset>:
 8007d90:	0003      	movs	r3, r0
 8007d92:	1882      	adds	r2, r0, r2
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d100      	bne.n	8007d9a <memset+0xa>
 8007d98:	4770      	bx	lr
 8007d9a:	7019      	strb	r1, [r3, #0]
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	e7f9      	b.n	8007d94 <memset+0x4>

08007da0 <siprintf>:
 8007da0:	b40e      	push	{r1, r2, r3}
 8007da2:	b500      	push	{lr}
 8007da4:	490b      	ldr	r1, [pc, #44]	; (8007dd4 <siprintf+0x34>)
 8007da6:	b09c      	sub	sp, #112	; 0x70
 8007da8:	ab1d      	add	r3, sp, #116	; 0x74
 8007daa:	9002      	str	r0, [sp, #8]
 8007dac:	9006      	str	r0, [sp, #24]
 8007dae:	9107      	str	r1, [sp, #28]
 8007db0:	9104      	str	r1, [sp, #16]
 8007db2:	4809      	ldr	r0, [pc, #36]	; (8007dd8 <siprintf+0x38>)
 8007db4:	4909      	ldr	r1, [pc, #36]	; (8007ddc <siprintf+0x3c>)
 8007db6:	cb04      	ldmia	r3!, {r2}
 8007db8:	9105      	str	r1, [sp, #20]
 8007dba:	6800      	ldr	r0, [r0, #0]
 8007dbc:	a902      	add	r1, sp, #8
 8007dbe:	9301      	str	r3, [sp, #4]
 8007dc0:	f000 f870 	bl	8007ea4 <_svfiprintf_r>
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	9a02      	ldr	r2, [sp, #8]
 8007dc8:	7013      	strb	r3, [r2, #0]
 8007dca:	b01c      	add	sp, #112	; 0x70
 8007dcc:	bc08      	pop	{r3}
 8007dce:	b003      	add	sp, #12
 8007dd0:	4718      	bx	r3
 8007dd2:	46c0      	nop			; (mov r8, r8)
 8007dd4:	7fffffff 	.word	0x7fffffff
 8007dd8:	20000028 	.word	0x20000028
 8007ddc:	ffff0208 	.word	0xffff0208

08007de0 <__ssputs_r>:
 8007de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007de2:	688e      	ldr	r6, [r1, #8]
 8007de4:	b085      	sub	sp, #20
 8007de6:	0007      	movs	r7, r0
 8007de8:	000c      	movs	r4, r1
 8007dea:	9203      	str	r2, [sp, #12]
 8007dec:	9301      	str	r3, [sp, #4]
 8007dee:	429e      	cmp	r6, r3
 8007df0:	d83c      	bhi.n	8007e6c <__ssputs_r+0x8c>
 8007df2:	2390      	movs	r3, #144	; 0x90
 8007df4:	898a      	ldrh	r2, [r1, #12]
 8007df6:	00db      	lsls	r3, r3, #3
 8007df8:	421a      	tst	r2, r3
 8007dfa:	d034      	beq.n	8007e66 <__ssputs_r+0x86>
 8007dfc:	6909      	ldr	r1, [r1, #16]
 8007dfe:	6823      	ldr	r3, [r4, #0]
 8007e00:	6960      	ldr	r0, [r4, #20]
 8007e02:	1a5b      	subs	r3, r3, r1
 8007e04:	9302      	str	r3, [sp, #8]
 8007e06:	2303      	movs	r3, #3
 8007e08:	4343      	muls	r3, r0
 8007e0a:	0fdd      	lsrs	r5, r3, #31
 8007e0c:	18ed      	adds	r5, r5, r3
 8007e0e:	9b01      	ldr	r3, [sp, #4]
 8007e10:	9802      	ldr	r0, [sp, #8]
 8007e12:	3301      	adds	r3, #1
 8007e14:	181b      	adds	r3, r3, r0
 8007e16:	106d      	asrs	r5, r5, #1
 8007e18:	42ab      	cmp	r3, r5
 8007e1a:	d900      	bls.n	8007e1e <__ssputs_r+0x3e>
 8007e1c:	001d      	movs	r5, r3
 8007e1e:	0553      	lsls	r3, r2, #21
 8007e20:	d532      	bpl.n	8007e88 <__ssputs_r+0xa8>
 8007e22:	0029      	movs	r1, r5
 8007e24:	0038      	movs	r0, r7
 8007e26:	f000 fb53 	bl	80084d0 <_malloc_r>
 8007e2a:	1e06      	subs	r6, r0, #0
 8007e2c:	d109      	bne.n	8007e42 <__ssputs_r+0x62>
 8007e2e:	230c      	movs	r3, #12
 8007e30:	603b      	str	r3, [r7, #0]
 8007e32:	2340      	movs	r3, #64	; 0x40
 8007e34:	2001      	movs	r0, #1
 8007e36:	89a2      	ldrh	r2, [r4, #12]
 8007e38:	4240      	negs	r0, r0
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	81a3      	strh	r3, [r4, #12]
 8007e3e:	b005      	add	sp, #20
 8007e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e42:	9a02      	ldr	r2, [sp, #8]
 8007e44:	6921      	ldr	r1, [r4, #16]
 8007e46:	f000 faba 	bl	80083be <memcpy>
 8007e4a:	89a3      	ldrh	r3, [r4, #12]
 8007e4c:	4a14      	ldr	r2, [pc, #80]	; (8007ea0 <__ssputs_r+0xc0>)
 8007e4e:	401a      	ands	r2, r3
 8007e50:	2380      	movs	r3, #128	; 0x80
 8007e52:	4313      	orrs	r3, r2
 8007e54:	81a3      	strh	r3, [r4, #12]
 8007e56:	9b02      	ldr	r3, [sp, #8]
 8007e58:	6126      	str	r6, [r4, #16]
 8007e5a:	18f6      	adds	r6, r6, r3
 8007e5c:	6026      	str	r6, [r4, #0]
 8007e5e:	6165      	str	r5, [r4, #20]
 8007e60:	9e01      	ldr	r6, [sp, #4]
 8007e62:	1aed      	subs	r5, r5, r3
 8007e64:	60a5      	str	r5, [r4, #8]
 8007e66:	9b01      	ldr	r3, [sp, #4]
 8007e68:	429e      	cmp	r6, r3
 8007e6a:	d900      	bls.n	8007e6e <__ssputs_r+0x8e>
 8007e6c:	9e01      	ldr	r6, [sp, #4]
 8007e6e:	0032      	movs	r2, r6
 8007e70:	9903      	ldr	r1, [sp, #12]
 8007e72:	6820      	ldr	r0, [r4, #0]
 8007e74:	f000 faac 	bl	80083d0 <memmove>
 8007e78:	68a3      	ldr	r3, [r4, #8]
 8007e7a:	2000      	movs	r0, #0
 8007e7c:	1b9b      	subs	r3, r3, r6
 8007e7e:	60a3      	str	r3, [r4, #8]
 8007e80:	6823      	ldr	r3, [r4, #0]
 8007e82:	199e      	adds	r6, r3, r6
 8007e84:	6026      	str	r6, [r4, #0]
 8007e86:	e7da      	b.n	8007e3e <__ssputs_r+0x5e>
 8007e88:	002a      	movs	r2, r5
 8007e8a:	0038      	movs	r0, r7
 8007e8c:	f000 fb96 	bl	80085bc <_realloc_r>
 8007e90:	1e06      	subs	r6, r0, #0
 8007e92:	d1e0      	bne.n	8007e56 <__ssputs_r+0x76>
 8007e94:	0038      	movs	r0, r7
 8007e96:	6921      	ldr	r1, [r4, #16]
 8007e98:	f000 faae 	bl	80083f8 <_free_r>
 8007e9c:	e7c7      	b.n	8007e2e <__ssputs_r+0x4e>
 8007e9e:	46c0      	nop			; (mov r8, r8)
 8007ea0:	fffffb7f 	.word	0xfffffb7f

08007ea4 <_svfiprintf_r>:
 8007ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ea6:	b0a1      	sub	sp, #132	; 0x84
 8007ea8:	9003      	str	r0, [sp, #12]
 8007eaa:	001d      	movs	r5, r3
 8007eac:	898b      	ldrh	r3, [r1, #12]
 8007eae:	000f      	movs	r7, r1
 8007eb0:	0016      	movs	r6, r2
 8007eb2:	061b      	lsls	r3, r3, #24
 8007eb4:	d511      	bpl.n	8007eda <_svfiprintf_r+0x36>
 8007eb6:	690b      	ldr	r3, [r1, #16]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d10e      	bne.n	8007eda <_svfiprintf_r+0x36>
 8007ebc:	2140      	movs	r1, #64	; 0x40
 8007ebe:	f000 fb07 	bl	80084d0 <_malloc_r>
 8007ec2:	6038      	str	r0, [r7, #0]
 8007ec4:	6138      	str	r0, [r7, #16]
 8007ec6:	2800      	cmp	r0, #0
 8007ec8:	d105      	bne.n	8007ed6 <_svfiprintf_r+0x32>
 8007eca:	230c      	movs	r3, #12
 8007ecc:	9a03      	ldr	r2, [sp, #12]
 8007ece:	3801      	subs	r0, #1
 8007ed0:	6013      	str	r3, [r2, #0]
 8007ed2:	b021      	add	sp, #132	; 0x84
 8007ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ed6:	2340      	movs	r3, #64	; 0x40
 8007ed8:	617b      	str	r3, [r7, #20]
 8007eda:	2300      	movs	r3, #0
 8007edc:	ac08      	add	r4, sp, #32
 8007ede:	6163      	str	r3, [r4, #20]
 8007ee0:	3320      	adds	r3, #32
 8007ee2:	7663      	strb	r3, [r4, #25]
 8007ee4:	3310      	adds	r3, #16
 8007ee6:	76a3      	strb	r3, [r4, #26]
 8007ee8:	9507      	str	r5, [sp, #28]
 8007eea:	0035      	movs	r5, r6
 8007eec:	782b      	ldrb	r3, [r5, #0]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d001      	beq.n	8007ef6 <_svfiprintf_r+0x52>
 8007ef2:	2b25      	cmp	r3, #37	; 0x25
 8007ef4:	d147      	bne.n	8007f86 <_svfiprintf_r+0xe2>
 8007ef6:	1bab      	subs	r3, r5, r6
 8007ef8:	9305      	str	r3, [sp, #20]
 8007efa:	42b5      	cmp	r5, r6
 8007efc:	d00c      	beq.n	8007f18 <_svfiprintf_r+0x74>
 8007efe:	0032      	movs	r2, r6
 8007f00:	0039      	movs	r1, r7
 8007f02:	9803      	ldr	r0, [sp, #12]
 8007f04:	f7ff ff6c 	bl	8007de0 <__ssputs_r>
 8007f08:	1c43      	adds	r3, r0, #1
 8007f0a:	d100      	bne.n	8007f0e <_svfiprintf_r+0x6a>
 8007f0c:	e0ae      	b.n	800806c <_svfiprintf_r+0x1c8>
 8007f0e:	6962      	ldr	r2, [r4, #20]
 8007f10:	9b05      	ldr	r3, [sp, #20]
 8007f12:	4694      	mov	ip, r2
 8007f14:	4463      	add	r3, ip
 8007f16:	6163      	str	r3, [r4, #20]
 8007f18:	782b      	ldrb	r3, [r5, #0]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d100      	bne.n	8007f20 <_svfiprintf_r+0x7c>
 8007f1e:	e0a5      	b.n	800806c <_svfiprintf_r+0x1c8>
 8007f20:	2201      	movs	r2, #1
 8007f22:	2300      	movs	r3, #0
 8007f24:	4252      	negs	r2, r2
 8007f26:	6062      	str	r2, [r4, #4]
 8007f28:	a904      	add	r1, sp, #16
 8007f2a:	3254      	adds	r2, #84	; 0x54
 8007f2c:	1852      	adds	r2, r2, r1
 8007f2e:	1c6e      	adds	r6, r5, #1
 8007f30:	6023      	str	r3, [r4, #0]
 8007f32:	60e3      	str	r3, [r4, #12]
 8007f34:	60a3      	str	r3, [r4, #8]
 8007f36:	7013      	strb	r3, [r2, #0]
 8007f38:	65a3      	str	r3, [r4, #88]	; 0x58
 8007f3a:	2205      	movs	r2, #5
 8007f3c:	7831      	ldrb	r1, [r6, #0]
 8007f3e:	4854      	ldr	r0, [pc, #336]	; (8008090 <_svfiprintf_r+0x1ec>)
 8007f40:	f000 fa32 	bl	80083a8 <memchr>
 8007f44:	1c75      	adds	r5, r6, #1
 8007f46:	2800      	cmp	r0, #0
 8007f48:	d11f      	bne.n	8007f8a <_svfiprintf_r+0xe6>
 8007f4a:	6822      	ldr	r2, [r4, #0]
 8007f4c:	06d3      	lsls	r3, r2, #27
 8007f4e:	d504      	bpl.n	8007f5a <_svfiprintf_r+0xb6>
 8007f50:	2353      	movs	r3, #83	; 0x53
 8007f52:	a904      	add	r1, sp, #16
 8007f54:	185b      	adds	r3, r3, r1
 8007f56:	2120      	movs	r1, #32
 8007f58:	7019      	strb	r1, [r3, #0]
 8007f5a:	0713      	lsls	r3, r2, #28
 8007f5c:	d504      	bpl.n	8007f68 <_svfiprintf_r+0xc4>
 8007f5e:	2353      	movs	r3, #83	; 0x53
 8007f60:	a904      	add	r1, sp, #16
 8007f62:	185b      	adds	r3, r3, r1
 8007f64:	212b      	movs	r1, #43	; 0x2b
 8007f66:	7019      	strb	r1, [r3, #0]
 8007f68:	7833      	ldrb	r3, [r6, #0]
 8007f6a:	2b2a      	cmp	r3, #42	; 0x2a
 8007f6c:	d016      	beq.n	8007f9c <_svfiprintf_r+0xf8>
 8007f6e:	0035      	movs	r5, r6
 8007f70:	2100      	movs	r1, #0
 8007f72:	200a      	movs	r0, #10
 8007f74:	68e3      	ldr	r3, [r4, #12]
 8007f76:	782a      	ldrb	r2, [r5, #0]
 8007f78:	1c6e      	adds	r6, r5, #1
 8007f7a:	3a30      	subs	r2, #48	; 0x30
 8007f7c:	2a09      	cmp	r2, #9
 8007f7e:	d94e      	bls.n	800801e <_svfiprintf_r+0x17a>
 8007f80:	2900      	cmp	r1, #0
 8007f82:	d111      	bne.n	8007fa8 <_svfiprintf_r+0x104>
 8007f84:	e017      	b.n	8007fb6 <_svfiprintf_r+0x112>
 8007f86:	3501      	adds	r5, #1
 8007f88:	e7b0      	b.n	8007eec <_svfiprintf_r+0x48>
 8007f8a:	4b41      	ldr	r3, [pc, #260]	; (8008090 <_svfiprintf_r+0x1ec>)
 8007f8c:	6822      	ldr	r2, [r4, #0]
 8007f8e:	1ac0      	subs	r0, r0, r3
 8007f90:	2301      	movs	r3, #1
 8007f92:	4083      	lsls	r3, r0
 8007f94:	4313      	orrs	r3, r2
 8007f96:	002e      	movs	r6, r5
 8007f98:	6023      	str	r3, [r4, #0]
 8007f9a:	e7ce      	b.n	8007f3a <_svfiprintf_r+0x96>
 8007f9c:	9b07      	ldr	r3, [sp, #28]
 8007f9e:	1d19      	adds	r1, r3, #4
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	9107      	str	r1, [sp, #28]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	db01      	blt.n	8007fac <_svfiprintf_r+0x108>
 8007fa8:	930b      	str	r3, [sp, #44]	; 0x2c
 8007faa:	e004      	b.n	8007fb6 <_svfiprintf_r+0x112>
 8007fac:	425b      	negs	r3, r3
 8007fae:	60e3      	str	r3, [r4, #12]
 8007fb0:	2302      	movs	r3, #2
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	6023      	str	r3, [r4, #0]
 8007fb6:	782b      	ldrb	r3, [r5, #0]
 8007fb8:	2b2e      	cmp	r3, #46	; 0x2e
 8007fba:	d10a      	bne.n	8007fd2 <_svfiprintf_r+0x12e>
 8007fbc:	786b      	ldrb	r3, [r5, #1]
 8007fbe:	2b2a      	cmp	r3, #42	; 0x2a
 8007fc0:	d135      	bne.n	800802e <_svfiprintf_r+0x18a>
 8007fc2:	9b07      	ldr	r3, [sp, #28]
 8007fc4:	3502      	adds	r5, #2
 8007fc6:	1d1a      	adds	r2, r3, #4
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	9207      	str	r2, [sp, #28]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	db2b      	blt.n	8008028 <_svfiprintf_r+0x184>
 8007fd0:	9309      	str	r3, [sp, #36]	; 0x24
 8007fd2:	4e30      	ldr	r6, [pc, #192]	; (8008094 <_svfiprintf_r+0x1f0>)
 8007fd4:	2203      	movs	r2, #3
 8007fd6:	0030      	movs	r0, r6
 8007fd8:	7829      	ldrb	r1, [r5, #0]
 8007fda:	f000 f9e5 	bl	80083a8 <memchr>
 8007fde:	2800      	cmp	r0, #0
 8007fe0:	d006      	beq.n	8007ff0 <_svfiprintf_r+0x14c>
 8007fe2:	2340      	movs	r3, #64	; 0x40
 8007fe4:	1b80      	subs	r0, r0, r6
 8007fe6:	4083      	lsls	r3, r0
 8007fe8:	6822      	ldr	r2, [r4, #0]
 8007fea:	3501      	adds	r5, #1
 8007fec:	4313      	orrs	r3, r2
 8007fee:	6023      	str	r3, [r4, #0]
 8007ff0:	7829      	ldrb	r1, [r5, #0]
 8007ff2:	2206      	movs	r2, #6
 8007ff4:	4828      	ldr	r0, [pc, #160]	; (8008098 <_svfiprintf_r+0x1f4>)
 8007ff6:	1c6e      	adds	r6, r5, #1
 8007ff8:	7621      	strb	r1, [r4, #24]
 8007ffa:	f000 f9d5 	bl	80083a8 <memchr>
 8007ffe:	2800      	cmp	r0, #0
 8008000:	d03c      	beq.n	800807c <_svfiprintf_r+0x1d8>
 8008002:	4b26      	ldr	r3, [pc, #152]	; (800809c <_svfiprintf_r+0x1f8>)
 8008004:	2b00      	cmp	r3, #0
 8008006:	d125      	bne.n	8008054 <_svfiprintf_r+0x1b0>
 8008008:	2207      	movs	r2, #7
 800800a:	9b07      	ldr	r3, [sp, #28]
 800800c:	3307      	adds	r3, #7
 800800e:	4393      	bics	r3, r2
 8008010:	3308      	adds	r3, #8
 8008012:	9307      	str	r3, [sp, #28]
 8008014:	6963      	ldr	r3, [r4, #20]
 8008016:	9a04      	ldr	r2, [sp, #16]
 8008018:	189b      	adds	r3, r3, r2
 800801a:	6163      	str	r3, [r4, #20]
 800801c:	e765      	b.n	8007eea <_svfiprintf_r+0x46>
 800801e:	4343      	muls	r3, r0
 8008020:	0035      	movs	r5, r6
 8008022:	2101      	movs	r1, #1
 8008024:	189b      	adds	r3, r3, r2
 8008026:	e7a6      	b.n	8007f76 <_svfiprintf_r+0xd2>
 8008028:	2301      	movs	r3, #1
 800802a:	425b      	negs	r3, r3
 800802c:	e7d0      	b.n	8007fd0 <_svfiprintf_r+0x12c>
 800802e:	2300      	movs	r3, #0
 8008030:	200a      	movs	r0, #10
 8008032:	001a      	movs	r2, r3
 8008034:	3501      	adds	r5, #1
 8008036:	6063      	str	r3, [r4, #4]
 8008038:	7829      	ldrb	r1, [r5, #0]
 800803a:	1c6e      	adds	r6, r5, #1
 800803c:	3930      	subs	r1, #48	; 0x30
 800803e:	2909      	cmp	r1, #9
 8008040:	d903      	bls.n	800804a <_svfiprintf_r+0x1a6>
 8008042:	2b00      	cmp	r3, #0
 8008044:	d0c5      	beq.n	8007fd2 <_svfiprintf_r+0x12e>
 8008046:	9209      	str	r2, [sp, #36]	; 0x24
 8008048:	e7c3      	b.n	8007fd2 <_svfiprintf_r+0x12e>
 800804a:	4342      	muls	r2, r0
 800804c:	0035      	movs	r5, r6
 800804e:	2301      	movs	r3, #1
 8008050:	1852      	adds	r2, r2, r1
 8008052:	e7f1      	b.n	8008038 <_svfiprintf_r+0x194>
 8008054:	ab07      	add	r3, sp, #28
 8008056:	9300      	str	r3, [sp, #0]
 8008058:	003a      	movs	r2, r7
 800805a:	0021      	movs	r1, r4
 800805c:	4b10      	ldr	r3, [pc, #64]	; (80080a0 <_svfiprintf_r+0x1fc>)
 800805e:	9803      	ldr	r0, [sp, #12]
 8008060:	e000      	b.n	8008064 <_svfiprintf_r+0x1c0>
 8008062:	bf00      	nop
 8008064:	9004      	str	r0, [sp, #16]
 8008066:	9b04      	ldr	r3, [sp, #16]
 8008068:	3301      	adds	r3, #1
 800806a:	d1d3      	bne.n	8008014 <_svfiprintf_r+0x170>
 800806c:	89bb      	ldrh	r3, [r7, #12]
 800806e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008070:	065b      	lsls	r3, r3, #25
 8008072:	d400      	bmi.n	8008076 <_svfiprintf_r+0x1d2>
 8008074:	e72d      	b.n	8007ed2 <_svfiprintf_r+0x2e>
 8008076:	2001      	movs	r0, #1
 8008078:	4240      	negs	r0, r0
 800807a:	e72a      	b.n	8007ed2 <_svfiprintf_r+0x2e>
 800807c:	ab07      	add	r3, sp, #28
 800807e:	9300      	str	r3, [sp, #0]
 8008080:	003a      	movs	r2, r7
 8008082:	0021      	movs	r1, r4
 8008084:	4b06      	ldr	r3, [pc, #24]	; (80080a0 <_svfiprintf_r+0x1fc>)
 8008086:	9803      	ldr	r0, [sp, #12]
 8008088:	f000 f87c 	bl	8008184 <_printf_i>
 800808c:	e7ea      	b.n	8008064 <_svfiprintf_r+0x1c0>
 800808e:	46c0      	nop			; (mov r8, r8)
 8008090:	0800876c 	.word	0x0800876c
 8008094:	08008772 	.word	0x08008772
 8008098:	08008776 	.word	0x08008776
 800809c:	00000000 	.word	0x00000000
 80080a0:	08007de1 	.word	0x08007de1

080080a4 <_printf_common>:
 80080a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080a6:	0015      	movs	r5, r2
 80080a8:	9301      	str	r3, [sp, #4]
 80080aa:	688a      	ldr	r2, [r1, #8]
 80080ac:	690b      	ldr	r3, [r1, #16]
 80080ae:	000c      	movs	r4, r1
 80080b0:	9000      	str	r0, [sp, #0]
 80080b2:	4293      	cmp	r3, r2
 80080b4:	da00      	bge.n	80080b8 <_printf_common+0x14>
 80080b6:	0013      	movs	r3, r2
 80080b8:	0022      	movs	r2, r4
 80080ba:	602b      	str	r3, [r5, #0]
 80080bc:	3243      	adds	r2, #67	; 0x43
 80080be:	7812      	ldrb	r2, [r2, #0]
 80080c0:	2a00      	cmp	r2, #0
 80080c2:	d001      	beq.n	80080c8 <_printf_common+0x24>
 80080c4:	3301      	adds	r3, #1
 80080c6:	602b      	str	r3, [r5, #0]
 80080c8:	6823      	ldr	r3, [r4, #0]
 80080ca:	069b      	lsls	r3, r3, #26
 80080cc:	d502      	bpl.n	80080d4 <_printf_common+0x30>
 80080ce:	682b      	ldr	r3, [r5, #0]
 80080d0:	3302      	adds	r3, #2
 80080d2:	602b      	str	r3, [r5, #0]
 80080d4:	6822      	ldr	r2, [r4, #0]
 80080d6:	2306      	movs	r3, #6
 80080d8:	0017      	movs	r7, r2
 80080da:	401f      	ands	r7, r3
 80080dc:	421a      	tst	r2, r3
 80080de:	d027      	beq.n	8008130 <_printf_common+0x8c>
 80080e0:	0023      	movs	r3, r4
 80080e2:	3343      	adds	r3, #67	; 0x43
 80080e4:	781b      	ldrb	r3, [r3, #0]
 80080e6:	1e5a      	subs	r2, r3, #1
 80080e8:	4193      	sbcs	r3, r2
 80080ea:	6822      	ldr	r2, [r4, #0]
 80080ec:	0692      	lsls	r2, r2, #26
 80080ee:	d430      	bmi.n	8008152 <_printf_common+0xae>
 80080f0:	0022      	movs	r2, r4
 80080f2:	9901      	ldr	r1, [sp, #4]
 80080f4:	9800      	ldr	r0, [sp, #0]
 80080f6:	9e08      	ldr	r6, [sp, #32]
 80080f8:	3243      	adds	r2, #67	; 0x43
 80080fa:	47b0      	blx	r6
 80080fc:	1c43      	adds	r3, r0, #1
 80080fe:	d025      	beq.n	800814c <_printf_common+0xa8>
 8008100:	2306      	movs	r3, #6
 8008102:	6820      	ldr	r0, [r4, #0]
 8008104:	682a      	ldr	r2, [r5, #0]
 8008106:	68e1      	ldr	r1, [r4, #12]
 8008108:	2500      	movs	r5, #0
 800810a:	4003      	ands	r3, r0
 800810c:	2b04      	cmp	r3, #4
 800810e:	d103      	bne.n	8008118 <_printf_common+0x74>
 8008110:	1a8d      	subs	r5, r1, r2
 8008112:	43eb      	mvns	r3, r5
 8008114:	17db      	asrs	r3, r3, #31
 8008116:	401d      	ands	r5, r3
 8008118:	68a3      	ldr	r3, [r4, #8]
 800811a:	6922      	ldr	r2, [r4, #16]
 800811c:	4293      	cmp	r3, r2
 800811e:	dd01      	ble.n	8008124 <_printf_common+0x80>
 8008120:	1a9b      	subs	r3, r3, r2
 8008122:	18ed      	adds	r5, r5, r3
 8008124:	2700      	movs	r7, #0
 8008126:	42bd      	cmp	r5, r7
 8008128:	d120      	bne.n	800816c <_printf_common+0xc8>
 800812a:	2000      	movs	r0, #0
 800812c:	e010      	b.n	8008150 <_printf_common+0xac>
 800812e:	3701      	adds	r7, #1
 8008130:	68e3      	ldr	r3, [r4, #12]
 8008132:	682a      	ldr	r2, [r5, #0]
 8008134:	1a9b      	subs	r3, r3, r2
 8008136:	42bb      	cmp	r3, r7
 8008138:	ddd2      	ble.n	80080e0 <_printf_common+0x3c>
 800813a:	0022      	movs	r2, r4
 800813c:	2301      	movs	r3, #1
 800813e:	9901      	ldr	r1, [sp, #4]
 8008140:	9800      	ldr	r0, [sp, #0]
 8008142:	9e08      	ldr	r6, [sp, #32]
 8008144:	3219      	adds	r2, #25
 8008146:	47b0      	blx	r6
 8008148:	1c43      	adds	r3, r0, #1
 800814a:	d1f0      	bne.n	800812e <_printf_common+0x8a>
 800814c:	2001      	movs	r0, #1
 800814e:	4240      	negs	r0, r0
 8008150:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008152:	2030      	movs	r0, #48	; 0x30
 8008154:	18e1      	adds	r1, r4, r3
 8008156:	3143      	adds	r1, #67	; 0x43
 8008158:	7008      	strb	r0, [r1, #0]
 800815a:	0021      	movs	r1, r4
 800815c:	1c5a      	adds	r2, r3, #1
 800815e:	3145      	adds	r1, #69	; 0x45
 8008160:	7809      	ldrb	r1, [r1, #0]
 8008162:	18a2      	adds	r2, r4, r2
 8008164:	3243      	adds	r2, #67	; 0x43
 8008166:	3302      	adds	r3, #2
 8008168:	7011      	strb	r1, [r2, #0]
 800816a:	e7c1      	b.n	80080f0 <_printf_common+0x4c>
 800816c:	0022      	movs	r2, r4
 800816e:	2301      	movs	r3, #1
 8008170:	9901      	ldr	r1, [sp, #4]
 8008172:	9800      	ldr	r0, [sp, #0]
 8008174:	9e08      	ldr	r6, [sp, #32]
 8008176:	321a      	adds	r2, #26
 8008178:	47b0      	blx	r6
 800817a:	1c43      	adds	r3, r0, #1
 800817c:	d0e6      	beq.n	800814c <_printf_common+0xa8>
 800817e:	3701      	adds	r7, #1
 8008180:	e7d1      	b.n	8008126 <_printf_common+0x82>
	...

08008184 <_printf_i>:
 8008184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008186:	b08b      	sub	sp, #44	; 0x2c
 8008188:	9206      	str	r2, [sp, #24]
 800818a:	000a      	movs	r2, r1
 800818c:	3243      	adds	r2, #67	; 0x43
 800818e:	9307      	str	r3, [sp, #28]
 8008190:	9005      	str	r0, [sp, #20]
 8008192:	9204      	str	r2, [sp, #16]
 8008194:	7e0a      	ldrb	r2, [r1, #24]
 8008196:	000c      	movs	r4, r1
 8008198:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800819a:	2a78      	cmp	r2, #120	; 0x78
 800819c:	d807      	bhi.n	80081ae <_printf_i+0x2a>
 800819e:	2a62      	cmp	r2, #98	; 0x62
 80081a0:	d809      	bhi.n	80081b6 <_printf_i+0x32>
 80081a2:	2a00      	cmp	r2, #0
 80081a4:	d100      	bne.n	80081a8 <_printf_i+0x24>
 80081a6:	e0c1      	b.n	800832c <_printf_i+0x1a8>
 80081a8:	2a58      	cmp	r2, #88	; 0x58
 80081aa:	d100      	bne.n	80081ae <_printf_i+0x2a>
 80081ac:	e08c      	b.n	80082c8 <_printf_i+0x144>
 80081ae:	0026      	movs	r6, r4
 80081b0:	3642      	adds	r6, #66	; 0x42
 80081b2:	7032      	strb	r2, [r6, #0]
 80081b4:	e022      	b.n	80081fc <_printf_i+0x78>
 80081b6:	0010      	movs	r0, r2
 80081b8:	3863      	subs	r0, #99	; 0x63
 80081ba:	2815      	cmp	r0, #21
 80081bc:	d8f7      	bhi.n	80081ae <_printf_i+0x2a>
 80081be:	f7f7 ffab 	bl	8000118 <__gnu_thumb1_case_shi>
 80081c2:	0016      	.short	0x0016
 80081c4:	fff6001f 	.word	0xfff6001f
 80081c8:	fff6fff6 	.word	0xfff6fff6
 80081cc:	001ffff6 	.word	0x001ffff6
 80081d0:	fff6fff6 	.word	0xfff6fff6
 80081d4:	fff6fff6 	.word	0xfff6fff6
 80081d8:	003600a8 	.word	0x003600a8
 80081dc:	fff6009a 	.word	0xfff6009a
 80081e0:	00b9fff6 	.word	0x00b9fff6
 80081e4:	0036fff6 	.word	0x0036fff6
 80081e8:	fff6fff6 	.word	0xfff6fff6
 80081ec:	009e      	.short	0x009e
 80081ee:	0026      	movs	r6, r4
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	3642      	adds	r6, #66	; 0x42
 80081f4:	1d11      	adds	r1, r2, #4
 80081f6:	6019      	str	r1, [r3, #0]
 80081f8:	6813      	ldr	r3, [r2, #0]
 80081fa:	7033      	strb	r3, [r6, #0]
 80081fc:	2301      	movs	r3, #1
 80081fe:	e0a7      	b.n	8008350 <_printf_i+0x1cc>
 8008200:	6808      	ldr	r0, [r1, #0]
 8008202:	6819      	ldr	r1, [r3, #0]
 8008204:	1d0a      	adds	r2, r1, #4
 8008206:	0605      	lsls	r5, r0, #24
 8008208:	d50b      	bpl.n	8008222 <_printf_i+0x9e>
 800820a:	680d      	ldr	r5, [r1, #0]
 800820c:	601a      	str	r2, [r3, #0]
 800820e:	2d00      	cmp	r5, #0
 8008210:	da03      	bge.n	800821a <_printf_i+0x96>
 8008212:	232d      	movs	r3, #45	; 0x2d
 8008214:	9a04      	ldr	r2, [sp, #16]
 8008216:	426d      	negs	r5, r5
 8008218:	7013      	strb	r3, [r2, #0]
 800821a:	4b61      	ldr	r3, [pc, #388]	; (80083a0 <_printf_i+0x21c>)
 800821c:	270a      	movs	r7, #10
 800821e:	9303      	str	r3, [sp, #12]
 8008220:	e01b      	b.n	800825a <_printf_i+0xd6>
 8008222:	680d      	ldr	r5, [r1, #0]
 8008224:	601a      	str	r2, [r3, #0]
 8008226:	0641      	lsls	r1, r0, #25
 8008228:	d5f1      	bpl.n	800820e <_printf_i+0x8a>
 800822a:	b22d      	sxth	r5, r5
 800822c:	e7ef      	b.n	800820e <_printf_i+0x8a>
 800822e:	680d      	ldr	r5, [r1, #0]
 8008230:	6819      	ldr	r1, [r3, #0]
 8008232:	1d08      	adds	r0, r1, #4
 8008234:	6018      	str	r0, [r3, #0]
 8008236:	062e      	lsls	r6, r5, #24
 8008238:	d501      	bpl.n	800823e <_printf_i+0xba>
 800823a:	680d      	ldr	r5, [r1, #0]
 800823c:	e003      	b.n	8008246 <_printf_i+0xc2>
 800823e:	066d      	lsls	r5, r5, #25
 8008240:	d5fb      	bpl.n	800823a <_printf_i+0xb6>
 8008242:	680d      	ldr	r5, [r1, #0]
 8008244:	b2ad      	uxth	r5, r5
 8008246:	4b56      	ldr	r3, [pc, #344]	; (80083a0 <_printf_i+0x21c>)
 8008248:	2708      	movs	r7, #8
 800824a:	9303      	str	r3, [sp, #12]
 800824c:	2a6f      	cmp	r2, #111	; 0x6f
 800824e:	d000      	beq.n	8008252 <_printf_i+0xce>
 8008250:	3702      	adds	r7, #2
 8008252:	0023      	movs	r3, r4
 8008254:	2200      	movs	r2, #0
 8008256:	3343      	adds	r3, #67	; 0x43
 8008258:	701a      	strb	r2, [r3, #0]
 800825a:	6863      	ldr	r3, [r4, #4]
 800825c:	60a3      	str	r3, [r4, #8]
 800825e:	2b00      	cmp	r3, #0
 8008260:	db03      	blt.n	800826a <_printf_i+0xe6>
 8008262:	2204      	movs	r2, #4
 8008264:	6821      	ldr	r1, [r4, #0]
 8008266:	4391      	bics	r1, r2
 8008268:	6021      	str	r1, [r4, #0]
 800826a:	2d00      	cmp	r5, #0
 800826c:	d102      	bne.n	8008274 <_printf_i+0xf0>
 800826e:	9e04      	ldr	r6, [sp, #16]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d00c      	beq.n	800828e <_printf_i+0x10a>
 8008274:	9e04      	ldr	r6, [sp, #16]
 8008276:	0028      	movs	r0, r5
 8008278:	0039      	movs	r1, r7
 800827a:	f7f7 ffdd 	bl	8000238 <__aeabi_uidivmod>
 800827e:	9b03      	ldr	r3, [sp, #12]
 8008280:	3e01      	subs	r6, #1
 8008282:	5c5b      	ldrb	r3, [r3, r1]
 8008284:	7033      	strb	r3, [r6, #0]
 8008286:	002b      	movs	r3, r5
 8008288:	0005      	movs	r5, r0
 800828a:	429f      	cmp	r7, r3
 800828c:	d9f3      	bls.n	8008276 <_printf_i+0xf2>
 800828e:	2f08      	cmp	r7, #8
 8008290:	d109      	bne.n	80082a6 <_printf_i+0x122>
 8008292:	6823      	ldr	r3, [r4, #0]
 8008294:	07db      	lsls	r3, r3, #31
 8008296:	d506      	bpl.n	80082a6 <_printf_i+0x122>
 8008298:	6863      	ldr	r3, [r4, #4]
 800829a:	6922      	ldr	r2, [r4, #16]
 800829c:	4293      	cmp	r3, r2
 800829e:	dc02      	bgt.n	80082a6 <_printf_i+0x122>
 80082a0:	2330      	movs	r3, #48	; 0x30
 80082a2:	3e01      	subs	r6, #1
 80082a4:	7033      	strb	r3, [r6, #0]
 80082a6:	9b04      	ldr	r3, [sp, #16]
 80082a8:	1b9b      	subs	r3, r3, r6
 80082aa:	6123      	str	r3, [r4, #16]
 80082ac:	9b07      	ldr	r3, [sp, #28]
 80082ae:	0021      	movs	r1, r4
 80082b0:	9300      	str	r3, [sp, #0]
 80082b2:	9805      	ldr	r0, [sp, #20]
 80082b4:	9b06      	ldr	r3, [sp, #24]
 80082b6:	aa09      	add	r2, sp, #36	; 0x24
 80082b8:	f7ff fef4 	bl	80080a4 <_printf_common>
 80082bc:	1c43      	adds	r3, r0, #1
 80082be:	d14c      	bne.n	800835a <_printf_i+0x1d6>
 80082c0:	2001      	movs	r0, #1
 80082c2:	4240      	negs	r0, r0
 80082c4:	b00b      	add	sp, #44	; 0x2c
 80082c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082c8:	3145      	adds	r1, #69	; 0x45
 80082ca:	700a      	strb	r2, [r1, #0]
 80082cc:	4a34      	ldr	r2, [pc, #208]	; (80083a0 <_printf_i+0x21c>)
 80082ce:	9203      	str	r2, [sp, #12]
 80082d0:	681a      	ldr	r2, [r3, #0]
 80082d2:	6821      	ldr	r1, [r4, #0]
 80082d4:	ca20      	ldmia	r2!, {r5}
 80082d6:	601a      	str	r2, [r3, #0]
 80082d8:	0608      	lsls	r0, r1, #24
 80082da:	d516      	bpl.n	800830a <_printf_i+0x186>
 80082dc:	07cb      	lsls	r3, r1, #31
 80082de:	d502      	bpl.n	80082e6 <_printf_i+0x162>
 80082e0:	2320      	movs	r3, #32
 80082e2:	4319      	orrs	r1, r3
 80082e4:	6021      	str	r1, [r4, #0]
 80082e6:	2710      	movs	r7, #16
 80082e8:	2d00      	cmp	r5, #0
 80082ea:	d1b2      	bne.n	8008252 <_printf_i+0xce>
 80082ec:	2320      	movs	r3, #32
 80082ee:	6822      	ldr	r2, [r4, #0]
 80082f0:	439a      	bics	r2, r3
 80082f2:	6022      	str	r2, [r4, #0]
 80082f4:	e7ad      	b.n	8008252 <_printf_i+0xce>
 80082f6:	2220      	movs	r2, #32
 80082f8:	6809      	ldr	r1, [r1, #0]
 80082fa:	430a      	orrs	r2, r1
 80082fc:	6022      	str	r2, [r4, #0]
 80082fe:	0022      	movs	r2, r4
 8008300:	2178      	movs	r1, #120	; 0x78
 8008302:	3245      	adds	r2, #69	; 0x45
 8008304:	7011      	strb	r1, [r2, #0]
 8008306:	4a27      	ldr	r2, [pc, #156]	; (80083a4 <_printf_i+0x220>)
 8008308:	e7e1      	b.n	80082ce <_printf_i+0x14a>
 800830a:	0648      	lsls	r0, r1, #25
 800830c:	d5e6      	bpl.n	80082dc <_printf_i+0x158>
 800830e:	b2ad      	uxth	r5, r5
 8008310:	e7e4      	b.n	80082dc <_printf_i+0x158>
 8008312:	681a      	ldr	r2, [r3, #0]
 8008314:	680d      	ldr	r5, [r1, #0]
 8008316:	1d10      	adds	r0, r2, #4
 8008318:	6949      	ldr	r1, [r1, #20]
 800831a:	6018      	str	r0, [r3, #0]
 800831c:	6813      	ldr	r3, [r2, #0]
 800831e:	062e      	lsls	r6, r5, #24
 8008320:	d501      	bpl.n	8008326 <_printf_i+0x1a2>
 8008322:	6019      	str	r1, [r3, #0]
 8008324:	e002      	b.n	800832c <_printf_i+0x1a8>
 8008326:	066d      	lsls	r5, r5, #25
 8008328:	d5fb      	bpl.n	8008322 <_printf_i+0x19e>
 800832a:	8019      	strh	r1, [r3, #0]
 800832c:	2300      	movs	r3, #0
 800832e:	9e04      	ldr	r6, [sp, #16]
 8008330:	6123      	str	r3, [r4, #16]
 8008332:	e7bb      	b.n	80082ac <_printf_i+0x128>
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	1d11      	adds	r1, r2, #4
 8008338:	6019      	str	r1, [r3, #0]
 800833a:	6816      	ldr	r6, [r2, #0]
 800833c:	2100      	movs	r1, #0
 800833e:	0030      	movs	r0, r6
 8008340:	6862      	ldr	r2, [r4, #4]
 8008342:	f000 f831 	bl	80083a8 <memchr>
 8008346:	2800      	cmp	r0, #0
 8008348:	d001      	beq.n	800834e <_printf_i+0x1ca>
 800834a:	1b80      	subs	r0, r0, r6
 800834c:	6060      	str	r0, [r4, #4]
 800834e:	6863      	ldr	r3, [r4, #4]
 8008350:	6123      	str	r3, [r4, #16]
 8008352:	2300      	movs	r3, #0
 8008354:	9a04      	ldr	r2, [sp, #16]
 8008356:	7013      	strb	r3, [r2, #0]
 8008358:	e7a8      	b.n	80082ac <_printf_i+0x128>
 800835a:	6923      	ldr	r3, [r4, #16]
 800835c:	0032      	movs	r2, r6
 800835e:	9906      	ldr	r1, [sp, #24]
 8008360:	9805      	ldr	r0, [sp, #20]
 8008362:	9d07      	ldr	r5, [sp, #28]
 8008364:	47a8      	blx	r5
 8008366:	1c43      	adds	r3, r0, #1
 8008368:	d0aa      	beq.n	80082c0 <_printf_i+0x13c>
 800836a:	6823      	ldr	r3, [r4, #0]
 800836c:	079b      	lsls	r3, r3, #30
 800836e:	d415      	bmi.n	800839c <_printf_i+0x218>
 8008370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008372:	68e0      	ldr	r0, [r4, #12]
 8008374:	4298      	cmp	r0, r3
 8008376:	daa5      	bge.n	80082c4 <_printf_i+0x140>
 8008378:	0018      	movs	r0, r3
 800837a:	e7a3      	b.n	80082c4 <_printf_i+0x140>
 800837c:	0022      	movs	r2, r4
 800837e:	2301      	movs	r3, #1
 8008380:	9906      	ldr	r1, [sp, #24]
 8008382:	9805      	ldr	r0, [sp, #20]
 8008384:	9e07      	ldr	r6, [sp, #28]
 8008386:	3219      	adds	r2, #25
 8008388:	47b0      	blx	r6
 800838a:	1c43      	adds	r3, r0, #1
 800838c:	d098      	beq.n	80082c0 <_printf_i+0x13c>
 800838e:	3501      	adds	r5, #1
 8008390:	68e3      	ldr	r3, [r4, #12]
 8008392:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008394:	1a9b      	subs	r3, r3, r2
 8008396:	42ab      	cmp	r3, r5
 8008398:	dcf0      	bgt.n	800837c <_printf_i+0x1f8>
 800839a:	e7e9      	b.n	8008370 <_printf_i+0x1ec>
 800839c:	2500      	movs	r5, #0
 800839e:	e7f7      	b.n	8008390 <_printf_i+0x20c>
 80083a0:	0800877d 	.word	0x0800877d
 80083a4:	0800878e 	.word	0x0800878e

080083a8 <memchr>:
 80083a8:	b2c9      	uxtb	r1, r1
 80083aa:	1882      	adds	r2, r0, r2
 80083ac:	4290      	cmp	r0, r2
 80083ae:	d101      	bne.n	80083b4 <memchr+0xc>
 80083b0:	2000      	movs	r0, #0
 80083b2:	4770      	bx	lr
 80083b4:	7803      	ldrb	r3, [r0, #0]
 80083b6:	428b      	cmp	r3, r1
 80083b8:	d0fb      	beq.n	80083b2 <memchr+0xa>
 80083ba:	3001      	adds	r0, #1
 80083bc:	e7f6      	b.n	80083ac <memchr+0x4>

080083be <memcpy>:
 80083be:	2300      	movs	r3, #0
 80083c0:	b510      	push	{r4, lr}
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d100      	bne.n	80083c8 <memcpy+0xa>
 80083c6:	bd10      	pop	{r4, pc}
 80083c8:	5ccc      	ldrb	r4, [r1, r3]
 80083ca:	54c4      	strb	r4, [r0, r3]
 80083cc:	3301      	adds	r3, #1
 80083ce:	e7f8      	b.n	80083c2 <memcpy+0x4>

080083d0 <memmove>:
 80083d0:	b510      	push	{r4, lr}
 80083d2:	4288      	cmp	r0, r1
 80083d4:	d902      	bls.n	80083dc <memmove+0xc>
 80083d6:	188b      	adds	r3, r1, r2
 80083d8:	4298      	cmp	r0, r3
 80083da:	d303      	bcc.n	80083e4 <memmove+0x14>
 80083dc:	2300      	movs	r3, #0
 80083de:	e007      	b.n	80083f0 <memmove+0x20>
 80083e0:	5c8b      	ldrb	r3, [r1, r2]
 80083e2:	5483      	strb	r3, [r0, r2]
 80083e4:	3a01      	subs	r2, #1
 80083e6:	d2fb      	bcs.n	80083e0 <memmove+0x10>
 80083e8:	bd10      	pop	{r4, pc}
 80083ea:	5ccc      	ldrb	r4, [r1, r3]
 80083ec:	54c4      	strb	r4, [r0, r3]
 80083ee:	3301      	adds	r3, #1
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d1fa      	bne.n	80083ea <memmove+0x1a>
 80083f4:	e7f8      	b.n	80083e8 <memmove+0x18>
	...

080083f8 <_free_r>:
 80083f8:	b570      	push	{r4, r5, r6, lr}
 80083fa:	0005      	movs	r5, r0
 80083fc:	2900      	cmp	r1, #0
 80083fe:	d010      	beq.n	8008422 <_free_r+0x2a>
 8008400:	1f0c      	subs	r4, r1, #4
 8008402:	6823      	ldr	r3, [r4, #0]
 8008404:	2b00      	cmp	r3, #0
 8008406:	da00      	bge.n	800840a <_free_r+0x12>
 8008408:	18e4      	adds	r4, r4, r3
 800840a:	0028      	movs	r0, r5
 800840c:	f000 f918 	bl	8008640 <__malloc_lock>
 8008410:	4a1d      	ldr	r2, [pc, #116]	; (8008488 <_free_r+0x90>)
 8008412:	6813      	ldr	r3, [r2, #0]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d105      	bne.n	8008424 <_free_r+0x2c>
 8008418:	6063      	str	r3, [r4, #4]
 800841a:	6014      	str	r4, [r2, #0]
 800841c:	0028      	movs	r0, r5
 800841e:	f000 f917 	bl	8008650 <__malloc_unlock>
 8008422:	bd70      	pop	{r4, r5, r6, pc}
 8008424:	42a3      	cmp	r3, r4
 8008426:	d908      	bls.n	800843a <_free_r+0x42>
 8008428:	6821      	ldr	r1, [r4, #0]
 800842a:	1860      	adds	r0, r4, r1
 800842c:	4283      	cmp	r3, r0
 800842e:	d1f3      	bne.n	8008418 <_free_r+0x20>
 8008430:	6818      	ldr	r0, [r3, #0]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	1841      	adds	r1, r0, r1
 8008436:	6021      	str	r1, [r4, #0]
 8008438:	e7ee      	b.n	8008418 <_free_r+0x20>
 800843a:	001a      	movs	r2, r3
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d001      	beq.n	8008446 <_free_r+0x4e>
 8008442:	42a3      	cmp	r3, r4
 8008444:	d9f9      	bls.n	800843a <_free_r+0x42>
 8008446:	6811      	ldr	r1, [r2, #0]
 8008448:	1850      	adds	r0, r2, r1
 800844a:	42a0      	cmp	r0, r4
 800844c:	d10b      	bne.n	8008466 <_free_r+0x6e>
 800844e:	6820      	ldr	r0, [r4, #0]
 8008450:	1809      	adds	r1, r1, r0
 8008452:	1850      	adds	r0, r2, r1
 8008454:	6011      	str	r1, [r2, #0]
 8008456:	4283      	cmp	r3, r0
 8008458:	d1e0      	bne.n	800841c <_free_r+0x24>
 800845a:	6818      	ldr	r0, [r3, #0]
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	1841      	adds	r1, r0, r1
 8008460:	6011      	str	r1, [r2, #0]
 8008462:	6053      	str	r3, [r2, #4]
 8008464:	e7da      	b.n	800841c <_free_r+0x24>
 8008466:	42a0      	cmp	r0, r4
 8008468:	d902      	bls.n	8008470 <_free_r+0x78>
 800846a:	230c      	movs	r3, #12
 800846c:	602b      	str	r3, [r5, #0]
 800846e:	e7d5      	b.n	800841c <_free_r+0x24>
 8008470:	6821      	ldr	r1, [r4, #0]
 8008472:	1860      	adds	r0, r4, r1
 8008474:	4283      	cmp	r3, r0
 8008476:	d103      	bne.n	8008480 <_free_r+0x88>
 8008478:	6818      	ldr	r0, [r3, #0]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	1841      	adds	r1, r0, r1
 800847e:	6021      	str	r1, [r4, #0]
 8008480:	6063      	str	r3, [r4, #4]
 8008482:	6054      	str	r4, [r2, #4]
 8008484:	e7ca      	b.n	800841c <_free_r+0x24>
 8008486:	46c0      	nop			; (mov r8, r8)
 8008488:	200003e0 	.word	0x200003e0

0800848c <sbrk_aligned>:
 800848c:	b570      	push	{r4, r5, r6, lr}
 800848e:	4e0f      	ldr	r6, [pc, #60]	; (80084cc <sbrk_aligned+0x40>)
 8008490:	000d      	movs	r5, r1
 8008492:	6831      	ldr	r1, [r6, #0]
 8008494:	0004      	movs	r4, r0
 8008496:	2900      	cmp	r1, #0
 8008498:	d102      	bne.n	80084a0 <sbrk_aligned+0x14>
 800849a:	f000 f8bf 	bl	800861c <_sbrk_r>
 800849e:	6030      	str	r0, [r6, #0]
 80084a0:	0029      	movs	r1, r5
 80084a2:	0020      	movs	r0, r4
 80084a4:	f000 f8ba 	bl	800861c <_sbrk_r>
 80084a8:	1c43      	adds	r3, r0, #1
 80084aa:	d00a      	beq.n	80084c2 <sbrk_aligned+0x36>
 80084ac:	2303      	movs	r3, #3
 80084ae:	1cc5      	adds	r5, r0, #3
 80084b0:	439d      	bics	r5, r3
 80084b2:	42a8      	cmp	r0, r5
 80084b4:	d007      	beq.n	80084c6 <sbrk_aligned+0x3a>
 80084b6:	1a29      	subs	r1, r5, r0
 80084b8:	0020      	movs	r0, r4
 80084ba:	f000 f8af 	bl	800861c <_sbrk_r>
 80084be:	1c43      	adds	r3, r0, #1
 80084c0:	d101      	bne.n	80084c6 <sbrk_aligned+0x3a>
 80084c2:	2501      	movs	r5, #1
 80084c4:	426d      	negs	r5, r5
 80084c6:	0028      	movs	r0, r5
 80084c8:	bd70      	pop	{r4, r5, r6, pc}
 80084ca:	46c0      	nop			; (mov r8, r8)
 80084cc:	200003e4 	.word	0x200003e4

080084d0 <_malloc_r>:
 80084d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084d2:	2203      	movs	r2, #3
 80084d4:	1ccb      	adds	r3, r1, #3
 80084d6:	4393      	bics	r3, r2
 80084d8:	3308      	adds	r3, #8
 80084da:	0006      	movs	r6, r0
 80084dc:	001f      	movs	r7, r3
 80084de:	2b0c      	cmp	r3, #12
 80084e0:	d232      	bcs.n	8008548 <_malloc_r+0x78>
 80084e2:	270c      	movs	r7, #12
 80084e4:	42b9      	cmp	r1, r7
 80084e6:	d831      	bhi.n	800854c <_malloc_r+0x7c>
 80084e8:	0030      	movs	r0, r6
 80084ea:	f000 f8a9 	bl	8008640 <__malloc_lock>
 80084ee:	4d32      	ldr	r5, [pc, #200]	; (80085b8 <_malloc_r+0xe8>)
 80084f0:	682b      	ldr	r3, [r5, #0]
 80084f2:	001c      	movs	r4, r3
 80084f4:	2c00      	cmp	r4, #0
 80084f6:	d12e      	bne.n	8008556 <_malloc_r+0x86>
 80084f8:	0039      	movs	r1, r7
 80084fa:	0030      	movs	r0, r6
 80084fc:	f7ff ffc6 	bl	800848c <sbrk_aligned>
 8008500:	0004      	movs	r4, r0
 8008502:	1c43      	adds	r3, r0, #1
 8008504:	d11e      	bne.n	8008544 <_malloc_r+0x74>
 8008506:	682c      	ldr	r4, [r5, #0]
 8008508:	0025      	movs	r5, r4
 800850a:	2d00      	cmp	r5, #0
 800850c:	d14a      	bne.n	80085a4 <_malloc_r+0xd4>
 800850e:	6823      	ldr	r3, [r4, #0]
 8008510:	0029      	movs	r1, r5
 8008512:	18e3      	adds	r3, r4, r3
 8008514:	0030      	movs	r0, r6
 8008516:	9301      	str	r3, [sp, #4]
 8008518:	f000 f880 	bl	800861c <_sbrk_r>
 800851c:	9b01      	ldr	r3, [sp, #4]
 800851e:	4283      	cmp	r3, r0
 8008520:	d143      	bne.n	80085aa <_malloc_r+0xda>
 8008522:	6823      	ldr	r3, [r4, #0]
 8008524:	3703      	adds	r7, #3
 8008526:	1aff      	subs	r7, r7, r3
 8008528:	2303      	movs	r3, #3
 800852a:	439f      	bics	r7, r3
 800852c:	3708      	adds	r7, #8
 800852e:	2f0c      	cmp	r7, #12
 8008530:	d200      	bcs.n	8008534 <_malloc_r+0x64>
 8008532:	270c      	movs	r7, #12
 8008534:	0039      	movs	r1, r7
 8008536:	0030      	movs	r0, r6
 8008538:	f7ff ffa8 	bl	800848c <sbrk_aligned>
 800853c:	1c43      	adds	r3, r0, #1
 800853e:	d034      	beq.n	80085aa <_malloc_r+0xda>
 8008540:	6823      	ldr	r3, [r4, #0]
 8008542:	19df      	adds	r7, r3, r7
 8008544:	6027      	str	r7, [r4, #0]
 8008546:	e013      	b.n	8008570 <_malloc_r+0xa0>
 8008548:	2b00      	cmp	r3, #0
 800854a:	dacb      	bge.n	80084e4 <_malloc_r+0x14>
 800854c:	230c      	movs	r3, #12
 800854e:	2500      	movs	r5, #0
 8008550:	6033      	str	r3, [r6, #0]
 8008552:	0028      	movs	r0, r5
 8008554:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008556:	6822      	ldr	r2, [r4, #0]
 8008558:	1bd1      	subs	r1, r2, r7
 800855a:	d420      	bmi.n	800859e <_malloc_r+0xce>
 800855c:	290b      	cmp	r1, #11
 800855e:	d917      	bls.n	8008590 <_malloc_r+0xc0>
 8008560:	19e2      	adds	r2, r4, r7
 8008562:	6027      	str	r7, [r4, #0]
 8008564:	42a3      	cmp	r3, r4
 8008566:	d111      	bne.n	800858c <_malloc_r+0xbc>
 8008568:	602a      	str	r2, [r5, #0]
 800856a:	6863      	ldr	r3, [r4, #4]
 800856c:	6011      	str	r1, [r2, #0]
 800856e:	6053      	str	r3, [r2, #4]
 8008570:	0030      	movs	r0, r6
 8008572:	0025      	movs	r5, r4
 8008574:	f000 f86c 	bl	8008650 <__malloc_unlock>
 8008578:	2207      	movs	r2, #7
 800857a:	350b      	adds	r5, #11
 800857c:	1d23      	adds	r3, r4, #4
 800857e:	4395      	bics	r5, r2
 8008580:	1aea      	subs	r2, r5, r3
 8008582:	429d      	cmp	r5, r3
 8008584:	d0e5      	beq.n	8008552 <_malloc_r+0x82>
 8008586:	1b5b      	subs	r3, r3, r5
 8008588:	50a3      	str	r3, [r4, r2]
 800858a:	e7e2      	b.n	8008552 <_malloc_r+0x82>
 800858c:	605a      	str	r2, [r3, #4]
 800858e:	e7ec      	b.n	800856a <_malloc_r+0x9a>
 8008590:	6862      	ldr	r2, [r4, #4]
 8008592:	42a3      	cmp	r3, r4
 8008594:	d101      	bne.n	800859a <_malloc_r+0xca>
 8008596:	602a      	str	r2, [r5, #0]
 8008598:	e7ea      	b.n	8008570 <_malloc_r+0xa0>
 800859a:	605a      	str	r2, [r3, #4]
 800859c:	e7e8      	b.n	8008570 <_malloc_r+0xa0>
 800859e:	0023      	movs	r3, r4
 80085a0:	6864      	ldr	r4, [r4, #4]
 80085a2:	e7a7      	b.n	80084f4 <_malloc_r+0x24>
 80085a4:	002c      	movs	r4, r5
 80085a6:	686d      	ldr	r5, [r5, #4]
 80085a8:	e7af      	b.n	800850a <_malloc_r+0x3a>
 80085aa:	230c      	movs	r3, #12
 80085ac:	0030      	movs	r0, r6
 80085ae:	6033      	str	r3, [r6, #0]
 80085b0:	f000 f84e 	bl	8008650 <__malloc_unlock>
 80085b4:	e7cd      	b.n	8008552 <_malloc_r+0x82>
 80085b6:	46c0      	nop			; (mov r8, r8)
 80085b8:	200003e0 	.word	0x200003e0

080085bc <_realloc_r>:
 80085bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085be:	0007      	movs	r7, r0
 80085c0:	000e      	movs	r6, r1
 80085c2:	0014      	movs	r4, r2
 80085c4:	2900      	cmp	r1, #0
 80085c6:	d105      	bne.n	80085d4 <_realloc_r+0x18>
 80085c8:	0011      	movs	r1, r2
 80085ca:	f7ff ff81 	bl	80084d0 <_malloc_r>
 80085ce:	0005      	movs	r5, r0
 80085d0:	0028      	movs	r0, r5
 80085d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80085d4:	2a00      	cmp	r2, #0
 80085d6:	d103      	bne.n	80085e0 <_realloc_r+0x24>
 80085d8:	f7ff ff0e 	bl	80083f8 <_free_r>
 80085dc:	0025      	movs	r5, r4
 80085de:	e7f7      	b.n	80085d0 <_realloc_r+0x14>
 80085e0:	f000 f83e 	bl	8008660 <_malloc_usable_size_r>
 80085e4:	9001      	str	r0, [sp, #4]
 80085e6:	4284      	cmp	r4, r0
 80085e8:	d803      	bhi.n	80085f2 <_realloc_r+0x36>
 80085ea:	0035      	movs	r5, r6
 80085ec:	0843      	lsrs	r3, r0, #1
 80085ee:	42a3      	cmp	r3, r4
 80085f0:	d3ee      	bcc.n	80085d0 <_realloc_r+0x14>
 80085f2:	0021      	movs	r1, r4
 80085f4:	0038      	movs	r0, r7
 80085f6:	f7ff ff6b 	bl	80084d0 <_malloc_r>
 80085fa:	1e05      	subs	r5, r0, #0
 80085fc:	d0e8      	beq.n	80085d0 <_realloc_r+0x14>
 80085fe:	9b01      	ldr	r3, [sp, #4]
 8008600:	0022      	movs	r2, r4
 8008602:	429c      	cmp	r4, r3
 8008604:	d900      	bls.n	8008608 <_realloc_r+0x4c>
 8008606:	001a      	movs	r2, r3
 8008608:	0031      	movs	r1, r6
 800860a:	0028      	movs	r0, r5
 800860c:	f7ff fed7 	bl	80083be <memcpy>
 8008610:	0031      	movs	r1, r6
 8008612:	0038      	movs	r0, r7
 8008614:	f7ff fef0 	bl	80083f8 <_free_r>
 8008618:	e7da      	b.n	80085d0 <_realloc_r+0x14>
	...

0800861c <_sbrk_r>:
 800861c:	2300      	movs	r3, #0
 800861e:	b570      	push	{r4, r5, r6, lr}
 8008620:	4d06      	ldr	r5, [pc, #24]	; (800863c <_sbrk_r+0x20>)
 8008622:	0004      	movs	r4, r0
 8008624:	0008      	movs	r0, r1
 8008626:	602b      	str	r3, [r5, #0]
 8008628:	f7fa f880 	bl	800272c <_sbrk>
 800862c:	1c43      	adds	r3, r0, #1
 800862e:	d103      	bne.n	8008638 <_sbrk_r+0x1c>
 8008630:	682b      	ldr	r3, [r5, #0]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d000      	beq.n	8008638 <_sbrk_r+0x1c>
 8008636:	6023      	str	r3, [r4, #0]
 8008638:	bd70      	pop	{r4, r5, r6, pc}
 800863a:	46c0      	nop			; (mov r8, r8)
 800863c:	200003e8 	.word	0x200003e8

08008640 <__malloc_lock>:
 8008640:	b510      	push	{r4, lr}
 8008642:	4802      	ldr	r0, [pc, #8]	; (800864c <__malloc_lock+0xc>)
 8008644:	f000 f814 	bl	8008670 <__retarget_lock_acquire_recursive>
 8008648:	bd10      	pop	{r4, pc}
 800864a:	46c0      	nop			; (mov r8, r8)
 800864c:	200003ec 	.word	0x200003ec

08008650 <__malloc_unlock>:
 8008650:	b510      	push	{r4, lr}
 8008652:	4802      	ldr	r0, [pc, #8]	; (800865c <__malloc_unlock+0xc>)
 8008654:	f000 f80d 	bl	8008672 <__retarget_lock_release_recursive>
 8008658:	bd10      	pop	{r4, pc}
 800865a:	46c0      	nop			; (mov r8, r8)
 800865c:	200003ec 	.word	0x200003ec

08008660 <_malloc_usable_size_r>:
 8008660:	1f0b      	subs	r3, r1, #4
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	1f18      	subs	r0, r3, #4
 8008666:	2b00      	cmp	r3, #0
 8008668:	da01      	bge.n	800866e <_malloc_usable_size_r+0xe>
 800866a:	580b      	ldr	r3, [r1, r0]
 800866c:	18c0      	adds	r0, r0, r3
 800866e:	4770      	bx	lr

08008670 <__retarget_lock_acquire_recursive>:
 8008670:	4770      	bx	lr

08008672 <__retarget_lock_release_recursive>:
 8008672:	4770      	bx	lr

08008674 <_init>:
 8008674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008676:	46c0      	nop			; (mov r8, r8)
 8008678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800867a:	bc08      	pop	{r3}
 800867c:	469e      	mov	lr, r3
 800867e:	4770      	bx	lr

08008680 <_fini>:
 8008680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008682:	46c0      	nop			; (mov r8, r8)
 8008684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008686:	bc08      	pop	{r3}
 8008688:	469e      	mov	lr, r3
 800868a:	4770      	bx	lr
