
SPI1_SPI2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000435c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  0800441c  0800441c  0001441c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004458  08004458  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004458  08004458  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004458  08004458  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004458  08004458  00014458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800445c  0800445c  0001445c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004460  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  2000000c  0800446c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  0800446c  00020248  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000100f4  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020a1  00000000  00000000  00030128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e38  00000000  00000000  000321d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d70  00000000  00000000  00033008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012112  00000000  00000000  00033d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010edb  00000000  00000000  00045e8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006f617  00000000  00000000  00056d65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c637c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003374  00000000  00000000  000c63d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004404 	.word	0x08004404

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08004404 	.word	0x08004404

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_TIM_OC_DelayElapsedCallback>:
int uart_buf_len;
int raw;
const int WRITE = 0x1;
uint8_t rxCommands[4];

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8000228:	687a      	ldr	r2, [r7, #4]
 800022a:	4b2e      	ldr	r3, [pc, #184]	; (80002e4 <HAL_TIM_OC_DelayElapsedCallback+0xc4>)
 800022c:	429a      	cmp	r2, r3
 800022e:	d128      	bne.n	8000282 <HAL_TIM_OC_DelayElapsedCallback+0x62>
	    if(!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8))){ //check pin state
 8000230:	2380      	movs	r3, #128	; 0x80
 8000232:	005a      	lsls	r2, r3, #1
 8000234:	2390      	movs	r3, #144	; 0x90
 8000236:	05db      	lsls	r3, r3, #23
 8000238:	0011      	movs	r1, r2
 800023a:	0018      	movs	r0, r3
 800023c:	f001 f88c 	bl	8001358 <HAL_GPIO_ReadPin>
 8000240:	1e03      	subs	r3, r0, #0
 8000242:	d11e      	bne.n	8000282 <HAL_TIM_OC_DelayElapsedCallback+0x62>

			/**
			 * SPI1 ADC SAMPLE
			 */
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 8000244:	2380      	movs	r3, #128	; 0x80
 8000246:	009b      	lsls	r3, r3, #2
 8000248:	4a27      	ldr	r2, [pc, #156]	; (80002e8 <HAL_TIM_OC_DelayElapsedCallback+0xc8>)
 800024a:	0019      	movs	r1, r3
 800024c:	0010      	movs	r0, r2
 800024e:	f001 f8bd 	bl	80013cc <HAL_GPIO_TogglePin>

			/* Write to SPI (begin transfer?) */
			HAL_SPI_Transmit(&hspi1, (uint8_t *) &WRITE, 1, 1);
 8000252:	4926      	ldr	r1, [pc, #152]	; (80002ec <HAL_TIM_OC_DelayElapsedCallback+0xcc>)
 8000254:	4826      	ldr	r0, [pc, #152]	; (80002f0 <HAL_TIM_OC_DelayElapsedCallback+0xd0>)
 8000256:	2301      	movs	r3, #1
 8000258:	2201      	movs	r2, #1
 800025a:	f001 fed5 	bl	8002008 <HAL_SPI_Transmit>

			while (!(hspi1.Instance->SR));
 800025e:	46c0      	nop			; (mov r8, r8)
 8000260:	4b23      	ldr	r3, [pc, #140]	; (80002f0 <HAL_TIM_OC_DelayElapsedCallback+0xd0>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	689b      	ldr	r3, [r3, #8]
 8000266:	2b00      	cmp	r3, #0
 8000268:	d0fa      	beq.n	8000260 <HAL_TIM_OC_DelayElapsedCallback+0x40>

			int raw = hspi1.Instance->DR;
 800026a:	4b21      	ldr	r3, [pc, #132]	; (80002f0 <HAL_TIM_OC_DelayElapsedCallback+0xd0>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	68db      	ldr	r3, [r3, #12]
 8000270:	60fb      	str	r3, [r7, #12]

			htim1.Instance->CCR1 = TIM_OCMODE_FORCED_ACTIVE;
 8000272:	4b1c      	ldr	r3, [pc, #112]	; (80002e4 <HAL_TIM_OC_DelayElapsedCallback+0xc4>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	2250      	movs	r2, #80	; 0x50
 8000278:	635a      	str	r2, [r3, #52]	; 0x34
			htim1.Instance->CCR1 = TIM_OCMODE_TOGGLE;
 800027a:	4b1a      	ldr	r3, [pc, #104]	; (80002e4 <HAL_TIM_OC_DelayElapsedCallback+0xc4>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	2230      	movs	r2, #48	; 0x30
 8000280:	635a      	str	r2, [r3, #52]	; 0x34
	    }
	}

	if (htim == &htim2) {
 8000282:	687a      	ldr	r2, [r7, #4]
 8000284:	4b1b      	ldr	r3, [pc, #108]	; (80002f4 <HAL_TIM_OC_DelayElapsedCallback+0xd4>)
 8000286:	429a      	cmp	r2, r3
 8000288:	d127      	bne.n	80002da <HAL_TIM_OC_DelayElapsedCallback+0xba>
	    if(!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11))){ //check pin state
 800028a:	2380      	movs	r3, #128	; 0x80
 800028c:	011b      	lsls	r3, r3, #4
 800028e:	4a1a      	ldr	r2, [pc, #104]	; (80002f8 <HAL_TIM_OC_DelayElapsedCallback+0xd8>)
 8000290:	0019      	movs	r1, r3
 8000292:	0010      	movs	r0, r2
 8000294:	f001 f860 	bl	8001358 <HAL_GPIO_ReadPin>
 8000298:	1e03      	subs	r3, r0, #0
 800029a:	d11e      	bne.n	80002da <HAL_TIM_OC_DelayElapsedCallback+0xba>

			/**
			 * SPI2 ADC SAMPLE
			 */
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 800029c:	2380      	movs	r3, #128	; 0x80
 800029e:	005b      	lsls	r3, r3, #1
 80002a0:	4a11      	ldr	r2, [pc, #68]	; (80002e8 <HAL_TIM_OC_DelayElapsedCallback+0xc8>)
 80002a2:	0019      	movs	r1, r3
 80002a4:	0010      	movs	r0, r2
 80002a6:	f001 f891 	bl	80013cc <HAL_GPIO_TogglePin>

			/* Write to SPI (begin transfer?) */
			HAL_SPI_Transmit(&hspi2, (uint8_t *) &WRITE, 1, 1);
 80002aa:	4910      	ldr	r1, [pc, #64]	; (80002ec <HAL_TIM_OC_DelayElapsedCallback+0xcc>)
 80002ac:	4813      	ldr	r0, [pc, #76]	; (80002fc <HAL_TIM_OC_DelayElapsedCallback+0xdc>)
 80002ae:	2301      	movs	r3, #1
 80002b0:	2201      	movs	r2, #1
 80002b2:	f001 fea9 	bl	8002008 <HAL_SPI_Transmit>

			while (!(hspi2.Instance->SR));
 80002b6:	46c0      	nop			; (mov r8, r8)
 80002b8:	4b10      	ldr	r3, [pc, #64]	; (80002fc <HAL_TIM_OC_DelayElapsedCallback+0xdc>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	689b      	ldr	r3, [r3, #8]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d0fa      	beq.n	80002b8 <HAL_TIM_OC_DelayElapsedCallback+0x98>

			int raw = hspi2.Instance->DR;
 80002c2:	4b0e      	ldr	r3, [pc, #56]	; (80002fc <HAL_TIM_OC_DelayElapsedCallback+0xdc>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	68db      	ldr	r3, [r3, #12]
 80002c8:	60bb      	str	r3, [r7, #8]

			//FIXME: CCMR IS INCORRECT
			htim2.Instance->CCR4 = TIM_OCMODE_FORCED_ACTIVE;
 80002ca:	4b0a      	ldr	r3, [pc, #40]	; (80002f4 <HAL_TIM_OC_DelayElapsedCallback+0xd4>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	2250      	movs	r2, #80	; 0x50
 80002d0:	641a      	str	r2, [r3, #64]	; 0x40
			htim2.Instance->CCR4 = TIM_OCMODE_TOGGLE;
 80002d2:	4b08      	ldr	r3, [pc, #32]	; (80002f4 <HAL_TIM_OC_DelayElapsedCallback+0xd4>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	2230      	movs	r2, #48	; 0x30
 80002d8:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
}
 80002da:	46c0      	nop			; (mov r8, r8)
 80002dc:	46bd      	mov	sp, r7
 80002de:	b004      	add	sp, #16
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	46c0      	nop			; (mov r8, r8)
 80002e4:	2000014c 	.word	0x2000014c
 80002e8:	48000800 	.word	0x48000800
 80002ec:	0800443c 	.word	0x0800443c
 80002f0:	20000198 	.word	0x20000198
 80002f4:	200001fc 	.word	0x200001fc
 80002f8:	48000400 	.word	0x48000400
 80002fc:	20000028 	.word	0x20000028

08000300 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000304:	f000 fcf8 	bl	8000cf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000308:	f000 f81c 	bl	8000344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800030c:	f000 fa62 	bl	80007d4 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000310:	f000 f8b8 	bl	8000484 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000314:	f000 f8f4 	bl	8000500 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000318:	f000 f9aa 	bl	8000670 <MX_TIM2_Init>
  MX_SPI1_Init();
 800031c:	f000 f874 	bl	8000408 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000320:	f000 fa28 	bl	8000774 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000324:	4b05      	ldr	r3, [pc, #20]	; (800033c <main+0x3c>)
 8000326:	2100      	movs	r1, #0
 8000328:	0018      	movs	r0, r3
 800032a:	f002 f9e3 	bl	80026f4 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 800032e:	4b04      	ldr	r3, [pc, #16]	; (8000340 <main+0x40>)
 8000330:	210c      	movs	r1, #12
 8000332:	0018      	movs	r0, r3
 8000334:	f002 f9de 	bl	80026f4 <HAL_TIM_OC_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000338:	e7fe      	b.n	8000338 <main+0x38>
 800033a:	46c0      	nop			; (mov r8, r8)
 800033c:	2000014c 	.word	0x2000014c
 8000340:	200001fc 	.word	0x200001fc

08000344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000344:	b590      	push	{r4, r7, lr}
 8000346:	b097      	sub	sp, #92	; 0x5c
 8000348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800034a:	2428      	movs	r4, #40	; 0x28
 800034c:	193b      	adds	r3, r7, r4
 800034e:	0018      	movs	r0, r3
 8000350:	2330      	movs	r3, #48	; 0x30
 8000352:	001a      	movs	r2, r3
 8000354:	2100      	movs	r1, #0
 8000356:	f004 f84d 	bl	80043f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800035a:	2318      	movs	r3, #24
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	0018      	movs	r0, r3
 8000360:	2310      	movs	r3, #16
 8000362:	001a      	movs	r2, r3
 8000364:	2100      	movs	r1, #0
 8000366:	f004 f845 	bl	80043f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	0018      	movs	r0, r3
 800036e:	2314      	movs	r3, #20
 8000370:	001a      	movs	r2, r3
 8000372:	2100      	movs	r1, #0
 8000374:	f004 f83e 	bl	80043f4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000378:	0021      	movs	r1, r4
 800037a:	187b      	adds	r3, r7, r1
 800037c:	2202      	movs	r2, #2
 800037e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000380:	187b      	adds	r3, r7, r1
 8000382:	2201      	movs	r2, #1
 8000384:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000386:	187b      	adds	r3, r7, r1
 8000388:	2210      	movs	r2, #16
 800038a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800038c:	187b      	adds	r3, r7, r1
 800038e:	2202      	movs	r2, #2
 8000390:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000392:	187b      	adds	r3, r7, r1
 8000394:	2200      	movs	r2, #0
 8000396:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000398:	187b      	adds	r3, r7, r1
 800039a:	22a0      	movs	r2, #160	; 0xa0
 800039c:	0392      	lsls	r2, r2, #14
 800039e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80003a0:	187b      	adds	r3, r7, r1
 80003a2:	2200      	movs	r2, #0
 80003a4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003a6:	187b      	adds	r3, r7, r1
 80003a8:	0018      	movs	r0, r3
 80003aa:	f001 f82b 	bl	8001404 <HAL_RCC_OscConfig>
 80003ae:	1e03      	subs	r3, r0, #0
 80003b0:	d001      	beq.n	80003b6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80003b2:	f000 fa67 	bl	8000884 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003b6:	2118      	movs	r1, #24
 80003b8:	187b      	adds	r3, r7, r1
 80003ba:	2207      	movs	r2, #7
 80003bc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003be:	187b      	adds	r3, r7, r1
 80003c0:	2202      	movs	r2, #2
 80003c2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c4:	187b      	adds	r3, r7, r1
 80003c6:	2200      	movs	r2, #0
 80003c8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003ca:	187b      	adds	r3, r7, r1
 80003cc:	2200      	movs	r2, #0
 80003ce:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003d0:	187b      	adds	r3, r7, r1
 80003d2:	2101      	movs	r1, #1
 80003d4:	0018      	movs	r0, r3
 80003d6:	f001 fb2f 	bl	8001a38 <HAL_RCC_ClockConfig>
 80003da:	1e03      	subs	r3, r0, #0
 80003dc:	d001      	beq.n	80003e2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80003de:	f000 fa51 	bl	8000884 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	2201      	movs	r2, #1
 80003e6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80003e8:	1d3b      	adds	r3, r7, #4
 80003ea:	2200      	movs	r2, #0
 80003ec:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003ee:	1d3b      	adds	r3, r7, #4
 80003f0:	0018      	movs	r0, r3
 80003f2:	f001 fc73 	bl	8001cdc <HAL_RCCEx_PeriphCLKConfig>
 80003f6:	1e03      	subs	r3, r0, #0
 80003f8:	d001      	beq.n	80003fe <SystemClock_Config+0xba>
  {
    Error_Handler();
 80003fa:	f000 fa43 	bl	8000884 <Error_Handler>
  }
}
 80003fe:	46c0      	nop			; (mov r8, r8)
 8000400:	46bd      	mov	sp, r7
 8000402:	b017      	add	sp, #92	; 0x5c
 8000404:	bd90      	pop	{r4, r7, pc}
	...

08000408 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800040c:	4b1b      	ldr	r3, [pc, #108]	; (800047c <MX_SPI1_Init+0x74>)
 800040e:	4a1c      	ldr	r2, [pc, #112]	; (8000480 <MX_SPI1_Init+0x78>)
 8000410:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000412:	4b1a      	ldr	r3, [pc, #104]	; (800047c <MX_SPI1_Init+0x74>)
 8000414:	2282      	movs	r2, #130	; 0x82
 8000416:	0052      	lsls	r2, r2, #1
 8000418:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800041a:	4b18      	ldr	r3, [pc, #96]	; (800047c <MX_SPI1_Init+0x74>)
 800041c:	2200      	movs	r2, #0
 800041e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000420:	4b16      	ldr	r3, [pc, #88]	; (800047c <MX_SPI1_Init+0x74>)
 8000422:	22f0      	movs	r2, #240	; 0xf0
 8000424:	0112      	lsls	r2, r2, #4
 8000426:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000428:	4b14      	ldr	r3, [pc, #80]	; (800047c <MX_SPI1_Init+0x74>)
 800042a:	2200      	movs	r2, #0
 800042c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800042e:	4b13      	ldr	r3, [pc, #76]	; (800047c <MX_SPI1_Init+0x74>)
 8000430:	2200      	movs	r2, #0
 8000432:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000434:	4b11      	ldr	r3, [pc, #68]	; (800047c <MX_SPI1_Init+0x74>)
 8000436:	2280      	movs	r2, #128	; 0x80
 8000438:	0092      	lsls	r2, r2, #2
 800043a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800043c:	4b0f      	ldr	r3, [pc, #60]	; (800047c <MX_SPI1_Init+0x74>)
 800043e:	2218      	movs	r2, #24
 8000440:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000442:	4b0e      	ldr	r3, [pc, #56]	; (800047c <MX_SPI1_Init+0x74>)
 8000444:	2200      	movs	r2, #0
 8000446:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000448:	4b0c      	ldr	r3, [pc, #48]	; (800047c <MX_SPI1_Init+0x74>)
 800044a:	2200      	movs	r2, #0
 800044c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800044e:	4b0b      	ldr	r3, [pc, #44]	; (800047c <MX_SPI1_Init+0x74>)
 8000450:	2200      	movs	r2, #0
 8000452:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000454:	4b09      	ldr	r3, [pc, #36]	; (800047c <MX_SPI1_Init+0x74>)
 8000456:	2207      	movs	r2, #7
 8000458:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800045a:	4b08      	ldr	r3, [pc, #32]	; (800047c <MX_SPI1_Init+0x74>)
 800045c:	2200      	movs	r2, #0
 800045e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000460:	4b06      	ldr	r3, [pc, #24]	; (800047c <MX_SPI1_Init+0x74>)
 8000462:	2208      	movs	r2, #8
 8000464:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000466:	4b05      	ldr	r3, [pc, #20]	; (800047c <MX_SPI1_Init+0x74>)
 8000468:	0018      	movs	r0, r3
 800046a:	f001 fd15 	bl	8001e98 <HAL_SPI_Init>
 800046e:	1e03      	subs	r3, r0, #0
 8000470:	d001      	beq.n	8000476 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000472:	f000 fa07 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000476:	46c0      	nop			; (mov r8, r8)
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	20000198 	.word	0x20000198
 8000480:	40013000 	.word	0x40013000

08000484 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000488:	4b1b      	ldr	r3, [pc, #108]	; (80004f8 <MX_SPI2_Init+0x74>)
 800048a:	4a1c      	ldr	r2, [pc, #112]	; (80004fc <MX_SPI2_Init+0x78>)
 800048c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800048e:	4b1a      	ldr	r3, [pc, #104]	; (80004f8 <MX_SPI2_Init+0x74>)
 8000490:	2282      	movs	r2, #130	; 0x82
 8000492:	0052      	lsls	r2, r2, #1
 8000494:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000496:	4b18      	ldr	r3, [pc, #96]	; (80004f8 <MX_SPI2_Init+0x74>)
 8000498:	2200      	movs	r2, #0
 800049a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800049c:	4b16      	ldr	r3, [pc, #88]	; (80004f8 <MX_SPI2_Init+0x74>)
 800049e:	22f0      	movs	r2, #240	; 0xf0
 80004a0:	0112      	lsls	r2, r2, #4
 80004a2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004a4:	4b14      	ldr	r3, [pc, #80]	; (80004f8 <MX_SPI2_Init+0x74>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004aa:	4b13      	ldr	r3, [pc, #76]	; (80004f8 <MX_SPI2_Init+0x74>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80004b0:	4b11      	ldr	r3, [pc, #68]	; (80004f8 <MX_SPI2_Init+0x74>)
 80004b2:	2280      	movs	r2, #128	; 0x80
 80004b4:	0092      	lsls	r2, r2, #2
 80004b6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80004b8:	4b0f      	ldr	r3, [pc, #60]	; (80004f8 <MX_SPI2_Init+0x74>)
 80004ba:	2218      	movs	r2, #24
 80004bc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004be:	4b0e      	ldr	r3, [pc, #56]	; (80004f8 <MX_SPI2_Init+0x74>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80004c4:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <MX_SPI2_Init+0x74>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004ca:	4b0b      	ldr	r3, [pc, #44]	; (80004f8 <MX_SPI2_Init+0x74>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80004d0:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <MX_SPI2_Init+0x74>)
 80004d2:	2207      	movs	r2, #7
 80004d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004d6:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <MX_SPI2_Init+0x74>)
 80004d8:	2200      	movs	r2, #0
 80004da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004dc:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <MX_SPI2_Init+0x74>)
 80004de:	2208      	movs	r2, #8
 80004e0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80004e2:	4b05      	ldr	r3, [pc, #20]	; (80004f8 <MX_SPI2_Init+0x74>)
 80004e4:	0018      	movs	r0, r3
 80004e6:	f001 fcd7 	bl	8001e98 <HAL_SPI_Init>
 80004ea:	1e03      	subs	r3, r0, #0
 80004ec:	d001      	beq.n	80004f2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80004ee:	f000 f9c9 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	20000028 	.word	0x20000028
 80004fc:	40003800 	.word	0x40003800

08000500 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b096      	sub	sp, #88	; 0x58
 8000504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000506:	2348      	movs	r3, #72	; 0x48
 8000508:	18fb      	adds	r3, r7, r3
 800050a:	0018      	movs	r0, r3
 800050c:	2310      	movs	r3, #16
 800050e:	001a      	movs	r2, r3
 8000510:	2100      	movs	r1, #0
 8000512:	f003 ff6f 	bl	80043f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000516:	2340      	movs	r3, #64	; 0x40
 8000518:	18fb      	adds	r3, r7, r3
 800051a:	0018      	movs	r0, r3
 800051c:	2308      	movs	r3, #8
 800051e:	001a      	movs	r2, r3
 8000520:	2100      	movs	r1, #0
 8000522:	f003 ff67 	bl	80043f4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000526:	2324      	movs	r3, #36	; 0x24
 8000528:	18fb      	adds	r3, r7, r3
 800052a:	0018      	movs	r0, r3
 800052c:	231c      	movs	r3, #28
 800052e:	001a      	movs	r2, r3
 8000530:	2100      	movs	r1, #0
 8000532:	f003 ff5f 	bl	80043f4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	0018      	movs	r0, r3
 800053a:	2320      	movs	r3, #32
 800053c:	001a      	movs	r2, r3
 800053e:	2100      	movs	r1, #0
 8000540:	f003 ff58 	bl	80043f4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000544:	4b46      	ldr	r3, [pc, #280]	; (8000660 <MX_TIM1_Init+0x160>)
 8000546:	4a47      	ldr	r2, [pc, #284]	; (8000664 <MX_TIM1_Init+0x164>)
 8000548:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100 - 1;
 800054a:	4b45      	ldr	r3, [pc, #276]	; (8000660 <MX_TIM1_Init+0x160>)
 800054c:	2263      	movs	r2, #99	; 0x63
 800054e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000550:	4b43      	ldr	r3, [pc, #268]	; (8000660 <MX_TIM1_Init+0x160>)
 8000552:	2200      	movs	r2, #0
 8000554:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24000;
 8000556:	4b42      	ldr	r3, [pc, #264]	; (8000660 <MX_TIM1_Init+0x160>)
 8000558:	4a43      	ldr	r2, [pc, #268]	; (8000668 <MX_TIM1_Init+0x168>)
 800055a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800055c:	4b40      	ldr	r3, [pc, #256]	; (8000660 <MX_TIM1_Init+0x160>)
 800055e:	2200      	movs	r2, #0
 8000560:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000562:	4b3f      	ldr	r3, [pc, #252]	; (8000660 <MX_TIM1_Init+0x160>)
 8000564:	2200      	movs	r2, #0
 8000566:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000568:	4b3d      	ldr	r3, [pc, #244]	; (8000660 <MX_TIM1_Init+0x160>)
 800056a:	2280      	movs	r2, #128	; 0x80
 800056c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800056e:	4b3c      	ldr	r3, [pc, #240]	; (8000660 <MX_TIM1_Init+0x160>)
 8000570:	0018      	movs	r0, r3
 8000572:	f002 f817 	bl	80025a4 <HAL_TIM_Base_Init>
 8000576:	1e03      	subs	r3, r0, #0
 8000578:	d001      	beq.n	800057e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800057a:	f000 f983 	bl	8000884 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800057e:	2148      	movs	r1, #72	; 0x48
 8000580:	187b      	adds	r3, r7, r1
 8000582:	2280      	movs	r2, #128	; 0x80
 8000584:	0152      	lsls	r2, r2, #5
 8000586:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000588:	187a      	adds	r2, r7, r1
 800058a:	4b35      	ldr	r3, [pc, #212]	; (8000660 <MX_TIM1_Init+0x160>)
 800058c:	0011      	movs	r1, r2
 800058e:	0018      	movs	r0, r3
 8000590:	f002 fb1e 	bl	8002bd0 <HAL_TIM_ConfigClockSource>
 8000594:	1e03      	subs	r3, r0, #0
 8000596:	d001      	beq.n	800059c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000598:	f000 f974 	bl	8000884 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800059c:	4b30      	ldr	r3, [pc, #192]	; (8000660 <MX_TIM1_Init+0x160>)
 800059e:	0018      	movs	r0, r3
 80005a0:	f002 f850 	bl	8002644 <HAL_TIM_OC_Init>
 80005a4:	1e03      	subs	r3, r0, #0
 80005a6:	d001      	beq.n	80005ac <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80005a8:	f000 f96c 	bl	8000884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005ac:	2140      	movs	r1, #64	; 0x40
 80005ae:	187b      	adds	r3, r7, r1
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005b4:	187b      	adds	r3, r7, r1
 80005b6:	2200      	movs	r2, #0
 80005b8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005ba:	187a      	adds	r2, r7, r1
 80005bc:	4b28      	ldr	r3, [pc, #160]	; (8000660 <MX_TIM1_Init+0x160>)
 80005be:	0011      	movs	r1, r2
 80005c0:	0018      	movs	r0, r3
 80005c2:	f002 ff33 	bl	800342c <HAL_TIMEx_MasterConfigSynchronization>
 80005c6:	1e03      	subs	r3, r0, #0
 80005c8:	d001      	beq.n	80005ce <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 80005ca:	f000 f95b 	bl	8000884 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80005ce:	2124      	movs	r1, #36	; 0x24
 80005d0:	187b      	adds	r3, r7, r1
 80005d2:	2230      	movs	r2, #48	; 0x30
 80005d4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 12000 - 1;
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	4a24      	ldr	r2, [pc, #144]	; (800066c <MX_TIM1_Init+0x16c>)
 80005da:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2200      	movs	r2, #0
 80005e6:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2200      	movs	r2, #0
 80005ec:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	2200      	movs	r2, #0
 80005f2:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	2200      	movs	r2, #0
 80005f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005fa:	1879      	adds	r1, r7, r1
 80005fc:	4b18      	ldr	r3, [pc, #96]	; (8000660 <MX_TIM1_Init+0x160>)
 80005fe:	2200      	movs	r2, #0
 8000600:	0018      	movs	r0, r3
 8000602:	f002 fa8d 	bl	8002b20 <HAL_TIM_OC_ConfigChannel>
 8000606:	1e03      	subs	r3, r0, #0
 8000608:	d001      	beq.n	800060e <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800060a:	f000 f93b 	bl	8000884 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	2200      	movs	r2, #0
 8000618:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	2280      	movs	r2, #128	; 0x80
 8000630:	0192      	lsls	r2, r2, #6
 8000632:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	2200      	movs	r2, #0
 8000638:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800063a:	1d3a      	adds	r2, r7, #4
 800063c:	4b08      	ldr	r3, [pc, #32]	; (8000660 <MX_TIM1_Init+0x160>)
 800063e:	0011      	movs	r1, r2
 8000640:	0018      	movs	r0, r3
 8000642:	f002 ff51 	bl	80034e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000646:	1e03      	subs	r3, r0, #0
 8000648:	d001      	beq.n	800064e <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 800064a:	f000 f91b 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800064e:	4b04      	ldr	r3, [pc, #16]	; (8000660 <MX_TIM1_Init+0x160>)
 8000650:	0018      	movs	r0, r3
 8000652:	f000 fa15 	bl	8000a80 <HAL_TIM_MspPostInit>

}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	46bd      	mov	sp, r7
 800065a:	b016      	add	sp, #88	; 0x58
 800065c:	bd80      	pop	{r7, pc}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	2000014c 	.word	0x2000014c
 8000664:	40012c00 	.word	0x40012c00
 8000668:	00005dc0 	.word	0x00005dc0
 800066c:	00002edf 	.word	0x00002edf

08000670 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08e      	sub	sp, #56	; 0x38
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000676:	2328      	movs	r3, #40	; 0x28
 8000678:	18fb      	adds	r3, r7, r3
 800067a:	0018      	movs	r0, r3
 800067c:	2310      	movs	r3, #16
 800067e:	001a      	movs	r2, r3
 8000680:	2100      	movs	r1, #0
 8000682:	f003 feb7 	bl	80043f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000686:	2320      	movs	r3, #32
 8000688:	18fb      	adds	r3, r7, r3
 800068a:	0018      	movs	r0, r3
 800068c:	2308      	movs	r3, #8
 800068e:	001a      	movs	r2, r3
 8000690:	2100      	movs	r1, #0
 8000692:	f003 feaf 	bl	80043f4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	0018      	movs	r0, r3
 800069a:	231c      	movs	r3, #28
 800069c:	001a      	movs	r2, r3
 800069e:	2100      	movs	r1, #0
 80006a0:	f003 fea8 	bl	80043f4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006a4:	4b30      	ldr	r3, [pc, #192]	; (8000768 <MX_TIM2_Init+0xf8>)
 80006a6:	2280      	movs	r2, #128	; 0x80
 80006a8:	05d2      	lsls	r2, r2, #23
 80006aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100 - 1;
 80006ac:	4b2e      	ldr	r3, [pc, #184]	; (8000768 <MX_TIM2_Init+0xf8>)
 80006ae:	2263      	movs	r2, #99	; 0x63
 80006b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006b2:	4b2d      	ldr	r3, [pc, #180]	; (8000768 <MX_TIM2_Init+0xf8>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 30000 - 1;
 80006b8:	4b2b      	ldr	r3, [pc, #172]	; (8000768 <MX_TIM2_Init+0xf8>)
 80006ba:	4a2c      	ldr	r2, [pc, #176]	; (800076c <MX_TIM2_Init+0xfc>)
 80006bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006be:	4b2a      	ldr	r3, [pc, #168]	; (8000768 <MX_TIM2_Init+0xf8>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006c4:	4b28      	ldr	r3, [pc, #160]	; (8000768 <MX_TIM2_Init+0xf8>)
 80006c6:	2280      	movs	r2, #128	; 0x80
 80006c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006ca:	4b27      	ldr	r3, [pc, #156]	; (8000768 <MX_TIM2_Init+0xf8>)
 80006cc:	0018      	movs	r0, r3
 80006ce:	f001 ff69 	bl	80025a4 <HAL_TIM_Base_Init>
 80006d2:	1e03      	subs	r3, r0, #0
 80006d4:	d001      	beq.n	80006da <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80006d6:	f000 f8d5 	bl	8000884 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006da:	2128      	movs	r1, #40	; 0x28
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	2280      	movs	r2, #128	; 0x80
 80006e0:	0152      	lsls	r2, r2, #5
 80006e2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006e4:	187a      	adds	r2, r7, r1
 80006e6:	4b20      	ldr	r3, [pc, #128]	; (8000768 <MX_TIM2_Init+0xf8>)
 80006e8:	0011      	movs	r1, r2
 80006ea:	0018      	movs	r0, r3
 80006ec:	f002 fa70 	bl	8002bd0 <HAL_TIM_ConfigClockSource>
 80006f0:	1e03      	subs	r3, r0, #0
 80006f2:	d001      	beq.n	80006f8 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80006f4:	f000 f8c6 	bl	8000884 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80006f8:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <MX_TIM2_Init+0xf8>)
 80006fa:	0018      	movs	r0, r3
 80006fc:	f001 ffa2 	bl	8002644 <HAL_TIM_OC_Init>
 8000700:	1e03      	subs	r3, r0, #0
 8000702:	d001      	beq.n	8000708 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000704:	f000 f8be 	bl	8000884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000708:	2120      	movs	r1, #32
 800070a:	187b      	adds	r3, r7, r1
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000710:	187b      	adds	r3, r7, r1
 8000712:	2200      	movs	r2, #0
 8000714:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000716:	187a      	adds	r2, r7, r1
 8000718:	4b13      	ldr	r3, [pc, #76]	; (8000768 <MX_TIM2_Init+0xf8>)
 800071a:	0011      	movs	r1, r2
 800071c:	0018      	movs	r0, r3
 800071e:	f002 fe85 	bl	800342c <HAL_TIMEx_MasterConfigSynchronization>
 8000722:	1e03      	subs	r3, r0, #0
 8000724:	d001      	beq.n	800072a <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000726:	f000 f8ad 	bl	8000884 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	2230      	movs	r2, #48	; 0x30
 800072e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 6000 - 1;
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	4a0f      	ldr	r2, [pc, #60]	; (8000770 <MX_TIM2_Init+0x100>)
 8000734:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000742:	1d39      	adds	r1, r7, #4
 8000744:	4b08      	ldr	r3, [pc, #32]	; (8000768 <MX_TIM2_Init+0xf8>)
 8000746:	220c      	movs	r2, #12
 8000748:	0018      	movs	r0, r3
 800074a:	f002 f9e9 	bl	8002b20 <HAL_TIM_OC_ConfigChannel>
 800074e:	1e03      	subs	r3, r0, #0
 8000750:	d001      	beq.n	8000756 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000752:	f000 f897 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000756:	4b04      	ldr	r3, [pc, #16]	; (8000768 <MX_TIM2_Init+0xf8>)
 8000758:	0018      	movs	r0, r3
 800075a:	f000 f991 	bl	8000a80 <HAL_TIM_MspPostInit>

}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	46bd      	mov	sp, r7
 8000762:	b00e      	add	sp, #56	; 0x38
 8000764:	bd80      	pop	{r7, pc}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	200001fc 	.word	0x200001fc
 800076c:	0000752f 	.word	0x0000752f
 8000770:	0000176f 	.word	0x0000176f

08000774 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000778:	4b14      	ldr	r3, [pc, #80]	; (80007cc <MX_USART1_UART_Init+0x58>)
 800077a:	4a15      	ldr	r2, [pc, #84]	; (80007d0 <MX_USART1_UART_Init+0x5c>)
 800077c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800077e:	4b13      	ldr	r3, [pc, #76]	; (80007cc <MX_USART1_UART_Init+0x58>)
 8000780:	22e1      	movs	r2, #225	; 0xe1
 8000782:	0252      	lsls	r2, r2, #9
 8000784:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_USART1_UART_Init+0x58>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_USART1_UART_Init+0x58>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_USART1_UART_Init+0x58>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_USART1_UART_Init+0x58>)
 800079a:	220c      	movs	r2, #12
 800079c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <MX_USART1_UART_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_USART1_UART_Init+0x58>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <MX_USART1_UART_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_USART1_UART_Init+0x58>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007b6:	4b05      	ldr	r3, [pc, #20]	; (80007cc <MX_USART1_UART_Init+0x58>)
 80007b8:	0018      	movs	r0, r3
 80007ba:	f002 ff03 	bl	80035c4 <HAL_UART_Init>
 80007be:	1e03      	subs	r3, r0, #0
 80007c0:	d001      	beq.n	80007c6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007c2:	f000 f85f 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	200000c8 	.word	0x200000c8
 80007d0:	40013800 	.word	0x40013800

080007d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d4:	b590      	push	{r4, r7, lr}
 80007d6:	b089      	sub	sp, #36	; 0x24
 80007d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007da:	240c      	movs	r4, #12
 80007dc:	193b      	adds	r3, r7, r4
 80007de:	0018      	movs	r0, r3
 80007e0:	2314      	movs	r3, #20
 80007e2:	001a      	movs	r2, r3
 80007e4:	2100      	movs	r1, #0
 80007e6:	f003 fe05 	bl	80043f4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	4b24      	ldr	r3, [pc, #144]	; (800087c <MX_GPIO_Init+0xa8>)
 80007ec:	695a      	ldr	r2, [r3, #20]
 80007ee:	4b23      	ldr	r3, [pc, #140]	; (800087c <MX_GPIO_Init+0xa8>)
 80007f0:	2180      	movs	r1, #128	; 0x80
 80007f2:	0289      	lsls	r1, r1, #10
 80007f4:	430a      	orrs	r2, r1
 80007f6:	615a      	str	r2, [r3, #20]
 80007f8:	4b20      	ldr	r3, [pc, #128]	; (800087c <MX_GPIO_Init+0xa8>)
 80007fa:	695a      	ldr	r2, [r3, #20]
 80007fc:	2380      	movs	r3, #128	; 0x80
 80007fe:	029b      	lsls	r3, r3, #10
 8000800:	4013      	ands	r3, r2
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000806:	4b1d      	ldr	r3, [pc, #116]	; (800087c <MX_GPIO_Init+0xa8>)
 8000808:	695a      	ldr	r2, [r3, #20]
 800080a:	4b1c      	ldr	r3, [pc, #112]	; (800087c <MX_GPIO_Init+0xa8>)
 800080c:	2180      	movs	r1, #128	; 0x80
 800080e:	02c9      	lsls	r1, r1, #11
 8000810:	430a      	orrs	r2, r1
 8000812:	615a      	str	r2, [r3, #20]
 8000814:	4b19      	ldr	r3, [pc, #100]	; (800087c <MX_GPIO_Init+0xa8>)
 8000816:	695a      	ldr	r2, [r3, #20]
 8000818:	2380      	movs	r3, #128	; 0x80
 800081a:	02db      	lsls	r3, r3, #11
 800081c:	4013      	ands	r3, r2
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	4b16      	ldr	r3, [pc, #88]	; (800087c <MX_GPIO_Init+0xa8>)
 8000824:	695a      	ldr	r2, [r3, #20]
 8000826:	4b15      	ldr	r3, [pc, #84]	; (800087c <MX_GPIO_Init+0xa8>)
 8000828:	2180      	movs	r1, #128	; 0x80
 800082a:	0309      	lsls	r1, r1, #12
 800082c:	430a      	orrs	r2, r1
 800082e:	615a      	str	r2, [r3, #20]
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <MX_GPIO_Init+0xa8>)
 8000832:	695a      	ldr	r2, [r3, #20]
 8000834:	2380      	movs	r3, #128	; 0x80
 8000836:	031b      	lsls	r3, r3, #12
 8000838:	4013      	ands	r3, r2
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BLUE_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 800083e:	23c0      	movs	r3, #192	; 0xc0
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	480f      	ldr	r0, [pc, #60]	; (8000880 <MX_GPIO_Init+0xac>)
 8000844:	2200      	movs	r2, #0
 8000846:	0019      	movs	r1, r3
 8000848:	f000 fda3 	bl	8001392 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BLUE_LED_Pin GREEN_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin|GREEN_LED_Pin;
 800084c:	193b      	adds	r3, r7, r4
 800084e:	22c0      	movs	r2, #192	; 0xc0
 8000850:	0092      	lsls	r2, r2, #2
 8000852:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000854:	193b      	adds	r3, r7, r4
 8000856:	2201      	movs	r2, #1
 8000858:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	193b      	adds	r3, r7, r4
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	193b      	adds	r3, r7, r4
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000866:	193b      	adds	r3, r7, r4
 8000868:	4a05      	ldr	r2, [pc, #20]	; (8000880 <MX_GPIO_Init+0xac>)
 800086a:	0019      	movs	r1, r3
 800086c:	0010      	movs	r0, r2
 800086e:	f000 fc03 	bl	8001078 <HAL_GPIO_Init>

}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	46bd      	mov	sp, r7
 8000876:	b009      	add	sp, #36	; 0x24
 8000878:	bd90      	pop	{r4, r7, pc}
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	40021000 	.word	0x40021000
 8000880:	48000800 	.word	0x48000800

08000884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000888:	b672      	cpsid	i
}
 800088a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800088c:	e7fe      	b.n	800088c <Error_Handler+0x8>
	...

08000890 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000896:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <HAL_MspInit+0x44>)
 8000898:	699a      	ldr	r2, [r3, #24]
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <HAL_MspInit+0x44>)
 800089c:	2101      	movs	r1, #1
 800089e:	430a      	orrs	r2, r1
 80008a0:	619a      	str	r2, [r3, #24]
 80008a2:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <HAL_MspInit+0x44>)
 80008a4:	699b      	ldr	r3, [r3, #24]
 80008a6:	2201      	movs	r2, #1
 80008a8:	4013      	ands	r3, r2
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ae:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <HAL_MspInit+0x44>)
 80008b0:	69da      	ldr	r2, [r3, #28]
 80008b2:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <HAL_MspInit+0x44>)
 80008b4:	2180      	movs	r1, #128	; 0x80
 80008b6:	0549      	lsls	r1, r1, #21
 80008b8:	430a      	orrs	r2, r1
 80008ba:	61da      	str	r2, [r3, #28]
 80008bc:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <HAL_MspInit+0x44>)
 80008be:	69da      	ldr	r2, [r3, #28]
 80008c0:	2380      	movs	r3, #128	; 0x80
 80008c2:	055b      	lsls	r3, r3, #21
 80008c4:	4013      	ands	r3, r2
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	46bd      	mov	sp, r7
 80008ce:	b002      	add	sp, #8
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	40021000 	.word	0x40021000

080008d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008d8:	b590      	push	{r4, r7, lr}
 80008da:	b08d      	sub	sp, #52	; 0x34
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e0:	241c      	movs	r4, #28
 80008e2:	193b      	adds	r3, r7, r4
 80008e4:	0018      	movs	r0, r3
 80008e6:	2314      	movs	r3, #20
 80008e8:	001a      	movs	r2, r3
 80008ea:	2100      	movs	r1, #0
 80008ec:	f003 fd82 	bl	80043f4 <memset>
  if(hspi->Instance==SPI1)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a39      	ldr	r2, [pc, #228]	; (80009dc <HAL_SPI_MspInit+0x104>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d133      	bne.n	8000962 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008fa:	4b39      	ldr	r3, [pc, #228]	; (80009e0 <HAL_SPI_MspInit+0x108>)
 80008fc:	699a      	ldr	r2, [r3, #24]
 80008fe:	4b38      	ldr	r3, [pc, #224]	; (80009e0 <HAL_SPI_MspInit+0x108>)
 8000900:	2180      	movs	r1, #128	; 0x80
 8000902:	0149      	lsls	r1, r1, #5
 8000904:	430a      	orrs	r2, r1
 8000906:	619a      	str	r2, [r3, #24]
 8000908:	4b35      	ldr	r3, [pc, #212]	; (80009e0 <HAL_SPI_MspInit+0x108>)
 800090a:	699a      	ldr	r2, [r3, #24]
 800090c:	2380      	movs	r3, #128	; 0x80
 800090e:	015b      	lsls	r3, r3, #5
 8000910:	4013      	ands	r3, r2
 8000912:	61bb      	str	r3, [r7, #24]
 8000914:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000916:	4b32      	ldr	r3, [pc, #200]	; (80009e0 <HAL_SPI_MspInit+0x108>)
 8000918:	695a      	ldr	r2, [r3, #20]
 800091a:	4b31      	ldr	r3, [pc, #196]	; (80009e0 <HAL_SPI_MspInit+0x108>)
 800091c:	2180      	movs	r1, #128	; 0x80
 800091e:	0289      	lsls	r1, r1, #10
 8000920:	430a      	orrs	r2, r1
 8000922:	615a      	str	r2, [r3, #20]
 8000924:	4b2e      	ldr	r3, [pc, #184]	; (80009e0 <HAL_SPI_MspInit+0x108>)
 8000926:	695a      	ldr	r2, [r3, #20]
 8000928:	2380      	movs	r3, #128	; 0x80
 800092a:	029b      	lsls	r3, r3, #10
 800092c:	4013      	ands	r3, r2
 800092e:	617b      	str	r3, [r7, #20]
 8000930:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000932:	0021      	movs	r1, r4
 8000934:	187b      	adds	r3, r7, r1
 8000936:	22e0      	movs	r2, #224	; 0xe0
 8000938:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093a:	187b      	adds	r3, r7, r1
 800093c:	2202      	movs	r2, #2
 800093e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	187b      	adds	r3, r7, r1
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000946:	187b      	adds	r3, r7, r1
 8000948:	2203      	movs	r2, #3
 800094a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800094c:	187b      	adds	r3, r7, r1
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000952:	187a      	adds	r2, r7, r1
 8000954:	2390      	movs	r3, #144	; 0x90
 8000956:	05db      	lsls	r3, r3, #23
 8000958:	0011      	movs	r1, r2
 800095a:	0018      	movs	r0, r3
 800095c:	f000 fb8c 	bl	8001078 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000960:	e037      	b.n	80009d2 <HAL_SPI_MspInit+0xfa>
  else if(hspi->Instance==SPI2)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a1f      	ldr	r2, [pc, #124]	; (80009e4 <HAL_SPI_MspInit+0x10c>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d132      	bne.n	80009d2 <HAL_SPI_MspInit+0xfa>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800096c:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <HAL_SPI_MspInit+0x108>)
 800096e:	69da      	ldr	r2, [r3, #28]
 8000970:	4b1b      	ldr	r3, [pc, #108]	; (80009e0 <HAL_SPI_MspInit+0x108>)
 8000972:	2180      	movs	r1, #128	; 0x80
 8000974:	01c9      	lsls	r1, r1, #7
 8000976:	430a      	orrs	r2, r1
 8000978:	61da      	str	r2, [r3, #28]
 800097a:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <HAL_SPI_MspInit+0x108>)
 800097c:	69da      	ldr	r2, [r3, #28]
 800097e:	2380      	movs	r3, #128	; 0x80
 8000980:	01db      	lsls	r3, r3, #7
 8000982:	4013      	ands	r3, r2
 8000984:	613b      	str	r3, [r7, #16]
 8000986:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000988:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <HAL_SPI_MspInit+0x108>)
 800098a:	695a      	ldr	r2, [r3, #20]
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <HAL_SPI_MspInit+0x108>)
 800098e:	2180      	movs	r1, #128	; 0x80
 8000990:	02c9      	lsls	r1, r1, #11
 8000992:	430a      	orrs	r2, r1
 8000994:	615a      	str	r2, [r3, #20]
 8000996:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <HAL_SPI_MspInit+0x108>)
 8000998:	695a      	ldr	r2, [r3, #20]
 800099a:	2380      	movs	r3, #128	; 0x80
 800099c:	02db      	lsls	r3, r3, #11
 800099e:	4013      	ands	r3, r2
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80009a4:	211c      	movs	r1, #28
 80009a6:	187b      	adds	r3, r7, r1
 80009a8:	22e0      	movs	r2, #224	; 0xe0
 80009aa:	0212      	lsls	r2, r2, #8
 80009ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	2202      	movs	r2, #2
 80009b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	187b      	adds	r3, r7, r1
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	2203      	movs	r2, #3
 80009be:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80009c0:	187b      	adds	r3, r7, r1
 80009c2:	2200      	movs	r2, #0
 80009c4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c6:	187b      	adds	r3, r7, r1
 80009c8:	4a07      	ldr	r2, [pc, #28]	; (80009e8 <HAL_SPI_MspInit+0x110>)
 80009ca:	0019      	movs	r1, r3
 80009cc:	0010      	movs	r0, r2
 80009ce:	f000 fb53 	bl	8001078 <HAL_GPIO_Init>
}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	46bd      	mov	sp, r7
 80009d6:	b00d      	add	sp, #52	; 0x34
 80009d8:	bd90      	pop	{r4, r7, pc}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	40013000 	.word	0x40013000
 80009e0:	40021000 	.word	0x40021000
 80009e4:	40003800 	.word	0x40003800
 80009e8:	48000400 	.word	0x48000400

080009ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a1f      	ldr	r2, [pc, #124]	; (8000a78 <HAL_TIM_Base_MspInit+0x8c>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d11e      	bne.n	8000a3c <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009fe:	4b1f      	ldr	r3, [pc, #124]	; (8000a7c <HAL_TIM_Base_MspInit+0x90>)
 8000a00:	699a      	ldr	r2, [r3, #24]
 8000a02:	4b1e      	ldr	r3, [pc, #120]	; (8000a7c <HAL_TIM_Base_MspInit+0x90>)
 8000a04:	2180      	movs	r1, #128	; 0x80
 8000a06:	0109      	lsls	r1, r1, #4
 8000a08:	430a      	orrs	r2, r1
 8000a0a:	619a      	str	r2, [r3, #24]
 8000a0c:	4b1b      	ldr	r3, [pc, #108]	; (8000a7c <HAL_TIM_Base_MspInit+0x90>)
 8000a0e:	699a      	ldr	r2, [r3, #24]
 8000a10:	2380      	movs	r3, #128	; 0x80
 8000a12:	011b      	lsls	r3, r3, #4
 8000a14:	4013      	ands	r3, r2
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	200d      	movs	r0, #13
 8000a20:	f000 fa7a 	bl	8000f18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000a24:	200d      	movs	r0, #13
 8000a26:	f000 fa8c 	bl	8000f42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	200e      	movs	r0, #14
 8000a30:	f000 fa72 	bl	8000f18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000a34:	200e      	movs	r0, #14
 8000a36:	f000 fa84 	bl	8000f42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a3a:	e019      	b.n	8000a70 <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM2)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	2380      	movs	r3, #128	; 0x80
 8000a42:	05db      	lsls	r3, r3, #23
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d113      	bne.n	8000a70 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a48:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <HAL_TIM_Base_MspInit+0x90>)
 8000a4a:	69da      	ldr	r2, [r3, #28]
 8000a4c:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <HAL_TIM_Base_MspInit+0x90>)
 8000a4e:	2101      	movs	r1, #1
 8000a50:	430a      	orrs	r2, r1
 8000a52:	61da      	str	r2, [r3, #28]
 8000a54:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <HAL_TIM_Base_MspInit+0x90>)
 8000a56:	69db      	ldr	r3, [r3, #28]
 8000a58:	2201      	movs	r2, #1
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a60:	2200      	movs	r2, #0
 8000a62:	2100      	movs	r1, #0
 8000a64:	200f      	movs	r0, #15
 8000a66:	f000 fa57 	bl	8000f18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a6a:	200f      	movs	r0, #15
 8000a6c:	f000 fa69 	bl	8000f42 <HAL_NVIC_EnableIRQ>
}
 8000a70:	46c0      	nop			; (mov r8, r8)
 8000a72:	46bd      	mov	sp, r7
 8000a74:	b004      	add	sp, #16
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40012c00 	.word	0x40012c00
 8000a7c:	40021000 	.word	0x40021000

08000a80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a80:	b590      	push	{r4, r7, lr}
 8000a82:	b08b      	sub	sp, #44	; 0x2c
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a88:	2414      	movs	r4, #20
 8000a8a:	193b      	adds	r3, r7, r4
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	2314      	movs	r3, #20
 8000a90:	001a      	movs	r2, r3
 8000a92:	2100      	movs	r1, #0
 8000a94:	f003 fcae 	bl	80043f4 <memset>
  if(htim->Instance==TIM1)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a2c      	ldr	r2, [pc, #176]	; (8000b50 <HAL_TIM_MspPostInit+0xd0>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d126      	bne.n	8000af0 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa2:	4b2c      	ldr	r3, [pc, #176]	; (8000b54 <HAL_TIM_MspPostInit+0xd4>)
 8000aa4:	695a      	ldr	r2, [r3, #20]
 8000aa6:	4b2b      	ldr	r3, [pc, #172]	; (8000b54 <HAL_TIM_MspPostInit+0xd4>)
 8000aa8:	2180      	movs	r1, #128	; 0x80
 8000aaa:	0289      	lsls	r1, r1, #10
 8000aac:	430a      	orrs	r2, r1
 8000aae:	615a      	str	r2, [r3, #20]
 8000ab0:	4b28      	ldr	r3, [pc, #160]	; (8000b54 <HAL_TIM_MspPostInit+0xd4>)
 8000ab2:	695a      	ldr	r2, [r3, #20]
 8000ab4:	2380      	movs	r3, #128	; 0x80
 8000ab6:	029b      	lsls	r3, r3, #10
 8000ab8:	4013      	ands	r3, r2
 8000aba:	613b      	str	r3, [r7, #16]
 8000abc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000abe:	193b      	adds	r3, r7, r4
 8000ac0:	2280      	movs	r2, #128	; 0x80
 8000ac2:	0052      	lsls	r2, r2, #1
 8000ac4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	0021      	movs	r1, r4
 8000ac8:	187b      	adds	r3, r7, r1
 8000aca:	2202      	movs	r2, #2
 8000acc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	187b      	adds	r3, r7, r1
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	187b      	adds	r3, r7, r1
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000ada:	187b      	adds	r3, r7, r1
 8000adc:	2202      	movs	r2, #2
 8000ade:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae0:	187a      	adds	r2, r7, r1
 8000ae2:	2390      	movs	r3, #144	; 0x90
 8000ae4:	05db      	lsls	r3, r3, #23
 8000ae6:	0011      	movs	r1, r2
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f000 fac5 	bl	8001078 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000aee:	e02a      	b.n	8000b46 <HAL_TIM_MspPostInit+0xc6>
  else if(htim->Instance==TIM2)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	2380      	movs	r3, #128	; 0x80
 8000af6:	05db      	lsls	r3, r3, #23
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d124      	bne.n	8000b46 <HAL_TIM_MspPostInit+0xc6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afc:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <HAL_TIM_MspPostInit+0xd4>)
 8000afe:	695a      	ldr	r2, [r3, #20]
 8000b00:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <HAL_TIM_MspPostInit+0xd4>)
 8000b02:	2180      	movs	r1, #128	; 0x80
 8000b04:	02c9      	lsls	r1, r1, #11
 8000b06:	430a      	orrs	r2, r1
 8000b08:	615a      	str	r2, [r3, #20]
 8000b0a:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <HAL_TIM_MspPostInit+0xd4>)
 8000b0c:	695a      	ldr	r2, [r3, #20]
 8000b0e:	2380      	movs	r3, #128	; 0x80
 8000b10:	02db      	lsls	r3, r3, #11
 8000b12:	4013      	ands	r3, r2
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b18:	2114      	movs	r1, #20
 8000b1a:	187b      	adds	r3, r7, r1
 8000b1c:	2280      	movs	r2, #128	; 0x80
 8000b1e:	0112      	lsls	r2, r2, #4
 8000b20:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b22:	187b      	adds	r3, r7, r1
 8000b24:	2202      	movs	r2, #2
 8000b26:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	187b      	adds	r3, r7, r1
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	187b      	adds	r3, r7, r1
 8000b30:	2200      	movs	r2, #0
 8000b32:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000b34:	187b      	adds	r3, r7, r1
 8000b36:	2202      	movs	r2, #2
 8000b38:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3a:	187b      	adds	r3, r7, r1
 8000b3c:	4a06      	ldr	r2, [pc, #24]	; (8000b58 <HAL_TIM_MspPostInit+0xd8>)
 8000b3e:	0019      	movs	r1, r3
 8000b40:	0010      	movs	r0, r2
 8000b42:	f000 fa99 	bl	8001078 <HAL_GPIO_Init>
}
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	b00b      	add	sp, #44	; 0x2c
 8000b4c:	bd90      	pop	{r4, r7, pc}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	40012c00 	.word	0x40012c00
 8000b54:	40021000 	.word	0x40021000
 8000b58:	48000400 	.word	0x48000400

08000b5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b5c:	b590      	push	{r4, r7, lr}
 8000b5e:	b08b      	sub	sp, #44	; 0x2c
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	2414      	movs	r4, #20
 8000b66:	193b      	adds	r3, r7, r4
 8000b68:	0018      	movs	r0, r3
 8000b6a:	2314      	movs	r3, #20
 8000b6c:	001a      	movs	r2, r3
 8000b6e:	2100      	movs	r1, #0
 8000b70:	f003 fc40 	bl	80043f4 <memset>
  if(huart->Instance==USART1)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a21      	ldr	r2, [pc, #132]	; (8000c00 <HAL_UART_MspInit+0xa4>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d13b      	bne.n	8000bf6 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b7e:	4b21      	ldr	r3, [pc, #132]	; (8000c04 <HAL_UART_MspInit+0xa8>)
 8000b80:	699a      	ldr	r2, [r3, #24]
 8000b82:	4b20      	ldr	r3, [pc, #128]	; (8000c04 <HAL_UART_MspInit+0xa8>)
 8000b84:	2180      	movs	r1, #128	; 0x80
 8000b86:	01c9      	lsls	r1, r1, #7
 8000b88:	430a      	orrs	r2, r1
 8000b8a:	619a      	str	r2, [r3, #24]
 8000b8c:	4b1d      	ldr	r3, [pc, #116]	; (8000c04 <HAL_UART_MspInit+0xa8>)
 8000b8e:	699a      	ldr	r2, [r3, #24]
 8000b90:	2380      	movs	r3, #128	; 0x80
 8000b92:	01db      	lsls	r3, r3, #7
 8000b94:	4013      	ands	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
 8000b98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9a:	4b1a      	ldr	r3, [pc, #104]	; (8000c04 <HAL_UART_MspInit+0xa8>)
 8000b9c:	695a      	ldr	r2, [r3, #20]
 8000b9e:	4b19      	ldr	r3, [pc, #100]	; (8000c04 <HAL_UART_MspInit+0xa8>)
 8000ba0:	2180      	movs	r1, #128	; 0x80
 8000ba2:	0289      	lsls	r1, r1, #10
 8000ba4:	430a      	orrs	r2, r1
 8000ba6:	615a      	str	r2, [r3, #20]
 8000ba8:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <HAL_UART_MspInit+0xa8>)
 8000baa:	695a      	ldr	r2, [r3, #20]
 8000bac:	2380      	movs	r3, #128	; 0x80
 8000bae:	029b      	lsls	r3, r3, #10
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bb6:	193b      	adds	r3, r7, r4
 8000bb8:	22c0      	movs	r2, #192	; 0xc0
 8000bba:	00d2      	lsls	r2, r2, #3
 8000bbc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbe:	0021      	movs	r1, r4
 8000bc0:	187b      	adds	r3, r7, r1
 8000bc2:	2202      	movs	r2, #2
 8000bc4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	187b      	adds	r3, r7, r1
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	2203      	movs	r2, #3
 8000bd0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000bd2:	187b      	adds	r3, r7, r1
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd8:	187a      	adds	r2, r7, r1
 8000bda:	2390      	movs	r3, #144	; 0x90
 8000bdc:	05db      	lsls	r3, r3, #23
 8000bde:	0011      	movs	r1, r2
 8000be0:	0018      	movs	r0, r3
 8000be2:	f000 fa49 	bl	8001078 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2100      	movs	r1, #0
 8000bea:	201b      	movs	r0, #27
 8000bec:	f000 f994 	bl	8000f18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bf0:	201b      	movs	r0, #27
 8000bf2:	f000 f9a6 	bl	8000f42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	b00b      	add	sp, #44	; 0x2c
 8000bfc:	bd90      	pop	{r4, r7, pc}
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	40013800 	.word	0x40013800
 8000c04:	40021000 	.word	0x40021000

08000c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <NMI_Handler+0x4>

08000c0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c12:	e7fe      	b.n	8000c12 <HardFault_Handler+0x4>

08000c14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c18:	46c0      	nop			; (mov r8, r8)
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c2c:	f000 f8ac 	bl	8000d88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c30:	46c0      	nop			; (mov r8, r8)
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
	...

08000c38 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c3c:	4b03      	ldr	r3, [pc, #12]	; (8000c4c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f001 fe58 	bl	80028f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000c44:	46c0      	nop			; (mov r8, r8)
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	2000014c 	.word	0x2000014c

08000c50 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c54:	4b03      	ldr	r3, [pc, #12]	; (8000c64 <TIM1_CC_IRQHandler+0x14>)
 8000c56:	0018      	movs	r0, r3
 8000c58:	f001 fe4c 	bl	80028f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000c5c:	46c0      	nop			; (mov r8, r8)
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	2000014c 	.word	0x2000014c

08000c68 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c6c:	4b03      	ldr	r3, [pc, #12]	; (8000c7c <TIM2_IRQHandler+0x14>)
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f001 fe40 	bl	80028f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c74:	46c0      	nop			; (mov r8, r8)
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	200001fc 	.word	0x200001fc

08000c80 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c84:	4b03      	ldr	r3, [pc, #12]	; (8000c94 <USART1_IRQHandler+0x14>)
 8000c86:	0018      	movs	r0, r3
 8000c88:	f002 fcf0 	bl	800366c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c8c:	46c0      	nop			; (mov r8, r8)
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	200000c8 	.word	0x200000c8

08000c98 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000c9c:	46c0      	nop			; (mov r8, r8)
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
	...

08000ca4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ca4:	480d      	ldr	r0, [pc, #52]	; (8000cdc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ca6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ca8:	480d      	ldr	r0, [pc, #52]	; (8000ce0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000caa:	490e      	ldr	r1, [pc, #56]	; (8000ce4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cac:	4a0e      	ldr	r2, [pc, #56]	; (8000ce8 <LoopForever+0xe>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb0:	e002      	b.n	8000cb8 <LoopCopyDataInit>

08000cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb6:	3304      	adds	r3, #4

08000cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cbc:	d3f9      	bcc.n	8000cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cbe:	4a0b      	ldr	r2, [pc, #44]	; (8000cec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cc0:	4c0b      	ldr	r4, [pc, #44]	; (8000cf0 <LoopForever+0x16>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc4:	e001      	b.n	8000cca <LoopFillZerobss>

08000cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc8:	3204      	adds	r2, #4

08000cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ccc:	d3fb      	bcc.n	8000cc6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000cce:	f7ff ffe3 	bl	8000c98 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000cd2:	f003 fb6b 	bl	80043ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cd6:	f7ff fb13 	bl	8000300 <main>

08000cda <LoopForever>:

LoopForever:
    b LoopForever
 8000cda:	e7fe      	b.n	8000cda <LoopForever>
  ldr   r0, =_estack
 8000cdc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ce8:	08004460 	.word	0x08004460
  ldr r2, =_sbss
 8000cec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cf0:	20000248 	.word	0x20000248

08000cf4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cf4:	e7fe      	b.n	8000cf4 <ADC1_COMP_IRQHandler>
	...

08000cf8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cfc:	4b07      	ldr	r3, [pc, #28]	; (8000d1c <HAL_Init+0x24>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_Init+0x24>)
 8000d02:	2110      	movs	r1, #16
 8000d04:	430a      	orrs	r2, r1
 8000d06:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000d08:	2003      	movs	r0, #3
 8000d0a:	f000 f809 	bl	8000d20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d0e:	f7ff fdbf 	bl	8000890 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d12:	2300      	movs	r3, #0
}
 8000d14:	0018      	movs	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	40022000 	.word	0x40022000

08000d20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d20:	b590      	push	{r4, r7, lr}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d28:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <HAL_InitTick+0x5c>)
 8000d2a:	681c      	ldr	r4, [r3, #0]
 8000d2c:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <HAL_InitTick+0x60>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	0019      	movs	r1, r3
 8000d32:	23fa      	movs	r3, #250	; 0xfa
 8000d34:	0098      	lsls	r0, r3, #2
 8000d36:	f7ff f9e7 	bl	8000108 <__udivsi3>
 8000d3a:	0003      	movs	r3, r0
 8000d3c:	0019      	movs	r1, r3
 8000d3e:	0020      	movs	r0, r4
 8000d40:	f7ff f9e2 	bl	8000108 <__udivsi3>
 8000d44:	0003      	movs	r3, r0
 8000d46:	0018      	movs	r0, r3
 8000d48:	f000 f90b 	bl	8000f62 <HAL_SYSTICK_Config>
 8000d4c:	1e03      	subs	r3, r0, #0
 8000d4e:	d001      	beq.n	8000d54 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d50:	2301      	movs	r3, #1
 8000d52:	e00f      	b.n	8000d74 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b03      	cmp	r3, #3
 8000d58:	d80b      	bhi.n	8000d72 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d5a:	6879      	ldr	r1, [r7, #4]
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	425b      	negs	r3, r3
 8000d60:	2200      	movs	r2, #0
 8000d62:	0018      	movs	r0, r3
 8000d64:	f000 f8d8 	bl	8000f18 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <HAL_InitTick+0x64>)
 8000d6a:	687a      	ldr	r2, [r7, #4]
 8000d6c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	e000      	b.n	8000d74 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
}
 8000d74:	0018      	movs	r0, r3
 8000d76:	46bd      	mov	sp, r7
 8000d78:	b003      	add	sp, #12
 8000d7a:	bd90      	pop	{r4, r7, pc}
 8000d7c:	20000000 	.word	0x20000000
 8000d80:	20000008 	.word	0x20000008
 8000d84:	20000004 	.word	0x20000004

08000d88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d8c:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <HAL_IncTick+0x1c>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	001a      	movs	r2, r3
 8000d92:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <HAL_IncTick+0x20>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	18d2      	adds	r2, r2, r3
 8000d98:	4b03      	ldr	r3, [pc, #12]	; (8000da8 <HAL_IncTick+0x20>)
 8000d9a:	601a      	str	r2, [r3, #0]
}
 8000d9c:	46c0      	nop			; (mov r8, r8)
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	20000008 	.word	0x20000008
 8000da8:	20000244 	.word	0x20000244

08000dac <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  return uwTick;
 8000db0:	4b02      	ldr	r3, [pc, #8]	; (8000dbc <HAL_GetTick+0x10>)
 8000db2:	681b      	ldr	r3, [r3, #0]
}
 8000db4:	0018      	movs	r0, r3
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	20000244 	.word	0x20000244

08000dc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	0002      	movs	r2, r0
 8000dc8:	1dfb      	adds	r3, r7, #7
 8000dca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dcc:	1dfb      	adds	r3, r7, #7
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b7f      	cmp	r3, #127	; 0x7f
 8000dd2:	d809      	bhi.n	8000de8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dd4:	1dfb      	adds	r3, r7, #7
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	001a      	movs	r2, r3
 8000dda:	231f      	movs	r3, #31
 8000ddc:	401a      	ands	r2, r3
 8000dde:	4b04      	ldr	r3, [pc, #16]	; (8000df0 <__NVIC_EnableIRQ+0x30>)
 8000de0:	2101      	movs	r1, #1
 8000de2:	4091      	lsls	r1, r2
 8000de4:	000a      	movs	r2, r1
 8000de6:	601a      	str	r2, [r3, #0]
  }
}
 8000de8:	46c0      	nop			; (mov r8, r8)
 8000dea:	46bd      	mov	sp, r7
 8000dec:	b002      	add	sp, #8
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	e000e100 	.word	0xe000e100

08000df4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df4:	b590      	push	{r4, r7, lr}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	0002      	movs	r2, r0
 8000dfc:	6039      	str	r1, [r7, #0]
 8000dfe:	1dfb      	adds	r3, r7, #7
 8000e00:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e02:	1dfb      	adds	r3, r7, #7
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2b7f      	cmp	r3, #127	; 0x7f
 8000e08:	d828      	bhi.n	8000e5c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e0a:	4a2f      	ldr	r2, [pc, #188]	; (8000ec8 <__NVIC_SetPriority+0xd4>)
 8000e0c:	1dfb      	adds	r3, r7, #7
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	b25b      	sxtb	r3, r3
 8000e12:	089b      	lsrs	r3, r3, #2
 8000e14:	33c0      	adds	r3, #192	; 0xc0
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	589b      	ldr	r3, [r3, r2]
 8000e1a:	1dfa      	adds	r2, r7, #7
 8000e1c:	7812      	ldrb	r2, [r2, #0]
 8000e1e:	0011      	movs	r1, r2
 8000e20:	2203      	movs	r2, #3
 8000e22:	400a      	ands	r2, r1
 8000e24:	00d2      	lsls	r2, r2, #3
 8000e26:	21ff      	movs	r1, #255	; 0xff
 8000e28:	4091      	lsls	r1, r2
 8000e2a:	000a      	movs	r2, r1
 8000e2c:	43d2      	mvns	r2, r2
 8000e2e:	401a      	ands	r2, r3
 8000e30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	019b      	lsls	r3, r3, #6
 8000e36:	22ff      	movs	r2, #255	; 0xff
 8000e38:	401a      	ands	r2, r3
 8000e3a:	1dfb      	adds	r3, r7, #7
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	0018      	movs	r0, r3
 8000e40:	2303      	movs	r3, #3
 8000e42:	4003      	ands	r3, r0
 8000e44:	00db      	lsls	r3, r3, #3
 8000e46:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e48:	481f      	ldr	r0, [pc, #124]	; (8000ec8 <__NVIC_SetPriority+0xd4>)
 8000e4a:	1dfb      	adds	r3, r7, #7
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	b25b      	sxtb	r3, r3
 8000e50:	089b      	lsrs	r3, r3, #2
 8000e52:	430a      	orrs	r2, r1
 8000e54:	33c0      	adds	r3, #192	; 0xc0
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e5a:	e031      	b.n	8000ec0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e5c:	4a1b      	ldr	r2, [pc, #108]	; (8000ecc <__NVIC_SetPriority+0xd8>)
 8000e5e:	1dfb      	adds	r3, r7, #7
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	0019      	movs	r1, r3
 8000e64:	230f      	movs	r3, #15
 8000e66:	400b      	ands	r3, r1
 8000e68:	3b08      	subs	r3, #8
 8000e6a:	089b      	lsrs	r3, r3, #2
 8000e6c:	3306      	adds	r3, #6
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	18d3      	adds	r3, r2, r3
 8000e72:	3304      	adds	r3, #4
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	1dfa      	adds	r2, r7, #7
 8000e78:	7812      	ldrb	r2, [r2, #0]
 8000e7a:	0011      	movs	r1, r2
 8000e7c:	2203      	movs	r2, #3
 8000e7e:	400a      	ands	r2, r1
 8000e80:	00d2      	lsls	r2, r2, #3
 8000e82:	21ff      	movs	r1, #255	; 0xff
 8000e84:	4091      	lsls	r1, r2
 8000e86:	000a      	movs	r2, r1
 8000e88:	43d2      	mvns	r2, r2
 8000e8a:	401a      	ands	r2, r3
 8000e8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	019b      	lsls	r3, r3, #6
 8000e92:	22ff      	movs	r2, #255	; 0xff
 8000e94:	401a      	ands	r2, r3
 8000e96:	1dfb      	adds	r3, r7, #7
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	4003      	ands	r3, r0
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ea4:	4809      	ldr	r0, [pc, #36]	; (8000ecc <__NVIC_SetPriority+0xd8>)
 8000ea6:	1dfb      	adds	r3, r7, #7
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	001c      	movs	r4, r3
 8000eac:	230f      	movs	r3, #15
 8000eae:	4023      	ands	r3, r4
 8000eb0:	3b08      	subs	r3, #8
 8000eb2:	089b      	lsrs	r3, r3, #2
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	3306      	adds	r3, #6
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	18c3      	adds	r3, r0, r3
 8000ebc:	3304      	adds	r3, #4
 8000ebe:	601a      	str	r2, [r3, #0]
}
 8000ec0:	46c0      	nop			; (mov r8, r8)
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	b003      	add	sp, #12
 8000ec6:	bd90      	pop	{r4, r7, pc}
 8000ec8:	e000e100 	.word	0xe000e100
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	1e5a      	subs	r2, r3, #1
 8000edc:	2380      	movs	r3, #128	; 0x80
 8000ede:	045b      	lsls	r3, r3, #17
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d301      	bcc.n	8000ee8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e010      	b.n	8000f0a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee8:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <SysTick_Config+0x44>)
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	3a01      	subs	r2, #1
 8000eee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	425b      	negs	r3, r3
 8000ef4:	2103      	movs	r1, #3
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f7ff ff7c 	bl	8000df4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000efc:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <SysTick_Config+0x44>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f02:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <SysTick_Config+0x44>)
 8000f04:	2207      	movs	r2, #7
 8000f06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	b002      	add	sp, #8
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	e000e010 	.word	0xe000e010

08000f18 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60b9      	str	r1, [r7, #8]
 8000f20:	607a      	str	r2, [r7, #4]
 8000f22:	210f      	movs	r1, #15
 8000f24:	187b      	adds	r3, r7, r1
 8000f26:	1c02      	adds	r2, r0, #0
 8000f28:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f2a:	68ba      	ldr	r2, [r7, #8]
 8000f2c:	187b      	adds	r3, r7, r1
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	b25b      	sxtb	r3, r3
 8000f32:	0011      	movs	r1, r2
 8000f34:	0018      	movs	r0, r3
 8000f36:	f7ff ff5d 	bl	8000df4 <__NVIC_SetPriority>
}
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	b004      	add	sp, #16
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	0002      	movs	r2, r0
 8000f4a:	1dfb      	adds	r3, r7, #7
 8000f4c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f4e:	1dfb      	adds	r3, r7, #7
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	b25b      	sxtb	r3, r3
 8000f54:	0018      	movs	r0, r3
 8000f56:	f7ff ff33 	bl	8000dc0 <__NVIC_EnableIRQ>
}
 8000f5a:	46c0      	nop			; (mov r8, r8)
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	b002      	add	sp, #8
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	f7ff ffaf 	bl	8000ed0 <SysTick_Config>
 8000f72:	0003      	movs	r3, r0
}
 8000f74:	0018      	movs	r0, r3
 8000f76:	46bd      	mov	sp, r7
 8000f78:	b002      	add	sp, #8
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2221      	movs	r2, #33	; 0x21
 8000f88:	5c9b      	ldrb	r3, [r3, r2]
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d008      	beq.n	8000fa2 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2204      	movs	r2, #4
 8000f94:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2220      	movs	r2, #32
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e020      	b.n	8000fe4 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	210e      	movs	r1, #14
 8000fae:	438a      	bics	r2, r1
 8000fb0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	438a      	bics	r2, r1
 8000fc0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fca:	2101      	movs	r1, #1
 8000fcc:	4091      	lsls	r1, r2
 8000fce:	000a      	movs	r2, r1
 8000fd0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2221      	movs	r2, #33	; 0x21
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2220      	movs	r2, #32
 8000fde:	2100      	movs	r1, #0
 8000fe0:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000fe2:	2300      	movs	r3, #0
}
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	b002      	add	sp, #8
 8000fea:	bd80      	pop	{r7, pc}

08000fec <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ff4:	210f      	movs	r1, #15
 8000ff6:	187b      	adds	r3, r7, r1
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2221      	movs	r2, #33	; 0x21
 8001000:	5c9b      	ldrb	r3, [r3, r2]
 8001002:	b2db      	uxtb	r3, r3
 8001004:	2b02      	cmp	r3, #2
 8001006:	d006      	beq.n	8001016 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2204      	movs	r2, #4
 800100c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800100e:	187b      	adds	r3, r7, r1
 8001010:	2201      	movs	r2, #1
 8001012:	701a      	strb	r2, [r3, #0]
 8001014:	e028      	b.n	8001068 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	210e      	movs	r1, #14
 8001022:	438a      	bics	r2, r1
 8001024:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2101      	movs	r1, #1
 8001032:	438a      	bics	r2, r1
 8001034:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800103e:	2101      	movs	r1, #1
 8001040:	4091      	lsls	r1, r2
 8001042:	000a      	movs	r2, r1
 8001044:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2221      	movs	r2, #33	; 0x21
 800104a:	2101      	movs	r1, #1
 800104c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2220      	movs	r2, #32
 8001052:	2100      	movs	r1, #0
 8001054:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800105a:	2b00      	cmp	r3, #0
 800105c:	d004      	beq.n	8001068 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	0010      	movs	r0, r2
 8001066:	4798      	blx	r3
    } 
  }
  return status;
 8001068:	230f      	movs	r3, #15
 800106a:	18fb      	adds	r3, r7, r3
 800106c:	781b      	ldrb	r3, [r3, #0]
}
 800106e:	0018      	movs	r0, r3
 8001070:	46bd      	mov	sp, r7
 8001072:	b004      	add	sp, #16
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001086:	e14f      	b.n	8001328 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2101      	movs	r1, #1
 800108e:	697a      	ldr	r2, [r7, #20]
 8001090:	4091      	lsls	r1, r2
 8001092:	000a      	movs	r2, r1
 8001094:	4013      	ands	r3, r2
 8001096:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d100      	bne.n	80010a0 <HAL_GPIO_Init+0x28>
 800109e:	e140      	b.n	8001322 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	2203      	movs	r2, #3
 80010a6:	4013      	ands	r3, r2
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d005      	beq.n	80010b8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	2203      	movs	r2, #3
 80010b2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d130      	bne.n	800111a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	2203      	movs	r2, #3
 80010c4:	409a      	lsls	r2, r3
 80010c6:	0013      	movs	r3, r2
 80010c8:	43da      	mvns	r2, r3
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	4013      	ands	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	68da      	ldr	r2, [r3, #12]
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	409a      	lsls	r2, r3
 80010da:	0013      	movs	r3, r2
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	4313      	orrs	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010ee:	2201      	movs	r2, #1
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	409a      	lsls	r2, r3
 80010f4:	0013      	movs	r3, r2
 80010f6:	43da      	mvns	r2, r3
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	4013      	ands	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	091b      	lsrs	r3, r3, #4
 8001104:	2201      	movs	r2, #1
 8001106:	401a      	ands	r2, r3
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	409a      	lsls	r2, r3
 800110c:	0013      	movs	r3, r2
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4313      	orrs	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	2203      	movs	r2, #3
 8001120:	4013      	ands	r3, r2
 8001122:	2b03      	cmp	r3, #3
 8001124:	d017      	beq.n	8001156 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	2203      	movs	r2, #3
 8001132:	409a      	lsls	r2, r3
 8001134:	0013      	movs	r3, r2
 8001136:	43da      	mvns	r2, r3
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	4013      	ands	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	689a      	ldr	r2, [r3, #8]
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	409a      	lsls	r2, r3
 8001148:	0013      	movs	r3, r2
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4313      	orrs	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2203      	movs	r2, #3
 800115c:	4013      	ands	r3, r2
 800115e:	2b02      	cmp	r3, #2
 8001160:	d123      	bne.n	80011aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	08da      	lsrs	r2, r3, #3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	3208      	adds	r2, #8
 800116a:	0092      	lsls	r2, r2, #2
 800116c:	58d3      	ldr	r3, [r2, r3]
 800116e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	2207      	movs	r2, #7
 8001174:	4013      	ands	r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	220f      	movs	r2, #15
 800117a:	409a      	lsls	r2, r3
 800117c:	0013      	movs	r3, r2
 800117e:	43da      	mvns	r2, r3
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	4013      	ands	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	691a      	ldr	r2, [r3, #16]
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	2107      	movs	r1, #7
 800118e:	400b      	ands	r3, r1
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	409a      	lsls	r2, r3
 8001194:	0013      	movs	r3, r2
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4313      	orrs	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	08da      	lsrs	r2, r3, #3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3208      	adds	r2, #8
 80011a4:	0092      	lsls	r2, r2, #2
 80011a6:	6939      	ldr	r1, [r7, #16]
 80011a8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	2203      	movs	r2, #3
 80011b6:	409a      	lsls	r2, r3
 80011b8:	0013      	movs	r3, r2
 80011ba:	43da      	mvns	r2, r3
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	4013      	ands	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	2203      	movs	r2, #3
 80011c8:	401a      	ands	r2, r3
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	409a      	lsls	r2, r3
 80011d0:	0013      	movs	r3, r2
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	23c0      	movs	r3, #192	; 0xc0
 80011e4:	029b      	lsls	r3, r3, #10
 80011e6:	4013      	ands	r3, r2
 80011e8:	d100      	bne.n	80011ec <HAL_GPIO_Init+0x174>
 80011ea:	e09a      	b.n	8001322 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ec:	4b54      	ldr	r3, [pc, #336]	; (8001340 <HAL_GPIO_Init+0x2c8>)
 80011ee:	699a      	ldr	r2, [r3, #24]
 80011f0:	4b53      	ldr	r3, [pc, #332]	; (8001340 <HAL_GPIO_Init+0x2c8>)
 80011f2:	2101      	movs	r1, #1
 80011f4:	430a      	orrs	r2, r1
 80011f6:	619a      	str	r2, [r3, #24]
 80011f8:	4b51      	ldr	r3, [pc, #324]	; (8001340 <HAL_GPIO_Init+0x2c8>)
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	2201      	movs	r2, #1
 80011fe:	4013      	ands	r3, r2
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001204:	4a4f      	ldr	r2, [pc, #316]	; (8001344 <HAL_GPIO_Init+0x2cc>)
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	089b      	lsrs	r3, r3, #2
 800120a:	3302      	adds	r3, #2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	589b      	ldr	r3, [r3, r2]
 8001210:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	2203      	movs	r2, #3
 8001216:	4013      	ands	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	220f      	movs	r2, #15
 800121c:	409a      	lsls	r2, r3
 800121e:	0013      	movs	r3, r2
 8001220:	43da      	mvns	r2, r3
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	4013      	ands	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	2390      	movs	r3, #144	; 0x90
 800122c:	05db      	lsls	r3, r3, #23
 800122e:	429a      	cmp	r2, r3
 8001230:	d013      	beq.n	800125a <HAL_GPIO_Init+0x1e2>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a44      	ldr	r2, [pc, #272]	; (8001348 <HAL_GPIO_Init+0x2d0>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d00d      	beq.n	8001256 <HAL_GPIO_Init+0x1de>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a43      	ldr	r2, [pc, #268]	; (800134c <HAL_GPIO_Init+0x2d4>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d007      	beq.n	8001252 <HAL_GPIO_Init+0x1da>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a42      	ldr	r2, [pc, #264]	; (8001350 <HAL_GPIO_Init+0x2d8>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d101      	bne.n	800124e <HAL_GPIO_Init+0x1d6>
 800124a:	2303      	movs	r3, #3
 800124c:	e006      	b.n	800125c <HAL_GPIO_Init+0x1e4>
 800124e:	2305      	movs	r3, #5
 8001250:	e004      	b.n	800125c <HAL_GPIO_Init+0x1e4>
 8001252:	2302      	movs	r3, #2
 8001254:	e002      	b.n	800125c <HAL_GPIO_Init+0x1e4>
 8001256:	2301      	movs	r3, #1
 8001258:	e000      	b.n	800125c <HAL_GPIO_Init+0x1e4>
 800125a:	2300      	movs	r3, #0
 800125c:	697a      	ldr	r2, [r7, #20]
 800125e:	2103      	movs	r1, #3
 8001260:	400a      	ands	r2, r1
 8001262:	0092      	lsls	r2, r2, #2
 8001264:	4093      	lsls	r3, r2
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800126c:	4935      	ldr	r1, [pc, #212]	; (8001344 <HAL_GPIO_Init+0x2cc>)
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	089b      	lsrs	r3, r3, #2
 8001272:	3302      	adds	r3, #2
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800127a:	4b36      	ldr	r3, [pc, #216]	; (8001354 <HAL_GPIO_Init+0x2dc>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	43da      	mvns	r2, r3
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	4013      	ands	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685a      	ldr	r2, [r3, #4]
 800128e:	2380      	movs	r3, #128	; 0x80
 8001290:	025b      	lsls	r3, r3, #9
 8001292:	4013      	ands	r3, r2
 8001294:	d003      	beq.n	800129e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4313      	orrs	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800129e:	4b2d      	ldr	r3, [pc, #180]	; (8001354 <HAL_GPIO_Init+0x2dc>)
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80012a4:	4b2b      	ldr	r3, [pc, #172]	; (8001354 <HAL_GPIO_Init+0x2dc>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	43da      	mvns	r2, r3
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	4013      	ands	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685a      	ldr	r2, [r3, #4]
 80012b8:	2380      	movs	r3, #128	; 0x80
 80012ba:	029b      	lsls	r3, r3, #10
 80012bc:	4013      	ands	r3, r2
 80012be:	d003      	beq.n	80012c8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012c8:	4b22      	ldr	r3, [pc, #136]	; (8001354 <HAL_GPIO_Init+0x2dc>)
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ce:	4b21      	ldr	r3, [pc, #132]	; (8001354 <HAL_GPIO_Init+0x2dc>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	43da      	mvns	r2, r3
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	4013      	ands	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685a      	ldr	r2, [r3, #4]
 80012e2:	2380      	movs	r3, #128	; 0x80
 80012e4:	035b      	lsls	r3, r3, #13
 80012e6:	4013      	ands	r3, r2
 80012e8:	d003      	beq.n	80012f2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012f2:	4b18      	ldr	r3, [pc, #96]	; (8001354 <HAL_GPIO_Init+0x2dc>)
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80012f8:	4b16      	ldr	r3, [pc, #88]	; (8001354 <HAL_GPIO_Init+0x2dc>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	43da      	mvns	r2, r3
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	4013      	ands	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685a      	ldr	r2, [r3, #4]
 800130c:	2380      	movs	r3, #128	; 0x80
 800130e:	039b      	lsls	r3, r3, #14
 8001310:	4013      	ands	r3, r2
 8001312:	d003      	beq.n	800131c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	4313      	orrs	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800131c:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <HAL_GPIO_Init+0x2dc>)
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	3301      	adds	r3, #1
 8001326:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	40da      	lsrs	r2, r3
 8001330:	1e13      	subs	r3, r2, #0
 8001332:	d000      	beq.n	8001336 <HAL_GPIO_Init+0x2be>
 8001334:	e6a8      	b.n	8001088 <HAL_GPIO_Init+0x10>
  } 
}
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	46c0      	nop			; (mov r8, r8)
 800133a:	46bd      	mov	sp, r7
 800133c:	b006      	add	sp, #24
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40021000 	.word	0x40021000
 8001344:	40010000 	.word	0x40010000
 8001348:	48000400 	.word	0x48000400
 800134c:	48000800 	.word	0x48000800
 8001350:	48000c00 	.word	0x48000c00
 8001354:	40010400 	.word	0x40010400

08001358 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	000a      	movs	r2, r1
 8001362:	1cbb      	adds	r3, r7, #2
 8001364:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	691b      	ldr	r3, [r3, #16]
 800136a:	1cba      	adds	r2, r7, #2
 800136c:	8812      	ldrh	r2, [r2, #0]
 800136e:	4013      	ands	r3, r2
 8001370:	d004      	beq.n	800137c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001372:	230f      	movs	r3, #15
 8001374:	18fb      	adds	r3, r7, r3
 8001376:	2201      	movs	r2, #1
 8001378:	701a      	strb	r2, [r3, #0]
 800137a:	e003      	b.n	8001384 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800137c:	230f      	movs	r3, #15
 800137e:	18fb      	adds	r3, r7, r3
 8001380:	2200      	movs	r2, #0
 8001382:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001384:	230f      	movs	r3, #15
 8001386:	18fb      	adds	r3, r7, r3
 8001388:	781b      	ldrb	r3, [r3, #0]
  }
 800138a:	0018      	movs	r0, r3
 800138c:	46bd      	mov	sp, r7
 800138e:	b004      	add	sp, #16
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
 800139a:	0008      	movs	r0, r1
 800139c:	0011      	movs	r1, r2
 800139e:	1cbb      	adds	r3, r7, #2
 80013a0:	1c02      	adds	r2, r0, #0
 80013a2:	801a      	strh	r2, [r3, #0]
 80013a4:	1c7b      	adds	r3, r7, #1
 80013a6:	1c0a      	adds	r2, r1, #0
 80013a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013aa:	1c7b      	adds	r3, r7, #1
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d004      	beq.n	80013bc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013b2:	1cbb      	adds	r3, r7, #2
 80013b4:	881a      	ldrh	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013ba:	e003      	b.n	80013c4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013bc:	1cbb      	adds	r3, r7, #2
 80013be:	881a      	ldrh	r2, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013c4:	46c0      	nop			; (mov r8, r8)
 80013c6:	46bd      	mov	sp, r7
 80013c8:	b002      	add	sp, #8
 80013ca:	bd80      	pop	{r7, pc}

080013cc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	000a      	movs	r2, r1
 80013d6:	1cbb      	adds	r3, r7, #2
 80013d8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013e0:	1cbb      	adds	r3, r7, #2
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	68fa      	ldr	r2, [r7, #12]
 80013e6:	4013      	ands	r3, r2
 80013e8:	041a      	lsls	r2, r3, #16
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	43db      	mvns	r3, r3
 80013ee:	1cb9      	adds	r1, r7, #2
 80013f0:	8809      	ldrh	r1, [r1, #0]
 80013f2:	400b      	ands	r3, r1
 80013f4:	431a      	orrs	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	619a      	str	r2, [r3, #24]
}
 80013fa:	46c0      	nop			; (mov r8, r8)
 80013fc:	46bd      	mov	sp, r7
 80013fe:	b004      	add	sp, #16
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b088      	sub	sp, #32
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d101      	bne.n	8001416 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e301      	b.n	8001a1a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2201      	movs	r2, #1
 800141c:	4013      	ands	r3, r2
 800141e:	d100      	bne.n	8001422 <HAL_RCC_OscConfig+0x1e>
 8001420:	e08d      	b.n	800153e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001422:	4bc3      	ldr	r3, [pc, #780]	; (8001730 <HAL_RCC_OscConfig+0x32c>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	220c      	movs	r2, #12
 8001428:	4013      	ands	r3, r2
 800142a:	2b04      	cmp	r3, #4
 800142c:	d00e      	beq.n	800144c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800142e:	4bc0      	ldr	r3, [pc, #768]	; (8001730 <HAL_RCC_OscConfig+0x32c>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	220c      	movs	r2, #12
 8001434:	4013      	ands	r3, r2
 8001436:	2b08      	cmp	r3, #8
 8001438:	d116      	bne.n	8001468 <HAL_RCC_OscConfig+0x64>
 800143a:	4bbd      	ldr	r3, [pc, #756]	; (8001730 <HAL_RCC_OscConfig+0x32c>)
 800143c:	685a      	ldr	r2, [r3, #4]
 800143e:	2380      	movs	r3, #128	; 0x80
 8001440:	025b      	lsls	r3, r3, #9
 8001442:	401a      	ands	r2, r3
 8001444:	2380      	movs	r3, #128	; 0x80
 8001446:	025b      	lsls	r3, r3, #9
 8001448:	429a      	cmp	r2, r3
 800144a:	d10d      	bne.n	8001468 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800144c:	4bb8      	ldr	r3, [pc, #736]	; (8001730 <HAL_RCC_OscConfig+0x32c>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	2380      	movs	r3, #128	; 0x80
 8001452:	029b      	lsls	r3, r3, #10
 8001454:	4013      	ands	r3, r2
 8001456:	d100      	bne.n	800145a <HAL_RCC_OscConfig+0x56>
 8001458:	e070      	b.n	800153c <HAL_RCC_OscConfig+0x138>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d000      	beq.n	8001464 <HAL_RCC_OscConfig+0x60>
 8001462:	e06b      	b.n	800153c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e2d8      	b.n	8001a1a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d107      	bne.n	8001480 <HAL_RCC_OscConfig+0x7c>
 8001470:	4baf      	ldr	r3, [pc, #700]	; (8001730 <HAL_RCC_OscConfig+0x32c>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	4bae      	ldr	r3, [pc, #696]	; (8001730 <HAL_RCC_OscConfig+0x32c>)
 8001476:	2180      	movs	r1, #128	; 0x80
 8001478:	0249      	lsls	r1, r1, #9
 800147a:	430a      	orrs	r2, r1
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	e02f      	b.n	80014e0 <HAL_RCC_OscConfig+0xdc>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d10c      	bne.n	80014a2 <HAL_RCC_OscConfig+0x9e>
 8001488:	4ba9      	ldr	r3, [pc, #676]	; (8001730 <HAL_RCC_OscConfig+0x32c>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	4ba8      	ldr	r3, [pc, #672]	; (8001730 <HAL_RCC_OscConfig+0x32c>)
 800148e:	49a9      	ldr	r1, [pc, #676]	; (8001734 <HAL_RCC_OscConfig+0x330>)
 8001490:	400a      	ands	r2, r1
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	4ba6      	ldr	r3, [pc, #664]	; (8001730 <HAL_RCC_OscConfig+0x32c>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	4ba5      	ldr	r3, [pc, #660]	; (8001730 <HAL_RCC_OscConfig+0x32c>)
 800149a:	49a7      	ldr	r1, [pc, #668]	; (8001738 <HAL_RCC_OscConfig+0x334>)
 800149c:	400a      	ands	r2, r1
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	e01e      	b.n	80014e0 <HAL_RCC_OscConfig+0xdc>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	2b05      	cmp	r3, #5
 80014a8:	d10e      	bne.n	80014c8 <HAL_RCC_OscConfig+0xc4>
 80014aa:	4ba1      	ldr	r3, [pc, #644]	; (8001730 <HAL_RCC_OscConfig+0x32c>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	4ba0      	ldr	r3, [pc, #640]	; (8001730 <HAL_RCC_OscConfig+0x32c>)
 80014b0:	2180      	movs	r1, #128	; 0x80
 80014b2:	02c9      	lsls	r1, r1, #11
 80014b4:	430a      	orrs	r2, r1
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	4b9d      	ldr	r3, [pc, #628]	; (8001730 <HAL_RCC_OscConfig+0x32c>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	4b9c      	ldr	r3, [pc, #624]	; (8001730 <HAL_RCC_OscConfig+0x32c>)
 80014be:	2180      	movs	r1, #128	; 0x80
 80014c0:	0249      	lsls	r1, r1, #9
 80014c2:	430a      	orrs	r2, r1
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	e00b      	b.n	80014e0 <HAL_RCC_OscConfig+0xdc>
 80014c8:	4b99      	ldr	r3, [pc, #612]	; (8001730 <HAL_RCC_OscConfig+0x32c>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4b98      	ldr	r3, [pc, #608]	; (8001730 <HAL_RCC_OscConfig+0x32c>)
 80014ce:	4999      	ldr	r1, [pc, #612]	; (8001734 <HAL_RCC_OscConfig+0x330>)
 80014d0:	400a      	ands	r2, r1
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	4b96      	ldr	r3, [pc, #600]	; (8001730 <HAL_RCC_OscConfig+0x32c>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4b95      	ldr	r3, [pc, #596]	; (8001730 <HAL_RCC_OscConfig+0x32c>)
 80014da:	4997      	ldr	r1, [pc, #604]	; (8001738 <HAL_RCC_OscConfig+0x334>)
 80014dc:	400a      	ands	r2, r1
 80014de:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d014      	beq.n	8001512 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e8:	f7ff fc60 	bl	8000dac <HAL_GetTick>
 80014ec:	0003      	movs	r3, r0
 80014ee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f0:	e008      	b.n	8001504 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014f2:	f7ff fc5b 	bl	8000dac <HAL_GetTick>
 80014f6:	0002      	movs	r2, r0
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b64      	cmp	r3, #100	; 0x64
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e28a      	b.n	8001a1a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001504:	4b8a      	ldr	r3, [pc, #552]	; (8001730 <HAL_RCC_OscConfig+0x32c>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	2380      	movs	r3, #128	; 0x80
 800150a:	029b      	lsls	r3, r3, #10
 800150c:	4013      	ands	r3, r2
 800150e:	d0f0      	beq.n	80014f2 <HAL_RCC_OscConfig+0xee>
 8001510:	e015      	b.n	800153e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001512:	f7ff fc4b 	bl	8000dac <HAL_GetTick>
 8001516:	0003      	movs	r3, r0
 8001518:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800151c:	f7ff fc46 	bl	8000dac <HAL_GetTick>
 8001520:	0002      	movs	r2, r0
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b64      	cmp	r3, #100	; 0x64
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e275      	b.n	8001a1a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800152e:	4b80      	ldr	r3, [pc, #512]	; (8001730 <HAL_RCC_OscConfig+0x32c>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	2380      	movs	r3, #128	; 0x80
 8001534:	029b      	lsls	r3, r3, #10
 8001536:	4013      	ands	r3, r2
 8001538:	d1f0      	bne.n	800151c <HAL_RCC_OscConfig+0x118>
 800153a:	e000      	b.n	800153e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800153c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2202      	movs	r2, #2
 8001544:	4013      	ands	r3, r2
 8001546:	d100      	bne.n	800154a <HAL_RCC_OscConfig+0x146>
 8001548:	e069      	b.n	800161e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800154a:	4b79      	ldr	r3, [pc, #484]	; (8001730 <HAL_RCC_OscConfig+0x32c>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	220c      	movs	r2, #12
 8001550:	4013      	ands	r3, r2
 8001552:	d00b      	beq.n	800156c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001554:	4b76      	ldr	r3, [pc, #472]	; (8001730 <HAL_RCC_OscConfig+0x32c>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	220c      	movs	r2, #12
 800155a:	4013      	ands	r3, r2
 800155c:	2b08      	cmp	r3, #8
 800155e:	d11c      	bne.n	800159a <HAL_RCC_OscConfig+0x196>
 8001560:	4b73      	ldr	r3, [pc, #460]	; (8001730 <HAL_RCC_OscConfig+0x32c>)
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	2380      	movs	r3, #128	; 0x80
 8001566:	025b      	lsls	r3, r3, #9
 8001568:	4013      	ands	r3, r2
 800156a:	d116      	bne.n	800159a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800156c:	4b70      	ldr	r3, [pc, #448]	; (8001730 <HAL_RCC_OscConfig+0x32c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2202      	movs	r2, #2
 8001572:	4013      	ands	r3, r2
 8001574:	d005      	beq.n	8001582 <HAL_RCC_OscConfig+0x17e>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d001      	beq.n	8001582 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e24b      	b.n	8001a1a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001582:	4b6b      	ldr	r3, [pc, #428]	; (8001730 <HAL_RCC_OscConfig+0x32c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	22f8      	movs	r2, #248	; 0xf8
 8001588:	4393      	bics	r3, r2
 800158a:	0019      	movs	r1, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	00da      	lsls	r2, r3, #3
 8001592:	4b67      	ldr	r3, [pc, #412]	; (8001730 <HAL_RCC_OscConfig+0x32c>)
 8001594:	430a      	orrs	r2, r1
 8001596:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001598:	e041      	b.n	800161e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d024      	beq.n	80015ec <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015a2:	4b63      	ldr	r3, [pc, #396]	; (8001730 <HAL_RCC_OscConfig+0x32c>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	4b62      	ldr	r3, [pc, #392]	; (8001730 <HAL_RCC_OscConfig+0x32c>)
 80015a8:	2101      	movs	r1, #1
 80015aa:	430a      	orrs	r2, r1
 80015ac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ae:	f7ff fbfd 	bl	8000dac <HAL_GetTick>
 80015b2:	0003      	movs	r3, r0
 80015b4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015b8:	f7ff fbf8 	bl	8000dac <HAL_GetTick>
 80015bc:	0002      	movs	r2, r0
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e227      	b.n	8001a1a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ca:	4b59      	ldr	r3, [pc, #356]	; (8001730 <HAL_RCC_OscConfig+0x32c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2202      	movs	r2, #2
 80015d0:	4013      	ands	r3, r2
 80015d2:	d0f1      	beq.n	80015b8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d4:	4b56      	ldr	r3, [pc, #344]	; (8001730 <HAL_RCC_OscConfig+0x32c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	22f8      	movs	r2, #248	; 0xf8
 80015da:	4393      	bics	r3, r2
 80015dc:	0019      	movs	r1, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	00da      	lsls	r2, r3, #3
 80015e4:	4b52      	ldr	r3, [pc, #328]	; (8001730 <HAL_RCC_OscConfig+0x32c>)
 80015e6:	430a      	orrs	r2, r1
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	e018      	b.n	800161e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ec:	4b50      	ldr	r3, [pc, #320]	; (8001730 <HAL_RCC_OscConfig+0x32c>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4b4f      	ldr	r3, [pc, #316]	; (8001730 <HAL_RCC_OscConfig+0x32c>)
 80015f2:	2101      	movs	r1, #1
 80015f4:	438a      	bics	r2, r1
 80015f6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f8:	f7ff fbd8 	bl	8000dac <HAL_GetTick>
 80015fc:	0003      	movs	r3, r0
 80015fe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001602:	f7ff fbd3 	bl	8000dac <HAL_GetTick>
 8001606:	0002      	movs	r2, r0
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e202      	b.n	8001a1a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001614:	4b46      	ldr	r3, [pc, #280]	; (8001730 <HAL_RCC_OscConfig+0x32c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2202      	movs	r2, #2
 800161a:	4013      	ands	r3, r2
 800161c:	d1f1      	bne.n	8001602 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2208      	movs	r2, #8
 8001624:	4013      	ands	r3, r2
 8001626:	d036      	beq.n	8001696 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	69db      	ldr	r3, [r3, #28]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d019      	beq.n	8001664 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001630:	4b3f      	ldr	r3, [pc, #252]	; (8001730 <HAL_RCC_OscConfig+0x32c>)
 8001632:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001634:	4b3e      	ldr	r3, [pc, #248]	; (8001730 <HAL_RCC_OscConfig+0x32c>)
 8001636:	2101      	movs	r1, #1
 8001638:	430a      	orrs	r2, r1
 800163a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800163c:	f7ff fbb6 	bl	8000dac <HAL_GetTick>
 8001640:	0003      	movs	r3, r0
 8001642:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001646:	f7ff fbb1 	bl	8000dac <HAL_GetTick>
 800164a:	0002      	movs	r2, r0
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e1e0      	b.n	8001a1a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001658:	4b35      	ldr	r3, [pc, #212]	; (8001730 <HAL_RCC_OscConfig+0x32c>)
 800165a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165c:	2202      	movs	r2, #2
 800165e:	4013      	ands	r3, r2
 8001660:	d0f1      	beq.n	8001646 <HAL_RCC_OscConfig+0x242>
 8001662:	e018      	b.n	8001696 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001664:	4b32      	ldr	r3, [pc, #200]	; (8001730 <HAL_RCC_OscConfig+0x32c>)
 8001666:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001668:	4b31      	ldr	r3, [pc, #196]	; (8001730 <HAL_RCC_OscConfig+0x32c>)
 800166a:	2101      	movs	r1, #1
 800166c:	438a      	bics	r2, r1
 800166e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001670:	f7ff fb9c 	bl	8000dac <HAL_GetTick>
 8001674:	0003      	movs	r3, r0
 8001676:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001678:	e008      	b.n	800168c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800167a:	f7ff fb97 	bl	8000dac <HAL_GetTick>
 800167e:	0002      	movs	r2, r0
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e1c6      	b.n	8001a1a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800168c:	4b28      	ldr	r3, [pc, #160]	; (8001730 <HAL_RCC_OscConfig+0x32c>)
 800168e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001690:	2202      	movs	r2, #2
 8001692:	4013      	ands	r3, r2
 8001694:	d1f1      	bne.n	800167a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2204      	movs	r2, #4
 800169c:	4013      	ands	r3, r2
 800169e:	d100      	bne.n	80016a2 <HAL_RCC_OscConfig+0x29e>
 80016a0:	e0b4      	b.n	800180c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016a2:	201f      	movs	r0, #31
 80016a4:	183b      	adds	r3, r7, r0
 80016a6:	2200      	movs	r2, #0
 80016a8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016aa:	4b21      	ldr	r3, [pc, #132]	; (8001730 <HAL_RCC_OscConfig+0x32c>)
 80016ac:	69da      	ldr	r2, [r3, #28]
 80016ae:	2380      	movs	r3, #128	; 0x80
 80016b0:	055b      	lsls	r3, r3, #21
 80016b2:	4013      	ands	r3, r2
 80016b4:	d110      	bne.n	80016d8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016b6:	4b1e      	ldr	r3, [pc, #120]	; (8001730 <HAL_RCC_OscConfig+0x32c>)
 80016b8:	69da      	ldr	r2, [r3, #28]
 80016ba:	4b1d      	ldr	r3, [pc, #116]	; (8001730 <HAL_RCC_OscConfig+0x32c>)
 80016bc:	2180      	movs	r1, #128	; 0x80
 80016be:	0549      	lsls	r1, r1, #21
 80016c0:	430a      	orrs	r2, r1
 80016c2:	61da      	str	r2, [r3, #28]
 80016c4:	4b1a      	ldr	r3, [pc, #104]	; (8001730 <HAL_RCC_OscConfig+0x32c>)
 80016c6:	69da      	ldr	r2, [r3, #28]
 80016c8:	2380      	movs	r3, #128	; 0x80
 80016ca:	055b      	lsls	r3, r3, #21
 80016cc:	4013      	ands	r3, r2
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80016d2:	183b      	adds	r3, r7, r0
 80016d4:	2201      	movs	r2, #1
 80016d6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d8:	4b18      	ldr	r3, [pc, #96]	; (800173c <HAL_RCC_OscConfig+0x338>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	2380      	movs	r3, #128	; 0x80
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	4013      	ands	r3, r2
 80016e2:	d11a      	bne.n	800171a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016e4:	4b15      	ldr	r3, [pc, #84]	; (800173c <HAL_RCC_OscConfig+0x338>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4b14      	ldr	r3, [pc, #80]	; (800173c <HAL_RCC_OscConfig+0x338>)
 80016ea:	2180      	movs	r1, #128	; 0x80
 80016ec:	0049      	lsls	r1, r1, #1
 80016ee:	430a      	orrs	r2, r1
 80016f0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016f2:	f7ff fb5b 	bl	8000dac <HAL_GetTick>
 80016f6:	0003      	movs	r3, r0
 80016f8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016fc:	f7ff fb56 	bl	8000dac <HAL_GetTick>
 8001700:	0002      	movs	r2, r0
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b64      	cmp	r3, #100	; 0x64
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e185      	b.n	8001a1a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800170e:	4b0b      	ldr	r3, [pc, #44]	; (800173c <HAL_RCC_OscConfig+0x338>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	2380      	movs	r3, #128	; 0x80
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	4013      	ands	r3, r2
 8001718:	d0f0      	beq.n	80016fc <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d10e      	bne.n	8001740 <HAL_RCC_OscConfig+0x33c>
 8001722:	4b03      	ldr	r3, [pc, #12]	; (8001730 <HAL_RCC_OscConfig+0x32c>)
 8001724:	6a1a      	ldr	r2, [r3, #32]
 8001726:	4b02      	ldr	r3, [pc, #8]	; (8001730 <HAL_RCC_OscConfig+0x32c>)
 8001728:	2101      	movs	r1, #1
 800172a:	430a      	orrs	r2, r1
 800172c:	621a      	str	r2, [r3, #32]
 800172e:	e035      	b.n	800179c <HAL_RCC_OscConfig+0x398>
 8001730:	40021000 	.word	0x40021000
 8001734:	fffeffff 	.word	0xfffeffff
 8001738:	fffbffff 	.word	0xfffbffff
 800173c:	40007000 	.word	0x40007000
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d10c      	bne.n	8001762 <HAL_RCC_OscConfig+0x35e>
 8001748:	4bb6      	ldr	r3, [pc, #728]	; (8001a24 <HAL_RCC_OscConfig+0x620>)
 800174a:	6a1a      	ldr	r2, [r3, #32]
 800174c:	4bb5      	ldr	r3, [pc, #724]	; (8001a24 <HAL_RCC_OscConfig+0x620>)
 800174e:	2101      	movs	r1, #1
 8001750:	438a      	bics	r2, r1
 8001752:	621a      	str	r2, [r3, #32]
 8001754:	4bb3      	ldr	r3, [pc, #716]	; (8001a24 <HAL_RCC_OscConfig+0x620>)
 8001756:	6a1a      	ldr	r2, [r3, #32]
 8001758:	4bb2      	ldr	r3, [pc, #712]	; (8001a24 <HAL_RCC_OscConfig+0x620>)
 800175a:	2104      	movs	r1, #4
 800175c:	438a      	bics	r2, r1
 800175e:	621a      	str	r2, [r3, #32]
 8001760:	e01c      	b.n	800179c <HAL_RCC_OscConfig+0x398>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	2b05      	cmp	r3, #5
 8001768:	d10c      	bne.n	8001784 <HAL_RCC_OscConfig+0x380>
 800176a:	4bae      	ldr	r3, [pc, #696]	; (8001a24 <HAL_RCC_OscConfig+0x620>)
 800176c:	6a1a      	ldr	r2, [r3, #32]
 800176e:	4bad      	ldr	r3, [pc, #692]	; (8001a24 <HAL_RCC_OscConfig+0x620>)
 8001770:	2104      	movs	r1, #4
 8001772:	430a      	orrs	r2, r1
 8001774:	621a      	str	r2, [r3, #32]
 8001776:	4bab      	ldr	r3, [pc, #684]	; (8001a24 <HAL_RCC_OscConfig+0x620>)
 8001778:	6a1a      	ldr	r2, [r3, #32]
 800177a:	4baa      	ldr	r3, [pc, #680]	; (8001a24 <HAL_RCC_OscConfig+0x620>)
 800177c:	2101      	movs	r1, #1
 800177e:	430a      	orrs	r2, r1
 8001780:	621a      	str	r2, [r3, #32]
 8001782:	e00b      	b.n	800179c <HAL_RCC_OscConfig+0x398>
 8001784:	4ba7      	ldr	r3, [pc, #668]	; (8001a24 <HAL_RCC_OscConfig+0x620>)
 8001786:	6a1a      	ldr	r2, [r3, #32]
 8001788:	4ba6      	ldr	r3, [pc, #664]	; (8001a24 <HAL_RCC_OscConfig+0x620>)
 800178a:	2101      	movs	r1, #1
 800178c:	438a      	bics	r2, r1
 800178e:	621a      	str	r2, [r3, #32]
 8001790:	4ba4      	ldr	r3, [pc, #656]	; (8001a24 <HAL_RCC_OscConfig+0x620>)
 8001792:	6a1a      	ldr	r2, [r3, #32]
 8001794:	4ba3      	ldr	r3, [pc, #652]	; (8001a24 <HAL_RCC_OscConfig+0x620>)
 8001796:	2104      	movs	r1, #4
 8001798:	438a      	bics	r2, r1
 800179a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d014      	beq.n	80017ce <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a4:	f7ff fb02 	bl	8000dac <HAL_GetTick>
 80017a8:	0003      	movs	r3, r0
 80017aa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ac:	e009      	b.n	80017c2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017ae:	f7ff fafd 	bl	8000dac <HAL_GetTick>
 80017b2:	0002      	movs	r2, r0
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	4a9b      	ldr	r2, [pc, #620]	; (8001a28 <HAL_RCC_OscConfig+0x624>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e12b      	b.n	8001a1a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017c2:	4b98      	ldr	r3, [pc, #608]	; (8001a24 <HAL_RCC_OscConfig+0x620>)
 80017c4:	6a1b      	ldr	r3, [r3, #32]
 80017c6:	2202      	movs	r2, #2
 80017c8:	4013      	ands	r3, r2
 80017ca:	d0f0      	beq.n	80017ae <HAL_RCC_OscConfig+0x3aa>
 80017cc:	e013      	b.n	80017f6 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ce:	f7ff faed 	bl	8000dac <HAL_GetTick>
 80017d2:	0003      	movs	r3, r0
 80017d4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017d6:	e009      	b.n	80017ec <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017d8:	f7ff fae8 	bl	8000dac <HAL_GetTick>
 80017dc:	0002      	movs	r2, r0
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	4a91      	ldr	r2, [pc, #580]	; (8001a28 <HAL_RCC_OscConfig+0x624>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e116      	b.n	8001a1a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ec:	4b8d      	ldr	r3, [pc, #564]	; (8001a24 <HAL_RCC_OscConfig+0x620>)
 80017ee:	6a1b      	ldr	r3, [r3, #32]
 80017f0:	2202      	movs	r2, #2
 80017f2:	4013      	ands	r3, r2
 80017f4:	d1f0      	bne.n	80017d8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017f6:	231f      	movs	r3, #31
 80017f8:	18fb      	adds	r3, r7, r3
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d105      	bne.n	800180c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001800:	4b88      	ldr	r3, [pc, #544]	; (8001a24 <HAL_RCC_OscConfig+0x620>)
 8001802:	69da      	ldr	r2, [r3, #28]
 8001804:	4b87      	ldr	r3, [pc, #540]	; (8001a24 <HAL_RCC_OscConfig+0x620>)
 8001806:	4989      	ldr	r1, [pc, #548]	; (8001a2c <HAL_RCC_OscConfig+0x628>)
 8001808:	400a      	ands	r2, r1
 800180a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2210      	movs	r2, #16
 8001812:	4013      	ands	r3, r2
 8001814:	d063      	beq.n	80018de <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d12a      	bne.n	8001874 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800181e:	4b81      	ldr	r3, [pc, #516]	; (8001a24 <HAL_RCC_OscConfig+0x620>)
 8001820:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001822:	4b80      	ldr	r3, [pc, #512]	; (8001a24 <HAL_RCC_OscConfig+0x620>)
 8001824:	2104      	movs	r1, #4
 8001826:	430a      	orrs	r2, r1
 8001828:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800182a:	4b7e      	ldr	r3, [pc, #504]	; (8001a24 <HAL_RCC_OscConfig+0x620>)
 800182c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800182e:	4b7d      	ldr	r3, [pc, #500]	; (8001a24 <HAL_RCC_OscConfig+0x620>)
 8001830:	2101      	movs	r1, #1
 8001832:	430a      	orrs	r2, r1
 8001834:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001836:	f7ff fab9 	bl	8000dac <HAL_GetTick>
 800183a:	0003      	movs	r3, r0
 800183c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001840:	f7ff fab4 	bl	8000dac <HAL_GetTick>
 8001844:	0002      	movs	r2, r0
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e0e3      	b.n	8001a1a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001852:	4b74      	ldr	r3, [pc, #464]	; (8001a24 <HAL_RCC_OscConfig+0x620>)
 8001854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001856:	2202      	movs	r2, #2
 8001858:	4013      	ands	r3, r2
 800185a:	d0f1      	beq.n	8001840 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800185c:	4b71      	ldr	r3, [pc, #452]	; (8001a24 <HAL_RCC_OscConfig+0x620>)
 800185e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001860:	22f8      	movs	r2, #248	; 0xf8
 8001862:	4393      	bics	r3, r2
 8001864:	0019      	movs	r1, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	00da      	lsls	r2, r3, #3
 800186c:	4b6d      	ldr	r3, [pc, #436]	; (8001a24 <HAL_RCC_OscConfig+0x620>)
 800186e:	430a      	orrs	r2, r1
 8001870:	635a      	str	r2, [r3, #52]	; 0x34
 8001872:	e034      	b.n	80018de <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	695b      	ldr	r3, [r3, #20]
 8001878:	3305      	adds	r3, #5
 800187a:	d111      	bne.n	80018a0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800187c:	4b69      	ldr	r3, [pc, #420]	; (8001a24 <HAL_RCC_OscConfig+0x620>)
 800187e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001880:	4b68      	ldr	r3, [pc, #416]	; (8001a24 <HAL_RCC_OscConfig+0x620>)
 8001882:	2104      	movs	r1, #4
 8001884:	438a      	bics	r2, r1
 8001886:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001888:	4b66      	ldr	r3, [pc, #408]	; (8001a24 <HAL_RCC_OscConfig+0x620>)
 800188a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800188c:	22f8      	movs	r2, #248	; 0xf8
 800188e:	4393      	bics	r3, r2
 8001890:	0019      	movs	r1, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	00da      	lsls	r2, r3, #3
 8001898:	4b62      	ldr	r3, [pc, #392]	; (8001a24 <HAL_RCC_OscConfig+0x620>)
 800189a:	430a      	orrs	r2, r1
 800189c:	635a      	str	r2, [r3, #52]	; 0x34
 800189e:	e01e      	b.n	80018de <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80018a0:	4b60      	ldr	r3, [pc, #384]	; (8001a24 <HAL_RCC_OscConfig+0x620>)
 80018a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018a4:	4b5f      	ldr	r3, [pc, #380]	; (8001a24 <HAL_RCC_OscConfig+0x620>)
 80018a6:	2104      	movs	r1, #4
 80018a8:	430a      	orrs	r2, r1
 80018aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80018ac:	4b5d      	ldr	r3, [pc, #372]	; (8001a24 <HAL_RCC_OscConfig+0x620>)
 80018ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018b0:	4b5c      	ldr	r3, [pc, #368]	; (8001a24 <HAL_RCC_OscConfig+0x620>)
 80018b2:	2101      	movs	r1, #1
 80018b4:	438a      	bics	r2, r1
 80018b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b8:	f7ff fa78 	bl	8000dac <HAL_GetTick>
 80018bc:	0003      	movs	r3, r0
 80018be:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80018c2:	f7ff fa73 	bl	8000dac <HAL_GetTick>
 80018c6:	0002      	movs	r2, r0
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e0a2      	b.n	8001a1a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80018d4:	4b53      	ldr	r3, [pc, #332]	; (8001a24 <HAL_RCC_OscConfig+0x620>)
 80018d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018d8:	2202      	movs	r2, #2
 80018da:	4013      	ands	r3, r2
 80018dc:	d1f1      	bne.n	80018c2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a1b      	ldr	r3, [r3, #32]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d100      	bne.n	80018e8 <HAL_RCC_OscConfig+0x4e4>
 80018e6:	e097      	b.n	8001a18 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018e8:	4b4e      	ldr	r3, [pc, #312]	; (8001a24 <HAL_RCC_OscConfig+0x620>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	220c      	movs	r2, #12
 80018ee:	4013      	ands	r3, r2
 80018f0:	2b08      	cmp	r3, #8
 80018f2:	d100      	bne.n	80018f6 <HAL_RCC_OscConfig+0x4f2>
 80018f4:	e06b      	b.n	80019ce <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a1b      	ldr	r3, [r3, #32]
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d14c      	bne.n	8001998 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018fe:	4b49      	ldr	r3, [pc, #292]	; (8001a24 <HAL_RCC_OscConfig+0x620>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	4b48      	ldr	r3, [pc, #288]	; (8001a24 <HAL_RCC_OscConfig+0x620>)
 8001904:	494a      	ldr	r1, [pc, #296]	; (8001a30 <HAL_RCC_OscConfig+0x62c>)
 8001906:	400a      	ands	r2, r1
 8001908:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190a:	f7ff fa4f 	bl	8000dac <HAL_GetTick>
 800190e:	0003      	movs	r3, r0
 8001910:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001914:	f7ff fa4a 	bl	8000dac <HAL_GetTick>
 8001918:	0002      	movs	r2, r0
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e079      	b.n	8001a1a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001926:	4b3f      	ldr	r3, [pc, #252]	; (8001a24 <HAL_RCC_OscConfig+0x620>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	2380      	movs	r3, #128	; 0x80
 800192c:	049b      	lsls	r3, r3, #18
 800192e:	4013      	ands	r3, r2
 8001930:	d1f0      	bne.n	8001914 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001932:	4b3c      	ldr	r3, [pc, #240]	; (8001a24 <HAL_RCC_OscConfig+0x620>)
 8001934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001936:	220f      	movs	r2, #15
 8001938:	4393      	bics	r3, r2
 800193a:	0019      	movs	r1, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001940:	4b38      	ldr	r3, [pc, #224]	; (8001a24 <HAL_RCC_OscConfig+0x620>)
 8001942:	430a      	orrs	r2, r1
 8001944:	62da      	str	r2, [r3, #44]	; 0x2c
 8001946:	4b37      	ldr	r3, [pc, #220]	; (8001a24 <HAL_RCC_OscConfig+0x620>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	4a3a      	ldr	r2, [pc, #232]	; (8001a34 <HAL_RCC_OscConfig+0x630>)
 800194c:	4013      	ands	r3, r2
 800194e:	0019      	movs	r1, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001958:	431a      	orrs	r2, r3
 800195a:	4b32      	ldr	r3, [pc, #200]	; (8001a24 <HAL_RCC_OscConfig+0x620>)
 800195c:	430a      	orrs	r2, r1
 800195e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001960:	4b30      	ldr	r3, [pc, #192]	; (8001a24 <HAL_RCC_OscConfig+0x620>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	4b2f      	ldr	r3, [pc, #188]	; (8001a24 <HAL_RCC_OscConfig+0x620>)
 8001966:	2180      	movs	r1, #128	; 0x80
 8001968:	0449      	lsls	r1, r1, #17
 800196a:	430a      	orrs	r2, r1
 800196c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196e:	f7ff fa1d 	bl	8000dac <HAL_GetTick>
 8001972:	0003      	movs	r3, r0
 8001974:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001978:	f7ff fa18 	bl	8000dac <HAL_GetTick>
 800197c:	0002      	movs	r2, r0
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e047      	b.n	8001a1a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800198a:	4b26      	ldr	r3, [pc, #152]	; (8001a24 <HAL_RCC_OscConfig+0x620>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	2380      	movs	r3, #128	; 0x80
 8001990:	049b      	lsls	r3, r3, #18
 8001992:	4013      	ands	r3, r2
 8001994:	d0f0      	beq.n	8001978 <HAL_RCC_OscConfig+0x574>
 8001996:	e03f      	b.n	8001a18 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001998:	4b22      	ldr	r3, [pc, #136]	; (8001a24 <HAL_RCC_OscConfig+0x620>)
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	4b21      	ldr	r3, [pc, #132]	; (8001a24 <HAL_RCC_OscConfig+0x620>)
 800199e:	4924      	ldr	r1, [pc, #144]	; (8001a30 <HAL_RCC_OscConfig+0x62c>)
 80019a0:	400a      	ands	r2, r1
 80019a2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a4:	f7ff fa02 	bl	8000dac <HAL_GetTick>
 80019a8:	0003      	movs	r3, r0
 80019aa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ac:	e008      	b.n	80019c0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ae:	f7ff f9fd 	bl	8000dac <HAL_GetTick>
 80019b2:	0002      	movs	r2, r0
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e02c      	b.n	8001a1a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019c0:	4b18      	ldr	r3, [pc, #96]	; (8001a24 <HAL_RCC_OscConfig+0x620>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	2380      	movs	r3, #128	; 0x80
 80019c6:	049b      	lsls	r3, r3, #18
 80019c8:	4013      	ands	r3, r2
 80019ca:	d1f0      	bne.n	80019ae <HAL_RCC_OscConfig+0x5aa>
 80019cc:	e024      	b.n	8001a18 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a1b      	ldr	r3, [r3, #32]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d101      	bne.n	80019da <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e01f      	b.n	8001a1a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80019da:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <HAL_RCC_OscConfig+0x620>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80019e0:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <HAL_RCC_OscConfig+0x620>)
 80019e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019e6:	697a      	ldr	r2, [r7, #20]
 80019e8:	2380      	movs	r3, #128	; 0x80
 80019ea:	025b      	lsls	r3, r3, #9
 80019ec:	401a      	ands	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d10e      	bne.n	8001a14 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	220f      	movs	r2, #15
 80019fa:	401a      	ands	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d107      	bne.n	8001a14 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001a04:	697a      	ldr	r2, [r7, #20]
 8001a06:	23f0      	movs	r3, #240	; 0xf0
 8001a08:	039b      	lsls	r3, r3, #14
 8001a0a:	401a      	ands	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d001      	beq.n	8001a18 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e000      	b.n	8001a1a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	b008      	add	sp, #32
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	46c0      	nop			; (mov r8, r8)
 8001a24:	40021000 	.word	0x40021000
 8001a28:	00001388 	.word	0x00001388
 8001a2c:	efffffff 	.word	0xefffffff
 8001a30:	feffffff 	.word	0xfeffffff
 8001a34:	ffc2ffff 	.word	0xffc2ffff

08001a38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d101      	bne.n	8001a4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e0b3      	b.n	8001bb4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a4c:	4b5b      	ldr	r3, [pc, #364]	; (8001bbc <HAL_RCC_ClockConfig+0x184>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2201      	movs	r2, #1
 8001a52:	4013      	ands	r3, r2
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d911      	bls.n	8001a7e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5a:	4b58      	ldr	r3, [pc, #352]	; (8001bbc <HAL_RCC_ClockConfig+0x184>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	4393      	bics	r3, r2
 8001a62:	0019      	movs	r1, r3
 8001a64:	4b55      	ldr	r3, [pc, #340]	; (8001bbc <HAL_RCC_ClockConfig+0x184>)
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a6c:	4b53      	ldr	r3, [pc, #332]	; (8001bbc <HAL_RCC_ClockConfig+0x184>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2201      	movs	r2, #1
 8001a72:	4013      	ands	r3, r2
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d001      	beq.n	8001a7e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e09a      	b.n	8001bb4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2202      	movs	r2, #2
 8001a84:	4013      	ands	r3, r2
 8001a86:	d015      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2204      	movs	r2, #4
 8001a8e:	4013      	ands	r3, r2
 8001a90:	d006      	beq.n	8001aa0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a92:	4b4b      	ldr	r3, [pc, #300]	; (8001bc0 <HAL_RCC_ClockConfig+0x188>)
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	4b4a      	ldr	r3, [pc, #296]	; (8001bc0 <HAL_RCC_ClockConfig+0x188>)
 8001a98:	21e0      	movs	r1, #224	; 0xe0
 8001a9a:	00c9      	lsls	r1, r1, #3
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aa0:	4b47      	ldr	r3, [pc, #284]	; (8001bc0 <HAL_RCC_ClockConfig+0x188>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	22f0      	movs	r2, #240	; 0xf0
 8001aa6:	4393      	bics	r3, r2
 8001aa8:	0019      	movs	r1, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689a      	ldr	r2, [r3, #8]
 8001aae:	4b44      	ldr	r3, [pc, #272]	; (8001bc0 <HAL_RCC_ClockConfig+0x188>)
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	4013      	ands	r3, r2
 8001abc:	d040      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d107      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac6:	4b3e      	ldr	r3, [pc, #248]	; (8001bc0 <HAL_RCC_ClockConfig+0x188>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	2380      	movs	r3, #128	; 0x80
 8001acc:	029b      	lsls	r3, r3, #10
 8001ace:	4013      	ands	r3, r2
 8001ad0:	d114      	bne.n	8001afc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e06e      	b.n	8001bb4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d107      	bne.n	8001aee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ade:	4b38      	ldr	r3, [pc, #224]	; (8001bc0 <HAL_RCC_ClockConfig+0x188>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	2380      	movs	r3, #128	; 0x80
 8001ae4:	049b      	lsls	r3, r3, #18
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d108      	bne.n	8001afc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e062      	b.n	8001bb4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aee:	4b34      	ldr	r3, [pc, #208]	; (8001bc0 <HAL_RCC_ClockConfig+0x188>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2202      	movs	r2, #2
 8001af4:	4013      	ands	r3, r2
 8001af6:	d101      	bne.n	8001afc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e05b      	b.n	8001bb4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001afc:	4b30      	ldr	r3, [pc, #192]	; (8001bc0 <HAL_RCC_ClockConfig+0x188>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	2203      	movs	r2, #3
 8001b02:	4393      	bics	r3, r2
 8001b04:	0019      	movs	r1, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685a      	ldr	r2, [r3, #4]
 8001b0a:	4b2d      	ldr	r3, [pc, #180]	; (8001bc0 <HAL_RCC_ClockConfig+0x188>)
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b10:	f7ff f94c 	bl	8000dac <HAL_GetTick>
 8001b14:	0003      	movs	r3, r0
 8001b16:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b18:	e009      	b.n	8001b2e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b1a:	f7ff f947 	bl	8000dac <HAL_GetTick>
 8001b1e:	0002      	movs	r2, r0
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	4a27      	ldr	r2, [pc, #156]	; (8001bc4 <HAL_RCC_ClockConfig+0x18c>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e042      	b.n	8001bb4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b2e:	4b24      	ldr	r3, [pc, #144]	; (8001bc0 <HAL_RCC_ClockConfig+0x188>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	220c      	movs	r2, #12
 8001b34:	401a      	ands	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d1ec      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b40:	4b1e      	ldr	r3, [pc, #120]	; (8001bbc <HAL_RCC_ClockConfig+0x184>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2201      	movs	r2, #1
 8001b46:	4013      	ands	r3, r2
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d211      	bcs.n	8001b72 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b4e:	4b1b      	ldr	r3, [pc, #108]	; (8001bbc <HAL_RCC_ClockConfig+0x184>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2201      	movs	r2, #1
 8001b54:	4393      	bics	r3, r2
 8001b56:	0019      	movs	r1, r3
 8001b58:	4b18      	ldr	r3, [pc, #96]	; (8001bbc <HAL_RCC_ClockConfig+0x184>)
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b60:	4b16      	ldr	r3, [pc, #88]	; (8001bbc <HAL_RCC_ClockConfig+0x184>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2201      	movs	r2, #1
 8001b66:	4013      	ands	r3, r2
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d001      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e020      	b.n	8001bb4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2204      	movs	r2, #4
 8001b78:	4013      	ands	r3, r2
 8001b7a:	d009      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001b7c:	4b10      	ldr	r3, [pc, #64]	; (8001bc0 <HAL_RCC_ClockConfig+0x188>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	4a11      	ldr	r2, [pc, #68]	; (8001bc8 <HAL_RCC_ClockConfig+0x190>)
 8001b82:	4013      	ands	r3, r2
 8001b84:	0019      	movs	r1, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	68da      	ldr	r2, [r3, #12]
 8001b8a:	4b0d      	ldr	r3, [pc, #52]	; (8001bc0 <HAL_RCC_ClockConfig+0x188>)
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001b90:	f000 f820 	bl	8001bd4 <HAL_RCC_GetSysClockFreq>
 8001b94:	0001      	movs	r1, r0
 8001b96:	4b0a      	ldr	r3, [pc, #40]	; (8001bc0 <HAL_RCC_ClockConfig+0x188>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	091b      	lsrs	r3, r3, #4
 8001b9c:	220f      	movs	r2, #15
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	4a0a      	ldr	r2, [pc, #40]	; (8001bcc <HAL_RCC_ClockConfig+0x194>)
 8001ba2:	5cd3      	ldrb	r3, [r2, r3]
 8001ba4:	000a      	movs	r2, r1
 8001ba6:	40da      	lsrs	r2, r3
 8001ba8:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <HAL_RCC_ClockConfig+0x198>)
 8001baa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001bac:	2003      	movs	r0, #3
 8001bae:	f7ff f8b7 	bl	8000d20 <HAL_InitTick>
  
  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	b004      	add	sp, #16
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40022000 	.word	0x40022000
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	00001388 	.word	0x00001388
 8001bc8:	fffff8ff 	.word	0xfffff8ff
 8001bcc:	08004440 	.word	0x08004440
 8001bd0:	20000000 	.word	0x20000000

08001bd4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bd4:	b590      	push	{r4, r7, lr}
 8001bd6:	b08f      	sub	sp, #60	; 0x3c
 8001bd8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001bda:	2314      	movs	r3, #20
 8001bdc:	18fb      	adds	r3, r7, r3
 8001bde:	4a2b      	ldr	r2, [pc, #172]	; (8001c8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001be0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001be2:	c313      	stmia	r3!, {r0, r1, r4}
 8001be4:	6812      	ldr	r2, [r2, #0]
 8001be6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001be8:	1d3b      	adds	r3, r7, #4
 8001bea:	4a29      	ldr	r2, [pc, #164]	; (8001c90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bec:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001bee:	c313      	stmia	r3!, {r0, r1, r4}
 8001bf0:	6812      	ldr	r2, [r2, #0]
 8001bf2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	637b      	str	r3, [r7, #52]	; 0x34
 8001c00:	2300      	movs	r3, #0
 8001c02:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001c04:	2300      	movs	r3, #0
 8001c06:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001c08:	4b22      	ldr	r3, [pc, #136]	; (8001c94 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c10:	220c      	movs	r2, #12
 8001c12:	4013      	ands	r3, r2
 8001c14:	2b04      	cmp	r3, #4
 8001c16:	d002      	beq.n	8001c1e <HAL_RCC_GetSysClockFreq+0x4a>
 8001c18:	2b08      	cmp	r3, #8
 8001c1a:	d003      	beq.n	8001c24 <HAL_RCC_GetSysClockFreq+0x50>
 8001c1c:	e02d      	b.n	8001c7a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c1e:	4b1e      	ldr	r3, [pc, #120]	; (8001c98 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c20:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c22:	e02d      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c26:	0c9b      	lsrs	r3, r3, #18
 8001c28:	220f      	movs	r2, #15
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	2214      	movs	r2, #20
 8001c2e:	18ba      	adds	r2, r7, r2
 8001c30:	5cd3      	ldrb	r3, [r2, r3]
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001c34:	4b17      	ldr	r3, [pc, #92]	; (8001c94 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c38:	220f      	movs	r2, #15
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	1d3a      	adds	r2, r7, #4
 8001c3e:	5cd3      	ldrb	r3, [r2, r3]
 8001c40:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001c42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c44:	2380      	movs	r3, #128	; 0x80
 8001c46:	025b      	lsls	r3, r3, #9
 8001c48:	4013      	ands	r3, r2
 8001c4a:	d009      	beq.n	8001c60 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c4e:	4812      	ldr	r0, [pc, #72]	; (8001c98 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c50:	f7fe fa5a 	bl	8000108 <__udivsi3>
 8001c54:	0003      	movs	r3, r0
 8001c56:	001a      	movs	r2, r3
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	4353      	muls	r3, r2
 8001c5c:	637b      	str	r3, [r7, #52]	; 0x34
 8001c5e:	e009      	b.n	8001c74 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001c60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c62:	000a      	movs	r2, r1
 8001c64:	0152      	lsls	r2, r2, #5
 8001c66:	1a52      	subs	r2, r2, r1
 8001c68:	0193      	lsls	r3, r2, #6
 8001c6a:	1a9b      	subs	r3, r3, r2
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	185b      	adds	r3, r3, r1
 8001c70:	021b      	lsls	r3, r3, #8
 8001c72:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c76:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c78:	e002      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c7a:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c7c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c7e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001c82:	0018      	movs	r0, r3
 8001c84:	46bd      	mov	sp, r7
 8001c86:	b00f      	add	sp, #60	; 0x3c
 8001c88:	bd90      	pop	{r4, r7, pc}
 8001c8a:	46c0      	nop			; (mov r8, r8)
 8001c8c:	0800441c 	.word	0x0800441c
 8001c90:	0800442c 	.word	0x0800442c
 8001c94:	40021000 	.word	0x40021000
 8001c98:	007a1200 	.word	0x007a1200

08001c9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ca0:	4b02      	ldr	r3, [pc, #8]	; (8001cac <HAL_RCC_GetHCLKFreq+0x10>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
}
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	46c0      	nop			; (mov r8, r8)
 8001cac:	20000000 	.word	0x20000000

08001cb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001cb4:	f7ff fff2 	bl	8001c9c <HAL_RCC_GetHCLKFreq>
 8001cb8:	0001      	movs	r1, r0
 8001cba:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	0a1b      	lsrs	r3, r3, #8
 8001cc0:	2207      	movs	r2, #7
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	4a04      	ldr	r2, [pc, #16]	; (8001cd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cc6:	5cd3      	ldrb	r3, [r2, r3]
 8001cc8:	40d9      	lsrs	r1, r3
 8001cca:	000b      	movs	r3, r1
}    
 8001ccc:	0018      	movs	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	46c0      	nop			; (mov r8, r8)
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	08004450 	.word	0x08004450

08001cdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	2380      	movs	r3, #128	; 0x80
 8001cf2:	025b      	lsls	r3, r3, #9
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	d100      	bne.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001cf8:	e08e      	b.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001cfa:	2017      	movs	r0, #23
 8001cfc:	183b      	adds	r3, r7, r0
 8001cfe:	2200      	movs	r2, #0
 8001d00:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d02:	4b5f      	ldr	r3, [pc, #380]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d04:	69da      	ldr	r2, [r3, #28]
 8001d06:	2380      	movs	r3, #128	; 0x80
 8001d08:	055b      	lsls	r3, r3, #21
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	d110      	bne.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d0e:	4b5c      	ldr	r3, [pc, #368]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d10:	69da      	ldr	r2, [r3, #28]
 8001d12:	4b5b      	ldr	r3, [pc, #364]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d14:	2180      	movs	r1, #128	; 0x80
 8001d16:	0549      	lsls	r1, r1, #21
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	61da      	str	r2, [r3, #28]
 8001d1c:	4b58      	ldr	r3, [pc, #352]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d1e:	69da      	ldr	r2, [r3, #28]
 8001d20:	2380      	movs	r3, #128	; 0x80
 8001d22:	055b      	lsls	r3, r3, #21
 8001d24:	4013      	ands	r3, r2
 8001d26:	60bb      	str	r3, [r7, #8]
 8001d28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d2a:	183b      	adds	r3, r7, r0
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d30:	4b54      	ldr	r3, [pc, #336]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	2380      	movs	r3, #128	; 0x80
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d11a      	bne.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d3c:	4b51      	ldr	r3, [pc, #324]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	4b50      	ldr	r3, [pc, #320]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001d42:	2180      	movs	r1, #128	; 0x80
 8001d44:	0049      	lsls	r1, r1, #1
 8001d46:	430a      	orrs	r2, r1
 8001d48:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d4a:	f7ff f82f 	bl	8000dac <HAL_GetTick>
 8001d4e:	0003      	movs	r3, r0
 8001d50:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d52:	e008      	b.n	8001d66 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d54:	f7ff f82a 	bl	8000dac <HAL_GetTick>
 8001d58:	0002      	movs	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b64      	cmp	r3, #100	; 0x64
 8001d60:	d901      	bls.n	8001d66 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e087      	b.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d66:	4b47      	ldr	r3, [pc, #284]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	2380      	movs	r3, #128	; 0x80
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	4013      	ands	r3, r2
 8001d70:	d0f0      	beq.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d72:	4b43      	ldr	r3, [pc, #268]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d74:	6a1a      	ldr	r2, [r3, #32]
 8001d76:	23c0      	movs	r3, #192	; 0xc0
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d034      	beq.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	23c0      	movs	r3, #192	; 0xc0
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d02c      	beq.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d94:	4b3a      	ldr	r3, [pc, #232]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	4a3b      	ldr	r2, [pc, #236]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d9e:	4b38      	ldr	r3, [pc, #224]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001da0:	6a1a      	ldr	r2, [r3, #32]
 8001da2:	4b37      	ldr	r3, [pc, #220]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001da4:	2180      	movs	r1, #128	; 0x80
 8001da6:	0249      	lsls	r1, r1, #9
 8001da8:	430a      	orrs	r2, r1
 8001daa:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001dac:	4b34      	ldr	r3, [pc, #208]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001dae:	6a1a      	ldr	r2, [r3, #32]
 8001db0:	4b33      	ldr	r3, [pc, #204]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001db2:	4936      	ldr	r1, [pc, #216]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001db4:	400a      	ands	r2, r1
 8001db6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001db8:	4b31      	ldr	r3, [pc, #196]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	d013      	beq.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc6:	f7fe fff1 	bl	8000dac <HAL_GetTick>
 8001dca:	0003      	movs	r3, r0
 8001dcc:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dce:	e009      	b.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dd0:	f7fe ffec 	bl	8000dac <HAL_GetTick>
 8001dd4:	0002      	movs	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	4a2d      	ldr	r2, [pc, #180]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e048      	b.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de4:	4b26      	ldr	r3, [pc, #152]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	2202      	movs	r2, #2
 8001dea:	4013      	ands	r3, r2
 8001dec:	d0f0      	beq.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001dee:	4b24      	ldr	r3, [pc, #144]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001df0:	6a1b      	ldr	r3, [r3, #32]
 8001df2:	4a25      	ldr	r2, [pc, #148]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001df4:	4013      	ands	r3, r2
 8001df6:	0019      	movs	r1, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	4b20      	ldr	r3, [pc, #128]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e02:	2317      	movs	r3, #23
 8001e04:	18fb      	adds	r3, r7, r3
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d105      	bne.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e0c:	4b1c      	ldr	r3, [pc, #112]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e0e:	69da      	ldr	r2, [r3, #28]
 8001e10:	4b1b      	ldr	r3, [pc, #108]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e12:	4920      	ldr	r1, [pc, #128]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001e14:	400a      	ands	r2, r1
 8001e16:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	4013      	ands	r3, r2
 8001e20:	d009      	beq.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e22:	4b17      	ldr	r3, [pc, #92]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	2203      	movs	r2, #3
 8001e28:	4393      	bics	r3, r2
 8001e2a:	0019      	movs	r1, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e32:	430a      	orrs	r2, r1
 8001e34:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	d009      	beq.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e40:	4b0f      	ldr	r3, [pc, #60]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e44:	2210      	movs	r2, #16
 8001e46:	4393      	bics	r3, r2
 8001e48:	0019      	movs	r1, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68da      	ldr	r2, [r3, #12]
 8001e4e:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e50:	430a      	orrs	r2, r1
 8001e52:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	2380      	movs	r3, #128	; 0x80
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d009      	beq.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001e60:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e64:	2240      	movs	r2, #64	; 0x40
 8001e66:	4393      	bics	r3, r2
 8001e68:	0019      	movs	r1, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	691a      	ldr	r2, [r3, #16]
 8001e6e:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e70:	430a      	orrs	r2, r1
 8001e72:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	0018      	movs	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	b006      	add	sp, #24
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	46c0      	nop			; (mov r8, r8)
 8001e80:	40021000 	.word	0x40021000
 8001e84:	40007000 	.word	0x40007000
 8001e88:	fffffcff 	.word	0xfffffcff
 8001e8c:	fffeffff 	.word	0xfffeffff
 8001e90:	00001388 	.word	0x00001388
 8001e94:	efffffff 	.word	0xefffffff

08001e98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e0a8      	b.n	8001ffc <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d109      	bne.n	8001ec6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	2382      	movs	r3, #130	; 0x82
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d009      	beq.n	8001ed2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	61da      	str	r2, [r3, #28]
 8001ec4:	e005      	b.n	8001ed2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	225d      	movs	r2, #93	; 0x5d
 8001edc:	5c9b      	ldrb	r3, [r3, r2]
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d107      	bne.n	8001ef4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	225c      	movs	r2, #92	; 0x5c
 8001ee8:	2100      	movs	r1, #0
 8001eea:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	0018      	movs	r0, r3
 8001ef0:	f7fe fcf2 	bl	80008d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	225d      	movs	r2, #93	; 0x5d
 8001ef8:	2102      	movs	r1, #2
 8001efa:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2140      	movs	r1, #64	; 0x40
 8001f08:	438a      	bics	r2, r1
 8001f0a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68da      	ldr	r2, [r3, #12]
 8001f10:	23e0      	movs	r3, #224	; 0xe0
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d902      	bls.n	8001f1e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	e002      	b.n	8001f24 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001f1e:	2380      	movs	r3, #128	; 0x80
 8001f20:	015b      	lsls	r3, r3, #5
 8001f22:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	68da      	ldr	r2, [r3, #12]
 8001f28:	23f0      	movs	r3, #240	; 0xf0
 8001f2a:	011b      	lsls	r3, r3, #4
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d008      	beq.n	8001f42 <HAL_SPI_Init+0xaa>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68da      	ldr	r2, [r3, #12]
 8001f34:	23e0      	movs	r3, #224	; 0xe0
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d002      	beq.n	8001f42 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685a      	ldr	r2, [r3, #4]
 8001f46:	2382      	movs	r3, #130	; 0x82
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	401a      	ands	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6899      	ldr	r1, [r3, #8]
 8001f50:	2384      	movs	r3, #132	; 0x84
 8001f52:	021b      	lsls	r3, r3, #8
 8001f54:	400b      	ands	r3, r1
 8001f56:	431a      	orrs	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	2102      	movs	r1, #2
 8001f5e:	400b      	ands	r3, r1
 8001f60:	431a      	orrs	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	2101      	movs	r1, #1
 8001f68:	400b      	ands	r3, r1
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6999      	ldr	r1, [r3, #24]
 8001f70:	2380      	movs	r3, #128	; 0x80
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	400b      	ands	r3, r1
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	69db      	ldr	r3, [r3, #28]
 8001f7c:	2138      	movs	r1, #56	; 0x38
 8001f7e:	400b      	ands	r3, r1
 8001f80:	431a      	orrs	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	2180      	movs	r1, #128	; 0x80
 8001f88:	400b      	ands	r3, r1
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	0011      	movs	r1, r2
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f92:	2380      	movs	r3, #128	; 0x80
 8001f94:	019b      	lsls	r3, r3, #6
 8001f96:	401a      	ands	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	0c1b      	lsrs	r3, r3, #16
 8001fa6:	2204      	movs	r2, #4
 8001fa8:	401a      	ands	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fae:	2110      	movs	r1, #16
 8001fb0:	400b      	ands	r3, r1
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fb8:	2108      	movs	r1, #8
 8001fba:	400b      	ands	r3, r1
 8001fbc:	431a      	orrs	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	68d9      	ldr	r1, [r3, #12]
 8001fc2:	23f0      	movs	r3, #240	; 0xf0
 8001fc4:	011b      	lsls	r3, r3, #4
 8001fc6:	400b      	ands	r3, r1
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	0011      	movs	r1, r2
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	2380      	movs	r3, #128	; 0x80
 8001fd0:	015b      	lsls	r3, r3, #5
 8001fd2:	401a      	ands	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	69da      	ldr	r2, [r3, #28]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4907      	ldr	r1, [pc, #28]	; (8002004 <HAL_SPI_Init+0x16c>)
 8001fe8:	400a      	ands	r2, r1
 8001fea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	225d      	movs	r2, #93	; 0x5d
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	b004      	add	sp, #16
 8002002:	bd80      	pop	{r7, pc}
 8002004:	fffff7ff 	.word	0xfffff7ff

08002008 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b088      	sub	sp, #32
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	603b      	str	r3, [r7, #0]
 8002014:	1dbb      	adds	r3, r7, #6
 8002016:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002018:	231f      	movs	r3, #31
 800201a:	18fb      	adds	r3, r7, r3
 800201c:	2200      	movs	r2, #0
 800201e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	225c      	movs	r2, #92	; 0x5c
 8002024:	5c9b      	ldrb	r3, [r3, r2]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d101      	bne.n	800202e <HAL_SPI_Transmit+0x26>
 800202a:	2302      	movs	r3, #2
 800202c:	e140      	b.n	80022b0 <HAL_SPI_Transmit+0x2a8>
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	225c      	movs	r2, #92	; 0x5c
 8002032:	2101      	movs	r1, #1
 8002034:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002036:	f7fe feb9 	bl	8000dac <HAL_GetTick>
 800203a:	0003      	movs	r3, r0
 800203c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800203e:	2316      	movs	r3, #22
 8002040:	18fb      	adds	r3, r7, r3
 8002042:	1dba      	adds	r2, r7, #6
 8002044:	8812      	ldrh	r2, [r2, #0]
 8002046:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	225d      	movs	r2, #93	; 0x5d
 800204c:	5c9b      	ldrb	r3, [r3, r2]
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2b01      	cmp	r3, #1
 8002052:	d004      	beq.n	800205e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002054:	231f      	movs	r3, #31
 8002056:	18fb      	adds	r3, r7, r3
 8002058:	2202      	movs	r2, #2
 800205a:	701a      	strb	r2, [r3, #0]
    goto error;
 800205c:	e11d      	b.n	800229a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d003      	beq.n	800206c <HAL_SPI_Transmit+0x64>
 8002064:	1dbb      	adds	r3, r7, #6
 8002066:	881b      	ldrh	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d104      	bne.n	8002076 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800206c:	231f      	movs	r3, #31
 800206e:	18fb      	adds	r3, r7, r3
 8002070:	2201      	movs	r2, #1
 8002072:	701a      	strb	r2, [r3, #0]
    goto error;
 8002074:	e111      	b.n	800229a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	225d      	movs	r2, #93	; 0x5d
 800207a:	2103      	movs	r1, #3
 800207c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2200      	movs	r2, #0
 8002082:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	68ba      	ldr	r2, [r7, #8]
 8002088:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	1dba      	adds	r2, r7, #6
 800208e:	8812      	ldrh	r2, [r2, #0]
 8002090:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	1dba      	adds	r2, r7, #6
 8002096:	8812      	ldrh	r2, [r2, #0]
 8002098:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2244      	movs	r2, #68	; 0x44
 80020a4:	2100      	movs	r1, #0
 80020a6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2246      	movs	r2, #70	; 0x46
 80020ac:	2100      	movs	r1, #0
 80020ae:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2200      	movs	r2, #0
 80020b4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2200      	movs	r2, #0
 80020ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	2380      	movs	r3, #128	; 0x80
 80020c2:	021b      	lsls	r3, r3, #8
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d110      	bne.n	80020ea <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2140      	movs	r1, #64	; 0x40
 80020d4:	438a      	bics	r2, r1
 80020d6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2180      	movs	r1, #128	; 0x80
 80020e4:	01c9      	lsls	r1, r1, #7
 80020e6:	430a      	orrs	r2, r1
 80020e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2240      	movs	r2, #64	; 0x40
 80020f2:	4013      	ands	r3, r2
 80020f4:	2b40      	cmp	r3, #64	; 0x40
 80020f6:	d007      	beq.n	8002108 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2140      	movs	r1, #64	; 0x40
 8002104:	430a      	orrs	r2, r1
 8002106:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	68da      	ldr	r2, [r3, #12]
 800210c:	23e0      	movs	r3, #224	; 0xe0
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	429a      	cmp	r2, r3
 8002112:	d94e      	bls.n	80021b2 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d004      	beq.n	8002126 <HAL_SPI_Transmit+0x11e>
 800211c:	2316      	movs	r3, #22
 800211e:	18fb      	adds	r3, r7, r3
 8002120:	881b      	ldrh	r3, [r3, #0]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d13f      	bne.n	80021a6 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212a:	881a      	ldrh	r2, [r3, #0]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002136:	1c9a      	adds	r2, r3, #2
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002140:	b29b      	uxth	r3, r3
 8002142:	3b01      	subs	r3, #1
 8002144:	b29a      	uxth	r2, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800214a:	e02c      	b.n	80021a6 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	2202      	movs	r2, #2
 8002154:	4013      	ands	r3, r2
 8002156:	2b02      	cmp	r3, #2
 8002158:	d112      	bne.n	8002180 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800215e:	881a      	ldrh	r2, [r3, #0]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800216a:	1c9a      	adds	r2, r3, #2
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002174:	b29b      	uxth	r3, r3
 8002176:	3b01      	subs	r3, #1
 8002178:	b29a      	uxth	r2, r3
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800217e:	e012      	b.n	80021a6 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002180:	f7fe fe14 	bl	8000dac <HAL_GetTick>
 8002184:	0002      	movs	r2, r0
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	429a      	cmp	r2, r3
 800218e:	d802      	bhi.n	8002196 <HAL_SPI_Transmit+0x18e>
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	3301      	adds	r3, #1
 8002194:	d102      	bne.n	800219c <HAL_SPI_Transmit+0x194>
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d104      	bne.n	80021a6 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 800219c:	231f      	movs	r3, #31
 800219e:	18fb      	adds	r3, r7, r3
 80021a0:	2203      	movs	r2, #3
 80021a2:	701a      	strb	r2, [r3, #0]
          goto error;
 80021a4:	e079      	b.n	800229a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1cd      	bne.n	800214c <HAL_SPI_Transmit+0x144>
 80021b0:	e04f      	b.n	8002252 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d004      	beq.n	80021c4 <HAL_SPI_Transmit+0x1bc>
 80021ba:	2316      	movs	r3, #22
 80021bc:	18fb      	adds	r3, r7, r3
 80021be:	881b      	ldrh	r3, [r3, #0]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d141      	bne.n	8002248 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	330c      	adds	r3, #12
 80021ce:	7812      	ldrb	r2, [r2, #0]
 80021d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d6:	1c5a      	adds	r2, r3, #1
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	3b01      	subs	r3, #1
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80021ea:	e02d      	b.n	8002248 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	2202      	movs	r2, #2
 80021f4:	4013      	ands	r3, r2
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d113      	bne.n	8002222 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	330c      	adds	r3, #12
 8002204:	7812      	ldrb	r2, [r2, #0]
 8002206:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800220c:	1c5a      	adds	r2, r3, #1
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002216:	b29b      	uxth	r3, r3
 8002218:	3b01      	subs	r3, #1
 800221a:	b29a      	uxth	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002220:	e012      	b.n	8002248 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002222:	f7fe fdc3 	bl	8000dac <HAL_GetTick>
 8002226:	0002      	movs	r2, r0
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	429a      	cmp	r2, r3
 8002230:	d802      	bhi.n	8002238 <HAL_SPI_Transmit+0x230>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	3301      	adds	r3, #1
 8002236:	d102      	bne.n	800223e <HAL_SPI_Transmit+0x236>
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d104      	bne.n	8002248 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800223e:	231f      	movs	r3, #31
 8002240:	18fb      	adds	r3, r7, r3
 8002242:	2203      	movs	r2, #3
 8002244:	701a      	strb	r2, [r3, #0]
          goto error;
 8002246:	e028      	b.n	800229a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800224c:	b29b      	uxth	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1cc      	bne.n	80021ec <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	6839      	ldr	r1, [r7, #0]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	0018      	movs	r0, r3
 800225a:	f000 f95d 	bl	8002518 <SPI_EndRxTxTransaction>
 800225e:	1e03      	subs	r3, r0, #0
 8002260:	d002      	beq.n	8002268 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2220      	movs	r2, #32
 8002266:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d10a      	bne.n	8002286 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002270:	2300      	movs	r3, #0
 8002272:	613b      	str	r3, [r7, #16]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	613b      	str	r3, [r7, #16]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	613b      	str	r3, [r7, #16]
 8002284:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800228a:	2b00      	cmp	r3, #0
 800228c:	d004      	beq.n	8002298 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800228e:	231f      	movs	r3, #31
 8002290:	18fb      	adds	r3, r7, r3
 8002292:	2201      	movs	r2, #1
 8002294:	701a      	strb	r2, [r3, #0]
 8002296:	e000      	b.n	800229a <HAL_SPI_Transmit+0x292>
  }

error:
 8002298:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	225d      	movs	r2, #93	; 0x5d
 800229e:	2101      	movs	r1, #1
 80022a0:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	225c      	movs	r2, #92	; 0x5c
 80022a6:	2100      	movs	r1, #0
 80022a8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80022aa:	231f      	movs	r3, #31
 80022ac:	18fb      	adds	r3, r7, r3
 80022ae:	781b      	ldrb	r3, [r3, #0]
}
 80022b0:	0018      	movs	r0, r3
 80022b2:	46bd      	mov	sp, r7
 80022b4:	b008      	add	sp, #32
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b088      	sub	sp, #32
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	603b      	str	r3, [r7, #0]
 80022c4:	1dfb      	adds	r3, r7, #7
 80022c6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80022c8:	f7fe fd70 	bl	8000dac <HAL_GetTick>
 80022cc:	0002      	movs	r2, r0
 80022ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d0:	1a9b      	subs	r3, r3, r2
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	18d3      	adds	r3, r2, r3
 80022d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80022d8:	f7fe fd68 	bl	8000dac <HAL_GetTick>
 80022dc:	0003      	movs	r3, r0
 80022de:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80022e0:	4b3a      	ldr	r3, [pc, #232]	; (80023cc <SPI_WaitFlagStateUntilTimeout+0x114>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	015b      	lsls	r3, r3, #5
 80022e6:	0d1b      	lsrs	r3, r3, #20
 80022e8:	69fa      	ldr	r2, [r7, #28]
 80022ea:	4353      	muls	r3, r2
 80022ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80022ee:	e058      	b.n	80023a2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	3301      	adds	r3, #1
 80022f4:	d055      	beq.n	80023a2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80022f6:	f7fe fd59 	bl	8000dac <HAL_GetTick>
 80022fa:	0002      	movs	r2, r0
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	69fa      	ldr	r2, [r7, #28]
 8002302:	429a      	cmp	r2, r3
 8002304:	d902      	bls.n	800230c <SPI_WaitFlagStateUntilTimeout+0x54>
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d142      	bne.n	8002392 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	21e0      	movs	r1, #224	; 0xe0
 8002318:	438a      	bics	r2, r1
 800231a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	685a      	ldr	r2, [r3, #4]
 8002320:	2382      	movs	r3, #130	; 0x82
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	429a      	cmp	r2, r3
 8002326:	d113      	bne.n	8002350 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	2380      	movs	r3, #128	; 0x80
 800232e:	021b      	lsls	r3, r3, #8
 8002330:	429a      	cmp	r2, r3
 8002332:	d005      	beq.n	8002340 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	2380      	movs	r3, #128	; 0x80
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	429a      	cmp	r2, r3
 800233e:	d107      	bne.n	8002350 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2140      	movs	r1, #64	; 0x40
 800234c:	438a      	bics	r2, r1
 800234e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002354:	2380      	movs	r3, #128	; 0x80
 8002356:	019b      	lsls	r3, r3, #6
 8002358:	429a      	cmp	r2, r3
 800235a:	d110      	bne.n	800237e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	491a      	ldr	r1, [pc, #104]	; (80023d0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002368:	400a      	ands	r2, r1
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2180      	movs	r1, #128	; 0x80
 8002378:	0189      	lsls	r1, r1, #6
 800237a:	430a      	orrs	r2, r1
 800237c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	225d      	movs	r2, #93	; 0x5d
 8002382:	2101      	movs	r1, #1
 8002384:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	225c      	movs	r2, #92	; 0x5c
 800238a:	2100      	movs	r1, #0
 800238c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e017      	b.n	80023c2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d101      	bne.n	800239c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002398:	2300      	movs	r3, #0
 800239a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	3b01      	subs	r3, #1
 80023a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	68ba      	ldr	r2, [r7, #8]
 80023aa:	4013      	ands	r3, r2
 80023ac:	68ba      	ldr	r2, [r7, #8]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	425a      	negs	r2, r3
 80023b2:	4153      	adcs	r3, r2
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	001a      	movs	r2, r3
 80023b8:	1dfb      	adds	r3, r7, #7
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d197      	bne.n	80022f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	0018      	movs	r0, r3
 80023c4:	46bd      	mov	sp, r7
 80023c6:	b008      	add	sp, #32
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	46c0      	nop			; (mov r8, r8)
 80023cc:	20000000 	.word	0x20000000
 80023d0:	ffffdfff 	.word	0xffffdfff

080023d4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b08a      	sub	sp, #40	; 0x28
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
 80023e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80023e2:	2317      	movs	r3, #23
 80023e4:	18fb      	adds	r3, r7, r3
 80023e6:	2200      	movs	r2, #0
 80023e8:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80023ea:	f7fe fcdf 	bl	8000dac <HAL_GetTick>
 80023ee:	0002      	movs	r2, r0
 80023f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f2:	1a9b      	subs	r3, r3, r2
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	18d3      	adds	r3, r2, r3
 80023f8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80023fa:	f7fe fcd7 	bl	8000dac <HAL_GetTick>
 80023fe:	0003      	movs	r3, r0
 8002400:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	330c      	adds	r3, #12
 8002408:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800240a:	4b41      	ldr	r3, [pc, #260]	; (8002510 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	0013      	movs	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	189b      	adds	r3, r3, r2
 8002414:	00da      	lsls	r2, r3, #3
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	0d1b      	lsrs	r3, r3, #20
 800241a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800241c:	4353      	muls	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002420:	e068      	b.n	80024f4 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	23c0      	movs	r3, #192	; 0xc0
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	429a      	cmp	r2, r3
 800242a:	d10a      	bne.n	8002442 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d107      	bne.n	8002442 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	b2da      	uxtb	r2, r3
 8002438:	2117      	movs	r1, #23
 800243a:	187b      	adds	r3, r7, r1
 800243c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800243e:	187b      	adds	r3, r7, r1
 8002440:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	3301      	adds	r3, #1
 8002446:	d055      	beq.n	80024f4 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002448:	f7fe fcb0 	bl	8000dac <HAL_GetTick>
 800244c:	0002      	movs	r2, r0
 800244e:	6a3b      	ldr	r3, [r7, #32]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002454:	429a      	cmp	r2, r3
 8002456:	d902      	bls.n	800245e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245a:	2b00      	cmp	r3, #0
 800245c:	d142      	bne.n	80024e4 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	21e0      	movs	r1, #224	; 0xe0
 800246a:	438a      	bics	r2, r1
 800246c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	2382      	movs	r3, #130	; 0x82
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	429a      	cmp	r2, r3
 8002478:	d113      	bne.n	80024a2 <SPI_WaitFifoStateUntilTimeout+0xce>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	689a      	ldr	r2, [r3, #8]
 800247e:	2380      	movs	r3, #128	; 0x80
 8002480:	021b      	lsls	r3, r3, #8
 8002482:	429a      	cmp	r2, r3
 8002484:	d005      	beq.n	8002492 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	2380      	movs	r3, #128	; 0x80
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	429a      	cmp	r2, r3
 8002490:	d107      	bne.n	80024a2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2140      	movs	r1, #64	; 0x40
 800249e:	438a      	bics	r2, r1
 80024a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024a6:	2380      	movs	r3, #128	; 0x80
 80024a8:	019b      	lsls	r3, r3, #6
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d110      	bne.n	80024d0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4916      	ldr	r1, [pc, #88]	; (8002514 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80024ba:	400a      	ands	r2, r1
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2180      	movs	r1, #128	; 0x80
 80024ca:	0189      	lsls	r1, r1, #6
 80024cc:	430a      	orrs	r2, r1
 80024ce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	225d      	movs	r2, #93	; 0x5d
 80024d4:	2101      	movs	r1, #1
 80024d6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	225c      	movs	r2, #92	; 0x5c
 80024dc:	2100      	movs	r1, #0
 80024de:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e010      	b.n	8002506 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	3b01      	subs	r3, #1
 80024f2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	68ba      	ldr	r2, [r7, #8]
 80024fc:	4013      	ands	r3, r2
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	429a      	cmp	r2, r3
 8002502:	d18e      	bne.n	8002422 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	0018      	movs	r0, r3
 8002508:	46bd      	mov	sp, r7
 800250a:	b00a      	add	sp, #40	; 0x28
 800250c:	bd80      	pop	{r7, pc}
 800250e:	46c0      	nop			; (mov r8, r8)
 8002510:	20000000 	.word	0x20000000
 8002514:	ffffdfff 	.word	0xffffdfff

08002518 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af02      	add	r7, sp, #8
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002524:	68ba      	ldr	r2, [r7, #8]
 8002526:	23c0      	movs	r3, #192	; 0xc0
 8002528:	0159      	lsls	r1, r3, #5
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	0013      	movs	r3, r2
 8002532:	2200      	movs	r2, #0
 8002534:	f7ff ff4e 	bl	80023d4 <SPI_WaitFifoStateUntilTimeout>
 8002538:	1e03      	subs	r3, r0, #0
 800253a:	d007      	beq.n	800254c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002540:	2220      	movs	r2, #32
 8002542:	431a      	orrs	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e027      	b.n	800259c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800254c:	68ba      	ldr	r2, [r7, #8]
 800254e:	68f8      	ldr	r0, [r7, #12]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	0013      	movs	r3, r2
 8002556:	2200      	movs	r2, #0
 8002558:	2180      	movs	r1, #128	; 0x80
 800255a:	f7ff fead 	bl	80022b8 <SPI_WaitFlagStateUntilTimeout>
 800255e:	1e03      	subs	r3, r0, #0
 8002560:	d007      	beq.n	8002572 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002566:	2220      	movs	r2, #32
 8002568:	431a      	orrs	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e014      	b.n	800259c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	23c0      	movs	r3, #192	; 0xc0
 8002576:	00d9      	lsls	r1, r3, #3
 8002578:	68f8      	ldr	r0, [r7, #12]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	0013      	movs	r3, r2
 8002580:	2200      	movs	r2, #0
 8002582:	f7ff ff27 	bl	80023d4 <SPI_WaitFifoStateUntilTimeout>
 8002586:	1e03      	subs	r3, r0, #0
 8002588:	d007      	beq.n	800259a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800258e:	2220      	movs	r2, #32
 8002590:	431a      	orrs	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e000      	b.n	800259c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	0018      	movs	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	b004      	add	sp, #16
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e042      	b.n	800263c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	223d      	movs	r2, #61	; 0x3d
 80025ba:	5c9b      	ldrb	r3, [r3, r2]
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d107      	bne.n	80025d2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	223c      	movs	r2, #60	; 0x3c
 80025c6:	2100      	movs	r1, #0
 80025c8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	0018      	movs	r0, r3
 80025ce:	f7fe fa0d 	bl	80009ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	223d      	movs	r2, #61	; 0x3d
 80025d6:	2102      	movs	r1, #2
 80025d8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	3304      	adds	r3, #4
 80025e2:	0019      	movs	r1, r3
 80025e4:	0010      	movs	r0, r2
 80025e6:	f000 fbe7 	bl	8002db8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2246      	movs	r2, #70	; 0x46
 80025ee:	2101      	movs	r1, #1
 80025f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	223e      	movs	r2, #62	; 0x3e
 80025f6:	2101      	movs	r1, #1
 80025f8:	5499      	strb	r1, [r3, r2]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	223f      	movs	r2, #63	; 0x3f
 80025fe:	2101      	movs	r1, #1
 8002600:	5499      	strb	r1, [r3, r2]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2240      	movs	r2, #64	; 0x40
 8002606:	2101      	movs	r1, #1
 8002608:	5499      	strb	r1, [r3, r2]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2241      	movs	r2, #65	; 0x41
 800260e:	2101      	movs	r1, #1
 8002610:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2242      	movs	r2, #66	; 0x42
 8002616:	2101      	movs	r1, #1
 8002618:	5499      	strb	r1, [r3, r2]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2243      	movs	r2, #67	; 0x43
 800261e:	2101      	movs	r1, #1
 8002620:	5499      	strb	r1, [r3, r2]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2244      	movs	r2, #68	; 0x44
 8002626:	2101      	movs	r1, #1
 8002628:	5499      	strb	r1, [r3, r2]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2245      	movs	r2, #69	; 0x45
 800262e:	2101      	movs	r1, #1
 8002630:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	223d      	movs	r2, #61	; 0x3d
 8002636:	2101      	movs	r1, #1
 8002638:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	0018      	movs	r0, r3
 800263e:	46bd      	mov	sp, r7
 8002640:	b002      	add	sp, #8
 8002642:	bd80      	pop	{r7, pc}

08002644 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e042      	b.n	80026dc <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	223d      	movs	r2, #61	; 0x3d
 800265a:	5c9b      	ldrb	r3, [r3, r2]
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d107      	bne.n	8002672 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	223c      	movs	r2, #60	; 0x3c
 8002666:	2100      	movs	r1, #0
 8002668:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	0018      	movs	r0, r3
 800266e:	f000 f839 	bl	80026e4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	223d      	movs	r2, #61	; 0x3d
 8002676:	2102      	movs	r1, #2
 8002678:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	3304      	adds	r3, #4
 8002682:	0019      	movs	r1, r3
 8002684:	0010      	movs	r0, r2
 8002686:	f000 fb97 	bl	8002db8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2246      	movs	r2, #70	; 0x46
 800268e:	2101      	movs	r1, #1
 8002690:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	223e      	movs	r2, #62	; 0x3e
 8002696:	2101      	movs	r1, #1
 8002698:	5499      	strb	r1, [r3, r2]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	223f      	movs	r2, #63	; 0x3f
 800269e:	2101      	movs	r1, #1
 80026a0:	5499      	strb	r1, [r3, r2]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2240      	movs	r2, #64	; 0x40
 80026a6:	2101      	movs	r1, #1
 80026a8:	5499      	strb	r1, [r3, r2]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2241      	movs	r2, #65	; 0x41
 80026ae:	2101      	movs	r1, #1
 80026b0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2242      	movs	r2, #66	; 0x42
 80026b6:	2101      	movs	r1, #1
 80026b8:	5499      	strb	r1, [r3, r2]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2243      	movs	r2, #67	; 0x43
 80026be:	2101      	movs	r1, #1
 80026c0:	5499      	strb	r1, [r3, r2]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2244      	movs	r2, #68	; 0x44
 80026c6:	2101      	movs	r1, #1
 80026c8:	5499      	strb	r1, [r3, r2]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2245      	movs	r2, #69	; 0x45
 80026ce:	2101      	movs	r1, #1
 80026d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	223d      	movs	r2, #61	; 0x3d
 80026d6:	2101      	movs	r1, #1
 80026d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	0018      	movs	r0, r3
 80026de:	46bd      	mov	sp, r7
 80026e0:	b002      	add	sp, #8
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80026ec:	46c0      	nop			; (mov r8, r8)
 80026ee:	46bd      	mov	sp, r7
 80026f0:	b002      	add	sp, #8
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026fe:	230f      	movs	r3, #15
 8002700:	18fb      	adds	r3, r7, r3
 8002702:	2200      	movs	r2, #0
 8002704:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d108      	bne.n	800271e <HAL_TIM_OC_Start_IT+0x2a>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	223e      	movs	r2, #62	; 0x3e
 8002710:	5c9b      	ldrb	r3, [r3, r2]
 8002712:	b2db      	uxtb	r3, r3
 8002714:	3b01      	subs	r3, #1
 8002716:	1e5a      	subs	r2, r3, #1
 8002718:	4193      	sbcs	r3, r2
 800271a:	b2db      	uxtb	r3, r3
 800271c:	e01f      	b.n	800275e <HAL_TIM_OC_Start_IT+0x6a>
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	2b04      	cmp	r3, #4
 8002722:	d108      	bne.n	8002736 <HAL_TIM_OC_Start_IT+0x42>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	223f      	movs	r2, #63	; 0x3f
 8002728:	5c9b      	ldrb	r3, [r3, r2]
 800272a:	b2db      	uxtb	r3, r3
 800272c:	3b01      	subs	r3, #1
 800272e:	1e5a      	subs	r2, r3, #1
 8002730:	4193      	sbcs	r3, r2
 8002732:	b2db      	uxtb	r3, r3
 8002734:	e013      	b.n	800275e <HAL_TIM_OC_Start_IT+0x6a>
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	2b08      	cmp	r3, #8
 800273a:	d108      	bne.n	800274e <HAL_TIM_OC_Start_IT+0x5a>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2240      	movs	r2, #64	; 0x40
 8002740:	5c9b      	ldrb	r3, [r3, r2]
 8002742:	b2db      	uxtb	r3, r3
 8002744:	3b01      	subs	r3, #1
 8002746:	1e5a      	subs	r2, r3, #1
 8002748:	4193      	sbcs	r3, r2
 800274a:	b2db      	uxtb	r3, r3
 800274c:	e007      	b.n	800275e <HAL_TIM_OC_Start_IT+0x6a>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2241      	movs	r2, #65	; 0x41
 8002752:	5c9b      	ldrb	r3, [r3, r2]
 8002754:	b2db      	uxtb	r3, r3
 8002756:	3b01      	subs	r3, #1
 8002758:	1e5a      	subs	r2, r3, #1
 800275a:	4193      	sbcs	r3, r2
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e0b7      	b.n	80028d6 <HAL_TIM_OC_Start_IT+0x1e2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d104      	bne.n	8002776 <HAL_TIM_OC_Start_IT+0x82>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	223e      	movs	r2, #62	; 0x3e
 8002770:	2102      	movs	r1, #2
 8002772:	5499      	strb	r1, [r3, r2]
 8002774:	e013      	b.n	800279e <HAL_TIM_OC_Start_IT+0xaa>
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	2b04      	cmp	r3, #4
 800277a:	d104      	bne.n	8002786 <HAL_TIM_OC_Start_IT+0x92>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	223f      	movs	r2, #63	; 0x3f
 8002780:	2102      	movs	r1, #2
 8002782:	5499      	strb	r1, [r3, r2]
 8002784:	e00b      	b.n	800279e <HAL_TIM_OC_Start_IT+0xaa>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	2b08      	cmp	r3, #8
 800278a:	d104      	bne.n	8002796 <HAL_TIM_OC_Start_IT+0xa2>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2240      	movs	r2, #64	; 0x40
 8002790:	2102      	movs	r1, #2
 8002792:	5499      	strb	r1, [r3, r2]
 8002794:	e003      	b.n	800279e <HAL_TIM_OC_Start_IT+0xaa>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2241      	movs	r2, #65	; 0x41
 800279a:	2102      	movs	r1, #2
 800279c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	2b0c      	cmp	r3, #12
 80027a2:	d02a      	beq.n	80027fa <HAL_TIM_OC_Start_IT+0x106>
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	2b0c      	cmp	r3, #12
 80027a8:	d830      	bhi.n	800280c <HAL_TIM_OC_Start_IT+0x118>
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	2b08      	cmp	r3, #8
 80027ae:	d01b      	beq.n	80027e8 <HAL_TIM_OC_Start_IT+0xf4>
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	2b08      	cmp	r3, #8
 80027b4:	d82a      	bhi.n	800280c <HAL_TIM_OC_Start_IT+0x118>
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <HAL_TIM_OC_Start_IT+0xd0>
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	2b04      	cmp	r3, #4
 80027c0:	d009      	beq.n	80027d6 <HAL_TIM_OC_Start_IT+0xe2>
 80027c2:	e023      	b.n	800280c <HAL_TIM_OC_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68da      	ldr	r2, [r3, #12]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2102      	movs	r1, #2
 80027d0:	430a      	orrs	r2, r1
 80027d2:	60da      	str	r2, [r3, #12]
      break;
 80027d4:	e01f      	b.n	8002816 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68da      	ldr	r2, [r3, #12]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2104      	movs	r1, #4
 80027e2:	430a      	orrs	r2, r1
 80027e4:	60da      	str	r2, [r3, #12]
      break;
 80027e6:	e016      	b.n	8002816 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68da      	ldr	r2, [r3, #12]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2108      	movs	r1, #8
 80027f4:	430a      	orrs	r2, r1
 80027f6:	60da      	str	r2, [r3, #12]
      break;
 80027f8:	e00d      	b.n	8002816 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68da      	ldr	r2, [r3, #12]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2110      	movs	r1, #16
 8002806:	430a      	orrs	r2, r1
 8002808:	60da      	str	r2, [r3, #12]
      break;
 800280a:	e004      	b.n	8002816 <HAL_TIM_OC_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 800280c:	230f      	movs	r3, #15
 800280e:	18fb      	adds	r3, r7, r3
 8002810:	2201      	movs	r2, #1
 8002812:	701a      	strb	r2, [r3, #0]
      break;
 8002814:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8002816:	230f      	movs	r3, #15
 8002818:	18fb      	adds	r3, r7, r3
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d157      	bne.n	80028d0 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6839      	ldr	r1, [r7, #0]
 8002826:	2201      	movs	r2, #1
 8002828:	0018      	movs	r0, r3
 800282a:	f000 fddb 	bl	80033e4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a2b      	ldr	r2, [pc, #172]	; (80028e0 <HAL_TIM_OC_Start_IT+0x1ec>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d00e      	beq.n	8002856 <HAL_TIM_OC_Start_IT+0x162>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a29      	ldr	r2, [pc, #164]	; (80028e4 <HAL_TIM_OC_Start_IT+0x1f0>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d009      	beq.n	8002856 <HAL_TIM_OC_Start_IT+0x162>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a28      	ldr	r2, [pc, #160]	; (80028e8 <HAL_TIM_OC_Start_IT+0x1f4>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d004      	beq.n	8002856 <HAL_TIM_OC_Start_IT+0x162>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a26      	ldr	r2, [pc, #152]	; (80028ec <HAL_TIM_OC_Start_IT+0x1f8>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d101      	bne.n	800285a <HAL_TIM_OC_Start_IT+0x166>
 8002856:	2301      	movs	r3, #1
 8002858:	e000      	b.n	800285c <HAL_TIM_OC_Start_IT+0x168>
 800285a:	2300      	movs	r3, #0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d008      	beq.n	8002872 <HAL_TIM_OC_Start_IT+0x17e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2180      	movs	r1, #128	; 0x80
 800286c:	0209      	lsls	r1, r1, #8
 800286e:	430a      	orrs	r2, r1
 8002870:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a1a      	ldr	r2, [pc, #104]	; (80028e0 <HAL_TIM_OC_Start_IT+0x1ec>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d00f      	beq.n	800289c <HAL_TIM_OC_Start_IT+0x1a8>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	2380      	movs	r3, #128	; 0x80
 8002882:	05db      	lsls	r3, r3, #23
 8002884:	429a      	cmp	r2, r3
 8002886:	d009      	beq.n	800289c <HAL_TIM_OC_Start_IT+0x1a8>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a18      	ldr	r2, [pc, #96]	; (80028f0 <HAL_TIM_OC_Start_IT+0x1fc>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d004      	beq.n	800289c <HAL_TIM_OC_Start_IT+0x1a8>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a13      	ldr	r2, [pc, #76]	; (80028e4 <HAL_TIM_OC_Start_IT+0x1f0>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d111      	bne.n	80028c0 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	2207      	movs	r2, #7
 80028a4:	4013      	ands	r3, r2
 80028a6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	2b06      	cmp	r3, #6
 80028ac:	d010      	beq.n	80028d0 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2101      	movs	r1, #1
 80028ba:	430a      	orrs	r2, r1
 80028bc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028be:	e007      	b.n	80028d0 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2101      	movs	r1, #1
 80028cc:	430a      	orrs	r2, r1
 80028ce:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80028d0:	230f      	movs	r3, #15
 80028d2:	18fb      	adds	r3, r7, r3
 80028d4:	781b      	ldrb	r3, [r3, #0]
}
 80028d6:	0018      	movs	r0, r3
 80028d8:	46bd      	mov	sp, r7
 80028da:	b004      	add	sp, #16
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	46c0      	nop			; (mov r8, r8)
 80028e0:	40012c00 	.word	0x40012c00
 80028e4:	40014000 	.word	0x40014000
 80028e8:	40014400 	.word	0x40014400
 80028ec:	40014800 	.word	0x40014800
 80028f0:	40000400 	.word	0x40000400

080028f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	2202      	movs	r2, #2
 8002904:	4013      	ands	r3, r2
 8002906:	2b02      	cmp	r3, #2
 8002908:	d124      	bne.n	8002954 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	2202      	movs	r2, #2
 8002912:	4013      	ands	r3, r2
 8002914:	2b02      	cmp	r3, #2
 8002916:	d11d      	bne.n	8002954 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2203      	movs	r2, #3
 800291e:	4252      	negs	r2, r2
 8002920:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	2203      	movs	r2, #3
 8002930:	4013      	ands	r3, r2
 8002932:	d004      	beq.n	800293e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	0018      	movs	r0, r3
 8002938:	f000 fa26 	bl	8002d88 <HAL_TIM_IC_CaptureCallback>
 800293c:	e007      	b.n	800294e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	0018      	movs	r0, r3
 8002942:	f7fd fc6d 	bl	8000220 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	0018      	movs	r0, r3
 800294a:	f000 fa25 	bl	8002d98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	2204      	movs	r2, #4
 800295c:	4013      	ands	r3, r2
 800295e:	2b04      	cmp	r3, #4
 8002960:	d125      	bne.n	80029ae <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	2204      	movs	r2, #4
 800296a:	4013      	ands	r3, r2
 800296c:	2b04      	cmp	r3, #4
 800296e:	d11e      	bne.n	80029ae <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2205      	movs	r2, #5
 8002976:	4252      	negs	r2, r2
 8002978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2202      	movs	r2, #2
 800297e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	699a      	ldr	r2, [r3, #24]
 8002986:	23c0      	movs	r3, #192	; 0xc0
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4013      	ands	r3, r2
 800298c:	d004      	beq.n	8002998 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	0018      	movs	r0, r3
 8002992:	f000 f9f9 	bl	8002d88 <HAL_TIM_IC_CaptureCallback>
 8002996:	e007      	b.n	80029a8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	0018      	movs	r0, r3
 800299c:	f7fd fc40 	bl	8000220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	0018      	movs	r0, r3
 80029a4:	f000 f9f8 	bl	8002d98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	2208      	movs	r2, #8
 80029b6:	4013      	ands	r3, r2
 80029b8:	2b08      	cmp	r3, #8
 80029ba:	d124      	bne.n	8002a06 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	2208      	movs	r2, #8
 80029c4:	4013      	ands	r3, r2
 80029c6:	2b08      	cmp	r3, #8
 80029c8:	d11d      	bne.n	8002a06 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2209      	movs	r2, #9
 80029d0:	4252      	negs	r2, r2
 80029d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2204      	movs	r2, #4
 80029d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	69db      	ldr	r3, [r3, #28]
 80029e0:	2203      	movs	r2, #3
 80029e2:	4013      	ands	r3, r2
 80029e4:	d004      	beq.n	80029f0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	0018      	movs	r0, r3
 80029ea:	f000 f9cd 	bl	8002d88 <HAL_TIM_IC_CaptureCallback>
 80029ee:	e007      	b.n	8002a00 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	0018      	movs	r0, r3
 80029f4:	f7fd fc14 	bl	8000220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	0018      	movs	r0, r3
 80029fc:	f000 f9cc 	bl	8002d98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	2210      	movs	r2, #16
 8002a0e:	4013      	ands	r3, r2
 8002a10:	2b10      	cmp	r3, #16
 8002a12:	d125      	bne.n	8002a60 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	2210      	movs	r2, #16
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	2b10      	cmp	r3, #16
 8002a20:	d11e      	bne.n	8002a60 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2211      	movs	r2, #17
 8002a28:	4252      	negs	r2, r2
 8002a2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2208      	movs	r2, #8
 8002a30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	69da      	ldr	r2, [r3, #28]
 8002a38:	23c0      	movs	r3, #192	; 0xc0
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	d004      	beq.n	8002a4a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	0018      	movs	r0, r3
 8002a44:	f000 f9a0 	bl	8002d88 <HAL_TIM_IC_CaptureCallback>
 8002a48:	e007      	b.n	8002a5a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	f7fd fbe7 	bl	8000220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	0018      	movs	r0, r3
 8002a56:	f000 f99f 	bl	8002d98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	2201      	movs	r2, #1
 8002a68:	4013      	ands	r3, r2
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d10f      	bne.n	8002a8e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	2201      	movs	r2, #1
 8002a76:	4013      	ands	r3, r2
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d108      	bne.n	8002a8e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2202      	movs	r2, #2
 8002a82:	4252      	negs	r2, r2
 8002a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	0018      	movs	r0, r3
 8002a8a:	f000 f975 	bl	8002d78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	2280      	movs	r2, #128	; 0x80
 8002a96:	4013      	ands	r3, r2
 8002a98:	2b80      	cmp	r3, #128	; 0x80
 8002a9a:	d10f      	bne.n	8002abc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	2280      	movs	r2, #128	; 0x80
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	2b80      	cmp	r3, #128	; 0x80
 8002aa8:	d108      	bne.n	8002abc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2281      	movs	r2, #129	; 0x81
 8002ab0:	4252      	negs	r2, r2
 8002ab2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	f000 fd7c 	bl	80035b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	2240      	movs	r2, #64	; 0x40
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	2b40      	cmp	r3, #64	; 0x40
 8002ac8:	d10f      	bne.n	8002aea <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	2240      	movs	r2, #64	; 0x40
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	2b40      	cmp	r3, #64	; 0x40
 8002ad6:	d108      	bne.n	8002aea <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2241      	movs	r2, #65	; 0x41
 8002ade:	4252      	negs	r2, r2
 8002ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	f000 f95f 	bl	8002da8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	2220      	movs	r2, #32
 8002af2:	4013      	ands	r3, r2
 8002af4:	2b20      	cmp	r3, #32
 8002af6:	d10f      	bne.n	8002b18 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	2220      	movs	r2, #32
 8002b00:	4013      	ands	r3, r2
 8002b02:	2b20      	cmp	r3, #32
 8002b04:	d108      	bne.n	8002b18 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2221      	movs	r2, #33	; 0x21
 8002b0c:	4252      	negs	r2, r2
 8002b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	0018      	movs	r0, r3
 8002b14:	f000 fd46 	bl	80035a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b18:	46c0      	nop			; (mov r8, r8)
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	b002      	add	sp, #8
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b2c:	2317      	movs	r3, #23
 8002b2e:	18fb      	adds	r3, r7, r3
 8002b30:	2200      	movs	r2, #0
 8002b32:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	223c      	movs	r2, #60	; 0x3c
 8002b38:	5c9b      	ldrb	r3, [r3, r2]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d101      	bne.n	8002b42 <HAL_TIM_OC_ConfigChannel+0x22>
 8002b3e:	2302      	movs	r3, #2
 8002b40:	e042      	b.n	8002bc8 <HAL_TIM_OC_ConfigChannel+0xa8>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	223c      	movs	r2, #60	; 0x3c
 8002b46:	2101      	movs	r1, #1
 8002b48:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2b0c      	cmp	r3, #12
 8002b4e:	d027      	beq.n	8002ba0 <HAL_TIM_OC_ConfigChannel+0x80>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b0c      	cmp	r3, #12
 8002b54:	d82c      	bhi.n	8002bb0 <HAL_TIM_OC_ConfigChannel+0x90>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b08      	cmp	r3, #8
 8002b5a:	d019      	beq.n	8002b90 <HAL_TIM_OC_ConfigChannel+0x70>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b08      	cmp	r3, #8
 8002b60:	d826      	bhi.n	8002bb0 <HAL_TIM_OC_ConfigChannel+0x90>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <HAL_TIM_OC_ConfigChannel+0x50>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	d008      	beq.n	8002b80 <HAL_TIM_OC_ConfigChannel+0x60>
 8002b6e:	e01f      	b.n	8002bb0 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	0011      	movs	r1, r2
 8002b78:	0018      	movs	r0, r3
 8002b7a:	f000 f99d 	bl	8002eb8 <TIM_OC1_SetConfig>
      break;
 8002b7e:	e01c      	b.n	8002bba <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68ba      	ldr	r2, [r7, #8]
 8002b86:	0011      	movs	r1, r2
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f000 fa1d 	bl	8002fc8 <TIM_OC2_SetConfig>
      break;
 8002b8e:	e014      	b.n	8002bba <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68ba      	ldr	r2, [r7, #8]
 8002b96:	0011      	movs	r1, r2
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f000 fa99 	bl	80030d0 <TIM_OC3_SetConfig>
      break;
 8002b9e:	e00c      	b.n	8002bba <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68ba      	ldr	r2, [r7, #8]
 8002ba6:	0011      	movs	r1, r2
 8002ba8:	0018      	movs	r0, r3
 8002baa:	f000 fb17 	bl	80031dc <TIM_OC4_SetConfig>
      break;
 8002bae:	e004      	b.n	8002bba <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8002bb0:	2317      	movs	r3, #23
 8002bb2:	18fb      	adds	r3, r7, r3
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	701a      	strb	r2, [r3, #0]
      break;
 8002bb8:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	223c      	movs	r2, #60	; 0x3c
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	5499      	strb	r1, [r3, r2]

  return status;
 8002bc2:	2317      	movs	r3, #23
 8002bc4:	18fb      	adds	r3, r7, r3
 8002bc6:	781b      	ldrb	r3, [r3, #0]
}
 8002bc8:	0018      	movs	r0, r3
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	b006      	add	sp, #24
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bda:	230f      	movs	r3, #15
 8002bdc:	18fb      	adds	r3, r7, r3
 8002bde:	2200      	movs	r2, #0
 8002be0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	223c      	movs	r2, #60	; 0x3c
 8002be6:	5c9b      	ldrb	r3, [r3, r2]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d101      	bne.n	8002bf0 <HAL_TIM_ConfigClockSource+0x20>
 8002bec:	2302      	movs	r3, #2
 8002bee:	e0bc      	b.n	8002d6a <HAL_TIM_ConfigClockSource+0x19a>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	223c      	movs	r2, #60	; 0x3c
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	223d      	movs	r2, #61	; 0x3d
 8002bfc:	2102      	movs	r1, #2
 8002bfe:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	2277      	movs	r2, #119	; 0x77
 8002c0c:	4393      	bics	r3, r2
 8002c0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	4a58      	ldr	r2, [pc, #352]	; (8002d74 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002c14:	4013      	ands	r3, r2
 8002c16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68ba      	ldr	r2, [r7, #8]
 8002c1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2280      	movs	r2, #128	; 0x80
 8002c26:	0192      	lsls	r2, r2, #6
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d040      	beq.n	8002cae <HAL_TIM_ConfigClockSource+0xde>
 8002c2c:	2280      	movs	r2, #128	; 0x80
 8002c2e:	0192      	lsls	r2, r2, #6
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d900      	bls.n	8002c36 <HAL_TIM_ConfigClockSource+0x66>
 8002c34:	e088      	b.n	8002d48 <HAL_TIM_ConfigClockSource+0x178>
 8002c36:	2280      	movs	r2, #128	; 0x80
 8002c38:	0152      	lsls	r2, r2, #5
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d100      	bne.n	8002c40 <HAL_TIM_ConfigClockSource+0x70>
 8002c3e:	e088      	b.n	8002d52 <HAL_TIM_ConfigClockSource+0x182>
 8002c40:	2280      	movs	r2, #128	; 0x80
 8002c42:	0152      	lsls	r2, r2, #5
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d900      	bls.n	8002c4a <HAL_TIM_ConfigClockSource+0x7a>
 8002c48:	e07e      	b.n	8002d48 <HAL_TIM_ConfigClockSource+0x178>
 8002c4a:	2b70      	cmp	r3, #112	; 0x70
 8002c4c:	d018      	beq.n	8002c80 <HAL_TIM_ConfigClockSource+0xb0>
 8002c4e:	d900      	bls.n	8002c52 <HAL_TIM_ConfigClockSource+0x82>
 8002c50:	e07a      	b.n	8002d48 <HAL_TIM_ConfigClockSource+0x178>
 8002c52:	2b60      	cmp	r3, #96	; 0x60
 8002c54:	d04f      	beq.n	8002cf6 <HAL_TIM_ConfigClockSource+0x126>
 8002c56:	d900      	bls.n	8002c5a <HAL_TIM_ConfigClockSource+0x8a>
 8002c58:	e076      	b.n	8002d48 <HAL_TIM_ConfigClockSource+0x178>
 8002c5a:	2b50      	cmp	r3, #80	; 0x50
 8002c5c:	d03b      	beq.n	8002cd6 <HAL_TIM_ConfigClockSource+0x106>
 8002c5e:	d900      	bls.n	8002c62 <HAL_TIM_ConfigClockSource+0x92>
 8002c60:	e072      	b.n	8002d48 <HAL_TIM_ConfigClockSource+0x178>
 8002c62:	2b40      	cmp	r3, #64	; 0x40
 8002c64:	d057      	beq.n	8002d16 <HAL_TIM_ConfigClockSource+0x146>
 8002c66:	d900      	bls.n	8002c6a <HAL_TIM_ConfigClockSource+0x9a>
 8002c68:	e06e      	b.n	8002d48 <HAL_TIM_ConfigClockSource+0x178>
 8002c6a:	2b30      	cmp	r3, #48	; 0x30
 8002c6c:	d063      	beq.n	8002d36 <HAL_TIM_ConfigClockSource+0x166>
 8002c6e:	d86b      	bhi.n	8002d48 <HAL_TIM_ConfigClockSource+0x178>
 8002c70:	2b20      	cmp	r3, #32
 8002c72:	d060      	beq.n	8002d36 <HAL_TIM_ConfigClockSource+0x166>
 8002c74:	d868      	bhi.n	8002d48 <HAL_TIM_ConfigClockSource+0x178>
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d05d      	beq.n	8002d36 <HAL_TIM_ConfigClockSource+0x166>
 8002c7a:	2b10      	cmp	r3, #16
 8002c7c:	d05b      	beq.n	8002d36 <HAL_TIM_ConfigClockSource+0x166>
 8002c7e:	e063      	b.n	8002d48 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6818      	ldr	r0, [r3, #0]
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	6899      	ldr	r1, [r3, #8]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	f000 fb88 	bl	80033a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	2277      	movs	r2, #119	; 0x77
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68ba      	ldr	r2, [r7, #8]
 8002caa:	609a      	str	r2, [r3, #8]
      break;
 8002cac:	e052      	b.n	8002d54 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6818      	ldr	r0, [r3, #0]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	6899      	ldr	r1, [r3, #8]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	f000 fb71 	bl	80033a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2180      	movs	r1, #128	; 0x80
 8002cce:	01c9      	lsls	r1, r1, #7
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	609a      	str	r2, [r3, #8]
      break;
 8002cd4:	e03e      	b.n	8002d54 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6818      	ldr	r0, [r3, #0]
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	6859      	ldr	r1, [r3, #4]
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	001a      	movs	r2, r3
 8002ce4:	f000 fae4 	bl	80032b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2150      	movs	r1, #80	; 0x50
 8002cee:	0018      	movs	r0, r3
 8002cf0:	f000 fb3e 	bl	8003370 <TIM_ITRx_SetConfig>
      break;
 8002cf4:	e02e      	b.n	8002d54 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6818      	ldr	r0, [r3, #0]
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	6859      	ldr	r1, [r3, #4]
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	001a      	movs	r2, r3
 8002d04:	f000 fb02 	bl	800330c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2160      	movs	r1, #96	; 0x60
 8002d0e:	0018      	movs	r0, r3
 8002d10:	f000 fb2e 	bl	8003370 <TIM_ITRx_SetConfig>
      break;
 8002d14:	e01e      	b.n	8002d54 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6818      	ldr	r0, [r3, #0]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	6859      	ldr	r1, [r3, #4]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	001a      	movs	r2, r3
 8002d24:	f000 fac4 	bl	80032b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2140      	movs	r1, #64	; 0x40
 8002d2e:	0018      	movs	r0, r3
 8002d30:	f000 fb1e 	bl	8003370 <TIM_ITRx_SetConfig>
      break;
 8002d34:	e00e      	b.n	8002d54 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	0019      	movs	r1, r3
 8002d40:	0010      	movs	r0, r2
 8002d42:	f000 fb15 	bl	8003370 <TIM_ITRx_SetConfig>
      break;
 8002d46:	e005      	b.n	8002d54 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002d48:	230f      	movs	r3, #15
 8002d4a:	18fb      	adds	r3, r7, r3
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	701a      	strb	r2, [r3, #0]
      break;
 8002d50:	e000      	b.n	8002d54 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002d52:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	223d      	movs	r2, #61	; 0x3d
 8002d58:	2101      	movs	r1, #1
 8002d5a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	223c      	movs	r2, #60	; 0x3c
 8002d60:	2100      	movs	r1, #0
 8002d62:	5499      	strb	r1, [r3, r2]

  return status;
 8002d64:	230f      	movs	r3, #15
 8002d66:	18fb      	adds	r3, r7, r3
 8002d68:	781b      	ldrb	r3, [r3, #0]
}
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	b004      	add	sp, #16
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	46c0      	nop			; (mov r8, r8)
 8002d74:	ffff00ff 	.word	0xffff00ff

08002d78 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002d80:	46c0      	nop			; (mov r8, r8)
 8002d82:	46bd      	mov	sp, r7
 8002d84:	b002      	add	sp, #8
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d90:	46c0      	nop			; (mov r8, r8)
 8002d92:	46bd      	mov	sp, r7
 8002d94:	b002      	add	sp, #8
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002da0:	46c0      	nop			; (mov r8, r8)
 8002da2:	46bd      	mov	sp, r7
 8002da4:	b002      	add	sp, #8
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002db0:	46c0      	nop			; (mov r8, r8)
 8002db2:	46bd      	mov	sp, r7
 8002db4:	b002      	add	sp, #8
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a34      	ldr	r2, [pc, #208]	; (8002e9c <TIM_Base_SetConfig+0xe4>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d008      	beq.n	8002de2 <TIM_Base_SetConfig+0x2a>
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	2380      	movs	r3, #128	; 0x80
 8002dd4:	05db      	lsls	r3, r3, #23
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d003      	beq.n	8002de2 <TIM_Base_SetConfig+0x2a>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a30      	ldr	r2, [pc, #192]	; (8002ea0 <TIM_Base_SetConfig+0xe8>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d108      	bne.n	8002df4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2270      	movs	r2, #112	; 0x70
 8002de6:	4393      	bics	r3, r2
 8002de8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a29      	ldr	r2, [pc, #164]	; (8002e9c <TIM_Base_SetConfig+0xe4>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d018      	beq.n	8002e2e <TIM_Base_SetConfig+0x76>
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	2380      	movs	r3, #128	; 0x80
 8002e00:	05db      	lsls	r3, r3, #23
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d013      	beq.n	8002e2e <TIM_Base_SetConfig+0x76>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a25      	ldr	r2, [pc, #148]	; (8002ea0 <TIM_Base_SetConfig+0xe8>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d00f      	beq.n	8002e2e <TIM_Base_SetConfig+0x76>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a24      	ldr	r2, [pc, #144]	; (8002ea4 <TIM_Base_SetConfig+0xec>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d00b      	beq.n	8002e2e <TIM_Base_SetConfig+0x76>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a23      	ldr	r2, [pc, #140]	; (8002ea8 <TIM_Base_SetConfig+0xf0>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d007      	beq.n	8002e2e <TIM_Base_SetConfig+0x76>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a22      	ldr	r2, [pc, #136]	; (8002eac <TIM_Base_SetConfig+0xf4>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d003      	beq.n	8002e2e <TIM_Base_SetConfig+0x76>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a21      	ldr	r2, [pc, #132]	; (8002eb0 <TIM_Base_SetConfig+0xf8>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d108      	bne.n	8002e40 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	4a20      	ldr	r2, [pc, #128]	; (8002eb4 <TIM_Base_SetConfig+0xfc>)
 8002e32:	4013      	ands	r3, r2
 8002e34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2280      	movs	r2, #128	; 0x80
 8002e44:	4393      	bics	r3, r2
 8002e46:	001a      	movs	r2, r3
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a0c      	ldr	r2, [pc, #48]	; (8002e9c <TIM_Base_SetConfig+0xe4>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d00b      	beq.n	8002e86 <TIM_Base_SetConfig+0xce>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a0d      	ldr	r2, [pc, #52]	; (8002ea8 <TIM_Base_SetConfig+0xf0>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d007      	beq.n	8002e86 <TIM_Base_SetConfig+0xce>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a0c      	ldr	r2, [pc, #48]	; (8002eac <TIM_Base_SetConfig+0xf4>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d003      	beq.n	8002e86 <TIM_Base_SetConfig+0xce>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a0b      	ldr	r2, [pc, #44]	; (8002eb0 <TIM_Base_SetConfig+0xf8>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d103      	bne.n	8002e8e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	691a      	ldr	r2, [r3, #16]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2201      	movs	r2, #1
 8002e92:	615a      	str	r2, [r3, #20]
}
 8002e94:	46c0      	nop			; (mov r8, r8)
 8002e96:	46bd      	mov	sp, r7
 8002e98:	b004      	add	sp, #16
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40012c00 	.word	0x40012c00
 8002ea0:	40000400 	.word	0x40000400
 8002ea4:	40002000 	.word	0x40002000
 8002ea8:	40014000 	.word	0x40014000
 8002eac:	40014400 	.word	0x40014400
 8002eb0:	40014800 	.word	0x40014800
 8002eb4:	fffffcff 	.word	0xfffffcff

08002eb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	4393      	bics	r3, r2
 8002eca:	001a      	movs	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2270      	movs	r2, #112	; 0x70
 8002ee6:	4393      	bics	r3, r2
 8002ee8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2203      	movs	r2, #3
 8002eee:	4393      	bics	r3, r2
 8002ef0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	2202      	movs	r2, #2
 8002f00:	4393      	bics	r3, r2
 8002f02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a27      	ldr	r2, [pc, #156]	; (8002fb0 <TIM_OC1_SetConfig+0xf8>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d00b      	beq.n	8002f2e <TIM_OC1_SetConfig+0x76>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a26      	ldr	r2, [pc, #152]	; (8002fb4 <TIM_OC1_SetConfig+0xfc>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d007      	beq.n	8002f2e <TIM_OC1_SetConfig+0x76>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a25      	ldr	r2, [pc, #148]	; (8002fb8 <TIM_OC1_SetConfig+0x100>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d003      	beq.n	8002f2e <TIM_OC1_SetConfig+0x76>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a24      	ldr	r2, [pc, #144]	; (8002fbc <TIM_OC1_SetConfig+0x104>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d10c      	bne.n	8002f48 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	2208      	movs	r2, #8
 8002f32:	4393      	bics	r3, r2
 8002f34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	2204      	movs	r2, #4
 8002f44:	4393      	bics	r3, r2
 8002f46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a19      	ldr	r2, [pc, #100]	; (8002fb0 <TIM_OC1_SetConfig+0xf8>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d00b      	beq.n	8002f68 <TIM_OC1_SetConfig+0xb0>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a18      	ldr	r2, [pc, #96]	; (8002fb4 <TIM_OC1_SetConfig+0xfc>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d007      	beq.n	8002f68 <TIM_OC1_SetConfig+0xb0>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a17      	ldr	r2, [pc, #92]	; (8002fb8 <TIM_OC1_SetConfig+0x100>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d003      	beq.n	8002f68 <TIM_OC1_SetConfig+0xb0>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a16      	ldr	r2, [pc, #88]	; (8002fbc <TIM_OC1_SetConfig+0x104>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d111      	bne.n	8002f8c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	4a15      	ldr	r2, [pc, #84]	; (8002fc0 <TIM_OC1_SetConfig+0x108>)
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	4a14      	ldr	r2, [pc, #80]	; (8002fc4 <TIM_OC1_SetConfig+0x10c>)
 8002f74:	4013      	ands	r3, r2
 8002f76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	621a      	str	r2, [r3, #32]
}
 8002fa6:	46c0      	nop			; (mov r8, r8)
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	b006      	add	sp, #24
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	46c0      	nop			; (mov r8, r8)
 8002fb0:	40012c00 	.word	0x40012c00
 8002fb4:	40014000 	.word	0x40014000
 8002fb8:	40014400 	.word	0x40014400
 8002fbc:	40014800 	.word	0x40014800
 8002fc0:	fffffeff 	.word	0xfffffeff
 8002fc4:	fffffdff 	.word	0xfffffdff

08002fc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	2210      	movs	r2, #16
 8002fd8:	4393      	bics	r3, r2
 8002fda:	001a      	movs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	4a2e      	ldr	r2, [pc, #184]	; (80030b0 <TIM_OC2_SetConfig+0xe8>)
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	4a2d      	ldr	r2, [pc, #180]	; (80030b4 <TIM_OC2_SetConfig+0xec>)
 8002ffe:	4013      	ands	r3, r2
 8003000:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	021b      	lsls	r3, r3, #8
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	4313      	orrs	r3, r2
 800300c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	2220      	movs	r2, #32
 8003012:	4393      	bics	r3, r2
 8003014:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	011b      	lsls	r3, r3, #4
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	4313      	orrs	r3, r2
 8003020:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a24      	ldr	r2, [pc, #144]	; (80030b8 <TIM_OC2_SetConfig+0xf0>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d10d      	bne.n	8003046 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	2280      	movs	r2, #128	; 0x80
 800302e:	4393      	bics	r3, r2
 8003030:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	011b      	lsls	r3, r3, #4
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	4313      	orrs	r3, r2
 800303c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	2240      	movs	r2, #64	; 0x40
 8003042:	4393      	bics	r3, r2
 8003044:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a1b      	ldr	r2, [pc, #108]	; (80030b8 <TIM_OC2_SetConfig+0xf0>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d00b      	beq.n	8003066 <TIM_OC2_SetConfig+0x9e>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a1a      	ldr	r2, [pc, #104]	; (80030bc <TIM_OC2_SetConfig+0xf4>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d007      	beq.n	8003066 <TIM_OC2_SetConfig+0x9e>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a19      	ldr	r2, [pc, #100]	; (80030c0 <TIM_OC2_SetConfig+0xf8>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d003      	beq.n	8003066 <TIM_OC2_SetConfig+0x9e>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a18      	ldr	r2, [pc, #96]	; (80030c4 <TIM_OC2_SetConfig+0xfc>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d113      	bne.n	800308e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	4a17      	ldr	r2, [pc, #92]	; (80030c8 <TIM_OC2_SetConfig+0x100>)
 800306a:	4013      	ands	r3, r2
 800306c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	4a16      	ldr	r2, [pc, #88]	; (80030cc <TIM_OC2_SetConfig+0x104>)
 8003072:	4013      	ands	r3, r2
 8003074:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	4313      	orrs	r3, r2
 8003080:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	4313      	orrs	r3, r2
 800308c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	621a      	str	r2, [r3, #32]
}
 80030a8:	46c0      	nop			; (mov r8, r8)
 80030aa:	46bd      	mov	sp, r7
 80030ac:	b006      	add	sp, #24
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	ffff8fff 	.word	0xffff8fff
 80030b4:	fffffcff 	.word	0xfffffcff
 80030b8:	40012c00 	.word	0x40012c00
 80030bc:	40014000 	.word	0x40014000
 80030c0:	40014400 	.word	0x40014400
 80030c4:	40014800 	.word	0x40014800
 80030c8:	fffffbff 	.word	0xfffffbff
 80030cc:	fffff7ff 	.word	0xfffff7ff

080030d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	4a35      	ldr	r2, [pc, #212]	; (80031b4 <TIM_OC3_SetConfig+0xe4>)
 80030e0:	401a      	ands	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2270      	movs	r2, #112	; 0x70
 80030fc:	4393      	bics	r3, r2
 80030fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2203      	movs	r2, #3
 8003104:	4393      	bics	r3, r2
 8003106:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	4313      	orrs	r3, r2
 8003110:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	4a28      	ldr	r2, [pc, #160]	; (80031b8 <TIM_OC3_SetConfig+0xe8>)
 8003116:	4013      	ands	r3, r2
 8003118:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	021b      	lsls	r3, r3, #8
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	4313      	orrs	r3, r2
 8003124:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a24      	ldr	r2, [pc, #144]	; (80031bc <TIM_OC3_SetConfig+0xec>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d10d      	bne.n	800314a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	4a23      	ldr	r2, [pc, #140]	; (80031c0 <TIM_OC3_SetConfig+0xf0>)
 8003132:	4013      	ands	r3, r2
 8003134:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	021b      	lsls	r3, r3, #8
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	4313      	orrs	r3, r2
 8003140:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	4a1f      	ldr	r2, [pc, #124]	; (80031c4 <TIM_OC3_SetConfig+0xf4>)
 8003146:	4013      	ands	r3, r2
 8003148:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a1b      	ldr	r2, [pc, #108]	; (80031bc <TIM_OC3_SetConfig+0xec>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d00b      	beq.n	800316a <TIM_OC3_SetConfig+0x9a>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a1c      	ldr	r2, [pc, #112]	; (80031c8 <TIM_OC3_SetConfig+0xf8>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d007      	beq.n	800316a <TIM_OC3_SetConfig+0x9a>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a1b      	ldr	r2, [pc, #108]	; (80031cc <TIM_OC3_SetConfig+0xfc>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d003      	beq.n	800316a <TIM_OC3_SetConfig+0x9a>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a1a      	ldr	r2, [pc, #104]	; (80031d0 <TIM_OC3_SetConfig+0x100>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d113      	bne.n	8003192 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	4a19      	ldr	r2, [pc, #100]	; (80031d4 <TIM_OC3_SetConfig+0x104>)
 800316e:	4013      	ands	r3, r2
 8003170:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	4a18      	ldr	r2, [pc, #96]	; (80031d8 <TIM_OC3_SetConfig+0x108>)
 8003176:	4013      	ands	r3, r2
 8003178:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	011b      	lsls	r3, r3, #4
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	4313      	orrs	r3, r2
 8003184:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	011b      	lsls	r3, r3, #4
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	4313      	orrs	r3, r2
 8003190:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685a      	ldr	r2, [r3, #4]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	621a      	str	r2, [r3, #32]
}
 80031ac:	46c0      	nop			; (mov r8, r8)
 80031ae:	46bd      	mov	sp, r7
 80031b0:	b006      	add	sp, #24
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	fffffeff 	.word	0xfffffeff
 80031b8:	fffffdff 	.word	0xfffffdff
 80031bc:	40012c00 	.word	0x40012c00
 80031c0:	fffff7ff 	.word	0xfffff7ff
 80031c4:	fffffbff 	.word	0xfffffbff
 80031c8:	40014000 	.word	0x40014000
 80031cc:	40014400 	.word	0x40014400
 80031d0:	40014800 	.word	0x40014800
 80031d4:	ffffefff 	.word	0xffffefff
 80031d8:	ffffdfff 	.word	0xffffdfff

080031dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	4a28      	ldr	r2, [pc, #160]	; (800328c <TIM_OC4_SetConfig+0xb0>)
 80031ec:	401a      	ands	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4a22      	ldr	r2, [pc, #136]	; (8003290 <TIM_OC4_SetConfig+0xb4>)
 8003208:	4013      	ands	r3, r2
 800320a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	4a21      	ldr	r2, [pc, #132]	; (8003294 <TIM_OC4_SetConfig+0xb8>)
 8003210:	4013      	ands	r3, r2
 8003212:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	021b      	lsls	r3, r3, #8
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	4313      	orrs	r3, r2
 800321e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	4a1d      	ldr	r2, [pc, #116]	; (8003298 <TIM_OC4_SetConfig+0xbc>)
 8003224:	4013      	ands	r3, r2
 8003226:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	031b      	lsls	r3, r3, #12
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	4313      	orrs	r3, r2
 8003232:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a19      	ldr	r2, [pc, #100]	; (800329c <TIM_OC4_SetConfig+0xc0>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d00b      	beq.n	8003254 <TIM_OC4_SetConfig+0x78>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a18      	ldr	r2, [pc, #96]	; (80032a0 <TIM_OC4_SetConfig+0xc4>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d007      	beq.n	8003254 <TIM_OC4_SetConfig+0x78>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a17      	ldr	r2, [pc, #92]	; (80032a4 <TIM_OC4_SetConfig+0xc8>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d003      	beq.n	8003254 <TIM_OC4_SetConfig+0x78>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a16      	ldr	r2, [pc, #88]	; (80032a8 <TIM_OC4_SetConfig+0xcc>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d109      	bne.n	8003268 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	4a15      	ldr	r2, [pc, #84]	; (80032ac <TIM_OC4_SetConfig+0xd0>)
 8003258:	4013      	ands	r3, r2
 800325a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	695b      	ldr	r3, [r3, #20]
 8003260:	019b      	lsls	r3, r3, #6
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	4313      	orrs	r3, r2
 8003266:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	621a      	str	r2, [r3, #32]
}
 8003282:	46c0      	nop			; (mov r8, r8)
 8003284:	46bd      	mov	sp, r7
 8003286:	b006      	add	sp, #24
 8003288:	bd80      	pop	{r7, pc}
 800328a:	46c0      	nop			; (mov r8, r8)
 800328c:	ffffefff 	.word	0xffffefff
 8003290:	ffff8fff 	.word	0xffff8fff
 8003294:	fffffcff 	.word	0xfffffcff
 8003298:	ffffdfff 	.word	0xffffdfff
 800329c:	40012c00 	.word	0x40012c00
 80032a0:	40014000 	.word	0x40014000
 80032a4:	40014400 	.word	0x40014400
 80032a8:	40014800 	.word	0x40014800
 80032ac:	ffffbfff 	.word	0xffffbfff

080032b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	2201      	movs	r2, #1
 80032c8:	4393      	bics	r3, r2
 80032ca:	001a      	movs	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	22f0      	movs	r2, #240	; 0xf0
 80032da:	4393      	bics	r3, r2
 80032dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	011b      	lsls	r3, r3, #4
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	220a      	movs	r2, #10
 80032ec:	4393      	bics	r3, r2
 80032ee:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	621a      	str	r2, [r3, #32]
}
 8003304:	46c0      	nop			; (mov r8, r8)
 8003306:	46bd      	mov	sp, r7
 8003308:	b006      	add	sp, #24
 800330a:	bd80      	pop	{r7, pc}

0800330c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	2210      	movs	r2, #16
 800331e:	4393      	bics	r3, r2
 8003320:	001a      	movs	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6a1b      	ldr	r3, [r3, #32]
 8003330:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	4a0d      	ldr	r2, [pc, #52]	; (800336c <TIM_TI2_ConfigInputStage+0x60>)
 8003336:	4013      	ands	r3, r2
 8003338:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	031b      	lsls	r3, r3, #12
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	4313      	orrs	r3, r2
 8003342:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	22a0      	movs	r2, #160	; 0xa0
 8003348:	4393      	bics	r3, r2
 800334a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	011b      	lsls	r3, r3, #4
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	4313      	orrs	r3, r2
 8003354:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	621a      	str	r2, [r3, #32]
}
 8003362:	46c0      	nop			; (mov r8, r8)
 8003364:	46bd      	mov	sp, r7
 8003366:	b006      	add	sp, #24
 8003368:	bd80      	pop	{r7, pc}
 800336a:	46c0      	nop			; (mov r8, r8)
 800336c:	ffff0fff 	.word	0xffff0fff

08003370 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2270      	movs	r2, #112	; 0x70
 8003384:	4393      	bics	r3, r2
 8003386:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	4313      	orrs	r3, r2
 800338e:	2207      	movs	r2, #7
 8003390:	4313      	orrs	r3, r2
 8003392:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	609a      	str	r2, [r3, #8]
}
 800339a:	46c0      	nop			; (mov r8, r8)
 800339c:	46bd      	mov	sp, r7
 800339e:	b004      	add	sp, #16
 80033a0:	bd80      	pop	{r7, pc}
	...

080033a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
 80033b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	4a09      	ldr	r2, [pc, #36]	; (80033e0 <TIM_ETR_SetConfig+0x3c>)
 80033bc:	4013      	ands	r3, r2
 80033be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	021a      	lsls	r2, r3, #8
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	431a      	orrs	r2, r3
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	697a      	ldr	r2, [r7, #20]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	609a      	str	r2, [r3, #8]
}
 80033d8:	46c0      	nop			; (mov r8, r8)
 80033da:	46bd      	mov	sp, r7
 80033dc:	b006      	add	sp, #24
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	ffff00ff 	.word	0xffff00ff

080033e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	221f      	movs	r2, #31
 80033f4:	4013      	ands	r3, r2
 80033f6:	2201      	movs	r2, #1
 80033f8:	409a      	lsls	r2, r3
 80033fa:	0013      	movs	r3, r2
 80033fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	43d2      	mvns	r2, r2
 8003406:	401a      	ands	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6a1a      	ldr	r2, [r3, #32]
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	211f      	movs	r1, #31
 8003414:	400b      	ands	r3, r1
 8003416:	6879      	ldr	r1, [r7, #4]
 8003418:	4099      	lsls	r1, r3
 800341a:	000b      	movs	r3, r1
 800341c:	431a      	orrs	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	621a      	str	r2, [r3, #32]
}
 8003422:	46c0      	nop			; (mov r8, r8)
 8003424:	46bd      	mov	sp, r7
 8003426:	b006      	add	sp, #24
 8003428:	bd80      	pop	{r7, pc}
	...

0800342c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	223c      	movs	r2, #60	; 0x3c
 800343a:	5c9b      	ldrb	r3, [r3, r2]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d101      	bne.n	8003444 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003440:	2302      	movs	r3, #2
 8003442:	e047      	b.n	80034d4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	223c      	movs	r2, #60	; 0x3c
 8003448:	2101      	movs	r1, #1
 800344a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	223d      	movs	r2, #61	; 0x3d
 8003450:	2102      	movs	r1, #2
 8003452:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2270      	movs	r2, #112	; 0x70
 8003468:	4393      	bics	r3, r2
 800346a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	4313      	orrs	r3, r2
 8003474:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a16      	ldr	r2, [pc, #88]	; (80034dc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d00f      	beq.n	80034a8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	2380      	movs	r3, #128	; 0x80
 800348e:	05db      	lsls	r3, r3, #23
 8003490:	429a      	cmp	r2, r3
 8003492:	d009      	beq.n	80034a8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a11      	ldr	r2, [pc, #68]	; (80034e0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d004      	beq.n	80034a8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a10      	ldr	r2, [pc, #64]	; (80034e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d10c      	bne.n	80034c2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	2280      	movs	r2, #128	; 0x80
 80034ac:	4393      	bics	r3, r2
 80034ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	68ba      	ldr	r2, [r7, #8]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68ba      	ldr	r2, [r7, #8]
 80034c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	223d      	movs	r2, #61	; 0x3d
 80034c6:	2101      	movs	r1, #1
 80034c8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	223c      	movs	r2, #60	; 0x3c
 80034ce:	2100      	movs	r1, #0
 80034d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	0018      	movs	r0, r3
 80034d6:	46bd      	mov	sp, r7
 80034d8:	b004      	add	sp, #16
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40012c00 	.word	0x40012c00
 80034e0:	40000400 	.word	0x40000400
 80034e4:	40014000 	.word	0x40014000

080034e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80034f2:	2300      	movs	r3, #0
 80034f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	223c      	movs	r2, #60	; 0x3c
 80034fa:	5c9b      	ldrb	r3, [r3, r2]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d101      	bne.n	8003504 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003500:	2302      	movs	r3, #2
 8003502:	e03e      	b.n	8003582 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	223c      	movs	r2, #60	; 0x3c
 8003508:	2101      	movs	r1, #1
 800350a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	22ff      	movs	r2, #255	; 0xff
 8003510:	4393      	bics	r3, r2
 8003512:	001a      	movs	r2, r3
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	4313      	orrs	r3, r2
 800351a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4a1b      	ldr	r2, [pc, #108]	; (800358c <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8003520:	401a      	ands	r2, r3
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	4313      	orrs	r3, r2
 8003528:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	4a18      	ldr	r2, [pc, #96]	; (8003590 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800352e:	401a      	ands	r2, r3
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	4313      	orrs	r3, r2
 8003536:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	4a16      	ldr	r2, [pc, #88]	; (8003594 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 800353c:	401a      	ands	r2, r3
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4313      	orrs	r3, r2
 8003544:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	4a13      	ldr	r2, [pc, #76]	; (8003598 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800354a:	401a      	ands	r2, r3
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	4313      	orrs	r3, r2
 8003552:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	4a11      	ldr	r2, [pc, #68]	; (800359c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8003558:	401a      	ands	r2, r3
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	4313      	orrs	r3, r2
 8003560:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	4a0e      	ldr	r2, [pc, #56]	; (80035a0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8003566:	401a      	ands	r2, r3
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	69db      	ldr	r3, [r3, #28]
 800356c:	4313      	orrs	r3, r2
 800356e:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	223c      	movs	r2, #60	; 0x3c
 800357c:	2100      	movs	r1, #0
 800357e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	0018      	movs	r0, r3
 8003584:	46bd      	mov	sp, r7
 8003586:	b004      	add	sp, #16
 8003588:	bd80      	pop	{r7, pc}
 800358a:	46c0      	nop			; (mov r8, r8)
 800358c:	fffffcff 	.word	0xfffffcff
 8003590:	fffffbff 	.word	0xfffffbff
 8003594:	fffff7ff 	.word	0xfffff7ff
 8003598:	ffffefff 	.word	0xffffefff
 800359c:	ffffdfff 	.word	0xffffdfff
 80035a0:	ffffbfff 	.word	0xffffbfff

080035a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035ac:	46c0      	nop			; (mov r8, r8)
 80035ae:	46bd      	mov	sp, r7
 80035b0:	b002      	add	sp, #8
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035bc:	46c0      	nop			; (mov r8, r8)
 80035be:	46bd      	mov	sp, r7
 80035c0:	b002      	add	sp, #8
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e044      	b.n	8003660 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d107      	bne.n	80035ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2274      	movs	r2, #116	; 0x74
 80035e2:	2100      	movs	r1, #0
 80035e4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	0018      	movs	r0, r3
 80035ea:	f7fd fab7 	bl	8000b5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2224      	movs	r2, #36	; 0x24
 80035f2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2101      	movs	r1, #1
 8003600:	438a      	bics	r2, r1
 8003602:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	0018      	movs	r0, r3
 8003608:	f000 fb24 	bl	8003c54 <UART_SetConfig>
 800360c:	0003      	movs	r3, r0
 800360e:	2b01      	cmp	r3, #1
 8003610:	d101      	bne.n	8003616 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e024      	b.n	8003660 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	0018      	movs	r0, r3
 8003622:	f000 fc57 	bl	8003ed4 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	685a      	ldr	r2, [r3, #4]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	490d      	ldr	r1, [pc, #52]	; (8003668 <HAL_UART_Init+0xa4>)
 8003632:	400a      	ands	r2, r1
 8003634:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	212a      	movs	r1, #42	; 0x2a
 8003642:	438a      	bics	r2, r1
 8003644:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2101      	movs	r1, #1
 8003652:	430a      	orrs	r2, r1
 8003654:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	0018      	movs	r0, r3
 800365a:	f000 fcef 	bl	800403c <UART_CheckIdleState>
 800365e:	0003      	movs	r3, r0
}
 8003660:	0018      	movs	r0, r3
 8003662:	46bd      	mov	sp, r7
 8003664:	b002      	add	sp, #8
 8003666:	bd80      	pop	{r7, pc}
 8003668:	ffffb7ff 	.word	0xffffb7ff

0800366c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800366c:	b590      	push	{r4, r7, lr}
 800366e:	b0ab      	sub	sp, #172	; 0xac
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	69db      	ldr	r3, [r3, #28]
 800367a:	22a4      	movs	r2, #164	; 0xa4
 800367c:	18b9      	adds	r1, r7, r2
 800367e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	20a0      	movs	r0, #160	; 0xa0
 8003688:	1839      	adds	r1, r7, r0
 800368a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	219c      	movs	r1, #156	; 0x9c
 8003694:	1879      	adds	r1, r7, r1
 8003696:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003698:	0011      	movs	r1, r2
 800369a:	18bb      	adds	r3, r7, r2
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a99      	ldr	r2, [pc, #612]	; (8003904 <HAL_UART_IRQHandler+0x298>)
 80036a0:	4013      	ands	r3, r2
 80036a2:	2298      	movs	r2, #152	; 0x98
 80036a4:	18bc      	adds	r4, r7, r2
 80036a6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80036a8:	18bb      	adds	r3, r7, r2
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d114      	bne.n	80036da <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80036b0:	187b      	adds	r3, r7, r1
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2220      	movs	r2, #32
 80036b6:	4013      	ands	r3, r2
 80036b8:	d00f      	beq.n	80036da <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80036ba:	183b      	adds	r3, r7, r0
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2220      	movs	r2, #32
 80036c0:	4013      	ands	r3, r2
 80036c2:	d00a      	beq.n	80036da <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d100      	bne.n	80036ce <HAL_UART_IRQHandler+0x62>
 80036cc:	e296      	b.n	8003bfc <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	0010      	movs	r0, r2
 80036d6:	4798      	blx	r3
      }
      return;
 80036d8:	e290      	b.n	8003bfc <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80036da:	2398      	movs	r3, #152	; 0x98
 80036dc:	18fb      	adds	r3, r7, r3
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d100      	bne.n	80036e6 <HAL_UART_IRQHandler+0x7a>
 80036e4:	e114      	b.n	8003910 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80036e6:	239c      	movs	r3, #156	; 0x9c
 80036e8:	18fb      	adds	r3, r7, r3
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2201      	movs	r2, #1
 80036ee:	4013      	ands	r3, r2
 80036f0:	d106      	bne.n	8003700 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80036f2:	23a0      	movs	r3, #160	; 0xa0
 80036f4:	18fb      	adds	r3, r7, r3
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a83      	ldr	r2, [pc, #524]	; (8003908 <HAL_UART_IRQHandler+0x29c>)
 80036fa:	4013      	ands	r3, r2
 80036fc:	d100      	bne.n	8003700 <HAL_UART_IRQHandler+0x94>
 80036fe:	e107      	b.n	8003910 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003700:	23a4      	movs	r3, #164	; 0xa4
 8003702:	18fb      	adds	r3, r7, r3
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2201      	movs	r2, #1
 8003708:	4013      	ands	r3, r2
 800370a:	d012      	beq.n	8003732 <HAL_UART_IRQHandler+0xc6>
 800370c:	23a0      	movs	r3, #160	; 0xa0
 800370e:	18fb      	adds	r3, r7, r3
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	2380      	movs	r3, #128	; 0x80
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	4013      	ands	r3, r2
 8003718:	d00b      	beq.n	8003732 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2201      	movs	r2, #1
 8003720:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2280      	movs	r2, #128	; 0x80
 8003726:	589b      	ldr	r3, [r3, r2]
 8003728:	2201      	movs	r2, #1
 800372a:	431a      	orrs	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2180      	movs	r1, #128	; 0x80
 8003730:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003732:	23a4      	movs	r3, #164	; 0xa4
 8003734:	18fb      	adds	r3, r7, r3
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2202      	movs	r2, #2
 800373a:	4013      	ands	r3, r2
 800373c:	d011      	beq.n	8003762 <HAL_UART_IRQHandler+0xf6>
 800373e:	239c      	movs	r3, #156	; 0x9c
 8003740:	18fb      	adds	r3, r7, r3
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2201      	movs	r2, #1
 8003746:	4013      	ands	r3, r2
 8003748:	d00b      	beq.n	8003762 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2202      	movs	r2, #2
 8003750:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2280      	movs	r2, #128	; 0x80
 8003756:	589b      	ldr	r3, [r3, r2]
 8003758:	2204      	movs	r2, #4
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2180      	movs	r1, #128	; 0x80
 8003760:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003762:	23a4      	movs	r3, #164	; 0xa4
 8003764:	18fb      	adds	r3, r7, r3
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2204      	movs	r2, #4
 800376a:	4013      	ands	r3, r2
 800376c:	d011      	beq.n	8003792 <HAL_UART_IRQHandler+0x126>
 800376e:	239c      	movs	r3, #156	; 0x9c
 8003770:	18fb      	adds	r3, r7, r3
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2201      	movs	r2, #1
 8003776:	4013      	ands	r3, r2
 8003778:	d00b      	beq.n	8003792 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2204      	movs	r2, #4
 8003780:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2280      	movs	r2, #128	; 0x80
 8003786:	589b      	ldr	r3, [r3, r2]
 8003788:	2202      	movs	r2, #2
 800378a:	431a      	orrs	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2180      	movs	r1, #128	; 0x80
 8003790:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003792:	23a4      	movs	r3, #164	; 0xa4
 8003794:	18fb      	adds	r3, r7, r3
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2208      	movs	r2, #8
 800379a:	4013      	ands	r3, r2
 800379c:	d017      	beq.n	80037ce <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800379e:	23a0      	movs	r3, #160	; 0xa0
 80037a0:	18fb      	adds	r3, r7, r3
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2220      	movs	r2, #32
 80037a6:	4013      	ands	r3, r2
 80037a8:	d105      	bne.n	80037b6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80037aa:	239c      	movs	r3, #156	; 0x9c
 80037ac:	18fb      	adds	r3, r7, r3
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2201      	movs	r2, #1
 80037b2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80037b4:	d00b      	beq.n	80037ce <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2208      	movs	r2, #8
 80037bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2280      	movs	r2, #128	; 0x80
 80037c2:	589b      	ldr	r3, [r3, r2]
 80037c4:	2208      	movs	r2, #8
 80037c6:	431a      	orrs	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2180      	movs	r1, #128	; 0x80
 80037cc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80037ce:	23a4      	movs	r3, #164	; 0xa4
 80037d0:	18fb      	adds	r3, r7, r3
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	2380      	movs	r3, #128	; 0x80
 80037d6:	011b      	lsls	r3, r3, #4
 80037d8:	4013      	ands	r3, r2
 80037da:	d013      	beq.n	8003804 <HAL_UART_IRQHandler+0x198>
 80037dc:	23a0      	movs	r3, #160	; 0xa0
 80037de:	18fb      	adds	r3, r7, r3
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	2380      	movs	r3, #128	; 0x80
 80037e4:	04db      	lsls	r3, r3, #19
 80037e6:	4013      	ands	r3, r2
 80037e8:	d00c      	beq.n	8003804 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2280      	movs	r2, #128	; 0x80
 80037f0:	0112      	lsls	r2, r2, #4
 80037f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2280      	movs	r2, #128	; 0x80
 80037f8:	589b      	ldr	r3, [r3, r2]
 80037fa:	2220      	movs	r2, #32
 80037fc:	431a      	orrs	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2180      	movs	r1, #128	; 0x80
 8003802:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2280      	movs	r2, #128	; 0x80
 8003808:	589b      	ldr	r3, [r3, r2]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d100      	bne.n	8003810 <HAL_UART_IRQHandler+0x1a4>
 800380e:	e1f7      	b.n	8003c00 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003810:	23a4      	movs	r3, #164	; 0xa4
 8003812:	18fb      	adds	r3, r7, r3
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2220      	movs	r2, #32
 8003818:	4013      	ands	r3, r2
 800381a:	d00e      	beq.n	800383a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800381c:	23a0      	movs	r3, #160	; 0xa0
 800381e:	18fb      	adds	r3, r7, r3
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2220      	movs	r2, #32
 8003824:	4013      	ands	r3, r2
 8003826:	d008      	beq.n	800383a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800382c:	2b00      	cmp	r3, #0
 800382e:	d004      	beq.n	800383a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	0010      	movs	r0, r2
 8003838:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2280      	movs	r2, #128	; 0x80
 800383e:	589b      	ldr	r3, [r3, r2]
 8003840:	2194      	movs	r1, #148	; 0x94
 8003842:	187a      	adds	r2, r7, r1
 8003844:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	2240      	movs	r2, #64	; 0x40
 800384e:	4013      	ands	r3, r2
 8003850:	2b40      	cmp	r3, #64	; 0x40
 8003852:	d004      	beq.n	800385e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003854:	187b      	adds	r3, r7, r1
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2228      	movs	r2, #40	; 0x28
 800385a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800385c:	d047      	beq.n	80038ee <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	0018      	movs	r0, r3
 8003862:	f000 fcf7 	bl	8004254 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	2240      	movs	r2, #64	; 0x40
 800386e:	4013      	ands	r3, r2
 8003870:	2b40      	cmp	r3, #64	; 0x40
 8003872:	d137      	bne.n	80038e4 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003874:	f3ef 8310 	mrs	r3, PRIMASK
 8003878:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800387a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800387c:	2090      	movs	r0, #144	; 0x90
 800387e:	183a      	adds	r2, r7, r0
 8003880:	6013      	str	r3, [r2, #0]
 8003882:	2301      	movs	r3, #1
 8003884:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003886:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003888:	f383 8810 	msr	PRIMASK, r3
}
 800388c:	46c0      	nop			; (mov r8, r8)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689a      	ldr	r2, [r3, #8]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2140      	movs	r1, #64	; 0x40
 800389a:	438a      	bics	r2, r1
 800389c:	609a      	str	r2, [r3, #8]
 800389e:	183b      	adds	r3, r7, r0
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038a6:	f383 8810 	msr	PRIMASK, r3
}
 80038aa:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d012      	beq.n	80038da <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b8:	4a14      	ldr	r2, [pc, #80]	; (800390c <HAL_UART_IRQHandler+0x2a0>)
 80038ba:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c0:	0018      	movs	r0, r3
 80038c2:	f7fd fb93 	bl	8000fec <HAL_DMA_Abort_IT>
 80038c6:	1e03      	subs	r3, r0, #0
 80038c8:	d01a      	beq.n	8003900 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d4:	0018      	movs	r0, r3
 80038d6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038d8:	e012      	b.n	8003900 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	0018      	movs	r0, r3
 80038de:	f000 f9a5 	bl	8003c2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e2:	e00d      	b.n	8003900 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	0018      	movs	r0, r3
 80038e8:	f000 f9a0 	bl	8003c2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ec:	e008      	b.n	8003900 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	0018      	movs	r0, r3
 80038f2:	f000 f99b 	bl	8003c2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2280      	movs	r2, #128	; 0x80
 80038fa:	2100      	movs	r1, #0
 80038fc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80038fe:	e17f      	b.n	8003c00 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003900:	46c0      	nop			; (mov r8, r8)
    return;
 8003902:	e17d      	b.n	8003c00 <HAL_UART_IRQHandler+0x594>
 8003904:	0000080f 	.word	0x0000080f
 8003908:	04000120 	.word	0x04000120
 800390c:	08004319 	.word	0x08004319

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003914:	2b01      	cmp	r3, #1
 8003916:	d000      	beq.n	800391a <HAL_UART_IRQHandler+0x2ae>
 8003918:	e131      	b.n	8003b7e <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800391a:	23a4      	movs	r3, #164	; 0xa4
 800391c:	18fb      	adds	r3, r7, r3
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2210      	movs	r2, #16
 8003922:	4013      	ands	r3, r2
 8003924:	d100      	bne.n	8003928 <HAL_UART_IRQHandler+0x2bc>
 8003926:	e12a      	b.n	8003b7e <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003928:	23a0      	movs	r3, #160	; 0xa0
 800392a:	18fb      	adds	r3, r7, r3
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2210      	movs	r2, #16
 8003930:	4013      	ands	r3, r2
 8003932:	d100      	bne.n	8003936 <HAL_UART_IRQHandler+0x2ca>
 8003934:	e123      	b.n	8003b7e <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2210      	movs	r2, #16
 800393c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	2240      	movs	r2, #64	; 0x40
 8003946:	4013      	ands	r3, r2
 8003948:	2b40      	cmp	r3, #64	; 0x40
 800394a:	d000      	beq.n	800394e <HAL_UART_IRQHandler+0x2e2>
 800394c:	e09b      	b.n	8003a86 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	685a      	ldr	r2, [r3, #4]
 8003956:	217e      	movs	r1, #126	; 0x7e
 8003958:	187b      	adds	r3, r7, r1
 800395a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800395c:	187b      	adds	r3, r7, r1
 800395e:	881b      	ldrh	r3, [r3, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d100      	bne.n	8003966 <HAL_UART_IRQHandler+0x2fa>
 8003964:	e14e      	b.n	8003c04 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2258      	movs	r2, #88	; 0x58
 800396a:	5a9b      	ldrh	r3, [r3, r2]
 800396c:	187a      	adds	r2, r7, r1
 800396e:	8812      	ldrh	r2, [r2, #0]
 8003970:	429a      	cmp	r2, r3
 8003972:	d300      	bcc.n	8003976 <HAL_UART_IRQHandler+0x30a>
 8003974:	e146      	b.n	8003c04 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	187a      	adds	r2, r7, r1
 800397a:	215a      	movs	r1, #90	; 0x5a
 800397c:	8812      	ldrh	r2, [r2, #0]
 800397e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	2b20      	cmp	r3, #32
 8003988:	d06e      	beq.n	8003a68 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800398a:	f3ef 8310 	mrs	r3, PRIMASK
 800398e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003992:	67bb      	str	r3, [r7, #120]	; 0x78
 8003994:	2301      	movs	r3, #1
 8003996:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800399a:	f383 8810 	msr	PRIMASK, r3
}
 800399e:	46c0      	nop			; (mov r8, r8)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	499a      	ldr	r1, [pc, #616]	; (8003c14 <HAL_UART_IRQHandler+0x5a8>)
 80039ac:	400a      	ands	r2, r1
 80039ae:	601a      	str	r2, [r3, #0]
 80039b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039b2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b6:	f383 8810 	msr	PRIMASK, r3
}
 80039ba:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039bc:	f3ef 8310 	mrs	r3, PRIMASK
 80039c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80039c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039c4:	677b      	str	r3, [r7, #116]	; 0x74
 80039c6:	2301      	movs	r3, #1
 80039c8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039cc:	f383 8810 	msr	PRIMASK, r3
}
 80039d0:	46c0      	nop			; (mov r8, r8)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2101      	movs	r1, #1
 80039de:	438a      	bics	r2, r1
 80039e0:	609a      	str	r2, [r3, #8]
 80039e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039e4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039e8:	f383 8810 	msr	PRIMASK, r3
}
 80039ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039ee:	f3ef 8310 	mrs	r3, PRIMASK
 80039f2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80039f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039f6:	673b      	str	r3, [r7, #112]	; 0x70
 80039f8:	2301      	movs	r3, #1
 80039fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039fe:	f383 8810 	msr	PRIMASK, r3
}
 8003a02:	46c0      	nop			; (mov r8, r8)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689a      	ldr	r2, [r3, #8]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2140      	movs	r1, #64	; 0x40
 8003a10:	438a      	bics	r2, r1
 8003a12:	609a      	str	r2, [r3, #8]
 8003a14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a16:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a1a:	f383 8810 	msr	PRIMASK, r3
}
 8003a1e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2220      	movs	r2, #32
 8003a24:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a2c:	f3ef 8310 	mrs	r3, PRIMASK
 8003a30:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003a32:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a34:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a36:	2301      	movs	r3, #1
 8003a38:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a3c:	f383 8810 	msr	PRIMASK, r3
}
 8003a40:	46c0      	nop			; (mov r8, r8)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2110      	movs	r1, #16
 8003a4e:	438a      	bics	r2, r1
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a54:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a58:	f383 8810 	msr	PRIMASK, r3
}
 8003a5c:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a62:	0018      	movs	r0, r3
 8003a64:	f7fd fa8a 	bl	8000f7c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2258      	movs	r2, #88	; 0x58
 8003a6c:	5a9a      	ldrh	r2, [r3, r2]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	215a      	movs	r1, #90	; 0x5a
 8003a72:	5a5b      	ldrh	r3, [r3, r1]
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	0011      	movs	r1, r2
 8003a7e:	0018      	movs	r0, r3
 8003a80:	f000 f8dc 	bl	8003c3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a84:	e0be      	b.n	8003c04 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2258      	movs	r2, #88	; 0x58
 8003a8a:	5a99      	ldrh	r1, [r3, r2]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	225a      	movs	r2, #90	; 0x5a
 8003a90:	5a9b      	ldrh	r3, [r3, r2]
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	208e      	movs	r0, #142	; 0x8e
 8003a96:	183b      	adds	r3, r7, r0
 8003a98:	1a8a      	subs	r2, r1, r2
 8003a9a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	225a      	movs	r2, #90	; 0x5a
 8003aa0:	5a9b      	ldrh	r3, [r3, r2]
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d100      	bne.n	8003aaa <HAL_UART_IRQHandler+0x43e>
 8003aa8:	e0ae      	b.n	8003c08 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8003aaa:	183b      	adds	r3, r7, r0
 8003aac:	881b      	ldrh	r3, [r3, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d100      	bne.n	8003ab4 <HAL_UART_IRQHandler+0x448>
 8003ab2:	e0a9      	b.n	8003c08 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ab4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ab8:	60fb      	str	r3, [r7, #12]
  return(result);
 8003aba:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003abc:	2488      	movs	r4, #136	; 0x88
 8003abe:	193a      	adds	r2, r7, r4
 8003ac0:	6013      	str	r3, [r2, #0]
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	f383 8810 	msr	PRIMASK, r3
}
 8003acc:	46c0      	nop			; (mov r8, r8)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	494f      	ldr	r1, [pc, #316]	; (8003c18 <HAL_UART_IRQHandler+0x5ac>)
 8003ada:	400a      	ands	r2, r1
 8003adc:	601a      	str	r2, [r3, #0]
 8003ade:	193b      	adds	r3, r7, r4
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	f383 8810 	msr	PRIMASK, r3
}
 8003aea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aec:	f3ef 8310 	mrs	r3, PRIMASK
 8003af0:	61bb      	str	r3, [r7, #24]
  return(result);
 8003af2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003af4:	2484      	movs	r4, #132	; 0x84
 8003af6:	193a      	adds	r2, r7, r4
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	2301      	movs	r3, #1
 8003afc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	f383 8810 	msr	PRIMASK, r3
}
 8003b04:	46c0      	nop			; (mov r8, r8)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	689a      	ldr	r2, [r3, #8]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2101      	movs	r1, #1
 8003b12:	438a      	bics	r2, r1
 8003b14:	609a      	str	r2, [r3, #8]
 8003b16:	193b      	adds	r3, r7, r4
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b1c:	6a3b      	ldr	r3, [r7, #32]
 8003b1e:	f383 8810 	msr	PRIMASK, r3
}
 8003b22:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2220      	movs	r2, #32
 8003b28:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b36:	f3ef 8310 	mrs	r3, PRIMASK
 8003b3a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b3e:	2480      	movs	r4, #128	; 0x80
 8003b40:	193a      	adds	r2, r7, r4
 8003b42:	6013      	str	r3, [r2, #0]
 8003b44:	2301      	movs	r3, #1
 8003b46:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4a:	f383 8810 	msr	PRIMASK, r3
}
 8003b4e:	46c0      	nop			; (mov r8, r8)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2110      	movs	r1, #16
 8003b5c:	438a      	bics	r2, r1
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	193b      	adds	r3, r7, r4
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b68:	f383 8810 	msr	PRIMASK, r3
}
 8003b6c:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b6e:	183b      	adds	r3, r7, r0
 8003b70:	881a      	ldrh	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	0011      	movs	r1, r2
 8003b76:	0018      	movs	r0, r3
 8003b78:	f000 f860 	bl	8003c3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b7c:	e044      	b.n	8003c08 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003b7e:	23a4      	movs	r3, #164	; 0xa4
 8003b80:	18fb      	adds	r3, r7, r3
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	2380      	movs	r3, #128	; 0x80
 8003b86:	035b      	lsls	r3, r3, #13
 8003b88:	4013      	ands	r3, r2
 8003b8a:	d010      	beq.n	8003bae <HAL_UART_IRQHandler+0x542>
 8003b8c:	239c      	movs	r3, #156	; 0x9c
 8003b8e:	18fb      	adds	r3, r7, r3
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	2380      	movs	r3, #128	; 0x80
 8003b94:	03db      	lsls	r3, r3, #15
 8003b96:	4013      	ands	r3, r2
 8003b98:	d009      	beq.n	8003bae <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2280      	movs	r2, #128	; 0x80
 8003ba0:	0352      	lsls	r2, r2, #13
 8003ba2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	0018      	movs	r0, r3
 8003ba8:	f000 fbf8 	bl	800439c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003bac:	e02f      	b.n	8003c0e <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003bae:	23a4      	movs	r3, #164	; 0xa4
 8003bb0:	18fb      	adds	r3, r7, r3
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2280      	movs	r2, #128	; 0x80
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	d00f      	beq.n	8003bda <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003bba:	23a0      	movs	r3, #160	; 0xa0
 8003bbc:	18fb      	adds	r3, r7, r3
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2280      	movs	r2, #128	; 0x80
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	d009      	beq.n	8003bda <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d01e      	beq.n	8003c0c <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	0010      	movs	r0, r2
 8003bd6:	4798      	blx	r3
    }
    return;
 8003bd8:	e018      	b.n	8003c0c <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003bda:	23a4      	movs	r3, #164	; 0xa4
 8003bdc:	18fb      	adds	r3, r7, r3
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2240      	movs	r2, #64	; 0x40
 8003be2:	4013      	ands	r3, r2
 8003be4:	d013      	beq.n	8003c0e <HAL_UART_IRQHandler+0x5a2>
 8003be6:	23a0      	movs	r3, #160	; 0xa0
 8003be8:	18fb      	adds	r3, r7, r3
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2240      	movs	r2, #64	; 0x40
 8003bee:	4013      	ands	r3, r2
 8003bf0:	d00d      	beq.n	8003c0e <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	f000 fba6 	bl	8004346 <UART_EndTransmit_IT>
    return;
 8003bfa:	e008      	b.n	8003c0e <HAL_UART_IRQHandler+0x5a2>
      return;
 8003bfc:	46c0      	nop			; (mov r8, r8)
 8003bfe:	e006      	b.n	8003c0e <HAL_UART_IRQHandler+0x5a2>
    return;
 8003c00:	46c0      	nop			; (mov r8, r8)
 8003c02:	e004      	b.n	8003c0e <HAL_UART_IRQHandler+0x5a2>
      return;
 8003c04:	46c0      	nop			; (mov r8, r8)
 8003c06:	e002      	b.n	8003c0e <HAL_UART_IRQHandler+0x5a2>
      return;
 8003c08:	46c0      	nop			; (mov r8, r8)
 8003c0a:	e000      	b.n	8003c0e <HAL_UART_IRQHandler+0x5a2>
    return;
 8003c0c:	46c0      	nop			; (mov r8, r8)
  }

}
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	b02b      	add	sp, #172	; 0xac
 8003c12:	bd90      	pop	{r4, r7, pc}
 8003c14:	fffffeff 	.word	0xfffffeff
 8003c18:	fffffedf 	.word	0xfffffedf

08003c1c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003c24:	46c0      	nop			; (mov r8, r8)
 8003c26:	46bd      	mov	sp, r7
 8003c28:	b002      	add	sp, #8
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003c34:	46c0      	nop			; (mov r8, r8)
 8003c36:	46bd      	mov	sp, r7
 8003c38:	b002      	add	sp, #8
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	000a      	movs	r2, r1
 8003c46:	1cbb      	adds	r3, r7, #2
 8003c48:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c4a:	46c0      	nop			; (mov r8, r8)
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	b002      	add	sp, #8
 8003c50:	bd80      	pop	{r7, pc}
	...

08003c54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b088      	sub	sp, #32
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c5c:	231e      	movs	r3, #30
 8003c5e:	18fb      	adds	r3, r7, r3
 8003c60:	2200      	movs	r2, #0
 8003c62:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689a      	ldr	r2, [r3, #8]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	431a      	orrs	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	69db      	ldr	r3, [r3, #28]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a8d      	ldr	r2, [pc, #564]	; (8003eb8 <UART_SetConfig+0x264>)
 8003c84:	4013      	ands	r3, r2
 8003c86:	0019      	movs	r1, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	4a88      	ldr	r2, [pc, #544]	; (8003ebc <UART_SetConfig+0x268>)
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	0019      	movs	r1, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68da      	ldr	r2, [r3, #12]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	4a7f      	ldr	r2, [pc, #508]	; (8003ec0 <UART_SetConfig+0x26c>)
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	0019      	movs	r1, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a7b      	ldr	r2, [pc, #492]	; (8003ec4 <UART_SetConfig+0x270>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d127      	bne.n	8003d2a <UART_SetConfig+0xd6>
 8003cda:	4b7b      	ldr	r3, [pc, #492]	; (8003ec8 <UART_SetConfig+0x274>)
 8003cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cde:	2203      	movs	r2, #3
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	2b03      	cmp	r3, #3
 8003ce4:	d00d      	beq.n	8003d02 <UART_SetConfig+0xae>
 8003ce6:	d81b      	bhi.n	8003d20 <UART_SetConfig+0xcc>
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d014      	beq.n	8003d16 <UART_SetConfig+0xc2>
 8003cec:	d818      	bhi.n	8003d20 <UART_SetConfig+0xcc>
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d002      	beq.n	8003cf8 <UART_SetConfig+0xa4>
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d00a      	beq.n	8003d0c <UART_SetConfig+0xb8>
 8003cf6:	e013      	b.n	8003d20 <UART_SetConfig+0xcc>
 8003cf8:	231f      	movs	r3, #31
 8003cfa:	18fb      	adds	r3, r7, r3
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	701a      	strb	r2, [r3, #0]
 8003d00:	e021      	b.n	8003d46 <UART_SetConfig+0xf2>
 8003d02:	231f      	movs	r3, #31
 8003d04:	18fb      	adds	r3, r7, r3
 8003d06:	2202      	movs	r2, #2
 8003d08:	701a      	strb	r2, [r3, #0]
 8003d0a:	e01c      	b.n	8003d46 <UART_SetConfig+0xf2>
 8003d0c:	231f      	movs	r3, #31
 8003d0e:	18fb      	adds	r3, r7, r3
 8003d10:	2204      	movs	r2, #4
 8003d12:	701a      	strb	r2, [r3, #0]
 8003d14:	e017      	b.n	8003d46 <UART_SetConfig+0xf2>
 8003d16:	231f      	movs	r3, #31
 8003d18:	18fb      	adds	r3, r7, r3
 8003d1a:	2208      	movs	r2, #8
 8003d1c:	701a      	strb	r2, [r3, #0]
 8003d1e:	e012      	b.n	8003d46 <UART_SetConfig+0xf2>
 8003d20:	231f      	movs	r3, #31
 8003d22:	18fb      	adds	r3, r7, r3
 8003d24:	2210      	movs	r2, #16
 8003d26:	701a      	strb	r2, [r3, #0]
 8003d28:	e00d      	b.n	8003d46 <UART_SetConfig+0xf2>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a67      	ldr	r2, [pc, #412]	; (8003ecc <UART_SetConfig+0x278>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d104      	bne.n	8003d3e <UART_SetConfig+0xea>
 8003d34:	231f      	movs	r3, #31
 8003d36:	18fb      	adds	r3, r7, r3
 8003d38:	2200      	movs	r2, #0
 8003d3a:	701a      	strb	r2, [r3, #0]
 8003d3c:	e003      	b.n	8003d46 <UART_SetConfig+0xf2>
 8003d3e:	231f      	movs	r3, #31
 8003d40:	18fb      	adds	r3, r7, r3
 8003d42:	2210      	movs	r2, #16
 8003d44:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	69da      	ldr	r2, [r3, #28]
 8003d4a:	2380      	movs	r3, #128	; 0x80
 8003d4c:	021b      	lsls	r3, r3, #8
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d15d      	bne.n	8003e0e <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8003d52:	231f      	movs	r3, #31
 8003d54:	18fb      	adds	r3, r7, r3
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	2b08      	cmp	r3, #8
 8003d5a:	d015      	beq.n	8003d88 <UART_SetConfig+0x134>
 8003d5c:	dc18      	bgt.n	8003d90 <UART_SetConfig+0x13c>
 8003d5e:	2b04      	cmp	r3, #4
 8003d60:	d00d      	beq.n	8003d7e <UART_SetConfig+0x12a>
 8003d62:	dc15      	bgt.n	8003d90 <UART_SetConfig+0x13c>
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d002      	beq.n	8003d6e <UART_SetConfig+0x11a>
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d005      	beq.n	8003d78 <UART_SetConfig+0x124>
 8003d6c:	e010      	b.n	8003d90 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d6e:	f7fd ff9f 	bl	8001cb0 <HAL_RCC_GetPCLK1Freq>
 8003d72:	0003      	movs	r3, r0
 8003d74:	61bb      	str	r3, [r7, #24]
        break;
 8003d76:	e012      	b.n	8003d9e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d78:	4b55      	ldr	r3, [pc, #340]	; (8003ed0 <UART_SetConfig+0x27c>)
 8003d7a:	61bb      	str	r3, [r7, #24]
        break;
 8003d7c:	e00f      	b.n	8003d9e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d7e:	f7fd ff29 	bl	8001bd4 <HAL_RCC_GetSysClockFreq>
 8003d82:	0003      	movs	r3, r0
 8003d84:	61bb      	str	r3, [r7, #24]
        break;
 8003d86:	e00a      	b.n	8003d9e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d88:	2380      	movs	r3, #128	; 0x80
 8003d8a:	021b      	lsls	r3, r3, #8
 8003d8c:	61bb      	str	r3, [r7, #24]
        break;
 8003d8e:	e006      	b.n	8003d9e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003d90:	2300      	movs	r3, #0
 8003d92:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d94:	231e      	movs	r3, #30
 8003d96:	18fb      	adds	r3, r7, r3
 8003d98:	2201      	movs	r2, #1
 8003d9a:	701a      	strb	r2, [r3, #0]
        break;
 8003d9c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d100      	bne.n	8003da6 <UART_SetConfig+0x152>
 8003da4:	e07b      	b.n	8003e9e <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	005a      	lsls	r2, r3, #1
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	085b      	lsrs	r3, r3, #1
 8003db0:	18d2      	adds	r2, r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	0019      	movs	r1, r3
 8003db8:	0010      	movs	r0, r2
 8003dba:	f7fc f9a5 	bl	8000108 <__udivsi3>
 8003dbe:	0003      	movs	r3, r0
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	2b0f      	cmp	r3, #15
 8003dc8:	d91c      	bls.n	8003e04 <UART_SetConfig+0x1b0>
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	2380      	movs	r3, #128	; 0x80
 8003dce:	025b      	lsls	r3, r3, #9
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d217      	bcs.n	8003e04 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	200e      	movs	r0, #14
 8003dda:	183b      	adds	r3, r7, r0
 8003ddc:	210f      	movs	r1, #15
 8003dde:	438a      	bics	r2, r1
 8003de0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	085b      	lsrs	r3, r3, #1
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	2207      	movs	r2, #7
 8003dea:	4013      	ands	r3, r2
 8003dec:	b299      	uxth	r1, r3
 8003dee:	183b      	adds	r3, r7, r0
 8003df0:	183a      	adds	r2, r7, r0
 8003df2:	8812      	ldrh	r2, [r2, #0]
 8003df4:	430a      	orrs	r2, r1
 8003df6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	183a      	adds	r2, r7, r0
 8003dfe:	8812      	ldrh	r2, [r2, #0]
 8003e00:	60da      	str	r2, [r3, #12]
 8003e02:	e04c      	b.n	8003e9e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003e04:	231e      	movs	r3, #30
 8003e06:	18fb      	adds	r3, r7, r3
 8003e08:	2201      	movs	r2, #1
 8003e0a:	701a      	strb	r2, [r3, #0]
 8003e0c:	e047      	b.n	8003e9e <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e0e:	231f      	movs	r3, #31
 8003e10:	18fb      	adds	r3, r7, r3
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	2b08      	cmp	r3, #8
 8003e16:	d015      	beq.n	8003e44 <UART_SetConfig+0x1f0>
 8003e18:	dc18      	bgt.n	8003e4c <UART_SetConfig+0x1f8>
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	d00d      	beq.n	8003e3a <UART_SetConfig+0x1e6>
 8003e1e:	dc15      	bgt.n	8003e4c <UART_SetConfig+0x1f8>
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d002      	beq.n	8003e2a <UART_SetConfig+0x1d6>
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d005      	beq.n	8003e34 <UART_SetConfig+0x1e0>
 8003e28:	e010      	b.n	8003e4c <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e2a:	f7fd ff41 	bl	8001cb0 <HAL_RCC_GetPCLK1Freq>
 8003e2e:	0003      	movs	r3, r0
 8003e30:	61bb      	str	r3, [r7, #24]
        break;
 8003e32:	e012      	b.n	8003e5a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e34:	4b26      	ldr	r3, [pc, #152]	; (8003ed0 <UART_SetConfig+0x27c>)
 8003e36:	61bb      	str	r3, [r7, #24]
        break;
 8003e38:	e00f      	b.n	8003e5a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e3a:	f7fd fecb 	bl	8001bd4 <HAL_RCC_GetSysClockFreq>
 8003e3e:	0003      	movs	r3, r0
 8003e40:	61bb      	str	r3, [r7, #24]
        break;
 8003e42:	e00a      	b.n	8003e5a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e44:	2380      	movs	r3, #128	; 0x80
 8003e46:	021b      	lsls	r3, r3, #8
 8003e48:	61bb      	str	r3, [r7, #24]
        break;
 8003e4a:	e006      	b.n	8003e5a <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e50:	231e      	movs	r3, #30
 8003e52:	18fb      	adds	r3, r7, r3
 8003e54:	2201      	movs	r2, #1
 8003e56:	701a      	strb	r2, [r3, #0]
        break;
 8003e58:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d01e      	beq.n	8003e9e <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	085a      	lsrs	r2, r3, #1
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	18d2      	adds	r2, r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	0019      	movs	r1, r3
 8003e70:	0010      	movs	r0, r2
 8003e72:	f7fc f949 	bl	8000108 <__udivsi3>
 8003e76:	0003      	movs	r3, r0
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	2b0f      	cmp	r3, #15
 8003e80:	d909      	bls.n	8003e96 <UART_SetConfig+0x242>
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	2380      	movs	r3, #128	; 0x80
 8003e86:	025b      	lsls	r3, r3, #9
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d204      	bcs.n	8003e96 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	60da      	str	r2, [r3, #12]
 8003e94:	e003      	b.n	8003e9e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003e96:	231e      	movs	r3, #30
 8003e98:	18fb      	adds	r3, r7, r3
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003eaa:	231e      	movs	r3, #30
 8003eac:	18fb      	adds	r3, r7, r3
 8003eae:	781b      	ldrb	r3, [r3, #0]
}
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	b008      	add	sp, #32
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	ffff69f3 	.word	0xffff69f3
 8003ebc:	ffffcfff 	.word	0xffffcfff
 8003ec0:	fffff4ff 	.word	0xfffff4ff
 8003ec4:	40013800 	.word	0x40013800
 8003ec8:	40021000 	.word	0x40021000
 8003ecc:	40004400 	.word	0x40004400
 8003ed0:	007a1200 	.word	0x007a1200

08003ed4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	d00b      	beq.n	8003efe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	4a4a      	ldr	r2, [pc, #296]	; (8004018 <UART_AdvFeatureConfig+0x144>)
 8003eee:	4013      	ands	r3, r2
 8003ef0:	0019      	movs	r1, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	430a      	orrs	r2, r1
 8003efc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f02:	2202      	movs	r2, #2
 8003f04:	4013      	ands	r3, r2
 8003f06:	d00b      	beq.n	8003f20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	4a43      	ldr	r2, [pc, #268]	; (800401c <UART_AdvFeatureConfig+0x148>)
 8003f10:	4013      	ands	r3, r2
 8003f12:	0019      	movs	r1, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f24:	2204      	movs	r2, #4
 8003f26:	4013      	ands	r3, r2
 8003f28:	d00b      	beq.n	8003f42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	4a3b      	ldr	r2, [pc, #236]	; (8004020 <UART_AdvFeatureConfig+0x14c>)
 8003f32:	4013      	ands	r3, r2
 8003f34:	0019      	movs	r1, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f46:	2208      	movs	r2, #8
 8003f48:	4013      	ands	r3, r2
 8003f4a:	d00b      	beq.n	8003f64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	4a34      	ldr	r2, [pc, #208]	; (8004024 <UART_AdvFeatureConfig+0x150>)
 8003f54:	4013      	ands	r3, r2
 8003f56:	0019      	movs	r1, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	430a      	orrs	r2, r1
 8003f62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	2210      	movs	r2, #16
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	d00b      	beq.n	8003f86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	4a2c      	ldr	r2, [pc, #176]	; (8004028 <UART_AdvFeatureConfig+0x154>)
 8003f76:	4013      	ands	r3, r2
 8003f78:	0019      	movs	r1, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	d00b      	beq.n	8003fa8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	4a25      	ldr	r2, [pc, #148]	; (800402c <UART_AdvFeatureConfig+0x158>)
 8003f98:	4013      	ands	r3, r2
 8003f9a:	0019      	movs	r1, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fac:	2240      	movs	r2, #64	; 0x40
 8003fae:	4013      	ands	r3, r2
 8003fb0:	d01d      	beq.n	8003fee <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	4a1d      	ldr	r2, [pc, #116]	; (8004030 <UART_AdvFeatureConfig+0x15c>)
 8003fba:	4013      	ands	r3, r2
 8003fbc:	0019      	movs	r1, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fce:	2380      	movs	r3, #128	; 0x80
 8003fd0:	035b      	lsls	r3, r3, #13
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d10b      	bne.n	8003fee <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	4a15      	ldr	r2, [pc, #84]	; (8004034 <UART_AdvFeatureConfig+0x160>)
 8003fde:	4013      	ands	r3, r2
 8003fe0:	0019      	movs	r1, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff2:	2280      	movs	r2, #128	; 0x80
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	d00b      	beq.n	8004010 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	4a0e      	ldr	r2, [pc, #56]	; (8004038 <UART_AdvFeatureConfig+0x164>)
 8004000:	4013      	ands	r3, r2
 8004002:	0019      	movs	r1, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	430a      	orrs	r2, r1
 800400e:	605a      	str	r2, [r3, #4]
  }
}
 8004010:	46c0      	nop			; (mov r8, r8)
 8004012:	46bd      	mov	sp, r7
 8004014:	b002      	add	sp, #8
 8004016:	bd80      	pop	{r7, pc}
 8004018:	fffdffff 	.word	0xfffdffff
 800401c:	fffeffff 	.word	0xfffeffff
 8004020:	fffbffff 	.word	0xfffbffff
 8004024:	ffff7fff 	.word	0xffff7fff
 8004028:	ffffefff 	.word	0xffffefff
 800402c:	ffffdfff 	.word	0xffffdfff
 8004030:	ffefffff 	.word	0xffefffff
 8004034:	ff9fffff 	.word	0xff9fffff
 8004038:	fff7ffff 	.word	0xfff7ffff

0800403c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b086      	sub	sp, #24
 8004040:	af02      	add	r7, sp, #8
 8004042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2280      	movs	r2, #128	; 0x80
 8004048:	2100      	movs	r1, #0
 800404a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800404c:	f7fc feae 	bl	8000dac <HAL_GetTick>
 8004050:	0003      	movs	r3, r0
 8004052:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2208      	movs	r2, #8
 800405c:	4013      	ands	r3, r2
 800405e:	2b08      	cmp	r3, #8
 8004060:	d10c      	bne.n	800407c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2280      	movs	r2, #128	; 0x80
 8004066:	0391      	lsls	r1, r2, #14
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	4a17      	ldr	r2, [pc, #92]	; (80040c8 <UART_CheckIdleState+0x8c>)
 800406c:	9200      	str	r2, [sp, #0]
 800406e:	2200      	movs	r2, #0
 8004070:	f000 f82c 	bl	80040cc <UART_WaitOnFlagUntilTimeout>
 8004074:	1e03      	subs	r3, r0, #0
 8004076:	d001      	beq.n	800407c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e021      	b.n	80040c0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2204      	movs	r2, #4
 8004084:	4013      	ands	r3, r2
 8004086:	2b04      	cmp	r3, #4
 8004088:	d10c      	bne.n	80040a4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2280      	movs	r2, #128	; 0x80
 800408e:	03d1      	lsls	r1, r2, #15
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	4a0d      	ldr	r2, [pc, #52]	; (80040c8 <UART_CheckIdleState+0x8c>)
 8004094:	9200      	str	r2, [sp, #0]
 8004096:	2200      	movs	r2, #0
 8004098:	f000 f818 	bl	80040cc <UART_WaitOnFlagUntilTimeout>
 800409c:	1e03      	subs	r3, r0, #0
 800409e:	d001      	beq.n	80040a4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e00d      	b.n	80040c0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2220      	movs	r2, #32
 80040a8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2220      	movs	r2, #32
 80040ae:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2274      	movs	r2, #116	; 0x74
 80040ba:	2100      	movs	r1, #0
 80040bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	0018      	movs	r0, r3
 80040c2:	46bd      	mov	sp, r7
 80040c4:	b004      	add	sp, #16
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	01ffffff 	.word	0x01ffffff

080040cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b094      	sub	sp, #80	; 0x50
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	603b      	str	r3, [r7, #0]
 80040d8:	1dfb      	adds	r3, r7, #7
 80040da:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040dc:	e0a3      	b.n	8004226 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040e0:	3301      	adds	r3, #1
 80040e2:	d100      	bne.n	80040e6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80040e4:	e09f      	b.n	8004226 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040e6:	f7fc fe61 	bl	8000dac <HAL_GetTick>
 80040ea:	0002      	movs	r2, r0
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d302      	bcc.n	80040fc <UART_WaitOnFlagUntilTimeout+0x30>
 80040f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d13d      	bne.n	8004178 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040fc:	f3ef 8310 	mrs	r3, PRIMASK
 8004100:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004102:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004104:	647b      	str	r3, [r7, #68]	; 0x44
 8004106:	2301      	movs	r3, #1
 8004108:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800410a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800410c:	f383 8810 	msr	PRIMASK, r3
}
 8004110:	46c0      	nop			; (mov r8, r8)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	494c      	ldr	r1, [pc, #304]	; (8004250 <UART_WaitOnFlagUntilTimeout+0x184>)
 800411e:	400a      	ands	r2, r1
 8004120:	601a      	str	r2, [r3, #0]
 8004122:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004124:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004128:	f383 8810 	msr	PRIMASK, r3
}
 800412c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800412e:	f3ef 8310 	mrs	r3, PRIMASK
 8004132:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004136:	643b      	str	r3, [r7, #64]	; 0x40
 8004138:	2301      	movs	r3, #1
 800413a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800413c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800413e:	f383 8810 	msr	PRIMASK, r3
}
 8004142:	46c0      	nop			; (mov r8, r8)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689a      	ldr	r2, [r3, #8]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2101      	movs	r1, #1
 8004150:	438a      	bics	r2, r1
 8004152:	609a      	str	r2, [r3, #8]
 8004154:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004156:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800415a:	f383 8810 	msr	PRIMASK, r3
}
 800415e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2220      	movs	r2, #32
 8004164:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2220      	movs	r2, #32
 800416a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2274      	movs	r2, #116	; 0x74
 8004170:	2100      	movs	r1, #0
 8004172:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e067      	b.n	8004248 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2204      	movs	r2, #4
 8004180:	4013      	ands	r3, r2
 8004182:	d050      	beq.n	8004226 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	69da      	ldr	r2, [r3, #28]
 800418a:	2380      	movs	r3, #128	; 0x80
 800418c:	011b      	lsls	r3, r3, #4
 800418e:	401a      	ands	r2, r3
 8004190:	2380      	movs	r3, #128	; 0x80
 8004192:	011b      	lsls	r3, r3, #4
 8004194:	429a      	cmp	r2, r3
 8004196:	d146      	bne.n	8004226 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2280      	movs	r2, #128	; 0x80
 800419e:	0112      	lsls	r2, r2, #4
 80041a0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041a2:	f3ef 8310 	mrs	r3, PRIMASK
 80041a6:	613b      	str	r3, [r7, #16]
  return(result);
 80041a8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041ac:	2301      	movs	r3, #1
 80041ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	f383 8810 	msr	PRIMASK, r3
}
 80041b6:	46c0      	nop			; (mov r8, r8)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4923      	ldr	r1, [pc, #140]	; (8004250 <UART_WaitOnFlagUntilTimeout+0x184>)
 80041c4:	400a      	ands	r2, r1
 80041c6:	601a      	str	r2, [r3, #0]
 80041c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041ca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	f383 8810 	msr	PRIMASK, r3
}
 80041d2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041d4:	f3ef 8310 	mrs	r3, PRIMASK
 80041d8:	61fb      	str	r3, [r7, #28]
  return(result);
 80041da:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80041de:	2301      	movs	r3, #1
 80041e0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041e2:	6a3b      	ldr	r3, [r7, #32]
 80041e4:	f383 8810 	msr	PRIMASK, r3
}
 80041e8:	46c0      	nop			; (mov r8, r8)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689a      	ldr	r2, [r3, #8]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2101      	movs	r1, #1
 80041f6:	438a      	bics	r2, r1
 80041f8:	609a      	str	r2, [r3, #8]
 80041fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041fc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004200:	f383 8810 	msr	PRIMASK, r3
}
 8004204:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2220      	movs	r2, #32
 800420a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2220      	movs	r2, #32
 8004210:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2280      	movs	r2, #128	; 0x80
 8004216:	2120      	movs	r1, #32
 8004218:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2274      	movs	r2, #116	; 0x74
 800421e:	2100      	movs	r1, #0
 8004220:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e010      	b.n	8004248 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	69db      	ldr	r3, [r3, #28]
 800422c:	68ba      	ldr	r2, [r7, #8]
 800422e:	4013      	ands	r3, r2
 8004230:	68ba      	ldr	r2, [r7, #8]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	425a      	negs	r2, r3
 8004236:	4153      	adcs	r3, r2
 8004238:	b2db      	uxtb	r3, r3
 800423a:	001a      	movs	r2, r3
 800423c:	1dfb      	adds	r3, r7, #7
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	429a      	cmp	r2, r3
 8004242:	d100      	bne.n	8004246 <UART_WaitOnFlagUntilTimeout+0x17a>
 8004244:	e74b      	b.n	80040de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	0018      	movs	r0, r3
 800424a:	46bd      	mov	sp, r7
 800424c:	b014      	add	sp, #80	; 0x50
 800424e:	bd80      	pop	{r7, pc}
 8004250:	fffffe5f 	.word	0xfffffe5f

08004254 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b08e      	sub	sp, #56	; 0x38
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800425c:	f3ef 8310 	mrs	r3, PRIMASK
 8004260:	617b      	str	r3, [r7, #20]
  return(result);
 8004262:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004264:	637b      	str	r3, [r7, #52]	; 0x34
 8004266:	2301      	movs	r3, #1
 8004268:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	f383 8810 	msr	PRIMASK, r3
}
 8004270:	46c0      	nop			; (mov r8, r8)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4925      	ldr	r1, [pc, #148]	; (8004314 <UART_EndRxTransfer+0xc0>)
 800427e:	400a      	ands	r2, r1
 8004280:	601a      	str	r2, [r3, #0]
 8004282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004284:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	f383 8810 	msr	PRIMASK, r3
}
 800428c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800428e:	f3ef 8310 	mrs	r3, PRIMASK
 8004292:	623b      	str	r3, [r7, #32]
  return(result);
 8004294:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004296:	633b      	str	r3, [r7, #48]	; 0x30
 8004298:	2301      	movs	r3, #1
 800429a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800429c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429e:	f383 8810 	msr	PRIMASK, r3
}
 80042a2:	46c0      	nop			; (mov r8, r8)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	689a      	ldr	r2, [r3, #8]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2101      	movs	r1, #1
 80042b0:	438a      	bics	r2, r1
 80042b2:	609a      	str	r2, [r3, #8]
 80042b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ba:	f383 8810 	msr	PRIMASK, r3
}
 80042be:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d118      	bne.n	80042fa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042c8:	f3ef 8310 	mrs	r3, PRIMASK
 80042cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80042ce:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042d2:	2301      	movs	r3, #1
 80042d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f383 8810 	msr	PRIMASK, r3
}
 80042dc:	46c0      	nop			; (mov r8, r8)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2110      	movs	r1, #16
 80042ea:	438a      	bics	r2, r1
 80042ec:	601a      	str	r2, [r3, #0]
 80042ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	f383 8810 	msr	PRIMASK, r3
}
 80042f8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2220      	movs	r2, #32
 80042fe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800430c:	46c0      	nop			; (mov r8, r8)
 800430e:	46bd      	mov	sp, r7
 8004310:	b00e      	add	sp, #56	; 0x38
 8004312:	bd80      	pop	{r7, pc}
 8004314:	fffffedf 	.word	0xfffffedf

08004318 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004324:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	225a      	movs	r2, #90	; 0x5a
 800432a:	2100      	movs	r1, #0
 800432c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2252      	movs	r2, #82	; 0x52
 8004332:	2100      	movs	r1, #0
 8004334:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	0018      	movs	r0, r3
 800433a:	f7ff fc77 	bl	8003c2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800433e:	46c0      	nop			; (mov r8, r8)
 8004340:	46bd      	mov	sp, r7
 8004342:	b004      	add	sp, #16
 8004344:	bd80      	pop	{r7, pc}

08004346 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b086      	sub	sp, #24
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800434e:	f3ef 8310 	mrs	r3, PRIMASK
 8004352:	60bb      	str	r3, [r7, #8]
  return(result);
 8004354:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004356:	617b      	str	r3, [r7, #20]
 8004358:	2301      	movs	r3, #1
 800435a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f383 8810 	msr	PRIMASK, r3
}
 8004362:	46c0      	nop			; (mov r8, r8)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2140      	movs	r1, #64	; 0x40
 8004370:	438a      	bics	r2, r1
 8004372:	601a      	str	r2, [r3, #0]
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	f383 8810 	msr	PRIMASK, r3
}
 800437e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2220      	movs	r2, #32
 8004384:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	0018      	movs	r0, r3
 8004390:	f7ff fc44 	bl	8003c1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004394:	46c0      	nop			; (mov r8, r8)
 8004396:	46bd      	mov	sp, r7
 8004398:	b006      	add	sp, #24
 800439a:	bd80      	pop	{r7, pc}

0800439c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80043a4:	46c0      	nop			; (mov r8, r8)
 80043a6:	46bd      	mov	sp, r7
 80043a8:	b002      	add	sp, #8
 80043aa:	bd80      	pop	{r7, pc}

080043ac <__libc_init_array>:
 80043ac:	b570      	push	{r4, r5, r6, lr}
 80043ae:	2600      	movs	r6, #0
 80043b0:	4d0c      	ldr	r5, [pc, #48]	; (80043e4 <__libc_init_array+0x38>)
 80043b2:	4c0d      	ldr	r4, [pc, #52]	; (80043e8 <__libc_init_array+0x3c>)
 80043b4:	1b64      	subs	r4, r4, r5
 80043b6:	10a4      	asrs	r4, r4, #2
 80043b8:	42a6      	cmp	r6, r4
 80043ba:	d109      	bne.n	80043d0 <__libc_init_array+0x24>
 80043bc:	2600      	movs	r6, #0
 80043be:	f000 f821 	bl	8004404 <_init>
 80043c2:	4d0a      	ldr	r5, [pc, #40]	; (80043ec <__libc_init_array+0x40>)
 80043c4:	4c0a      	ldr	r4, [pc, #40]	; (80043f0 <__libc_init_array+0x44>)
 80043c6:	1b64      	subs	r4, r4, r5
 80043c8:	10a4      	asrs	r4, r4, #2
 80043ca:	42a6      	cmp	r6, r4
 80043cc:	d105      	bne.n	80043da <__libc_init_array+0x2e>
 80043ce:	bd70      	pop	{r4, r5, r6, pc}
 80043d0:	00b3      	lsls	r3, r6, #2
 80043d2:	58eb      	ldr	r3, [r5, r3]
 80043d4:	4798      	blx	r3
 80043d6:	3601      	adds	r6, #1
 80043d8:	e7ee      	b.n	80043b8 <__libc_init_array+0xc>
 80043da:	00b3      	lsls	r3, r6, #2
 80043dc:	58eb      	ldr	r3, [r5, r3]
 80043de:	4798      	blx	r3
 80043e0:	3601      	adds	r6, #1
 80043e2:	e7f2      	b.n	80043ca <__libc_init_array+0x1e>
 80043e4:	08004458 	.word	0x08004458
 80043e8:	08004458 	.word	0x08004458
 80043ec:	08004458 	.word	0x08004458
 80043f0:	0800445c 	.word	0x0800445c

080043f4 <memset>:
 80043f4:	0003      	movs	r3, r0
 80043f6:	1882      	adds	r2, r0, r2
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d100      	bne.n	80043fe <memset+0xa>
 80043fc:	4770      	bx	lr
 80043fe:	7019      	strb	r1, [r3, #0]
 8004400:	3301      	adds	r3, #1
 8004402:	e7f9      	b.n	80043f8 <memset+0x4>

08004404 <_init>:
 8004404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004406:	46c0      	nop			; (mov r8, r8)
 8004408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800440a:	bc08      	pop	{r3}
 800440c:	469e      	mov	lr, r3
 800440e:	4770      	bx	lr

08004410 <_fini>:
 8004410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004412:	46c0      	nop			; (mov r8, r8)
 8004414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004416:	bc08      	pop	{r3}
 8004418:	469e      	mov	lr, r3
 800441a:	4770      	bx	lr
