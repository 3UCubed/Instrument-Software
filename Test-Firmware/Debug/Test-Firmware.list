
Test-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000736c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800742c  0800742c  0001742c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074f4  080074f4  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  080074f4  080074f4  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  080074f4  080074f4  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074f4  080074f4  000174f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074f8  080074f8  000174f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  080074fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c0  20000034  08007530  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003f4  08007530  000203f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016469  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c74  00000000  00000000  000364c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f0  00000000  00000000  00039140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c8  00000000  00000000  0003a530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000135c4  00000000  00000000  0003b7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000185df  00000000  00000000  0004edbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00074ee2  00000000  00000000  0006739b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dc27d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004894  00000000  00000000  000dc2d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000034 	.word	0x20000034
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007414 	.word	0x08007414

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000038 	.word	0x20000038
 8000104:	08007414 	.word	0x08007414

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000224:	f3bf 8f4f 	dsb	sy
}
 8000228:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800022a:	4b04      	ldr	r3, [pc, #16]	; (800023c <__NVIC_SystemReset+0x1c>)
 800022c:	4a04      	ldr	r2, [pc, #16]	; (8000240 <__NVIC_SystemReset+0x20>)
 800022e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000230:	f3bf 8f4f 	dsb	sy
}
 8000234:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000236:	46c0      	nop			; (mov r8, r8)
 8000238:	e7fd      	b.n	8000236 <__NVIC_SystemReset+0x16>
 800023a:	46c0      	nop			; (mov r8, r8)
 800023c:	e000ed00 	.word	0xe000ed00
 8000240:	05fa0004 	.word	0x05fa0004

08000244 <HAL_TIM_OC_DelayElapsedCallback>:
/* USER CODE BEGIN 0 */



void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000246:	b093      	sub	sp, #76	; 0x4c
 8000248:	af02      	add	r7, sp, #8
 800024a:	6078      	str	r0, [r7, #4]
  if (htim == &htim2)
 800024c:	687a      	ldr	r2, [r7, #4]
 800024e:	4be1      	ldr	r3, [pc, #900]	; (80005d4 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 8000250:	429a      	cmp	r2, r3
 8000252:	d000      	beq.n	8000256 <HAL_TIM_OC_DelayElapsedCallback+0x12>
 8000254:	e382      	b.n	800095c <HAL_TIM_OC_DelayElapsedCallback+0x718>
  {
    if (1)
    { // check pin state
      if (ERPA_ON)
 8000256:	4be0      	ldr	r3, [pc, #896]	; (80005d8 <HAL_TIM_OC_DelayElapsedCallback+0x394>)
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	2b00      	cmp	r3, #0
 800025c:	d100      	bne.n	8000260 <HAL_TIM_OC_DelayElapsedCallback+0x1c>
 800025e:	e0ae      	b.n	80003be <HAL_TIM_OC_DelayElapsedCallback+0x17a>
         * +/- 0.5v Every 100ms
         */

        /* Write to SPI (begin transfer?) */

		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11));
 8000260:	46c0      	nop			; (mov r8, r8)
 8000262:	2380      	movs	r3, #128	; 0x80
 8000264:	011b      	lsls	r3, r3, #4
 8000266:	4add      	ldr	r2, [pc, #884]	; (80005dc <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 8000268:	0019      	movs	r1, r3
 800026a:	0010      	movs	r0, r2
 800026c:	f002 fef6 	bl	800305c <HAL_GPIO_ReadPin>
 8000270:	1e03      	subs	r3, r0, #0
 8000272:	d1f6      	bne.n	8000262 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		 * Steps DAC
		 * +/- 0.5v Every 100ms
		*/

		  /* Write to SPI (begin transfer?) */
		HAL_SPI_Transmit(&hspi2, (uint8_t * ) &WRITE, 1, 1);
 8000274:	49da      	ldr	r1, [pc, #872]	; (80005e0 <HAL_TIM_OC_DelayElapsedCallback+0x39c>)
 8000276:	48db      	ldr	r0, [pc, #876]	; (80005e4 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 8000278:	2301      	movs	r3, #1
 800027a:	2201      	movs	r2, #1
 800027c:	f004 fa94 	bl	80047a8 <HAL_SPI_Transmit>
		SPI2->CR1 &= ~(1<<10); // THIS IS NEEDED TO STOP SPI1_SCK FROM GENERATING CLOCK PULSES
 8000280:	4bd9      	ldr	r3, [pc, #868]	; (80005e8 <HAL_TIM_OC_DelayElapsedCallback+0x3a4>)
 8000282:	681a      	ldr	r2, [r3, #0]
 8000284:	4bd8      	ldr	r3, [pc, #864]	; (80005e8 <HAL_TIM_OC_DelayElapsedCallback+0x3a4>)
 8000286:	49d9      	ldr	r1, [pc, #868]	; (80005ec <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 8000288:	400a      	ands	r2, r1
 800028a:	601a      	str	r2, [r3, #0]
		while (!(SPI2->SR));
 800028c:	46c0      	nop			; (mov r8, r8)
 800028e:	4bd6      	ldr	r3, [pc, #856]	; (80005e8 <HAL_TIM_OC_DelayElapsedCallback+0x3a4>)
 8000290:	689b      	ldr	r3, [r3, #8]
 8000292:	2b00      	cmp	r3, #0
 8000294:	d0fb      	beq.n	800028e <HAL_TIM_OC_DelayElapsedCallback+0x4a>
	    erpa_raw = SPI2->DR;
 8000296:	4bd4      	ldr	r3, [pc, #848]	; (80005e8 <HAL_TIM_OC_DelayElapsedCallback+0x3a4>)
 8000298:	68db      	ldr	r3, [r3, #12]
 800029a:	001a      	movs	r2, r3
 800029c:	4bd4      	ldr	r3, [pc, #848]	; (80005f0 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 800029e:	601a      	str	r2, [r3, #0]


		DAC->DHR12R1 = DAC_OUT[step];
 80002a0:	4bd4      	ldr	r3, [pc, #848]	; (80005f4 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	0019      	movs	r1, r3
 80002a6:	4bd4      	ldr	r3, [pc, #848]	; (80005f8 <HAL_TIM_OC_DelayElapsedCallback+0x3b4>)
 80002a8:	4ad4      	ldr	r2, [pc, #848]	; (80005fc <HAL_TIM_OC_DelayElapsedCallback+0x3b8>)
 80002aa:	0089      	lsls	r1, r1, #2
 80002ac:	588a      	ldr	r2, [r1, r2]
 80002ae:	609a      	str	r2, [r3, #8]

		if (erpa_sample_count == erpa_packet_cadence) {
 80002b0:	4bd3      	ldr	r3, [pc, #844]	; (8000600 <HAL_TIM_OC_DelayElapsedCallback+0x3bc>)
 80002b2:	681a      	ldr	r2, [r3, #0]
 80002b4:	4bd3      	ldr	r3, [pc, #844]	; (8000604 <HAL_TIM_OC_DelayElapsedCallback+0x3c0>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	429a      	cmp	r2, r3
 80002ba:	d000      	beq.n	80002be <HAL_TIM_OC_DelayElapsedCallback+0x7a>
 80002bc:	e07a      	b.n	80003b4 <HAL_TIM_OC_DelayElapsedCallback+0x170>

			HAL_ADC_Start_DMA(&hadc, (uint32_t *)adcResultsDMA,
 80002be:	2311      	movs	r3, #17
 80002c0:	001a      	movs	r2, r3
 80002c2:	49d1      	ldr	r1, [pc, #836]	; (8000608 <HAL_TIM_OC_DelayElapsedCallback+0x3c4>)
 80002c4:	4bd1      	ldr	r3, [pc, #836]	; (800060c <HAL_TIM_OC_DelayElapsedCallback+0x3c8>)
 80002c6:	0018      	movs	r0, r3
 80002c8:	f001 ff1a 	bl	8002100 <HAL_ADC_Start_DMA>
							  adcChannelCount);
			uint16_t PA0 = adcResultsDMA[0]; 				// ADC_IN0, END_mon: entrance/collimator monitor
 80002cc:	2132      	movs	r1, #50	; 0x32
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	4acd      	ldr	r2, [pc, #820]	; (8000608 <HAL_TIM_OC_DelayElapsedCallback+0x3c4>)
 80002d2:	8812      	ldrh	r2, [r2, #0]
 80002d4:	801a      	strh	r2, [r3, #0]
			uint16_t PA7 = adcResultsDMA[6]; 				// ADC_IN7, SWP_mon: Sweep voltage monitor
 80002d6:	2030      	movs	r0, #48	; 0x30
 80002d8:	183b      	adds	r3, r7, r0
 80002da:	4acb      	ldr	r2, [pc, #812]	; (8000608 <HAL_TIM_OC_DelayElapsedCallback+0x3c4>)
 80002dc:	8992      	ldrh	r2, [r2, #12]
 80002de:	801a      	strh	r2, [r3, #0]
			uint16_t PB0 = adcResultsDMA[7]; 				// ADC_IN8, TMP 1: Sweep temperature
 80002e0:	242e      	movs	r4, #46	; 0x2e
 80002e2:	193b      	adds	r3, r7, r4
 80002e4:	4ac8      	ldr	r2, [pc, #800]	; (8000608 <HAL_TIM_OC_DelayElapsedCallback+0x3c4>)
 80002e6:	89d2      	ldrh	r2, [r2, #14]
 80002e8:	801a      	strh	r2, [r3, #0]
			uint16_t PB1 = adcResultsDMA[8]; 				// ADC_IN9, TMP 2: feedbacks
 80002ea:	252c      	movs	r5, #44	; 0x2c
 80002ec:	197b      	adds	r3, r7, r5
 80002ee:	4ac6      	ldr	r2, [pc, #792]	; (8000608 <HAL_TIM_OC_DelayElapsedCallback+0x3c4>)
 80002f0:	8a12      	ldrh	r2, [r2, #16]
 80002f2:	801a      	strh	r2, [r3, #0]

			erpa_buf[0] = erpa_sync;                  		// ERPA SYNC 0xAA MSB
 80002f4:	22aa      	movs	r2, #170	; 0xaa
 80002f6:	4bc6      	ldr	r3, [pc, #792]	; (8000610 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 80002f8:	701a      	strb	r2, [r3, #0]
			erpa_buf[1] = erpa_sync;                  		// ERPA SYNC 0xAA LSB
 80002fa:	22aa      	movs	r2, #170	; 0xaa
 80002fc:	4bc4      	ldr	r3, [pc, #784]	; (8000610 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 80002fe:	705a      	strb	r2, [r3, #1]
			erpa_buf[2] = ((erpa_seq & 0xFF00) >> 8); 		// ERPA SEQ # MSB
 8000300:	4bc4      	ldr	r3, [pc, #784]	; (8000614 <HAL_TIM_OC_DelayElapsedCallback+0x3d0>)
 8000302:	881b      	ldrh	r3, [r3, #0]
 8000304:	0a1b      	lsrs	r3, r3, #8
 8000306:	b29b      	uxth	r3, r3
 8000308:	b2da      	uxtb	r2, r3
 800030a:	4bc1      	ldr	r3, [pc, #772]	; (8000610 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 800030c:	709a      	strb	r2, [r3, #2]
			erpa_buf[3] = (erpa_seq & 0xFF);          		// ERPA SEQ # MSB
 800030e:	4bc1      	ldr	r3, [pc, #772]	; (8000614 <HAL_TIM_OC_DelayElapsedCallback+0x3d0>)
 8000310:	881b      	ldrh	r3, [r3, #0]
 8000312:	b2da      	uxtb	r2, r3
 8000314:	4bbe      	ldr	r3, [pc, #760]	; (8000610 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 8000316:	70da      	strb	r2, [r3, #3]
			erpa_buf[4] = ((PA0 & 0xFF00) >> 8); 	  		// ENDmon MSB
 8000318:	187b      	adds	r3, r7, r1
 800031a:	881b      	ldrh	r3, [r3, #0]
 800031c:	0a1b      	lsrs	r3, r3, #8
 800031e:	b29b      	uxth	r3, r3
 8000320:	b2da      	uxtb	r2, r3
 8000322:	4bbb      	ldr	r3, [pc, #748]	; (8000610 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 8000324:	711a      	strb	r2, [r3, #4]
			erpa_buf[5] = (PA0 & 0xFF);               		// ENDmon LSB
 8000326:	187b      	adds	r3, r7, r1
 8000328:	881b      	ldrh	r3, [r3, #0]
 800032a:	b2da      	uxtb	r2, r3
 800032c:	4bb8      	ldr	r3, [pc, #736]	; (8000610 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 800032e:	715a      	strb	r2, [r3, #5]
			erpa_buf[6] = ((PA7 & 0xFF00) >> 8);      		// SWP Monitored MSB
 8000330:	183b      	adds	r3, r7, r0
 8000332:	881b      	ldrh	r3, [r3, #0]
 8000334:	0a1b      	lsrs	r3, r3, #8
 8000336:	b29b      	uxth	r3, r3
 8000338:	b2da      	uxtb	r2, r3
 800033a:	4bb5      	ldr	r3, [pc, #724]	; (8000610 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 800033c:	719a      	strb	r2, [r3, #6]
			erpa_buf[7] = (PA7 & 0xFF);               		// SWP Monitored LSB
 800033e:	183b      	adds	r3, r7, r0
 8000340:	881b      	ldrh	r3, [r3, #0]
 8000342:	b2da      	uxtb	r2, r3
 8000344:	4bb2      	ldr	r3, [pc, #712]	; (8000610 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 8000346:	71da      	strb	r2, [r3, #7]
			erpa_buf[8] = ((PB0 & 0xFF00) >> 8);      		// TEMPURATURE 1 MSB
 8000348:	193b      	adds	r3, r7, r4
 800034a:	881b      	ldrh	r3, [r3, #0]
 800034c:	0a1b      	lsrs	r3, r3, #8
 800034e:	b29b      	uxth	r3, r3
 8000350:	b2da      	uxtb	r2, r3
 8000352:	4baf      	ldr	r3, [pc, #700]	; (8000610 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 8000354:	721a      	strb	r2, [r3, #8]
			erpa_buf[9] = (PB0 & 0xFF);               		// TEMPURATURE 1 LSB
 8000356:	193b      	adds	r3, r7, r4
 8000358:	881b      	ldrh	r3, [r3, #0]
 800035a:	b2da      	uxtb	r2, r3
 800035c:	4bac      	ldr	r3, [pc, #688]	; (8000610 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 800035e:	725a      	strb	r2, [r3, #9]
			erpa_buf[10] = ((PB1 & 0xFF00) >> 8);     		// TEMPURATURE 2 MSB
 8000360:	197b      	adds	r3, r7, r5
 8000362:	881b      	ldrh	r3, [r3, #0]
 8000364:	0a1b      	lsrs	r3, r3, #8
 8000366:	b29b      	uxth	r3, r3
 8000368:	b2da      	uxtb	r2, r3
 800036a:	4ba9      	ldr	r3, [pc, #676]	; (8000610 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 800036c:	729a      	strb	r2, [r3, #10]
			erpa_buf[11] = (PB1 & 0xFF);                    // TEMPURATURE 2 LSB
 800036e:	197b      	adds	r3, r7, r5
 8000370:	881b      	ldrh	r3, [r3, #0]
 8000372:	b2da      	uxtb	r2, r3
 8000374:	4ba6      	ldr	r3, [pc, #664]	; (8000610 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 8000376:	72da      	strb	r2, [r3, #11]
			erpa_buf[12] = ((erpa_raw & 0xFF00) >> 8);      // ERPA eADC MSB
 8000378:	4b9d      	ldr	r3, [pc, #628]	; (80005f0 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	121b      	asrs	r3, r3, #8
 800037e:	b2da      	uxtb	r2, r3
 8000380:	4ba3      	ldr	r3, [pc, #652]	; (8000610 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 8000382:	731a      	strb	r2, [r3, #12]
			erpa_buf[13] = (erpa_raw & 0xFF);               // ERPA eADC LSB
 8000384:	4b9a      	ldr	r3, [pc, #616]	; (80005f0 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	b2da      	uxtb	r2, r3
 800038a:	4ba1      	ldr	r3, [pc, #644]	; (8000610 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 800038c:	735a      	strb	r2, [r3, #13]

			erpa_seq++;
 800038e:	4ba1      	ldr	r3, [pc, #644]	; (8000614 <HAL_TIM_OC_DelayElapsedCallback+0x3d0>)
 8000390:	881b      	ldrh	r3, [r3, #0]
 8000392:	3301      	adds	r3, #1
 8000394:	b29a      	uxth	r2, r3
 8000396:	4b9f      	ldr	r3, [pc, #636]	; (8000614 <HAL_TIM_OC_DelayElapsedCallback+0x3d0>)
 8000398:	801a      	strh	r2, [r3, #0]
			if (ERPA_ON)
 800039a:	4b8f      	ldr	r3, [pc, #572]	; (80005d8 <HAL_TIM_OC_DelayElapsedCallback+0x394>)
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d005      	beq.n	80003ae <HAL_TIM_OC_DelayElapsedCallback+0x16a>
			{
			  HAL_UART_Transmit(&huart1, erpa_buf, sizeof(erpa_buf), 100);
 80003a2:	499b      	ldr	r1, [pc, #620]	; (8000610 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 80003a4:	489c      	ldr	r0, [pc, #624]	; (8000618 <HAL_TIM_OC_DelayElapsedCallback+0x3d4>)
 80003a6:	2364      	movs	r3, #100	; 0x64
 80003a8:	220e      	movs	r2, #14
 80003aa:	f005 fd9d 	bl	8005ee8 <HAL_UART_Transmit>
			}
			erpa_sample_count = 0;
 80003ae:	4b94      	ldr	r3, [pc, #592]	; (8000600 <HAL_TIM_OC_DelayElapsedCallback+0x3bc>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	601a      	str	r2, [r3, #0]
		}
		erpa_sample_count++;
 80003b4:	4b92      	ldr	r3, [pc, #584]	; (8000600 <HAL_TIM_OC_DelayElapsedCallback+0x3bc>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	1c5a      	adds	r2, r3, #1
 80003ba:	4b91      	ldr	r3, [pc, #580]	; (8000600 <HAL_TIM_OC_DelayElapsedCallback+0x3bc>)
 80003bc:	601a      	str	r2, [r3, #0]
      }
      if (HK_ON)
 80003be:	4b97      	ldr	r3, [pc, #604]	; (800061c <HAL_TIM_OC_DelayElapsedCallback+0x3d8>)
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d100      	bne.n	80003c8 <HAL_TIM_OC_DelayElapsedCallback+0x184>
 80003c6:	e31e      	b.n	8000a06 <HAL_TIM_OC_DelayElapsedCallback+0x7c2>
      {
        if (hk_counter == HK_CADENCE)
 80003c8:	4b95      	ldr	r3, [pc, #596]	; (8000620 <HAL_TIM_OC_DelayElapsedCallback+0x3dc>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	2201      	movs	r2, #1
 80003ce:	4293      	cmp	r3, r2
 80003d0:	d000      	beq.n	80003d4 <HAL_TIM_OC_DelayElapsedCallback+0x190>
 80003d2:	e2ab      	b.n	800092c <HAL_TIM_OC_DelayElapsedCallback+0x6e8>
          int16_t output1;
          int16_t output2;
          int16_t output3;
          int16_t output4;

          buf[0] = REG_TEMP;
 80003d4:	2200      	movs	r2, #0
 80003d6:	250c      	movs	r5, #12
 80003d8:	197b      	adds	r3, r7, r5
 80003da:	701a      	strb	r2, [r3, #0]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_1, buf, 1,
 80003dc:	2390      	movs	r3, #144	; 0x90
 80003de:	b299      	uxth	r1, r3
 80003e0:	262b      	movs	r6, #43	; 0x2b
 80003e2:	19bc      	adds	r4, r7, r6
 80003e4:	197a      	adds	r2, r7, r5
 80003e6:	488f      	ldr	r0, [pc, #572]	; (8000624 <HAL_TIM_OC_DelayElapsedCallback+0x3e0>)
 80003e8:	23fa      	movs	r3, #250	; 0xfa
 80003ea:	009b      	lsls	r3, r3, #2
 80003ec:	9300      	str	r3, [sp, #0]
 80003ee:	2301      	movs	r3, #1
 80003f0:	f002 ff04 	bl	80031fc <HAL_I2C_Master_Transmit>
 80003f4:	0003      	movs	r3, r0
 80003f6:	7023      	strb	r3, [r4, #0]
                                        1000);
          if (ret != HAL_OK)
 80003f8:	19bb      	adds	r3, r7, r6
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d008      	beq.n	8000412 <HAL_TIM_OC_DelayElapsedCallback+0x1ce>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 8000400:	197b      	adds	r3, r7, r5
 8000402:	4a89      	ldr	r2, [pc, #548]	; (8000628 <HAL_TIM_OC_DelayElapsedCallback+0x3e4>)
 8000404:	ca03      	ldmia	r2!, {r0, r1}
 8000406:	c303      	stmia	r3!, {r0, r1}
 8000408:	8811      	ldrh	r1, [r2, #0]
 800040a:	8019      	strh	r1, [r3, #0]
 800040c:	7892      	ldrb	r2, [r2, #2]
 800040e:	709a      	strb	r2, [r3, #2]
 8000410:	e02b      	b.n	800046a <HAL_TIM_OC_DelayElapsedCallback+0x226>
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_1, buf, 2,
 8000412:	2390      	movs	r3, #144	; 0x90
 8000414:	b299      	uxth	r1, r3
 8000416:	252b      	movs	r5, #43	; 0x2b
 8000418:	197c      	adds	r4, r7, r5
 800041a:	260c      	movs	r6, #12
 800041c:	19ba      	adds	r2, r7, r6
 800041e:	4881      	ldr	r0, [pc, #516]	; (8000624 <HAL_TIM_OC_DelayElapsedCallback+0x3e0>)
 8000420:	23fa      	movs	r3, #250	; 0xfa
 8000422:	009b      	lsls	r3, r3, #2
 8000424:	9300      	str	r3, [sp, #0]
 8000426:	2302      	movs	r3, #2
 8000428:	f002 fff0 	bl	800340c <HAL_I2C_Master_Receive>
 800042c:	0003      	movs	r3, r0
 800042e:	7023      	strb	r3, [r4, #0]
                                         1000);
            if (ret != HAL_OK)
 8000430:	197b      	adds	r3, r7, r5
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d008      	beq.n	800044a <HAL_TIM_OC_DelayElapsedCallback+0x206>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 8000438:	19bb      	adds	r3, r7, r6
 800043a:	4a7c      	ldr	r2, [pc, #496]	; (800062c <HAL_TIM_OC_DelayElapsedCallback+0x3e8>)
 800043c:	ca03      	ldmia	r2!, {r0, r1}
 800043e:	c303      	stmia	r3!, {r0, r1}
 8000440:	8811      	ldrh	r1, [r2, #0]
 8000442:	8019      	strh	r1, [r3, #0]
 8000444:	7892      	ldrb	r2, [r2, #2]
 8000446:	709a      	strb	r2, [r3, #2]
 8000448:	e00f      	b.n	800046a <HAL_TIM_OC_DelayElapsedCallback+0x226>
            }
            else
            {
              output1 = (int16_t)(buf[0] << 8);
 800044a:	200c      	movs	r0, #12
 800044c:	183b      	adds	r3, r7, r0
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	021a      	lsls	r2, r3, #8
 8000452:	213e      	movs	r1, #62	; 0x3e
 8000454:	187b      	adds	r3, r7, r1
 8000456:	801a      	strh	r2, [r3, #0]
              output1 = (output1 | buf[1]) >> 3;
 8000458:	187b      	adds	r3, r7, r1
 800045a:	2200      	movs	r2, #0
 800045c:	5e9b      	ldrsh	r3, [r3, r2]
 800045e:	183a      	adds	r2, r7, r0
 8000460:	7852      	ldrb	r2, [r2, #1]
 8000462:	4313      	orrs	r3, r2
 8000464:	10da      	asrs	r2, r3, #3
 8000466:	187b      	adds	r3, r7, r1
 8000468:	801a      	strh	r2, [r3, #0]
            }
          }

          /* Tell ADT7410_2 that we want to read from the temperature register */
          buf[0] = REG_TEMP;
 800046a:	2200      	movs	r2, #0
 800046c:	250c      	movs	r5, #12
 800046e:	197b      	adds	r3, r7, r5
 8000470:	701a      	strb	r2, [r3, #0]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_2, buf, 1,
 8000472:	2394      	movs	r3, #148	; 0x94
 8000474:	b299      	uxth	r1, r3
 8000476:	262b      	movs	r6, #43	; 0x2b
 8000478:	19bc      	adds	r4, r7, r6
 800047a:	197a      	adds	r2, r7, r5
 800047c:	4869      	ldr	r0, [pc, #420]	; (8000624 <HAL_TIM_OC_DelayElapsedCallback+0x3e0>)
 800047e:	23fa      	movs	r3, #250	; 0xfa
 8000480:	009b      	lsls	r3, r3, #2
 8000482:	9300      	str	r3, [sp, #0]
 8000484:	2301      	movs	r3, #1
 8000486:	f002 feb9 	bl	80031fc <HAL_I2C_Master_Transmit>
 800048a:	0003      	movs	r3, r0
 800048c:	7023      	strb	r3, [r4, #0]
                                        1000);
          /* I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout) */
          if (ret != HAL_OK)
 800048e:	19bb      	adds	r3, r7, r6
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	2b00      	cmp	r3, #0
 8000494:	d008      	beq.n	80004a8 <HAL_TIM_OC_DelayElapsedCallback+0x264>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 8000496:	197b      	adds	r3, r7, r5
 8000498:	4a63      	ldr	r2, [pc, #396]	; (8000628 <HAL_TIM_OC_DelayElapsedCallback+0x3e4>)
 800049a:	ca03      	ldmia	r2!, {r0, r1}
 800049c:	c303      	stmia	r3!, {r0, r1}
 800049e:	8811      	ldrh	r1, [r2, #0]
 80004a0:	8019      	strh	r1, [r3, #0]
 80004a2:	7892      	ldrb	r2, [r2, #2]
 80004a4:	709a      	strb	r2, [r3, #2]
 80004a6:	e02b      	b.n	8000500 <HAL_TIM_OC_DelayElapsedCallback+0x2bc>
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_2, buf, 2,
 80004a8:	2394      	movs	r3, #148	; 0x94
 80004aa:	b299      	uxth	r1, r3
 80004ac:	252b      	movs	r5, #43	; 0x2b
 80004ae:	197c      	adds	r4, r7, r5
 80004b0:	260c      	movs	r6, #12
 80004b2:	19ba      	adds	r2, r7, r6
 80004b4:	485b      	ldr	r0, [pc, #364]	; (8000624 <HAL_TIM_OC_DelayElapsedCallback+0x3e0>)
 80004b6:	23fa      	movs	r3, #250	; 0xfa
 80004b8:	009b      	lsls	r3, r3, #2
 80004ba:	9300      	str	r3, [sp, #0]
 80004bc:	2302      	movs	r3, #2
 80004be:	f002 ffa5 	bl	800340c <HAL_I2C_Master_Receive>
 80004c2:	0003      	movs	r3, r0
 80004c4:	7023      	strb	r3, [r4, #0]
                                         1000);
            if (ret != HAL_OK)
 80004c6:	197b      	adds	r3, r7, r5
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d008      	beq.n	80004e0 <HAL_TIM_OC_DelayElapsedCallback+0x29c>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 80004ce:	19bb      	adds	r3, r7, r6
 80004d0:	4a56      	ldr	r2, [pc, #344]	; (800062c <HAL_TIM_OC_DelayElapsedCallback+0x3e8>)
 80004d2:	ca03      	ldmia	r2!, {r0, r1}
 80004d4:	c303      	stmia	r3!, {r0, r1}
 80004d6:	8811      	ldrh	r1, [r2, #0]
 80004d8:	8019      	strh	r1, [r3, #0]
 80004da:	7892      	ldrb	r2, [r2, #2]
 80004dc:	709a      	strb	r2, [r3, #2]
 80004de:	e00f      	b.n	8000500 <HAL_TIM_OC_DelayElapsedCallback+0x2bc>
            }
            else
            {

              output2 = (int16_t)(buf[0] << 8);
 80004e0:	200c      	movs	r0, #12
 80004e2:	183b      	adds	r3, r7, r0
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	021a      	lsls	r2, r3, #8
 80004e8:	213c      	movs	r1, #60	; 0x3c
 80004ea:	187b      	adds	r3, r7, r1
 80004ec:	801a      	strh	r2, [r3, #0]
              output2 = (output2 | buf[1]) >> 3;
 80004ee:	187b      	adds	r3, r7, r1
 80004f0:	2200      	movs	r2, #0
 80004f2:	5e9b      	ldrsh	r3, [r3, r2]
 80004f4:	183a      	adds	r2, r7, r0
 80004f6:	7852      	ldrb	r2, [r2, #1]
 80004f8:	4313      	orrs	r3, r2
 80004fa:	10da      	asrs	r2, r3, #3
 80004fc:	187b      	adds	r3, r7, r1
 80004fe:	801a      	strh	r2, [r3, #0]
            }
          }
          // TEMP SENSOR 3
          buf[0] = REG_TEMP;
 8000500:	2200      	movs	r2, #0
 8000502:	250c      	movs	r5, #12
 8000504:	197b      	adds	r3, r7, r5
 8000506:	701a      	strb	r2, [r3, #0]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_3, buf, 1,
 8000508:	2392      	movs	r3, #146	; 0x92
 800050a:	b299      	uxth	r1, r3
 800050c:	262b      	movs	r6, #43	; 0x2b
 800050e:	19bc      	adds	r4, r7, r6
 8000510:	197a      	adds	r2, r7, r5
 8000512:	4844      	ldr	r0, [pc, #272]	; (8000624 <HAL_TIM_OC_DelayElapsedCallback+0x3e0>)
 8000514:	23fa      	movs	r3, #250	; 0xfa
 8000516:	009b      	lsls	r3, r3, #2
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	2301      	movs	r3, #1
 800051c:	f002 fe6e 	bl	80031fc <HAL_I2C_Master_Transmit>
 8000520:	0003      	movs	r3, r0
 8000522:	7023      	strb	r3, [r4, #0]
                                        1000);
          /* I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout) */
          if (ret != HAL_OK)
 8000524:	19bb      	adds	r3, r7, r6
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d008      	beq.n	800053e <HAL_TIM_OC_DelayElapsedCallback+0x2fa>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 800052c:	197b      	adds	r3, r7, r5
 800052e:	4a3e      	ldr	r2, [pc, #248]	; (8000628 <HAL_TIM_OC_DelayElapsedCallback+0x3e4>)
 8000530:	ca03      	ldmia	r2!, {r0, r1}
 8000532:	c303      	stmia	r3!, {r0, r1}
 8000534:	8811      	ldrh	r1, [r2, #0]
 8000536:	8019      	strh	r1, [r3, #0]
 8000538:	7892      	ldrb	r2, [r2, #2]
 800053a:	709a      	strb	r2, [r3, #2]
 800053c:	e02b      	b.n	8000596 <HAL_TIM_OC_DelayElapsedCallback+0x352>
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_3, buf, 2,
 800053e:	2392      	movs	r3, #146	; 0x92
 8000540:	b299      	uxth	r1, r3
 8000542:	252b      	movs	r5, #43	; 0x2b
 8000544:	197c      	adds	r4, r7, r5
 8000546:	260c      	movs	r6, #12
 8000548:	19ba      	adds	r2, r7, r6
 800054a:	4836      	ldr	r0, [pc, #216]	; (8000624 <HAL_TIM_OC_DelayElapsedCallback+0x3e0>)
 800054c:	23fa      	movs	r3, #250	; 0xfa
 800054e:	009b      	lsls	r3, r3, #2
 8000550:	9300      	str	r3, [sp, #0]
 8000552:	2302      	movs	r3, #2
 8000554:	f002 ff5a 	bl	800340c <HAL_I2C_Master_Receive>
 8000558:	0003      	movs	r3, r0
 800055a:	7023      	strb	r3, [r4, #0]
                                         1000);
            if (ret != HAL_OK)
 800055c:	197b      	adds	r3, r7, r5
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d008      	beq.n	8000576 <HAL_TIM_OC_DelayElapsedCallback+0x332>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 8000564:	19bb      	adds	r3, r7, r6
 8000566:	4a31      	ldr	r2, [pc, #196]	; (800062c <HAL_TIM_OC_DelayElapsedCallback+0x3e8>)
 8000568:	ca03      	ldmia	r2!, {r0, r1}
 800056a:	c303      	stmia	r3!, {r0, r1}
 800056c:	8811      	ldrh	r1, [r2, #0]
 800056e:	8019      	strh	r1, [r3, #0]
 8000570:	7892      	ldrb	r2, [r2, #2]
 8000572:	709a      	strb	r2, [r3, #2]
 8000574:	e00f      	b.n	8000596 <HAL_TIM_OC_DelayElapsedCallback+0x352>
            }
            else
            {

              output3 = (int16_t)(buf[0] << 8);
 8000576:	200c      	movs	r0, #12
 8000578:	183b      	adds	r3, r7, r0
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	021a      	lsls	r2, r3, #8
 800057e:	213a      	movs	r1, #58	; 0x3a
 8000580:	187b      	adds	r3, r7, r1
 8000582:	801a      	strh	r2, [r3, #0]
              output3 = (output3 | buf[1]) >> 3;
 8000584:	187b      	adds	r3, r7, r1
 8000586:	2200      	movs	r2, #0
 8000588:	5e9b      	ldrsh	r3, [r3, r2]
 800058a:	183a      	adds	r2, r7, r0
 800058c:	7852      	ldrb	r2, [r2, #1]
 800058e:	4313      	orrs	r3, r2
 8000590:	10da      	asrs	r2, r3, #3
 8000592:	187b      	adds	r3, r7, r1
 8000594:	801a      	strh	r2, [r3, #0]
            }
          }
          /* TEMP SENSOR 4 */
          buf[0] = REG_TEMP;
 8000596:	2200      	movs	r2, #0
 8000598:	250c      	movs	r5, #12
 800059a:	197b      	adds	r3, r7, r5
 800059c:	701a      	strb	r2, [r3, #0]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_4, buf, 1,
 800059e:	2396      	movs	r3, #150	; 0x96
 80005a0:	b299      	uxth	r1, r3
 80005a2:	262b      	movs	r6, #43	; 0x2b
 80005a4:	19bc      	adds	r4, r7, r6
 80005a6:	197a      	adds	r2, r7, r5
 80005a8:	481e      	ldr	r0, [pc, #120]	; (8000624 <HAL_TIM_OC_DelayElapsedCallback+0x3e0>)
 80005aa:	23fa      	movs	r3, #250	; 0xfa
 80005ac:	009b      	lsls	r3, r3, #2
 80005ae:	9300      	str	r3, [sp, #0]
 80005b0:	2301      	movs	r3, #1
 80005b2:	f002 fe23 	bl	80031fc <HAL_I2C_Master_Transmit>
 80005b6:	0003      	movs	r3, r0
 80005b8:	7023      	strb	r3, [r4, #0]
                                        1000);
          /* I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout) */
          if (ret != HAL_OK)
 80005ba:	19bb      	adds	r3, r7, r6
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d036      	beq.n	8000630 <HAL_TIM_OC_DelayElapsedCallback+0x3ec>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 80005c2:	197b      	adds	r3, r7, r5
 80005c4:	4a18      	ldr	r2, [pc, #96]	; (8000628 <HAL_TIM_OC_DelayElapsedCallback+0x3e4>)
 80005c6:	ca03      	ldmia	r2!, {r0, r1}
 80005c8:	c303      	stmia	r3!, {r0, r1}
 80005ca:	8811      	ldrh	r1, [r2, #0]
 80005cc:	8019      	strh	r1, [r3, #0]
 80005ce:	7892      	ldrb	r2, [r2, #2]
 80005d0:	709a      	strb	r2, [r3, #2]
 80005d2:	e059      	b.n	8000688 <HAL_TIM_OC_DelayElapsedCallback+0x444>
 80005d4:	20000244 	.word	0x20000244
 80005d8:	20000025 	.word	0x20000025
 80005dc:	48000400 	.word	0x48000400
 80005e0:	08007464 	.word	0x08007464
 80005e4:	20000198 	.word	0x20000198
 80005e8:	40003800 	.word	0x40003800
 80005ec:	fffffbff 	.word	0xfffffbff
 80005f0:	200003a4 	.word	0x200003a4
 80005f4:	2000039e 	.word	0x2000039e
 80005f8:	40007400 	.word	0x40007400
 80005fc:	20000000 	.word	0x20000000
 8000600:	200003a8 	.word	0x200003a8
 8000604:	20000020 	.word	0x20000020
 8000608:	2000037c 	.word	0x2000037c
 800060c:	20000050 	.word	0x20000050
 8000610:	200003ac 	.word	0x200003ac
 8000614:	200003ba 	.word	0x200003ba
 8000618:	2000028c 	.word	0x2000028c
 800061c:	20000026 	.word	0x20000026
 8000620:	200003ec 	.word	0x200003ec
 8000624:	200000e8 	.word	0x200000e8
 8000628:	0800742c 	.word	0x0800742c
 800062c:	08007438 	.word	0x08007438
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_4, buf, 2,
 8000630:	2396      	movs	r3, #150	; 0x96
 8000632:	b299      	uxth	r1, r3
 8000634:	252b      	movs	r5, #43	; 0x2b
 8000636:	197c      	adds	r4, r7, r5
 8000638:	260c      	movs	r6, #12
 800063a:	19ba      	adds	r2, r7, r6
 800063c:	48be      	ldr	r0, [pc, #760]	; (8000938 <HAL_TIM_OC_DelayElapsedCallback+0x6f4>)
 800063e:	23fa      	movs	r3, #250	; 0xfa
 8000640:	009b      	lsls	r3, r3, #2
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	2302      	movs	r3, #2
 8000646:	f002 fee1 	bl	800340c <HAL_I2C_Master_Receive>
 800064a:	0003      	movs	r3, r0
 800064c:	7023      	strb	r3, [r4, #0]
                                         1000);
            if (ret != HAL_OK)
 800064e:	197b      	adds	r3, r7, r5
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d008      	beq.n	8000668 <HAL_TIM_OC_DelayElapsedCallback+0x424>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 8000656:	19bb      	adds	r3, r7, r6
 8000658:	4ab8      	ldr	r2, [pc, #736]	; (800093c <HAL_TIM_OC_DelayElapsedCallback+0x6f8>)
 800065a:	ca03      	ldmia	r2!, {r0, r1}
 800065c:	c303      	stmia	r3!, {r0, r1}
 800065e:	8811      	ldrh	r1, [r2, #0]
 8000660:	8019      	strh	r1, [r3, #0]
 8000662:	7892      	ldrb	r2, [r2, #2]
 8000664:	709a      	strb	r2, [r3, #2]
 8000666:	e00f      	b.n	8000688 <HAL_TIM_OC_DelayElapsedCallback+0x444>
            }
            else
            {

              output4 = (int16_t)(buf[0] << 8);
 8000668:	200c      	movs	r0, #12
 800066a:	183b      	adds	r3, r7, r0
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	021a      	lsls	r2, r3, #8
 8000670:	2138      	movs	r1, #56	; 0x38
 8000672:	187b      	adds	r3, r7, r1
 8000674:	801a      	strh	r2, [r3, #0]
              output4 = (output4 | buf[1]) >> 3;
 8000676:	187b      	adds	r3, r7, r1
 8000678:	2200      	movs	r2, #0
 800067a:	5e9b      	ldrsh	r3, [r3, r2]
 800067c:	183a      	adds	r2, r7, r0
 800067e:	7852      	ldrb	r2, [r2, #1]
 8000680:	4313      	orrs	r3, r2
 8000682:	10da      	asrs	r2, r3, #3
 8000684:	187b      	adds	r3, r7, r1
 8000686:	801a      	strh	r2, [r3, #0]
            }
          }

          HAL_ADC_Start_DMA(&hadc, (uint32_t *)adcResultsDMA,
 8000688:	2311      	movs	r3, #17
 800068a:	001a      	movs	r2, r3
 800068c:	49ac      	ldr	r1, [pc, #688]	; (8000940 <HAL_TIM_OC_DelayElapsedCallback+0x6fc>)
 800068e:	4bad      	ldr	r3, [pc, #692]	; (8000944 <HAL_TIM_OC_DelayElapsedCallback+0x700>)
 8000690:	0018      	movs	r0, r3
 8000692:	f001 fd35 	bl	8002100 <HAL_ADC_Start_DMA>
                            adcChannelCount);

          uint16_t PA1 = adcResultsDMA[1];       // ADC_IN1, BUS_Vmon: instrument bus voltage monitor
 8000696:	2128      	movs	r1, #40	; 0x28
 8000698:	187b      	adds	r3, r7, r1
 800069a:	4aa9      	ldr	r2, [pc, #676]	; (8000940 <HAL_TIM_OC_DelayElapsedCallback+0x6fc>)
 800069c:	8852      	ldrh	r2, [r2, #2]
 800069e:	801a      	strh	r2, [r3, #0]
          uint16_t PA2 = adcResultsDMA[2];       // ADC_IN2, BUS_Imon: instrument bus current monitor
 80006a0:	2026      	movs	r0, #38	; 0x26
 80006a2:	183b      	adds	r3, r7, r0
 80006a4:	4aa6      	ldr	r2, [pc, #664]	; (8000940 <HAL_TIM_OC_DelayElapsedCallback+0x6fc>)
 80006a6:	8892      	ldrh	r2, [r2, #4]
 80006a8:	801a      	strh	r2, [r3, #0]
          uint16_t PA3 = adcResultsDMA[3];       // ADC_IN3, 3v3_mon: Accurate 5V for ADC monitor
 80006aa:	2424      	movs	r4, #36	; 0x24
 80006ac:	193b      	adds	r3, r7, r4
 80006ae:	4aa4      	ldr	r2, [pc, #656]	; (8000940 <HAL_TIM_OC_DelayElapsedCallback+0x6fc>)
 80006b0:	88d2      	ldrh	r2, [r2, #6]
 80006b2:	801a      	strh	r2, [r3, #0]
          uint16_t PA5 = adcResultsDMA[4];       // ADC_IN5, n150v_mon: n150 voltage monitor
 80006b4:	2522      	movs	r5, #34	; 0x22
 80006b6:	197b      	adds	r3, r7, r5
 80006b8:	4aa1      	ldr	r2, [pc, #644]	; (8000940 <HAL_TIM_OC_DelayElapsedCallback+0x6fc>)
 80006ba:	8912      	ldrh	r2, [r2, #8]
 80006bc:	801a      	strh	r2, [r3, #0]
          uint16_t PA6 = adcResultsDMA[5];       // ADC_IN6, n800v_mon: n800 voltage monitor
 80006be:	2620      	movs	r6, #32
 80006c0:	19bb      	adds	r3, r7, r6
 80006c2:	4a9f      	ldr	r2, [pc, #636]	; (8000940 <HAL_TIM_OC_DelayElapsedCallback+0x6fc>)
 80006c4:	8952      	ldrh	r2, [r2, #10]
 80006c6:	801a      	strh	r2, [r3, #0]
          uint16_t PC0 = adcResultsDMA[9];       // ADC_IN10, 2v5_mon: 2.5v voltage monitor
 80006c8:	231e      	movs	r3, #30
 80006ca:	18fb      	adds	r3, r7, r3
 80006cc:	4a9c      	ldr	r2, [pc, #624]	; (8000940 <HAL_TIM_OC_DelayElapsedCallback+0x6fc>)
 80006ce:	8a52      	ldrh	r2, [r2, #18]
 80006d0:	801a      	strh	r2, [r3, #0]
          uint16_t PC1 = adcResultsDMA[10];      // ADC_IN11, n5v_mon: n5v voltage monitor
 80006d2:	221c      	movs	r2, #28
 80006d4:	18bb      	adds	r3, r7, r2
 80006d6:	4a9a      	ldr	r2, [pc, #616]	; (8000940 <HAL_TIM_OC_DelayElapsedCallback+0x6fc>)
 80006d8:	8a92      	ldrh	r2, [r2, #20]
 80006da:	801a      	strh	r2, [r3, #0]
          uint16_t PC2 = adcResultsDMA[11];      // ADC_IN12, 5v_mon: 5v voltage monitor
 80006dc:	231a      	movs	r3, #26
 80006de:	18fb      	adds	r3, r7, r3
 80006e0:	4a97      	ldr	r2, [pc, #604]	; (8000940 <HAL_TIM_OC_DelayElapsedCallback+0x6fc>)
 80006e2:	8ad2      	ldrh	r2, [r2, #22]
 80006e4:	801a      	strh	r2, [r3, #0]
          uint16_t PC3 = adcResultsDMA[12];      // ADC_IN13, n3v3_mon: n3v3 voltage monitor
 80006e6:	2218      	movs	r2, #24
 80006e8:	18bb      	adds	r3, r7, r2
 80006ea:	4a95      	ldr	r2, [pc, #596]	; (8000940 <HAL_TIM_OC_DelayElapsedCallback+0x6fc>)
 80006ec:	8b12      	ldrh	r2, [r2, #24]
 80006ee:	801a      	strh	r2, [r3, #0]
          uint16_t PC4 = adcResultsDMA[13];      // ADC_IN14, 5vref_mon: 5v reference voltage monitor
 80006f0:	2316      	movs	r3, #22
 80006f2:	18fb      	adds	r3, r7, r3
 80006f4:	4a92      	ldr	r2, [pc, #584]	; (8000940 <HAL_TIM_OC_DelayElapsedCallback+0x6fc>)
 80006f6:	8b52      	ldrh	r2, [r2, #26]
 80006f8:	801a      	strh	r2, [r3, #0]
          uint16_t PC5 = adcResultsDMA[14];      // ADC_IN15, 15v_mon: 15v voltage monitor
 80006fa:	2214      	movs	r2, #20
 80006fc:	18bb      	adds	r3, r7, r2
 80006fe:	4a90      	ldr	r2, [pc, #576]	; (8000940 <HAL_TIM_OC_DelayElapsedCallback+0x6fc>)
 8000700:	8b92      	ldrh	r2, [r2, #28]
 8000702:	801a      	strh	r2, [r3, #0]
          uint16_t MCU_TEMP = adcResultsDMA[15]; //(internally connected) ADC_IN16, VSENSE
 8000704:	2312      	movs	r3, #18
 8000706:	18fb      	adds	r3, r7, r3
 8000708:	4a8d      	ldr	r2, [pc, #564]	; (8000940 <HAL_TIM_OC_DelayElapsedCallback+0x6fc>)
 800070a:	8bd2      	ldrh	r2, [r2, #30]
 800070c:	801a      	strh	r2, [r3, #0]
          uint16_t MCU_VREF = adcResultsDMA[16]; //(internally connected) ADC_IN17, VREFINT
 800070e:	2210      	movs	r2, #16
 8000710:	18bb      	adds	r3, r7, r2
 8000712:	4a8b      	ldr	r2, [pc, #556]	; (8000940 <HAL_TIM_OC_DelayElapsedCallback+0x6fc>)
 8000714:	8c12      	ldrh	r2, [r2, #32]
 8000716:	801a      	strh	r2, [r3, #0]


          hk_buf[0] = hk_sync;                     // HK SYNC 0xCC MSB					0 SYNC
 8000718:	22cc      	movs	r2, #204	; 0xcc
 800071a:	4b8b      	ldr	r3, [pc, #556]	; (8000948 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 800071c:	701a      	strb	r2, [r3, #0]
          hk_buf[1] = hk_sync;                     // HK SYNC 0xCC LSB
 800071e:	22cc      	movs	r2, #204	; 0xcc
 8000720:	4b89      	ldr	r3, [pc, #548]	; (8000948 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 8000722:	705a      	strb	r2, [r3, #1]
          hk_buf[2] = ((hk_seq & 0xFF00) >> 8);    // HK SEQ # MSB		1 SEQUENCE
 8000724:	4b89      	ldr	r3, [pc, #548]	; (800094c <HAL_TIM_OC_DelayElapsedCallback+0x708>)
 8000726:	881b      	ldrh	r3, [r3, #0]
 8000728:	0a1b      	lsrs	r3, r3, #8
 800072a:	b29b      	uxth	r3, r3
 800072c:	b2da      	uxtb	r2, r3
 800072e:	4b86      	ldr	r3, [pc, #536]	; (8000948 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 8000730:	709a      	strb	r2, [r3, #2]
          hk_buf[3] = (hk_seq & 0xFF);             // HK SEQ # LSB
 8000732:	4b86      	ldr	r3, [pc, #536]	; (800094c <HAL_TIM_OC_DelayElapsedCallback+0x708>)
 8000734:	881b      	ldrh	r3, [r3, #0]
 8000736:	b2da      	uxtb	r2, r3
 8000738:	4b83      	ldr	r3, [pc, #524]	; (8000948 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 800073a:	70da      	strb	r2, [r3, #3]
          hk_buf[4] = ((MCU_TEMP & 0xFF00) >> 8); // VSENSE MSB		13 VSENSE
 800073c:	2312      	movs	r3, #18
 800073e:	18fb      	adds	r3, r7, r3
 8000740:	881b      	ldrh	r3, [r3, #0]
 8000742:	0a1b      	lsrs	r3, r3, #8
 8000744:	b29b      	uxth	r3, r3
 8000746:	b2da      	uxtb	r2, r3
 8000748:	4b7f      	ldr	r3, [pc, #508]	; (8000948 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 800074a:	711a      	strb	r2, [r3, #4]
          hk_buf[5] = (MCU_TEMP & 0xFF);          // VSENSE LSB
 800074c:	2312      	movs	r3, #18
 800074e:	18fb      	adds	r3, r7, r3
 8000750:	881b      	ldrh	r3, [r3, #0]
 8000752:	b2da      	uxtb	r2, r3
 8000754:	4b7c      	ldr	r3, [pc, #496]	; (8000948 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 8000756:	715a      	strb	r2, [r3, #5]
          hk_buf[6] = ((MCU_VREF & 0xFF00) >> 8);
 8000758:	2210      	movs	r2, #16
 800075a:	18bb      	adds	r3, r7, r2
 800075c:	881b      	ldrh	r3, [r3, #0]
 800075e:	0a1b      	lsrs	r3, r3, #8
 8000760:	b29b      	uxth	r3, r3
 8000762:	b2da      	uxtb	r2, r3
 8000764:	4b78      	ldr	r3, [pc, #480]	; (8000948 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 8000766:	719a      	strb	r2, [r3, #6]
          hk_buf[7] = (MCU_VREF & 0xFF);
 8000768:	2210      	movs	r2, #16
 800076a:	18bb      	adds	r3, r7, r2
 800076c:	881b      	ldrh	r3, [r3, #0]
 800076e:	b2da      	uxtb	r2, r3
 8000770:	4b75      	ldr	r3, [pc, #468]	; (8000948 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 8000772:	71da      	strb	r2, [r3, #7]
          hk_buf[8] = ((output1 & 0xFF00) >> 8);
 8000774:	233e      	movs	r3, #62	; 0x3e
 8000776:	18fb      	adds	r3, r7, r3
 8000778:	2200      	movs	r2, #0
 800077a:	5e9b      	ldrsh	r3, [r3, r2]
 800077c:	121b      	asrs	r3, r3, #8
 800077e:	b2da      	uxtb	r2, r3
 8000780:	4b71      	ldr	r3, [pc, #452]	; (8000948 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 8000782:	721a      	strb	r2, [r3, #8]
          hk_buf[9] = (output1 & 0xFF);
 8000784:	233e      	movs	r3, #62	; 0x3e
 8000786:	18fb      	adds	r3, r7, r3
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	b2da      	uxtb	r2, r3
 800078c:	4b6e      	ldr	r3, [pc, #440]	; (8000948 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 800078e:	725a      	strb	r2, [r3, #9]
          hk_buf[10] = ((output2 & 0xFF00) >> 8);
 8000790:	233c      	movs	r3, #60	; 0x3c
 8000792:	18fb      	adds	r3, r7, r3
 8000794:	2200      	movs	r2, #0
 8000796:	5e9b      	ldrsh	r3, [r3, r2]
 8000798:	121b      	asrs	r3, r3, #8
 800079a:	b2da      	uxtb	r2, r3
 800079c:	4b6a      	ldr	r3, [pc, #424]	; (8000948 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 800079e:	729a      	strb	r2, [r3, #10]
          hk_buf[11] = (output2 & 0xFF);
 80007a0:	233c      	movs	r3, #60	; 0x3c
 80007a2:	18fb      	adds	r3, r7, r3
 80007a4:	881b      	ldrh	r3, [r3, #0]
 80007a6:	b2da      	uxtb	r2, r3
 80007a8:	4b67      	ldr	r3, [pc, #412]	; (8000948 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 80007aa:	72da      	strb	r2, [r3, #11]
          hk_buf[12] = ((output3 & 0xFF00) >> 8);
 80007ac:	233a      	movs	r3, #58	; 0x3a
 80007ae:	18fb      	adds	r3, r7, r3
 80007b0:	2200      	movs	r2, #0
 80007b2:	5e9b      	ldrsh	r3, [r3, r2]
 80007b4:	121b      	asrs	r3, r3, #8
 80007b6:	b2da      	uxtb	r2, r3
 80007b8:	4b63      	ldr	r3, [pc, #396]	; (8000948 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 80007ba:	731a      	strb	r2, [r3, #12]
          hk_buf[13] = (output3 & 0xFF);
 80007bc:	233a      	movs	r3, #58	; 0x3a
 80007be:	18fb      	adds	r3, r7, r3
 80007c0:	881b      	ldrh	r3, [r3, #0]
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	4b60      	ldr	r3, [pc, #384]	; (8000948 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 80007c6:	735a      	strb	r2, [r3, #13]
          hk_buf[14] = ((output4 & 0xFF00) >> 8);
 80007c8:	2338      	movs	r3, #56	; 0x38
 80007ca:	18fb      	adds	r3, r7, r3
 80007cc:	2200      	movs	r2, #0
 80007ce:	5e9b      	ldrsh	r3, [r3, r2]
 80007d0:	121b      	asrs	r3, r3, #8
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	4b5c      	ldr	r3, [pc, #368]	; (8000948 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 80007d6:	739a      	strb	r2, [r3, #14]
          hk_buf[15] = (output4 & 0xFF);
 80007d8:	2338      	movs	r3, #56	; 0x38
 80007da:	18fb      	adds	r3, r7, r3
 80007dc:	881b      	ldrh	r3, [r3, #0]
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	4b59      	ldr	r3, [pc, #356]	; (8000948 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 80007e2:	73da      	strb	r2, [r3, #15]
          hk_buf[16] = ((PA1 & 0xFF00) >> 8);       // BUS_Vmon MSB			2 BUS_VMON PA1
 80007e4:	187b      	adds	r3, r7, r1
 80007e6:	881b      	ldrh	r3, [r3, #0]
 80007e8:	0a1b      	lsrs	r3, r3, #8
 80007ea:	b29b      	uxth	r3, r3
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	4b56      	ldr	r3, [pc, #344]	; (8000948 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 80007f0:	741a      	strb	r2, [r3, #16]
          hk_buf[17] = (PA1 & 0xFF);                // BUS_Vmon LSB
 80007f2:	187b      	adds	r3, r7, r1
 80007f4:	881b      	ldrh	r3, [r3, #0]
 80007f6:	b2da      	uxtb	r2, r3
 80007f8:	4b53      	ldr	r3, [pc, #332]	; (8000948 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 80007fa:	745a      	strb	r2, [r3, #17]
          hk_buf[18] = ((PA2 & 0xFF00) >> 8);       // BUS_Imon MSB			3 BUS_IMON PA2
 80007fc:	183b      	adds	r3, r7, r0
 80007fe:	881b      	ldrh	r3, [r3, #0]
 8000800:	0a1b      	lsrs	r3, r3, #8
 8000802:	b29b      	uxth	r3, r3
 8000804:	b2da      	uxtb	r2, r3
 8000806:	4b50      	ldr	r3, [pc, #320]	; (8000948 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 8000808:	749a      	strb	r2, [r3, #18]
          hk_buf[19] = (PA2 & 0xFF);                // BUS_Imon LSB
 800080a:	183b      	adds	r3, r7, r0
 800080c:	881b      	ldrh	r3, [r3, #0]
 800080e:	b2da      	uxtb	r2, r3
 8000810:	4b4d      	ldr	r3, [pc, #308]	; (8000948 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 8000812:	74da      	strb	r2, [r3, #19]
          hk_buf[20] = ((PC0 & 0xFF00) >> 8);      	// 2v5_mon MSB			7 2V5_MON PC0
 8000814:	211e      	movs	r1, #30
 8000816:	187b      	adds	r3, r7, r1
 8000818:	881b      	ldrh	r3, [r3, #0]
 800081a:	0a1b      	lsrs	r3, r3, #8
 800081c:	b29b      	uxth	r3, r3
 800081e:	b2da      	uxtb	r2, r3
 8000820:	4b49      	ldr	r3, [pc, #292]	; (8000948 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 8000822:	751a      	strb	r2, [r3, #20]
          hk_buf[21] = (PC0 & 0xFF);               	// 2v5_mon LSB
 8000824:	187b      	adds	r3, r7, r1
 8000826:	881b      	ldrh	r3, [r3, #0]
 8000828:	b2da      	uxtb	r2, r3
 800082a:	4b47      	ldr	r3, [pc, #284]	; (8000948 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 800082c:	755a      	strb	r2, [r3, #21]
          hk_buf[22] = ((PA3 & 0xFF00) >> 8);       // 3v3_mon MSB			4 3v3_MON PA3
 800082e:	193b      	adds	r3, r7, r4
 8000830:	881b      	ldrh	r3, [r3, #0]
 8000832:	0a1b      	lsrs	r3, r3, #8
 8000834:	b29b      	uxth	r3, r3
 8000836:	b2da      	uxtb	r2, r3
 8000838:	4b43      	ldr	r3, [pc, #268]	; (8000948 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 800083a:	759a      	strb	r2, [r3, #22]
          hk_buf[23] = (PA3 & 0xFF);                // 3v3_mon LSB
 800083c:	193b      	adds	r3, r7, r4
 800083e:	881b      	ldrh	r3, [r3, #0]
 8000840:	b2da      	uxtb	r2, r3
 8000842:	4b41      	ldr	r3, [pc, #260]	; (8000948 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 8000844:	75da      	strb	r2, [r3, #23]
          hk_buf[24] = ((PC2 & 0xFF00) >> 8);      	// 5v_mon MSB			9 5V_MON PC2
 8000846:	201a      	movs	r0, #26
 8000848:	183b      	adds	r3, r7, r0
 800084a:	881b      	ldrh	r3, [r3, #0]
 800084c:	0a1b      	lsrs	r3, r3, #8
 800084e:	b29b      	uxth	r3, r3
 8000850:	b2da      	uxtb	r2, r3
 8000852:	4b3d      	ldr	r3, [pc, #244]	; (8000948 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 8000854:	761a      	strb	r2, [r3, #24]
          hk_buf[25] = (PC2 & 0xFF);               	// 5v_mon LSB
 8000856:	183b      	adds	r3, r7, r0
 8000858:	881b      	ldrh	r3, [r3, #0]
 800085a:	b2da      	uxtb	r2, r3
 800085c:	4b3a      	ldr	r3, [pc, #232]	; (8000948 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 800085e:	765a      	strb	r2, [r3, #25]
          hk_buf[26] = ((PC3 & 0xFF00) >> 8);      	// n3v3_mon MSB			10 N3V3_MON PC3
 8000860:	2018      	movs	r0, #24
 8000862:	183b      	adds	r3, r7, r0
 8000864:	881b      	ldrh	r3, [r3, #0]
 8000866:	0a1b      	lsrs	r3, r3, #8
 8000868:	b29b      	uxth	r3, r3
 800086a:	b2da      	uxtb	r2, r3
 800086c:	4b36      	ldr	r3, [pc, #216]	; (8000948 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 800086e:	769a      	strb	r2, [r3, #26]
          hk_buf[27] = (PC3 & 0xFF);               	// n3v3_mon LSB
 8000870:	183b      	adds	r3, r7, r0
 8000872:	881b      	ldrh	r3, [r3, #0]
 8000874:	b2da      	uxtb	r2, r3
 8000876:	4b34      	ldr	r3, [pc, #208]	; (8000948 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 8000878:	76da      	strb	r2, [r3, #27]
          hk_buf[28] = ((PC1 & 0xFF00) >> 8);      	// n5v_mon MSB			8 N5V_MON PC1
 800087a:	211c      	movs	r1, #28
 800087c:	187b      	adds	r3, r7, r1
 800087e:	881b      	ldrh	r3, [r3, #0]
 8000880:	0a1b      	lsrs	r3, r3, #8
 8000882:	b29b      	uxth	r3, r3
 8000884:	b2da      	uxtb	r2, r3
 8000886:	4b30      	ldr	r3, [pc, #192]	; (8000948 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 8000888:	771a      	strb	r2, [r3, #28]
          hk_buf[29] = (PC1 & 0xFF);               	// n5v_mon LSB
 800088a:	187b      	adds	r3, r7, r1
 800088c:	881b      	ldrh	r3, [r3, #0]
 800088e:	b2da      	uxtb	r2, r3
 8000890:	4b2d      	ldr	r3, [pc, #180]	; (8000948 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 8000892:	775a      	strb	r2, [r3, #29]
          hk_buf[30] = ((PC5 & 0xFF00) >> 8);      	// 15v_mon MSB			12 15V_MON PC5
 8000894:	2114      	movs	r1, #20
 8000896:	187b      	adds	r3, r7, r1
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	0a1b      	lsrs	r3, r3, #8
 800089c:	b29b      	uxth	r3, r3
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	4b29      	ldr	r3, [pc, #164]	; (8000948 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 80008a2:	779a      	strb	r2, [r3, #30]
          hk_buf[31] = (PC5 & 0xFF);               	// 15v_mon LSB
 80008a4:	187b      	adds	r3, r7, r1
 80008a6:	881b      	ldrh	r3, [r3, #0]
 80008a8:	b2da      	uxtb	r2, r3
 80008aa:	4b27      	ldr	r3, [pc, #156]	; (8000948 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 80008ac:	77da      	strb	r2, [r3, #31]
          hk_buf[32] = ((PC4 & 0xFF00) >> 8);      	// 5vref_mon MSB		11 5VREF_MON PC4
 80008ae:	2016      	movs	r0, #22
 80008b0:	183b      	adds	r3, r7, r0
 80008b2:	881b      	ldrh	r3, [r3, #0]
 80008b4:	0a1b      	lsrs	r3, r3, #8
 80008b6:	b29b      	uxth	r3, r3
 80008b8:	b2d9      	uxtb	r1, r3
 80008ba:	4b23      	ldr	r3, [pc, #140]	; (8000948 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 80008bc:	2220      	movs	r2, #32
 80008be:	5499      	strb	r1, [r3, r2]
          hk_buf[33] = (PC4 & 0xFF);               	// 5vref_mon LSB
 80008c0:	183b      	adds	r3, r7, r0
 80008c2:	881b      	ldrh	r3, [r3, #0]
 80008c4:	b2d9      	uxtb	r1, r3
 80008c6:	4b20      	ldr	r3, [pc, #128]	; (8000948 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 80008c8:	2221      	movs	r2, #33	; 0x21
 80008ca:	5499      	strb	r1, [r3, r2]
          hk_buf[34] = ((PA5 & 0xFF00) >> 8);      	// n150v_mon MSB		5 N150V_MON PA5
 80008cc:	197b      	adds	r3, r7, r5
 80008ce:	881b      	ldrh	r3, [r3, #0]
 80008d0:	0a1b      	lsrs	r3, r3, #8
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	b2d9      	uxtb	r1, r3
 80008d6:	4b1c      	ldr	r3, [pc, #112]	; (8000948 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 80008d8:	2222      	movs	r2, #34	; 0x22
 80008da:	5499      	strb	r1, [r3, r2]
          hk_buf[35] = (PA5 & 0xFF);               	// n150v_mon LSB
 80008dc:	197b      	adds	r3, r7, r5
 80008de:	881b      	ldrh	r3, [r3, #0]
 80008e0:	b2d9      	uxtb	r1, r3
 80008e2:	4b19      	ldr	r3, [pc, #100]	; (8000948 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 80008e4:	2223      	movs	r2, #35	; 0x23
 80008e6:	5499      	strb	r1, [r3, r2]
          hk_buf[36] = ((PA6 & 0xFF00) >> 8);      	// n800v_mon MSB		6 N800V_MON PA6
 80008e8:	19bb      	adds	r3, r7, r6
 80008ea:	881b      	ldrh	r3, [r3, #0]
 80008ec:	0a1b      	lsrs	r3, r3, #8
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	b2d9      	uxtb	r1, r3
 80008f2:	4b15      	ldr	r3, [pc, #84]	; (8000948 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 80008f4:	2224      	movs	r2, #36	; 0x24
 80008f6:	5499      	strb	r1, [r3, r2]
          hk_buf[37] = (PA6 & 0xFF);               	// n800v_mon LSB
 80008f8:	19bb      	adds	r3, r7, r6
 80008fa:	881b      	ldrh	r3, [r3, #0]
 80008fc:	b2d9      	uxtb	r1, r3
 80008fe:	4b12      	ldr	r3, [pc, #72]	; (8000948 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 8000900:	2225      	movs	r2, #37	; 0x25
 8000902:	5499      	strb	r1, [r3, r2]

          if (HK_ON)
 8000904:	4b12      	ldr	r3, [pc, #72]	; (8000950 <HAL_TIM_OC_DelayElapsedCallback+0x70c>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d005      	beq.n	8000918 <HAL_TIM_OC_DelayElapsedCallback+0x6d4>
          {
           HAL_UART_Transmit(&huart1, hk_buf, sizeof(hk_buf), 100);
 800090c:	490e      	ldr	r1, [pc, #56]	; (8000948 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 800090e:	4811      	ldr	r0, [pc, #68]	; (8000954 <HAL_TIM_OC_DelayElapsedCallback+0x710>)
 8000910:	2364      	movs	r3, #100	; 0x64
 8000912:	2226      	movs	r2, #38	; 0x26
 8000914:	f005 fae8 	bl	8005ee8 <HAL_UART_Transmit>
          }
          hk_counter = 1;
 8000918:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <HAL_TIM_OC_DelayElapsedCallback+0x714>)
 800091a:	2201      	movs	r2, #1
 800091c:	601a      	str	r2, [r3, #0]
          hk_seq++;
 800091e:	4b0b      	ldr	r3, [pc, #44]	; (800094c <HAL_TIM_OC_DelayElapsedCallback+0x708>)
 8000920:	881b      	ldrh	r3, [r3, #0]
 8000922:	3301      	adds	r3, #1
 8000924:	b29a      	uxth	r2, r3
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <HAL_TIM_OC_DelayElapsedCallback+0x708>)
 8000928:	801a      	strh	r2, [r3, #0]
      }
    }
  }

  /* Timer 3 also called but doesn't need to do anything on IT */
}
 800092a:	e06c      	b.n	8000a06 <HAL_TIM_OC_DelayElapsedCallback+0x7c2>
          hk_counter++;
 800092c:	4b0a      	ldr	r3, [pc, #40]	; (8000958 <HAL_TIM_OC_DelayElapsedCallback+0x714>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	1c5a      	adds	r2, r3, #1
 8000932:	4b09      	ldr	r3, [pc, #36]	; (8000958 <HAL_TIM_OC_DelayElapsedCallback+0x714>)
 8000934:	601a      	str	r2, [r3, #0]
}
 8000936:	e066      	b.n	8000a06 <HAL_TIM_OC_DelayElapsedCallback+0x7c2>
 8000938:	200000e8 	.word	0x200000e8
 800093c:	08007438 	.word	0x08007438
 8000940:	2000037c 	.word	0x2000037c
 8000944:	20000050 	.word	0x20000050
 8000948:	200003c4 	.word	0x200003c4
 800094c:	200003ea 	.word	0x200003ea
 8000950:	20000026 	.word	0x20000026
 8000954:	2000028c 	.word	0x2000028c
 8000958:	200003ec 	.word	0x200003ec
  else if (htim == &htim1)
 800095c:	687a      	ldr	r2, [r7, #4]
 800095e:	4b2c      	ldr	r3, [pc, #176]	; (8000a10 <HAL_TIM_OC_DelayElapsedCallback+0x7cc>)
 8000960:	429a      	cmp	r2, r3
 8000962:	d150      	bne.n	8000a06 <HAL_TIM_OC_DelayElapsedCallback+0x7c2>
      if (PMT_ON)
 8000964:	4b2b      	ldr	r3, [pc, #172]	; (8000a14 <HAL_TIM_OC_DelayElapsedCallback+0x7d0>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d04c      	beq.n	8000a06 <HAL_TIM_OC_DelayElapsedCallback+0x7c2>
    	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8));
 800096c:	46c0      	nop			; (mov r8, r8)
 800096e:	2380      	movs	r3, #128	; 0x80
 8000970:	005a      	lsls	r2, r3, #1
 8000972:	2390      	movs	r3, #144	; 0x90
 8000974:	05db      	lsls	r3, r3, #23
 8000976:	0011      	movs	r1, r2
 8000978:	0018      	movs	r0, r3
 800097a:	f002 fb6f 	bl	800305c <HAL_GPIO_ReadPin>
 800097e:	1e03      	subs	r3, r0, #0
 8000980:	d1f5      	bne.n	800096e <HAL_TIM_OC_DelayElapsedCallback+0x72a>
		HAL_SPI_Transmit(&hspi1, (uint8_t * ) &WRITE, 1, 1);
 8000982:	4925      	ldr	r1, [pc, #148]	; (8000a18 <HAL_TIM_OC_DelayElapsedCallback+0x7d4>)
 8000984:	4825      	ldr	r0, [pc, #148]	; (8000a1c <HAL_TIM_OC_DelayElapsedCallback+0x7d8>)
 8000986:	2301      	movs	r3, #1
 8000988:	2201      	movs	r2, #1
 800098a:	f003 ff0d 	bl	80047a8 <HAL_SPI_Transmit>
		SPI1->CR1 &= ~(1<<10); // THIS IS NEEDED TO STOP SPI1_SCK FROM GENERATING CLOCK PULSES
 800098e:	4b24      	ldr	r3, [pc, #144]	; (8000a20 <HAL_TIM_OC_DelayElapsedCallback+0x7dc>)
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	4b23      	ldr	r3, [pc, #140]	; (8000a20 <HAL_TIM_OC_DelayElapsedCallback+0x7dc>)
 8000994:	4923      	ldr	r1, [pc, #140]	; (8000a24 <HAL_TIM_OC_DelayElapsedCallback+0x7e0>)
 8000996:	400a      	ands	r2, r1
 8000998:	601a      	str	r2, [r3, #0]
		while (!(SPI1->SR));
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	4b20      	ldr	r3, [pc, #128]	; (8000a20 <HAL_TIM_OC_DelayElapsedCallback+0x7dc>)
 800099e:	689b      	ldr	r3, [r3, #8]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d0fb      	beq.n	800099c <HAL_TIM_OC_DelayElapsedCallback+0x758>
		pmt_raw = SPI1->DR;
 80009a4:	4b1e      	ldr	r3, [pc, #120]	; (8000a20 <HAL_TIM_OC_DelayElapsedCallback+0x7dc>)
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	001a      	movs	r2, r3
 80009aa:	4b1f      	ldr	r3, [pc, #124]	; (8000a28 <HAL_TIM_OC_DelayElapsedCallback+0x7e4>)
 80009ac:	601a      	str	r2, [r3, #0]
		int r = pmt_raw;
 80009ae:	4b1e      	ldr	r3, [pc, #120]	; (8000a28 <HAL_TIM_OC_DelayElapsedCallback+0x7e4>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	637b      	str	r3, [r7, #52]	; 0x34
    	  pmt_buf[0] = pmt_sync;
 80009b4:	22bb      	movs	r2, #187	; 0xbb
 80009b6:	4b1d      	ldr	r3, [pc, #116]	; (8000a2c <HAL_TIM_OC_DelayElapsedCallback+0x7e8>)
 80009b8:	701a      	strb	r2, [r3, #0]
		  pmt_buf[1] = pmt_sync;
 80009ba:	22bb      	movs	r2, #187	; 0xbb
 80009bc:	4b1b      	ldr	r3, [pc, #108]	; (8000a2c <HAL_TIM_OC_DelayElapsedCallback+0x7e8>)
 80009be:	705a      	strb	r2, [r3, #1]
		  pmt_buf[2] = ((pmt_seq & 0xFF00) >> 8);
 80009c0:	4b1b      	ldr	r3, [pc, #108]	; (8000a30 <HAL_TIM_OC_DelayElapsedCallback+0x7ec>)
 80009c2:	881b      	ldrh	r3, [r3, #0]
 80009c4:	0a1b      	lsrs	r3, r3, #8
 80009c6:	b29b      	uxth	r3, r3
 80009c8:	b2da      	uxtb	r2, r3
 80009ca:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <HAL_TIM_OC_DelayElapsedCallback+0x7e8>)
 80009cc:	709a      	strb	r2, [r3, #2]
		  pmt_buf[3] = (pmt_seq & 0xFF);
 80009ce:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <HAL_TIM_OC_DelayElapsedCallback+0x7ec>)
 80009d0:	881b      	ldrh	r3, [r3, #0]
 80009d2:	b2da      	uxtb	r2, r3
 80009d4:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <HAL_TIM_OC_DelayElapsedCallback+0x7e8>)
 80009d6:	70da      	strb	r2, [r3, #3]
		  pmt_buf[4] = ((pmt_raw & 0xFF00) >> 8);
 80009d8:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <HAL_TIM_OC_DelayElapsedCallback+0x7e4>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	121b      	asrs	r3, r3, #8
 80009de:	b2da      	uxtb	r2, r3
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <HAL_TIM_OC_DelayElapsedCallback+0x7e8>)
 80009e2:	711a      	strb	r2, [r3, #4]
		  pmt_buf[5] = (pmt_raw & 0xFF);
 80009e4:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <HAL_TIM_OC_DelayElapsedCallback+0x7e4>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <HAL_TIM_OC_DelayElapsedCallback+0x7e8>)
 80009ec:	715a      	strb	r2, [r3, #5]
		  pmt_seq++;
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <HAL_TIM_OC_DelayElapsedCallback+0x7ec>)
 80009f0:	881b      	ldrh	r3, [r3, #0]
 80009f2:	3301      	adds	r3, #1
 80009f4:	b29a      	uxth	r2, r3
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <HAL_TIM_OC_DelayElapsedCallback+0x7ec>)
 80009f8:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, pmt_buf, sizeof(pmt_buf), 100);
 80009fa:	490c      	ldr	r1, [pc, #48]	; (8000a2c <HAL_TIM_OC_DelayElapsedCallback+0x7e8>)
 80009fc:	480d      	ldr	r0, [pc, #52]	; (8000a34 <HAL_TIM_OC_DelayElapsedCallback+0x7f0>)
 80009fe:	2364      	movs	r3, #100	; 0x64
 8000a00:	2206      	movs	r2, #6
 8000a02:	f005 fa71 	bl	8005ee8 <HAL_UART_Transmit>
}
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	b011      	add	sp, #68	; 0x44
 8000a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	200001fc 	.word	0x200001fc
 8000a14:	20000024 	.word	0x20000024
 8000a18:	08007464 	.word	0x08007464
 8000a1c:	20000134 	.word	0x20000134
 8000a20:	40013000 	.word	0x40013000
 8000a24:	fffffbff 	.word	0xfffffbff
 8000a28:	200003a0 	.word	0x200003a0
 8000a2c:	200003bc 	.word	0x200003bc
 8000a30:	200003c2 	.word	0x200003c2
 8000a34:	2000028c 	.word	0x2000028c

08000a38 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]

  HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000a40:	4973      	ldr	r1, [pc, #460]	; (8000c10 <HAL_UART_RxCpltCallback+0x1d8>)
 8000a42:	4b74      	ldr	r3, [pc, #464]	; (8000c14 <HAL_UART_RxCpltCallback+0x1dc>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	0018      	movs	r0, r3
 8000a48:	f005 faf7 	bl	800603a <HAL_UART_Receive_IT>
  unsigned char key = rx_buf[0];
 8000a4c:	210f      	movs	r1, #15
 8000a4e:	187b      	adds	r3, r7, r1
 8000a50:	4a6f      	ldr	r2, [pc, #444]	; (8000c10 <HAL_UART_RxCpltCallback+0x1d8>)
 8000a52:	7812      	ldrb	r2, [r2, #0]
 8000a54:	701a      	strb	r2, [r3, #0]

  switch (key)
 8000a56:	187b      	adds	r3, r7, r1
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b1c      	cmp	r3, #28
 8000a5c:	d900      	bls.n	8000a60 <HAL_UART_RxCpltCallback+0x28>
 8000a5e:	e0d3      	b.n	8000c08 <HAL_UART_RxCpltCallback+0x1d0>
 8000a60:	009a      	lsls	r2, r3, #2
 8000a62:	4b6d      	ldr	r3, [pc, #436]	; (8000c18 <HAL_UART_RxCpltCallback+0x1e0>)
 8000a64:	18d3      	adds	r3, r2, r3
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	469f      	mov	pc, r3
  {
  case 0x0B:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000a6a:	4b6c      	ldr	r3, [pc, #432]	; (8000c1c <HAL_UART_RxCpltCallback+0x1e4>)
 8000a6c:	2140      	movs	r1, #64	; 0x40
 8000a6e:	2201      	movs	r2, #1
 8000a70:	0018      	movs	r0, r3
 8000a72:	f002 fb10 	bl	8003096 <HAL_GPIO_WritePin>
    break;
 8000a76:	e0c7      	b.n	8000c08 <HAL_UART_RxCpltCallback+0x1d0>
  }
  case 0x0A:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000a78:	4b68      	ldr	r3, [pc, #416]	; (8000c1c <HAL_UART_RxCpltCallback+0x1e4>)
 8000a7a:	2140      	movs	r1, #64	; 0x40
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f002 fb09 	bl	8003096 <HAL_GPIO_WritePin>
    break;
 8000a84:	e0c0      	b.n	8000c08 <HAL_UART_RxCpltCallback+0x1d0>
  }

  case 0x08:
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_SET);
 8000a86:	4b65      	ldr	r3, [pc, #404]	; (8000c1c <HAL_UART_RxCpltCallback+0x1e4>)
 8000a88:	2180      	movs	r1, #128	; 0x80
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f002 fb02 	bl	8003096 <HAL_GPIO_WritePin>
    break;
 8000a92:	e0b9      	b.n	8000c08 <HAL_UART_RxCpltCallback+0x1d0>
  }
  case 0x09:
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_RESET);
 8000a94:	4b61      	ldr	r3, [pc, #388]	; (8000c1c <HAL_UART_RxCpltCallback+0x1e4>)
 8000a96:	2180      	movs	r1, #128	; 0x80
 8000a98:	2200      	movs	r2, #0
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f002 fafb 	bl	8003096 <HAL_GPIO_WritePin>
    break;
 8000aa0:	e0b2      	b.n	8000c08 <HAL_UART_RxCpltCallback+0x1d0>
  }
  case 0x1B:
  {
    if (step < 7)
 8000aa2:	4b5f      	ldr	r3, [pc, #380]	; (8000c20 <HAL_UART_RxCpltCallback+0x1e8>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	2b06      	cmp	r3, #6
 8000aa8:	d900      	bls.n	8000aac <HAL_UART_RxCpltCallback+0x74>
 8000aaa:	e0aa      	b.n	8000c02 <HAL_UART_RxCpltCallback+0x1ca>
    {
      step++;
 8000aac:	4b5c      	ldr	r3, [pc, #368]	; (8000c20 <HAL_UART_RxCpltCallback+0x1e8>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	b2da      	uxtb	r2, r3
 8000ab4:	4b5a      	ldr	r3, [pc, #360]	; (8000c20 <HAL_UART_RxCpltCallback+0x1e8>)
 8000ab6:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000ab8:	e0a3      	b.n	8000c02 <HAL_UART_RxCpltCallback+0x1ca>
  }
  case 0x1C:
  {
    if (step > 0)
 8000aba:	4b59      	ldr	r3, [pc, #356]	; (8000c20 <HAL_UART_RxCpltCallback+0x1e8>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d100      	bne.n	8000ac4 <HAL_UART_RxCpltCallback+0x8c>
 8000ac2:	e0a0      	b.n	8000c06 <HAL_UART_RxCpltCallback+0x1ce>
    {
      step--;
 8000ac4:	4b56      	ldr	r3, [pc, #344]	; (8000c20 <HAL_UART_RxCpltCallback+0x1e8>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	3b01      	subs	r3, #1
 8000aca:	b2da      	uxtb	r2, r3
 8000acc:	4b54      	ldr	r3, [pc, #336]	; (8000c20 <HAL_UART_RxCpltCallback+0x1e8>)
 8000ace:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000ad0:	e099      	b.n	8000c06 <HAL_UART_RxCpltCallback+0x1ce>
  }
  case 0x00:
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000ad2:	4b54      	ldr	r3, [pc, #336]	; (8000c24 <HAL_UART_RxCpltCallback+0x1ec>)
 8000ad4:	2120      	movs	r1, #32
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f002 fadc 	bl	8003096 <HAL_GPIO_WritePin>
    break;
 8000ade:	e093      	b.n	8000c08 <HAL_UART_RxCpltCallback+0x1d0>
  }
  case 0x13:
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8000ae0:	4b50      	ldr	r3, [pc, #320]	; (8000c24 <HAL_UART_RxCpltCallback+0x1ec>)
 8000ae2:	2120      	movs	r1, #32
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f002 fad5 	bl	8003096 <HAL_GPIO_WritePin>
    break;
 8000aec:	e08c      	b.n	8000c08 <HAL_UART_RxCpltCallback+0x1d0>
  }
  case 0x01:
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000aee:	4b4d      	ldr	r3, [pc, #308]	; (8000c24 <HAL_UART_RxCpltCallback+0x1ec>)
 8000af0:	2140      	movs	r1, #64	; 0x40
 8000af2:	2201      	movs	r2, #1
 8000af4:	0018      	movs	r0, r3
 8000af6:	f002 face 	bl	8003096 <HAL_GPIO_WritePin>
    break;
 8000afa:	e085      	b.n	8000c08 <HAL_UART_RxCpltCallback+0x1d0>
  }
  case 0x14:
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000afc:	4b49      	ldr	r3, [pc, #292]	; (8000c24 <HAL_UART_RxCpltCallback+0x1ec>)
 8000afe:	2140      	movs	r1, #64	; 0x40
 8000b00:	2200      	movs	r2, #0
 8000b02:	0018      	movs	r0, r3
 8000b04:	f002 fac7 	bl	8003096 <HAL_GPIO_WritePin>
    break;
 8000b08:	e07e      	b.n	8000c08 <HAL_UART_RxCpltCallback+0x1d0>
  }
  case 0x02:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000b0a:	4847      	ldr	r0, [pc, #284]	; (8000c28 <HAL_UART_RxCpltCallback+0x1f0>)
 8000b0c:	2380      	movs	r3, #128	; 0x80
 8000b0e:	00db      	lsls	r3, r3, #3
 8000b10:	2201      	movs	r2, #1
 8000b12:	0019      	movs	r1, r3
 8000b14:	f002 fabf 	bl	8003096 <HAL_GPIO_WritePin>
    break;
 8000b18:	e076      	b.n	8000c08 <HAL_UART_RxCpltCallback+0x1d0>
  }
  case 0x15:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000b1a:	4843      	ldr	r0, [pc, #268]	; (8000c28 <HAL_UART_RxCpltCallback+0x1f0>)
 8000b1c:	2380      	movs	r3, #128	; 0x80
 8000b1e:	00db      	lsls	r3, r3, #3
 8000b20:	2200      	movs	r2, #0
 8000b22:	0019      	movs	r1, r3
 8000b24:	f002 fab7 	bl	8003096 <HAL_GPIO_WritePin>
    break;
 8000b28:	e06e      	b.n	8000c08 <HAL_UART_RxCpltCallback+0x1d0>
  }
  case 0x03:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000b2a:	483f      	ldr	r0, [pc, #252]	; (8000c28 <HAL_UART_RxCpltCallback+0x1f0>)
 8000b2c:	2380      	movs	r3, #128	; 0x80
 8000b2e:	019b      	lsls	r3, r3, #6
 8000b30:	2201      	movs	r2, #1
 8000b32:	0019      	movs	r1, r3
 8000b34:	f002 faaf 	bl	8003096 <HAL_GPIO_WritePin>
    break;
 8000b38:	e066      	b.n	8000c08 <HAL_UART_RxCpltCallback+0x1d0>
  }
  case 0x16:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000b3a:	483b      	ldr	r0, [pc, #236]	; (8000c28 <HAL_UART_RxCpltCallback+0x1f0>)
 8000b3c:	2380      	movs	r3, #128	; 0x80
 8000b3e:	019b      	lsls	r3, r3, #6
 8000b40:	2200      	movs	r2, #0
 8000b42:	0019      	movs	r1, r3
 8000b44:	f002 faa7 	bl	8003096 <HAL_GPIO_WritePin>
    break;
 8000b48:	e05e      	b.n	8000c08 <HAL_UART_RxCpltCallback+0x1d0>
  }
  case 0x04:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000b4a:	4b37      	ldr	r3, [pc, #220]	; (8000c28 <HAL_UART_RxCpltCallback+0x1f0>)
 8000b4c:	2180      	movs	r1, #128	; 0x80
 8000b4e:	2201      	movs	r2, #1
 8000b50:	0018      	movs	r0, r3
 8000b52:	f002 faa0 	bl	8003096 <HAL_GPIO_WritePin>
    break;
 8000b56:	e057      	b.n	8000c08 <HAL_UART_RxCpltCallback+0x1d0>
  }
  case 0x17:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000b58:	4b33      	ldr	r3, [pc, #204]	; (8000c28 <HAL_UART_RxCpltCallback+0x1f0>)
 8000b5a:	2180      	movs	r1, #128	; 0x80
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f002 fa99 	bl	8003096 <HAL_GPIO_WritePin>
    break;
 8000b64:	e050      	b.n	8000c08 <HAL_UART_RxCpltCallback+0x1d0>
  }
  case 0x05:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000b66:	4830      	ldr	r0, [pc, #192]	; (8000c28 <HAL_UART_RxCpltCallback+0x1f0>)
 8000b68:	2380      	movs	r3, #128	; 0x80
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	0019      	movs	r1, r3
 8000b70:	f002 fa91 	bl	8003096 <HAL_GPIO_WritePin>
    break;
 8000b74:	e048      	b.n	8000c08 <HAL_UART_RxCpltCallback+0x1d0>
  }
  case 0x18:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000b76:	482c      	ldr	r0, [pc, #176]	; (8000c28 <HAL_UART_RxCpltCallback+0x1f0>)
 8000b78:	2380      	movs	r3, #128	; 0x80
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	0019      	movs	r1, r3
 8000b80:	f002 fa89 	bl	8003096 <HAL_GPIO_WritePin>
    break;
 8000b84:	e040      	b.n	8000c08 <HAL_UART_RxCpltCallback+0x1d0>
  }
  case 0x06:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000b86:	4828      	ldr	r0, [pc, #160]	; (8000c28 <HAL_UART_RxCpltCallback+0x1f0>)
 8000b88:	2380      	movs	r3, #128	; 0x80
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	0019      	movs	r1, r3
 8000b90:	f002 fa81 	bl	8003096 <HAL_GPIO_WritePin>
    break;
 8000b94:	e038      	b.n	8000c08 <HAL_UART_RxCpltCallback+0x1d0>
  }
  case 0x19:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000b96:	4824      	ldr	r0, [pc, #144]	; (8000c28 <HAL_UART_RxCpltCallback+0x1f0>)
 8000b98:	2380      	movs	r3, #128	; 0x80
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	0019      	movs	r1, r3
 8000ba0:	f002 fa79 	bl	8003096 <HAL_GPIO_WritePin>
    break;
 8000ba4:	e030      	b.n	8000c08 <HAL_UART_RxCpltCallback+0x1d0>
  }
  case 0x07:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000ba6:	4b20      	ldr	r3, [pc, #128]	; (8000c28 <HAL_UART_RxCpltCallback+0x1f0>)
 8000ba8:	2140      	movs	r1, #64	; 0x40
 8000baa:	2201      	movs	r2, #1
 8000bac:	0018      	movs	r0, r3
 8000bae:	f002 fa72 	bl	8003096 <HAL_GPIO_WritePin>
    break;
 8000bb2:	e029      	b.n	8000c08 <HAL_UART_RxCpltCallback+0x1d0>
  }
  case 0x1A:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000bb4:	4b1c      	ldr	r3, [pc, #112]	; (8000c28 <HAL_UART_RxCpltCallback+0x1f0>)
 8000bb6:	2140      	movs	r1, #64	; 0x40
 8000bb8:	2200      	movs	r2, #0
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f002 fa6b 	bl	8003096 <HAL_GPIO_WritePin>
    break;
 8000bc0:	e022      	b.n	8000c08 <HAL_UART_RxCpltCallback+0x1d0>
  }
  case 0x0C:
  {
      HAL_SuspendTick();
 8000bc2:	f001 f94f 	bl	8001e64 <HAL_SuspendTick>
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f002 ffb7 	bl	8003b3c <HAL_PWR_EnterSTOPMode>
      NVIC_SystemReset();
 8000bce:	f7ff fb27 	bl	8000220 <__NVIC_SystemReset>
      break;
  }
  case 0x0D:
  {
    PMT_ON = 1;
 8000bd2:	4b16      	ldr	r3, [pc, #88]	; (8000c2c <HAL_UART_RxCpltCallback+0x1f4>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	701a      	strb	r2, [r3, #0]
    break;
 8000bd8:	e016      	b.n	8000c08 <HAL_UART_RxCpltCallback+0x1d0>
  }
  case 0x10:
  {
    PMT_ON = 0;
 8000bda:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <HAL_UART_RxCpltCallback+0x1f4>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	701a      	strb	r2, [r3, #0]
    break;
 8000be0:	e012      	b.n	8000c08 <HAL_UART_RxCpltCallback+0x1d0>
  }
  case 0x0E:
  {
    ERPA_ON = 1;
 8000be2:	4b13      	ldr	r3, [pc, #76]	; (8000c30 <HAL_UART_RxCpltCallback+0x1f8>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	701a      	strb	r2, [r3, #0]
    break;
 8000be8:	e00e      	b.n	8000c08 <HAL_UART_RxCpltCallback+0x1d0>
  }
  case 0x11:
  {
    ERPA_ON = 0;
 8000bea:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <HAL_UART_RxCpltCallback+0x1f8>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	701a      	strb	r2, [r3, #0]
    break;
 8000bf0:	e00a      	b.n	8000c08 <HAL_UART_RxCpltCallback+0x1d0>
  }
  case 0x0F:
  {
    HK_ON = 1;
 8000bf2:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <HAL_UART_RxCpltCallback+0x1fc>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	701a      	strb	r2, [r3, #0]
    break;
 8000bf8:	e006      	b.n	8000c08 <HAL_UART_RxCpltCallback+0x1d0>
  }
  case 0x12:
  {
    HK_ON = 0;
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <HAL_UART_RxCpltCallback+0x1fc>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	701a      	strb	r2, [r3, #0]
    break;
 8000c00:	e002      	b.n	8000c08 <HAL_UART_RxCpltCallback+0x1d0>
    break;
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	e000      	b.n	8000c08 <HAL_UART_RxCpltCallback+0x1d0>
    break;
 8000c06:	46c0      	nop			; (mov r8, r8)
  }
  }
}
 8000c08:	46c0      	nop			; (mov r8, r8)
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	b004      	add	sp, #16
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20000310 	.word	0x20000310
 8000c14:	2000028c 	.word	0x2000028c
 8000c18:	08007468 	.word	0x08007468
 8000c1c:	48001400 	.word	0x48001400
 8000c20:	2000039e 	.word	0x2000039e
 8000c24:	48000400 	.word	0x48000400
 8000c28:	48000800 	.word	0x48000800
 8000c2c:	20000024 	.word	0x20000024
 8000c30:	20000025 	.word	0x20000025
 8000c34:	20000026 	.word	0x20000026

08000c38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c3e:	f001 f8ad 	bl	8001d9c <HAL_Init>
  int16_t val;
  float temp_c;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c42:	f000 f86d 	bl	8000d20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c46:	f000 fc87 	bl	8001558 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c4a:	f000 fc67 	bl	800151c <MX_DMA_Init>
  MX_SPI2_Init();
 8000c4e:	f000 faaf 	bl	80011b0 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000c52:	f000 faed 	bl	8001230 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c56:	f000 fba1 	bl	800139c <MX_TIM2_Init>
  MX_SPI1_Init();
 8000c5a:	f000 fa69 	bl	8001130 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000c5e:	f000 fc1d 	bl	800149c <MX_USART1_UART_Init>
  MX_DAC1_Init();
 8000c62:	f000 f9f3 	bl	800104c <MX_DAC1_Init>
  MX_ADC_Init();
 8000c66:	f000 f8c5 	bl	8000df4 <MX_ADC_Init>
  MX_I2C1_Init();
 8000c6a:	f000 fa21 	bl	80010b0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */



  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000c6e:	4b26      	ldr	r3, [pc, #152]	; (8000d08 <main+0xd0>)
 8000c70:	2100      	movs	r1, #0
 8000c72:	0018      	movs	r0, r3
 8000c74:	f001 fe33 	bl	80028de <HAL_DAC_Start>

  /* Start Timers with OC & Interrupt */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000c78:	4b24      	ldr	r3, [pc, #144]	; (8000d0c <main+0xd4>)
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f004 f8b1 	bl	8004de4 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000c82:	4b23      	ldr	r3, [pc, #140]	; (8000d10 <main+0xd8>)
 8000c84:	210c      	movs	r1, #12
 8000c86:	0018      	movs	r0, r3
 8000c88:	f004 f8ac 	bl	8004de4 <HAL_TIM_OC_Start_IT>

  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8000c8c:	46c0      	nop			; (mov r8, r8)
 8000c8e:	4b21      	ldr	r3, [pc, #132]	; (8000d14 <main+0xdc>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	69da      	ldr	r2, [r3, #28]
 8000c94:	2380      	movs	r3, #128	; 0x80
 8000c96:	025b      	lsls	r3, r3, #9
 8000c98:	401a      	ands	r2, r3
 8000c9a:	2380      	movs	r3, #128	; 0x80
 8000c9c:	025b      	lsls	r3, r3, #9
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	d0f5      	beq.n	8000c8e <main+0x56>
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	4b1b      	ldr	r3, [pc, #108]	; (8000d14 <main+0xdc>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	69da      	ldr	r2, [r3, #28]
 8000caa:	2380      	movs	r3, #128	; 0x80
 8000cac:	03db      	lsls	r3, r3, #15
 8000cae:	401a      	ands	r2, r3
 8000cb0:	2380      	movs	r3, #128	; 0x80
 8000cb2:	03db      	lsls	r3, r3, #15
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d1f5      	bne.n	8000ca4 <main+0x6c>

  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_ADDRESS;
 8000cb8:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <main+0xe0>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
  WakeUpSelection.AddressLength = UART_ADDRESS_DETECT_7B;
 8000cbe:	4b16      	ldr	r3, [pc, #88]	; (8000d18 <main+0xe0>)
 8000cc0:	2210      	movs	r2, #16
 8000cc2:	809a      	strh	r2, [r3, #4]
  WakeUpSelection.Address = 0x5B; // send "["
 8000cc4:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <main+0xe0>)
 8000cc6:	225b      	movs	r2, #91	; 0x5b
 8000cc8:	719a      	strb	r2, [r3, #6]

  if (HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection) != HAL_OK) {
 8000cca:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <main+0xe0>)
 8000ccc:	4811      	ldr	r0, [pc, #68]	; (8000d14 <main+0xdc>)
 8000cce:	6819      	ldr	r1, [r3, #0]
 8000cd0:	685a      	ldr	r2, [r3, #4]
 8000cd2:	f006 fab7 	bl	8007244 <HAL_UARTEx_StopModeWakeUpSourceConfig>
 8000cd6:	1e03      	subs	r3, r0, #0
 8000cd8:	d001      	beq.n	8000cde <main+0xa6>
      Error_Handler();
 8000cda:	f000 fcd7 	bl	800168c <Error_Handler>
  }
  /* Enable the LPUART Wake UP from stop mode Interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8000cde:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <main+0xdc>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	689a      	ldr	r2, [r3, #8]
 8000ce4:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <main+0xdc>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2180      	movs	r1, #128	; 0x80
 8000cea:	03c9      	lsls	r1, r1, #15
 8000cec:	430a      	orrs	r2, r1
 8000cee:	609a      	str	r2, [r3, #8]

  /* enable MCU wake-up by LPUART */
  HAL_UARTEx_EnableStopMode(&huart1);
 8000cf0:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <main+0xdc>)
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f006 fb0c 	bl	8007310 <HAL_UARTEx_EnableStopMode>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000cf8:	4908      	ldr	r1, [pc, #32]	; (8000d1c <main+0xe4>)
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <main+0xdc>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	0018      	movs	r0, r3
 8000d00:	f005 f99b 	bl	800603a <HAL_UART_Receive_IT>
 8000d04:	e7f8      	b.n	8000cf8 <main+0xc0>
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	200000d4 	.word	0x200000d4
 8000d0c:	200001fc 	.word	0x200001fc
 8000d10:	20000244 	.word	0x20000244
 8000d14:	2000028c 	.word	0x2000028c
 8000d18:	20000374 	.word	0x20000374
 8000d1c:	20000310 	.word	0x20000310

08000d20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d20:	b590      	push	{r4, r7, lr}
 8000d22:	b097      	sub	sp, #92	; 0x5c
 8000d24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d26:	2428      	movs	r4, #40	; 0x28
 8000d28:	193b      	adds	r3, r7, r4
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	2330      	movs	r3, #48	; 0x30
 8000d2e:	001a      	movs	r2, r3
 8000d30:	2100      	movs	r1, #0
 8000d32:	f006 fb67 	bl	8007404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d36:	2318      	movs	r3, #24
 8000d38:	18fb      	adds	r3, r7, r3
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	2310      	movs	r3, #16
 8000d3e:	001a      	movs	r2, r3
 8000d40:	2100      	movs	r1, #0
 8000d42:	f006 fb5f 	bl	8007404 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d46:	1d3b      	adds	r3, r7, #4
 8000d48:	0018      	movs	r0, r3
 8000d4a:	2314      	movs	r3, #20
 8000d4c:	001a      	movs	r2, r3
 8000d4e:	2100      	movs	r1, #0
 8000d50:	f006 fb58 	bl	8007404 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000d54:	0021      	movs	r1, r4
 8000d56:	187b      	adds	r3, r7, r1
 8000d58:	2212      	movs	r2, #18
 8000d5a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d5c:	187b      	adds	r3, r7, r1
 8000d5e:	2201      	movs	r2, #1
 8000d60:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000d62:	187b      	adds	r3, r7, r1
 8000d64:	2201      	movs	r2, #1
 8000d66:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d68:	187b      	adds	r3, r7, r1
 8000d6a:	2210      	movs	r2, #16
 8000d6c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000d6e:	187b      	adds	r3, r7, r1
 8000d70:	2210      	movs	r2, #16
 8000d72:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d74:	187b      	adds	r3, r7, r1
 8000d76:	2202      	movs	r2, #2
 8000d78:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d7a:	187b      	adds	r3, r7, r1
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000d80:	187b      	adds	r3, r7, r1
 8000d82:	22a0      	movs	r2, #160	; 0xa0
 8000d84:	0392      	lsls	r2, r2, #14
 8000d86:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000d88:	187b      	adds	r3, r7, r1
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d8e:	187b      	adds	r3, r7, r1
 8000d90:	0018      	movs	r0, r3
 8000d92:	f002 ff07 	bl	8003ba4 <HAL_RCC_OscConfig>
 8000d96:	1e03      	subs	r3, r0, #0
 8000d98:	d001      	beq.n	8000d9e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000d9a:	f000 fc77 	bl	800168c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d9e:	2118      	movs	r1, #24
 8000da0:	187b      	adds	r3, r7, r1
 8000da2:	2207      	movs	r2, #7
 8000da4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000da6:	187b      	adds	r3, r7, r1
 8000da8:	2202      	movs	r2, #2
 8000daa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dac:	187b      	adds	r3, r7, r1
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000db2:	187b      	adds	r3, r7, r1
 8000db4:	2200      	movs	r2, #0
 8000db6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000db8:	187b      	adds	r3, r7, r1
 8000dba:	2101      	movs	r1, #1
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f003 fa0b 	bl	80041d8 <HAL_RCC_ClockConfig>
 8000dc2:	1e03      	subs	r3, r0, #0
 8000dc4:	d001      	beq.n	8000dca <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000dc6:	f000 fc61 	bl	800168c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	2221      	movs	r2, #33	; 0x21
 8000dce:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8000dd0:	1d3b      	adds	r3, r7, #4
 8000dd2:	2203      	movs	r2, #3
 8000dd4:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	2200      	movs	r2, #0
 8000dda:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ddc:	1d3b      	adds	r3, r7, #4
 8000dde:	0018      	movs	r0, r3
 8000de0:	f003 fb4c 	bl	800447c <HAL_RCCEx_PeriphCLKConfig>
 8000de4:	1e03      	subs	r3, r0, #0
 8000de6:	d001      	beq.n	8000dec <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000de8:	f000 fc50 	bl	800168c <Error_Handler>
  }
}
 8000dec:	46c0      	nop			; (mov r8, r8)
 8000dee:	46bd      	mov	sp, r7
 8000df0:	b017      	add	sp, #92	; 0x5c
 8000df2:	bd90      	pop	{r4, r7, pc}

08000df4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	230c      	movs	r3, #12
 8000e00:	001a      	movs	r2, r3
 8000e02:	2100      	movs	r1, #0
 8000e04:	f006 fafe 	bl	8007404 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000e08:	4b8e      	ldr	r3, [pc, #568]	; (8001044 <MX_ADC_Init+0x250>)
 8000e0a:	4a8f      	ldr	r2, [pc, #572]	; (8001048 <MX_ADC_Init+0x254>)
 8000e0c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e0e:	4b8d      	ldr	r3, [pc, #564]	; (8001044 <MX_ADC_Init+0x250>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000e14:	4b8b      	ldr	r3, [pc, #556]	; (8001044 <MX_ADC_Init+0x250>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e1a:	4b8a      	ldr	r3, [pc, #552]	; (8001044 <MX_ADC_Init+0x250>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000e20:	4b88      	ldr	r3, [pc, #544]	; (8001044 <MX_ADC_Init+0x250>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e26:	4b87      	ldr	r3, [pc, #540]	; (8001044 <MX_ADC_Init+0x250>)
 8000e28:	2204      	movs	r2, #4
 8000e2a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000e2c:	4b85      	ldr	r3, [pc, #532]	; (8001044 <MX_ADC_Init+0x250>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000e32:	4b84      	ldr	r3, [pc, #528]	; (8001044 <MX_ADC_Init+0x250>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000e38:	4b82      	ldr	r3, [pc, #520]	; (8001044 <MX_ADC_Init+0x250>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000e3e:	4b81      	ldr	r3, [pc, #516]	; (8001044 <MX_ADC_Init+0x250>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e44:	4b7f      	ldr	r3, [pc, #508]	; (8001044 <MX_ADC_Init+0x250>)
 8000e46:	22c2      	movs	r2, #194	; 0xc2
 8000e48:	32ff      	adds	r2, #255	; 0xff
 8000e4a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e4c:	4b7d      	ldr	r3, [pc, #500]	; (8001044 <MX_ADC_Init+0x250>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000e52:	4b7c      	ldr	r3, [pc, #496]	; (8001044 <MX_ADC_Init+0x250>)
 8000e54:	2224      	movs	r2, #36	; 0x24
 8000e56:	2100      	movs	r1, #0
 8000e58:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e5a:	4b7a      	ldr	r3, [pc, #488]	; (8001044 <MX_ADC_Init+0x250>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000e60:	4b78      	ldr	r3, [pc, #480]	; (8001044 <MX_ADC_Init+0x250>)
 8000e62:	0018      	movs	r0, r3
 8000e64:	f001 f80c 	bl	8001e80 <HAL_ADC_Init>
 8000e68:	1e03      	subs	r3, r0, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000e6c:	f000 fc0e 	bl	800168c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e70:	1d3b      	adds	r3, r7, #4
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	2280      	movs	r2, #128	; 0x80
 8000e7a:	0152      	lsls	r2, r2, #5
 8000e7c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	2280      	movs	r2, #128	; 0x80
 8000e82:	0552      	lsls	r2, r2, #21
 8000e84:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e86:	1d3a      	adds	r2, r7, #4
 8000e88:	4b6e      	ldr	r3, [pc, #440]	; (8001044 <MX_ADC_Init+0x250>)
 8000e8a:	0011      	movs	r1, r2
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	f001 f9d1 	bl	8002234 <HAL_ADC_ConfigChannel>
 8000e92:	1e03      	subs	r3, r0, #0
 8000e94:	d001      	beq.n	8000e9a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000e96:	f000 fbf9 	bl	800168c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ea0:	1d3a      	adds	r2, r7, #4
 8000ea2:	4b68      	ldr	r3, [pc, #416]	; (8001044 <MX_ADC_Init+0x250>)
 8000ea4:	0011      	movs	r1, r2
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f001 f9c4 	bl	8002234 <HAL_ADC_ConfigChannel>
 8000eac:	1e03      	subs	r3, r0, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8000eb0:	f000 fbec 	bl	800168c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000eb4:	1d3b      	adds	r3, r7, #4
 8000eb6:	2202      	movs	r2, #2
 8000eb8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000eba:	1d3a      	adds	r2, r7, #4
 8000ebc:	4b61      	ldr	r3, [pc, #388]	; (8001044 <MX_ADC_Init+0x250>)
 8000ebe:	0011      	movs	r1, r2
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	f001 f9b7 	bl	8002234 <HAL_ADC_ConfigChannel>
 8000ec6:	1e03      	subs	r3, r0, #0
 8000ec8:	d001      	beq.n	8000ece <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8000eca:	f000 fbdf 	bl	800168c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000ece:	1d3b      	adds	r3, r7, #4
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ed4:	1d3a      	adds	r2, r7, #4
 8000ed6:	4b5b      	ldr	r3, [pc, #364]	; (8001044 <MX_ADC_Init+0x250>)
 8000ed8:	0011      	movs	r1, r2
 8000eda:	0018      	movs	r0, r3
 8000edc:	f001 f9aa 	bl	8002234 <HAL_ADC_ConfigChannel>
 8000ee0:	1e03      	subs	r3, r0, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 8000ee4:	f000 fbd2 	bl	800168c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ee8:	1d3b      	adds	r3, r7, #4
 8000eea:	2205      	movs	r2, #5
 8000eec:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000eee:	1d3a      	adds	r2, r7, #4
 8000ef0:	4b54      	ldr	r3, [pc, #336]	; (8001044 <MX_ADC_Init+0x250>)
 8000ef2:	0011      	movs	r1, r2
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	f001 f99d 	bl	8002234 <HAL_ADC_ConfigChannel>
 8000efa:	1e03      	subs	r3, r0, #0
 8000efc:	d001      	beq.n	8000f02 <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 8000efe:	f000 fbc5 	bl	800168c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	2206      	movs	r2, #6
 8000f06:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f08:	1d3a      	adds	r2, r7, #4
 8000f0a:	4b4e      	ldr	r3, [pc, #312]	; (8001044 <MX_ADC_Init+0x250>)
 8000f0c:	0011      	movs	r1, r2
 8000f0e:	0018      	movs	r0, r3
 8000f10:	f001 f990 	bl	8002234 <HAL_ADC_ConfigChannel>
 8000f14:	1e03      	subs	r3, r0, #0
 8000f16:	d001      	beq.n	8000f1c <MX_ADC_Init+0x128>
  {
    Error_Handler();
 8000f18:	f000 fbb8 	bl	800168c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000f1c:	1d3b      	adds	r3, r7, #4
 8000f1e:	2207      	movs	r2, #7
 8000f20:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f22:	1d3a      	adds	r2, r7, #4
 8000f24:	4b47      	ldr	r3, [pc, #284]	; (8001044 <MX_ADC_Init+0x250>)
 8000f26:	0011      	movs	r1, r2
 8000f28:	0018      	movs	r0, r3
 8000f2a:	f001 f983 	bl	8002234 <HAL_ADC_ConfigChannel>
 8000f2e:	1e03      	subs	r3, r0, #0
 8000f30:	d001      	beq.n	8000f36 <MX_ADC_Init+0x142>
  {
    Error_Handler();
 8000f32:	f000 fbab 	bl	800168c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	2208      	movs	r2, #8
 8000f3a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f3c:	1d3a      	adds	r2, r7, #4
 8000f3e:	4b41      	ldr	r3, [pc, #260]	; (8001044 <MX_ADC_Init+0x250>)
 8000f40:	0011      	movs	r1, r2
 8000f42:	0018      	movs	r0, r3
 8000f44:	f001 f976 	bl	8002234 <HAL_ADC_ConfigChannel>
 8000f48:	1e03      	subs	r3, r0, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_ADC_Init+0x15c>
  {
    Error_Handler();
 8000f4c:	f000 fb9e 	bl	800168c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f50:	1d3b      	adds	r3, r7, #4
 8000f52:	2209      	movs	r2, #9
 8000f54:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f56:	1d3a      	adds	r2, r7, #4
 8000f58:	4b3a      	ldr	r3, [pc, #232]	; (8001044 <MX_ADC_Init+0x250>)
 8000f5a:	0011      	movs	r1, r2
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	f001 f969 	bl	8002234 <HAL_ADC_ConfigChannel>
 8000f62:	1e03      	subs	r3, r0, #0
 8000f64:	d001      	beq.n	8000f6a <MX_ADC_Init+0x176>
  {
    Error_Handler();
 8000f66:	f000 fb91 	bl	800168c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	220a      	movs	r2, #10
 8000f6e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f70:	1d3a      	adds	r2, r7, #4
 8000f72:	4b34      	ldr	r3, [pc, #208]	; (8001044 <MX_ADC_Init+0x250>)
 8000f74:	0011      	movs	r1, r2
 8000f76:	0018      	movs	r0, r3
 8000f78:	f001 f95c 	bl	8002234 <HAL_ADC_ConfigChannel>
 8000f7c:	1e03      	subs	r3, r0, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_ADC_Init+0x190>
  {
    Error_Handler();
 8000f80:	f000 fb84 	bl	800168c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	220b      	movs	r2, #11
 8000f88:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f8a:	1d3a      	adds	r2, r7, #4
 8000f8c:	4b2d      	ldr	r3, [pc, #180]	; (8001044 <MX_ADC_Init+0x250>)
 8000f8e:	0011      	movs	r1, r2
 8000f90:	0018      	movs	r0, r3
 8000f92:	f001 f94f 	bl	8002234 <HAL_ADC_ConfigChannel>
 8000f96:	1e03      	subs	r3, r0, #0
 8000f98:	d001      	beq.n	8000f9e <MX_ADC_Init+0x1aa>
  {
    Error_Handler();
 8000f9a:	f000 fb77 	bl	800168c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	220c      	movs	r2, #12
 8000fa2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000fa4:	1d3a      	adds	r2, r7, #4
 8000fa6:	4b27      	ldr	r3, [pc, #156]	; (8001044 <MX_ADC_Init+0x250>)
 8000fa8:	0011      	movs	r1, r2
 8000faa:	0018      	movs	r0, r3
 8000fac:	f001 f942 	bl	8002234 <HAL_ADC_ConfigChannel>
 8000fb0:	1e03      	subs	r3, r0, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_ADC_Init+0x1c4>
  {
    Error_Handler();
 8000fb4:	f000 fb6a 	bl	800168c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	220d      	movs	r2, #13
 8000fbc:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000fbe:	1d3a      	adds	r2, r7, #4
 8000fc0:	4b20      	ldr	r3, [pc, #128]	; (8001044 <MX_ADC_Init+0x250>)
 8000fc2:	0011      	movs	r1, r2
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	f001 f935 	bl	8002234 <HAL_ADC_ConfigChannel>
 8000fca:	1e03      	subs	r3, r0, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_ADC_Init+0x1de>
  {
    Error_Handler();
 8000fce:	f000 fb5d 	bl	800168c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	220e      	movs	r2, #14
 8000fd6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000fd8:	1d3a      	adds	r2, r7, #4
 8000fda:	4b1a      	ldr	r3, [pc, #104]	; (8001044 <MX_ADC_Init+0x250>)
 8000fdc:	0011      	movs	r1, r2
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f001 f928 	bl	8002234 <HAL_ADC_ConfigChannel>
 8000fe4:	1e03      	subs	r3, r0, #0
 8000fe6:	d001      	beq.n	8000fec <MX_ADC_Init+0x1f8>
  {
    Error_Handler();
 8000fe8:	f000 fb50 	bl	800168c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	220f      	movs	r2, #15
 8000ff0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ff2:	1d3a      	adds	r2, r7, #4
 8000ff4:	4b13      	ldr	r3, [pc, #76]	; (8001044 <MX_ADC_Init+0x250>)
 8000ff6:	0011      	movs	r1, r2
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	f001 f91b 	bl	8002234 <HAL_ADC_ConfigChannel>
 8000ffe:	1e03      	subs	r3, r0, #0
 8001000:	d001      	beq.n	8001006 <MX_ADC_Init+0x212>
  {
    Error_Handler();
 8001002:	f000 fb43 	bl	800168c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001006:	1d3b      	adds	r3, r7, #4
 8001008:	2210      	movs	r2, #16
 800100a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800100c:	1d3a      	adds	r2, r7, #4
 800100e:	4b0d      	ldr	r3, [pc, #52]	; (8001044 <MX_ADC_Init+0x250>)
 8001010:	0011      	movs	r1, r2
 8001012:	0018      	movs	r0, r3
 8001014:	f001 f90e 	bl	8002234 <HAL_ADC_ConfigChannel>
 8001018:	1e03      	subs	r3, r0, #0
 800101a:	d001      	beq.n	8001020 <MX_ADC_Init+0x22c>
  {
    Error_Handler();
 800101c:	f000 fb36 	bl	800168c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001020:	1d3b      	adds	r3, r7, #4
 8001022:	2211      	movs	r2, #17
 8001024:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001026:	1d3a      	adds	r2, r7, #4
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <MX_ADC_Init+0x250>)
 800102a:	0011      	movs	r1, r2
 800102c:	0018      	movs	r0, r3
 800102e:	f001 f901 	bl	8002234 <HAL_ADC_ConfigChannel>
 8001032:	1e03      	subs	r3, r0, #0
 8001034:	d001      	beq.n	800103a <MX_ADC_Init+0x246>
  {
    Error_Handler();
 8001036:	f000 fb29 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800103a:	46c0      	nop			; (mov r8, r8)
 800103c:	46bd      	mov	sp, r7
 800103e:	b004      	add	sp, #16
 8001040:	bd80      	pop	{r7, pc}
 8001042:	46c0      	nop			; (mov r8, r8)
 8001044:	20000050 	.word	0x20000050
 8001048:	40012400 	.word	0x40012400

0800104c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */
  step = 0;
 8001052:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <MX_DAC1_Init+0x58>)
 8001054:	2200      	movs	r2, #0
 8001056:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001058:	003b      	movs	r3, r7
 800105a:	0018      	movs	r0, r3
 800105c:	2308      	movs	r3, #8
 800105e:	001a      	movs	r2, r3
 8001060:	2100      	movs	r1, #0
 8001062:	f006 f9cf 	bl	8007404 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC;
 8001066:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <MX_DAC1_Init+0x5c>)
 8001068:	4a10      	ldr	r2, [pc, #64]	; (80010ac <MX_DAC1_Init+0x60>)
 800106a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800106c:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <MX_DAC1_Init+0x5c>)
 800106e:	0018      	movs	r0, r3
 8001070:	f001 fbd4 	bl	800281c <HAL_DAC_Init>
 8001074:	1e03      	subs	r3, r0, #0
 8001076:	d001      	beq.n	800107c <MX_DAC1_Init+0x30>
  {
    Error_Handler();
 8001078:	f000 fb08 	bl	800168c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800107c:	003b      	movs	r3, r7
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001082:	003b      	movs	r3, r7
 8001084:	2200      	movs	r2, #0
 8001086:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001088:	0039      	movs	r1, r7
 800108a:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <MX_DAC1_Init+0x5c>)
 800108c:	2200      	movs	r2, #0
 800108e:	0018      	movs	r0, r3
 8001090:	f001 fbe7 	bl	8002862 <HAL_DAC_ConfigChannel>
 8001094:	1e03      	subs	r3, r0, #0
 8001096:	d001      	beq.n	800109c <MX_DAC1_Init+0x50>
  {
    Error_Handler();
 8001098:	f000 faf8 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800109c:	46c0      	nop			; (mov r8, r8)
 800109e:	46bd      	mov	sp, r7
 80010a0:	b002      	add	sp, #8
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	2000039e 	.word	0x2000039e
 80010a8:	200000d4 	.word	0x200000d4
 80010ac:	40007400 	.word	0x40007400

080010b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010b4:	4b1b      	ldr	r3, [pc, #108]	; (8001124 <MX_I2C1_Init+0x74>)
 80010b6:	4a1c      	ldr	r2, [pc, #112]	; (8001128 <MX_I2C1_Init+0x78>)
 80010b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80010ba:	4b1a      	ldr	r3, [pc, #104]	; (8001124 <MX_I2C1_Init+0x74>)
 80010bc:	4a1b      	ldr	r2, [pc, #108]	; (800112c <MX_I2C1_Init+0x7c>)
 80010be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010c0:	4b18      	ldr	r3, [pc, #96]	; (8001124 <MX_I2C1_Init+0x74>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010c6:	4b17      	ldr	r3, [pc, #92]	; (8001124 <MX_I2C1_Init+0x74>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010cc:	4b15      	ldr	r3, [pc, #84]	; (8001124 <MX_I2C1_Init+0x74>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010d2:	4b14      	ldr	r3, [pc, #80]	; (8001124 <MX_I2C1_Init+0x74>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010d8:	4b12      	ldr	r3, [pc, #72]	; (8001124 <MX_I2C1_Init+0x74>)
 80010da:	2200      	movs	r2, #0
 80010dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010de:	4b11      	ldr	r3, [pc, #68]	; (8001124 <MX_I2C1_Init+0x74>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <MX_I2C1_Init+0x74>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <MX_I2C1_Init+0x74>)
 80010ec:	0018      	movs	r0, r3
 80010ee:	f001 ffef 	bl	80030d0 <HAL_I2C_Init>
 80010f2:	1e03      	subs	r3, r0, #0
 80010f4:	d001      	beq.n	80010fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010f6:	f000 fac9 	bl	800168c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010fa:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <MX_I2C1_Init+0x74>)
 80010fc:	2100      	movs	r1, #0
 80010fe:	0018      	movs	r0, r3
 8001100:	f002 fc84 	bl	8003a0c <HAL_I2CEx_ConfigAnalogFilter>
 8001104:	1e03      	subs	r3, r0, #0
 8001106:	d001      	beq.n	800110c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001108:	f000 fac0 	bl	800168c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800110c:	4b05      	ldr	r3, [pc, #20]	; (8001124 <MX_I2C1_Init+0x74>)
 800110e:	2100      	movs	r1, #0
 8001110:	0018      	movs	r0, r3
 8001112:	f002 fcc7 	bl	8003aa4 <HAL_I2CEx_ConfigDigitalFilter>
 8001116:	1e03      	subs	r3, r0, #0
 8001118:	d001      	beq.n	800111e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800111a:	f000 fab7 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800111e:	46c0      	nop			; (mov r8, r8)
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	200000e8 	.word	0x200000e8
 8001128:	40005400 	.word	0x40005400
 800112c:	2000090e 	.word	0x2000090e

08001130 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001134:	4b1c      	ldr	r3, [pc, #112]	; (80011a8 <MX_SPI1_Init+0x78>)
 8001136:	4a1d      	ldr	r2, [pc, #116]	; (80011ac <MX_SPI1_Init+0x7c>)
 8001138:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800113a:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <MX_SPI1_Init+0x78>)
 800113c:	2282      	movs	r2, #130	; 0x82
 800113e:	0052      	lsls	r2, r2, #1
 8001140:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001142:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <MX_SPI1_Init+0x78>)
 8001144:	2280      	movs	r2, #128	; 0x80
 8001146:	00d2      	lsls	r2, r2, #3
 8001148:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800114a:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <MX_SPI1_Init+0x78>)
 800114c:	22f0      	movs	r2, #240	; 0xf0
 800114e:	0112      	lsls	r2, r2, #4
 8001150:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <MX_SPI1_Init+0x78>)
 8001154:	2200      	movs	r2, #0
 8001156:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001158:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <MX_SPI1_Init+0x78>)
 800115a:	2200      	movs	r2, #0
 800115c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800115e:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <MX_SPI1_Init+0x78>)
 8001160:	2280      	movs	r2, #128	; 0x80
 8001162:	0092      	lsls	r2, r2, #2
 8001164:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001166:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <MX_SPI1_Init+0x78>)
 8001168:	2230      	movs	r2, #48	; 0x30
 800116a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800116c:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <MX_SPI1_Init+0x78>)
 800116e:	2200      	movs	r2, #0
 8001170:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001172:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <MX_SPI1_Init+0x78>)
 8001174:	2200      	movs	r2, #0
 8001176:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001178:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <MX_SPI1_Init+0x78>)
 800117a:	2200      	movs	r2, #0
 800117c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800117e:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <MX_SPI1_Init+0x78>)
 8001180:	2207      	movs	r2, #7
 8001182:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001184:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <MX_SPI1_Init+0x78>)
 8001186:	2200      	movs	r2, #0
 8001188:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800118a:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <MX_SPI1_Init+0x78>)
 800118c:	2208      	movs	r2, #8
 800118e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001190:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <MX_SPI1_Init+0x78>)
 8001192:	0018      	movs	r0, r3
 8001194:	f003 fa50 	bl	8004638 <HAL_SPI_Init>
 8001198:	1e03      	subs	r3, r0, #0
 800119a:	d001      	beq.n	80011a0 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 800119c:	f000 fa76 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011a0:	46c0      	nop			; (mov r8, r8)
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	46c0      	nop			; (mov r8, r8)
 80011a8:	20000134 	.word	0x20000134
 80011ac:	40013000 	.word	0x40013000

080011b0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80011b4:	4b1c      	ldr	r3, [pc, #112]	; (8001228 <MX_SPI2_Init+0x78>)
 80011b6:	4a1d      	ldr	r2, [pc, #116]	; (800122c <MX_SPI2_Init+0x7c>)
 80011b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011ba:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <MX_SPI2_Init+0x78>)
 80011bc:	2282      	movs	r2, #130	; 0x82
 80011be:	0052      	lsls	r2, r2, #1
 80011c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80011c2:	4b19      	ldr	r3, [pc, #100]	; (8001228 <MX_SPI2_Init+0x78>)
 80011c4:	2280      	movs	r2, #128	; 0x80
 80011c6:	00d2      	lsls	r2, r2, #3
 80011c8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80011ca:	4b17      	ldr	r3, [pc, #92]	; (8001228 <MX_SPI2_Init+0x78>)
 80011cc:	22f0      	movs	r2, #240	; 0xf0
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011d2:	4b15      	ldr	r3, [pc, #84]	; (8001228 <MX_SPI2_Init+0x78>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011d8:	4b13      	ldr	r3, [pc, #76]	; (8001228 <MX_SPI2_Init+0x78>)
 80011da:	2200      	movs	r2, #0
 80011dc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80011de:	4b12      	ldr	r3, [pc, #72]	; (8001228 <MX_SPI2_Init+0x78>)
 80011e0:	2280      	movs	r2, #128	; 0x80
 80011e2:	0092      	lsls	r2, r2, #2
 80011e4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <MX_SPI2_Init+0x78>)
 80011e8:	2230      	movs	r2, #48	; 0x30
 80011ea:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011ec:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <MX_SPI2_Init+0x78>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80011f2:	4b0d      	ldr	r3, [pc, #52]	; (8001228 <MX_SPI2_Init+0x78>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011f8:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <MX_SPI2_Init+0x78>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80011fe:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <MX_SPI2_Init+0x78>)
 8001200:	2207      	movs	r2, #7
 8001202:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <MX_SPI2_Init+0x78>)
 8001206:	2200      	movs	r2, #0
 8001208:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800120a:	4b07      	ldr	r3, [pc, #28]	; (8001228 <MX_SPI2_Init+0x78>)
 800120c:	2208      	movs	r2, #8
 800120e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001210:	4b05      	ldr	r3, [pc, #20]	; (8001228 <MX_SPI2_Init+0x78>)
 8001212:	0018      	movs	r0, r3
 8001214:	f003 fa10 	bl	8004638 <HAL_SPI_Init>
 8001218:	1e03      	subs	r3, r0, #0
 800121a:	d001      	beq.n	8001220 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 800121c:	f000 fa36 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001220:	46c0      	nop			; (mov r8, r8)
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	46c0      	nop			; (mov r8, r8)
 8001228:	20000198 	.word	0x20000198
 800122c:	40003800 	.word	0x40003800

08001230 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b096      	sub	sp, #88	; 0x58
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001236:	2348      	movs	r3, #72	; 0x48
 8001238:	18fb      	adds	r3, r7, r3
 800123a:	0018      	movs	r0, r3
 800123c:	2310      	movs	r3, #16
 800123e:	001a      	movs	r2, r3
 8001240:	2100      	movs	r1, #0
 8001242:	f006 f8df 	bl	8007404 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001246:	2340      	movs	r3, #64	; 0x40
 8001248:	18fb      	adds	r3, r7, r3
 800124a:	0018      	movs	r0, r3
 800124c:	2308      	movs	r3, #8
 800124e:	001a      	movs	r2, r3
 8001250:	2100      	movs	r1, #0
 8001252:	f006 f8d7 	bl	8007404 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001256:	2324      	movs	r3, #36	; 0x24
 8001258:	18fb      	adds	r3, r7, r3
 800125a:	0018      	movs	r0, r3
 800125c:	231c      	movs	r3, #28
 800125e:	001a      	movs	r2, r3
 8001260:	2100      	movs	r1, #0
 8001262:	f006 f8cf 	bl	8007404 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	0018      	movs	r0, r3
 800126a:	2320      	movs	r3, #32
 800126c:	001a      	movs	r2, r3
 800126e:	2100      	movs	r1, #0
 8001270:	f006 f8c8 	bl	8007404 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001274:	4b46      	ldr	r3, [pc, #280]	; (8001390 <MX_TIM1_Init+0x160>)
 8001276:	4a47      	ldr	r2, [pc, #284]	; (8001394 <MX_TIM1_Init+0x164>)
 8001278:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100 - 1;
 800127a:	4b45      	ldr	r3, [pc, #276]	; (8001390 <MX_TIM1_Init+0x160>)
 800127c:	2263      	movs	r2, #99	; 0x63
 800127e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001280:	4b43      	ldr	r3, [pc, #268]	; (8001390 <MX_TIM1_Init+0x160>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 48000 - 1;
 8001286:	4b42      	ldr	r3, [pc, #264]	; (8001390 <MX_TIM1_Init+0x160>)
 8001288:	4a43      	ldr	r2, [pc, #268]	; (8001398 <MX_TIM1_Init+0x168>)
 800128a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800128c:	4b40      	ldr	r3, [pc, #256]	; (8001390 <MX_TIM1_Init+0x160>)
 800128e:	2200      	movs	r2, #0
 8001290:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001292:	4b3f      	ldr	r3, [pc, #252]	; (8001390 <MX_TIM1_Init+0x160>)
 8001294:	2200      	movs	r2, #0
 8001296:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001298:	4b3d      	ldr	r3, [pc, #244]	; (8001390 <MX_TIM1_Init+0x160>)
 800129a:	2280      	movs	r2, #128	; 0x80
 800129c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800129e:	4b3c      	ldr	r3, [pc, #240]	; (8001390 <MX_TIM1_Init+0x160>)
 80012a0:	0018      	movs	r0, r3
 80012a2:	f003 fd4f 	bl	8004d44 <HAL_TIM_Base_Init>
 80012a6:	1e03      	subs	r3, r0, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80012aa:	f000 f9ef 	bl	800168c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ae:	2148      	movs	r1, #72	; 0x48
 80012b0:	187b      	adds	r3, r7, r1
 80012b2:	2280      	movs	r2, #128	; 0x80
 80012b4:	0152      	lsls	r2, r2, #5
 80012b6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012b8:	187a      	adds	r2, r7, r1
 80012ba:	4b35      	ldr	r3, [pc, #212]	; (8001390 <MX_TIM1_Init+0x160>)
 80012bc:	0011      	movs	r1, r2
 80012be:	0018      	movs	r0, r3
 80012c0:	f004 f8c4 	bl	800544c <HAL_TIM_ConfigClockSource>
 80012c4:	1e03      	subs	r3, r0, #0
 80012c6:	d001      	beq.n	80012cc <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80012c8:	f000 f9e0 	bl	800168c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012cc:	4b30      	ldr	r3, [pc, #192]	; (8001390 <MX_TIM1_Init+0x160>)
 80012ce:	0018      	movs	r0, r3
 80012d0:	f003 fe88 	bl	8004fe4 <HAL_TIM_PWM_Init>
 80012d4:	1e03      	subs	r3, r0, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80012d8:	f000 f9d8 	bl	800168c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012dc:	2140      	movs	r1, #64	; 0x40
 80012de:	187b      	adds	r3, r7, r1
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e4:	187b      	adds	r3, r7, r1
 80012e6:	2200      	movs	r2, #0
 80012e8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012ea:	187a      	adds	r2, r7, r1
 80012ec:	4b28      	ldr	r3, [pc, #160]	; (8001390 <MX_TIM1_Init+0x160>)
 80012ee:	0011      	movs	r1, r2
 80012f0:	0018      	movs	r0, r3
 80012f2:	f004 fcd9 	bl	8005ca8 <HAL_TIMEx_MasterConfigSynchronization>
 80012f6:	1e03      	subs	r3, r0, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 80012fa:	f000 f9c7 	bl	800168c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012fe:	2124      	movs	r1, #36	; 0x24
 8001300:	187b      	adds	r3, r7, r1
 8001302:	2260      	movs	r2, #96	; 0x60
 8001304:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 480 -1;
 8001306:	187b      	adds	r3, r7, r1
 8001308:	22e0      	movs	r2, #224	; 0xe0
 800130a:	32ff      	adds	r2, #255	; 0xff
 800130c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800130e:	187b      	adds	r3, r7, r1
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001314:	187b      	adds	r3, r7, r1
 8001316:	2200      	movs	r2, #0
 8001318:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800131a:	187b      	adds	r3, r7, r1
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001320:	187b      	adds	r3, r7, r1
 8001322:	2200      	movs	r2, #0
 8001324:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001326:	187b      	adds	r3, r7, r1
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800132c:	1879      	adds	r1, r7, r1
 800132e:	4b18      	ldr	r3, [pc, #96]	; (8001390 <MX_TIM1_Init+0x160>)
 8001330:	2200      	movs	r2, #0
 8001332:	0018      	movs	r0, r3
 8001334:	f003 ffc4 	bl	80052c0 <HAL_TIM_PWM_ConfigChannel>
 8001338:	1e03      	subs	r3, r0, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800133c:	f000 f9a6 	bl	800168c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001340:	1d3b      	adds	r3, r7, #4
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	2200      	movs	r2, #0
 800134a:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001352:	1d3b      	adds	r3, r7, #4
 8001354:	2200      	movs	r2, #0
 8001356:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001358:	1d3b      	adds	r3, r7, #4
 800135a:	2200      	movs	r2, #0
 800135c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	2280      	movs	r2, #128	; 0x80
 8001362:	0192      	lsls	r2, r2, #6
 8001364:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001366:	1d3b      	adds	r3, r7, #4
 8001368:	2200      	movs	r2, #0
 800136a:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800136c:	1d3a      	adds	r2, r7, #4
 800136e:	4b08      	ldr	r3, [pc, #32]	; (8001390 <MX_TIM1_Init+0x160>)
 8001370:	0011      	movs	r1, r2
 8001372:	0018      	movs	r0, r3
 8001374:	f004 fcf6 	bl	8005d64 <HAL_TIMEx_ConfigBreakDeadTime>
 8001378:	1e03      	subs	r3, r0, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 800137c:	f000 f986 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001380:	4b03      	ldr	r3, [pc, #12]	; (8001390 <MX_TIM1_Init+0x160>)
 8001382:	0018      	movs	r0, r3
 8001384:	f000 fbc2 	bl	8001b0c <HAL_TIM_MspPostInit>

}
 8001388:	46c0      	nop			; (mov r8, r8)
 800138a:	46bd      	mov	sp, r7
 800138c:	b016      	add	sp, #88	; 0x58
 800138e:	bd80      	pop	{r7, pc}
 8001390:	200001fc 	.word	0x200001fc
 8001394:	40012c00 	.word	0x40012c00
 8001398:	0000bb7f 	.word	0x0000bb7f

0800139c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08e      	sub	sp, #56	; 0x38
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013a2:	2328      	movs	r3, #40	; 0x28
 80013a4:	18fb      	adds	r3, r7, r3
 80013a6:	0018      	movs	r0, r3
 80013a8:	2310      	movs	r3, #16
 80013aa:	001a      	movs	r2, r3
 80013ac:	2100      	movs	r1, #0
 80013ae:	f006 f829 	bl	8007404 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b2:	2320      	movs	r3, #32
 80013b4:	18fb      	adds	r3, r7, r3
 80013b6:	0018      	movs	r0, r3
 80013b8:	2308      	movs	r3, #8
 80013ba:	001a      	movs	r2, r3
 80013bc:	2100      	movs	r1, #0
 80013be:	f006 f821 	bl	8007404 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	0018      	movs	r0, r3
 80013c6:	231c      	movs	r3, #28
 80013c8:	001a      	movs	r2, r3
 80013ca:	2100      	movs	r1, #0
 80013cc:	f006 f81a 	bl	8007404 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013d0:	4b30      	ldr	r3, [pc, #192]	; (8001494 <MX_TIM2_Init+0xf8>)
 80013d2:	2280      	movs	r2, #128	; 0x80
 80013d4:	05d2      	lsls	r2, r2, #23
 80013d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000 - 1;
 80013d8:	4b2e      	ldr	r3, [pc, #184]	; (8001494 <MX_TIM2_Init+0xf8>)
 80013da:	4a2f      	ldr	r2, [pc, #188]	; (8001498 <MX_TIM2_Init+0xfc>)
 80013dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013de:	4b2d      	ldr	r3, [pc, #180]	; (8001494 <MX_TIM2_Init+0xf8>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 300 - 1;
 80013e4:	4b2b      	ldr	r3, [pc, #172]	; (8001494 <MX_TIM2_Init+0xf8>)
 80013e6:	222c      	movs	r2, #44	; 0x2c
 80013e8:	32ff      	adds	r2, #255	; 0xff
 80013ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ec:	4b29      	ldr	r3, [pc, #164]	; (8001494 <MX_TIM2_Init+0xf8>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013f2:	4b28      	ldr	r3, [pc, #160]	; (8001494 <MX_TIM2_Init+0xf8>)
 80013f4:	2280      	movs	r2, #128	; 0x80
 80013f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013f8:	4b26      	ldr	r3, [pc, #152]	; (8001494 <MX_TIM2_Init+0xf8>)
 80013fa:	0018      	movs	r0, r3
 80013fc:	f003 fca2 	bl	8004d44 <HAL_TIM_Base_Init>
 8001400:	1e03      	subs	r3, r0, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8001404:	f000 f942 	bl	800168c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001408:	2128      	movs	r1, #40	; 0x28
 800140a:	187b      	adds	r3, r7, r1
 800140c:	2280      	movs	r2, #128	; 0x80
 800140e:	0152      	lsls	r2, r2, #5
 8001410:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001412:	187a      	adds	r2, r7, r1
 8001414:	4b1f      	ldr	r3, [pc, #124]	; (8001494 <MX_TIM2_Init+0xf8>)
 8001416:	0011      	movs	r1, r2
 8001418:	0018      	movs	r0, r3
 800141a:	f004 f817 	bl	800544c <HAL_TIM_ConfigClockSource>
 800141e:	1e03      	subs	r3, r0, #0
 8001420:	d001      	beq.n	8001426 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001422:	f000 f933 	bl	800168c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001426:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <MX_TIM2_Init+0xf8>)
 8001428:	0018      	movs	r0, r3
 800142a:	f003 fddb 	bl	8004fe4 <HAL_TIM_PWM_Init>
 800142e:	1e03      	subs	r3, r0, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001432:	f000 f92b 	bl	800168c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001436:	2120      	movs	r1, #32
 8001438:	187b      	adds	r3, r7, r1
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800143e:	187b      	adds	r3, r7, r1
 8001440:	2200      	movs	r2, #0
 8001442:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001444:	187a      	adds	r2, r7, r1
 8001446:	4b13      	ldr	r3, [pc, #76]	; (8001494 <MX_TIM2_Init+0xf8>)
 8001448:	0011      	movs	r1, r2
 800144a:	0018      	movs	r0, r3
 800144c:	f004 fc2c 	bl	8005ca8 <HAL_TIMEx_MasterConfigSynchronization>
 8001450:	1e03      	subs	r3, r0, #0
 8001452:	d001      	beq.n	8001458 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8001454:	f000 f91a 	bl	800168c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001458:	1d3b      	adds	r3, r7, #4
 800145a:	2260      	movs	r2, #96	; 0x60
 800145c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 30 - 1;
 800145e:	1d3b      	adds	r3, r7, #4
 8001460:	221d      	movs	r2, #29
 8001462:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001464:	1d3b      	adds	r3, r7, #4
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	2200      	movs	r2, #0
 800146e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001470:	1d39      	adds	r1, r7, #4
 8001472:	4b08      	ldr	r3, [pc, #32]	; (8001494 <MX_TIM2_Init+0xf8>)
 8001474:	220c      	movs	r2, #12
 8001476:	0018      	movs	r0, r3
 8001478:	f003 ff22 	bl	80052c0 <HAL_TIM_PWM_ConfigChannel>
 800147c:	1e03      	subs	r3, r0, #0
 800147e:	d001      	beq.n	8001484 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001480:	f000 f904 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001484:	4b03      	ldr	r3, [pc, #12]	; (8001494 <MX_TIM2_Init+0xf8>)
 8001486:	0018      	movs	r0, r3
 8001488:	f000 fb40 	bl	8001b0c <HAL_TIM_MspPostInit>

}
 800148c:	46c0      	nop			; (mov r8, r8)
 800148e:	46bd      	mov	sp, r7
 8001490:	b00e      	add	sp, #56	; 0x38
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20000244 	.word	0x20000244
 8001498:	000003e7 	.word	0x000003e7

0800149c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */
  erpa_seq = 0;
 80014a0:	4b19      	ldr	r3, [pc, #100]	; (8001508 <MX_USART1_UART_Init+0x6c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	801a      	strh	r2, [r3, #0]
  pmt_seq = 0;
 80014a6:	4b19      	ldr	r3, [pc, #100]	; (800150c <MX_USART1_UART_Init+0x70>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	801a      	strh	r2, [r3, #0]
  hk_seq = 0;
 80014ac:	4b18      	ldr	r3, [pc, #96]	; (8001510 <MX_USART1_UART_Init+0x74>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	801a      	strh	r2, [r3, #0]
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014b2:	4b18      	ldr	r3, [pc, #96]	; (8001514 <MX_USART1_UART_Init+0x78>)
 80014b4:	4a18      	ldr	r2, [pc, #96]	; (8001518 <MX_USART1_UART_Init+0x7c>)
 80014b6:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80014b8:	4b16      	ldr	r3, [pc, #88]	; (8001514 <MX_USART1_UART_Init+0x78>)
 80014ba:	22e1      	movs	r2, #225	; 0xe1
 80014bc:	0212      	lsls	r2, r2, #8
 80014be:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014c0:	4b14      	ldr	r3, [pc, #80]	; (8001514 <MX_USART1_UART_Init+0x78>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014c6:	4b13      	ldr	r3, [pc, #76]	; (8001514 <MX_USART1_UART_Init+0x78>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014cc:	4b11      	ldr	r3, [pc, #68]	; (8001514 <MX_USART1_UART_Init+0x78>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014d2:	4b10      	ldr	r3, [pc, #64]	; (8001514 <MX_USART1_UART_Init+0x78>)
 80014d4:	220c      	movs	r2, #12
 80014d6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014d8:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <MX_USART1_UART_Init+0x78>)
 80014da:	2200      	movs	r2, #0
 80014dc:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014de:	4b0d      	ldr	r3, [pc, #52]	; (8001514 <MX_USART1_UART_Init+0x78>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014e4:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <MX_USART1_UART_Init+0x78>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ea:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <MX_USART1_UART_Init+0x78>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014f0:	4b08      	ldr	r3, [pc, #32]	; (8001514 <MX_USART1_UART_Init+0x78>)
 80014f2:	0018      	movs	r0, r3
 80014f4:	f004 fca4 	bl	8005e40 <HAL_UART_Init>
 80014f8:	1e03      	subs	r3, r0, #0
 80014fa:	d001      	beq.n	8001500 <MX_USART1_UART_Init+0x64>
  {
    Error_Handler();
 80014fc:	f000 f8c6 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001500:	46c0      	nop			; (mov r8, r8)
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	200003ba 	.word	0x200003ba
 800150c:	200003c2 	.word	0x200003c2
 8001510:	200003ea 	.word	0x200003ea
 8001514:	2000028c 	.word	0x2000028c
 8001518:	40013800 	.word	0x40013800

0800151c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001522:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <MX_DMA_Init+0x38>)
 8001524:	695a      	ldr	r2, [r3, #20]
 8001526:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <MX_DMA_Init+0x38>)
 8001528:	2101      	movs	r1, #1
 800152a:	430a      	orrs	r2, r1
 800152c:	615a      	str	r2, [r3, #20]
 800152e:	4b09      	ldr	r3, [pc, #36]	; (8001554 <MX_DMA_Init+0x38>)
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	2201      	movs	r2, #1
 8001534:	4013      	ands	r3, r2
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800153a:	2200      	movs	r2, #0
 800153c:	2100      	movs	r1, #0
 800153e:	2009      	movs	r0, #9
 8001540:	f001 f93a 	bl	80027b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001544:	2009      	movs	r0, #9
 8001546:	f001 f94c 	bl	80027e2 <HAL_NVIC_EnableIRQ>

}
 800154a:	46c0      	nop			; (mov r8, r8)
 800154c:	46bd      	mov	sp, r7
 800154e:	b002      	add	sp, #8
 8001550:	bd80      	pop	{r7, pc}
 8001552:	46c0      	nop			; (mov r8, r8)
 8001554:	40021000 	.word	0x40021000

08001558 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001558:	b590      	push	{r4, r7, lr}
 800155a:	b08b      	sub	sp, #44	; 0x2c
 800155c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155e:	2414      	movs	r4, #20
 8001560:	193b      	adds	r3, r7, r4
 8001562:	0018      	movs	r0, r3
 8001564:	2314      	movs	r3, #20
 8001566:	001a      	movs	r2, r3
 8001568:	2100      	movs	r1, #0
 800156a:	f005 ff4b 	bl	8007404 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800156e:	4b43      	ldr	r3, [pc, #268]	; (800167c <MX_GPIO_Init+0x124>)
 8001570:	695a      	ldr	r2, [r3, #20]
 8001572:	4b42      	ldr	r3, [pc, #264]	; (800167c <MX_GPIO_Init+0x124>)
 8001574:	2180      	movs	r1, #128	; 0x80
 8001576:	0309      	lsls	r1, r1, #12
 8001578:	430a      	orrs	r2, r1
 800157a:	615a      	str	r2, [r3, #20]
 800157c:	4b3f      	ldr	r3, [pc, #252]	; (800167c <MX_GPIO_Init+0x124>)
 800157e:	695a      	ldr	r2, [r3, #20]
 8001580:	2380      	movs	r3, #128	; 0x80
 8001582:	031b      	lsls	r3, r3, #12
 8001584:	4013      	ands	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800158a:	4b3c      	ldr	r3, [pc, #240]	; (800167c <MX_GPIO_Init+0x124>)
 800158c:	695a      	ldr	r2, [r3, #20]
 800158e:	4b3b      	ldr	r3, [pc, #236]	; (800167c <MX_GPIO_Init+0x124>)
 8001590:	2180      	movs	r1, #128	; 0x80
 8001592:	03c9      	lsls	r1, r1, #15
 8001594:	430a      	orrs	r2, r1
 8001596:	615a      	str	r2, [r3, #20]
 8001598:	4b38      	ldr	r3, [pc, #224]	; (800167c <MX_GPIO_Init+0x124>)
 800159a:	695a      	ldr	r2, [r3, #20]
 800159c:	2380      	movs	r3, #128	; 0x80
 800159e:	03db      	lsls	r3, r3, #15
 80015a0:	4013      	ands	r3, r2
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a6:	4b35      	ldr	r3, [pc, #212]	; (800167c <MX_GPIO_Init+0x124>)
 80015a8:	695a      	ldr	r2, [r3, #20]
 80015aa:	4b34      	ldr	r3, [pc, #208]	; (800167c <MX_GPIO_Init+0x124>)
 80015ac:	2180      	movs	r1, #128	; 0x80
 80015ae:	0289      	lsls	r1, r1, #10
 80015b0:	430a      	orrs	r2, r1
 80015b2:	615a      	str	r2, [r3, #20]
 80015b4:	4b31      	ldr	r3, [pc, #196]	; (800167c <MX_GPIO_Init+0x124>)
 80015b6:	695a      	ldr	r2, [r3, #20]
 80015b8:	2380      	movs	r3, #128	; 0x80
 80015ba:	029b      	lsls	r3, r3, #10
 80015bc:	4013      	ands	r3, r2
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c2:	4b2e      	ldr	r3, [pc, #184]	; (800167c <MX_GPIO_Init+0x124>)
 80015c4:	695a      	ldr	r2, [r3, #20]
 80015c6:	4b2d      	ldr	r3, [pc, #180]	; (800167c <MX_GPIO_Init+0x124>)
 80015c8:	2180      	movs	r1, #128	; 0x80
 80015ca:	02c9      	lsls	r1, r1, #11
 80015cc:	430a      	orrs	r2, r1
 80015ce:	615a      	str	r2, [r3, #20]
 80015d0:	4b2a      	ldr	r3, [pc, #168]	; (800167c <MX_GPIO_Init+0x124>)
 80015d2:	695a      	ldr	r2, [r3, #20]
 80015d4:	2380      	movs	r3, #128	; 0x80
 80015d6:	02db      	lsls	r3, r3, #11
 80015d8:	4013      	ands	r3, r2
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80015de:	239f      	movs	r3, #159	; 0x9f
 80015e0:	019b      	lsls	r3, r3, #6
 80015e2:	4827      	ldr	r0, [pc, #156]	; (8001680 <MX_GPIO_Init+0x128>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	0019      	movs	r1, r3
 80015e8:	f001 fd55 	bl	8003096 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80015ec:	4b25      	ldr	r3, [pc, #148]	; (8001684 <MX_GPIO_Init+0x12c>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	21c0      	movs	r1, #192	; 0xc0
 80015f2:	0018      	movs	r0, r3
 80015f4:	f001 fd4f 	bl	8003096 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80015f8:	4b23      	ldr	r3, [pc, #140]	; (8001688 <MX_GPIO_Init+0x130>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	2160      	movs	r1, #96	; 0x60
 80015fe:	0018      	movs	r0, r3
 8001600:	f001 fd49 	bl	8003096 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001604:	193b      	adds	r3, r7, r4
 8001606:	229f      	movs	r2, #159	; 0x9f
 8001608:	0192      	lsls	r2, r2, #6
 800160a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160c:	193b      	adds	r3, r7, r4
 800160e:	2201      	movs	r2, #1
 8001610:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	193b      	adds	r3, r7, r4
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001618:	193b      	adds	r3, r7, r4
 800161a:	2200      	movs	r2, #0
 800161c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800161e:	193b      	adds	r3, r7, r4
 8001620:	4a17      	ldr	r2, [pc, #92]	; (8001680 <MX_GPIO_Init+0x128>)
 8001622:	0019      	movs	r1, r3
 8001624:	0010      	movs	r0, r2
 8001626:	f001 fba9 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800162a:	193b      	adds	r3, r7, r4
 800162c:	22c0      	movs	r2, #192	; 0xc0
 800162e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001630:	193b      	adds	r3, r7, r4
 8001632:	2201      	movs	r2, #1
 8001634:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	193b      	adds	r3, r7, r4
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163c:	193b      	adds	r3, r7, r4
 800163e:	2200      	movs	r2, #0
 8001640:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001642:	193b      	adds	r3, r7, r4
 8001644:	4a0f      	ldr	r2, [pc, #60]	; (8001684 <MX_GPIO_Init+0x12c>)
 8001646:	0019      	movs	r1, r3
 8001648:	0010      	movs	r0, r2
 800164a:	f001 fb97 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800164e:	0021      	movs	r1, r4
 8001650:	187b      	adds	r3, r7, r1
 8001652:	2260      	movs	r2, #96	; 0x60
 8001654:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001656:	187b      	adds	r3, r7, r1
 8001658:	2201      	movs	r2, #1
 800165a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	187b      	adds	r3, r7, r1
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001662:	187b      	adds	r3, r7, r1
 8001664:	2200      	movs	r2, #0
 8001666:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001668:	187b      	adds	r3, r7, r1
 800166a:	4a07      	ldr	r2, [pc, #28]	; (8001688 <MX_GPIO_Init+0x130>)
 800166c:	0019      	movs	r1, r3
 800166e:	0010      	movs	r0, r2
 8001670:	f001 fb84 	bl	8002d7c <HAL_GPIO_Init>

}
 8001674:	46c0      	nop			; (mov r8, r8)
 8001676:	46bd      	mov	sp, r7
 8001678:	b00b      	add	sp, #44	; 0x2c
 800167a:	bd90      	pop	{r4, r7, pc}
 800167c:	40021000 	.word	0x40021000
 8001680:	48000800 	.word	0x48000800
 8001684:	48001400 	.word	0x48001400
 8001688:	48000400 	.word	0x48000400

0800168c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001690:	b672      	cpsid	i
}
 8001692:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001694:	e7fe      	b.n	8001694 <Error_Handler+0x8>
	...

08001698 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169e:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <HAL_MspInit+0x44>)
 80016a0:	699a      	ldr	r2, [r3, #24]
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <HAL_MspInit+0x44>)
 80016a4:	2101      	movs	r1, #1
 80016a6:	430a      	orrs	r2, r1
 80016a8:	619a      	str	r2, [r3, #24]
 80016aa:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <HAL_MspInit+0x44>)
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	2201      	movs	r2, #1
 80016b0:	4013      	ands	r3, r2
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016b6:	4b09      	ldr	r3, [pc, #36]	; (80016dc <HAL_MspInit+0x44>)
 80016b8:	69da      	ldr	r2, [r3, #28]
 80016ba:	4b08      	ldr	r3, [pc, #32]	; (80016dc <HAL_MspInit+0x44>)
 80016bc:	2180      	movs	r1, #128	; 0x80
 80016be:	0549      	lsls	r1, r1, #21
 80016c0:	430a      	orrs	r2, r1
 80016c2:	61da      	str	r2, [r3, #28]
 80016c4:	4b05      	ldr	r3, [pc, #20]	; (80016dc <HAL_MspInit+0x44>)
 80016c6:	69da      	ldr	r2, [r3, #28]
 80016c8:	2380      	movs	r3, #128	; 0x80
 80016ca:	055b      	lsls	r3, r3, #21
 80016cc:	4013      	ands	r3, r2
 80016ce:	603b      	str	r3, [r7, #0]
 80016d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016d2:	46c0      	nop			; (mov r8, r8)
 80016d4:	46bd      	mov	sp, r7
 80016d6:	b002      	add	sp, #8
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	46c0      	nop			; (mov r8, r8)
 80016dc:	40021000 	.word	0x40021000

080016e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016e0:	b590      	push	{r4, r7, lr}
 80016e2:	b08d      	sub	sp, #52	; 0x34
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	241c      	movs	r4, #28
 80016ea:	193b      	adds	r3, r7, r4
 80016ec:	0018      	movs	r0, r3
 80016ee:	2314      	movs	r3, #20
 80016f0:	001a      	movs	r2, r3
 80016f2:	2100      	movs	r1, #0
 80016f4:	f005 fe86 	bl	8007404 <memset>
  if(hadc->Instance==ADC1)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a4a      	ldr	r2, [pc, #296]	; (8001828 <HAL_ADC_MspInit+0x148>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d000      	beq.n	8001704 <HAL_ADC_MspInit+0x24>
 8001702:	e08d      	b.n	8001820 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001704:	4b49      	ldr	r3, [pc, #292]	; (800182c <HAL_ADC_MspInit+0x14c>)
 8001706:	699a      	ldr	r2, [r3, #24]
 8001708:	4b48      	ldr	r3, [pc, #288]	; (800182c <HAL_ADC_MspInit+0x14c>)
 800170a:	2180      	movs	r1, #128	; 0x80
 800170c:	0089      	lsls	r1, r1, #2
 800170e:	430a      	orrs	r2, r1
 8001710:	619a      	str	r2, [r3, #24]
 8001712:	4b46      	ldr	r3, [pc, #280]	; (800182c <HAL_ADC_MspInit+0x14c>)
 8001714:	699a      	ldr	r2, [r3, #24]
 8001716:	2380      	movs	r3, #128	; 0x80
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	4013      	ands	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
 800171e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001720:	4b42      	ldr	r3, [pc, #264]	; (800182c <HAL_ADC_MspInit+0x14c>)
 8001722:	695a      	ldr	r2, [r3, #20]
 8001724:	4b41      	ldr	r3, [pc, #260]	; (800182c <HAL_ADC_MspInit+0x14c>)
 8001726:	2180      	movs	r1, #128	; 0x80
 8001728:	0309      	lsls	r1, r1, #12
 800172a:	430a      	orrs	r2, r1
 800172c:	615a      	str	r2, [r3, #20]
 800172e:	4b3f      	ldr	r3, [pc, #252]	; (800182c <HAL_ADC_MspInit+0x14c>)
 8001730:	695a      	ldr	r2, [r3, #20]
 8001732:	2380      	movs	r3, #128	; 0x80
 8001734:	031b      	lsls	r3, r3, #12
 8001736:	4013      	ands	r3, r2
 8001738:	617b      	str	r3, [r7, #20]
 800173a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173c:	4b3b      	ldr	r3, [pc, #236]	; (800182c <HAL_ADC_MspInit+0x14c>)
 800173e:	695a      	ldr	r2, [r3, #20]
 8001740:	4b3a      	ldr	r3, [pc, #232]	; (800182c <HAL_ADC_MspInit+0x14c>)
 8001742:	2180      	movs	r1, #128	; 0x80
 8001744:	0289      	lsls	r1, r1, #10
 8001746:	430a      	orrs	r2, r1
 8001748:	615a      	str	r2, [r3, #20]
 800174a:	4b38      	ldr	r3, [pc, #224]	; (800182c <HAL_ADC_MspInit+0x14c>)
 800174c:	695a      	ldr	r2, [r3, #20]
 800174e:	2380      	movs	r3, #128	; 0x80
 8001750:	029b      	lsls	r3, r3, #10
 8001752:	4013      	ands	r3, r2
 8001754:	613b      	str	r3, [r7, #16]
 8001756:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001758:	4b34      	ldr	r3, [pc, #208]	; (800182c <HAL_ADC_MspInit+0x14c>)
 800175a:	695a      	ldr	r2, [r3, #20]
 800175c:	4b33      	ldr	r3, [pc, #204]	; (800182c <HAL_ADC_MspInit+0x14c>)
 800175e:	2180      	movs	r1, #128	; 0x80
 8001760:	02c9      	lsls	r1, r1, #11
 8001762:	430a      	orrs	r2, r1
 8001764:	615a      	str	r2, [r3, #20]
 8001766:	4b31      	ldr	r3, [pc, #196]	; (800182c <HAL_ADC_MspInit+0x14c>)
 8001768:	695a      	ldr	r2, [r3, #20]
 800176a:	2380      	movs	r3, #128	; 0x80
 800176c:	02db      	lsls	r3, r3, #11
 800176e:	4013      	ands	r3, r2
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001774:	193b      	adds	r3, r7, r4
 8001776:	223f      	movs	r2, #63	; 0x3f
 8001778:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800177a:	193b      	adds	r3, r7, r4
 800177c:	2203      	movs	r2, #3
 800177e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	193b      	adds	r3, r7, r4
 8001782:	2200      	movs	r2, #0
 8001784:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001786:	193b      	adds	r3, r7, r4
 8001788:	4a29      	ldr	r2, [pc, #164]	; (8001830 <HAL_ADC_MspInit+0x150>)
 800178a:	0019      	movs	r1, r3
 800178c:	0010      	movs	r0, r2
 800178e:	f001 faf5 	bl	8002d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001792:	193b      	adds	r3, r7, r4
 8001794:	22ef      	movs	r2, #239	; 0xef
 8001796:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001798:	193b      	adds	r3, r7, r4
 800179a:	2203      	movs	r2, #3
 800179c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	193b      	adds	r3, r7, r4
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a4:	193a      	adds	r2, r7, r4
 80017a6:	2390      	movs	r3, #144	; 0x90
 80017a8:	05db      	lsls	r3, r3, #23
 80017aa:	0011      	movs	r1, r2
 80017ac:	0018      	movs	r0, r3
 80017ae:	f001 fae5 	bl	8002d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017b2:	193b      	adds	r3, r7, r4
 80017b4:	2203      	movs	r2, #3
 80017b6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017b8:	193b      	adds	r3, r7, r4
 80017ba:	2203      	movs	r2, #3
 80017bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	193b      	adds	r3, r7, r4
 80017c0:	2200      	movs	r2, #0
 80017c2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c4:	193b      	adds	r3, r7, r4
 80017c6:	4a1b      	ldr	r2, [pc, #108]	; (8001834 <HAL_ADC_MspInit+0x154>)
 80017c8:	0019      	movs	r1, r3
 80017ca:	0010      	movs	r0, r2
 80017cc:	f001 fad6 	bl	8002d7c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80017d0:	4b19      	ldr	r3, [pc, #100]	; (8001838 <HAL_ADC_MspInit+0x158>)
 80017d2:	4a1a      	ldr	r2, [pc, #104]	; (800183c <HAL_ADC_MspInit+0x15c>)
 80017d4:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017d6:	4b18      	ldr	r3, [pc, #96]	; (8001838 <HAL_ADC_MspInit+0x158>)
 80017d8:	2200      	movs	r2, #0
 80017da:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80017dc:	4b16      	ldr	r3, [pc, #88]	; (8001838 <HAL_ADC_MspInit+0x158>)
 80017de:	2200      	movs	r2, #0
 80017e0:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80017e2:	4b15      	ldr	r3, [pc, #84]	; (8001838 <HAL_ADC_MspInit+0x158>)
 80017e4:	2280      	movs	r2, #128	; 0x80
 80017e6:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017e8:	4b13      	ldr	r3, [pc, #76]	; (8001838 <HAL_ADC_MspInit+0x158>)
 80017ea:	2280      	movs	r2, #128	; 0x80
 80017ec:	0052      	lsls	r2, r2, #1
 80017ee:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017f0:	4b11      	ldr	r3, [pc, #68]	; (8001838 <HAL_ADC_MspInit+0x158>)
 80017f2:	2280      	movs	r2, #128	; 0x80
 80017f4:	00d2      	lsls	r2, r2, #3
 80017f6:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 80017f8:	4b0f      	ldr	r3, [pc, #60]	; (8001838 <HAL_ADC_MspInit+0x158>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80017fe:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <HAL_ADC_MspInit+0x158>)
 8001800:	2200      	movs	r2, #0
 8001802:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001804:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <HAL_ADC_MspInit+0x158>)
 8001806:	0018      	movs	r0, r3
 8001808:	f001 f8a2 	bl	8002950 <HAL_DMA_Init>
 800180c:	1e03      	subs	r3, r0, #0
 800180e:	d001      	beq.n	8001814 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8001810:	f7ff ff3c 	bl	800168c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a08      	ldr	r2, [pc, #32]	; (8001838 <HAL_ADC_MspInit+0x158>)
 8001818:	631a      	str	r2, [r3, #48]	; 0x30
 800181a:	4b07      	ldr	r3, [pc, #28]	; (8001838 <HAL_ADC_MspInit+0x158>)
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001820:	46c0      	nop			; (mov r8, r8)
 8001822:	46bd      	mov	sp, r7
 8001824:	b00d      	add	sp, #52	; 0x34
 8001826:	bd90      	pop	{r4, r7, pc}
 8001828:	40012400 	.word	0x40012400
 800182c:	40021000 	.word	0x40021000
 8001830:	48000800 	.word	0x48000800
 8001834:	48000400 	.word	0x48000400
 8001838:	20000090 	.word	0x20000090
 800183c:	40020008 	.word	0x40020008

08001840 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001840:	b590      	push	{r4, r7, lr}
 8001842:	b08b      	sub	sp, #44	; 0x2c
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	2414      	movs	r4, #20
 800184a:	193b      	adds	r3, r7, r4
 800184c:	0018      	movs	r0, r3
 800184e:	2314      	movs	r3, #20
 8001850:	001a      	movs	r2, r3
 8001852:	2100      	movs	r1, #0
 8001854:	f005 fdd6 	bl	8007404 <memset>
  if(hdac->Instance==DAC)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a19      	ldr	r2, [pc, #100]	; (80018c4 <HAL_DAC_MspInit+0x84>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d12b      	bne.n	80018ba <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001862:	4b19      	ldr	r3, [pc, #100]	; (80018c8 <HAL_DAC_MspInit+0x88>)
 8001864:	69da      	ldr	r2, [r3, #28]
 8001866:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <HAL_DAC_MspInit+0x88>)
 8001868:	2180      	movs	r1, #128	; 0x80
 800186a:	0589      	lsls	r1, r1, #22
 800186c:	430a      	orrs	r2, r1
 800186e:	61da      	str	r2, [r3, #28]
 8001870:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <HAL_DAC_MspInit+0x88>)
 8001872:	69da      	ldr	r2, [r3, #28]
 8001874:	2380      	movs	r3, #128	; 0x80
 8001876:	059b      	lsls	r3, r3, #22
 8001878:	4013      	ands	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800187e:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <HAL_DAC_MspInit+0x88>)
 8001880:	695a      	ldr	r2, [r3, #20]
 8001882:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <HAL_DAC_MspInit+0x88>)
 8001884:	2180      	movs	r1, #128	; 0x80
 8001886:	0289      	lsls	r1, r1, #10
 8001888:	430a      	orrs	r2, r1
 800188a:	615a      	str	r2, [r3, #20]
 800188c:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <HAL_DAC_MspInit+0x88>)
 800188e:	695a      	ldr	r2, [r3, #20]
 8001890:	2380      	movs	r3, #128	; 0x80
 8001892:	029b      	lsls	r3, r3, #10
 8001894:	4013      	ands	r3, r2
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800189a:	193b      	adds	r3, r7, r4
 800189c:	2210      	movs	r2, #16
 800189e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018a0:	193b      	adds	r3, r7, r4
 80018a2:	2203      	movs	r2, #3
 80018a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	193b      	adds	r3, r7, r4
 80018a8:	2200      	movs	r2, #0
 80018aa:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ac:	193a      	adds	r2, r7, r4
 80018ae:	2390      	movs	r3, #144	; 0x90
 80018b0:	05db      	lsls	r3, r3, #23
 80018b2:	0011      	movs	r1, r2
 80018b4:	0018      	movs	r0, r3
 80018b6:	f001 fa61 	bl	8002d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80018ba:	46c0      	nop			; (mov r8, r8)
 80018bc:	46bd      	mov	sp, r7
 80018be:	b00b      	add	sp, #44	; 0x2c
 80018c0:	bd90      	pop	{r4, r7, pc}
 80018c2:	46c0      	nop			; (mov r8, r8)
 80018c4:	40007400 	.word	0x40007400
 80018c8:	40021000 	.word	0x40021000

080018cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018cc:	b590      	push	{r4, r7, lr}
 80018ce:	b08b      	sub	sp, #44	; 0x2c
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d4:	2414      	movs	r4, #20
 80018d6:	193b      	adds	r3, r7, r4
 80018d8:	0018      	movs	r0, r3
 80018da:	2314      	movs	r3, #20
 80018dc:	001a      	movs	r2, r3
 80018de:	2100      	movs	r1, #0
 80018e0:	f005 fd90 	bl	8007404 <memset>
  if(hi2c->Instance==I2C1)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a1c      	ldr	r2, [pc, #112]	; (800195c <HAL_I2C_MspInit+0x90>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d132      	bne.n	8001954 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ee:	4b1c      	ldr	r3, [pc, #112]	; (8001960 <HAL_I2C_MspInit+0x94>)
 80018f0:	695a      	ldr	r2, [r3, #20]
 80018f2:	4b1b      	ldr	r3, [pc, #108]	; (8001960 <HAL_I2C_MspInit+0x94>)
 80018f4:	2180      	movs	r1, #128	; 0x80
 80018f6:	02c9      	lsls	r1, r1, #11
 80018f8:	430a      	orrs	r2, r1
 80018fa:	615a      	str	r2, [r3, #20]
 80018fc:	4b18      	ldr	r3, [pc, #96]	; (8001960 <HAL_I2C_MspInit+0x94>)
 80018fe:	695a      	ldr	r2, [r3, #20]
 8001900:	2380      	movs	r3, #128	; 0x80
 8001902:	02db      	lsls	r3, r3, #11
 8001904:	4013      	ands	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
 8001908:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800190a:	193b      	adds	r3, r7, r4
 800190c:	22c0      	movs	r2, #192	; 0xc0
 800190e:	0092      	lsls	r2, r2, #2
 8001910:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001912:	0021      	movs	r1, r4
 8001914:	187b      	adds	r3, r7, r1
 8001916:	2212      	movs	r2, #18
 8001918:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	187b      	adds	r3, r7, r1
 800191c:	2200      	movs	r2, #0
 800191e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001920:	187b      	adds	r3, r7, r1
 8001922:	2203      	movs	r2, #3
 8001924:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001926:	187b      	adds	r3, r7, r1
 8001928:	2201      	movs	r2, #1
 800192a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800192c:	187b      	adds	r3, r7, r1
 800192e:	4a0d      	ldr	r2, [pc, #52]	; (8001964 <HAL_I2C_MspInit+0x98>)
 8001930:	0019      	movs	r1, r3
 8001932:	0010      	movs	r0, r2
 8001934:	f001 fa22 	bl	8002d7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001938:	4b09      	ldr	r3, [pc, #36]	; (8001960 <HAL_I2C_MspInit+0x94>)
 800193a:	69da      	ldr	r2, [r3, #28]
 800193c:	4b08      	ldr	r3, [pc, #32]	; (8001960 <HAL_I2C_MspInit+0x94>)
 800193e:	2180      	movs	r1, #128	; 0x80
 8001940:	0389      	lsls	r1, r1, #14
 8001942:	430a      	orrs	r2, r1
 8001944:	61da      	str	r2, [r3, #28]
 8001946:	4b06      	ldr	r3, [pc, #24]	; (8001960 <HAL_I2C_MspInit+0x94>)
 8001948:	69da      	ldr	r2, [r3, #28]
 800194a:	2380      	movs	r3, #128	; 0x80
 800194c:	039b      	lsls	r3, r3, #14
 800194e:	4013      	ands	r3, r2
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001954:	46c0      	nop			; (mov r8, r8)
 8001956:	46bd      	mov	sp, r7
 8001958:	b00b      	add	sp, #44	; 0x2c
 800195a:	bd90      	pop	{r4, r7, pc}
 800195c:	40005400 	.word	0x40005400
 8001960:	40021000 	.word	0x40021000
 8001964:	48000400 	.word	0x48000400

08001968 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001968:	b590      	push	{r4, r7, lr}
 800196a:	b08d      	sub	sp, #52	; 0x34
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001970:	241c      	movs	r4, #28
 8001972:	193b      	adds	r3, r7, r4
 8001974:	0018      	movs	r0, r3
 8001976:	2314      	movs	r3, #20
 8001978:	001a      	movs	r2, r3
 800197a:	2100      	movs	r1, #0
 800197c:	f005 fd42 	bl	8007404 <memset>
  if(hspi->Instance==SPI1)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a38      	ldr	r2, [pc, #224]	; (8001a68 <HAL_SPI_MspInit+0x100>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d132      	bne.n	80019f0 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800198a:	4b38      	ldr	r3, [pc, #224]	; (8001a6c <HAL_SPI_MspInit+0x104>)
 800198c:	699a      	ldr	r2, [r3, #24]
 800198e:	4b37      	ldr	r3, [pc, #220]	; (8001a6c <HAL_SPI_MspInit+0x104>)
 8001990:	2180      	movs	r1, #128	; 0x80
 8001992:	0149      	lsls	r1, r1, #5
 8001994:	430a      	orrs	r2, r1
 8001996:	619a      	str	r2, [r3, #24]
 8001998:	4b34      	ldr	r3, [pc, #208]	; (8001a6c <HAL_SPI_MspInit+0x104>)
 800199a:	699a      	ldr	r2, [r3, #24]
 800199c:	2380      	movs	r3, #128	; 0x80
 800199e:	015b      	lsls	r3, r3, #5
 80019a0:	4013      	ands	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
 80019a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a6:	4b31      	ldr	r3, [pc, #196]	; (8001a6c <HAL_SPI_MspInit+0x104>)
 80019a8:	695a      	ldr	r2, [r3, #20]
 80019aa:	4b30      	ldr	r3, [pc, #192]	; (8001a6c <HAL_SPI_MspInit+0x104>)
 80019ac:	2180      	movs	r1, #128	; 0x80
 80019ae:	02c9      	lsls	r1, r1, #11
 80019b0:	430a      	orrs	r2, r1
 80019b2:	615a      	str	r2, [r3, #20]
 80019b4:	4b2d      	ldr	r3, [pc, #180]	; (8001a6c <HAL_SPI_MspInit+0x104>)
 80019b6:	695a      	ldr	r2, [r3, #20]
 80019b8:	2380      	movs	r3, #128	; 0x80
 80019ba:	02db      	lsls	r3, r3, #11
 80019bc:	4013      	ands	r3, r2
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80019c2:	0021      	movs	r1, r4
 80019c4:	187b      	adds	r3, r7, r1
 80019c6:	2218      	movs	r2, #24
 80019c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ca:	187b      	adds	r3, r7, r1
 80019cc:	2202      	movs	r2, #2
 80019ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	187b      	adds	r3, r7, r1
 80019d2:	2200      	movs	r2, #0
 80019d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019d6:	187b      	adds	r3, r7, r1
 80019d8:	2203      	movs	r2, #3
 80019da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80019dc:	187b      	adds	r3, r7, r1
 80019de:	2200      	movs	r2, #0
 80019e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e2:	187b      	adds	r3, r7, r1
 80019e4:	4a22      	ldr	r2, [pc, #136]	; (8001a70 <HAL_SPI_MspInit+0x108>)
 80019e6:	0019      	movs	r1, r3
 80019e8:	0010      	movs	r0, r2
 80019ea:	f001 f9c7 	bl	8002d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80019ee:	e037      	b.n	8001a60 <HAL_SPI_MspInit+0xf8>
  else if(hspi->Instance==SPI2)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a1f      	ldr	r2, [pc, #124]	; (8001a74 <HAL_SPI_MspInit+0x10c>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d132      	bne.n	8001a60 <HAL_SPI_MspInit+0xf8>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80019fa:	4b1c      	ldr	r3, [pc, #112]	; (8001a6c <HAL_SPI_MspInit+0x104>)
 80019fc:	69da      	ldr	r2, [r3, #28]
 80019fe:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <HAL_SPI_MspInit+0x104>)
 8001a00:	2180      	movs	r1, #128	; 0x80
 8001a02:	01c9      	lsls	r1, r1, #7
 8001a04:	430a      	orrs	r2, r1
 8001a06:	61da      	str	r2, [r3, #28]
 8001a08:	4b18      	ldr	r3, [pc, #96]	; (8001a6c <HAL_SPI_MspInit+0x104>)
 8001a0a:	69da      	ldr	r2, [r3, #28]
 8001a0c:	2380      	movs	r3, #128	; 0x80
 8001a0e:	01db      	lsls	r3, r3, #7
 8001a10:	4013      	ands	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
 8001a14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a16:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <HAL_SPI_MspInit+0x104>)
 8001a18:	695a      	ldr	r2, [r3, #20]
 8001a1a:	4b14      	ldr	r3, [pc, #80]	; (8001a6c <HAL_SPI_MspInit+0x104>)
 8001a1c:	2180      	movs	r1, #128	; 0x80
 8001a1e:	02c9      	lsls	r1, r1, #11
 8001a20:	430a      	orrs	r2, r1
 8001a22:	615a      	str	r2, [r3, #20]
 8001a24:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <HAL_SPI_MspInit+0x104>)
 8001a26:	695a      	ldr	r2, [r3, #20]
 8001a28:	2380      	movs	r3, #128	; 0x80
 8001a2a:	02db      	lsls	r3, r3, #11
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001a32:	211c      	movs	r1, #28
 8001a34:	187b      	adds	r3, r7, r1
 8001a36:	22c0      	movs	r2, #192	; 0xc0
 8001a38:	01d2      	lsls	r2, r2, #7
 8001a3a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3c:	187b      	adds	r3, r7, r1
 8001a3e:	2202      	movs	r2, #2
 8001a40:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	187b      	adds	r3, r7, r1
 8001a44:	2200      	movs	r2, #0
 8001a46:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a48:	187b      	adds	r3, r7, r1
 8001a4a:	2203      	movs	r2, #3
 8001a4c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8001a4e:	187b      	adds	r3, r7, r1
 8001a50:	2200      	movs	r2, #0
 8001a52:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a54:	187b      	adds	r3, r7, r1
 8001a56:	4a06      	ldr	r2, [pc, #24]	; (8001a70 <HAL_SPI_MspInit+0x108>)
 8001a58:	0019      	movs	r1, r3
 8001a5a:	0010      	movs	r0, r2
 8001a5c:	f001 f98e 	bl	8002d7c <HAL_GPIO_Init>
}
 8001a60:	46c0      	nop			; (mov r8, r8)
 8001a62:	46bd      	mov	sp, r7
 8001a64:	b00d      	add	sp, #52	; 0x34
 8001a66:	bd90      	pop	{r4, r7, pc}
 8001a68:	40013000 	.word	0x40013000
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	48000400 	.word	0x48000400
 8001a74:	40003800 	.word	0x40003800

08001a78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a1f      	ldr	r2, [pc, #124]	; (8001b04 <HAL_TIM_Base_MspInit+0x8c>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d11e      	bne.n	8001ac8 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a8a:	4b1f      	ldr	r3, [pc, #124]	; (8001b08 <HAL_TIM_Base_MspInit+0x90>)
 8001a8c:	699a      	ldr	r2, [r3, #24]
 8001a8e:	4b1e      	ldr	r3, [pc, #120]	; (8001b08 <HAL_TIM_Base_MspInit+0x90>)
 8001a90:	2180      	movs	r1, #128	; 0x80
 8001a92:	0109      	lsls	r1, r1, #4
 8001a94:	430a      	orrs	r2, r1
 8001a96:	619a      	str	r2, [r3, #24]
 8001a98:	4b1b      	ldr	r3, [pc, #108]	; (8001b08 <HAL_TIM_Base_MspInit+0x90>)
 8001a9a:	699a      	ldr	r2, [r3, #24]
 8001a9c:	2380      	movs	r3, #128	; 0x80
 8001a9e:	011b      	lsls	r3, r3, #4
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 1, 0);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	200d      	movs	r0, #13
 8001aac:	f000 fe84 	bl	80027b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001ab0:	200d      	movs	r0, #13
 8001ab2:	f000 fe96 	bl	80027e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2101      	movs	r1, #1
 8001aba:	200e      	movs	r0, #14
 8001abc:	f000 fe7c 	bl	80027b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001ac0:	200e      	movs	r0, #14
 8001ac2:	f000 fe8e 	bl	80027e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ac6:	e019      	b.n	8001afc <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM2)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	2380      	movs	r3, #128	; 0x80
 8001ace:	05db      	lsls	r3, r3, #23
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d113      	bne.n	8001afc <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <HAL_TIM_Base_MspInit+0x90>)
 8001ad6:	69da      	ldr	r2, [r3, #28]
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <HAL_TIM_Base_MspInit+0x90>)
 8001ada:	2101      	movs	r1, #1
 8001adc:	430a      	orrs	r2, r1
 8001ade:	61da      	str	r2, [r3, #28]
 8001ae0:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <HAL_TIM_Base_MspInit+0x90>)
 8001ae2:	69db      	ldr	r3, [r3, #28]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001aec:	2200      	movs	r2, #0
 8001aee:	2101      	movs	r1, #1
 8001af0:	200f      	movs	r0, #15
 8001af2:	f000 fe61 	bl	80027b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001af6:	200f      	movs	r0, #15
 8001af8:	f000 fe73 	bl	80027e2 <HAL_NVIC_EnableIRQ>
}
 8001afc:	46c0      	nop			; (mov r8, r8)
 8001afe:	46bd      	mov	sp, r7
 8001b00:	b004      	add	sp, #16
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40012c00 	.word	0x40012c00
 8001b08:	40021000 	.word	0x40021000

08001b0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b0c:	b590      	push	{r4, r7, lr}
 8001b0e:	b08b      	sub	sp, #44	; 0x2c
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b14:	2414      	movs	r4, #20
 8001b16:	193b      	adds	r3, r7, r4
 8001b18:	0018      	movs	r0, r3
 8001b1a:	2314      	movs	r3, #20
 8001b1c:	001a      	movs	r2, r3
 8001b1e:	2100      	movs	r1, #0
 8001b20:	f005 fc70 	bl	8007404 <memset>
  if(htim->Instance==TIM1)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a2c      	ldr	r2, [pc, #176]	; (8001bdc <HAL_TIM_MspPostInit+0xd0>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d126      	bne.n	8001b7c <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2e:	4b2c      	ldr	r3, [pc, #176]	; (8001be0 <HAL_TIM_MspPostInit+0xd4>)
 8001b30:	695a      	ldr	r2, [r3, #20]
 8001b32:	4b2b      	ldr	r3, [pc, #172]	; (8001be0 <HAL_TIM_MspPostInit+0xd4>)
 8001b34:	2180      	movs	r1, #128	; 0x80
 8001b36:	0289      	lsls	r1, r1, #10
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	615a      	str	r2, [r3, #20]
 8001b3c:	4b28      	ldr	r3, [pc, #160]	; (8001be0 <HAL_TIM_MspPostInit+0xd4>)
 8001b3e:	695a      	ldr	r2, [r3, #20]
 8001b40:	2380      	movs	r3, #128	; 0x80
 8001b42:	029b      	lsls	r3, r3, #10
 8001b44:	4013      	ands	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]
 8001b48:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b4a:	193b      	adds	r3, r7, r4
 8001b4c:	2280      	movs	r2, #128	; 0x80
 8001b4e:	0052      	lsls	r2, r2, #1
 8001b50:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b52:	0021      	movs	r1, r4
 8001b54:	187b      	adds	r3, r7, r1
 8001b56:	2202      	movs	r2, #2
 8001b58:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	187b      	adds	r3, r7, r1
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b60:	187b      	adds	r3, r7, r1
 8001b62:	2200      	movs	r2, #0
 8001b64:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001b66:	187b      	adds	r3, r7, r1
 8001b68:	2202      	movs	r2, #2
 8001b6a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6c:	187a      	adds	r2, r7, r1
 8001b6e:	2390      	movs	r3, #144	; 0x90
 8001b70:	05db      	lsls	r3, r3, #23
 8001b72:	0011      	movs	r1, r2
 8001b74:	0018      	movs	r0, r3
 8001b76:	f001 f901 	bl	8002d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b7a:	e02a      	b.n	8001bd2 <HAL_TIM_MspPostInit+0xc6>
  else if(htim->Instance==TIM2)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	2380      	movs	r3, #128	; 0x80
 8001b82:	05db      	lsls	r3, r3, #23
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d124      	bne.n	8001bd2 <HAL_TIM_MspPostInit+0xc6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b88:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <HAL_TIM_MspPostInit+0xd4>)
 8001b8a:	695a      	ldr	r2, [r3, #20]
 8001b8c:	4b14      	ldr	r3, [pc, #80]	; (8001be0 <HAL_TIM_MspPostInit+0xd4>)
 8001b8e:	2180      	movs	r1, #128	; 0x80
 8001b90:	02c9      	lsls	r1, r1, #11
 8001b92:	430a      	orrs	r2, r1
 8001b94:	615a      	str	r2, [r3, #20]
 8001b96:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <HAL_TIM_MspPostInit+0xd4>)
 8001b98:	695a      	ldr	r2, [r3, #20]
 8001b9a:	2380      	movs	r3, #128	; 0x80
 8001b9c:	02db      	lsls	r3, r3, #11
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001ba4:	2114      	movs	r1, #20
 8001ba6:	187b      	adds	r3, r7, r1
 8001ba8:	2280      	movs	r2, #128	; 0x80
 8001baa:	0112      	lsls	r2, r2, #4
 8001bac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bae:	187b      	adds	r3, r7, r1
 8001bb0:	2202      	movs	r2, #2
 8001bb2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	187b      	adds	r3, r7, r1
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bba:	187b      	adds	r3, r7, r1
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001bc0:	187b      	adds	r3, r7, r1
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc6:	187b      	adds	r3, r7, r1
 8001bc8:	4a06      	ldr	r2, [pc, #24]	; (8001be4 <HAL_TIM_MspPostInit+0xd8>)
 8001bca:	0019      	movs	r1, r3
 8001bcc:	0010      	movs	r0, r2
 8001bce:	f001 f8d5 	bl	8002d7c <HAL_GPIO_Init>
}
 8001bd2:	46c0      	nop			; (mov r8, r8)
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	b00b      	add	sp, #44	; 0x2c
 8001bd8:	bd90      	pop	{r4, r7, pc}
 8001bda:	46c0      	nop			; (mov r8, r8)
 8001bdc:	40012c00 	.word	0x40012c00
 8001be0:	40021000 	.word	0x40021000
 8001be4:	48000400 	.word	0x48000400

08001be8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001be8:	b590      	push	{r4, r7, lr}
 8001bea:	b08b      	sub	sp, #44	; 0x2c
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf0:	2414      	movs	r4, #20
 8001bf2:	193b      	adds	r3, r7, r4
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	2314      	movs	r3, #20
 8001bf8:	001a      	movs	r2, r3
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	f005 fc02 	bl	8007404 <memset>
  if(huart->Instance==USART1)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a21      	ldr	r2, [pc, #132]	; (8001c8c <HAL_UART_MspInit+0xa4>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d13b      	bne.n	8001c82 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c0a:	4b21      	ldr	r3, [pc, #132]	; (8001c90 <HAL_UART_MspInit+0xa8>)
 8001c0c:	699a      	ldr	r2, [r3, #24]
 8001c0e:	4b20      	ldr	r3, [pc, #128]	; (8001c90 <HAL_UART_MspInit+0xa8>)
 8001c10:	2180      	movs	r1, #128	; 0x80
 8001c12:	01c9      	lsls	r1, r1, #7
 8001c14:	430a      	orrs	r2, r1
 8001c16:	619a      	str	r2, [r3, #24]
 8001c18:	4b1d      	ldr	r3, [pc, #116]	; (8001c90 <HAL_UART_MspInit+0xa8>)
 8001c1a:	699a      	ldr	r2, [r3, #24]
 8001c1c:	2380      	movs	r3, #128	; 0x80
 8001c1e:	01db      	lsls	r3, r3, #7
 8001c20:	4013      	ands	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c26:	4b1a      	ldr	r3, [pc, #104]	; (8001c90 <HAL_UART_MspInit+0xa8>)
 8001c28:	695a      	ldr	r2, [r3, #20]
 8001c2a:	4b19      	ldr	r3, [pc, #100]	; (8001c90 <HAL_UART_MspInit+0xa8>)
 8001c2c:	2180      	movs	r1, #128	; 0x80
 8001c2e:	0289      	lsls	r1, r1, #10
 8001c30:	430a      	orrs	r2, r1
 8001c32:	615a      	str	r2, [r3, #20]
 8001c34:	4b16      	ldr	r3, [pc, #88]	; (8001c90 <HAL_UART_MspInit+0xa8>)
 8001c36:	695a      	ldr	r2, [r3, #20]
 8001c38:	2380      	movs	r3, #128	; 0x80
 8001c3a:	029b      	lsls	r3, r3, #10
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c42:	193b      	adds	r3, r7, r4
 8001c44:	22c0      	movs	r2, #192	; 0xc0
 8001c46:	00d2      	lsls	r2, r2, #3
 8001c48:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4a:	0021      	movs	r1, r4
 8001c4c:	187b      	adds	r3, r7, r1
 8001c4e:	2202      	movs	r2, #2
 8001c50:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c52:	187b      	adds	r3, r7, r1
 8001c54:	2200      	movs	r2, #0
 8001c56:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c58:	187b      	adds	r3, r7, r1
 8001c5a:	2203      	movs	r2, #3
 8001c5c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001c5e:	187b      	adds	r3, r7, r1
 8001c60:	2201      	movs	r2, #1
 8001c62:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c64:	187a      	adds	r2, r7, r1
 8001c66:	2390      	movs	r3, #144	; 0x90
 8001c68:	05db      	lsls	r3, r3, #23
 8001c6a:	0011      	movs	r1, r2
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	f001 f885 	bl	8002d7c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c72:	2200      	movs	r2, #0
 8001c74:	2100      	movs	r1, #0
 8001c76:	201b      	movs	r0, #27
 8001c78:	f000 fd9e 	bl	80027b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c7c:	201b      	movs	r0, #27
 8001c7e:	f000 fdb0 	bl	80027e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c82:	46c0      	nop			; (mov r8, r8)
 8001c84:	46bd      	mov	sp, r7
 8001c86:	b00b      	add	sp, #44	; 0x2c
 8001c88:	bd90      	pop	{r4, r7, pc}
 8001c8a:	46c0      	nop			; (mov r8, r8)
 8001c8c:	40013800 	.word	0x40013800
 8001c90:	40021000 	.word	0x40021000

08001c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c98:	e7fe      	b.n	8001c98 <NMI_Handler+0x4>

08001c9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c9e:	e7fe      	b.n	8001c9e <HardFault_Handler+0x4>

08001ca0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001ca4:	46c0      	nop			; (mov r8, r8)
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cae:	46c0      	nop			; (mov r8, r8)
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cb8:	f000 f8b8 	bl	8001e2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cbc:	46c0      	nop			; (mov r8, r8)
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
	...

08001cc4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001cc8:	4b03      	ldr	r3, [pc, #12]	; (8001cd8 <DMA1_Channel1_IRQHandler+0x14>)
 8001cca:	0018      	movs	r0, r3
 8001ccc:	f000 ff6b 	bl	8002ba6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001cd0:	46c0      	nop			; (mov r8, r8)
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	46c0      	nop			; (mov r8, r8)
 8001cd8:	20000090 	.word	0x20000090

08001cdc <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ce0:	4b03      	ldr	r3, [pc, #12]	; (8001cf0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	f003 f9d6 	bl	8005094 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001ce8:	46c0      	nop			; (mov r8, r8)
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	46c0      	nop			; (mov r8, r8)
 8001cf0:	200001fc 	.word	0x200001fc

08001cf4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001cf8:	4b03      	ldr	r3, [pc, #12]	; (8001d08 <TIM1_CC_IRQHandler+0x14>)
 8001cfa:	0018      	movs	r0, r3
 8001cfc:	f003 f9ca 	bl	8005094 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001d00:	46c0      	nop			; (mov r8, r8)
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	46c0      	nop			; (mov r8, r8)
 8001d08:	200001fc 	.word	0x200001fc

08001d0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d10:	4b03      	ldr	r3, [pc, #12]	; (8001d20 <TIM2_IRQHandler+0x14>)
 8001d12:	0018      	movs	r0, r3
 8001d14:	f003 f9be 	bl	8005094 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d18:	46c0      	nop			; (mov r8, r8)
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	46c0      	nop			; (mov r8, r8)
 8001d20:	20000244 	.word	0x20000244

08001d24 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d28:	4b03      	ldr	r3, [pc, #12]	; (8001d38 <USART1_IRQHandler+0x14>)
 8001d2a:	0018      	movs	r0, r3
 8001d2c:	f004 f9e6 	bl	80060fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d30:	46c0      	nop			; (mov r8, r8)
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	46c0      	nop			; (mov r8, r8)
 8001d38:	2000028c 	.word	0x2000028c

08001d3c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001d40:	46c0      	nop			; (mov r8, r8)
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
	...

08001d48 <Reset_Handler>:
 8001d48:	480d      	ldr	r0, [pc, #52]	; (8001d80 <LoopForever+0x2>)
 8001d4a:	4685      	mov	sp, r0
 8001d4c:	480d      	ldr	r0, [pc, #52]	; (8001d84 <LoopForever+0x6>)
 8001d4e:	490e      	ldr	r1, [pc, #56]	; (8001d88 <LoopForever+0xa>)
 8001d50:	4a0e      	ldr	r2, [pc, #56]	; (8001d8c <LoopForever+0xe>)
 8001d52:	2300      	movs	r3, #0
 8001d54:	e002      	b.n	8001d5c <LoopCopyDataInit>

08001d56 <CopyDataInit>:
 8001d56:	58d4      	ldr	r4, [r2, r3]
 8001d58:	50c4      	str	r4, [r0, r3]
 8001d5a:	3304      	adds	r3, #4

08001d5c <LoopCopyDataInit>:
 8001d5c:	18c4      	adds	r4, r0, r3
 8001d5e:	428c      	cmp	r4, r1
 8001d60:	d3f9      	bcc.n	8001d56 <CopyDataInit>
 8001d62:	4a0b      	ldr	r2, [pc, #44]	; (8001d90 <LoopForever+0x12>)
 8001d64:	4c0b      	ldr	r4, [pc, #44]	; (8001d94 <LoopForever+0x16>)
 8001d66:	2300      	movs	r3, #0
 8001d68:	e001      	b.n	8001d6e <LoopFillZerobss>

08001d6a <FillZerobss>:
 8001d6a:	6013      	str	r3, [r2, #0]
 8001d6c:	3204      	adds	r2, #4

08001d6e <LoopFillZerobss>:
 8001d6e:	42a2      	cmp	r2, r4
 8001d70:	d3fb      	bcc.n	8001d6a <FillZerobss>
 8001d72:	f7ff ffe3 	bl	8001d3c <SystemInit>
 8001d76:	f005 fb21 	bl	80073bc <__libc_init_array>
 8001d7a:	f7fe ff5d 	bl	8000c38 <main>

08001d7e <LoopForever>:
 8001d7e:	e7fe      	b.n	8001d7e <LoopForever>
 8001d80:	20002000 	.word	0x20002000
 8001d84:	20000000 	.word	0x20000000
 8001d88:	20000034 	.word	0x20000034
 8001d8c:	080074fc 	.word	0x080074fc
 8001d90:	20000034 	.word	0x20000034
 8001d94:	200003f4 	.word	0x200003f4

08001d98 <ADC1_COMP_IRQHandler>:
 8001d98:	e7fe      	b.n	8001d98 <ADC1_COMP_IRQHandler>
	...

08001d9c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001da0:	4b07      	ldr	r3, [pc, #28]	; (8001dc0 <HAL_Init+0x24>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <HAL_Init+0x24>)
 8001da6:	2110      	movs	r1, #16
 8001da8:	430a      	orrs	r2, r1
 8001daa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001dac:	2003      	movs	r0, #3
 8001dae:	f000 f809 	bl	8001dc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001db2:	f7ff fc71 	bl	8001698 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	0018      	movs	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	46c0      	nop			; (mov r8, r8)
 8001dc0:	40022000 	.word	0x40022000

08001dc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dc4:	b590      	push	{r4, r7, lr}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dcc:	4b14      	ldr	r3, [pc, #80]	; (8001e20 <HAL_InitTick+0x5c>)
 8001dce:	681c      	ldr	r4, [r3, #0]
 8001dd0:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <HAL_InitTick+0x60>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	0019      	movs	r1, r3
 8001dd6:	23fa      	movs	r3, #250	; 0xfa
 8001dd8:	0098      	lsls	r0, r3, #2
 8001dda:	f7fe f995 	bl	8000108 <__udivsi3>
 8001dde:	0003      	movs	r3, r0
 8001de0:	0019      	movs	r1, r3
 8001de2:	0020      	movs	r0, r4
 8001de4:	f7fe f990 	bl	8000108 <__udivsi3>
 8001de8:	0003      	movs	r3, r0
 8001dea:	0018      	movs	r0, r3
 8001dec:	f000 fd09 	bl	8002802 <HAL_SYSTICK_Config>
 8001df0:	1e03      	subs	r3, r0, #0
 8001df2:	d001      	beq.n	8001df8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e00f      	b.n	8001e18 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b03      	cmp	r3, #3
 8001dfc:	d80b      	bhi.n	8001e16 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	2301      	movs	r3, #1
 8001e02:	425b      	negs	r3, r3
 8001e04:	2200      	movs	r2, #0
 8001e06:	0018      	movs	r0, r3
 8001e08:	f000 fcd6 	bl	80027b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e0c:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <HAL_InitTick+0x64>)
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
 8001e14:	e000      	b.n	8001e18 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
}
 8001e18:	0018      	movs	r0, r3
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	b003      	add	sp, #12
 8001e1e:	bd90      	pop	{r4, r7, pc}
 8001e20:	20000028 	.word	0x20000028
 8001e24:	20000030 	.word	0x20000030
 8001e28:	2000002c 	.word	0x2000002c

08001e2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e30:	4b05      	ldr	r3, [pc, #20]	; (8001e48 <HAL_IncTick+0x1c>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	001a      	movs	r2, r3
 8001e36:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <HAL_IncTick+0x20>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	18d2      	adds	r2, r2, r3
 8001e3c:	4b03      	ldr	r3, [pc, #12]	; (8001e4c <HAL_IncTick+0x20>)
 8001e3e:	601a      	str	r2, [r3, #0]
}
 8001e40:	46c0      	nop			; (mov r8, r8)
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	46c0      	nop			; (mov r8, r8)
 8001e48:	20000030 	.word	0x20000030
 8001e4c:	200003f0 	.word	0x200003f0

08001e50 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  return uwTick;
 8001e54:	4b02      	ldr	r3, [pc, #8]	; (8001e60 <HAL_GetTick+0x10>)
 8001e56:	681b      	ldr	r3, [r3, #0]
}
 8001e58:	0018      	movs	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	46c0      	nop			; (mov r8, r8)
 8001e60:	200003f0 	.word	0x200003f0

08001e64 <HAL_SuspendTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)

{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8001e68:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <HAL_SuspendTick+0x18>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	4b03      	ldr	r3, [pc, #12]	; (8001e7c <HAL_SuspendTick+0x18>)
 8001e6e:	2102      	movs	r1, #2
 8001e70:	438a      	bics	r2, r1
 8001e72:	601a      	str	r2, [r3, #0]
}
 8001e74:	46c0      	nop			; (mov r8, r8)
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	46c0      	nop			; (mov r8, r8)
 8001e7c:	e000e010 	.word	0xe000e010

08001e80 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e88:	230f      	movs	r3, #15
 8001e8a:	18fb      	adds	r3, r7, r3
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e125      	b.n	80020ea <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d10a      	bne.n	8001ebc <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2234      	movs	r2, #52	; 0x34
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	f7ff fc12 	bl	80016e0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec0:	2210      	movs	r2, #16
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	d000      	beq.n	8001ec8 <HAL_ADC_Init+0x48>
 8001ec6:	e103      	b.n	80020d0 <HAL_ADC_Init+0x250>
 8001ec8:	230f      	movs	r3, #15
 8001eca:	18fb      	adds	r3, r7, r3
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d000      	beq.n	8001ed4 <HAL_ADC_Init+0x54>
 8001ed2:	e0fd      	b.n	80020d0 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	2204      	movs	r2, #4
 8001edc:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001ede:	d000      	beq.n	8001ee2 <HAL_ADC_Init+0x62>
 8001ee0:	e0f6      	b.n	80020d0 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee6:	4a83      	ldr	r2, [pc, #524]	; (80020f4 <HAL_ADC_Init+0x274>)
 8001ee8:	4013      	ands	r3, r2
 8001eea:	2202      	movs	r2, #2
 8001eec:	431a      	orrs	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	2203      	movs	r2, #3
 8001efa:	4013      	ands	r3, r2
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d112      	bne.n	8001f26 <HAL_ADC_Init+0xa6>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2201      	movs	r2, #1
 8001f08:	4013      	ands	r3, r2
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d009      	beq.n	8001f22 <HAL_ADC_Init+0xa2>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68da      	ldr	r2, [r3, #12]
 8001f14:	2380      	movs	r3, #128	; 0x80
 8001f16:	021b      	lsls	r3, r3, #8
 8001f18:	401a      	ands	r2, r3
 8001f1a:	2380      	movs	r3, #128	; 0x80
 8001f1c:	021b      	lsls	r3, r3, #8
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d101      	bne.n	8001f26 <HAL_ADC_Init+0xa6>
 8001f22:	2301      	movs	r3, #1
 8001f24:	e000      	b.n	8001f28 <HAL_ADC_Init+0xa8>
 8001f26:	2300      	movs	r3, #0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d116      	bne.n	8001f5a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	2218      	movs	r2, #24
 8001f34:	4393      	bics	r3, r2
 8001f36:	0019      	movs	r1, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	430a      	orrs	r2, r1
 8001f42:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	0899      	lsrs	r1, r3, #2
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685a      	ldr	r2, [r3, #4]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	430a      	orrs	r2, r1
 8001f58:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68da      	ldr	r2, [r3, #12]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4964      	ldr	r1, [pc, #400]	; (80020f8 <HAL_ADC_Init+0x278>)
 8001f66:	400a      	ands	r2, r1
 8001f68:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	7e1b      	ldrb	r3, [r3, #24]
 8001f6e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	7e5b      	ldrb	r3, [r3, #25]
 8001f74:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f76:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	7e9b      	ldrb	r3, [r3, #26]
 8001f7c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001f7e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d002      	beq.n	8001f8e <HAL_ADC_Init+0x10e>
 8001f88:	2380      	movs	r3, #128	; 0x80
 8001f8a:	015b      	lsls	r3, r3, #5
 8001f8c:	e000      	b.n	8001f90 <HAL_ADC_Init+0x110>
 8001f8e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001f90:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001f96:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d101      	bne.n	8001fa4 <HAL_ADC_Init+0x124>
 8001fa0:	2304      	movs	r3, #4
 8001fa2:	e000      	b.n	8001fa6 <HAL_ADC_Init+0x126>
 8001fa4:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001fa6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2124      	movs	r1, #36	; 0x24
 8001fac:	5c5b      	ldrb	r3, [r3, r1]
 8001fae:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001fb0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	7edb      	ldrb	r3, [r3, #27]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d115      	bne.n	8001fec <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	7e9b      	ldrb	r3, [r3, #26]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d105      	bne.n	8001fd4 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	2280      	movs	r2, #128	; 0x80
 8001fcc:	0252      	lsls	r2, r2, #9
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	e00b      	b.n	8001fec <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd8:	2220      	movs	r2, #32
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	69da      	ldr	r2, [r3, #28]
 8001ff0:	23c2      	movs	r3, #194	; 0xc2
 8001ff2:	33ff      	adds	r3, #255	; 0xff
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d007      	beq.n	8002008 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002000:	4313      	orrs	r3, r2
 8002002:	68ba      	ldr	r2, [r7, #8]
 8002004:	4313      	orrs	r3, r2
 8002006:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68d9      	ldr	r1, [r3, #12]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	430a      	orrs	r2, r1
 8002016:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800201c:	2380      	movs	r3, #128	; 0x80
 800201e:	055b      	lsls	r3, r3, #21
 8002020:	429a      	cmp	r2, r3
 8002022:	d01b      	beq.n	800205c <HAL_ADC_Init+0x1dc>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002028:	2b01      	cmp	r3, #1
 800202a:	d017      	beq.n	800205c <HAL_ADC_Init+0x1dc>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002030:	2b02      	cmp	r3, #2
 8002032:	d013      	beq.n	800205c <HAL_ADC_Init+0x1dc>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002038:	2b03      	cmp	r3, #3
 800203a:	d00f      	beq.n	800205c <HAL_ADC_Init+0x1dc>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002040:	2b04      	cmp	r3, #4
 8002042:	d00b      	beq.n	800205c <HAL_ADC_Init+0x1dc>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002048:	2b05      	cmp	r3, #5
 800204a:	d007      	beq.n	800205c <HAL_ADC_Init+0x1dc>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002050:	2b06      	cmp	r3, #6
 8002052:	d003      	beq.n	800205c <HAL_ADC_Init+0x1dc>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002058:	2b07      	cmp	r3, #7
 800205a:	d112      	bne.n	8002082 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	695a      	ldr	r2, [r3, #20]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2107      	movs	r1, #7
 8002068:	438a      	bics	r2, r1
 800206a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6959      	ldr	r1, [r3, #20]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002076:	2207      	movs	r2, #7
 8002078:	401a      	ands	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	430a      	orrs	r2, r1
 8002080:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	4a1c      	ldr	r2, [pc, #112]	; (80020fc <HAL_ADC_Init+0x27c>)
 800208a:	4013      	ands	r3, r2
 800208c:	68ba      	ldr	r2, [r7, #8]
 800208e:	429a      	cmp	r2, r3
 8002090:	d10b      	bne.n	80020aa <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800209c:	2203      	movs	r2, #3
 800209e:	4393      	bics	r3, r2
 80020a0:	2201      	movs	r2, #1
 80020a2:	431a      	orrs	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80020a8:	e01c      	b.n	80020e4 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ae:	2212      	movs	r2, #18
 80020b0:	4393      	bics	r3, r2
 80020b2:	2210      	movs	r2, #16
 80020b4:	431a      	orrs	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020be:	2201      	movs	r2, #1
 80020c0:	431a      	orrs	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80020c6:	230f      	movs	r3, #15
 80020c8:	18fb      	adds	r3, r7, r3
 80020ca:	2201      	movs	r2, #1
 80020cc:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80020ce:	e009      	b.n	80020e4 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d4:	2210      	movs	r2, #16
 80020d6:	431a      	orrs	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80020dc:	230f      	movs	r3, #15
 80020de:	18fb      	adds	r3, r7, r3
 80020e0:	2201      	movs	r2, #1
 80020e2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80020e4:	230f      	movs	r3, #15
 80020e6:	18fb      	adds	r3, r7, r3
 80020e8:	781b      	ldrb	r3, [r3, #0]
}
 80020ea:	0018      	movs	r0, r3
 80020ec:	46bd      	mov	sp, r7
 80020ee:	b004      	add	sp, #16
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	46c0      	nop			; (mov r8, r8)
 80020f4:	fffffefd 	.word	0xfffffefd
 80020f8:	fffe0219 	.word	0xfffe0219
 80020fc:	833fffe7 	.word	0x833fffe7

08002100 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002100:	b590      	push	{r4, r7, lr}
 8002102:	b087      	sub	sp, #28
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800210c:	2317      	movs	r3, #23
 800210e:	18fb      	adds	r3, r7, r3
 8002110:	2200      	movs	r2, #0
 8002112:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	2204      	movs	r2, #4
 800211c:	4013      	ands	r3, r2
 800211e:	d15e      	bne.n	80021de <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2234      	movs	r2, #52	; 0x34
 8002124:	5c9b      	ldrb	r3, [r3, r2]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d101      	bne.n	800212e <HAL_ADC_Start_DMA+0x2e>
 800212a:	2302      	movs	r3, #2
 800212c:	e05e      	b.n	80021ec <HAL_ADC_Start_DMA+0xec>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2234      	movs	r2, #52	; 0x34
 8002132:	2101      	movs	r1, #1
 8002134:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	7e5b      	ldrb	r3, [r3, #25]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d007      	beq.n	800214e <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800213e:	2317      	movs	r3, #23
 8002140:	18fc      	adds	r4, r7, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	0018      	movs	r0, r3
 8002146:	f000 f983 	bl	8002450 <ADC_Enable>
 800214a:	0003      	movs	r3, r0
 800214c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800214e:	2317      	movs	r3, #23
 8002150:	18fb      	adds	r3, r7, r3
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d146      	bne.n	80021e6 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800215c:	4a25      	ldr	r2, [pc, #148]	; (80021f4 <HAL_ADC_Start_DMA+0xf4>)
 800215e:	4013      	ands	r3, r2
 8002160:	2280      	movs	r2, #128	; 0x80
 8002162:	0052      	lsls	r2, r2, #1
 8002164:	431a      	orrs	r2, r3
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2234      	movs	r2, #52	; 0x34
 8002174:	2100      	movs	r1, #0
 8002176:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217c:	4a1e      	ldr	r2, [pc, #120]	; (80021f8 <HAL_ADC_Start_DMA+0xf8>)
 800217e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002184:	4a1d      	ldr	r2, [pc, #116]	; (80021fc <HAL_ADC_Start_DMA+0xfc>)
 8002186:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218c:	4a1c      	ldr	r2, [pc, #112]	; (8002200 <HAL_ADC_Start_DMA+0x100>)
 800218e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	221c      	movs	r2, #28
 8002196:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2110      	movs	r1, #16
 80021a4:	430a      	orrs	r2, r1
 80021a6:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68da      	ldr	r2, [r3, #12]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2101      	movs	r1, #1
 80021b4:	430a      	orrs	r2, r1
 80021b6:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	3340      	adds	r3, #64	; 0x40
 80021c2:	0019      	movs	r1, r3
 80021c4:	68ba      	ldr	r2, [r7, #8]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f000 fc0a 	bl	80029e0 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	689a      	ldr	r2, [r3, #8]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2104      	movs	r1, #4
 80021d8:	430a      	orrs	r2, r1
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	e003      	b.n	80021e6 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80021de:	2317      	movs	r3, #23
 80021e0:	18fb      	adds	r3, r7, r3
 80021e2:	2202      	movs	r2, #2
 80021e4:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 80021e6:	2317      	movs	r3, #23
 80021e8:	18fb      	adds	r3, r7, r3
 80021ea:	781b      	ldrb	r3, [r3, #0]
}
 80021ec:	0018      	movs	r0, r3
 80021ee:	46bd      	mov	sp, r7
 80021f0:	b007      	add	sp, #28
 80021f2:	bd90      	pop	{r4, r7, pc}
 80021f4:	fffff0fe 	.word	0xfffff0fe
 80021f8:	08002559 	.word	0x08002559
 80021fc:	0800260d 	.word	0x0800260d
 8002200:	0800262b 	.word	0x0800262b

08002204 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800220c:	46c0      	nop			; (mov r8, r8)
 800220e:	46bd      	mov	sp, r7
 8002210:	b002      	add	sp, #8
 8002212:	bd80      	pop	{r7, pc}

08002214 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800221c:	46c0      	nop			; (mov r8, r8)
 800221e:	46bd      	mov	sp, r7
 8002220:	b002      	add	sp, #8
 8002222:	bd80      	pop	{r7, pc}

08002224 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800222c:	46c0      	nop			; (mov r8, r8)
 800222e:	46bd      	mov	sp, r7
 8002230:	b002      	add	sp, #8
 8002232:	bd80      	pop	{r7, pc}

08002234 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800223e:	230f      	movs	r3, #15
 8002240:	18fb      	adds	r3, r7, r3
 8002242:	2200      	movs	r2, #0
 8002244:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002246:	2300      	movs	r3, #0
 8002248:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800224e:	2380      	movs	r3, #128	; 0x80
 8002250:	055b      	lsls	r3, r3, #21
 8002252:	429a      	cmp	r2, r3
 8002254:	d011      	beq.n	800227a <HAL_ADC_ConfigChannel+0x46>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225a:	2b01      	cmp	r3, #1
 800225c:	d00d      	beq.n	800227a <HAL_ADC_ConfigChannel+0x46>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002262:	2b02      	cmp	r3, #2
 8002264:	d009      	beq.n	800227a <HAL_ADC_ConfigChannel+0x46>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226a:	2b03      	cmp	r3, #3
 800226c:	d005      	beq.n	800227a <HAL_ADC_ConfigChannel+0x46>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002272:	2b04      	cmp	r3, #4
 8002274:	d001      	beq.n	800227a <HAL_ADC_ConfigChannel+0x46>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2234      	movs	r2, #52	; 0x34
 800227e:	5c9b      	ldrb	r3, [r3, r2]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d101      	bne.n	8002288 <HAL_ADC_ConfigChannel+0x54>
 8002284:	2302      	movs	r3, #2
 8002286:	e0d0      	b.n	800242a <HAL_ADC_ConfigChannel+0x1f6>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2234      	movs	r2, #52	; 0x34
 800228c:	2101      	movs	r1, #1
 800228e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	2204      	movs	r2, #4
 8002298:	4013      	ands	r3, r2
 800229a:	d000      	beq.n	800229e <HAL_ADC_ConfigChannel+0x6a>
 800229c:	e0b4      	b.n	8002408 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	4a64      	ldr	r2, [pc, #400]	; (8002434 <HAL_ADC_ConfigChannel+0x200>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d100      	bne.n	80022aa <HAL_ADC_ConfigChannel+0x76>
 80022a8:	e082      	b.n	80023b0 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2201      	movs	r2, #1
 80022b6:	409a      	lsls	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	430a      	orrs	r2, r1
 80022be:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022c4:	2380      	movs	r3, #128	; 0x80
 80022c6:	055b      	lsls	r3, r3, #21
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d037      	beq.n	800233c <HAL_ADC_ConfigChannel+0x108>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d033      	beq.n	800233c <HAL_ADC_ConfigChannel+0x108>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d02f      	beq.n	800233c <HAL_ADC_ConfigChannel+0x108>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	d02b      	beq.n	800233c <HAL_ADC_ConfigChannel+0x108>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e8:	2b04      	cmp	r3, #4
 80022ea:	d027      	beq.n	800233c <HAL_ADC_ConfigChannel+0x108>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f0:	2b05      	cmp	r3, #5
 80022f2:	d023      	beq.n	800233c <HAL_ADC_ConfigChannel+0x108>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f8:	2b06      	cmp	r3, #6
 80022fa:	d01f      	beq.n	800233c <HAL_ADC_ConfigChannel+0x108>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002300:	2b07      	cmp	r3, #7
 8002302:	d01b      	beq.n	800233c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	2107      	movs	r1, #7
 8002310:	400b      	ands	r3, r1
 8002312:	429a      	cmp	r2, r3
 8002314:	d012      	beq.n	800233c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	695a      	ldr	r2, [r3, #20]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2107      	movs	r1, #7
 8002322:	438a      	bics	r2, r1
 8002324:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6959      	ldr	r1, [r3, #20]
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	2207      	movs	r2, #7
 8002332:	401a      	ands	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	430a      	orrs	r2, r1
 800233a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2b10      	cmp	r3, #16
 8002342:	d007      	beq.n	8002354 <HAL_ADC_ConfigChannel+0x120>
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2b11      	cmp	r3, #17
 800234a:	d003      	beq.n	8002354 <HAL_ADC_ConfigChannel+0x120>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b12      	cmp	r3, #18
 8002352:	d163      	bne.n	800241c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002354:	4b38      	ldr	r3, [pc, #224]	; (8002438 <HAL_ADC_ConfigChannel+0x204>)
 8002356:	6819      	ldr	r1, [r3, #0]
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2b10      	cmp	r3, #16
 800235e:	d009      	beq.n	8002374 <HAL_ADC_ConfigChannel+0x140>
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2b11      	cmp	r3, #17
 8002366:	d102      	bne.n	800236e <HAL_ADC_ConfigChannel+0x13a>
 8002368:	2380      	movs	r3, #128	; 0x80
 800236a:	03db      	lsls	r3, r3, #15
 800236c:	e004      	b.n	8002378 <HAL_ADC_ConfigChannel+0x144>
 800236e:	2380      	movs	r3, #128	; 0x80
 8002370:	045b      	lsls	r3, r3, #17
 8002372:	e001      	b.n	8002378 <HAL_ADC_ConfigChannel+0x144>
 8002374:	2380      	movs	r3, #128	; 0x80
 8002376:	041b      	lsls	r3, r3, #16
 8002378:	4a2f      	ldr	r2, [pc, #188]	; (8002438 <HAL_ADC_ConfigChannel+0x204>)
 800237a:	430b      	orrs	r3, r1
 800237c:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2b10      	cmp	r3, #16
 8002384:	d14a      	bne.n	800241c <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002386:	4b2d      	ldr	r3, [pc, #180]	; (800243c <HAL_ADC_ConfigChannel+0x208>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	492d      	ldr	r1, [pc, #180]	; (8002440 <HAL_ADC_ConfigChannel+0x20c>)
 800238c:	0018      	movs	r0, r3
 800238e:	f7fd febb 	bl	8000108 <__udivsi3>
 8002392:	0003      	movs	r3, r0
 8002394:	001a      	movs	r2, r3
 8002396:	0013      	movs	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	189b      	adds	r3, r3, r2
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023a0:	e002      	b.n	80023a8 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	3b01      	subs	r3, #1
 80023a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1f9      	bne.n	80023a2 <HAL_ADC_ConfigChannel+0x16e>
 80023ae:	e035      	b.n	800241c <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2101      	movs	r1, #1
 80023bc:	4099      	lsls	r1, r3
 80023be:	000b      	movs	r3, r1
 80023c0:	43d9      	mvns	r1, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	400a      	ands	r2, r1
 80023c8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2b10      	cmp	r3, #16
 80023d0:	d007      	beq.n	80023e2 <HAL_ADC_ConfigChannel+0x1ae>
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2b11      	cmp	r3, #17
 80023d8:	d003      	beq.n	80023e2 <HAL_ADC_ConfigChannel+0x1ae>
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2b12      	cmp	r3, #18
 80023e0:	d11c      	bne.n	800241c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80023e2:	4b15      	ldr	r3, [pc, #84]	; (8002438 <HAL_ADC_ConfigChannel+0x204>)
 80023e4:	6819      	ldr	r1, [r3, #0]
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2b10      	cmp	r3, #16
 80023ec:	d007      	beq.n	80023fe <HAL_ADC_ConfigChannel+0x1ca>
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2b11      	cmp	r3, #17
 80023f4:	d101      	bne.n	80023fa <HAL_ADC_ConfigChannel+0x1c6>
 80023f6:	4b13      	ldr	r3, [pc, #76]	; (8002444 <HAL_ADC_ConfigChannel+0x210>)
 80023f8:	e002      	b.n	8002400 <HAL_ADC_ConfigChannel+0x1cc>
 80023fa:	4b13      	ldr	r3, [pc, #76]	; (8002448 <HAL_ADC_ConfigChannel+0x214>)
 80023fc:	e000      	b.n	8002400 <HAL_ADC_ConfigChannel+0x1cc>
 80023fe:	4b13      	ldr	r3, [pc, #76]	; (800244c <HAL_ADC_ConfigChannel+0x218>)
 8002400:	4a0d      	ldr	r2, [pc, #52]	; (8002438 <HAL_ADC_ConfigChannel+0x204>)
 8002402:	400b      	ands	r3, r1
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	e009      	b.n	800241c <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800240c:	2220      	movs	r2, #32
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002414:	230f      	movs	r3, #15
 8002416:	18fb      	adds	r3, r7, r3
 8002418:	2201      	movs	r2, #1
 800241a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2234      	movs	r2, #52	; 0x34
 8002420:	2100      	movs	r1, #0
 8002422:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002424:	230f      	movs	r3, #15
 8002426:	18fb      	adds	r3, r7, r3
 8002428:	781b      	ldrb	r3, [r3, #0]
}
 800242a:	0018      	movs	r0, r3
 800242c:	46bd      	mov	sp, r7
 800242e:	b004      	add	sp, #16
 8002430:	bd80      	pop	{r7, pc}
 8002432:	46c0      	nop			; (mov r8, r8)
 8002434:	00001001 	.word	0x00001001
 8002438:	40012708 	.word	0x40012708
 800243c:	20000028 	.word	0x20000028
 8002440:	000f4240 	.word	0x000f4240
 8002444:	ffbfffff 	.word	0xffbfffff
 8002448:	feffffff 	.word	0xfeffffff
 800244c:	ff7fffff 	.word	0xff7fffff

08002450 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002458:	2300      	movs	r3, #0
 800245a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800245c:	2300      	movs	r3, #0
 800245e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	2203      	movs	r2, #3
 8002468:	4013      	ands	r3, r2
 800246a:	2b01      	cmp	r3, #1
 800246c:	d112      	bne.n	8002494 <ADC_Enable+0x44>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2201      	movs	r2, #1
 8002476:	4013      	ands	r3, r2
 8002478:	2b01      	cmp	r3, #1
 800247a:	d009      	beq.n	8002490 <ADC_Enable+0x40>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68da      	ldr	r2, [r3, #12]
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	021b      	lsls	r3, r3, #8
 8002486:	401a      	ands	r2, r3
 8002488:	2380      	movs	r3, #128	; 0x80
 800248a:	021b      	lsls	r3, r3, #8
 800248c:	429a      	cmp	r2, r3
 800248e:	d101      	bne.n	8002494 <ADC_Enable+0x44>
 8002490:	2301      	movs	r3, #1
 8002492:	e000      	b.n	8002496 <ADC_Enable+0x46>
 8002494:	2300      	movs	r3, #0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d152      	bne.n	8002540 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	4a2a      	ldr	r2, [pc, #168]	; (800254c <ADC_Enable+0xfc>)
 80024a2:	4013      	ands	r3, r2
 80024a4:	d00d      	beq.n	80024c2 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024aa:	2210      	movs	r2, #16
 80024ac:	431a      	orrs	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b6:	2201      	movs	r2, #1
 80024b8:	431a      	orrs	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e03f      	b.n	8002542 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2101      	movs	r1, #1
 80024ce:	430a      	orrs	r2, r1
 80024d0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024d2:	4b1f      	ldr	r3, [pc, #124]	; (8002550 <ADC_Enable+0x100>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	491f      	ldr	r1, [pc, #124]	; (8002554 <ADC_Enable+0x104>)
 80024d8:	0018      	movs	r0, r3
 80024da:	f7fd fe15 	bl	8000108 <__udivsi3>
 80024de:	0003      	movs	r3, r0
 80024e0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80024e2:	e002      	b.n	80024ea <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1f9      	bne.n	80024e4 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80024f0:	f7ff fcae 	bl	8001e50 <HAL_GetTick>
 80024f4:	0003      	movs	r3, r0
 80024f6:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80024f8:	e01b      	b.n	8002532 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024fa:	f7ff fca9 	bl	8001e50 <HAL_GetTick>
 80024fe:	0002      	movs	r2, r0
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d914      	bls.n	8002532 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2201      	movs	r2, #1
 8002510:	4013      	ands	r3, r2
 8002512:	2b01      	cmp	r3, #1
 8002514:	d00d      	beq.n	8002532 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800251a:	2210      	movs	r2, #16
 800251c:	431a      	orrs	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002526:	2201      	movs	r2, #1
 8002528:	431a      	orrs	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e007      	b.n	8002542 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2201      	movs	r2, #1
 800253a:	4013      	ands	r3, r2
 800253c:	2b01      	cmp	r3, #1
 800253e:	d1dc      	bne.n	80024fa <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	0018      	movs	r0, r3
 8002544:	46bd      	mov	sp, r7
 8002546:	b004      	add	sp, #16
 8002548:	bd80      	pop	{r7, pc}
 800254a:	46c0      	nop			; (mov r8, r8)
 800254c:	80000017 	.word	0x80000017
 8002550:	20000028 	.word	0x20000028
 8002554:	000f4240 	.word	0x000f4240

08002558 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002564:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800256a:	2250      	movs	r2, #80	; 0x50
 800256c:	4013      	ands	r3, r2
 800256e:	d140      	bne.n	80025f2 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002574:	2280      	movs	r2, #128	; 0x80
 8002576:	0092      	lsls	r2, r2, #2
 8002578:	431a      	orrs	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68da      	ldr	r2, [r3, #12]
 8002584:	23c0      	movs	r3, #192	; 0xc0
 8002586:	011b      	lsls	r3, r3, #4
 8002588:	4013      	ands	r3, r2
 800258a:	d12d      	bne.n	80025e8 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002590:	2b00      	cmp	r3, #0
 8002592:	d129      	bne.n	80025e8 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2208      	movs	r2, #8
 800259c:	4013      	ands	r3, r2
 800259e:	2b08      	cmp	r3, #8
 80025a0:	d122      	bne.n	80025e8 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	2204      	movs	r2, #4
 80025aa:	4013      	ands	r3, r2
 80025ac:	d110      	bne.n	80025d0 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	210c      	movs	r1, #12
 80025ba:	438a      	bics	r2, r1
 80025bc:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c2:	4a11      	ldr	r2, [pc, #68]	; (8002608 <ADC_DMAConvCplt+0xb0>)
 80025c4:	4013      	ands	r3, r2
 80025c6:	2201      	movs	r2, #1
 80025c8:	431a      	orrs	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	639a      	str	r2, [r3, #56]	; 0x38
 80025ce:	e00b      	b.n	80025e8 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d4:	2220      	movs	r2, #32
 80025d6:	431a      	orrs	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e0:	2201      	movs	r2, #1
 80025e2:	431a      	orrs	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	0018      	movs	r0, r3
 80025ec:	f7ff fe0a 	bl	8002204 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 80025f0:	e005      	b.n	80025fe <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	0010      	movs	r0, r2
 80025fc:	4798      	blx	r3
}
 80025fe:	46c0      	nop			; (mov r8, r8)
 8002600:	46bd      	mov	sp, r7
 8002602:	b004      	add	sp, #16
 8002604:	bd80      	pop	{r7, pc}
 8002606:	46c0      	nop			; (mov r8, r8)
 8002608:	fffffefe 	.word	0xfffffefe

0800260c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002618:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	0018      	movs	r0, r3
 800261e:	f7ff fdf9 	bl	8002214 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002622:	46c0      	nop			; (mov r8, r8)
 8002624:	46bd      	mov	sp, r7
 8002626:	b004      	add	sp, #16
 8002628:	bd80      	pop	{r7, pc}

0800262a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b084      	sub	sp, #16
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002636:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263c:	2240      	movs	r2, #64	; 0x40
 800263e:	431a      	orrs	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002648:	2204      	movs	r2, #4
 800264a:	431a      	orrs	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	0018      	movs	r0, r3
 8002654:	f7ff fde6 	bl	8002224 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002658:	46c0      	nop			; (mov r8, r8)
 800265a:	46bd      	mov	sp, r7
 800265c:	b004      	add	sp, #16
 800265e:	bd80      	pop	{r7, pc}

08002660 <__NVIC_EnableIRQ>:
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	0002      	movs	r2, r0
 8002668:	1dfb      	adds	r3, r7, #7
 800266a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800266c:	1dfb      	adds	r3, r7, #7
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	2b7f      	cmp	r3, #127	; 0x7f
 8002672:	d809      	bhi.n	8002688 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002674:	1dfb      	adds	r3, r7, #7
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	001a      	movs	r2, r3
 800267a:	231f      	movs	r3, #31
 800267c:	401a      	ands	r2, r3
 800267e:	4b04      	ldr	r3, [pc, #16]	; (8002690 <__NVIC_EnableIRQ+0x30>)
 8002680:	2101      	movs	r1, #1
 8002682:	4091      	lsls	r1, r2
 8002684:	000a      	movs	r2, r1
 8002686:	601a      	str	r2, [r3, #0]
}
 8002688:	46c0      	nop			; (mov r8, r8)
 800268a:	46bd      	mov	sp, r7
 800268c:	b002      	add	sp, #8
 800268e:	bd80      	pop	{r7, pc}
 8002690:	e000e100 	.word	0xe000e100

08002694 <__NVIC_SetPriority>:
{
 8002694:	b590      	push	{r4, r7, lr}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	0002      	movs	r2, r0
 800269c:	6039      	str	r1, [r7, #0]
 800269e:	1dfb      	adds	r3, r7, #7
 80026a0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80026a2:	1dfb      	adds	r3, r7, #7
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	2b7f      	cmp	r3, #127	; 0x7f
 80026a8:	d828      	bhi.n	80026fc <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026aa:	4a2f      	ldr	r2, [pc, #188]	; (8002768 <__NVIC_SetPriority+0xd4>)
 80026ac:	1dfb      	adds	r3, r7, #7
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	b25b      	sxtb	r3, r3
 80026b2:	089b      	lsrs	r3, r3, #2
 80026b4:	33c0      	adds	r3, #192	; 0xc0
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	589b      	ldr	r3, [r3, r2]
 80026ba:	1dfa      	adds	r2, r7, #7
 80026bc:	7812      	ldrb	r2, [r2, #0]
 80026be:	0011      	movs	r1, r2
 80026c0:	2203      	movs	r2, #3
 80026c2:	400a      	ands	r2, r1
 80026c4:	00d2      	lsls	r2, r2, #3
 80026c6:	21ff      	movs	r1, #255	; 0xff
 80026c8:	4091      	lsls	r1, r2
 80026ca:	000a      	movs	r2, r1
 80026cc:	43d2      	mvns	r2, r2
 80026ce:	401a      	ands	r2, r3
 80026d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	019b      	lsls	r3, r3, #6
 80026d6:	22ff      	movs	r2, #255	; 0xff
 80026d8:	401a      	ands	r2, r3
 80026da:	1dfb      	adds	r3, r7, #7
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	0018      	movs	r0, r3
 80026e0:	2303      	movs	r3, #3
 80026e2:	4003      	ands	r3, r0
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026e8:	481f      	ldr	r0, [pc, #124]	; (8002768 <__NVIC_SetPriority+0xd4>)
 80026ea:	1dfb      	adds	r3, r7, #7
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	b25b      	sxtb	r3, r3
 80026f0:	089b      	lsrs	r3, r3, #2
 80026f2:	430a      	orrs	r2, r1
 80026f4:	33c0      	adds	r3, #192	; 0xc0
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	501a      	str	r2, [r3, r0]
}
 80026fa:	e031      	b.n	8002760 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026fc:	4a1b      	ldr	r2, [pc, #108]	; (800276c <__NVIC_SetPriority+0xd8>)
 80026fe:	1dfb      	adds	r3, r7, #7
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	0019      	movs	r1, r3
 8002704:	230f      	movs	r3, #15
 8002706:	400b      	ands	r3, r1
 8002708:	3b08      	subs	r3, #8
 800270a:	089b      	lsrs	r3, r3, #2
 800270c:	3306      	adds	r3, #6
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	18d3      	adds	r3, r2, r3
 8002712:	3304      	adds	r3, #4
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	1dfa      	adds	r2, r7, #7
 8002718:	7812      	ldrb	r2, [r2, #0]
 800271a:	0011      	movs	r1, r2
 800271c:	2203      	movs	r2, #3
 800271e:	400a      	ands	r2, r1
 8002720:	00d2      	lsls	r2, r2, #3
 8002722:	21ff      	movs	r1, #255	; 0xff
 8002724:	4091      	lsls	r1, r2
 8002726:	000a      	movs	r2, r1
 8002728:	43d2      	mvns	r2, r2
 800272a:	401a      	ands	r2, r3
 800272c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	019b      	lsls	r3, r3, #6
 8002732:	22ff      	movs	r2, #255	; 0xff
 8002734:	401a      	ands	r2, r3
 8002736:	1dfb      	adds	r3, r7, #7
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	0018      	movs	r0, r3
 800273c:	2303      	movs	r3, #3
 800273e:	4003      	ands	r3, r0
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002744:	4809      	ldr	r0, [pc, #36]	; (800276c <__NVIC_SetPriority+0xd8>)
 8002746:	1dfb      	adds	r3, r7, #7
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	001c      	movs	r4, r3
 800274c:	230f      	movs	r3, #15
 800274e:	4023      	ands	r3, r4
 8002750:	3b08      	subs	r3, #8
 8002752:	089b      	lsrs	r3, r3, #2
 8002754:	430a      	orrs	r2, r1
 8002756:	3306      	adds	r3, #6
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	18c3      	adds	r3, r0, r3
 800275c:	3304      	adds	r3, #4
 800275e:	601a      	str	r2, [r3, #0]
}
 8002760:	46c0      	nop			; (mov r8, r8)
 8002762:	46bd      	mov	sp, r7
 8002764:	b003      	add	sp, #12
 8002766:	bd90      	pop	{r4, r7, pc}
 8002768:	e000e100 	.word	0xe000e100
 800276c:	e000ed00 	.word	0xe000ed00

08002770 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	1e5a      	subs	r2, r3, #1
 800277c:	2380      	movs	r3, #128	; 0x80
 800277e:	045b      	lsls	r3, r3, #17
 8002780:	429a      	cmp	r2, r3
 8002782:	d301      	bcc.n	8002788 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002784:	2301      	movs	r3, #1
 8002786:	e010      	b.n	80027aa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002788:	4b0a      	ldr	r3, [pc, #40]	; (80027b4 <SysTick_Config+0x44>)
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	3a01      	subs	r2, #1
 800278e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002790:	2301      	movs	r3, #1
 8002792:	425b      	negs	r3, r3
 8002794:	2103      	movs	r1, #3
 8002796:	0018      	movs	r0, r3
 8002798:	f7ff ff7c 	bl	8002694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800279c:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <SysTick_Config+0x44>)
 800279e:	2200      	movs	r2, #0
 80027a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027a2:	4b04      	ldr	r3, [pc, #16]	; (80027b4 <SysTick_Config+0x44>)
 80027a4:	2207      	movs	r2, #7
 80027a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	0018      	movs	r0, r3
 80027ac:	46bd      	mov	sp, r7
 80027ae:	b002      	add	sp, #8
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	46c0      	nop			; (mov r8, r8)
 80027b4:	e000e010 	.word	0xe000e010

080027b8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60b9      	str	r1, [r7, #8]
 80027c0:	607a      	str	r2, [r7, #4]
 80027c2:	210f      	movs	r1, #15
 80027c4:	187b      	adds	r3, r7, r1
 80027c6:	1c02      	adds	r2, r0, #0
 80027c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80027ca:	68ba      	ldr	r2, [r7, #8]
 80027cc:	187b      	adds	r3, r7, r1
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	b25b      	sxtb	r3, r3
 80027d2:	0011      	movs	r1, r2
 80027d4:	0018      	movs	r0, r3
 80027d6:	f7ff ff5d 	bl	8002694 <__NVIC_SetPriority>
}
 80027da:	46c0      	nop			; (mov r8, r8)
 80027dc:	46bd      	mov	sp, r7
 80027de:	b004      	add	sp, #16
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b082      	sub	sp, #8
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	0002      	movs	r2, r0
 80027ea:	1dfb      	adds	r3, r7, #7
 80027ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027ee:	1dfb      	adds	r3, r7, #7
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	b25b      	sxtb	r3, r3
 80027f4:	0018      	movs	r0, r3
 80027f6:	f7ff ff33 	bl	8002660 <__NVIC_EnableIRQ>
}
 80027fa:	46c0      	nop			; (mov r8, r8)
 80027fc:	46bd      	mov	sp, r7
 80027fe:	b002      	add	sp, #8
 8002800:	bd80      	pop	{r7, pc}

08002802 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b082      	sub	sp, #8
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	0018      	movs	r0, r3
 800280e:	f7ff ffaf 	bl	8002770 <SysTick_Config>
 8002812:	0003      	movs	r3, r0
}
 8002814:	0018      	movs	r0, r3
 8002816:	46bd      	mov	sp, r7
 8002818:	b002      	add	sp, #8
 800281a:	bd80      	pop	{r7, pc}

0800281c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e015      	b.n	800285a <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if (hdac->State == HAL_DAC_STATE_RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	791b      	ldrb	r3, [r3, #4]
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	d106      	bne.n	8002846 <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	0018      	movs	r0, r3
 8002842:	f7fe fffd 	bl	8001840 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2202      	movs	r2, #2
 800284a:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	0018      	movs	r0, r3
 800285c:	46bd      	mov	sp, r7
 800285e:	b002      	add	sp, #8
 8002860:	bd80      	pop	{r7, pc}

08002862 <HAL_DAC_ConfigChannel>:
  *          This parameter can be one of the following values:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b086      	sub	sp, #24
 8002866:	af00      	add	r7, sp, #0
 8002868:	60f8      	str	r0, [r7, #12]
 800286a:	60b9      	str	r1, [r7, #8]
 800286c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800286e:	2300      	movs	r3, #0
 8002870:	617b      	str	r3, [r7, #20]
 8002872:	2300      	movs	r3, #0
 8002874:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	795b      	ldrb	r3, [r3, #5]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d101      	bne.n	8002882 <HAL_DAC_ConfigChannel+0x20>
 800287e:	2302      	movs	r3, #2
 8002880:	e029      	b.n	80028d6 <HAL_DAC_ConfigChannel+0x74>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2201      	movs	r2, #1
 8002886:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2202      	movs	r2, #2
 800288c:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel); 
 8002896:	223e      	movs	r2, #62	; 0x3e
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	409a      	lsls	r2, r3
 800289c:	0013      	movs	r3, r2
 800289e:	43da      	mvns	r2, r3
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	4013      	ands	r3, r2
 80028a4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	409a      	lsls	r2, r3
 80028b8:	0013      	movs	r3, r2
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	4313      	orrs	r3, r2
 80028be:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2201      	movs	r2, #1
 80028cc:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	0018      	movs	r0, r3
 80028d8:	46bd      	mov	sp, r7
 80028da:	b006      	add	sp, #24
 80028dc:	bd80      	pop	{r7, pc}

080028de <HAL_DAC_Start>:
       /* STM32F091xC  STM32F098xx */

#if defined (STM32F051x8) || defined (STM32F058xx)

HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b082      	sub	sp, #8
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
 80028e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	795b      	ldrb	r3, [r3, #5]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d101      	bne.n	80028f4 <HAL_DAC_Start+0x16>
 80028f0:	2302      	movs	r3, #2
 80028f2:	e028      	b.n	8002946 <HAL_DAC_Start+0x68>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2202      	movs	r2, #2
 80028fe:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6819      	ldr	r1, [r3, #0]
 8002906:	2201      	movs	r2, #1
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	409a      	lsls	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d10e      	bne.n	8002938 <HAL_DAC_Start+0x5a>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	223c      	movs	r2, #60	; 0x3c
 8002922:	4013      	ands	r3, r2
 8002924:	2b3c      	cmp	r3, #60	; 0x3c
 8002926:	d107      	bne.n	8002938 <HAL_DAC_Start+0x5a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2101      	movs	r1, #1
 8002934:	430a      	orrs	r2, r1
 8002936:	605a      	str	r2, [r3, #4]
    }
  }
 
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	0018      	movs	r0, r3
 8002948:	46bd      	mov	sp, r7
 800294a:	b002      	add	sp, #8
 800294c:	bd80      	pop	{r7, pc}
	...

08002950 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002958:	2300      	movs	r3, #0
 800295a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e036      	b.n	80029d4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2221      	movs	r2, #33	; 0x21
 800296a:	2102      	movs	r1, #2
 800296c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	4a18      	ldr	r2, [pc, #96]	; (80029dc <HAL_DMA_Init+0x8c>)
 800297a:	4013      	ands	r3, r2
 800297c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002986:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002992:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800299e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	69db      	ldr	r3, [r3, #28]
 80029a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	0018      	movs	r0, r3
 80029b8:	f000 f9c4 	bl	8002d44 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2221      	movs	r2, #33	; 0x21
 80029c6:	2101      	movs	r1, #1
 80029c8:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2220      	movs	r2, #32
 80029ce:	2100      	movs	r1, #0
 80029d0:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}  
 80029d4:	0018      	movs	r0, r3
 80029d6:	46bd      	mov	sp, r7
 80029d8:	b004      	add	sp, #16
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	ffffc00f 	.word	0xffffc00f

080029e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
 80029ec:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80029ee:	2317      	movs	r3, #23
 80029f0:	18fb      	adds	r3, r7, r3
 80029f2:	2200      	movs	r2, #0
 80029f4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2220      	movs	r2, #32
 80029fa:	5c9b      	ldrb	r3, [r3, r2]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d101      	bne.n	8002a04 <HAL_DMA_Start_IT+0x24>
 8002a00:	2302      	movs	r3, #2
 8002a02:	e04f      	b.n	8002aa4 <HAL_DMA_Start_IT+0xc4>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2220      	movs	r2, #32
 8002a08:	2101      	movs	r1, #1
 8002a0a:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2221      	movs	r2, #33	; 0x21
 8002a10:	5c9b      	ldrb	r3, [r3, r2]
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d13a      	bne.n	8002a8e <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2221      	movs	r2, #33	; 0x21
 8002a1c:	2102      	movs	r1, #2
 8002a1e:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2101      	movs	r1, #1
 8002a32:	438a      	bics	r2, r1
 8002a34:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	68b9      	ldr	r1, [r7, #8]
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f000 f954 	bl	8002cea <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d008      	beq.n	8002a5c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	210e      	movs	r1, #14
 8002a56:	430a      	orrs	r2, r1
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	e00f      	b.n	8002a7c <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	210a      	movs	r1, #10
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2104      	movs	r1, #4
 8002a78:	438a      	bics	r2, r1
 8002a7a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2101      	movs	r1, #1
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	e007      	b.n	8002a9e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2220      	movs	r2, #32
 8002a92:	2100      	movs	r1, #0
 8002a94:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002a96:	2317      	movs	r3, #23
 8002a98:	18fb      	adds	r3, r7, r3
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8002a9e:	2317      	movs	r3, #23
 8002aa0:	18fb      	adds	r3, r7, r3
 8002aa2:	781b      	ldrb	r3, [r3, #0]
} 
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	b006      	add	sp, #24
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2221      	movs	r2, #33	; 0x21
 8002ab8:	5c9b      	ldrb	r3, [r3, r2]
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d008      	beq.n	8002ad2 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2204      	movs	r2, #4
 8002ac4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2220      	movs	r2, #32
 8002aca:	2100      	movs	r1, #0
 8002acc:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e020      	b.n	8002b14 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	210e      	movs	r1, #14
 8002ade:	438a      	bics	r2, r1
 8002ae0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2101      	movs	r1, #1
 8002aee:	438a      	bics	r2, r1
 8002af0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afa:	2101      	movs	r1, #1
 8002afc:	4091      	lsls	r1, r2
 8002afe:	000a      	movs	r2, r1
 8002b00:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2221      	movs	r2, #33	; 0x21
 8002b06:	2101      	movs	r1, #1
 8002b08:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2220      	movs	r2, #32
 8002b0e:	2100      	movs	r1, #0
 8002b10:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	0018      	movs	r0, r3
 8002b16:	46bd      	mov	sp, r7
 8002b18:	b002      	add	sp, #8
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b24:	210f      	movs	r1, #15
 8002b26:	187b      	adds	r3, r7, r1
 8002b28:	2200      	movs	r2, #0
 8002b2a:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2221      	movs	r2, #33	; 0x21
 8002b30:	5c9b      	ldrb	r3, [r3, r2]
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d006      	beq.n	8002b46 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2204      	movs	r2, #4
 8002b3c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002b3e:	187b      	adds	r3, r7, r1
 8002b40:	2201      	movs	r2, #1
 8002b42:	701a      	strb	r2, [r3, #0]
 8002b44:	e028      	b.n	8002b98 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	210e      	movs	r1, #14
 8002b52:	438a      	bics	r2, r1
 8002b54:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2101      	movs	r1, #1
 8002b62:	438a      	bics	r2, r1
 8002b64:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6e:	2101      	movs	r1, #1
 8002b70:	4091      	lsls	r1, r2
 8002b72:	000a      	movs	r2, r1
 8002b74:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2221      	movs	r2, #33	; 0x21
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2220      	movs	r2, #32
 8002b82:	2100      	movs	r1, #0
 8002b84:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d004      	beq.n	8002b98 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	0010      	movs	r0, r2
 8002b96:	4798      	blx	r3
    } 
  }
  return status;
 8002b98:	230f      	movs	r3, #15
 8002b9a:	18fb      	adds	r3, r7, r3
 8002b9c:	781b      	ldrb	r3, [r3, #0]
}
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	b004      	add	sp, #16
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b084      	sub	sp, #16
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	2204      	movs	r2, #4
 8002bc4:	409a      	lsls	r2, r3
 8002bc6:	0013      	movs	r3, r2
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	d024      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x72>
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	2204      	movs	r2, #4
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	d020      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2220      	movs	r2, #32
 8002bde:	4013      	ands	r3, r2
 8002be0:	d107      	bne.n	8002bf2 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2104      	movs	r1, #4
 8002bee:	438a      	bics	r2, r1
 8002bf0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bfa:	2104      	movs	r1, #4
 8002bfc:	4091      	lsls	r1, r2
 8002bfe:	000a      	movs	r2, r1
 8002c00:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d100      	bne.n	8002c0c <HAL_DMA_IRQHandler+0x66>
 8002c0a:	e06a      	b.n	8002ce2 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	0010      	movs	r0, r2
 8002c14:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002c16:	e064      	b.n	8002ce2 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	409a      	lsls	r2, r3
 8002c20:	0013      	movs	r3, r2
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	4013      	ands	r3, r2
 8002c26:	d02b      	beq.n	8002c80 <HAL_DMA_IRQHandler+0xda>
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	d027      	beq.n	8002c80 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2220      	movs	r2, #32
 8002c38:	4013      	ands	r3, r2
 8002c3a:	d10b      	bne.n	8002c54 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	210a      	movs	r1, #10
 8002c48:	438a      	bics	r2, r1
 8002c4a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2221      	movs	r2, #33	; 0x21
 8002c50:	2101      	movs	r1, #1
 8002c52:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c5c:	2102      	movs	r1, #2
 8002c5e:	4091      	lsls	r1, r2
 8002c60:	000a      	movs	r2, r1
 8002c62:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2220      	movs	r2, #32
 8002c68:	2100      	movs	r1, #0
 8002c6a:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d036      	beq.n	8002ce2 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	0010      	movs	r0, r2
 8002c7c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002c7e:	e030      	b.n	8002ce2 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c84:	2208      	movs	r2, #8
 8002c86:	409a      	lsls	r2, r3
 8002c88:	0013      	movs	r3, r2
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	d028      	beq.n	8002ce2 <HAL_DMA_IRQHandler+0x13c>
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	2208      	movs	r2, #8
 8002c94:	4013      	ands	r3, r2
 8002c96:	d024      	beq.n	8002ce2 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	210e      	movs	r1, #14
 8002ca4:	438a      	bics	r2, r1
 8002ca6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	4091      	lsls	r1, r2
 8002cb4:	000a      	movs	r2, r1
 8002cb6:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2221      	movs	r2, #33	; 0x21
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2220      	movs	r2, #32
 8002cca:	2100      	movs	r1, #0
 8002ccc:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d005      	beq.n	8002ce2 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	0010      	movs	r0, r2
 8002cde:	4798      	blx	r3
    }
   }
}  
 8002ce0:	e7ff      	b.n	8002ce2 <HAL_DMA_IRQHandler+0x13c>
 8002ce2:	46c0      	nop			; (mov r8, r8)
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	b004      	add	sp, #16
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b084      	sub	sp, #16
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	60f8      	str	r0, [r7, #12]
 8002cf2:	60b9      	str	r1, [r7, #8]
 8002cf4:	607a      	str	r2, [r7, #4]
 8002cf6:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d00:	2101      	movs	r1, #1
 8002d02:	4091      	lsls	r1, r2
 8002d04:	000a      	movs	r2, r1
 8002d06:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	2b10      	cmp	r3, #16
 8002d16:	d108      	bne.n	8002d2a <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68ba      	ldr	r2, [r7, #8]
 8002d26:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d28:	e007      	b.n	8002d3a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	60da      	str	r2, [r3, #12]
}
 8002d3a:	46c0      	nop			; (mov r8, r8)
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	b004      	add	sp, #16
 8002d40:	bd80      	pop	{r7, pc}
	...

08002d44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a08      	ldr	r2, [pc, #32]	; (8002d74 <DMA_CalcBaseAndBitshift+0x30>)
 8002d52:	4694      	mov	ip, r2
 8002d54:	4463      	add	r3, ip
 8002d56:	2114      	movs	r1, #20
 8002d58:	0018      	movs	r0, r3
 8002d5a:	f7fd f9d5 	bl	8000108 <__udivsi3>
 8002d5e:	0003      	movs	r3, r0
 8002d60:	009a      	lsls	r2, r3, #2
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a03      	ldr	r2, [pc, #12]	; (8002d78 <DMA_CalcBaseAndBitshift+0x34>)
 8002d6a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002d6c:	46c0      	nop			; (mov r8, r8)
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	b002      	add	sp, #8
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	bffdfff8 	.word	0xbffdfff8
 8002d78:	40020000 	.word	0x40020000

08002d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d86:	2300      	movs	r3, #0
 8002d88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d8a:	e14f      	b.n	800302c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2101      	movs	r1, #1
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	4091      	lsls	r1, r2
 8002d96:	000a      	movs	r2, r1
 8002d98:	4013      	ands	r3, r2
 8002d9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d100      	bne.n	8002da4 <HAL_GPIO_Init+0x28>
 8002da2:	e140      	b.n	8003026 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	2203      	movs	r2, #3
 8002daa:	4013      	ands	r3, r2
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d005      	beq.n	8002dbc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	2203      	movs	r2, #3
 8002db6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d130      	bne.n	8002e1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	2203      	movs	r2, #3
 8002dc8:	409a      	lsls	r2, r3
 8002dca:	0013      	movs	r3, r2
 8002dcc:	43da      	mvns	r2, r3
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	68da      	ldr	r2, [r3, #12]
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	409a      	lsls	r2, r3
 8002dde:	0013      	movs	r3, r2
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002df2:	2201      	movs	r2, #1
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	409a      	lsls	r2, r3
 8002df8:	0013      	movs	r3, r2
 8002dfa:	43da      	mvns	r2, r3
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	091b      	lsrs	r3, r3, #4
 8002e08:	2201      	movs	r2, #1
 8002e0a:	401a      	ands	r2, r3
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	409a      	lsls	r2, r3
 8002e10:	0013      	movs	r3, r2
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	2203      	movs	r2, #3
 8002e24:	4013      	ands	r3, r2
 8002e26:	2b03      	cmp	r3, #3
 8002e28:	d017      	beq.n	8002e5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	2203      	movs	r2, #3
 8002e36:	409a      	lsls	r2, r3
 8002e38:	0013      	movs	r3, r2
 8002e3a:	43da      	mvns	r2, r3
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	689a      	ldr	r2, [r3, #8]
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	409a      	lsls	r2, r3
 8002e4c:	0013      	movs	r3, r2
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	2203      	movs	r2, #3
 8002e60:	4013      	ands	r3, r2
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d123      	bne.n	8002eae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	08da      	lsrs	r2, r3, #3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	3208      	adds	r2, #8
 8002e6e:	0092      	lsls	r2, r2, #2
 8002e70:	58d3      	ldr	r3, [r2, r3]
 8002e72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	2207      	movs	r2, #7
 8002e78:	4013      	ands	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	220f      	movs	r2, #15
 8002e7e:	409a      	lsls	r2, r3
 8002e80:	0013      	movs	r3, r2
 8002e82:	43da      	mvns	r2, r3
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	4013      	ands	r3, r2
 8002e88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	691a      	ldr	r2, [r3, #16]
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	2107      	movs	r1, #7
 8002e92:	400b      	ands	r3, r1
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	409a      	lsls	r2, r3
 8002e98:	0013      	movs	r3, r2
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	08da      	lsrs	r2, r3, #3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3208      	adds	r2, #8
 8002ea8:	0092      	lsls	r2, r2, #2
 8002eaa:	6939      	ldr	r1, [r7, #16]
 8002eac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	2203      	movs	r2, #3
 8002eba:	409a      	lsls	r2, r3
 8002ebc:	0013      	movs	r3, r2
 8002ebe:	43da      	mvns	r2, r3
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2203      	movs	r2, #3
 8002ecc:	401a      	ands	r2, r3
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	409a      	lsls	r2, r3
 8002ed4:	0013      	movs	r3, r2
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685a      	ldr	r2, [r3, #4]
 8002ee6:	23c0      	movs	r3, #192	; 0xc0
 8002ee8:	029b      	lsls	r3, r3, #10
 8002eea:	4013      	ands	r3, r2
 8002eec:	d100      	bne.n	8002ef0 <HAL_GPIO_Init+0x174>
 8002eee:	e09a      	b.n	8003026 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ef0:	4b54      	ldr	r3, [pc, #336]	; (8003044 <HAL_GPIO_Init+0x2c8>)
 8002ef2:	699a      	ldr	r2, [r3, #24]
 8002ef4:	4b53      	ldr	r3, [pc, #332]	; (8003044 <HAL_GPIO_Init+0x2c8>)
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	619a      	str	r2, [r3, #24]
 8002efc:	4b51      	ldr	r3, [pc, #324]	; (8003044 <HAL_GPIO_Init+0x2c8>)
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	2201      	movs	r2, #1
 8002f02:	4013      	ands	r3, r2
 8002f04:	60bb      	str	r3, [r7, #8]
 8002f06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f08:	4a4f      	ldr	r2, [pc, #316]	; (8003048 <HAL_GPIO_Init+0x2cc>)
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	089b      	lsrs	r3, r3, #2
 8002f0e:	3302      	adds	r3, #2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	589b      	ldr	r3, [r3, r2]
 8002f14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	2203      	movs	r2, #3
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	220f      	movs	r2, #15
 8002f20:	409a      	lsls	r2, r3
 8002f22:	0013      	movs	r3, r2
 8002f24:	43da      	mvns	r2, r3
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	2390      	movs	r3, #144	; 0x90
 8002f30:	05db      	lsls	r3, r3, #23
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d013      	beq.n	8002f5e <HAL_GPIO_Init+0x1e2>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a44      	ldr	r2, [pc, #272]	; (800304c <HAL_GPIO_Init+0x2d0>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d00d      	beq.n	8002f5a <HAL_GPIO_Init+0x1de>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a43      	ldr	r2, [pc, #268]	; (8003050 <HAL_GPIO_Init+0x2d4>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d007      	beq.n	8002f56 <HAL_GPIO_Init+0x1da>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a42      	ldr	r2, [pc, #264]	; (8003054 <HAL_GPIO_Init+0x2d8>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d101      	bne.n	8002f52 <HAL_GPIO_Init+0x1d6>
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e006      	b.n	8002f60 <HAL_GPIO_Init+0x1e4>
 8002f52:	2305      	movs	r3, #5
 8002f54:	e004      	b.n	8002f60 <HAL_GPIO_Init+0x1e4>
 8002f56:	2302      	movs	r3, #2
 8002f58:	e002      	b.n	8002f60 <HAL_GPIO_Init+0x1e4>
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e000      	b.n	8002f60 <HAL_GPIO_Init+0x1e4>
 8002f5e:	2300      	movs	r3, #0
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	2103      	movs	r1, #3
 8002f64:	400a      	ands	r2, r1
 8002f66:	0092      	lsls	r2, r2, #2
 8002f68:	4093      	lsls	r3, r2
 8002f6a:	693a      	ldr	r2, [r7, #16]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f70:	4935      	ldr	r1, [pc, #212]	; (8003048 <HAL_GPIO_Init+0x2cc>)
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	089b      	lsrs	r3, r3, #2
 8002f76:	3302      	adds	r3, #2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f7e:	4b36      	ldr	r3, [pc, #216]	; (8003058 <HAL_GPIO_Init+0x2dc>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	43da      	mvns	r2, r3
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	2380      	movs	r3, #128	; 0x80
 8002f94:	025b      	lsls	r3, r3, #9
 8002f96:	4013      	ands	r3, r2
 8002f98:	d003      	beq.n	8002fa2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002fa2:	4b2d      	ldr	r3, [pc, #180]	; (8003058 <HAL_GPIO_Init+0x2dc>)
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002fa8:	4b2b      	ldr	r3, [pc, #172]	; (8003058 <HAL_GPIO_Init+0x2dc>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	43da      	mvns	r2, r3
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	2380      	movs	r3, #128	; 0x80
 8002fbe:	029b      	lsls	r3, r3, #10
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	d003      	beq.n	8002fcc <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002fcc:	4b22      	ldr	r3, [pc, #136]	; (8003058 <HAL_GPIO_Init+0x2dc>)
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fd2:	4b21      	ldr	r3, [pc, #132]	; (8003058 <HAL_GPIO_Init+0x2dc>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	43da      	mvns	r2, r3
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685a      	ldr	r2, [r3, #4]
 8002fe6:	2380      	movs	r3, #128	; 0x80
 8002fe8:	035b      	lsls	r3, r3, #13
 8002fea:	4013      	ands	r3, r2
 8002fec:	d003      	beq.n	8002ff6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002ff6:	4b18      	ldr	r3, [pc, #96]	; (8003058 <HAL_GPIO_Init+0x2dc>)
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002ffc:	4b16      	ldr	r3, [pc, #88]	; (8003058 <HAL_GPIO_Init+0x2dc>)
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	43da      	mvns	r2, r3
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	4013      	ands	r3, r2
 800300a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	2380      	movs	r3, #128	; 0x80
 8003012:	039b      	lsls	r3, r3, #14
 8003014:	4013      	ands	r3, r2
 8003016:	d003      	beq.n	8003020 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	4313      	orrs	r3, r2
 800301e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003020:	4b0d      	ldr	r3, [pc, #52]	; (8003058 <HAL_GPIO_Init+0x2dc>)
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	3301      	adds	r3, #1
 800302a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	40da      	lsrs	r2, r3
 8003034:	1e13      	subs	r3, r2, #0
 8003036:	d000      	beq.n	800303a <HAL_GPIO_Init+0x2be>
 8003038:	e6a8      	b.n	8002d8c <HAL_GPIO_Init+0x10>
  } 
}
 800303a:	46c0      	nop			; (mov r8, r8)
 800303c:	46c0      	nop			; (mov r8, r8)
 800303e:	46bd      	mov	sp, r7
 8003040:	b006      	add	sp, #24
 8003042:	bd80      	pop	{r7, pc}
 8003044:	40021000 	.word	0x40021000
 8003048:	40010000 	.word	0x40010000
 800304c:	48000400 	.word	0x48000400
 8003050:	48000800 	.word	0x48000800
 8003054:	48000c00 	.word	0x48000c00
 8003058:	40010400 	.word	0x40010400

0800305c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	000a      	movs	r2, r1
 8003066:	1cbb      	adds	r3, r7, #2
 8003068:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	1cba      	adds	r2, r7, #2
 8003070:	8812      	ldrh	r2, [r2, #0]
 8003072:	4013      	ands	r3, r2
 8003074:	d004      	beq.n	8003080 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003076:	230f      	movs	r3, #15
 8003078:	18fb      	adds	r3, r7, r3
 800307a:	2201      	movs	r2, #1
 800307c:	701a      	strb	r2, [r3, #0]
 800307e:	e003      	b.n	8003088 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003080:	230f      	movs	r3, #15
 8003082:	18fb      	adds	r3, r7, r3
 8003084:	2200      	movs	r2, #0
 8003086:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003088:	230f      	movs	r3, #15
 800308a:	18fb      	adds	r3, r7, r3
 800308c:	781b      	ldrb	r3, [r3, #0]
  }
 800308e:	0018      	movs	r0, r3
 8003090:	46bd      	mov	sp, r7
 8003092:	b004      	add	sp, #16
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b082      	sub	sp, #8
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
 800309e:	0008      	movs	r0, r1
 80030a0:	0011      	movs	r1, r2
 80030a2:	1cbb      	adds	r3, r7, #2
 80030a4:	1c02      	adds	r2, r0, #0
 80030a6:	801a      	strh	r2, [r3, #0]
 80030a8:	1c7b      	adds	r3, r7, #1
 80030aa:	1c0a      	adds	r2, r1, #0
 80030ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030ae:	1c7b      	adds	r3, r7, #1
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d004      	beq.n	80030c0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030b6:	1cbb      	adds	r3, r7, #2
 80030b8:	881a      	ldrh	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030be:	e003      	b.n	80030c8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030c0:	1cbb      	adds	r3, r7, #2
 80030c2:	881a      	ldrh	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030c8:	46c0      	nop			; (mov r8, r8)
 80030ca:	46bd      	mov	sp, r7
 80030cc:	b002      	add	sp, #8
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e082      	b.n	80031e8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2241      	movs	r2, #65	; 0x41
 80030e6:	5c9b      	ldrb	r3, [r3, r2]
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d107      	bne.n	80030fe <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2240      	movs	r2, #64	; 0x40
 80030f2:	2100      	movs	r1, #0
 80030f4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	0018      	movs	r0, r3
 80030fa:	f7fe fbe7 	bl	80018cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2241      	movs	r2, #65	; 0x41
 8003102:	2124      	movs	r1, #36	; 0x24
 8003104:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2101      	movs	r1, #1
 8003112:	438a      	bics	r2, r1
 8003114:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4934      	ldr	r1, [pc, #208]	; (80031f0 <HAL_I2C_Init+0x120>)
 8003120:	400a      	ands	r2, r1
 8003122:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689a      	ldr	r2, [r3, #8]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4931      	ldr	r1, [pc, #196]	; (80031f4 <HAL_I2C_Init+0x124>)
 8003130:	400a      	ands	r2, r1
 8003132:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d108      	bne.n	800314e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2180      	movs	r1, #128	; 0x80
 8003146:	0209      	lsls	r1, r1, #8
 8003148:	430a      	orrs	r2, r1
 800314a:	609a      	str	r2, [r3, #8]
 800314c:	e007      	b.n	800315e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	689a      	ldr	r2, [r3, #8]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2184      	movs	r1, #132	; 0x84
 8003158:	0209      	lsls	r1, r1, #8
 800315a:	430a      	orrs	r2, r1
 800315c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	2b02      	cmp	r3, #2
 8003164:	d104      	bne.n	8003170 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2280      	movs	r2, #128	; 0x80
 800316c:	0112      	lsls	r2, r2, #4
 800316e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	491f      	ldr	r1, [pc, #124]	; (80031f8 <HAL_I2C_Init+0x128>)
 800317c:	430a      	orrs	r2, r1
 800317e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68da      	ldr	r2, [r3, #12]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	491a      	ldr	r1, [pc, #104]	; (80031f4 <HAL_I2C_Init+0x124>)
 800318c:	400a      	ands	r2, r1
 800318e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	691a      	ldr	r2, [r3, #16]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	431a      	orrs	r2, r3
 800319a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	69d9      	ldr	r1, [r3, #28]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a1a      	ldr	r2, [r3, #32]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2101      	movs	r1, #1
 80031c6:	430a      	orrs	r2, r1
 80031c8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2241      	movs	r2, #65	; 0x41
 80031d4:	2120      	movs	r1, #32
 80031d6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2242      	movs	r2, #66	; 0x42
 80031e2:	2100      	movs	r1, #0
 80031e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	0018      	movs	r0, r3
 80031ea:	46bd      	mov	sp, r7
 80031ec:	b002      	add	sp, #8
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	f0ffffff 	.word	0xf0ffffff
 80031f4:	ffff7fff 	.word	0xffff7fff
 80031f8:	02008000 	.word	0x02008000

080031fc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80031fc:	b590      	push	{r4, r7, lr}
 80031fe:	b089      	sub	sp, #36	; 0x24
 8003200:	af02      	add	r7, sp, #8
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	0008      	movs	r0, r1
 8003206:	607a      	str	r2, [r7, #4]
 8003208:	0019      	movs	r1, r3
 800320a:	230a      	movs	r3, #10
 800320c:	18fb      	adds	r3, r7, r3
 800320e:	1c02      	adds	r2, r0, #0
 8003210:	801a      	strh	r2, [r3, #0]
 8003212:	2308      	movs	r3, #8
 8003214:	18fb      	adds	r3, r7, r3
 8003216:	1c0a      	adds	r2, r1, #0
 8003218:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2241      	movs	r2, #65	; 0x41
 800321e:	5c9b      	ldrb	r3, [r3, r2]
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b20      	cmp	r3, #32
 8003224:	d000      	beq.n	8003228 <HAL_I2C_Master_Transmit+0x2c>
 8003226:	e0e7      	b.n	80033f8 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2240      	movs	r2, #64	; 0x40
 800322c:	5c9b      	ldrb	r3, [r3, r2]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d101      	bne.n	8003236 <HAL_I2C_Master_Transmit+0x3a>
 8003232:	2302      	movs	r3, #2
 8003234:	e0e1      	b.n	80033fa <HAL_I2C_Master_Transmit+0x1fe>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2240      	movs	r2, #64	; 0x40
 800323a:	2101      	movs	r1, #1
 800323c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800323e:	f7fe fe07 	bl	8001e50 <HAL_GetTick>
 8003242:	0003      	movs	r3, r0
 8003244:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003246:	2380      	movs	r3, #128	; 0x80
 8003248:	0219      	lsls	r1, r3, #8
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	2319      	movs	r3, #25
 8003252:	2201      	movs	r2, #1
 8003254:	f000 fa04 	bl	8003660 <I2C_WaitOnFlagUntilTimeout>
 8003258:	1e03      	subs	r3, r0, #0
 800325a:	d001      	beq.n	8003260 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e0cc      	b.n	80033fa <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2241      	movs	r2, #65	; 0x41
 8003264:	2121      	movs	r1, #33	; 0x21
 8003266:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2242      	movs	r2, #66	; 0x42
 800326c:	2110      	movs	r1, #16
 800326e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2208      	movs	r2, #8
 8003280:	18ba      	adds	r2, r7, r2
 8003282:	8812      	ldrh	r2, [r2, #0]
 8003284:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003290:	b29b      	uxth	r3, r3
 8003292:	2bff      	cmp	r3, #255	; 0xff
 8003294:	d911      	bls.n	80032ba <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	22ff      	movs	r2, #255	; 0xff
 800329a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a0:	b2da      	uxtb	r2, r3
 80032a2:	2380      	movs	r3, #128	; 0x80
 80032a4:	045c      	lsls	r4, r3, #17
 80032a6:	230a      	movs	r3, #10
 80032a8:	18fb      	adds	r3, r7, r3
 80032aa:	8819      	ldrh	r1, [r3, #0]
 80032ac:	68f8      	ldr	r0, [r7, #12]
 80032ae:	4b55      	ldr	r3, [pc, #340]	; (8003404 <HAL_I2C_Master_Transmit+0x208>)
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	0023      	movs	r3, r4
 80032b4:	f000 fb74 	bl	80039a0 <I2C_TransferConfig>
 80032b8:	e075      	b.n	80033a6 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032be:	b29a      	uxth	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	2380      	movs	r3, #128	; 0x80
 80032cc:	049c      	lsls	r4, r3, #18
 80032ce:	230a      	movs	r3, #10
 80032d0:	18fb      	adds	r3, r7, r3
 80032d2:	8819      	ldrh	r1, [r3, #0]
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	4b4b      	ldr	r3, [pc, #300]	; (8003404 <HAL_I2C_Master_Transmit+0x208>)
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	0023      	movs	r3, r4
 80032dc:	f000 fb60 	bl	80039a0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80032e0:	e061      	b.n	80033a6 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	0018      	movs	r0, r3
 80032ea:	f000 f9f8 	bl	80036de <I2C_WaitOnTXISFlagUntilTimeout>
 80032ee:	1e03      	subs	r3, r0, #0
 80032f0:	d001      	beq.n	80032f6 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e081      	b.n	80033fa <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	781a      	ldrb	r2, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003306:	1c5a      	adds	r2, r3, #1
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003310:	b29b      	uxth	r3, r3
 8003312:	3b01      	subs	r3, #1
 8003314:	b29a      	uxth	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800331e:	3b01      	subs	r3, #1
 8003320:	b29a      	uxth	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800332a:	b29b      	uxth	r3, r3
 800332c:	2b00      	cmp	r3, #0
 800332e:	d03a      	beq.n	80033a6 <HAL_I2C_Master_Transmit+0x1aa>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003334:	2b00      	cmp	r3, #0
 8003336:	d136      	bne.n	80033a6 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003338:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	0013      	movs	r3, r2
 8003342:	2200      	movs	r2, #0
 8003344:	2180      	movs	r1, #128	; 0x80
 8003346:	f000 f98b 	bl	8003660 <I2C_WaitOnFlagUntilTimeout>
 800334a:	1e03      	subs	r3, r0, #0
 800334c:	d001      	beq.n	8003352 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e053      	b.n	80033fa <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003356:	b29b      	uxth	r3, r3
 8003358:	2bff      	cmp	r3, #255	; 0xff
 800335a:	d911      	bls.n	8003380 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	22ff      	movs	r2, #255	; 0xff
 8003360:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003366:	b2da      	uxtb	r2, r3
 8003368:	2380      	movs	r3, #128	; 0x80
 800336a:	045c      	lsls	r4, r3, #17
 800336c:	230a      	movs	r3, #10
 800336e:	18fb      	adds	r3, r7, r3
 8003370:	8819      	ldrh	r1, [r3, #0]
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	2300      	movs	r3, #0
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	0023      	movs	r3, r4
 800337a:	f000 fb11 	bl	80039a0 <I2C_TransferConfig>
 800337e:	e012      	b.n	80033a6 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003384:	b29a      	uxth	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800338e:	b2da      	uxtb	r2, r3
 8003390:	2380      	movs	r3, #128	; 0x80
 8003392:	049c      	lsls	r4, r3, #18
 8003394:	230a      	movs	r3, #10
 8003396:	18fb      	adds	r3, r7, r3
 8003398:	8819      	ldrh	r1, [r3, #0]
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	2300      	movs	r3, #0
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	0023      	movs	r3, r4
 80033a2:	f000 fafd 	bl	80039a0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d198      	bne.n	80032e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	0018      	movs	r0, r3
 80033b8:	f000 f9d0 	bl	800375c <I2C_WaitOnSTOPFlagUntilTimeout>
 80033bc:	1e03      	subs	r3, r0, #0
 80033be:	d001      	beq.n	80033c4 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e01a      	b.n	80033fa <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2220      	movs	r2, #32
 80033ca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	685a      	ldr	r2, [r3, #4]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	490c      	ldr	r1, [pc, #48]	; (8003408 <HAL_I2C_Master_Transmit+0x20c>)
 80033d8:	400a      	ands	r2, r1
 80033da:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2241      	movs	r2, #65	; 0x41
 80033e0:	2120      	movs	r1, #32
 80033e2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2242      	movs	r2, #66	; 0x42
 80033e8:	2100      	movs	r1, #0
 80033ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2240      	movs	r2, #64	; 0x40
 80033f0:	2100      	movs	r1, #0
 80033f2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80033f4:	2300      	movs	r3, #0
 80033f6:	e000      	b.n	80033fa <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80033f8:	2302      	movs	r3, #2
  }
}
 80033fa:	0018      	movs	r0, r3
 80033fc:	46bd      	mov	sp, r7
 80033fe:	b007      	add	sp, #28
 8003400:	bd90      	pop	{r4, r7, pc}
 8003402:	46c0      	nop			; (mov r8, r8)
 8003404:	80002000 	.word	0x80002000
 8003408:	fe00e800 	.word	0xfe00e800

0800340c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800340c:	b590      	push	{r4, r7, lr}
 800340e:	b089      	sub	sp, #36	; 0x24
 8003410:	af02      	add	r7, sp, #8
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	0008      	movs	r0, r1
 8003416:	607a      	str	r2, [r7, #4]
 8003418:	0019      	movs	r1, r3
 800341a:	230a      	movs	r3, #10
 800341c:	18fb      	adds	r3, r7, r3
 800341e:	1c02      	adds	r2, r0, #0
 8003420:	801a      	strh	r2, [r3, #0]
 8003422:	2308      	movs	r3, #8
 8003424:	18fb      	adds	r3, r7, r3
 8003426:	1c0a      	adds	r2, r1, #0
 8003428:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2241      	movs	r2, #65	; 0x41
 800342e:	5c9b      	ldrb	r3, [r3, r2]
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b20      	cmp	r3, #32
 8003434:	d000      	beq.n	8003438 <HAL_I2C_Master_Receive+0x2c>
 8003436:	e0e8      	b.n	800360a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2240      	movs	r2, #64	; 0x40
 800343c:	5c9b      	ldrb	r3, [r3, r2]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d101      	bne.n	8003446 <HAL_I2C_Master_Receive+0x3a>
 8003442:	2302      	movs	r3, #2
 8003444:	e0e2      	b.n	800360c <HAL_I2C_Master_Receive+0x200>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2240      	movs	r2, #64	; 0x40
 800344a:	2101      	movs	r1, #1
 800344c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800344e:	f7fe fcff 	bl	8001e50 <HAL_GetTick>
 8003452:	0003      	movs	r3, r0
 8003454:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003456:	2380      	movs	r3, #128	; 0x80
 8003458:	0219      	lsls	r1, r3, #8
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	9300      	str	r3, [sp, #0]
 8003460:	2319      	movs	r3, #25
 8003462:	2201      	movs	r2, #1
 8003464:	f000 f8fc 	bl	8003660 <I2C_WaitOnFlagUntilTimeout>
 8003468:	1e03      	subs	r3, r0, #0
 800346a:	d001      	beq.n	8003470 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e0cd      	b.n	800360c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2241      	movs	r2, #65	; 0x41
 8003474:	2122      	movs	r1, #34	; 0x22
 8003476:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2242      	movs	r2, #66	; 0x42
 800347c:	2110      	movs	r1, #16
 800347e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2208      	movs	r2, #8
 8003490:	18ba      	adds	r2, r7, r2
 8003492:	8812      	ldrh	r2, [r2, #0]
 8003494:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	2bff      	cmp	r3, #255	; 0xff
 80034a4:	d911      	bls.n	80034ca <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	22ff      	movs	r2, #255	; 0xff
 80034aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b0:	b2da      	uxtb	r2, r3
 80034b2:	2380      	movs	r3, #128	; 0x80
 80034b4:	045c      	lsls	r4, r3, #17
 80034b6:	230a      	movs	r3, #10
 80034b8:	18fb      	adds	r3, r7, r3
 80034ba:	8819      	ldrh	r1, [r3, #0]
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	4b55      	ldr	r3, [pc, #340]	; (8003614 <HAL_I2C_Master_Receive+0x208>)
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	0023      	movs	r3, r4
 80034c4:	f000 fa6c 	bl	80039a0 <I2C_TransferConfig>
 80034c8:	e076      	b.n	80035b8 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d8:	b2da      	uxtb	r2, r3
 80034da:	2380      	movs	r3, #128	; 0x80
 80034dc:	049c      	lsls	r4, r3, #18
 80034de:	230a      	movs	r3, #10
 80034e0:	18fb      	adds	r3, r7, r3
 80034e2:	8819      	ldrh	r1, [r3, #0]
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	4b4b      	ldr	r3, [pc, #300]	; (8003614 <HAL_I2C_Master_Receive+0x208>)
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	0023      	movs	r3, r4
 80034ec:	f000 fa58 	bl	80039a0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80034f0:	e062      	b.n	80035b8 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	0018      	movs	r0, r3
 80034fa:	f000 f96b 	bl	80037d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80034fe:	1e03      	subs	r3, r0, #0
 8003500:	d001      	beq.n	8003506 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e082      	b.n	800360c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	b2d2      	uxtb	r2, r2
 8003512:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003518:	1c5a      	adds	r2, r3, #1
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003522:	3b01      	subs	r3, #1
 8003524:	b29a      	uxth	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800352e:	b29b      	uxth	r3, r3
 8003530:	3b01      	subs	r3, #1
 8003532:	b29a      	uxth	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353c:	b29b      	uxth	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d03a      	beq.n	80035b8 <HAL_I2C_Master_Receive+0x1ac>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003546:	2b00      	cmp	r3, #0
 8003548:	d136      	bne.n	80035b8 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800354a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	0013      	movs	r3, r2
 8003554:	2200      	movs	r2, #0
 8003556:	2180      	movs	r1, #128	; 0x80
 8003558:	f000 f882 	bl	8003660 <I2C_WaitOnFlagUntilTimeout>
 800355c:	1e03      	subs	r3, r0, #0
 800355e:	d001      	beq.n	8003564 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e053      	b.n	800360c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003568:	b29b      	uxth	r3, r3
 800356a:	2bff      	cmp	r3, #255	; 0xff
 800356c:	d911      	bls.n	8003592 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	22ff      	movs	r2, #255	; 0xff
 8003572:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003578:	b2da      	uxtb	r2, r3
 800357a:	2380      	movs	r3, #128	; 0x80
 800357c:	045c      	lsls	r4, r3, #17
 800357e:	230a      	movs	r3, #10
 8003580:	18fb      	adds	r3, r7, r3
 8003582:	8819      	ldrh	r1, [r3, #0]
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	2300      	movs	r3, #0
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	0023      	movs	r3, r4
 800358c:	f000 fa08 	bl	80039a0 <I2C_TransferConfig>
 8003590:	e012      	b.n	80035b8 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003596:	b29a      	uxth	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a0:	b2da      	uxtb	r2, r3
 80035a2:	2380      	movs	r3, #128	; 0x80
 80035a4:	049c      	lsls	r4, r3, #18
 80035a6:	230a      	movs	r3, #10
 80035a8:	18fb      	adds	r3, r7, r3
 80035aa:	8819      	ldrh	r1, [r3, #0]
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	2300      	movs	r3, #0
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	0023      	movs	r3, r4
 80035b4:	f000 f9f4 	bl	80039a0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035bc:	b29b      	uxth	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d197      	bne.n	80034f2 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	0018      	movs	r0, r3
 80035ca:	f000 f8c7 	bl	800375c <I2C_WaitOnSTOPFlagUntilTimeout>
 80035ce:	1e03      	subs	r3, r0, #0
 80035d0:	d001      	beq.n	80035d6 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e01a      	b.n	800360c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2220      	movs	r2, #32
 80035dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	685a      	ldr	r2, [r3, #4]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	490b      	ldr	r1, [pc, #44]	; (8003618 <HAL_I2C_Master_Receive+0x20c>)
 80035ea:	400a      	ands	r2, r1
 80035ec:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2241      	movs	r2, #65	; 0x41
 80035f2:	2120      	movs	r1, #32
 80035f4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2242      	movs	r2, #66	; 0x42
 80035fa:	2100      	movs	r1, #0
 80035fc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2240      	movs	r2, #64	; 0x40
 8003602:	2100      	movs	r1, #0
 8003604:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003606:	2300      	movs	r3, #0
 8003608:	e000      	b.n	800360c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800360a:	2302      	movs	r3, #2
  }
}
 800360c:	0018      	movs	r0, r3
 800360e:	46bd      	mov	sp, r7
 8003610:	b007      	add	sp, #28
 8003612:	bd90      	pop	{r4, r7, pc}
 8003614:	80002400 	.word	0x80002400
 8003618:	fe00e800 	.word	0xfe00e800

0800361c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	2202      	movs	r2, #2
 800362c:	4013      	ands	r3, r2
 800362e:	2b02      	cmp	r3, #2
 8003630:	d103      	bne.n	800363a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2200      	movs	r2, #0
 8003638:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	2201      	movs	r2, #1
 8003642:	4013      	ands	r3, r2
 8003644:	2b01      	cmp	r3, #1
 8003646:	d007      	beq.n	8003658 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	699a      	ldr	r2, [r3, #24]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2101      	movs	r1, #1
 8003654:	430a      	orrs	r2, r1
 8003656:	619a      	str	r2, [r3, #24]
  }
}
 8003658:	46c0      	nop			; (mov r8, r8)
 800365a:	46bd      	mov	sp, r7
 800365c:	b002      	add	sp, #8
 800365e:	bd80      	pop	{r7, pc}

08003660 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	603b      	str	r3, [r7, #0]
 800366c:	1dfb      	adds	r3, r7, #7
 800366e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003670:	e021      	b.n	80036b6 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	3301      	adds	r3, #1
 8003676:	d01e      	beq.n	80036b6 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003678:	f7fe fbea 	bl	8001e50 <HAL_GetTick>
 800367c:	0002      	movs	r2, r0
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	429a      	cmp	r2, r3
 8003686:	d302      	bcc.n	800368e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d113      	bne.n	80036b6 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003692:	2220      	movs	r2, #32
 8003694:	431a      	orrs	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2241      	movs	r2, #65	; 0x41
 800369e:	2120      	movs	r1, #32
 80036a0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2242      	movs	r2, #66	; 0x42
 80036a6:	2100      	movs	r1, #0
 80036a8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2240      	movs	r2, #64	; 0x40
 80036ae:	2100      	movs	r1, #0
 80036b0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e00f      	b.n	80036d6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	68ba      	ldr	r2, [r7, #8]
 80036be:	4013      	ands	r3, r2
 80036c0:	68ba      	ldr	r2, [r7, #8]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	425a      	negs	r2, r3
 80036c6:	4153      	adcs	r3, r2
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	001a      	movs	r2, r3
 80036cc:	1dfb      	adds	r3, r7, #7
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d0ce      	beq.n	8003672 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	0018      	movs	r0, r3
 80036d8:	46bd      	mov	sp, r7
 80036da:	b004      	add	sp, #16
 80036dc:	bd80      	pop	{r7, pc}

080036de <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b084      	sub	sp, #16
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	60f8      	str	r0, [r7, #12]
 80036e6:	60b9      	str	r1, [r7, #8]
 80036e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036ea:	e02b      	b.n	8003744 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	68b9      	ldr	r1, [r7, #8]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	0018      	movs	r0, r3
 80036f4:	f000 f8da 	bl	80038ac <I2C_IsAcknowledgeFailed>
 80036f8:	1e03      	subs	r3, r0, #0
 80036fa:	d001      	beq.n	8003700 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e029      	b.n	8003754 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	3301      	adds	r3, #1
 8003704:	d01e      	beq.n	8003744 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003706:	f7fe fba3 	bl	8001e50 <HAL_GetTick>
 800370a:	0002      	movs	r2, r0
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	429a      	cmp	r2, r3
 8003714:	d302      	bcc.n	800371c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d113      	bne.n	8003744 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003720:	2220      	movs	r2, #32
 8003722:	431a      	orrs	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2241      	movs	r2, #65	; 0x41
 800372c:	2120      	movs	r1, #32
 800372e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2242      	movs	r2, #66	; 0x42
 8003734:	2100      	movs	r1, #0
 8003736:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2240      	movs	r2, #64	; 0x40
 800373c:	2100      	movs	r1, #0
 800373e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e007      	b.n	8003754 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	2202      	movs	r2, #2
 800374c:	4013      	ands	r3, r2
 800374e:	2b02      	cmp	r3, #2
 8003750:	d1cc      	bne.n	80036ec <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	0018      	movs	r0, r3
 8003756:	46bd      	mov	sp, r7
 8003758:	b004      	add	sp, #16
 800375a:	bd80      	pop	{r7, pc}

0800375c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003768:	e028      	b.n	80037bc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	68b9      	ldr	r1, [r7, #8]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	0018      	movs	r0, r3
 8003772:	f000 f89b 	bl	80038ac <I2C_IsAcknowledgeFailed>
 8003776:	1e03      	subs	r3, r0, #0
 8003778:	d001      	beq.n	800377e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e026      	b.n	80037cc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800377e:	f7fe fb67 	bl	8001e50 <HAL_GetTick>
 8003782:	0002      	movs	r2, r0
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	68ba      	ldr	r2, [r7, #8]
 800378a:	429a      	cmp	r2, r3
 800378c:	d302      	bcc.n	8003794 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d113      	bne.n	80037bc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003798:	2220      	movs	r2, #32
 800379a:	431a      	orrs	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2241      	movs	r2, #65	; 0x41
 80037a4:	2120      	movs	r1, #32
 80037a6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2242      	movs	r2, #66	; 0x42
 80037ac:	2100      	movs	r1, #0
 80037ae:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2240      	movs	r2, #64	; 0x40
 80037b4:	2100      	movs	r1, #0
 80037b6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e007      	b.n	80037cc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	2220      	movs	r2, #32
 80037c4:	4013      	ands	r3, r2
 80037c6:	2b20      	cmp	r3, #32
 80037c8:	d1cf      	bne.n	800376a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	0018      	movs	r0, r3
 80037ce:	46bd      	mov	sp, r7
 80037d0:	b004      	add	sp, #16
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037e0:	e055      	b.n	800388e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	68b9      	ldr	r1, [r7, #8]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	0018      	movs	r0, r3
 80037ea:	f000 f85f 	bl	80038ac <I2C_IsAcknowledgeFailed>
 80037ee:	1e03      	subs	r3, r0, #0
 80037f0:	d001      	beq.n	80037f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e053      	b.n	800389e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	2220      	movs	r2, #32
 80037fe:	4013      	ands	r3, r2
 8003800:	2b20      	cmp	r3, #32
 8003802:	d129      	bne.n	8003858 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	2204      	movs	r2, #4
 800380c:	4013      	ands	r3, r2
 800380e:	2b04      	cmp	r3, #4
 8003810:	d105      	bne.n	800381e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800381a:	2300      	movs	r3, #0
 800381c:	e03f      	b.n	800389e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2220      	movs	r2, #32
 8003824:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	685a      	ldr	r2, [r3, #4]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	491d      	ldr	r1, [pc, #116]	; (80038a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003832:	400a      	ands	r2, r1
 8003834:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2241      	movs	r2, #65	; 0x41
 8003840:	2120      	movs	r1, #32
 8003842:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2242      	movs	r2, #66	; 0x42
 8003848:	2100      	movs	r1, #0
 800384a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2240      	movs	r2, #64	; 0x40
 8003850:	2100      	movs	r1, #0
 8003852:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e022      	b.n	800389e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003858:	f7fe fafa 	bl	8001e50 <HAL_GetTick>
 800385c:	0002      	movs	r2, r0
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	68ba      	ldr	r2, [r7, #8]
 8003864:	429a      	cmp	r2, r3
 8003866:	d302      	bcc.n	800386e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10f      	bne.n	800388e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003872:	2220      	movs	r2, #32
 8003874:	431a      	orrs	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2241      	movs	r2, #65	; 0x41
 800387e:	2120      	movs	r1, #32
 8003880:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2240      	movs	r2, #64	; 0x40
 8003886:	2100      	movs	r1, #0
 8003888:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e007      	b.n	800389e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	2204      	movs	r2, #4
 8003896:	4013      	ands	r3, r2
 8003898:	2b04      	cmp	r3, #4
 800389a:	d1a2      	bne.n	80037e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	0018      	movs	r0, r3
 80038a0:	46bd      	mov	sp, r7
 80038a2:	b004      	add	sp, #16
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	46c0      	nop			; (mov r8, r8)
 80038a8:	fe00e800 	.word	0xfe00e800

080038ac <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	2210      	movs	r2, #16
 80038c0:	4013      	ands	r3, r2
 80038c2:	2b10      	cmp	r3, #16
 80038c4:	d164      	bne.n	8003990 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	685a      	ldr	r2, [r3, #4]
 80038cc:	2380      	movs	r3, #128	; 0x80
 80038ce:	049b      	lsls	r3, r3, #18
 80038d0:	401a      	ands	r2, r3
 80038d2:	2380      	movs	r3, #128	; 0x80
 80038d4:	049b      	lsls	r3, r3, #18
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d02b      	beq.n	8003932 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2180      	movs	r1, #128	; 0x80
 80038e6:	01c9      	lsls	r1, r1, #7
 80038e8:	430a      	orrs	r2, r1
 80038ea:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038ec:	e021      	b.n	8003932 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	3301      	adds	r3, #1
 80038f2:	d01e      	beq.n	8003932 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038f4:	f7fe faac 	bl	8001e50 <HAL_GetTick>
 80038f8:	0002      	movs	r2, r0
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	68ba      	ldr	r2, [r7, #8]
 8003900:	429a      	cmp	r2, r3
 8003902:	d302      	bcc.n	800390a <I2C_IsAcknowledgeFailed+0x5e>
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d113      	bne.n	8003932 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390e:	2220      	movs	r2, #32
 8003910:	431a      	orrs	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2241      	movs	r2, #65	; 0x41
 800391a:	2120      	movs	r1, #32
 800391c:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2242      	movs	r2, #66	; 0x42
 8003922:	2100      	movs	r1, #0
 8003924:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2240      	movs	r2, #64	; 0x40
 800392a:	2100      	movs	r1, #0
 800392c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e02f      	b.n	8003992 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	2220      	movs	r2, #32
 800393a:	4013      	ands	r3, r2
 800393c:	2b20      	cmp	r3, #32
 800393e:	d1d6      	bne.n	80038ee <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2210      	movs	r2, #16
 8003946:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2220      	movs	r2, #32
 800394e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	0018      	movs	r0, r3
 8003954:	f7ff fe62 	bl	800361c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	490e      	ldr	r1, [pc, #56]	; (800399c <I2C_IsAcknowledgeFailed+0xf0>)
 8003964:	400a      	ands	r2, r1
 8003966:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396c:	2204      	movs	r2, #4
 800396e:	431a      	orrs	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2241      	movs	r2, #65	; 0x41
 8003978:	2120      	movs	r1, #32
 800397a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2242      	movs	r2, #66	; 0x42
 8003980:	2100      	movs	r1, #0
 8003982:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2240      	movs	r2, #64	; 0x40
 8003988:	2100      	movs	r1, #0
 800398a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e000      	b.n	8003992 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	0018      	movs	r0, r3
 8003994:	46bd      	mov	sp, r7
 8003996:	b004      	add	sp, #16
 8003998:	bd80      	pop	{r7, pc}
 800399a:	46c0      	nop			; (mov r8, r8)
 800399c:	fe00e800 	.word	0xfe00e800

080039a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80039a0:	b590      	push	{r4, r7, lr}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	0008      	movs	r0, r1
 80039aa:	0011      	movs	r1, r2
 80039ac:	607b      	str	r3, [r7, #4]
 80039ae:	240a      	movs	r4, #10
 80039b0:	193b      	adds	r3, r7, r4
 80039b2:	1c02      	adds	r2, r0, #0
 80039b4:	801a      	strh	r2, [r3, #0]
 80039b6:	2009      	movs	r0, #9
 80039b8:	183b      	adds	r3, r7, r0
 80039ba:	1c0a      	adds	r2, r1, #0
 80039bc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	6a3a      	ldr	r2, [r7, #32]
 80039c6:	0d51      	lsrs	r1, r2, #21
 80039c8:	2280      	movs	r2, #128	; 0x80
 80039ca:	00d2      	lsls	r2, r2, #3
 80039cc:	400a      	ands	r2, r1
 80039ce:	490e      	ldr	r1, [pc, #56]	; (8003a08 <I2C_TransferConfig+0x68>)
 80039d0:	430a      	orrs	r2, r1
 80039d2:	43d2      	mvns	r2, r2
 80039d4:	401a      	ands	r2, r3
 80039d6:	0011      	movs	r1, r2
 80039d8:	193b      	adds	r3, r7, r4
 80039da:	881b      	ldrh	r3, [r3, #0]
 80039dc:	059b      	lsls	r3, r3, #22
 80039de:	0d9a      	lsrs	r2, r3, #22
 80039e0:	183b      	adds	r3, r7, r0
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	0418      	lsls	r0, r3, #16
 80039e6:	23ff      	movs	r3, #255	; 0xff
 80039e8:	041b      	lsls	r3, r3, #16
 80039ea:	4003      	ands	r3, r0
 80039ec:	431a      	orrs	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	431a      	orrs	r2, r3
 80039f2:	6a3b      	ldr	r3, [r7, #32]
 80039f4:	431a      	orrs	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80039fe:	46c0      	nop			; (mov r8, r8)
 8003a00:	46bd      	mov	sp, r7
 8003a02:	b005      	add	sp, #20
 8003a04:	bd90      	pop	{r4, r7, pc}
 8003a06:	46c0      	nop			; (mov r8, r8)
 8003a08:	03ff63ff 	.word	0x03ff63ff

08003a0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2241      	movs	r2, #65	; 0x41
 8003a1a:	5c9b      	ldrb	r3, [r3, r2]
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b20      	cmp	r3, #32
 8003a20:	d138      	bne.n	8003a94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2240      	movs	r2, #64	; 0x40
 8003a26:	5c9b      	ldrb	r3, [r3, r2]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d101      	bne.n	8003a30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	e032      	b.n	8003a96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2240      	movs	r2, #64	; 0x40
 8003a34:	2101      	movs	r1, #1
 8003a36:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2241      	movs	r2, #65	; 0x41
 8003a3c:	2124      	movs	r1, #36	; 0x24
 8003a3e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	438a      	bics	r2, r1
 8003a4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4911      	ldr	r1, [pc, #68]	; (8003aa0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003a5c:	400a      	ands	r2, r1
 8003a5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6819      	ldr	r1, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2241      	movs	r2, #65	; 0x41
 8003a84:	2120      	movs	r1, #32
 8003a86:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2240      	movs	r2, #64	; 0x40
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003a90:	2300      	movs	r3, #0
 8003a92:	e000      	b.n	8003a96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a94:	2302      	movs	r3, #2
  }
}
 8003a96:	0018      	movs	r0, r3
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	b002      	add	sp, #8
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	46c0      	nop			; (mov r8, r8)
 8003aa0:	ffffefff 	.word	0xffffefff

08003aa4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2241      	movs	r2, #65	; 0x41
 8003ab2:	5c9b      	ldrb	r3, [r3, r2]
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b20      	cmp	r3, #32
 8003ab8:	d139      	bne.n	8003b2e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2240      	movs	r2, #64	; 0x40
 8003abe:	5c9b      	ldrb	r3, [r3, r2]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d101      	bne.n	8003ac8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	e033      	b.n	8003b30 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2240      	movs	r2, #64	; 0x40
 8003acc:	2101      	movs	r1, #1
 8003ace:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2241      	movs	r2, #65	; 0x41
 8003ad4:	2124      	movs	r1, #36	; 0x24
 8003ad6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	438a      	bics	r2, r1
 8003ae6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4a11      	ldr	r2, [pc, #68]	; (8003b38 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003af4:	4013      	ands	r3, r2
 8003af6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	021b      	lsls	r3, r3, #8
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2101      	movs	r1, #1
 8003b16:	430a      	orrs	r2, r1
 8003b18:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2241      	movs	r2, #65	; 0x41
 8003b1e:	2120      	movs	r1, #32
 8003b20:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2240      	movs	r2, #64	; 0x40
 8003b26:	2100      	movs	r1, #0
 8003b28:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	e000      	b.n	8003b30 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b2e:	2302      	movs	r3, #2
  }
}
 8003b30:	0018      	movs	r0, r3
 8003b32:	46bd      	mov	sp, r7
 8003b34:	b004      	add	sp, #16
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	fffff0ff 	.word	0xfffff0ff

08003b3c <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI:Enter STOP mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter STOP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	000a      	movs	r2, r1
 8003b46:	1cfb      	adds	r3, r7, #3
 8003b48:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8003b4e:	4b13      	ldr	r3, [pc, #76]	; (8003b9c <HAL_PWR_EnterSTOPMode+0x60>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	60fb      	str	r3, [r7, #12]
  
  /* Clear PDDS and LPDS bits */
  tmpreg &= (uint32_t)~(PWR_CR_PDDS | PWR_CR_LPDS);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2203      	movs	r2, #3
 8003b58:	4393      	bics	r3, r2
 8003b5a:	60fb      	str	r3, [r7, #12]

  /* Set LPDS bit according to Regulator value */
  tmpreg |= Regulator;
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 8003b64:	4b0d      	ldr	r3, [pc, #52]	; (8003b9c <HAL_PWR_EnterSTOPMode+0x60>)
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8003b6a:	4b0d      	ldr	r3, [pc, #52]	; (8003ba0 <HAL_PWR_EnterSTOPMode+0x64>)
 8003b6c:	691a      	ldr	r2, [r3, #16]
 8003b6e:	4b0c      	ldr	r3, [pc, #48]	; (8003ba0 <HAL_PWR_EnterSTOPMode+0x64>)
 8003b70:	2104      	movs	r1, #4
 8003b72:	430a      	orrs	r2, r1
 8003b74:	611a      	str	r2, [r3, #16]

  /* Select STOP mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8003b76:	1cfb      	adds	r3, r7, #3
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d101      	bne.n	8003b82 <HAL_PWR_EnterSTOPMode+0x46>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003b7e:	bf30      	wfi
 8003b80:	e002      	b.n	8003b88 <HAL_PWR_EnterSTOPMode+0x4c>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003b82:	bf40      	sev
    __WFE();
 8003b84:	bf20      	wfe
    __WFE();
 8003b86:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 8003b88:	4b05      	ldr	r3, [pc, #20]	; (8003ba0 <HAL_PWR_EnterSTOPMode+0x64>)
 8003b8a:	691a      	ldr	r2, [r3, #16]
 8003b8c:	4b04      	ldr	r3, [pc, #16]	; (8003ba0 <HAL_PWR_EnterSTOPMode+0x64>)
 8003b8e:	2104      	movs	r1, #4
 8003b90:	438a      	bics	r2, r1
 8003b92:	611a      	str	r2, [r3, #16]
}
 8003b94:	46c0      	nop			; (mov r8, r8)
 8003b96:	46bd      	mov	sp, r7
 8003b98:	b004      	add	sp, #16
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40007000 	.word	0x40007000
 8003ba0:	e000ed00 	.word	0xe000ed00

08003ba4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b088      	sub	sp, #32
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e301      	b.n	80041ba <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	d100      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x1e>
 8003bc0:	e08d      	b.n	8003cde <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003bc2:	4bc3      	ldr	r3, [pc, #780]	; (8003ed0 <HAL_RCC_OscConfig+0x32c>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	220c      	movs	r2, #12
 8003bc8:	4013      	ands	r3, r2
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	d00e      	beq.n	8003bec <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003bce:	4bc0      	ldr	r3, [pc, #768]	; (8003ed0 <HAL_RCC_OscConfig+0x32c>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	220c      	movs	r2, #12
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	2b08      	cmp	r3, #8
 8003bd8:	d116      	bne.n	8003c08 <HAL_RCC_OscConfig+0x64>
 8003bda:	4bbd      	ldr	r3, [pc, #756]	; (8003ed0 <HAL_RCC_OscConfig+0x32c>)
 8003bdc:	685a      	ldr	r2, [r3, #4]
 8003bde:	2380      	movs	r3, #128	; 0x80
 8003be0:	025b      	lsls	r3, r3, #9
 8003be2:	401a      	ands	r2, r3
 8003be4:	2380      	movs	r3, #128	; 0x80
 8003be6:	025b      	lsls	r3, r3, #9
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d10d      	bne.n	8003c08 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bec:	4bb8      	ldr	r3, [pc, #736]	; (8003ed0 <HAL_RCC_OscConfig+0x32c>)
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	2380      	movs	r3, #128	; 0x80
 8003bf2:	029b      	lsls	r3, r3, #10
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	d100      	bne.n	8003bfa <HAL_RCC_OscConfig+0x56>
 8003bf8:	e070      	b.n	8003cdc <HAL_RCC_OscConfig+0x138>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d000      	beq.n	8003c04 <HAL_RCC_OscConfig+0x60>
 8003c02:	e06b      	b.n	8003cdc <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e2d8      	b.n	80041ba <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d107      	bne.n	8003c20 <HAL_RCC_OscConfig+0x7c>
 8003c10:	4baf      	ldr	r3, [pc, #700]	; (8003ed0 <HAL_RCC_OscConfig+0x32c>)
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	4bae      	ldr	r3, [pc, #696]	; (8003ed0 <HAL_RCC_OscConfig+0x32c>)
 8003c16:	2180      	movs	r1, #128	; 0x80
 8003c18:	0249      	lsls	r1, r1, #9
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	e02f      	b.n	8003c80 <HAL_RCC_OscConfig+0xdc>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d10c      	bne.n	8003c42 <HAL_RCC_OscConfig+0x9e>
 8003c28:	4ba9      	ldr	r3, [pc, #676]	; (8003ed0 <HAL_RCC_OscConfig+0x32c>)
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	4ba8      	ldr	r3, [pc, #672]	; (8003ed0 <HAL_RCC_OscConfig+0x32c>)
 8003c2e:	49a9      	ldr	r1, [pc, #676]	; (8003ed4 <HAL_RCC_OscConfig+0x330>)
 8003c30:	400a      	ands	r2, r1
 8003c32:	601a      	str	r2, [r3, #0]
 8003c34:	4ba6      	ldr	r3, [pc, #664]	; (8003ed0 <HAL_RCC_OscConfig+0x32c>)
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	4ba5      	ldr	r3, [pc, #660]	; (8003ed0 <HAL_RCC_OscConfig+0x32c>)
 8003c3a:	49a7      	ldr	r1, [pc, #668]	; (8003ed8 <HAL_RCC_OscConfig+0x334>)
 8003c3c:	400a      	ands	r2, r1
 8003c3e:	601a      	str	r2, [r3, #0]
 8003c40:	e01e      	b.n	8003c80 <HAL_RCC_OscConfig+0xdc>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	2b05      	cmp	r3, #5
 8003c48:	d10e      	bne.n	8003c68 <HAL_RCC_OscConfig+0xc4>
 8003c4a:	4ba1      	ldr	r3, [pc, #644]	; (8003ed0 <HAL_RCC_OscConfig+0x32c>)
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	4ba0      	ldr	r3, [pc, #640]	; (8003ed0 <HAL_RCC_OscConfig+0x32c>)
 8003c50:	2180      	movs	r1, #128	; 0x80
 8003c52:	02c9      	lsls	r1, r1, #11
 8003c54:	430a      	orrs	r2, r1
 8003c56:	601a      	str	r2, [r3, #0]
 8003c58:	4b9d      	ldr	r3, [pc, #628]	; (8003ed0 <HAL_RCC_OscConfig+0x32c>)
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	4b9c      	ldr	r3, [pc, #624]	; (8003ed0 <HAL_RCC_OscConfig+0x32c>)
 8003c5e:	2180      	movs	r1, #128	; 0x80
 8003c60:	0249      	lsls	r1, r1, #9
 8003c62:	430a      	orrs	r2, r1
 8003c64:	601a      	str	r2, [r3, #0]
 8003c66:	e00b      	b.n	8003c80 <HAL_RCC_OscConfig+0xdc>
 8003c68:	4b99      	ldr	r3, [pc, #612]	; (8003ed0 <HAL_RCC_OscConfig+0x32c>)
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	4b98      	ldr	r3, [pc, #608]	; (8003ed0 <HAL_RCC_OscConfig+0x32c>)
 8003c6e:	4999      	ldr	r1, [pc, #612]	; (8003ed4 <HAL_RCC_OscConfig+0x330>)
 8003c70:	400a      	ands	r2, r1
 8003c72:	601a      	str	r2, [r3, #0]
 8003c74:	4b96      	ldr	r3, [pc, #600]	; (8003ed0 <HAL_RCC_OscConfig+0x32c>)
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	4b95      	ldr	r3, [pc, #596]	; (8003ed0 <HAL_RCC_OscConfig+0x32c>)
 8003c7a:	4997      	ldr	r1, [pc, #604]	; (8003ed8 <HAL_RCC_OscConfig+0x334>)
 8003c7c:	400a      	ands	r2, r1
 8003c7e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d014      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c88:	f7fe f8e2 	bl	8001e50 <HAL_GetTick>
 8003c8c:	0003      	movs	r3, r0
 8003c8e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c90:	e008      	b.n	8003ca4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c92:	f7fe f8dd 	bl	8001e50 <HAL_GetTick>
 8003c96:	0002      	movs	r2, r0
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	2b64      	cmp	r3, #100	; 0x64
 8003c9e:	d901      	bls.n	8003ca4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e28a      	b.n	80041ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ca4:	4b8a      	ldr	r3, [pc, #552]	; (8003ed0 <HAL_RCC_OscConfig+0x32c>)
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	2380      	movs	r3, #128	; 0x80
 8003caa:	029b      	lsls	r3, r3, #10
 8003cac:	4013      	ands	r3, r2
 8003cae:	d0f0      	beq.n	8003c92 <HAL_RCC_OscConfig+0xee>
 8003cb0:	e015      	b.n	8003cde <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb2:	f7fe f8cd 	bl	8001e50 <HAL_GetTick>
 8003cb6:	0003      	movs	r3, r0
 8003cb8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cba:	e008      	b.n	8003cce <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cbc:	f7fe f8c8 	bl	8001e50 <HAL_GetTick>
 8003cc0:	0002      	movs	r2, r0
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b64      	cmp	r3, #100	; 0x64
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e275      	b.n	80041ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cce:	4b80      	ldr	r3, [pc, #512]	; (8003ed0 <HAL_RCC_OscConfig+0x32c>)
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	2380      	movs	r3, #128	; 0x80
 8003cd4:	029b      	lsls	r3, r3, #10
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	d1f0      	bne.n	8003cbc <HAL_RCC_OscConfig+0x118>
 8003cda:	e000      	b.n	8003cde <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cdc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	d100      	bne.n	8003cea <HAL_RCC_OscConfig+0x146>
 8003ce8:	e069      	b.n	8003dbe <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003cea:	4b79      	ldr	r3, [pc, #484]	; (8003ed0 <HAL_RCC_OscConfig+0x32c>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	220c      	movs	r2, #12
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	d00b      	beq.n	8003d0c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003cf4:	4b76      	ldr	r3, [pc, #472]	; (8003ed0 <HAL_RCC_OscConfig+0x32c>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	220c      	movs	r2, #12
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	2b08      	cmp	r3, #8
 8003cfe:	d11c      	bne.n	8003d3a <HAL_RCC_OscConfig+0x196>
 8003d00:	4b73      	ldr	r3, [pc, #460]	; (8003ed0 <HAL_RCC_OscConfig+0x32c>)
 8003d02:	685a      	ldr	r2, [r3, #4]
 8003d04:	2380      	movs	r3, #128	; 0x80
 8003d06:	025b      	lsls	r3, r3, #9
 8003d08:	4013      	ands	r3, r2
 8003d0a:	d116      	bne.n	8003d3a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d0c:	4b70      	ldr	r3, [pc, #448]	; (8003ed0 <HAL_RCC_OscConfig+0x32c>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2202      	movs	r2, #2
 8003d12:	4013      	ands	r3, r2
 8003d14:	d005      	beq.n	8003d22 <HAL_RCC_OscConfig+0x17e>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d001      	beq.n	8003d22 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e24b      	b.n	80041ba <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d22:	4b6b      	ldr	r3, [pc, #428]	; (8003ed0 <HAL_RCC_OscConfig+0x32c>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	22f8      	movs	r2, #248	; 0xf8
 8003d28:	4393      	bics	r3, r2
 8003d2a:	0019      	movs	r1, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	00da      	lsls	r2, r3, #3
 8003d32:	4b67      	ldr	r3, [pc, #412]	; (8003ed0 <HAL_RCC_OscConfig+0x32c>)
 8003d34:	430a      	orrs	r2, r1
 8003d36:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d38:	e041      	b.n	8003dbe <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d024      	beq.n	8003d8c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d42:	4b63      	ldr	r3, [pc, #396]	; (8003ed0 <HAL_RCC_OscConfig+0x32c>)
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	4b62      	ldr	r3, [pc, #392]	; (8003ed0 <HAL_RCC_OscConfig+0x32c>)
 8003d48:	2101      	movs	r1, #1
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d4e:	f7fe f87f 	bl	8001e50 <HAL_GetTick>
 8003d52:	0003      	movs	r3, r0
 8003d54:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d58:	f7fe f87a 	bl	8001e50 <HAL_GetTick>
 8003d5c:	0002      	movs	r2, r0
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e227      	b.n	80041ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d6a:	4b59      	ldr	r3, [pc, #356]	; (8003ed0 <HAL_RCC_OscConfig+0x32c>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2202      	movs	r2, #2
 8003d70:	4013      	ands	r3, r2
 8003d72:	d0f1      	beq.n	8003d58 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d74:	4b56      	ldr	r3, [pc, #344]	; (8003ed0 <HAL_RCC_OscConfig+0x32c>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	22f8      	movs	r2, #248	; 0xf8
 8003d7a:	4393      	bics	r3, r2
 8003d7c:	0019      	movs	r1, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	00da      	lsls	r2, r3, #3
 8003d84:	4b52      	ldr	r3, [pc, #328]	; (8003ed0 <HAL_RCC_OscConfig+0x32c>)
 8003d86:	430a      	orrs	r2, r1
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	e018      	b.n	8003dbe <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d8c:	4b50      	ldr	r3, [pc, #320]	; (8003ed0 <HAL_RCC_OscConfig+0x32c>)
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	4b4f      	ldr	r3, [pc, #316]	; (8003ed0 <HAL_RCC_OscConfig+0x32c>)
 8003d92:	2101      	movs	r1, #1
 8003d94:	438a      	bics	r2, r1
 8003d96:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d98:	f7fe f85a 	bl	8001e50 <HAL_GetTick>
 8003d9c:	0003      	movs	r3, r0
 8003d9e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003da0:	e008      	b.n	8003db4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003da2:	f7fe f855 	bl	8001e50 <HAL_GetTick>
 8003da6:	0002      	movs	r2, r0
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d901      	bls.n	8003db4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e202      	b.n	80041ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003db4:	4b46      	ldr	r3, [pc, #280]	; (8003ed0 <HAL_RCC_OscConfig+0x32c>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2202      	movs	r2, #2
 8003dba:	4013      	ands	r3, r2
 8003dbc:	d1f1      	bne.n	8003da2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2208      	movs	r2, #8
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	d036      	beq.n	8003e36 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	69db      	ldr	r3, [r3, #28]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d019      	beq.n	8003e04 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dd0:	4b3f      	ldr	r3, [pc, #252]	; (8003ed0 <HAL_RCC_OscConfig+0x32c>)
 8003dd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dd4:	4b3e      	ldr	r3, [pc, #248]	; (8003ed0 <HAL_RCC_OscConfig+0x32c>)
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ddc:	f7fe f838 	bl	8001e50 <HAL_GetTick>
 8003de0:	0003      	movs	r3, r0
 8003de2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003de4:	e008      	b.n	8003df8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003de6:	f7fe f833 	bl	8001e50 <HAL_GetTick>
 8003dea:	0002      	movs	r2, r0
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d901      	bls.n	8003df8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e1e0      	b.n	80041ba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003df8:	4b35      	ldr	r3, [pc, #212]	; (8003ed0 <HAL_RCC_OscConfig+0x32c>)
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfc:	2202      	movs	r2, #2
 8003dfe:	4013      	ands	r3, r2
 8003e00:	d0f1      	beq.n	8003de6 <HAL_RCC_OscConfig+0x242>
 8003e02:	e018      	b.n	8003e36 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e04:	4b32      	ldr	r3, [pc, #200]	; (8003ed0 <HAL_RCC_OscConfig+0x32c>)
 8003e06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e08:	4b31      	ldr	r3, [pc, #196]	; (8003ed0 <HAL_RCC_OscConfig+0x32c>)
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	438a      	bics	r2, r1
 8003e0e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e10:	f7fe f81e 	bl	8001e50 <HAL_GetTick>
 8003e14:	0003      	movs	r3, r0
 8003e16:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e18:	e008      	b.n	8003e2c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e1a:	f7fe f819 	bl	8001e50 <HAL_GetTick>
 8003e1e:	0002      	movs	r2, r0
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d901      	bls.n	8003e2c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e1c6      	b.n	80041ba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e2c:	4b28      	ldr	r3, [pc, #160]	; (8003ed0 <HAL_RCC_OscConfig+0x32c>)
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e30:	2202      	movs	r2, #2
 8003e32:	4013      	ands	r3, r2
 8003e34:	d1f1      	bne.n	8003e1a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2204      	movs	r2, #4
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	d100      	bne.n	8003e42 <HAL_RCC_OscConfig+0x29e>
 8003e40:	e0b4      	b.n	8003fac <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e42:	201f      	movs	r0, #31
 8003e44:	183b      	adds	r3, r7, r0
 8003e46:	2200      	movs	r2, #0
 8003e48:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e4a:	4b21      	ldr	r3, [pc, #132]	; (8003ed0 <HAL_RCC_OscConfig+0x32c>)
 8003e4c:	69da      	ldr	r2, [r3, #28]
 8003e4e:	2380      	movs	r3, #128	; 0x80
 8003e50:	055b      	lsls	r3, r3, #21
 8003e52:	4013      	ands	r3, r2
 8003e54:	d110      	bne.n	8003e78 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e56:	4b1e      	ldr	r3, [pc, #120]	; (8003ed0 <HAL_RCC_OscConfig+0x32c>)
 8003e58:	69da      	ldr	r2, [r3, #28]
 8003e5a:	4b1d      	ldr	r3, [pc, #116]	; (8003ed0 <HAL_RCC_OscConfig+0x32c>)
 8003e5c:	2180      	movs	r1, #128	; 0x80
 8003e5e:	0549      	lsls	r1, r1, #21
 8003e60:	430a      	orrs	r2, r1
 8003e62:	61da      	str	r2, [r3, #28]
 8003e64:	4b1a      	ldr	r3, [pc, #104]	; (8003ed0 <HAL_RCC_OscConfig+0x32c>)
 8003e66:	69da      	ldr	r2, [r3, #28]
 8003e68:	2380      	movs	r3, #128	; 0x80
 8003e6a:	055b      	lsls	r3, r3, #21
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	60fb      	str	r3, [r7, #12]
 8003e70:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003e72:	183b      	adds	r3, r7, r0
 8003e74:	2201      	movs	r2, #1
 8003e76:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e78:	4b18      	ldr	r3, [pc, #96]	; (8003edc <HAL_RCC_OscConfig+0x338>)
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	2380      	movs	r3, #128	; 0x80
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	4013      	ands	r3, r2
 8003e82:	d11a      	bne.n	8003eba <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e84:	4b15      	ldr	r3, [pc, #84]	; (8003edc <HAL_RCC_OscConfig+0x338>)
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	4b14      	ldr	r3, [pc, #80]	; (8003edc <HAL_RCC_OscConfig+0x338>)
 8003e8a:	2180      	movs	r1, #128	; 0x80
 8003e8c:	0049      	lsls	r1, r1, #1
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e92:	f7fd ffdd 	bl	8001e50 <HAL_GetTick>
 8003e96:	0003      	movs	r3, r0
 8003e98:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e9c:	f7fd ffd8 	bl	8001e50 <HAL_GetTick>
 8003ea0:	0002      	movs	r2, r0
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b64      	cmp	r3, #100	; 0x64
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e185      	b.n	80041ba <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eae:	4b0b      	ldr	r3, [pc, #44]	; (8003edc <HAL_RCC_OscConfig+0x338>)
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	2380      	movs	r3, #128	; 0x80
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	d0f0      	beq.n	8003e9c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d10e      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x33c>
 8003ec2:	4b03      	ldr	r3, [pc, #12]	; (8003ed0 <HAL_RCC_OscConfig+0x32c>)
 8003ec4:	6a1a      	ldr	r2, [r3, #32]
 8003ec6:	4b02      	ldr	r3, [pc, #8]	; (8003ed0 <HAL_RCC_OscConfig+0x32c>)
 8003ec8:	2101      	movs	r1, #1
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	621a      	str	r2, [r3, #32]
 8003ece:	e035      	b.n	8003f3c <HAL_RCC_OscConfig+0x398>
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	fffeffff 	.word	0xfffeffff
 8003ed8:	fffbffff 	.word	0xfffbffff
 8003edc:	40007000 	.word	0x40007000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10c      	bne.n	8003f02 <HAL_RCC_OscConfig+0x35e>
 8003ee8:	4bb6      	ldr	r3, [pc, #728]	; (80041c4 <HAL_RCC_OscConfig+0x620>)
 8003eea:	6a1a      	ldr	r2, [r3, #32]
 8003eec:	4bb5      	ldr	r3, [pc, #724]	; (80041c4 <HAL_RCC_OscConfig+0x620>)
 8003eee:	2101      	movs	r1, #1
 8003ef0:	438a      	bics	r2, r1
 8003ef2:	621a      	str	r2, [r3, #32]
 8003ef4:	4bb3      	ldr	r3, [pc, #716]	; (80041c4 <HAL_RCC_OscConfig+0x620>)
 8003ef6:	6a1a      	ldr	r2, [r3, #32]
 8003ef8:	4bb2      	ldr	r3, [pc, #712]	; (80041c4 <HAL_RCC_OscConfig+0x620>)
 8003efa:	2104      	movs	r1, #4
 8003efc:	438a      	bics	r2, r1
 8003efe:	621a      	str	r2, [r3, #32]
 8003f00:	e01c      	b.n	8003f3c <HAL_RCC_OscConfig+0x398>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	2b05      	cmp	r3, #5
 8003f08:	d10c      	bne.n	8003f24 <HAL_RCC_OscConfig+0x380>
 8003f0a:	4bae      	ldr	r3, [pc, #696]	; (80041c4 <HAL_RCC_OscConfig+0x620>)
 8003f0c:	6a1a      	ldr	r2, [r3, #32]
 8003f0e:	4bad      	ldr	r3, [pc, #692]	; (80041c4 <HAL_RCC_OscConfig+0x620>)
 8003f10:	2104      	movs	r1, #4
 8003f12:	430a      	orrs	r2, r1
 8003f14:	621a      	str	r2, [r3, #32]
 8003f16:	4bab      	ldr	r3, [pc, #684]	; (80041c4 <HAL_RCC_OscConfig+0x620>)
 8003f18:	6a1a      	ldr	r2, [r3, #32]
 8003f1a:	4baa      	ldr	r3, [pc, #680]	; (80041c4 <HAL_RCC_OscConfig+0x620>)
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	621a      	str	r2, [r3, #32]
 8003f22:	e00b      	b.n	8003f3c <HAL_RCC_OscConfig+0x398>
 8003f24:	4ba7      	ldr	r3, [pc, #668]	; (80041c4 <HAL_RCC_OscConfig+0x620>)
 8003f26:	6a1a      	ldr	r2, [r3, #32]
 8003f28:	4ba6      	ldr	r3, [pc, #664]	; (80041c4 <HAL_RCC_OscConfig+0x620>)
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	438a      	bics	r2, r1
 8003f2e:	621a      	str	r2, [r3, #32]
 8003f30:	4ba4      	ldr	r3, [pc, #656]	; (80041c4 <HAL_RCC_OscConfig+0x620>)
 8003f32:	6a1a      	ldr	r2, [r3, #32]
 8003f34:	4ba3      	ldr	r3, [pc, #652]	; (80041c4 <HAL_RCC_OscConfig+0x620>)
 8003f36:	2104      	movs	r1, #4
 8003f38:	438a      	bics	r2, r1
 8003f3a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d014      	beq.n	8003f6e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f44:	f7fd ff84 	bl	8001e50 <HAL_GetTick>
 8003f48:	0003      	movs	r3, r0
 8003f4a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f4c:	e009      	b.n	8003f62 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f4e:	f7fd ff7f 	bl	8001e50 <HAL_GetTick>
 8003f52:	0002      	movs	r2, r0
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	4a9b      	ldr	r2, [pc, #620]	; (80041c8 <HAL_RCC_OscConfig+0x624>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e12b      	b.n	80041ba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f62:	4b98      	ldr	r3, [pc, #608]	; (80041c4 <HAL_RCC_OscConfig+0x620>)
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	2202      	movs	r2, #2
 8003f68:	4013      	ands	r3, r2
 8003f6a:	d0f0      	beq.n	8003f4e <HAL_RCC_OscConfig+0x3aa>
 8003f6c:	e013      	b.n	8003f96 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f6e:	f7fd ff6f 	bl	8001e50 <HAL_GetTick>
 8003f72:	0003      	movs	r3, r0
 8003f74:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f76:	e009      	b.n	8003f8c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f78:	f7fd ff6a 	bl	8001e50 <HAL_GetTick>
 8003f7c:	0002      	movs	r2, r0
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	4a91      	ldr	r2, [pc, #580]	; (80041c8 <HAL_RCC_OscConfig+0x624>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d901      	bls.n	8003f8c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e116      	b.n	80041ba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f8c:	4b8d      	ldr	r3, [pc, #564]	; (80041c4 <HAL_RCC_OscConfig+0x620>)
 8003f8e:	6a1b      	ldr	r3, [r3, #32]
 8003f90:	2202      	movs	r2, #2
 8003f92:	4013      	ands	r3, r2
 8003f94:	d1f0      	bne.n	8003f78 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f96:	231f      	movs	r3, #31
 8003f98:	18fb      	adds	r3, r7, r3
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d105      	bne.n	8003fac <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fa0:	4b88      	ldr	r3, [pc, #544]	; (80041c4 <HAL_RCC_OscConfig+0x620>)
 8003fa2:	69da      	ldr	r2, [r3, #28]
 8003fa4:	4b87      	ldr	r3, [pc, #540]	; (80041c4 <HAL_RCC_OscConfig+0x620>)
 8003fa6:	4989      	ldr	r1, [pc, #548]	; (80041cc <HAL_RCC_OscConfig+0x628>)
 8003fa8:	400a      	ands	r2, r1
 8003faa:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2210      	movs	r2, #16
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	d063      	beq.n	800407e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d12a      	bne.n	8004014 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003fbe:	4b81      	ldr	r3, [pc, #516]	; (80041c4 <HAL_RCC_OscConfig+0x620>)
 8003fc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fc2:	4b80      	ldr	r3, [pc, #512]	; (80041c4 <HAL_RCC_OscConfig+0x620>)
 8003fc4:	2104      	movs	r1, #4
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003fca:	4b7e      	ldr	r3, [pc, #504]	; (80041c4 <HAL_RCC_OscConfig+0x620>)
 8003fcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fce:	4b7d      	ldr	r3, [pc, #500]	; (80041c4 <HAL_RCC_OscConfig+0x620>)
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fd6:	f7fd ff3b 	bl	8001e50 <HAL_GetTick>
 8003fda:	0003      	movs	r3, r0
 8003fdc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003fde:	e008      	b.n	8003ff2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003fe0:	f7fd ff36 	bl	8001e50 <HAL_GetTick>
 8003fe4:	0002      	movs	r2, r0
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e0e3      	b.n	80041ba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003ff2:	4b74      	ldr	r3, [pc, #464]	; (80041c4 <HAL_RCC_OscConfig+0x620>)
 8003ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	d0f1      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003ffc:	4b71      	ldr	r3, [pc, #452]	; (80041c4 <HAL_RCC_OscConfig+0x620>)
 8003ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004000:	22f8      	movs	r2, #248	; 0xf8
 8004002:	4393      	bics	r3, r2
 8004004:	0019      	movs	r1, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	00da      	lsls	r2, r3, #3
 800400c:	4b6d      	ldr	r3, [pc, #436]	; (80041c4 <HAL_RCC_OscConfig+0x620>)
 800400e:	430a      	orrs	r2, r1
 8004010:	635a      	str	r2, [r3, #52]	; 0x34
 8004012:	e034      	b.n	800407e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	3305      	adds	r3, #5
 800401a:	d111      	bne.n	8004040 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800401c:	4b69      	ldr	r3, [pc, #420]	; (80041c4 <HAL_RCC_OscConfig+0x620>)
 800401e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004020:	4b68      	ldr	r3, [pc, #416]	; (80041c4 <HAL_RCC_OscConfig+0x620>)
 8004022:	2104      	movs	r1, #4
 8004024:	438a      	bics	r2, r1
 8004026:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004028:	4b66      	ldr	r3, [pc, #408]	; (80041c4 <HAL_RCC_OscConfig+0x620>)
 800402a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800402c:	22f8      	movs	r2, #248	; 0xf8
 800402e:	4393      	bics	r3, r2
 8004030:	0019      	movs	r1, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	00da      	lsls	r2, r3, #3
 8004038:	4b62      	ldr	r3, [pc, #392]	; (80041c4 <HAL_RCC_OscConfig+0x620>)
 800403a:	430a      	orrs	r2, r1
 800403c:	635a      	str	r2, [r3, #52]	; 0x34
 800403e:	e01e      	b.n	800407e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004040:	4b60      	ldr	r3, [pc, #384]	; (80041c4 <HAL_RCC_OscConfig+0x620>)
 8004042:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004044:	4b5f      	ldr	r3, [pc, #380]	; (80041c4 <HAL_RCC_OscConfig+0x620>)
 8004046:	2104      	movs	r1, #4
 8004048:	430a      	orrs	r2, r1
 800404a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800404c:	4b5d      	ldr	r3, [pc, #372]	; (80041c4 <HAL_RCC_OscConfig+0x620>)
 800404e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004050:	4b5c      	ldr	r3, [pc, #368]	; (80041c4 <HAL_RCC_OscConfig+0x620>)
 8004052:	2101      	movs	r1, #1
 8004054:	438a      	bics	r2, r1
 8004056:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004058:	f7fd fefa 	bl	8001e50 <HAL_GetTick>
 800405c:	0003      	movs	r3, r0
 800405e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004060:	e008      	b.n	8004074 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004062:	f7fd fef5 	bl	8001e50 <HAL_GetTick>
 8004066:	0002      	movs	r2, r0
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	2b02      	cmp	r3, #2
 800406e:	d901      	bls.n	8004074 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e0a2      	b.n	80041ba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004074:	4b53      	ldr	r3, [pc, #332]	; (80041c4 <HAL_RCC_OscConfig+0x620>)
 8004076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004078:	2202      	movs	r2, #2
 800407a:	4013      	ands	r3, r2
 800407c:	d1f1      	bne.n	8004062 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d100      	bne.n	8004088 <HAL_RCC_OscConfig+0x4e4>
 8004086:	e097      	b.n	80041b8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004088:	4b4e      	ldr	r3, [pc, #312]	; (80041c4 <HAL_RCC_OscConfig+0x620>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	220c      	movs	r2, #12
 800408e:	4013      	ands	r3, r2
 8004090:	2b08      	cmp	r3, #8
 8004092:	d100      	bne.n	8004096 <HAL_RCC_OscConfig+0x4f2>
 8004094:	e06b      	b.n	800416e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	2b02      	cmp	r3, #2
 800409c:	d14c      	bne.n	8004138 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800409e:	4b49      	ldr	r3, [pc, #292]	; (80041c4 <HAL_RCC_OscConfig+0x620>)
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	4b48      	ldr	r3, [pc, #288]	; (80041c4 <HAL_RCC_OscConfig+0x620>)
 80040a4:	494a      	ldr	r1, [pc, #296]	; (80041d0 <HAL_RCC_OscConfig+0x62c>)
 80040a6:	400a      	ands	r2, r1
 80040a8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040aa:	f7fd fed1 	bl	8001e50 <HAL_GetTick>
 80040ae:	0003      	movs	r3, r0
 80040b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040b2:	e008      	b.n	80040c6 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040b4:	f7fd fecc 	bl	8001e50 <HAL_GetTick>
 80040b8:	0002      	movs	r2, r0
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e079      	b.n	80041ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040c6:	4b3f      	ldr	r3, [pc, #252]	; (80041c4 <HAL_RCC_OscConfig+0x620>)
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	2380      	movs	r3, #128	; 0x80
 80040cc:	049b      	lsls	r3, r3, #18
 80040ce:	4013      	ands	r3, r2
 80040d0:	d1f0      	bne.n	80040b4 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040d2:	4b3c      	ldr	r3, [pc, #240]	; (80041c4 <HAL_RCC_OscConfig+0x620>)
 80040d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d6:	220f      	movs	r2, #15
 80040d8:	4393      	bics	r3, r2
 80040da:	0019      	movs	r1, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040e0:	4b38      	ldr	r3, [pc, #224]	; (80041c4 <HAL_RCC_OscConfig+0x620>)
 80040e2:	430a      	orrs	r2, r1
 80040e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80040e6:	4b37      	ldr	r3, [pc, #220]	; (80041c4 <HAL_RCC_OscConfig+0x620>)
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	4a3a      	ldr	r2, [pc, #232]	; (80041d4 <HAL_RCC_OscConfig+0x630>)
 80040ec:	4013      	ands	r3, r2
 80040ee:	0019      	movs	r1, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f8:	431a      	orrs	r2, r3
 80040fa:	4b32      	ldr	r3, [pc, #200]	; (80041c4 <HAL_RCC_OscConfig+0x620>)
 80040fc:	430a      	orrs	r2, r1
 80040fe:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004100:	4b30      	ldr	r3, [pc, #192]	; (80041c4 <HAL_RCC_OscConfig+0x620>)
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	4b2f      	ldr	r3, [pc, #188]	; (80041c4 <HAL_RCC_OscConfig+0x620>)
 8004106:	2180      	movs	r1, #128	; 0x80
 8004108:	0449      	lsls	r1, r1, #17
 800410a:	430a      	orrs	r2, r1
 800410c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800410e:	f7fd fe9f 	bl	8001e50 <HAL_GetTick>
 8004112:	0003      	movs	r3, r0
 8004114:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004116:	e008      	b.n	800412a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004118:	f7fd fe9a 	bl	8001e50 <HAL_GetTick>
 800411c:	0002      	movs	r2, r0
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b02      	cmp	r3, #2
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e047      	b.n	80041ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800412a:	4b26      	ldr	r3, [pc, #152]	; (80041c4 <HAL_RCC_OscConfig+0x620>)
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	2380      	movs	r3, #128	; 0x80
 8004130:	049b      	lsls	r3, r3, #18
 8004132:	4013      	ands	r3, r2
 8004134:	d0f0      	beq.n	8004118 <HAL_RCC_OscConfig+0x574>
 8004136:	e03f      	b.n	80041b8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004138:	4b22      	ldr	r3, [pc, #136]	; (80041c4 <HAL_RCC_OscConfig+0x620>)
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	4b21      	ldr	r3, [pc, #132]	; (80041c4 <HAL_RCC_OscConfig+0x620>)
 800413e:	4924      	ldr	r1, [pc, #144]	; (80041d0 <HAL_RCC_OscConfig+0x62c>)
 8004140:	400a      	ands	r2, r1
 8004142:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004144:	f7fd fe84 	bl	8001e50 <HAL_GetTick>
 8004148:	0003      	movs	r3, r0
 800414a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800414c:	e008      	b.n	8004160 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800414e:	f7fd fe7f 	bl	8001e50 <HAL_GetTick>
 8004152:	0002      	movs	r2, r0
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	2b02      	cmp	r3, #2
 800415a:	d901      	bls.n	8004160 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e02c      	b.n	80041ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004160:	4b18      	ldr	r3, [pc, #96]	; (80041c4 <HAL_RCC_OscConfig+0x620>)
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	2380      	movs	r3, #128	; 0x80
 8004166:	049b      	lsls	r3, r3, #18
 8004168:	4013      	ands	r3, r2
 800416a:	d1f0      	bne.n	800414e <HAL_RCC_OscConfig+0x5aa>
 800416c:	e024      	b.n	80041b8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d101      	bne.n	800417a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e01f      	b.n	80041ba <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800417a:	4b12      	ldr	r3, [pc, #72]	; (80041c4 <HAL_RCC_OscConfig+0x620>)
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004180:	4b10      	ldr	r3, [pc, #64]	; (80041c4 <HAL_RCC_OscConfig+0x620>)
 8004182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004184:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	2380      	movs	r3, #128	; 0x80
 800418a:	025b      	lsls	r3, r3, #9
 800418c:	401a      	ands	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004192:	429a      	cmp	r2, r3
 8004194:	d10e      	bne.n	80041b4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	220f      	movs	r2, #15
 800419a:	401a      	ands	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d107      	bne.n	80041b4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	23f0      	movs	r3, #240	; 0xf0
 80041a8:	039b      	lsls	r3, r3, #14
 80041aa:	401a      	ands	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d001      	beq.n	80041b8 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e000      	b.n	80041ba <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	0018      	movs	r0, r3
 80041bc:	46bd      	mov	sp, r7
 80041be:	b008      	add	sp, #32
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	46c0      	nop			; (mov r8, r8)
 80041c4:	40021000 	.word	0x40021000
 80041c8:	00001388 	.word	0x00001388
 80041cc:	efffffff 	.word	0xefffffff
 80041d0:	feffffff 	.word	0xfeffffff
 80041d4:	ffc2ffff 	.word	0xffc2ffff

080041d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e0b3      	b.n	8004354 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041ec:	4b5b      	ldr	r3, [pc, #364]	; (800435c <HAL_RCC_ClockConfig+0x184>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2201      	movs	r2, #1
 80041f2:	4013      	ands	r3, r2
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d911      	bls.n	800421e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041fa:	4b58      	ldr	r3, [pc, #352]	; (800435c <HAL_RCC_ClockConfig+0x184>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2201      	movs	r2, #1
 8004200:	4393      	bics	r3, r2
 8004202:	0019      	movs	r1, r3
 8004204:	4b55      	ldr	r3, [pc, #340]	; (800435c <HAL_RCC_ClockConfig+0x184>)
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	430a      	orrs	r2, r1
 800420a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800420c:	4b53      	ldr	r3, [pc, #332]	; (800435c <HAL_RCC_ClockConfig+0x184>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2201      	movs	r2, #1
 8004212:	4013      	ands	r3, r2
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	429a      	cmp	r2, r3
 8004218:	d001      	beq.n	800421e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e09a      	b.n	8004354 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2202      	movs	r2, #2
 8004224:	4013      	ands	r3, r2
 8004226:	d015      	beq.n	8004254 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2204      	movs	r2, #4
 800422e:	4013      	ands	r3, r2
 8004230:	d006      	beq.n	8004240 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004232:	4b4b      	ldr	r3, [pc, #300]	; (8004360 <HAL_RCC_ClockConfig+0x188>)
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	4b4a      	ldr	r3, [pc, #296]	; (8004360 <HAL_RCC_ClockConfig+0x188>)
 8004238:	21e0      	movs	r1, #224	; 0xe0
 800423a:	00c9      	lsls	r1, r1, #3
 800423c:	430a      	orrs	r2, r1
 800423e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004240:	4b47      	ldr	r3, [pc, #284]	; (8004360 <HAL_RCC_ClockConfig+0x188>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	22f0      	movs	r2, #240	; 0xf0
 8004246:	4393      	bics	r3, r2
 8004248:	0019      	movs	r1, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	689a      	ldr	r2, [r3, #8]
 800424e:	4b44      	ldr	r3, [pc, #272]	; (8004360 <HAL_RCC_ClockConfig+0x188>)
 8004250:	430a      	orrs	r2, r1
 8004252:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2201      	movs	r2, #1
 800425a:	4013      	ands	r3, r2
 800425c:	d040      	beq.n	80042e0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d107      	bne.n	8004276 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004266:	4b3e      	ldr	r3, [pc, #248]	; (8004360 <HAL_RCC_ClockConfig+0x188>)
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	2380      	movs	r3, #128	; 0x80
 800426c:	029b      	lsls	r3, r3, #10
 800426e:	4013      	ands	r3, r2
 8004270:	d114      	bne.n	800429c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e06e      	b.n	8004354 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	2b02      	cmp	r3, #2
 800427c:	d107      	bne.n	800428e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800427e:	4b38      	ldr	r3, [pc, #224]	; (8004360 <HAL_RCC_ClockConfig+0x188>)
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	2380      	movs	r3, #128	; 0x80
 8004284:	049b      	lsls	r3, r3, #18
 8004286:	4013      	ands	r3, r2
 8004288:	d108      	bne.n	800429c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e062      	b.n	8004354 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800428e:	4b34      	ldr	r3, [pc, #208]	; (8004360 <HAL_RCC_ClockConfig+0x188>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2202      	movs	r2, #2
 8004294:	4013      	ands	r3, r2
 8004296:	d101      	bne.n	800429c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e05b      	b.n	8004354 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800429c:	4b30      	ldr	r3, [pc, #192]	; (8004360 <HAL_RCC_ClockConfig+0x188>)
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	2203      	movs	r2, #3
 80042a2:	4393      	bics	r3, r2
 80042a4:	0019      	movs	r1, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	4b2d      	ldr	r3, [pc, #180]	; (8004360 <HAL_RCC_ClockConfig+0x188>)
 80042ac:	430a      	orrs	r2, r1
 80042ae:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042b0:	f7fd fdce 	bl	8001e50 <HAL_GetTick>
 80042b4:	0003      	movs	r3, r0
 80042b6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042b8:	e009      	b.n	80042ce <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042ba:	f7fd fdc9 	bl	8001e50 <HAL_GetTick>
 80042be:	0002      	movs	r2, r0
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	4a27      	ldr	r2, [pc, #156]	; (8004364 <HAL_RCC_ClockConfig+0x18c>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e042      	b.n	8004354 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ce:	4b24      	ldr	r3, [pc, #144]	; (8004360 <HAL_RCC_ClockConfig+0x188>)
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	220c      	movs	r2, #12
 80042d4:	401a      	ands	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	429a      	cmp	r2, r3
 80042de:	d1ec      	bne.n	80042ba <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042e0:	4b1e      	ldr	r3, [pc, #120]	; (800435c <HAL_RCC_ClockConfig+0x184>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2201      	movs	r2, #1
 80042e6:	4013      	ands	r3, r2
 80042e8:	683a      	ldr	r2, [r7, #0]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d211      	bcs.n	8004312 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ee:	4b1b      	ldr	r3, [pc, #108]	; (800435c <HAL_RCC_ClockConfig+0x184>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2201      	movs	r2, #1
 80042f4:	4393      	bics	r3, r2
 80042f6:	0019      	movs	r1, r3
 80042f8:	4b18      	ldr	r3, [pc, #96]	; (800435c <HAL_RCC_ClockConfig+0x184>)
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004300:	4b16      	ldr	r3, [pc, #88]	; (800435c <HAL_RCC_ClockConfig+0x184>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2201      	movs	r2, #1
 8004306:	4013      	ands	r3, r2
 8004308:	683a      	ldr	r2, [r7, #0]
 800430a:	429a      	cmp	r2, r3
 800430c:	d001      	beq.n	8004312 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e020      	b.n	8004354 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2204      	movs	r2, #4
 8004318:	4013      	ands	r3, r2
 800431a:	d009      	beq.n	8004330 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800431c:	4b10      	ldr	r3, [pc, #64]	; (8004360 <HAL_RCC_ClockConfig+0x188>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	4a11      	ldr	r2, [pc, #68]	; (8004368 <HAL_RCC_ClockConfig+0x190>)
 8004322:	4013      	ands	r3, r2
 8004324:	0019      	movs	r1, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68da      	ldr	r2, [r3, #12]
 800432a:	4b0d      	ldr	r3, [pc, #52]	; (8004360 <HAL_RCC_ClockConfig+0x188>)
 800432c:	430a      	orrs	r2, r1
 800432e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004330:	f000 f820 	bl	8004374 <HAL_RCC_GetSysClockFreq>
 8004334:	0001      	movs	r1, r0
 8004336:	4b0a      	ldr	r3, [pc, #40]	; (8004360 <HAL_RCC_ClockConfig+0x188>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	091b      	lsrs	r3, r3, #4
 800433c:	220f      	movs	r2, #15
 800433e:	4013      	ands	r3, r2
 8004340:	4a0a      	ldr	r2, [pc, #40]	; (800436c <HAL_RCC_ClockConfig+0x194>)
 8004342:	5cd3      	ldrb	r3, [r2, r3]
 8004344:	000a      	movs	r2, r1
 8004346:	40da      	lsrs	r2, r3
 8004348:	4b09      	ldr	r3, [pc, #36]	; (8004370 <HAL_RCC_ClockConfig+0x198>)
 800434a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800434c:	2003      	movs	r0, #3
 800434e:	f7fd fd39 	bl	8001dc4 <HAL_InitTick>
  
  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	0018      	movs	r0, r3
 8004356:	46bd      	mov	sp, r7
 8004358:	b004      	add	sp, #16
 800435a:	bd80      	pop	{r7, pc}
 800435c:	40022000 	.word	0x40022000
 8004360:	40021000 	.word	0x40021000
 8004364:	00001388 	.word	0x00001388
 8004368:	fffff8ff 	.word	0xfffff8ff
 800436c:	080074dc 	.word	0x080074dc
 8004370:	20000028 	.word	0x20000028

08004374 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004374:	b590      	push	{r4, r7, lr}
 8004376:	b08f      	sub	sp, #60	; 0x3c
 8004378:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800437a:	2314      	movs	r3, #20
 800437c:	18fb      	adds	r3, r7, r3
 800437e:	4a2b      	ldr	r2, [pc, #172]	; (800442c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004380:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004382:	c313      	stmia	r3!, {r0, r1, r4}
 8004384:	6812      	ldr	r2, [r2, #0]
 8004386:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004388:	1d3b      	adds	r3, r7, #4
 800438a:	4a29      	ldr	r2, [pc, #164]	; (8004430 <HAL_RCC_GetSysClockFreq+0xbc>)
 800438c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800438e:	c313      	stmia	r3!, {r0, r1, r4}
 8004390:	6812      	ldr	r2, [r2, #0]
 8004392:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004394:	2300      	movs	r3, #0
 8004396:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004398:	2300      	movs	r3, #0
 800439a:	62bb      	str	r3, [r7, #40]	; 0x28
 800439c:	2300      	movs	r3, #0
 800439e:	637b      	str	r3, [r7, #52]	; 0x34
 80043a0:	2300      	movs	r3, #0
 80043a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80043a4:	2300      	movs	r3, #0
 80043a6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80043a8:	4b22      	ldr	r3, [pc, #136]	; (8004434 <HAL_RCC_GetSysClockFreq+0xc0>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b0:	220c      	movs	r2, #12
 80043b2:	4013      	ands	r3, r2
 80043b4:	2b04      	cmp	r3, #4
 80043b6:	d002      	beq.n	80043be <HAL_RCC_GetSysClockFreq+0x4a>
 80043b8:	2b08      	cmp	r3, #8
 80043ba:	d003      	beq.n	80043c4 <HAL_RCC_GetSysClockFreq+0x50>
 80043bc:	e02d      	b.n	800441a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043be:	4b1e      	ldr	r3, [pc, #120]	; (8004438 <HAL_RCC_GetSysClockFreq+0xc4>)
 80043c0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80043c2:	e02d      	b.n	8004420 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80043c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c6:	0c9b      	lsrs	r3, r3, #18
 80043c8:	220f      	movs	r2, #15
 80043ca:	4013      	ands	r3, r2
 80043cc:	2214      	movs	r2, #20
 80043ce:	18ba      	adds	r2, r7, r2
 80043d0:	5cd3      	ldrb	r3, [r2, r3]
 80043d2:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80043d4:	4b17      	ldr	r3, [pc, #92]	; (8004434 <HAL_RCC_GetSysClockFreq+0xc0>)
 80043d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d8:	220f      	movs	r2, #15
 80043da:	4013      	ands	r3, r2
 80043dc:	1d3a      	adds	r2, r7, #4
 80043de:	5cd3      	ldrb	r3, [r2, r3]
 80043e0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80043e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043e4:	2380      	movs	r3, #128	; 0x80
 80043e6:	025b      	lsls	r3, r3, #9
 80043e8:	4013      	ands	r3, r2
 80043ea:	d009      	beq.n	8004400 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80043ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043ee:	4812      	ldr	r0, [pc, #72]	; (8004438 <HAL_RCC_GetSysClockFreq+0xc4>)
 80043f0:	f7fb fe8a 	bl	8000108 <__udivsi3>
 80043f4:	0003      	movs	r3, r0
 80043f6:	001a      	movs	r2, r3
 80043f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fa:	4353      	muls	r3, r2
 80043fc:	637b      	str	r3, [r7, #52]	; 0x34
 80043fe:	e009      	b.n	8004414 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004400:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004402:	000a      	movs	r2, r1
 8004404:	0152      	lsls	r2, r2, #5
 8004406:	1a52      	subs	r2, r2, r1
 8004408:	0193      	lsls	r3, r2, #6
 800440a:	1a9b      	subs	r3, r3, r2
 800440c:	00db      	lsls	r3, r3, #3
 800440e:	185b      	adds	r3, r3, r1
 8004410:	021b      	lsls	r3, r3, #8
 8004412:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8004414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004416:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004418:	e002      	b.n	8004420 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800441a:	4b07      	ldr	r3, [pc, #28]	; (8004438 <HAL_RCC_GetSysClockFreq+0xc4>)
 800441c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800441e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004422:	0018      	movs	r0, r3
 8004424:	46bd      	mov	sp, r7
 8004426:	b00f      	add	sp, #60	; 0x3c
 8004428:	bd90      	pop	{r4, r7, pc}
 800442a:	46c0      	nop			; (mov r8, r8)
 800442c:	08007444 	.word	0x08007444
 8004430:	08007454 	.word	0x08007454
 8004434:	40021000 	.word	0x40021000
 8004438:	007a1200 	.word	0x007a1200

0800443c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004440:	4b02      	ldr	r3, [pc, #8]	; (800444c <HAL_RCC_GetHCLKFreq+0x10>)
 8004442:	681b      	ldr	r3, [r3, #0]
}
 8004444:	0018      	movs	r0, r3
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	46c0      	nop			; (mov r8, r8)
 800444c:	20000028 	.word	0x20000028

08004450 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004454:	f7ff fff2 	bl	800443c <HAL_RCC_GetHCLKFreq>
 8004458:	0001      	movs	r1, r0
 800445a:	4b06      	ldr	r3, [pc, #24]	; (8004474 <HAL_RCC_GetPCLK1Freq+0x24>)
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	0a1b      	lsrs	r3, r3, #8
 8004460:	2207      	movs	r2, #7
 8004462:	4013      	ands	r3, r2
 8004464:	4a04      	ldr	r2, [pc, #16]	; (8004478 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004466:	5cd3      	ldrb	r3, [r2, r3]
 8004468:	40d9      	lsrs	r1, r3
 800446a:	000b      	movs	r3, r1
}    
 800446c:	0018      	movs	r0, r3
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	46c0      	nop			; (mov r8, r8)
 8004474:	40021000 	.word	0x40021000
 8004478:	080074ec 	.word	0x080074ec

0800447c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004484:	2300      	movs	r3, #0
 8004486:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004488:	2300      	movs	r3, #0
 800448a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	2380      	movs	r3, #128	; 0x80
 8004492:	025b      	lsls	r3, r3, #9
 8004494:	4013      	ands	r3, r2
 8004496:	d100      	bne.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004498:	e08e      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800449a:	2017      	movs	r0, #23
 800449c:	183b      	adds	r3, r7, r0
 800449e:	2200      	movs	r2, #0
 80044a0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044a2:	4b5f      	ldr	r3, [pc, #380]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80044a4:	69da      	ldr	r2, [r3, #28]
 80044a6:	2380      	movs	r3, #128	; 0x80
 80044a8:	055b      	lsls	r3, r3, #21
 80044aa:	4013      	ands	r3, r2
 80044ac:	d110      	bne.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80044ae:	4b5c      	ldr	r3, [pc, #368]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80044b0:	69da      	ldr	r2, [r3, #28]
 80044b2:	4b5b      	ldr	r3, [pc, #364]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80044b4:	2180      	movs	r1, #128	; 0x80
 80044b6:	0549      	lsls	r1, r1, #21
 80044b8:	430a      	orrs	r2, r1
 80044ba:	61da      	str	r2, [r3, #28]
 80044bc:	4b58      	ldr	r3, [pc, #352]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80044be:	69da      	ldr	r2, [r3, #28]
 80044c0:	2380      	movs	r3, #128	; 0x80
 80044c2:	055b      	lsls	r3, r3, #21
 80044c4:	4013      	ands	r3, r2
 80044c6:	60bb      	str	r3, [r7, #8]
 80044c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044ca:	183b      	adds	r3, r7, r0
 80044cc:	2201      	movs	r2, #1
 80044ce:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d0:	4b54      	ldr	r3, [pc, #336]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	2380      	movs	r3, #128	; 0x80
 80044d6:	005b      	lsls	r3, r3, #1
 80044d8:	4013      	ands	r3, r2
 80044da:	d11a      	bne.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044dc:	4b51      	ldr	r3, [pc, #324]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	4b50      	ldr	r3, [pc, #320]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80044e2:	2180      	movs	r1, #128	; 0x80
 80044e4:	0049      	lsls	r1, r1, #1
 80044e6:	430a      	orrs	r2, r1
 80044e8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044ea:	f7fd fcb1 	bl	8001e50 <HAL_GetTick>
 80044ee:	0003      	movs	r3, r0
 80044f0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044f2:	e008      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044f4:	f7fd fcac 	bl	8001e50 <HAL_GetTick>
 80044f8:	0002      	movs	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b64      	cmp	r3, #100	; 0x64
 8004500:	d901      	bls.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e087      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004506:	4b47      	ldr	r3, [pc, #284]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	2380      	movs	r3, #128	; 0x80
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	4013      	ands	r3, r2
 8004510:	d0f0      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004512:	4b43      	ldr	r3, [pc, #268]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004514:	6a1a      	ldr	r2, [r3, #32]
 8004516:	23c0      	movs	r3, #192	; 0xc0
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4013      	ands	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d034      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685a      	ldr	r2, [r3, #4]
 8004528:	23c0      	movs	r3, #192	; 0xc0
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	4013      	ands	r3, r2
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	429a      	cmp	r2, r3
 8004532:	d02c      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004534:	4b3a      	ldr	r3, [pc, #232]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	4a3b      	ldr	r2, [pc, #236]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800453a:	4013      	ands	r3, r2
 800453c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800453e:	4b38      	ldr	r3, [pc, #224]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004540:	6a1a      	ldr	r2, [r3, #32]
 8004542:	4b37      	ldr	r3, [pc, #220]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004544:	2180      	movs	r1, #128	; 0x80
 8004546:	0249      	lsls	r1, r1, #9
 8004548:	430a      	orrs	r2, r1
 800454a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800454c:	4b34      	ldr	r3, [pc, #208]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800454e:	6a1a      	ldr	r2, [r3, #32]
 8004550:	4b33      	ldr	r3, [pc, #204]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004552:	4936      	ldr	r1, [pc, #216]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004554:	400a      	ands	r2, r1
 8004556:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004558:	4b31      	ldr	r3, [pc, #196]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2201      	movs	r2, #1
 8004562:	4013      	ands	r3, r2
 8004564:	d013      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004566:	f7fd fc73 	bl	8001e50 <HAL_GetTick>
 800456a:	0003      	movs	r3, r0
 800456c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800456e:	e009      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004570:	f7fd fc6e 	bl	8001e50 <HAL_GetTick>
 8004574:	0002      	movs	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	4a2d      	ldr	r2, [pc, #180]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d901      	bls.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e048      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004584:	4b26      	ldr	r3, [pc, #152]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	2202      	movs	r2, #2
 800458a:	4013      	ands	r3, r2
 800458c:	d0f0      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800458e:	4b24      	ldr	r3, [pc, #144]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	4a25      	ldr	r2, [pc, #148]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004594:	4013      	ands	r3, r2
 8004596:	0019      	movs	r1, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685a      	ldr	r2, [r3, #4]
 800459c:	4b20      	ldr	r3, [pc, #128]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800459e:	430a      	orrs	r2, r1
 80045a0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80045a2:	2317      	movs	r3, #23
 80045a4:	18fb      	adds	r3, r7, r3
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d105      	bne.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045ac:	4b1c      	ldr	r3, [pc, #112]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80045ae:	69da      	ldr	r2, [r3, #28]
 80045b0:	4b1b      	ldr	r3, [pc, #108]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80045b2:	4920      	ldr	r1, [pc, #128]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045b4:	400a      	ands	r2, r1
 80045b6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2201      	movs	r2, #1
 80045be:	4013      	ands	r3, r2
 80045c0:	d009      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045c2:	4b17      	ldr	r3, [pc, #92]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80045c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c6:	2203      	movs	r2, #3
 80045c8:	4393      	bics	r3, r2
 80045ca:	0019      	movs	r1, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689a      	ldr	r2, [r3, #8]
 80045d0:	4b13      	ldr	r3, [pc, #76]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80045d2:	430a      	orrs	r2, r1
 80045d4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2220      	movs	r2, #32
 80045dc:	4013      	ands	r3, r2
 80045de:	d009      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045e0:	4b0f      	ldr	r3, [pc, #60]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80045e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e4:	2210      	movs	r2, #16
 80045e6:	4393      	bics	r3, r2
 80045e8:	0019      	movs	r1, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68da      	ldr	r2, [r3, #12]
 80045ee:	4b0c      	ldr	r3, [pc, #48]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80045f0:	430a      	orrs	r2, r1
 80045f2:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	2380      	movs	r3, #128	; 0x80
 80045fa:	00db      	lsls	r3, r3, #3
 80045fc:	4013      	ands	r3, r2
 80045fe:	d009      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004600:	4b07      	ldr	r3, [pc, #28]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004604:	2240      	movs	r2, #64	; 0x40
 8004606:	4393      	bics	r3, r2
 8004608:	0019      	movs	r1, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	691a      	ldr	r2, [r3, #16]
 800460e:	4b04      	ldr	r3, [pc, #16]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004610:	430a      	orrs	r2, r1
 8004612:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	0018      	movs	r0, r3
 8004618:	46bd      	mov	sp, r7
 800461a:	b006      	add	sp, #24
 800461c:	bd80      	pop	{r7, pc}
 800461e:	46c0      	nop			; (mov r8, r8)
 8004620:	40021000 	.word	0x40021000
 8004624:	40007000 	.word	0x40007000
 8004628:	fffffcff 	.word	0xfffffcff
 800462c:	fffeffff 	.word	0xfffeffff
 8004630:	00001388 	.word	0x00001388
 8004634:	efffffff 	.word	0xefffffff

08004638 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d101      	bne.n	800464a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e0a8      	b.n	800479c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464e:	2b00      	cmp	r3, #0
 8004650:	d109      	bne.n	8004666 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685a      	ldr	r2, [r3, #4]
 8004656:	2382      	movs	r3, #130	; 0x82
 8004658:	005b      	lsls	r3, r3, #1
 800465a:	429a      	cmp	r2, r3
 800465c:	d009      	beq.n	8004672 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	61da      	str	r2, [r3, #28]
 8004664:	e005      	b.n	8004672 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	225d      	movs	r2, #93	; 0x5d
 800467c:	5c9b      	ldrb	r3, [r3, r2]
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b00      	cmp	r3, #0
 8004682:	d107      	bne.n	8004694 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	225c      	movs	r2, #92	; 0x5c
 8004688:	2100      	movs	r1, #0
 800468a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	0018      	movs	r0, r3
 8004690:	f7fd f96a 	bl	8001968 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	225d      	movs	r2, #93	; 0x5d
 8004698:	2102      	movs	r1, #2
 800469a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2140      	movs	r1, #64	; 0x40
 80046a8:	438a      	bics	r2, r1
 80046aa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	68da      	ldr	r2, [r3, #12]
 80046b0:	23e0      	movs	r3, #224	; 0xe0
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d902      	bls.n	80046be <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80046b8:	2300      	movs	r3, #0
 80046ba:	60fb      	str	r3, [r7, #12]
 80046bc:	e002      	b.n	80046c4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80046be:	2380      	movs	r3, #128	; 0x80
 80046c0:	015b      	lsls	r3, r3, #5
 80046c2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	68da      	ldr	r2, [r3, #12]
 80046c8:	23f0      	movs	r3, #240	; 0xf0
 80046ca:	011b      	lsls	r3, r3, #4
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d008      	beq.n	80046e2 <HAL_SPI_Init+0xaa>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	68da      	ldr	r2, [r3, #12]
 80046d4:	23e0      	movs	r3, #224	; 0xe0
 80046d6:	00db      	lsls	r3, r3, #3
 80046d8:	429a      	cmp	r2, r3
 80046da:	d002      	beq.n	80046e2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	2382      	movs	r3, #130	; 0x82
 80046e8:	005b      	lsls	r3, r3, #1
 80046ea:	401a      	ands	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6899      	ldr	r1, [r3, #8]
 80046f0:	2384      	movs	r3, #132	; 0x84
 80046f2:	021b      	lsls	r3, r3, #8
 80046f4:	400b      	ands	r3, r1
 80046f6:	431a      	orrs	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	2102      	movs	r1, #2
 80046fe:	400b      	ands	r3, r1
 8004700:	431a      	orrs	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	2101      	movs	r1, #1
 8004708:	400b      	ands	r3, r1
 800470a:	431a      	orrs	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6999      	ldr	r1, [r3, #24]
 8004710:	2380      	movs	r3, #128	; 0x80
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	400b      	ands	r3, r1
 8004716:	431a      	orrs	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	69db      	ldr	r3, [r3, #28]
 800471c:	2138      	movs	r1, #56	; 0x38
 800471e:	400b      	ands	r3, r1
 8004720:	431a      	orrs	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	2180      	movs	r1, #128	; 0x80
 8004728:	400b      	ands	r3, r1
 800472a:	431a      	orrs	r2, r3
 800472c:	0011      	movs	r1, r2
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004732:	2380      	movs	r3, #128	; 0x80
 8004734:	019b      	lsls	r3, r3, #6
 8004736:	401a      	ands	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	430a      	orrs	r2, r1
 800473e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	699b      	ldr	r3, [r3, #24]
 8004744:	0c1b      	lsrs	r3, r3, #16
 8004746:	2204      	movs	r2, #4
 8004748:	401a      	ands	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474e:	2110      	movs	r1, #16
 8004750:	400b      	ands	r3, r1
 8004752:	431a      	orrs	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004758:	2108      	movs	r1, #8
 800475a:	400b      	ands	r3, r1
 800475c:	431a      	orrs	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68d9      	ldr	r1, [r3, #12]
 8004762:	23f0      	movs	r3, #240	; 0xf0
 8004764:	011b      	lsls	r3, r3, #4
 8004766:	400b      	ands	r3, r1
 8004768:	431a      	orrs	r2, r3
 800476a:	0011      	movs	r1, r2
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	2380      	movs	r3, #128	; 0x80
 8004770:	015b      	lsls	r3, r3, #5
 8004772:	401a      	ands	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	430a      	orrs	r2, r1
 800477a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	69da      	ldr	r2, [r3, #28]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4907      	ldr	r1, [pc, #28]	; (80047a4 <HAL_SPI_Init+0x16c>)
 8004788:	400a      	ands	r2, r1
 800478a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	225d      	movs	r2, #93	; 0x5d
 8004796:	2101      	movs	r1, #1
 8004798:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	0018      	movs	r0, r3
 800479e:	46bd      	mov	sp, r7
 80047a0:	b004      	add	sp, #16
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	fffff7ff 	.word	0xfffff7ff

080047a8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b088      	sub	sp, #32
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	603b      	str	r3, [r7, #0]
 80047b4:	1dbb      	adds	r3, r7, #6
 80047b6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80047b8:	231f      	movs	r3, #31
 80047ba:	18fb      	adds	r3, r7, r3
 80047bc:	2200      	movs	r2, #0
 80047be:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	225c      	movs	r2, #92	; 0x5c
 80047c4:	5c9b      	ldrb	r3, [r3, r2]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d101      	bne.n	80047ce <HAL_SPI_Transmit+0x26>
 80047ca:	2302      	movs	r3, #2
 80047cc:	e140      	b.n	8004a50 <HAL_SPI_Transmit+0x2a8>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	225c      	movs	r2, #92	; 0x5c
 80047d2:	2101      	movs	r1, #1
 80047d4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047d6:	f7fd fb3b 	bl	8001e50 <HAL_GetTick>
 80047da:	0003      	movs	r3, r0
 80047dc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80047de:	2316      	movs	r3, #22
 80047e0:	18fb      	adds	r3, r7, r3
 80047e2:	1dba      	adds	r2, r7, #6
 80047e4:	8812      	ldrh	r2, [r2, #0]
 80047e6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	225d      	movs	r2, #93	; 0x5d
 80047ec:	5c9b      	ldrb	r3, [r3, r2]
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d004      	beq.n	80047fe <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80047f4:	231f      	movs	r3, #31
 80047f6:	18fb      	adds	r3, r7, r3
 80047f8:	2202      	movs	r2, #2
 80047fa:	701a      	strb	r2, [r3, #0]
    goto error;
 80047fc:	e11d      	b.n	8004a3a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d003      	beq.n	800480c <HAL_SPI_Transmit+0x64>
 8004804:	1dbb      	adds	r3, r7, #6
 8004806:	881b      	ldrh	r3, [r3, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d104      	bne.n	8004816 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800480c:	231f      	movs	r3, #31
 800480e:	18fb      	adds	r3, r7, r3
 8004810:	2201      	movs	r2, #1
 8004812:	701a      	strb	r2, [r3, #0]
    goto error;
 8004814:	e111      	b.n	8004a3a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	225d      	movs	r2, #93	; 0x5d
 800481a:	2103      	movs	r1, #3
 800481c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	1dba      	adds	r2, r7, #6
 800482e:	8812      	ldrh	r2, [r2, #0]
 8004830:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	1dba      	adds	r2, r7, #6
 8004836:	8812      	ldrh	r2, [r2, #0]
 8004838:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2244      	movs	r2, #68	; 0x44
 8004844:	2100      	movs	r1, #0
 8004846:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2246      	movs	r2, #70	; 0x46
 800484c:	2100      	movs	r1, #0
 800484e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2200      	movs	r2, #0
 8004854:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	689a      	ldr	r2, [r3, #8]
 8004860:	2380      	movs	r3, #128	; 0x80
 8004862:	021b      	lsls	r3, r3, #8
 8004864:	429a      	cmp	r2, r3
 8004866:	d110      	bne.n	800488a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2140      	movs	r1, #64	; 0x40
 8004874:	438a      	bics	r2, r1
 8004876:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2180      	movs	r1, #128	; 0x80
 8004884:	01c9      	lsls	r1, r1, #7
 8004886:	430a      	orrs	r2, r1
 8004888:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2240      	movs	r2, #64	; 0x40
 8004892:	4013      	ands	r3, r2
 8004894:	2b40      	cmp	r3, #64	; 0x40
 8004896:	d007      	beq.n	80048a8 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2140      	movs	r1, #64	; 0x40
 80048a4:	430a      	orrs	r2, r1
 80048a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	68da      	ldr	r2, [r3, #12]
 80048ac:	23e0      	movs	r3, #224	; 0xe0
 80048ae:	00db      	lsls	r3, r3, #3
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d94e      	bls.n	8004952 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d004      	beq.n	80048c6 <HAL_SPI_Transmit+0x11e>
 80048bc:	2316      	movs	r3, #22
 80048be:	18fb      	adds	r3, r7, r3
 80048c0:	881b      	ldrh	r3, [r3, #0]
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d13f      	bne.n	8004946 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ca:	881a      	ldrh	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d6:	1c9a      	adds	r2, r3, #2
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	3b01      	subs	r3, #1
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80048ea:	e02c      	b.n	8004946 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	2202      	movs	r2, #2
 80048f4:	4013      	ands	r3, r2
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d112      	bne.n	8004920 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fe:	881a      	ldrh	r2, [r3, #0]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490a:	1c9a      	adds	r2, r3, #2
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004914:	b29b      	uxth	r3, r3
 8004916:	3b01      	subs	r3, #1
 8004918:	b29a      	uxth	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800491e:	e012      	b.n	8004946 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004920:	f7fd fa96 	bl	8001e50 <HAL_GetTick>
 8004924:	0002      	movs	r2, r0
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	683a      	ldr	r2, [r7, #0]
 800492c:	429a      	cmp	r2, r3
 800492e:	d802      	bhi.n	8004936 <HAL_SPI_Transmit+0x18e>
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	3301      	adds	r3, #1
 8004934:	d102      	bne.n	800493c <HAL_SPI_Transmit+0x194>
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d104      	bne.n	8004946 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 800493c:	231f      	movs	r3, #31
 800493e:	18fb      	adds	r3, r7, r3
 8004940:	2203      	movs	r2, #3
 8004942:	701a      	strb	r2, [r3, #0]
          goto error;
 8004944:	e079      	b.n	8004a3a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800494a:	b29b      	uxth	r3, r3
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1cd      	bne.n	80048ec <HAL_SPI_Transmit+0x144>
 8004950:	e04f      	b.n	80049f2 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d004      	beq.n	8004964 <HAL_SPI_Transmit+0x1bc>
 800495a:	2316      	movs	r3, #22
 800495c:	18fb      	adds	r3, r7, r3
 800495e:	881b      	ldrh	r3, [r3, #0]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d141      	bne.n	80049e8 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	330c      	adds	r3, #12
 800496e:	7812      	ldrb	r2, [r2, #0]
 8004970:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004976:	1c5a      	adds	r2, r3, #1
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004980:	b29b      	uxth	r3, r3
 8004982:	3b01      	subs	r3, #1
 8004984:	b29a      	uxth	r2, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800498a:	e02d      	b.n	80049e8 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	2202      	movs	r2, #2
 8004994:	4013      	ands	r3, r2
 8004996:	2b02      	cmp	r3, #2
 8004998:	d113      	bne.n	80049c2 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	330c      	adds	r3, #12
 80049a4:	7812      	ldrb	r2, [r2, #0]
 80049a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ac:	1c5a      	adds	r2, r3, #1
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	3b01      	subs	r3, #1
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049c0:	e012      	b.n	80049e8 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049c2:	f7fd fa45 	bl	8001e50 <HAL_GetTick>
 80049c6:	0002      	movs	r2, r0
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	683a      	ldr	r2, [r7, #0]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d802      	bhi.n	80049d8 <HAL_SPI_Transmit+0x230>
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	3301      	adds	r3, #1
 80049d6:	d102      	bne.n	80049de <HAL_SPI_Transmit+0x236>
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d104      	bne.n	80049e8 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80049de:	231f      	movs	r3, #31
 80049e0:	18fb      	adds	r3, r7, r3
 80049e2:	2203      	movs	r2, #3
 80049e4:	701a      	strb	r2, [r3, #0]
          goto error;
 80049e6:	e028      	b.n	8004a3a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1cc      	bne.n	800498c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049f2:	69ba      	ldr	r2, [r7, #24]
 80049f4:	6839      	ldr	r1, [r7, #0]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	0018      	movs	r0, r3
 80049fa:	f000 f95d 	bl	8004cb8 <SPI_EndRxTxTransaction>
 80049fe:	1e03      	subs	r3, r0, #0
 8004a00:	d002      	beq.n	8004a08 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2220      	movs	r2, #32
 8004a06:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d10a      	bne.n	8004a26 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a10:	2300      	movs	r3, #0
 8004a12:	613b      	str	r3, [r7, #16]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	613b      	str	r3, [r7, #16]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	613b      	str	r3, [r7, #16]
 8004a24:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d004      	beq.n	8004a38 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8004a2e:	231f      	movs	r3, #31
 8004a30:	18fb      	adds	r3, r7, r3
 8004a32:	2201      	movs	r2, #1
 8004a34:	701a      	strb	r2, [r3, #0]
 8004a36:	e000      	b.n	8004a3a <HAL_SPI_Transmit+0x292>
  }

error:
 8004a38:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	225d      	movs	r2, #93	; 0x5d
 8004a3e:	2101      	movs	r1, #1
 8004a40:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	225c      	movs	r2, #92	; 0x5c
 8004a46:	2100      	movs	r1, #0
 8004a48:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004a4a:	231f      	movs	r3, #31
 8004a4c:	18fb      	adds	r3, r7, r3
 8004a4e:	781b      	ldrb	r3, [r3, #0]
}
 8004a50:	0018      	movs	r0, r3
 8004a52:	46bd      	mov	sp, r7
 8004a54:	b008      	add	sp, #32
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b088      	sub	sp, #32
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	603b      	str	r3, [r7, #0]
 8004a64:	1dfb      	adds	r3, r7, #7
 8004a66:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a68:	f7fd f9f2 	bl	8001e50 <HAL_GetTick>
 8004a6c:	0002      	movs	r2, r0
 8004a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a70:	1a9b      	subs	r3, r3, r2
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	18d3      	adds	r3, r2, r3
 8004a76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a78:	f7fd f9ea 	bl	8001e50 <HAL_GetTick>
 8004a7c:	0003      	movs	r3, r0
 8004a7e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a80:	4b3a      	ldr	r3, [pc, #232]	; (8004b6c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	015b      	lsls	r3, r3, #5
 8004a86:	0d1b      	lsrs	r3, r3, #20
 8004a88:	69fa      	ldr	r2, [r7, #28]
 8004a8a:	4353      	muls	r3, r2
 8004a8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a8e:	e058      	b.n	8004b42 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	3301      	adds	r3, #1
 8004a94:	d055      	beq.n	8004b42 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a96:	f7fd f9db 	bl	8001e50 <HAL_GetTick>
 8004a9a:	0002      	movs	r2, r0
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	69fa      	ldr	r2, [r7, #28]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d902      	bls.n	8004aac <SPI_WaitFlagStateUntilTimeout+0x54>
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d142      	bne.n	8004b32 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	685a      	ldr	r2, [r3, #4]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	21e0      	movs	r1, #224	; 0xe0
 8004ab8:	438a      	bics	r2, r1
 8004aba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	685a      	ldr	r2, [r3, #4]
 8004ac0:	2382      	movs	r3, #130	; 0x82
 8004ac2:	005b      	lsls	r3, r3, #1
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d113      	bne.n	8004af0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	689a      	ldr	r2, [r3, #8]
 8004acc:	2380      	movs	r3, #128	; 0x80
 8004ace:	021b      	lsls	r3, r3, #8
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d005      	beq.n	8004ae0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	689a      	ldr	r2, [r3, #8]
 8004ad8:	2380      	movs	r3, #128	; 0x80
 8004ada:	00db      	lsls	r3, r3, #3
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d107      	bne.n	8004af0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2140      	movs	r1, #64	; 0x40
 8004aec:	438a      	bics	r2, r1
 8004aee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004af4:	2380      	movs	r3, #128	; 0x80
 8004af6:	019b      	lsls	r3, r3, #6
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d110      	bne.n	8004b1e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	491a      	ldr	r1, [pc, #104]	; (8004b70 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004b08:	400a      	ands	r2, r1
 8004b0a:	601a      	str	r2, [r3, #0]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2180      	movs	r1, #128	; 0x80
 8004b18:	0189      	lsls	r1, r1, #6
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	225d      	movs	r2, #93	; 0x5d
 8004b22:	2101      	movs	r1, #1
 8004b24:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	225c      	movs	r2, #92	; 0x5c
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e017      	b.n	8004b62 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d101      	bne.n	8004b3c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	68ba      	ldr	r2, [r7, #8]
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	68ba      	ldr	r2, [r7, #8]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	425a      	negs	r2, r3
 8004b52:	4153      	adcs	r3, r2
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	001a      	movs	r2, r3
 8004b58:	1dfb      	adds	r3, r7, #7
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d197      	bne.n	8004a90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	0018      	movs	r0, r3
 8004b64:	46bd      	mov	sp, r7
 8004b66:	b008      	add	sp, #32
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	46c0      	nop			; (mov r8, r8)
 8004b6c:	20000028 	.word	0x20000028
 8004b70:	ffffdfff 	.word	0xffffdfff

08004b74 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b08a      	sub	sp, #40	; 0x28
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
 8004b80:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004b82:	2317      	movs	r3, #23
 8004b84:	18fb      	adds	r3, r7, r3
 8004b86:	2200      	movs	r2, #0
 8004b88:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004b8a:	f7fd f961 	bl	8001e50 <HAL_GetTick>
 8004b8e:	0002      	movs	r2, r0
 8004b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b92:	1a9b      	subs	r3, r3, r2
 8004b94:	683a      	ldr	r2, [r7, #0]
 8004b96:	18d3      	adds	r3, r2, r3
 8004b98:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004b9a:	f7fd f959 	bl	8001e50 <HAL_GetTick>
 8004b9e:	0003      	movs	r3, r0
 8004ba0:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	330c      	adds	r3, #12
 8004ba8:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004baa:	4b41      	ldr	r3, [pc, #260]	; (8004cb0 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	0013      	movs	r3, r2
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	189b      	adds	r3, r3, r2
 8004bb4:	00da      	lsls	r2, r3, #3
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	0d1b      	lsrs	r3, r3, #20
 8004bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bbc:	4353      	muls	r3, r2
 8004bbe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004bc0:	e068      	b.n	8004c94 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004bc2:	68ba      	ldr	r2, [r7, #8]
 8004bc4:	23c0      	movs	r3, #192	; 0xc0
 8004bc6:	00db      	lsls	r3, r3, #3
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d10a      	bne.n	8004be2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d107      	bne.n	8004be2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	b2da      	uxtb	r2, r3
 8004bd8:	2117      	movs	r1, #23
 8004bda:	187b      	adds	r3, r7, r1
 8004bdc:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004bde:	187b      	adds	r3, r7, r1
 8004be0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	3301      	adds	r3, #1
 8004be6:	d055      	beq.n	8004c94 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004be8:	f7fd f932 	bl	8001e50 <HAL_GetTick>
 8004bec:	0002      	movs	r2, r0
 8004bee:	6a3b      	ldr	r3, [r7, #32]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d902      	bls.n	8004bfe <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d142      	bne.n	8004c84 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	685a      	ldr	r2, [r3, #4]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	21e0      	movs	r1, #224	; 0xe0
 8004c0a:	438a      	bics	r2, r1
 8004c0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	2382      	movs	r3, #130	; 0x82
 8004c14:	005b      	lsls	r3, r3, #1
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d113      	bne.n	8004c42 <SPI_WaitFifoStateUntilTimeout+0xce>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	689a      	ldr	r2, [r3, #8]
 8004c1e:	2380      	movs	r3, #128	; 0x80
 8004c20:	021b      	lsls	r3, r3, #8
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d005      	beq.n	8004c32 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	689a      	ldr	r2, [r3, #8]
 8004c2a:	2380      	movs	r3, #128	; 0x80
 8004c2c:	00db      	lsls	r3, r3, #3
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d107      	bne.n	8004c42 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2140      	movs	r1, #64	; 0x40
 8004c3e:	438a      	bics	r2, r1
 8004c40:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c46:	2380      	movs	r3, #128	; 0x80
 8004c48:	019b      	lsls	r3, r3, #6
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d110      	bne.n	8004c70 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4916      	ldr	r1, [pc, #88]	; (8004cb4 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004c5a:	400a      	ands	r2, r1
 8004c5c:	601a      	str	r2, [r3, #0]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2180      	movs	r1, #128	; 0x80
 8004c6a:	0189      	lsls	r1, r1, #6
 8004c6c:	430a      	orrs	r2, r1
 8004c6e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	225d      	movs	r2, #93	; 0x5d
 8004c74:	2101      	movs	r1, #1
 8004c76:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	225c      	movs	r2, #92	; 0x5c
 8004c7c:	2100      	movs	r1, #0
 8004c7e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e010      	b.n	8004ca6 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	3b01      	subs	r3, #1
 8004c92:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	68ba      	ldr	r2, [r7, #8]
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d18e      	bne.n	8004bc2 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	0018      	movs	r0, r3
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	b00a      	add	sp, #40	; 0x28
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	46c0      	nop			; (mov r8, r8)
 8004cb0:	20000028 	.word	0x20000028
 8004cb4:	ffffdfff 	.word	0xffffdfff

08004cb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b086      	sub	sp, #24
 8004cbc:	af02      	add	r7, sp, #8
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cc4:	68ba      	ldr	r2, [r7, #8]
 8004cc6:	23c0      	movs	r3, #192	; 0xc0
 8004cc8:	0159      	lsls	r1, r3, #5
 8004cca:	68f8      	ldr	r0, [r7, #12]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	9300      	str	r3, [sp, #0]
 8004cd0:	0013      	movs	r3, r2
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f7ff ff4e 	bl	8004b74 <SPI_WaitFifoStateUntilTimeout>
 8004cd8:	1e03      	subs	r3, r0, #0
 8004cda:	d007      	beq.n	8004cec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	431a      	orrs	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e027      	b.n	8004d3c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004cec:	68ba      	ldr	r2, [r7, #8]
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	9300      	str	r3, [sp, #0]
 8004cf4:	0013      	movs	r3, r2
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	2180      	movs	r1, #128	; 0x80
 8004cfa:	f7ff fead 	bl	8004a58 <SPI_WaitFlagStateUntilTimeout>
 8004cfe:	1e03      	subs	r3, r0, #0
 8004d00:	d007      	beq.n	8004d12 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d06:	2220      	movs	r2, #32
 8004d08:	431a      	orrs	r2, r3
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e014      	b.n	8004d3c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d12:	68ba      	ldr	r2, [r7, #8]
 8004d14:	23c0      	movs	r3, #192	; 0xc0
 8004d16:	00d9      	lsls	r1, r3, #3
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	9300      	str	r3, [sp, #0]
 8004d1e:	0013      	movs	r3, r2
 8004d20:	2200      	movs	r2, #0
 8004d22:	f7ff ff27 	bl	8004b74 <SPI_WaitFifoStateUntilTimeout>
 8004d26:	1e03      	subs	r3, r0, #0
 8004d28:	d007      	beq.n	8004d3a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d2e:	2220      	movs	r2, #32
 8004d30:	431a      	orrs	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e000      	b.n	8004d3c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	0018      	movs	r0, r3
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	b004      	add	sp, #16
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e042      	b.n	8004ddc <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	223d      	movs	r2, #61	; 0x3d
 8004d5a:	5c9b      	ldrb	r3, [r3, r2]
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d107      	bne.n	8004d72 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	223c      	movs	r2, #60	; 0x3c
 8004d66:	2100      	movs	r1, #0
 8004d68:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	0018      	movs	r0, r3
 8004d6e:	f7fc fe83 	bl	8001a78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	223d      	movs	r2, #61	; 0x3d
 8004d76:	2102      	movs	r1, #2
 8004d78:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	3304      	adds	r3, #4
 8004d82:	0019      	movs	r1, r3
 8004d84:	0010      	movs	r0, r2
 8004d86:	f000 fc55 	bl	8005634 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2246      	movs	r2, #70	; 0x46
 8004d8e:	2101      	movs	r1, #1
 8004d90:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	223e      	movs	r2, #62	; 0x3e
 8004d96:	2101      	movs	r1, #1
 8004d98:	5499      	strb	r1, [r3, r2]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	223f      	movs	r2, #63	; 0x3f
 8004d9e:	2101      	movs	r1, #1
 8004da0:	5499      	strb	r1, [r3, r2]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2240      	movs	r2, #64	; 0x40
 8004da6:	2101      	movs	r1, #1
 8004da8:	5499      	strb	r1, [r3, r2]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2241      	movs	r2, #65	; 0x41
 8004dae:	2101      	movs	r1, #1
 8004db0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2242      	movs	r2, #66	; 0x42
 8004db6:	2101      	movs	r1, #1
 8004db8:	5499      	strb	r1, [r3, r2]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2243      	movs	r2, #67	; 0x43
 8004dbe:	2101      	movs	r1, #1
 8004dc0:	5499      	strb	r1, [r3, r2]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2244      	movs	r2, #68	; 0x44
 8004dc6:	2101      	movs	r1, #1
 8004dc8:	5499      	strb	r1, [r3, r2]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2245      	movs	r2, #69	; 0x45
 8004dce:	2101      	movs	r1, #1
 8004dd0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	223d      	movs	r2, #61	; 0x3d
 8004dd6:	2101      	movs	r1, #1
 8004dd8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	0018      	movs	r0, r3
 8004dde:	46bd      	mov	sp, r7
 8004de0:	b002      	add	sp, #8
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dee:	230f      	movs	r3, #15
 8004df0:	18fb      	adds	r3, r7, r3
 8004df2:	2200      	movs	r2, #0
 8004df4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d108      	bne.n	8004e0e <HAL_TIM_OC_Start_IT+0x2a>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	223e      	movs	r2, #62	; 0x3e
 8004e00:	5c9b      	ldrb	r3, [r3, r2]
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	3b01      	subs	r3, #1
 8004e06:	1e5a      	subs	r2, r3, #1
 8004e08:	4193      	sbcs	r3, r2
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	e01f      	b.n	8004e4e <HAL_TIM_OC_Start_IT+0x6a>
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	2b04      	cmp	r3, #4
 8004e12:	d108      	bne.n	8004e26 <HAL_TIM_OC_Start_IT+0x42>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	223f      	movs	r2, #63	; 0x3f
 8004e18:	5c9b      	ldrb	r3, [r3, r2]
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	1e5a      	subs	r2, r3, #1
 8004e20:	4193      	sbcs	r3, r2
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	e013      	b.n	8004e4e <HAL_TIM_OC_Start_IT+0x6a>
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	2b08      	cmp	r3, #8
 8004e2a:	d108      	bne.n	8004e3e <HAL_TIM_OC_Start_IT+0x5a>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2240      	movs	r2, #64	; 0x40
 8004e30:	5c9b      	ldrb	r3, [r3, r2]
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	3b01      	subs	r3, #1
 8004e36:	1e5a      	subs	r2, r3, #1
 8004e38:	4193      	sbcs	r3, r2
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	e007      	b.n	8004e4e <HAL_TIM_OC_Start_IT+0x6a>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2241      	movs	r2, #65	; 0x41
 8004e42:	5c9b      	ldrb	r3, [r3, r2]
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	3b01      	subs	r3, #1
 8004e48:	1e5a      	subs	r2, r3, #1
 8004e4a:	4193      	sbcs	r3, r2
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d001      	beq.n	8004e56 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e0b7      	b.n	8004fc6 <HAL_TIM_OC_Start_IT+0x1e2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d104      	bne.n	8004e66 <HAL_TIM_OC_Start_IT+0x82>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	223e      	movs	r2, #62	; 0x3e
 8004e60:	2102      	movs	r1, #2
 8004e62:	5499      	strb	r1, [r3, r2]
 8004e64:	e013      	b.n	8004e8e <HAL_TIM_OC_Start_IT+0xaa>
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	2b04      	cmp	r3, #4
 8004e6a:	d104      	bne.n	8004e76 <HAL_TIM_OC_Start_IT+0x92>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	223f      	movs	r2, #63	; 0x3f
 8004e70:	2102      	movs	r1, #2
 8004e72:	5499      	strb	r1, [r3, r2]
 8004e74:	e00b      	b.n	8004e8e <HAL_TIM_OC_Start_IT+0xaa>
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	2b08      	cmp	r3, #8
 8004e7a:	d104      	bne.n	8004e86 <HAL_TIM_OC_Start_IT+0xa2>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2240      	movs	r2, #64	; 0x40
 8004e80:	2102      	movs	r1, #2
 8004e82:	5499      	strb	r1, [r3, r2]
 8004e84:	e003      	b.n	8004e8e <HAL_TIM_OC_Start_IT+0xaa>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2241      	movs	r2, #65	; 0x41
 8004e8a:	2102      	movs	r1, #2
 8004e8c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	2b0c      	cmp	r3, #12
 8004e92:	d02a      	beq.n	8004eea <HAL_TIM_OC_Start_IT+0x106>
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	2b0c      	cmp	r3, #12
 8004e98:	d830      	bhi.n	8004efc <HAL_TIM_OC_Start_IT+0x118>
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	2b08      	cmp	r3, #8
 8004e9e:	d01b      	beq.n	8004ed8 <HAL_TIM_OC_Start_IT+0xf4>
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	2b08      	cmp	r3, #8
 8004ea4:	d82a      	bhi.n	8004efc <HAL_TIM_OC_Start_IT+0x118>
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d003      	beq.n	8004eb4 <HAL_TIM_OC_Start_IT+0xd0>
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	2b04      	cmp	r3, #4
 8004eb0:	d009      	beq.n	8004ec6 <HAL_TIM_OC_Start_IT+0xe2>
 8004eb2:	e023      	b.n	8004efc <HAL_TIM_OC_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68da      	ldr	r2, [r3, #12]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2102      	movs	r1, #2
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	60da      	str	r2, [r3, #12]
      break;
 8004ec4:	e01f      	b.n	8004f06 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68da      	ldr	r2, [r3, #12]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2104      	movs	r1, #4
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	60da      	str	r2, [r3, #12]
      break;
 8004ed6:	e016      	b.n	8004f06 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68da      	ldr	r2, [r3, #12]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2108      	movs	r1, #8
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	60da      	str	r2, [r3, #12]
      break;
 8004ee8:	e00d      	b.n	8004f06 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68da      	ldr	r2, [r3, #12]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2110      	movs	r1, #16
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	60da      	str	r2, [r3, #12]
      break;
 8004efa:	e004      	b.n	8004f06 <HAL_TIM_OC_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 8004efc:	230f      	movs	r3, #15
 8004efe:	18fb      	adds	r3, r7, r3
 8004f00:	2201      	movs	r2, #1
 8004f02:	701a      	strb	r2, [r3, #0]
      break;
 8004f04:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8004f06:	230f      	movs	r3, #15
 8004f08:	18fb      	adds	r3, r7, r3
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d157      	bne.n	8004fc0 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	6839      	ldr	r1, [r7, #0]
 8004f16:	2201      	movs	r2, #1
 8004f18:	0018      	movs	r0, r3
 8004f1a:	f000 fea1 	bl	8005c60 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a2b      	ldr	r2, [pc, #172]	; (8004fd0 <HAL_TIM_OC_Start_IT+0x1ec>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d00e      	beq.n	8004f46 <HAL_TIM_OC_Start_IT+0x162>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a29      	ldr	r2, [pc, #164]	; (8004fd4 <HAL_TIM_OC_Start_IT+0x1f0>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d009      	beq.n	8004f46 <HAL_TIM_OC_Start_IT+0x162>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a28      	ldr	r2, [pc, #160]	; (8004fd8 <HAL_TIM_OC_Start_IT+0x1f4>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d004      	beq.n	8004f46 <HAL_TIM_OC_Start_IT+0x162>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a26      	ldr	r2, [pc, #152]	; (8004fdc <HAL_TIM_OC_Start_IT+0x1f8>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d101      	bne.n	8004f4a <HAL_TIM_OC_Start_IT+0x166>
 8004f46:	2301      	movs	r3, #1
 8004f48:	e000      	b.n	8004f4c <HAL_TIM_OC_Start_IT+0x168>
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d008      	beq.n	8004f62 <HAL_TIM_OC_Start_IT+0x17e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2180      	movs	r1, #128	; 0x80
 8004f5c:	0209      	lsls	r1, r1, #8
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a1a      	ldr	r2, [pc, #104]	; (8004fd0 <HAL_TIM_OC_Start_IT+0x1ec>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d00f      	beq.n	8004f8c <HAL_TIM_OC_Start_IT+0x1a8>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	2380      	movs	r3, #128	; 0x80
 8004f72:	05db      	lsls	r3, r3, #23
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d009      	beq.n	8004f8c <HAL_TIM_OC_Start_IT+0x1a8>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a18      	ldr	r2, [pc, #96]	; (8004fe0 <HAL_TIM_OC_Start_IT+0x1fc>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d004      	beq.n	8004f8c <HAL_TIM_OC_Start_IT+0x1a8>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a13      	ldr	r2, [pc, #76]	; (8004fd4 <HAL_TIM_OC_Start_IT+0x1f0>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d111      	bne.n	8004fb0 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	2207      	movs	r2, #7
 8004f94:	4013      	ands	r3, r2
 8004f96:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	2b06      	cmp	r3, #6
 8004f9c:	d010      	beq.n	8004fc0 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2101      	movs	r1, #1
 8004faa:	430a      	orrs	r2, r1
 8004fac:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fae:	e007      	b.n	8004fc0 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2101      	movs	r1, #1
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004fc0:	230f      	movs	r3, #15
 8004fc2:	18fb      	adds	r3, r7, r3
 8004fc4:	781b      	ldrb	r3, [r3, #0]
}
 8004fc6:	0018      	movs	r0, r3
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	b004      	add	sp, #16
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	46c0      	nop			; (mov r8, r8)
 8004fd0:	40012c00 	.word	0x40012c00
 8004fd4:	40014000 	.word	0x40014000
 8004fd8:	40014400 	.word	0x40014400
 8004fdc:	40014800 	.word	0x40014800
 8004fe0:	40000400 	.word	0x40000400

08004fe4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d101      	bne.n	8004ff6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e042      	b.n	800507c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	223d      	movs	r2, #61	; 0x3d
 8004ffa:	5c9b      	ldrb	r3, [r3, r2]
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d107      	bne.n	8005012 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	223c      	movs	r2, #60	; 0x3c
 8005006:	2100      	movs	r1, #0
 8005008:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	0018      	movs	r0, r3
 800500e:	f000 f839 	bl	8005084 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	223d      	movs	r2, #61	; 0x3d
 8005016:	2102      	movs	r1, #2
 8005018:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	3304      	adds	r3, #4
 8005022:	0019      	movs	r1, r3
 8005024:	0010      	movs	r0, r2
 8005026:	f000 fb05 	bl	8005634 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2246      	movs	r2, #70	; 0x46
 800502e:	2101      	movs	r1, #1
 8005030:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	223e      	movs	r2, #62	; 0x3e
 8005036:	2101      	movs	r1, #1
 8005038:	5499      	strb	r1, [r3, r2]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	223f      	movs	r2, #63	; 0x3f
 800503e:	2101      	movs	r1, #1
 8005040:	5499      	strb	r1, [r3, r2]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2240      	movs	r2, #64	; 0x40
 8005046:	2101      	movs	r1, #1
 8005048:	5499      	strb	r1, [r3, r2]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2241      	movs	r2, #65	; 0x41
 800504e:	2101      	movs	r1, #1
 8005050:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2242      	movs	r2, #66	; 0x42
 8005056:	2101      	movs	r1, #1
 8005058:	5499      	strb	r1, [r3, r2]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2243      	movs	r2, #67	; 0x43
 800505e:	2101      	movs	r1, #1
 8005060:	5499      	strb	r1, [r3, r2]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2244      	movs	r2, #68	; 0x44
 8005066:	2101      	movs	r1, #1
 8005068:	5499      	strb	r1, [r3, r2]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2245      	movs	r2, #69	; 0x45
 800506e:	2101      	movs	r1, #1
 8005070:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	223d      	movs	r2, #61	; 0x3d
 8005076:	2101      	movs	r1, #1
 8005078:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800507a:	2300      	movs	r3, #0
}
 800507c:	0018      	movs	r0, r3
 800507e:	46bd      	mov	sp, r7
 8005080:	b002      	add	sp, #8
 8005082:	bd80      	pop	{r7, pc}

08005084 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800508c:	46c0      	nop			; (mov r8, r8)
 800508e:	46bd      	mov	sp, r7
 8005090:	b002      	add	sp, #8
 8005092:	bd80      	pop	{r7, pc}

08005094 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	2202      	movs	r2, #2
 80050a4:	4013      	ands	r3, r2
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d124      	bne.n	80050f4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	2202      	movs	r2, #2
 80050b2:	4013      	ands	r3, r2
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d11d      	bne.n	80050f4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2203      	movs	r2, #3
 80050be:	4252      	negs	r2, r2
 80050c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2201      	movs	r2, #1
 80050c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	2203      	movs	r2, #3
 80050d0:	4013      	ands	r3, r2
 80050d2:	d004      	beq.n	80050de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	0018      	movs	r0, r3
 80050d8:	f000 fa94 	bl	8005604 <HAL_TIM_IC_CaptureCallback>
 80050dc:	e007      	b.n	80050ee <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	0018      	movs	r0, r3
 80050e2:	f7fb f8af 	bl	8000244 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	0018      	movs	r0, r3
 80050ea:	f000 fa93 	bl	8005614 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	2204      	movs	r2, #4
 80050fc:	4013      	ands	r3, r2
 80050fe:	2b04      	cmp	r3, #4
 8005100:	d125      	bne.n	800514e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	2204      	movs	r2, #4
 800510a:	4013      	ands	r3, r2
 800510c:	2b04      	cmp	r3, #4
 800510e:	d11e      	bne.n	800514e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2205      	movs	r2, #5
 8005116:	4252      	negs	r2, r2
 8005118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2202      	movs	r2, #2
 800511e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	699a      	ldr	r2, [r3, #24]
 8005126:	23c0      	movs	r3, #192	; 0xc0
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	4013      	ands	r3, r2
 800512c:	d004      	beq.n	8005138 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	0018      	movs	r0, r3
 8005132:	f000 fa67 	bl	8005604 <HAL_TIM_IC_CaptureCallback>
 8005136:	e007      	b.n	8005148 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	0018      	movs	r0, r3
 800513c:	f7fb f882 	bl	8000244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	0018      	movs	r0, r3
 8005144:	f000 fa66 	bl	8005614 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	2208      	movs	r2, #8
 8005156:	4013      	ands	r3, r2
 8005158:	2b08      	cmp	r3, #8
 800515a:	d124      	bne.n	80051a6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	2208      	movs	r2, #8
 8005164:	4013      	ands	r3, r2
 8005166:	2b08      	cmp	r3, #8
 8005168:	d11d      	bne.n	80051a6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2209      	movs	r2, #9
 8005170:	4252      	negs	r2, r2
 8005172:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2204      	movs	r2, #4
 8005178:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	69db      	ldr	r3, [r3, #28]
 8005180:	2203      	movs	r2, #3
 8005182:	4013      	ands	r3, r2
 8005184:	d004      	beq.n	8005190 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	0018      	movs	r0, r3
 800518a:	f000 fa3b 	bl	8005604 <HAL_TIM_IC_CaptureCallback>
 800518e:	e007      	b.n	80051a0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	0018      	movs	r0, r3
 8005194:	f7fb f856 	bl	8000244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	0018      	movs	r0, r3
 800519c:	f000 fa3a 	bl	8005614 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	2210      	movs	r2, #16
 80051ae:	4013      	ands	r3, r2
 80051b0:	2b10      	cmp	r3, #16
 80051b2:	d125      	bne.n	8005200 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	2210      	movs	r2, #16
 80051bc:	4013      	ands	r3, r2
 80051be:	2b10      	cmp	r3, #16
 80051c0:	d11e      	bne.n	8005200 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2211      	movs	r2, #17
 80051c8:	4252      	negs	r2, r2
 80051ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2208      	movs	r2, #8
 80051d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	69da      	ldr	r2, [r3, #28]
 80051d8:	23c0      	movs	r3, #192	; 0xc0
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	4013      	ands	r3, r2
 80051de:	d004      	beq.n	80051ea <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	0018      	movs	r0, r3
 80051e4:	f000 fa0e 	bl	8005604 <HAL_TIM_IC_CaptureCallback>
 80051e8:	e007      	b.n	80051fa <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	0018      	movs	r0, r3
 80051ee:	f7fb f829 	bl	8000244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	0018      	movs	r0, r3
 80051f6:	f000 fa0d 	bl	8005614 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	2201      	movs	r2, #1
 8005208:	4013      	ands	r3, r2
 800520a:	2b01      	cmp	r3, #1
 800520c:	d10f      	bne.n	800522e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	2201      	movs	r2, #1
 8005216:	4013      	ands	r3, r2
 8005218:	2b01      	cmp	r3, #1
 800521a:	d108      	bne.n	800522e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2202      	movs	r2, #2
 8005222:	4252      	negs	r2, r2
 8005224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	0018      	movs	r0, r3
 800522a:	f000 f9e3 	bl	80055f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	2280      	movs	r2, #128	; 0x80
 8005236:	4013      	ands	r3, r2
 8005238:	2b80      	cmp	r3, #128	; 0x80
 800523a:	d10f      	bne.n	800525c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	2280      	movs	r2, #128	; 0x80
 8005244:	4013      	ands	r3, r2
 8005246:	2b80      	cmp	r3, #128	; 0x80
 8005248:	d108      	bne.n	800525c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2281      	movs	r2, #129	; 0x81
 8005250:	4252      	negs	r2, r2
 8005252:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	0018      	movs	r0, r3
 8005258:	f000 fdea 	bl	8005e30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	2240      	movs	r2, #64	; 0x40
 8005264:	4013      	ands	r3, r2
 8005266:	2b40      	cmp	r3, #64	; 0x40
 8005268:	d10f      	bne.n	800528a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	2240      	movs	r2, #64	; 0x40
 8005272:	4013      	ands	r3, r2
 8005274:	2b40      	cmp	r3, #64	; 0x40
 8005276:	d108      	bne.n	800528a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2241      	movs	r2, #65	; 0x41
 800527e:	4252      	negs	r2, r2
 8005280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	0018      	movs	r0, r3
 8005286:	f000 f9cd 	bl	8005624 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	2220      	movs	r2, #32
 8005292:	4013      	ands	r3, r2
 8005294:	2b20      	cmp	r3, #32
 8005296:	d10f      	bne.n	80052b8 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	2220      	movs	r2, #32
 80052a0:	4013      	ands	r3, r2
 80052a2:	2b20      	cmp	r3, #32
 80052a4:	d108      	bne.n	80052b8 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2221      	movs	r2, #33	; 0x21
 80052ac:	4252      	negs	r2, r2
 80052ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	0018      	movs	r0, r3
 80052b4:	f000 fdb4 	bl	8005e20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052b8:	46c0      	nop			; (mov r8, r8)
 80052ba:	46bd      	mov	sp, r7
 80052bc:	b002      	add	sp, #8
 80052be:	bd80      	pop	{r7, pc}

080052c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052cc:	2317      	movs	r3, #23
 80052ce:	18fb      	adds	r3, r7, r3
 80052d0:	2200      	movs	r2, #0
 80052d2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	223c      	movs	r2, #60	; 0x3c
 80052d8:	5c9b      	ldrb	r3, [r3, r2]
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d101      	bne.n	80052e2 <HAL_TIM_PWM_ConfigChannel+0x22>
 80052de:	2302      	movs	r3, #2
 80052e0:	e0ad      	b.n	800543e <HAL_TIM_PWM_ConfigChannel+0x17e>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	223c      	movs	r2, #60	; 0x3c
 80052e6:	2101      	movs	r1, #1
 80052e8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2b0c      	cmp	r3, #12
 80052ee:	d100      	bne.n	80052f2 <HAL_TIM_PWM_ConfigChannel+0x32>
 80052f0:	e076      	b.n	80053e0 <HAL_TIM_PWM_ConfigChannel+0x120>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2b0c      	cmp	r3, #12
 80052f6:	d900      	bls.n	80052fa <HAL_TIM_PWM_ConfigChannel+0x3a>
 80052f8:	e095      	b.n	8005426 <HAL_TIM_PWM_ConfigChannel+0x166>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2b08      	cmp	r3, #8
 80052fe:	d04e      	beq.n	800539e <HAL_TIM_PWM_ConfigChannel+0xde>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2b08      	cmp	r3, #8
 8005304:	d900      	bls.n	8005308 <HAL_TIM_PWM_ConfigChannel+0x48>
 8005306:	e08e      	b.n	8005426 <HAL_TIM_PWM_ConfigChannel+0x166>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d003      	beq.n	8005316 <HAL_TIM_PWM_ConfigChannel+0x56>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2b04      	cmp	r3, #4
 8005312:	d021      	beq.n	8005358 <HAL_TIM_PWM_ConfigChannel+0x98>
 8005314:	e087      	b.n	8005426 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68ba      	ldr	r2, [r7, #8]
 800531c:	0011      	movs	r1, r2
 800531e:	0018      	movs	r0, r3
 8005320:	f000 fa08 	bl	8005734 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	699a      	ldr	r2, [r3, #24]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2108      	movs	r1, #8
 8005330:	430a      	orrs	r2, r1
 8005332:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	699a      	ldr	r2, [r3, #24]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2104      	movs	r1, #4
 8005340:	438a      	bics	r2, r1
 8005342:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	6999      	ldr	r1, [r3, #24]
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	691a      	ldr	r2, [r3, #16]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	430a      	orrs	r2, r1
 8005354:	619a      	str	r2, [r3, #24]
      break;
 8005356:	e06b      	b.n	8005430 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68ba      	ldr	r2, [r7, #8]
 800535e:	0011      	movs	r1, r2
 8005360:	0018      	movs	r0, r3
 8005362:	f000 fa6f 	bl	8005844 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	699a      	ldr	r2, [r3, #24]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2180      	movs	r1, #128	; 0x80
 8005372:	0109      	lsls	r1, r1, #4
 8005374:	430a      	orrs	r2, r1
 8005376:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	699a      	ldr	r2, [r3, #24]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4931      	ldr	r1, [pc, #196]	; (8005448 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8005384:	400a      	ands	r2, r1
 8005386:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	6999      	ldr	r1, [r3, #24]
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	021a      	lsls	r2, r3, #8
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	430a      	orrs	r2, r1
 800539a:	619a      	str	r2, [r3, #24]
      break;
 800539c:	e048      	b.n	8005430 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	0011      	movs	r1, r2
 80053a6:	0018      	movs	r0, r3
 80053a8:	f000 fad0 	bl	800594c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	69da      	ldr	r2, [r3, #28]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2108      	movs	r1, #8
 80053b8:	430a      	orrs	r2, r1
 80053ba:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	69da      	ldr	r2, [r3, #28]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2104      	movs	r1, #4
 80053c8:	438a      	bics	r2, r1
 80053ca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	69d9      	ldr	r1, [r3, #28]
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	691a      	ldr	r2, [r3, #16]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	430a      	orrs	r2, r1
 80053dc:	61da      	str	r2, [r3, #28]
      break;
 80053de:	e027      	b.n	8005430 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68ba      	ldr	r2, [r7, #8]
 80053e6:	0011      	movs	r1, r2
 80053e8:	0018      	movs	r0, r3
 80053ea:	f000 fb35 	bl	8005a58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	69da      	ldr	r2, [r3, #28]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2180      	movs	r1, #128	; 0x80
 80053fa:	0109      	lsls	r1, r1, #4
 80053fc:	430a      	orrs	r2, r1
 80053fe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	69da      	ldr	r2, [r3, #28]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	490f      	ldr	r1, [pc, #60]	; (8005448 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800540c:	400a      	ands	r2, r1
 800540e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	69d9      	ldr	r1, [r3, #28]
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	021a      	lsls	r2, r3, #8
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	430a      	orrs	r2, r1
 8005422:	61da      	str	r2, [r3, #28]
      break;
 8005424:	e004      	b.n	8005430 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8005426:	2317      	movs	r3, #23
 8005428:	18fb      	adds	r3, r7, r3
 800542a:	2201      	movs	r2, #1
 800542c:	701a      	strb	r2, [r3, #0]
      break;
 800542e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	223c      	movs	r2, #60	; 0x3c
 8005434:	2100      	movs	r1, #0
 8005436:	5499      	strb	r1, [r3, r2]

  return status;
 8005438:	2317      	movs	r3, #23
 800543a:	18fb      	adds	r3, r7, r3
 800543c:	781b      	ldrb	r3, [r3, #0]
}
 800543e:	0018      	movs	r0, r3
 8005440:	46bd      	mov	sp, r7
 8005442:	b006      	add	sp, #24
 8005444:	bd80      	pop	{r7, pc}
 8005446:	46c0      	nop			; (mov r8, r8)
 8005448:	fffffbff 	.word	0xfffffbff

0800544c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005456:	230f      	movs	r3, #15
 8005458:	18fb      	adds	r3, r7, r3
 800545a:	2200      	movs	r2, #0
 800545c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	223c      	movs	r2, #60	; 0x3c
 8005462:	5c9b      	ldrb	r3, [r3, r2]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d101      	bne.n	800546c <HAL_TIM_ConfigClockSource+0x20>
 8005468:	2302      	movs	r3, #2
 800546a:	e0bc      	b.n	80055e6 <HAL_TIM_ConfigClockSource+0x19a>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	223c      	movs	r2, #60	; 0x3c
 8005470:	2101      	movs	r1, #1
 8005472:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	223d      	movs	r2, #61	; 0x3d
 8005478:	2102      	movs	r1, #2
 800547a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	2277      	movs	r2, #119	; 0x77
 8005488:	4393      	bics	r3, r2
 800548a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	4a58      	ldr	r2, [pc, #352]	; (80055f0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005490:	4013      	ands	r3, r2
 8005492:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68ba      	ldr	r2, [r7, #8]
 800549a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2280      	movs	r2, #128	; 0x80
 80054a2:	0192      	lsls	r2, r2, #6
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d040      	beq.n	800552a <HAL_TIM_ConfigClockSource+0xde>
 80054a8:	2280      	movs	r2, #128	; 0x80
 80054aa:	0192      	lsls	r2, r2, #6
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d900      	bls.n	80054b2 <HAL_TIM_ConfigClockSource+0x66>
 80054b0:	e088      	b.n	80055c4 <HAL_TIM_ConfigClockSource+0x178>
 80054b2:	2280      	movs	r2, #128	; 0x80
 80054b4:	0152      	lsls	r2, r2, #5
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d100      	bne.n	80054bc <HAL_TIM_ConfigClockSource+0x70>
 80054ba:	e088      	b.n	80055ce <HAL_TIM_ConfigClockSource+0x182>
 80054bc:	2280      	movs	r2, #128	; 0x80
 80054be:	0152      	lsls	r2, r2, #5
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d900      	bls.n	80054c6 <HAL_TIM_ConfigClockSource+0x7a>
 80054c4:	e07e      	b.n	80055c4 <HAL_TIM_ConfigClockSource+0x178>
 80054c6:	2b70      	cmp	r3, #112	; 0x70
 80054c8:	d018      	beq.n	80054fc <HAL_TIM_ConfigClockSource+0xb0>
 80054ca:	d900      	bls.n	80054ce <HAL_TIM_ConfigClockSource+0x82>
 80054cc:	e07a      	b.n	80055c4 <HAL_TIM_ConfigClockSource+0x178>
 80054ce:	2b60      	cmp	r3, #96	; 0x60
 80054d0:	d04f      	beq.n	8005572 <HAL_TIM_ConfigClockSource+0x126>
 80054d2:	d900      	bls.n	80054d6 <HAL_TIM_ConfigClockSource+0x8a>
 80054d4:	e076      	b.n	80055c4 <HAL_TIM_ConfigClockSource+0x178>
 80054d6:	2b50      	cmp	r3, #80	; 0x50
 80054d8:	d03b      	beq.n	8005552 <HAL_TIM_ConfigClockSource+0x106>
 80054da:	d900      	bls.n	80054de <HAL_TIM_ConfigClockSource+0x92>
 80054dc:	e072      	b.n	80055c4 <HAL_TIM_ConfigClockSource+0x178>
 80054de:	2b40      	cmp	r3, #64	; 0x40
 80054e0:	d057      	beq.n	8005592 <HAL_TIM_ConfigClockSource+0x146>
 80054e2:	d900      	bls.n	80054e6 <HAL_TIM_ConfigClockSource+0x9a>
 80054e4:	e06e      	b.n	80055c4 <HAL_TIM_ConfigClockSource+0x178>
 80054e6:	2b30      	cmp	r3, #48	; 0x30
 80054e8:	d063      	beq.n	80055b2 <HAL_TIM_ConfigClockSource+0x166>
 80054ea:	d86b      	bhi.n	80055c4 <HAL_TIM_ConfigClockSource+0x178>
 80054ec:	2b20      	cmp	r3, #32
 80054ee:	d060      	beq.n	80055b2 <HAL_TIM_ConfigClockSource+0x166>
 80054f0:	d868      	bhi.n	80055c4 <HAL_TIM_ConfigClockSource+0x178>
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d05d      	beq.n	80055b2 <HAL_TIM_ConfigClockSource+0x166>
 80054f6:	2b10      	cmp	r3, #16
 80054f8:	d05b      	beq.n	80055b2 <HAL_TIM_ConfigClockSource+0x166>
 80054fa:	e063      	b.n	80055c4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6818      	ldr	r0, [r3, #0]
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	6899      	ldr	r1, [r3, #8]
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	685a      	ldr	r2, [r3, #4]
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f000 fb88 	bl	8005c20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	2277      	movs	r2, #119	; 0x77
 800551c:	4313      	orrs	r3, r2
 800551e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68ba      	ldr	r2, [r7, #8]
 8005526:	609a      	str	r2, [r3, #8]
      break;
 8005528:	e052      	b.n	80055d0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6818      	ldr	r0, [r3, #0]
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	6899      	ldr	r1, [r3, #8]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	685a      	ldr	r2, [r3, #4]
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	f000 fb71 	bl	8005c20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	689a      	ldr	r2, [r3, #8]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2180      	movs	r1, #128	; 0x80
 800554a:	01c9      	lsls	r1, r1, #7
 800554c:	430a      	orrs	r2, r1
 800554e:	609a      	str	r2, [r3, #8]
      break;
 8005550:	e03e      	b.n	80055d0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6818      	ldr	r0, [r3, #0]
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	6859      	ldr	r1, [r3, #4]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	001a      	movs	r2, r3
 8005560:	f000 fae4 	bl	8005b2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2150      	movs	r1, #80	; 0x50
 800556a:	0018      	movs	r0, r3
 800556c:	f000 fb3e 	bl	8005bec <TIM_ITRx_SetConfig>
      break;
 8005570:	e02e      	b.n	80055d0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6818      	ldr	r0, [r3, #0]
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	6859      	ldr	r1, [r3, #4]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	001a      	movs	r2, r3
 8005580:	f000 fb02 	bl	8005b88 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2160      	movs	r1, #96	; 0x60
 800558a:	0018      	movs	r0, r3
 800558c:	f000 fb2e 	bl	8005bec <TIM_ITRx_SetConfig>
      break;
 8005590:	e01e      	b.n	80055d0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6818      	ldr	r0, [r3, #0]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	6859      	ldr	r1, [r3, #4]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	001a      	movs	r2, r3
 80055a0:	f000 fac4 	bl	8005b2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2140      	movs	r1, #64	; 0x40
 80055aa:	0018      	movs	r0, r3
 80055ac:	f000 fb1e 	bl	8005bec <TIM_ITRx_SetConfig>
      break;
 80055b0:	e00e      	b.n	80055d0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	0019      	movs	r1, r3
 80055bc:	0010      	movs	r0, r2
 80055be:	f000 fb15 	bl	8005bec <TIM_ITRx_SetConfig>
      break;
 80055c2:	e005      	b.n	80055d0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80055c4:	230f      	movs	r3, #15
 80055c6:	18fb      	adds	r3, r7, r3
 80055c8:	2201      	movs	r2, #1
 80055ca:	701a      	strb	r2, [r3, #0]
      break;
 80055cc:	e000      	b.n	80055d0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80055ce:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	223d      	movs	r2, #61	; 0x3d
 80055d4:	2101      	movs	r1, #1
 80055d6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	223c      	movs	r2, #60	; 0x3c
 80055dc:	2100      	movs	r1, #0
 80055de:	5499      	strb	r1, [r3, r2]

  return status;
 80055e0:	230f      	movs	r3, #15
 80055e2:	18fb      	adds	r3, r7, r3
 80055e4:	781b      	ldrb	r3, [r3, #0]
}
 80055e6:	0018      	movs	r0, r3
 80055e8:	46bd      	mov	sp, r7
 80055ea:	b004      	add	sp, #16
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	46c0      	nop			; (mov r8, r8)
 80055f0:	ffff00ff 	.word	0xffff00ff

080055f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80055fc:	46c0      	nop			; (mov r8, r8)
 80055fe:	46bd      	mov	sp, r7
 8005600:	b002      	add	sp, #8
 8005602:	bd80      	pop	{r7, pc}

08005604 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800560c:	46c0      	nop			; (mov r8, r8)
 800560e:	46bd      	mov	sp, r7
 8005610:	b002      	add	sp, #8
 8005612:	bd80      	pop	{r7, pc}

08005614 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800561c:	46c0      	nop			; (mov r8, r8)
 800561e:	46bd      	mov	sp, r7
 8005620:	b002      	add	sp, #8
 8005622:	bd80      	pop	{r7, pc}

08005624 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800562c:	46c0      	nop			; (mov r8, r8)
 800562e:	46bd      	mov	sp, r7
 8005630:	b002      	add	sp, #8
 8005632:	bd80      	pop	{r7, pc}

08005634 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a34      	ldr	r2, [pc, #208]	; (8005718 <TIM_Base_SetConfig+0xe4>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d008      	beq.n	800565e <TIM_Base_SetConfig+0x2a>
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	2380      	movs	r3, #128	; 0x80
 8005650:	05db      	lsls	r3, r3, #23
 8005652:	429a      	cmp	r2, r3
 8005654:	d003      	beq.n	800565e <TIM_Base_SetConfig+0x2a>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a30      	ldr	r2, [pc, #192]	; (800571c <TIM_Base_SetConfig+0xe8>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d108      	bne.n	8005670 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2270      	movs	r2, #112	; 0x70
 8005662:	4393      	bics	r3, r2
 8005664:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	4313      	orrs	r3, r2
 800566e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a29      	ldr	r2, [pc, #164]	; (8005718 <TIM_Base_SetConfig+0xe4>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d018      	beq.n	80056aa <TIM_Base_SetConfig+0x76>
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	2380      	movs	r3, #128	; 0x80
 800567c:	05db      	lsls	r3, r3, #23
 800567e:	429a      	cmp	r2, r3
 8005680:	d013      	beq.n	80056aa <TIM_Base_SetConfig+0x76>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a25      	ldr	r2, [pc, #148]	; (800571c <TIM_Base_SetConfig+0xe8>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d00f      	beq.n	80056aa <TIM_Base_SetConfig+0x76>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a24      	ldr	r2, [pc, #144]	; (8005720 <TIM_Base_SetConfig+0xec>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d00b      	beq.n	80056aa <TIM_Base_SetConfig+0x76>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a23      	ldr	r2, [pc, #140]	; (8005724 <TIM_Base_SetConfig+0xf0>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d007      	beq.n	80056aa <TIM_Base_SetConfig+0x76>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a22      	ldr	r2, [pc, #136]	; (8005728 <TIM_Base_SetConfig+0xf4>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d003      	beq.n	80056aa <TIM_Base_SetConfig+0x76>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a21      	ldr	r2, [pc, #132]	; (800572c <TIM_Base_SetConfig+0xf8>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d108      	bne.n	80056bc <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	4a20      	ldr	r2, [pc, #128]	; (8005730 <TIM_Base_SetConfig+0xfc>)
 80056ae:	4013      	ands	r3, r2
 80056b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2280      	movs	r2, #128	; 0x80
 80056c0:	4393      	bics	r3, r2
 80056c2:	001a      	movs	r2, r3
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	695b      	ldr	r3, [r3, #20]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	689a      	ldr	r2, [r3, #8]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a0c      	ldr	r2, [pc, #48]	; (8005718 <TIM_Base_SetConfig+0xe4>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d00b      	beq.n	8005702 <TIM_Base_SetConfig+0xce>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a0d      	ldr	r2, [pc, #52]	; (8005724 <TIM_Base_SetConfig+0xf0>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d007      	beq.n	8005702 <TIM_Base_SetConfig+0xce>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a0c      	ldr	r2, [pc, #48]	; (8005728 <TIM_Base_SetConfig+0xf4>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d003      	beq.n	8005702 <TIM_Base_SetConfig+0xce>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a0b      	ldr	r2, [pc, #44]	; (800572c <TIM_Base_SetConfig+0xf8>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d103      	bne.n	800570a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	691a      	ldr	r2, [r3, #16]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2201      	movs	r2, #1
 800570e:	615a      	str	r2, [r3, #20]
}
 8005710:	46c0      	nop			; (mov r8, r8)
 8005712:	46bd      	mov	sp, r7
 8005714:	b004      	add	sp, #16
 8005716:	bd80      	pop	{r7, pc}
 8005718:	40012c00 	.word	0x40012c00
 800571c:	40000400 	.word	0x40000400
 8005720:	40002000 	.word	0x40002000
 8005724:	40014000 	.word	0x40014000
 8005728:	40014400 	.word	0x40014400
 800572c:	40014800 	.word	0x40014800
 8005730:	fffffcff 	.word	0xfffffcff

08005734 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b086      	sub	sp, #24
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	2201      	movs	r2, #1
 8005744:	4393      	bics	r3, r2
 8005746:	001a      	movs	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a1b      	ldr	r3, [r3, #32]
 8005750:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2270      	movs	r2, #112	; 0x70
 8005762:	4393      	bics	r3, r2
 8005764:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2203      	movs	r2, #3
 800576a:	4393      	bics	r3, r2
 800576c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	4313      	orrs	r3, r2
 8005776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	2202      	movs	r2, #2
 800577c:	4393      	bics	r3, r2
 800577e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	4313      	orrs	r3, r2
 8005788:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a27      	ldr	r2, [pc, #156]	; (800582c <TIM_OC1_SetConfig+0xf8>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d00b      	beq.n	80057aa <TIM_OC1_SetConfig+0x76>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a26      	ldr	r2, [pc, #152]	; (8005830 <TIM_OC1_SetConfig+0xfc>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d007      	beq.n	80057aa <TIM_OC1_SetConfig+0x76>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a25      	ldr	r2, [pc, #148]	; (8005834 <TIM_OC1_SetConfig+0x100>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d003      	beq.n	80057aa <TIM_OC1_SetConfig+0x76>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a24      	ldr	r2, [pc, #144]	; (8005838 <TIM_OC1_SetConfig+0x104>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d10c      	bne.n	80057c4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	2208      	movs	r2, #8
 80057ae:	4393      	bics	r3, r2
 80057b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	2204      	movs	r2, #4
 80057c0:	4393      	bics	r3, r2
 80057c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a19      	ldr	r2, [pc, #100]	; (800582c <TIM_OC1_SetConfig+0xf8>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d00b      	beq.n	80057e4 <TIM_OC1_SetConfig+0xb0>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a18      	ldr	r2, [pc, #96]	; (8005830 <TIM_OC1_SetConfig+0xfc>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d007      	beq.n	80057e4 <TIM_OC1_SetConfig+0xb0>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a17      	ldr	r2, [pc, #92]	; (8005834 <TIM_OC1_SetConfig+0x100>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d003      	beq.n	80057e4 <TIM_OC1_SetConfig+0xb0>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a16      	ldr	r2, [pc, #88]	; (8005838 <TIM_OC1_SetConfig+0x104>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d111      	bne.n	8005808 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	4a15      	ldr	r2, [pc, #84]	; (800583c <TIM_OC1_SetConfig+0x108>)
 80057e8:	4013      	ands	r3, r2
 80057ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	4a14      	ldr	r2, [pc, #80]	; (8005840 <TIM_OC1_SetConfig+0x10c>)
 80057f0:	4013      	ands	r3, r2
 80057f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	695b      	ldr	r3, [r3, #20]
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	4313      	orrs	r3, r2
 8005806:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	693a      	ldr	r2, [r7, #16]
 800580c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	685a      	ldr	r2, [r3, #4]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	621a      	str	r2, [r3, #32]
}
 8005822:	46c0      	nop			; (mov r8, r8)
 8005824:	46bd      	mov	sp, r7
 8005826:	b006      	add	sp, #24
 8005828:	bd80      	pop	{r7, pc}
 800582a:	46c0      	nop			; (mov r8, r8)
 800582c:	40012c00 	.word	0x40012c00
 8005830:	40014000 	.word	0x40014000
 8005834:	40014400 	.word	0x40014400
 8005838:	40014800 	.word	0x40014800
 800583c:	fffffeff 	.word	0xfffffeff
 8005840:	fffffdff 	.word	0xfffffdff

08005844 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b086      	sub	sp, #24
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	2210      	movs	r2, #16
 8005854:	4393      	bics	r3, r2
 8005856:	001a      	movs	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a1b      	ldr	r3, [r3, #32]
 8005860:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	4a2e      	ldr	r2, [pc, #184]	; (800592c <TIM_OC2_SetConfig+0xe8>)
 8005872:	4013      	ands	r3, r2
 8005874:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	4a2d      	ldr	r2, [pc, #180]	; (8005930 <TIM_OC2_SetConfig+0xec>)
 800587a:	4013      	ands	r3, r2
 800587c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	021b      	lsls	r3, r3, #8
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	4313      	orrs	r3, r2
 8005888:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	2220      	movs	r2, #32
 800588e:	4393      	bics	r3, r2
 8005890:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	011b      	lsls	r3, r3, #4
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	4313      	orrs	r3, r2
 800589c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a24      	ldr	r2, [pc, #144]	; (8005934 <TIM_OC2_SetConfig+0xf0>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d10d      	bne.n	80058c2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	2280      	movs	r2, #128	; 0x80
 80058aa:	4393      	bics	r3, r2
 80058ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	011b      	lsls	r3, r3, #4
 80058b4:	697a      	ldr	r2, [r7, #20]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	2240      	movs	r2, #64	; 0x40
 80058be:	4393      	bics	r3, r2
 80058c0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a1b      	ldr	r2, [pc, #108]	; (8005934 <TIM_OC2_SetConfig+0xf0>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d00b      	beq.n	80058e2 <TIM_OC2_SetConfig+0x9e>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a1a      	ldr	r2, [pc, #104]	; (8005938 <TIM_OC2_SetConfig+0xf4>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d007      	beq.n	80058e2 <TIM_OC2_SetConfig+0x9e>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a19      	ldr	r2, [pc, #100]	; (800593c <TIM_OC2_SetConfig+0xf8>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d003      	beq.n	80058e2 <TIM_OC2_SetConfig+0x9e>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a18      	ldr	r2, [pc, #96]	; (8005940 <TIM_OC2_SetConfig+0xfc>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d113      	bne.n	800590a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	4a17      	ldr	r2, [pc, #92]	; (8005944 <TIM_OC2_SetConfig+0x100>)
 80058e6:	4013      	ands	r3, r2
 80058e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	4a16      	ldr	r2, [pc, #88]	; (8005948 <TIM_OC2_SetConfig+0x104>)
 80058ee:	4013      	ands	r3, r2
 80058f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	4313      	orrs	r3, r2
 8005908:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	693a      	ldr	r2, [r7, #16]
 800590e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	685a      	ldr	r2, [r3, #4]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	697a      	ldr	r2, [r7, #20]
 8005922:	621a      	str	r2, [r3, #32]
}
 8005924:	46c0      	nop			; (mov r8, r8)
 8005926:	46bd      	mov	sp, r7
 8005928:	b006      	add	sp, #24
 800592a:	bd80      	pop	{r7, pc}
 800592c:	ffff8fff 	.word	0xffff8fff
 8005930:	fffffcff 	.word	0xfffffcff
 8005934:	40012c00 	.word	0x40012c00
 8005938:	40014000 	.word	0x40014000
 800593c:	40014400 	.word	0x40014400
 8005940:	40014800 	.word	0x40014800
 8005944:	fffffbff 	.word	0xfffffbff
 8005948:	fffff7ff 	.word	0xfffff7ff

0800594c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	4a35      	ldr	r2, [pc, #212]	; (8005a30 <TIM_OC3_SetConfig+0xe4>)
 800595c:	401a      	ands	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a1b      	ldr	r3, [r3, #32]
 8005966:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	69db      	ldr	r3, [r3, #28]
 8005972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2270      	movs	r2, #112	; 0x70
 8005978:	4393      	bics	r3, r2
 800597a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2203      	movs	r2, #3
 8005980:	4393      	bics	r3, r2
 8005982:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	4313      	orrs	r3, r2
 800598c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	4a28      	ldr	r2, [pc, #160]	; (8005a34 <TIM_OC3_SetConfig+0xe8>)
 8005992:	4013      	ands	r3, r2
 8005994:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	021b      	lsls	r3, r3, #8
 800599c:	697a      	ldr	r2, [r7, #20]
 800599e:	4313      	orrs	r3, r2
 80059a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a24      	ldr	r2, [pc, #144]	; (8005a38 <TIM_OC3_SetConfig+0xec>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d10d      	bne.n	80059c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	4a23      	ldr	r2, [pc, #140]	; (8005a3c <TIM_OC3_SetConfig+0xf0>)
 80059ae:	4013      	ands	r3, r2
 80059b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	021b      	lsls	r3, r3, #8
 80059b8:	697a      	ldr	r2, [r7, #20]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	4a1f      	ldr	r2, [pc, #124]	; (8005a40 <TIM_OC3_SetConfig+0xf4>)
 80059c2:	4013      	ands	r3, r2
 80059c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a1b      	ldr	r2, [pc, #108]	; (8005a38 <TIM_OC3_SetConfig+0xec>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d00b      	beq.n	80059e6 <TIM_OC3_SetConfig+0x9a>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a1c      	ldr	r2, [pc, #112]	; (8005a44 <TIM_OC3_SetConfig+0xf8>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d007      	beq.n	80059e6 <TIM_OC3_SetConfig+0x9a>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a1b      	ldr	r2, [pc, #108]	; (8005a48 <TIM_OC3_SetConfig+0xfc>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d003      	beq.n	80059e6 <TIM_OC3_SetConfig+0x9a>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a1a      	ldr	r2, [pc, #104]	; (8005a4c <TIM_OC3_SetConfig+0x100>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d113      	bne.n	8005a0e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	4a19      	ldr	r2, [pc, #100]	; (8005a50 <TIM_OC3_SetConfig+0x104>)
 80059ea:	4013      	ands	r3, r2
 80059ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	4a18      	ldr	r2, [pc, #96]	; (8005a54 <TIM_OC3_SetConfig+0x108>)
 80059f2:	4013      	ands	r3, r2
 80059f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	011b      	lsls	r3, r3, #4
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	011b      	lsls	r3, r3, #4
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	685a      	ldr	r2, [r3, #4]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	697a      	ldr	r2, [r7, #20]
 8005a26:	621a      	str	r2, [r3, #32]
}
 8005a28:	46c0      	nop			; (mov r8, r8)
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	b006      	add	sp, #24
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	fffffeff 	.word	0xfffffeff
 8005a34:	fffffdff 	.word	0xfffffdff
 8005a38:	40012c00 	.word	0x40012c00
 8005a3c:	fffff7ff 	.word	0xfffff7ff
 8005a40:	fffffbff 	.word	0xfffffbff
 8005a44:	40014000 	.word	0x40014000
 8005a48:	40014400 	.word	0x40014400
 8005a4c:	40014800 	.word	0x40014800
 8005a50:	ffffefff 	.word	0xffffefff
 8005a54:	ffffdfff 	.word	0xffffdfff

08005a58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b086      	sub	sp, #24
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	4a28      	ldr	r2, [pc, #160]	; (8005b08 <TIM_OC4_SetConfig+0xb0>)
 8005a68:	401a      	ands	r2, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a1b      	ldr	r3, [r3, #32]
 8005a72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	69db      	ldr	r3, [r3, #28]
 8005a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	4a22      	ldr	r2, [pc, #136]	; (8005b0c <TIM_OC4_SetConfig+0xb4>)
 8005a84:	4013      	ands	r3, r2
 8005a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	4a21      	ldr	r2, [pc, #132]	; (8005b10 <TIM_OC4_SetConfig+0xb8>)
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	021b      	lsls	r3, r3, #8
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	4a1d      	ldr	r2, [pc, #116]	; (8005b14 <TIM_OC4_SetConfig+0xbc>)
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	031b      	lsls	r3, r3, #12
 8005aaa:	693a      	ldr	r2, [r7, #16]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a19      	ldr	r2, [pc, #100]	; (8005b18 <TIM_OC4_SetConfig+0xc0>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d00b      	beq.n	8005ad0 <TIM_OC4_SetConfig+0x78>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a18      	ldr	r2, [pc, #96]	; (8005b1c <TIM_OC4_SetConfig+0xc4>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d007      	beq.n	8005ad0 <TIM_OC4_SetConfig+0x78>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a17      	ldr	r2, [pc, #92]	; (8005b20 <TIM_OC4_SetConfig+0xc8>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d003      	beq.n	8005ad0 <TIM_OC4_SetConfig+0x78>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a16      	ldr	r2, [pc, #88]	; (8005b24 <TIM_OC4_SetConfig+0xcc>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d109      	bne.n	8005ae4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	4a15      	ldr	r2, [pc, #84]	; (8005b28 <TIM_OC4_SetConfig+0xd0>)
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	695b      	ldr	r3, [r3, #20]
 8005adc:	019b      	lsls	r3, r3, #6
 8005ade:	697a      	ldr	r2, [r7, #20]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	685a      	ldr	r2, [r3, #4]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	621a      	str	r2, [r3, #32]
}
 8005afe:	46c0      	nop			; (mov r8, r8)
 8005b00:	46bd      	mov	sp, r7
 8005b02:	b006      	add	sp, #24
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	46c0      	nop			; (mov r8, r8)
 8005b08:	ffffefff 	.word	0xffffefff
 8005b0c:	ffff8fff 	.word	0xffff8fff
 8005b10:	fffffcff 	.word	0xfffffcff
 8005b14:	ffffdfff 	.word	0xffffdfff
 8005b18:	40012c00 	.word	0x40012c00
 8005b1c:	40014000 	.word	0x40014000
 8005b20:	40014400 	.word	0x40014400
 8005b24:	40014800 	.word	0x40014800
 8005b28:	ffffbfff 	.word	0xffffbfff

08005b2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b086      	sub	sp, #24
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6a1b      	ldr	r3, [r3, #32]
 8005b3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	2201      	movs	r2, #1
 8005b44:	4393      	bics	r3, r2
 8005b46:	001a      	movs	r2, r3
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	699b      	ldr	r3, [r3, #24]
 8005b50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	22f0      	movs	r2, #240	; 0xf0
 8005b56:	4393      	bics	r3, r2
 8005b58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	011b      	lsls	r3, r3, #4
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	220a      	movs	r2, #10
 8005b68:	4393      	bics	r3, r2
 8005b6a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b6c:	697a      	ldr	r2, [r7, #20]
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	621a      	str	r2, [r3, #32]
}
 8005b80:	46c0      	nop			; (mov r8, r8)
 8005b82:	46bd      	mov	sp, r7
 8005b84:	b006      	add	sp, #24
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b086      	sub	sp, #24
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6a1b      	ldr	r3, [r3, #32]
 8005b98:	2210      	movs	r2, #16
 8005b9a:	4393      	bics	r3, r2
 8005b9c:	001a      	movs	r2, r3
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6a1b      	ldr	r3, [r3, #32]
 8005bac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	4a0d      	ldr	r2, [pc, #52]	; (8005be8 <TIM_TI2_ConfigInputStage+0x60>)
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	031b      	lsls	r3, r3, #12
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	22a0      	movs	r2, #160	; 0xa0
 8005bc4:	4393      	bics	r3, r2
 8005bc6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	011b      	lsls	r3, r3, #4
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	693a      	ldr	r2, [r7, #16]
 8005bdc:	621a      	str	r2, [r3, #32]
}
 8005bde:	46c0      	nop			; (mov r8, r8)
 8005be0:	46bd      	mov	sp, r7
 8005be2:	b006      	add	sp, #24
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	46c0      	nop			; (mov r8, r8)
 8005be8:	ffff0fff 	.word	0xffff0fff

08005bec <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2270      	movs	r2, #112	; 0x70
 8005c00:	4393      	bics	r3, r2
 8005c02:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c04:	683a      	ldr	r2, [r7, #0]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	2207      	movs	r2, #7
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	609a      	str	r2, [r3, #8]
}
 8005c16:	46c0      	nop			; (mov r8, r8)
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	b004      	add	sp, #16
 8005c1c:	bd80      	pop	{r7, pc}
	...

08005c20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b086      	sub	sp, #24
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
 8005c2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	4a09      	ldr	r2, [pc, #36]	; (8005c5c <TIM_ETR_SetConfig+0x3c>)
 8005c38:	4013      	ands	r3, r2
 8005c3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	021a      	lsls	r2, r3, #8
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	431a      	orrs	r2, r3
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	697a      	ldr	r2, [r7, #20]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	697a      	ldr	r2, [r7, #20]
 8005c52:	609a      	str	r2, [r3, #8]
}
 8005c54:	46c0      	nop			; (mov r8, r8)
 8005c56:	46bd      	mov	sp, r7
 8005c58:	b006      	add	sp, #24
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	ffff00ff 	.word	0xffff00ff

08005c60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	221f      	movs	r2, #31
 8005c70:	4013      	ands	r3, r2
 8005c72:	2201      	movs	r2, #1
 8005c74:	409a      	lsls	r2, r3
 8005c76:	0013      	movs	r3, r2
 8005c78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	43d2      	mvns	r2, r2
 8005c82:	401a      	ands	r2, r3
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6a1a      	ldr	r2, [r3, #32]
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	211f      	movs	r1, #31
 8005c90:	400b      	ands	r3, r1
 8005c92:	6879      	ldr	r1, [r7, #4]
 8005c94:	4099      	lsls	r1, r3
 8005c96:	000b      	movs	r3, r1
 8005c98:	431a      	orrs	r2, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	621a      	str	r2, [r3, #32]
}
 8005c9e:	46c0      	nop			; (mov r8, r8)
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	b006      	add	sp, #24
 8005ca4:	bd80      	pop	{r7, pc}
	...

08005ca8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	223c      	movs	r2, #60	; 0x3c
 8005cb6:	5c9b      	ldrb	r3, [r3, r2]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d101      	bne.n	8005cc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	e047      	b.n	8005d50 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	223c      	movs	r2, #60	; 0x3c
 8005cc4:	2101      	movs	r1, #1
 8005cc6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	223d      	movs	r2, #61	; 0x3d
 8005ccc:	2102      	movs	r1, #2
 8005cce:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2270      	movs	r2, #112	; 0x70
 8005ce4:	4393      	bics	r3, r2
 8005ce6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a16      	ldr	r2, [pc, #88]	; (8005d58 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d00f      	beq.n	8005d24 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	2380      	movs	r3, #128	; 0x80
 8005d0a:	05db      	lsls	r3, r3, #23
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d009      	beq.n	8005d24 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a11      	ldr	r2, [pc, #68]	; (8005d5c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d004      	beq.n	8005d24 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a10      	ldr	r2, [pc, #64]	; (8005d60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d10c      	bne.n	8005d3e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	2280      	movs	r2, #128	; 0x80
 8005d28:	4393      	bics	r3, r2
 8005d2a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	68ba      	ldr	r2, [r7, #8]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68ba      	ldr	r2, [r7, #8]
 8005d3c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	223d      	movs	r2, #61	; 0x3d
 8005d42:	2101      	movs	r1, #1
 8005d44:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	223c      	movs	r2, #60	; 0x3c
 8005d4a:	2100      	movs	r1, #0
 8005d4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	0018      	movs	r0, r3
 8005d52:	46bd      	mov	sp, r7
 8005d54:	b004      	add	sp, #16
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	40012c00 	.word	0x40012c00
 8005d5c:	40000400 	.word	0x40000400
 8005d60:	40014000 	.word	0x40014000

08005d64 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	223c      	movs	r2, #60	; 0x3c
 8005d76:	5c9b      	ldrb	r3, [r3, r2]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d101      	bne.n	8005d80 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005d7c:	2302      	movs	r3, #2
 8005d7e:	e03e      	b.n	8005dfe <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	223c      	movs	r2, #60	; 0x3c
 8005d84:	2101      	movs	r1, #1
 8005d86:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	22ff      	movs	r2, #255	; 0xff
 8005d8c:	4393      	bics	r3, r2
 8005d8e:	001a      	movs	r2, r3
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	4a1b      	ldr	r2, [pc, #108]	; (8005e08 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8005d9c:	401a      	ands	r2, r3
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	4a18      	ldr	r2, [pc, #96]	; (8005e0c <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8005daa:	401a      	ands	r2, r3
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	4a16      	ldr	r2, [pc, #88]	; (8005e10 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8005db8:	401a      	ands	r2, r3
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	4a13      	ldr	r2, [pc, #76]	; (8005e14 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8005dc6:	401a      	ands	r2, r3
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	4a11      	ldr	r2, [pc, #68]	; (8005e18 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8005dd4:	401a      	ands	r2, r3
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	695b      	ldr	r3, [r3, #20]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	4a0e      	ldr	r2, [pc, #56]	; (8005e1c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8005de2:	401a      	ands	r2, r3
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	69db      	ldr	r3, [r3, #28]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	223c      	movs	r2, #60	; 0x3c
 8005df8:	2100      	movs	r1, #0
 8005dfa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	0018      	movs	r0, r3
 8005e00:	46bd      	mov	sp, r7
 8005e02:	b004      	add	sp, #16
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	46c0      	nop			; (mov r8, r8)
 8005e08:	fffffcff 	.word	0xfffffcff
 8005e0c:	fffffbff 	.word	0xfffffbff
 8005e10:	fffff7ff 	.word	0xfffff7ff
 8005e14:	ffffefff 	.word	0xffffefff
 8005e18:	ffffdfff 	.word	0xffffdfff
 8005e1c:	ffffbfff 	.word	0xffffbfff

08005e20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e28:	46c0      	nop			; (mov r8, r8)
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	b002      	add	sp, #8
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e38:	46c0      	nop			; (mov r8, r8)
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	b002      	add	sp, #8
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d101      	bne.n	8005e52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e044      	b.n	8005edc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d107      	bne.n	8005e6a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2274      	movs	r2, #116	; 0x74
 8005e5e:	2100      	movs	r1, #0
 8005e60:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	0018      	movs	r0, r3
 8005e66:	f7fb febf 	bl	8001be8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2224      	movs	r2, #36	; 0x24
 8005e6e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2101      	movs	r1, #1
 8005e7c:	438a      	bics	r2, r1
 8005e7e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	0018      	movs	r0, r3
 8005e84:	f000 fc2e 	bl	80066e4 <UART_SetConfig>
 8005e88:	0003      	movs	r3, r0
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d101      	bne.n	8005e92 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e024      	b.n	8005edc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d003      	beq.n	8005ea2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	0018      	movs	r0, r3
 8005e9e:	f000 fd61 	bl	8006964 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	685a      	ldr	r2, [r3, #4]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	490d      	ldr	r1, [pc, #52]	; (8005ee4 <HAL_UART_Init+0xa4>)
 8005eae:	400a      	ands	r2, r1
 8005eb0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	689a      	ldr	r2, [r3, #8]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	212a      	movs	r1, #42	; 0x2a
 8005ebe:	438a      	bics	r2, r1
 8005ec0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2101      	movs	r1, #1
 8005ece:	430a      	orrs	r2, r1
 8005ed0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	0018      	movs	r0, r3
 8005ed6:	f000 fdf9 	bl	8006acc <UART_CheckIdleState>
 8005eda:	0003      	movs	r3, r0
}
 8005edc:	0018      	movs	r0, r3
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	b002      	add	sp, #8
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	ffffb7ff 	.word	0xffffb7ff

08005ee8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b08a      	sub	sp, #40	; 0x28
 8005eec:	af02      	add	r7, sp, #8
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	603b      	str	r3, [r7, #0]
 8005ef4:	1dbb      	adds	r3, r7, #6
 8005ef6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005efc:	2b20      	cmp	r3, #32
 8005efe:	d000      	beq.n	8005f02 <HAL_UART_Transmit+0x1a>
 8005f00:	e096      	b.n	8006030 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d003      	beq.n	8005f10 <HAL_UART_Transmit+0x28>
 8005f08:	1dbb      	adds	r3, r7, #6
 8005f0a:	881b      	ldrh	r3, [r3, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d101      	bne.n	8005f14 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e08e      	b.n	8006032 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	689a      	ldr	r2, [r3, #8]
 8005f18:	2380      	movs	r3, #128	; 0x80
 8005f1a:	015b      	lsls	r3, r3, #5
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d109      	bne.n	8005f34 <HAL_UART_Transmit+0x4c>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d105      	bne.n	8005f34 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	d001      	beq.n	8005f34 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e07e      	b.n	8006032 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2274      	movs	r2, #116	; 0x74
 8005f38:	5c9b      	ldrb	r3, [r3, r2]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d101      	bne.n	8005f42 <HAL_UART_Transmit+0x5a>
 8005f3e:	2302      	movs	r3, #2
 8005f40:	e077      	b.n	8006032 <HAL_UART_Transmit+0x14a>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2274      	movs	r2, #116	; 0x74
 8005f46:	2101      	movs	r1, #1
 8005f48:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2280      	movs	r2, #128	; 0x80
 8005f4e:	2100      	movs	r1, #0
 8005f50:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2221      	movs	r2, #33	; 0x21
 8005f56:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f58:	f7fb ff7a 	bl	8001e50 <HAL_GetTick>
 8005f5c:	0003      	movs	r3, r0
 8005f5e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	1dba      	adds	r2, r7, #6
 8005f64:	2150      	movs	r1, #80	; 0x50
 8005f66:	8812      	ldrh	r2, [r2, #0]
 8005f68:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	1dba      	adds	r2, r7, #6
 8005f6e:	2152      	movs	r1, #82	; 0x52
 8005f70:	8812      	ldrh	r2, [r2, #0]
 8005f72:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	689a      	ldr	r2, [r3, #8]
 8005f78:	2380      	movs	r3, #128	; 0x80
 8005f7a:	015b      	lsls	r3, r3, #5
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d108      	bne.n	8005f92 <HAL_UART_Transmit+0xaa>
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d104      	bne.n	8005f92 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	61bb      	str	r3, [r7, #24]
 8005f90:	e003      	b.n	8005f9a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f96:	2300      	movs	r3, #0
 8005f98:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2274      	movs	r2, #116	; 0x74
 8005f9e:	2100      	movs	r1, #0
 8005fa0:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8005fa2:	e02d      	b.n	8006000 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	9300      	str	r3, [sp, #0]
 8005fac:	0013      	movs	r3, r2
 8005fae:	2200      	movs	r2, #0
 8005fb0:	2180      	movs	r1, #128	; 0x80
 8005fb2:	f000 fdd3 	bl	8006b5c <UART_WaitOnFlagUntilTimeout>
 8005fb6:	1e03      	subs	r3, r0, #0
 8005fb8:	d001      	beq.n	8005fbe <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e039      	b.n	8006032 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d10b      	bne.n	8005fdc <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	881a      	ldrh	r2, [r3, #0]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	05d2      	lsls	r2, r2, #23
 8005fce:	0dd2      	lsrs	r2, r2, #23
 8005fd0:	b292      	uxth	r2, r2
 8005fd2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	3302      	adds	r3, #2
 8005fd8:	61bb      	str	r3, [r7, #24]
 8005fda:	e008      	b.n	8005fee <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	781a      	ldrb	r2, [r3, #0]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	b292      	uxth	r2, r2
 8005fe6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	3301      	adds	r3, #1
 8005fec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2252      	movs	r2, #82	; 0x52
 8005ff2:	5a9b      	ldrh	r3, [r3, r2]
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	b299      	uxth	r1, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2252      	movs	r2, #82	; 0x52
 8005ffe:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2252      	movs	r2, #82	; 0x52
 8006004:	5a9b      	ldrh	r3, [r3, r2]
 8006006:	b29b      	uxth	r3, r3
 8006008:	2b00      	cmp	r3, #0
 800600a:	d1cb      	bne.n	8005fa4 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800600c:	697a      	ldr	r2, [r7, #20]
 800600e:	68f8      	ldr	r0, [r7, #12]
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	9300      	str	r3, [sp, #0]
 8006014:	0013      	movs	r3, r2
 8006016:	2200      	movs	r2, #0
 8006018:	2140      	movs	r1, #64	; 0x40
 800601a:	f000 fd9f 	bl	8006b5c <UART_WaitOnFlagUntilTimeout>
 800601e:	1e03      	subs	r3, r0, #0
 8006020:	d001      	beq.n	8006026 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e005      	b.n	8006032 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2220      	movs	r2, #32
 800602a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800602c:	2300      	movs	r3, #0
 800602e:	e000      	b.n	8006032 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006030:	2302      	movs	r3, #2
  }
}
 8006032:	0018      	movs	r0, r3
 8006034:	46bd      	mov	sp, r7
 8006036:	b008      	add	sp, #32
 8006038:	bd80      	pop	{r7, pc}

0800603a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800603a:	b580      	push	{r7, lr}
 800603c:	b088      	sub	sp, #32
 800603e:	af00      	add	r7, sp, #0
 8006040:	60f8      	str	r0, [r7, #12]
 8006042:	60b9      	str	r1, [r7, #8]
 8006044:	1dbb      	adds	r3, r7, #6
 8006046:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800604c:	2b20      	cmp	r3, #32
 800604e:	d150      	bne.n	80060f2 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d003      	beq.n	800605e <HAL_UART_Receive_IT+0x24>
 8006056:	1dbb      	adds	r3, r7, #6
 8006058:	881b      	ldrh	r3, [r3, #0]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d101      	bne.n	8006062 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e048      	b.n	80060f4 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	689a      	ldr	r2, [r3, #8]
 8006066:	2380      	movs	r3, #128	; 0x80
 8006068:	015b      	lsls	r3, r3, #5
 800606a:	429a      	cmp	r2, r3
 800606c:	d109      	bne.n	8006082 <HAL_UART_Receive_IT+0x48>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d105      	bne.n	8006082 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	2201      	movs	r2, #1
 800607a:	4013      	ands	r3, r2
 800607c:	d001      	beq.n	8006082 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e038      	b.n	80060f4 <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2274      	movs	r2, #116	; 0x74
 8006086:	5c9b      	ldrb	r3, [r3, r2]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d101      	bne.n	8006090 <HAL_UART_Receive_IT+0x56>
 800608c:	2302      	movs	r3, #2
 800608e:	e031      	b.n	80060f4 <HAL_UART_Receive_IT+0xba>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2274      	movs	r2, #116	; 0x74
 8006094:	2101      	movs	r1, #1
 8006096:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2200      	movs	r2, #0
 800609c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	685a      	ldr	r2, [r3, #4]
 80060a4:	2380      	movs	r3, #128	; 0x80
 80060a6:	041b      	lsls	r3, r3, #16
 80060a8:	4013      	ands	r3, r2
 80060aa:	d019      	beq.n	80060e0 <HAL_UART_Receive_IT+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060ac:	f3ef 8310 	mrs	r3, PRIMASK
 80060b0:	613b      	str	r3, [r7, #16]
  return(result);
 80060b2:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80060b4:	61fb      	str	r3, [r7, #28]
 80060b6:	2301      	movs	r3, #1
 80060b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	f383 8810 	msr	PRIMASK, r3
}
 80060c0:	46c0      	nop			; (mov r8, r8)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2180      	movs	r1, #128	; 0x80
 80060ce:	04c9      	lsls	r1, r1, #19
 80060d0:	430a      	orrs	r2, r1
 80060d2:	601a      	str	r2, [r3, #0]
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	f383 8810 	msr	PRIMASK, r3
}
 80060de:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80060e0:	1dbb      	adds	r3, r7, #6
 80060e2:	881a      	ldrh	r2, [r3, #0]
 80060e4:	68b9      	ldr	r1, [r7, #8]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	0018      	movs	r0, r3
 80060ea:	f000 fdfb 	bl	8006ce4 <UART_Start_Receive_IT>
 80060ee:	0003      	movs	r3, r0
 80060f0:	e000      	b.n	80060f4 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 80060f2:	2302      	movs	r3, #2
  }
}
 80060f4:	0018      	movs	r0, r3
 80060f6:	46bd      	mov	sp, r7
 80060f8:	b008      	add	sp, #32
 80060fa:	bd80      	pop	{r7, pc}

080060fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060fc:	b590      	push	{r4, r7, lr}
 80060fe:	b0ab      	sub	sp, #172	; 0xac
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	69db      	ldr	r3, [r3, #28]
 800610a:	22a4      	movs	r2, #164	; 0xa4
 800610c:	18b9      	adds	r1, r7, r2
 800610e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	20a0      	movs	r0, #160	; 0xa0
 8006118:	1839      	adds	r1, r7, r0
 800611a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	219c      	movs	r1, #156	; 0x9c
 8006124:	1879      	adds	r1, r7, r1
 8006126:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006128:	0011      	movs	r1, r2
 800612a:	18bb      	adds	r3, r7, r2
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a99      	ldr	r2, [pc, #612]	; (8006394 <HAL_UART_IRQHandler+0x298>)
 8006130:	4013      	ands	r3, r2
 8006132:	2298      	movs	r2, #152	; 0x98
 8006134:	18bc      	adds	r4, r7, r2
 8006136:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8006138:	18bb      	adds	r3, r7, r2
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d114      	bne.n	800616a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006140:	187b      	adds	r3, r7, r1
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2220      	movs	r2, #32
 8006146:	4013      	ands	r3, r2
 8006148:	d00f      	beq.n	800616a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800614a:	183b      	adds	r3, r7, r0
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2220      	movs	r2, #32
 8006150:	4013      	ands	r3, r2
 8006152:	d00a      	beq.n	800616a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006158:	2b00      	cmp	r3, #0
 800615a:	d100      	bne.n	800615e <HAL_UART_IRQHandler+0x62>
 800615c:	e296      	b.n	800668c <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	0010      	movs	r0, r2
 8006166:	4798      	blx	r3
      }
      return;
 8006168:	e290      	b.n	800668c <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800616a:	2398      	movs	r3, #152	; 0x98
 800616c:	18fb      	adds	r3, r7, r3
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d100      	bne.n	8006176 <HAL_UART_IRQHandler+0x7a>
 8006174:	e114      	b.n	80063a0 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006176:	239c      	movs	r3, #156	; 0x9c
 8006178:	18fb      	adds	r3, r7, r3
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2201      	movs	r2, #1
 800617e:	4013      	ands	r3, r2
 8006180:	d106      	bne.n	8006190 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006182:	23a0      	movs	r3, #160	; 0xa0
 8006184:	18fb      	adds	r3, r7, r3
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a83      	ldr	r2, [pc, #524]	; (8006398 <HAL_UART_IRQHandler+0x29c>)
 800618a:	4013      	ands	r3, r2
 800618c:	d100      	bne.n	8006190 <HAL_UART_IRQHandler+0x94>
 800618e:	e107      	b.n	80063a0 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006190:	23a4      	movs	r3, #164	; 0xa4
 8006192:	18fb      	adds	r3, r7, r3
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2201      	movs	r2, #1
 8006198:	4013      	ands	r3, r2
 800619a:	d012      	beq.n	80061c2 <HAL_UART_IRQHandler+0xc6>
 800619c:	23a0      	movs	r3, #160	; 0xa0
 800619e:	18fb      	adds	r3, r7, r3
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	2380      	movs	r3, #128	; 0x80
 80061a4:	005b      	lsls	r3, r3, #1
 80061a6:	4013      	ands	r3, r2
 80061a8:	d00b      	beq.n	80061c2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2201      	movs	r2, #1
 80061b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2280      	movs	r2, #128	; 0x80
 80061b6:	589b      	ldr	r3, [r3, r2]
 80061b8:	2201      	movs	r2, #1
 80061ba:	431a      	orrs	r2, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2180      	movs	r1, #128	; 0x80
 80061c0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061c2:	23a4      	movs	r3, #164	; 0xa4
 80061c4:	18fb      	adds	r3, r7, r3
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2202      	movs	r2, #2
 80061ca:	4013      	ands	r3, r2
 80061cc:	d011      	beq.n	80061f2 <HAL_UART_IRQHandler+0xf6>
 80061ce:	239c      	movs	r3, #156	; 0x9c
 80061d0:	18fb      	adds	r3, r7, r3
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2201      	movs	r2, #1
 80061d6:	4013      	ands	r3, r2
 80061d8:	d00b      	beq.n	80061f2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2202      	movs	r2, #2
 80061e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2280      	movs	r2, #128	; 0x80
 80061e6:	589b      	ldr	r3, [r3, r2]
 80061e8:	2204      	movs	r2, #4
 80061ea:	431a      	orrs	r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2180      	movs	r1, #128	; 0x80
 80061f0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061f2:	23a4      	movs	r3, #164	; 0xa4
 80061f4:	18fb      	adds	r3, r7, r3
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2204      	movs	r2, #4
 80061fa:	4013      	ands	r3, r2
 80061fc:	d011      	beq.n	8006222 <HAL_UART_IRQHandler+0x126>
 80061fe:	239c      	movs	r3, #156	; 0x9c
 8006200:	18fb      	adds	r3, r7, r3
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2201      	movs	r2, #1
 8006206:	4013      	ands	r3, r2
 8006208:	d00b      	beq.n	8006222 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2204      	movs	r2, #4
 8006210:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2280      	movs	r2, #128	; 0x80
 8006216:	589b      	ldr	r3, [r3, r2]
 8006218:	2202      	movs	r2, #2
 800621a:	431a      	orrs	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2180      	movs	r1, #128	; 0x80
 8006220:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006222:	23a4      	movs	r3, #164	; 0xa4
 8006224:	18fb      	adds	r3, r7, r3
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2208      	movs	r2, #8
 800622a:	4013      	ands	r3, r2
 800622c:	d017      	beq.n	800625e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800622e:	23a0      	movs	r3, #160	; 0xa0
 8006230:	18fb      	adds	r3, r7, r3
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2220      	movs	r2, #32
 8006236:	4013      	ands	r3, r2
 8006238:	d105      	bne.n	8006246 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800623a:	239c      	movs	r3, #156	; 0x9c
 800623c:	18fb      	adds	r3, r7, r3
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2201      	movs	r2, #1
 8006242:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006244:	d00b      	beq.n	800625e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2208      	movs	r2, #8
 800624c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2280      	movs	r2, #128	; 0x80
 8006252:	589b      	ldr	r3, [r3, r2]
 8006254:	2208      	movs	r2, #8
 8006256:	431a      	orrs	r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2180      	movs	r1, #128	; 0x80
 800625c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800625e:	23a4      	movs	r3, #164	; 0xa4
 8006260:	18fb      	adds	r3, r7, r3
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	2380      	movs	r3, #128	; 0x80
 8006266:	011b      	lsls	r3, r3, #4
 8006268:	4013      	ands	r3, r2
 800626a:	d013      	beq.n	8006294 <HAL_UART_IRQHandler+0x198>
 800626c:	23a0      	movs	r3, #160	; 0xa0
 800626e:	18fb      	adds	r3, r7, r3
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	2380      	movs	r3, #128	; 0x80
 8006274:	04db      	lsls	r3, r3, #19
 8006276:	4013      	ands	r3, r2
 8006278:	d00c      	beq.n	8006294 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2280      	movs	r2, #128	; 0x80
 8006280:	0112      	lsls	r2, r2, #4
 8006282:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2280      	movs	r2, #128	; 0x80
 8006288:	589b      	ldr	r3, [r3, r2]
 800628a:	2220      	movs	r2, #32
 800628c:	431a      	orrs	r2, r3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2180      	movs	r1, #128	; 0x80
 8006292:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2280      	movs	r2, #128	; 0x80
 8006298:	589b      	ldr	r3, [r3, r2]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d100      	bne.n	80062a0 <HAL_UART_IRQHandler+0x1a4>
 800629e:	e1f7      	b.n	8006690 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80062a0:	23a4      	movs	r3, #164	; 0xa4
 80062a2:	18fb      	adds	r3, r7, r3
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2220      	movs	r2, #32
 80062a8:	4013      	ands	r3, r2
 80062aa:	d00e      	beq.n	80062ca <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80062ac:	23a0      	movs	r3, #160	; 0xa0
 80062ae:	18fb      	adds	r3, r7, r3
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2220      	movs	r2, #32
 80062b4:	4013      	ands	r3, r2
 80062b6:	d008      	beq.n	80062ca <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d004      	beq.n	80062ca <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	0010      	movs	r0, r2
 80062c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2280      	movs	r2, #128	; 0x80
 80062ce:	589b      	ldr	r3, [r3, r2]
 80062d0:	2194      	movs	r1, #148	; 0x94
 80062d2:	187a      	adds	r2, r7, r1
 80062d4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	2240      	movs	r2, #64	; 0x40
 80062de:	4013      	ands	r3, r2
 80062e0:	2b40      	cmp	r3, #64	; 0x40
 80062e2:	d004      	beq.n	80062ee <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80062e4:	187b      	adds	r3, r7, r1
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2228      	movs	r2, #40	; 0x28
 80062ea:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062ec:	d047      	beq.n	800637e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	0018      	movs	r0, r3
 80062f2:	f000 fd93 	bl	8006e1c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	2240      	movs	r2, #64	; 0x40
 80062fe:	4013      	ands	r3, r2
 8006300:	2b40      	cmp	r3, #64	; 0x40
 8006302:	d137      	bne.n	8006374 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006304:	f3ef 8310 	mrs	r3, PRIMASK
 8006308:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800630a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800630c:	2090      	movs	r0, #144	; 0x90
 800630e:	183a      	adds	r2, r7, r0
 8006310:	6013      	str	r3, [r2, #0]
 8006312:	2301      	movs	r3, #1
 8006314:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006316:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006318:	f383 8810 	msr	PRIMASK, r3
}
 800631c:	46c0      	nop			; (mov r8, r8)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	689a      	ldr	r2, [r3, #8]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2140      	movs	r1, #64	; 0x40
 800632a:	438a      	bics	r2, r1
 800632c:	609a      	str	r2, [r3, #8]
 800632e:	183b      	adds	r3, r7, r0
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006334:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006336:	f383 8810 	msr	PRIMASK, r3
}
 800633a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006340:	2b00      	cmp	r3, #0
 8006342:	d012      	beq.n	800636a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006348:	4a14      	ldr	r2, [pc, #80]	; (800639c <HAL_UART_IRQHandler+0x2a0>)
 800634a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006350:	0018      	movs	r0, r3
 8006352:	f7fc fbe3 	bl	8002b1c <HAL_DMA_Abort_IT>
 8006356:	1e03      	subs	r3, r0, #0
 8006358:	d01a      	beq.n	8006390 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800635e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006364:	0018      	movs	r0, r3
 8006366:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006368:	e012      	b.n	8006390 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	0018      	movs	r0, r3
 800636e:	f000 f9a5 	bl	80066bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006372:	e00d      	b.n	8006390 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	0018      	movs	r0, r3
 8006378:	f000 f9a0 	bl	80066bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800637c:	e008      	b.n	8006390 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	0018      	movs	r0, r3
 8006382:	f000 f99b 	bl	80066bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2280      	movs	r2, #128	; 0x80
 800638a:	2100      	movs	r1, #0
 800638c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800638e:	e17f      	b.n	8006690 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006390:	46c0      	nop			; (mov r8, r8)
    return;
 8006392:	e17d      	b.n	8006690 <HAL_UART_IRQHandler+0x594>
 8006394:	0000080f 	.word	0x0000080f
 8006398:	04000120 	.word	0x04000120
 800639c:	08006ee1 	.word	0x08006ee1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d000      	beq.n	80063aa <HAL_UART_IRQHandler+0x2ae>
 80063a8:	e131      	b.n	800660e <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80063aa:	23a4      	movs	r3, #164	; 0xa4
 80063ac:	18fb      	adds	r3, r7, r3
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2210      	movs	r2, #16
 80063b2:	4013      	ands	r3, r2
 80063b4:	d100      	bne.n	80063b8 <HAL_UART_IRQHandler+0x2bc>
 80063b6:	e12a      	b.n	800660e <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80063b8:	23a0      	movs	r3, #160	; 0xa0
 80063ba:	18fb      	adds	r3, r7, r3
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2210      	movs	r2, #16
 80063c0:	4013      	ands	r3, r2
 80063c2:	d100      	bne.n	80063c6 <HAL_UART_IRQHandler+0x2ca>
 80063c4:	e123      	b.n	800660e <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2210      	movs	r2, #16
 80063cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	2240      	movs	r2, #64	; 0x40
 80063d6:	4013      	ands	r3, r2
 80063d8:	2b40      	cmp	r3, #64	; 0x40
 80063da:	d000      	beq.n	80063de <HAL_UART_IRQHandler+0x2e2>
 80063dc:	e09b      	b.n	8006516 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	685a      	ldr	r2, [r3, #4]
 80063e6:	217e      	movs	r1, #126	; 0x7e
 80063e8:	187b      	adds	r3, r7, r1
 80063ea:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80063ec:	187b      	adds	r3, r7, r1
 80063ee:	881b      	ldrh	r3, [r3, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d100      	bne.n	80063f6 <HAL_UART_IRQHandler+0x2fa>
 80063f4:	e14e      	b.n	8006694 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2258      	movs	r2, #88	; 0x58
 80063fa:	5a9b      	ldrh	r3, [r3, r2]
 80063fc:	187a      	adds	r2, r7, r1
 80063fe:	8812      	ldrh	r2, [r2, #0]
 8006400:	429a      	cmp	r2, r3
 8006402:	d300      	bcc.n	8006406 <HAL_UART_IRQHandler+0x30a>
 8006404:	e146      	b.n	8006694 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	187a      	adds	r2, r7, r1
 800640a:	215a      	movs	r1, #90	; 0x5a
 800640c:	8812      	ldrh	r2, [r2, #0]
 800640e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006414:	699b      	ldr	r3, [r3, #24]
 8006416:	2b20      	cmp	r3, #32
 8006418:	d06e      	beq.n	80064f8 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800641a:	f3ef 8310 	mrs	r3, PRIMASK
 800641e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006422:	67bb      	str	r3, [r7, #120]	; 0x78
 8006424:	2301      	movs	r3, #1
 8006426:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800642a:	f383 8810 	msr	PRIMASK, r3
}
 800642e:	46c0      	nop			; (mov r8, r8)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	499a      	ldr	r1, [pc, #616]	; (80066a4 <HAL_UART_IRQHandler+0x5a8>)
 800643c:	400a      	ands	r2, r1
 800643e:	601a      	str	r2, [r3, #0]
 8006440:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006442:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006446:	f383 8810 	msr	PRIMASK, r3
}
 800644a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800644c:	f3ef 8310 	mrs	r3, PRIMASK
 8006450:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8006452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006454:	677b      	str	r3, [r7, #116]	; 0x74
 8006456:	2301      	movs	r3, #1
 8006458:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800645a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800645c:	f383 8810 	msr	PRIMASK, r3
}
 8006460:	46c0      	nop			; (mov r8, r8)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	689a      	ldr	r2, [r3, #8]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2101      	movs	r1, #1
 800646e:	438a      	bics	r2, r1
 8006470:	609a      	str	r2, [r3, #8]
 8006472:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006474:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006476:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006478:	f383 8810 	msr	PRIMASK, r3
}
 800647c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800647e:	f3ef 8310 	mrs	r3, PRIMASK
 8006482:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006484:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006486:	673b      	str	r3, [r7, #112]	; 0x70
 8006488:	2301      	movs	r3, #1
 800648a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800648c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800648e:	f383 8810 	msr	PRIMASK, r3
}
 8006492:	46c0      	nop			; (mov r8, r8)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	689a      	ldr	r2, [r3, #8]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2140      	movs	r1, #64	; 0x40
 80064a0:	438a      	bics	r2, r1
 80064a2:	609a      	str	r2, [r3, #8]
 80064a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064a6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064aa:	f383 8810 	msr	PRIMASK, r3
}
 80064ae:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2220      	movs	r2, #32
 80064b4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064bc:	f3ef 8310 	mrs	r3, PRIMASK
 80064c0:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80064c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80064c6:	2301      	movs	r3, #1
 80064c8:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80064cc:	f383 8810 	msr	PRIMASK, r3
}
 80064d0:	46c0      	nop			; (mov r8, r8)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2110      	movs	r1, #16
 80064de:	438a      	bics	r2, r1
 80064e0:	601a      	str	r2, [r3, #0]
 80064e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064e8:	f383 8810 	msr	PRIMASK, r3
}
 80064ec:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064f2:	0018      	movs	r0, r3
 80064f4:	f7fc fada 	bl	8002aac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2258      	movs	r2, #88	; 0x58
 80064fc:	5a9a      	ldrh	r2, [r3, r2]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	215a      	movs	r1, #90	; 0x5a
 8006502:	5a5b      	ldrh	r3, [r3, r1]
 8006504:	b29b      	uxth	r3, r3
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	b29a      	uxth	r2, r3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	0011      	movs	r1, r2
 800650e:	0018      	movs	r0, r3
 8006510:	f000 f8dc 	bl	80066cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006514:	e0be      	b.n	8006694 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2258      	movs	r2, #88	; 0x58
 800651a:	5a99      	ldrh	r1, [r3, r2]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	225a      	movs	r2, #90	; 0x5a
 8006520:	5a9b      	ldrh	r3, [r3, r2]
 8006522:	b29a      	uxth	r2, r3
 8006524:	208e      	movs	r0, #142	; 0x8e
 8006526:	183b      	adds	r3, r7, r0
 8006528:	1a8a      	subs	r2, r1, r2
 800652a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	225a      	movs	r2, #90	; 0x5a
 8006530:	5a9b      	ldrh	r3, [r3, r2]
 8006532:	b29b      	uxth	r3, r3
 8006534:	2b00      	cmp	r3, #0
 8006536:	d100      	bne.n	800653a <HAL_UART_IRQHandler+0x43e>
 8006538:	e0ae      	b.n	8006698 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 800653a:	183b      	adds	r3, r7, r0
 800653c:	881b      	ldrh	r3, [r3, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d100      	bne.n	8006544 <HAL_UART_IRQHandler+0x448>
 8006542:	e0a9      	b.n	8006698 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006544:	f3ef 8310 	mrs	r3, PRIMASK
 8006548:	60fb      	str	r3, [r7, #12]
  return(result);
 800654a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800654c:	2488      	movs	r4, #136	; 0x88
 800654e:	193a      	adds	r2, r7, r4
 8006550:	6013      	str	r3, [r2, #0]
 8006552:	2301      	movs	r3, #1
 8006554:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	f383 8810 	msr	PRIMASK, r3
}
 800655c:	46c0      	nop			; (mov r8, r8)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	494f      	ldr	r1, [pc, #316]	; (80066a8 <HAL_UART_IRQHandler+0x5ac>)
 800656a:	400a      	ands	r2, r1
 800656c:	601a      	str	r2, [r3, #0]
 800656e:	193b      	adds	r3, r7, r4
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	f383 8810 	msr	PRIMASK, r3
}
 800657a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800657c:	f3ef 8310 	mrs	r3, PRIMASK
 8006580:	61bb      	str	r3, [r7, #24]
  return(result);
 8006582:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006584:	2484      	movs	r4, #132	; 0x84
 8006586:	193a      	adds	r2, r7, r4
 8006588:	6013      	str	r3, [r2, #0]
 800658a:	2301      	movs	r3, #1
 800658c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	f383 8810 	msr	PRIMASK, r3
}
 8006594:	46c0      	nop			; (mov r8, r8)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	689a      	ldr	r2, [r3, #8]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2101      	movs	r1, #1
 80065a2:	438a      	bics	r2, r1
 80065a4:	609a      	str	r2, [r3, #8]
 80065a6:	193b      	adds	r3, r7, r4
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065ac:	6a3b      	ldr	r3, [r7, #32]
 80065ae:	f383 8810 	msr	PRIMASK, r3
}
 80065b2:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2220      	movs	r2, #32
 80065b8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065c6:	f3ef 8310 	mrs	r3, PRIMASK
 80065ca:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80065cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065ce:	2480      	movs	r4, #128	; 0x80
 80065d0:	193a      	adds	r2, r7, r4
 80065d2:	6013      	str	r3, [r2, #0]
 80065d4:	2301      	movs	r3, #1
 80065d6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065da:	f383 8810 	msr	PRIMASK, r3
}
 80065de:	46c0      	nop			; (mov r8, r8)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2110      	movs	r1, #16
 80065ec:	438a      	bics	r2, r1
 80065ee:	601a      	str	r2, [r3, #0]
 80065f0:	193b      	adds	r3, r7, r4
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f8:	f383 8810 	msr	PRIMASK, r3
}
 80065fc:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80065fe:	183b      	adds	r3, r7, r0
 8006600:	881a      	ldrh	r2, [r3, #0]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	0011      	movs	r1, r2
 8006606:	0018      	movs	r0, r3
 8006608:	f000 f860 	bl	80066cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800660c:	e044      	b.n	8006698 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800660e:	23a4      	movs	r3, #164	; 0xa4
 8006610:	18fb      	adds	r3, r7, r3
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	2380      	movs	r3, #128	; 0x80
 8006616:	035b      	lsls	r3, r3, #13
 8006618:	4013      	ands	r3, r2
 800661a:	d010      	beq.n	800663e <HAL_UART_IRQHandler+0x542>
 800661c:	239c      	movs	r3, #156	; 0x9c
 800661e:	18fb      	adds	r3, r7, r3
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	2380      	movs	r3, #128	; 0x80
 8006624:	03db      	lsls	r3, r3, #15
 8006626:	4013      	ands	r3, r2
 8006628:	d009      	beq.n	800663e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	2280      	movs	r2, #128	; 0x80
 8006630:	0352      	lsls	r2, r2, #13
 8006632:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	0018      	movs	r0, r3
 8006638:	f000 fdfc 	bl	8007234 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800663c:	e02f      	b.n	800669e <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800663e:	23a4      	movs	r3, #164	; 0xa4
 8006640:	18fb      	adds	r3, r7, r3
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2280      	movs	r2, #128	; 0x80
 8006646:	4013      	ands	r3, r2
 8006648:	d00f      	beq.n	800666a <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800664a:	23a0      	movs	r3, #160	; 0xa0
 800664c:	18fb      	adds	r3, r7, r3
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2280      	movs	r2, #128	; 0x80
 8006652:	4013      	ands	r3, r2
 8006654:	d009      	beq.n	800666a <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800665a:	2b00      	cmp	r3, #0
 800665c:	d01e      	beq.n	800669c <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	0010      	movs	r0, r2
 8006666:	4798      	blx	r3
    }
    return;
 8006668:	e018      	b.n	800669c <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800666a:	23a4      	movs	r3, #164	; 0xa4
 800666c:	18fb      	adds	r3, r7, r3
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2240      	movs	r2, #64	; 0x40
 8006672:	4013      	ands	r3, r2
 8006674:	d013      	beq.n	800669e <HAL_UART_IRQHandler+0x5a2>
 8006676:	23a0      	movs	r3, #160	; 0xa0
 8006678:	18fb      	adds	r3, r7, r3
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2240      	movs	r2, #64	; 0x40
 800667e:	4013      	ands	r3, r2
 8006680:	d00d      	beq.n	800669e <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	0018      	movs	r0, r3
 8006686:	f000 fc42 	bl	8006f0e <UART_EndTransmit_IT>
    return;
 800668a:	e008      	b.n	800669e <HAL_UART_IRQHandler+0x5a2>
      return;
 800668c:	46c0      	nop			; (mov r8, r8)
 800668e:	e006      	b.n	800669e <HAL_UART_IRQHandler+0x5a2>
    return;
 8006690:	46c0      	nop			; (mov r8, r8)
 8006692:	e004      	b.n	800669e <HAL_UART_IRQHandler+0x5a2>
      return;
 8006694:	46c0      	nop			; (mov r8, r8)
 8006696:	e002      	b.n	800669e <HAL_UART_IRQHandler+0x5a2>
      return;
 8006698:	46c0      	nop			; (mov r8, r8)
 800669a:	e000      	b.n	800669e <HAL_UART_IRQHandler+0x5a2>
    return;
 800669c:	46c0      	nop			; (mov r8, r8)
  }

}
 800669e:	46bd      	mov	sp, r7
 80066a0:	b02b      	add	sp, #172	; 0xac
 80066a2:	bd90      	pop	{r4, r7, pc}
 80066a4:	fffffeff 	.word	0xfffffeff
 80066a8:	fffffedf 	.word	0xfffffedf

080066ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b082      	sub	sp, #8
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80066b4:	46c0      	nop			; (mov r8, r8)
 80066b6:	46bd      	mov	sp, r7
 80066b8:	b002      	add	sp, #8
 80066ba:	bd80      	pop	{r7, pc}

080066bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80066c4:	46c0      	nop			; (mov r8, r8)
 80066c6:	46bd      	mov	sp, r7
 80066c8:	b002      	add	sp, #8
 80066ca:	bd80      	pop	{r7, pc}

080066cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	000a      	movs	r2, r1
 80066d6:	1cbb      	adds	r3, r7, #2
 80066d8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80066da:	46c0      	nop			; (mov r8, r8)
 80066dc:	46bd      	mov	sp, r7
 80066de:	b002      	add	sp, #8
 80066e0:	bd80      	pop	{r7, pc}
	...

080066e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b088      	sub	sp, #32
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80066ec:	231e      	movs	r3, #30
 80066ee:	18fb      	adds	r3, r7, r3
 80066f0:	2200      	movs	r2, #0
 80066f2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	689a      	ldr	r2, [r3, #8]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	431a      	orrs	r2, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	431a      	orrs	r2, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	69db      	ldr	r3, [r3, #28]
 8006708:	4313      	orrs	r3, r2
 800670a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a8d      	ldr	r2, [pc, #564]	; (8006948 <UART_SetConfig+0x264>)
 8006714:	4013      	ands	r3, r2
 8006716:	0019      	movs	r1, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	697a      	ldr	r2, [r7, #20]
 800671e:	430a      	orrs	r2, r1
 8006720:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	4a88      	ldr	r2, [pc, #544]	; (800694c <UART_SetConfig+0x268>)
 800672a:	4013      	ands	r3, r2
 800672c:	0019      	movs	r1, r3
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	68da      	ldr	r2, [r3, #12]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	430a      	orrs	r2, r1
 8006738:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	699b      	ldr	r3, [r3, #24]
 800673e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a1b      	ldr	r3, [r3, #32]
 8006744:	697a      	ldr	r2, [r7, #20]
 8006746:	4313      	orrs	r3, r2
 8006748:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	4a7f      	ldr	r2, [pc, #508]	; (8006950 <UART_SetConfig+0x26c>)
 8006752:	4013      	ands	r3, r2
 8006754:	0019      	movs	r1, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	430a      	orrs	r2, r1
 800675e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a7b      	ldr	r2, [pc, #492]	; (8006954 <UART_SetConfig+0x270>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d127      	bne.n	80067ba <UART_SetConfig+0xd6>
 800676a:	4b7b      	ldr	r3, [pc, #492]	; (8006958 <UART_SetConfig+0x274>)
 800676c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800676e:	2203      	movs	r2, #3
 8006770:	4013      	ands	r3, r2
 8006772:	2b03      	cmp	r3, #3
 8006774:	d00d      	beq.n	8006792 <UART_SetConfig+0xae>
 8006776:	d81b      	bhi.n	80067b0 <UART_SetConfig+0xcc>
 8006778:	2b02      	cmp	r3, #2
 800677a:	d014      	beq.n	80067a6 <UART_SetConfig+0xc2>
 800677c:	d818      	bhi.n	80067b0 <UART_SetConfig+0xcc>
 800677e:	2b00      	cmp	r3, #0
 8006780:	d002      	beq.n	8006788 <UART_SetConfig+0xa4>
 8006782:	2b01      	cmp	r3, #1
 8006784:	d00a      	beq.n	800679c <UART_SetConfig+0xb8>
 8006786:	e013      	b.n	80067b0 <UART_SetConfig+0xcc>
 8006788:	231f      	movs	r3, #31
 800678a:	18fb      	adds	r3, r7, r3
 800678c:	2200      	movs	r2, #0
 800678e:	701a      	strb	r2, [r3, #0]
 8006790:	e021      	b.n	80067d6 <UART_SetConfig+0xf2>
 8006792:	231f      	movs	r3, #31
 8006794:	18fb      	adds	r3, r7, r3
 8006796:	2202      	movs	r2, #2
 8006798:	701a      	strb	r2, [r3, #0]
 800679a:	e01c      	b.n	80067d6 <UART_SetConfig+0xf2>
 800679c:	231f      	movs	r3, #31
 800679e:	18fb      	adds	r3, r7, r3
 80067a0:	2204      	movs	r2, #4
 80067a2:	701a      	strb	r2, [r3, #0]
 80067a4:	e017      	b.n	80067d6 <UART_SetConfig+0xf2>
 80067a6:	231f      	movs	r3, #31
 80067a8:	18fb      	adds	r3, r7, r3
 80067aa:	2208      	movs	r2, #8
 80067ac:	701a      	strb	r2, [r3, #0]
 80067ae:	e012      	b.n	80067d6 <UART_SetConfig+0xf2>
 80067b0:	231f      	movs	r3, #31
 80067b2:	18fb      	adds	r3, r7, r3
 80067b4:	2210      	movs	r2, #16
 80067b6:	701a      	strb	r2, [r3, #0]
 80067b8:	e00d      	b.n	80067d6 <UART_SetConfig+0xf2>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a67      	ldr	r2, [pc, #412]	; (800695c <UART_SetConfig+0x278>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d104      	bne.n	80067ce <UART_SetConfig+0xea>
 80067c4:	231f      	movs	r3, #31
 80067c6:	18fb      	adds	r3, r7, r3
 80067c8:	2200      	movs	r2, #0
 80067ca:	701a      	strb	r2, [r3, #0]
 80067cc:	e003      	b.n	80067d6 <UART_SetConfig+0xf2>
 80067ce:	231f      	movs	r3, #31
 80067d0:	18fb      	adds	r3, r7, r3
 80067d2:	2210      	movs	r2, #16
 80067d4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	69da      	ldr	r2, [r3, #28]
 80067da:	2380      	movs	r3, #128	; 0x80
 80067dc:	021b      	lsls	r3, r3, #8
 80067de:	429a      	cmp	r2, r3
 80067e0:	d15d      	bne.n	800689e <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 80067e2:	231f      	movs	r3, #31
 80067e4:	18fb      	adds	r3, r7, r3
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	2b08      	cmp	r3, #8
 80067ea:	d015      	beq.n	8006818 <UART_SetConfig+0x134>
 80067ec:	dc18      	bgt.n	8006820 <UART_SetConfig+0x13c>
 80067ee:	2b04      	cmp	r3, #4
 80067f0:	d00d      	beq.n	800680e <UART_SetConfig+0x12a>
 80067f2:	dc15      	bgt.n	8006820 <UART_SetConfig+0x13c>
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d002      	beq.n	80067fe <UART_SetConfig+0x11a>
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	d005      	beq.n	8006808 <UART_SetConfig+0x124>
 80067fc:	e010      	b.n	8006820 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067fe:	f7fd fe27 	bl	8004450 <HAL_RCC_GetPCLK1Freq>
 8006802:	0003      	movs	r3, r0
 8006804:	61bb      	str	r3, [r7, #24]
        break;
 8006806:	e012      	b.n	800682e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006808:	4b55      	ldr	r3, [pc, #340]	; (8006960 <UART_SetConfig+0x27c>)
 800680a:	61bb      	str	r3, [r7, #24]
        break;
 800680c:	e00f      	b.n	800682e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800680e:	f7fd fdb1 	bl	8004374 <HAL_RCC_GetSysClockFreq>
 8006812:	0003      	movs	r3, r0
 8006814:	61bb      	str	r3, [r7, #24]
        break;
 8006816:	e00a      	b.n	800682e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006818:	2380      	movs	r3, #128	; 0x80
 800681a:	021b      	lsls	r3, r3, #8
 800681c:	61bb      	str	r3, [r7, #24]
        break;
 800681e:	e006      	b.n	800682e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8006820:	2300      	movs	r3, #0
 8006822:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006824:	231e      	movs	r3, #30
 8006826:	18fb      	adds	r3, r7, r3
 8006828:	2201      	movs	r2, #1
 800682a:	701a      	strb	r2, [r3, #0]
        break;
 800682c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800682e:	69bb      	ldr	r3, [r7, #24]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d100      	bne.n	8006836 <UART_SetConfig+0x152>
 8006834:	e07b      	b.n	800692e <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	005a      	lsls	r2, r3, #1
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	085b      	lsrs	r3, r3, #1
 8006840:	18d2      	adds	r2, r2, r3
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	0019      	movs	r1, r3
 8006848:	0010      	movs	r0, r2
 800684a:	f7f9 fc5d 	bl	8000108 <__udivsi3>
 800684e:	0003      	movs	r3, r0
 8006850:	b29b      	uxth	r3, r3
 8006852:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	2b0f      	cmp	r3, #15
 8006858:	d91c      	bls.n	8006894 <UART_SetConfig+0x1b0>
 800685a:	693a      	ldr	r2, [r7, #16]
 800685c:	2380      	movs	r3, #128	; 0x80
 800685e:	025b      	lsls	r3, r3, #9
 8006860:	429a      	cmp	r2, r3
 8006862:	d217      	bcs.n	8006894 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	b29a      	uxth	r2, r3
 8006868:	200e      	movs	r0, #14
 800686a:	183b      	adds	r3, r7, r0
 800686c:	210f      	movs	r1, #15
 800686e:	438a      	bics	r2, r1
 8006870:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	085b      	lsrs	r3, r3, #1
 8006876:	b29b      	uxth	r3, r3
 8006878:	2207      	movs	r2, #7
 800687a:	4013      	ands	r3, r2
 800687c:	b299      	uxth	r1, r3
 800687e:	183b      	adds	r3, r7, r0
 8006880:	183a      	adds	r2, r7, r0
 8006882:	8812      	ldrh	r2, [r2, #0]
 8006884:	430a      	orrs	r2, r1
 8006886:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	183a      	adds	r2, r7, r0
 800688e:	8812      	ldrh	r2, [r2, #0]
 8006890:	60da      	str	r2, [r3, #12]
 8006892:	e04c      	b.n	800692e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8006894:	231e      	movs	r3, #30
 8006896:	18fb      	adds	r3, r7, r3
 8006898:	2201      	movs	r2, #1
 800689a:	701a      	strb	r2, [r3, #0]
 800689c:	e047      	b.n	800692e <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800689e:	231f      	movs	r3, #31
 80068a0:	18fb      	adds	r3, r7, r3
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	2b08      	cmp	r3, #8
 80068a6:	d015      	beq.n	80068d4 <UART_SetConfig+0x1f0>
 80068a8:	dc18      	bgt.n	80068dc <UART_SetConfig+0x1f8>
 80068aa:	2b04      	cmp	r3, #4
 80068ac:	d00d      	beq.n	80068ca <UART_SetConfig+0x1e6>
 80068ae:	dc15      	bgt.n	80068dc <UART_SetConfig+0x1f8>
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d002      	beq.n	80068ba <UART_SetConfig+0x1d6>
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	d005      	beq.n	80068c4 <UART_SetConfig+0x1e0>
 80068b8:	e010      	b.n	80068dc <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068ba:	f7fd fdc9 	bl	8004450 <HAL_RCC_GetPCLK1Freq>
 80068be:	0003      	movs	r3, r0
 80068c0:	61bb      	str	r3, [r7, #24]
        break;
 80068c2:	e012      	b.n	80068ea <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068c4:	4b26      	ldr	r3, [pc, #152]	; (8006960 <UART_SetConfig+0x27c>)
 80068c6:	61bb      	str	r3, [r7, #24]
        break;
 80068c8:	e00f      	b.n	80068ea <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068ca:	f7fd fd53 	bl	8004374 <HAL_RCC_GetSysClockFreq>
 80068ce:	0003      	movs	r3, r0
 80068d0:	61bb      	str	r3, [r7, #24]
        break;
 80068d2:	e00a      	b.n	80068ea <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068d4:	2380      	movs	r3, #128	; 0x80
 80068d6:	021b      	lsls	r3, r3, #8
 80068d8:	61bb      	str	r3, [r7, #24]
        break;
 80068da:	e006      	b.n	80068ea <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 80068dc:	2300      	movs	r3, #0
 80068de:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80068e0:	231e      	movs	r3, #30
 80068e2:	18fb      	adds	r3, r7, r3
 80068e4:	2201      	movs	r2, #1
 80068e6:	701a      	strb	r2, [r3, #0]
        break;
 80068e8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d01e      	beq.n	800692e <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	085a      	lsrs	r2, r3, #1
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	18d2      	adds	r2, r2, r3
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	0019      	movs	r1, r3
 8006900:	0010      	movs	r0, r2
 8006902:	f7f9 fc01 	bl	8000108 <__udivsi3>
 8006906:	0003      	movs	r3, r0
 8006908:	b29b      	uxth	r3, r3
 800690a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	2b0f      	cmp	r3, #15
 8006910:	d909      	bls.n	8006926 <UART_SetConfig+0x242>
 8006912:	693a      	ldr	r2, [r7, #16]
 8006914:	2380      	movs	r3, #128	; 0x80
 8006916:	025b      	lsls	r3, r3, #9
 8006918:	429a      	cmp	r2, r3
 800691a:	d204      	bcs.n	8006926 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	693a      	ldr	r2, [r7, #16]
 8006922:	60da      	str	r2, [r3, #12]
 8006924:	e003      	b.n	800692e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8006926:	231e      	movs	r3, #30
 8006928:	18fb      	adds	r3, r7, r3
 800692a:	2201      	movs	r2, #1
 800692c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800693a:	231e      	movs	r3, #30
 800693c:	18fb      	adds	r3, r7, r3
 800693e:	781b      	ldrb	r3, [r3, #0]
}
 8006940:	0018      	movs	r0, r3
 8006942:	46bd      	mov	sp, r7
 8006944:	b008      	add	sp, #32
 8006946:	bd80      	pop	{r7, pc}
 8006948:	ffff69f3 	.word	0xffff69f3
 800694c:	ffffcfff 	.word	0xffffcfff
 8006950:	fffff4ff 	.word	0xfffff4ff
 8006954:	40013800 	.word	0x40013800
 8006958:	40021000 	.word	0x40021000
 800695c:	40004400 	.word	0x40004400
 8006960:	007a1200 	.word	0x007a1200

08006964 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006970:	2201      	movs	r2, #1
 8006972:	4013      	ands	r3, r2
 8006974:	d00b      	beq.n	800698e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	4a4a      	ldr	r2, [pc, #296]	; (8006aa8 <UART_AdvFeatureConfig+0x144>)
 800697e:	4013      	ands	r3, r2
 8006980:	0019      	movs	r1, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	430a      	orrs	r2, r1
 800698c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006992:	2202      	movs	r2, #2
 8006994:	4013      	ands	r3, r2
 8006996:	d00b      	beq.n	80069b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	4a43      	ldr	r2, [pc, #268]	; (8006aac <UART_AdvFeatureConfig+0x148>)
 80069a0:	4013      	ands	r3, r2
 80069a2:	0019      	movs	r1, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	430a      	orrs	r2, r1
 80069ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b4:	2204      	movs	r2, #4
 80069b6:	4013      	ands	r3, r2
 80069b8:	d00b      	beq.n	80069d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	4a3b      	ldr	r2, [pc, #236]	; (8006ab0 <UART_AdvFeatureConfig+0x14c>)
 80069c2:	4013      	ands	r3, r2
 80069c4:	0019      	movs	r1, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	430a      	orrs	r2, r1
 80069d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d6:	2208      	movs	r2, #8
 80069d8:	4013      	ands	r3, r2
 80069da:	d00b      	beq.n	80069f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	4a34      	ldr	r2, [pc, #208]	; (8006ab4 <UART_AdvFeatureConfig+0x150>)
 80069e4:	4013      	ands	r3, r2
 80069e6:	0019      	movs	r1, r3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	430a      	orrs	r2, r1
 80069f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f8:	2210      	movs	r2, #16
 80069fa:	4013      	ands	r3, r2
 80069fc:	d00b      	beq.n	8006a16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	4a2c      	ldr	r2, [pc, #176]	; (8006ab8 <UART_AdvFeatureConfig+0x154>)
 8006a06:	4013      	ands	r3, r2
 8006a08:	0019      	movs	r1, r3
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	430a      	orrs	r2, r1
 8006a14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1a:	2220      	movs	r2, #32
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	d00b      	beq.n	8006a38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	4a25      	ldr	r2, [pc, #148]	; (8006abc <UART_AdvFeatureConfig+0x158>)
 8006a28:	4013      	ands	r3, r2
 8006a2a:	0019      	movs	r1, r3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	430a      	orrs	r2, r1
 8006a36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3c:	2240      	movs	r2, #64	; 0x40
 8006a3e:	4013      	ands	r3, r2
 8006a40:	d01d      	beq.n	8006a7e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	4a1d      	ldr	r2, [pc, #116]	; (8006ac0 <UART_AdvFeatureConfig+0x15c>)
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	0019      	movs	r1, r3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	430a      	orrs	r2, r1
 8006a58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a5e:	2380      	movs	r3, #128	; 0x80
 8006a60:	035b      	lsls	r3, r3, #13
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d10b      	bne.n	8006a7e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	4a15      	ldr	r2, [pc, #84]	; (8006ac4 <UART_AdvFeatureConfig+0x160>)
 8006a6e:	4013      	ands	r3, r2
 8006a70:	0019      	movs	r1, r3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	430a      	orrs	r2, r1
 8006a7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a82:	2280      	movs	r2, #128	; 0x80
 8006a84:	4013      	ands	r3, r2
 8006a86:	d00b      	beq.n	8006aa0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	4a0e      	ldr	r2, [pc, #56]	; (8006ac8 <UART_AdvFeatureConfig+0x164>)
 8006a90:	4013      	ands	r3, r2
 8006a92:	0019      	movs	r1, r3
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	430a      	orrs	r2, r1
 8006a9e:	605a      	str	r2, [r3, #4]
  }
}
 8006aa0:	46c0      	nop			; (mov r8, r8)
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	b002      	add	sp, #8
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	fffdffff 	.word	0xfffdffff
 8006aac:	fffeffff 	.word	0xfffeffff
 8006ab0:	fffbffff 	.word	0xfffbffff
 8006ab4:	ffff7fff 	.word	0xffff7fff
 8006ab8:	ffffefff 	.word	0xffffefff
 8006abc:	ffffdfff 	.word	0xffffdfff
 8006ac0:	ffefffff 	.word	0xffefffff
 8006ac4:	ff9fffff 	.word	0xff9fffff
 8006ac8:	fff7ffff 	.word	0xfff7ffff

08006acc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b086      	sub	sp, #24
 8006ad0:	af02      	add	r7, sp, #8
 8006ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2280      	movs	r2, #128	; 0x80
 8006ad8:	2100      	movs	r1, #0
 8006ada:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006adc:	f7fb f9b8 	bl	8001e50 <HAL_GetTick>
 8006ae0:	0003      	movs	r3, r0
 8006ae2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2208      	movs	r2, #8
 8006aec:	4013      	ands	r3, r2
 8006aee:	2b08      	cmp	r3, #8
 8006af0:	d10c      	bne.n	8006b0c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2280      	movs	r2, #128	; 0x80
 8006af6:	0391      	lsls	r1, r2, #14
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	4a17      	ldr	r2, [pc, #92]	; (8006b58 <UART_CheckIdleState+0x8c>)
 8006afc:	9200      	str	r2, [sp, #0]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f000 f82c 	bl	8006b5c <UART_WaitOnFlagUntilTimeout>
 8006b04:	1e03      	subs	r3, r0, #0
 8006b06:	d001      	beq.n	8006b0c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b08:	2303      	movs	r3, #3
 8006b0a:	e021      	b.n	8006b50 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2204      	movs	r2, #4
 8006b14:	4013      	ands	r3, r2
 8006b16:	2b04      	cmp	r3, #4
 8006b18:	d10c      	bne.n	8006b34 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2280      	movs	r2, #128	; 0x80
 8006b1e:	03d1      	lsls	r1, r2, #15
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	4a0d      	ldr	r2, [pc, #52]	; (8006b58 <UART_CheckIdleState+0x8c>)
 8006b24:	9200      	str	r2, [sp, #0]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f000 f818 	bl	8006b5c <UART_WaitOnFlagUntilTimeout>
 8006b2c:	1e03      	subs	r3, r0, #0
 8006b2e:	d001      	beq.n	8006b34 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b30:	2303      	movs	r3, #3
 8006b32:	e00d      	b.n	8006b50 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2220      	movs	r2, #32
 8006b38:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2220      	movs	r2, #32
 8006b3e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2274      	movs	r2, #116	; 0x74
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	0018      	movs	r0, r3
 8006b52:	46bd      	mov	sp, r7
 8006b54:	b004      	add	sp, #16
 8006b56:	bd80      	pop	{r7, pc}
 8006b58:	01ffffff 	.word	0x01ffffff

08006b5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b094      	sub	sp, #80	; 0x50
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	603b      	str	r3, [r7, #0]
 8006b68:	1dfb      	adds	r3, r7, #7
 8006b6a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b6c:	e0a3      	b.n	8006cb6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b70:	3301      	adds	r3, #1
 8006b72:	d100      	bne.n	8006b76 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006b74:	e09f      	b.n	8006cb6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b76:	f7fb f96b 	bl	8001e50 <HAL_GetTick>
 8006b7a:	0002      	movs	r2, r0
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d302      	bcc.n	8006b8c <UART_WaitOnFlagUntilTimeout+0x30>
 8006b86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d13d      	bne.n	8006c08 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b8c:	f3ef 8310 	mrs	r3, PRIMASK
 8006b90:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b94:	647b      	str	r3, [r7, #68]	; 0x44
 8006b96:	2301      	movs	r3, #1
 8006b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b9c:	f383 8810 	msr	PRIMASK, r3
}
 8006ba0:	46c0      	nop			; (mov r8, r8)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	494c      	ldr	r1, [pc, #304]	; (8006ce0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006bae:	400a      	ands	r2, r1
 8006bb0:	601a      	str	r2, [r3, #0]
 8006bb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bb4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb8:	f383 8810 	msr	PRIMASK, r3
}
 8006bbc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bbe:	f3ef 8310 	mrs	r3, PRIMASK
 8006bc2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bc6:	643b      	str	r3, [r7, #64]	; 0x40
 8006bc8:	2301      	movs	r3, #1
 8006bca:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bce:	f383 8810 	msr	PRIMASK, r3
}
 8006bd2:	46c0      	nop			; (mov r8, r8)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	689a      	ldr	r2, [r3, #8]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2101      	movs	r1, #1
 8006be0:	438a      	bics	r2, r1
 8006be2:	609a      	str	r2, [r3, #8]
 8006be4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006be6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bea:	f383 8810 	msr	PRIMASK, r3
}
 8006bee:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2220      	movs	r2, #32
 8006bf4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2220      	movs	r2, #32
 8006bfa:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2274      	movs	r2, #116	; 0x74
 8006c00:	2100      	movs	r1, #0
 8006c02:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006c04:	2303      	movs	r3, #3
 8006c06:	e067      	b.n	8006cd8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	2204      	movs	r2, #4
 8006c10:	4013      	ands	r3, r2
 8006c12:	d050      	beq.n	8006cb6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	69da      	ldr	r2, [r3, #28]
 8006c1a:	2380      	movs	r3, #128	; 0x80
 8006c1c:	011b      	lsls	r3, r3, #4
 8006c1e:	401a      	ands	r2, r3
 8006c20:	2380      	movs	r3, #128	; 0x80
 8006c22:	011b      	lsls	r3, r3, #4
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d146      	bne.n	8006cb6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2280      	movs	r2, #128	; 0x80
 8006c2e:	0112      	lsls	r2, r2, #4
 8006c30:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c32:	f3ef 8310 	mrs	r3, PRIMASK
 8006c36:	613b      	str	r3, [r7, #16]
  return(result);
 8006c38:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	f383 8810 	msr	PRIMASK, r3
}
 8006c46:	46c0      	nop			; (mov r8, r8)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4923      	ldr	r1, [pc, #140]	; (8006ce0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006c54:	400a      	ands	r2, r1
 8006c56:	601a      	str	r2, [r3, #0]
 8006c58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c5a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	f383 8810 	msr	PRIMASK, r3
}
 8006c62:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c64:	f3ef 8310 	mrs	r3, PRIMASK
 8006c68:	61fb      	str	r3, [r7, #28]
  return(result);
 8006c6a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c6e:	2301      	movs	r3, #1
 8006c70:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c72:	6a3b      	ldr	r3, [r7, #32]
 8006c74:	f383 8810 	msr	PRIMASK, r3
}
 8006c78:	46c0      	nop			; (mov r8, r8)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	689a      	ldr	r2, [r3, #8]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2101      	movs	r1, #1
 8006c86:	438a      	bics	r2, r1
 8006c88:	609a      	str	r2, [r3, #8]
 8006c8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c8c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c90:	f383 8810 	msr	PRIMASK, r3
}
 8006c94:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2220      	movs	r2, #32
 8006c9a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2220      	movs	r2, #32
 8006ca0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2280      	movs	r2, #128	; 0x80
 8006ca6:	2120      	movs	r1, #32
 8006ca8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2274      	movs	r2, #116	; 0x74
 8006cae:	2100      	movs	r1, #0
 8006cb0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006cb2:	2303      	movs	r3, #3
 8006cb4:	e010      	b.n	8006cd8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	69db      	ldr	r3, [r3, #28]
 8006cbc:	68ba      	ldr	r2, [r7, #8]
 8006cbe:	4013      	ands	r3, r2
 8006cc0:	68ba      	ldr	r2, [r7, #8]
 8006cc2:	1ad3      	subs	r3, r2, r3
 8006cc4:	425a      	negs	r2, r3
 8006cc6:	4153      	adcs	r3, r2
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	001a      	movs	r2, r3
 8006ccc:	1dfb      	adds	r3, r7, #7
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d100      	bne.n	8006cd6 <UART_WaitOnFlagUntilTimeout+0x17a>
 8006cd4:	e74b      	b.n	8006b6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	0018      	movs	r0, r3
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	b014      	add	sp, #80	; 0x50
 8006cde:	bd80      	pop	{r7, pc}
 8006ce0:	fffffe5f 	.word	0xfffffe5f

08006ce4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b08c      	sub	sp, #48	; 0x30
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	1dbb      	adds	r3, r7, #6
 8006cf0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	68ba      	ldr	r2, [r7, #8]
 8006cf6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	1dba      	adds	r2, r7, #6
 8006cfc:	2158      	movs	r1, #88	; 0x58
 8006cfe:	8812      	ldrh	r2, [r2, #0]
 8006d00:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	1dba      	adds	r2, r7, #6
 8006d06:	215a      	movs	r1, #90	; 0x5a
 8006d08:	8812      	ldrh	r2, [r2, #0]
 8006d0a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	689a      	ldr	r2, [r3, #8]
 8006d16:	2380      	movs	r3, #128	; 0x80
 8006d18:	015b      	lsls	r3, r3, #5
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d10d      	bne.n	8006d3a <UART_Start_Receive_IT+0x56>
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	691b      	ldr	r3, [r3, #16]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d104      	bne.n	8006d30 <UART_Start_Receive_IT+0x4c>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	225c      	movs	r2, #92	; 0x5c
 8006d2a:	4939      	ldr	r1, [pc, #228]	; (8006e10 <UART_Start_Receive_IT+0x12c>)
 8006d2c:	5299      	strh	r1, [r3, r2]
 8006d2e:	e01a      	b.n	8006d66 <UART_Start_Receive_IT+0x82>
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	225c      	movs	r2, #92	; 0x5c
 8006d34:	21ff      	movs	r1, #255	; 0xff
 8006d36:	5299      	strh	r1, [r3, r2]
 8006d38:	e015      	b.n	8006d66 <UART_Start_Receive_IT+0x82>
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d10d      	bne.n	8006d5e <UART_Start_Receive_IT+0x7a>
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d104      	bne.n	8006d54 <UART_Start_Receive_IT+0x70>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	225c      	movs	r2, #92	; 0x5c
 8006d4e:	21ff      	movs	r1, #255	; 0xff
 8006d50:	5299      	strh	r1, [r3, r2]
 8006d52:	e008      	b.n	8006d66 <UART_Start_Receive_IT+0x82>
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	225c      	movs	r2, #92	; 0x5c
 8006d58:	217f      	movs	r1, #127	; 0x7f
 8006d5a:	5299      	strh	r1, [r3, r2]
 8006d5c:	e003      	b.n	8006d66 <UART_Start_Receive_IT+0x82>
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	225c      	movs	r2, #92	; 0x5c
 8006d62:	2100      	movs	r1, #0
 8006d64:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2280      	movs	r2, #128	; 0x80
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2222      	movs	r2, #34	; 0x22
 8006d72:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d74:	f3ef 8310 	mrs	r3, PRIMASK
 8006d78:	61fb      	str	r3, [r7, #28]
  return(result);
 8006d7a:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d7e:	2301      	movs	r3, #1
 8006d80:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d82:	6a3b      	ldr	r3, [r7, #32]
 8006d84:	f383 8810 	msr	PRIMASK, r3
}
 8006d88:	46c0      	nop			; (mov r8, r8)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	689a      	ldr	r2, [r3, #8]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	2101      	movs	r1, #1
 8006d96:	430a      	orrs	r2, r1
 8006d98:	609a      	str	r2, [r3, #8]
 8006d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d9c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da0:	f383 8810 	msr	PRIMASK, r3
}
 8006da4:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	689a      	ldr	r2, [r3, #8]
 8006daa:	2380      	movs	r3, #128	; 0x80
 8006dac:	015b      	lsls	r3, r3, #5
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d107      	bne.n	8006dc2 <UART_Start_Receive_IT+0xde>
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d103      	bne.n	8006dc2 <UART_Start_Receive_IT+0xde>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	4a15      	ldr	r2, [pc, #84]	; (8006e14 <UART_Start_Receive_IT+0x130>)
 8006dbe:	665a      	str	r2, [r3, #100]	; 0x64
 8006dc0:	e002      	b.n	8006dc8 <UART_Start_Receive_IT+0xe4>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	4a14      	ldr	r2, [pc, #80]	; (8006e18 <UART_Start_Receive_IT+0x134>)
 8006dc6:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2274      	movs	r2, #116	; 0x74
 8006dcc:	2100      	movs	r1, #0
 8006dce:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dd0:	f3ef 8310 	mrs	r3, PRIMASK
 8006dd4:	613b      	str	r3, [r7, #16]
  return(result);
 8006dd6:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006dd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dda:	2301      	movs	r3, #1
 8006ddc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	f383 8810 	msr	PRIMASK, r3
}
 8006de4:	46c0      	nop			; (mov r8, r8)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2190      	movs	r1, #144	; 0x90
 8006df2:	0049      	lsls	r1, r1, #1
 8006df4:	430a      	orrs	r2, r1
 8006df6:	601a      	str	r2, [r3, #0]
 8006df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	f383 8810 	msr	PRIMASK, r3
}
 8006e02:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	0018      	movs	r0, r3
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	b00c      	add	sp, #48	; 0x30
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	46c0      	nop			; (mov r8, r8)
 8006e10:	000001ff 	.word	0x000001ff
 8006e14:	080070cd 	.word	0x080070cd
 8006e18:	08006f65 	.word	0x08006f65

08006e1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b08e      	sub	sp, #56	; 0x38
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e24:	f3ef 8310 	mrs	r3, PRIMASK
 8006e28:	617b      	str	r3, [r7, #20]
  return(result);
 8006e2a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e2c:	637b      	str	r3, [r7, #52]	; 0x34
 8006e2e:	2301      	movs	r3, #1
 8006e30:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	f383 8810 	msr	PRIMASK, r3
}
 8006e38:	46c0      	nop			; (mov r8, r8)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4925      	ldr	r1, [pc, #148]	; (8006edc <UART_EndRxTransfer+0xc0>)
 8006e46:	400a      	ands	r2, r1
 8006e48:	601a      	str	r2, [r3, #0]
 8006e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e4c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	f383 8810 	msr	PRIMASK, r3
}
 8006e54:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e56:	f3ef 8310 	mrs	r3, PRIMASK
 8006e5a:	623b      	str	r3, [r7, #32]
  return(result);
 8006e5c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e5e:	633b      	str	r3, [r7, #48]	; 0x30
 8006e60:	2301      	movs	r3, #1
 8006e62:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e66:	f383 8810 	msr	PRIMASK, r3
}
 8006e6a:	46c0      	nop			; (mov r8, r8)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	689a      	ldr	r2, [r3, #8]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2101      	movs	r1, #1
 8006e78:	438a      	bics	r2, r1
 8006e7a:	609a      	str	r2, [r3, #8]
 8006e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e7e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e82:	f383 8810 	msr	PRIMASK, r3
}
 8006e86:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d118      	bne.n	8006ec2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e90:	f3ef 8310 	mrs	r3, PRIMASK
 8006e94:	60bb      	str	r3, [r7, #8]
  return(result);
 8006e96:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f383 8810 	msr	PRIMASK, r3
}
 8006ea4:	46c0      	nop			; (mov r8, r8)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2110      	movs	r1, #16
 8006eb2:	438a      	bics	r2, r1
 8006eb4:	601a      	str	r2, [r3, #0]
 8006eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	f383 8810 	msr	PRIMASK, r3
}
 8006ec0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2220      	movs	r2, #32
 8006ec6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006ed4:	46c0      	nop			; (mov r8, r8)
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	b00e      	add	sp, #56	; 0x38
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	fffffedf 	.word	0xfffffedf

08006ee0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	225a      	movs	r2, #90	; 0x5a
 8006ef2:	2100      	movs	r1, #0
 8006ef4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2252      	movs	r2, #82	; 0x52
 8006efa:	2100      	movs	r1, #0
 8006efc:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	0018      	movs	r0, r3
 8006f02:	f7ff fbdb 	bl	80066bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f06:	46c0      	nop			; (mov r8, r8)
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	b004      	add	sp, #16
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b086      	sub	sp, #24
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f16:	f3ef 8310 	mrs	r3, PRIMASK
 8006f1a:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f1c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f1e:	617b      	str	r3, [r7, #20]
 8006f20:	2301      	movs	r3, #1
 8006f22:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f383 8810 	msr	PRIMASK, r3
}
 8006f2a:	46c0      	nop			; (mov r8, r8)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2140      	movs	r1, #64	; 0x40
 8006f38:	438a      	bics	r2, r1
 8006f3a:	601a      	str	r2, [r3, #0]
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	f383 8810 	msr	PRIMASK, r3
}
 8006f46:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2220      	movs	r2, #32
 8006f4c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	0018      	movs	r0, r3
 8006f58:	f7ff fba8 	bl	80066ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f5c:	46c0      	nop			; (mov r8, r8)
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	b006      	add	sp, #24
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b090      	sub	sp, #64	; 0x40
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006f6c:	203e      	movs	r0, #62	; 0x3e
 8006f6e:	183b      	adds	r3, r7, r0
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	215c      	movs	r1, #92	; 0x5c
 8006f74:	5a52      	ldrh	r2, [r2, r1]
 8006f76:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f7c:	2b22      	cmp	r3, #34	; 0x22
 8006f7e:	d000      	beq.n	8006f82 <UART_RxISR_8BIT+0x1e>
 8006f80:	e095      	b.n	80070ae <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	213c      	movs	r1, #60	; 0x3c
 8006f88:	187b      	adds	r3, r7, r1
 8006f8a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8006f8c:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006f8e:	187b      	adds	r3, r7, r1
 8006f90:	881b      	ldrh	r3, [r3, #0]
 8006f92:	b2da      	uxtb	r2, r3
 8006f94:	183b      	adds	r3, r7, r0
 8006f96:	881b      	ldrh	r3, [r3, #0]
 8006f98:	b2d9      	uxtb	r1, r3
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f9e:	400a      	ands	r2, r1
 8006fa0:	b2d2      	uxtb	r2, r2
 8006fa2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fa8:	1c5a      	adds	r2, r3, #1
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	225a      	movs	r2, #90	; 0x5a
 8006fb2:	5a9b      	ldrh	r3, [r3, r2]
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	3b01      	subs	r3, #1
 8006fb8:	b299      	uxth	r1, r3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	225a      	movs	r2, #90	; 0x5a
 8006fbe:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	225a      	movs	r2, #90	; 0x5a
 8006fc4:	5a9b      	ldrh	r3, [r3, r2]
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d178      	bne.n	80070be <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fcc:	f3ef 8310 	mrs	r3, PRIMASK
 8006fd0:	61bb      	str	r3, [r7, #24]
  return(result);
 8006fd2:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	f383 8810 	msr	PRIMASK, r3
}
 8006fe0:	46c0      	nop			; (mov r8, r8)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4936      	ldr	r1, [pc, #216]	; (80070c8 <UART_RxISR_8BIT+0x164>)
 8006fee:	400a      	ands	r2, r1
 8006ff0:	601a      	str	r2, [r3, #0]
 8006ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ff6:	6a3b      	ldr	r3, [r7, #32]
 8006ff8:	f383 8810 	msr	PRIMASK, r3
}
 8006ffc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ffe:	f3ef 8310 	mrs	r3, PRIMASK
 8007002:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007004:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007006:	637b      	str	r3, [r7, #52]	; 0x34
 8007008:	2301      	movs	r3, #1
 800700a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800700c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800700e:	f383 8810 	msr	PRIMASK, r3
}
 8007012:	46c0      	nop			; (mov r8, r8)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	689a      	ldr	r2, [r3, #8]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2101      	movs	r1, #1
 8007020:	438a      	bics	r2, r1
 8007022:	609a      	str	r2, [r3, #8]
 8007024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007026:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800702a:	f383 8810 	msr	PRIMASK, r3
}
 800702e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2220      	movs	r2, #32
 8007034:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007040:	2b01      	cmp	r3, #1
 8007042:	d12f      	bne.n	80070a4 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800704a:	f3ef 8310 	mrs	r3, PRIMASK
 800704e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007050:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007052:	633b      	str	r3, [r7, #48]	; 0x30
 8007054:	2301      	movs	r3, #1
 8007056:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	f383 8810 	msr	PRIMASK, r3
}
 800705e:	46c0      	nop			; (mov r8, r8)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2110      	movs	r1, #16
 800706c:	438a      	bics	r2, r1
 800706e:	601a      	str	r2, [r3, #0]
 8007070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007072:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	f383 8810 	msr	PRIMASK, r3
}
 800707a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	69db      	ldr	r3, [r3, #28]
 8007082:	2210      	movs	r2, #16
 8007084:	4013      	ands	r3, r2
 8007086:	2b10      	cmp	r3, #16
 8007088:	d103      	bne.n	8007092 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2210      	movs	r2, #16
 8007090:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2258      	movs	r2, #88	; 0x58
 8007096:	5a9a      	ldrh	r2, [r3, r2]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	0011      	movs	r1, r2
 800709c:	0018      	movs	r0, r3
 800709e:	f7ff fb15 	bl	80066cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80070a2:	e00c      	b.n	80070be <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	0018      	movs	r0, r3
 80070a8:	f7f9 fcc6 	bl	8000a38 <HAL_UART_RxCpltCallback>
}
 80070ac:	e007      	b.n	80070be <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	699a      	ldr	r2, [r3, #24]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	2108      	movs	r1, #8
 80070ba:	430a      	orrs	r2, r1
 80070bc:	619a      	str	r2, [r3, #24]
}
 80070be:	46c0      	nop			; (mov r8, r8)
 80070c0:	46bd      	mov	sp, r7
 80070c2:	b010      	add	sp, #64	; 0x40
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	46c0      	nop			; (mov r8, r8)
 80070c8:	fffffedf 	.word	0xfffffedf

080070cc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b090      	sub	sp, #64	; 0x40
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80070d4:	203e      	movs	r0, #62	; 0x3e
 80070d6:	183b      	adds	r3, r7, r0
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	215c      	movs	r1, #92	; 0x5c
 80070dc:	5a52      	ldrh	r2, [r2, r1]
 80070de:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070e4:	2b22      	cmp	r3, #34	; 0x22
 80070e6:	d000      	beq.n	80070ea <UART_RxISR_16BIT+0x1e>
 80070e8:	e095      	b.n	8007216 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	213c      	movs	r1, #60	; 0x3c
 80070f0:	187b      	adds	r3, r7, r1
 80070f2:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80070f4:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070fa:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80070fc:	187b      	adds	r3, r7, r1
 80070fe:	183a      	adds	r2, r7, r0
 8007100:	881b      	ldrh	r3, [r3, #0]
 8007102:	8812      	ldrh	r2, [r2, #0]
 8007104:	4013      	ands	r3, r2
 8007106:	b29a      	uxth	r2, r3
 8007108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800710a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007110:	1c9a      	adds	r2, r3, #2
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	225a      	movs	r2, #90	; 0x5a
 800711a:	5a9b      	ldrh	r3, [r3, r2]
 800711c:	b29b      	uxth	r3, r3
 800711e:	3b01      	subs	r3, #1
 8007120:	b299      	uxth	r1, r3
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	225a      	movs	r2, #90	; 0x5a
 8007126:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	225a      	movs	r2, #90	; 0x5a
 800712c:	5a9b      	ldrh	r3, [r3, r2]
 800712e:	b29b      	uxth	r3, r3
 8007130:	2b00      	cmp	r3, #0
 8007132:	d178      	bne.n	8007226 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007134:	f3ef 8310 	mrs	r3, PRIMASK
 8007138:	617b      	str	r3, [r7, #20]
  return(result);
 800713a:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800713c:	637b      	str	r3, [r7, #52]	; 0x34
 800713e:	2301      	movs	r3, #1
 8007140:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	f383 8810 	msr	PRIMASK, r3
}
 8007148:	46c0      	nop			; (mov r8, r8)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4936      	ldr	r1, [pc, #216]	; (8007230 <UART_RxISR_16BIT+0x164>)
 8007156:	400a      	ands	r2, r1
 8007158:	601a      	str	r2, [r3, #0]
 800715a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800715c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	f383 8810 	msr	PRIMASK, r3
}
 8007164:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007166:	f3ef 8310 	mrs	r3, PRIMASK
 800716a:	623b      	str	r3, [r7, #32]
  return(result);
 800716c:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800716e:	633b      	str	r3, [r7, #48]	; 0x30
 8007170:	2301      	movs	r3, #1
 8007172:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007176:	f383 8810 	msr	PRIMASK, r3
}
 800717a:	46c0      	nop			; (mov r8, r8)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	689a      	ldr	r2, [r3, #8]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	2101      	movs	r1, #1
 8007188:	438a      	bics	r2, r1
 800718a:	609a      	str	r2, [r3, #8]
 800718c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007192:	f383 8810 	msr	PRIMASK, r3
}
 8007196:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2220      	movs	r2, #32
 800719c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d12f      	bne.n	800720c <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071b2:	f3ef 8310 	mrs	r3, PRIMASK
 80071b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80071b8:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071bc:	2301      	movs	r3, #1
 80071be:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f383 8810 	msr	PRIMASK, r3
}
 80071c6:	46c0      	nop			; (mov r8, r8)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	2110      	movs	r1, #16
 80071d4:	438a      	bics	r2, r1
 80071d6:	601a      	str	r2, [r3, #0]
 80071d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	f383 8810 	msr	PRIMASK, r3
}
 80071e2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	69db      	ldr	r3, [r3, #28]
 80071ea:	2210      	movs	r2, #16
 80071ec:	4013      	ands	r3, r2
 80071ee:	2b10      	cmp	r3, #16
 80071f0:	d103      	bne.n	80071fa <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	2210      	movs	r2, #16
 80071f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2258      	movs	r2, #88	; 0x58
 80071fe:	5a9a      	ldrh	r2, [r3, r2]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	0011      	movs	r1, r2
 8007204:	0018      	movs	r0, r3
 8007206:	f7ff fa61 	bl	80066cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800720a:	e00c      	b.n	8007226 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	0018      	movs	r0, r3
 8007210:	f7f9 fc12 	bl	8000a38 <HAL_UART_RxCpltCallback>
}
 8007214:	e007      	b.n	8007226 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	699a      	ldr	r2, [r3, #24]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	2108      	movs	r1, #8
 8007222:	430a      	orrs	r2, r1
 8007224:	619a      	str	r2, [r3, #24]
}
 8007226:	46c0      	nop			; (mov r8, r8)
 8007228:	46bd      	mov	sp, r7
 800722a:	b010      	add	sp, #64	; 0x40
 800722c:	bd80      	pop	{r7, pc}
 800722e:	46c0      	nop			; (mov r8, r8)
 8007230:	fffffedf 	.word	0xfffffedf

08007234 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800723c:	46c0      	nop			; (mov r8, r8)
 800723e:	46bd      	mov	sp, r7
 8007240:	b002      	add	sp, #8
 8007242:	bd80      	pop	{r7, pc}

08007244 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b088      	sub	sp, #32
 8007248:	af02      	add	r7, sp, #8
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	1d3b      	adds	r3, r7, #4
 800724e:	6019      	str	r1, [r3, #0]
 8007250:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007252:	2317      	movs	r3, #23
 8007254:	18fb      	adds	r3, r7, r3
 8007256:	2200      	movs	r2, #0
 8007258:	701a      	strb	r2, [r3, #0]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2274      	movs	r2, #116	; 0x74
 800725e:	5c9b      	ldrb	r3, [r3, r2]
 8007260:	2b01      	cmp	r3, #1
 8007262:	d101      	bne.n	8007268 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x24>
 8007264:	2302      	movs	r3, #2
 8007266:	e04a      	b.n	80072fe <HAL_UARTEx_StopModeWakeUpSourceConfig+0xba>
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2274      	movs	r2, #116	; 0x74
 800726c:	2101      	movs	r1, #1
 800726e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2224      	movs	r2, #36	; 0x24
 8007274:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2101      	movs	r1, #1
 8007282:	438a      	bics	r2, r1
 8007284:	601a      	str	r2, [r3, #0]

#if defined(USART_CR3_WUS)
  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	4a1e      	ldr	r2, [pc, #120]	; (8007308 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc4>)
 800728e:	4013      	ands	r3, r2
 8007290:	0019      	movs	r1, r3
 8007292:	1d3b      	adds	r3, r7, #4
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	430a      	orrs	r2, r1
 800729c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_WUS */

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800729e:	1d3b      	adds	r3, r7, #4
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d105      	bne.n	80072b2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x6e>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 80072a6:	1d3b      	adds	r3, r7, #4
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	6819      	ldr	r1, [r3, #0]
 80072ac:	685a      	ldr	r2, [r3, #4]
 80072ae:	f000 f860 	bl	8007372 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	2101      	movs	r1, #1
 80072be:	430a      	orrs	r2, r1
 80072c0:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80072c2:	f7fa fdc5 	bl	8001e50 <HAL_GetTick>
 80072c6:	0003      	movs	r3, r0
 80072c8:	613b      	str	r3, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	2280      	movs	r2, #128	; 0x80
 80072ce:	03d1      	lsls	r1, r2, #15
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	4a0e      	ldr	r2, [pc, #56]	; (800730c <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc8>)
 80072d4:	9200      	str	r2, [sp, #0]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f7ff fc40 	bl	8006b5c <UART_WaitOnFlagUntilTimeout>
 80072dc:	1e03      	subs	r3, r0, #0
 80072de:	d004      	beq.n	80072ea <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa6>
  {
    status = HAL_TIMEOUT;
 80072e0:	2317      	movs	r3, #23
 80072e2:	18fb      	adds	r3, r7, r3
 80072e4:	2203      	movs	r2, #3
 80072e6:	701a      	strb	r2, [r3, #0]
 80072e8:	e002      	b.n	80072f0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xac>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2220      	movs	r2, #32
 80072ee:	679a      	str	r2, [r3, #120]	; 0x78
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2274      	movs	r2, #116	; 0x74
 80072f4:	2100      	movs	r1, #0
 80072f6:	5499      	strb	r1, [r3, r2]

  return status;
 80072f8:	2317      	movs	r3, #23
 80072fa:	18fb      	adds	r3, r7, r3
 80072fc:	781b      	ldrb	r3, [r3, #0]
}
 80072fe:	0018      	movs	r0, r3
 8007300:	46bd      	mov	sp, r7
 8007302:	b006      	add	sp, #24
 8007304:	bd80      	pop	{r7, pc}
 8007306:	46c0      	nop			; (mov r8, r8)
 8007308:	ffcfffff 	.word	0xffcfffff
 800730c:	01ffffff 	.word	0x01ffffff

08007310 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b086      	sub	sp, #24
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2274      	movs	r2, #116	; 0x74
 800731c:	5c9b      	ldrb	r3, [r3, r2]
 800731e:	2b01      	cmp	r3, #1
 8007320:	d101      	bne.n	8007326 <HAL_UARTEx_EnableStopMode+0x16>
 8007322:	2302      	movs	r3, #2
 8007324:	e021      	b.n	800736a <HAL_UARTEx_EnableStopMode+0x5a>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2274      	movs	r2, #116	; 0x74
 800732a:	2101      	movs	r1, #1
 800732c:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800732e:	f3ef 8310 	mrs	r3, PRIMASK
 8007332:	60bb      	str	r3, [r7, #8]
  return(result);
 8007334:	68bb      	ldr	r3, [r7, #8]

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8007336:	617b      	str	r3, [r7, #20]
 8007338:	2301      	movs	r3, #1
 800733a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f383 8810 	msr	PRIMASK, r3
}
 8007342:	46c0      	nop			; (mov r8, r8)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2102      	movs	r1, #2
 8007350:	430a      	orrs	r2, r1
 8007352:	601a      	str	r2, [r3, #0]
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	f383 8810 	msr	PRIMASK, r3
}
 800735e:	46c0      	nop			; (mov r8, r8)

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2274      	movs	r2, #116	; 0x74
 8007364:	2100      	movs	r1, #0
 8007366:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007368:	2300      	movs	r3, #0
}
 800736a:	0018      	movs	r0, r3
 800736c:	46bd      	mov	sp, r7
 800736e:	b006      	add	sp, #24
 8007370:	bd80      	pop	{r7, pc}

08007372 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8007372:	b580      	push	{r7, lr}
 8007374:	b084      	sub	sp, #16
 8007376:	af00      	add	r7, sp, #0
 8007378:	60f8      	str	r0, [r7, #12]
 800737a:	1d3b      	adds	r3, r7, #4
 800737c:	6019      	str	r1, [r3, #0]
 800737e:	605a      	str	r2, [r3, #4]
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	2210      	movs	r2, #16
 8007388:	4393      	bics	r3, r2
 800738a:	001a      	movs	r2, r3
 800738c:	1d3b      	adds	r3, r7, #4
 800738e:	889b      	ldrh	r3, [r3, #4]
 8007390:	0019      	movs	r1, r3
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	430a      	orrs	r2, r1
 8007398:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	021b      	lsls	r3, r3, #8
 80073a2:	0a19      	lsrs	r1, r3, #8
 80073a4:	1d3b      	adds	r3, r7, #4
 80073a6:	799b      	ldrb	r3, [r3, #6]
 80073a8:	061a      	lsls	r2, r3, #24
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	430a      	orrs	r2, r1
 80073b0:	605a      	str	r2, [r3, #4]
}
 80073b2:	46c0      	nop			; (mov r8, r8)
 80073b4:	46bd      	mov	sp, r7
 80073b6:	b004      	add	sp, #16
 80073b8:	bd80      	pop	{r7, pc}
	...

080073bc <__libc_init_array>:
 80073bc:	b570      	push	{r4, r5, r6, lr}
 80073be:	2600      	movs	r6, #0
 80073c0:	4d0c      	ldr	r5, [pc, #48]	; (80073f4 <__libc_init_array+0x38>)
 80073c2:	4c0d      	ldr	r4, [pc, #52]	; (80073f8 <__libc_init_array+0x3c>)
 80073c4:	1b64      	subs	r4, r4, r5
 80073c6:	10a4      	asrs	r4, r4, #2
 80073c8:	42a6      	cmp	r6, r4
 80073ca:	d109      	bne.n	80073e0 <__libc_init_array+0x24>
 80073cc:	2600      	movs	r6, #0
 80073ce:	f000 f821 	bl	8007414 <_init>
 80073d2:	4d0a      	ldr	r5, [pc, #40]	; (80073fc <__libc_init_array+0x40>)
 80073d4:	4c0a      	ldr	r4, [pc, #40]	; (8007400 <__libc_init_array+0x44>)
 80073d6:	1b64      	subs	r4, r4, r5
 80073d8:	10a4      	asrs	r4, r4, #2
 80073da:	42a6      	cmp	r6, r4
 80073dc:	d105      	bne.n	80073ea <__libc_init_array+0x2e>
 80073de:	bd70      	pop	{r4, r5, r6, pc}
 80073e0:	00b3      	lsls	r3, r6, #2
 80073e2:	58eb      	ldr	r3, [r5, r3]
 80073e4:	4798      	blx	r3
 80073e6:	3601      	adds	r6, #1
 80073e8:	e7ee      	b.n	80073c8 <__libc_init_array+0xc>
 80073ea:	00b3      	lsls	r3, r6, #2
 80073ec:	58eb      	ldr	r3, [r5, r3]
 80073ee:	4798      	blx	r3
 80073f0:	3601      	adds	r6, #1
 80073f2:	e7f2      	b.n	80073da <__libc_init_array+0x1e>
 80073f4:	080074f4 	.word	0x080074f4
 80073f8:	080074f4 	.word	0x080074f4
 80073fc:	080074f4 	.word	0x080074f4
 8007400:	080074f8 	.word	0x080074f8

08007404 <memset>:
 8007404:	0003      	movs	r3, r0
 8007406:	1882      	adds	r2, r0, r2
 8007408:	4293      	cmp	r3, r2
 800740a:	d100      	bne.n	800740e <memset+0xa>
 800740c:	4770      	bx	lr
 800740e:	7019      	strb	r1, [r3, #0]
 8007410:	3301      	adds	r3, #1
 8007412:	e7f9      	b.n	8007408 <memset+0x4>

08007414 <_init>:
 8007414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007416:	46c0      	nop			; (mov r8, r8)
 8007418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800741a:	bc08      	pop	{r3}
 800741c:	469e      	mov	lr, r3
 800741e:	4770      	bx	lr

08007420 <_fini>:
 8007420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007422:	46c0      	nop			; (mov r8, r8)
 8007424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007426:	bc08      	pop	{r3}
 8007428:	469e      	mov	lr, r3
 800742a:	4770      	bx	lr
