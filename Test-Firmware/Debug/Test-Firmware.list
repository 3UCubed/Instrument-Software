
Test-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078d4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08007994  08007994  00017994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a80  08007a80  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  08007a80  08007a80  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007a80  08007a80  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a80  08007a80  00017a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a84  08007a84  00017a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08007a88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ac  20000098  08007b20  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000444  08007b20  00020444  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001669c  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d74  00000000  00000000  0003675c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001448  00000000  00000000  000394d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001310  00000000  00000000  0003a918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001413c  00000000  00000000  0003bc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018df2  00000000  00000000  0004fd64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007834d  00000000  00000000  00068b56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e0ea3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bec  00000000  00000000  000e0ef4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000098 	.word	0x20000098
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800797c 	.word	0x0800797c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000009c 	.word	0x2000009c
 8000104:	0800797c 	.word	0x0800797c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000224:	f3bf 8f4f 	dsb	sy
}
 8000228:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800022a:	4b04      	ldr	r3, [pc, #16]	; (800023c <__NVIC_SystemReset+0x1c>)
 800022c:	4a04      	ldr	r2, [pc, #16]	; (8000240 <__NVIC_SystemReset+0x20>)
 800022e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000230:	f3bf 8f4f 	dsb	sy
}
 8000234:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000236:	46c0      	nop			; (mov r8, r8)
 8000238:	e7fd      	b.n	8000236 <__NVIC_SystemReset+0x16>
 800023a:	46c0      	nop			; (mov r8, r8)
 800023c:	e000ed00 	.word	0xe000ed00
 8000240:	05fa0004 	.word	0x05fa0004

08000244 <poll_i2c_sensor>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8000244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000246:	b087      	sub	sp, #28
 8000248:	af02      	add	r7, sp, #8
 800024a:	0002      	movs	r2, r0
 800024c:	1dfb      	adds	r3, r7, #7
 800024e:	701a      	strb	r2, [r3, #0]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 8000250:	2200      	movs	r2, #0
 8000252:	2508      	movs	r5, #8
 8000254:	197b      	adds	r3, r7, r5
 8000256:	701a      	strb	r2, [r3, #0]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1,
 8000258:	1dfb      	adds	r3, r7, #7
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	b299      	uxth	r1, r3
 800025e:	260d      	movs	r6, #13
 8000260:	19bc      	adds	r4, r7, r6
 8000262:	197a      	adds	r2, r7, r5
 8000264:	4825      	ldr	r0, [pc, #148]	; (80002fc <poll_i2c_sensor+0xb8>)
 8000266:	23fa      	movs	r3, #250	; 0xfa
 8000268:	009b      	lsls	r3, r3, #2
 800026a:	9300      	str	r3, [sp, #0]
 800026c:	2301      	movs	r3, #1
 800026e:	f003 f895 	bl	800339c <HAL_I2C_Master_Transmit>
 8000272:	0003      	movs	r3, r0
 8000274:	7023      	strb	r3, [r4, #0]
				1000);
	if (ret != HAL_OK)
 8000276:	19bb      	adds	r3, r7, r6
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	2b00      	cmp	r3, #0
 800027c:	d008      	beq.n	8000290 <poll_i2c_sensor+0x4c>
	{
		strcpy((char *)buf, "Error Tx\r\n");
 800027e:	197b      	adds	r3, r7, r5
 8000280:	4a1f      	ldr	r2, [pc, #124]	; (8000300 <poll_i2c_sensor+0xbc>)
 8000282:	ca03      	ldmia	r2!, {r0, r1}
 8000284:	c303      	stmia	r3!, {r0, r1}
 8000286:	8811      	ldrh	r1, [r2, #0]
 8000288:	8019      	strh	r1, [r3, #0]
 800028a:	7892      	ldrb	r2, [r2, #2]
 800028c:	709a      	strb	r2, [r3, #2]
 800028e:	e02c      	b.n	80002ea <poll_i2c_sensor+0xa6>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2,
 8000290:	1dfb      	adds	r3, r7, #7
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	b299      	uxth	r1, r3
 8000296:	250d      	movs	r5, #13
 8000298:	197c      	adds	r4, r7, r5
 800029a:	2608      	movs	r6, #8
 800029c:	19ba      	adds	r2, r7, r6
 800029e:	4817      	ldr	r0, [pc, #92]	; (80002fc <poll_i2c_sensor+0xb8>)
 80002a0:	23fa      	movs	r3, #250	; 0xfa
 80002a2:	009b      	lsls	r3, r3, #2
 80002a4:	9300      	str	r3, [sp, #0]
 80002a6:	2302      	movs	r3, #2
 80002a8:	f003 f980 	bl	80035ac <HAL_I2C_Master_Receive>
 80002ac:	0003      	movs	r3, r0
 80002ae:	7023      	strb	r3, [r4, #0]
			1000);
		if (ret != HAL_OK)
 80002b0:	197b      	adds	r3, r7, r5
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d008      	beq.n	80002ca <poll_i2c_sensor+0x86>
		{
			strcpy((char *)buf, "Error Rx\r\n");
 80002b8:	19bb      	adds	r3, r7, r6
 80002ba:	4a12      	ldr	r2, [pc, #72]	; (8000304 <poll_i2c_sensor+0xc0>)
 80002bc:	ca03      	ldmia	r2!, {r0, r1}
 80002be:	c303      	stmia	r3!, {r0, r1}
 80002c0:	8811      	ldrh	r1, [r2, #0]
 80002c2:	8019      	strh	r1, [r3, #0]
 80002c4:	7892      	ldrb	r2, [r2, #2]
 80002c6:	709a      	strb	r2, [r3, #2]
 80002c8:	e00f      	b.n	80002ea <poll_i2c_sensor+0xa6>
		} else {
			output = (int16_t)(buf[0] << 8);
 80002ca:	2008      	movs	r0, #8
 80002cc:	183b      	adds	r3, r7, r0
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	021a      	lsls	r2, r3, #8
 80002d2:	210e      	movs	r1, #14
 80002d4:	187b      	adds	r3, r7, r1
 80002d6:	801a      	strh	r2, [r3, #0]
			output = (output | buf[1]) >> 3;
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	2200      	movs	r2, #0
 80002dc:	5e9b      	ldrsh	r3, [r3, r2]
 80002de:	183a      	adds	r2, r7, r0
 80002e0:	7852      	ldrb	r2, [r2, #1]
 80002e2:	4313      	orrs	r3, r2
 80002e4:	10da      	asrs	r2, r3, #3
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	801a      	strh	r2, [r3, #0]
		}
	}
	return output;
 80002ea:	230e      	movs	r3, #14
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	2200      	movs	r2, #0
 80002f0:	5e9b      	ldrsh	r3, [r3, r2]
}
 80002f2:	0018      	movs	r0, r3
 80002f4:	46bd      	mov	sp, r7
 80002f6:	b005      	add	sp, #20
 80002f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fa:	46c0      	nop			; (mov r8, r8)
 80002fc:	2000014c 	.word	0x2000014c
 8000300:	08007994 	.word	0x08007994
 8000304:	080079a0 	.word	0x080079a0

08000308 <i2c>:


int16_t* i2c() {
 8000308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800030a:	b085      	sub	sp, #20
 800030c:	af00      	add	r7, sp, #0
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 800030e:	2390      	movs	r3, #144	; 0x90
 8000310:	250e      	movs	r5, #14
 8000312:	197c      	adds	r4, r7, r5
 8000314:	0018      	movs	r0, r3
 8000316:	f7ff ff95 	bl	8000244 <poll_i2c_sensor>
 800031a:	0003      	movs	r3, r0
 800031c:	8023      	strh	r3, [r4, #0]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 800031e:	2394      	movs	r3, #148	; 0x94
 8000320:	260c      	movs	r6, #12
 8000322:	19bc      	adds	r4, r7, r6
 8000324:	0018      	movs	r0, r3
 8000326:	f7ff ff8d 	bl	8000244 <poll_i2c_sensor>
 800032a:	0003      	movs	r3, r0
 800032c:	8023      	strh	r3, [r4, #0]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 800032e:	2392      	movs	r3, #146	; 0x92
 8000330:	220a      	movs	r2, #10
 8000332:	18bc      	adds	r4, r7, r2
 8000334:	0018      	movs	r0, r3
 8000336:	f7ff ff85 	bl	8000244 <poll_i2c_sensor>
 800033a:	0003      	movs	r3, r0
 800033c:	8023      	strh	r3, [r4, #0]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 800033e:	2396      	movs	r3, #150	; 0x96
 8000340:	2108      	movs	r1, #8
 8000342:	187c      	adds	r4, r7, r1
 8000344:	0018      	movs	r0, r3
 8000346:	f7ff ff7d 	bl	8000244 <poll_i2c_sensor>
 800034a:	0003      	movs	r3, r0
 800034c:	8023      	strh	r3, [r4, #0]

	int16_t* results = malloc(4 * sizeof(int16_t));
 800034e:	2008      	movs	r0, #8
 8000350:	f007 f9f2 	bl	8007738 <malloc>
 8000354:	0003      	movs	r3, r0
 8000356:	607b      	str	r3, [r7, #4]
	results[0] = output1;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	197a      	adds	r2, r7, r5
 800035c:	8812      	ldrh	r2, [r2, #0]
 800035e:	801a      	strh	r2, [r3, #0]
	results[1] = output2;
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	3302      	adds	r3, #2
 8000364:	19ba      	adds	r2, r7, r6
 8000366:	8812      	ldrh	r2, [r2, #0]
 8000368:	801a      	strh	r2, [r3, #0]
	results[2] = output3;
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	3304      	adds	r3, #4
 800036e:	220a      	movs	r2, #10
 8000370:	18ba      	adds	r2, r7, r2
 8000372:	8812      	ldrh	r2, [r2, #0]
 8000374:	801a      	strh	r2, [r3, #0]
	results[3] = output4;
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	3306      	adds	r3, #6
 800037a:	2108      	movs	r1, #8
 800037c:	187a      	adds	r2, r7, r1
 800037e:	8812      	ldrh	r2, [r2, #0]
 8000380:	801a      	strh	r2, [r3, #0]
	return results;
 8000382:	687b      	ldr	r3, [r7, #4]
}
 8000384:	0018      	movs	r0, r3
 8000386:	46bd      	mov	sp, r7
 8000388:	b005      	add	sp, #20
 800038a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800038c <hk_adc>:

uint16_t* hk_adc(ADC_HandleTypeDef *adc) {
 800038c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800038e:	b08b      	sub	sp, #44	; 0x2c
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]

	HAL_ADC_Start_DMA(&hadc, (uint32_t *)adcResultsDMA,
 8000394:	2311      	movs	r3, #17
 8000396:	001a      	movs	r2, r3
 8000398:	494c      	ldr	r1, [pc, #304]	; (80004cc <hk_adc+0x140>)
 800039a:	4b4d      	ldr	r3, [pc, #308]	; (80004d0 <hk_adc+0x144>)
 800039c:	0018      	movs	r0, r3
 800039e:	f001 ff7f 	bl	80022a0 <HAL_ADC_Start_DMA>
							adcChannelCount);

	uint16_t PA1 = adcResultsDMA[1];       // ADC_IN1, BUS_Vmon: instrument bus voltage monitor
 80003a2:	2426      	movs	r4, #38	; 0x26
 80003a4:	193b      	adds	r3, r7, r4
 80003a6:	4a49      	ldr	r2, [pc, #292]	; (80004cc <hk_adc+0x140>)
 80003a8:	8852      	ldrh	r2, [r2, #2]
 80003aa:	801a      	strh	r2, [r3, #0]
	uint16_t PA2 = adcResultsDMA[2];       // ADC_IN2, BUS_Imon: instrument bus current monitor
 80003ac:	2524      	movs	r5, #36	; 0x24
 80003ae:	197b      	adds	r3, r7, r5
 80003b0:	4a46      	ldr	r2, [pc, #280]	; (80004cc <hk_adc+0x140>)
 80003b2:	8892      	ldrh	r2, [r2, #4]
 80003b4:	801a      	strh	r2, [r3, #0]
	uint16_t PA3 = adcResultsDMA[3];       // ADC_IN3, 3v3_mon: Accurate 5V for ADC monitor
 80003b6:	2622      	movs	r6, #34	; 0x22
 80003b8:	19bb      	adds	r3, r7, r6
 80003ba:	4a44      	ldr	r2, [pc, #272]	; (80004cc <hk_adc+0x140>)
 80003bc:	88d2      	ldrh	r2, [r2, #6]
 80003be:	801a      	strh	r2, [r3, #0]
	uint16_t PA5 = adcResultsDMA[4];       // ADC_IN5, n150v_mon: n150 voltage monitor
 80003c0:	2320      	movs	r3, #32
 80003c2:	18fb      	adds	r3, r7, r3
 80003c4:	4a41      	ldr	r2, [pc, #260]	; (80004cc <hk_adc+0x140>)
 80003c6:	8912      	ldrh	r2, [r2, #8]
 80003c8:	801a      	strh	r2, [r3, #0]
	uint16_t PA6 = adcResultsDMA[5];       // ADC_IN6, n800v_mon: n800 voltage monitor
 80003ca:	211e      	movs	r1, #30
 80003cc:	187b      	adds	r3, r7, r1
 80003ce:	4a3f      	ldr	r2, [pc, #252]	; (80004cc <hk_adc+0x140>)
 80003d0:	8952      	ldrh	r2, [r2, #10]
 80003d2:	801a      	strh	r2, [r3, #0]
	uint16_t PC0 = adcResultsDMA[9];       // ADC_IN10, 2v5_mon: 2.5v voltage monitor
 80003d4:	201c      	movs	r0, #28
 80003d6:	183b      	adds	r3, r7, r0
 80003d8:	4a3c      	ldr	r2, [pc, #240]	; (80004cc <hk_adc+0x140>)
 80003da:	8a52      	ldrh	r2, [r2, #18]
 80003dc:	801a      	strh	r2, [r3, #0]
	uint16_t PC1 = adcResultsDMA[10];      // ADC_IN11, n5v_mon: n5v voltage monitor
 80003de:	231a      	movs	r3, #26
 80003e0:	18fb      	adds	r3, r7, r3
 80003e2:	4a3a      	ldr	r2, [pc, #232]	; (80004cc <hk_adc+0x140>)
 80003e4:	8a92      	ldrh	r2, [r2, #20]
 80003e6:	801a      	strh	r2, [r3, #0]
	uint16_t PC2 = adcResultsDMA[11];      // ADC_IN12, 5v_mon: 5v voltage monitor
 80003e8:	2218      	movs	r2, #24
 80003ea:	18bb      	adds	r3, r7, r2
 80003ec:	4a37      	ldr	r2, [pc, #220]	; (80004cc <hk_adc+0x140>)
 80003ee:	8ad2      	ldrh	r2, [r2, #22]
 80003f0:	801a      	strh	r2, [r3, #0]
	uint16_t PC3 = adcResultsDMA[12];      // ADC_IN13, n3v3_mon: n3v3 voltage monitor
 80003f2:	2316      	movs	r3, #22
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	4a35      	ldr	r2, [pc, #212]	; (80004cc <hk_adc+0x140>)
 80003f8:	8b12      	ldrh	r2, [r2, #24]
 80003fa:	801a      	strh	r2, [r3, #0]
	uint16_t PC4 = adcResultsDMA[13];      // ADC_IN14, 5vref_mon: 5v reference voltage monitor
 80003fc:	2214      	movs	r2, #20
 80003fe:	18bb      	adds	r3, r7, r2
 8000400:	4a32      	ldr	r2, [pc, #200]	; (80004cc <hk_adc+0x140>)
 8000402:	8b52      	ldrh	r2, [r2, #26]
 8000404:	801a      	strh	r2, [r3, #0]
	uint16_t PC5 = adcResultsDMA[14];      // ADC_IN15, 15v_mon: 15v voltage monitor
 8000406:	2112      	movs	r1, #18
 8000408:	187b      	adds	r3, r7, r1
 800040a:	4a30      	ldr	r2, [pc, #192]	; (80004cc <hk_adc+0x140>)
 800040c:	8b92      	ldrh	r2, [r2, #28]
 800040e:	801a      	strh	r2, [r3, #0]
	uint16_t MCU_TEMP = adcResultsDMA[15]; //(internally connected) ADC_IN16, VSENSE
 8000410:	2310      	movs	r3, #16
 8000412:	18fb      	adds	r3, r7, r3
 8000414:	4a2d      	ldr	r2, [pc, #180]	; (80004cc <hk_adc+0x140>)
 8000416:	8bd2      	ldrh	r2, [r2, #30]
 8000418:	801a      	strh	r2, [r3, #0]
	uint16_t MCU_VREF = adcResultsDMA[16]; //(internally connected) ADC_IN17, VREFINT
 800041a:	210e      	movs	r1, #14
 800041c:	187b      	adds	r3, r7, r1
 800041e:	4a2b      	ldr	r2, [pc, #172]	; (80004cc <hk_adc+0x140>)
 8000420:	8c12      	ldrh	r2, [r2, #32]
 8000422:	801a      	strh	r2, [r3, #0]

	uint16_t* results = malloc(13 * sizeof(uint16_t));
 8000424:	201a      	movs	r0, #26
 8000426:	f007 f987 	bl	8007738 <malloc>
 800042a:	0003      	movs	r3, r0
 800042c:	60bb      	str	r3, [r7, #8]
	results[0] = MCU_TEMP;
 800042e:	68bb      	ldr	r3, [r7, #8]
 8000430:	2210      	movs	r2, #16
 8000432:	18ba      	adds	r2, r7, r2
 8000434:	8812      	ldrh	r2, [r2, #0]
 8000436:	801a      	strh	r2, [r3, #0]
	results[1] = MCU_VREF;
 8000438:	68bb      	ldr	r3, [r7, #8]
 800043a:	3302      	adds	r3, #2
 800043c:	210e      	movs	r1, #14
 800043e:	187a      	adds	r2, r7, r1
 8000440:	8812      	ldrh	r2, [r2, #0]
 8000442:	801a      	strh	r2, [r3, #0]
	results[2] = PA1;
 8000444:	68bb      	ldr	r3, [r7, #8]
 8000446:	3304      	adds	r3, #4
 8000448:	193a      	adds	r2, r7, r4
 800044a:	8812      	ldrh	r2, [r2, #0]
 800044c:	801a      	strh	r2, [r3, #0]
	results[3] = PA2;
 800044e:	68bb      	ldr	r3, [r7, #8]
 8000450:	3306      	adds	r3, #6
 8000452:	197a      	adds	r2, r7, r5
 8000454:	8812      	ldrh	r2, [r2, #0]
 8000456:	801a      	strh	r2, [r3, #0]
	results[4] = PC0;
 8000458:	68bb      	ldr	r3, [r7, #8]
 800045a:	3308      	adds	r3, #8
 800045c:	201c      	movs	r0, #28
 800045e:	183a      	adds	r2, r7, r0
 8000460:	8812      	ldrh	r2, [r2, #0]
 8000462:	801a      	strh	r2, [r3, #0]
	results[5] = PA3;
 8000464:	68bb      	ldr	r3, [r7, #8]
 8000466:	330a      	adds	r3, #10
 8000468:	19ba      	adds	r2, r7, r6
 800046a:	8812      	ldrh	r2, [r2, #0]
 800046c:	801a      	strh	r2, [r3, #0]
	results[6] = PC2;
 800046e:	68bb      	ldr	r3, [r7, #8]
 8000470:	330c      	adds	r3, #12
 8000472:	2418      	movs	r4, #24
 8000474:	193a      	adds	r2, r7, r4
 8000476:	8812      	ldrh	r2, [r2, #0]
 8000478:	801a      	strh	r2, [r3, #0]
	results[7] = PC3;
 800047a:	68bb      	ldr	r3, [r7, #8]
 800047c:	330e      	adds	r3, #14
 800047e:	2416      	movs	r4, #22
 8000480:	193a      	adds	r2, r7, r4
 8000482:	8812      	ldrh	r2, [r2, #0]
 8000484:	801a      	strh	r2, [r3, #0]
	results[8] = PC1;
 8000486:	68bb      	ldr	r3, [r7, #8]
 8000488:	3310      	adds	r3, #16
 800048a:	201a      	movs	r0, #26
 800048c:	183a      	adds	r2, r7, r0
 800048e:	8812      	ldrh	r2, [r2, #0]
 8000490:	801a      	strh	r2, [r3, #0]
	results[9] = PC5;
 8000492:	68bb      	ldr	r3, [r7, #8]
 8000494:	3312      	adds	r3, #18
 8000496:	2412      	movs	r4, #18
 8000498:	193a      	adds	r2, r7, r4
 800049a:	8812      	ldrh	r2, [r2, #0]
 800049c:	801a      	strh	r2, [r3, #0]
	results[10] = PC4;
 800049e:	68bb      	ldr	r3, [r7, #8]
 80004a0:	3314      	adds	r3, #20
 80004a2:	2014      	movs	r0, #20
 80004a4:	183a      	adds	r2, r7, r0
 80004a6:	8812      	ldrh	r2, [r2, #0]
 80004a8:	801a      	strh	r2, [r3, #0]
	results[11] = PA5;
 80004aa:	68bb      	ldr	r3, [r7, #8]
 80004ac:	3316      	adds	r3, #22
 80004ae:	2220      	movs	r2, #32
 80004b0:	18ba      	adds	r2, r7, r2
 80004b2:	8812      	ldrh	r2, [r2, #0]
 80004b4:	801a      	strh	r2, [r3, #0]
	results[12] = PA6;
 80004b6:	68bb      	ldr	r3, [r7, #8]
 80004b8:	3318      	adds	r3, #24
 80004ba:	211e      	movs	r1, #30
 80004bc:	187a      	adds	r2, r7, r1
 80004be:	8812      	ldrh	r2, [r2, #0]
 80004c0:	801a      	strh	r2, [r3, #0]

	return results;
 80004c2:	68bb      	ldr	r3, [r7, #8]

}
 80004c4:	0018      	movs	r0, r3
 80004c6:	46bd      	mov	sp, r7
 80004c8:	b00b      	add	sp, #44	; 0x2c
 80004ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004cc:	200003e0 	.word	0x200003e0
 80004d0:	200000b4 	.word	0x200000b4

080004d4 <erpa_adc>:

uint16_t* erpa_adc(ADC_HandleTypeDef *adc) {
 80004d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004d6:	b08b      	sub	sp, #44	; 0x2c
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]

	uint8_t erpa_buf[14]; // buffer that is filled with ERPA packet info


	HAL_ADC_Start_DMA(&hadc, (uint32_t *)adcResultsDMA,
 80004dc:	2311      	movs	r3, #17
 80004de:	001a      	movs	r2, r3
 80004e0:	491b      	ldr	r1, [pc, #108]	; (8000550 <erpa_adc+0x7c>)
 80004e2:	4b1c      	ldr	r3, [pc, #112]	; (8000554 <erpa_adc+0x80>)
 80004e4:	0018      	movs	r0, r3
 80004e6:	f001 fedb 	bl	80022a0 <HAL_ADC_Start_DMA>
					  adcChannelCount);
	uint16_t PA0 = adcResultsDMA[0]; 				// ADC_IN0, END_mon: entrance/collimator monitor
 80004ea:	2426      	movs	r4, #38	; 0x26
 80004ec:	193b      	adds	r3, r7, r4
 80004ee:	4a18      	ldr	r2, [pc, #96]	; (8000550 <erpa_adc+0x7c>)
 80004f0:	8812      	ldrh	r2, [r2, #0]
 80004f2:	801a      	strh	r2, [r3, #0]
	uint16_t PA7 = adcResultsDMA[6]; 				// ADC_IN7, SWP_mon: Sweep voltage monitor
 80004f4:	2524      	movs	r5, #36	; 0x24
 80004f6:	197b      	adds	r3, r7, r5
 80004f8:	4a15      	ldr	r2, [pc, #84]	; (8000550 <erpa_adc+0x7c>)
 80004fa:	8992      	ldrh	r2, [r2, #12]
 80004fc:	801a      	strh	r2, [r3, #0]
	uint16_t PB0 = adcResultsDMA[7]; 				// ADC_IN8, TMP 1: Sweep temperature
 80004fe:	2622      	movs	r6, #34	; 0x22
 8000500:	19bb      	adds	r3, r7, r6
 8000502:	4a13      	ldr	r2, [pc, #76]	; (8000550 <erpa_adc+0x7c>)
 8000504:	89d2      	ldrh	r2, [r2, #14]
 8000506:	801a      	strh	r2, [r3, #0]
	uint16_t PB1 = adcResultsDMA[8]; 				// ADC_IN9, TMP 2: feedbacks
 8000508:	2320      	movs	r3, #32
 800050a:	18fb      	adds	r3, r7, r3
 800050c:	4a10      	ldr	r2, [pc, #64]	; (8000550 <erpa_adc+0x7c>)
 800050e:	8a12      	ldrh	r2, [r2, #16]
 8000510:	801a      	strh	r2, [r3, #0]

	uint16_t* results = malloc(4 * sizeof(uint16_t));
 8000512:	2008      	movs	r0, #8
 8000514:	f007 f910 	bl	8007738 <malloc>
 8000518:	0003      	movs	r3, r0
 800051a:	61fb      	str	r3, [r7, #28]

	results[0] = PA0;
 800051c:	69fb      	ldr	r3, [r7, #28]
 800051e:	193a      	adds	r2, r7, r4
 8000520:	8812      	ldrh	r2, [r2, #0]
 8000522:	801a      	strh	r2, [r3, #0]
	results[1] = PA7;
 8000524:	69fb      	ldr	r3, [r7, #28]
 8000526:	3302      	adds	r3, #2
 8000528:	197a      	adds	r2, r7, r5
 800052a:	8812      	ldrh	r2, [r2, #0]
 800052c:	801a      	strh	r2, [r3, #0]
	results[2] = PB0;
 800052e:	69fb      	ldr	r3, [r7, #28]
 8000530:	3304      	adds	r3, #4
 8000532:	19ba      	adds	r2, r7, r6
 8000534:	8812      	ldrh	r2, [r2, #0]
 8000536:	801a      	strh	r2, [r3, #0]
	results[3] = PB1;
 8000538:	69fb      	ldr	r3, [r7, #28]
 800053a:	3306      	adds	r3, #6
 800053c:	2220      	movs	r2, #32
 800053e:	18ba      	adds	r2, r7, r2
 8000540:	8812      	ldrh	r2, [r2, #0]
 8000542:	801a      	strh	r2, [r3, #0]

	return results;
 8000544:	69fb      	ldr	r3, [r7, #28]
}
 8000546:	0018      	movs	r0, r3
 8000548:	46bd      	mov	sp, r7
 800054a:	b00b      	add	sp, #44	; 0x2c
 800054c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	200003e0 	.word	0x200003e0
 8000554:	200000b4 	.word	0x200000b4

08000558 <set_erpa_sweep>:

void set_erpa_sweep() {
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
	DAC->DHR12R1 = DAC_OUT[step];
 800055c:	4b05      	ldr	r3, [pc, #20]	; (8000574 <set_erpa_sweep+0x1c>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	0019      	movs	r1, r3
 8000562:	4b05      	ldr	r3, [pc, #20]	; (8000578 <set_erpa_sweep+0x20>)
 8000564:	4a05      	ldr	r2, [pc, #20]	; (800057c <set_erpa_sweep+0x24>)
 8000566:	0089      	lsls	r1, r1, #2
 8000568:	588a      	ldr	r2, [r1, r2]
 800056a:	609a      	str	r2, [r3, #8]
}
 800056c:	46c0      	nop			; (mov r8, r8)
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	20000402 	.word	0x20000402
 8000578:	40007400 	.word	0x40007400
 800057c:	20000000 	.word	0x20000000

08000580 <send_erpa_packet>:

void send_erpa_packet(int erpa_spi, uint16_t* erpa_adc_results) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	6039      	str	r1, [r7, #0]

	uint8_t erpa_buf[14];
	erpa_buf[0] = erpa_sync;                  		// ERPA SYNC 0xAA MSB
 800058a:	22aa      	movs	r2, #170	; 0xaa
 800058c:	2108      	movs	r1, #8
 800058e:	187b      	adds	r3, r7, r1
 8000590:	701a      	strb	r2, [r3, #0]
	erpa_buf[1] = erpa_sync;                  		// ERPA SYNC 0xAA LSB
 8000592:	22aa      	movs	r2, #170	; 0xaa
 8000594:	187b      	adds	r3, r7, r1
 8000596:	705a      	strb	r2, [r3, #1]
	erpa_buf[2] = ((erpa_seq & 0xFF00) >> 8); 		// ERPA SEQ # MSB
 8000598:	4b2d      	ldr	r3, [pc, #180]	; (8000650 <send_erpa_packet+0xd0>)
 800059a:	881b      	ldrh	r3, [r3, #0]
 800059c:	0a1b      	lsrs	r3, r3, #8
 800059e:	b29b      	uxth	r3, r3
 80005a0:	b2da      	uxtb	r2, r3
 80005a2:	187b      	adds	r3, r7, r1
 80005a4:	709a      	strb	r2, [r3, #2]
	erpa_buf[3] = (erpa_seq & 0xFF);          		// ERPA SEQ # MSB
 80005a6:	4b2a      	ldr	r3, [pc, #168]	; (8000650 <send_erpa_packet+0xd0>)
 80005a8:	881b      	ldrh	r3, [r3, #0]
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	187b      	adds	r3, r7, r1
 80005ae:	70da      	strb	r2, [r3, #3]
	erpa_buf[4] = ((erpa_adc_results[0]) >> 8); 	  		// ENDmon MSB
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	881b      	ldrh	r3, [r3, #0]
 80005b4:	0a1b      	lsrs	r3, r3, #8
 80005b6:	b29b      	uxth	r3, r3
 80005b8:	b2da      	uxtb	r2, r3
 80005ba:	187b      	adds	r3, r7, r1
 80005bc:	711a      	strb	r2, [r3, #4]
	erpa_buf[5] = (erpa_adc_results[0] & 0xFF);               		// ENDmon LSB
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	881b      	ldrh	r3, [r3, #0]
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	715a      	strb	r2, [r3, #5]
	erpa_buf[6] = ((erpa_adc_results[1] & 0xFF00) >> 8);      		// SWP Monitored MSB
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	3302      	adds	r3, #2
 80005cc:	881b      	ldrh	r3, [r3, #0]
 80005ce:	0a1b      	lsrs	r3, r3, #8
 80005d0:	b29b      	uxth	r3, r3
 80005d2:	b2da      	uxtb	r2, r3
 80005d4:	187b      	adds	r3, r7, r1
 80005d6:	719a      	strb	r2, [r3, #6]
	erpa_buf[7] = (erpa_adc_results[1] & 0xFF);               		// SWP Monitored LSB
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	3302      	adds	r3, #2
 80005dc:	881b      	ldrh	r3, [r3, #0]
 80005de:	b2da      	uxtb	r2, r3
 80005e0:	187b      	adds	r3, r7, r1
 80005e2:	71da      	strb	r2, [r3, #7]
	erpa_buf[8] = ((erpa_adc_results[2] & 0xFF00) >> 8);      		// TEMPURATURE 1 MSB
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	3304      	adds	r3, #4
 80005e8:	881b      	ldrh	r3, [r3, #0]
 80005ea:	0a1b      	lsrs	r3, r3, #8
 80005ec:	b29b      	uxth	r3, r3
 80005ee:	b2da      	uxtb	r2, r3
 80005f0:	187b      	adds	r3, r7, r1
 80005f2:	721a      	strb	r2, [r3, #8]
	erpa_buf[9] = (erpa_adc_results[2] & 0xFF);               		// TEMPURATURE 1 LSB
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	3304      	adds	r3, #4
 80005f8:	881b      	ldrh	r3, [r3, #0]
 80005fa:	b2da      	uxtb	r2, r3
 80005fc:	187b      	adds	r3, r7, r1
 80005fe:	725a      	strb	r2, [r3, #9]
	erpa_buf[10] = ((erpa_adc_results[3] & 0xFF00) >> 8);     		// TEMPURATURE 2 MSB
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	3306      	adds	r3, #6
 8000604:	881b      	ldrh	r3, [r3, #0]
 8000606:	0a1b      	lsrs	r3, r3, #8
 8000608:	b29b      	uxth	r3, r3
 800060a:	b2da      	uxtb	r2, r3
 800060c:	187b      	adds	r3, r7, r1
 800060e:	729a      	strb	r2, [r3, #10]
	erpa_buf[11] = (erpa_adc_results[3] & 0xFF);                    // TEMPURATURE 2 LSB
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	3306      	adds	r3, #6
 8000614:	881b      	ldrh	r3, [r3, #0]
 8000616:	b2da      	uxtb	r2, r3
 8000618:	187b      	adds	r3, r7, r1
 800061a:	72da      	strb	r2, [r3, #11]
	erpa_buf[12] = ((erpa_spi & 0xFF00) >> 8);      // ERPA eADC MSB
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	121b      	asrs	r3, r3, #8
 8000620:	b2da      	uxtb	r2, r3
 8000622:	187b      	adds	r3, r7, r1
 8000624:	731a      	strb	r2, [r3, #12]
	erpa_buf[13] = (erpa_spi & 0xFF);               // ERPA eADC LSB
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	b2da      	uxtb	r2, r3
 800062a:	187b      	adds	r3, r7, r1
 800062c:	735a      	strb	r2, [r3, #13]


	erpa_seq++;
 800062e:	4b08      	ldr	r3, [pc, #32]	; (8000650 <send_erpa_packet+0xd0>)
 8000630:	881b      	ldrh	r3, [r3, #0]
 8000632:	3301      	adds	r3, #1
 8000634:	b29a      	uxth	r2, r3
 8000636:	4b06      	ldr	r3, [pc, #24]	; (8000650 <send_erpa_packet+0xd0>)
 8000638:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, erpa_buf, sizeof(erpa_buf), 100);
 800063a:	1879      	adds	r1, r7, r1
 800063c:	4805      	ldr	r0, [pc, #20]	; (8000654 <send_erpa_packet+0xd4>)
 800063e:	2364      	movs	r3, #100	; 0x64
 8000640:	220e      	movs	r2, #14
 8000642:	f005 fde5 	bl	8006210 <HAL_UART_Transmit>
}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	46bd      	mov	sp, r7
 800064a:	b006      	add	sp, #24
 800064c:	bd80      	pop	{r7, pc}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	20000414 	.word	0x20000414
 8000654:	200002f0 	.word	0x200002f0

08000658 <send_hk_packet>:

void send_hk_packet (int16_t * i2c_values, uint16_t* hk_adc_results) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b08c      	sub	sp, #48	; 0x30
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	6039      	str	r1, [r7, #0]


	uint8_t hk_buf[38]; // buffer that is filled with HK packet info
	hk_buf[0] = hk_sync;                     // HK SYNC 0xCC MSB					0 SYNC
 8000662:	22cc      	movs	r2, #204	; 0xcc
 8000664:	2108      	movs	r1, #8
 8000666:	187b      	adds	r3, r7, r1
 8000668:	701a      	strb	r2, [r3, #0]
	hk_buf[1] = hk_sync;                     // HK SYNC 0xCC LSB
 800066a:	22cc      	movs	r2, #204	; 0xcc
 800066c:	187b      	adds	r3, r7, r1
 800066e:	705a      	strb	r2, [r3, #1]
	hk_buf[2] = ((hk_seq & 0xFF00) >> 8);    // HK SEQ # MSB		1 SEQUENCE
 8000670:	4b89      	ldr	r3, [pc, #548]	; (8000898 <send_hk_packet+0x240>)
 8000672:	881b      	ldrh	r3, [r3, #0]
 8000674:	0a1b      	lsrs	r3, r3, #8
 8000676:	b29b      	uxth	r3, r3
 8000678:	b2da      	uxtb	r2, r3
 800067a:	187b      	adds	r3, r7, r1
 800067c:	709a      	strb	r2, [r3, #2]
	hk_buf[3] = (hk_seq & 0xFF);             // HK SEQ # LSB
 800067e:	4b86      	ldr	r3, [pc, #536]	; (8000898 <send_hk_packet+0x240>)
 8000680:	881b      	ldrh	r3, [r3, #0]
 8000682:	b2da      	uxtb	r2, r3
 8000684:	187b      	adds	r3, r7, r1
 8000686:	70da      	strb	r2, [r3, #3]
	hk_buf[4] = ((hk_adc_results[0] & 0xFF00) >> 8); // VSENSE MSB		13 VSENSE
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	881b      	ldrh	r3, [r3, #0]
 800068c:	0a1b      	lsrs	r3, r3, #8
 800068e:	b29b      	uxth	r3, r3
 8000690:	b2da      	uxtb	r2, r3
 8000692:	187b      	adds	r3, r7, r1
 8000694:	711a      	strb	r2, [r3, #4]
	hk_buf[5] = (hk_adc_results[0] & 0xFF);          // VSENSE LSB
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	881b      	ldrh	r3, [r3, #0]
 800069a:	b2da      	uxtb	r2, r3
 800069c:	187b      	adds	r3, r7, r1
 800069e:	715a      	strb	r2, [r3, #5]
	hk_buf[6] = ((hk_adc_results[1] & 0xFF00) >> 8);
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	3302      	adds	r3, #2
 80006a4:	881b      	ldrh	r3, [r3, #0]
 80006a6:	0a1b      	lsrs	r3, r3, #8
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	719a      	strb	r2, [r3, #6]
	hk_buf[7] = (hk_adc_results[1] & 0xFF);
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	3302      	adds	r3, #2
 80006b4:	881b      	ldrh	r3, [r3, #0]
 80006b6:	b2da      	uxtb	r2, r3
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	71da      	strb	r2, [r3, #7]
	hk_buf[8] = ((i2c_values[0] & 0xFF00) >> 8);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2200      	movs	r2, #0
 80006c0:	5e9b      	ldrsh	r3, [r3, r2]
 80006c2:	121b      	asrs	r3, r3, #8
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	721a      	strb	r2, [r3, #8]
	hk_buf[9] = (i2c_values[0] & 0xFF);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2200      	movs	r2, #0
 80006ce:	5e9b      	ldrsh	r3, [r3, r2]
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	0008      	movs	r0, r1
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	725a      	strb	r2, [r3, #9]
	hk_buf[10] = ((i2c_values[1] & 0xFF00) >> 8);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	3302      	adds	r3, #2
 80006dc:	2200      	movs	r2, #0
 80006de:	5e9b      	ldrsh	r3, [r3, r2]
 80006e0:	121b      	asrs	r3, r3, #8
 80006e2:	b2da      	uxtb	r2, r3
 80006e4:	183b      	adds	r3, r7, r0
 80006e6:	729a      	strb	r2, [r3, #10]
	hk_buf[11] = (i2c_values[1] & 0xFF);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	3302      	adds	r3, #2
 80006ec:	2200      	movs	r2, #0
 80006ee:	5e9b      	ldrsh	r3, [r3, r2]
 80006f0:	b2da      	uxtb	r2, r3
 80006f2:	183b      	adds	r3, r7, r0
 80006f4:	72da      	strb	r2, [r3, #11]
	hk_buf[12] = ((i2c_values[2] & 0xFF00) >> 8);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	3304      	adds	r3, #4
 80006fa:	2200      	movs	r2, #0
 80006fc:	5e9b      	ldrsh	r3, [r3, r2]
 80006fe:	121b      	asrs	r3, r3, #8
 8000700:	b2da      	uxtb	r2, r3
 8000702:	183b      	adds	r3, r7, r0
 8000704:	731a      	strb	r2, [r3, #12]
	hk_buf[13] = (i2c_values[2] & 0xFF);
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	3304      	adds	r3, #4
 800070a:	2200      	movs	r2, #0
 800070c:	5e9b      	ldrsh	r3, [r3, r2]
 800070e:	b2da      	uxtb	r2, r3
 8000710:	183b      	adds	r3, r7, r0
 8000712:	735a      	strb	r2, [r3, #13]
	hk_buf[14] = ((i2c_values[3] & 0xFF00) >> 8);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	3306      	adds	r3, #6
 8000718:	2200      	movs	r2, #0
 800071a:	5e9b      	ldrsh	r3, [r3, r2]
 800071c:	121b      	asrs	r3, r3, #8
 800071e:	b2da      	uxtb	r2, r3
 8000720:	183b      	adds	r3, r7, r0
 8000722:	739a      	strb	r2, [r3, #14]
	hk_buf[15] = (i2c_values[3] & 0xFF);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	3306      	adds	r3, #6
 8000728:	2200      	movs	r2, #0
 800072a:	5e9b      	ldrsh	r3, [r3, r2]
 800072c:	b2da      	uxtb	r2, r3
 800072e:	183b      	adds	r3, r7, r0
 8000730:	73da      	strb	r2, [r3, #15]
	hk_buf[16] = ((hk_adc_results[2] & 0xFF00) >> 8);       // BUS_Vmon MSB			2 BUS_VMON PA1
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	3304      	adds	r3, #4
 8000736:	881b      	ldrh	r3, [r3, #0]
 8000738:	0a1b      	lsrs	r3, r3, #8
 800073a:	b29b      	uxth	r3, r3
 800073c:	b2da      	uxtb	r2, r3
 800073e:	183b      	adds	r3, r7, r0
 8000740:	741a      	strb	r2, [r3, #16]
	hk_buf[17] = (hk_adc_results[2] & 0xFF);                // BUS_Vmon LSB
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	3304      	adds	r3, #4
 8000746:	881b      	ldrh	r3, [r3, #0]
 8000748:	b2da      	uxtb	r2, r3
 800074a:	183b      	adds	r3, r7, r0
 800074c:	745a      	strb	r2, [r3, #17]
	hk_buf[18] = ((hk_adc_results[3] & 0xFF00) >> 8);       // BUS_Imon MSB			3 BUS_IMON PA2
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	3306      	adds	r3, #6
 8000752:	881b      	ldrh	r3, [r3, #0]
 8000754:	0a1b      	lsrs	r3, r3, #8
 8000756:	b29b      	uxth	r3, r3
 8000758:	b2da      	uxtb	r2, r3
 800075a:	183b      	adds	r3, r7, r0
 800075c:	749a      	strb	r2, [r3, #18]
	hk_buf[19] = (hk_adc_results[3] & 0xFF);                // BUS_Imon LSB
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	3306      	adds	r3, #6
 8000762:	881b      	ldrh	r3, [r3, #0]
 8000764:	b2da      	uxtb	r2, r3
 8000766:	183b      	adds	r3, r7, r0
 8000768:	74da      	strb	r2, [r3, #19]
	hk_buf[20] = ((hk_adc_results[4] & 0xFF00) >> 8);      	// 2v5_mon MSB			7 2V5_MON PC0
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	3308      	adds	r3, #8
 800076e:	881b      	ldrh	r3, [r3, #0]
 8000770:	0a1b      	lsrs	r3, r3, #8
 8000772:	b29b      	uxth	r3, r3
 8000774:	b2da      	uxtb	r2, r3
 8000776:	183b      	adds	r3, r7, r0
 8000778:	751a      	strb	r2, [r3, #20]
	hk_buf[21] = (hk_adc_results[4] & 0xFF);               	// 2v5_mon LSB
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	3308      	adds	r3, #8
 800077e:	881b      	ldrh	r3, [r3, #0]
 8000780:	b2da      	uxtb	r2, r3
 8000782:	183b      	adds	r3, r7, r0
 8000784:	755a      	strb	r2, [r3, #21]
	hk_buf[22] = ((hk_adc_results[5] & 0xFF00) >> 8);       // 3v3_mon MSB			4 3v3_MON PA3
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	330a      	adds	r3, #10
 800078a:	881b      	ldrh	r3, [r3, #0]
 800078c:	0a1b      	lsrs	r3, r3, #8
 800078e:	b29b      	uxth	r3, r3
 8000790:	b2da      	uxtb	r2, r3
 8000792:	183b      	adds	r3, r7, r0
 8000794:	759a      	strb	r2, [r3, #22]
	hk_buf[23] = (hk_adc_results[5] & 0xFF);                // 3v3_mon LSB
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	330a      	adds	r3, #10
 800079a:	881b      	ldrh	r3, [r3, #0]
 800079c:	b2da      	uxtb	r2, r3
 800079e:	183b      	adds	r3, r7, r0
 80007a0:	75da      	strb	r2, [r3, #23]
	hk_buf[24] = ((hk_adc_results[6]) >> 8);      	// 5v_mon MSB			9 5V_MON PC2
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	330c      	adds	r3, #12
 80007a6:	881b      	ldrh	r3, [r3, #0]
 80007a8:	0a1b      	lsrs	r3, r3, #8
 80007aa:	b29b      	uxth	r3, r3
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	183b      	adds	r3, r7, r0
 80007b0:	761a      	strb	r2, [r3, #24]
	hk_buf[25] = (hk_adc_results[6] & 0xFF);               	// 5v_mon LSB
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	330c      	adds	r3, #12
 80007b6:	881b      	ldrh	r3, [r3, #0]
 80007b8:	b2da      	uxtb	r2, r3
 80007ba:	183b      	adds	r3, r7, r0
 80007bc:	765a      	strb	r2, [r3, #25]
	hk_buf[26] = ((hk_adc_results[7] & 0xFF00) >> 8);      	// n3v3_mon MSB			10 N3V3_MON PC3
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	330e      	adds	r3, #14
 80007c2:	881b      	ldrh	r3, [r3, #0]
 80007c4:	0a1b      	lsrs	r3, r3, #8
 80007c6:	b29b      	uxth	r3, r3
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	183b      	adds	r3, r7, r0
 80007cc:	769a      	strb	r2, [r3, #26]
	hk_buf[27] = (hk_adc_results[7] & 0xFF);               	// n3v3_mon LSB
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	330e      	adds	r3, #14
 80007d2:	881b      	ldrh	r3, [r3, #0]
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	183b      	adds	r3, r7, r0
 80007d8:	76da      	strb	r2, [r3, #27]
	hk_buf[28] = ((hk_adc_results[8] & 0xFF00) >> 8);      	// n5v_mon MSB			8 N5V_MON PC1
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	3310      	adds	r3, #16
 80007de:	881b      	ldrh	r3, [r3, #0]
 80007e0:	0a1b      	lsrs	r3, r3, #8
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	183b      	adds	r3, r7, r0
 80007e8:	771a      	strb	r2, [r3, #28]
	hk_buf[29] = (hk_adc_results[8] & 0xFF);               	// n5v_mon LSB
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	3310      	adds	r3, #16
 80007ee:	881b      	ldrh	r3, [r3, #0]
 80007f0:	b2da      	uxtb	r2, r3
 80007f2:	183b      	adds	r3, r7, r0
 80007f4:	775a      	strb	r2, [r3, #29]
	hk_buf[30] = ((hk_adc_results[9] & 0xFF00) >> 8);      	// 15v_mon MSB			12 15V_MON PC5
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	3312      	adds	r3, #18
 80007fa:	881b      	ldrh	r3, [r3, #0]
 80007fc:	0a1b      	lsrs	r3, r3, #8
 80007fe:	b29b      	uxth	r3, r3
 8000800:	b2da      	uxtb	r2, r3
 8000802:	183b      	adds	r3, r7, r0
 8000804:	779a      	strb	r2, [r3, #30]
	hk_buf[31] = (hk_adc_results[9] & 0xFF);               	// 15v_mon LSB
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	3312      	adds	r3, #18
 800080a:	881b      	ldrh	r3, [r3, #0]
 800080c:	b2da      	uxtb	r2, r3
 800080e:	183b      	adds	r3, r7, r0
 8000810:	77da      	strb	r2, [r3, #31]
	hk_buf[32] = ((hk_adc_results[10] & 0xFF00) >> 8);      	// 5vref_mon MSB		11 5VREF_MON PC4
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	3314      	adds	r3, #20
 8000816:	881b      	ldrh	r3, [r3, #0]
 8000818:	0a1b      	lsrs	r3, r3, #8
 800081a:	b29b      	uxth	r3, r3
 800081c:	b2d9      	uxtb	r1, r3
 800081e:	183b      	adds	r3, r7, r0
 8000820:	2220      	movs	r2, #32
 8000822:	5499      	strb	r1, [r3, r2]
	hk_buf[33] = (hk_adc_results[10] & 0xFF);               	// 5vref_mon LSB
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	3314      	adds	r3, #20
 8000828:	881b      	ldrh	r3, [r3, #0]
 800082a:	b2d9      	uxtb	r1, r3
 800082c:	183b      	adds	r3, r7, r0
 800082e:	2221      	movs	r2, #33	; 0x21
 8000830:	5499      	strb	r1, [r3, r2]
	hk_buf[34] = ((hk_adc_results[11] & 0xFF00) >> 8);      	// n150v_mon MSB		5 N150V_MON PA5
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	3316      	adds	r3, #22
 8000836:	881b      	ldrh	r3, [r3, #0]
 8000838:	0a1b      	lsrs	r3, r3, #8
 800083a:	b29b      	uxth	r3, r3
 800083c:	b2d9      	uxtb	r1, r3
 800083e:	183b      	adds	r3, r7, r0
 8000840:	2222      	movs	r2, #34	; 0x22
 8000842:	5499      	strb	r1, [r3, r2]
	hk_buf[35] = (hk_adc_results[11] & 0xFF);               	// n150v_mon LSB
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	3316      	adds	r3, #22
 8000848:	881b      	ldrh	r3, [r3, #0]
 800084a:	b2d9      	uxtb	r1, r3
 800084c:	183b      	adds	r3, r7, r0
 800084e:	2223      	movs	r2, #35	; 0x23
 8000850:	5499      	strb	r1, [r3, r2]
	hk_buf[36] = ((hk_adc_results[12] & 0xFF00) >> 8);      	// n800v_mon MSB		6 N800V_MON PA6
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	3318      	adds	r3, #24
 8000856:	881b      	ldrh	r3, [r3, #0]
 8000858:	0a1b      	lsrs	r3, r3, #8
 800085a:	b29b      	uxth	r3, r3
 800085c:	b2d9      	uxtb	r1, r3
 800085e:	183b      	adds	r3, r7, r0
 8000860:	2224      	movs	r2, #36	; 0x24
 8000862:	5499      	strb	r1, [r3, r2]
	hk_buf[37] = (hk_adc_results[12] & 0xFF);               	// n800v_mon LSB
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	3318      	adds	r3, #24
 8000868:	881b      	ldrh	r3, [r3, #0]
 800086a:	b2d9      	uxtb	r1, r3
 800086c:	183b      	adds	r3, r7, r0
 800086e:	2225      	movs	r2, #37	; 0x25
 8000870:	5499      	strb	r1, [r3, r2]

	HAL_UART_Transmit(&huart1, hk_buf, sizeof(hk_buf), 100);
 8000872:	1839      	adds	r1, r7, r0
 8000874:	4809      	ldr	r0, [pc, #36]	; (800089c <send_hk_packet+0x244>)
 8000876:	2364      	movs	r3, #100	; 0x64
 8000878:	2226      	movs	r2, #38	; 0x26
 800087a:	f005 fcc9 	bl	8006210 <HAL_UART_Transmit>
	hk_counter = 1;
 800087e:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <send_hk_packet+0x248>)
 8000880:	2201      	movs	r2, #1
 8000882:	601a      	str	r2, [r3, #0]
	hk_seq++;
 8000884:	4b04      	ldr	r3, [pc, #16]	; (8000898 <send_hk_packet+0x240>)
 8000886:	881b      	ldrh	r3, [r3, #0]
 8000888:	3301      	adds	r3, #1
 800088a:	b29a      	uxth	r2, r3
 800088c:	4b02      	ldr	r3, [pc, #8]	; (8000898 <send_hk_packet+0x240>)
 800088e:	801a      	strh	r2, [r3, #0]

}
 8000890:	46c0      	nop			; (mov r8, r8)
 8000892:	46bd      	mov	sp, r7
 8000894:	b00c      	add	sp, #48	; 0x30
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20000420 	.word	0x20000420
 800089c:	200002f0 	.word	0x200002f0
 80008a0:	20000424 	.word	0x20000424

080008a4 <HAL_TIM_OC_DelayElapsedCallback>:


void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  if (htim == &htim2)
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	4b74      	ldr	r3, [pc, #464]	; (8000a80 <HAL_TIM_OC_DelayElapsedCallback+0x1dc>)
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d000      	beq.n	80008b6 <HAL_TIM_OC_DelayElapsedCallback+0x12>
 80008b4:	e08b      	b.n	80009ce <HAL_TIM_OC_DelayElapsedCallback+0x12a>
  {
	  FACTOR_COUNTER++;
 80008b6:	4b73      	ldr	r3, [pc, #460]	; (8000a84 <HAL_TIM_OC_DelayElapsedCallback+0x1e0>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	1c5a      	adds	r2, r3, #1
 80008bc:	4b71      	ldr	r3, [pc, #452]	; (8000a84 <HAL_TIM_OC_DelayElapsedCallback+0x1e0>)
 80008be:	601a      	str	r2, [r3, #0]
	  if (FACTOR_COUNTER == SAMPLING_FACTOR) {
 80008c0:	4b70      	ldr	r3, [pc, #448]	; (8000a84 <HAL_TIM_OC_DelayElapsedCallback+0x1e0>)
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	4b70      	ldr	r3, [pc, #448]	; (8000a88 <HAL_TIM_OC_DelayElapsedCallback+0x1e4>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d000      	beq.n	80008ce <HAL_TIM_OC_DelayElapsedCallback+0x2a>
 80008cc:	e07f      	b.n	80009ce <HAL_TIM_OC_DelayElapsedCallback+0x12a>
		  FACTOR_COUNTER = 0;
 80008ce:	4b6d      	ldr	r3, [pc, #436]	; (8000a84 <HAL_TIM_OC_DelayElapsedCallback+0x1e0>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
		  if (ERPA_ON)
 80008d4:	4b6d      	ldr	r3, [pc, #436]	; (8000a8c <HAL_TIM_OC_DelayElapsedCallback+0x1e8>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d056      	beq.n	800098a <HAL_TIM_OC_DelayElapsedCallback+0xe6>
				 * Sets CNV and samples ERPA's ADC
				 * Steps DAC
				 * +/- 0.5v Every 100ms
				 */

				while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)); //check pin state
 80008dc:	46c0      	nop			; (mov r8, r8)
 80008de:	2380      	movs	r3, #128	; 0x80
 80008e0:	011b      	lsls	r3, r3, #4
 80008e2:	4a6b      	ldr	r2, [pc, #428]	; (8000a90 <HAL_TIM_OC_DelayElapsedCallback+0x1ec>)
 80008e4:	0019      	movs	r1, r3
 80008e6:	0010      	movs	r0, r2
 80008e8:	f002 fc88 	bl	80031fc <HAL_GPIO_ReadPin>
 80008ec:	1e03      	subs	r3, r0, #0
 80008ee:	d1f6      	bne.n	80008de <HAL_TIM_OC_DelayElapsedCallback+0x3a>


				/* Write to SPI (begin transfer?) */
				HAL_SPI_Transmit(&hspi2, (uint8_t * ) &WRITE, 1, 1);
 80008f0:	4968      	ldr	r1, [pc, #416]	; (8000a94 <HAL_TIM_OC_DelayElapsedCallback+0x1f0>)
 80008f2:	4869      	ldr	r0, [pc, #420]	; (8000a98 <HAL_TIM_OC_DelayElapsedCallback+0x1f4>)
 80008f4:	2301      	movs	r3, #1
 80008f6:	2201      	movs	r2, #1
 80008f8:	f004 f826 	bl	8004948 <HAL_SPI_Transmit>
				SPI2->CR1 &= ~(1<<10); // THIS IS NEEDED TO STOP SPI1_SCK FROM GENERATING CLOCK PULSES
 80008fc:	4b67      	ldr	r3, [pc, #412]	; (8000a9c <HAL_TIM_OC_DelayElapsedCallback+0x1f8>)
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	4b66      	ldr	r3, [pc, #408]	; (8000a9c <HAL_TIM_OC_DelayElapsedCallback+0x1f8>)
 8000902:	4967      	ldr	r1, [pc, #412]	; (8000aa0 <HAL_TIM_OC_DelayElapsedCallback+0x1fc>)
 8000904:	400a      	ands	r2, r1
 8000906:	601a      	str	r2, [r3, #0]
				while (!(SPI2->SR));
 8000908:	46c0      	nop			; (mov r8, r8)
 800090a:	4b64      	ldr	r3, [pc, #400]	; (8000a9c <HAL_TIM_OC_DelayElapsedCallback+0x1f8>)
 800090c:	689b      	ldr	r3, [r3, #8]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d0fb      	beq.n	800090a <HAL_TIM_OC_DelayElapsedCallback+0x66>
				erpa_raw = SPI2->DR;
 8000912:	4b62      	ldr	r3, [pc, #392]	; (8000a9c <HAL_TIM_OC_DelayElapsedCallback+0x1f8>)
 8000914:	68db      	ldr	r3, [r3, #12]
 8000916:	001a      	movs	r2, r3
 8000918:	4b62      	ldr	r3, [pc, #392]	; (8000aa4 <HAL_TIM_OC_DelayElapsedCallback+0x200>)
 800091a:	601a      	str	r2, [r3, #0]

				uint16_t* erpa_adc_results = erpa_adc(&hadc);
 800091c:	4b62      	ldr	r3, [pc, #392]	; (8000aa8 <HAL_TIM_OC_DelayElapsedCallback+0x204>)
 800091e:	0018      	movs	r0, r3
 8000920:	f7ff fdd8 	bl	80004d4 <erpa_adc>
 8000924:	0003      	movs	r3, r0
 8000926:	617b      	str	r3, [r7, #20]

				set_erpa_sweep();
 8000928:	f7ff fe16 	bl	8000558 <set_erpa_sweep>

				send_erpa_packet(erpa_raw, erpa_adc_results);
 800092c:	4b5d      	ldr	r3, [pc, #372]	; (8000aa4 <HAL_TIM_OC_DelayElapsedCallback+0x200>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	697a      	ldr	r2, [r7, #20]
 8000932:	0011      	movs	r1, r2
 8000934:	0018      	movs	r0, r3
 8000936:	f7ff fe23 	bl	8000580 <send_erpa_packet>


				if (auto_sweep) {
 800093a:	4b5c      	ldr	r3, [pc, #368]	; (8000aac <HAL_TIM_OC_DelayElapsedCallback+0x208>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d01f      	beq.n	8000982 <HAL_TIM_OC_DelayElapsedCallback+0xde>
					if (step == 7) {
 8000942:	4b5b      	ldr	r3, [pc, #364]	; (8000ab0 <HAL_TIM_OC_DelayElapsedCallback+0x20c>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	2b07      	cmp	r3, #7
 8000948:	d103      	bne.n	8000952 <HAL_TIM_OC_DelayElapsedCallback+0xae>
						is_increasing = 0;
 800094a:	4b5a      	ldr	r3, [pc, #360]	; (8000ab4 <HAL_TIM_OC_DelayElapsedCallback+0x210>)
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	e006      	b.n	8000960 <HAL_TIM_OC_DelayElapsedCallback+0xbc>
					} else if (step == 0) {
 8000952:	4b57      	ldr	r3, [pc, #348]	; (8000ab0 <HAL_TIM_OC_DelayElapsedCallback+0x20c>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d102      	bne.n	8000960 <HAL_TIM_OC_DelayElapsedCallback+0xbc>
						is_increasing = 1;
 800095a:	4b56      	ldr	r3, [pc, #344]	; (8000ab4 <HAL_TIM_OC_DelayElapsedCallback+0x210>)
 800095c:	2201      	movs	r2, #1
 800095e:	601a      	str	r2, [r3, #0]
					}

					if (is_increasing) {
 8000960:	4b54      	ldr	r3, [pc, #336]	; (8000ab4 <HAL_TIM_OC_DelayElapsedCallback+0x210>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d006      	beq.n	8000976 <HAL_TIM_OC_DelayElapsedCallback+0xd2>
						step++;
 8000968:	4b51      	ldr	r3, [pc, #324]	; (8000ab0 <HAL_TIM_OC_DelayElapsedCallback+0x20c>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	3301      	adds	r3, #1
 800096e:	b2da      	uxtb	r2, r3
 8000970:	4b4f      	ldr	r3, [pc, #316]	; (8000ab0 <HAL_TIM_OC_DelayElapsedCallback+0x20c>)
 8000972:	701a      	strb	r2, [r3, #0]
 8000974:	e005      	b.n	8000982 <HAL_TIM_OC_DelayElapsedCallback+0xde>
					} else {
						step--;
 8000976:	4b4e      	ldr	r3, [pc, #312]	; (8000ab0 <HAL_TIM_OC_DelayElapsedCallback+0x20c>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	3b01      	subs	r3, #1
 800097c:	b2da      	uxtb	r2, r3
 800097e:	4b4c      	ldr	r3, [pc, #304]	; (8000ab0 <HAL_TIM_OC_DelayElapsedCallback+0x20c>)
 8000980:	701a      	strb	r2, [r3, #0]
					}
				}

				free(erpa_adc_results);
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	0018      	movs	r0, r3
 8000986:	f006 fee1 	bl	800774c <free>


		  }
		  if (HK_ON)
 800098a:	4b4b      	ldr	r3, [pc, #300]	; (8000ab8 <HAL_TIM_OC_DelayElapsedCallback+0x214>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d018      	beq.n	80009c4 <HAL_TIM_OC_DelayElapsedCallback+0x120>
		  {
	          int16_t* i2c_values = i2c();
 8000992:	f7ff fcb9 	bl	8000308 <i2c>
 8000996:	0003      	movs	r3, r0
 8000998:	613b      	str	r3, [r7, #16]
	          uint16_t* hk_adc_results = hk_adc(&hadc);
 800099a:	4b43      	ldr	r3, [pc, #268]	; (8000aa8 <HAL_TIM_OC_DelayElapsedCallback+0x204>)
 800099c:	0018      	movs	r0, r3
 800099e:	f7ff fcf5 	bl	800038c <hk_adc>
 80009a2:	0003      	movs	r3, r0
 80009a4:	60fb      	str	r3, [r7, #12]

			  send_hk_packet(i2c_values, hk_adc_results);
 80009a6:	68fa      	ldr	r2, [r7, #12]
 80009a8:	693b      	ldr	r3, [r7, #16]
 80009aa:	0011      	movs	r1, r2
 80009ac:	0018      	movs	r0, r3
 80009ae:	f7ff fe53 	bl	8000658 <send_hk_packet>

			  free(i2c_values);
 80009b2:	693b      	ldr	r3, [r7, #16]
 80009b4:	0018      	movs	r0, r3
 80009b6:	f006 fec9 	bl	800774c <free>
			  free(hk_adc_results);
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	0018      	movs	r0, r3
 80009be:	f006 fec5 	bl	800774c <free>
 80009c2:	e004      	b.n	80009ce <HAL_TIM_OC_DelayElapsedCallback+0x12a>

			}
			else
			{
			  hk_counter++;
 80009c4:	4b3d      	ldr	r3, [pc, #244]	; (8000abc <HAL_TIM_OC_DelayElapsedCallback+0x218>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	1c5a      	adds	r2, r3, #1
 80009ca:	4b3c      	ldr	r3, [pc, #240]	; (8000abc <HAL_TIM_OC_DelayElapsedCallback+0x218>)
 80009cc:	601a      	str	r2, [r3, #0]
			}
	  }
  }
  if (htim == &htim1)
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	4b3b      	ldr	r3, [pc, #236]	; (8000ac0 <HAL_TIM_OC_DelayElapsedCallback+0x21c>)
 80009d2:	429a      	cmp	r2, r3
 80009d4:	d150      	bne.n	8000a78 <HAL_TIM_OC_DelayElapsedCallback+0x1d4>
  {
      if (PMT_ON)
 80009d6:	4b3b      	ldr	r3, [pc, #236]	; (8000ac4 <HAL_TIM_OC_DelayElapsedCallback+0x220>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d04c      	beq.n	8000a78 <HAL_TIM_OC_DelayElapsedCallback+0x1d4>
      { // check pin state

    	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8));
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	2380      	movs	r3, #128	; 0x80
 80009e2:	005a      	lsls	r2, r3, #1
 80009e4:	2390      	movs	r3, #144	; 0x90
 80009e6:	05db      	lsls	r3, r3, #23
 80009e8:	0011      	movs	r1, r2
 80009ea:	0018      	movs	r0, r3
 80009ec:	f002 fc06 	bl	80031fc <HAL_GPIO_ReadPin>
 80009f0:	1e03      	subs	r3, r0, #0
 80009f2:	d1f5      	bne.n	80009e0 <HAL_TIM_OC_DelayElapsedCallback+0x13c>
		 * Every 125ms
		 */


		/* Write to SPI (begin transfer?) */
		HAL_SPI_Transmit(&hspi1, (uint8_t * ) &WRITE, 1, 1);
 80009f4:	4927      	ldr	r1, [pc, #156]	; (8000a94 <HAL_TIM_OC_DelayElapsedCallback+0x1f0>)
 80009f6:	4834      	ldr	r0, [pc, #208]	; (8000ac8 <HAL_TIM_OC_DelayElapsedCallback+0x224>)
 80009f8:	2301      	movs	r3, #1
 80009fa:	2201      	movs	r2, #1
 80009fc:	f003 ffa4 	bl	8004948 <HAL_SPI_Transmit>
		SPI1->CR1 &= ~(1<<10); // THIS IS NEEDED TO STOP SPI1_SCK FROM GENERATING CLOCK PULSES
 8000a00:	4b32      	ldr	r3, [pc, #200]	; (8000acc <HAL_TIM_OC_DelayElapsedCallback+0x228>)
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	4b31      	ldr	r3, [pc, #196]	; (8000acc <HAL_TIM_OC_DelayElapsedCallback+0x228>)
 8000a06:	4926      	ldr	r1, [pc, #152]	; (8000aa0 <HAL_TIM_OC_DelayElapsedCallback+0x1fc>)
 8000a08:	400a      	ands	r2, r1
 8000a0a:	601a      	str	r2, [r3, #0]
		while (!(SPI1->SR));
 8000a0c:	46c0      	nop			; (mov r8, r8)
 8000a0e:	4b2f      	ldr	r3, [pc, #188]	; (8000acc <HAL_TIM_OC_DelayElapsedCallback+0x228>)
 8000a10:	689b      	ldr	r3, [r3, #8]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d0fb      	beq.n	8000a0e <HAL_TIM_OC_DelayElapsedCallback+0x16a>

		//RXNE here

		pmt_raw = SPI1->DR;
 8000a16:	4b2d      	ldr	r3, [pc, #180]	; (8000acc <HAL_TIM_OC_DelayElapsedCallback+0x228>)
 8000a18:	68db      	ldr	r3, [r3, #12]
 8000a1a:	001a      	movs	r2, r3
 8000a1c:	4b2c      	ldr	r3, [pc, #176]	; (8000ad0 <HAL_TIM_OC_DelayElapsedCallback+0x22c>)
 8000a1e:	601a      	str	r2, [r3, #0]

		int r = pmt_raw;
 8000a20:	4b2b      	ldr	r3, [pc, #172]	; (8000ad0 <HAL_TIM_OC_DelayElapsedCallback+0x22c>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	60bb      	str	r3, [r7, #8]
    	data.pmt_raw = raw;
    	data.pmt_seq = pmt_seq;

    	uint8_t* abstraction_test_buf = fill_pmt_data(data);
    	*/
    	  pmt_buf[0] = pmt_sync;
 8000a26:	22bb      	movs	r2, #187	; 0xbb
 8000a28:	4b2a      	ldr	r3, [pc, #168]	; (8000ad4 <HAL_TIM_OC_DelayElapsedCallback+0x230>)
 8000a2a:	701a      	strb	r2, [r3, #0]
		  pmt_buf[1] = pmt_sync;
 8000a2c:	22bb      	movs	r2, #187	; 0xbb
 8000a2e:	4b29      	ldr	r3, [pc, #164]	; (8000ad4 <HAL_TIM_OC_DelayElapsedCallback+0x230>)
 8000a30:	705a      	strb	r2, [r3, #1]
		  pmt_buf[2] = ((pmt_seq & 0xFF00) >> 8);
 8000a32:	4b29      	ldr	r3, [pc, #164]	; (8000ad8 <HAL_TIM_OC_DelayElapsedCallback+0x234>)
 8000a34:	881b      	ldrh	r3, [r3, #0]
 8000a36:	0a1b      	lsrs	r3, r3, #8
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	b2da      	uxtb	r2, r3
 8000a3c:	4b25      	ldr	r3, [pc, #148]	; (8000ad4 <HAL_TIM_OC_DelayElapsedCallback+0x230>)
 8000a3e:	709a      	strb	r2, [r3, #2]
		  pmt_buf[3] = (pmt_seq & 0xFF);
 8000a40:	4b25      	ldr	r3, [pc, #148]	; (8000ad8 <HAL_TIM_OC_DelayElapsedCallback+0x234>)
 8000a42:	881b      	ldrh	r3, [r3, #0]
 8000a44:	b2da      	uxtb	r2, r3
 8000a46:	4b23      	ldr	r3, [pc, #140]	; (8000ad4 <HAL_TIM_OC_DelayElapsedCallback+0x230>)
 8000a48:	70da      	strb	r2, [r3, #3]
		  pmt_buf[4] = ((pmt_raw & 0xFF00) >> 8);
 8000a4a:	4b21      	ldr	r3, [pc, #132]	; (8000ad0 <HAL_TIM_OC_DelayElapsedCallback+0x22c>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	121b      	asrs	r3, r3, #8
 8000a50:	b2da      	uxtb	r2, r3
 8000a52:	4b20      	ldr	r3, [pc, #128]	; (8000ad4 <HAL_TIM_OC_DelayElapsedCallback+0x230>)
 8000a54:	711a      	strb	r2, [r3, #4]
		  pmt_buf[5] = (pmt_raw & 0xFF);
 8000a56:	4b1e      	ldr	r3, [pc, #120]	; (8000ad0 <HAL_TIM_OC_DelayElapsedCallback+0x22c>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	b2da      	uxtb	r2, r3
 8000a5c:	4b1d      	ldr	r3, [pc, #116]	; (8000ad4 <HAL_TIM_OC_DelayElapsedCallback+0x230>)
 8000a5e:	715a      	strb	r2, [r3, #5]

		  pmt_seq++;
 8000a60:	4b1d      	ldr	r3, [pc, #116]	; (8000ad8 <HAL_TIM_OC_DelayElapsedCallback+0x234>)
 8000a62:	881b      	ldrh	r3, [r3, #0]
 8000a64:	3301      	adds	r3, #1
 8000a66:	b29a      	uxth	r2, r3
 8000a68:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <HAL_TIM_OC_DelayElapsedCallback+0x234>)
 8000a6a:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, pmt_buf, sizeof(pmt_buf), 100);
 8000a6c:	4919      	ldr	r1, [pc, #100]	; (8000ad4 <HAL_TIM_OC_DelayElapsedCallback+0x230>)
 8000a6e:	481b      	ldr	r0, [pc, #108]	; (8000adc <HAL_TIM_OC_DelayElapsedCallback+0x238>)
 8000a70:	2364      	movs	r3, #100	; 0x64
 8000a72:	2206      	movs	r2, #6
 8000a74:	f005 fbcc 	bl	8006210 <HAL_UART_Transmit>
		  /*HAL_UART_Transmit(&huart1, abstraction_test_buf, sizeof(abstraction_test_buf), 100);*/
      }
  }

  /* Timer 3 also called but doesn't need to do anything on IT */
}
 8000a78:	46c0      	nop			; (mov r8, r8)
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	b006      	add	sp, #24
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	200002a8 	.word	0x200002a8
 8000a84:	20000410 	.word	0x20000410
 8000a88:	20000024 	.word	0x20000024
 8000a8c:	20000429 	.word	0x20000429
 8000a90:	48000400 	.word	0x48000400
 8000a94:	080079cc 	.word	0x080079cc
 8000a98:	200001fc 	.word	0x200001fc
 8000a9c:	40003800 	.word	0x40003800
 8000aa0:	fffffbff 	.word	0xfffffbff
 8000aa4:	2000040c 	.word	0x2000040c
 8000aa8:	200000b4 	.word	0x200000b4
 8000aac:	20000404 	.word	0x20000404
 8000ab0:	20000402 	.word	0x20000402
 8000ab4:	20000020 	.word	0x20000020
 8000ab8:	2000042a 	.word	0x2000042a
 8000abc:	20000424 	.word	0x20000424
 8000ac0:	20000260 	.word	0x20000260
 8000ac4:	20000428 	.word	0x20000428
 8000ac8:	20000198 	.word	0x20000198
 8000acc:	40013000 	.word	0x40013000
 8000ad0:	20000408 	.word	0x20000408
 8000ad4:	20000418 	.word	0x20000418
 8000ad8:	2000041e 	.word	0x2000041e
 8000adc:	200002f0 	.word	0x200002f0

08000ae0 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]

  HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000ae8:	4998      	ldr	r1, [pc, #608]	; (8000d4c <HAL_UART_RxCpltCallback+0x26c>)
 8000aea:	4b99      	ldr	r3, [pc, #612]	; (8000d50 <HAL_UART_RxCpltCallback+0x270>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	0018      	movs	r0, r3
 8000af0:	f005 fc37 	bl	8006362 <HAL_UART_Receive_IT>
  unsigned char key = rx_buf[0];
 8000af4:	210f      	movs	r1, #15
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	4a94      	ldr	r2, [pc, #592]	; (8000d4c <HAL_UART_RxCpltCallback+0x26c>)
 8000afa:	7812      	ldrb	r2, [r2, #0]
 8000afc:	701a      	strb	r2, [r3, #0]

  switch (key)
 8000afe:	187b      	adds	r3, r7, r1
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b25      	cmp	r3, #37	; 0x25
 8000b04:	d900      	bls.n	8000b08 <HAL_UART_RxCpltCallback+0x28>
 8000b06:	e11c      	b.n	8000d42 <HAL_UART_RxCpltCallback+0x262>
 8000b08:	009a      	lsls	r2, r3, #2
 8000b0a:	4b92      	ldr	r3, [pc, #584]	; (8000d54 <HAL_UART_RxCpltCallback+0x274>)
 8000b0c:	18d3      	adds	r3, r2, r3
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	469f      	mov	pc, r3
  {
  case 0x0B:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000b12:	4b91      	ldr	r3, [pc, #580]	; (8000d58 <HAL_UART_RxCpltCallback+0x278>)
 8000b14:	2140      	movs	r1, #64	; 0x40
 8000b16:	2201      	movs	r2, #1
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f002 fb8c 	bl	8003236 <HAL_GPIO_WritePin>
    break;
 8000b1e:	e110      	b.n	8000d42 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x0A:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000b20:	4b8d      	ldr	r3, [pc, #564]	; (8000d58 <HAL_UART_RxCpltCallback+0x278>)
 8000b22:	2140      	movs	r1, #64	; 0x40
 8000b24:	2200      	movs	r2, #0
 8000b26:	0018      	movs	r0, r3
 8000b28:	f002 fb85 	bl	8003236 <HAL_GPIO_WritePin>
    break;
 8000b2c:	e109      	b.n	8000d42 <HAL_UART_RxCpltCallback+0x262>
  }

  case 0x08:
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_SET);
 8000b2e:	4b8a      	ldr	r3, [pc, #552]	; (8000d58 <HAL_UART_RxCpltCallback+0x278>)
 8000b30:	2180      	movs	r1, #128	; 0x80
 8000b32:	2201      	movs	r2, #1
 8000b34:	0018      	movs	r0, r3
 8000b36:	f002 fb7e 	bl	8003236 <HAL_GPIO_WritePin>
    break;
 8000b3a:	e102      	b.n	8000d42 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x09:
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_RESET);
 8000b3c:	4b86      	ldr	r3, [pc, #536]	; (8000d58 <HAL_UART_RxCpltCallback+0x278>)
 8000b3e:	2180      	movs	r1, #128	; 0x80
 8000b40:	2200      	movs	r2, #0
 8000b42:	0018      	movs	r0, r3
 8000b44:	f002 fb77 	bl	8003236 <HAL_GPIO_WritePin>
    break;
 8000b48:	e0fb      	b.n	8000d42 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x1B:
  {
    if (step < 7)
 8000b4a:	4b84      	ldr	r3, [pc, #528]	; (8000d5c <HAL_UART_RxCpltCallback+0x27c>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	2b06      	cmp	r3, #6
 8000b50:	d900      	bls.n	8000b54 <HAL_UART_RxCpltCallback+0x74>
 8000b52:	e0ef      	b.n	8000d34 <HAL_UART_RxCpltCallback+0x254>
    {
      step++;
 8000b54:	4b81      	ldr	r3, [pc, #516]	; (8000d5c <HAL_UART_RxCpltCallback+0x27c>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	b2da      	uxtb	r2, r3
 8000b5c:	4b7f      	ldr	r3, [pc, #508]	; (8000d5c <HAL_UART_RxCpltCallback+0x27c>)
 8000b5e:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000b60:	e0e8      	b.n	8000d34 <HAL_UART_RxCpltCallback+0x254>
  }
  case 0x1C:
  {
    if (step > 0)
 8000b62:	4b7e      	ldr	r3, [pc, #504]	; (8000d5c <HAL_UART_RxCpltCallback+0x27c>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d100      	bne.n	8000b6c <HAL_UART_RxCpltCallback+0x8c>
 8000b6a:	e0e5      	b.n	8000d38 <HAL_UART_RxCpltCallback+0x258>
    {
      step--;
 8000b6c:	4b7b      	ldr	r3, [pc, #492]	; (8000d5c <HAL_UART_RxCpltCallback+0x27c>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	3b01      	subs	r3, #1
 8000b72:	b2da      	uxtb	r2, r3
 8000b74:	4b79      	ldr	r3, [pc, #484]	; (8000d5c <HAL_UART_RxCpltCallback+0x27c>)
 8000b76:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000b78:	e0de      	b.n	8000d38 <HAL_UART_RxCpltCallback+0x258>
  }
  case 0x1D: {
	  if (!auto_sweep) {
 8000b7a:	4b79      	ldr	r3, [pc, #484]	; (8000d60 <HAL_UART_RxCpltCallback+0x280>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d106      	bne.n	8000b90 <HAL_UART_RxCpltCallback+0xb0>
		  auto_sweep = 1;
 8000b82:	4b77      	ldr	r3, [pc, #476]	; (8000d60 <HAL_UART_RxCpltCallback+0x280>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	601a      	str	r2, [r3, #0]
		  step = 0;
 8000b88:	4b74      	ldr	r3, [pc, #464]	; (8000d5c <HAL_UART_RxCpltCallback+0x27c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	701a      	strb	r2, [r3, #0]
 8000b8e:	e005      	b.n	8000b9c <HAL_UART_RxCpltCallback+0xbc>
	  } else {
		  auto_sweep = 0;
 8000b90:	4b73      	ldr	r3, [pc, #460]	; (8000d60 <HAL_UART_RxCpltCallback+0x280>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
		  step = 0;
 8000b96:	4b71      	ldr	r3, [pc, #452]	; (8000d5c <HAL_UART_RxCpltCallback+0x27c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	701a      	strb	r2, [r3, #0]
	  }
  }
  case 0x24: {
	  if (SAMPLING_FACTOR < 16) {
 8000b9c:	4b71      	ldr	r3, [pc, #452]	; (8000d64 <HAL_UART_RxCpltCallback+0x284>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b0f      	cmp	r3, #15
 8000ba2:	dd00      	ble.n	8000ba6 <HAL_UART_RxCpltCallback+0xc6>
 8000ba4:	e0ca      	b.n	8000d3c <HAL_UART_RxCpltCallback+0x25c>
		  SAMPLING_FACTOR *= 2;
 8000ba6:	4b6f      	ldr	r3, [pc, #444]	; (8000d64 <HAL_UART_RxCpltCallback+0x284>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	005a      	lsls	r2, r3, #1
 8000bac:	4b6d      	ldr	r3, [pc, #436]	; (8000d64 <HAL_UART_RxCpltCallback+0x284>)
 8000bae:	601a      	str	r2, [r3, #0]
		  FACTOR_COUNTER = 0;
 8000bb0:	4b6d      	ldr	r3, [pc, #436]	; (8000d68 <HAL_UART_RxCpltCallback+0x288>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
	  }
	  break;
 8000bb6:	e0c1      	b.n	8000d3c <HAL_UART_RxCpltCallback+0x25c>
  }
  case 0x25: {
	  if (SAMPLING_FACTOR > 1) {
 8000bb8:	4b6a      	ldr	r3, [pc, #424]	; (8000d64 <HAL_UART_RxCpltCallback+0x284>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	dc00      	bgt.n	8000bc2 <HAL_UART_RxCpltCallback+0xe2>
 8000bc0:	e0be      	b.n	8000d40 <HAL_UART_RxCpltCallback+0x260>
		  SAMPLING_FACTOR /= 2;
 8000bc2:	4b68      	ldr	r3, [pc, #416]	; (8000d64 <HAL_UART_RxCpltCallback+0x284>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	da00      	bge.n	8000bcc <HAL_UART_RxCpltCallback+0xec>
 8000bca:	3301      	adds	r3, #1
 8000bcc:	105b      	asrs	r3, r3, #1
 8000bce:	001a      	movs	r2, r3
 8000bd0:	4b64      	ldr	r3, [pc, #400]	; (8000d64 <HAL_UART_RxCpltCallback+0x284>)
 8000bd2:	601a      	str	r2, [r3, #0]
		  FACTOR_COUNTER = 0;
 8000bd4:	4b64      	ldr	r3, [pc, #400]	; (8000d68 <HAL_UART_RxCpltCallback+0x288>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
	  }
	  break;
 8000bda:	e0b1      	b.n	8000d40 <HAL_UART_RxCpltCallback+0x260>

  }
  case 0x00:
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000bdc:	4b63      	ldr	r3, [pc, #396]	; (8000d6c <HAL_UART_RxCpltCallback+0x28c>)
 8000bde:	2120      	movs	r1, #32
 8000be0:	2201      	movs	r2, #1
 8000be2:	0018      	movs	r0, r3
 8000be4:	f002 fb27 	bl	8003236 <HAL_GPIO_WritePin>
    break;
 8000be8:	e0ab      	b.n	8000d42 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x13:
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8000bea:	4b60      	ldr	r3, [pc, #384]	; (8000d6c <HAL_UART_RxCpltCallback+0x28c>)
 8000bec:	2120      	movs	r1, #32
 8000bee:	2200      	movs	r2, #0
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f002 fb20 	bl	8003236 <HAL_GPIO_WritePin>
    break;
 8000bf6:	e0a4      	b.n	8000d42 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x01:
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000bf8:	4b5c      	ldr	r3, [pc, #368]	; (8000d6c <HAL_UART_RxCpltCallback+0x28c>)
 8000bfa:	2140      	movs	r1, #64	; 0x40
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f002 fb19 	bl	8003236 <HAL_GPIO_WritePin>
    break;
 8000c04:	e09d      	b.n	8000d42 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x14:
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000c06:	4b59      	ldr	r3, [pc, #356]	; (8000d6c <HAL_UART_RxCpltCallback+0x28c>)
 8000c08:	2140      	movs	r1, #64	; 0x40
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f002 fb12 	bl	8003236 <HAL_GPIO_WritePin>
    break;
 8000c12:	e096      	b.n	8000d42 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x02:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000c14:	4856      	ldr	r0, [pc, #344]	; (8000d70 <HAL_UART_RxCpltCallback+0x290>)
 8000c16:	2380      	movs	r3, #128	; 0x80
 8000c18:	00db      	lsls	r3, r3, #3
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	0019      	movs	r1, r3
 8000c1e:	f002 fb0a 	bl	8003236 <HAL_GPIO_WritePin>
    break;
 8000c22:	e08e      	b.n	8000d42 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x15:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000c24:	4852      	ldr	r0, [pc, #328]	; (8000d70 <HAL_UART_RxCpltCallback+0x290>)
 8000c26:	2380      	movs	r3, #128	; 0x80
 8000c28:	00db      	lsls	r3, r3, #3
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	0019      	movs	r1, r3
 8000c2e:	f002 fb02 	bl	8003236 <HAL_GPIO_WritePin>
    break;
 8000c32:	e086      	b.n	8000d42 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x03:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000c34:	484e      	ldr	r0, [pc, #312]	; (8000d70 <HAL_UART_RxCpltCallback+0x290>)
 8000c36:	2380      	movs	r3, #128	; 0x80
 8000c38:	019b      	lsls	r3, r3, #6
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	0019      	movs	r1, r3
 8000c3e:	f002 fafa 	bl	8003236 <HAL_GPIO_WritePin>
    break;
 8000c42:	e07e      	b.n	8000d42 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x16:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000c44:	484a      	ldr	r0, [pc, #296]	; (8000d70 <HAL_UART_RxCpltCallback+0x290>)
 8000c46:	2380      	movs	r3, #128	; 0x80
 8000c48:	019b      	lsls	r3, r3, #6
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	0019      	movs	r1, r3
 8000c4e:	f002 faf2 	bl	8003236 <HAL_GPIO_WritePin>
    break;
 8000c52:	e076      	b.n	8000d42 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x04:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000c54:	4b46      	ldr	r3, [pc, #280]	; (8000d70 <HAL_UART_RxCpltCallback+0x290>)
 8000c56:	2180      	movs	r1, #128	; 0x80
 8000c58:	2201      	movs	r2, #1
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f002 faeb 	bl	8003236 <HAL_GPIO_WritePin>
    break;
 8000c60:	e06f      	b.n	8000d42 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x17:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000c62:	4b43      	ldr	r3, [pc, #268]	; (8000d70 <HAL_UART_RxCpltCallback+0x290>)
 8000c64:	2180      	movs	r1, #128	; 0x80
 8000c66:	2200      	movs	r2, #0
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f002 fae4 	bl	8003236 <HAL_GPIO_WritePin>
    break;
 8000c6e:	e068      	b.n	8000d42 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x05:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000c70:	483f      	ldr	r0, [pc, #252]	; (8000d70 <HAL_UART_RxCpltCallback+0x290>)
 8000c72:	2380      	movs	r3, #128	; 0x80
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	2201      	movs	r2, #1
 8000c78:	0019      	movs	r1, r3
 8000c7a:	f002 fadc 	bl	8003236 <HAL_GPIO_WritePin>
    break;
 8000c7e:	e060      	b.n	8000d42 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x18:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000c80:	483b      	ldr	r0, [pc, #236]	; (8000d70 <HAL_UART_RxCpltCallback+0x290>)
 8000c82:	2380      	movs	r3, #128	; 0x80
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	2200      	movs	r2, #0
 8000c88:	0019      	movs	r1, r3
 8000c8a:	f002 fad4 	bl	8003236 <HAL_GPIO_WritePin>
    break;
 8000c8e:	e058      	b.n	8000d42 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x06:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000c90:	4837      	ldr	r0, [pc, #220]	; (8000d70 <HAL_UART_RxCpltCallback+0x290>)
 8000c92:	2380      	movs	r3, #128	; 0x80
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	2201      	movs	r2, #1
 8000c98:	0019      	movs	r1, r3
 8000c9a:	f002 facc 	bl	8003236 <HAL_GPIO_WritePin>
    break;
 8000c9e:	e050      	b.n	8000d42 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x19:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000ca0:	4833      	ldr	r0, [pc, #204]	; (8000d70 <HAL_UART_RxCpltCallback+0x290>)
 8000ca2:	2380      	movs	r3, #128	; 0x80
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	0019      	movs	r1, r3
 8000caa:	f002 fac4 	bl	8003236 <HAL_GPIO_WritePin>
    break;
 8000cae:	e048      	b.n	8000d42 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x07:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000cb0:	4b2f      	ldr	r3, [pc, #188]	; (8000d70 <HAL_UART_RxCpltCallback+0x290>)
 8000cb2:	2140      	movs	r1, #64	; 0x40
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f002 fabd 	bl	8003236 <HAL_GPIO_WritePin>
    break;
 8000cbc:	e041      	b.n	8000d42 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x1A:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000cbe:	4b2c      	ldr	r3, [pc, #176]	; (8000d70 <HAL_UART_RxCpltCallback+0x290>)
 8000cc0:	2140      	movs	r1, #64	; 0x40
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f002 fab6 	bl	8003236 <HAL_GPIO_WritePin>
    break;
 8000cca:	e03a      	b.n	8000d42 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x0C:
  {
      HAL_SuspendTick();
 8000ccc:	f001 f99a 	bl	8002004 <HAL_SuspendTick>
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	f003 f802 	bl	8003cdc <HAL_PWR_EnterSTOPMode>
      NVIC_SystemReset();
 8000cd8:	f7ff faa2 	bl	8000220 <__NVIC_SystemReset>
      break;
  }
  case 0x0D:
  {
    PMT_ON = 1;
 8000cdc:	4b25      	ldr	r3, [pc, #148]	; (8000d74 <HAL_UART_RxCpltCallback+0x294>)
 8000cde:	2201      	movs	r2, #1
 8000ce0:	701a      	strb	r2, [r3, #0]
    HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000ce2:	4b25      	ldr	r3, [pc, #148]	; (8000d78 <HAL_UART_RxCpltCallback+0x298>)
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	f004 f94c 	bl	8004f84 <HAL_TIM_OC_Start_IT>
    break;
 8000cec:	e029      	b.n	8000d42 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x10:
  {
    PMT_ON = 0;
 8000cee:	4b21      	ldr	r3, [pc, #132]	; (8000d74 <HAL_UART_RxCpltCallback+0x294>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	701a      	strb	r2, [r3, #0]
    HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000cf4:	4b20      	ldr	r3, [pc, #128]	; (8000d78 <HAL_UART_RxCpltCallback+0x298>)
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	f004 fa43 	bl	8005184 <HAL_TIM_OC_Stop_IT>
    break;
 8000cfe:	e020      	b.n	8000d42 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x0E:
  {
    ERPA_ON = 1;
 8000d00:	4b1e      	ldr	r3, [pc, #120]	; (8000d7c <HAL_UART_RxCpltCallback+0x29c>)
 8000d02:	2201      	movs	r2, #1
 8000d04:	701a      	strb	r2, [r3, #0]
    HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000d06:	4b1e      	ldr	r3, [pc, #120]	; (8000d80 <HAL_UART_RxCpltCallback+0x2a0>)
 8000d08:	210c      	movs	r1, #12
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f004 f93a 	bl	8004f84 <HAL_TIM_OC_Start_IT>
    break;
 8000d10:	e017      	b.n	8000d42 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x11:
  {
    ERPA_ON = 0;
 8000d12:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <HAL_UART_RxCpltCallback+0x29c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	701a      	strb	r2, [r3, #0]
    HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8000d18:	4b19      	ldr	r3, [pc, #100]	; (8000d80 <HAL_UART_RxCpltCallback+0x2a0>)
 8000d1a:	210c      	movs	r1, #12
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f004 fa31 	bl	8005184 <HAL_TIM_OC_Stop_IT>
    break;
 8000d22:	e00e      	b.n	8000d42 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x0F:
  {
    HK_ON = 1;
 8000d24:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <HAL_UART_RxCpltCallback+0x2a4>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	701a      	strb	r2, [r3, #0]
    break;
 8000d2a:	e00a      	b.n	8000d42 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x12:
  {
    HK_ON = 0;
 8000d2c:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <HAL_UART_RxCpltCallback+0x2a4>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	701a      	strb	r2, [r3, #0]
    break;
 8000d32:	e006      	b.n	8000d42 <HAL_UART_RxCpltCallback+0x262>
    break;
 8000d34:	46c0      	nop			; (mov r8, r8)
 8000d36:	e004      	b.n	8000d42 <HAL_UART_RxCpltCallback+0x262>
    break;
 8000d38:	46c0      	nop			; (mov r8, r8)
 8000d3a:	e002      	b.n	8000d42 <HAL_UART_RxCpltCallback+0x262>
	  break;
 8000d3c:	46c0      	nop			; (mov r8, r8)
 8000d3e:	e000      	b.n	8000d42 <HAL_UART_RxCpltCallback+0x262>
	  break;
 8000d40:	46c0      	nop			; (mov r8, r8)
  }
  }
}
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	46bd      	mov	sp, r7
 8000d46:	b004      	add	sp, #16
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	46c0      	nop			; (mov r8, r8)
 8000d4c:	20000374 	.word	0x20000374
 8000d50:	200002f0 	.word	0x200002f0
 8000d54:	080079d0 	.word	0x080079d0
 8000d58:	48001400 	.word	0x48001400
 8000d5c:	20000402 	.word	0x20000402
 8000d60:	20000404 	.word	0x20000404
 8000d64:	20000024 	.word	0x20000024
 8000d68:	20000410 	.word	0x20000410
 8000d6c:	48000400 	.word	0x48000400
 8000d70:	48000800 	.word	0x48000800
 8000d74:	20000428 	.word	0x20000428
 8000d78:	20000260 	.word	0x20000260
 8000d7c:	20000429 	.word	0x20000429
 8000d80:	200002a8 	.word	0x200002a8
 8000d84:	2000042a 	.word	0x2000042a

08000d88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d8e:	f001 f8d5 	bl	8001f3c <HAL_Init>
  int16_t val;
  float temp_c;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d92:	f000 f85f 	bl	8000e54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d96:	f000 fc79 	bl	800168c <MX_GPIO_Init>
  MX_DMA_Init();
 8000d9a:	f000 fc59 	bl	8001650 <MX_DMA_Init>
  MX_SPI2_Init();
 8000d9e:	f000 faa1 	bl	80012e4 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000da2:	f000 fadf 	bl	8001364 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000da6:	f000 fb93 	bl	80014d0 <MX_TIM2_Init>
  MX_SPI1_Init();
 8000daa:	f000 fa5b 	bl	8001264 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000dae:	f000 fc0f 	bl	80015d0 <MX_USART1_UART_Init>
  MX_DAC1_Init();
 8000db2:	f000 f9e5 	bl	8001180 <MX_DAC1_Init>
  MX_ADC_Init();
 8000db6:	f000 f8b7 	bl	8000f28 <MX_ADC_Init>
  MX_I2C1_Init();
 8000dba:	f000 fa13 	bl	80011e4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000dbe:	4b21      	ldr	r3, [pc, #132]	; (8000e44 <main+0xbc>)
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f001 fe5b 	bl	8002a7e <HAL_DAC_Start>

  /* Start Timers with OC & Interrupt */

  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8000dc8:	46c0      	nop			; (mov r8, r8)
 8000dca:	4b1f      	ldr	r3, [pc, #124]	; (8000e48 <main+0xc0>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	69da      	ldr	r2, [r3, #28]
 8000dd0:	2380      	movs	r3, #128	; 0x80
 8000dd2:	025b      	lsls	r3, r3, #9
 8000dd4:	401a      	ands	r2, r3
 8000dd6:	2380      	movs	r3, #128	; 0x80
 8000dd8:	025b      	lsls	r3, r3, #9
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	d0f5      	beq.n	8000dca <main+0x42>
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	4b19      	ldr	r3, [pc, #100]	; (8000e48 <main+0xc0>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	69da      	ldr	r2, [r3, #28]
 8000de6:	2380      	movs	r3, #128	; 0x80
 8000de8:	03db      	lsls	r3, r3, #15
 8000dea:	401a      	ands	r2, r3
 8000dec:	2380      	movs	r3, #128	; 0x80
 8000dee:	03db      	lsls	r3, r3, #15
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d1f5      	bne.n	8000de0 <main+0x58>

  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_ADDRESS;
 8000df4:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <main+0xc4>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
  WakeUpSelection.AddressLength = UART_ADDRESS_DETECT_7B;
 8000dfa:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <main+0xc4>)
 8000dfc:	2210      	movs	r2, #16
 8000dfe:	809a      	strh	r2, [r3, #4]
  WakeUpSelection.Address = 0x5B; // send "["
 8000e00:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <main+0xc4>)
 8000e02:	225b      	movs	r2, #91	; 0x5b
 8000e04:	719a      	strb	r2, [r3, #6]

  if (HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection) != HAL_OK) {
 8000e06:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <main+0xc4>)
 8000e08:	480f      	ldr	r0, [pc, #60]	; (8000e48 <main+0xc0>)
 8000e0a:	6819      	ldr	r1, [r3, #0]
 8000e0c:	685a      	ldr	r2, [r3, #4]
 8000e0e:	f006 fbad 	bl	800756c <HAL_UARTEx_StopModeWakeUpSourceConfig>
 8000e12:	1e03      	subs	r3, r0, #0
 8000e14:	d001      	beq.n	8000e1a <main+0x92>
      Error_Handler();
 8000e16:	f000 fcd3 	bl	80017c0 <Error_Handler>
  }
  /* Enable the LPUART Wake UP from stop mode Interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <main+0xc0>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	689a      	ldr	r2, [r3, #8]
 8000e20:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <main+0xc0>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2180      	movs	r1, #128	; 0x80
 8000e26:	03c9      	lsls	r1, r1, #15
 8000e28:	430a      	orrs	r2, r1
 8000e2a:	609a      	str	r2, [r3, #8]

  /* enable MCU wake-up by LPUART */
  HAL_UARTEx_EnableStopMode(&huart1);
 8000e2c:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <main+0xc0>)
 8000e2e:	0018      	movs	r0, r3
 8000e30:	f006 fc02 	bl	8007638 <HAL_UARTEx_EnableStopMode>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000e34:	4906      	ldr	r1, [pc, #24]	; (8000e50 <main+0xc8>)
 8000e36:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <main+0xc0>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f005 fa91 	bl	8006362 <HAL_UART_Receive_IT>
 8000e40:	e7f8      	b.n	8000e34 <main+0xac>
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	20000138 	.word	0x20000138
 8000e48:	200002f0 	.word	0x200002f0
 8000e4c:	200003d8 	.word	0x200003d8
 8000e50:	20000374 	.word	0x20000374

08000e54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e54:	b590      	push	{r4, r7, lr}
 8000e56:	b097      	sub	sp, #92	; 0x5c
 8000e58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e5a:	2428      	movs	r4, #40	; 0x28
 8000e5c:	193b      	adds	r3, r7, r4
 8000e5e:	0018      	movs	r0, r3
 8000e60:	2330      	movs	r3, #48	; 0x30
 8000e62:	001a      	movs	r2, r3
 8000e64:	2100      	movs	r1, #0
 8000e66:	f006 fc7b 	bl	8007760 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e6a:	2318      	movs	r3, #24
 8000e6c:	18fb      	adds	r3, r7, r3
 8000e6e:	0018      	movs	r0, r3
 8000e70:	2310      	movs	r3, #16
 8000e72:	001a      	movs	r2, r3
 8000e74:	2100      	movs	r1, #0
 8000e76:	f006 fc73 	bl	8007760 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e7a:	1d3b      	adds	r3, r7, #4
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	2314      	movs	r3, #20
 8000e80:	001a      	movs	r2, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	f006 fc6c 	bl	8007760 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000e88:	0021      	movs	r1, r4
 8000e8a:	187b      	adds	r3, r7, r1
 8000e8c:	2212      	movs	r2, #18
 8000e8e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e90:	187b      	adds	r3, r7, r1
 8000e92:	2201      	movs	r2, #1
 8000e94:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000e96:	187b      	adds	r3, r7, r1
 8000e98:	2201      	movs	r2, #1
 8000e9a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e9c:	187b      	adds	r3, r7, r1
 8000e9e:	2210      	movs	r2, #16
 8000ea0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000ea2:	187b      	adds	r3, r7, r1
 8000ea4:	2210      	movs	r2, #16
 8000ea6:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ea8:	187b      	adds	r3, r7, r1
 8000eaa:	2202      	movs	r2, #2
 8000eac:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000eae:	187b      	adds	r3, r7, r1
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000eb4:	187b      	adds	r3, r7, r1
 8000eb6:	22a0      	movs	r2, #160	; 0xa0
 8000eb8:	0392      	lsls	r2, r2, #14
 8000eba:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000ebc:	187b      	adds	r3, r7, r1
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec2:	187b      	adds	r3, r7, r1
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f002 ff3d 	bl	8003d44 <HAL_RCC_OscConfig>
 8000eca:	1e03      	subs	r3, r0, #0
 8000ecc:	d001      	beq.n	8000ed2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000ece:	f000 fc77 	bl	80017c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ed2:	2118      	movs	r1, #24
 8000ed4:	187b      	adds	r3, r7, r1
 8000ed6:	2207      	movs	r2, #7
 8000ed8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eda:	187b      	adds	r3, r7, r1
 8000edc:	2202      	movs	r2, #2
 8000ede:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ee0:	187b      	adds	r3, r7, r1
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ee6:	187b      	adds	r3, r7, r1
 8000ee8:	2200      	movs	r2, #0
 8000eea:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000eec:	187b      	adds	r3, r7, r1
 8000eee:	2101      	movs	r1, #1
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	f003 fa41 	bl	8004378 <HAL_RCC_ClockConfig>
 8000ef6:	1e03      	subs	r3, r0, #0
 8000ef8:	d001      	beq.n	8000efe <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000efa:	f000 fc61 	bl	80017c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000efe:	1d3b      	adds	r3, r7, #4
 8000f00:	2221      	movs	r2, #33	; 0x21
 8000f02:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	2203      	movs	r2, #3
 8000f08:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f10:	1d3b      	adds	r3, r7, #4
 8000f12:	0018      	movs	r0, r3
 8000f14:	f003 fb82 	bl	800461c <HAL_RCCEx_PeriphCLKConfig>
 8000f18:	1e03      	subs	r3, r0, #0
 8000f1a:	d001      	beq.n	8000f20 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000f1c:	f000 fc50 	bl	80017c0 <Error_Handler>
  }
}
 8000f20:	46c0      	nop			; (mov r8, r8)
 8000f22:	46bd      	mov	sp, r7
 8000f24:	b017      	add	sp, #92	; 0x5c
 8000f26:	bd90      	pop	{r4, r7, pc}

08000f28 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	0018      	movs	r0, r3
 8000f32:	230c      	movs	r3, #12
 8000f34:	001a      	movs	r2, r3
 8000f36:	2100      	movs	r1, #0
 8000f38:	f006 fc12 	bl	8007760 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000f3c:	4b8e      	ldr	r3, [pc, #568]	; (8001178 <MX_ADC_Init+0x250>)
 8000f3e:	4a8f      	ldr	r2, [pc, #572]	; (800117c <MX_ADC_Init+0x254>)
 8000f40:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f42:	4b8d      	ldr	r3, [pc, #564]	; (8001178 <MX_ADC_Init+0x250>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000f48:	4b8b      	ldr	r3, [pc, #556]	; (8001178 <MX_ADC_Init+0x250>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f4e:	4b8a      	ldr	r3, [pc, #552]	; (8001178 <MX_ADC_Init+0x250>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000f54:	4b88      	ldr	r3, [pc, #544]	; (8001178 <MX_ADC_Init+0x250>)
 8000f56:	2201      	movs	r2, #1
 8000f58:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f5a:	4b87      	ldr	r3, [pc, #540]	; (8001178 <MX_ADC_Init+0x250>)
 8000f5c:	2204      	movs	r2, #4
 8000f5e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000f60:	4b85      	ldr	r3, [pc, #532]	; (8001178 <MX_ADC_Init+0x250>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000f66:	4b84      	ldr	r3, [pc, #528]	; (8001178 <MX_ADC_Init+0x250>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000f6c:	4b82      	ldr	r3, [pc, #520]	; (8001178 <MX_ADC_Init+0x250>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000f72:	4b81      	ldr	r3, [pc, #516]	; (8001178 <MX_ADC_Init+0x250>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f78:	4b7f      	ldr	r3, [pc, #508]	; (8001178 <MX_ADC_Init+0x250>)
 8000f7a:	22c2      	movs	r2, #194	; 0xc2
 8000f7c:	32ff      	adds	r2, #255	; 0xff
 8000f7e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f80:	4b7d      	ldr	r3, [pc, #500]	; (8001178 <MX_ADC_Init+0x250>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000f86:	4b7c      	ldr	r3, [pc, #496]	; (8001178 <MX_ADC_Init+0x250>)
 8000f88:	2224      	movs	r2, #36	; 0x24
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f8e:	4b7a      	ldr	r3, [pc, #488]	; (8001178 <MX_ADC_Init+0x250>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000f94:	4b78      	ldr	r3, [pc, #480]	; (8001178 <MX_ADC_Init+0x250>)
 8000f96:	0018      	movs	r0, r3
 8000f98:	f001 f842 	bl	8002020 <HAL_ADC_Init>
 8000f9c:	1e03      	subs	r3, r0, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000fa0:	f000 fc0e 	bl	80017c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000faa:	1d3b      	adds	r3, r7, #4
 8000fac:	2280      	movs	r2, #128	; 0x80
 8000fae:	0152      	lsls	r2, r2, #5
 8000fb0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	2280      	movs	r2, #128	; 0x80
 8000fb6:	0552      	lsls	r2, r2, #21
 8000fb8:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000fba:	1d3a      	adds	r2, r7, #4
 8000fbc:	4b6e      	ldr	r3, [pc, #440]	; (8001178 <MX_ADC_Init+0x250>)
 8000fbe:	0011      	movs	r1, r2
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f001 fa07 	bl	80023d4 <HAL_ADC_ConfigChannel>
 8000fc6:	1e03      	subs	r3, r0, #0
 8000fc8:	d001      	beq.n	8000fce <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000fca:	f000 fbf9 	bl	80017c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000fd4:	1d3a      	adds	r2, r7, #4
 8000fd6:	4b68      	ldr	r3, [pc, #416]	; (8001178 <MX_ADC_Init+0x250>)
 8000fd8:	0011      	movs	r1, r2
 8000fda:	0018      	movs	r0, r3
 8000fdc:	f001 f9fa 	bl	80023d4 <HAL_ADC_ConfigChannel>
 8000fe0:	1e03      	subs	r3, r0, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8000fe4:	f000 fbec 	bl	80017c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	2202      	movs	r2, #2
 8000fec:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000fee:	1d3a      	adds	r2, r7, #4
 8000ff0:	4b61      	ldr	r3, [pc, #388]	; (8001178 <MX_ADC_Init+0x250>)
 8000ff2:	0011      	movs	r1, r2
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	f001 f9ed 	bl	80023d4 <HAL_ADC_ConfigChannel>
 8000ffa:	1e03      	subs	r3, r0, #0
 8000ffc:	d001      	beq.n	8001002 <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8000ffe:	f000 fbdf 	bl	80017c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001002:	1d3b      	adds	r3, r7, #4
 8001004:	2203      	movs	r2, #3
 8001006:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001008:	1d3a      	adds	r2, r7, #4
 800100a:	4b5b      	ldr	r3, [pc, #364]	; (8001178 <MX_ADC_Init+0x250>)
 800100c:	0011      	movs	r1, r2
 800100e:	0018      	movs	r0, r3
 8001010:	f001 f9e0 	bl	80023d4 <HAL_ADC_ConfigChannel>
 8001014:	1e03      	subs	r3, r0, #0
 8001016:	d001      	beq.n	800101c <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 8001018:	f000 fbd2 	bl	80017c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800101c:	1d3b      	adds	r3, r7, #4
 800101e:	2205      	movs	r2, #5
 8001020:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001022:	1d3a      	adds	r2, r7, #4
 8001024:	4b54      	ldr	r3, [pc, #336]	; (8001178 <MX_ADC_Init+0x250>)
 8001026:	0011      	movs	r1, r2
 8001028:	0018      	movs	r0, r3
 800102a:	f001 f9d3 	bl	80023d4 <HAL_ADC_ConfigChannel>
 800102e:	1e03      	subs	r3, r0, #0
 8001030:	d001      	beq.n	8001036 <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 8001032:	f000 fbc5 	bl	80017c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001036:	1d3b      	adds	r3, r7, #4
 8001038:	2206      	movs	r2, #6
 800103a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800103c:	1d3a      	adds	r2, r7, #4
 800103e:	4b4e      	ldr	r3, [pc, #312]	; (8001178 <MX_ADC_Init+0x250>)
 8001040:	0011      	movs	r1, r2
 8001042:	0018      	movs	r0, r3
 8001044:	f001 f9c6 	bl	80023d4 <HAL_ADC_ConfigChannel>
 8001048:	1e03      	subs	r3, r0, #0
 800104a:	d001      	beq.n	8001050 <MX_ADC_Init+0x128>
  {
    Error_Handler();
 800104c:	f000 fbb8 	bl	80017c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	2207      	movs	r2, #7
 8001054:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001056:	1d3a      	adds	r2, r7, #4
 8001058:	4b47      	ldr	r3, [pc, #284]	; (8001178 <MX_ADC_Init+0x250>)
 800105a:	0011      	movs	r1, r2
 800105c:	0018      	movs	r0, r3
 800105e:	f001 f9b9 	bl	80023d4 <HAL_ADC_ConfigChannel>
 8001062:	1e03      	subs	r3, r0, #0
 8001064:	d001      	beq.n	800106a <MX_ADC_Init+0x142>
  {
    Error_Handler();
 8001066:	f000 fbab 	bl	80017c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	2208      	movs	r2, #8
 800106e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001070:	1d3a      	adds	r2, r7, #4
 8001072:	4b41      	ldr	r3, [pc, #260]	; (8001178 <MX_ADC_Init+0x250>)
 8001074:	0011      	movs	r1, r2
 8001076:	0018      	movs	r0, r3
 8001078:	f001 f9ac 	bl	80023d4 <HAL_ADC_ConfigChannel>
 800107c:	1e03      	subs	r3, r0, #0
 800107e:	d001      	beq.n	8001084 <MX_ADC_Init+0x15c>
  {
    Error_Handler();
 8001080:	f000 fb9e 	bl	80017c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	2209      	movs	r2, #9
 8001088:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800108a:	1d3a      	adds	r2, r7, #4
 800108c:	4b3a      	ldr	r3, [pc, #232]	; (8001178 <MX_ADC_Init+0x250>)
 800108e:	0011      	movs	r1, r2
 8001090:	0018      	movs	r0, r3
 8001092:	f001 f99f 	bl	80023d4 <HAL_ADC_ConfigChannel>
 8001096:	1e03      	subs	r3, r0, #0
 8001098:	d001      	beq.n	800109e <MX_ADC_Init+0x176>
  {
    Error_Handler();
 800109a:	f000 fb91 	bl	80017c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	220a      	movs	r2, #10
 80010a2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010a4:	1d3a      	adds	r2, r7, #4
 80010a6:	4b34      	ldr	r3, [pc, #208]	; (8001178 <MX_ADC_Init+0x250>)
 80010a8:	0011      	movs	r1, r2
 80010aa:	0018      	movs	r0, r3
 80010ac:	f001 f992 	bl	80023d4 <HAL_ADC_ConfigChannel>
 80010b0:	1e03      	subs	r3, r0, #0
 80010b2:	d001      	beq.n	80010b8 <MX_ADC_Init+0x190>
  {
    Error_Handler();
 80010b4:	f000 fb84 	bl	80017c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80010b8:	1d3b      	adds	r3, r7, #4
 80010ba:	220b      	movs	r2, #11
 80010bc:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010be:	1d3a      	adds	r2, r7, #4
 80010c0:	4b2d      	ldr	r3, [pc, #180]	; (8001178 <MX_ADC_Init+0x250>)
 80010c2:	0011      	movs	r1, r2
 80010c4:	0018      	movs	r0, r3
 80010c6:	f001 f985 	bl	80023d4 <HAL_ADC_ConfigChannel>
 80010ca:	1e03      	subs	r3, r0, #0
 80010cc:	d001      	beq.n	80010d2 <MX_ADC_Init+0x1aa>
  {
    Error_Handler();
 80010ce:	f000 fb77 	bl	80017c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	220c      	movs	r2, #12
 80010d6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010d8:	1d3a      	adds	r2, r7, #4
 80010da:	4b27      	ldr	r3, [pc, #156]	; (8001178 <MX_ADC_Init+0x250>)
 80010dc:	0011      	movs	r1, r2
 80010de:	0018      	movs	r0, r3
 80010e0:	f001 f978 	bl	80023d4 <HAL_ADC_ConfigChannel>
 80010e4:	1e03      	subs	r3, r0, #0
 80010e6:	d001      	beq.n	80010ec <MX_ADC_Init+0x1c4>
  {
    Error_Handler();
 80010e8:	f000 fb6a 	bl	80017c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	220d      	movs	r2, #13
 80010f0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010f2:	1d3a      	adds	r2, r7, #4
 80010f4:	4b20      	ldr	r3, [pc, #128]	; (8001178 <MX_ADC_Init+0x250>)
 80010f6:	0011      	movs	r1, r2
 80010f8:	0018      	movs	r0, r3
 80010fa:	f001 f96b 	bl	80023d4 <HAL_ADC_ConfigChannel>
 80010fe:	1e03      	subs	r3, r0, #0
 8001100:	d001      	beq.n	8001106 <MX_ADC_Init+0x1de>
  {
    Error_Handler();
 8001102:	f000 fb5d 	bl	80017c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	220e      	movs	r2, #14
 800110a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800110c:	1d3a      	adds	r2, r7, #4
 800110e:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <MX_ADC_Init+0x250>)
 8001110:	0011      	movs	r1, r2
 8001112:	0018      	movs	r0, r3
 8001114:	f001 f95e 	bl	80023d4 <HAL_ADC_ConfigChannel>
 8001118:	1e03      	subs	r3, r0, #0
 800111a:	d001      	beq.n	8001120 <MX_ADC_Init+0x1f8>
  {
    Error_Handler();
 800111c:	f000 fb50 	bl	80017c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	220f      	movs	r2, #15
 8001124:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001126:	1d3a      	adds	r2, r7, #4
 8001128:	4b13      	ldr	r3, [pc, #76]	; (8001178 <MX_ADC_Init+0x250>)
 800112a:	0011      	movs	r1, r2
 800112c:	0018      	movs	r0, r3
 800112e:	f001 f951 	bl	80023d4 <HAL_ADC_ConfigChannel>
 8001132:	1e03      	subs	r3, r0, #0
 8001134:	d001      	beq.n	800113a <MX_ADC_Init+0x212>
  {
    Error_Handler();
 8001136:	f000 fb43 	bl	80017c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	2210      	movs	r2, #16
 800113e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001140:	1d3a      	adds	r2, r7, #4
 8001142:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <MX_ADC_Init+0x250>)
 8001144:	0011      	movs	r1, r2
 8001146:	0018      	movs	r0, r3
 8001148:	f001 f944 	bl	80023d4 <HAL_ADC_ConfigChannel>
 800114c:	1e03      	subs	r3, r0, #0
 800114e:	d001      	beq.n	8001154 <MX_ADC_Init+0x22c>
  {
    Error_Handler();
 8001150:	f000 fb36 	bl	80017c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	2211      	movs	r2, #17
 8001158:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800115a:	1d3a      	adds	r2, r7, #4
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <MX_ADC_Init+0x250>)
 800115e:	0011      	movs	r1, r2
 8001160:	0018      	movs	r0, r3
 8001162:	f001 f937 	bl	80023d4 <HAL_ADC_ConfigChannel>
 8001166:	1e03      	subs	r3, r0, #0
 8001168:	d001      	beq.n	800116e <MX_ADC_Init+0x246>
  {
    Error_Handler();
 800116a:	f000 fb29 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	46bd      	mov	sp, r7
 8001172:	b004      	add	sp, #16
 8001174:	bd80      	pop	{r7, pc}
 8001176:	46c0      	nop			; (mov r8, r8)
 8001178:	200000b4 	.word	0x200000b4
 800117c:	40012400 	.word	0x40012400

08001180 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */
  step = 0;
 8001186:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <MX_DAC1_Init+0x58>)
 8001188:	2200      	movs	r2, #0
 800118a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800118c:	003b      	movs	r3, r7
 800118e:	0018      	movs	r0, r3
 8001190:	2308      	movs	r3, #8
 8001192:	001a      	movs	r2, r3
 8001194:	2100      	movs	r1, #0
 8001196:	f006 fae3 	bl	8007760 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC;
 800119a:	4b10      	ldr	r3, [pc, #64]	; (80011dc <MX_DAC1_Init+0x5c>)
 800119c:	4a10      	ldr	r2, [pc, #64]	; (80011e0 <MX_DAC1_Init+0x60>)
 800119e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80011a0:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <MX_DAC1_Init+0x5c>)
 80011a2:	0018      	movs	r0, r3
 80011a4:	f001 fc0a 	bl	80029bc <HAL_DAC_Init>
 80011a8:	1e03      	subs	r3, r0, #0
 80011aa:	d001      	beq.n	80011b0 <MX_DAC1_Init+0x30>
  {
    Error_Handler();
 80011ac:	f000 fb08 	bl	80017c0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80011b0:	003b      	movs	r3, r7
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011b6:	003b      	movs	r3, r7
 80011b8:	2200      	movs	r2, #0
 80011ba:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011bc:	0039      	movs	r1, r7
 80011be:	4b07      	ldr	r3, [pc, #28]	; (80011dc <MX_DAC1_Init+0x5c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	0018      	movs	r0, r3
 80011c4:	f001 fc1d 	bl	8002a02 <HAL_DAC_ConfigChannel>
 80011c8:	1e03      	subs	r3, r0, #0
 80011ca:	d001      	beq.n	80011d0 <MX_DAC1_Init+0x50>
  {
    Error_Handler();
 80011cc:	f000 faf8 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80011d0:	46c0      	nop			; (mov r8, r8)
 80011d2:	46bd      	mov	sp, r7
 80011d4:	b002      	add	sp, #8
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000402 	.word	0x20000402
 80011dc:	20000138 	.word	0x20000138
 80011e0:	40007400 	.word	0x40007400

080011e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011e8:	4b1b      	ldr	r3, [pc, #108]	; (8001258 <MX_I2C1_Init+0x74>)
 80011ea:	4a1c      	ldr	r2, [pc, #112]	; (800125c <MX_I2C1_Init+0x78>)
 80011ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80011ee:	4b1a      	ldr	r3, [pc, #104]	; (8001258 <MX_I2C1_Init+0x74>)
 80011f0:	4a1b      	ldr	r2, [pc, #108]	; (8001260 <MX_I2C1_Init+0x7c>)
 80011f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011f4:	4b18      	ldr	r3, [pc, #96]	; (8001258 <MX_I2C1_Init+0x74>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011fa:	4b17      	ldr	r3, [pc, #92]	; (8001258 <MX_I2C1_Init+0x74>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001200:	4b15      	ldr	r3, [pc, #84]	; (8001258 <MX_I2C1_Init+0x74>)
 8001202:	2200      	movs	r2, #0
 8001204:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001206:	4b14      	ldr	r3, [pc, #80]	; (8001258 <MX_I2C1_Init+0x74>)
 8001208:	2200      	movs	r2, #0
 800120a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <MX_I2C1_Init+0x74>)
 800120e:	2200      	movs	r2, #0
 8001210:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001212:	4b11      	ldr	r3, [pc, #68]	; (8001258 <MX_I2C1_Init+0x74>)
 8001214:	2200      	movs	r2, #0
 8001216:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001218:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <MX_I2C1_Init+0x74>)
 800121a:	2200      	movs	r2, #0
 800121c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800121e:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <MX_I2C1_Init+0x74>)
 8001220:	0018      	movs	r0, r3
 8001222:	f002 f825 	bl	8003270 <HAL_I2C_Init>
 8001226:	1e03      	subs	r3, r0, #0
 8001228:	d001      	beq.n	800122e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800122a:	f000 fac9 	bl	80017c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800122e:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <MX_I2C1_Init+0x74>)
 8001230:	2100      	movs	r1, #0
 8001232:	0018      	movs	r0, r3
 8001234:	f002 fcba 	bl	8003bac <HAL_I2CEx_ConfigAnalogFilter>
 8001238:	1e03      	subs	r3, r0, #0
 800123a:	d001      	beq.n	8001240 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800123c:	f000 fac0 	bl	80017c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <MX_I2C1_Init+0x74>)
 8001242:	2100      	movs	r1, #0
 8001244:	0018      	movs	r0, r3
 8001246:	f002 fcfd 	bl	8003c44 <HAL_I2CEx_ConfigDigitalFilter>
 800124a:	1e03      	subs	r3, r0, #0
 800124c:	d001      	beq.n	8001252 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800124e:	f000 fab7 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001252:	46c0      	nop			; (mov r8, r8)
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	2000014c 	.word	0x2000014c
 800125c:	40005400 	.word	0x40005400
 8001260:	2000090e 	.word	0x2000090e

08001264 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001268:	4b1c      	ldr	r3, [pc, #112]	; (80012dc <MX_SPI1_Init+0x78>)
 800126a:	4a1d      	ldr	r2, [pc, #116]	; (80012e0 <MX_SPI1_Init+0x7c>)
 800126c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800126e:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <MX_SPI1_Init+0x78>)
 8001270:	2282      	movs	r2, #130	; 0x82
 8001272:	0052      	lsls	r2, r2, #1
 8001274:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001276:	4b19      	ldr	r3, [pc, #100]	; (80012dc <MX_SPI1_Init+0x78>)
 8001278:	2280      	movs	r2, #128	; 0x80
 800127a:	00d2      	lsls	r2, r2, #3
 800127c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800127e:	4b17      	ldr	r3, [pc, #92]	; (80012dc <MX_SPI1_Init+0x78>)
 8001280:	22f0      	movs	r2, #240	; 0xf0
 8001282:	0112      	lsls	r2, r2, #4
 8001284:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001286:	4b15      	ldr	r3, [pc, #84]	; (80012dc <MX_SPI1_Init+0x78>)
 8001288:	2200      	movs	r2, #0
 800128a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800128c:	4b13      	ldr	r3, [pc, #76]	; (80012dc <MX_SPI1_Init+0x78>)
 800128e:	2200      	movs	r2, #0
 8001290:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001292:	4b12      	ldr	r3, [pc, #72]	; (80012dc <MX_SPI1_Init+0x78>)
 8001294:	2280      	movs	r2, #128	; 0x80
 8001296:	0092      	lsls	r2, r2, #2
 8001298:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <MX_SPI1_Init+0x78>)
 800129c:	2230      	movs	r2, #48	; 0x30
 800129e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012a0:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <MX_SPI1_Init+0x78>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012a6:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <MX_SPI1_Init+0x78>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <MX_SPI1_Init+0x78>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80012b2:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <MX_SPI1_Init+0x78>)
 80012b4:	2207      	movs	r2, #7
 80012b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012b8:	4b08      	ldr	r3, [pc, #32]	; (80012dc <MX_SPI1_Init+0x78>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012be:	4b07      	ldr	r3, [pc, #28]	; (80012dc <MX_SPI1_Init+0x78>)
 80012c0:	2208      	movs	r2, #8
 80012c2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <MX_SPI1_Init+0x78>)
 80012c6:	0018      	movs	r0, r3
 80012c8:	f003 fa86 	bl	80047d8 <HAL_SPI_Init>
 80012cc:	1e03      	subs	r3, r0, #0
 80012ce:	d001      	beq.n	80012d4 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 80012d0:	f000 fa76 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012d4:	46c0      	nop			; (mov r8, r8)
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	46c0      	nop			; (mov r8, r8)
 80012dc:	20000198 	.word	0x20000198
 80012e0:	40013000 	.word	0x40013000

080012e4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80012e8:	4b1c      	ldr	r3, [pc, #112]	; (800135c <MX_SPI2_Init+0x78>)
 80012ea:	4a1d      	ldr	r2, [pc, #116]	; (8001360 <MX_SPI2_Init+0x7c>)
 80012ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80012ee:	4b1b      	ldr	r3, [pc, #108]	; (800135c <MX_SPI2_Init+0x78>)
 80012f0:	2282      	movs	r2, #130	; 0x82
 80012f2:	0052      	lsls	r2, r2, #1
 80012f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80012f6:	4b19      	ldr	r3, [pc, #100]	; (800135c <MX_SPI2_Init+0x78>)
 80012f8:	2280      	movs	r2, #128	; 0x80
 80012fa:	00d2      	lsls	r2, r2, #3
 80012fc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80012fe:	4b17      	ldr	r3, [pc, #92]	; (800135c <MX_SPI2_Init+0x78>)
 8001300:	22f0      	movs	r2, #240	; 0xf0
 8001302:	0112      	lsls	r2, r2, #4
 8001304:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001306:	4b15      	ldr	r3, [pc, #84]	; (800135c <MX_SPI2_Init+0x78>)
 8001308:	2200      	movs	r2, #0
 800130a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800130c:	4b13      	ldr	r3, [pc, #76]	; (800135c <MX_SPI2_Init+0x78>)
 800130e:	2200      	movs	r2, #0
 8001310:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001312:	4b12      	ldr	r3, [pc, #72]	; (800135c <MX_SPI2_Init+0x78>)
 8001314:	2280      	movs	r2, #128	; 0x80
 8001316:	0092      	lsls	r2, r2, #2
 8001318:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <MX_SPI2_Init+0x78>)
 800131c:	2230      	movs	r2, #48	; 0x30
 800131e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001320:	4b0e      	ldr	r3, [pc, #56]	; (800135c <MX_SPI2_Init+0x78>)
 8001322:	2200      	movs	r2, #0
 8001324:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001326:	4b0d      	ldr	r3, [pc, #52]	; (800135c <MX_SPI2_Init+0x78>)
 8001328:	2200      	movs	r2, #0
 800132a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800132c:	4b0b      	ldr	r3, [pc, #44]	; (800135c <MX_SPI2_Init+0x78>)
 800132e:	2200      	movs	r2, #0
 8001330:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001332:	4b0a      	ldr	r3, [pc, #40]	; (800135c <MX_SPI2_Init+0x78>)
 8001334:	2207      	movs	r2, #7
 8001336:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001338:	4b08      	ldr	r3, [pc, #32]	; (800135c <MX_SPI2_Init+0x78>)
 800133a:	2200      	movs	r2, #0
 800133c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800133e:	4b07      	ldr	r3, [pc, #28]	; (800135c <MX_SPI2_Init+0x78>)
 8001340:	2208      	movs	r2, #8
 8001342:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001344:	4b05      	ldr	r3, [pc, #20]	; (800135c <MX_SPI2_Init+0x78>)
 8001346:	0018      	movs	r0, r3
 8001348:	f003 fa46 	bl	80047d8 <HAL_SPI_Init>
 800134c:	1e03      	subs	r3, r0, #0
 800134e:	d001      	beq.n	8001354 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8001350:	f000 fa36 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001354:	46c0      	nop			; (mov r8, r8)
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	46c0      	nop			; (mov r8, r8)
 800135c:	200001fc 	.word	0x200001fc
 8001360:	40003800 	.word	0x40003800

08001364 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b096      	sub	sp, #88	; 0x58
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800136a:	2348      	movs	r3, #72	; 0x48
 800136c:	18fb      	adds	r3, r7, r3
 800136e:	0018      	movs	r0, r3
 8001370:	2310      	movs	r3, #16
 8001372:	001a      	movs	r2, r3
 8001374:	2100      	movs	r1, #0
 8001376:	f006 f9f3 	bl	8007760 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800137a:	2340      	movs	r3, #64	; 0x40
 800137c:	18fb      	adds	r3, r7, r3
 800137e:	0018      	movs	r0, r3
 8001380:	2308      	movs	r3, #8
 8001382:	001a      	movs	r2, r3
 8001384:	2100      	movs	r1, #0
 8001386:	f006 f9eb 	bl	8007760 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800138a:	2324      	movs	r3, #36	; 0x24
 800138c:	18fb      	adds	r3, r7, r3
 800138e:	0018      	movs	r0, r3
 8001390:	231c      	movs	r3, #28
 8001392:	001a      	movs	r2, r3
 8001394:	2100      	movs	r1, #0
 8001396:	f006 f9e3 	bl	8007760 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	0018      	movs	r0, r3
 800139e:	2320      	movs	r3, #32
 80013a0:	001a      	movs	r2, r3
 80013a2:	2100      	movs	r1, #0
 80013a4:	f006 f9dc 	bl	8007760 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013a8:	4b46      	ldr	r3, [pc, #280]	; (80014c4 <MX_TIM1_Init+0x160>)
 80013aa:	4a47      	ldr	r2, [pc, #284]	; (80014c8 <MX_TIM1_Init+0x164>)
 80013ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100 - 1;
 80013ae:	4b45      	ldr	r3, [pc, #276]	; (80014c4 <MX_TIM1_Init+0x160>)
 80013b0:	2263      	movs	r2, #99	; 0x63
 80013b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b4:	4b43      	ldr	r3, [pc, #268]	; (80014c4 <MX_TIM1_Init+0x160>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 48000 - 1;
 80013ba:	4b42      	ldr	r3, [pc, #264]	; (80014c4 <MX_TIM1_Init+0x160>)
 80013bc:	4a43      	ldr	r2, [pc, #268]	; (80014cc <MX_TIM1_Init+0x168>)
 80013be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c0:	4b40      	ldr	r3, [pc, #256]	; (80014c4 <MX_TIM1_Init+0x160>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013c6:	4b3f      	ldr	r3, [pc, #252]	; (80014c4 <MX_TIM1_Init+0x160>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013cc:	4b3d      	ldr	r3, [pc, #244]	; (80014c4 <MX_TIM1_Init+0x160>)
 80013ce:	2280      	movs	r2, #128	; 0x80
 80013d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013d2:	4b3c      	ldr	r3, [pc, #240]	; (80014c4 <MX_TIM1_Init+0x160>)
 80013d4:	0018      	movs	r0, r3
 80013d6:	f003 fd85 	bl	8004ee4 <HAL_TIM_Base_Init>
 80013da:	1e03      	subs	r3, r0, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80013de:	f000 f9ef 	bl	80017c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e2:	2148      	movs	r1, #72	; 0x48
 80013e4:	187b      	adds	r3, r7, r1
 80013e6:	2280      	movs	r2, #128	; 0x80
 80013e8:	0152      	lsls	r2, r2, #5
 80013ea:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013ec:	187a      	adds	r2, r7, r1
 80013ee:	4b35      	ldr	r3, [pc, #212]	; (80014c4 <MX_TIM1_Init+0x160>)
 80013f0:	0011      	movs	r1, r2
 80013f2:	0018      	movs	r0, r3
 80013f4:	f004 f9be 	bl	8005774 <HAL_TIM_ConfigClockSource>
 80013f8:	1e03      	subs	r3, r0, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80013fc:	f000 f9e0 	bl	80017c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001400:	4b30      	ldr	r3, [pc, #192]	; (80014c4 <MX_TIM1_Init+0x160>)
 8001402:	0018      	movs	r0, r3
 8001404:	f003 ff82 	bl	800530c <HAL_TIM_PWM_Init>
 8001408:	1e03      	subs	r3, r0, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 800140c:	f000 f9d8 	bl	80017c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001410:	2140      	movs	r1, #64	; 0x40
 8001412:	187b      	adds	r3, r7, r1
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001418:	187b      	adds	r3, r7, r1
 800141a:	2200      	movs	r2, #0
 800141c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800141e:	187a      	adds	r2, r7, r1
 8001420:	4b28      	ldr	r3, [pc, #160]	; (80014c4 <MX_TIM1_Init+0x160>)
 8001422:	0011      	movs	r1, r2
 8001424:	0018      	movs	r0, r3
 8001426:	f004 fdd3 	bl	8005fd0 <HAL_TIMEx_MasterConfigSynchronization>
 800142a:	1e03      	subs	r3, r0, #0
 800142c:	d001      	beq.n	8001432 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 800142e:	f000 f9c7 	bl	80017c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001432:	2124      	movs	r1, #36	; 0x24
 8001434:	187b      	adds	r3, r7, r1
 8001436:	2260      	movs	r2, #96	; 0x60
 8001438:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 480 -1;
 800143a:	187b      	adds	r3, r7, r1
 800143c:	22e0      	movs	r2, #224	; 0xe0
 800143e:	32ff      	adds	r2, #255	; 0xff
 8001440:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001442:	187b      	adds	r3, r7, r1
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001448:	187b      	adds	r3, r7, r1
 800144a:	2200      	movs	r2, #0
 800144c:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800144e:	187b      	adds	r3, r7, r1
 8001450:	2200      	movs	r2, #0
 8001452:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001454:	187b      	adds	r3, r7, r1
 8001456:	2200      	movs	r2, #0
 8001458:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800145a:	187b      	adds	r3, r7, r1
 800145c:	2200      	movs	r2, #0
 800145e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001460:	1879      	adds	r1, r7, r1
 8001462:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <MX_TIM1_Init+0x160>)
 8001464:	2200      	movs	r2, #0
 8001466:	0018      	movs	r0, r3
 8001468:	f004 f8be 	bl	80055e8 <HAL_TIM_PWM_ConfigChannel>
 800146c:	1e03      	subs	r3, r0, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001470:	f000 f9a6 	bl	80017c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	2200      	movs	r2, #0
 800147e:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	2200      	movs	r2, #0
 800148a:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	2200      	movs	r2, #0
 8001490:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001492:	1d3b      	adds	r3, r7, #4
 8001494:	2280      	movs	r2, #128	; 0x80
 8001496:	0192      	lsls	r2, r2, #6
 8001498:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	2200      	movs	r2, #0
 800149e:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014a0:	1d3a      	adds	r2, r7, #4
 80014a2:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <MX_TIM1_Init+0x160>)
 80014a4:	0011      	movs	r1, r2
 80014a6:	0018      	movs	r0, r3
 80014a8:	f004 fdf0 	bl	800608c <HAL_TIMEx_ConfigBreakDeadTime>
 80014ac:	1e03      	subs	r3, r0, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 80014b0:	f000 f986 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014b4:	4b03      	ldr	r3, [pc, #12]	; (80014c4 <MX_TIM1_Init+0x160>)
 80014b6:	0018      	movs	r0, r3
 80014b8:	f000 fbc2 	bl	8001c40 <HAL_TIM_MspPostInit>

}
 80014bc:	46c0      	nop			; (mov r8, r8)
 80014be:	46bd      	mov	sp, r7
 80014c0:	b016      	add	sp, #88	; 0x58
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20000260 	.word	0x20000260
 80014c8:	40012c00 	.word	0x40012c00
 80014cc:	0000bb7f 	.word	0x0000bb7f

080014d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08e      	sub	sp, #56	; 0x38
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014d6:	2328      	movs	r3, #40	; 0x28
 80014d8:	18fb      	adds	r3, r7, r3
 80014da:	0018      	movs	r0, r3
 80014dc:	2310      	movs	r3, #16
 80014de:	001a      	movs	r2, r3
 80014e0:	2100      	movs	r1, #0
 80014e2:	f006 f93d 	bl	8007760 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e6:	2320      	movs	r3, #32
 80014e8:	18fb      	adds	r3, r7, r3
 80014ea:	0018      	movs	r0, r3
 80014ec:	2308      	movs	r3, #8
 80014ee:	001a      	movs	r2, r3
 80014f0:	2100      	movs	r1, #0
 80014f2:	f006 f935 	bl	8007760 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014f6:	1d3b      	adds	r3, r7, #4
 80014f8:	0018      	movs	r0, r3
 80014fa:	231c      	movs	r3, #28
 80014fc:	001a      	movs	r2, r3
 80014fe:	2100      	movs	r1, #0
 8001500:	f006 f92e 	bl	8007760 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001504:	4b30      	ldr	r3, [pc, #192]	; (80015c8 <MX_TIM2_Init+0xf8>)
 8001506:	2280      	movs	r2, #128	; 0x80
 8001508:	05d2      	lsls	r2, r2, #23
 800150a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000 - 1;
 800150c:	4b2e      	ldr	r3, [pc, #184]	; (80015c8 <MX_TIM2_Init+0xf8>)
 800150e:	4a2f      	ldr	r2, [pc, #188]	; (80015cc <MX_TIM2_Init+0xfc>)
 8001510:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001512:	4b2d      	ldr	r3, [pc, #180]	; (80015c8 <MX_TIM2_Init+0xf8>)
 8001514:	2200      	movs	r2, #0
 8001516:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 300 - 1;
 8001518:	4b2b      	ldr	r3, [pc, #172]	; (80015c8 <MX_TIM2_Init+0xf8>)
 800151a:	222c      	movs	r2, #44	; 0x2c
 800151c:	32ff      	adds	r2, #255	; 0xff
 800151e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001520:	4b29      	ldr	r3, [pc, #164]	; (80015c8 <MX_TIM2_Init+0xf8>)
 8001522:	2200      	movs	r2, #0
 8001524:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001526:	4b28      	ldr	r3, [pc, #160]	; (80015c8 <MX_TIM2_Init+0xf8>)
 8001528:	2280      	movs	r2, #128	; 0x80
 800152a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800152c:	4b26      	ldr	r3, [pc, #152]	; (80015c8 <MX_TIM2_Init+0xf8>)
 800152e:	0018      	movs	r0, r3
 8001530:	f003 fcd8 	bl	8004ee4 <HAL_TIM_Base_Init>
 8001534:	1e03      	subs	r3, r0, #0
 8001536:	d001      	beq.n	800153c <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8001538:	f000 f942 	bl	80017c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800153c:	2128      	movs	r1, #40	; 0x28
 800153e:	187b      	adds	r3, r7, r1
 8001540:	2280      	movs	r2, #128	; 0x80
 8001542:	0152      	lsls	r2, r2, #5
 8001544:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001546:	187a      	adds	r2, r7, r1
 8001548:	4b1f      	ldr	r3, [pc, #124]	; (80015c8 <MX_TIM2_Init+0xf8>)
 800154a:	0011      	movs	r1, r2
 800154c:	0018      	movs	r0, r3
 800154e:	f004 f911 	bl	8005774 <HAL_TIM_ConfigClockSource>
 8001552:	1e03      	subs	r3, r0, #0
 8001554:	d001      	beq.n	800155a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001556:	f000 f933 	bl	80017c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800155a:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <MX_TIM2_Init+0xf8>)
 800155c:	0018      	movs	r0, r3
 800155e:	f003 fed5 	bl	800530c <HAL_TIM_PWM_Init>
 8001562:	1e03      	subs	r3, r0, #0
 8001564:	d001      	beq.n	800156a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001566:	f000 f92b 	bl	80017c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800156a:	2120      	movs	r1, #32
 800156c:	187b      	adds	r3, r7, r1
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001572:	187b      	adds	r3, r7, r1
 8001574:	2200      	movs	r2, #0
 8001576:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001578:	187a      	adds	r2, r7, r1
 800157a:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <MX_TIM2_Init+0xf8>)
 800157c:	0011      	movs	r1, r2
 800157e:	0018      	movs	r0, r3
 8001580:	f004 fd26 	bl	8005fd0 <HAL_TIMEx_MasterConfigSynchronization>
 8001584:	1e03      	subs	r3, r0, #0
 8001586:	d001      	beq.n	800158c <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8001588:	f000 f91a 	bl	80017c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	2260      	movs	r2, #96	; 0x60
 8001590:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 30 - 1;
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	221d      	movs	r2, #29
 8001596:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800159e:	1d3b      	adds	r3, r7, #4
 80015a0:	2200      	movs	r2, #0
 80015a2:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015a4:	1d39      	adds	r1, r7, #4
 80015a6:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <MX_TIM2_Init+0xf8>)
 80015a8:	220c      	movs	r2, #12
 80015aa:	0018      	movs	r0, r3
 80015ac:	f004 f81c 	bl	80055e8 <HAL_TIM_PWM_ConfigChannel>
 80015b0:	1e03      	subs	r3, r0, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 80015b4:	f000 f904 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015b8:	4b03      	ldr	r3, [pc, #12]	; (80015c8 <MX_TIM2_Init+0xf8>)
 80015ba:	0018      	movs	r0, r3
 80015bc:	f000 fb40 	bl	8001c40 <HAL_TIM_MspPostInit>

}
 80015c0:	46c0      	nop			; (mov r8, r8)
 80015c2:	46bd      	mov	sp, r7
 80015c4:	b00e      	add	sp, #56	; 0x38
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	200002a8 	.word	0x200002a8
 80015cc:	000003e7 	.word	0x000003e7

080015d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */
  erpa_seq = 0;
 80015d4:	4b19      	ldr	r3, [pc, #100]	; (800163c <MX_USART1_UART_Init+0x6c>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	801a      	strh	r2, [r3, #0]
  pmt_seq = 0;
 80015da:	4b19      	ldr	r3, [pc, #100]	; (8001640 <MX_USART1_UART_Init+0x70>)
 80015dc:	2200      	movs	r2, #0
 80015de:	801a      	strh	r2, [r3, #0]
  hk_seq = 0;
 80015e0:	4b18      	ldr	r3, [pc, #96]	; (8001644 <MX_USART1_UART_Init+0x74>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	801a      	strh	r2, [r3, #0]
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015e6:	4b18      	ldr	r3, [pc, #96]	; (8001648 <MX_USART1_UART_Init+0x78>)
 80015e8:	4a18      	ldr	r2, [pc, #96]	; (800164c <MX_USART1_UART_Init+0x7c>)
 80015ea:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80015ec:	4b16      	ldr	r3, [pc, #88]	; (8001648 <MX_USART1_UART_Init+0x78>)
 80015ee:	22e1      	movs	r2, #225	; 0xe1
 80015f0:	0212      	lsls	r2, r2, #8
 80015f2:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015f4:	4b14      	ldr	r3, [pc, #80]	; (8001648 <MX_USART1_UART_Init+0x78>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015fa:	4b13      	ldr	r3, [pc, #76]	; (8001648 <MX_USART1_UART_Init+0x78>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001600:	4b11      	ldr	r3, [pc, #68]	; (8001648 <MX_USART1_UART_Init+0x78>)
 8001602:	2200      	movs	r2, #0
 8001604:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001606:	4b10      	ldr	r3, [pc, #64]	; (8001648 <MX_USART1_UART_Init+0x78>)
 8001608:	220c      	movs	r2, #12
 800160a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800160c:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <MX_USART1_UART_Init+0x78>)
 800160e:	2200      	movs	r2, #0
 8001610:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001612:	4b0d      	ldr	r3, [pc, #52]	; (8001648 <MX_USART1_UART_Init+0x78>)
 8001614:	2200      	movs	r2, #0
 8001616:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001618:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <MX_USART1_UART_Init+0x78>)
 800161a:	2200      	movs	r2, #0
 800161c:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800161e:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <MX_USART1_UART_Init+0x78>)
 8001620:	2200      	movs	r2, #0
 8001622:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001624:	4b08      	ldr	r3, [pc, #32]	; (8001648 <MX_USART1_UART_Init+0x78>)
 8001626:	0018      	movs	r0, r3
 8001628:	f004 fd9e 	bl	8006168 <HAL_UART_Init>
 800162c:	1e03      	subs	r3, r0, #0
 800162e:	d001      	beq.n	8001634 <MX_USART1_UART_Init+0x64>
  {
    Error_Handler();
 8001630:	f000 f8c6 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001634:	46c0      	nop			; (mov r8, r8)
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	46c0      	nop			; (mov r8, r8)
 800163c:	20000414 	.word	0x20000414
 8001640:	2000041e 	.word	0x2000041e
 8001644:	20000420 	.word	0x20000420
 8001648:	200002f0 	.word	0x200002f0
 800164c:	40013800 	.word	0x40013800

08001650 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001656:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <MX_DMA_Init+0x38>)
 8001658:	695a      	ldr	r2, [r3, #20]
 800165a:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <MX_DMA_Init+0x38>)
 800165c:	2101      	movs	r1, #1
 800165e:	430a      	orrs	r2, r1
 8001660:	615a      	str	r2, [r3, #20]
 8001662:	4b09      	ldr	r3, [pc, #36]	; (8001688 <MX_DMA_Init+0x38>)
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	2201      	movs	r2, #1
 8001668:	4013      	ands	r3, r2
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800166e:	2200      	movs	r2, #0
 8001670:	2100      	movs	r1, #0
 8001672:	2009      	movs	r0, #9
 8001674:	f001 f970 	bl	8002958 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001678:	2009      	movs	r0, #9
 800167a:	f001 f982 	bl	8002982 <HAL_NVIC_EnableIRQ>

}
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	46bd      	mov	sp, r7
 8001682:	b002      	add	sp, #8
 8001684:	bd80      	pop	{r7, pc}
 8001686:	46c0      	nop			; (mov r8, r8)
 8001688:	40021000 	.word	0x40021000

0800168c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800168c:	b590      	push	{r4, r7, lr}
 800168e:	b08b      	sub	sp, #44	; 0x2c
 8001690:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001692:	2414      	movs	r4, #20
 8001694:	193b      	adds	r3, r7, r4
 8001696:	0018      	movs	r0, r3
 8001698:	2314      	movs	r3, #20
 800169a:	001a      	movs	r2, r3
 800169c:	2100      	movs	r1, #0
 800169e:	f006 f85f 	bl	8007760 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a2:	4b43      	ldr	r3, [pc, #268]	; (80017b0 <MX_GPIO_Init+0x124>)
 80016a4:	695a      	ldr	r2, [r3, #20]
 80016a6:	4b42      	ldr	r3, [pc, #264]	; (80017b0 <MX_GPIO_Init+0x124>)
 80016a8:	2180      	movs	r1, #128	; 0x80
 80016aa:	0309      	lsls	r1, r1, #12
 80016ac:	430a      	orrs	r2, r1
 80016ae:	615a      	str	r2, [r3, #20]
 80016b0:	4b3f      	ldr	r3, [pc, #252]	; (80017b0 <MX_GPIO_Init+0x124>)
 80016b2:	695a      	ldr	r2, [r3, #20]
 80016b4:	2380      	movs	r3, #128	; 0x80
 80016b6:	031b      	lsls	r3, r3, #12
 80016b8:	4013      	ands	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
 80016bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016be:	4b3c      	ldr	r3, [pc, #240]	; (80017b0 <MX_GPIO_Init+0x124>)
 80016c0:	695a      	ldr	r2, [r3, #20]
 80016c2:	4b3b      	ldr	r3, [pc, #236]	; (80017b0 <MX_GPIO_Init+0x124>)
 80016c4:	2180      	movs	r1, #128	; 0x80
 80016c6:	03c9      	lsls	r1, r1, #15
 80016c8:	430a      	orrs	r2, r1
 80016ca:	615a      	str	r2, [r3, #20]
 80016cc:	4b38      	ldr	r3, [pc, #224]	; (80017b0 <MX_GPIO_Init+0x124>)
 80016ce:	695a      	ldr	r2, [r3, #20]
 80016d0:	2380      	movs	r3, #128	; 0x80
 80016d2:	03db      	lsls	r3, r3, #15
 80016d4:	4013      	ands	r3, r2
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016da:	4b35      	ldr	r3, [pc, #212]	; (80017b0 <MX_GPIO_Init+0x124>)
 80016dc:	695a      	ldr	r2, [r3, #20]
 80016de:	4b34      	ldr	r3, [pc, #208]	; (80017b0 <MX_GPIO_Init+0x124>)
 80016e0:	2180      	movs	r1, #128	; 0x80
 80016e2:	0289      	lsls	r1, r1, #10
 80016e4:	430a      	orrs	r2, r1
 80016e6:	615a      	str	r2, [r3, #20]
 80016e8:	4b31      	ldr	r3, [pc, #196]	; (80017b0 <MX_GPIO_Init+0x124>)
 80016ea:	695a      	ldr	r2, [r3, #20]
 80016ec:	2380      	movs	r3, #128	; 0x80
 80016ee:	029b      	lsls	r3, r3, #10
 80016f0:	4013      	ands	r3, r2
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f6:	4b2e      	ldr	r3, [pc, #184]	; (80017b0 <MX_GPIO_Init+0x124>)
 80016f8:	695a      	ldr	r2, [r3, #20]
 80016fa:	4b2d      	ldr	r3, [pc, #180]	; (80017b0 <MX_GPIO_Init+0x124>)
 80016fc:	2180      	movs	r1, #128	; 0x80
 80016fe:	02c9      	lsls	r1, r1, #11
 8001700:	430a      	orrs	r2, r1
 8001702:	615a      	str	r2, [r3, #20]
 8001704:	4b2a      	ldr	r3, [pc, #168]	; (80017b0 <MX_GPIO_Init+0x124>)
 8001706:	695a      	ldr	r2, [r3, #20]
 8001708:	2380      	movs	r3, #128	; 0x80
 800170a:	02db      	lsls	r3, r3, #11
 800170c:	4013      	ands	r3, r2
 800170e:	607b      	str	r3, [r7, #4]
 8001710:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001712:	239f      	movs	r3, #159	; 0x9f
 8001714:	019b      	lsls	r3, r3, #6
 8001716:	4827      	ldr	r0, [pc, #156]	; (80017b4 <MX_GPIO_Init+0x128>)
 8001718:	2200      	movs	r2, #0
 800171a:	0019      	movs	r1, r3
 800171c:	f001 fd8b 	bl	8003236 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001720:	4b25      	ldr	r3, [pc, #148]	; (80017b8 <MX_GPIO_Init+0x12c>)
 8001722:	2200      	movs	r2, #0
 8001724:	21c0      	movs	r1, #192	; 0xc0
 8001726:	0018      	movs	r0, r3
 8001728:	f001 fd85 	bl	8003236 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800172c:	4b23      	ldr	r3, [pc, #140]	; (80017bc <MX_GPIO_Init+0x130>)
 800172e:	2200      	movs	r2, #0
 8001730:	2160      	movs	r1, #96	; 0x60
 8001732:	0018      	movs	r0, r3
 8001734:	f001 fd7f 	bl	8003236 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001738:	193b      	adds	r3, r7, r4
 800173a:	229f      	movs	r2, #159	; 0x9f
 800173c:	0192      	lsls	r2, r2, #6
 800173e:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001740:	193b      	adds	r3, r7, r4
 8001742:	2201      	movs	r2, #1
 8001744:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	193b      	adds	r3, r7, r4
 8001748:	2200      	movs	r2, #0
 800174a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174c:	193b      	adds	r3, r7, r4
 800174e:	2200      	movs	r2, #0
 8001750:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001752:	193b      	adds	r3, r7, r4
 8001754:	4a17      	ldr	r2, [pc, #92]	; (80017b4 <MX_GPIO_Init+0x128>)
 8001756:	0019      	movs	r1, r3
 8001758:	0010      	movs	r0, r2
 800175a:	f001 fbdf 	bl	8002f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800175e:	193b      	adds	r3, r7, r4
 8001760:	22c0      	movs	r2, #192	; 0xc0
 8001762:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001764:	193b      	adds	r3, r7, r4
 8001766:	2201      	movs	r2, #1
 8001768:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	193b      	adds	r3, r7, r4
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001770:	193b      	adds	r3, r7, r4
 8001772:	2200      	movs	r2, #0
 8001774:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001776:	193b      	adds	r3, r7, r4
 8001778:	4a0f      	ldr	r2, [pc, #60]	; (80017b8 <MX_GPIO_Init+0x12c>)
 800177a:	0019      	movs	r1, r3
 800177c:	0010      	movs	r0, r2
 800177e:	f001 fbcd 	bl	8002f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001782:	0021      	movs	r1, r4
 8001784:	187b      	adds	r3, r7, r1
 8001786:	2260      	movs	r2, #96	; 0x60
 8001788:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178a:	187b      	adds	r3, r7, r1
 800178c:	2201      	movs	r2, #1
 800178e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	187b      	adds	r3, r7, r1
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001796:	187b      	adds	r3, r7, r1
 8001798:	2200      	movs	r2, #0
 800179a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179c:	187b      	adds	r3, r7, r1
 800179e:	4a07      	ldr	r2, [pc, #28]	; (80017bc <MX_GPIO_Init+0x130>)
 80017a0:	0019      	movs	r1, r3
 80017a2:	0010      	movs	r0, r2
 80017a4:	f001 fbba 	bl	8002f1c <HAL_GPIO_Init>

}
 80017a8:	46c0      	nop			; (mov r8, r8)
 80017aa:	46bd      	mov	sp, r7
 80017ac:	b00b      	add	sp, #44	; 0x2c
 80017ae:	bd90      	pop	{r4, r7, pc}
 80017b0:	40021000 	.word	0x40021000
 80017b4:	48000800 	.word	0x48000800
 80017b8:	48001400 	.word	0x48001400
 80017bc:	48000400 	.word	0x48000400

080017c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80017c4:	b672      	cpsid	i
}
 80017c6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017c8:	e7fe      	b.n	80017c8 <Error_Handler+0x8>
	...

080017cc <HAL_MspInit>:
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <HAL_MspInit+0x44>)
 80017d4:	699a      	ldr	r2, [r3, #24]
 80017d6:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <HAL_MspInit+0x44>)
 80017d8:	2101      	movs	r1, #1
 80017da:	430a      	orrs	r2, r1
 80017dc:	619a      	str	r2, [r3, #24]
 80017de:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <HAL_MspInit+0x44>)
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	2201      	movs	r2, #1
 80017e4:	4013      	ands	r3, r2
 80017e6:	607b      	str	r3, [r7, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4b09      	ldr	r3, [pc, #36]	; (8001810 <HAL_MspInit+0x44>)
 80017ec:	69da      	ldr	r2, [r3, #28]
 80017ee:	4b08      	ldr	r3, [pc, #32]	; (8001810 <HAL_MspInit+0x44>)
 80017f0:	2180      	movs	r1, #128	; 0x80
 80017f2:	0549      	lsls	r1, r1, #21
 80017f4:	430a      	orrs	r2, r1
 80017f6:	61da      	str	r2, [r3, #28]
 80017f8:	4b05      	ldr	r3, [pc, #20]	; (8001810 <HAL_MspInit+0x44>)
 80017fa:	69da      	ldr	r2, [r3, #28]
 80017fc:	2380      	movs	r3, #128	; 0x80
 80017fe:	055b      	lsls	r3, r3, #21
 8001800:	4013      	ands	r3, r2
 8001802:	603b      	str	r3, [r7, #0]
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	46c0      	nop			; (mov r8, r8)
 8001808:	46bd      	mov	sp, r7
 800180a:	b002      	add	sp, #8
 800180c:	bd80      	pop	{r7, pc}
 800180e:	46c0      	nop			; (mov r8, r8)
 8001810:	40021000 	.word	0x40021000

08001814 <HAL_ADC_MspInit>:
 8001814:	b590      	push	{r4, r7, lr}
 8001816:	b08d      	sub	sp, #52	; 0x34
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	241c      	movs	r4, #28
 800181e:	193b      	adds	r3, r7, r4
 8001820:	0018      	movs	r0, r3
 8001822:	2314      	movs	r3, #20
 8001824:	001a      	movs	r2, r3
 8001826:	2100      	movs	r1, #0
 8001828:	f005 ff9a 	bl	8007760 <memset>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a4a      	ldr	r2, [pc, #296]	; (800195c <HAL_ADC_MspInit+0x148>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d000      	beq.n	8001838 <HAL_ADC_MspInit+0x24>
 8001836:	e08d      	b.n	8001954 <HAL_ADC_MspInit+0x140>
 8001838:	4b49      	ldr	r3, [pc, #292]	; (8001960 <HAL_ADC_MspInit+0x14c>)
 800183a:	699a      	ldr	r2, [r3, #24]
 800183c:	4b48      	ldr	r3, [pc, #288]	; (8001960 <HAL_ADC_MspInit+0x14c>)
 800183e:	2180      	movs	r1, #128	; 0x80
 8001840:	0089      	lsls	r1, r1, #2
 8001842:	430a      	orrs	r2, r1
 8001844:	619a      	str	r2, [r3, #24]
 8001846:	4b46      	ldr	r3, [pc, #280]	; (8001960 <HAL_ADC_MspInit+0x14c>)
 8001848:	699a      	ldr	r2, [r3, #24]
 800184a:	2380      	movs	r3, #128	; 0x80
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4013      	ands	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	4b42      	ldr	r3, [pc, #264]	; (8001960 <HAL_ADC_MspInit+0x14c>)
 8001856:	695a      	ldr	r2, [r3, #20]
 8001858:	4b41      	ldr	r3, [pc, #260]	; (8001960 <HAL_ADC_MspInit+0x14c>)
 800185a:	2180      	movs	r1, #128	; 0x80
 800185c:	0309      	lsls	r1, r1, #12
 800185e:	430a      	orrs	r2, r1
 8001860:	615a      	str	r2, [r3, #20]
 8001862:	4b3f      	ldr	r3, [pc, #252]	; (8001960 <HAL_ADC_MspInit+0x14c>)
 8001864:	695a      	ldr	r2, [r3, #20]
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	031b      	lsls	r3, r3, #12
 800186a:	4013      	ands	r3, r2
 800186c:	617b      	str	r3, [r7, #20]
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	4b3b      	ldr	r3, [pc, #236]	; (8001960 <HAL_ADC_MspInit+0x14c>)
 8001872:	695a      	ldr	r2, [r3, #20]
 8001874:	4b3a      	ldr	r3, [pc, #232]	; (8001960 <HAL_ADC_MspInit+0x14c>)
 8001876:	2180      	movs	r1, #128	; 0x80
 8001878:	0289      	lsls	r1, r1, #10
 800187a:	430a      	orrs	r2, r1
 800187c:	615a      	str	r2, [r3, #20]
 800187e:	4b38      	ldr	r3, [pc, #224]	; (8001960 <HAL_ADC_MspInit+0x14c>)
 8001880:	695a      	ldr	r2, [r3, #20]
 8001882:	2380      	movs	r3, #128	; 0x80
 8001884:	029b      	lsls	r3, r3, #10
 8001886:	4013      	ands	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	4b34      	ldr	r3, [pc, #208]	; (8001960 <HAL_ADC_MspInit+0x14c>)
 800188e:	695a      	ldr	r2, [r3, #20]
 8001890:	4b33      	ldr	r3, [pc, #204]	; (8001960 <HAL_ADC_MspInit+0x14c>)
 8001892:	2180      	movs	r1, #128	; 0x80
 8001894:	02c9      	lsls	r1, r1, #11
 8001896:	430a      	orrs	r2, r1
 8001898:	615a      	str	r2, [r3, #20]
 800189a:	4b31      	ldr	r3, [pc, #196]	; (8001960 <HAL_ADC_MspInit+0x14c>)
 800189c:	695a      	ldr	r2, [r3, #20]
 800189e:	2380      	movs	r3, #128	; 0x80
 80018a0:	02db      	lsls	r3, r3, #11
 80018a2:	4013      	ands	r3, r2
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	193b      	adds	r3, r7, r4
 80018aa:	223f      	movs	r2, #63	; 0x3f
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	193b      	adds	r3, r7, r4
 80018b0:	2203      	movs	r2, #3
 80018b2:	605a      	str	r2, [r3, #4]
 80018b4:	193b      	adds	r3, r7, r4
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
 80018ba:	193b      	adds	r3, r7, r4
 80018bc:	4a29      	ldr	r2, [pc, #164]	; (8001964 <HAL_ADC_MspInit+0x150>)
 80018be:	0019      	movs	r1, r3
 80018c0:	0010      	movs	r0, r2
 80018c2:	f001 fb2b 	bl	8002f1c <HAL_GPIO_Init>
 80018c6:	193b      	adds	r3, r7, r4
 80018c8:	228f      	movs	r2, #143	; 0x8f
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	193b      	adds	r3, r7, r4
 80018ce:	2203      	movs	r2, #3
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	193b      	adds	r3, r7, r4
 80018d4:	2200      	movs	r2, #0
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	193a      	adds	r2, r7, r4
 80018da:	2390      	movs	r3, #144	; 0x90
 80018dc:	05db      	lsls	r3, r3, #23
 80018de:	0011      	movs	r1, r2
 80018e0:	0018      	movs	r0, r3
 80018e2:	f001 fb1b 	bl	8002f1c <HAL_GPIO_Init>
 80018e6:	193b      	adds	r3, r7, r4
 80018e8:	2203      	movs	r2, #3
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	193b      	adds	r3, r7, r4
 80018ee:	2203      	movs	r2, #3
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	193b      	adds	r3, r7, r4
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	193b      	adds	r3, r7, r4
 80018fa:	4a1b      	ldr	r2, [pc, #108]	; (8001968 <HAL_ADC_MspInit+0x154>)
 80018fc:	0019      	movs	r1, r3
 80018fe:	0010      	movs	r0, r2
 8001900:	f001 fb0c 	bl	8002f1c <HAL_GPIO_Init>
 8001904:	4b19      	ldr	r3, [pc, #100]	; (800196c <HAL_ADC_MspInit+0x158>)
 8001906:	4a1a      	ldr	r2, [pc, #104]	; (8001970 <HAL_ADC_MspInit+0x15c>)
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	4b18      	ldr	r3, [pc, #96]	; (800196c <HAL_ADC_MspInit+0x158>)
 800190c:	2200      	movs	r2, #0
 800190e:	605a      	str	r2, [r3, #4]
 8001910:	4b16      	ldr	r3, [pc, #88]	; (800196c <HAL_ADC_MspInit+0x158>)
 8001912:	2200      	movs	r2, #0
 8001914:	609a      	str	r2, [r3, #8]
 8001916:	4b15      	ldr	r3, [pc, #84]	; (800196c <HAL_ADC_MspInit+0x158>)
 8001918:	2280      	movs	r2, #128	; 0x80
 800191a:	60da      	str	r2, [r3, #12]
 800191c:	4b13      	ldr	r3, [pc, #76]	; (800196c <HAL_ADC_MspInit+0x158>)
 800191e:	2280      	movs	r2, #128	; 0x80
 8001920:	0052      	lsls	r2, r2, #1
 8001922:	611a      	str	r2, [r3, #16]
 8001924:	4b11      	ldr	r3, [pc, #68]	; (800196c <HAL_ADC_MspInit+0x158>)
 8001926:	2280      	movs	r2, #128	; 0x80
 8001928:	00d2      	lsls	r2, r2, #3
 800192a:	615a      	str	r2, [r3, #20]
 800192c:	4b0f      	ldr	r3, [pc, #60]	; (800196c <HAL_ADC_MspInit+0x158>)
 800192e:	2200      	movs	r2, #0
 8001930:	619a      	str	r2, [r3, #24]
 8001932:	4b0e      	ldr	r3, [pc, #56]	; (800196c <HAL_ADC_MspInit+0x158>)
 8001934:	2200      	movs	r2, #0
 8001936:	61da      	str	r2, [r3, #28]
 8001938:	4b0c      	ldr	r3, [pc, #48]	; (800196c <HAL_ADC_MspInit+0x158>)
 800193a:	0018      	movs	r0, r3
 800193c:	f001 f8d8 	bl	8002af0 <HAL_DMA_Init>
 8001940:	1e03      	subs	r3, r0, #0
 8001942:	d001      	beq.n	8001948 <HAL_ADC_MspInit+0x134>
 8001944:	f7ff ff3c 	bl	80017c0 <Error_Handler>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a08      	ldr	r2, [pc, #32]	; (800196c <HAL_ADC_MspInit+0x158>)
 800194c:	631a      	str	r2, [r3, #48]	; 0x30
 800194e:	4b07      	ldr	r3, [pc, #28]	; (800196c <HAL_ADC_MspInit+0x158>)
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	625a      	str	r2, [r3, #36]	; 0x24
 8001954:	46c0      	nop			; (mov r8, r8)
 8001956:	46bd      	mov	sp, r7
 8001958:	b00d      	add	sp, #52	; 0x34
 800195a:	bd90      	pop	{r4, r7, pc}
 800195c:	40012400 	.word	0x40012400
 8001960:	40021000 	.word	0x40021000
 8001964:	48000800 	.word	0x48000800
 8001968:	48000400 	.word	0x48000400
 800196c:	200000f4 	.word	0x200000f4
 8001970:	40020008 	.word	0x40020008

08001974 <HAL_DAC_MspInit>:
 8001974:	b590      	push	{r4, r7, lr}
 8001976:	b08b      	sub	sp, #44	; 0x2c
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	2414      	movs	r4, #20
 800197e:	193b      	adds	r3, r7, r4
 8001980:	0018      	movs	r0, r3
 8001982:	2314      	movs	r3, #20
 8001984:	001a      	movs	r2, r3
 8001986:	2100      	movs	r1, #0
 8001988:	f005 feea 	bl	8007760 <memset>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a19      	ldr	r2, [pc, #100]	; (80019f8 <HAL_DAC_MspInit+0x84>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d12b      	bne.n	80019ee <HAL_DAC_MspInit+0x7a>
 8001996:	4b19      	ldr	r3, [pc, #100]	; (80019fc <HAL_DAC_MspInit+0x88>)
 8001998:	69da      	ldr	r2, [r3, #28]
 800199a:	4b18      	ldr	r3, [pc, #96]	; (80019fc <HAL_DAC_MspInit+0x88>)
 800199c:	2180      	movs	r1, #128	; 0x80
 800199e:	0589      	lsls	r1, r1, #22
 80019a0:	430a      	orrs	r2, r1
 80019a2:	61da      	str	r2, [r3, #28]
 80019a4:	4b15      	ldr	r3, [pc, #84]	; (80019fc <HAL_DAC_MspInit+0x88>)
 80019a6:	69da      	ldr	r2, [r3, #28]
 80019a8:	2380      	movs	r3, #128	; 0x80
 80019aa:	059b      	lsls	r3, r3, #22
 80019ac:	4013      	ands	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	4b12      	ldr	r3, [pc, #72]	; (80019fc <HAL_DAC_MspInit+0x88>)
 80019b4:	695a      	ldr	r2, [r3, #20]
 80019b6:	4b11      	ldr	r3, [pc, #68]	; (80019fc <HAL_DAC_MspInit+0x88>)
 80019b8:	2180      	movs	r1, #128	; 0x80
 80019ba:	0289      	lsls	r1, r1, #10
 80019bc:	430a      	orrs	r2, r1
 80019be:	615a      	str	r2, [r3, #20]
 80019c0:	4b0e      	ldr	r3, [pc, #56]	; (80019fc <HAL_DAC_MspInit+0x88>)
 80019c2:	695a      	ldr	r2, [r3, #20]
 80019c4:	2380      	movs	r3, #128	; 0x80
 80019c6:	029b      	lsls	r3, r3, #10
 80019c8:	4013      	ands	r3, r2
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	193b      	adds	r3, r7, r4
 80019d0:	2210      	movs	r2, #16
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	193b      	adds	r3, r7, r4
 80019d6:	2203      	movs	r2, #3
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	193b      	adds	r3, r7, r4
 80019dc:	2200      	movs	r2, #0
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	193a      	adds	r2, r7, r4
 80019e2:	2390      	movs	r3, #144	; 0x90
 80019e4:	05db      	lsls	r3, r3, #23
 80019e6:	0011      	movs	r1, r2
 80019e8:	0018      	movs	r0, r3
 80019ea:	f001 fa97 	bl	8002f1c <HAL_GPIO_Init>
 80019ee:	46c0      	nop			; (mov r8, r8)
 80019f0:	46bd      	mov	sp, r7
 80019f2:	b00b      	add	sp, #44	; 0x2c
 80019f4:	bd90      	pop	{r4, r7, pc}
 80019f6:	46c0      	nop			; (mov r8, r8)
 80019f8:	40007400 	.word	0x40007400
 80019fc:	40021000 	.word	0x40021000

08001a00 <HAL_I2C_MspInit>:
 8001a00:	b590      	push	{r4, r7, lr}
 8001a02:	b08b      	sub	sp, #44	; 0x2c
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	2414      	movs	r4, #20
 8001a0a:	193b      	adds	r3, r7, r4
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	2314      	movs	r3, #20
 8001a10:	001a      	movs	r2, r3
 8001a12:	2100      	movs	r1, #0
 8001a14:	f005 fea4 	bl	8007760 <memset>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a1c      	ldr	r2, [pc, #112]	; (8001a90 <HAL_I2C_MspInit+0x90>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d132      	bne.n	8001a88 <HAL_I2C_MspInit+0x88>
 8001a22:	4b1c      	ldr	r3, [pc, #112]	; (8001a94 <HAL_I2C_MspInit+0x94>)
 8001a24:	695a      	ldr	r2, [r3, #20]
 8001a26:	4b1b      	ldr	r3, [pc, #108]	; (8001a94 <HAL_I2C_MspInit+0x94>)
 8001a28:	2180      	movs	r1, #128	; 0x80
 8001a2a:	02c9      	lsls	r1, r1, #11
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	615a      	str	r2, [r3, #20]
 8001a30:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <HAL_I2C_MspInit+0x94>)
 8001a32:	695a      	ldr	r2, [r3, #20]
 8001a34:	2380      	movs	r3, #128	; 0x80
 8001a36:	02db      	lsls	r3, r3, #11
 8001a38:	4013      	ands	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	193b      	adds	r3, r7, r4
 8001a40:	22c0      	movs	r2, #192	; 0xc0
 8001a42:	0092      	lsls	r2, r2, #2
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	0021      	movs	r1, r4
 8001a48:	187b      	adds	r3, r7, r1
 8001a4a:	2212      	movs	r2, #18
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	187b      	adds	r3, r7, r1
 8001a50:	2200      	movs	r2, #0
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	187b      	adds	r3, r7, r1
 8001a56:	2203      	movs	r2, #3
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	187b      	adds	r3, r7, r1
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	611a      	str	r2, [r3, #16]
 8001a60:	187b      	adds	r3, r7, r1
 8001a62:	4a0d      	ldr	r2, [pc, #52]	; (8001a98 <HAL_I2C_MspInit+0x98>)
 8001a64:	0019      	movs	r1, r3
 8001a66:	0010      	movs	r0, r2
 8001a68:	f001 fa58 	bl	8002f1c <HAL_GPIO_Init>
 8001a6c:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <HAL_I2C_MspInit+0x94>)
 8001a6e:	69da      	ldr	r2, [r3, #28]
 8001a70:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <HAL_I2C_MspInit+0x94>)
 8001a72:	2180      	movs	r1, #128	; 0x80
 8001a74:	0389      	lsls	r1, r1, #14
 8001a76:	430a      	orrs	r2, r1
 8001a78:	61da      	str	r2, [r3, #28]
 8001a7a:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <HAL_I2C_MspInit+0x94>)
 8001a7c:	69da      	ldr	r2, [r3, #28]
 8001a7e:	2380      	movs	r3, #128	; 0x80
 8001a80:	039b      	lsls	r3, r3, #14
 8001a82:	4013      	ands	r3, r2
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	46c0      	nop			; (mov r8, r8)
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	b00b      	add	sp, #44	; 0x2c
 8001a8e:	bd90      	pop	{r4, r7, pc}
 8001a90:	40005400 	.word	0x40005400
 8001a94:	40021000 	.word	0x40021000
 8001a98:	48000400 	.word	0x48000400

08001a9c <HAL_SPI_MspInit>:
 8001a9c:	b590      	push	{r4, r7, lr}
 8001a9e:	b08d      	sub	sp, #52	; 0x34
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	241c      	movs	r4, #28
 8001aa6:	193b      	adds	r3, r7, r4
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	2314      	movs	r3, #20
 8001aac:	001a      	movs	r2, r3
 8001aae:	2100      	movs	r1, #0
 8001ab0:	f005 fe56 	bl	8007760 <memset>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a38      	ldr	r2, [pc, #224]	; (8001b9c <HAL_SPI_MspInit+0x100>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d132      	bne.n	8001b24 <HAL_SPI_MspInit+0x88>
 8001abe:	4b38      	ldr	r3, [pc, #224]	; (8001ba0 <HAL_SPI_MspInit+0x104>)
 8001ac0:	699a      	ldr	r2, [r3, #24]
 8001ac2:	4b37      	ldr	r3, [pc, #220]	; (8001ba0 <HAL_SPI_MspInit+0x104>)
 8001ac4:	2180      	movs	r1, #128	; 0x80
 8001ac6:	0149      	lsls	r1, r1, #5
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	619a      	str	r2, [r3, #24]
 8001acc:	4b34      	ldr	r3, [pc, #208]	; (8001ba0 <HAL_SPI_MspInit+0x104>)
 8001ace:	699a      	ldr	r2, [r3, #24]
 8001ad0:	2380      	movs	r3, #128	; 0x80
 8001ad2:	015b      	lsls	r3, r3, #5
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	4b31      	ldr	r3, [pc, #196]	; (8001ba0 <HAL_SPI_MspInit+0x104>)
 8001adc:	695a      	ldr	r2, [r3, #20]
 8001ade:	4b30      	ldr	r3, [pc, #192]	; (8001ba0 <HAL_SPI_MspInit+0x104>)
 8001ae0:	2180      	movs	r1, #128	; 0x80
 8001ae2:	02c9      	lsls	r1, r1, #11
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	615a      	str	r2, [r3, #20]
 8001ae8:	4b2d      	ldr	r3, [pc, #180]	; (8001ba0 <HAL_SPI_MspInit+0x104>)
 8001aea:	695a      	ldr	r2, [r3, #20]
 8001aec:	2380      	movs	r3, #128	; 0x80
 8001aee:	02db      	lsls	r3, r3, #11
 8001af0:	4013      	ands	r3, r2
 8001af2:	617b      	str	r3, [r7, #20]
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	0021      	movs	r1, r4
 8001af8:	187b      	adds	r3, r7, r1
 8001afa:	2218      	movs	r2, #24
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	187b      	adds	r3, r7, r1
 8001b00:	2202      	movs	r2, #2
 8001b02:	605a      	str	r2, [r3, #4]
 8001b04:	187b      	adds	r3, r7, r1
 8001b06:	2200      	movs	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]
 8001b0a:	187b      	adds	r3, r7, r1
 8001b0c:	2203      	movs	r2, #3
 8001b0e:	60da      	str	r2, [r3, #12]
 8001b10:	187b      	adds	r3, r7, r1
 8001b12:	2200      	movs	r2, #0
 8001b14:	611a      	str	r2, [r3, #16]
 8001b16:	187b      	adds	r3, r7, r1
 8001b18:	4a22      	ldr	r2, [pc, #136]	; (8001ba4 <HAL_SPI_MspInit+0x108>)
 8001b1a:	0019      	movs	r1, r3
 8001b1c:	0010      	movs	r0, r2
 8001b1e:	f001 f9fd 	bl	8002f1c <HAL_GPIO_Init>
 8001b22:	e037      	b.n	8001b94 <HAL_SPI_MspInit+0xf8>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a1f      	ldr	r2, [pc, #124]	; (8001ba8 <HAL_SPI_MspInit+0x10c>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d132      	bne.n	8001b94 <HAL_SPI_MspInit+0xf8>
 8001b2e:	4b1c      	ldr	r3, [pc, #112]	; (8001ba0 <HAL_SPI_MspInit+0x104>)
 8001b30:	69da      	ldr	r2, [r3, #28]
 8001b32:	4b1b      	ldr	r3, [pc, #108]	; (8001ba0 <HAL_SPI_MspInit+0x104>)
 8001b34:	2180      	movs	r1, #128	; 0x80
 8001b36:	01c9      	lsls	r1, r1, #7
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	61da      	str	r2, [r3, #28]
 8001b3c:	4b18      	ldr	r3, [pc, #96]	; (8001ba0 <HAL_SPI_MspInit+0x104>)
 8001b3e:	69da      	ldr	r2, [r3, #28]
 8001b40:	2380      	movs	r3, #128	; 0x80
 8001b42:	01db      	lsls	r3, r3, #7
 8001b44:	4013      	ands	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <HAL_SPI_MspInit+0x104>)
 8001b4c:	695a      	ldr	r2, [r3, #20]
 8001b4e:	4b14      	ldr	r3, [pc, #80]	; (8001ba0 <HAL_SPI_MspInit+0x104>)
 8001b50:	2180      	movs	r1, #128	; 0x80
 8001b52:	02c9      	lsls	r1, r1, #11
 8001b54:	430a      	orrs	r2, r1
 8001b56:	615a      	str	r2, [r3, #20]
 8001b58:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <HAL_SPI_MspInit+0x104>)
 8001b5a:	695a      	ldr	r2, [r3, #20]
 8001b5c:	2380      	movs	r3, #128	; 0x80
 8001b5e:	02db      	lsls	r3, r3, #11
 8001b60:	4013      	ands	r3, r2
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	211c      	movs	r1, #28
 8001b68:	187b      	adds	r3, r7, r1
 8001b6a:	22c0      	movs	r2, #192	; 0xc0
 8001b6c:	01d2      	lsls	r2, r2, #7
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	187b      	adds	r3, r7, r1
 8001b72:	2202      	movs	r2, #2
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	187b      	adds	r3, r7, r1
 8001b78:	2200      	movs	r2, #0
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	187b      	adds	r3, r7, r1
 8001b7e:	2203      	movs	r2, #3
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	187b      	adds	r3, r7, r1
 8001b84:	2200      	movs	r2, #0
 8001b86:	611a      	str	r2, [r3, #16]
 8001b88:	187b      	adds	r3, r7, r1
 8001b8a:	4a06      	ldr	r2, [pc, #24]	; (8001ba4 <HAL_SPI_MspInit+0x108>)
 8001b8c:	0019      	movs	r1, r3
 8001b8e:	0010      	movs	r0, r2
 8001b90:	f001 f9c4 	bl	8002f1c <HAL_GPIO_Init>
 8001b94:	46c0      	nop			; (mov r8, r8)
 8001b96:	46bd      	mov	sp, r7
 8001b98:	b00d      	add	sp, #52	; 0x34
 8001b9a:	bd90      	pop	{r4, r7, pc}
 8001b9c:	40013000 	.word	0x40013000
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	48000400 	.word	0x48000400
 8001ba8:	40003800 	.word	0x40003800

08001bac <HAL_TIM_Base_MspInit>:
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a1f      	ldr	r2, [pc, #124]	; (8001c38 <HAL_TIM_Base_MspInit+0x8c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d11e      	bne.n	8001bfc <HAL_TIM_Base_MspInit+0x50>
 8001bbe:	4b1f      	ldr	r3, [pc, #124]	; (8001c3c <HAL_TIM_Base_MspInit+0x90>)
 8001bc0:	699a      	ldr	r2, [r3, #24]
 8001bc2:	4b1e      	ldr	r3, [pc, #120]	; (8001c3c <HAL_TIM_Base_MspInit+0x90>)
 8001bc4:	2180      	movs	r1, #128	; 0x80
 8001bc6:	0109      	lsls	r1, r1, #4
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	619a      	str	r2, [r3, #24]
 8001bcc:	4b1b      	ldr	r3, [pc, #108]	; (8001c3c <HAL_TIM_Base_MspInit+0x90>)
 8001bce:	699a      	ldr	r2, [r3, #24]
 8001bd0:	2380      	movs	r3, #128	; 0x80
 8001bd2:	011b      	lsls	r3, r3, #4
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2101      	movs	r1, #1
 8001bde:	200d      	movs	r0, #13
 8001be0:	f000 feba 	bl	8002958 <HAL_NVIC_SetPriority>
 8001be4:	200d      	movs	r0, #13
 8001be6:	f000 fecc 	bl	8002982 <HAL_NVIC_EnableIRQ>
 8001bea:	2200      	movs	r2, #0
 8001bec:	2101      	movs	r1, #1
 8001bee:	200e      	movs	r0, #14
 8001bf0:	f000 feb2 	bl	8002958 <HAL_NVIC_SetPriority>
 8001bf4:	200e      	movs	r0, #14
 8001bf6:	f000 fec4 	bl	8002982 <HAL_NVIC_EnableIRQ>
 8001bfa:	e019      	b.n	8001c30 <HAL_TIM_Base_MspInit+0x84>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	2380      	movs	r3, #128	; 0x80
 8001c02:	05db      	lsls	r3, r3, #23
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d113      	bne.n	8001c30 <HAL_TIM_Base_MspInit+0x84>
 8001c08:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <HAL_TIM_Base_MspInit+0x90>)
 8001c0a:	69da      	ldr	r2, [r3, #28]
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <HAL_TIM_Base_MspInit+0x90>)
 8001c0e:	2101      	movs	r1, #1
 8001c10:	430a      	orrs	r2, r1
 8001c12:	61da      	str	r2, [r3, #28]
 8001c14:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <HAL_TIM_Base_MspInit+0x90>)
 8001c16:	69db      	ldr	r3, [r3, #28]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	60bb      	str	r3, [r7, #8]
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	2200      	movs	r2, #0
 8001c22:	2101      	movs	r1, #1
 8001c24:	200f      	movs	r0, #15
 8001c26:	f000 fe97 	bl	8002958 <HAL_NVIC_SetPriority>
 8001c2a:	200f      	movs	r0, #15
 8001c2c:	f000 fea9 	bl	8002982 <HAL_NVIC_EnableIRQ>
 8001c30:	46c0      	nop			; (mov r8, r8)
 8001c32:	46bd      	mov	sp, r7
 8001c34:	b004      	add	sp, #16
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40012c00 	.word	0x40012c00
 8001c3c:	40021000 	.word	0x40021000

08001c40 <HAL_TIM_MspPostInit>:
 8001c40:	b590      	push	{r4, r7, lr}
 8001c42:	b08b      	sub	sp, #44	; 0x2c
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	2414      	movs	r4, #20
 8001c4a:	193b      	adds	r3, r7, r4
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	2314      	movs	r3, #20
 8001c50:	001a      	movs	r2, r3
 8001c52:	2100      	movs	r1, #0
 8001c54:	f005 fd84 	bl	8007760 <memset>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a2c      	ldr	r2, [pc, #176]	; (8001d10 <HAL_TIM_MspPostInit+0xd0>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d126      	bne.n	8001cb0 <HAL_TIM_MspPostInit+0x70>
 8001c62:	4b2c      	ldr	r3, [pc, #176]	; (8001d14 <HAL_TIM_MspPostInit+0xd4>)
 8001c64:	695a      	ldr	r2, [r3, #20]
 8001c66:	4b2b      	ldr	r3, [pc, #172]	; (8001d14 <HAL_TIM_MspPostInit+0xd4>)
 8001c68:	2180      	movs	r1, #128	; 0x80
 8001c6a:	0289      	lsls	r1, r1, #10
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	615a      	str	r2, [r3, #20]
 8001c70:	4b28      	ldr	r3, [pc, #160]	; (8001d14 <HAL_TIM_MspPostInit+0xd4>)
 8001c72:	695a      	ldr	r2, [r3, #20]
 8001c74:	2380      	movs	r3, #128	; 0x80
 8001c76:	029b      	lsls	r3, r3, #10
 8001c78:	4013      	ands	r3, r2
 8001c7a:	613b      	str	r3, [r7, #16]
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	193b      	adds	r3, r7, r4
 8001c80:	2280      	movs	r2, #128	; 0x80
 8001c82:	0052      	lsls	r2, r2, #1
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	0021      	movs	r1, r4
 8001c88:	187b      	adds	r3, r7, r1
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	605a      	str	r2, [r3, #4]
 8001c8e:	187b      	adds	r3, r7, r1
 8001c90:	2200      	movs	r2, #0
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	187b      	adds	r3, r7, r1
 8001c96:	2200      	movs	r2, #0
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	187b      	adds	r3, r7, r1
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	611a      	str	r2, [r3, #16]
 8001ca0:	187a      	adds	r2, r7, r1
 8001ca2:	2390      	movs	r3, #144	; 0x90
 8001ca4:	05db      	lsls	r3, r3, #23
 8001ca6:	0011      	movs	r1, r2
 8001ca8:	0018      	movs	r0, r3
 8001caa:	f001 f937 	bl	8002f1c <HAL_GPIO_Init>
 8001cae:	e02a      	b.n	8001d06 <HAL_TIM_MspPostInit+0xc6>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	2380      	movs	r3, #128	; 0x80
 8001cb6:	05db      	lsls	r3, r3, #23
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d124      	bne.n	8001d06 <HAL_TIM_MspPostInit+0xc6>
 8001cbc:	4b15      	ldr	r3, [pc, #84]	; (8001d14 <HAL_TIM_MspPostInit+0xd4>)
 8001cbe:	695a      	ldr	r2, [r3, #20]
 8001cc0:	4b14      	ldr	r3, [pc, #80]	; (8001d14 <HAL_TIM_MspPostInit+0xd4>)
 8001cc2:	2180      	movs	r1, #128	; 0x80
 8001cc4:	02c9      	lsls	r1, r1, #11
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	615a      	str	r2, [r3, #20]
 8001cca:	4b12      	ldr	r3, [pc, #72]	; (8001d14 <HAL_TIM_MspPostInit+0xd4>)
 8001ccc:	695a      	ldr	r2, [r3, #20]
 8001cce:	2380      	movs	r3, #128	; 0x80
 8001cd0:	02db      	lsls	r3, r3, #11
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2114      	movs	r1, #20
 8001cda:	187b      	adds	r3, r7, r1
 8001cdc:	2280      	movs	r2, #128	; 0x80
 8001cde:	0112      	lsls	r2, r2, #4
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	187b      	adds	r3, r7, r1
 8001ce4:	2202      	movs	r2, #2
 8001ce6:	605a      	str	r2, [r3, #4]
 8001ce8:	187b      	adds	r3, r7, r1
 8001cea:	2200      	movs	r2, #0
 8001cec:	609a      	str	r2, [r3, #8]
 8001cee:	187b      	adds	r3, r7, r1
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	60da      	str	r2, [r3, #12]
 8001cf4:	187b      	adds	r3, r7, r1
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	611a      	str	r2, [r3, #16]
 8001cfa:	187b      	adds	r3, r7, r1
 8001cfc:	4a06      	ldr	r2, [pc, #24]	; (8001d18 <HAL_TIM_MspPostInit+0xd8>)
 8001cfe:	0019      	movs	r1, r3
 8001d00:	0010      	movs	r0, r2
 8001d02:	f001 f90b 	bl	8002f1c <HAL_GPIO_Init>
 8001d06:	46c0      	nop			; (mov r8, r8)
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	b00b      	add	sp, #44	; 0x2c
 8001d0c:	bd90      	pop	{r4, r7, pc}
 8001d0e:	46c0      	nop			; (mov r8, r8)
 8001d10:	40012c00 	.word	0x40012c00
 8001d14:	40021000 	.word	0x40021000
 8001d18:	48000400 	.word	0x48000400

08001d1c <HAL_UART_MspInit>:
 8001d1c:	b590      	push	{r4, r7, lr}
 8001d1e:	b08b      	sub	sp, #44	; 0x2c
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	2414      	movs	r4, #20
 8001d26:	193b      	adds	r3, r7, r4
 8001d28:	0018      	movs	r0, r3
 8001d2a:	2314      	movs	r3, #20
 8001d2c:	001a      	movs	r2, r3
 8001d2e:	2100      	movs	r1, #0
 8001d30:	f005 fd16 	bl	8007760 <memset>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a21      	ldr	r2, [pc, #132]	; (8001dc0 <HAL_UART_MspInit+0xa4>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d13b      	bne.n	8001db6 <HAL_UART_MspInit+0x9a>
 8001d3e:	4b21      	ldr	r3, [pc, #132]	; (8001dc4 <HAL_UART_MspInit+0xa8>)
 8001d40:	699a      	ldr	r2, [r3, #24]
 8001d42:	4b20      	ldr	r3, [pc, #128]	; (8001dc4 <HAL_UART_MspInit+0xa8>)
 8001d44:	2180      	movs	r1, #128	; 0x80
 8001d46:	01c9      	lsls	r1, r1, #7
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	619a      	str	r2, [r3, #24]
 8001d4c:	4b1d      	ldr	r3, [pc, #116]	; (8001dc4 <HAL_UART_MspInit+0xa8>)
 8001d4e:	699a      	ldr	r2, [r3, #24]
 8001d50:	2380      	movs	r3, #128	; 0x80
 8001d52:	01db      	lsls	r3, r3, #7
 8001d54:	4013      	ands	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	4b1a      	ldr	r3, [pc, #104]	; (8001dc4 <HAL_UART_MspInit+0xa8>)
 8001d5c:	695a      	ldr	r2, [r3, #20]
 8001d5e:	4b19      	ldr	r3, [pc, #100]	; (8001dc4 <HAL_UART_MspInit+0xa8>)
 8001d60:	2180      	movs	r1, #128	; 0x80
 8001d62:	0289      	lsls	r1, r1, #10
 8001d64:	430a      	orrs	r2, r1
 8001d66:	615a      	str	r2, [r3, #20]
 8001d68:	4b16      	ldr	r3, [pc, #88]	; (8001dc4 <HAL_UART_MspInit+0xa8>)
 8001d6a:	695a      	ldr	r2, [r3, #20]
 8001d6c:	2380      	movs	r3, #128	; 0x80
 8001d6e:	029b      	lsls	r3, r3, #10
 8001d70:	4013      	ands	r3, r2
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	193b      	adds	r3, r7, r4
 8001d78:	22c0      	movs	r2, #192	; 0xc0
 8001d7a:	00d2      	lsls	r2, r2, #3
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	0021      	movs	r1, r4
 8001d80:	187b      	adds	r3, r7, r1
 8001d82:	2202      	movs	r2, #2
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	187b      	adds	r3, r7, r1
 8001d88:	2200      	movs	r2, #0
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	187b      	adds	r3, r7, r1
 8001d8e:	2203      	movs	r2, #3
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	187b      	adds	r3, r7, r1
 8001d94:	2201      	movs	r2, #1
 8001d96:	611a      	str	r2, [r3, #16]
 8001d98:	187a      	adds	r2, r7, r1
 8001d9a:	2390      	movs	r3, #144	; 0x90
 8001d9c:	05db      	lsls	r3, r3, #23
 8001d9e:	0011      	movs	r1, r2
 8001da0:	0018      	movs	r0, r3
 8001da2:	f001 f8bb 	bl	8002f1c <HAL_GPIO_Init>
 8001da6:	2200      	movs	r2, #0
 8001da8:	2100      	movs	r1, #0
 8001daa:	201b      	movs	r0, #27
 8001dac:	f000 fdd4 	bl	8002958 <HAL_NVIC_SetPriority>
 8001db0:	201b      	movs	r0, #27
 8001db2:	f000 fde6 	bl	8002982 <HAL_NVIC_EnableIRQ>
 8001db6:	46c0      	nop			; (mov r8, r8)
 8001db8:	46bd      	mov	sp, r7
 8001dba:	b00b      	add	sp, #44	; 0x2c
 8001dbc:	bd90      	pop	{r4, r7, pc}
 8001dbe:	46c0      	nop			; (mov r8, r8)
 8001dc0:	40013800 	.word	0x40013800
 8001dc4:	40021000 	.word	0x40021000

08001dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dcc:	e7fe      	b.n	8001dcc <NMI_Handler+0x4>

08001dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dd2:	e7fe      	b.n	8001dd2 <HardFault_Handler+0x4>

08001dd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001dd8:	46c0      	nop			; (mov r8, r8)
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001de2:	46c0      	nop			; (mov r8, r8)
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dec:	f000 f8ee 	bl	8001fcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001df0:	46c0      	nop			; (mov r8, r8)
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
	...

08001df8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001dfc:	4b03      	ldr	r3, [pc, #12]	; (8001e0c <DMA1_Channel1_IRQHandler+0x14>)
 8001dfe:	0018      	movs	r0, r3
 8001e00:	f000 ffa1 	bl	8002d46 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e04:	46c0      	nop			; (mov r8, r8)
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	46c0      	nop			; (mov r8, r8)
 8001e0c:	200000f4 	.word	0x200000f4

08001e10 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e14:	4b03      	ldr	r3, [pc, #12]	; (8001e24 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8001e16:	0018      	movs	r0, r3
 8001e18:	f003 fad0 	bl	80053bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001e1c:	46c0      	nop			; (mov r8, r8)
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	46c0      	nop			; (mov r8, r8)
 8001e24:	20000260 	.word	0x20000260

08001e28 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e2c:	4b03      	ldr	r3, [pc, #12]	; (8001e3c <TIM1_CC_IRQHandler+0x14>)
 8001e2e:	0018      	movs	r0, r3
 8001e30:	f003 fac4 	bl	80053bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001e34:	46c0      	nop			; (mov r8, r8)
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	46c0      	nop			; (mov r8, r8)
 8001e3c:	20000260 	.word	0x20000260

08001e40 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e44:	4b03      	ldr	r3, [pc, #12]	; (8001e54 <TIM2_IRQHandler+0x14>)
 8001e46:	0018      	movs	r0, r3
 8001e48:	f003 fab8 	bl	80053bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e4c:	46c0      	nop			; (mov r8, r8)
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	46c0      	nop			; (mov r8, r8)
 8001e54:	200002a8 	.word	0x200002a8

08001e58 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e5c:	4b03      	ldr	r3, [pc, #12]	; (8001e6c <USART1_IRQHandler+0x14>)
 8001e5e:	0018      	movs	r0, r3
 8001e60:	f004 fae0 	bl	8006424 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e64:	46c0      	nop			; (mov r8, r8)
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	46c0      	nop			; (mov r8, r8)
 8001e6c:	200002f0 	.word	0x200002f0

08001e70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e78:	4a14      	ldr	r2, [pc, #80]	; (8001ecc <_sbrk+0x5c>)
 8001e7a:	4b15      	ldr	r3, [pc, #84]	; (8001ed0 <_sbrk+0x60>)
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e84:	4b13      	ldr	r3, [pc, #76]	; (8001ed4 <_sbrk+0x64>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d102      	bne.n	8001e92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e8c:	4b11      	ldr	r3, [pc, #68]	; (8001ed4 <_sbrk+0x64>)
 8001e8e:	4a12      	ldr	r2, [pc, #72]	; (8001ed8 <_sbrk+0x68>)
 8001e90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e92:	4b10      	ldr	r3, [pc, #64]	; (8001ed4 <_sbrk+0x64>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	18d3      	adds	r3, r2, r3
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d207      	bcs.n	8001eb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ea0:	f005 fc20 	bl	80076e4 <__errno>
 8001ea4:	0003      	movs	r3, r0
 8001ea6:	220c      	movs	r2, #12
 8001ea8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	425b      	negs	r3, r3
 8001eae:	e009      	b.n	8001ec4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001eb0:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <_sbrk+0x64>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eb6:	4b07      	ldr	r3, [pc, #28]	; (8001ed4 <_sbrk+0x64>)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	18d2      	adds	r2, r2, r3
 8001ebe:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <_sbrk+0x64>)
 8001ec0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
}
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	b006      	add	sp, #24
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	20002000 	.word	0x20002000
 8001ed0:	00000400 	.word	0x00000400
 8001ed4:	2000042c 	.word	0x2000042c
 8001ed8:	20000448 	.word	0x20000448

08001edc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001ee0:	46c0      	nop			; (mov r8, r8)
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
	...

08001ee8 <Reset_Handler>:
 8001ee8:	480d      	ldr	r0, [pc, #52]	; (8001f20 <LoopForever+0x2>)
 8001eea:	4685      	mov	sp, r0
 8001eec:	480d      	ldr	r0, [pc, #52]	; (8001f24 <LoopForever+0x6>)
 8001eee:	490e      	ldr	r1, [pc, #56]	; (8001f28 <LoopForever+0xa>)
 8001ef0:	4a0e      	ldr	r2, [pc, #56]	; (8001f2c <LoopForever+0xe>)
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	e002      	b.n	8001efc <LoopCopyDataInit>

08001ef6 <CopyDataInit>:
 8001ef6:	58d4      	ldr	r4, [r2, r3]
 8001ef8:	50c4      	str	r4, [r0, r3]
 8001efa:	3304      	adds	r3, #4

08001efc <LoopCopyDataInit>:
 8001efc:	18c4      	adds	r4, r0, r3
 8001efe:	428c      	cmp	r4, r1
 8001f00:	d3f9      	bcc.n	8001ef6 <CopyDataInit>
 8001f02:	4a0b      	ldr	r2, [pc, #44]	; (8001f30 <LoopForever+0x12>)
 8001f04:	4c0b      	ldr	r4, [pc, #44]	; (8001f34 <LoopForever+0x16>)
 8001f06:	2300      	movs	r3, #0
 8001f08:	e001      	b.n	8001f0e <LoopFillZerobss>

08001f0a <FillZerobss>:
 8001f0a:	6013      	str	r3, [r2, #0]
 8001f0c:	3204      	adds	r2, #4

08001f0e <LoopFillZerobss>:
 8001f0e:	42a2      	cmp	r2, r4
 8001f10:	d3fb      	bcc.n	8001f0a <FillZerobss>
 8001f12:	f7ff ffe3 	bl	8001edc <SystemInit>
 8001f16:	f005 fbeb 	bl	80076f0 <__libc_init_array>
 8001f1a:	f7fe ff35 	bl	8000d88 <main>

08001f1e <LoopForever>:
 8001f1e:	e7fe      	b.n	8001f1e <LoopForever>
 8001f20:	20002000 	.word	0x20002000
 8001f24:	20000000 	.word	0x20000000
 8001f28:	20000098 	.word	0x20000098
 8001f2c:	08007a88 	.word	0x08007a88
 8001f30:	20000098 	.word	0x20000098
 8001f34:	20000444 	.word	0x20000444

08001f38 <ADC1_COMP_IRQHandler>:
 8001f38:	e7fe      	b.n	8001f38 <ADC1_COMP_IRQHandler>
	...

08001f3c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f40:	4b07      	ldr	r3, [pc, #28]	; (8001f60 <HAL_Init+0x24>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <HAL_Init+0x24>)
 8001f46:	2110      	movs	r1, #16
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001f4c:	2003      	movs	r0, #3
 8001f4e:	f000 f809 	bl	8001f64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f52:	f7ff fc3b 	bl	80017cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	0018      	movs	r0, r3
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	46c0      	nop			; (mov r8, r8)
 8001f60:	40022000 	.word	0x40022000

08001f64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f64:	b590      	push	{r4, r7, lr}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f6c:	4b14      	ldr	r3, [pc, #80]	; (8001fc0 <HAL_InitTick+0x5c>)
 8001f6e:	681c      	ldr	r4, [r3, #0]
 8001f70:	4b14      	ldr	r3, [pc, #80]	; (8001fc4 <HAL_InitTick+0x60>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	0019      	movs	r1, r3
 8001f76:	23fa      	movs	r3, #250	; 0xfa
 8001f78:	0098      	lsls	r0, r3, #2
 8001f7a:	f7fe f8c5 	bl	8000108 <__udivsi3>
 8001f7e:	0003      	movs	r3, r0
 8001f80:	0019      	movs	r1, r3
 8001f82:	0020      	movs	r0, r4
 8001f84:	f7fe f8c0 	bl	8000108 <__udivsi3>
 8001f88:	0003      	movs	r3, r0
 8001f8a:	0018      	movs	r0, r3
 8001f8c:	f000 fd09 	bl	80029a2 <HAL_SYSTICK_Config>
 8001f90:	1e03      	subs	r3, r0, #0
 8001f92:	d001      	beq.n	8001f98 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e00f      	b.n	8001fb8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b03      	cmp	r3, #3
 8001f9c:	d80b      	bhi.n	8001fb6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f9e:	6879      	ldr	r1, [r7, #4]
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	425b      	negs	r3, r3
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	0018      	movs	r0, r3
 8001fa8:	f000 fcd6 	bl	8002958 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fac:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <HAL_InitTick+0x64>)
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	e000      	b.n	8001fb8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
}
 8001fb8:	0018      	movs	r0, r3
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	b003      	add	sp, #12
 8001fbe:	bd90      	pop	{r4, r7, pc}
 8001fc0:	20000028 	.word	0x20000028
 8001fc4:	20000030 	.word	0x20000030
 8001fc8:	2000002c 	.word	0x2000002c

08001fcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fd0:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <HAL_IncTick+0x1c>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	001a      	movs	r2, r3
 8001fd6:	4b05      	ldr	r3, [pc, #20]	; (8001fec <HAL_IncTick+0x20>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	18d2      	adds	r2, r2, r3
 8001fdc:	4b03      	ldr	r3, [pc, #12]	; (8001fec <HAL_IncTick+0x20>)
 8001fde:	601a      	str	r2, [r3, #0]
}
 8001fe0:	46c0      	nop			; (mov r8, r8)
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	46c0      	nop			; (mov r8, r8)
 8001fe8:	20000030 	.word	0x20000030
 8001fec:	20000430 	.word	0x20000430

08001ff0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ff4:	4b02      	ldr	r3, [pc, #8]	; (8002000 <HAL_GetTick+0x10>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
}
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	46c0      	nop			; (mov r8, r8)
 8002000:	20000430 	.word	0x20000430

08002004 <HAL_SuspendTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)

{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8002008:	4b04      	ldr	r3, [pc, #16]	; (800201c <HAL_SuspendTick+0x18>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	4b03      	ldr	r3, [pc, #12]	; (800201c <HAL_SuspendTick+0x18>)
 800200e:	2102      	movs	r1, #2
 8002010:	438a      	bics	r2, r1
 8002012:	601a      	str	r2, [r3, #0]
}
 8002014:	46c0      	nop			; (mov r8, r8)
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	46c0      	nop			; (mov r8, r8)
 800201c:	e000e010 	.word	0xe000e010

08002020 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002028:	230f      	movs	r3, #15
 800202a:	18fb      	adds	r3, r7, r3
 800202c:	2200      	movs	r2, #0
 800202e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002030:	2300      	movs	r3, #0
 8002032:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e125      	b.n	800228a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10a      	bne.n	800205c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2234      	movs	r2, #52	; 0x34
 8002050:	2100      	movs	r1, #0
 8002052:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	0018      	movs	r0, r3
 8002058:	f7ff fbdc 	bl	8001814 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002060:	2210      	movs	r2, #16
 8002062:	4013      	ands	r3, r2
 8002064:	d000      	beq.n	8002068 <HAL_ADC_Init+0x48>
 8002066:	e103      	b.n	8002270 <HAL_ADC_Init+0x250>
 8002068:	230f      	movs	r3, #15
 800206a:	18fb      	adds	r3, r7, r3
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d000      	beq.n	8002074 <HAL_ADC_Init+0x54>
 8002072:	e0fd      	b.n	8002270 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	2204      	movs	r2, #4
 800207c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800207e:	d000      	beq.n	8002082 <HAL_ADC_Init+0x62>
 8002080:	e0f6      	b.n	8002270 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002086:	4a83      	ldr	r2, [pc, #524]	; (8002294 <HAL_ADC_Init+0x274>)
 8002088:	4013      	ands	r3, r2
 800208a:	2202      	movs	r2, #2
 800208c:	431a      	orrs	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	2203      	movs	r2, #3
 800209a:	4013      	ands	r3, r2
 800209c:	2b01      	cmp	r3, #1
 800209e:	d112      	bne.n	80020c6 <HAL_ADC_Init+0xa6>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2201      	movs	r2, #1
 80020a8:	4013      	ands	r3, r2
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d009      	beq.n	80020c2 <HAL_ADC_Init+0xa2>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68da      	ldr	r2, [r3, #12]
 80020b4:	2380      	movs	r3, #128	; 0x80
 80020b6:	021b      	lsls	r3, r3, #8
 80020b8:	401a      	ands	r2, r3
 80020ba:	2380      	movs	r3, #128	; 0x80
 80020bc:	021b      	lsls	r3, r3, #8
 80020be:	429a      	cmp	r2, r3
 80020c0:	d101      	bne.n	80020c6 <HAL_ADC_Init+0xa6>
 80020c2:	2301      	movs	r3, #1
 80020c4:	e000      	b.n	80020c8 <HAL_ADC_Init+0xa8>
 80020c6:	2300      	movs	r3, #0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d116      	bne.n	80020fa <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	2218      	movs	r2, #24
 80020d4:	4393      	bics	r3, r2
 80020d6:	0019      	movs	r1, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	430a      	orrs	r2, r1
 80020e2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	0899      	lsrs	r1, r3, #2
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68da      	ldr	r2, [r3, #12]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4964      	ldr	r1, [pc, #400]	; (8002298 <HAL_ADC_Init+0x278>)
 8002106:	400a      	ands	r2, r1
 8002108:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	7e1b      	ldrb	r3, [r3, #24]
 800210e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	7e5b      	ldrb	r3, [r3, #25]
 8002114:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002116:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	7e9b      	ldrb	r3, [r3, #26]
 800211c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800211e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002124:	2b01      	cmp	r3, #1
 8002126:	d002      	beq.n	800212e <HAL_ADC_Init+0x10e>
 8002128:	2380      	movs	r3, #128	; 0x80
 800212a:	015b      	lsls	r3, r3, #5
 800212c:	e000      	b.n	8002130 <HAL_ADC_Init+0x110>
 800212e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002130:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002136:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	2b02      	cmp	r3, #2
 800213e:	d101      	bne.n	8002144 <HAL_ADC_Init+0x124>
 8002140:	2304      	movs	r3, #4
 8002142:	e000      	b.n	8002146 <HAL_ADC_Init+0x126>
 8002144:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002146:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2124      	movs	r1, #36	; 0x24
 800214c:	5c5b      	ldrb	r3, [r3, r1]
 800214e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002150:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002152:	68ba      	ldr	r2, [r7, #8]
 8002154:	4313      	orrs	r3, r2
 8002156:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	7edb      	ldrb	r3, [r3, #27]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d115      	bne.n	800218c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	7e9b      	ldrb	r3, [r3, #26]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d105      	bne.n	8002174 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	2280      	movs	r2, #128	; 0x80
 800216c:	0252      	lsls	r2, r2, #9
 800216e:	4313      	orrs	r3, r2
 8002170:	60bb      	str	r3, [r7, #8]
 8002172:	e00b      	b.n	800218c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002178:	2220      	movs	r2, #32
 800217a:	431a      	orrs	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002184:	2201      	movs	r2, #1
 8002186:	431a      	orrs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	69da      	ldr	r2, [r3, #28]
 8002190:	23c2      	movs	r3, #194	; 0xc2
 8002192:	33ff      	adds	r3, #255	; 0xff
 8002194:	429a      	cmp	r2, r3
 8002196:	d007      	beq.n	80021a8 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80021a0:	4313      	orrs	r3, r2
 80021a2:	68ba      	ldr	r2, [r7, #8]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68d9      	ldr	r1, [r3, #12]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68ba      	ldr	r2, [r7, #8]
 80021b4:	430a      	orrs	r2, r1
 80021b6:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021bc:	2380      	movs	r3, #128	; 0x80
 80021be:	055b      	lsls	r3, r3, #21
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d01b      	beq.n	80021fc <HAL_ADC_Init+0x1dc>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d017      	beq.n	80021fc <HAL_ADC_Init+0x1dc>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d013      	beq.n	80021fc <HAL_ADC_Init+0x1dc>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d8:	2b03      	cmp	r3, #3
 80021da:	d00f      	beq.n	80021fc <HAL_ADC_Init+0x1dc>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e0:	2b04      	cmp	r3, #4
 80021e2:	d00b      	beq.n	80021fc <HAL_ADC_Init+0x1dc>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e8:	2b05      	cmp	r3, #5
 80021ea:	d007      	beq.n	80021fc <HAL_ADC_Init+0x1dc>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f0:	2b06      	cmp	r3, #6
 80021f2:	d003      	beq.n	80021fc <HAL_ADC_Init+0x1dc>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f8:	2b07      	cmp	r3, #7
 80021fa:	d112      	bne.n	8002222 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	695a      	ldr	r2, [r3, #20]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2107      	movs	r1, #7
 8002208:	438a      	bics	r2, r1
 800220a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6959      	ldr	r1, [r3, #20]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002216:	2207      	movs	r2, #7
 8002218:	401a      	ands	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	430a      	orrs	r2, r1
 8002220:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	4a1c      	ldr	r2, [pc, #112]	; (800229c <HAL_ADC_Init+0x27c>)
 800222a:	4013      	ands	r3, r2
 800222c:	68ba      	ldr	r2, [r7, #8]
 800222e:	429a      	cmp	r2, r3
 8002230:	d10b      	bne.n	800224a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800223c:	2203      	movs	r2, #3
 800223e:	4393      	bics	r3, r2
 8002240:	2201      	movs	r2, #1
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002248:	e01c      	b.n	8002284 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800224e:	2212      	movs	r2, #18
 8002250:	4393      	bics	r3, r2
 8002252:	2210      	movs	r2, #16
 8002254:	431a      	orrs	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800225e:	2201      	movs	r2, #1
 8002260:	431a      	orrs	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002266:	230f      	movs	r3, #15
 8002268:	18fb      	adds	r3, r7, r3
 800226a:	2201      	movs	r2, #1
 800226c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800226e:	e009      	b.n	8002284 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002274:	2210      	movs	r2, #16
 8002276:	431a      	orrs	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 800227c:	230f      	movs	r3, #15
 800227e:	18fb      	adds	r3, r7, r3
 8002280:	2201      	movs	r2, #1
 8002282:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002284:	230f      	movs	r3, #15
 8002286:	18fb      	adds	r3, r7, r3
 8002288:	781b      	ldrb	r3, [r3, #0]
}
 800228a:	0018      	movs	r0, r3
 800228c:	46bd      	mov	sp, r7
 800228e:	b004      	add	sp, #16
 8002290:	bd80      	pop	{r7, pc}
 8002292:	46c0      	nop			; (mov r8, r8)
 8002294:	fffffefd 	.word	0xfffffefd
 8002298:	fffe0219 	.word	0xfffe0219
 800229c:	833fffe7 	.word	0x833fffe7

080022a0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80022a0:	b590      	push	{r4, r7, lr}
 80022a2:	b087      	sub	sp, #28
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022ac:	2317      	movs	r3, #23
 80022ae:	18fb      	adds	r3, r7, r3
 80022b0:	2200      	movs	r2, #0
 80022b2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	2204      	movs	r2, #4
 80022bc:	4013      	ands	r3, r2
 80022be:	d15e      	bne.n	800237e <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2234      	movs	r2, #52	; 0x34
 80022c4:	5c9b      	ldrb	r3, [r3, r2]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d101      	bne.n	80022ce <HAL_ADC_Start_DMA+0x2e>
 80022ca:	2302      	movs	r3, #2
 80022cc:	e05e      	b.n	800238c <HAL_ADC_Start_DMA+0xec>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2234      	movs	r2, #52	; 0x34
 80022d2:	2101      	movs	r1, #1
 80022d4:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	7e5b      	ldrb	r3, [r3, #25]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d007      	beq.n	80022ee <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80022de:	2317      	movs	r3, #23
 80022e0:	18fc      	adds	r4, r7, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	0018      	movs	r0, r3
 80022e6:	f000 f983 	bl	80025f0 <ADC_Enable>
 80022ea:	0003      	movs	r3, r0
 80022ec:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80022ee:	2317      	movs	r3, #23
 80022f0:	18fb      	adds	r3, r7, r3
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d146      	bne.n	8002386 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022fc:	4a25      	ldr	r2, [pc, #148]	; (8002394 <HAL_ADC_Start_DMA+0xf4>)
 80022fe:	4013      	ands	r3, r2
 8002300:	2280      	movs	r2, #128	; 0x80
 8002302:	0052      	lsls	r2, r2, #1
 8002304:	431a      	orrs	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2234      	movs	r2, #52	; 0x34
 8002314:	2100      	movs	r1, #0
 8002316:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231c:	4a1e      	ldr	r2, [pc, #120]	; (8002398 <HAL_ADC_Start_DMA+0xf8>)
 800231e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002324:	4a1d      	ldr	r2, [pc, #116]	; (800239c <HAL_ADC_Start_DMA+0xfc>)
 8002326:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232c:	4a1c      	ldr	r2, [pc, #112]	; (80023a0 <HAL_ADC_Start_DMA+0x100>)
 800232e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	221c      	movs	r2, #28
 8002336:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	685a      	ldr	r2, [r3, #4]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2110      	movs	r1, #16
 8002344:	430a      	orrs	r2, r1
 8002346:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2101      	movs	r1, #1
 8002354:	430a      	orrs	r2, r1
 8002356:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	3340      	adds	r3, #64	; 0x40
 8002362:	0019      	movs	r1, r3
 8002364:	68ba      	ldr	r2, [r7, #8]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f000 fc0a 	bl	8002b80 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689a      	ldr	r2, [r3, #8]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2104      	movs	r1, #4
 8002378:	430a      	orrs	r2, r1
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	e003      	b.n	8002386 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800237e:	2317      	movs	r3, #23
 8002380:	18fb      	adds	r3, r7, r3
 8002382:	2202      	movs	r2, #2
 8002384:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002386:	2317      	movs	r3, #23
 8002388:	18fb      	adds	r3, r7, r3
 800238a:	781b      	ldrb	r3, [r3, #0]
}
 800238c:	0018      	movs	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	b007      	add	sp, #28
 8002392:	bd90      	pop	{r4, r7, pc}
 8002394:	fffff0fe 	.word	0xfffff0fe
 8002398:	080026f9 	.word	0x080026f9
 800239c:	080027ad 	.word	0x080027ad
 80023a0:	080027cb 	.word	0x080027cb

080023a4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80023ac:	46c0      	nop			; (mov r8, r8)
 80023ae:	46bd      	mov	sp, r7
 80023b0:	b002      	add	sp, #8
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80023bc:	46c0      	nop			; (mov r8, r8)
 80023be:	46bd      	mov	sp, r7
 80023c0:	b002      	add	sp, #8
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80023cc:	46c0      	nop			; (mov r8, r8)
 80023ce:	46bd      	mov	sp, r7
 80023d0:	b002      	add	sp, #8
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023de:	230f      	movs	r3, #15
 80023e0:	18fb      	adds	r3, r7, r3
 80023e2:	2200      	movs	r2, #0
 80023e4:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80023e6:	2300      	movs	r3, #0
 80023e8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ee:	2380      	movs	r3, #128	; 0x80
 80023f0:	055b      	lsls	r3, r3, #21
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d011      	beq.n	800241a <HAL_ADC_ConfigChannel+0x46>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d00d      	beq.n	800241a <HAL_ADC_ConfigChannel+0x46>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002402:	2b02      	cmp	r3, #2
 8002404:	d009      	beq.n	800241a <HAL_ADC_ConfigChannel+0x46>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240a:	2b03      	cmp	r3, #3
 800240c:	d005      	beq.n	800241a <HAL_ADC_ConfigChannel+0x46>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002412:	2b04      	cmp	r3, #4
 8002414:	d001      	beq.n	800241a <HAL_ADC_ConfigChannel+0x46>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2234      	movs	r2, #52	; 0x34
 800241e:	5c9b      	ldrb	r3, [r3, r2]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d101      	bne.n	8002428 <HAL_ADC_ConfigChannel+0x54>
 8002424:	2302      	movs	r3, #2
 8002426:	e0d0      	b.n	80025ca <HAL_ADC_ConfigChannel+0x1f6>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2234      	movs	r2, #52	; 0x34
 800242c:	2101      	movs	r1, #1
 800242e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	2204      	movs	r2, #4
 8002438:	4013      	ands	r3, r2
 800243a:	d000      	beq.n	800243e <HAL_ADC_ConfigChannel+0x6a>
 800243c:	e0b4      	b.n	80025a8 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	4a64      	ldr	r2, [pc, #400]	; (80025d4 <HAL_ADC_ConfigChannel+0x200>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d100      	bne.n	800244a <HAL_ADC_ConfigChannel+0x76>
 8002448:	e082      	b.n	8002550 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2201      	movs	r2, #1
 8002456:	409a      	lsls	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002464:	2380      	movs	r3, #128	; 0x80
 8002466:	055b      	lsls	r3, r3, #21
 8002468:	429a      	cmp	r2, r3
 800246a:	d037      	beq.n	80024dc <HAL_ADC_ConfigChannel+0x108>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002470:	2b01      	cmp	r3, #1
 8002472:	d033      	beq.n	80024dc <HAL_ADC_ConfigChannel+0x108>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002478:	2b02      	cmp	r3, #2
 800247a:	d02f      	beq.n	80024dc <HAL_ADC_ConfigChannel+0x108>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002480:	2b03      	cmp	r3, #3
 8002482:	d02b      	beq.n	80024dc <HAL_ADC_ConfigChannel+0x108>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002488:	2b04      	cmp	r3, #4
 800248a:	d027      	beq.n	80024dc <HAL_ADC_ConfigChannel+0x108>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002490:	2b05      	cmp	r3, #5
 8002492:	d023      	beq.n	80024dc <HAL_ADC_ConfigChannel+0x108>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002498:	2b06      	cmp	r3, #6
 800249a:	d01f      	beq.n	80024dc <HAL_ADC_ConfigChannel+0x108>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a0:	2b07      	cmp	r3, #7
 80024a2:	d01b      	beq.n	80024dc <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	2107      	movs	r1, #7
 80024b0:	400b      	ands	r3, r1
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d012      	beq.n	80024dc <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	695a      	ldr	r2, [r3, #20]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2107      	movs	r1, #7
 80024c2:	438a      	bics	r2, r1
 80024c4:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6959      	ldr	r1, [r3, #20]
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	2207      	movs	r2, #7
 80024d2:	401a      	ands	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	430a      	orrs	r2, r1
 80024da:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2b10      	cmp	r3, #16
 80024e2:	d007      	beq.n	80024f4 <HAL_ADC_ConfigChannel+0x120>
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2b11      	cmp	r3, #17
 80024ea:	d003      	beq.n	80024f4 <HAL_ADC_ConfigChannel+0x120>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2b12      	cmp	r3, #18
 80024f2:	d163      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80024f4:	4b38      	ldr	r3, [pc, #224]	; (80025d8 <HAL_ADC_ConfigChannel+0x204>)
 80024f6:	6819      	ldr	r1, [r3, #0]
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2b10      	cmp	r3, #16
 80024fe:	d009      	beq.n	8002514 <HAL_ADC_ConfigChannel+0x140>
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2b11      	cmp	r3, #17
 8002506:	d102      	bne.n	800250e <HAL_ADC_ConfigChannel+0x13a>
 8002508:	2380      	movs	r3, #128	; 0x80
 800250a:	03db      	lsls	r3, r3, #15
 800250c:	e004      	b.n	8002518 <HAL_ADC_ConfigChannel+0x144>
 800250e:	2380      	movs	r3, #128	; 0x80
 8002510:	045b      	lsls	r3, r3, #17
 8002512:	e001      	b.n	8002518 <HAL_ADC_ConfigChannel+0x144>
 8002514:	2380      	movs	r3, #128	; 0x80
 8002516:	041b      	lsls	r3, r3, #16
 8002518:	4a2f      	ldr	r2, [pc, #188]	; (80025d8 <HAL_ADC_ConfigChannel+0x204>)
 800251a:	430b      	orrs	r3, r1
 800251c:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2b10      	cmp	r3, #16
 8002524:	d14a      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002526:	4b2d      	ldr	r3, [pc, #180]	; (80025dc <HAL_ADC_ConfigChannel+0x208>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	492d      	ldr	r1, [pc, #180]	; (80025e0 <HAL_ADC_ConfigChannel+0x20c>)
 800252c:	0018      	movs	r0, r3
 800252e:	f7fd fdeb 	bl	8000108 <__udivsi3>
 8002532:	0003      	movs	r3, r0
 8002534:	001a      	movs	r2, r3
 8002536:	0013      	movs	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	189b      	adds	r3, r3, r2
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002540:	e002      	b.n	8002548 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	3b01      	subs	r3, #1
 8002546:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1f9      	bne.n	8002542 <HAL_ADC_ConfigChannel+0x16e>
 800254e:	e035      	b.n	80025bc <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2101      	movs	r1, #1
 800255c:	4099      	lsls	r1, r3
 800255e:	000b      	movs	r3, r1
 8002560:	43d9      	mvns	r1, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	400a      	ands	r2, r1
 8002568:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2b10      	cmp	r3, #16
 8002570:	d007      	beq.n	8002582 <HAL_ADC_ConfigChannel+0x1ae>
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2b11      	cmp	r3, #17
 8002578:	d003      	beq.n	8002582 <HAL_ADC_ConfigChannel+0x1ae>
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2b12      	cmp	r3, #18
 8002580:	d11c      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002582:	4b15      	ldr	r3, [pc, #84]	; (80025d8 <HAL_ADC_ConfigChannel+0x204>)
 8002584:	6819      	ldr	r1, [r3, #0]
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2b10      	cmp	r3, #16
 800258c:	d007      	beq.n	800259e <HAL_ADC_ConfigChannel+0x1ca>
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2b11      	cmp	r3, #17
 8002594:	d101      	bne.n	800259a <HAL_ADC_ConfigChannel+0x1c6>
 8002596:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <HAL_ADC_ConfigChannel+0x210>)
 8002598:	e002      	b.n	80025a0 <HAL_ADC_ConfigChannel+0x1cc>
 800259a:	4b13      	ldr	r3, [pc, #76]	; (80025e8 <HAL_ADC_ConfigChannel+0x214>)
 800259c:	e000      	b.n	80025a0 <HAL_ADC_ConfigChannel+0x1cc>
 800259e:	4b13      	ldr	r3, [pc, #76]	; (80025ec <HAL_ADC_ConfigChannel+0x218>)
 80025a0:	4a0d      	ldr	r2, [pc, #52]	; (80025d8 <HAL_ADC_ConfigChannel+0x204>)
 80025a2:	400b      	ands	r3, r1
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	e009      	b.n	80025bc <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ac:	2220      	movs	r2, #32
 80025ae:	431a      	orrs	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80025b4:	230f      	movs	r3, #15
 80025b6:	18fb      	adds	r3, r7, r3
 80025b8:	2201      	movs	r2, #1
 80025ba:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2234      	movs	r2, #52	; 0x34
 80025c0:	2100      	movs	r1, #0
 80025c2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80025c4:	230f      	movs	r3, #15
 80025c6:	18fb      	adds	r3, r7, r3
 80025c8:	781b      	ldrb	r3, [r3, #0]
}
 80025ca:	0018      	movs	r0, r3
 80025cc:	46bd      	mov	sp, r7
 80025ce:	b004      	add	sp, #16
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	46c0      	nop			; (mov r8, r8)
 80025d4:	00001001 	.word	0x00001001
 80025d8:	40012708 	.word	0x40012708
 80025dc:	20000028 	.word	0x20000028
 80025e0:	000f4240 	.word	0x000f4240
 80025e4:	ffbfffff 	.word	0xffbfffff
 80025e8:	feffffff 	.word	0xfeffffff
 80025ec:	ff7fffff 	.word	0xff7fffff

080025f0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025f8:	2300      	movs	r3, #0
 80025fa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80025fc:	2300      	movs	r3, #0
 80025fe:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	2203      	movs	r2, #3
 8002608:	4013      	ands	r3, r2
 800260a:	2b01      	cmp	r3, #1
 800260c:	d112      	bne.n	8002634 <ADC_Enable+0x44>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2201      	movs	r2, #1
 8002616:	4013      	ands	r3, r2
 8002618:	2b01      	cmp	r3, #1
 800261a:	d009      	beq.n	8002630 <ADC_Enable+0x40>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68da      	ldr	r2, [r3, #12]
 8002622:	2380      	movs	r3, #128	; 0x80
 8002624:	021b      	lsls	r3, r3, #8
 8002626:	401a      	ands	r2, r3
 8002628:	2380      	movs	r3, #128	; 0x80
 800262a:	021b      	lsls	r3, r3, #8
 800262c:	429a      	cmp	r2, r3
 800262e:	d101      	bne.n	8002634 <ADC_Enable+0x44>
 8002630:	2301      	movs	r3, #1
 8002632:	e000      	b.n	8002636 <ADC_Enable+0x46>
 8002634:	2300      	movs	r3, #0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d152      	bne.n	80026e0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	4a2a      	ldr	r2, [pc, #168]	; (80026ec <ADC_Enable+0xfc>)
 8002642:	4013      	ands	r3, r2
 8002644:	d00d      	beq.n	8002662 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264a:	2210      	movs	r2, #16
 800264c:	431a      	orrs	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002656:	2201      	movs	r2, #1
 8002658:	431a      	orrs	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e03f      	b.n	80026e2 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2101      	movs	r1, #1
 800266e:	430a      	orrs	r2, r1
 8002670:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002672:	4b1f      	ldr	r3, [pc, #124]	; (80026f0 <ADC_Enable+0x100>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	491f      	ldr	r1, [pc, #124]	; (80026f4 <ADC_Enable+0x104>)
 8002678:	0018      	movs	r0, r3
 800267a:	f7fd fd45 	bl	8000108 <__udivsi3>
 800267e:	0003      	movs	r3, r0
 8002680:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002682:	e002      	b.n	800268a <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	3b01      	subs	r3, #1
 8002688:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1f9      	bne.n	8002684 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002690:	f7ff fcae 	bl	8001ff0 <HAL_GetTick>
 8002694:	0003      	movs	r3, r0
 8002696:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002698:	e01b      	b.n	80026d2 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800269a:	f7ff fca9 	bl	8001ff0 <HAL_GetTick>
 800269e:	0002      	movs	r2, r0
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d914      	bls.n	80026d2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2201      	movs	r2, #1
 80026b0:	4013      	ands	r3, r2
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d00d      	beq.n	80026d2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ba:	2210      	movs	r2, #16
 80026bc:	431a      	orrs	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c6:	2201      	movs	r2, #1
 80026c8:	431a      	orrs	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e007      	b.n	80026e2 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2201      	movs	r2, #1
 80026da:	4013      	ands	r3, r2
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d1dc      	bne.n	800269a <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	0018      	movs	r0, r3
 80026e4:	46bd      	mov	sp, r7
 80026e6:	b004      	add	sp, #16
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	46c0      	nop			; (mov r8, r8)
 80026ec:	80000017 	.word	0x80000017
 80026f0:	20000028 	.word	0x20000028
 80026f4:	000f4240 	.word	0x000f4240

080026f8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002704:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270a:	2250      	movs	r2, #80	; 0x50
 800270c:	4013      	ands	r3, r2
 800270e:	d140      	bne.n	8002792 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002714:	2280      	movs	r2, #128	; 0x80
 8002716:	0092      	lsls	r2, r2, #2
 8002718:	431a      	orrs	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68da      	ldr	r2, [r3, #12]
 8002724:	23c0      	movs	r3, #192	; 0xc0
 8002726:	011b      	lsls	r3, r3, #4
 8002728:	4013      	ands	r3, r2
 800272a:	d12d      	bne.n	8002788 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002730:	2b00      	cmp	r3, #0
 8002732:	d129      	bne.n	8002788 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2208      	movs	r2, #8
 800273c:	4013      	ands	r3, r2
 800273e:	2b08      	cmp	r3, #8
 8002740:	d122      	bne.n	8002788 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	2204      	movs	r2, #4
 800274a:	4013      	ands	r3, r2
 800274c:	d110      	bne.n	8002770 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	210c      	movs	r1, #12
 800275a:	438a      	bics	r2, r1
 800275c:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002762:	4a11      	ldr	r2, [pc, #68]	; (80027a8 <ADC_DMAConvCplt+0xb0>)
 8002764:	4013      	ands	r3, r2
 8002766:	2201      	movs	r2, #1
 8002768:	431a      	orrs	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	639a      	str	r2, [r3, #56]	; 0x38
 800276e:	e00b      	b.n	8002788 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002774:	2220      	movs	r2, #32
 8002776:	431a      	orrs	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002780:	2201      	movs	r2, #1
 8002782:	431a      	orrs	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	0018      	movs	r0, r3
 800278c:	f7ff fe0a 	bl	80023a4 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8002790:	e005      	b.n	800279e <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	0010      	movs	r0, r2
 800279c:	4798      	blx	r3
}
 800279e:	46c0      	nop			; (mov r8, r8)
 80027a0:	46bd      	mov	sp, r7
 80027a2:	b004      	add	sp, #16
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	fffffefe 	.word	0xfffffefe

080027ac <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b8:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	0018      	movs	r0, r3
 80027be:	f7ff fdf9 	bl	80023b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027c2:	46c0      	nop			; (mov r8, r8)
 80027c4:	46bd      	mov	sp, r7
 80027c6:	b004      	add	sp, #16
 80027c8:	bd80      	pop	{r7, pc}

080027ca <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b084      	sub	sp, #16
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027dc:	2240      	movs	r2, #64	; 0x40
 80027de:	431a      	orrs	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e8:	2204      	movs	r2, #4
 80027ea:	431a      	orrs	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	0018      	movs	r0, r3
 80027f4:	f7ff fde6 	bl	80023c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027f8:	46c0      	nop			; (mov r8, r8)
 80027fa:	46bd      	mov	sp, r7
 80027fc:	b004      	add	sp, #16
 80027fe:	bd80      	pop	{r7, pc}

08002800 <__NVIC_EnableIRQ>:
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	0002      	movs	r2, r0
 8002808:	1dfb      	adds	r3, r7, #7
 800280a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800280c:	1dfb      	adds	r3, r7, #7
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b7f      	cmp	r3, #127	; 0x7f
 8002812:	d809      	bhi.n	8002828 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002814:	1dfb      	adds	r3, r7, #7
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	001a      	movs	r2, r3
 800281a:	231f      	movs	r3, #31
 800281c:	401a      	ands	r2, r3
 800281e:	4b04      	ldr	r3, [pc, #16]	; (8002830 <__NVIC_EnableIRQ+0x30>)
 8002820:	2101      	movs	r1, #1
 8002822:	4091      	lsls	r1, r2
 8002824:	000a      	movs	r2, r1
 8002826:	601a      	str	r2, [r3, #0]
}
 8002828:	46c0      	nop			; (mov r8, r8)
 800282a:	46bd      	mov	sp, r7
 800282c:	b002      	add	sp, #8
 800282e:	bd80      	pop	{r7, pc}
 8002830:	e000e100 	.word	0xe000e100

08002834 <__NVIC_SetPriority>:
{
 8002834:	b590      	push	{r4, r7, lr}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	0002      	movs	r2, r0
 800283c:	6039      	str	r1, [r7, #0]
 800283e:	1dfb      	adds	r3, r7, #7
 8002840:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002842:	1dfb      	adds	r3, r7, #7
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	2b7f      	cmp	r3, #127	; 0x7f
 8002848:	d828      	bhi.n	800289c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800284a:	4a2f      	ldr	r2, [pc, #188]	; (8002908 <__NVIC_SetPriority+0xd4>)
 800284c:	1dfb      	adds	r3, r7, #7
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	b25b      	sxtb	r3, r3
 8002852:	089b      	lsrs	r3, r3, #2
 8002854:	33c0      	adds	r3, #192	; 0xc0
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	589b      	ldr	r3, [r3, r2]
 800285a:	1dfa      	adds	r2, r7, #7
 800285c:	7812      	ldrb	r2, [r2, #0]
 800285e:	0011      	movs	r1, r2
 8002860:	2203      	movs	r2, #3
 8002862:	400a      	ands	r2, r1
 8002864:	00d2      	lsls	r2, r2, #3
 8002866:	21ff      	movs	r1, #255	; 0xff
 8002868:	4091      	lsls	r1, r2
 800286a:	000a      	movs	r2, r1
 800286c:	43d2      	mvns	r2, r2
 800286e:	401a      	ands	r2, r3
 8002870:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	019b      	lsls	r3, r3, #6
 8002876:	22ff      	movs	r2, #255	; 0xff
 8002878:	401a      	ands	r2, r3
 800287a:	1dfb      	adds	r3, r7, #7
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	0018      	movs	r0, r3
 8002880:	2303      	movs	r3, #3
 8002882:	4003      	ands	r3, r0
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002888:	481f      	ldr	r0, [pc, #124]	; (8002908 <__NVIC_SetPriority+0xd4>)
 800288a:	1dfb      	adds	r3, r7, #7
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	b25b      	sxtb	r3, r3
 8002890:	089b      	lsrs	r3, r3, #2
 8002892:	430a      	orrs	r2, r1
 8002894:	33c0      	adds	r3, #192	; 0xc0
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	501a      	str	r2, [r3, r0]
}
 800289a:	e031      	b.n	8002900 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800289c:	4a1b      	ldr	r2, [pc, #108]	; (800290c <__NVIC_SetPriority+0xd8>)
 800289e:	1dfb      	adds	r3, r7, #7
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	0019      	movs	r1, r3
 80028a4:	230f      	movs	r3, #15
 80028a6:	400b      	ands	r3, r1
 80028a8:	3b08      	subs	r3, #8
 80028aa:	089b      	lsrs	r3, r3, #2
 80028ac:	3306      	adds	r3, #6
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	18d3      	adds	r3, r2, r3
 80028b2:	3304      	adds	r3, #4
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	1dfa      	adds	r2, r7, #7
 80028b8:	7812      	ldrb	r2, [r2, #0]
 80028ba:	0011      	movs	r1, r2
 80028bc:	2203      	movs	r2, #3
 80028be:	400a      	ands	r2, r1
 80028c0:	00d2      	lsls	r2, r2, #3
 80028c2:	21ff      	movs	r1, #255	; 0xff
 80028c4:	4091      	lsls	r1, r2
 80028c6:	000a      	movs	r2, r1
 80028c8:	43d2      	mvns	r2, r2
 80028ca:	401a      	ands	r2, r3
 80028cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	019b      	lsls	r3, r3, #6
 80028d2:	22ff      	movs	r2, #255	; 0xff
 80028d4:	401a      	ands	r2, r3
 80028d6:	1dfb      	adds	r3, r7, #7
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	0018      	movs	r0, r3
 80028dc:	2303      	movs	r3, #3
 80028de:	4003      	ands	r3, r0
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028e4:	4809      	ldr	r0, [pc, #36]	; (800290c <__NVIC_SetPriority+0xd8>)
 80028e6:	1dfb      	adds	r3, r7, #7
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	001c      	movs	r4, r3
 80028ec:	230f      	movs	r3, #15
 80028ee:	4023      	ands	r3, r4
 80028f0:	3b08      	subs	r3, #8
 80028f2:	089b      	lsrs	r3, r3, #2
 80028f4:	430a      	orrs	r2, r1
 80028f6:	3306      	adds	r3, #6
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	18c3      	adds	r3, r0, r3
 80028fc:	3304      	adds	r3, #4
 80028fe:	601a      	str	r2, [r3, #0]
}
 8002900:	46c0      	nop			; (mov r8, r8)
 8002902:	46bd      	mov	sp, r7
 8002904:	b003      	add	sp, #12
 8002906:	bd90      	pop	{r4, r7, pc}
 8002908:	e000e100 	.word	0xe000e100
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	1e5a      	subs	r2, r3, #1
 800291c:	2380      	movs	r3, #128	; 0x80
 800291e:	045b      	lsls	r3, r3, #17
 8002920:	429a      	cmp	r2, r3
 8002922:	d301      	bcc.n	8002928 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002924:	2301      	movs	r3, #1
 8002926:	e010      	b.n	800294a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002928:	4b0a      	ldr	r3, [pc, #40]	; (8002954 <SysTick_Config+0x44>)
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	3a01      	subs	r2, #1
 800292e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002930:	2301      	movs	r3, #1
 8002932:	425b      	negs	r3, r3
 8002934:	2103      	movs	r1, #3
 8002936:	0018      	movs	r0, r3
 8002938:	f7ff ff7c 	bl	8002834 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800293c:	4b05      	ldr	r3, [pc, #20]	; (8002954 <SysTick_Config+0x44>)
 800293e:	2200      	movs	r2, #0
 8002940:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002942:	4b04      	ldr	r3, [pc, #16]	; (8002954 <SysTick_Config+0x44>)
 8002944:	2207      	movs	r2, #7
 8002946:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002948:	2300      	movs	r3, #0
}
 800294a:	0018      	movs	r0, r3
 800294c:	46bd      	mov	sp, r7
 800294e:	b002      	add	sp, #8
 8002950:	bd80      	pop	{r7, pc}
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	e000e010 	.word	0xe000e010

08002958 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	60b9      	str	r1, [r7, #8]
 8002960:	607a      	str	r2, [r7, #4]
 8002962:	210f      	movs	r1, #15
 8002964:	187b      	adds	r3, r7, r1
 8002966:	1c02      	adds	r2, r0, #0
 8002968:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	187b      	adds	r3, r7, r1
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	b25b      	sxtb	r3, r3
 8002972:	0011      	movs	r1, r2
 8002974:	0018      	movs	r0, r3
 8002976:	f7ff ff5d 	bl	8002834 <__NVIC_SetPriority>
}
 800297a:	46c0      	nop			; (mov r8, r8)
 800297c:	46bd      	mov	sp, r7
 800297e:	b004      	add	sp, #16
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b082      	sub	sp, #8
 8002986:	af00      	add	r7, sp, #0
 8002988:	0002      	movs	r2, r0
 800298a:	1dfb      	adds	r3, r7, #7
 800298c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800298e:	1dfb      	adds	r3, r7, #7
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	b25b      	sxtb	r3, r3
 8002994:	0018      	movs	r0, r3
 8002996:	f7ff ff33 	bl	8002800 <__NVIC_EnableIRQ>
}
 800299a:	46c0      	nop			; (mov r8, r8)
 800299c:	46bd      	mov	sp, r7
 800299e:	b002      	add	sp, #8
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b082      	sub	sp, #8
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	0018      	movs	r0, r3
 80029ae:	f7ff ffaf 	bl	8002910 <SysTick_Config>
 80029b2:	0003      	movs	r3, r0
}
 80029b4:	0018      	movs	r0, r3
 80029b6:	46bd      	mov	sp, r7
 80029b8:	b002      	add	sp, #8
 80029ba:	bd80      	pop	{r7, pc}

080029bc <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e015      	b.n	80029fa <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if (hdac->State == HAL_DAC_STATE_RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	791b      	ldrb	r3, [r3, #4]
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d106      	bne.n	80029e6 <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	0018      	movs	r0, r3
 80029e2:	f7fe ffc7 	bl	8001974 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2202      	movs	r2, #2
 80029ea:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	0018      	movs	r0, r3
 80029fc:	46bd      	mov	sp, r7
 80029fe:	b002      	add	sp, #8
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_DAC_ConfigChannel>:
  *          This parameter can be one of the following values:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b086      	sub	sp, #24
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	60f8      	str	r0, [r7, #12]
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	617b      	str	r3, [r7, #20]
 8002a12:	2300      	movs	r3, #0
 8002a14:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	795b      	ldrb	r3, [r3, #5]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d101      	bne.n	8002a22 <HAL_DAC_ConfigChannel+0x20>
 8002a1e:	2302      	movs	r3, #2
 8002a20:	e029      	b.n	8002a76 <HAL_DAC_ConfigChannel+0x74>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2201      	movs	r2, #1
 8002a26:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel); 
 8002a36:	223e      	movs	r2, #62	; 0x3e
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	409a      	lsls	r2, r3
 8002a3c:	0013      	movs	r3, r2
 8002a3e:	43da      	mvns	r2, r3
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	4013      	ands	r3, r2
 8002a44:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	409a      	lsls	r2, r3
 8002a58:	0013      	movs	r3, r2
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	0018      	movs	r0, r3
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	b006      	add	sp, #24
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_DAC_Start>:
       /* STM32F091xC  STM32F098xx */

#if defined (STM32F051x8) || defined (STM32F058xx)

HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b082      	sub	sp, #8
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
 8002a86:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	795b      	ldrb	r3, [r3, #5]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d101      	bne.n	8002a94 <HAL_DAC_Start+0x16>
 8002a90:	2302      	movs	r3, #2
 8002a92:	e028      	b.n	8002ae6 <HAL_DAC_Start+0x68>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6819      	ldr	r1, [r3, #0]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	409a      	lsls	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10e      	bne.n	8002ad8 <HAL_DAC_Start+0x5a>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	223c      	movs	r2, #60	; 0x3c
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	2b3c      	cmp	r3, #60	; 0x3c
 8002ac6:	d107      	bne.n	8002ad8 <HAL_DAC_Start+0x5a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	605a      	str	r2, [r3, #4]
    }
  }
 
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	b002      	add	sp, #8
 8002aec:	bd80      	pop	{r7, pc}
	...

08002af0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002af8:	2300      	movs	r3, #0
 8002afa:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e036      	b.n	8002b74 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2221      	movs	r2, #33	; 0x21
 8002b0a:	2102      	movs	r1, #2
 8002b0c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	4a18      	ldr	r2, [pc, #96]	; (8002b7c <HAL_DMA_Init+0x8c>)
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002b26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	69db      	ldr	r3, [r3, #28]
 8002b44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	0018      	movs	r0, r3
 8002b58:	f000 f9c4 	bl	8002ee4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2221      	movs	r2, #33	; 0x21
 8002b66:	2101      	movs	r1, #1
 8002b68:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2220      	movs	r2, #32
 8002b6e:	2100      	movs	r1, #0
 8002b70:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}  
 8002b74:	0018      	movs	r0, r3
 8002b76:	46bd      	mov	sp, r7
 8002b78:	b004      	add	sp, #16
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	ffffc00f 	.word	0xffffc00f

08002b80 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
 8002b8c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002b8e:	2317      	movs	r3, #23
 8002b90:	18fb      	adds	r3, r7, r3
 8002b92:	2200      	movs	r2, #0
 8002b94:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2220      	movs	r2, #32
 8002b9a:	5c9b      	ldrb	r3, [r3, r2]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d101      	bne.n	8002ba4 <HAL_DMA_Start_IT+0x24>
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	e04f      	b.n	8002c44 <HAL_DMA_Start_IT+0xc4>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	2101      	movs	r1, #1
 8002baa:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2221      	movs	r2, #33	; 0x21
 8002bb0:	5c9b      	ldrb	r3, [r3, r2]
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d13a      	bne.n	8002c2e <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2221      	movs	r2, #33	; 0x21
 8002bbc:	2102      	movs	r1, #2
 8002bbe:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	438a      	bics	r2, r1
 8002bd4:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	68b9      	ldr	r1, [r7, #8]
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f000 f954 	bl	8002e8a <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d008      	beq.n	8002bfc <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	210e      	movs	r1, #14
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	601a      	str	r2, [r3, #0]
 8002bfa:	e00f      	b.n	8002c1c <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	210a      	movs	r1, #10
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2104      	movs	r1, #4
 8002c18:	438a      	bics	r2, r1
 8002c1a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2101      	movs	r1, #1
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	e007      	b.n	8002c3e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2220      	movs	r2, #32
 8002c32:	2100      	movs	r1, #0
 8002c34:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002c36:	2317      	movs	r3, #23
 8002c38:	18fb      	adds	r3, r7, r3
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8002c3e:	2317      	movs	r3, #23
 8002c40:	18fb      	adds	r3, r7, r3
 8002c42:	781b      	ldrb	r3, [r3, #0]
} 
 8002c44:	0018      	movs	r0, r3
 8002c46:	46bd      	mov	sp, r7
 8002c48:	b006      	add	sp, #24
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2221      	movs	r2, #33	; 0x21
 8002c58:	5c9b      	ldrb	r3, [r3, r2]
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d008      	beq.n	8002c72 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2204      	movs	r2, #4
 8002c64:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2220      	movs	r2, #32
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e020      	b.n	8002cb4 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	210e      	movs	r1, #14
 8002c7e:	438a      	bics	r2, r1
 8002c80:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	438a      	bics	r2, r1
 8002c90:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	4091      	lsls	r1, r2
 8002c9e:	000a      	movs	r2, r1
 8002ca0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2221      	movs	r2, #33	; 0x21
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2220      	movs	r2, #32
 8002cae:	2100      	movs	r1, #0
 8002cb0:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	b002      	add	sp, #8
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cc4:	210f      	movs	r1, #15
 8002cc6:	187b      	adds	r3, r7, r1
 8002cc8:	2200      	movs	r2, #0
 8002cca:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2221      	movs	r2, #33	; 0x21
 8002cd0:	5c9b      	ldrb	r3, [r3, r2]
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d006      	beq.n	8002ce6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2204      	movs	r2, #4
 8002cdc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002cde:	187b      	adds	r3, r7, r1
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	701a      	strb	r2, [r3, #0]
 8002ce4:	e028      	b.n	8002d38 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	210e      	movs	r1, #14
 8002cf2:	438a      	bics	r2, r1
 8002cf4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2101      	movs	r1, #1
 8002d02:	438a      	bics	r2, r1
 8002d04:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d0e:	2101      	movs	r1, #1
 8002d10:	4091      	lsls	r1, r2
 8002d12:	000a      	movs	r2, r1
 8002d14:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2221      	movs	r2, #33	; 0x21
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2220      	movs	r2, #32
 8002d22:	2100      	movs	r1, #0
 8002d24:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d004      	beq.n	8002d38 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	0010      	movs	r0, r2
 8002d36:	4798      	blx	r3
    } 
  }
  return status;
 8002d38:	230f      	movs	r3, #15
 8002d3a:	18fb      	adds	r3, r7, r3
 8002d3c:	781b      	ldrb	r3, [r3, #0]
}
 8002d3e:	0018      	movs	r0, r3
 8002d40:	46bd      	mov	sp, r7
 8002d42:	b004      	add	sp, #16
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b084      	sub	sp, #16
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	2204      	movs	r2, #4
 8002d64:	409a      	lsls	r2, r3
 8002d66:	0013      	movs	r3, r2
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	d024      	beq.n	8002db8 <HAL_DMA_IRQHandler+0x72>
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	2204      	movs	r2, #4
 8002d72:	4013      	ands	r3, r2
 8002d74:	d020      	beq.n	8002db8 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2220      	movs	r2, #32
 8002d7e:	4013      	ands	r3, r2
 8002d80:	d107      	bne.n	8002d92 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2104      	movs	r1, #4
 8002d8e:	438a      	bics	r2, r1
 8002d90:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d9a:	2104      	movs	r1, #4
 8002d9c:	4091      	lsls	r1, r2
 8002d9e:	000a      	movs	r2, r1
 8002da0:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d100      	bne.n	8002dac <HAL_DMA_IRQHandler+0x66>
 8002daa:	e06a      	b.n	8002e82 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	0010      	movs	r0, r2
 8002db4:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002db6:	e064      	b.n	8002e82 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	409a      	lsls	r2, r3
 8002dc0:	0013      	movs	r3, r2
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	d02b      	beq.n	8002e20 <HAL_DMA_IRQHandler+0xda>
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	2202      	movs	r2, #2
 8002dcc:	4013      	ands	r3, r2
 8002dce:	d027      	beq.n	8002e20 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	4013      	ands	r3, r2
 8002dda:	d10b      	bne.n	8002df4 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	210a      	movs	r1, #10
 8002de8:	438a      	bics	r2, r1
 8002dea:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2221      	movs	r2, #33	; 0x21
 8002df0:	2101      	movs	r1, #1
 8002df2:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dfc:	2102      	movs	r1, #2
 8002dfe:	4091      	lsls	r1, r2
 8002e00:	000a      	movs	r2, r1
 8002e02:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2220      	movs	r2, #32
 8002e08:	2100      	movs	r1, #0
 8002e0a:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d036      	beq.n	8002e82 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	0010      	movs	r0, r2
 8002e1c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002e1e:	e030      	b.n	8002e82 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e24:	2208      	movs	r2, #8
 8002e26:	409a      	lsls	r2, r3
 8002e28:	0013      	movs	r3, r2
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	d028      	beq.n	8002e82 <HAL_DMA_IRQHandler+0x13c>
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	2208      	movs	r2, #8
 8002e34:	4013      	ands	r3, r2
 8002e36:	d024      	beq.n	8002e82 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	210e      	movs	r1, #14
 8002e44:	438a      	bics	r2, r1
 8002e46:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e50:	2101      	movs	r1, #1
 8002e52:	4091      	lsls	r1, r2
 8002e54:	000a      	movs	r2, r1
 8002e56:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2221      	movs	r2, #33	; 0x21
 8002e62:	2101      	movs	r1, #1
 8002e64:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2220      	movs	r2, #32
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d005      	beq.n	8002e82 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	0010      	movs	r0, r2
 8002e7e:	4798      	blx	r3
    }
   }
}  
 8002e80:	e7ff      	b.n	8002e82 <HAL_DMA_IRQHandler+0x13c>
 8002e82:	46c0      	nop			; (mov r8, r8)
 8002e84:	46bd      	mov	sp, r7
 8002e86:	b004      	add	sp, #16
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b084      	sub	sp, #16
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	60f8      	str	r0, [r7, #12]
 8002e92:	60b9      	str	r1, [r7, #8]
 8002e94:	607a      	str	r2, [r7, #4]
 8002e96:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea0:	2101      	movs	r1, #1
 8002ea2:	4091      	lsls	r1, r2
 8002ea4:	000a      	movs	r2, r1
 8002ea6:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	2b10      	cmp	r3, #16
 8002eb6:	d108      	bne.n	8002eca <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68ba      	ldr	r2, [r7, #8]
 8002ec6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002ec8:	e007      	b.n	8002eda <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68ba      	ldr	r2, [r7, #8]
 8002ed0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	60da      	str	r2, [r3, #12]
}
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	46bd      	mov	sp, r7
 8002ede:	b004      	add	sp, #16
 8002ee0:	bd80      	pop	{r7, pc}
	...

08002ee4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a08      	ldr	r2, [pc, #32]	; (8002f14 <DMA_CalcBaseAndBitshift+0x30>)
 8002ef2:	4694      	mov	ip, r2
 8002ef4:	4463      	add	r3, ip
 8002ef6:	2114      	movs	r1, #20
 8002ef8:	0018      	movs	r0, r3
 8002efa:	f7fd f905 	bl	8000108 <__udivsi3>
 8002efe:	0003      	movs	r3, r0
 8002f00:	009a      	lsls	r2, r3, #2
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a03      	ldr	r2, [pc, #12]	; (8002f18 <DMA_CalcBaseAndBitshift+0x34>)
 8002f0a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002f0c:	46c0      	nop			; (mov r8, r8)
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	b002      	add	sp, #8
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	bffdfff8 	.word	0xbffdfff8
 8002f18:	40020000 	.word	0x40020000

08002f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f26:	2300      	movs	r3, #0
 8002f28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f2a:	e14f      	b.n	80031cc <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2101      	movs	r1, #1
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	4091      	lsls	r1, r2
 8002f36:	000a      	movs	r2, r1
 8002f38:	4013      	ands	r3, r2
 8002f3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d100      	bne.n	8002f44 <HAL_GPIO_Init+0x28>
 8002f42:	e140      	b.n	80031c6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	2203      	movs	r2, #3
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d005      	beq.n	8002f5c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	2203      	movs	r2, #3
 8002f56:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d130      	bne.n	8002fbe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	2203      	movs	r2, #3
 8002f68:	409a      	lsls	r2, r3
 8002f6a:	0013      	movs	r3, r2
 8002f6c:	43da      	mvns	r2, r3
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	4013      	ands	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	68da      	ldr	r2, [r3, #12]
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	409a      	lsls	r2, r3
 8002f7e:	0013      	movs	r3, r2
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f92:	2201      	movs	r2, #1
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	409a      	lsls	r2, r3
 8002f98:	0013      	movs	r3, r2
 8002f9a:	43da      	mvns	r2, r3
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	091b      	lsrs	r3, r3, #4
 8002fa8:	2201      	movs	r2, #1
 8002faa:	401a      	ands	r2, r3
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	409a      	lsls	r2, r3
 8002fb0:	0013      	movs	r3, r2
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	2203      	movs	r2, #3
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	2b03      	cmp	r3, #3
 8002fc8:	d017      	beq.n	8002ffa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	2203      	movs	r2, #3
 8002fd6:	409a      	lsls	r2, r3
 8002fd8:	0013      	movs	r3, r2
 8002fda:	43da      	mvns	r2, r3
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	689a      	ldr	r2, [r3, #8]
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	409a      	lsls	r2, r3
 8002fec:	0013      	movs	r3, r2
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2203      	movs	r2, #3
 8003000:	4013      	ands	r3, r2
 8003002:	2b02      	cmp	r3, #2
 8003004:	d123      	bne.n	800304e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	08da      	lsrs	r2, r3, #3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	3208      	adds	r2, #8
 800300e:	0092      	lsls	r2, r2, #2
 8003010:	58d3      	ldr	r3, [r2, r3]
 8003012:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	2207      	movs	r2, #7
 8003018:	4013      	ands	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	220f      	movs	r2, #15
 800301e:	409a      	lsls	r2, r3
 8003020:	0013      	movs	r3, r2
 8003022:	43da      	mvns	r2, r3
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	4013      	ands	r3, r2
 8003028:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	691a      	ldr	r2, [r3, #16]
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	2107      	movs	r1, #7
 8003032:	400b      	ands	r3, r1
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	409a      	lsls	r2, r3
 8003038:	0013      	movs	r3, r2
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	4313      	orrs	r3, r2
 800303e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	08da      	lsrs	r2, r3, #3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3208      	adds	r2, #8
 8003048:	0092      	lsls	r2, r2, #2
 800304a:	6939      	ldr	r1, [r7, #16]
 800304c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	2203      	movs	r2, #3
 800305a:	409a      	lsls	r2, r3
 800305c:	0013      	movs	r3, r2
 800305e:	43da      	mvns	r2, r3
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	4013      	ands	r3, r2
 8003064:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	2203      	movs	r2, #3
 800306c:	401a      	ands	r2, r3
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	409a      	lsls	r2, r3
 8003074:	0013      	movs	r3, r2
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	4313      	orrs	r3, r2
 800307a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	23c0      	movs	r3, #192	; 0xc0
 8003088:	029b      	lsls	r3, r3, #10
 800308a:	4013      	ands	r3, r2
 800308c:	d100      	bne.n	8003090 <HAL_GPIO_Init+0x174>
 800308e:	e09a      	b.n	80031c6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003090:	4b54      	ldr	r3, [pc, #336]	; (80031e4 <HAL_GPIO_Init+0x2c8>)
 8003092:	699a      	ldr	r2, [r3, #24]
 8003094:	4b53      	ldr	r3, [pc, #332]	; (80031e4 <HAL_GPIO_Init+0x2c8>)
 8003096:	2101      	movs	r1, #1
 8003098:	430a      	orrs	r2, r1
 800309a:	619a      	str	r2, [r3, #24]
 800309c:	4b51      	ldr	r3, [pc, #324]	; (80031e4 <HAL_GPIO_Init+0x2c8>)
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	2201      	movs	r2, #1
 80030a2:	4013      	ands	r3, r2
 80030a4:	60bb      	str	r3, [r7, #8]
 80030a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80030a8:	4a4f      	ldr	r2, [pc, #316]	; (80031e8 <HAL_GPIO_Init+0x2cc>)
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	089b      	lsrs	r3, r3, #2
 80030ae:	3302      	adds	r3, #2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	589b      	ldr	r3, [r3, r2]
 80030b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	2203      	movs	r2, #3
 80030ba:	4013      	ands	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	220f      	movs	r2, #15
 80030c0:	409a      	lsls	r2, r3
 80030c2:	0013      	movs	r3, r2
 80030c4:	43da      	mvns	r2, r3
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	4013      	ands	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	2390      	movs	r3, #144	; 0x90
 80030d0:	05db      	lsls	r3, r3, #23
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d013      	beq.n	80030fe <HAL_GPIO_Init+0x1e2>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a44      	ldr	r2, [pc, #272]	; (80031ec <HAL_GPIO_Init+0x2d0>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d00d      	beq.n	80030fa <HAL_GPIO_Init+0x1de>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a43      	ldr	r2, [pc, #268]	; (80031f0 <HAL_GPIO_Init+0x2d4>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d007      	beq.n	80030f6 <HAL_GPIO_Init+0x1da>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a42      	ldr	r2, [pc, #264]	; (80031f4 <HAL_GPIO_Init+0x2d8>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d101      	bne.n	80030f2 <HAL_GPIO_Init+0x1d6>
 80030ee:	2303      	movs	r3, #3
 80030f0:	e006      	b.n	8003100 <HAL_GPIO_Init+0x1e4>
 80030f2:	2305      	movs	r3, #5
 80030f4:	e004      	b.n	8003100 <HAL_GPIO_Init+0x1e4>
 80030f6:	2302      	movs	r3, #2
 80030f8:	e002      	b.n	8003100 <HAL_GPIO_Init+0x1e4>
 80030fa:	2301      	movs	r3, #1
 80030fc:	e000      	b.n	8003100 <HAL_GPIO_Init+0x1e4>
 80030fe:	2300      	movs	r3, #0
 8003100:	697a      	ldr	r2, [r7, #20]
 8003102:	2103      	movs	r1, #3
 8003104:	400a      	ands	r2, r1
 8003106:	0092      	lsls	r2, r2, #2
 8003108:	4093      	lsls	r3, r2
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	4313      	orrs	r3, r2
 800310e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003110:	4935      	ldr	r1, [pc, #212]	; (80031e8 <HAL_GPIO_Init+0x2cc>)
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	089b      	lsrs	r3, r3, #2
 8003116:	3302      	adds	r3, #2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800311e:	4b36      	ldr	r3, [pc, #216]	; (80031f8 <HAL_GPIO_Init+0x2dc>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	43da      	mvns	r2, r3
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	4013      	ands	r3, r2
 800312c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	2380      	movs	r3, #128	; 0x80
 8003134:	025b      	lsls	r3, r3, #9
 8003136:	4013      	ands	r3, r2
 8003138:	d003      	beq.n	8003142 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	4313      	orrs	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003142:	4b2d      	ldr	r3, [pc, #180]	; (80031f8 <HAL_GPIO_Init+0x2dc>)
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003148:	4b2b      	ldr	r3, [pc, #172]	; (80031f8 <HAL_GPIO_Init+0x2dc>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	43da      	mvns	r2, r3
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	4013      	ands	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	2380      	movs	r3, #128	; 0x80
 800315e:	029b      	lsls	r3, r3, #10
 8003160:	4013      	ands	r3, r2
 8003162:	d003      	beq.n	800316c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	4313      	orrs	r3, r2
 800316a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800316c:	4b22      	ldr	r3, [pc, #136]	; (80031f8 <HAL_GPIO_Init+0x2dc>)
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003172:	4b21      	ldr	r3, [pc, #132]	; (80031f8 <HAL_GPIO_Init+0x2dc>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	43da      	mvns	r2, r3
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	4013      	ands	r3, r2
 8003180:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	2380      	movs	r3, #128	; 0x80
 8003188:	035b      	lsls	r3, r3, #13
 800318a:	4013      	ands	r3, r2
 800318c:	d003      	beq.n	8003196 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	4313      	orrs	r3, r2
 8003194:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003196:	4b18      	ldr	r3, [pc, #96]	; (80031f8 <HAL_GPIO_Init+0x2dc>)
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800319c:	4b16      	ldr	r3, [pc, #88]	; (80031f8 <HAL_GPIO_Init+0x2dc>)
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	43da      	mvns	r2, r3
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	4013      	ands	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685a      	ldr	r2, [r3, #4]
 80031b0:	2380      	movs	r3, #128	; 0x80
 80031b2:	039b      	lsls	r3, r3, #14
 80031b4:	4013      	ands	r3, r2
 80031b6:	d003      	beq.n	80031c0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	4313      	orrs	r3, r2
 80031be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80031c0:	4b0d      	ldr	r3, [pc, #52]	; (80031f8 <HAL_GPIO_Init+0x2dc>)
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	3301      	adds	r3, #1
 80031ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	40da      	lsrs	r2, r3
 80031d4:	1e13      	subs	r3, r2, #0
 80031d6:	d000      	beq.n	80031da <HAL_GPIO_Init+0x2be>
 80031d8:	e6a8      	b.n	8002f2c <HAL_GPIO_Init+0x10>
  } 
}
 80031da:	46c0      	nop			; (mov r8, r8)
 80031dc:	46c0      	nop			; (mov r8, r8)
 80031de:	46bd      	mov	sp, r7
 80031e0:	b006      	add	sp, #24
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40021000 	.word	0x40021000
 80031e8:	40010000 	.word	0x40010000
 80031ec:	48000400 	.word	0x48000400
 80031f0:	48000800 	.word	0x48000800
 80031f4:	48000c00 	.word	0x48000c00
 80031f8:	40010400 	.word	0x40010400

080031fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	000a      	movs	r2, r1
 8003206:	1cbb      	adds	r3, r7, #2
 8003208:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	1cba      	adds	r2, r7, #2
 8003210:	8812      	ldrh	r2, [r2, #0]
 8003212:	4013      	ands	r3, r2
 8003214:	d004      	beq.n	8003220 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003216:	230f      	movs	r3, #15
 8003218:	18fb      	adds	r3, r7, r3
 800321a:	2201      	movs	r2, #1
 800321c:	701a      	strb	r2, [r3, #0]
 800321e:	e003      	b.n	8003228 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003220:	230f      	movs	r3, #15
 8003222:	18fb      	adds	r3, r7, r3
 8003224:	2200      	movs	r2, #0
 8003226:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003228:	230f      	movs	r3, #15
 800322a:	18fb      	adds	r3, r7, r3
 800322c:	781b      	ldrb	r3, [r3, #0]
  }
 800322e:	0018      	movs	r0, r3
 8003230:	46bd      	mov	sp, r7
 8003232:	b004      	add	sp, #16
 8003234:	bd80      	pop	{r7, pc}

08003236 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b082      	sub	sp, #8
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
 800323e:	0008      	movs	r0, r1
 8003240:	0011      	movs	r1, r2
 8003242:	1cbb      	adds	r3, r7, #2
 8003244:	1c02      	adds	r2, r0, #0
 8003246:	801a      	strh	r2, [r3, #0]
 8003248:	1c7b      	adds	r3, r7, #1
 800324a:	1c0a      	adds	r2, r1, #0
 800324c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800324e:	1c7b      	adds	r3, r7, #1
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d004      	beq.n	8003260 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003256:	1cbb      	adds	r3, r7, #2
 8003258:	881a      	ldrh	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800325e:	e003      	b.n	8003268 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003260:	1cbb      	adds	r3, r7, #2
 8003262:	881a      	ldrh	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003268:	46c0      	nop			; (mov r8, r8)
 800326a:	46bd      	mov	sp, r7
 800326c:	b002      	add	sp, #8
 800326e:	bd80      	pop	{r7, pc}

08003270 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e082      	b.n	8003388 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2241      	movs	r2, #65	; 0x41
 8003286:	5c9b      	ldrb	r3, [r3, r2]
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d107      	bne.n	800329e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2240      	movs	r2, #64	; 0x40
 8003292:	2100      	movs	r1, #0
 8003294:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	0018      	movs	r0, r3
 800329a:	f7fe fbb1 	bl	8001a00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2241      	movs	r2, #65	; 0x41
 80032a2:	2124      	movs	r1, #36	; 0x24
 80032a4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2101      	movs	r1, #1
 80032b2:	438a      	bics	r2, r1
 80032b4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4934      	ldr	r1, [pc, #208]	; (8003390 <HAL_I2C_Init+0x120>)
 80032c0:	400a      	ands	r2, r1
 80032c2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689a      	ldr	r2, [r3, #8]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4931      	ldr	r1, [pc, #196]	; (8003394 <HAL_I2C_Init+0x124>)
 80032d0:	400a      	ands	r2, r1
 80032d2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d108      	bne.n	80032ee <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2180      	movs	r1, #128	; 0x80
 80032e6:	0209      	lsls	r1, r1, #8
 80032e8:	430a      	orrs	r2, r1
 80032ea:	609a      	str	r2, [r3, #8]
 80032ec:	e007      	b.n	80032fe <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2184      	movs	r1, #132	; 0x84
 80032f8:	0209      	lsls	r1, r1, #8
 80032fa:	430a      	orrs	r2, r1
 80032fc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	2b02      	cmp	r3, #2
 8003304:	d104      	bne.n	8003310 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2280      	movs	r2, #128	; 0x80
 800330c:	0112      	lsls	r2, r2, #4
 800330e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	491f      	ldr	r1, [pc, #124]	; (8003398 <HAL_I2C_Init+0x128>)
 800331c:	430a      	orrs	r2, r1
 800331e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68da      	ldr	r2, [r3, #12]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	491a      	ldr	r1, [pc, #104]	; (8003394 <HAL_I2C_Init+0x124>)
 800332c:	400a      	ands	r2, r1
 800332e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	691a      	ldr	r2, [r3, #16]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	431a      	orrs	r2, r3
 800333a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	430a      	orrs	r2, r1
 8003348:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	69d9      	ldr	r1, [r3, #28]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a1a      	ldr	r2, [r3, #32]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2101      	movs	r1, #1
 8003366:	430a      	orrs	r2, r1
 8003368:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2241      	movs	r2, #65	; 0x41
 8003374:	2120      	movs	r1, #32
 8003376:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2242      	movs	r2, #66	; 0x42
 8003382:	2100      	movs	r1, #0
 8003384:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	0018      	movs	r0, r3
 800338a:	46bd      	mov	sp, r7
 800338c:	b002      	add	sp, #8
 800338e:	bd80      	pop	{r7, pc}
 8003390:	f0ffffff 	.word	0xf0ffffff
 8003394:	ffff7fff 	.word	0xffff7fff
 8003398:	02008000 	.word	0x02008000

0800339c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800339c:	b590      	push	{r4, r7, lr}
 800339e:	b089      	sub	sp, #36	; 0x24
 80033a0:	af02      	add	r7, sp, #8
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	0008      	movs	r0, r1
 80033a6:	607a      	str	r2, [r7, #4]
 80033a8:	0019      	movs	r1, r3
 80033aa:	230a      	movs	r3, #10
 80033ac:	18fb      	adds	r3, r7, r3
 80033ae:	1c02      	adds	r2, r0, #0
 80033b0:	801a      	strh	r2, [r3, #0]
 80033b2:	2308      	movs	r3, #8
 80033b4:	18fb      	adds	r3, r7, r3
 80033b6:	1c0a      	adds	r2, r1, #0
 80033b8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2241      	movs	r2, #65	; 0x41
 80033be:	5c9b      	ldrb	r3, [r3, r2]
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b20      	cmp	r3, #32
 80033c4:	d000      	beq.n	80033c8 <HAL_I2C_Master_Transmit+0x2c>
 80033c6:	e0e7      	b.n	8003598 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2240      	movs	r2, #64	; 0x40
 80033cc:	5c9b      	ldrb	r3, [r3, r2]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d101      	bne.n	80033d6 <HAL_I2C_Master_Transmit+0x3a>
 80033d2:	2302      	movs	r3, #2
 80033d4:	e0e1      	b.n	800359a <HAL_I2C_Master_Transmit+0x1fe>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2240      	movs	r2, #64	; 0x40
 80033da:	2101      	movs	r1, #1
 80033dc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80033de:	f7fe fe07 	bl	8001ff0 <HAL_GetTick>
 80033e2:	0003      	movs	r3, r0
 80033e4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80033e6:	2380      	movs	r3, #128	; 0x80
 80033e8:	0219      	lsls	r1, r3, #8
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	2319      	movs	r3, #25
 80033f2:	2201      	movs	r2, #1
 80033f4:	f000 fa04 	bl	8003800 <I2C_WaitOnFlagUntilTimeout>
 80033f8:	1e03      	subs	r3, r0, #0
 80033fa:	d001      	beq.n	8003400 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e0cc      	b.n	800359a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2241      	movs	r2, #65	; 0x41
 8003404:	2121      	movs	r1, #33	; 0x21
 8003406:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2242      	movs	r2, #66	; 0x42
 800340c:	2110      	movs	r1, #16
 800340e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2208      	movs	r2, #8
 8003420:	18ba      	adds	r2, r7, r2
 8003422:	8812      	ldrh	r2, [r2, #0]
 8003424:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003430:	b29b      	uxth	r3, r3
 8003432:	2bff      	cmp	r3, #255	; 0xff
 8003434:	d911      	bls.n	800345a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	22ff      	movs	r2, #255	; 0xff
 800343a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003440:	b2da      	uxtb	r2, r3
 8003442:	2380      	movs	r3, #128	; 0x80
 8003444:	045c      	lsls	r4, r3, #17
 8003446:	230a      	movs	r3, #10
 8003448:	18fb      	adds	r3, r7, r3
 800344a:	8819      	ldrh	r1, [r3, #0]
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	4b55      	ldr	r3, [pc, #340]	; (80035a4 <HAL_I2C_Master_Transmit+0x208>)
 8003450:	9300      	str	r3, [sp, #0]
 8003452:	0023      	movs	r3, r4
 8003454:	f000 fb74 	bl	8003b40 <I2C_TransferConfig>
 8003458:	e075      	b.n	8003546 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345e:	b29a      	uxth	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003468:	b2da      	uxtb	r2, r3
 800346a:	2380      	movs	r3, #128	; 0x80
 800346c:	049c      	lsls	r4, r3, #18
 800346e:	230a      	movs	r3, #10
 8003470:	18fb      	adds	r3, r7, r3
 8003472:	8819      	ldrh	r1, [r3, #0]
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	4b4b      	ldr	r3, [pc, #300]	; (80035a4 <HAL_I2C_Master_Transmit+0x208>)
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	0023      	movs	r3, r4
 800347c:	f000 fb60 	bl	8003b40 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003480:	e061      	b.n	8003546 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	0018      	movs	r0, r3
 800348a:	f000 f9f8 	bl	800387e <I2C_WaitOnTXISFlagUntilTimeout>
 800348e:	1e03      	subs	r3, r0, #0
 8003490:	d001      	beq.n	8003496 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e081      	b.n	800359a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	781a      	ldrb	r2, [r3, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a6:	1c5a      	adds	r2, r3, #1
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	3b01      	subs	r3, #1
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034be:	3b01      	subs	r3, #1
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d03a      	beq.n	8003546 <HAL_I2C_Master_Transmit+0x1aa>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d136      	bne.n	8003546 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80034d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	0013      	movs	r3, r2
 80034e2:	2200      	movs	r2, #0
 80034e4:	2180      	movs	r1, #128	; 0x80
 80034e6:	f000 f98b 	bl	8003800 <I2C_WaitOnFlagUntilTimeout>
 80034ea:	1e03      	subs	r3, r0, #0
 80034ec:	d001      	beq.n	80034f2 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e053      	b.n	800359a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	2bff      	cmp	r3, #255	; 0xff
 80034fa:	d911      	bls.n	8003520 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	22ff      	movs	r2, #255	; 0xff
 8003500:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003506:	b2da      	uxtb	r2, r3
 8003508:	2380      	movs	r3, #128	; 0x80
 800350a:	045c      	lsls	r4, r3, #17
 800350c:	230a      	movs	r3, #10
 800350e:	18fb      	adds	r3, r7, r3
 8003510:	8819      	ldrh	r1, [r3, #0]
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	2300      	movs	r3, #0
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	0023      	movs	r3, r4
 800351a:	f000 fb11 	bl	8003b40 <I2C_TransferConfig>
 800351e:	e012      	b.n	8003546 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003524:	b29a      	uxth	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800352e:	b2da      	uxtb	r2, r3
 8003530:	2380      	movs	r3, #128	; 0x80
 8003532:	049c      	lsls	r4, r3, #18
 8003534:	230a      	movs	r3, #10
 8003536:	18fb      	adds	r3, r7, r3
 8003538:	8819      	ldrh	r1, [r3, #0]
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	2300      	movs	r3, #0
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	0023      	movs	r3, r4
 8003542:	f000 fafd 	bl	8003b40 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800354a:	b29b      	uxth	r3, r3
 800354c:	2b00      	cmp	r3, #0
 800354e:	d198      	bne.n	8003482 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	0018      	movs	r0, r3
 8003558:	f000 f9d0 	bl	80038fc <I2C_WaitOnSTOPFlagUntilTimeout>
 800355c:	1e03      	subs	r3, r0, #0
 800355e:	d001      	beq.n	8003564 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e01a      	b.n	800359a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2220      	movs	r2, #32
 800356a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685a      	ldr	r2, [r3, #4]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	490c      	ldr	r1, [pc, #48]	; (80035a8 <HAL_I2C_Master_Transmit+0x20c>)
 8003578:	400a      	ands	r2, r1
 800357a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2241      	movs	r2, #65	; 0x41
 8003580:	2120      	movs	r1, #32
 8003582:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2242      	movs	r2, #66	; 0x42
 8003588:	2100      	movs	r1, #0
 800358a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2240      	movs	r2, #64	; 0x40
 8003590:	2100      	movs	r1, #0
 8003592:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003594:	2300      	movs	r3, #0
 8003596:	e000      	b.n	800359a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003598:	2302      	movs	r3, #2
  }
}
 800359a:	0018      	movs	r0, r3
 800359c:	46bd      	mov	sp, r7
 800359e:	b007      	add	sp, #28
 80035a0:	bd90      	pop	{r4, r7, pc}
 80035a2:	46c0      	nop			; (mov r8, r8)
 80035a4:	80002000 	.word	0x80002000
 80035a8:	fe00e800 	.word	0xfe00e800

080035ac <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80035ac:	b590      	push	{r4, r7, lr}
 80035ae:	b089      	sub	sp, #36	; 0x24
 80035b0:	af02      	add	r7, sp, #8
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	0008      	movs	r0, r1
 80035b6:	607a      	str	r2, [r7, #4]
 80035b8:	0019      	movs	r1, r3
 80035ba:	230a      	movs	r3, #10
 80035bc:	18fb      	adds	r3, r7, r3
 80035be:	1c02      	adds	r2, r0, #0
 80035c0:	801a      	strh	r2, [r3, #0]
 80035c2:	2308      	movs	r3, #8
 80035c4:	18fb      	adds	r3, r7, r3
 80035c6:	1c0a      	adds	r2, r1, #0
 80035c8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2241      	movs	r2, #65	; 0x41
 80035ce:	5c9b      	ldrb	r3, [r3, r2]
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b20      	cmp	r3, #32
 80035d4:	d000      	beq.n	80035d8 <HAL_I2C_Master_Receive+0x2c>
 80035d6:	e0e8      	b.n	80037aa <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2240      	movs	r2, #64	; 0x40
 80035dc:	5c9b      	ldrb	r3, [r3, r2]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d101      	bne.n	80035e6 <HAL_I2C_Master_Receive+0x3a>
 80035e2:	2302      	movs	r3, #2
 80035e4:	e0e2      	b.n	80037ac <HAL_I2C_Master_Receive+0x200>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2240      	movs	r2, #64	; 0x40
 80035ea:	2101      	movs	r1, #1
 80035ec:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80035ee:	f7fe fcff 	bl	8001ff0 <HAL_GetTick>
 80035f2:	0003      	movs	r3, r0
 80035f4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80035f6:	2380      	movs	r3, #128	; 0x80
 80035f8:	0219      	lsls	r1, r3, #8
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	9300      	str	r3, [sp, #0]
 8003600:	2319      	movs	r3, #25
 8003602:	2201      	movs	r2, #1
 8003604:	f000 f8fc 	bl	8003800 <I2C_WaitOnFlagUntilTimeout>
 8003608:	1e03      	subs	r3, r0, #0
 800360a:	d001      	beq.n	8003610 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e0cd      	b.n	80037ac <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2241      	movs	r2, #65	; 0x41
 8003614:	2122      	movs	r1, #34	; 0x22
 8003616:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2242      	movs	r2, #66	; 0x42
 800361c:	2110      	movs	r1, #16
 800361e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2208      	movs	r2, #8
 8003630:	18ba      	adds	r2, r7, r2
 8003632:	8812      	ldrh	r2, [r2, #0]
 8003634:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003640:	b29b      	uxth	r3, r3
 8003642:	2bff      	cmp	r3, #255	; 0xff
 8003644:	d911      	bls.n	800366a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	22ff      	movs	r2, #255	; 0xff
 800364a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003650:	b2da      	uxtb	r2, r3
 8003652:	2380      	movs	r3, #128	; 0x80
 8003654:	045c      	lsls	r4, r3, #17
 8003656:	230a      	movs	r3, #10
 8003658:	18fb      	adds	r3, r7, r3
 800365a:	8819      	ldrh	r1, [r3, #0]
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	4b55      	ldr	r3, [pc, #340]	; (80037b4 <HAL_I2C_Master_Receive+0x208>)
 8003660:	9300      	str	r3, [sp, #0]
 8003662:	0023      	movs	r3, r4
 8003664:	f000 fa6c 	bl	8003b40 <I2C_TransferConfig>
 8003668:	e076      	b.n	8003758 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800366e:	b29a      	uxth	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003678:	b2da      	uxtb	r2, r3
 800367a:	2380      	movs	r3, #128	; 0x80
 800367c:	049c      	lsls	r4, r3, #18
 800367e:	230a      	movs	r3, #10
 8003680:	18fb      	adds	r3, r7, r3
 8003682:	8819      	ldrh	r1, [r3, #0]
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	4b4b      	ldr	r3, [pc, #300]	; (80037b4 <HAL_I2C_Master_Receive+0x208>)
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	0023      	movs	r3, r4
 800368c:	f000 fa58 	bl	8003b40 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003690:	e062      	b.n	8003758 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	0018      	movs	r0, r3
 800369a:	f000 f96b 	bl	8003974 <I2C_WaitOnRXNEFlagUntilTimeout>
 800369e:	1e03      	subs	r3, r0, #0
 80036a0:	d001      	beq.n	80036a6 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e082      	b.n	80037ac <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	b2d2      	uxtb	r2, r2
 80036b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b8:	1c5a      	adds	r2, r3, #1
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c2:	3b01      	subs	r3, #1
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	3b01      	subs	r3, #1
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036dc:	b29b      	uxth	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d03a      	beq.n	8003758 <HAL_I2C_Master_Receive+0x1ac>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d136      	bne.n	8003758 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80036ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	0013      	movs	r3, r2
 80036f4:	2200      	movs	r2, #0
 80036f6:	2180      	movs	r1, #128	; 0x80
 80036f8:	f000 f882 	bl	8003800 <I2C_WaitOnFlagUntilTimeout>
 80036fc:	1e03      	subs	r3, r0, #0
 80036fe:	d001      	beq.n	8003704 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e053      	b.n	80037ac <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003708:	b29b      	uxth	r3, r3
 800370a:	2bff      	cmp	r3, #255	; 0xff
 800370c:	d911      	bls.n	8003732 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	22ff      	movs	r2, #255	; 0xff
 8003712:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003718:	b2da      	uxtb	r2, r3
 800371a:	2380      	movs	r3, #128	; 0x80
 800371c:	045c      	lsls	r4, r3, #17
 800371e:	230a      	movs	r3, #10
 8003720:	18fb      	adds	r3, r7, r3
 8003722:	8819      	ldrh	r1, [r3, #0]
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	2300      	movs	r3, #0
 8003728:	9300      	str	r3, [sp, #0]
 800372a:	0023      	movs	r3, r4
 800372c:	f000 fa08 	bl	8003b40 <I2C_TransferConfig>
 8003730:	e012      	b.n	8003758 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003736:	b29a      	uxth	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003740:	b2da      	uxtb	r2, r3
 8003742:	2380      	movs	r3, #128	; 0x80
 8003744:	049c      	lsls	r4, r3, #18
 8003746:	230a      	movs	r3, #10
 8003748:	18fb      	adds	r3, r7, r3
 800374a:	8819      	ldrh	r1, [r3, #0]
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	2300      	movs	r3, #0
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	0023      	movs	r3, r4
 8003754:	f000 f9f4 	bl	8003b40 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800375c:	b29b      	uxth	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d197      	bne.n	8003692 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	0018      	movs	r0, r3
 800376a:	f000 f8c7 	bl	80038fc <I2C_WaitOnSTOPFlagUntilTimeout>
 800376e:	1e03      	subs	r3, r0, #0
 8003770:	d001      	beq.n	8003776 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e01a      	b.n	80037ac <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2220      	movs	r2, #32
 800377c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	490b      	ldr	r1, [pc, #44]	; (80037b8 <HAL_I2C_Master_Receive+0x20c>)
 800378a:	400a      	ands	r2, r1
 800378c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2241      	movs	r2, #65	; 0x41
 8003792:	2120      	movs	r1, #32
 8003794:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2242      	movs	r2, #66	; 0x42
 800379a:	2100      	movs	r1, #0
 800379c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2240      	movs	r2, #64	; 0x40
 80037a2:	2100      	movs	r1, #0
 80037a4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80037a6:	2300      	movs	r3, #0
 80037a8:	e000      	b.n	80037ac <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80037aa:	2302      	movs	r3, #2
  }
}
 80037ac:	0018      	movs	r0, r3
 80037ae:	46bd      	mov	sp, r7
 80037b0:	b007      	add	sp, #28
 80037b2:	bd90      	pop	{r4, r7, pc}
 80037b4:	80002400 	.word	0x80002400
 80037b8:	fe00e800 	.word	0xfe00e800

080037bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	2202      	movs	r2, #2
 80037cc:	4013      	ands	r3, r2
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d103      	bne.n	80037da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2200      	movs	r2, #0
 80037d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	2201      	movs	r2, #1
 80037e2:	4013      	ands	r3, r2
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d007      	beq.n	80037f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	699a      	ldr	r2, [r3, #24]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2101      	movs	r1, #1
 80037f4:	430a      	orrs	r2, r1
 80037f6:	619a      	str	r2, [r3, #24]
  }
}
 80037f8:	46c0      	nop			; (mov r8, r8)
 80037fa:	46bd      	mov	sp, r7
 80037fc:	b002      	add	sp, #8
 80037fe:	bd80      	pop	{r7, pc}

08003800 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	603b      	str	r3, [r7, #0]
 800380c:	1dfb      	adds	r3, r7, #7
 800380e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003810:	e021      	b.n	8003856 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	3301      	adds	r3, #1
 8003816:	d01e      	beq.n	8003856 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003818:	f7fe fbea 	bl	8001ff0 <HAL_GetTick>
 800381c:	0002      	movs	r2, r0
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	429a      	cmp	r2, r3
 8003826:	d302      	bcc.n	800382e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d113      	bne.n	8003856 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003832:	2220      	movs	r2, #32
 8003834:	431a      	orrs	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2241      	movs	r2, #65	; 0x41
 800383e:	2120      	movs	r1, #32
 8003840:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2242      	movs	r2, #66	; 0x42
 8003846:	2100      	movs	r1, #0
 8003848:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2240      	movs	r2, #64	; 0x40
 800384e:	2100      	movs	r1, #0
 8003850:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e00f      	b.n	8003876 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	68ba      	ldr	r2, [r7, #8]
 800385e:	4013      	ands	r3, r2
 8003860:	68ba      	ldr	r2, [r7, #8]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	425a      	negs	r2, r3
 8003866:	4153      	adcs	r3, r2
 8003868:	b2db      	uxtb	r3, r3
 800386a:	001a      	movs	r2, r3
 800386c:	1dfb      	adds	r3, r7, #7
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	429a      	cmp	r2, r3
 8003872:	d0ce      	beq.n	8003812 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	0018      	movs	r0, r3
 8003878:	46bd      	mov	sp, r7
 800387a:	b004      	add	sp, #16
 800387c:	bd80      	pop	{r7, pc}

0800387e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b084      	sub	sp, #16
 8003882:	af00      	add	r7, sp, #0
 8003884:	60f8      	str	r0, [r7, #12]
 8003886:	60b9      	str	r1, [r7, #8]
 8003888:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800388a:	e02b      	b.n	80038e4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	68b9      	ldr	r1, [r7, #8]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	0018      	movs	r0, r3
 8003894:	f000 f8da 	bl	8003a4c <I2C_IsAcknowledgeFailed>
 8003898:	1e03      	subs	r3, r0, #0
 800389a:	d001      	beq.n	80038a0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e029      	b.n	80038f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	3301      	adds	r3, #1
 80038a4:	d01e      	beq.n	80038e4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038a6:	f7fe fba3 	bl	8001ff0 <HAL_GetTick>
 80038aa:	0002      	movs	r2, r0
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	68ba      	ldr	r2, [r7, #8]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d302      	bcc.n	80038bc <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d113      	bne.n	80038e4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c0:	2220      	movs	r2, #32
 80038c2:	431a      	orrs	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2241      	movs	r2, #65	; 0x41
 80038cc:	2120      	movs	r1, #32
 80038ce:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2242      	movs	r2, #66	; 0x42
 80038d4:	2100      	movs	r1, #0
 80038d6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2240      	movs	r2, #64	; 0x40
 80038dc:	2100      	movs	r1, #0
 80038de:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e007      	b.n	80038f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	2202      	movs	r2, #2
 80038ec:	4013      	ands	r3, r2
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d1cc      	bne.n	800388c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	0018      	movs	r0, r3
 80038f6:	46bd      	mov	sp, r7
 80038f8:	b004      	add	sp, #16
 80038fa:	bd80      	pop	{r7, pc}

080038fc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003908:	e028      	b.n	800395c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	68b9      	ldr	r1, [r7, #8]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	0018      	movs	r0, r3
 8003912:	f000 f89b 	bl	8003a4c <I2C_IsAcknowledgeFailed>
 8003916:	1e03      	subs	r3, r0, #0
 8003918:	d001      	beq.n	800391e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e026      	b.n	800396c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800391e:	f7fe fb67 	bl	8001ff0 <HAL_GetTick>
 8003922:	0002      	movs	r2, r0
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	68ba      	ldr	r2, [r7, #8]
 800392a:	429a      	cmp	r2, r3
 800392c:	d302      	bcc.n	8003934 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d113      	bne.n	800395c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003938:	2220      	movs	r2, #32
 800393a:	431a      	orrs	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2241      	movs	r2, #65	; 0x41
 8003944:	2120      	movs	r1, #32
 8003946:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2242      	movs	r2, #66	; 0x42
 800394c:	2100      	movs	r1, #0
 800394e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2240      	movs	r2, #64	; 0x40
 8003954:	2100      	movs	r1, #0
 8003956:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e007      	b.n	800396c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	2220      	movs	r2, #32
 8003964:	4013      	ands	r3, r2
 8003966:	2b20      	cmp	r3, #32
 8003968:	d1cf      	bne.n	800390a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800396a:	2300      	movs	r3, #0
}
 800396c:	0018      	movs	r0, r3
 800396e:	46bd      	mov	sp, r7
 8003970:	b004      	add	sp, #16
 8003972:	bd80      	pop	{r7, pc}

08003974 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003980:	e055      	b.n	8003a2e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	68b9      	ldr	r1, [r7, #8]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	0018      	movs	r0, r3
 800398a:	f000 f85f 	bl	8003a4c <I2C_IsAcknowledgeFailed>
 800398e:	1e03      	subs	r3, r0, #0
 8003990:	d001      	beq.n	8003996 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e053      	b.n	8003a3e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	2220      	movs	r2, #32
 800399e:	4013      	ands	r3, r2
 80039a0:	2b20      	cmp	r3, #32
 80039a2:	d129      	bne.n	80039f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	2204      	movs	r2, #4
 80039ac:	4013      	ands	r3, r2
 80039ae:	2b04      	cmp	r3, #4
 80039b0:	d105      	bne.n	80039be <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80039ba:	2300      	movs	r3, #0
 80039bc:	e03f      	b.n	8003a3e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2220      	movs	r2, #32
 80039c4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	491d      	ldr	r1, [pc, #116]	; (8003a48 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80039d2:	400a      	ands	r2, r1
 80039d4:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2241      	movs	r2, #65	; 0x41
 80039e0:	2120      	movs	r1, #32
 80039e2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2242      	movs	r2, #66	; 0x42
 80039e8:	2100      	movs	r1, #0
 80039ea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2240      	movs	r2, #64	; 0x40
 80039f0:	2100      	movs	r1, #0
 80039f2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e022      	b.n	8003a3e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039f8:	f7fe fafa 	bl	8001ff0 <HAL_GetTick>
 80039fc:	0002      	movs	r2, r0
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	68ba      	ldr	r2, [r7, #8]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d302      	bcc.n	8003a0e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10f      	bne.n	8003a2e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a12:	2220      	movs	r2, #32
 8003a14:	431a      	orrs	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2241      	movs	r2, #65	; 0x41
 8003a1e:	2120      	movs	r1, #32
 8003a20:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2240      	movs	r2, #64	; 0x40
 8003a26:	2100      	movs	r1, #0
 8003a28:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e007      	b.n	8003a3e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	2204      	movs	r2, #4
 8003a36:	4013      	ands	r3, r2
 8003a38:	2b04      	cmp	r3, #4
 8003a3a:	d1a2      	bne.n	8003982 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	0018      	movs	r0, r3
 8003a40:	46bd      	mov	sp, r7
 8003a42:	b004      	add	sp, #16
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	46c0      	nop			; (mov r8, r8)
 8003a48:	fe00e800 	.word	0xfe00e800

08003a4c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	2210      	movs	r2, #16
 8003a60:	4013      	ands	r3, r2
 8003a62:	2b10      	cmp	r3, #16
 8003a64:	d164      	bne.n	8003b30 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	2380      	movs	r3, #128	; 0x80
 8003a6e:	049b      	lsls	r3, r3, #18
 8003a70:	401a      	ands	r2, r3
 8003a72:	2380      	movs	r3, #128	; 0x80
 8003a74:	049b      	lsls	r3, r3, #18
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d02b      	beq.n	8003ad2 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	685a      	ldr	r2, [r3, #4]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2180      	movs	r1, #128	; 0x80
 8003a86:	01c9      	lsls	r1, r1, #7
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a8c:	e021      	b.n	8003ad2 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	3301      	adds	r3, #1
 8003a92:	d01e      	beq.n	8003ad2 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a94:	f7fe faac 	bl	8001ff0 <HAL_GetTick>
 8003a98:	0002      	movs	r2, r0
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	68ba      	ldr	r2, [r7, #8]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d302      	bcc.n	8003aaa <I2C_IsAcknowledgeFailed+0x5e>
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d113      	bne.n	8003ad2 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aae:	2220      	movs	r2, #32
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2241      	movs	r2, #65	; 0x41
 8003aba:	2120      	movs	r1, #32
 8003abc:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2242      	movs	r2, #66	; 0x42
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2240      	movs	r2, #64	; 0x40
 8003aca:	2100      	movs	r1, #0
 8003acc:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e02f      	b.n	8003b32 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	4013      	ands	r3, r2
 8003adc:	2b20      	cmp	r3, #32
 8003ade:	d1d6      	bne.n	8003a8e <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2210      	movs	r2, #16
 8003ae6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2220      	movs	r2, #32
 8003aee:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	0018      	movs	r0, r3
 8003af4:	f7ff fe62 	bl	80037bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	490e      	ldr	r1, [pc, #56]	; (8003b3c <I2C_IsAcknowledgeFailed+0xf0>)
 8003b04:	400a      	ands	r2, r1
 8003b06:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0c:	2204      	movs	r2, #4
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2241      	movs	r2, #65	; 0x41
 8003b18:	2120      	movs	r1, #32
 8003b1a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2242      	movs	r2, #66	; 0x42
 8003b20:	2100      	movs	r1, #0
 8003b22:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2240      	movs	r2, #64	; 0x40
 8003b28:	2100      	movs	r1, #0
 8003b2a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e000      	b.n	8003b32 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	0018      	movs	r0, r3
 8003b34:	46bd      	mov	sp, r7
 8003b36:	b004      	add	sp, #16
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	46c0      	nop			; (mov r8, r8)
 8003b3c:	fe00e800 	.word	0xfe00e800

08003b40 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003b40:	b590      	push	{r4, r7, lr}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	0008      	movs	r0, r1
 8003b4a:	0011      	movs	r1, r2
 8003b4c:	607b      	str	r3, [r7, #4]
 8003b4e:	240a      	movs	r4, #10
 8003b50:	193b      	adds	r3, r7, r4
 8003b52:	1c02      	adds	r2, r0, #0
 8003b54:	801a      	strh	r2, [r3, #0]
 8003b56:	2009      	movs	r0, #9
 8003b58:	183b      	adds	r3, r7, r0
 8003b5a:	1c0a      	adds	r2, r1, #0
 8003b5c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	6a3a      	ldr	r2, [r7, #32]
 8003b66:	0d51      	lsrs	r1, r2, #21
 8003b68:	2280      	movs	r2, #128	; 0x80
 8003b6a:	00d2      	lsls	r2, r2, #3
 8003b6c:	400a      	ands	r2, r1
 8003b6e:	490e      	ldr	r1, [pc, #56]	; (8003ba8 <I2C_TransferConfig+0x68>)
 8003b70:	430a      	orrs	r2, r1
 8003b72:	43d2      	mvns	r2, r2
 8003b74:	401a      	ands	r2, r3
 8003b76:	0011      	movs	r1, r2
 8003b78:	193b      	adds	r3, r7, r4
 8003b7a:	881b      	ldrh	r3, [r3, #0]
 8003b7c:	059b      	lsls	r3, r3, #22
 8003b7e:	0d9a      	lsrs	r2, r3, #22
 8003b80:	183b      	adds	r3, r7, r0
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	0418      	lsls	r0, r3, #16
 8003b86:	23ff      	movs	r3, #255	; 0xff
 8003b88:	041b      	lsls	r3, r3, #16
 8003b8a:	4003      	ands	r3, r0
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	431a      	orrs	r2, r3
 8003b92:	6a3b      	ldr	r3, [r7, #32]
 8003b94:	431a      	orrs	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8003b9e:	46c0      	nop			; (mov r8, r8)
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	b005      	add	sp, #20
 8003ba4:	bd90      	pop	{r4, r7, pc}
 8003ba6:	46c0      	nop			; (mov r8, r8)
 8003ba8:	03ff63ff 	.word	0x03ff63ff

08003bac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2241      	movs	r2, #65	; 0x41
 8003bba:	5c9b      	ldrb	r3, [r3, r2]
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b20      	cmp	r3, #32
 8003bc0:	d138      	bne.n	8003c34 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2240      	movs	r2, #64	; 0x40
 8003bc6:	5c9b      	ldrb	r3, [r3, r2]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d101      	bne.n	8003bd0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003bcc:	2302      	movs	r3, #2
 8003bce:	e032      	b.n	8003c36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2240      	movs	r2, #64	; 0x40
 8003bd4:	2101      	movs	r1, #1
 8003bd6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2241      	movs	r2, #65	; 0x41
 8003bdc:	2124      	movs	r1, #36	; 0x24
 8003bde:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2101      	movs	r1, #1
 8003bec:	438a      	bics	r2, r1
 8003bee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4911      	ldr	r1, [pc, #68]	; (8003c40 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003bfc:	400a      	ands	r2, r1
 8003bfe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6819      	ldr	r1, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2241      	movs	r2, #65	; 0x41
 8003c24:	2120      	movs	r1, #32
 8003c26:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2240      	movs	r2, #64	; 0x40
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003c30:	2300      	movs	r3, #0
 8003c32:	e000      	b.n	8003c36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c34:	2302      	movs	r3, #2
  }
}
 8003c36:	0018      	movs	r0, r3
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	b002      	add	sp, #8
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	46c0      	nop			; (mov r8, r8)
 8003c40:	ffffefff 	.word	0xffffefff

08003c44 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2241      	movs	r2, #65	; 0x41
 8003c52:	5c9b      	ldrb	r3, [r3, r2]
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b20      	cmp	r3, #32
 8003c58:	d139      	bne.n	8003cce <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2240      	movs	r2, #64	; 0x40
 8003c5e:	5c9b      	ldrb	r3, [r3, r2]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d101      	bne.n	8003c68 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c64:	2302      	movs	r3, #2
 8003c66:	e033      	b.n	8003cd0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2240      	movs	r2, #64	; 0x40
 8003c6c:	2101      	movs	r1, #1
 8003c6e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2241      	movs	r2, #65	; 0x41
 8003c74:	2124      	movs	r1, #36	; 0x24
 8003c76:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2101      	movs	r1, #1
 8003c84:	438a      	bics	r2, r1
 8003c86:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4a11      	ldr	r2, [pc, #68]	; (8003cd8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003c94:	4013      	ands	r3, r2
 8003c96:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	021b      	lsls	r3, r3, #8
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2101      	movs	r1, #1
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2241      	movs	r2, #65	; 0x41
 8003cbe:	2120      	movs	r1, #32
 8003cc0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2240      	movs	r2, #64	; 0x40
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	e000      	b.n	8003cd0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003cce:	2302      	movs	r3, #2
  }
}
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	b004      	add	sp, #16
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	fffff0ff 	.word	0xfffff0ff

08003cdc <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI:Enter STOP mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter STOP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	000a      	movs	r2, r1
 8003ce6:	1cfb      	adds	r3, r7, #3
 8003ce8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
 8003cea:	2300      	movs	r3, #0
 8003cec:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8003cee:	4b13      	ldr	r3, [pc, #76]	; (8003d3c <HAL_PWR_EnterSTOPMode+0x60>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	60fb      	str	r3, [r7, #12]
  
  /* Clear PDDS and LPDS bits */
  tmpreg &= (uint32_t)~(PWR_CR_PDDS | PWR_CR_LPDS);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2203      	movs	r2, #3
 8003cf8:	4393      	bics	r3, r2
 8003cfa:	60fb      	str	r3, [r7, #12]

  /* Set LPDS bit according to Regulator value */
  tmpreg |= Regulator;
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 8003d04:	4b0d      	ldr	r3, [pc, #52]	; (8003d3c <HAL_PWR_EnterSTOPMode+0x60>)
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8003d0a:	4b0d      	ldr	r3, [pc, #52]	; (8003d40 <HAL_PWR_EnterSTOPMode+0x64>)
 8003d0c:	691a      	ldr	r2, [r3, #16]
 8003d0e:	4b0c      	ldr	r3, [pc, #48]	; (8003d40 <HAL_PWR_EnterSTOPMode+0x64>)
 8003d10:	2104      	movs	r1, #4
 8003d12:	430a      	orrs	r2, r1
 8003d14:	611a      	str	r2, [r3, #16]

  /* Select STOP mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8003d16:	1cfb      	adds	r3, r7, #3
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d101      	bne.n	8003d22 <HAL_PWR_EnterSTOPMode+0x46>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003d1e:	bf30      	wfi
 8003d20:	e002      	b.n	8003d28 <HAL_PWR_EnterSTOPMode+0x4c>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003d22:	bf40      	sev
    __WFE();
 8003d24:	bf20      	wfe
    __WFE();
 8003d26:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 8003d28:	4b05      	ldr	r3, [pc, #20]	; (8003d40 <HAL_PWR_EnterSTOPMode+0x64>)
 8003d2a:	691a      	ldr	r2, [r3, #16]
 8003d2c:	4b04      	ldr	r3, [pc, #16]	; (8003d40 <HAL_PWR_EnterSTOPMode+0x64>)
 8003d2e:	2104      	movs	r1, #4
 8003d30:	438a      	bics	r2, r1
 8003d32:	611a      	str	r2, [r3, #16]
}
 8003d34:	46c0      	nop			; (mov r8, r8)
 8003d36:	46bd      	mov	sp, r7
 8003d38:	b004      	add	sp, #16
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	40007000 	.word	0x40007000
 8003d40:	e000ed00 	.word	0xe000ed00

08003d44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b088      	sub	sp, #32
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e301      	b.n	800435a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	d100      	bne.n	8003d62 <HAL_RCC_OscConfig+0x1e>
 8003d60:	e08d      	b.n	8003e7e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003d62:	4bc3      	ldr	r3, [pc, #780]	; (8004070 <HAL_RCC_OscConfig+0x32c>)
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	220c      	movs	r2, #12
 8003d68:	4013      	ands	r3, r2
 8003d6a:	2b04      	cmp	r3, #4
 8003d6c:	d00e      	beq.n	8003d8c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d6e:	4bc0      	ldr	r3, [pc, #768]	; (8004070 <HAL_RCC_OscConfig+0x32c>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	220c      	movs	r2, #12
 8003d74:	4013      	ands	r3, r2
 8003d76:	2b08      	cmp	r3, #8
 8003d78:	d116      	bne.n	8003da8 <HAL_RCC_OscConfig+0x64>
 8003d7a:	4bbd      	ldr	r3, [pc, #756]	; (8004070 <HAL_RCC_OscConfig+0x32c>)
 8003d7c:	685a      	ldr	r2, [r3, #4]
 8003d7e:	2380      	movs	r3, #128	; 0x80
 8003d80:	025b      	lsls	r3, r3, #9
 8003d82:	401a      	ands	r2, r3
 8003d84:	2380      	movs	r3, #128	; 0x80
 8003d86:	025b      	lsls	r3, r3, #9
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d10d      	bne.n	8003da8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d8c:	4bb8      	ldr	r3, [pc, #736]	; (8004070 <HAL_RCC_OscConfig+0x32c>)
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	2380      	movs	r3, #128	; 0x80
 8003d92:	029b      	lsls	r3, r3, #10
 8003d94:	4013      	ands	r3, r2
 8003d96:	d100      	bne.n	8003d9a <HAL_RCC_OscConfig+0x56>
 8003d98:	e070      	b.n	8003e7c <HAL_RCC_OscConfig+0x138>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d000      	beq.n	8003da4 <HAL_RCC_OscConfig+0x60>
 8003da2:	e06b      	b.n	8003e7c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e2d8      	b.n	800435a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d107      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x7c>
 8003db0:	4baf      	ldr	r3, [pc, #700]	; (8004070 <HAL_RCC_OscConfig+0x32c>)
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	4bae      	ldr	r3, [pc, #696]	; (8004070 <HAL_RCC_OscConfig+0x32c>)
 8003db6:	2180      	movs	r1, #128	; 0x80
 8003db8:	0249      	lsls	r1, r1, #9
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	601a      	str	r2, [r3, #0]
 8003dbe:	e02f      	b.n	8003e20 <HAL_RCC_OscConfig+0xdc>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d10c      	bne.n	8003de2 <HAL_RCC_OscConfig+0x9e>
 8003dc8:	4ba9      	ldr	r3, [pc, #676]	; (8004070 <HAL_RCC_OscConfig+0x32c>)
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	4ba8      	ldr	r3, [pc, #672]	; (8004070 <HAL_RCC_OscConfig+0x32c>)
 8003dce:	49a9      	ldr	r1, [pc, #676]	; (8004074 <HAL_RCC_OscConfig+0x330>)
 8003dd0:	400a      	ands	r2, r1
 8003dd2:	601a      	str	r2, [r3, #0]
 8003dd4:	4ba6      	ldr	r3, [pc, #664]	; (8004070 <HAL_RCC_OscConfig+0x32c>)
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	4ba5      	ldr	r3, [pc, #660]	; (8004070 <HAL_RCC_OscConfig+0x32c>)
 8003dda:	49a7      	ldr	r1, [pc, #668]	; (8004078 <HAL_RCC_OscConfig+0x334>)
 8003ddc:	400a      	ands	r2, r1
 8003dde:	601a      	str	r2, [r3, #0]
 8003de0:	e01e      	b.n	8003e20 <HAL_RCC_OscConfig+0xdc>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	2b05      	cmp	r3, #5
 8003de8:	d10e      	bne.n	8003e08 <HAL_RCC_OscConfig+0xc4>
 8003dea:	4ba1      	ldr	r3, [pc, #644]	; (8004070 <HAL_RCC_OscConfig+0x32c>)
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	4ba0      	ldr	r3, [pc, #640]	; (8004070 <HAL_RCC_OscConfig+0x32c>)
 8003df0:	2180      	movs	r1, #128	; 0x80
 8003df2:	02c9      	lsls	r1, r1, #11
 8003df4:	430a      	orrs	r2, r1
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	4b9d      	ldr	r3, [pc, #628]	; (8004070 <HAL_RCC_OscConfig+0x32c>)
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	4b9c      	ldr	r3, [pc, #624]	; (8004070 <HAL_RCC_OscConfig+0x32c>)
 8003dfe:	2180      	movs	r1, #128	; 0x80
 8003e00:	0249      	lsls	r1, r1, #9
 8003e02:	430a      	orrs	r2, r1
 8003e04:	601a      	str	r2, [r3, #0]
 8003e06:	e00b      	b.n	8003e20 <HAL_RCC_OscConfig+0xdc>
 8003e08:	4b99      	ldr	r3, [pc, #612]	; (8004070 <HAL_RCC_OscConfig+0x32c>)
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	4b98      	ldr	r3, [pc, #608]	; (8004070 <HAL_RCC_OscConfig+0x32c>)
 8003e0e:	4999      	ldr	r1, [pc, #612]	; (8004074 <HAL_RCC_OscConfig+0x330>)
 8003e10:	400a      	ands	r2, r1
 8003e12:	601a      	str	r2, [r3, #0]
 8003e14:	4b96      	ldr	r3, [pc, #600]	; (8004070 <HAL_RCC_OscConfig+0x32c>)
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	4b95      	ldr	r3, [pc, #596]	; (8004070 <HAL_RCC_OscConfig+0x32c>)
 8003e1a:	4997      	ldr	r1, [pc, #604]	; (8004078 <HAL_RCC_OscConfig+0x334>)
 8003e1c:	400a      	ands	r2, r1
 8003e1e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d014      	beq.n	8003e52 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e28:	f7fe f8e2 	bl	8001ff0 <HAL_GetTick>
 8003e2c:	0003      	movs	r3, r0
 8003e2e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e30:	e008      	b.n	8003e44 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e32:	f7fe f8dd 	bl	8001ff0 <HAL_GetTick>
 8003e36:	0002      	movs	r2, r0
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	2b64      	cmp	r3, #100	; 0x64
 8003e3e:	d901      	bls.n	8003e44 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e28a      	b.n	800435a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e44:	4b8a      	ldr	r3, [pc, #552]	; (8004070 <HAL_RCC_OscConfig+0x32c>)
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	2380      	movs	r3, #128	; 0x80
 8003e4a:	029b      	lsls	r3, r3, #10
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	d0f0      	beq.n	8003e32 <HAL_RCC_OscConfig+0xee>
 8003e50:	e015      	b.n	8003e7e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e52:	f7fe f8cd 	bl	8001ff0 <HAL_GetTick>
 8003e56:	0003      	movs	r3, r0
 8003e58:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e5a:	e008      	b.n	8003e6e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e5c:	f7fe f8c8 	bl	8001ff0 <HAL_GetTick>
 8003e60:	0002      	movs	r2, r0
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b64      	cmp	r3, #100	; 0x64
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e275      	b.n	800435a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e6e:	4b80      	ldr	r3, [pc, #512]	; (8004070 <HAL_RCC_OscConfig+0x32c>)
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	2380      	movs	r3, #128	; 0x80
 8003e74:	029b      	lsls	r3, r3, #10
 8003e76:	4013      	ands	r3, r2
 8003e78:	d1f0      	bne.n	8003e5c <HAL_RCC_OscConfig+0x118>
 8003e7a:	e000      	b.n	8003e7e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e7c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2202      	movs	r2, #2
 8003e84:	4013      	ands	r3, r2
 8003e86:	d100      	bne.n	8003e8a <HAL_RCC_OscConfig+0x146>
 8003e88:	e069      	b.n	8003f5e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003e8a:	4b79      	ldr	r3, [pc, #484]	; (8004070 <HAL_RCC_OscConfig+0x32c>)
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	220c      	movs	r2, #12
 8003e90:	4013      	ands	r3, r2
 8003e92:	d00b      	beq.n	8003eac <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003e94:	4b76      	ldr	r3, [pc, #472]	; (8004070 <HAL_RCC_OscConfig+0x32c>)
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	220c      	movs	r2, #12
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	2b08      	cmp	r3, #8
 8003e9e:	d11c      	bne.n	8003eda <HAL_RCC_OscConfig+0x196>
 8003ea0:	4b73      	ldr	r3, [pc, #460]	; (8004070 <HAL_RCC_OscConfig+0x32c>)
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	2380      	movs	r3, #128	; 0x80
 8003ea6:	025b      	lsls	r3, r3, #9
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	d116      	bne.n	8003eda <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eac:	4b70      	ldr	r3, [pc, #448]	; (8004070 <HAL_RCC_OscConfig+0x32c>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2202      	movs	r2, #2
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	d005      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x17e>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d001      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e24b      	b.n	800435a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ec2:	4b6b      	ldr	r3, [pc, #428]	; (8004070 <HAL_RCC_OscConfig+0x32c>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	22f8      	movs	r2, #248	; 0xf8
 8003ec8:	4393      	bics	r3, r2
 8003eca:	0019      	movs	r1, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	00da      	lsls	r2, r3, #3
 8003ed2:	4b67      	ldr	r3, [pc, #412]	; (8004070 <HAL_RCC_OscConfig+0x32c>)
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ed8:	e041      	b.n	8003f5e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d024      	beq.n	8003f2c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ee2:	4b63      	ldr	r3, [pc, #396]	; (8004070 <HAL_RCC_OscConfig+0x32c>)
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	4b62      	ldr	r3, [pc, #392]	; (8004070 <HAL_RCC_OscConfig+0x32c>)
 8003ee8:	2101      	movs	r1, #1
 8003eea:	430a      	orrs	r2, r1
 8003eec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eee:	f7fe f87f 	bl	8001ff0 <HAL_GetTick>
 8003ef2:	0003      	movs	r3, r0
 8003ef4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ef6:	e008      	b.n	8003f0a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ef8:	f7fe f87a 	bl	8001ff0 <HAL_GetTick>
 8003efc:	0002      	movs	r2, r0
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e227      	b.n	800435a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f0a:	4b59      	ldr	r3, [pc, #356]	; (8004070 <HAL_RCC_OscConfig+0x32c>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2202      	movs	r2, #2
 8003f10:	4013      	ands	r3, r2
 8003f12:	d0f1      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f14:	4b56      	ldr	r3, [pc, #344]	; (8004070 <HAL_RCC_OscConfig+0x32c>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	22f8      	movs	r2, #248	; 0xf8
 8003f1a:	4393      	bics	r3, r2
 8003f1c:	0019      	movs	r1, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	00da      	lsls	r2, r3, #3
 8003f24:	4b52      	ldr	r3, [pc, #328]	; (8004070 <HAL_RCC_OscConfig+0x32c>)
 8003f26:	430a      	orrs	r2, r1
 8003f28:	601a      	str	r2, [r3, #0]
 8003f2a:	e018      	b.n	8003f5e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f2c:	4b50      	ldr	r3, [pc, #320]	; (8004070 <HAL_RCC_OscConfig+0x32c>)
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	4b4f      	ldr	r3, [pc, #316]	; (8004070 <HAL_RCC_OscConfig+0x32c>)
 8003f32:	2101      	movs	r1, #1
 8003f34:	438a      	bics	r2, r1
 8003f36:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f38:	f7fe f85a 	bl	8001ff0 <HAL_GetTick>
 8003f3c:	0003      	movs	r3, r0
 8003f3e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f40:	e008      	b.n	8003f54 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f42:	f7fe f855 	bl	8001ff0 <HAL_GetTick>
 8003f46:	0002      	movs	r2, r0
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d901      	bls.n	8003f54 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e202      	b.n	800435a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f54:	4b46      	ldr	r3, [pc, #280]	; (8004070 <HAL_RCC_OscConfig+0x32c>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2202      	movs	r2, #2
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	d1f1      	bne.n	8003f42 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2208      	movs	r2, #8
 8003f64:	4013      	ands	r3, r2
 8003f66:	d036      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	69db      	ldr	r3, [r3, #28]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d019      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f70:	4b3f      	ldr	r3, [pc, #252]	; (8004070 <HAL_RCC_OscConfig+0x32c>)
 8003f72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f74:	4b3e      	ldr	r3, [pc, #248]	; (8004070 <HAL_RCC_OscConfig+0x32c>)
 8003f76:	2101      	movs	r1, #1
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f7c:	f7fe f838 	bl	8001ff0 <HAL_GetTick>
 8003f80:	0003      	movs	r3, r0
 8003f82:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f84:	e008      	b.n	8003f98 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f86:	f7fe f833 	bl	8001ff0 <HAL_GetTick>
 8003f8a:	0002      	movs	r2, r0
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d901      	bls.n	8003f98 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e1e0      	b.n	800435a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f98:	4b35      	ldr	r3, [pc, #212]	; (8004070 <HAL_RCC_OscConfig+0x32c>)
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9c:	2202      	movs	r2, #2
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	d0f1      	beq.n	8003f86 <HAL_RCC_OscConfig+0x242>
 8003fa2:	e018      	b.n	8003fd6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fa4:	4b32      	ldr	r3, [pc, #200]	; (8004070 <HAL_RCC_OscConfig+0x32c>)
 8003fa6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fa8:	4b31      	ldr	r3, [pc, #196]	; (8004070 <HAL_RCC_OscConfig+0x32c>)
 8003faa:	2101      	movs	r1, #1
 8003fac:	438a      	bics	r2, r1
 8003fae:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fb0:	f7fe f81e 	bl	8001ff0 <HAL_GetTick>
 8003fb4:	0003      	movs	r3, r0
 8003fb6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fb8:	e008      	b.n	8003fcc <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fba:	f7fe f819 	bl	8001ff0 <HAL_GetTick>
 8003fbe:	0002      	movs	r2, r0
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d901      	bls.n	8003fcc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e1c6      	b.n	800435a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fcc:	4b28      	ldr	r3, [pc, #160]	; (8004070 <HAL_RCC_OscConfig+0x32c>)
 8003fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd0:	2202      	movs	r2, #2
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	d1f1      	bne.n	8003fba <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2204      	movs	r2, #4
 8003fdc:	4013      	ands	r3, r2
 8003fde:	d100      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x29e>
 8003fe0:	e0b4      	b.n	800414c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fe2:	201f      	movs	r0, #31
 8003fe4:	183b      	adds	r3, r7, r0
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fea:	4b21      	ldr	r3, [pc, #132]	; (8004070 <HAL_RCC_OscConfig+0x32c>)
 8003fec:	69da      	ldr	r2, [r3, #28]
 8003fee:	2380      	movs	r3, #128	; 0x80
 8003ff0:	055b      	lsls	r3, r3, #21
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	d110      	bne.n	8004018 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ff6:	4b1e      	ldr	r3, [pc, #120]	; (8004070 <HAL_RCC_OscConfig+0x32c>)
 8003ff8:	69da      	ldr	r2, [r3, #28]
 8003ffa:	4b1d      	ldr	r3, [pc, #116]	; (8004070 <HAL_RCC_OscConfig+0x32c>)
 8003ffc:	2180      	movs	r1, #128	; 0x80
 8003ffe:	0549      	lsls	r1, r1, #21
 8004000:	430a      	orrs	r2, r1
 8004002:	61da      	str	r2, [r3, #28]
 8004004:	4b1a      	ldr	r3, [pc, #104]	; (8004070 <HAL_RCC_OscConfig+0x32c>)
 8004006:	69da      	ldr	r2, [r3, #28]
 8004008:	2380      	movs	r3, #128	; 0x80
 800400a:	055b      	lsls	r3, r3, #21
 800400c:	4013      	ands	r3, r2
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004012:	183b      	adds	r3, r7, r0
 8004014:	2201      	movs	r2, #1
 8004016:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004018:	4b18      	ldr	r3, [pc, #96]	; (800407c <HAL_RCC_OscConfig+0x338>)
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	2380      	movs	r3, #128	; 0x80
 800401e:	005b      	lsls	r3, r3, #1
 8004020:	4013      	ands	r3, r2
 8004022:	d11a      	bne.n	800405a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004024:	4b15      	ldr	r3, [pc, #84]	; (800407c <HAL_RCC_OscConfig+0x338>)
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	4b14      	ldr	r3, [pc, #80]	; (800407c <HAL_RCC_OscConfig+0x338>)
 800402a:	2180      	movs	r1, #128	; 0x80
 800402c:	0049      	lsls	r1, r1, #1
 800402e:	430a      	orrs	r2, r1
 8004030:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004032:	f7fd ffdd 	bl	8001ff0 <HAL_GetTick>
 8004036:	0003      	movs	r3, r0
 8004038:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800403a:	e008      	b.n	800404e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800403c:	f7fd ffd8 	bl	8001ff0 <HAL_GetTick>
 8004040:	0002      	movs	r2, r0
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b64      	cmp	r3, #100	; 0x64
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e185      	b.n	800435a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800404e:	4b0b      	ldr	r3, [pc, #44]	; (800407c <HAL_RCC_OscConfig+0x338>)
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	2380      	movs	r3, #128	; 0x80
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	4013      	ands	r3, r2
 8004058:	d0f0      	beq.n	800403c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d10e      	bne.n	8004080 <HAL_RCC_OscConfig+0x33c>
 8004062:	4b03      	ldr	r3, [pc, #12]	; (8004070 <HAL_RCC_OscConfig+0x32c>)
 8004064:	6a1a      	ldr	r2, [r3, #32]
 8004066:	4b02      	ldr	r3, [pc, #8]	; (8004070 <HAL_RCC_OscConfig+0x32c>)
 8004068:	2101      	movs	r1, #1
 800406a:	430a      	orrs	r2, r1
 800406c:	621a      	str	r2, [r3, #32]
 800406e:	e035      	b.n	80040dc <HAL_RCC_OscConfig+0x398>
 8004070:	40021000 	.word	0x40021000
 8004074:	fffeffff 	.word	0xfffeffff
 8004078:	fffbffff 	.word	0xfffbffff
 800407c:	40007000 	.word	0x40007000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d10c      	bne.n	80040a2 <HAL_RCC_OscConfig+0x35e>
 8004088:	4bb6      	ldr	r3, [pc, #728]	; (8004364 <HAL_RCC_OscConfig+0x620>)
 800408a:	6a1a      	ldr	r2, [r3, #32]
 800408c:	4bb5      	ldr	r3, [pc, #724]	; (8004364 <HAL_RCC_OscConfig+0x620>)
 800408e:	2101      	movs	r1, #1
 8004090:	438a      	bics	r2, r1
 8004092:	621a      	str	r2, [r3, #32]
 8004094:	4bb3      	ldr	r3, [pc, #716]	; (8004364 <HAL_RCC_OscConfig+0x620>)
 8004096:	6a1a      	ldr	r2, [r3, #32]
 8004098:	4bb2      	ldr	r3, [pc, #712]	; (8004364 <HAL_RCC_OscConfig+0x620>)
 800409a:	2104      	movs	r1, #4
 800409c:	438a      	bics	r2, r1
 800409e:	621a      	str	r2, [r3, #32]
 80040a0:	e01c      	b.n	80040dc <HAL_RCC_OscConfig+0x398>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	2b05      	cmp	r3, #5
 80040a8:	d10c      	bne.n	80040c4 <HAL_RCC_OscConfig+0x380>
 80040aa:	4bae      	ldr	r3, [pc, #696]	; (8004364 <HAL_RCC_OscConfig+0x620>)
 80040ac:	6a1a      	ldr	r2, [r3, #32]
 80040ae:	4bad      	ldr	r3, [pc, #692]	; (8004364 <HAL_RCC_OscConfig+0x620>)
 80040b0:	2104      	movs	r1, #4
 80040b2:	430a      	orrs	r2, r1
 80040b4:	621a      	str	r2, [r3, #32]
 80040b6:	4bab      	ldr	r3, [pc, #684]	; (8004364 <HAL_RCC_OscConfig+0x620>)
 80040b8:	6a1a      	ldr	r2, [r3, #32]
 80040ba:	4baa      	ldr	r3, [pc, #680]	; (8004364 <HAL_RCC_OscConfig+0x620>)
 80040bc:	2101      	movs	r1, #1
 80040be:	430a      	orrs	r2, r1
 80040c0:	621a      	str	r2, [r3, #32]
 80040c2:	e00b      	b.n	80040dc <HAL_RCC_OscConfig+0x398>
 80040c4:	4ba7      	ldr	r3, [pc, #668]	; (8004364 <HAL_RCC_OscConfig+0x620>)
 80040c6:	6a1a      	ldr	r2, [r3, #32]
 80040c8:	4ba6      	ldr	r3, [pc, #664]	; (8004364 <HAL_RCC_OscConfig+0x620>)
 80040ca:	2101      	movs	r1, #1
 80040cc:	438a      	bics	r2, r1
 80040ce:	621a      	str	r2, [r3, #32]
 80040d0:	4ba4      	ldr	r3, [pc, #656]	; (8004364 <HAL_RCC_OscConfig+0x620>)
 80040d2:	6a1a      	ldr	r2, [r3, #32]
 80040d4:	4ba3      	ldr	r3, [pc, #652]	; (8004364 <HAL_RCC_OscConfig+0x620>)
 80040d6:	2104      	movs	r1, #4
 80040d8:	438a      	bics	r2, r1
 80040da:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d014      	beq.n	800410e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040e4:	f7fd ff84 	bl	8001ff0 <HAL_GetTick>
 80040e8:	0003      	movs	r3, r0
 80040ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ec:	e009      	b.n	8004102 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040ee:	f7fd ff7f 	bl	8001ff0 <HAL_GetTick>
 80040f2:	0002      	movs	r2, r0
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	4a9b      	ldr	r2, [pc, #620]	; (8004368 <HAL_RCC_OscConfig+0x624>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e12b      	b.n	800435a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004102:	4b98      	ldr	r3, [pc, #608]	; (8004364 <HAL_RCC_OscConfig+0x620>)
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	2202      	movs	r2, #2
 8004108:	4013      	ands	r3, r2
 800410a:	d0f0      	beq.n	80040ee <HAL_RCC_OscConfig+0x3aa>
 800410c:	e013      	b.n	8004136 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800410e:	f7fd ff6f 	bl	8001ff0 <HAL_GetTick>
 8004112:	0003      	movs	r3, r0
 8004114:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004116:	e009      	b.n	800412c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004118:	f7fd ff6a 	bl	8001ff0 <HAL_GetTick>
 800411c:	0002      	movs	r2, r0
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	4a91      	ldr	r2, [pc, #580]	; (8004368 <HAL_RCC_OscConfig+0x624>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d901      	bls.n	800412c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e116      	b.n	800435a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800412c:	4b8d      	ldr	r3, [pc, #564]	; (8004364 <HAL_RCC_OscConfig+0x620>)
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	2202      	movs	r2, #2
 8004132:	4013      	ands	r3, r2
 8004134:	d1f0      	bne.n	8004118 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004136:	231f      	movs	r3, #31
 8004138:	18fb      	adds	r3, r7, r3
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d105      	bne.n	800414c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004140:	4b88      	ldr	r3, [pc, #544]	; (8004364 <HAL_RCC_OscConfig+0x620>)
 8004142:	69da      	ldr	r2, [r3, #28]
 8004144:	4b87      	ldr	r3, [pc, #540]	; (8004364 <HAL_RCC_OscConfig+0x620>)
 8004146:	4989      	ldr	r1, [pc, #548]	; (800436c <HAL_RCC_OscConfig+0x628>)
 8004148:	400a      	ands	r2, r1
 800414a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2210      	movs	r2, #16
 8004152:	4013      	ands	r3, r2
 8004154:	d063      	beq.n	800421e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d12a      	bne.n	80041b4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800415e:	4b81      	ldr	r3, [pc, #516]	; (8004364 <HAL_RCC_OscConfig+0x620>)
 8004160:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004162:	4b80      	ldr	r3, [pc, #512]	; (8004364 <HAL_RCC_OscConfig+0x620>)
 8004164:	2104      	movs	r1, #4
 8004166:	430a      	orrs	r2, r1
 8004168:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800416a:	4b7e      	ldr	r3, [pc, #504]	; (8004364 <HAL_RCC_OscConfig+0x620>)
 800416c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800416e:	4b7d      	ldr	r3, [pc, #500]	; (8004364 <HAL_RCC_OscConfig+0x620>)
 8004170:	2101      	movs	r1, #1
 8004172:	430a      	orrs	r2, r1
 8004174:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004176:	f7fd ff3b 	bl	8001ff0 <HAL_GetTick>
 800417a:	0003      	movs	r3, r0
 800417c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800417e:	e008      	b.n	8004192 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004180:	f7fd ff36 	bl	8001ff0 <HAL_GetTick>
 8004184:	0002      	movs	r2, r0
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e0e3      	b.n	800435a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004192:	4b74      	ldr	r3, [pc, #464]	; (8004364 <HAL_RCC_OscConfig+0x620>)
 8004194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004196:	2202      	movs	r2, #2
 8004198:	4013      	ands	r3, r2
 800419a:	d0f1      	beq.n	8004180 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800419c:	4b71      	ldr	r3, [pc, #452]	; (8004364 <HAL_RCC_OscConfig+0x620>)
 800419e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a0:	22f8      	movs	r2, #248	; 0xf8
 80041a2:	4393      	bics	r3, r2
 80041a4:	0019      	movs	r1, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	00da      	lsls	r2, r3, #3
 80041ac:	4b6d      	ldr	r3, [pc, #436]	; (8004364 <HAL_RCC_OscConfig+0x620>)
 80041ae:	430a      	orrs	r2, r1
 80041b0:	635a      	str	r2, [r3, #52]	; 0x34
 80041b2:	e034      	b.n	800421e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	3305      	adds	r3, #5
 80041ba:	d111      	bne.n	80041e0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80041bc:	4b69      	ldr	r3, [pc, #420]	; (8004364 <HAL_RCC_OscConfig+0x620>)
 80041be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041c0:	4b68      	ldr	r3, [pc, #416]	; (8004364 <HAL_RCC_OscConfig+0x620>)
 80041c2:	2104      	movs	r1, #4
 80041c4:	438a      	bics	r2, r1
 80041c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80041c8:	4b66      	ldr	r3, [pc, #408]	; (8004364 <HAL_RCC_OscConfig+0x620>)
 80041ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041cc:	22f8      	movs	r2, #248	; 0xf8
 80041ce:	4393      	bics	r3, r2
 80041d0:	0019      	movs	r1, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	00da      	lsls	r2, r3, #3
 80041d8:	4b62      	ldr	r3, [pc, #392]	; (8004364 <HAL_RCC_OscConfig+0x620>)
 80041da:	430a      	orrs	r2, r1
 80041dc:	635a      	str	r2, [r3, #52]	; 0x34
 80041de:	e01e      	b.n	800421e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80041e0:	4b60      	ldr	r3, [pc, #384]	; (8004364 <HAL_RCC_OscConfig+0x620>)
 80041e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041e4:	4b5f      	ldr	r3, [pc, #380]	; (8004364 <HAL_RCC_OscConfig+0x620>)
 80041e6:	2104      	movs	r1, #4
 80041e8:	430a      	orrs	r2, r1
 80041ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80041ec:	4b5d      	ldr	r3, [pc, #372]	; (8004364 <HAL_RCC_OscConfig+0x620>)
 80041ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041f0:	4b5c      	ldr	r3, [pc, #368]	; (8004364 <HAL_RCC_OscConfig+0x620>)
 80041f2:	2101      	movs	r1, #1
 80041f4:	438a      	bics	r2, r1
 80041f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041f8:	f7fd fefa 	bl	8001ff0 <HAL_GetTick>
 80041fc:	0003      	movs	r3, r0
 80041fe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004200:	e008      	b.n	8004214 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004202:	f7fd fef5 	bl	8001ff0 <HAL_GetTick>
 8004206:	0002      	movs	r2, r0
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	2b02      	cmp	r3, #2
 800420e:	d901      	bls.n	8004214 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e0a2      	b.n	800435a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004214:	4b53      	ldr	r3, [pc, #332]	; (8004364 <HAL_RCC_OscConfig+0x620>)
 8004216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004218:	2202      	movs	r2, #2
 800421a:	4013      	ands	r3, r2
 800421c:	d1f1      	bne.n	8004202 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d100      	bne.n	8004228 <HAL_RCC_OscConfig+0x4e4>
 8004226:	e097      	b.n	8004358 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004228:	4b4e      	ldr	r3, [pc, #312]	; (8004364 <HAL_RCC_OscConfig+0x620>)
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	220c      	movs	r2, #12
 800422e:	4013      	ands	r3, r2
 8004230:	2b08      	cmp	r3, #8
 8004232:	d100      	bne.n	8004236 <HAL_RCC_OscConfig+0x4f2>
 8004234:	e06b      	b.n	800430e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a1b      	ldr	r3, [r3, #32]
 800423a:	2b02      	cmp	r3, #2
 800423c:	d14c      	bne.n	80042d8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800423e:	4b49      	ldr	r3, [pc, #292]	; (8004364 <HAL_RCC_OscConfig+0x620>)
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	4b48      	ldr	r3, [pc, #288]	; (8004364 <HAL_RCC_OscConfig+0x620>)
 8004244:	494a      	ldr	r1, [pc, #296]	; (8004370 <HAL_RCC_OscConfig+0x62c>)
 8004246:	400a      	ands	r2, r1
 8004248:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800424a:	f7fd fed1 	bl	8001ff0 <HAL_GetTick>
 800424e:	0003      	movs	r3, r0
 8004250:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004252:	e008      	b.n	8004266 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004254:	f7fd fecc 	bl	8001ff0 <HAL_GetTick>
 8004258:	0002      	movs	r2, r0
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b02      	cmp	r3, #2
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e079      	b.n	800435a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004266:	4b3f      	ldr	r3, [pc, #252]	; (8004364 <HAL_RCC_OscConfig+0x620>)
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	2380      	movs	r3, #128	; 0x80
 800426c:	049b      	lsls	r3, r3, #18
 800426e:	4013      	ands	r3, r2
 8004270:	d1f0      	bne.n	8004254 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004272:	4b3c      	ldr	r3, [pc, #240]	; (8004364 <HAL_RCC_OscConfig+0x620>)
 8004274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004276:	220f      	movs	r2, #15
 8004278:	4393      	bics	r3, r2
 800427a:	0019      	movs	r1, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004280:	4b38      	ldr	r3, [pc, #224]	; (8004364 <HAL_RCC_OscConfig+0x620>)
 8004282:	430a      	orrs	r2, r1
 8004284:	62da      	str	r2, [r3, #44]	; 0x2c
 8004286:	4b37      	ldr	r3, [pc, #220]	; (8004364 <HAL_RCC_OscConfig+0x620>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	4a3a      	ldr	r2, [pc, #232]	; (8004374 <HAL_RCC_OscConfig+0x630>)
 800428c:	4013      	ands	r3, r2
 800428e:	0019      	movs	r1, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004298:	431a      	orrs	r2, r3
 800429a:	4b32      	ldr	r3, [pc, #200]	; (8004364 <HAL_RCC_OscConfig+0x620>)
 800429c:	430a      	orrs	r2, r1
 800429e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042a0:	4b30      	ldr	r3, [pc, #192]	; (8004364 <HAL_RCC_OscConfig+0x620>)
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	4b2f      	ldr	r3, [pc, #188]	; (8004364 <HAL_RCC_OscConfig+0x620>)
 80042a6:	2180      	movs	r1, #128	; 0x80
 80042a8:	0449      	lsls	r1, r1, #17
 80042aa:	430a      	orrs	r2, r1
 80042ac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ae:	f7fd fe9f 	bl	8001ff0 <HAL_GetTick>
 80042b2:	0003      	movs	r3, r0
 80042b4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042b6:	e008      	b.n	80042ca <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042b8:	f7fd fe9a 	bl	8001ff0 <HAL_GetTick>
 80042bc:	0002      	movs	r2, r0
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e047      	b.n	800435a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042ca:	4b26      	ldr	r3, [pc, #152]	; (8004364 <HAL_RCC_OscConfig+0x620>)
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	2380      	movs	r3, #128	; 0x80
 80042d0:	049b      	lsls	r3, r3, #18
 80042d2:	4013      	ands	r3, r2
 80042d4:	d0f0      	beq.n	80042b8 <HAL_RCC_OscConfig+0x574>
 80042d6:	e03f      	b.n	8004358 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042d8:	4b22      	ldr	r3, [pc, #136]	; (8004364 <HAL_RCC_OscConfig+0x620>)
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	4b21      	ldr	r3, [pc, #132]	; (8004364 <HAL_RCC_OscConfig+0x620>)
 80042de:	4924      	ldr	r1, [pc, #144]	; (8004370 <HAL_RCC_OscConfig+0x62c>)
 80042e0:	400a      	ands	r2, r1
 80042e2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e4:	f7fd fe84 	bl	8001ff0 <HAL_GetTick>
 80042e8:	0003      	movs	r3, r0
 80042ea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042ec:	e008      	b.n	8004300 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042ee:	f7fd fe7f 	bl	8001ff0 <HAL_GetTick>
 80042f2:	0002      	movs	r2, r0
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d901      	bls.n	8004300 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e02c      	b.n	800435a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004300:	4b18      	ldr	r3, [pc, #96]	; (8004364 <HAL_RCC_OscConfig+0x620>)
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	2380      	movs	r3, #128	; 0x80
 8004306:	049b      	lsls	r3, r3, #18
 8004308:	4013      	ands	r3, r2
 800430a:	d1f0      	bne.n	80042ee <HAL_RCC_OscConfig+0x5aa>
 800430c:	e024      	b.n	8004358 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a1b      	ldr	r3, [r3, #32]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d101      	bne.n	800431a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e01f      	b.n	800435a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800431a:	4b12      	ldr	r3, [pc, #72]	; (8004364 <HAL_RCC_OscConfig+0x620>)
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004320:	4b10      	ldr	r3, [pc, #64]	; (8004364 <HAL_RCC_OscConfig+0x620>)
 8004322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004324:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	2380      	movs	r3, #128	; 0x80
 800432a:	025b      	lsls	r3, r3, #9
 800432c:	401a      	ands	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004332:	429a      	cmp	r2, r3
 8004334:	d10e      	bne.n	8004354 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	220f      	movs	r2, #15
 800433a:	401a      	ands	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004340:	429a      	cmp	r2, r3
 8004342:	d107      	bne.n	8004354 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	23f0      	movs	r3, #240	; 0xf0
 8004348:	039b      	lsls	r3, r3, #14
 800434a:	401a      	ands	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004350:	429a      	cmp	r2, r3
 8004352:	d001      	beq.n	8004358 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e000      	b.n	800435a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	0018      	movs	r0, r3
 800435c:	46bd      	mov	sp, r7
 800435e:	b008      	add	sp, #32
 8004360:	bd80      	pop	{r7, pc}
 8004362:	46c0      	nop			; (mov r8, r8)
 8004364:	40021000 	.word	0x40021000
 8004368:	00001388 	.word	0x00001388
 800436c:	efffffff 	.word	0xefffffff
 8004370:	feffffff 	.word	0xfeffffff
 8004374:	ffc2ffff 	.word	0xffc2ffff

08004378 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d101      	bne.n	800438c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e0b3      	b.n	80044f4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800438c:	4b5b      	ldr	r3, [pc, #364]	; (80044fc <HAL_RCC_ClockConfig+0x184>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2201      	movs	r2, #1
 8004392:	4013      	ands	r3, r2
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	429a      	cmp	r2, r3
 8004398:	d911      	bls.n	80043be <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800439a:	4b58      	ldr	r3, [pc, #352]	; (80044fc <HAL_RCC_ClockConfig+0x184>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2201      	movs	r2, #1
 80043a0:	4393      	bics	r3, r2
 80043a2:	0019      	movs	r1, r3
 80043a4:	4b55      	ldr	r3, [pc, #340]	; (80044fc <HAL_RCC_ClockConfig+0x184>)
 80043a6:	683a      	ldr	r2, [r7, #0]
 80043a8:	430a      	orrs	r2, r1
 80043aa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ac:	4b53      	ldr	r3, [pc, #332]	; (80044fc <HAL_RCC_ClockConfig+0x184>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2201      	movs	r2, #1
 80043b2:	4013      	ands	r3, r2
 80043b4:	683a      	ldr	r2, [r7, #0]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d001      	beq.n	80043be <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e09a      	b.n	80044f4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2202      	movs	r2, #2
 80043c4:	4013      	ands	r3, r2
 80043c6:	d015      	beq.n	80043f4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2204      	movs	r2, #4
 80043ce:	4013      	ands	r3, r2
 80043d0:	d006      	beq.n	80043e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80043d2:	4b4b      	ldr	r3, [pc, #300]	; (8004500 <HAL_RCC_ClockConfig+0x188>)
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	4b4a      	ldr	r3, [pc, #296]	; (8004500 <HAL_RCC_ClockConfig+0x188>)
 80043d8:	21e0      	movs	r1, #224	; 0xe0
 80043da:	00c9      	lsls	r1, r1, #3
 80043dc:	430a      	orrs	r2, r1
 80043de:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043e0:	4b47      	ldr	r3, [pc, #284]	; (8004500 <HAL_RCC_ClockConfig+0x188>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	22f0      	movs	r2, #240	; 0xf0
 80043e6:	4393      	bics	r3, r2
 80043e8:	0019      	movs	r1, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689a      	ldr	r2, [r3, #8]
 80043ee:	4b44      	ldr	r3, [pc, #272]	; (8004500 <HAL_RCC_ClockConfig+0x188>)
 80043f0:	430a      	orrs	r2, r1
 80043f2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2201      	movs	r2, #1
 80043fa:	4013      	ands	r3, r2
 80043fc:	d040      	beq.n	8004480 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d107      	bne.n	8004416 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004406:	4b3e      	ldr	r3, [pc, #248]	; (8004500 <HAL_RCC_ClockConfig+0x188>)
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	2380      	movs	r3, #128	; 0x80
 800440c:	029b      	lsls	r3, r3, #10
 800440e:	4013      	ands	r3, r2
 8004410:	d114      	bne.n	800443c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e06e      	b.n	80044f4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	2b02      	cmp	r3, #2
 800441c:	d107      	bne.n	800442e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800441e:	4b38      	ldr	r3, [pc, #224]	; (8004500 <HAL_RCC_ClockConfig+0x188>)
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	2380      	movs	r3, #128	; 0x80
 8004424:	049b      	lsls	r3, r3, #18
 8004426:	4013      	ands	r3, r2
 8004428:	d108      	bne.n	800443c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e062      	b.n	80044f4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800442e:	4b34      	ldr	r3, [pc, #208]	; (8004500 <HAL_RCC_ClockConfig+0x188>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2202      	movs	r2, #2
 8004434:	4013      	ands	r3, r2
 8004436:	d101      	bne.n	800443c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e05b      	b.n	80044f4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800443c:	4b30      	ldr	r3, [pc, #192]	; (8004500 <HAL_RCC_ClockConfig+0x188>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	2203      	movs	r2, #3
 8004442:	4393      	bics	r3, r2
 8004444:	0019      	movs	r1, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	4b2d      	ldr	r3, [pc, #180]	; (8004500 <HAL_RCC_ClockConfig+0x188>)
 800444c:	430a      	orrs	r2, r1
 800444e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004450:	f7fd fdce 	bl	8001ff0 <HAL_GetTick>
 8004454:	0003      	movs	r3, r0
 8004456:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004458:	e009      	b.n	800446e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800445a:	f7fd fdc9 	bl	8001ff0 <HAL_GetTick>
 800445e:	0002      	movs	r2, r0
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	4a27      	ldr	r2, [pc, #156]	; (8004504 <HAL_RCC_ClockConfig+0x18c>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d901      	bls.n	800446e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e042      	b.n	80044f4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800446e:	4b24      	ldr	r3, [pc, #144]	; (8004500 <HAL_RCC_ClockConfig+0x188>)
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	220c      	movs	r2, #12
 8004474:	401a      	ands	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	429a      	cmp	r2, r3
 800447e:	d1ec      	bne.n	800445a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004480:	4b1e      	ldr	r3, [pc, #120]	; (80044fc <HAL_RCC_ClockConfig+0x184>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2201      	movs	r2, #1
 8004486:	4013      	ands	r3, r2
 8004488:	683a      	ldr	r2, [r7, #0]
 800448a:	429a      	cmp	r2, r3
 800448c:	d211      	bcs.n	80044b2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800448e:	4b1b      	ldr	r3, [pc, #108]	; (80044fc <HAL_RCC_ClockConfig+0x184>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2201      	movs	r2, #1
 8004494:	4393      	bics	r3, r2
 8004496:	0019      	movs	r1, r3
 8004498:	4b18      	ldr	r3, [pc, #96]	; (80044fc <HAL_RCC_ClockConfig+0x184>)
 800449a:	683a      	ldr	r2, [r7, #0]
 800449c:	430a      	orrs	r2, r1
 800449e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044a0:	4b16      	ldr	r3, [pc, #88]	; (80044fc <HAL_RCC_ClockConfig+0x184>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2201      	movs	r2, #1
 80044a6:	4013      	ands	r3, r2
 80044a8:	683a      	ldr	r2, [r7, #0]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d001      	beq.n	80044b2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e020      	b.n	80044f4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2204      	movs	r2, #4
 80044b8:	4013      	ands	r3, r2
 80044ba:	d009      	beq.n	80044d0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80044bc:	4b10      	ldr	r3, [pc, #64]	; (8004500 <HAL_RCC_ClockConfig+0x188>)
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	4a11      	ldr	r2, [pc, #68]	; (8004508 <HAL_RCC_ClockConfig+0x190>)
 80044c2:	4013      	ands	r3, r2
 80044c4:	0019      	movs	r1, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	68da      	ldr	r2, [r3, #12]
 80044ca:	4b0d      	ldr	r3, [pc, #52]	; (8004500 <HAL_RCC_ClockConfig+0x188>)
 80044cc:	430a      	orrs	r2, r1
 80044ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80044d0:	f000 f820 	bl	8004514 <HAL_RCC_GetSysClockFreq>
 80044d4:	0001      	movs	r1, r0
 80044d6:	4b0a      	ldr	r3, [pc, #40]	; (8004500 <HAL_RCC_ClockConfig+0x188>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	091b      	lsrs	r3, r3, #4
 80044dc:	220f      	movs	r2, #15
 80044de:	4013      	ands	r3, r2
 80044e0:	4a0a      	ldr	r2, [pc, #40]	; (800450c <HAL_RCC_ClockConfig+0x194>)
 80044e2:	5cd3      	ldrb	r3, [r2, r3]
 80044e4:	000a      	movs	r2, r1
 80044e6:	40da      	lsrs	r2, r3
 80044e8:	4b09      	ldr	r3, [pc, #36]	; (8004510 <HAL_RCC_ClockConfig+0x198>)
 80044ea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80044ec:	2003      	movs	r0, #3
 80044ee:	f7fd fd39 	bl	8001f64 <HAL_InitTick>
  
  return HAL_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	0018      	movs	r0, r3
 80044f6:	46bd      	mov	sp, r7
 80044f8:	b004      	add	sp, #16
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	40022000 	.word	0x40022000
 8004500:	40021000 	.word	0x40021000
 8004504:	00001388 	.word	0x00001388
 8004508:	fffff8ff 	.word	0xfffff8ff
 800450c:	08007a68 	.word	0x08007a68
 8004510:	20000028 	.word	0x20000028

08004514 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004514:	b590      	push	{r4, r7, lr}
 8004516:	b08f      	sub	sp, #60	; 0x3c
 8004518:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800451a:	2314      	movs	r3, #20
 800451c:	18fb      	adds	r3, r7, r3
 800451e:	4a2b      	ldr	r2, [pc, #172]	; (80045cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004520:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004522:	c313      	stmia	r3!, {r0, r1, r4}
 8004524:	6812      	ldr	r2, [r2, #0]
 8004526:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004528:	1d3b      	adds	r3, r7, #4
 800452a:	4a29      	ldr	r2, [pc, #164]	; (80045d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800452c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800452e:	c313      	stmia	r3!, {r0, r1, r4}
 8004530:	6812      	ldr	r2, [r2, #0]
 8004532:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004534:	2300      	movs	r3, #0
 8004536:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004538:	2300      	movs	r3, #0
 800453a:	62bb      	str	r3, [r7, #40]	; 0x28
 800453c:	2300      	movs	r3, #0
 800453e:	637b      	str	r3, [r7, #52]	; 0x34
 8004540:	2300      	movs	r3, #0
 8004542:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004544:	2300      	movs	r3, #0
 8004546:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004548:	4b22      	ldr	r3, [pc, #136]	; (80045d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800454e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004550:	220c      	movs	r2, #12
 8004552:	4013      	ands	r3, r2
 8004554:	2b04      	cmp	r3, #4
 8004556:	d002      	beq.n	800455e <HAL_RCC_GetSysClockFreq+0x4a>
 8004558:	2b08      	cmp	r3, #8
 800455a:	d003      	beq.n	8004564 <HAL_RCC_GetSysClockFreq+0x50>
 800455c:	e02d      	b.n	80045ba <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800455e:	4b1e      	ldr	r3, [pc, #120]	; (80045d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004560:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004562:	e02d      	b.n	80045c0 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004566:	0c9b      	lsrs	r3, r3, #18
 8004568:	220f      	movs	r2, #15
 800456a:	4013      	ands	r3, r2
 800456c:	2214      	movs	r2, #20
 800456e:	18ba      	adds	r2, r7, r2
 8004570:	5cd3      	ldrb	r3, [r2, r3]
 8004572:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004574:	4b17      	ldr	r3, [pc, #92]	; (80045d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004578:	220f      	movs	r2, #15
 800457a:	4013      	ands	r3, r2
 800457c:	1d3a      	adds	r2, r7, #4
 800457e:	5cd3      	ldrb	r3, [r2, r3]
 8004580:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004582:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004584:	2380      	movs	r3, #128	; 0x80
 8004586:	025b      	lsls	r3, r3, #9
 8004588:	4013      	ands	r3, r2
 800458a:	d009      	beq.n	80045a0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800458c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800458e:	4812      	ldr	r0, [pc, #72]	; (80045d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004590:	f7fb fdba 	bl	8000108 <__udivsi3>
 8004594:	0003      	movs	r3, r0
 8004596:	001a      	movs	r2, r3
 8004598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459a:	4353      	muls	r3, r2
 800459c:	637b      	str	r3, [r7, #52]	; 0x34
 800459e:	e009      	b.n	80045b4 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80045a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045a2:	000a      	movs	r2, r1
 80045a4:	0152      	lsls	r2, r2, #5
 80045a6:	1a52      	subs	r2, r2, r1
 80045a8:	0193      	lsls	r3, r2, #6
 80045aa:	1a9b      	subs	r3, r3, r2
 80045ac:	00db      	lsls	r3, r3, #3
 80045ae:	185b      	adds	r3, r3, r1
 80045b0:	021b      	lsls	r3, r3, #8
 80045b2:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80045b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045b6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80045b8:	e002      	b.n	80045c0 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80045ba:	4b07      	ldr	r3, [pc, #28]	; (80045d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80045bc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80045be:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80045c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80045c2:	0018      	movs	r0, r3
 80045c4:	46bd      	mov	sp, r7
 80045c6:	b00f      	add	sp, #60	; 0x3c
 80045c8:	bd90      	pop	{r4, r7, pc}
 80045ca:	46c0      	nop			; (mov r8, r8)
 80045cc:	080079ac 	.word	0x080079ac
 80045d0:	080079bc 	.word	0x080079bc
 80045d4:	40021000 	.word	0x40021000
 80045d8:	007a1200 	.word	0x007a1200

080045dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045e0:	4b02      	ldr	r3, [pc, #8]	; (80045ec <HAL_RCC_GetHCLKFreq+0x10>)
 80045e2:	681b      	ldr	r3, [r3, #0]
}
 80045e4:	0018      	movs	r0, r3
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	46c0      	nop			; (mov r8, r8)
 80045ec:	20000028 	.word	0x20000028

080045f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80045f4:	f7ff fff2 	bl	80045dc <HAL_RCC_GetHCLKFreq>
 80045f8:	0001      	movs	r1, r0
 80045fa:	4b06      	ldr	r3, [pc, #24]	; (8004614 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	0a1b      	lsrs	r3, r3, #8
 8004600:	2207      	movs	r2, #7
 8004602:	4013      	ands	r3, r2
 8004604:	4a04      	ldr	r2, [pc, #16]	; (8004618 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004606:	5cd3      	ldrb	r3, [r2, r3]
 8004608:	40d9      	lsrs	r1, r3
 800460a:	000b      	movs	r3, r1
}    
 800460c:	0018      	movs	r0, r3
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	46c0      	nop			; (mov r8, r8)
 8004614:	40021000 	.word	0x40021000
 8004618:	08007a78 	.word	0x08007a78

0800461c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004624:	2300      	movs	r3, #0
 8004626:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004628:	2300      	movs	r3, #0
 800462a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	2380      	movs	r3, #128	; 0x80
 8004632:	025b      	lsls	r3, r3, #9
 8004634:	4013      	ands	r3, r2
 8004636:	d100      	bne.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004638:	e08e      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800463a:	2017      	movs	r0, #23
 800463c:	183b      	adds	r3, r7, r0
 800463e:	2200      	movs	r2, #0
 8004640:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004642:	4b5f      	ldr	r3, [pc, #380]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004644:	69da      	ldr	r2, [r3, #28]
 8004646:	2380      	movs	r3, #128	; 0x80
 8004648:	055b      	lsls	r3, r3, #21
 800464a:	4013      	ands	r3, r2
 800464c:	d110      	bne.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800464e:	4b5c      	ldr	r3, [pc, #368]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004650:	69da      	ldr	r2, [r3, #28]
 8004652:	4b5b      	ldr	r3, [pc, #364]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004654:	2180      	movs	r1, #128	; 0x80
 8004656:	0549      	lsls	r1, r1, #21
 8004658:	430a      	orrs	r2, r1
 800465a:	61da      	str	r2, [r3, #28]
 800465c:	4b58      	ldr	r3, [pc, #352]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800465e:	69da      	ldr	r2, [r3, #28]
 8004660:	2380      	movs	r3, #128	; 0x80
 8004662:	055b      	lsls	r3, r3, #21
 8004664:	4013      	ands	r3, r2
 8004666:	60bb      	str	r3, [r7, #8]
 8004668:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800466a:	183b      	adds	r3, r7, r0
 800466c:	2201      	movs	r2, #1
 800466e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004670:	4b54      	ldr	r3, [pc, #336]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	2380      	movs	r3, #128	; 0x80
 8004676:	005b      	lsls	r3, r3, #1
 8004678:	4013      	ands	r3, r2
 800467a:	d11a      	bne.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800467c:	4b51      	ldr	r3, [pc, #324]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	4b50      	ldr	r3, [pc, #320]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004682:	2180      	movs	r1, #128	; 0x80
 8004684:	0049      	lsls	r1, r1, #1
 8004686:	430a      	orrs	r2, r1
 8004688:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800468a:	f7fd fcb1 	bl	8001ff0 <HAL_GetTick>
 800468e:	0003      	movs	r3, r0
 8004690:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004692:	e008      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004694:	f7fd fcac 	bl	8001ff0 <HAL_GetTick>
 8004698:	0002      	movs	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b64      	cmp	r3, #100	; 0x64
 80046a0:	d901      	bls.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e087      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046a6:	4b47      	ldr	r3, [pc, #284]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	2380      	movs	r3, #128	; 0x80
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	4013      	ands	r3, r2
 80046b0:	d0f0      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046b2:	4b43      	ldr	r3, [pc, #268]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80046b4:	6a1a      	ldr	r2, [r3, #32]
 80046b6:	23c0      	movs	r3, #192	; 0xc0
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	4013      	ands	r3, r2
 80046bc:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d034      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685a      	ldr	r2, [r3, #4]
 80046c8:	23c0      	movs	r3, #192	; 0xc0
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	4013      	ands	r3, r2
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d02c      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046d4:	4b3a      	ldr	r3, [pc, #232]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80046d6:	6a1b      	ldr	r3, [r3, #32]
 80046d8:	4a3b      	ldr	r2, [pc, #236]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046da:	4013      	ands	r3, r2
 80046dc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046de:	4b38      	ldr	r3, [pc, #224]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80046e0:	6a1a      	ldr	r2, [r3, #32]
 80046e2:	4b37      	ldr	r3, [pc, #220]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80046e4:	2180      	movs	r1, #128	; 0x80
 80046e6:	0249      	lsls	r1, r1, #9
 80046e8:	430a      	orrs	r2, r1
 80046ea:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046ec:	4b34      	ldr	r3, [pc, #208]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80046ee:	6a1a      	ldr	r2, [r3, #32]
 80046f0:	4b33      	ldr	r3, [pc, #204]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80046f2:	4936      	ldr	r1, [pc, #216]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80046f4:	400a      	ands	r2, r1
 80046f6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80046f8:	4b31      	ldr	r3, [pc, #196]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2201      	movs	r2, #1
 8004702:	4013      	ands	r3, r2
 8004704:	d013      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004706:	f7fd fc73 	bl	8001ff0 <HAL_GetTick>
 800470a:	0003      	movs	r3, r0
 800470c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800470e:	e009      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004710:	f7fd fc6e 	bl	8001ff0 <HAL_GetTick>
 8004714:	0002      	movs	r2, r0
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	4a2d      	ldr	r2, [pc, #180]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d901      	bls.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e048      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004724:	4b26      	ldr	r3, [pc, #152]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004726:	6a1b      	ldr	r3, [r3, #32]
 8004728:	2202      	movs	r2, #2
 800472a:	4013      	ands	r3, r2
 800472c:	d0f0      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800472e:	4b24      	ldr	r3, [pc, #144]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004730:	6a1b      	ldr	r3, [r3, #32]
 8004732:	4a25      	ldr	r2, [pc, #148]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004734:	4013      	ands	r3, r2
 8004736:	0019      	movs	r1, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685a      	ldr	r2, [r3, #4]
 800473c:	4b20      	ldr	r3, [pc, #128]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800473e:	430a      	orrs	r2, r1
 8004740:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004742:	2317      	movs	r3, #23
 8004744:	18fb      	adds	r3, r7, r3
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d105      	bne.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800474c:	4b1c      	ldr	r3, [pc, #112]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800474e:	69da      	ldr	r2, [r3, #28]
 8004750:	4b1b      	ldr	r3, [pc, #108]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004752:	4920      	ldr	r1, [pc, #128]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004754:	400a      	ands	r2, r1
 8004756:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2201      	movs	r2, #1
 800475e:	4013      	ands	r3, r2
 8004760:	d009      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004762:	4b17      	ldr	r3, [pc, #92]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004766:	2203      	movs	r2, #3
 8004768:	4393      	bics	r3, r2
 800476a:	0019      	movs	r1, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689a      	ldr	r2, [r3, #8]
 8004770:	4b13      	ldr	r3, [pc, #76]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004772:	430a      	orrs	r2, r1
 8004774:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2220      	movs	r2, #32
 800477c:	4013      	ands	r3, r2
 800477e:	d009      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004780:	4b0f      	ldr	r3, [pc, #60]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004784:	2210      	movs	r2, #16
 8004786:	4393      	bics	r3, r2
 8004788:	0019      	movs	r1, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	68da      	ldr	r2, [r3, #12]
 800478e:	4b0c      	ldr	r3, [pc, #48]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004790:	430a      	orrs	r2, r1
 8004792:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	2380      	movs	r3, #128	; 0x80
 800479a:	00db      	lsls	r3, r3, #3
 800479c:	4013      	ands	r3, r2
 800479e:	d009      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80047a0:	4b07      	ldr	r3, [pc, #28]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80047a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a4:	2240      	movs	r2, #64	; 0x40
 80047a6:	4393      	bics	r3, r2
 80047a8:	0019      	movs	r1, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	691a      	ldr	r2, [r3, #16]
 80047ae:	4b04      	ldr	r3, [pc, #16]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80047b0:	430a      	orrs	r2, r1
 80047b2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	0018      	movs	r0, r3
 80047b8:	46bd      	mov	sp, r7
 80047ba:	b006      	add	sp, #24
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	46c0      	nop			; (mov r8, r8)
 80047c0:	40021000 	.word	0x40021000
 80047c4:	40007000 	.word	0x40007000
 80047c8:	fffffcff 	.word	0xfffffcff
 80047cc:	fffeffff 	.word	0xfffeffff
 80047d0:	00001388 	.word	0x00001388
 80047d4:	efffffff 	.word	0xefffffff

080047d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e0a8      	b.n	800493c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d109      	bne.n	8004806 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685a      	ldr	r2, [r3, #4]
 80047f6:	2382      	movs	r3, #130	; 0x82
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d009      	beq.n	8004812 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	61da      	str	r2, [r3, #28]
 8004804:	e005      	b.n	8004812 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	225d      	movs	r2, #93	; 0x5d
 800481c:	5c9b      	ldrb	r3, [r3, r2]
 800481e:	b2db      	uxtb	r3, r3
 8004820:	2b00      	cmp	r3, #0
 8004822:	d107      	bne.n	8004834 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	225c      	movs	r2, #92	; 0x5c
 8004828:	2100      	movs	r1, #0
 800482a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	0018      	movs	r0, r3
 8004830:	f7fd f934 	bl	8001a9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	225d      	movs	r2, #93	; 0x5d
 8004838:	2102      	movs	r1, #2
 800483a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2140      	movs	r1, #64	; 0x40
 8004848:	438a      	bics	r2, r1
 800484a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	68da      	ldr	r2, [r3, #12]
 8004850:	23e0      	movs	r3, #224	; 0xe0
 8004852:	00db      	lsls	r3, r3, #3
 8004854:	429a      	cmp	r2, r3
 8004856:	d902      	bls.n	800485e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004858:	2300      	movs	r3, #0
 800485a:	60fb      	str	r3, [r7, #12]
 800485c:	e002      	b.n	8004864 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800485e:	2380      	movs	r3, #128	; 0x80
 8004860:	015b      	lsls	r3, r3, #5
 8004862:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	68da      	ldr	r2, [r3, #12]
 8004868:	23f0      	movs	r3, #240	; 0xf0
 800486a:	011b      	lsls	r3, r3, #4
 800486c:	429a      	cmp	r2, r3
 800486e:	d008      	beq.n	8004882 <HAL_SPI_Init+0xaa>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	68da      	ldr	r2, [r3, #12]
 8004874:	23e0      	movs	r3, #224	; 0xe0
 8004876:	00db      	lsls	r3, r3, #3
 8004878:	429a      	cmp	r2, r3
 800487a:	d002      	beq.n	8004882 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685a      	ldr	r2, [r3, #4]
 8004886:	2382      	movs	r3, #130	; 0x82
 8004888:	005b      	lsls	r3, r3, #1
 800488a:	401a      	ands	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6899      	ldr	r1, [r3, #8]
 8004890:	2384      	movs	r3, #132	; 0x84
 8004892:	021b      	lsls	r3, r3, #8
 8004894:	400b      	ands	r3, r1
 8004896:	431a      	orrs	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	2102      	movs	r1, #2
 800489e:	400b      	ands	r3, r1
 80048a0:	431a      	orrs	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	2101      	movs	r1, #1
 80048a8:	400b      	ands	r3, r1
 80048aa:	431a      	orrs	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6999      	ldr	r1, [r3, #24]
 80048b0:	2380      	movs	r3, #128	; 0x80
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	400b      	ands	r3, r1
 80048b6:	431a      	orrs	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	69db      	ldr	r3, [r3, #28]
 80048bc:	2138      	movs	r1, #56	; 0x38
 80048be:	400b      	ands	r3, r1
 80048c0:	431a      	orrs	r2, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	2180      	movs	r1, #128	; 0x80
 80048c8:	400b      	ands	r3, r1
 80048ca:	431a      	orrs	r2, r3
 80048cc:	0011      	movs	r1, r2
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048d2:	2380      	movs	r3, #128	; 0x80
 80048d4:	019b      	lsls	r3, r3, #6
 80048d6:	401a      	ands	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	430a      	orrs	r2, r1
 80048de:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	0c1b      	lsrs	r3, r3, #16
 80048e6:	2204      	movs	r2, #4
 80048e8:	401a      	ands	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ee:	2110      	movs	r1, #16
 80048f0:	400b      	ands	r3, r1
 80048f2:	431a      	orrs	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048f8:	2108      	movs	r1, #8
 80048fa:	400b      	ands	r3, r1
 80048fc:	431a      	orrs	r2, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	68d9      	ldr	r1, [r3, #12]
 8004902:	23f0      	movs	r3, #240	; 0xf0
 8004904:	011b      	lsls	r3, r3, #4
 8004906:	400b      	ands	r3, r1
 8004908:	431a      	orrs	r2, r3
 800490a:	0011      	movs	r1, r2
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	2380      	movs	r3, #128	; 0x80
 8004910:	015b      	lsls	r3, r3, #5
 8004912:	401a      	ands	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	430a      	orrs	r2, r1
 800491a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	69da      	ldr	r2, [r3, #28]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4907      	ldr	r1, [pc, #28]	; (8004944 <HAL_SPI_Init+0x16c>)
 8004928:	400a      	ands	r2, r1
 800492a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	225d      	movs	r2, #93	; 0x5d
 8004936:	2101      	movs	r1, #1
 8004938:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	0018      	movs	r0, r3
 800493e:	46bd      	mov	sp, r7
 8004940:	b004      	add	sp, #16
 8004942:	bd80      	pop	{r7, pc}
 8004944:	fffff7ff 	.word	0xfffff7ff

08004948 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b088      	sub	sp, #32
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	603b      	str	r3, [r7, #0]
 8004954:	1dbb      	adds	r3, r7, #6
 8004956:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004958:	231f      	movs	r3, #31
 800495a:	18fb      	adds	r3, r7, r3
 800495c:	2200      	movs	r2, #0
 800495e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	225c      	movs	r2, #92	; 0x5c
 8004964:	5c9b      	ldrb	r3, [r3, r2]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d101      	bne.n	800496e <HAL_SPI_Transmit+0x26>
 800496a:	2302      	movs	r3, #2
 800496c:	e140      	b.n	8004bf0 <HAL_SPI_Transmit+0x2a8>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	225c      	movs	r2, #92	; 0x5c
 8004972:	2101      	movs	r1, #1
 8004974:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004976:	f7fd fb3b 	bl	8001ff0 <HAL_GetTick>
 800497a:	0003      	movs	r3, r0
 800497c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800497e:	2316      	movs	r3, #22
 8004980:	18fb      	adds	r3, r7, r3
 8004982:	1dba      	adds	r2, r7, #6
 8004984:	8812      	ldrh	r2, [r2, #0]
 8004986:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	225d      	movs	r2, #93	; 0x5d
 800498c:	5c9b      	ldrb	r3, [r3, r2]
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b01      	cmp	r3, #1
 8004992:	d004      	beq.n	800499e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8004994:	231f      	movs	r3, #31
 8004996:	18fb      	adds	r3, r7, r3
 8004998:	2202      	movs	r2, #2
 800499a:	701a      	strb	r2, [r3, #0]
    goto error;
 800499c:	e11d      	b.n	8004bda <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d003      	beq.n	80049ac <HAL_SPI_Transmit+0x64>
 80049a4:	1dbb      	adds	r3, r7, #6
 80049a6:	881b      	ldrh	r3, [r3, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d104      	bne.n	80049b6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80049ac:	231f      	movs	r3, #31
 80049ae:	18fb      	adds	r3, r7, r3
 80049b0:	2201      	movs	r2, #1
 80049b2:	701a      	strb	r2, [r3, #0]
    goto error;
 80049b4:	e111      	b.n	8004bda <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	225d      	movs	r2, #93	; 0x5d
 80049ba:	2103      	movs	r1, #3
 80049bc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	68ba      	ldr	r2, [r7, #8]
 80049c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	1dba      	adds	r2, r7, #6
 80049ce:	8812      	ldrh	r2, [r2, #0]
 80049d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	1dba      	adds	r2, r7, #6
 80049d6:	8812      	ldrh	r2, [r2, #0]
 80049d8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2244      	movs	r2, #68	; 0x44
 80049e4:	2100      	movs	r1, #0
 80049e6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2246      	movs	r2, #70	; 0x46
 80049ec:	2100      	movs	r1, #0
 80049ee:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	689a      	ldr	r2, [r3, #8]
 8004a00:	2380      	movs	r3, #128	; 0x80
 8004a02:	021b      	lsls	r3, r3, #8
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d110      	bne.n	8004a2a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2140      	movs	r1, #64	; 0x40
 8004a14:	438a      	bics	r2, r1
 8004a16:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2180      	movs	r1, #128	; 0x80
 8004a24:	01c9      	lsls	r1, r1, #7
 8004a26:	430a      	orrs	r2, r1
 8004a28:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2240      	movs	r2, #64	; 0x40
 8004a32:	4013      	ands	r3, r2
 8004a34:	2b40      	cmp	r3, #64	; 0x40
 8004a36:	d007      	beq.n	8004a48 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2140      	movs	r1, #64	; 0x40
 8004a44:	430a      	orrs	r2, r1
 8004a46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	68da      	ldr	r2, [r3, #12]
 8004a4c:	23e0      	movs	r3, #224	; 0xe0
 8004a4e:	00db      	lsls	r3, r3, #3
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d94e      	bls.n	8004af2 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d004      	beq.n	8004a66 <HAL_SPI_Transmit+0x11e>
 8004a5c:	2316      	movs	r3, #22
 8004a5e:	18fb      	adds	r3, r7, r3
 8004a60:	881b      	ldrh	r3, [r3, #0]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d13f      	bne.n	8004ae6 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6a:	881a      	ldrh	r2, [r3, #0]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a76:	1c9a      	adds	r2, r3, #2
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	3b01      	subs	r3, #1
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a8a:	e02c      	b.n	8004ae6 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	2202      	movs	r2, #2
 8004a94:	4013      	ands	r3, r2
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d112      	bne.n	8004ac0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9e:	881a      	ldrh	r2, [r3, #0]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aaa:	1c9a      	adds	r2, r3, #2
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	b29a      	uxth	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004abe:	e012      	b.n	8004ae6 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ac0:	f7fd fa96 	bl	8001ff0 <HAL_GetTick>
 8004ac4:	0002      	movs	r2, r0
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d802      	bhi.n	8004ad6 <HAL_SPI_Transmit+0x18e>
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	d102      	bne.n	8004adc <HAL_SPI_Transmit+0x194>
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d104      	bne.n	8004ae6 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8004adc:	231f      	movs	r3, #31
 8004ade:	18fb      	adds	r3, r7, r3
 8004ae0:	2203      	movs	r2, #3
 8004ae2:	701a      	strb	r2, [r3, #0]
          goto error;
 8004ae4:	e079      	b.n	8004bda <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1cd      	bne.n	8004a8c <HAL_SPI_Transmit+0x144>
 8004af0:	e04f      	b.n	8004b92 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d004      	beq.n	8004b04 <HAL_SPI_Transmit+0x1bc>
 8004afa:	2316      	movs	r3, #22
 8004afc:	18fb      	adds	r3, r7, r3
 8004afe:	881b      	ldrh	r3, [r3, #0]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d141      	bne.n	8004b88 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	330c      	adds	r3, #12
 8004b0e:	7812      	ldrb	r2, [r2, #0]
 8004b10:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b16:	1c5a      	adds	r2, r3, #1
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	3b01      	subs	r3, #1
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8004b2a:	e02d      	b.n	8004b88 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	2202      	movs	r2, #2
 8004b34:	4013      	ands	r3, r2
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d113      	bne.n	8004b62 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	330c      	adds	r3, #12
 8004b44:	7812      	ldrb	r2, [r2, #0]
 8004b46:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4c:	1c5a      	adds	r2, r3, #1
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	b29a      	uxth	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b60:	e012      	b.n	8004b88 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b62:	f7fd fa45 	bl	8001ff0 <HAL_GetTick>
 8004b66:	0002      	movs	r2, r0
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	683a      	ldr	r2, [r7, #0]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d802      	bhi.n	8004b78 <HAL_SPI_Transmit+0x230>
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	3301      	adds	r3, #1
 8004b76:	d102      	bne.n	8004b7e <HAL_SPI_Transmit+0x236>
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d104      	bne.n	8004b88 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8004b7e:	231f      	movs	r3, #31
 8004b80:	18fb      	adds	r3, r7, r3
 8004b82:	2203      	movs	r2, #3
 8004b84:	701a      	strb	r2, [r3, #0]
          goto error;
 8004b86:	e028      	b.n	8004bda <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1cc      	bne.n	8004b2c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b92:	69ba      	ldr	r2, [r7, #24]
 8004b94:	6839      	ldr	r1, [r7, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	0018      	movs	r0, r3
 8004b9a:	f000 f95d 	bl	8004e58 <SPI_EndRxTxTransaction>
 8004b9e:	1e03      	subs	r3, r0, #0
 8004ba0:	d002      	beq.n	8004ba8 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2220      	movs	r2, #32
 8004ba6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10a      	bne.n	8004bc6 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	613b      	str	r3, [r7, #16]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	613b      	str	r3, [r7, #16]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	613b      	str	r3, [r7, #16]
 8004bc4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d004      	beq.n	8004bd8 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8004bce:	231f      	movs	r3, #31
 8004bd0:	18fb      	adds	r3, r7, r3
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	701a      	strb	r2, [r3, #0]
 8004bd6:	e000      	b.n	8004bda <HAL_SPI_Transmit+0x292>
  }

error:
 8004bd8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	225d      	movs	r2, #93	; 0x5d
 8004bde:	2101      	movs	r1, #1
 8004be0:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	225c      	movs	r2, #92	; 0x5c
 8004be6:	2100      	movs	r1, #0
 8004be8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004bea:	231f      	movs	r3, #31
 8004bec:	18fb      	adds	r3, r7, r3
 8004bee:	781b      	ldrb	r3, [r3, #0]
}
 8004bf0:	0018      	movs	r0, r3
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	b008      	add	sp, #32
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b088      	sub	sp, #32
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	603b      	str	r3, [r7, #0]
 8004c04:	1dfb      	adds	r3, r7, #7
 8004c06:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004c08:	f7fd f9f2 	bl	8001ff0 <HAL_GetTick>
 8004c0c:	0002      	movs	r2, r0
 8004c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c10:	1a9b      	subs	r3, r3, r2
 8004c12:	683a      	ldr	r2, [r7, #0]
 8004c14:	18d3      	adds	r3, r2, r3
 8004c16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004c18:	f7fd f9ea 	bl	8001ff0 <HAL_GetTick>
 8004c1c:	0003      	movs	r3, r0
 8004c1e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004c20:	4b3a      	ldr	r3, [pc, #232]	; (8004d0c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	015b      	lsls	r3, r3, #5
 8004c26:	0d1b      	lsrs	r3, r3, #20
 8004c28:	69fa      	ldr	r2, [r7, #28]
 8004c2a:	4353      	muls	r3, r2
 8004c2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c2e:	e058      	b.n	8004ce2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	3301      	adds	r3, #1
 8004c34:	d055      	beq.n	8004ce2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c36:	f7fd f9db 	bl	8001ff0 <HAL_GetTick>
 8004c3a:	0002      	movs	r2, r0
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	69fa      	ldr	r2, [r7, #28]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d902      	bls.n	8004c4c <SPI_WaitFlagStateUntilTimeout+0x54>
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d142      	bne.n	8004cd2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	21e0      	movs	r1, #224	; 0xe0
 8004c58:	438a      	bics	r2, r1
 8004c5a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	685a      	ldr	r2, [r3, #4]
 8004c60:	2382      	movs	r3, #130	; 0x82
 8004c62:	005b      	lsls	r3, r3, #1
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d113      	bne.n	8004c90 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	689a      	ldr	r2, [r3, #8]
 8004c6c:	2380      	movs	r3, #128	; 0x80
 8004c6e:	021b      	lsls	r3, r3, #8
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d005      	beq.n	8004c80 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	689a      	ldr	r2, [r3, #8]
 8004c78:	2380      	movs	r3, #128	; 0x80
 8004c7a:	00db      	lsls	r3, r3, #3
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d107      	bne.n	8004c90 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2140      	movs	r1, #64	; 0x40
 8004c8c:	438a      	bics	r2, r1
 8004c8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c94:	2380      	movs	r3, #128	; 0x80
 8004c96:	019b      	lsls	r3, r3, #6
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d110      	bne.n	8004cbe <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	491a      	ldr	r1, [pc, #104]	; (8004d10 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004ca8:	400a      	ands	r2, r1
 8004caa:	601a      	str	r2, [r3, #0]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2180      	movs	r1, #128	; 0x80
 8004cb8:	0189      	lsls	r1, r1, #6
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	225d      	movs	r2, #93	; 0x5d
 8004cc2:	2101      	movs	r1, #1
 8004cc4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	225c      	movs	r2, #92	; 0x5c
 8004cca:	2100      	movs	r1, #0
 8004ccc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e017      	b.n	8004d02 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d101      	bne.n	8004cdc <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	4013      	ands	r3, r2
 8004cec:	68ba      	ldr	r2, [r7, #8]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	425a      	negs	r2, r3
 8004cf2:	4153      	adcs	r3, r2
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	001a      	movs	r2, r3
 8004cf8:	1dfb      	adds	r3, r7, #7
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d197      	bne.n	8004c30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	0018      	movs	r0, r3
 8004d04:	46bd      	mov	sp, r7
 8004d06:	b008      	add	sp, #32
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	46c0      	nop			; (mov r8, r8)
 8004d0c:	20000028 	.word	0x20000028
 8004d10:	ffffdfff 	.word	0xffffdfff

08004d14 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b08a      	sub	sp, #40	; 0x28
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]
 8004d20:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004d22:	2317      	movs	r3, #23
 8004d24:	18fb      	adds	r3, r7, r3
 8004d26:	2200      	movs	r2, #0
 8004d28:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004d2a:	f7fd f961 	bl	8001ff0 <HAL_GetTick>
 8004d2e:	0002      	movs	r2, r0
 8004d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d32:	1a9b      	subs	r3, r3, r2
 8004d34:	683a      	ldr	r2, [r7, #0]
 8004d36:	18d3      	adds	r3, r2, r3
 8004d38:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004d3a:	f7fd f959 	bl	8001ff0 <HAL_GetTick>
 8004d3e:	0003      	movs	r3, r0
 8004d40:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	330c      	adds	r3, #12
 8004d48:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004d4a:	4b41      	ldr	r3, [pc, #260]	; (8004e50 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	0013      	movs	r3, r2
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	189b      	adds	r3, r3, r2
 8004d54:	00da      	lsls	r2, r3, #3
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	0d1b      	lsrs	r3, r3, #20
 8004d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d5c:	4353      	muls	r3, r2
 8004d5e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004d60:	e068      	b.n	8004e34 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004d62:	68ba      	ldr	r2, [r7, #8]
 8004d64:	23c0      	movs	r3, #192	; 0xc0
 8004d66:	00db      	lsls	r3, r3, #3
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d10a      	bne.n	8004d82 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d107      	bne.n	8004d82 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	b2da      	uxtb	r2, r3
 8004d78:	2117      	movs	r1, #23
 8004d7a:	187b      	adds	r3, r7, r1
 8004d7c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004d7e:	187b      	adds	r3, r7, r1
 8004d80:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	3301      	adds	r3, #1
 8004d86:	d055      	beq.n	8004e34 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d88:	f7fd f932 	bl	8001ff0 <HAL_GetTick>
 8004d8c:	0002      	movs	r2, r0
 8004d8e:	6a3b      	ldr	r3, [r7, #32]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d902      	bls.n	8004d9e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d142      	bne.n	8004e24 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	685a      	ldr	r2, [r3, #4]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	21e0      	movs	r1, #224	; 0xe0
 8004daa:	438a      	bics	r2, r1
 8004dac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	685a      	ldr	r2, [r3, #4]
 8004db2:	2382      	movs	r3, #130	; 0x82
 8004db4:	005b      	lsls	r3, r3, #1
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d113      	bne.n	8004de2 <SPI_WaitFifoStateUntilTimeout+0xce>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	689a      	ldr	r2, [r3, #8]
 8004dbe:	2380      	movs	r3, #128	; 0x80
 8004dc0:	021b      	lsls	r3, r3, #8
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d005      	beq.n	8004dd2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	689a      	ldr	r2, [r3, #8]
 8004dca:	2380      	movs	r3, #128	; 0x80
 8004dcc:	00db      	lsls	r3, r3, #3
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d107      	bne.n	8004de2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2140      	movs	r1, #64	; 0x40
 8004dde:	438a      	bics	r2, r1
 8004de0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004de6:	2380      	movs	r3, #128	; 0x80
 8004de8:	019b      	lsls	r3, r3, #6
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d110      	bne.n	8004e10 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4916      	ldr	r1, [pc, #88]	; (8004e54 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004dfa:	400a      	ands	r2, r1
 8004dfc:	601a      	str	r2, [r3, #0]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2180      	movs	r1, #128	; 0x80
 8004e0a:	0189      	lsls	r1, r1, #6
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	225d      	movs	r2, #93	; 0x5d
 8004e14:	2101      	movs	r1, #1
 8004e16:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	225c      	movs	r2, #92	; 0x5c
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e010      	b.n	8004e46 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	3b01      	subs	r3, #1
 8004e32:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	68ba      	ldr	r2, [r7, #8]
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d18e      	bne.n	8004d62 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	0018      	movs	r0, r3
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	b00a      	add	sp, #40	; 0x28
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	46c0      	nop			; (mov r8, r8)
 8004e50:	20000028 	.word	0x20000028
 8004e54:	ffffdfff 	.word	0xffffdfff

08004e58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af02      	add	r7, sp, #8
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e64:	68ba      	ldr	r2, [r7, #8]
 8004e66:	23c0      	movs	r3, #192	; 0xc0
 8004e68:	0159      	lsls	r1, r3, #5
 8004e6a:	68f8      	ldr	r0, [r7, #12]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	9300      	str	r3, [sp, #0]
 8004e70:	0013      	movs	r3, r2
 8004e72:	2200      	movs	r2, #0
 8004e74:	f7ff ff4e 	bl	8004d14 <SPI_WaitFifoStateUntilTimeout>
 8004e78:	1e03      	subs	r3, r0, #0
 8004e7a:	d007      	beq.n	8004e8c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e80:	2220      	movs	r2, #32
 8004e82:	431a      	orrs	r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e027      	b.n	8004edc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e8c:	68ba      	ldr	r2, [r7, #8]
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	9300      	str	r3, [sp, #0]
 8004e94:	0013      	movs	r3, r2
 8004e96:	2200      	movs	r2, #0
 8004e98:	2180      	movs	r1, #128	; 0x80
 8004e9a:	f7ff fead 	bl	8004bf8 <SPI_WaitFlagStateUntilTimeout>
 8004e9e:	1e03      	subs	r3, r0, #0
 8004ea0:	d007      	beq.n	8004eb2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ea6:	2220      	movs	r2, #32
 8004ea8:	431a      	orrs	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e014      	b.n	8004edc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004eb2:	68ba      	ldr	r2, [r7, #8]
 8004eb4:	23c0      	movs	r3, #192	; 0xc0
 8004eb6:	00d9      	lsls	r1, r3, #3
 8004eb8:	68f8      	ldr	r0, [r7, #12]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	9300      	str	r3, [sp, #0]
 8004ebe:	0013      	movs	r3, r2
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f7ff ff27 	bl	8004d14 <SPI_WaitFifoStateUntilTimeout>
 8004ec6:	1e03      	subs	r3, r0, #0
 8004ec8:	d007      	beq.n	8004eda <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ece:	2220      	movs	r2, #32
 8004ed0:	431a      	orrs	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e000      	b.n	8004edc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	0018      	movs	r0, r3
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	b004      	add	sp, #16
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d101      	bne.n	8004ef6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e042      	b.n	8004f7c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	223d      	movs	r2, #61	; 0x3d
 8004efa:	5c9b      	ldrb	r3, [r3, r2]
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d107      	bne.n	8004f12 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	223c      	movs	r2, #60	; 0x3c
 8004f06:	2100      	movs	r1, #0
 8004f08:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	0018      	movs	r0, r3
 8004f0e:	f7fc fe4d 	bl	8001bac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	223d      	movs	r2, #61	; 0x3d
 8004f16:	2102      	movs	r1, #2
 8004f18:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	3304      	adds	r3, #4
 8004f22:	0019      	movs	r1, r3
 8004f24:	0010      	movs	r0, r2
 8004f26:	f000 fd19 	bl	800595c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2246      	movs	r2, #70	; 0x46
 8004f2e:	2101      	movs	r1, #1
 8004f30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	223e      	movs	r2, #62	; 0x3e
 8004f36:	2101      	movs	r1, #1
 8004f38:	5499      	strb	r1, [r3, r2]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	223f      	movs	r2, #63	; 0x3f
 8004f3e:	2101      	movs	r1, #1
 8004f40:	5499      	strb	r1, [r3, r2]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2240      	movs	r2, #64	; 0x40
 8004f46:	2101      	movs	r1, #1
 8004f48:	5499      	strb	r1, [r3, r2]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2241      	movs	r2, #65	; 0x41
 8004f4e:	2101      	movs	r1, #1
 8004f50:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2242      	movs	r2, #66	; 0x42
 8004f56:	2101      	movs	r1, #1
 8004f58:	5499      	strb	r1, [r3, r2]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2243      	movs	r2, #67	; 0x43
 8004f5e:	2101      	movs	r1, #1
 8004f60:	5499      	strb	r1, [r3, r2]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2244      	movs	r2, #68	; 0x44
 8004f66:	2101      	movs	r1, #1
 8004f68:	5499      	strb	r1, [r3, r2]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2245      	movs	r2, #69	; 0x45
 8004f6e:	2101      	movs	r1, #1
 8004f70:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	223d      	movs	r2, #61	; 0x3d
 8004f76:	2101      	movs	r1, #1
 8004f78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	0018      	movs	r0, r3
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	b002      	add	sp, #8
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f8e:	230f      	movs	r3, #15
 8004f90:	18fb      	adds	r3, r7, r3
 8004f92:	2200      	movs	r2, #0
 8004f94:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d108      	bne.n	8004fae <HAL_TIM_OC_Start_IT+0x2a>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	223e      	movs	r2, #62	; 0x3e
 8004fa0:	5c9b      	ldrb	r3, [r3, r2]
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	1e5a      	subs	r2, r3, #1
 8004fa8:	4193      	sbcs	r3, r2
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	e01f      	b.n	8004fee <HAL_TIM_OC_Start_IT+0x6a>
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	2b04      	cmp	r3, #4
 8004fb2:	d108      	bne.n	8004fc6 <HAL_TIM_OC_Start_IT+0x42>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	223f      	movs	r2, #63	; 0x3f
 8004fb8:	5c9b      	ldrb	r3, [r3, r2]
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	1e5a      	subs	r2, r3, #1
 8004fc0:	4193      	sbcs	r3, r2
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	e013      	b.n	8004fee <HAL_TIM_OC_Start_IT+0x6a>
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	2b08      	cmp	r3, #8
 8004fca:	d108      	bne.n	8004fde <HAL_TIM_OC_Start_IT+0x5a>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2240      	movs	r2, #64	; 0x40
 8004fd0:	5c9b      	ldrb	r3, [r3, r2]
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	1e5a      	subs	r2, r3, #1
 8004fd8:	4193      	sbcs	r3, r2
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	e007      	b.n	8004fee <HAL_TIM_OC_Start_IT+0x6a>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2241      	movs	r2, #65	; 0x41
 8004fe2:	5c9b      	ldrb	r3, [r3, r2]
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	1e5a      	subs	r2, r3, #1
 8004fea:	4193      	sbcs	r3, r2
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d001      	beq.n	8004ff6 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e0b7      	b.n	8005166 <HAL_TIM_OC_Start_IT+0x1e2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d104      	bne.n	8005006 <HAL_TIM_OC_Start_IT+0x82>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	223e      	movs	r2, #62	; 0x3e
 8005000:	2102      	movs	r1, #2
 8005002:	5499      	strb	r1, [r3, r2]
 8005004:	e013      	b.n	800502e <HAL_TIM_OC_Start_IT+0xaa>
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	2b04      	cmp	r3, #4
 800500a:	d104      	bne.n	8005016 <HAL_TIM_OC_Start_IT+0x92>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	223f      	movs	r2, #63	; 0x3f
 8005010:	2102      	movs	r1, #2
 8005012:	5499      	strb	r1, [r3, r2]
 8005014:	e00b      	b.n	800502e <HAL_TIM_OC_Start_IT+0xaa>
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	2b08      	cmp	r3, #8
 800501a:	d104      	bne.n	8005026 <HAL_TIM_OC_Start_IT+0xa2>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2240      	movs	r2, #64	; 0x40
 8005020:	2102      	movs	r1, #2
 8005022:	5499      	strb	r1, [r3, r2]
 8005024:	e003      	b.n	800502e <HAL_TIM_OC_Start_IT+0xaa>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2241      	movs	r2, #65	; 0x41
 800502a:	2102      	movs	r1, #2
 800502c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	2b0c      	cmp	r3, #12
 8005032:	d02a      	beq.n	800508a <HAL_TIM_OC_Start_IT+0x106>
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	2b0c      	cmp	r3, #12
 8005038:	d830      	bhi.n	800509c <HAL_TIM_OC_Start_IT+0x118>
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	2b08      	cmp	r3, #8
 800503e:	d01b      	beq.n	8005078 <HAL_TIM_OC_Start_IT+0xf4>
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	2b08      	cmp	r3, #8
 8005044:	d82a      	bhi.n	800509c <HAL_TIM_OC_Start_IT+0x118>
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d003      	beq.n	8005054 <HAL_TIM_OC_Start_IT+0xd0>
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	2b04      	cmp	r3, #4
 8005050:	d009      	beq.n	8005066 <HAL_TIM_OC_Start_IT+0xe2>
 8005052:	e023      	b.n	800509c <HAL_TIM_OC_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68da      	ldr	r2, [r3, #12]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2102      	movs	r1, #2
 8005060:	430a      	orrs	r2, r1
 8005062:	60da      	str	r2, [r3, #12]
      break;
 8005064:	e01f      	b.n	80050a6 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68da      	ldr	r2, [r3, #12]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2104      	movs	r1, #4
 8005072:	430a      	orrs	r2, r1
 8005074:	60da      	str	r2, [r3, #12]
      break;
 8005076:	e016      	b.n	80050a6 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68da      	ldr	r2, [r3, #12]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2108      	movs	r1, #8
 8005084:	430a      	orrs	r2, r1
 8005086:	60da      	str	r2, [r3, #12]
      break;
 8005088:	e00d      	b.n	80050a6 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68da      	ldr	r2, [r3, #12]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2110      	movs	r1, #16
 8005096:	430a      	orrs	r2, r1
 8005098:	60da      	str	r2, [r3, #12]
      break;
 800509a:	e004      	b.n	80050a6 <HAL_TIM_OC_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 800509c:	230f      	movs	r3, #15
 800509e:	18fb      	adds	r3, r7, r3
 80050a0:	2201      	movs	r2, #1
 80050a2:	701a      	strb	r2, [r3, #0]
      break;
 80050a4:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 80050a6:	230f      	movs	r3, #15
 80050a8:	18fb      	adds	r3, r7, r3
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d157      	bne.n	8005160 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6839      	ldr	r1, [r7, #0]
 80050b6:	2201      	movs	r2, #1
 80050b8:	0018      	movs	r0, r3
 80050ba:	f000 ff65 	bl	8005f88 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a2b      	ldr	r2, [pc, #172]	; (8005170 <HAL_TIM_OC_Start_IT+0x1ec>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d00e      	beq.n	80050e6 <HAL_TIM_OC_Start_IT+0x162>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a29      	ldr	r2, [pc, #164]	; (8005174 <HAL_TIM_OC_Start_IT+0x1f0>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d009      	beq.n	80050e6 <HAL_TIM_OC_Start_IT+0x162>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a28      	ldr	r2, [pc, #160]	; (8005178 <HAL_TIM_OC_Start_IT+0x1f4>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d004      	beq.n	80050e6 <HAL_TIM_OC_Start_IT+0x162>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a26      	ldr	r2, [pc, #152]	; (800517c <HAL_TIM_OC_Start_IT+0x1f8>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d101      	bne.n	80050ea <HAL_TIM_OC_Start_IT+0x166>
 80050e6:	2301      	movs	r3, #1
 80050e8:	e000      	b.n	80050ec <HAL_TIM_OC_Start_IT+0x168>
 80050ea:	2300      	movs	r3, #0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d008      	beq.n	8005102 <HAL_TIM_OC_Start_IT+0x17e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2180      	movs	r1, #128	; 0x80
 80050fc:	0209      	lsls	r1, r1, #8
 80050fe:	430a      	orrs	r2, r1
 8005100:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a1a      	ldr	r2, [pc, #104]	; (8005170 <HAL_TIM_OC_Start_IT+0x1ec>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d00f      	beq.n	800512c <HAL_TIM_OC_Start_IT+0x1a8>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	2380      	movs	r3, #128	; 0x80
 8005112:	05db      	lsls	r3, r3, #23
 8005114:	429a      	cmp	r2, r3
 8005116:	d009      	beq.n	800512c <HAL_TIM_OC_Start_IT+0x1a8>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a18      	ldr	r2, [pc, #96]	; (8005180 <HAL_TIM_OC_Start_IT+0x1fc>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d004      	beq.n	800512c <HAL_TIM_OC_Start_IT+0x1a8>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a13      	ldr	r2, [pc, #76]	; (8005174 <HAL_TIM_OC_Start_IT+0x1f0>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d111      	bne.n	8005150 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	2207      	movs	r2, #7
 8005134:	4013      	ands	r3, r2
 8005136:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	2b06      	cmp	r3, #6
 800513c:	d010      	beq.n	8005160 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2101      	movs	r1, #1
 800514a:	430a      	orrs	r2, r1
 800514c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800514e:	e007      	b.n	8005160 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2101      	movs	r1, #1
 800515c:	430a      	orrs	r2, r1
 800515e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005160:	230f      	movs	r3, #15
 8005162:	18fb      	adds	r3, r7, r3
 8005164:	781b      	ldrb	r3, [r3, #0]
}
 8005166:	0018      	movs	r0, r3
 8005168:	46bd      	mov	sp, r7
 800516a:	b004      	add	sp, #16
 800516c:	bd80      	pop	{r7, pc}
 800516e:	46c0      	nop			; (mov r8, r8)
 8005170:	40012c00 	.word	0x40012c00
 8005174:	40014000 	.word	0x40014000
 8005178:	40014400 	.word	0x40014400
 800517c:	40014800 	.word	0x40014800
 8005180:	40000400 	.word	0x40000400

08005184 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800518e:	230f      	movs	r3, #15
 8005190:	18fb      	adds	r3, r7, r3
 8005192:	2200      	movs	r2, #0
 8005194:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	2b0c      	cmp	r3, #12
 800519a:	d02a      	beq.n	80051f2 <HAL_TIM_OC_Stop_IT+0x6e>
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	2b0c      	cmp	r3, #12
 80051a0:	d830      	bhi.n	8005204 <HAL_TIM_OC_Stop_IT+0x80>
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	2b08      	cmp	r3, #8
 80051a6:	d01b      	beq.n	80051e0 <HAL_TIM_OC_Stop_IT+0x5c>
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	2b08      	cmp	r3, #8
 80051ac:	d82a      	bhi.n	8005204 <HAL_TIM_OC_Stop_IT+0x80>
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d003      	beq.n	80051bc <HAL_TIM_OC_Stop_IT+0x38>
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	2b04      	cmp	r3, #4
 80051b8:	d009      	beq.n	80051ce <HAL_TIM_OC_Stop_IT+0x4a>
 80051ba:	e023      	b.n	8005204 <HAL_TIM_OC_Stop_IT+0x80>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68da      	ldr	r2, [r3, #12]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2102      	movs	r1, #2
 80051c8:	438a      	bics	r2, r1
 80051ca:	60da      	str	r2, [r3, #12]
      break;
 80051cc:	e01f      	b.n	800520e <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68da      	ldr	r2, [r3, #12]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2104      	movs	r1, #4
 80051da:	438a      	bics	r2, r1
 80051dc:	60da      	str	r2, [r3, #12]
      break;
 80051de:	e016      	b.n	800520e <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68da      	ldr	r2, [r3, #12]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2108      	movs	r1, #8
 80051ec:	438a      	bics	r2, r1
 80051ee:	60da      	str	r2, [r3, #12]
      break;
 80051f0:	e00d      	b.n	800520e <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68da      	ldr	r2, [r3, #12]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2110      	movs	r1, #16
 80051fe:	438a      	bics	r2, r1
 8005200:	60da      	str	r2, [r3, #12]
      break;
 8005202:	e004      	b.n	800520e <HAL_TIM_OC_Stop_IT+0x8a>
    }

    default:
      status = HAL_ERROR;
 8005204:	230f      	movs	r3, #15
 8005206:	18fb      	adds	r3, r7, r3
 8005208:	2201      	movs	r2, #1
 800520a:	701a      	strb	r2, [r3, #0]
      break;
 800520c:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 800520e:	230f      	movs	r3, #15
 8005210:	18fb      	adds	r3, r7, r3
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d000      	beq.n	800521a <HAL_TIM_OC_Stop_IT+0x96>
 8005218:	e063      	b.n	80052e2 <HAL_TIM_OC_Stop_IT+0x15e>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	6839      	ldr	r1, [r7, #0]
 8005220:	2200      	movs	r2, #0
 8005222:	0018      	movs	r0, r3
 8005224:	f000 feb0 	bl	8005f88 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a30      	ldr	r2, [pc, #192]	; (80052f0 <HAL_TIM_OC_Stop_IT+0x16c>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d00e      	beq.n	8005250 <HAL_TIM_OC_Stop_IT+0xcc>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a2f      	ldr	r2, [pc, #188]	; (80052f4 <HAL_TIM_OC_Stop_IT+0x170>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d009      	beq.n	8005250 <HAL_TIM_OC_Stop_IT+0xcc>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a2d      	ldr	r2, [pc, #180]	; (80052f8 <HAL_TIM_OC_Stop_IT+0x174>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d004      	beq.n	8005250 <HAL_TIM_OC_Stop_IT+0xcc>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a2c      	ldr	r2, [pc, #176]	; (80052fc <HAL_TIM_OC_Stop_IT+0x178>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d101      	bne.n	8005254 <HAL_TIM_OC_Stop_IT+0xd0>
 8005250:	2301      	movs	r3, #1
 8005252:	e000      	b.n	8005256 <HAL_TIM_OC_Stop_IT+0xd2>
 8005254:	2300      	movs	r3, #0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d013      	beq.n	8005282 <HAL_TIM_OC_Stop_IT+0xfe>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	6a1b      	ldr	r3, [r3, #32]
 8005260:	4a27      	ldr	r2, [pc, #156]	; (8005300 <HAL_TIM_OC_Stop_IT+0x17c>)
 8005262:	4013      	ands	r3, r2
 8005264:	d10d      	bne.n	8005282 <HAL_TIM_OC_Stop_IT+0xfe>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	6a1b      	ldr	r3, [r3, #32]
 800526c:	4a25      	ldr	r2, [pc, #148]	; (8005304 <HAL_TIM_OC_Stop_IT+0x180>)
 800526e:	4013      	ands	r3, r2
 8005270:	d107      	bne.n	8005282 <HAL_TIM_OC_Stop_IT+0xfe>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4922      	ldr	r1, [pc, #136]	; (8005308 <HAL_TIM_OC_Stop_IT+0x184>)
 800527e:	400a      	ands	r2, r1
 8005280:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	6a1b      	ldr	r3, [r3, #32]
 8005288:	4a1d      	ldr	r2, [pc, #116]	; (8005300 <HAL_TIM_OC_Stop_IT+0x17c>)
 800528a:	4013      	ands	r3, r2
 800528c:	d10d      	bne.n	80052aa <HAL_TIM_OC_Stop_IT+0x126>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	6a1b      	ldr	r3, [r3, #32]
 8005294:	4a1b      	ldr	r2, [pc, #108]	; (8005304 <HAL_TIM_OC_Stop_IT+0x180>)
 8005296:	4013      	ands	r3, r2
 8005298:	d107      	bne.n	80052aa <HAL_TIM_OC_Stop_IT+0x126>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2101      	movs	r1, #1
 80052a6:	438a      	bics	r2, r1
 80052a8:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d104      	bne.n	80052ba <HAL_TIM_OC_Stop_IT+0x136>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	223e      	movs	r2, #62	; 0x3e
 80052b4:	2101      	movs	r1, #1
 80052b6:	5499      	strb	r1, [r3, r2]
 80052b8:	e013      	b.n	80052e2 <HAL_TIM_OC_Stop_IT+0x15e>
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	2b04      	cmp	r3, #4
 80052be:	d104      	bne.n	80052ca <HAL_TIM_OC_Stop_IT+0x146>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	223f      	movs	r2, #63	; 0x3f
 80052c4:	2101      	movs	r1, #1
 80052c6:	5499      	strb	r1, [r3, r2]
 80052c8:	e00b      	b.n	80052e2 <HAL_TIM_OC_Stop_IT+0x15e>
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2b08      	cmp	r3, #8
 80052ce:	d104      	bne.n	80052da <HAL_TIM_OC_Stop_IT+0x156>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2240      	movs	r2, #64	; 0x40
 80052d4:	2101      	movs	r1, #1
 80052d6:	5499      	strb	r1, [r3, r2]
 80052d8:	e003      	b.n	80052e2 <HAL_TIM_OC_Stop_IT+0x15e>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2241      	movs	r2, #65	; 0x41
 80052de:	2101      	movs	r1, #1
 80052e0:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 80052e2:	230f      	movs	r3, #15
 80052e4:	18fb      	adds	r3, r7, r3
 80052e6:	781b      	ldrb	r3, [r3, #0]
}
 80052e8:	0018      	movs	r0, r3
 80052ea:	46bd      	mov	sp, r7
 80052ec:	b004      	add	sp, #16
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	40012c00 	.word	0x40012c00
 80052f4:	40014000 	.word	0x40014000
 80052f8:	40014400 	.word	0x40014400
 80052fc:	40014800 	.word	0x40014800
 8005300:	00001111 	.word	0x00001111
 8005304:	00000444 	.word	0x00000444
 8005308:	ffff7fff 	.word	0xffff7fff

0800530c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d101      	bne.n	800531e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e042      	b.n	80053a4 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	223d      	movs	r2, #61	; 0x3d
 8005322:	5c9b      	ldrb	r3, [r3, r2]
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b00      	cmp	r3, #0
 8005328:	d107      	bne.n	800533a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	223c      	movs	r2, #60	; 0x3c
 800532e:	2100      	movs	r1, #0
 8005330:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	0018      	movs	r0, r3
 8005336:	f000 f839 	bl	80053ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	223d      	movs	r2, #61	; 0x3d
 800533e:	2102      	movs	r1, #2
 8005340:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	3304      	adds	r3, #4
 800534a:	0019      	movs	r1, r3
 800534c:	0010      	movs	r0, r2
 800534e:	f000 fb05 	bl	800595c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2246      	movs	r2, #70	; 0x46
 8005356:	2101      	movs	r1, #1
 8005358:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	223e      	movs	r2, #62	; 0x3e
 800535e:	2101      	movs	r1, #1
 8005360:	5499      	strb	r1, [r3, r2]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	223f      	movs	r2, #63	; 0x3f
 8005366:	2101      	movs	r1, #1
 8005368:	5499      	strb	r1, [r3, r2]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2240      	movs	r2, #64	; 0x40
 800536e:	2101      	movs	r1, #1
 8005370:	5499      	strb	r1, [r3, r2]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2241      	movs	r2, #65	; 0x41
 8005376:	2101      	movs	r1, #1
 8005378:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2242      	movs	r2, #66	; 0x42
 800537e:	2101      	movs	r1, #1
 8005380:	5499      	strb	r1, [r3, r2]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2243      	movs	r2, #67	; 0x43
 8005386:	2101      	movs	r1, #1
 8005388:	5499      	strb	r1, [r3, r2]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2244      	movs	r2, #68	; 0x44
 800538e:	2101      	movs	r1, #1
 8005390:	5499      	strb	r1, [r3, r2]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2245      	movs	r2, #69	; 0x45
 8005396:	2101      	movs	r1, #1
 8005398:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	223d      	movs	r2, #61	; 0x3d
 800539e:	2101      	movs	r1, #1
 80053a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	0018      	movs	r0, r3
 80053a6:	46bd      	mov	sp, r7
 80053a8:	b002      	add	sp, #8
 80053aa:	bd80      	pop	{r7, pc}

080053ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80053b4:	46c0      	nop			; (mov r8, r8)
 80053b6:	46bd      	mov	sp, r7
 80053b8:	b002      	add	sp, #8
 80053ba:	bd80      	pop	{r7, pc}

080053bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	2202      	movs	r2, #2
 80053cc:	4013      	ands	r3, r2
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d124      	bne.n	800541c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	2202      	movs	r2, #2
 80053da:	4013      	ands	r3, r2
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d11d      	bne.n	800541c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2203      	movs	r2, #3
 80053e6:	4252      	negs	r2, r2
 80053e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2201      	movs	r2, #1
 80053ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	2203      	movs	r2, #3
 80053f8:	4013      	ands	r3, r2
 80053fa:	d004      	beq.n	8005406 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	0018      	movs	r0, r3
 8005400:	f000 fa94 	bl	800592c <HAL_TIM_IC_CaptureCallback>
 8005404:	e007      	b.n	8005416 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	0018      	movs	r0, r3
 800540a:	f7fb fa4b 	bl	80008a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	0018      	movs	r0, r3
 8005412:	f000 fa93 	bl	800593c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	2204      	movs	r2, #4
 8005424:	4013      	ands	r3, r2
 8005426:	2b04      	cmp	r3, #4
 8005428:	d125      	bne.n	8005476 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	2204      	movs	r2, #4
 8005432:	4013      	ands	r3, r2
 8005434:	2b04      	cmp	r3, #4
 8005436:	d11e      	bne.n	8005476 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2205      	movs	r2, #5
 800543e:	4252      	negs	r2, r2
 8005440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2202      	movs	r2, #2
 8005446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	699a      	ldr	r2, [r3, #24]
 800544e:	23c0      	movs	r3, #192	; 0xc0
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	4013      	ands	r3, r2
 8005454:	d004      	beq.n	8005460 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	0018      	movs	r0, r3
 800545a:	f000 fa67 	bl	800592c <HAL_TIM_IC_CaptureCallback>
 800545e:	e007      	b.n	8005470 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	0018      	movs	r0, r3
 8005464:	f7fb fa1e 	bl	80008a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	0018      	movs	r0, r3
 800546c:	f000 fa66 	bl	800593c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	2208      	movs	r2, #8
 800547e:	4013      	ands	r3, r2
 8005480:	2b08      	cmp	r3, #8
 8005482:	d124      	bne.n	80054ce <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	2208      	movs	r2, #8
 800548c:	4013      	ands	r3, r2
 800548e:	2b08      	cmp	r3, #8
 8005490:	d11d      	bne.n	80054ce <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2209      	movs	r2, #9
 8005498:	4252      	negs	r2, r2
 800549a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2204      	movs	r2, #4
 80054a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	69db      	ldr	r3, [r3, #28]
 80054a8:	2203      	movs	r2, #3
 80054aa:	4013      	ands	r3, r2
 80054ac:	d004      	beq.n	80054b8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	0018      	movs	r0, r3
 80054b2:	f000 fa3b 	bl	800592c <HAL_TIM_IC_CaptureCallback>
 80054b6:	e007      	b.n	80054c8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	0018      	movs	r0, r3
 80054bc:	f7fb f9f2 	bl	80008a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	0018      	movs	r0, r3
 80054c4:	f000 fa3a 	bl	800593c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	2210      	movs	r2, #16
 80054d6:	4013      	ands	r3, r2
 80054d8:	2b10      	cmp	r3, #16
 80054da:	d125      	bne.n	8005528 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	2210      	movs	r2, #16
 80054e4:	4013      	ands	r3, r2
 80054e6:	2b10      	cmp	r3, #16
 80054e8:	d11e      	bne.n	8005528 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2211      	movs	r2, #17
 80054f0:	4252      	negs	r2, r2
 80054f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2208      	movs	r2, #8
 80054f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	69da      	ldr	r2, [r3, #28]
 8005500:	23c0      	movs	r3, #192	; 0xc0
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	4013      	ands	r3, r2
 8005506:	d004      	beq.n	8005512 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	0018      	movs	r0, r3
 800550c:	f000 fa0e 	bl	800592c <HAL_TIM_IC_CaptureCallback>
 8005510:	e007      	b.n	8005522 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	0018      	movs	r0, r3
 8005516:	f7fb f9c5 	bl	80008a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	0018      	movs	r0, r3
 800551e:	f000 fa0d 	bl	800593c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	2201      	movs	r2, #1
 8005530:	4013      	ands	r3, r2
 8005532:	2b01      	cmp	r3, #1
 8005534:	d10f      	bne.n	8005556 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	2201      	movs	r2, #1
 800553e:	4013      	ands	r3, r2
 8005540:	2b01      	cmp	r3, #1
 8005542:	d108      	bne.n	8005556 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2202      	movs	r2, #2
 800554a:	4252      	negs	r2, r2
 800554c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	0018      	movs	r0, r3
 8005552:	f000 f9e3 	bl	800591c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	2280      	movs	r2, #128	; 0x80
 800555e:	4013      	ands	r3, r2
 8005560:	2b80      	cmp	r3, #128	; 0x80
 8005562:	d10f      	bne.n	8005584 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	2280      	movs	r2, #128	; 0x80
 800556c:	4013      	ands	r3, r2
 800556e:	2b80      	cmp	r3, #128	; 0x80
 8005570:	d108      	bne.n	8005584 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2281      	movs	r2, #129	; 0x81
 8005578:	4252      	negs	r2, r2
 800557a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	0018      	movs	r0, r3
 8005580:	f000 fdea 	bl	8006158 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	2240      	movs	r2, #64	; 0x40
 800558c:	4013      	ands	r3, r2
 800558e:	2b40      	cmp	r3, #64	; 0x40
 8005590:	d10f      	bne.n	80055b2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	2240      	movs	r2, #64	; 0x40
 800559a:	4013      	ands	r3, r2
 800559c:	2b40      	cmp	r3, #64	; 0x40
 800559e:	d108      	bne.n	80055b2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2241      	movs	r2, #65	; 0x41
 80055a6:	4252      	negs	r2, r2
 80055a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	0018      	movs	r0, r3
 80055ae:	f000 f9cd 	bl	800594c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	2220      	movs	r2, #32
 80055ba:	4013      	ands	r3, r2
 80055bc:	2b20      	cmp	r3, #32
 80055be:	d10f      	bne.n	80055e0 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	2220      	movs	r2, #32
 80055c8:	4013      	ands	r3, r2
 80055ca:	2b20      	cmp	r3, #32
 80055cc:	d108      	bne.n	80055e0 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2221      	movs	r2, #33	; 0x21
 80055d4:	4252      	negs	r2, r2
 80055d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	0018      	movs	r0, r3
 80055dc:	f000 fdb4 	bl	8006148 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055e0:	46c0      	nop			; (mov r8, r8)
 80055e2:	46bd      	mov	sp, r7
 80055e4:	b002      	add	sp, #8
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b086      	sub	sp, #24
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055f4:	2317      	movs	r3, #23
 80055f6:	18fb      	adds	r3, r7, r3
 80055f8:	2200      	movs	r2, #0
 80055fa:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	223c      	movs	r2, #60	; 0x3c
 8005600:	5c9b      	ldrb	r3, [r3, r2]
 8005602:	2b01      	cmp	r3, #1
 8005604:	d101      	bne.n	800560a <HAL_TIM_PWM_ConfigChannel+0x22>
 8005606:	2302      	movs	r3, #2
 8005608:	e0ad      	b.n	8005766 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	223c      	movs	r2, #60	; 0x3c
 800560e:	2101      	movs	r1, #1
 8005610:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2b0c      	cmp	r3, #12
 8005616:	d100      	bne.n	800561a <HAL_TIM_PWM_ConfigChannel+0x32>
 8005618:	e076      	b.n	8005708 <HAL_TIM_PWM_ConfigChannel+0x120>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2b0c      	cmp	r3, #12
 800561e:	d900      	bls.n	8005622 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8005620:	e095      	b.n	800574e <HAL_TIM_PWM_ConfigChannel+0x166>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2b08      	cmp	r3, #8
 8005626:	d04e      	beq.n	80056c6 <HAL_TIM_PWM_ConfigChannel+0xde>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2b08      	cmp	r3, #8
 800562c:	d900      	bls.n	8005630 <HAL_TIM_PWM_ConfigChannel+0x48>
 800562e:	e08e      	b.n	800574e <HAL_TIM_PWM_ConfigChannel+0x166>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d003      	beq.n	800563e <HAL_TIM_PWM_ConfigChannel+0x56>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2b04      	cmp	r3, #4
 800563a:	d021      	beq.n	8005680 <HAL_TIM_PWM_ConfigChannel+0x98>
 800563c:	e087      	b.n	800574e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68ba      	ldr	r2, [r7, #8]
 8005644:	0011      	movs	r1, r2
 8005646:	0018      	movs	r0, r3
 8005648:	f000 fa08 	bl	8005a5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	699a      	ldr	r2, [r3, #24]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2108      	movs	r1, #8
 8005658:	430a      	orrs	r2, r1
 800565a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	699a      	ldr	r2, [r3, #24]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2104      	movs	r1, #4
 8005668:	438a      	bics	r2, r1
 800566a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	6999      	ldr	r1, [r3, #24]
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	691a      	ldr	r2, [r3, #16]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	430a      	orrs	r2, r1
 800567c:	619a      	str	r2, [r3, #24]
      break;
 800567e:	e06b      	b.n	8005758 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68ba      	ldr	r2, [r7, #8]
 8005686:	0011      	movs	r1, r2
 8005688:	0018      	movs	r0, r3
 800568a:	f000 fa6f 	bl	8005b6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	699a      	ldr	r2, [r3, #24]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2180      	movs	r1, #128	; 0x80
 800569a:	0109      	lsls	r1, r1, #4
 800569c:	430a      	orrs	r2, r1
 800569e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	699a      	ldr	r2, [r3, #24]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4931      	ldr	r1, [pc, #196]	; (8005770 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80056ac:	400a      	ands	r2, r1
 80056ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	6999      	ldr	r1, [r3, #24]
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	021a      	lsls	r2, r3, #8
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	430a      	orrs	r2, r1
 80056c2:	619a      	str	r2, [r3, #24]
      break;
 80056c4:	e048      	b.n	8005758 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	0011      	movs	r1, r2
 80056ce:	0018      	movs	r0, r3
 80056d0:	f000 fad0 	bl	8005c74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	69da      	ldr	r2, [r3, #28]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2108      	movs	r1, #8
 80056e0:	430a      	orrs	r2, r1
 80056e2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	69da      	ldr	r2, [r3, #28]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2104      	movs	r1, #4
 80056f0:	438a      	bics	r2, r1
 80056f2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	69d9      	ldr	r1, [r3, #28]
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	691a      	ldr	r2, [r3, #16]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	430a      	orrs	r2, r1
 8005704:	61da      	str	r2, [r3, #28]
      break;
 8005706:	e027      	b.n	8005758 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68ba      	ldr	r2, [r7, #8]
 800570e:	0011      	movs	r1, r2
 8005710:	0018      	movs	r0, r3
 8005712:	f000 fb35 	bl	8005d80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	69da      	ldr	r2, [r3, #28]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2180      	movs	r1, #128	; 0x80
 8005722:	0109      	lsls	r1, r1, #4
 8005724:	430a      	orrs	r2, r1
 8005726:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	69da      	ldr	r2, [r3, #28]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	490f      	ldr	r1, [pc, #60]	; (8005770 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8005734:	400a      	ands	r2, r1
 8005736:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	69d9      	ldr	r1, [r3, #28]
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	021a      	lsls	r2, r3, #8
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	430a      	orrs	r2, r1
 800574a:	61da      	str	r2, [r3, #28]
      break;
 800574c:	e004      	b.n	8005758 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800574e:	2317      	movs	r3, #23
 8005750:	18fb      	adds	r3, r7, r3
 8005752:	2201      	movs	r2, #1
 8005754:	701a      	strb	r2, [r3, #0]
      break;
 8005756:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	223c      	movs	r2, #60	; 0x3c
 800575c:	2100      	movs	r1, #0
 800575e:	5499      	strb	r1, [r3, r2]

  return status;
 8005760:	2317      	movs	r3, #23
 8005762:	18fb      	adds	r3, r7, r3
 8005764:	781b      	ldrb	r3, [r3, #0]
}
 8005766:	0018      	movs	r0, r3
 8005768:	46bd      	mov	sp, r7
 800576a:	b006      	add	sp, #24
 800576c:	bd80      	pop	{r7, pc}
 800576e:	46c0      	nop			; (mov r8, r8)
 8005770:	fffffbff 	.word	0xfffffbff

08005774 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800577e:	230f      	movs	r3, #15
 8005780:	18fb      	adds	r3, r7, r3
 8005782:	2200      	movs	r2, #0
 8005784:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	223c      	movs	r2, #60	; 0x3c
 800578a:	5c9b      	ldrb	r3, [r3, r2]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d101      	bne.n	8005794 <HAL_TIM_ConfigClockSource+0x20>
 8005790:	2302      	movs	r3, #2
 8005792:	e0bc      	b.n	800590e <HAL_TIM_ConfigClockSource+0x19a>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	223c      	movs	r2, #60	; 0x3c
 8005798:	2101      	movs	r1, #1
 800579a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	223d      	movs	r2, #61	; 0x3d
 80057a0:	2102      	movs	r1, #2
 80057a2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	2277      	movs	r2, #119	; 0x77
 80057b0:	4393      	bics	r3, r2
 80057b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	4a58      	ldr	r2, [pc, #352]	; (8005918 <HAL_TIM_ConfigClockSource+0x1a4>)
 80057b8:	4013      	ands	r3, r2
 80057ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68ba      	ldr	r2, [r7, #8]
 80057c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2280      	movs	r2, #128	; 0x80
 80057ca:	0192      	lsls	r2, r2, #6
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d040      	beq.n	8005852 <HAL_TIM_ConfigClockSource+0xde>
 80057d0:	2280      	movs	r2, #128	; 0x80
 80057d2:	0192      	lsls	r2, r2, #6
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d900      	bls.n	80057da <HAL_TIM_ConfigClockSource+0x66>
 80057d8:	e088      	b.n	80058ec <HAL_TIM_ConfigClockSource+0x178>
 80057da:	2280      	movs	r2, #128	; 0x80
 80057dc:	0152      	lsls	r2, r2, #5
 80057de:	4293      	cmp	r3, r2
 80057e0:	d100      	bne.n	80057e4 <HAL_TIM_ConfigClockSource+0x70>
 80057e2:	e088      	b.n	80058f6 <HAL_TIM_ConfigClockSource+0x182>
 80057e4:	2280      	movs	r2, #128	; 0x80
 80057e6:	0152      	lsls	r2, r2, #5
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d900      	bls.n	80057ee <HAL_TIM_ConfigClockSource+0x7a>
 80057ec:	e07e      	b.n	80058ec <HAL_TIM_ConfigClockSource+0x178>
 80057ee:	2b70      	cmp	r3, #112	; 0x70
 80057f0:	d018      	beq.n	8005824 <HAL_TIM_ConfigClockSource+0xb0>
 80057f2:	d900      	bls.n	80057f6 <HAL_TIM_ConfigClockSource+0x82>
 80057f4:	e07a      	b.n	80058ec <HAL_TIM_ConfigClockSource+0x178>
 80057f6:	2b60      	cmp	r3, #96	; 0x60
 80057f8:	d04f      	beq.n	800589a <HAL_TIM_ConfigClockSource+0x126>
 80057fa:	d900      	bls.n	80057fe <HAL_TIM_ConfigClockSource+0x8a>
 80057fc:	e076      	b.n	80058ec <HAL_TIM_ConfigClockSource+0x178>
 80057fe:	2b50      	cmp	r3, #80	; 0x50
 8005800:	d03b      	beq.n	800587a <HAL_TIM_ConfigClockSource+0x106>
 8005802:	d900      	bls.n	8005806 <HAL_TIM_ConfigClockSource+0x92>
 8005804:	e072      	b.n	80058ec <HAL_TIM_ConfigClockSource+0x178>
 8005806:	2b40      	cmp	r3, #64	; 0x40
 8005808:	d057      	beq.n	80058ba <HAL_TIM_ConfigClockSource+0x146>
 800580a:	d900      	bls.n	800580e <HAL_TIM_ConfigClockSource+0x9a>
 800580c:	e06e      	b.n	80058ec <HAL_TIM_ConfigClockSource+0x178>
 800580e:	2b30      	cmp	r3, #48	; 0x30
 8005810:	d063      	beq.n	80058da <HAL_TIM_ConfigClockSource+0x166>
 8005812:	d86b      	bhi.n	80058ec <HAL_TIM_ConfigClockSource+0x178>
 8005814:	2b20      	cmp	r3, #32
 8005816:	d060      	beq.n	80058da <HAL_TIM_ConfigClockSource+0x166>
 8005818:	d868      	bhi.n	80058ec <HAL_TIM_ConfigClockSource+0x178>
 800581a:	2b00      	cmp	r3, #0
 800581c:	d05d      	beq.n	80058da <HAL_TIM_ConfigClockSource+0x166>
 800581e:	2b10      	cmp	r3, #16
 8005820:	d05b      	beq.n	80058da <HAL_TIM_ConfigClockSource+0x166>
 8005822:	e063      	b.n	80058ec <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6818      	ldr	r0, [r3, #0]
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	6899      	ldr	r1, [r3, #8]
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	685a      	ldr	r2, [r3, #4]
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	f000 fb88 	bl	8005f48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	2277      	movs	r2, #119	; 0x77
 8005844:	4313      	orrs	r3, r2
 8005846:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68ba      	ldr	r2, [r7, #8]
 800584e:	609a      	str	r2, [r3, #8]
      break;
 8005850:	e052      	b.n	80058f8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6818      	ldr	r0, [r3, #0]
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	6899      	ldr	r1, [r3, #8]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	685a      	ldr	r2, [r3, #4]
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	f000 fb71 	bl	8005f48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	689a      	ldr	r2, [r3, #8]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2180      	movs	r1, #128	; 0x80
 8005872:	01c9      	lsls	r1, r1, #7
 8005874:	430a      	orrs	r2, r1
 8005876:	609a      	str	r2, [r3, #8]
      break;
 8005878:	e03e      	b.n	80058f8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6818      	ldr	r0, [r3, #0]
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	6859      	ldr	r1, [r3, #4]
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	001a      	movs	r2, r3
 8005888:	f000 fae4 	bl	8005e54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2150      	movs	r1, #80	; 0x50
 8005892:	0018      	movs	r0, r3
 8005894:	f000 fb3e 	bl	8005f14 <TIM_ITRx_SetConfig>
      break;
 8005898:	e02e      	b.n	80058f8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6818      	ldr	r0, [r3, #0]
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	6859      	ldr	r1, [r3, #4]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	001a      	movs	r2, r3
 80058a8:	f000 fb02 	bl	8005eb0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2160      	movs	r1, #96	; 0x60
 80058b2:	0018      	movs	r0, r3
 80058b4:	f000 fb2e 	bl	8005f14 <TIM_ITRx_SetConfig>
      break;
 80058b8:	e01e      	b.n	80058f8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6818      	ldr	r0, [r3, #0]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	6859      	ldr	r1, [r3, #4]
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	001a      	movs	r2, r3
 80058c8:	f000 fac4 	bl	8005e54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2140      	movs	r1, #64	; 0x40
 80058d2:	0018      	movs	r0, r3
 80058d4:	f000 fb1e 	bl	8005f14 <TIM_ITRx_SetConfig>
      break;
 80058d8:	e00e      	b.n	80058f8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	0019      	movs	r1, r3
 80058e4:	0010      	movs	r0, r2
 80058e6:	f000 fb15 	bl	8005f14 <TIM_ITRx_SetConfig>
      break;
 80058ea:	e005      	b.n	80058f8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80058ec:	230f      	movs	r3, #15
 80058ee:	18fb      	adds	r3, r7, r3
 80058f0:	2201      	movs	r2, #1
 80058f2:	701a      	strb	r2, [r3, #0]
      break;
 80058f4:	e000      	b.n	80058f8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80058f6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	223d      	movs	r2, #61	; 0x3d
 80058fc:	2101      	movs	r1, #1
 80058fe:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	223c      	movs	r2, #60	; 0x3c
 8005904:	2100      	movs	r1, #0
 8005906:	5499      	strb	r1, [r3, r2]

  return status;
 8005908:	230f      	movs	r3, #15
 800590a:	18fb      	adds	r3, r7, r3
 800590c:	781b      	ldrb	r3, [r3, #0]
}
 800590e:	0018      	movs	r0, r3
 8005910:	46bd      	mov	sp, r7
 8005912:	b004      	add	sp, #16
 8005914:	bd80      	pop	{r7, pc}
 8005916:	46c0      	nop			; (mov r8, r8)
 8005918:	ffff00ff 	.word	0xffff00ff

0800591c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005924:	46c0      	nop			; (mov r8, r8)
 8005926:	46bd      	mov	sp, r7
 8005928:	b002      	add	sp, #8
 800592a:	bd80      	pop	{r7, pc}

0800592c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005934:	46c0      	nop			; (mov r8, r8)
 8005936:	46bd      	mov	sp, r7
 8005938:	b002      	add	sp, #8
 800593a:	bd80      	pop	{r7, pc}

0800593c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005944:	46c0      	nop			; (mov r8, r8)
 8005946:	46bd      	mov	sp, r7
 8005948:	b002      	add	sp, #8
 800594a:	bd80      	pop	{r7, pc}

0800594c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005954:	46c0      	nop			; (mov r8, r8)
 8005956:	46bd      	mov	sp, r7
 8005958:	b002      	add	sp, #8
 800595a:	bd80      	pop	{r7, pc}

0800595c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a34      	ldr	r2, [pc, #208]	; (8005a40 <TIM_Base_SetConfig+0xe4>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d008      	beq.n	8005986 <TIM_Base_SetConfig+0x2a>
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	2380      	movs	r3, #128	; 0x80
 8005978:	05db      	lsls	r3, r3, #23
 800597a:	429a      	cmp	r2, r3
 800597c:	d003      	beq.n	8005986 <TIM_Base_SetConfig+0x2a>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a30      	ldr	r2, [pc, #192]	; (8005a44 <TIM_Base_SetConfig+0xe8>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d108      	bne.n	8005998 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2270      	movs	r2, #112	; 0x70
 800598a:	4393      	bics	r3, r2
 800598c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	4313      	orrs	r3, r2
 8005996:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a29      	ldr	r2, [pc, #164]	; (8005a40 <TIM_Base_SetConfig+0xe4>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d018      	beq.n	80059d2 <TIM_Base_SetConfig+0x76>
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	2380      	movs	r3, #128	; 0x80
 80059a4:	05db      	lsls	r3, r3, #23
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d013      	beq.n	80059d2 <TIM_Base_SetConfig+0x76>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a25      	ldr	r2, [pc, #148]	; (8005a44 <TIM_Base_SetConfig+0xe8>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d00f      	beq.n	80059d2 <TIM_Base_SetConfig+0x76>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a24      	ldr	r2, [pc, #144]	; (8005a48 <TIM_Base_SetConfig+0xec>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d00b      	beq.n	80059d2 <TIM_Base_SetConfig+0x76>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a23      	ldr	r2, [pc, #140]	; (8005a4c <TIM_Base_SetConfig+0xf0>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d007      	beq.n	80059d2 <TIM_Base_SetConfig+0x76>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a22      	ldr	r2, [pc, #136]	; (8005a50 <TIM_Base_SetConfig+0xf4>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d003      	beq.n	80059d2 <TIM_Base_SetConfig+0x76>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a21      	ldr	r2, [pc, #132]	; (8005a54 <TIM_Base_SetConfig+0xf8>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d108      	bne.n	80059e4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	4a20      	ldr	r2, [pc, #128]	; (8005a58 <TIM_Base_SetConfig+0xfc>)
 80059d6:	4013      	ands	r3, r2
 80059d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2280      	movs	r2, #128	; 0x80
 80059e8:	4393      	bics	r3, r2
 80059ea:	001a      	movs	r2, r3
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	695b      	ldr	r3, [r3, #20]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	689a      	ldr	r2, [r3, #8]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a0c      	ldr	r2, [pc, #48]	; (8005a40 <TIM_Base_SetConfig+0xe4>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d00b      	beq.n	8005a2a <TIM_Base_SetConfig+0xce>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a0d      	ldr	r2, [pc, #52]	; (8005a4c <TIM_Base_SetConfig+0xf0>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d007      	beq.n	8005a2a <TIM_Base_SetConfig+0xce>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a0c      	ldr	r2, [pc, #48]	; (8005a50 <TIM_Base_SetConfig+0xf4>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d003      	beq.n	8005a2a <TIM_Base_SetConfig+0xce>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a0b      	ldr	r2, [pc, #44]	; (8005a54 <TIM_Base_SetConfig+0xf8>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d103      	bne.n	8005a32 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	691a      	ldr	r2, [r3, #16]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2201      	movs	r2, #1
 8005a36:	615a      	str	r2, [r3, #20]
}
 8005a38:	46c0      	nop			; (mov r8, r8)
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	b004      	add	sp, #16
 8005a3e:	bd80      	pop	{r7, pc}
 8005a40:	40012c00 	.word	0x40012c00
 8005a44:	40000400 	.word	0x40000400
 8005a48:	40002000 	.word	0x40002000
 8005a4c:	40014000 	.word	0x40014000
 8005a50:	40014400 	.word	0x40014400
 8005a54:	40014800 	.word	0x40014800
 8005a58:	fffffcff 	.word	0xfffffcff

08005a5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b086      	sub	sp, #24
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	4393      	bics	r3, r2
 8005a6e:	001a      	movs	r2, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a1b      	ldr	r3, [r3, #32]
 8005a78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2270      	movs	r2, #112	; 0x70
 8005a8a:	4393      	bics	r3, r2
 8005a8c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2203      	movs	r2, #3
 8005a92:	4393      	bics	r3, r2
 8005a94:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	4393      	bics	r3, r2
 8005aa6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	697a      	ldr	r2, [r7, #20]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a27      	ldr	r2, [pc, #156]	; (8005b54 <TIM_OC1_SetConfig+0xf8>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d00b      	beq.n	8005ad2 <TIM_OC1_SetConfig+0x76>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a26      	ldr	r2, [pc, #152]	; (8005b58 <TIM_OC1_SetConfig+0xfc>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d007      	beq.n	8005ad2 <TIM_OC1_SetConfig+0x76>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a25      	ldr	r2, [pc, #148]	; (8005b5c <TIM_OC1_SetConfig+0x100>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d003      	beq.n	8005ad2 <TIM_OC1_SetConfig+0x76>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a24      	ldr	r2, [pc, #144]	; (8005b60 <TIM_OC1_SetConfig+0x104>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d10c      	bne.n	8005aec <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	2208      	movs	r2, #8
 8005ad6:	4393      	bics	r3, r2
 8005ad8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	697a      	ldr	r2, [r7, #20]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	2204      	movs	r2, #4
 8005ae8:	4393      	bics	r3, r2
 8005aea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a19      	ldr	r2, [pc, #100]	; (8005b54 <TIM_OC1_SetConfig+0xf8>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d00b      	beq.n	8005b0c <TIM_OC1_SetConfig+0xb0>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a18      	ldr	r2, [pc, #96]	; (8005b58 <TIM_OC1_SetConfig+0xfc>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d007      	beq.n	8005b0c <TIM_OC1_SetConfig+0xb0>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a17      	ldr	r2, [pc, #92]	; (8005b5c <TIM_OC1_SetConfig+0x100>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d003      	beq.n	8005b0c <TIM_OC1_SetConfig+0xb0>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a16      	ldr	r2, [pc, #88]	; (8005b60 <TIM_OC1_SetConfig+0x104>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d111      	bne.n	8005b30 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	4a15      	ldr	r2, [pc, #84]	; (8005b64 <TIM_OC1_SetConfig+0x108>)
 8005b10:	4013      	ands	r3, r2
 8005b12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	4a14      	ldr	r2, [pc, #80]	; (8005b68 <TIM_OC1_SetConfig+0x10c>)
 8005b18:	4013      	ands	r3, r2
 8005b1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	695b      	ldr	r3, [r3, #20]
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	699b      	ldr	r3, [r3, #24]
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	693a      	ldr	r2, [r7, #16]
 8005b34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	697a      	ldr	r2, [r7, #20]
 8005b48:	621a      	str	r2, [r3, #32]
}
 8005b4a:	46c0      	nop			; (mov r8, r8)
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	b006      	add	sp, #24
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	46c0      	nop			; (mov r8, r8)
 8005b54:	40012c00 	.word	0x40012c00
 8005b58:	40014000 	.word	0x40014000
 8005b5c:	40014400 	.word	0x40014400
 8005b60:	40014800 	.word	0x40014800
 8005b64:	fffffeff 	.word	0xfffffeff
 8005b68:	fffffdff 	.word	0xfffffdff

08005b6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	2210      	movs	r2, #16
 8005b7c:	4393      	bics	r3, r2
 8005b7e:	001a      	movs	r2, r3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a1b      	ldr	r3, [r3, #32]
 8005b88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	699b      	ldr	r3, [r3, #24]
 8005b94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	4a2e      	ldr	r2, [pc, #184]	; (8005c54 <TIM_OC2_SetConfig+0xe8>)
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	4a2d      	ldr	r2, [pc, #180]	; (8005c58 <TIM_OC2_SetConfig+0xec>)
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	021b      	lsls	r3, r3, #8
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	2220      	movs	r2, #32
 8005bb6:	4393      	bics	r3, r2
 8005bb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	011b      	lsls	r3, r3, #4
 8005bc0:	697a      	ldr	r2, [r7, #20]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a24      	ldr	r2, [pc, #144]	; (8005c5c <TIM_OC2_SetConfig+0xf0>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d10d      	bne.n	8005bea <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	2280      	movs	r2, #128	; 0x80
 8005bd2:	4393      	bics	r3, r2
 8005bd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	011b      	lsls	r3, r3, #4
 8005bdc:	697a      	ldr	r2, [r7, #20]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	2240      	movs	r2, #64	; 0x40
 8005be6:	4393      	bics	r3, r2
 8005be8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a1b      	ldr	r2, [pc, #108]	; (8005c5c <TIM_OC2_SetConfig+0xf0>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d00b      	beq.n	8005c0a <TIM_OC2_SetConfig+0x9e>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a1a      	ldr	r2, [pc, #104]	; (8005c60 <TIM_OC2_SetConfig+0xf4>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d007      	beq.n	8005c0a <TIM_OC2_SetConfig+0x9e>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a19      	ldr	r2, [pc, #100]	; (8005c64 <TIM_OC2_SetConfig+0xf8>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d003      	beq.n	8005c0a <TIM_OC2_SetConfig+0x9e>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a18      	ldr	r2, [pc, #96]	; (8005c68 <TIM_OC2_SetConfig+0xfc>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d113      	bne.n	8005c32 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	4a17      	ldr	r2, [pc, #92]	; (8005c6c <TIM_OC2_SetConfig+0x100>)
 8005c0e:	4013      	ands	r3, r2
 8005c10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	4a16      	ldr	r2, [pc, #88]	; (8005c70 <TIM_OC2_SetConfig+0x104>)
 8005c16:	4013      	ands	r3, r2
 8005c18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	699b      	ldr	r3, [r3, #24]
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	693a      	ldr	r2, [r7, #16]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	693a      	ldr	r2, [r7, #16]
 8005c36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	685a      	ldr	r2, [r3, #4]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	697a      	ldr	r2, [r7, #20]
 8005c4a:	621a      	str	r2, [r3, #32]
}
 8005c4c:	46c0      	nop			; (mov r8, r8)
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	b006      	add	sp, #24
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	ffff8fff 	.word	0xffff8fff
 8005c58:	fffffcff 	.word	0xfffffcff
 8005c5c:	40012c00 	.word	0x40012c00
 8005c60:	40014000 	.word	0x40014000
 8005c64:	40014400 	.word	0x40014400
 8005c68:	40014800 	.word	0x40014800
 8005c6c:	fffffbff 	.word	0xfffffbff
 8005c70:	fffff7ff 	.word	0xfffff7ff

08005c74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b086      	sub	sp, #24
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a1b      	ldr	r3, [r3, #32]
 8005c82:	4a35      	ldr	r2, [pc, #212]	; (8005d58 <TIM_OC3_SetConfig+0xe4>)
 8005c84:	401a      	ands	r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	69db      	ldr	r3, [r3, #28]
 8005c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2270      	movs	r2, #112	; 0x70
 8005ca0:	4393      	bics	r3, r2
 8005ca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2203      	movs	r2, #3
 8005ca8:	4393      	bics	r3, r2
 8005caa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	4a28      	ldr	r2, [pc, #160]	; (8005d5c <TIM_OC3_SetConfig+0xe8>)
 8005cba:	4013      	ands	r3, r2
 8005cbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	021b      	lsls	r3, r3, #8
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a24      	ldr	r2, [pc, #144]	; (8005d60 <TIM_OC3_SetConfig+0xec>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d10d      	bne.n	8005cee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	4a23      	ldr	r2, [pc, #140]	; (8005d64 <TIM_OC3_SetConfig+0xf0>)
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	021b      	lsls	r3, r3, #8
 8005ce0:	697a      	ldr	r2, [r7, #20]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	4a1f      	ldr	r2, [pc, #124]	; (8005d68 <TIM_OC3_SetConfig+0xf4>)
 8005cea:	4013      	ands	r3, r2
 8005cec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a1b      	ldr	r2, [pc, #108]	; (8005d60 <TIM_OC3_SetConfig+0xec>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d00b      	beq.n	8005d0e <TIM_OC3_SetConfig+0x9a>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a1c      	ldr	r2, [pc, #112]	; (8005d6c <TIM_OC3_SetConfig+0xf8>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d007      	beq.n	8005d0e <TIM_OC3_SetConfig+0x9a>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a1b      	ldr	r2, [pc, #108]	; (8005d70 <TIM_OC3_SetConfig+0xfc>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d003      	beq.n	8005d0e <TIM_OC3_SetConfig+0x9a>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a1a      	ldr	r2, [pc, #104]	; (8005d74 <TIM_OC3_SetConfig+0x100>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d113      	bne.n	8005d36 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	4a19      	ldr	r2, [pc, #100]	; (8005d78 <TIM_OC3_SetConfig+0x104>)
 8005d12:	4013      	ands	r3, r2
 8005d14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	4a18      	ldr	r2, [pc, #96]	; (8005d7c <TIM_OC3_SetConfig+0x108>)
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	011b      	lsls	r3, r3, #4
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	011b      	lsls	r3, r3, #4
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	685a      	ldr	r2, [r3, #4]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	621a      	str	r2, [r3, #32]
}
 8005d50:	46c0      	nop			; (mov r8, r8)
 8005d52:	46bd      	mov	sp, r7
 8005d54:	b006      	add	sp, #24
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	fffffeff 	.word	0xfffffeff
 8005d5c:	fffffdff 	.word	0xfffffdff
 8005d60:	40012c00 	.word	0x40012c00
 8005d64:	fffff7ff 	.word	0xfffff7ff
 8005d68:	fffffbff 	.word	0xfffffbff
 8005d6c:	40014000 	.word	0x40014000
 8005d70:	40014400 	.word	0x40014400
 8005d74:	40014800 	.word	0x40014800
 8005d78:	ffffefff 	.word	0xffffefff
 8005d7c:	ffffdfff 	.word	0xffffdfff

08005d80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b086      	sub	sp, #24
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	4a28      	ldr	r2, [pc, #160]	; (8005e30 <TIM_OC4_SetConfig+0xb0>)
 8005d90:	401a      	ands	r2, r3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	69db      	ldr	r3, [r3, #28]
 8005da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	4a22      	ldr	r2, [pc, #136]	; (8005e34 <TIM_OC4_SetConfig+0xb4>)
 8005dac:	4013      	ands	r3, r2
 8005dae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	4a21      	ldr	r2, [pc, #132]	; (8005e38 <TIM_OC4_SetConfig+0xb8>)
 8005db4:	4013      	ands	r3, r2
 8005db6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	021b      	lsls	r3, r3, #8
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	4a1d      	ldr	r2, [pc, #116]	; (8005e3c <TIM_OC4_SetConfig+0xbc>)
 8005dc8:	4013      	ands	r3, r2
 8005dca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	031b      	lsls	r3, r3, #12
 8005dd2:	693a      	ldr	r2, [r7, #16]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a19      	ldr	r2, [pc, #100]	; (8005e40 <TIM_OC4_SetConfig+0xc0>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d00b      	beq.n	8005df8 <TIM_OC4_SetConfig+0x78>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a18      	ldr	r2, [pc, #96]	; (8005e44 <TIM_OC4_SetConfig+0xc4>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d007      	beq.n	8005df8 <TIM_OC4_SetConfig+0x78>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a17      	ldr	r2, [pc, #92]	; (8005e48 <TIM_OC4_SetConfig+0xc8>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d003      	beq.n	8005df8 <TIM_OC4_SetConfig+0x78>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a16      	ldr	r2, [pc, #88]	; (8005e4c <TIM_OC4_SetConfig+0xcc>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d109      	bne.n	8005e0c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	4a15      	ldr	r2, [pc, #84]	; (8005e50 <TIM_OC4_SetConfig+0xd0>)
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	695b      	ldr	r3, [r3, #20]
 8005e04:	019b      	lsls	r3, r3, #6
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	697a      	ldr	r2, [r7, #20]
 8005e10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	685a      	ldr	r2, [r3, #4]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	693a      	ldr	r2, [r7, #16]
 8005e24:	621a      	str	r2, [r3, #32]
}
 8005e26:	46c0      	nop			; (mov r8, r8)
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	b006      	add	sp, #24
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	46c0      	nop			; (mov r8, r8)
 8005e30:	ffffefff 	.word	0xffffefff
 8005e34:	ffff8fff 	.word	0xffff8fff
 8005e38:	fffffcff 	.word	0xfffffcff
 8005e3c:	ffffdfff 	.word	0xffffdfff
 8005e40:	40012c00 	.word	0x40012c00
 8005e44:	40014000 	.word	0x40014000
 8005e48:	40014400 	.word	0x40014400
 8005e4c:	40014800 	.word	0x40014800
 8005e50:	ffffbfff 	.word	0xffffbfff

08005e54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b086      	sub	sp, #24
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6a1b      	ldr	r3, [r3, #32]
 8005e64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	4393      	bics	r3, r2
 8005e6e:	001a      	movs	r2, r3
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	699b      	ldr	r3, [r3, #24]
 8005e78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	22f0      	movs	r2, #240	; 0xf0
 8005e7e:	4393      	bics	r3, r2
 8005e80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	011b      	lsls	r3, r3, #4
 8005e86:	693a      	ldr	r2, [r7, #16]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	220a      	movs	r2, #10
 8005e90:	4393      	bics	r3, r2
 8005e92:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	697a      	ldr	r2, [r7, #20]
 8005ea6:	621a      	str	r2, [r3, #32]
}
 8005ea8:	46c0      	nop			; (mov r8, r8)
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	b006      	add	sp, #24
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b086      	sub	sp, #24
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6a1b      	ldr	r3, [r3, #32]
 8005ec0:	2210      	movs	r2, #16
 8005ec2:	4393      	bics	r3, r2
 8005ec4:	001a      	movs	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6a1b      	ldr	r3, [r3, #32]
 8005ed4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	4a0d      	ldr	r2, [pc, #52]	; (8005f10 <TIM_TI2_ConfigInputStage+0x60>)
 8005eda:	4013      	ands	r3, r2
 8005edc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	031b      	lsls	r3, r3, #12
 8005ee2:	697a      	ldr	r2, [r7, #20]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	22a0      	movs	r2, #160	; 0xa0
 8005eec:	4393      	bics	r3, r2
 8005eee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	011b      	lsls	r3, r3, #4
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	621a      	str	r2, [r3, #32]
}
 8005f06:	46c0      	nop			; (mov r8, r8)
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	b006      	add	sp, #24
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	46c0      	nop			; (mov r8, r8)
 8005f10:	ffff0fff 	.word	0xffff0fff

08005f14 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2270      	movs	r2, #112	; 0x70
 8005f28:	4393      	bics	r3, r2
 8005f2a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f2c:	683a      	ldr	r2, [r7, #0]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	2207      	movs	r2, #7
 8005f34:	4313      	orrs	r3, r2
 8005f36:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	609a      	str	r2, [r3, #8]
}
 8005f3e:	46c0      	nop			; (mov r8, r8)
 8005f40:	46bd      	mov	sp, r7
 8005f42:	b004      	add	sp, #16
 8005f44:	bd80      	pop	{r7, pc}
	...

08005f48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b086      	sub	sp, #24
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	607a      	str	r2, [r7, #4]
 8005f54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	4a09      	ldr	r2, [pc, #36]	; (8005f84 <TIM_ETR_SetConfig+0x3c>)
 8005f60:	4013      	ands	r3, r2
 8005f62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	021a      	lsls	r2, r3, #8
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	431a      	orrs	r2, r3
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	697a      	ldr	r2, [r7, #20]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	697a      	ldr	r2, [r7, #20]
 8005f7a:	609a      	str	r2, [r3, #8]
}
 8005f7c:	46c0      	nop			; (mov r8, r8)
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	b006      	add	sp, #24
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	ffff00ff 	.word	0xffff00ff

08005f88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b086      	sub	sp, #24
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	221f      	movs	r2, #31
 8005f98:	4013      	ands	r3, r2
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	409a      	lsls	r2, r3
 8005f9e:	0013      	movs	r3, r2
 8005fa0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	43d2      	mvns	r2, r2
 8005faa:	401a      	ands	r2, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6a1a      	ldr	r2, [r3, #32]
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	211f      	movs	r1, #31
 8005fb8:	400b      	ands	r3, r1
 8005fba:	6879      	ldr	r1, [r7, #4]
 8005fbc:	4099      	lsls	r1, r3
 8005fbe:	000b      	movs	r3, r1
 8005fc0:	431a      	orrs	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	621a      	str	r2, [r3, #32]
}
 8005fc6:	46c0      	nop			; (mov r8, r8)
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	b006      	add	sp, #24
 8005fcc:	bd80      	pop	{r7, pc}
	...

08005fd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	223c      	movs	r2, #60	; 0x3c
 8005fde:	5c9b      	ldrb	r3, [r3, r2]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d101      	bne.n	8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	e047      	b.n	8006078 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	223c      	movs	r2, #60	; 0x3c
 8005fec:	2101      	movs	r1, #1
 8005fee:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	223d      	movs	r2, #61	; 0x3d
 8005ff4:	2102      	movs	r1, #2
 8005ff6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2270      	movs	r2, #112	; 0x70
 800600c:	4393      	bics	r3, r2
 800600e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	4313      	orrs	r3, r2
 8006018:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a16      	ldr	r2, [pc, #88]	; (8006080 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d00f      	beq.n	800604c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	2380      	movs	r3, #128	; 0x80
 8006032:	05db      	lsls	r3, r3, #23
 8006034:	429a      	cmp	r2, r3
 8006036:	d009      	beq.n	800604c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a11      	ldr	r2, [pc, #68]	; (8006084 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d004      	beq.n	800604c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a10      	ldr	r2, [pc, #64]	; (8006088 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d10c      	bne.n	8006066 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	2280      	movs	r2, #128	; 0x80
 8006050:	4393      	bics	r3, r2
 8006052:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	68ba      	ldr	r2, [r7, #8]
 800605a:	4313      	orrs	r3, r2
 800605c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68ba      	ldr	r2, [r7, #8]
 8006064:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	223d      	movs	r2, #61	; 0x3d
 800606a:	2101      	movs	r1, #1
 800606c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	223c      	movs	r2, #60	; 0x3c
 8006072:	2100      	movs	r1, #0
 8006074:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	0018      	movs	r0, r3
 800607a:	46bd      	mov	sp, r7
 800607c:	b004      	add	sp, #16
 800607e:	bd80      	pop	{r7, pc}
 8006080:	40012c00 	.word	0x40012c00
 8006084:	40000400 	.word	0x40000400
 8006088:	40014000 	.word	0x40014000

0800608c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006096:	2300      	movs	r3, #0
 8006098:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	223c      	movs	r2, #60	; 0x3c
 800609e:	5c9b      	ldrb	r3, [r3, r2]
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d101      	bne.n	80060a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80060a4:	2302      	movs	r3, #2
 80060a6:	e03e      	b.n	8006126 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	223c      	movs	r2, #60	; 0x3c
 80060ac:	2101      	movs	r1, #1
 80060ae:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	22ff      	movs	r2, #255	; 0xff
 80060b4:	4393      	bics	r3, r2
 80060b6:	001a      	movs	r2, r3
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	4313      	orrs	r3, r2
 80060be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	4a1b      	ldr	r2, [pc, #108]	; (8006130 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80060c4:	401a      	ands	r2, r3
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	4a18      	ldr	r2, [pc, #96]	; (8006134 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80060d2:	401a      	ands	r2, r3
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	4313      	orrs	r3, r2
 80060da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	4a16      	ldr	r2, [pc, #88]	; (8006138 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80060e0:	401a      	ands	r2, r3
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	4a13      	ldr	r2, [pc, #76]	; (800613c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80060ee:	401a      	ands	r2, r3
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	4a11      	ldr	r2, [pc, #68]	; (8006140 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80060fc:	401a      	ands	r2, r3
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	695b      	ldr	r3, [r3, #20]
 8006102:	4313      	orrs	r3, r2
 8006104:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	4a0e      	ldr	r2, [pc, #56]	; (8006144 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800610a:	401a      	ands	r2, r3
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	69db      	ldr	r3, [r3, #28]
 8006110:	4313      	orrs	r3, r2
 8006112:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	223c      	movs	r2, #60	; 0x3c
 8006120:	2100      	movs	r1, #0
 8006122:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	0018      	movs	r0, r3
 8006128:	46bd      	mov	sp, r7
 800612a:	b004      	add	sp, #16
 800612c:	bd80      	pop	{r7, pc}
 800612e:	46c0      	nop			; (mov r8, r8)
 8006130:	fffffcff 	.word	0xfffffcff
 8006134:	fffffbff 	.word	0xfffffbff
 8006138:	fffff7ff 	.word	0xfffff7ff
 800613c:	ffffefff 	.word	0xffffefff
 8006140:	ffffdfff 	.word	0xffffdfff
 8006144:	ffffbfff 	.word	0xffffbfff

08006148 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b082      	sub	sp, #8
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006150:	46c0      	nop			; (mov r8, r8)
 8006152:	46bd      	mov	sp, r7
 8006154:	b002      	add	sp, #8
 8006156:	bd80      	pop	{r7, pc}

08006158 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b082      	sub	sp, #8
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006160:	46c0      	nop			; (mov r8, r8)
 8006162:	46bd      	mov	sp, r7
 8006164:	b002      	add	sp, #8
 8006166:	bd80      	pop	{r7, pc}

08006168 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d101      	bne.n	800617a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e044      	b.n	8006204 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800617e:	2b00      	cmp	r3, #0
 8006180:	d107      	bne.n	8006192 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2274      	movs	r2, #116	; 0x74
 8006186:	2100      	movs	r1, #0
 8006188:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	0018      	movs	r0, r3
 800618e:	f7fb fdc5 	bl	8001d1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2224      	movs	r2, #36	; 0x24
 8006196:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2101      	movs	r1, #1
 80061a4:	438a      	bics	r2, r1
 80061a6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	0018      	movs	r0, r3
 80061ac:	f000 fc2e 	bl	8006a0c <UART_SetConfig>
 80061b0:	0003      	movs	r3, r0
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d101      	bne.n	80061ba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e024      	b.n	8006204 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d003      	beq.n	80061ca <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	0018      	movs	r0, r3
 80061c6:	f000 fd61 	bl	8006c8c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	685a      	ldr	r2, [r3, #4]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	490d      	ldr	r1, [pc, #52]	; (800620c <HAL_UART_Init+0xa4>)
 80061d6:	400a      	ands	r2, r1
 80061d8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	689a      	ldr	r2, [r3, #8]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	212a      	movs	r1, #42	; 0x2a
 80061e6:	438a      	bics	r2, r1
 80061e8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2101      	movs	r1, #1
 80061f6:	430a      	orrs	r2, r1
 80061f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	0018      	movs	r0, r3
 80061fe:	f000 fdf9 	bl	8006df4 <UART_CheckIdleState>
 8006202:	0003      	movs	r3, r0
}
 8006204:	0018      	movs	r0, r3
 8006206:	46bd      	mov	sp, r7
 8006208:	b002      	add	sp, #8
 800620a:	bd80      	pop	{r7, pc}
 800620c:	ffffb7ff 	.word	0xffffb7ff

08006210 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b08a      	sub	sp, #40	; 0x28
 8006214:	af02      	add	r7, sp, #8
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	603b      	str	r3, [r7, #0]
 800621c:	1dbb      	adds	r3, r7, #6
 800621e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006224:	2b20      	cmp	r3, #32
 8006226:	d000      	beq.n	800622a <HAL_UART_Transmit+0x1a>
 8006228:	e096      	b.n	8006358 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d003      	beq.n	8006238 <HAL_UART_Transmit+0x28>
 8006230:	1dbb      	adds	r3, r7, #6
 8006232:	881b      	ldrh	r3, [r3, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d101      	bne.n	800623c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e08e      	b.n	800635a <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	689a      	ldr	r2, [r3, #8]
 8006240:	2380      	movs	r3, #128	; 0x80
 8006242:	015b      	lsls	r3, r3, #5
 8006244:	429a      	cmp	r2, r3
 8006246:	d109      	bne.n	800625c <HAL_UART_Transmit+0x4c>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d105      	bne.n	800625c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	2201      	movs	r2, #1
 8006254:	4013      	ands	r3, r2
 8006256:	d001      	beq.n	800625c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	e07e      	b.n	800635a <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2274      	movs	r2, #116	; 0x74
 8006260:	5c9b      	ldrb	r3, [r3, r2]
 8006262:	2b01      	cmp	r3, #1
 8006264:	d101      	bne.n	800626a <HAL_UART_Transmit+0x5a>
 8006266:	2302      	movs	r3, #2
 8006268:	e077      	b.n	800635a <HAL_UART_Transmit+0x14a>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2274      	movs	r2, #116	; 0x74
 800626e:	2101      	movs	r1, #1
 8006270:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2280      	movs	r2, #128	; 0x80
 8006276:	2100      	movs	r1, #0
 8006278:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2221      	movs	r2, #33	; 0x21
 800627e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006280:	f7fb feb6 	bl	8001ff0 <HAL_GetTick>
 8006284:	0003      	movs	r3, r0
 8006286:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	1dba      	adds	r2, r7, #6
 800628c:	2150      	movs	r1, #80	; 0x50
 800628e:	8812      	ldrh	r2, [r2, #0]
 8006290:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	1dba      	adds	r2, r7, #6
 8006296:	2152      	movs	r1, #82	; 0x52
 8006298:	8812      	ldrh	r2, [r2, #0]
 800629a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	689a      	ldr	r2, [r3, #8]
 80062a0:	2380      	movs	r3, #128	; 0x80
 80062a2:	015b      	lsls	r3, r3, #5
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d108      	bne.n	80062ba <HAL_UART_Transmit+0xaa>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d104      	bne.n	80062ba <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80062b0:	2300      	movs	r3, #0
 80062b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	61bb      	str	r3, [r7, #24]
 80062b8:	e003      	b.n	80062c2 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062be:	2300      	movs	r3, #0
 80062c0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2274      	movs	r2, #116	; 0x74
 80062c6:	2100      	movs	r1, #0
 80062c8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80062ca:	e02d      	b.n	8006328 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062cc:	697a      	ldr	r2, [r7, #20]
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	9300      	str	r3, [sp, #0]
 80062d4:	0013      	movs	r3, r2
 80062d6:	2200      	movs	r2, #0
 80062d8:	2180      	movs	r1, #128	; 0x80
 80062da:	f000 fdd3 	bl	8006e84 <UART_WaitOnFlagUntilTimeout>
 80062de:	1e03      	subs	r3, r0, #0
 80062e0:	d001      	beq.n	80062e6 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e039      	b.n	800635a <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d10b      	bne.n	8006304 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	881a      	ldrh	r2, [r3, #0]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	05d2      	lsls	r2, r2, #23
 80062f6:	0dd2      	lsrs	r2, r2, #23
 80062f8:	b292      	uxth	r2, r2
 80062fa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	3302      	adds	r3, #2
 8006300:	61bb      	str	r3, [r7, #24]
 8006302:	e008      	b.n	8006316 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	781a      	ldrb	r2, [r3, #0]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	b292      	uxth	r2, r2
 800630e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	3301      	adds	r3, #1
 8006314:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2252      	movs	r2, #82	; 0x52
 800631a:	5a9b      	ldrh	r3, [r3, r2]
 800631c:	b29b      	uxth	r3, r3
 800631e:	3b01      	subs	r3, #1
 8006320:	b299      	uxth	r1, r3
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2252      	movs	r2, #82	; 0x52
 8006326:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2252      	movs	r2, #82	; 0x52
 800632c:	5a9b      	ldrh	r3, [r3, r2]
 800632e:	b29b      	uxth	r3, r3
 8006330:	2b00      	cmp	r3, #0
 8006332:	d1cb      	bne.n	80062cc <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006334:	697a      	ldr	r2, [r7, #20]
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	0013      	movs	r3, r2
 800633e:	2200      	movs	r2, #0
 8006340:	2140      	movs	r1, #64	; 0x40
 8006342:	f000 fd9f 	bl	8006e84 <UART_WaitOnFlagUntilTimeout>
 8006346:	1e03      	subs	r3, r0, #0
 8006348:	d001      	beq.n	800634e <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e005      	b.n	800635a <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2220      	movs	r2, #32
 8006352:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006354:	2300      	movs	r3, #0
 8006356:	e000      	b.n	800635a <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006358:	2302      	movs	r3, #2
  }
}
 800635a:	0018      	movs	r0, r3
 800635c:	46bd      	mov	sp, r7
 800635e:	b008      	add	sp, #32
 8006360:	bd80      	pop	{r7, pc}

08006362 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b088      	sub	sp, #32
 8006366:	af00      	add	r7, sp, #0
 8006368:	60f8      	str	r0, [r7, #12]
 800636a:	60b9      	str	r1, [r7, #8]
 800636c:	1dbb      	adds	r3, r7, #6
 800636e:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006374:	2b20      	cmp	r3, #32
 8006376:	d150      	bne.n	800641a <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d003      	beq.n	8006386 <HAL_UART_Receive_IT+0x24>
 800637e:	1dbb      	adds	r3, r7, #6
 8006380:	881b      	ldrh	r3, [r3, #0]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d101      	bne.n	800638a <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e048      	b.n	800641c <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	689a      	ldr	r2, [r3, #8]
 800638e:	2380      	movs	r3, #128	; 0x80
 8006390:	015b      	lsls	r3, r3, #5
 8006392:	429a      	cmp	r2, r3
 8006394:	d109      	bne.n	80063aa <HAL_UART_Receive_IT+0x48>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d105      	bne.n	80063aa <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	2201      	movs	r2, #1
 80063a2:	4013      	ands	r3, r2
 80063a4:	d001      	beq.n	80063aa <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e038      	b.n	800641c <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2274      	movs	r2, #116	; 0x74
 80063ae:	5c9b      	ldrb	r3, [r3, r2]
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d101      	bne.n	80063b8 <HAL_UART_Receive_IT+0x56>
 80063b4:	2302      	movs	r3, #2
 80063b6:	e031      	b.n	800641c <HAL_UART_Receive_IT+0xba>
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2274      	movs	r2, #116	; 0x74
 80063bc:	2101      	movs	r1, #1
 80063be:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2200      	movs	r2, #0
 80063c4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	685a      	ldr	r2, [r3, #4]
 80063cc:	2380      	movs	r3, #128	; 0x80
 80063ce:	041b      	lsls	r3, r3, #16
 80063d0:	4013      	ands	r3, r2
 80063d2:	d019      	beq.n	8006408 <HAL_UART_Receive_IT+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063d4:	f3ef 8310 	mrs	r3, PRIMASK
 80063d8:	613b      	str	r3, [r7, #16]
  return(result);
 80063da:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80063dc:	61fb      	str	r3, [r7, #28]
 80063de:	2301      	movs	r3, #1
 80063e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	f383 8810 	msr	PRIMASK, r3
}
 80063e8:	46c0      	nop			; (mov r8, r8)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2180      	movs	r1, #128	; 0x80
 80063f6:	04c9      	lsls	r1, r1, #19
 80063f8:	430a      	orrs	r2, r1
 80063fa:	601a      	str	r2, [r3, #0]
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	f383 8810 	msr	PRIMASK, r3
}
 8006406:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006408:	1dbb      	adds	r3, r7, #6
 800640a:	881a      	ldrh	r2, [r3, #0]
 800640c:	68b9      	ldr	r1, [r7, #8]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	0018      	movs	r0, r3
 8006412:	f000 fdfb 	bl	800700c <UART_Start_Receive_IT>
 8006416:	0003      	movs	r3, r0
 8006418:	e000      	b.n	800641c <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 800641a:	2302      	movs	r3, #2
  }
}
 800641c:	0018      	movs	r0, r3
 800641e:	46bd      	mov	sp, r7
 8006420:	b008      	add	sp, #32
 8006422:	bd80      	pop	{r7, pc}

08006424 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006424:	b590      	push	{r4, r7, lr}
 8006426:	b0ab      	sub	sp, #172	; 0xac
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	69db      	ldr	r3, [r3, #28]
 8006432:	22a4      	movs	r2, #164	; 0xa4
 8006434:	18b9      	adds	r1, r7, r2
 8006436:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	20a0      	movs	r0, #160	; 0xa0
 8006440:	1839      	adds	r1, r7, r0
 8006442:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	219c      	movs	r1, #156	; 0x9c
 800644c:	1879      	adds	r1, r7, r1
 800644e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006450:	0011      	movs	r1, r2
 8006452:	18bb      	adds	r3, r7, r2
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a99      	ldr	r2, [pc, #612]	; (80066bc <HAL_UART_IRQHandler+0x298>)
 8006458:	4013      	ands	r3, r2
 800645a:	2298      	movs	r2, #152	; 0x98
 800645c:	18bc      	adds	r4, r7, r2
 800645e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8006460:	18bb      	adds	r3, r7, r2
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d114      	bne.n	8006492 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006468:	187b      	adds	r3, r7, r1
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2220      	movs	r2, #32
 800646e:	4013      	ands	r3, r2
 8006470:	d00f      	beq.n	8006492 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006472:	183b      	adds	r3, r7, r0
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2220      	movs	r2, #32
 8006478:	4013      	ands	r3, r2
 800647a:	d00a      	beq.n	8006492 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006480:	2b00      	cmp	r3, #0
 8006482:	d100      	bne.n	8006486 <HAL_UART_IRQHandler+0x62>
 8006484:	e296      	b.n	80069b4 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	0010      	movs	r0, r2
 800648e:	4798      	blx	r3
      }
      return;
 8006490:	e290      	b.n	80069b4 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006492:	2398      	movs	r3, #152	; 0x98
 8006494:	18fb      	adds	r3, r7, r3
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d100      	bne.n	800649e <HAL_UART_IRQHandler+0x7a>
 800649c:	e114      	b.n	80066c8 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800649e:	239c      	movs	r3, #156	; 0x9c
 80064a0:	18fb      	adds	r3, r7, r3
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2201      	movs	r2, #1
 80064a6:	4013      	ands	r3, r2
 80064a8:	d106      	bne.n	80064b8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80064aa:	23a0      	movs	r3, #160	; 0xa0
 80064ac:	18fb      	adds	r3, r7, r3
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a83      	ldr	r2, [pc, #524]	; (80066c0 <HAL_UART_IRQHandler+0x29c>)
 80064b2:	4013      	ands	r3, r2
 80064b4:	d100      	bne.n	80064b8 <HAL_UART_IRQHandler+0x94>
 80064b6:	e107      	b.n	80066c8 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80064b8:	23a4      	movs	r3, #164	; 0xa4
 80064ba:	18fb      	adds	r3, r7, r3
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2201      	movs	r2, #1
 80064c0:	4013      	ands	r3, r2
 80064c2:	d012      	beq.n	80064ea <HAL_UART_IRQHandler+0xc6>
 80064c4:	23a0      	movs	r3, #160	; 0xa0
 80064c6:	18fb      	adds	r3, r7, r3
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	2380      	movs	r3, #128	; 0x80
 80064cc:	005b      	lsls	r3, r3, #1
 80064ce:	4013      	ands	r3, r2
 80064d0:	d00b      	beq.n	80064ea <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2201      	movs	r2, #1
 80064d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2280      	movs	r2, #128	; 0x80
 80064de:	589b      	ldr	r3, [r3, r2]
 80064e0:	2201      	movs	r2, #1
 80064e2:	431a      	orrs	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2180      	movs	r1, #128	; 0x80
 80064e8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80064ea:	23a4      	movs	r3, #164	; 0xa4
 80064ec:	18fb      	adds	r3, r7, r3
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2202      	movs	r2, #2
 80064f2:	4013      	ands	r3, r2
 80064f4:	d011      	beq.n	800651a <HAL_UART_IRQHandler+0xf6>
 80064f6:	239c      	movs	r3, #156	; 0x9c
 80064f8:	18fb      	adds	r3, r7, r3
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2201      	movs	r2, #1
 80064fe:	4013      	ands	r3, r2
 8006500:	d00b      	beq.n	800651a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2202      	movs	r2, #2
 8006508:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2280      	movs	r2, #128	; 0x80
 800650e:	589b      	ldr	r3, [r3, r2]
 8006510:	2204      	movs	r2, #4
 8006512:	431a      	orrs	r2, r3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2180      	movs	r1, #128	; 0x80
 8006518:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800651a:	23a4      	movs	r3, #164	; 0xa4
 800651c:	18fb      	adds	r3, r7, r3
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2204      	movs	r2, #4
 8006522:	4013      	ands	r3, r2
 8006524:	d011      	beq.n	800654a <HAL_UART_IRQHandler+0x126>
 8006526:	239c      	movs	r3, #156	; 0x9c
 8006528:	18fb      	adds	r3, r7, r3
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	2201      	movs	r2, #1
 800652e:	4013      	ands	r3, r2
 8006530:	d00b      	beq.n	800654a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2204      	movs	r2, #4
 8006538:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2280      	movs	r2, #128	; 0x80
 800653e:	589b      	ldr	r3, [r3, r2]
 8006540:	2202      	movs	r2, #2
 8006542:	431a      	orrs	r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2180      	movs	r1, #128	; 0x80
 8006548:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800654a:	23a4      	movs	r3, #164	; 0xa4
 800654c:	18fb      	adds	r3, r7, r3
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2208      	movs	r2, #8
 8006552:	4013      	ands	r3, r2
 8006554:	d017      	beq.n	8006586 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006556:	23a0      	movs	r3, #160	; 0xa0
 8006558:	18fb      	adds	r3, r7, r3
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	2220      	movs	r2, #32
 800655e:	4013      	ands	r3, r2
 8006560:	d105      	bne.n	800656e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006562:	239c      	movs	r3, #156	; 0x9c
 8006564:	18fb      	adds	r3, r7, r3
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2201      	movs	r2, #1
 800656a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800656c:	d00b      	beq.n	8006586 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2208      	movs	r2, #8
 8006574:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2280      	movs	r2, #128	; 0x80
 800657a:	589b      	ldr	r3, [r3, r2]
 800657c:	2208      	movs	r2, #8
 800657e:	431a      	orrs	r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2180      	movs	r1, #128	; 0x80
 8006584:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006586:	23a4      	movs	r3, #164	; 0xa4
 8006588:	18fb      	adds	r3, r7, r3
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	2380      	movs	r3, #128	; 0x80
 800658e:	011b      	lsls	r3, r3, #4
 8006590:	4013      	ands	r3, r2
 8006592:	d013      	beq.n	80065bc <HAL_UART_IRQHandler+0x198>
 8006594:	23a0      	movs	r3, #160	; 0xa0
 8006596:	18fb      	adds	r3, r7, r3
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	2380      	movs	r3, #128	; 0x80
 800659c:	04db      	lsls	r3, r3, #19
 800659e:	4013      	ands	r3, r2
 80065a0:	d00c      	beq.n	80065bc <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2280      	movs	r2, #128	; 0x80
 80065a8:	0112      	lsls	r2, r2, #4
 80065aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2280      	movs	r2, #128	; 0x80
 80065b0:	589b      	ldr	r3, [r3, r2]
 80065b2:	2220      	movs	r2, #32
 80065b4:	431a      	orrs	r2, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2180      	movs	r1, #128	; 0x80
 80065ba:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2280      	movs	r2, #128	; 0x80
 80065c0:	589b      	ldr	r3, [r3, r2]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d100      	bne.n	80065c8 <HAL_UART_IRQHandler+0x1a4>
 80065c6:	e1f7      	b.n	80069b8 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80065c8:	23a4      	movs	r3, #164	; 0xa4
 80065ca:	18fb      	adds	r3, r7, r3
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2220      	movs	r2, #32
 80065d0:	4013      	ands	r3, r2
 80065d2:	d00e      	beq.n	80065f2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80065d4:	23a0      	movs	r3, #160	; 0xa0
 80065d6:	18fb      	adds	r3, r7, r3
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2220      	movs	r2, #32
 80065dc:	4013      	ands	r3, r2
 80065de:	d008      	beq.n	80065f2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d004      	beq.n	80065f2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	0010      	movs	r0, r2
 80065f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2280      	movs	r2, #128	; 0x80
 80065f6:	589b      	ldr	r3, [r3, r2]
 80065f8:	2194      	movs	r1, #148	; 0x94
 80065fa:	187a      	adds	r2, r7, r1
 80065fc:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	2240      	movs	r2, #64	; 0x40
 8006606:	4013      	ands	r3, r2
 8006608:	2b40      	cmp	r3, #64	; 0x40
 800660a:	d004      	beq.n	8006616 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800660c:	187b      	adds	r3, r7, r1
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2228      	movs	r2, #40	; 0x28
 8006612:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006614:	d047      	beq.n	80066a6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	0018      	movs	r0, r3
 800661a:	f000 fd93 	bl	8007144 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	2240      	movs	r2, #64	; 0x40
 8006626:	4013      	ands	r3, r2
 8006628:	2b40      	cmp	r3, #64	; 0x40
 800662a:	d137      	bne.n	800669c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800662c:	f3ef 8310 	mrs	r3, PRIMASK
 8006630:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8006632:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006634:	2090      	movs	r0, #144	; 0x90
 8006636:	183a      	adds	r2, r7, r0
 8006638:	6013      	str	r3, [r2, #0]
 800663a:	2301      	movs	r3, #1
 800663c:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800663e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006640:	f383 8810 	msr	PRIMASK, r3
}
 8006644:	46c0      	nop			; (mov r8, r8)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	689a      	ldr	r2, [r3, #8]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2140      	movs	r1, #64	; 0x40
 8006652:	438a      	bics	r2, r1
 8006654:	609a      	str	r2, [r3, #8]
 8006656:	183b      	adds	r3, r7, r0
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800665c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800665e:	f383 8810 	msr	PRIMASK, r3
}
 8006662:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006668:	2b00      	cmp	r3, #0
 800666a:	d012      	beq.n	8006692 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006670:	4a14      	ldr	r2, [pc, #80]	; (80066c4 <HAL_UART_IRQHandler+0x2a0>)
 8006672:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006678:	0018      	movs	r0, r3
 800667a:	f7fc fb1f 	bl	8002cbc <HAL_DMA_Abort_IT>
 800667e:	1e03      	subs	r3, r0, #0
 8006680:	d01a      	beq.n	80066b8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006686:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800668c:	0018      	movs	r0, r3
 800668e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006690:	e012      	b.n	80066b8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	0018      	movs	r0, r3
 8006696:	f000 f9a5 	bl	80069e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800669a:	e00d      	b.n	80066b8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	0018      	movs	r0, r3
 80066a0:	f000 f9a0 	bl	80069e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066a4:	e008      	b.n	80066b8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	0018      	movs	r0, r3
 80066aa:	f000 f99b 	bl	80069e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2280      	movs	r2, #128	; 0x80
 80066b2:	2100      	movs	r1, #0
 80066b4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80066b6:	e17f      	b.n	80069b8 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066b8:	46c0      	nop			; (mov r8, r8)
    return;
 80066ba:	e17d      	b.n	80069b8 <HAL_UART_IRQHandler+0x594>
 80066bc:	0000080f 	.word	0x0000080f
 80066c0:	04000120 	.word	0x04000120
 80066c4:	08007209 	.word	0x08007209

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d000      	beq.n	80066d2 <HAL_UART_IRQHandler+0x2ae>
 80066d0:	e131      	b.n	8006936 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80066d2:	23a4      	movs	r3, #164	; 0xa4
 80066d4:	18fb      	adds	r3, r7, r3
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2210      	movs	r2, #16
 80066da:	4013      	ands	r3, r2
 80066dc:	d100      	bne.n	80066e0 <HAL_UART_IRQHandler+0x2bc>
 80066de:	e12a      	b.n	8006936 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80066e0:	23a0      	movs	r3, #160	; 0xa0
 80066e2:	18fb      	adds	r3, r7, r3
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2210      	movs	r2, #16
 80066e8:	4013      	ands	r3, r2
 80066ea:	d100      	bne.n	80066ee <HAL_UART_IRQHandler+0x2ca>
 80066ec:	e123      	b.n	8006936 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	2210      	movs	r2, #16
 80066f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	2240      	movs	r2, #64	; 0x40
 80066fe:	4013      	ands	r3, r2
 8006700:	2b40      	cmp	r3, #64	; 0x40
 8006702:	d000      	beq.n	8006706 <HAL_UART_IRQHandler+0x2e2>
 8006704:	e09b      	b.n	800683e <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	685a      	ldr	r2, [r3, #4]
 800670e:	217e      	movs	r1, #126	; 0x7e
 8006710:	187b      	adds	r3, r7, r1
 8006712:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006714:	187b      	adds	r3, r7, r1
 8006716:	881b      	ldrh	r3, [r3, #0]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d100      	bne.n	800671e <HAL_UART_IRQHandler+0x2fa>
 800671c:	e14e      	b.n	80069bc <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2258      	movs	r2, #88	; 0x58
 8006722:	5a9b      	ldrh	r3, [r3, r2]
 8006724:	187a      	adds	r2, r7, r1
 8006726:	8812      	ldrh	r2, [r2, #0]
 8006728:	429a      	cmp	r2, r3
 800672a:	d300      	bcc.n	800672e <HAL_UART_IRQHandler+0x30a>
 800672c:	e146      	b.n	80069bc <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	187a      	adds	r2, r7, r1
 8006732:	215a      	movs	r1, #90	; 0x5a
 8006734:	8812      	ldrh	r2, [r2, #0]
 8006736:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800673c:	699b      	ldr	r3, [r3, #24]
 800673e:	2b20      	cmp	r3, #32
 8006740:	d06e      	beq.n	8006820 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006742:	f3ef 8310 	mrs	r3, PRIMASK
 8006746:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800674a:	67bb      	str	r3, [r7, #120]	; 0x78
 800674c:	2301      	movs	r3, #1
 800674e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006752:	f383 8810 	msr	PRIMASK, r3
}
 8006756:	46c0      	nop			; (mov r8, r8)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	499a      	ldr	r1, [pc, #616]	; (80069cc <HAL_UART_IRQHandler+0x5a8>)
 8006764:	400a      	ands	r2, r1
 8006766:	601a      	str	r2, [r3, #0]
 8006768:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800676a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800676c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676e:	f383 8810 	msr	PRIMASK, r3
}
 8006772:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006774:	f3ef 8310 	mrs	r3, PRIMASK
 8006778:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800677a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800677c:	677b      	str	r3, [r7, #116]	; 0x74
 800677e:	2301      	movs	r3, #1
 8006780:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006784:	f383 8810 	msr	PRIMASK, r3
}
 8006788:	46c0      	nop			; (mov r8, r8)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	689a      	ldr	r2, [r3, #8]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2101      	movs	r1, #1
 8006796:	438a      	bics	r2, r1
 8006798:	609a      	str	r2, [r3, #8]
 800679a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800679c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800679e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067a0:	f383 8810 	msr	PRIMASK, r3
}
 80067a4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067a6:	f3ef 8310 	mrs	r3, PRIMASK
 80067aa:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80067ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067ae:	673b      	str	r3, [r7, #112]	; 0x70
 80067b0:	2301      	movs	r3, #1
 80067b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067b6:	f383 8810 	msr	PRIMASK, r3
}
 80067ba:	46c0      	nop			; (mov r8, r8)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	689a      	ldr	r2, [r3, #8]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2140      	movs	r1, #64	; 0x40
 80067c8:	438a      	bics	r2, r1
 80067ca:	609a      	str	r2, [r3, #8]
 80067cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067ce:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067d2:	f383 8810 	msr	PRIMASK, r3
}
 80067d6:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2220      	movs	r2, #32
 80067dc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067e4:	f3ef 8310 	mrs	r3, PRIMASK
 80067e8:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80067ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80067ee:	2301      	movs	r3, #1
 80067f0:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067f4:	f383 8810 	msr	PRIMASK, r3
}
 80067f8:	46c0      	nop			; (mov r8, r8)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2110      	movs	r1, #16
 8006806:	438a      	bics	r2, r1
 8006808:	601a      	str	r2, [r3, #0]
 800680a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800680c:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800680e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006810:	f383 8810 	msr	PRIMASK, r3
}
 8006814:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800681a:	0018      	movs	r0, r3
 800681c:	f7fc fa16 	bl	8002c4c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2258      	movs	r2, #88	; 0x58
 8006824:	5a9a      	ldrh	r2, [r3, r2]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	215a      	movs	r1, #90	; 0x5a
 800682a:	5a5b      	ldrh	r3, [r3, r1]
 800682c:	b29b      	uxth	r3, r3
 800682e:	1ad3      	subs	r3, r2, r3
 8006830:	b29a      	uxth	r2, r3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	0011      	movs	r1, r2
 8006836:	0018      	movs	r0, r3
 8006838:	f000 f8dc 	bl	80069f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800683c:	e0be      	b.n	80069bc <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2258      	movs	r2, #88	; 0x58
 8006842:	5a99      	ldrh	r1, [r3, r2]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	225a      	movs	r2, #90	; 0x5a
 8006848:	5a9b      	ldrh	r3, [r3, r2]
 800684a:	b29a      	uxth	r2, r3
 800684c:	208e      	movs	r0, #142	; 0x8e
 800684e:	183b      	adds	r3, r7, r0
 8006850:	1a8a      	subs	r2, r1, r2
 8006852:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	225a      	movs	r2, #90	; 0x5a
 8006858:	5a9b      	ldrh	r3, [r3, r2]
 800685a:	b29b      	uxth	r3, r3
 800685c:	2b00      	cmp	r3, #0
 800685e:	d100      	bne.n	8006862 <HAL_UART_IRQHandler+0x43e>
 8006860:	e0ae      	b.n	80069c0 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8006862:	183b      	adds	r3, r7, r0
 8006864:	881b      	ldrh	r3, [r3, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d100      	bne.n	800686c <HAL_UART_IRQHandler+0x448>
 800686a:	e0a9      	b.n	80069c0 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800686c:	f3ef 8310 	mrs	r3, PRIMASK
 8006870:	60fb      	str	r3, [r7, #12]
  return(result);
 8006872:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006874:	2488      	movs	r4, #136	; 0x88
 8006876:	193a      	adds	r2, r7, r4
 8006878:	6013      	str	r3, [r2, #0]
 800687a:	2301      	movs	r3, #1
 800687c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	f383 8810 	msr	PRIMASK, r3
}
 8006884:	46c0      	nop			; (mov r8, r8)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	494f      	ldr	r1, [pc, #316]	; (80069d0 <HAL_UART_IRQHandler+0x5ac>)
 8006892:	400a      	ands	r2, r1
 8006894:	601a      	str	r2, [r3, #0]
 8006896:	193b      	adds	r3, r7, r4
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	f383 8810 	msr	PRIMASK, r3
}
 80068a2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068a4:	f3ef 8310 	mrs	r3, PRIMASK
 80068a8:	61bb      	str	r3, [r7, #24]
  return(result);
 80068aa:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068ac:	2484      	movs	r4, #132	; 0x84
 80068ae:	193a      	adds	r2, r7, r4
 80068b0:	6013      	str	r3, [r2, #0]
 80068b2:	2301      	movs	r3, #1
 80068b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	f383 8810 	msr	PRIMASK, r3
}
 80068bc:	46c0      	nop			; (mov r8, r8)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	689a      	ldr	r2, [r3, #8]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2101      	movs	r1, #1
 80068ca:	438a      	bics	r2, r1
 80068cc:	609a      	str	r2, [r3, #8]
 80068ce:	193b      	adds	r3, r7, r4
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068d4:	6a3b      	ldr	r3, [r7, #32]
 80068d6:	f383 8810 	msr	PRIMASK, r3
}
 80068da:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2220      	movs	r2, #32
 80068e0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068ee:	f3ef 8310 	mrs	r3, PRIMASK
 80068f2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80068f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068f6:	2480      	movs	r4, #128	; 0x80
 80068f8:	193a      	adds	r2, r7, r4
 80068fa:	6013      	str	r3, [r2, #0]
 80068fc:	2301      	movs	r3, #1
 80068fe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006902:	f383 8810 	msr	PRIMASK, r3
}
 8006906:	46c0      	nop			; (mov r8, r8)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2110      	movs	r1, #16
 8006914:	438a      	bics	r2, r1
 8006916:	601a      	str	r2, [r3, #0]
 8006918:	193b      	adds	r3, r7, r4
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800691e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006920:	f383 8810 	msr	PRIMASK, r3
}
 8006924:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006926:	183b      	adds	r3, r7, r0
 8006928:	881a      	ldrh	r2, [r3, #0]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	0011      	movs	r1, r2
 800692e:	0018      	movs	r0, r3
 8006930:	f000 f860 	bl	80069f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006934:	e044      	b.n	80069c0 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006936:	23a4      	movs	r3, #164	; 0xa4
 8006938:	18fb      	adds	r3, r7, r3
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	2380      	movs	r3, #128	; 0x80
 800693e:	035b      	lsls	r3, r3, #13
 8006940:	4013      	ands	r3, r2
 8006942:	d010      	beq.n	8006966 <HAL_UART_IRQHandler+0x542>
 8006944:	239c      	movs	r3, #156	; 0x9c
 8006946:	18fb      	adds	r3, r7, r3
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	2380      	movs	r3, #128	; 0x80
 800694c:	03db      	lsls	r3, r3, #15
 800694e:	4013      	ands	r3, r2
 8006950:	d009      	beq.n	8006966 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	2280      	movs	r2, #128	; 0x80
 8006958:	0352      	lsls	r2, r2, #13
 800695a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	0018      	movs	r0, r3
 8006960:	f000 fdfc 	bl	800755c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006964:	e02f      	b.n	80069c6 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006966:	23a4      	movs	r3, #164	; 0xa4
 8006968:	18fb      	adds	r3, r7, r3
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2280      	movs	r2, #128	; 0x80
 800696e:	4013      	ands	r3, r2
 8006970:	d00f      	beq.n	8006992 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006972:	23a0      	movs	r3, #160	; 0xa0
 8006974:	18fb      	adds	r3, r7, r3
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2280      	movs	r2, #128	; 0x80
 800697a:	4013      	ands	r3, r2
 800697c:	d009      	beq.n	8006992 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006982:	2b00      	cmp	r3, #0
 8006984:	d01e      	beq.n	80069c4 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	0010      	movs	r0, r2
 800698e:	4798      	blx	r3
    }
    return;
 8006990:	e018      	b.n	80069c4 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006992:	23a4      	movs	r3, #164	; 0xa4
 8006994:	18fb      	adds	r3, r7, r3
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2240      	movs	r2, #64	; 0x40
 800699a:	4013      	ands	r3, r2
 800699c:	d013      	beq.n	80069c6 <HAL_UART_IRQHandler+0x5a2>
 800699e:	23a0      	movs	r3, #160	; 0xa0
 80069a0:	18fb      	adds	r3, r7, r3
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	2240      	movs	r2, #64	; 0x40
 80069a6:	4013      	ands	r3, r2
 80069a8:	d00d      	beq.n	80069c6 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	0018      	movs	r0, r3
 80069ae:	f000 fc42 	bl	8007236 <UART_EndTransmit_IT>
    return;
 80069b2:	e008      	b.n	80069c6 <HAL_UART_IRQHandler+0x5a2>
      return;
 80069b4:	46c0      	nop			; (mov r8, r8)
 80069b6:	e006      	b.n	80069c6 <HAL_UART_IRQHandler+0x5a2>
    return;
 80069b8:	46c0      	nop			; (mov r8, r8)
 80069ba:	e004      	b.n	80069c6 <HAL_UART_IRQHandler+0x5a2>
      return;
 80069bc:	46c0      	nop			; (mov r8, r8)
 80069be:	e002      	b.n	80069c6 <HAL_UART_IRQHandler+0x5a2>
      return;
 80069c0:	46c0      	nop			; (mov r8, r8)
 80069c2:	e000      	b.n	80069c6 <HAL_UART_IRQHandler+0x5a2>
    return;
 80069c4:	46c0      	nop			; (mov r8, r8)
  }

}
 80069c6:	46bd      	mov	sp, r7
 80069c8:	b02b      	add	sp, #172	; 0xac
 80069ca:	bd90      	pop	{r4, r7, pc}
 80069cc:	fffffeff 	.word	0xfffffeff
 80069d0:	fffffedf 	.word	0xfffffedf

080069d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b082      	sub	sp, #8
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80069dc:	46c0      	nop			; (mov r8, r8)
 80069de:	46bd      	mov	sp, r7
 80069e0:	b002      	add	sp, #8
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80069ec:	46c0      	nop			; (mov r8, r8)
 80069ee:	46bd      	mov	sp, r7
 80069f0:	b002      	add	sp, #8
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	000a      	movs	r2, r1
 80069fe:	1cbb      	adds	r3, r7, #2
 8006a00:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a02:	46c0      	nop			; (mov r8, r8)
 8006a04:	46bd      	mov	sp, r7
 8006a06:	b002      	add	sp, #8
 8006a08:	bd80      	pop	{r7, pc}
	...

08006a0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b088      	sub	sp, #32
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a14:	231e      	movs	r3, #30
 8006a16:	18fb      	adds	r3, r7, r3
 8006a18:	2200      	movs	r2, #0
 8006a1a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	689a      	ldr	r2, [r3, #8]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	431a      	orrs	r2, r3
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	695b      	ldr	r3, [r3, #20]
 8006a2a:	431a      	orrs	r2, r3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	69db      	ldr	r3, [r3, #28]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a8d      	ldr	r2, [pc, #564]	; (8006c70 <UART_SetConfig+0x264>)
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	0019      	movs	r1, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	697a      	ldr	r2, [r7, #20]
 8006a46:	430a      	orrs	r2, r1
 8006a48:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	4a88      	ldr	r2, [pc, #544]	; (8006c74 <UART_SetConfig+0x268>)
 8006a52:	4013      	ands	r3, r2
 8006a54:	0019      	movs	r1, r3
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	68da      	ldr	r2, [r3, #12]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	430a      	orrs	r2, r1
 8006a60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	699b      	ldr	r3, [r3, #24]
 8006a66:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6a1b      	ldr	r3, [r3, #32]
 8006a6c:	697a      	ldr	r2, [r7, #20]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	4a7f      	ldr	r2, [pc, #508]	; (8006c78 <UART_SetConfig+0x26c>)
 8006a7a:	4013      	ands	r3, r2
 8006a7c:	0019      	movs	r1, r3
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	697a      	ldr	r2, [r7, #20]
 8006a84:	430a      	orrs	r2, r1
 8006a86:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a7b      	ldr	r2, [pc, #492]	; (8006c7c <UART_SetConfig+0x270>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d127      	bne.n	8006ae2 <UART_SetConfig+0xd6>
 8006a92:	4b7b      	ldr	r3, [pc, #492]	; (8006c80 <UART_SetConfig+0x274>)
 8006a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a96:	2203      	movs	r2, #3
 8006a98:	4013      	ands	r3, r2
 8006a9a:	2b03      	cmp	r3, #3
 8006a9c:	d00d      	beq.n	8006aba <UART_SetConfig+0xae>
 8006a9e:	d81b      	bhi.n	8006ad8 <UART_SetConfig+0xcc>
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	d014      	beq.n	8006ace <UART_SetConfig+0xc2>
 8006aa4:	d818      	bhi.n	8006ad8 <UART_SetConfig+0xcc>
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d002      	beq.n	8006ab0 <UART_SetConfig+0xa4>
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d00a      	beq.n	8006ac4 <UART_SetConfig+0xb8>
 8006aae:	e013      	b.n	8006ad8 <UART_SetConfig+0xcc>
 8006ab0:	231f      	movs	r3, #31
 8006ab2:	18fb      	adds	r3, r7, r3
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	701a      	strb	r2, [r3, #0]
 8006ab8:	e021      	b.n	8006afe <UART_SetConfig+0xf2>
 8006aba:	231f      	movs	r3, #31
 8006abc:	18fb      	adds	r3, r7, r3
 8006abe:	2202      	movs	r2, #2
 8006ac0:	701a      	strb	r2, [r3, #0]
 8006ac2:	e01c      	b.n	8006afe <UART_SetConfig+0xf2>
 8006ac4:	231f      	movs	r3, #31
 8006ac6:	18fb      	adds	r3, r7, r3
 8006ac8:	2204      	movs	r2, #4
 8006aca:	701a      	strb	r2, [r3, #0]
 8006acc:	e017      	b.n	8006afe <UART_SetConfig+0xf2>
 8006ace:	231f      	movs	r3, #31
 8006ad0:	18fb      	adds	r3, r7, r3
 8006ad2:	2208      	movs	r2, #8
 8006ad4:	701a      	strb	r2, [r3, #0]
 8006ad6:	e012      	b.n	8006afe <UART_SetConfig+0xf2>
 8006ad8:	231f      	movs	r3, #31
 8006ada:	18fb      	adds	r3, r7, r3
 8006adc:	2210      	movs	r2, #16
 8006ade:	701a      	strb	r2, [r3, #0]
 8006ae0:	e00d      	b.n	8006afe <UART_SetConfig+0xf2>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a67      	ldr	r2, [pc, #412]	; (8006c84 <UART_SetConfig+0x278>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d104      	bne.n	8006af6 <UART_SetConfig+0xea>
 8006aec:	231f      	movs	r3, #31
 8006aee:	18fb      	adds	r3, r7, r3
 8006af0:	2200      	movs	r2, #0
 8006af2:	701a      	strb	r2, [r3, #0]
 8006af4:	e003      	b.n	8006afe <UART_SetConfig+0xf2>
 8006af6:	231f      	movs	r3, #31
 8006af8:	18fb      	adds	r3, r7, r3
 8006afa:	2210      	movs	r2, #16
 8006afc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	69da      	ldr	r2, [r3, #28]
 8006b02:	2380      	movs	r3, #128	; 0x80
 8006b04:	021b      	lsls	r3, r3, #8
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d15d      	bne.n	8006bc6 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8006b0a:	231f      	movs	r3, #31
 8006b0c:	18fb      	adds	r3, r7, r3
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	2b08      	cmp	r3, #8
 8006b12:	d015      	beq.n	8006b40 <UART_SetConfig+0x134>
 8006b14:	dc18      	bgt.n	8006b48 <UART_SetConfig+0x13c>
 8006b16:	2b04      	cmp	r3, #4
 8006b18:	d00d      	beq.n	8006b36 <UART_SetConfig+0x12a>
 8006b1a:	dc15      	bgt.n	8006b48 <UART_SetConfig+0x13c>
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d002      	beq.n	8006b26 <UART_SetConfig+0x11a>
 8006b20:	2b02      	cmp	r3, #2
 8006b22:	d005      	beq.n	8006b30 <UART_SetConfig+0x124>
 8006b24:	e010      	b.n	8006b48 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b26:	f7fd fd63 	bl	80045f0 <HAL_RCC_GetPCLK1Freq>
 8006b2a:	0003      	movs	r3, r0
 8006b2c:	61bb      	str	r3, [r7, #24]
        break;
 8006b2e:	e012      	b.n	8006b56 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b30:	4b55      	ldr	r3, [pc, #340]	; (8006c88 <UART_SetConfig+0x27c>)
 8006b32:	61bb      	str	r3, [r7, #24]
        break;
 8006b34:	e00f      	b.n	8006b56 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b36:	f7fd fced 	bl	8004514 <HAL_RCC_GetSysClockFreq>
 8006b3a:	0003      	movs	r3, r0
 8006b3c:	61bb      	str	r3, [r7, #24]
        break;
 8006b3e:	e00a      	b.n	8006b56 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b40:	2380      	movs	r3, #128	; 0x80
 8006b42:	021b      	lsls	r3, r3, #8
 8006b44:	61bb      	str	r3, [r7, #24]
        break;
 8006b46:	e006      	b.n	8006b56 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006b4c:	231e      	movs	r3, #30
 8006b4e:	18fb      	adds	r3, r7, r3
 8006b50:	2201      	movs	r2, #1
 8006b52:	701a      	strb	r2, [r3, #0]
        break;
 8006b54:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d100      	bne.n	8006b5e <UART_SetConfig+0x152>
 8006b5c:	e07b      	b.n	8006c56 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	005a      	lsls	r2, r3, #1
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	085b      	lsrs	r3, r3, #1
 8006b68:	18d2      	adds	r2, r2, r3
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	0019      	movs	r1, r3
 8006b70:	0010      	movs	r0, r2
 8006b72:	f7f9 fac9 	bl	8000108 <__udivsi3>
 8006b76:	0003      	movs	r3, r0
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	2b0f      	cmp	r3, #15
 8006b80:	d91c      	bls.n	8006bbc <UART_SetConfig+0x1b0>
 8006b82:	693a      	ldr	r2, [r7, #16]
 8006b84:	2380      	movs	r3, #128	; 0x80
 8006b86:	025b      	lsls	r3, r3, #9
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d217      	bcs.n	8006bbc <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	b29a      	uxth	r2, r3
 8006b90:	200e      	movs	r0, #14
 8006b92:	183b      	adds	r3, r7, r0
 8006b94:	210f      	movs	r1, #15
 8006b96:	438a      	bics	r2, r1
 8006b98:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	085b      	lsrs	r3, r3, #1
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	2207      	movs	r2, #7
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	b299      	uxth	r1, r3
 8006ba6:	183b      	adds	r3, r7, r0
 8006ba8:	183a      	adds	r2, r7, r0
 8006baa:	8812      	ldrh	r2, [r2, #0]
 8006bac:	430a      	orrs	r2, r1
 8006bae:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	183a      	adds	r2, r7, r0
 8006bb6:	8812      	ldrh	r2, [r2, #0]
 8006bb8:	60da      	str	r2, [r3, #12]
 8006bba:	e04c      	b.n	8006c56 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8006bbc:	231e      	movs	r3, #30
 8006bbe:	18fb      	adds	r3, r7, r3
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	701a      	strb	r2, [r3, #0]
 8006bc4:	e047      	b.n	8006c56 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006bc6:	231f      	movs	r3, #31
 8006bc8:	18fb      	adds	r3, r7, r3
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	2b08      	cmp	r3, #8
 8006bce:	d015      	beq.n	8006bfc <UART_SetConfig+0x1f0>
 8006bd0:	dc18      	bgt.n	8006c04 <UART_SetConfig+0x1f8>
 8006bd2:	2b04      	cmp	r3, #4
 8006bd4:	d00d      	beq.n	8006bf2 <UART_SetConfig+0x1e6>
 8006bd6:	dc15      	bgt.n	8006c04 <UART_SetConfig+0x1f8>
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d002      	beq.n	8006be2 <UART_SetConfig+0x1d6>
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d005      	beq.n	8006bec <UART_SetConfig+0x1e0>
 8006be0:	e010      	b.n	8006c04 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006be2:	f7fd fd05 	bl	80045f0 <HAL_RCC_GetPCLK1Freq>
 8006be6:	0003      	movs	r3, r0
 8006be8:	61bb      	str	r3, [r7, #24]
        break;
 8006bea:	e012      	b.n	8006c12 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bec:	4b26      	ldr	r3, [pc, #152]	; (8006c88 <UART_SetConfig+0x27c>)
 8006bee:	61bb      	str	r3, [r7, #24]
        break;
 8006bf0:	e00f      	b.n	8006c12 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bf2:	f7fd fc8f 	bl	8004514 <HAL_RCC_GetSysClockFreq>
 8006bf6:	0003      	movs	r3, r0
 8006bf8:	61bb      	str	r3, [r7, #24]
        break;
 8006bfa:	e00a      	b.n	8006c12 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bfc:	2380      	movs	r3, #128	; 0x80
 8006bfe:	021b      	lsls	r3, r3, #8
 8006c00:	61bb      	str	r3, [r7, #24]
        break;
 8006c02:	e006      	b.n	8006c12 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8006c04:	2300      	movs	r3, #0
 8006c06:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006c08:	231e      	movs	r3, #30
 8006c0a:	18fb      	adds	r3, r7, r3
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	701a      	strb	r2, [r3, #0]
        break;
 8006c10:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d01e      	beq.n	8006c56 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	085a      	lsrs	r2, r3, #1
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	18d2      	adds	r2, r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	0019      	movs	r1, r3
 8006c28:	0010      	movs	r0, r2
 8006c2a:	f7f9 fa6d 	bl	8000108 <__udivsi3>
 8006c2e:	0003      	movs	r3, r0
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	2b0f      	cmp	r3, #15
 8006c38:	d909      	bls.n	8006c4e <UART_SetConfig+0x242>
 8006c3a:	693a      	ldr	r2, [r7, #16]
 8006c3c:	2380      	movs	r3, #128	; 0x80
 8006c3e:	025b      	lsls	r3, r3, #9
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d204      	bcs.n	8006c4e <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	693a      	ldr	r2, [r7, #16]
 8006c4a:	60da      	str	r2, [r3, #12]
 8006c4c:	e003      	b.n	8006c56 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8006c4e:	231e      	movs	r3, #30
 8006c50:	18fb      	adds	r3, r7, r3
 8006c52:	2201      	movs	r2, #1
 8006c54:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006c62:	231e      	movs	r3, #30
 8006c64:	18fb      	adds	r3, r7, r3
 8006c66:	781b      	ldrb	r3, [r3, #0]
}
 8006c68:	0018      	movs	r0, r3
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	b008      	add	sp, #32
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	ffff69f3 	.word	0xffff69f3
 8006c74:	ffffcfff 	.word	0xffffcfff
 8006c78:	fffff4ff 	.word	0xfffff4ff
 8006c7c:	40013800 	.word	0x40013800
 8006c80:	40021000 	.word	0x40021000
 8006c84:	40004400 	.word	0x40004400
 8006c88:	007a1200 	.word	0x007a1200

08006c8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c98:	2201      	movs	r2, #1
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	d00b      	beq.n	8006cb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	4a4a      	ldr	r2, [pc, #296]	; (8006dd0 <UART_AdvFeatureConfig+0x144>)
 8006ca6:	4013      	ands	r3, r2
 8006ca8:	0019      	movs	r1, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	430a      	orrs	r2, r1
 8006cb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cba:	2202      	movs	r2, #2
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	d00b      	beq.n	8006cd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	4a43      	ldr	r2, [pc, #268]	; (8006dd4 <UART_AdvFeatureConfig+0x148>)
 8006cc8:	4013      	ands	r3, r2
 8006cca:	0019      	movs	r1, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	430a      	orrs	r2, r1
 8006cd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cdc:	2204      	movs	r2, #4
 8006cde:	4013      	ands	r3, r2
 8006ce0:	d00b      	beq.n	8006cfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	4a3b      	ldr	r2, [pc, #236]	; (8006dd8 <UART_AdvFeatureConfig+0x14c>)
 8006cea:	4013      	ands	r3, r2
 8006cec:	0019      	movs	r1, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	430a      	orrs	r2, r1
 8006cf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfe:	2208      	movs	r2, #8
 8006d00:	4013      	ands	r3, r2
 8006d02:	d00b      	beq.n	8006d1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	4a34      	ldr	r2, [pc, #208]	; (8006ddc <UART_AdvFeatureConfig+0x150>)
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	0019      	movs	r1, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	430a      	orrs	r2, r1
 8006d1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d20:	2210      	movs	r2, #16
 8006d22:	4013      	ands	r3, r2
 8006d24:	d00b      	beq.n	8006d3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	4a2c      	ldr	r2, [pc, #176]	; (8006de0 <UART_AdvFeatureConfig+0x154>)
 8006d2e:	4013      	ands	r3, r2
 8006d30:	0019      	movs	r1, r3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	430a      	orrs	r2, r1
 8006d3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d42:	2220      	movs	r2, #32
 8006d44:	4013      	ands	r3, r2
 8006d46:	d00b      	beq.n	8006d60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	4a25      	ldr	r2, [pc, #148]	; (8006de4 <UART_AdvFeatureConfig+0x158>)
 8006d50:	4013      	ands	r3, r2
 8006d52:	0019      	movs	r1, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	430a      	orrs	r2, r1
 8006d5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d64:	2240      	movs	r2, #64	; 0x40
 8006d66:	4013      	ands	r3, r2
 8006d68:	d01d      	beq.n	8006da6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	4a1d      	ldr	r2, [pc, #116]	; (8006de8 <UART_AdvFeatureConfig+0x15c>)
 8006d72:	4013      	ands	r3, r2
 8006d74:	0019      	movs	r1, r3
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	430a      	orrs	r2, r1
 8006d80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d86:	2380      	movs	r3, #128	; 0x80
 8006d88:	035b      	lsls	r3, r3, #13
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d10b      	bne.n	8006da6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	4a15      	ldr	r2, [pc, #84]	; (8006dec <UART_AdvFeatureConfig+0x160>)
 8006d96:	4013      	ands	r3, r2
 8006d98:	0019      	movs	r1, r3
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	430a      	orrs	r2, r1
 8006da4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006daa:	2280      	movs	r2, #128	; 0x80
 8006dac:	4013      	ands	r3, r2
 8006dae:	d00b      	beq.n	8006dc8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	4a0e      	ldr	r2, [pc, #56]	; (8006df0 <UART_AdvFeatureConfig+0x164>)
 8006db8:	4013      	ands	r3, r2
 8006dba:	0019      	movs	r1, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	430a      	orrs	r2, r1
 8006dc6:	605a      	str	r2, [r3, #4]
  }
}
 8006dc8:	46c0      	nop			; (mov r8, r8)
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	b002      	add	sp, #8
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	fffdffff 	.word	0xfffdffff
 8006dd4:	fffeffff 	.word	0xfffeffff
 8006dd8:	fffbffff 	.word	0xfffbffff
 8006ddc:	ffff7fff 	.word	0xffff7fff
 8006de0:	ffffefff 	.word	0xffffefff
 8006de4:	ffffdfff 	.word	0xffffdfff
 8006de8:	ffefffff 	.word	0xffefffff
 8006dec:	ff9fffff 	.word	0xff9fffff
 8006df0:	fff7ffff 	.word	0xfff7ffff

08006df4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b086      	sub	sp, #24
 8006df8:	af02      	add	r7, sp, #8
 8006dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2280      	movs	r2, #128	; 0x80
 8006e00:	2100      	movs	r1, #0
 8006e02:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e04:	f7fb f8f4 	bl	8001ff0 <HAL_GetTick>
 8006e08:	0003      	movs	r3, r0
 8006e0a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2208      	movs	r2, #8
 8006e14:	4013      	ands	r3, r2
 8006e16:	2b08      	cmp	r3, #8
 8006e18:	d10c      	bne.n	8006e34 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2280      	movs	r2, #128	; 0x80
 8006e1e:	0391      	lsls	r1, r2, #14
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	4a17      	ldr	r2, [pc, #92]	; (8006e80 <UART_CheckIdleState+0x8c>)
 8006e24:	9200      	str	r2, [sp, #0]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f000 f82c 	bl	8006e84 <UART_WaitOnFlagUntilTimeout>
 8006e2c:	1e03      	subs	r3, r0, #0
 8006e2e:	d001      	beq.n	8006e34 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e30:	2303      	movs	r3, #3
 8006e32:	e021      	b.n	8006e78 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2204      	movs	r2, #4
 8006e3c:	4013      	ands	r3, r2
 8006e3e:	2b04      	cmp	r3, #4
 8006e40:	d10c      	bne.n	8006e5c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2280      	movs	r2, #128	; 0x80
 8006e46:	03d1      	lsls	r1, r2, #15
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	4a0d      	ldr	r2, [pc, #52]	; (8006e80 <UART_CheckIdleState+0x8c>)
 8006e4c:	9200      	str	r2, [sp, #0]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f000 f818 	bl	8006e84 <UART_WaitOnFlagUntilTimeout>
 8006e54:	1e03      	subs	r3, r0, #0
 8006e56:	d001      	beq.n	8006e5c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	e00d      	b.n	8006e78 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2220      	movs	r2, #32
 8006e60:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2220      	movs	r2, #32
 8006e66:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2274      	movs	r2, #116	; 0x74
 8006e72:	2100      	movs	r1, #0
 8006e74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	0018      	movs	r0, r3
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	b004      	add	sp, #16
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	01ffffff 	.word	0x01ffffff

08006e84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b094      	sub	sp, #80	; 0x50
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	603b      	str	r3, [r7, #0]
 8006e90:	1dfb      	adds	r3, r7, #7
 8006e92:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e94:	e0a3      	b.n	8006fde <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e98:	3301      	adds	r3, #1
 8006e9a:	d100      	bne.n	8006e9e <UART_WaitOnFlagUntilTimeout+0x1a>
 8006e9c:	e09f      	b.n	8006fde <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e9e:	f7fb f8a7 	bl	8001ff0 <HAL_GetTick>
 8006ea2:	0002      	movs	r2, r0
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	1ad3      	subs	r3, r2, r3
 8006ea8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d302      	bcc.n	8006eb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006eae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d13d      	bne.n	8006f30 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006eb4:	f3ef 8310 	mrs	r3, PRIMASK
 8006eb8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ebc:	647b      	str	r3, [r7, #68]	; 0x44
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec4:	f383 8810 	msr	PRIMASK, r3
}
 8006ec8:	46c0      	nop			; (mov r8, r8)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	494c      	ldr	r1, [pc, #304]	; (8007008 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006ed6:	400a      	ands	r2, r1
 8006ed8:	601a      	str	r2, [r3, #0]
 8006eda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006edc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee0:	f383 8810 	msr	PRIMASK, r3
}
 8006ee4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ee6:	f3ef 8310 	mrs	r3, PRIMASK
 8006eea:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eee:	643b      	str	r3, [r7, #64]	; 0x40
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef6:	f383 8810 	msr	PRIMASK, r3
}
 8006efa:	46c0      	nop			; (mov r8, r8)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	689a      	ldr	r2, [r3, #8]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	2101      	movs	r1, #1
 8006f08:	438a      	bics	r2, r1
 8006f0a:	609a      	str	r2, [r3, #8]
 8006f0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f12:	f383 8810 	msr	PRIMASK, r3
}
 8006f16:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2220      	movs	r2, #32
 8006f1c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2220      	movs	r2, #32
 8006f22:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2274      	movs	r2, #116	; 0x74
 8006f28:	2100      	movs	r1, #0
 8006f2a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	e067      	b.n	8007000 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2204      	movs	r2, #4
 8006f38:	4013      	ands	r3, r2
 8006f3a:	d050      	beq.n	8006fde <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	69da      	ldr	r2, [r3, #28]
 8006f42:	2380      	movs	r3, #128	; 0x80
 8006f44:	011b      	lsls	r3, r3, #4
 8006f46:	401a      	ands	r2, r3
 8006f48:	2380      	movs	r3, #128	; 0x80
 8006f4a:	011b      	lsls	r3, r3, #4
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d146      	bne.n	8006fde <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2280      	movs	r2, #128	; 0x80
 8006f56:	0112      	lsls	r2, r2, #4
 8006f58:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f5a:	f3ef 8310 	mrs	r3, PRIMASK
 8006f5e:	613b      	str	r3, [r7, #16]
  return(result);
 8006f60:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f64:	2301      	movs	r3, #1
 8006f66:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	f383 8810 	msr	PRIMASK, r3
}
 8006f6e:	46c0      	nop			; (mov r8, r8)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4923      	ldr	r1, [pc, #140]	; (8007008 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006f7c:	400a      	ands	r2, r1
 8006f7e:	601a      	str	r2, [r3, #0]
 8006f80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f82:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	f383 8810 	msr	PRIMASK, r3
}
 8006f8a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f8c:	f3ef 8310 	mrs	r3, PRIMASK
 8006f90:	61fb      	str	r3, [r7, #28]
  return(result);
 8006f92:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f94:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f96:	2301      	movs	r3, #1
 8006f98:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f9a:	6a3b      	ldr	r3, [r7, #32]
 8006f9c:	f383 8810 	msr	PRIMASK, r3
}
 8006fa0:	46c0      	nop			; (mov r8, r8)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	689a      	ldr	r2, [r3, #8]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2101      	movs	r1, #1
 8006fae:	438a      	bics	r2, r1
 8006fb0:	609a      	str	r2, [r3, #8]
 8006fb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fb4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb8:	f383 8810 	msr	PRIMASK, r3
}
 8006fbc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2220      	movs	r2, #32
 8006fc2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2220      	movs	r2, #32
 8006fc8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2280      	movs	r2, #128	; 0x80
 8006fce:	2120      	movs	r1, #32
 8006fd0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2274      	movs	r2, #116	; 0x74
 8006fd6:	2100      	movs	r1, #0
 8006fd8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006fda:	2303      	movs	r3, #3
 8006fdc:	e010      	b.n	8007000 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	69db      	ldr	r3, [r3, #28]
 8006fe4:	68ba      	ldr	r2, [r7, #8]
 8006fe6:	4013      	ands	r3, r2
 8006fe8:	68ba      	ldr	r2, [r7, #8]
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	425a      	negs	r2, r3
 8006fee:	4153      	adcs	r3, r2
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	001a      	movs	r2, r3
 8006ff4:	1dfb      	adds	r3, r7, #7
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d100      	bne.n	8006ffe <UART_WaitOnFlagUntilTimeout+0x17a>
 8006ffc:	e74b      	b.n	8006e96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ffe:	2300      	movs	r3, #0
}
 8007000:	0018      	movs	r0, r3
 8007002:	46bd      	mov	sp, r7
 8007004:	b014      	add	sp, #80	; 0x50
 8007006:	bd80      	pop	{r7, pc}
 8007008:	fffffe5f 	.word	0xfffffe5f

0800700c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b08c      	sub	sp, #48	; 0x30
 8007010:	af00      	add	r7, sp, #0
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	60b9      	str	r1, [r7, #8]
 8007016:	1dbb      	adds	r3, r7, #6
 8007018:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	68ba      	ldr	r2, [r7, #8]
 800701e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	1dba      	adds	r2, r7, #6
 8007024:	2158      	movs	r1, #88	; 0x58
 8007026:	8812      	ldrh	r2, [r2, #0]
 8007028:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	1dba      	adds	r2, r7, #6
 800702e:	215a      	movs	r1, #90	; 0x5a
 8007030:	8812      	ldrh	r2, [r2, #0]
 8007032:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2200      	movs	r2, #0
 8007038:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	689a      	ldr	r2, [r3, #8]
 800703e:	2380      	movs	r3, #128	; 0x80
 8007040:	015b      	lsls	r3, r3, #5
 8007042:	429a      	cmp	r2, r3
 8007044:	d10d      	bne.n	8007062 <UART_Start_Receive_IT+0x56>
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	691b      	ldr	r3, [r3, #16]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d104      	bne.n	8007058 <UART_Start_Receive_IT+0x4c>
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	225c      	movs	r2, #92	; 0x5c
 8007052:	4939      	ldr	r1, [pc, #228]	; (8007138 <UART_Start_Receive_IT+0x12c>)
 8007054:	5299      	strh	r1, [r3, r2]
 8007056:	e01a      	b.n	800708e <UART_Start_Receive_IT+0x82>
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	225c      	movs	r2, #92	; 0x5c
 800705c:	21ff      	movs	r1, #255	; 0xff
 800705e:	5299      	strh	r1, [r3, r2]
 8007060:	e015      	b.n	800708e <UART_Start_Receive_IT+0x82>
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d10d      	bne.n	8007086 <UART_Start_Receive_IT+0x7a>
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d104      	bne.n	800707c <UART_Start_Receive_IT+0x70>
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	225c      	movs	r2, #92	; 0x5c
 8007076:	21ff      	movs	r1, #255	; 0xff
 8007078:	5299      	strh	r1, [r3, r2]
 800707a:	e008      	b.n	800708e <UART_Start_Receive_IT+0x82>
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	225c      	movs	r2, #92	; 0x5c
 8007080:	217f      	movs	r1, #127	; 0x7f
 8007082:	5299      	strh	r1, [r3, r2]
 8007084:	e003      	b.n	800708e <UART_Start_Receive_IT+0x82>
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	225c      	movs	r2, #92	; 0x5c
 800708a:	2100      	movs	r1, #0
 800708c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2280      	movs	r2, #128	; 0x80
 8007092:	2100      	movs	r1, #0
 8007094:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2222      	movs	r2, #34	; 0x22
 800709a:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800709c:	f3ef 8310 	mrs	r3, PRIMASK
 80070a0:	61fb      	str	r3, [r7, #28]
  return(result);
 80070a2:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070a6:	2301      	movs	r3, #1
 80070a8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070aa:	6a3b      	ldr	r3, [r7, #32]
 80070ac:	f383 8810 	msr	PRIMASK, r3
}
 80070b0:	46c0      	nop			; (mov r8, r8)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	689a      	ldr	r2, [r3, #8]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2101      	movs	r1, #1
 80070be:	430a      	orrs	r2, r1
 80070c0:	609a      	str	r2, [r3, #8]
 80070c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c8:	f383 8810 	msr	PRIMASK, r3
}
 80070cc:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	689a      	ldr	r2, [r3, #8]
 80070d2:	2380      	movs	r3, #128	; 0x80
 80070d4:	015b      	lsls	r3, r3, #5
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d107      	bne.n	80070ea <UART_Start_Receive_IT+0xde>
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d103      	bne.n	80070ea <UART_Start_Receive_IT+0xde>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	4a15      	ldr	r2, [pc, #84]	; (800713c <UART_Start_Receive_IT+0x130>)
 80070e6:	665a      	str	r2, [r3, #100]	; 0x64
 80070e8:	e002      	b.n	80070f0 <UART_Start_Receive_IT+0xe4>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	4a14      	ldr	r2, [pc, #80]	; (8007140 <UART_Start_Receive_IT+0x134>)
 80070ee:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2274      	movs	r2, #116	; 0x74
 80070f4:	2100      	movs	r1, #0
 80070f6:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070f8:	f3ef 8310 	mrs	r3, PRIMASK
 80070fc:	613b      	str	r3, [r7, #16]
  return(result);
 80070fe:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007100:	62bb      	str	r3, [r7, #40]	; 0x28
 8007102:	2301      	movs	r3, #1
 8007104:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	f383 8810 	msr	PRIMASK, r3
}
 800710c:	46c0      	nop			; (mov r8, r8)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2190      	movs	r1, #144	; 0x90
 800711a:	0049      	lsls	r1, r1, #1
 800711c:	430a      	orrs	r2, r1
 800711e:	601a      	str	r2, [r3, #0]
 8007120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007122:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	f383 8810 	msr	PRIMASK, r3
}
 800712a:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	0018      	movs	r0, r3
 8007130:	46bd      	mov	sp, r7
 8007132:	b00c      	add	sp, #48	; 0x30
 8007134:	bd80      	pop	{r7, pc}
 8007136:	46c0      	nop			; (mov r8, r8)
 8007138:	000001ff 	.word	0x000001ff
 800713c:	080073f5 	.word	0x080073f5
 8007140:	0800728d 	.word	0x0800728d

08007144 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b08e      	sub	sp, #56	; 0x38
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800714c:	f3ef 8310 	mrs	r3, PRIMASK
 8007150:	617b      	str	r3, [r7, #20]
  return(result);
 8007152:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007154:	637b      	str	r3, [r7, #52]	; 0x34
 8007156:	2301      	movs	r3, #1
 8007158:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	f383 8810 	msr	PRIMASK, r3
}
 8007160:	46c0      	nop			; (mov r8, r8)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4925      	ldr	r1, [pc, #148]	; (8007204 <UART_EndRxTransfer+0xc0>)
 800716e:	400a      	ands	r2, r1
 8007170:	601a      	str	r2, [r3, #0]
 8007172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007174:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	f383 8810 	msr	PRIMASK, r3
}
 800717c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800717e:	f3ef 8310 	mrs	r3, PRIMASK
 8007182:	623b      	str	r3, [r7, #32]
  return(result);
 8007184:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007186:	633b      	str	r3, [r7, #48]	; 0x30
 8007188:	2301      	movs	r3, #1
 800718a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800718c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718e:	f383 8810 	msr	PRIMASK, r3
}
 8007192:	46c0      	nop			; (mov r8, r8)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	689a      	ldr	r2, [r3, #8]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2101      	movs	r1, #1
 80071a0:	438a      	bics	r2, r1
 80071a2:	609a      	str	r2, [r3, #8]
 80071a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071aa:	f383 8810 	msr	PRIMASK, r3
}
 80071ae:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d118      	bne.n	80071ea <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071b8:	f3ef 8310 	mrs	r3, PRIMASK
 80071bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80071be:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071c2:	2301      	movs	r3, #1
 80071c4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f383 8810 	msr	PRIMASK, r3
}
 80071cc:	46c0      	nop			; (mov r8, r8)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2110      	movs	r1, #16
 80071da:	438a      	bics	r2, r1
 80071dc:	601a      	str	r2, [r3, #0]
 80071de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	f383 8810 	msr	PRIMASK, r3
}
 80071e8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2220      	movs	r2, #32
 80071ee:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	665a      	str	r2, [r3, #100]	; 0x64
}
 80071fc:	46c0      	nop			; (mov r8, r8)
 80071fe:	46bd      	mov	sp, r7
 8007200:	b00e      	add	sp, #56	; 0x38
 8007202:	bd80      	pop	{r7, pc}
 8007204:	fffffedf 	.word	0xfffffedf

08007208 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007214:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	225a      	movs	r2, #90	; 0x5a
 800721a:	2100      	movs	r1, #0
 800721c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2252      	movs	r2, #82	; 0x52
 8007222:	2100      	movs	r1, #0
 8007224:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	0018      	movs	r0, r3
 800722a:	f7ff fbdb 	bl	80069e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800722e:	46c0      	nop			; (mov r8, r8)
 8007230:	46bd      	mov	sp, r7
 8007232:	b004      	add	sp, #16
 8007234:	bd80      	pop	{r7, pc}

08007236 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b086      	sub	sp, #24
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800723e:	f3ef 8310 	mrs	r3, PRIMASK
 8007242:	60bb      	str	r3, [r7, #8]
  return(result);
 8007244:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007246:	617b      	str	r3, [r7, #20]
 8007248:	2301      	movs	r3, #1
 800724a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f383 8810 	msr	PRIMASK, r3
}
 8007252:	46c0      	nop			; (mov r8, r8)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2140      	movs	r1, #64	; 0x40
 8007260:	438a      	bics	r2, r1
 8007262:	601a      	str	r2, [r3, #0]
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	f383 8810 	msr	PRIMASK, r3
}
 800726e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2220      	movs	r2, #32
 8007274:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	0018      	movs	r0, r3
 8007280:	f7ff fba8 	bl	80069d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007284:	46c0      	nop			; (mov r8, r8)
 8007286:	46bd      	mov	sp, r7
 8007288:	b006      	add	sp, #24
 800728a:	bd80      	pop	{r7, pc}

0800728c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b090      	sub	sp, #64	; 0x40
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007294:	203e      	movs	r0, #62	; 0x3e
 8007296:	183b      	adds	r3, r7, r0
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	215c      	movs	r1, #92	; 0x5c
 800729c:	5a52      	ldrh	r2, [r2, r1]
 800729e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072a4:	2b22      	cmp	r3, #34	; 0x22
 80072a6:	d000      	beq.n	80072aa <UART_RxISR_8BIT+0x1e>
 80072a8:	e095      	b.n	80073d6 <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	213c      	movs	r1, #60	; 0x3c
 80072b0:	187b      	adds	r3, r7, r1
 80072b2:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80072b4:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80072b6:	187b      	adds	r3, r7, r1
 80072b8:	881b      	ldrh	r3, [r3, #0]
 80072ba:	b2da      	uxtb	r2, r3
 80072bc:	183b      	adds	r3, r7, r0
 80072be:	881b      	ldrh	r3, [r3, #0]
 80072c0:	b2d9      	uxtb	r1, r3
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072c6:	400a      	ands	r2, r1
 80072c8:	b2d2      	uxtb	r2, r2
 80072ca:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072d0:	1c5a      	adds	r2, r3, #1
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	225a      	movs	r2, #90	; 0x5a
 80072da:	5a9b      	ldrh	r3, [r3, r2]
 80072dc:	b29b      	uxth	r3, r3
 80072de:	3b01      	subs	r3, #1
 80072e0:	b299      	uxth	r1, r3
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	225a      	movs	r2, #90	; 0x5a
 80072e6:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	225a      	movs	r2, #90	; 0x5a
 80072ec:	5a9b      	ldrh	r3, [r3, r2]
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d178      	bne.n	80073e6 <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072f4:	f3ef 8310 	mrs	r3, PRIMASK
 80072f8:	61bb      	str	r3, [r7, #24]
  return(result);
 80072fa:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80072fe:	2301      	movs	r3, #1
 8007300:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007302:	69fb      	ldr	r3, [r7, #28]
 8007304:	f383 8810 	msr	PRIMASK, r3
}
 8007308:	46c0      	nop			; (mov r8, r8)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4936      	ldr	r1, [pc, #216]	; (80073f0 <UART_RxISR_8BIT+0x164>)
 8007316:	400a      	ands	r2, r1
 8007318:	601a      	str	r2, [r3, #0]
 800731a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800731c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800731e:	6a3b      	ldr	r3, [r7, #32]
 8007320:	f383 8810 	msr	PRIMASK, r3
}
 8007324:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007326:	f3ef 8310 	mrs	r3, PRIMASK
 800732a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800732c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800732e:	637b      	str	r3, [r7, #52]	; 0x34
 8007330:	2301      	movs	r3, #1
 8007332:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007336:	f383 8810 	msr	PRIMASK, r3
}
 800733a:	46c0      	nop			; (mov r8, r8)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	689a      	ldr	r2, [r3, #8]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2101      	movs	r1, #1
 8007348:	438a      	bics	r2, r1
 800734a:	609a      	str	r2, [r3, #8]
 800734c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800734e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007352:	f383 8810 	msr	PRIMASK, r3
}
 8007356:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2220      	movs	r2, #32
 800735c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007368:	2b01      	cmp	r3, #1
 800736a:	d12f      	bne.n	80073cc <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007372:	f3ef 8310 	mrs	r3, PRIMASK
 8007376:	60fb      	str	r3, [r7, #12]
  return(result);
 8007378:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800737a:	633b      	str	r3, [r7, #48]	; 0x30
 800737c:	2301      	movs	r3, #1
 800737e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	f383 8810 	msr	PRIMASK, r3
}
 8007386:	46c0      	nop			; (mov r8, r8)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	2110      	movs	r1, #16
 8007394:	438a      	bics	r2, r1
 8007396:	601a      	str	r2, [r3, #0]
 8007398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	f383 8810 	msr	PRIMASK, r3
}
 80073a2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	69db      	ldr	r3, [r3, #28]
 80073aa:	2210      	movs	r2, #16
 80073ac:	4013      	ands	r3, r2
 80073ae:	2b10      	cmp	r3, #16
 80073b0:	d103      	bne.n	80073ba <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2210      	movs	r2, #16
 80073b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2258      	movs	r2, #88	; 0x58
 80073be:	5a9a      	ldrh	r2, [r3, r2]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	0011      	movs	r1, r2
 80073c4:	0018      	movs	r0, r3
 80073c6:	f7ff fb15 	bl	80069f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80073ca:	e00c      	b.n	80073e6 <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	0018      	movs	r0, r3
 80073d0:	f7f9 fb86 	bl	8000ae0 <HAL_UART_RxCpltCallback>
}
 80073d4:	e007      	b.n	80073e6 <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	699a      	ldr	r2, [r3, #24]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2108      	movs	r1, #8
 80073e2:	430a      	orrs	r2, r1
 80073e4:	619a      	str	r2, [r3, #24]
}
 80073e6:	46c0      	nop			; (mov r8, r8)
 80073e8:	46bd      	mov	sp, r7
 80073ea:	b010      	add	sp, #64	; 0x40
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	46c0      	nop			; (mov r8, r8)
 80073f0:	fffffedf 	.word	0xfffffedf

080073f4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b090      	sub	sp, #64	; 0x40
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80073fc:	203e      	movs	r0, #62	; 0x3e
 80073fe:	183b      	adds	r3, r7, r0
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	215c      	movs	r1, #92	; 0x5c
 8007404:	5a52      	ldrh	r2, [r2, r1]
 8007406:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800740c:	2b22      	cmp	r3, #34	; 0x22
 800740e:	d000      	beq.n	8007412 <UART_RxISR_16BIT+0x1e>
 8007410:	e095      	b.n	800753e <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	213c      	movs	r1, #60	; 0x3c
 8007418:	187b      	adds	r3, r7, r1
 800741a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800741c:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007422:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8007424:	187b      	adds	r3, r7, r1
 8007426:	183a      	adds	r2, r7, r0
 8007428:	881b      	ldrh	r3, [r3, #0]
 800742a:	8812      	ldrh	r2, [r2, #0]
 800742c:	4013      	ands	r3, r2
 800742e:	b29a      	uxth	r2, r3
 8007430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007432:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007438:	1c9a      	adds	r2, r3, #2
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	225a      	movs	r2, #90	; 0x5a
 8007442:	5a9b      	ldrh	r3, [r3, r2]
 8007444:	b29b      	uxth	r3, r3
 8007446:	3b01      	subs	r3, #1
 8007448:	b299      	uxth	r1, r3
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	225a      	movs	r2, #90	; 0x5a
 800744e:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	225a      	movs	r2, #90	; 0x5a
 8007454:	5a9b      	ldrh	r3, [r3, r2]
 8007456:	b29b      	uxth	r3, r3
 8007458:	2b00      	cmp	r3, #0
 800745a:	d178      	bne.n	800754e <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800745c:	f3ef 8310 	mrs	r3, PRIMASK
 8007460:	617b      	str	r3, [r7, #20]
  return(result);
 8007462:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007464:	637b      	str	r3, [r7, #52]	; 0x34
 8007466:	2301      	movs	r3, #1
 8007468:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	f383 8810 	msr	PRIMASK, r3
}
 8007470:	46c0      	nop			; (mov r8, r8)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4936      	ldr	r1, [pc, #216]	; (8007558 <UART_RxISR_16BIT+0x164>)
 800747e:	400a      	ands	r2, r1
 8007480:	601a      	str	r2, [r3, #0]
 8007482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007484:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	f383 8810 	msr	PRIMASK, r3
}
 800748c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800748e:	f3ef 8310 	mrs	r3, PRIMASK
 8007492:	623b      	str	r3, [r7, #32]
  return(result);
 8007494:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007496:	633b      	str	r3, [r7, #48]	; 0x30
 8007498:	2301      	movs	r3, #1
 800749a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800749c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749e:	f383 8810 	msr	PRIMASK, r3
}
 80074a2:	46c0      	nop			; (mov r8, r8)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	689a      	ldr	r2, [r3, #8]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2101      	movs	r1, #1
 80074b0:	438a      	bics	r2, r1
 80074b2:	609a      	str	r2, [r3, #8]
 80074b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ba:	f383 8810 	msr	PRIMASK, r3
}
 80074be:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2220      	movs	r2, #32
 80074c4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d12f      	bne.n	8007534 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074da:	f3ef 8310 	mrs	r3, PRIMASK
 80074de:	60bb      	str	r3, [r7, #8]
  return(result);
 80074e0:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074e4:	2301      	movs	r3, #1
 80074e6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f383 8810 	msr	PRIMASK, r3
}
 80074ee:	46c0      	nop			; (mov r8, r8)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2110      	movs	r1, #16
 80074fc:	438a      	bics	r2, r1
 80074fe:	601a      	str	r2, [r3, #0]
 8007500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007502:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	f383 8810 	msr	PRIMASK, r3
}
 800750a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	69db      	ldr	r3, [r3, #28]
 8007512:	2210      	movs	r2, #16
 8007514:	4013      	ands	r3, r2
 8007516:	2b10      	cmp	r3, #16
 8007518:	d103      	bne.n	8007522 <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	2210      	movs	r2, #16
 8007520:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2258      	movs	r2, #88	; 0x58
 8007526:	5a9a      	ldrh	r2, [r3, r2]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	0011      	movs	r1, r2
 800752c:	0018      	movs	r0, r3
 800752e:	f7ff fa61 	bl	80069f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007532:	e00c      	b.n	800754e <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	0018      	movs	r0, r3
 8007538:	f7f9 fad2 	bl	8000ae0 <HAL_UART_RxCpltCallback>
}
 800753c:	e007      	b.n	800754e <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	699a      	ldr	r2, [r3, #24]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	2108      	movs	r1, #8
 800754a:	430a      	orrs	r2, r1
 800754c:	619a      	str	r2, [r3, #24]
}
 800754e:	46c0      	nop			; (mov r8, r8)
 8007550:	46bd      	mov	sp, r7
 8007552:	b010      	add	sp, #64	; 0x40
 8007554:	bd80      	pop	{r7, pc}
 8007556:	46c0      	nop			; (mov r8, r8)
 8007558:	fffffedf 	.word	0xfffffedf

0800755c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007564:	46c0      	nop			; (mov r8, r8)
 8007566:	46bd      	mov	sp, r7
 8007568:	b002      	add	sp, #8
 800756a:	bd80      	pop	{r7, pc}

0800756c <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b088      	sub	sp, #32
 8007570:	af02      	add	r7, sp, #8
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	1d3b      	adds	r3, r7, #4
 8007576:	6019      	str	r1, [r3, #0]
 8007578:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800757a:	2317      	movs	r3, #23
 800757c:	18fb      	adds	r3, r7, r3
 800757e:	2200      	movs	r2, #0
 8007580:	701a      	strb	r2, [r3, #0]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2274      	movs	r2, #116	; 0x74
 8007586:	5c9b      	ldrb	r3, [r3, r2]
 8007588:	2b01      	cmp	r3, #1
 800758a:	d101      	bne.n	8007590 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x24>
 800758c:	2302      	movs	r3, #2
 800758e:	e04a      	b.n	8007626 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xba>
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2274      	movs	r2, #116	; 0x74
 8007594:	2101      	movs	r1, #1
 8007596:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2224      	movs	r2, #36	; 0x24
 800759c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2101      	movs	r1, #1
 80075aa:	438a      	bics	r2, r1
 80075ac:	601a      	str	r2, [r3, #0]

#if defined(USART_CR3_WUS)
  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	4a1e      	ldr	r2, [pc, #120]	; (8007630 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc4>)
 80075b6:	4013      	ands	r3, r2
 80075b8:	0019      	movs	r1, r3
 80075ba:	1d3b      	adds	r3, r7, #4
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	430a      	orrs	r2, r1
 80075c4:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_WUS */

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 80075c6:	1d3b      	adds	r3, r7, #4
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d105      	bne.n	80075da <HAL_UARTEx_StopModeWakeUpSourceConfig+0x6e>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 80075ce:	1d3b      	adds	r3, r7, #4
 80075d0:	68f8      	ldr	r0, [r7, #12]
 80075d2:	6819      	ldr	r1, [r3, #0]
 80075d4:	685a      	ldr	r2, [r3, #4]
 80075d6:	f000 f860 	bl	800769a <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2101      	movs	r1, #1
 80075e6:	430a      	orrs	r2, r1
 80075e8:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80075ea:	f7fa fd01 	bl	8001ff0 <HAL_GetTick>
 80075ee:	0003      	movs	r3, r0
 80075f0:	613b      	str	r3, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	2280      	movs	r2, #128	; 0x80
 80075f6:	03d1      	lsls	r1, r2, #15
 80075f8:	68f8      	ldr	r0, [r7, #12]
 80075fa:	4a0e      	ldr	r2, [pc, #56]	; (8007634 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc8>)
 80075fc:	9200      	str	r2, [sp, #0]
 80075fe:	2200      	movs	r2, #0
 8007600:	f7ff fc40 	bl	8006e84 <UART_WaitOnFlagUntilTimeout>
 8007604:	1e03      	subs	r3, r0, #0
 8007606:	d004      	beq.n	8007612 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa6>
  {
    status = HAL_TIMEOUT;
 8007608:	2317      	movs	r3, #23
 800760a:	18fb      	adds	r3, r7, r3
 800760c:	2203      	movs	r2, #3
 800760e:	701a      	strb	r2, [r3, #0]
 8007610:	e002      	b.n	8007618 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xac>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2220      	movs	r2, #32
 8007616:	679a      	str	r2, [r3, #120]	; 0x78
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2274      	movs	r2, #116	; 0x74
 800761c:	2100      	movs	r1, #0
 800761e:	5499      	strb	r1, [r3, r2]

  return status;
 8007620:	2317      	movs	r3, #23
 8007622:	18fb      	adds	r3, r7, r3
 8007624:	781b      	ldrb	r3, [r3, #0]
}
 8007626:	0018      	movs	r0, r3
 8007628:	46bd      	mov	sp, r7
 800762a:	b006      	add	sp, #24
 800762c:	bd80      	pop	{r7, pc}
 800762e:	46c0      	nop			; (mov r8, r8)
 8007630:	ffcfffff 	.word	0xffcfffff
 8007634:	01ffffff 	.word	0x01ffffff

08007638 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b086      	sub	sp, #24
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2274      	movs	r2, #116	; 0x74
 8007644:	5c9b      	ldrb	r3, [r3, r2]
 8007646:	2b01      	cmp	r3, #1
 8007648:	d101      	bne.n	800764e <HAL_UARTEx_EnableStopMode+0x16>
 800764a:	2302      	movs	r3, #2
 800764c:	e021      	b.n	8007692 <HAL_UARTEx_EnableStopMode+0x5a>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2274      	movs	r2, #116	; 0x74
 8007652:	2101      	movs	r1, #1
 8007654:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007656:	f3ef 8310 	mrs	r3, PRIMASK
 800765a:	60bb      	str	r3, [r7, #8]
  return(result);
 800765c:	68bb      	ldr	r3, [r7, #8]

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800765e:	617b      	str	r3, [r7, #20]
 8007660:	2301      	movs	r3, #1
 8007662:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f383 8810 	msr	PRIMASK, r3
}
 800766a:	46c0      	nop			; (mov r8, r8)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	2102      	movs	r1, #2
 8007678:	430a      	orrs	r2, r1
 800767a:	601a      	str	r2, [r3, #0]
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	f383 8810 	msr	PRIMASK, r3
}
 8007686:	46c0      	nop			; (mov r8, r8)

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2274      	movs	r2, #116	; 0x74
 800768c:	2100      	movs	r1, #0
 800768e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	0018      	movs	r0, r3
 8007694:	46bd      	mov	sp, r7
 8007696:	b006      	add	sp, #24
 8007698:	bd80      	pop	{r7, pc}

0800769a <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b084      	sub	sp, #16
 800769e:	af00      	add	r7, sp, #0
 80076a0:	60f8      	str	r0, [r7, #12]
 80076a2:	1d3b      	adds	r3, r7, #4
 80076a4:	6019      	str	r1, [r3, #0]
 80076a6:	605a      	str	r2, [r3, #4]
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	2210      	movs	r2, #16
 80076b0:	4393      	bics	r3, r2
 80076b2:	001a      	movs	r2, r3
 80076b4:	1d3b      	adds	r3, r7, #4
 80076b6:	889b      	ldrh	r3, [r3, #4]
 80076b8:	0019      	movs	r1, r3
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	430a      	orrs	r2, r1
 80076c0:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	021b      	lsls	r3, r3, #8
 80076ca:	0a19      	lsrs	r1, r3, #8
 80076cc:	1d3b      	adds	r3, r7, #4
 80076ce:	799b      	ldrb	r3, [r3, #6]
 80076d0:	061a      	lsls	r2, r3, #24
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	430a      	orrs	r2, r1
 80076d8:	605a      	str	r2, [r3, #4]
}
 80076da:	46c0      	nop			; (mov r8, r8)
 80076dc:	46bd      	mov	sp, r7
 80076de:	b004      	add	sp, #16
 80076e0:	bd80      	pop	{r7, pc}
	...

080076e4 <__errno>:
 80076e4:	4b01      	ldr	r3, [pc, #4]	; (80076ec <__errno+0x8>)
 80076e6:	6818      	ldr	r0, [r3, #0]
 80076e8:	4770      	bx	lr
 80076ea:	46c0      	nop			; (mov r8, r8)
 80076ec:	20000034 	.word	0x20000034

080076f0 <__libc_init_array>:
 80076f0:	b570      	push	{r4, r5, r6, lr}
 80076f2:	2600      	movs	r6, #0
 80076f4:	4d0c      	ldr	r5, [pc, #48]	; (8007728 <__libc_init_array+0x38>)
 80076f6:	4c0d      	ldr	r4, [pc, #52]	; (800772c <__libc_init_array+0x3c>)
 80076f8:	1b64      	subs	r4, r4, r5
 80076fa:	10a4      	asrs	r4, r4, #2
 80076fc:	42a6      	cmp	r6, r4
 80076fe:	d109      	bne.n	8007714 <__libc_init_array+0x24>
 8007700:	2600      	movs	r6, #0
 8007702:	f000 f93b 	bl	800797c <_init>
 8007706:	4d0a      	ldr	r5, [pc, #40]	; (8007730 <__libc_init_array+0x40>)
 8007708:	4c0a      	ldr	r4, [pc, #40]	; (8007734 <__libc_init_array+0x44>)
 800770a:	1b64      	subs	r4, r4, r5
 800770c:	10a4      	asrs	r4, r4, #2
 800770e:	42a6      	cmp	r6, r4
 8007710:	d105      	bne.n	800771e <__libc_init_array+0x2e>
 8007712:	bd70      	pop	{r4, r5, r6, pc}
 8007714:	00b3      	lsls	r3, r6, #2
 8007716:	58eb      	ldr	r3, [r5, r3]
 8007718:	4798      	blx	r3
 800771a:	3601      	adds	r6, #1
 800771c:	e7ee      	b.n	80076fc <__libc_init_array+0xc>
 800771e:	00b3      	lsls	r3, r6, #2
 8007720:	58eb      	ldr	r3, [r5, r3]
 8007722:	4798      	blx	r3
 8007724:	3601      	adds	r6, #1
 8007726:	e7f2      	b.n	800770e <__libc_init_array+0x1e>
 8007728:	08007a80 	.word	0x08007a80
 800772c:	08007a80 	.word	0x08007a80
 8007730:	08007a80 	.word	0x08007a80
 8007734:	08007a84 	.word	0x08007a84

08007738 <malloc>:
 8007738:	b510      	push	{r4, lr}
 800773a:	4b03      	ldr	r3, [pc, #12]	; (8007748 <malloc+0x10>)
 800773c:	0001      	movs	r1, r0
 800773e:	6818      	ldr	r0, [r3, #0]
 8007740:	f000 f882 	bl	8007848 <_malloc_r>
 8007744:	bd10      	pop	{r4, pc}
 8007746:	46c0      	nop			; (mov r8, r8)
 8007748:	20000034 	.word	0x20000034

0800774c <free>:
 800774c:	b510      	push	{r4, lr}
 800774e:	4b03      	ldr	r3, [pc, #12]	; (800775c <free+0x10>)
 8007750:	0001      	movs	r1, r0
 8007752:	6818      	ldr	r0, [r3, #0]
 8007754:	f000 f80c 	bl	8007770 <_free_r>
 8007758:	bd10      	pop	{r4, pc}
 800775a:	46c0      	nop			; (mov r8, r8)
 800775c:	20000034 	.word	0x20000034

08007760 <memset>:
 8007760:	0003      	movs	r3, r0
 8007762:	1882      	adds	r2, r0, r2
 8007764:	4293      	cmp	r3, r2
 8007766:	d100      	bne.n	800776a <memset+0xa>
 8007768:	4770      	bx	lr
 800776a:	7019      	strb	r1, [r3, #0]
 800776c:	3301      	adds	r3, #1
 800776e:	e7f9      	b.n	8007764 <memset+0x4>

08007770 <_free_r>:
 8007770:	b570      	push	{r4, r5, r6, lr}
 8007772:	0005      	movs	r5, r0
 8007774:	2900      	cmp	r1, #0
 8007776:	d010      	beq.n	800779a <_free_r+0x2a>
 8007778:	1f0c      	subs	r4, r1, #4
 800777a:	6823      	ldr	r3, [r4, #0]
 800777c:	2b00      	cmp	r3, #0
 800777e:	da00      	bge.n	8007782 <_free_r+0x12>
 8007780:	18e4      	adds	r4, r4, r3
 8007782:	0028      	movs	r0, r5
 8007784:	f000 f8e8 	bl	8007958 <__malloc_lock>
 8007788:	4a1d      	ldr	r2, [pc, #116]	; (8007800 <_free_r+0x90>)
 800778a:	6813      	ldr	r3, [r2, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d105      	bne.n	800779c <_free_r+0x2c>
 8007790:	6063      	str	r3, [r4, #4]
 8007792:	6014      	str	r4, [r2, #0]
 8007794:	0028      	movs	r0, r5
 8007796:	f000 f8e7 	bl	8007968 <__malloc_unlock>
 800779a:	bd70      	pop	{r4, r5, r6, pc}
 800779c:	42a3      	cmp	r3, r4
 800779e:	d908      	bls.n	80077b2 <_free_r+0x42>
 80077a0:	6821      	ldr	r1, [r4, #0]
 80077a2:	1860      	adds	r0, r4, r1
 80077a4:	4283      	cmp	r3, r0
 80077a6:	d1f3      	bne.n	8007790 <_free_r+0x20>
 80077a8:	6818      	ldr	r0, [r3, #0]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	1841      	adds	r1, r0, r1
 80077ae:	6021      	str	r1, [r4, #0]
 80077b0:	e7ee      	b.n	8007790 <_free_r+0x20>
 80077b2:	001a      	movs	r2, r3
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d001      	beq.n	80077be <_free_r+0x4e>
 80077ba:	42a3      	cmp	r3, r4
 80077bc:	d9f9      	bls.n	80077b2 <_free_r+0x42>
 80077be:	6811      	ldr	r1, [r2, #0]
 80077c0:	1850      	adds	r0, r2, r1
 80077c2:	42a0      	cmp	r0, r4
 80077c4:	d10b      	bne.n	80077de <_free_r+0x6e>
 80077c6:	6820      	ldr	r0, [r4, #0]
 80077c8:	1809      	adds	r1, r1, r0
 80077ca:	1850      	adds	r0, r2, r1
 80077cc:	6011      	str	r1, [r2, #0]
 80077ce:	4283      	cmp	r3, r0
 80077d0:	d1e0      	bne.n	8007794 <_free_r+0x24>
 80077d2:	6818      	ldr	r0, [r3, #0]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	1841      	adds	r1, r0, r1
 80077d8:	6011      	str	r1, [r2, #0]
 80077da:	6053      	str	r3, [r2, #4]
 80077dc:	e7da      	b.n	8007794 <_free_r+0x24>
 80077de:	42a0      	cmp	r0, r4
 80077e0:	d902      	bls.n	80077e8 <_free_r+0x78>
 80077e2:	230c      	movs	r3, #12
 80077e4:	602b      	str	r3, [r5, #0]
 80077e6:	e7d5      	b.n	8007794 <_free_r+0x24>
 80077e8:	6821      	ldr	r1, [r4, #0]
 80077ea:	1860      	adds	r0, r4, r1
 80077ec:	4283      	cmp	r3, r0
 80077ee:	d103      	bne.n	80077f8 <_free_r+0x88>
 80077f0:	6818      	ldr	r0, [r3, #0]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	1841      	adds	r1, r0, r1
 80077f6:	6021      	str	r1, [r4, #0]
 80077f8:	6063      	str	r3, [r4, #4]
 80077fa:	6054      	str	r4, [r2, #4]
 80077fc:	e7ca      	b.n	8007794 <_free_r+0x24>
 80077fe:	46c0      	nop			; (mov r8, r8)
 8007800:	20000434 	.word	0x20000434

08007804 <sbrk_aligned>:
 8007804:	b570      	push	{r4, r5, r6, lr}
 8007806:	4e0f      	ldr	r6, [pc, #60]	; (8007844 <sbrk_aligned+0x40>)
 8007808:	000d      	movs	r5, r1
 800780a:	6831      	ldr	r1, [r6, #0]
 800780c:	0004      	movs	r4, r0
 800780e:	2900      	cmp	r1, #0
 8007810:	d102      	bne.n	8007818 <sbrk_aligned+0x14>
 8007812:	f000 f88f 	bl	8007934 <_sbrk_r>
 8007816:	6030      	str	r0, [r6, #0]
 8007818:	0029      	movs	r1, r5
 800781a:	0020      	movs	r0, r4
 800781c:	f000 f88a 	bl	8007934 <_sbrk_r>
 8007820:	1c43      	adds	r3, r0, #1
 8007822:	d00a      	beq.n	800783a <sbrk_aligned+0x36>
 8007824:	2303      	movs	r3, #3
 8007826:	1cc5      	adds	r5, r0, #3
 8007828:	439d      	bics	r5, r3
 800782a:	42a8      	cmp	r0, r5
 800782c:	d007      	beq.n	800783e <sbrk_aligned+0x3a>
 800782e:	1a29      	subs	r1, r5, r0
 8007830:	0020      	movs	r0, r4
 8007832:	f000 f87f 	bl	8007934 <_sbrk_r>
 8007836:	1c43      	adds	r3, r0, #1
 8007838:	d101      	bne.n	800783e <sbrk_aligned+0x3a>
 800783a:	2501      	movs	r5, #1
 800783c:	426d      	negs	r5, r5
 800783e:	0028      	movs	r0, r5
 8007840:	bd70      	pop	{r4, r5, r6, pc}
 8007842:	46c0      	nop			; (mov r8, r8)
 8007844:	20000438 	.word	0x20000438

08007848 <_malloc_r>:
 8007848:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800784a:	2203      	movs	r2, #3
 800784c:	1ccb      	adds	r3, r1, #3
 800784e:	4393      	bics	r3, r2
 8007850:	3308      	adds	r3, #8
 8007852:	0006      	movs	r6, r0
 8007854:	001f      	movs	r7, r3
 8007856:	2b0c      	cmp	r3, #12
 8007858:	d232      	bcs.n	80078c0 <_malloc_r+0x78>
 800785a:	270c      	movs	r7, #12
 800785c:	42b9      	cmp	r1, r7
 800785e:	d831      	bhi.n	80078c4 <_malloc_r+0x7c>
 8007860:	0030      	movs	r0, r6
 8007862:	f000 f879 	bl	8007958 <__malloc_lock>
 8007866:	4d32      	ldr	r5, [pc, #200]	; (8007930 <_malloc_r+0xe8>)
 8007868:	682b      	ldr	r3, [r5, #0]
 800786a:	001c      	movs	r4, r3
 800786c:	2c00      	cmp	r4, #0
 800786e:	d12e      	bne.n	80078ce <_malloc_r+0x86>
 8007870:	0039      	movs	r1, r7
 8007872:	0030      	movs	r0, r6
 8007874:	f7ff ffc6 	bl	8007804 <sbrk_aligned>
 8007878:	0004      	movs	r4, r0
 800787a:	1c43      	adds	r3, r0, #1
 800787c:	d11e      	bne.n	80078bc <_malloc_r+0x74>
 800787e:	682c      	ldr	r4, [r5, #0]
 8007880:	0025      	movs	r5, r4
 8007882:	2d00      	cmp	r5, #0
 8007884:	d14a      	bne.n	800791c <_malloc_r+0xd4>
 8007886:	6823      	ldr	r3, [r4, #0]
 8007888:	0029      	movs	r1, r5
 800788a:	18e3      	adds	r3, r4, r3
 800788c:	0030      	movs	r0, r6
 800788e:	9301      	str	r3, [sp, #4]
 8007890:	f000 f850 	bl	8007934 <_sbrk_r>
 8007894:	9b01      	ldr	r3, [sp, #4]
 8007896:	4283      	cmp	r3, r0
 8007898:	d143      	bne.n	8007922 <_malloc_r+0xda>
 800789a:	6823      	ldr	r3, [r4, #0]
 800789c:	3703      	adds	r7, #3
 800789e:	1aff      	subs	r7, r7, r3
 80078a0:	2303      	movs	r3, #3
 80078a2:	439f      	bics	r7, r3
 80078a4:	3708      	adds	r7, #8
 80078a6:	2f0c      	cmp	r7, #12
 80078a8:	d200      	bcs.n	80078ac <_malloc_r+0x64>
 80078aa:	270c      	movs	r7, #12
 80078ac:	0039      	movs	r1, r7
 80078ae:	0030      	movs	r0, r6
 80078b0:	f7ff ffa8 	bl	8007804 <sbrk_aligned>
 80078b4:	1c43      	adds	r3, r0, #1
 80078b6:	d034      	beq.n	8007922 <_malloc_r+0xda>
 80078b8:	6823      	ldr	r3, [r4, #0]
 80078ba:	19df      	adds	r7, r3, r7
 80078bc:	6027      	str	r7, [r4, #0]
 80078be:	e013      	b.n	80078e8 <_malloc_r+0xa0>
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	dacb      	bge.n	800785c <_malloc_r+0x14>
 80078c4:	230c      	movs	r3, #12
 80078c6:	2500      	movs	r5, #0
 80078c8:	6033      	str	r3, [r6, #0]
 80078ca:	0028      	movs	r0, r5
 80078cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80078ce:	6822      	ldr	r2, [r4, #0]
 80078d0:	1bd1      	subs	r1, r2, r7
 80078d2:	d420      	bmi.n	8007916 <_malloc_r+0xce>
 80078d4:	290b      	cmp	r1, #11
 80078d6:	d917      	bls.n	8007908 <_malloc_r+0xc0>
 80078d8:	19e2      	adds	r2, r4, r7
 80078da:	6027      	str	r7, [r4, #0]
 80078dc:	42a3      	cmp	r3, r4
 80078de:	d111      	bne.n	8007904 <_malloc_r+0xbc>
 80078e0:	602a      	str	r2, [r5, #0]
 80078e2:	6863      	ldr	r3, [r4, #4]
 80078e4:	6011      	str	r1, [r2, #0]
 80078e6:	6053      	str	r3, [r2, #4]
 80078e8:	0030      	movs	r0, r6
 80078ea:	0025      	movs	r5, r4
 80078ec:	f000 f83c 	bl	8007968 <__malloc_unlock>
 80078f0:	2207      	movs	r2, #7
 80078f2:	350b      	adds	r5, #11
 80078f4:	1d23      	adds	r3, r4, #4
 80078f6:	4395      	bics	r5, r2
 80078f8:	1aea      	subs	r2, r5, r3
 80078fa:	429d      	cmp	r5, r3
 80078fc:	d0e5      	beq.n	80078ca <_malloc_r+0x82>
 80078fe:	1b5b      	subs	r3, r3, r5
 8007900:	50a3      	str	r3, [r4, r2]
 8007902:	e7e2      	b.n	80078ca <_malloc_r+0x82>
 8007904:	605a      	str	r2, [r3, #4]
 8007906:	e7ec      	b.n	80078e2 <_malloc_r+0x9a>
 8007908:	6862      	ldr	r2, [r4, #4]
 800790a:	42a3      	cmp	r3, r4
 800790c:	d101      	bne.n	8007912 <_malloc_r+0xca>
 800790e:	602a      	str	r2, [r5, #0]
 8007910:	e7ea      	b.n	80078e8 <_malloc_r+0xa0>
 8007912:	605a      	str	r2, [r3, #4]
 8007914:	e7e8      	b.n	80078e8 <_malloc_r+0xa0>
 8007916:	0023      	movs	r3, r4
 8007918:	6864      	ldr	r4, [r4, #4]
 800791a:	e7a7      	b.n	800786c <_malloc_r+0x24>
 800791c:	002c      	movs	r4, r5
 800791e:	686d      	ldr	r5, [r5, #4]
 8007920:	e7af      	b.n	8007882 <_malloc_r+0x3a>
 8007922:	230c      	movs	r3, #12
 8007924:	0030      	movs	r0, r6
 8007926:	6033      	str	r3, [r6, #0]
 8007928:	f000 f81e 	bl	8007968 <__malloc_unlock>
 800792c:	e7cd      	b.n	80078ca <_malloc_r+0x82>
 800792e:	46c0      	nop			; (mov r8, r8)
 8007930:	20000434 	.word	0x20000434

08007934 <_sbrk_r>:
 8007934:	2300      	movs	r3, #0
 8007936:	b570      	push	{r4, r5, r6, lr}
 8007938:	4d06      	ldr	r5, [pc, #24]	; (8007954 <_sbrk_r+0x20>)
 800793a:	0004      	movs	r4, r0
 800793c:	0008      	movs	r0, r1
 800793e:	602b      	str	r3, [r5, #0]
 8007940:	f7fa fa96 	bl	8001e70 <_sbrk>
 8007944:	1c43      	adds	r3, r0, #1
 8007946:	d103      	bne.n	8007950 <_sbrk_r+0x1c>
 8007948:	682b      	ldr	r3, [r5, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d000      	beq.n	8007950 <_sbrk_r+0x1c>
 800794e:	6023      	str	r3, [r4, #0]
 8007950:	bd70      	pop	{r4, r5, r6, pc}
 8007952:	46c0      	nop			; (mov r8, r8)
 8007954:	2000043c 	.word	0x2000043c

08007958 <__malloc_lock>:
 8007958:	b510      	push	{r4, lr}
 800795a:	4802      	ldr	r0, [pc, #8]	; (8007964 <__malloc_lock+0xc>)
 800795c:	f000 f80c 	bl	8007978 <__retarget_lock_acquire_recursive>
 8007960:	bd10      	pop	{r4, pc}
 8007962:	46c0      	nop			; (mov r8, r8)
 8007964:	20000440 	.word	0x20000440

08007968 <__malloc_unlock>:
 8007968:	b510      	push	{r4, lr}
 800796a:	4802      	ldr	r0, [pc, #8]	; (8007974 <__malloc_unlock+0xc>)
 800796c:	f000 f805 	bl	800797a <__retarget_lock_release_recursive>
 8007970:	bd10      	pop	{r4, pc}
 8007972:	46c0      	nop			; (mov r8, r8)
 8007974:	20000440 	.word	0x20000440

08007978 <__retarget_lock_acquire_recursive>:
 8007978:	4770      	bx	lr

0800797a <__retarget_lock_release_recursive>:
 800797a:	4770      	bx	lr

0800797c <_init>:
 800797c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800797e:	46c0      	nop			; (mov r8, r8)
 8007980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007982:	bc08      	pop	{r3}
 8007984:	469e      	mov	lr, r3
 8007986:	4770      	bx	lr

08007988 <_fini>:
 8007988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800798a:	46c0      	nop			; (mov r8, r8)
 800798c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800798e:	bc08      	pop	{r3}
 8007990:	469e      	mov	lr, r3
 8007992:	4770      	bx	lr
